ARM GAS  stm32-tbi.s 			page 1


   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	/*****************************************
  20              	    REGISTERS USAGE 
  21              	
  22              	 R0-R3      // function parameters 
  23              	 R4         //  system variables base address 
  24              	 R5         //  FOR loop variable address 
  25              	 R6         //  FOR loop limit 
  26              	 R7         //  FOR loop increment 
  27              	 R8,R9      //  temporary registers
  28              	 R10        //  interpreter line index 
  29              	 R11        //  interpreter BASIC line address 
  30              	 R12        //  parameters stack pointer 
  31              	*****************************************/
  32              	
  33              	  .syntax unified
  34              	  .cpu cortex-m3
  35              	  .fpu softvfp
  36              	  .thumb
  37              	
  38              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
ARM GAS  stm32-tbi.s 			page 2


  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
ARM GAS  stm32-tbi.s 			page 3


  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
ARM GAS  stm32-tbi.s 			page 4


 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
 190              	
ARM GAS  stm32-tbi.s 			page 5


 191              	/*   ADC1 registers */
 192              	.equ ADC1_BASE_ADR, 0x40012400
 193              	.equ ADC_SR,0
 194              	.equ ADC_CR1,0X4
 195              	.equ ADC_CR2,0X8
 196              	.equ ADC_SMPR1,0XC
 197              	.equ ADC_SMPR2,0X10
 198              	.equ ADC_JOFR1,0X14
 199              	.equ ADC_JOFR2,0X18
 200              	.equ ADC_JOFR3,0X1C
 201              	.equ ADC_JOFR4,0X20
 202              	.equ ADC_HTR,0X24
 203              	.equ ADC_LTR,0X28
 204              	.equ ADC_SQR1,0X2C
 205              	.equ ADC_SQR2,0X30
 206              	.equ ADC_SQR3,0X34
 207              	.equ ADC_JSQR,0X38
 208              	.equ ADC_JDR1,0X3C
 209              	.equ ADC_JDR2,0X40
 210              	.equ ADC_JDR3,0X44
 211              	.equ ADC_JDR4,0X48
 212              	.equ ADC_DR,0X4C
 213              	
 214              	/* timer registers */
 215              	.equ TIMER1_BASE_ADR,0X40012C00
 216              	.equ TIMER2_BASE_ADR,0x40000000
 217              	.equ TIMER3_BASE_ADR,0x40000400
 218              	.equ TIMER4_BASE_ADR,0x40000800
 219              	
 220              	.equ TIM_CR1,0
 221              	.equ TIM_CR2,4
 222              	.equ TIM_SMCR,8
 223              	.equ TIM_DIER,0xc
 224              	.equ TIM_SR,0X10
 225              	.equ TIM_EGR,0X14
 226              	.equ TIM_CCMR1,0X18
 227              	.equ TIM_CCMR2,0X1C
 228              	.equ TIM_CCER,0X20
 229              	.equ TIM_CNT,0X24
 230              	.equ TIM_PSC,0X28
 231              	.equ TIM_ARR,0X2C
 232              	.equ TIM_CCR1,0X34
 233              	.equ TIM_CCR2,0X38
 234              	.equ TIM_DCR,0X48
 235              	.equ TIM_DMAR,0X4C
  39              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  stm32-tbi.s 			page 6


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  stm32-tbi.s 			page 7


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  40              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
ARM GAS  stm32-tbi.s 			page 8


  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
ARM GAS  stm32-tbi.s 			page 9


  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
ARM GAS  stm32-tbi.s 			page 10


 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
ARM GAS  stm32-tbi.s 			page 11


 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  41              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
ARM GAS  stm32-tbi.s 			page 12


  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
ARM GAS  stm32-tbi.s 			page 13


  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ READ_IDX, QKEY_IDX+1 // 
  85              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  86              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  87              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  88              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  89              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  90              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  91              	    .equ SAVE_IDX, RUN_IDX+1 // 
  92              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  93              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  94              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  95              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  96              	    .equ SPC_IDX,SLEEP_IDX+1 //
  97              	    .equ STEP_IDX, SPC_IDX+1 // 
  98              	    .equ STOP_IDX, STEP_IDX+1 // 
  99              	    .equ STORE_IDX,STOP_IDX+1
 100              	    .equ TAB_IDX, STORE_IDX+1 //
 101              	    .equ THEN_IDX,TAB_IDX+1
 102              	    .equ TICKS_IDX, THEN_IDX+1 // 
 103              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 104              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 105              	    .equ TO_IDX, TMROUT_IDX+1 // 
 106              	    .equ TONE_IDX,TO_IDX+1
 107              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 108              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 109              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 110              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 111              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 112              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 113              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 114              	    .equ XOR_IDX, WORDS_IDX+1 //
 115              	    .equ XPOS_IDX,XOR_IDX+1 //
 116              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 117              	
  42              	
  43              	/* blue pill specific constants */ 
  44              	  .equ LED_GPIO, GPIOC_BASE_ADR
  45              	  .equ LED_PIN, 13
  46              	  .equ UART, USART1_BASE_ADR 
  47              	
  48              	
  49              	/*************************************
  50              	*   interrupt service vectors table 
  51              	**************************************/
  52              	   .section  .isr_vector,"a",%progbits
  53              	  .type  isr_vectors, %object
  54              	
  55              	isr_vectors:
ARM GAS  stm32-tbi.s 			page 14


  56 0000 00000000 	  .word    _mstack          /* main return stack address */
  57 0004 00000000 	  .word    reset_handler    /* startup address */
  58              	/* core interrupts || exceptions */
  59 0008 00000000 	  .word    default_handler  /*  -14 NMI */
  60 000c 00000000 	  .word    default_handler  /*  -13 HardFault */
  61 0010 00000000 	  .word    default_handler  /*  -12 Memory Management */
  62 0014 00000000 	  .word    default_handler  /* -11 Bus fault */
  63 0018 00000000 	  .word    default_handler  /* -10 Usage fault */
  64 001c 00000000 	  .word    0 /* -9 */
  65 0020 00000000 	  .word    0 /* -8 */ 
  66 0024 00000000 	  .word    0 /* -7 */
  67 0028 00000000 	  .word    0	/* -6 */
  68 002c 00000000 	  .word    default_handler  /* -5 SWI instruction */
  69 0030 00000000 	  .word    default_handler  /* -4 Debug monitor */
  70 0034 00000000 	  .word    0 /* -3 */
  71 0038 00000000 	  .word    default_handler  /* -2 PendSV */
  72 003c 00000000 	  .word    systick_handler  /* -1 Systick */
  73              	 irq0:  
  74              	  /* External Interrupts */
  75 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  76 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  77 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  78 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  79 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  80 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  81 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  82 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  83 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  84 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  85 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  86 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  87 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  88 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  89 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  90 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  91 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  92 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  93 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  94 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
  95 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
  96 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
  97 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
  98 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  99 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 100 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 101 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 102 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 103 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 104 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 105 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 106 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 107 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 108 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 109 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 110 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 111 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 112 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
ARM GAS  stm32-tbi.s 			page 15


 113 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 114 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 115 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 116 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 117 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 118 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 119 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 120 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 121 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 122 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 123 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 124 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 125 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 126 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 127 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 128 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 129 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 130 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 131 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 132 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 133 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 134 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 135              	isr_end:
 136              	  .global vectors_size 
 137 0130 30010000 	vectors_size: .word isr_end - isr_vectors 
 138              	
 139              	
 140              	/*************************************
 141              	    EXCEPTIONS & INTERRUPTS HANDLERS 
 142              	*************************************/
 143              	
 144              	/*****************************************************
 145              	  default isr handler called on unexpected interrupt
 146              	*****************************************************/
 147              	   .section  .text , "ax", %progbits 
 148              	    _GBL_FUNC default_handler 
 149 0000 DFF89C04 	    ldr r0,=exception_msg 
 150 0004 00B5FFF7 	    _CALL uart_puts 
 150      FEFF5DF8 
 150      04EB
 151              	// delay
 152 000e 4FF40040 	    mov r0,#0x8000
 153 0012 0138     	    1: subs r0,#1 
 154 0014 FDD1     	    bne 1b 
 155 0016 42E0     	    b reset_mcu    
 156              	    .p2align 2 
 157              	exception_msg:
 158 0018 0A657865 	  	.asciz "\nexeption reboot!\n"
 158      7074696F 
 158      6E207265 
 158      626F6F74 
 158      210A00
 159              	
 160              	/*********************************
 161              		system milliseconds counter
 162              	*********************************/	
 163 002b 00       	    _GBL_FUNC systick_handler
ARM GAS  stm32-tbi.s 			page 16


 164 002c E069     	  ldr r0,[UPP,#TICKS]  
 165 002e 00F10100 	  add r0,#1
 166 0032 E061     	  str r0,[UPP,#TICKS]
 167 0034 206A     	  ldr r0,[UPP,#TIMER]
 168 0036 10B1     	  cbz r0, 9f
 169 0038 A0F10100 	  sub r0,#1
 170 003c 2062     	  str r0,[UPP,#TIMER]
 171              	9: 
 172 003e 7047     	  _RET 
 173              	
 174              	/**************************
 175              		UART RX handler
 176              	**************************/
 177              	    _GBL_FUNC uart_rx_handler
 178 0040 4FF46050 	    _MOV32 r0,UART 
 178      C4F20100 
 179 0048 0168     	    ldr r1,[r0,#USART_SR]
 180 004a 8288     	    ldrh r2,[r0,#USART_DR]
 181 004c 11F0200F 	    tst r1,#(1<<5) // RXNE 
 182 0050 0DD0     	    beq 2f // no char received 
 183 0052 032A     	    cmp r2,#3 // CTRL_C // cold restart
 184 0054 3FF4FEAF 	    beq user_reboot // received CTRL-C then reboot MCU 
 185 0058 022A     	    cmp r2,#2 // CTRL_B  break program
 186 005a 09D0     	    beq 3f   
 187 005c 04F15000 	    add r0,UPP,#RX_QUEUE
 188 0060 E16C     	    ldr r1,[UPP,#RX_TAIL]
 189 0062 4254     	    strb r2,[r0,r1]
 190 0064 01F10101 	    add r1,#1 
 191 0068 01F00F01 	    and r1,#(RX_QUEUE_SIZE-1)
 192 006c E164     	    str r1,[UPP,#RX_TAIL]
 193              	2:
 194 006e 7047     	  	_RET 
 195 0070 00B5FFF7 	3:  _CALL uart_flush_queue
 195      FEFF5DF8 
 195      04EB
 196 007a DFF82804 	    ldr r0,=warm_start 
 197 007e 40F00100 	    orr r0,#1 
 198 0082 0690     	    str r0,[sp,#0x18]
 199 0084 7047     	    _RET 
 200              	
 201 0086 00BF     	    _GBL_FUNC user_reboot   
 202 0088 DFF81C04 	    ldr r0,=user_reboot_msg
 203 008c 00B5FFF7 	    _CALL uart_puts 
 203      FEFF5DF8 
 203      04EB
 204              	// delay 
 205 0096 4FF40040 	    mov r0,#0x8000
 206 009a 0138     	1: subs r0,#1  
 207 009c FDD1     	    bne 1b 
 208              	reset_mcu: 
 209 009e 0448     	    ldr r0,scb_adr 
 210 00a0 C168     	    ldr r1,[r0,#SCB_AIRCR]
 211 00a2 41F00401 	    orr r1,#(1<<2)
 212 00a6 C0F2FA51 	    movt r1,#SCB_VECTKEY
 213 00aa C160     	    str r1,[r0,#SCB_AIRCR]
 214 00ac FEE7     	    b . 
 215 00ae 00BF     	    .p2align 2 
ARM GAS  stm32-tbi.s 			page 17


 216              	scb_adr:
 217 00b0 00ED00E0 	  	.word SCB_BASE_ADR 
 218              	user_reboot_msg:
 219 00b4 0A757365 		  .asciz "\nuser reboot!\n"
 219      72207265 
 219      626F6F74 
 219      210A00
 220 00c3 00       		  .p2align 2 
 221              	
 222              	/**************************************
 223              	  reset_handler execute at MCU reset
 224              	***************************************/
 225              	    _GBL_FUNC reset_handler
 226 00c4 4FF4A040 	    _MOV32 r0,RAM_END 
 226      C2F20000 
 227 00cc 8546     	    mov sp,r0 
 228 00ce 00F02FF8 	    bl remap  
 229 00d2 00F045F8 	    bl	init_devices	 	/* RCC, GPIOs */
 230 00d6 00F0A1F8 	    bl  uart_init
 231 00da FFF7FEFF 	    bl  cold_start  /* initialize BASIC SYSTEM */ 
 232 00de 00F001F8 	    bl  test 
 233 00e2 FEE7     	    b .  
 234              	
 235              	    _FUNC test
 236 00e4 4FF00004 	  _MOV32 UPP,RAM_ADR
 236      C2F20004 
 237 00ec 04F59874 	  add UPP,#0x130
 238 00f0 00B5FFF7 	  _CALL get_curpos 
 238      FEFF5DF8 
 238      04EB
 239 00fa 02B4     	  push {r1} 
 240 00fc 4FF00A01 	  mov r1,#10 
 241 0100 00B5FFF7 	  _CALL print_int 
 241      FEFF5DF8 
 241      04EB
 242 010a 4FF02C00 	  mov r0,#','
 243 010e 00B5FFF7 	  _CALL uart_putc 
 243      FEFF5DF8 
 243      04EB
 244 0118 01BC     	  pop {r0}
 245 011a 4FF00A01 	  mov r1,#10  
 246 011e 00B5FFF7 	  _CALL print_int 
 246      FEFF5DF8 
 246      04EB
 247 0128 7047     	  _RET 
 248              	
 249              	  tib_addr: 
 250 012a 00000000 	    .word _tib
 251              	
 252              	
 253              	// tranfert isr_vector to RAM at 0x20000000
 254 012e 00BF     	    _FUNC remap 
 255 0130 80EA0000 		eor r0,r0 // src 
 256 0134 4FF00001 		_MOV32 r1,RAM_ADR // dest 
 256      C2F20001 
 257 013c 4FF49872 		mov r2,#(isr_end-isr_vectors) // count 
 258 0140 00B5FFF7 	  _CALL cmove  
ARM GAS  stm32-tbi.s 			page 18


 258      FEFF5DF8 
 258      04EB
 259              	// set new vector table address
 260 014a 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 260      CEF20000 
 261 0152 4FF00001 		_MOV32 r1,RAM_ADR 
 261      C2F20001 
 262 015a 8160     		str r1,[r0,#SCB_VTOR]
 263 015c 7047     	  _RET 
 264              	
 265              	// initialize hardware devices 
 266 015e 00BF     	  _FUNC init_devices
 267              	/* init clock to HSE 72 Mhz */
 268              	/* set 2 wait states in FLASH_ACR_LATENCY */
 269 0160 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 269      C4F20200 
 270 0168 4FF01202 	  mov r2,#0x12
 271 016c 0260     	  str r2,[r0,#FLASH_ACR]
 272              	/* configure clock for HSE, 8 Mhz crystal */
 273              	/* enable HSE in RCC_CR */
 274 016e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 274      C4F20200 
 275 0176 0168     	  ldr r1,[r0,#RCC_CR]
 276 0178 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 277 017c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 278              	/* wait HSERDY loop */
 279              	wait_hserdy:
 280 017e 0168     	  ldr r1,[r0,#RCC_CR]
 281 0180 11F4003F 	  tst r1,#(1<<17)
 282 0184 FBD0     	  beq wait_hserdy
 283              	
 284              	/************************************************* 
 285              	   configure PLL mul factor and source 
 286              	   SYSCLOCK,72 Mhz
 287              	   select HSE as  PLL source clock
 288              	   multiply frequency by 9 
 289              	   APB1 clock is limited to 36 Mhz so divide by 2 
 290              	****************************************************/
 291 0186 4FF40441 	  mov r1,#(4<<8)+(2<<14) /* PLLMUL,7|PLLSCR,HSE|PPRE1=HCLK/2|ADCPRE=PCLK2/6 */
 292 018a C0F21D01 	  movt r1,#(7<<2)|1
 293 018e 4160     	  str r1,[r0,#RCC_CFGR]
 294              	  /* enable PLL */
 295 0190 0168     	  ldr r1,[r0,#RCC_CR]
 296 0192 41F08071 	  orr r1, #1<<24 
 297 0196 0160     	  str r1,[r0,#RCC_CR]
 298              	/* wait for PLLRDY */
 299              	wait_pllrdy:
 300 0198 0168     	  ldr r1,[r0,#RCC_CR]
 301 019a 11F0007F 	  tst r1,#(1<<25)
 302 019e FBD0     	  beq wait_pllrdy 
 303              	/* select PLL as sysclock */
 304 01a0 4168     	  ldr r1,[r0,#RCC_CFGR]
 305 01a2 4FF6FC72 	  _MOV32 r2,0xfffffffc
 305      CFF6FF72 
 306 01aa 01EA0201 	  and r1,r1,r2 
 307 01ae 4FF00202 	  mov r2,#2
 308 01b2 41EA0201 	  orr r1,r1,r2
ARM GAS  stm32-tbi.s 			page 19


 309 01b6 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 310              	/* wait for SWS,,2 */
 311              	wait_sws:
 312 01b8 4168     	  ldr r1,[r0,#RCC_CFGR]
 313 01ba 11F0080F 	  tst r1,#(2<<2)
 314 01be FBD0     	  beq wait_sws
 315              	/* now sysclock is 72 Mhz */
 316              	
 317              	/* enable peripheral clock for GPIOs and USART1 */
 318 01c0 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 318      C4F20200 
 319 01c8 45F67D61 	  mov	r1, #0x5e7d		/* all GPIO and USART1 */
 320 01cc 8161     	  str	r1, [r0,#RCC_APB2ENR]
 321              	// enable T2-T4 clock 
 322 01ce C169     	  ldr r1,[r0,#RCC_APB1ENR]
 323 01d0 41F00701 	  orr r1,#7 
 324 01d4 C161     	  str r1,[r0,#RCC_APB1ENR]
 325              	/* configure GPIOC:13 as output for user LED */
 326 01d6 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 326      C4F20100 
 327 01de 4168     	  ldr r1,[r0,#GPIO_CRH]
 328 01e0 6FF47002 	  mvn r2,#(15<<20)
 329 01e4 01EA0201 	  and r1,r1,r2
 330 01e8 4FF4C002 	  mov r2,#(6<<20)
 331 01ec 41EA0201 	  orr r1,r1,r2
 332 01f0 4160     	  str r1,[r0,#GPIO_CRH]
 333              	/* turn off user LED */ 
 334 01f2 4FF40051 	  mov r1,#(1<<13)
 335 01f6 C160     	  str r1,[r0,#GPIO_ODR]
 336              	
 337              	/* disable JTDI,JTDO,JTRST */
 338 01f8 4FF00000 	  _MOV32 r0,AFIO_BASE_ADR
 338      C4F20100 
 339 0200 4FF00071 	  mov r1,#2<<24 
 340 0204 4160     	  str r1,[r0,#AFIO_MAPR]
 341              	
 342              	/* configure systicks for 1msec ticks */
 343 0206 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 343      CEF20000 
 344 020e 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 345 0212 4160     	  str r1,[r0,#STK_LOAD]
 346 0214 4FF00301 	  mov r1,#3
 347 0218 0160     	  str r1,[r0,STK_CTL]
 348 021a 7047     	  _RET  
 349              	
 350              	/*******************************
 351              	  initialize UART peripheral 
 352              	********************************/
 353              		  _FUNC uart_init
 354              	/* set GPIOA PIN 9, uart TX  */
 355 021c 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 355      C4F20100 
 356 0224 4168     	    ldr r1,[r0,#GPIO_CRH]
 357 0226 6FF0F002 	    mvn r2,#(15<<4)
 358 022a 01EA0201 	    and r1,r1,r2
 359 022e 4FF0A002 	    mov r2,#(0xA<<4)
 360 0232 41EA0201 	    orr r1,r1,r2 
ARM GAS  stm32-tbi.s 			page 20


 361 0236 4160     	    str r1,[r0,#GPIO_CRH]
 362              	/* lock PA9,PA10 to block pins reconfiguration */
 363 0238 4FF4C061 	    mov r1,#(1<<9)+(1<<10)
 364 023c 4FF00402 	    mov r2,#4
 365 0240 C0F20101 	    movt r1,#1
 366 0244 8161     	1:  str r1,[r0,#GPIO_LCKR]
 367 0246 81F48031 	    eor r1,#(1<<16) 
 368 024a 013A     	    subs r2,#1 
 369 024c FAD1     	    bne 1b 
 370              	/* configure usart */     
 371 024e 4FF46050 	    _MOV32 r0,UART 
 371      C4F20100 
 372              	/* BAUD rate */
 373 0256 40F27121 	    mov r1,#(39<<4)+1  /* (72Mhz/16)/115200,39,0625, quotient,39, reste,0,0625*16,1 */
 374 025a 8160     	    str r1,[r0,#USART_BRR]
 375 025c 42F22C01 	    mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 376 0260 C160     	    str r1,[r0,#USART_CR1] /*enable usart*/
 377              	/* enable interrupt in NVIC */
 378 0262 4FF46140 	    _MOV32 r0,NVIC_BASE_ADR
 378      CEF20000 
 379 026a 4168     	    ldr r1,[r0,#NVIC_ISER1]
 380 026c 41F02001 	    orr r1,#32   
 381 0270 4160     	    str r1,[r0,#NVIC_ISER1]
 382 0272 7047     	    bx lr 
 383              	
 384              	/***************************
 385              	    uart_flush_queue
 386              	    flush rx queue
 387              	  input:
 388              	    none
 389              	  output:
 390              	    none 
 391              	  use:
 392              	    T1 temp
 393              	***************************/
 394              	    _GBL_FUNC uart_flush_queue
 395 0274 4DF8048D 	    push {T1}
 396 0278 88EA0808 	    eor T1,T1 
 397 027c C4F84880 	    str T1,[UPP,#RX_HEAD]
 398 0280 C4F84C80 	    str T1,[UPP,#RX_TAIL]
 399 0284 5DF8048B 	    pop {T1}
 400 0288 7047     	    _RET 
 401              	
 402              	/****************************
 403              	    UART_PUTC
 404              	  send character to uart
 405              	  input: 
 406              	    R0 character to send 
 407              	  use:
 408              	    T1 status  
 409              	    T2 UART address
 410              	*****************************/
 411 028a 00BF     	    _GBL_FUNC uart_putc
 412 028c 2DE90003 	    push {T1,T2}
 413 0290 4FF46059 	    _MOV32 T2,UART
 413      C4F20109 
 414              	1: 
ARM GAS  stm32-tbi.s 			page 21


 415 0298 D9F80080 	    ldr T1,[T2,#USART_SR]
 416 029c 18F08008 	    ands T1,#0x80
 417 02a0 FAD0     	    beq 1b // UART_DR full,wait  
 418 02a2 89F80400 	    strb r0,[T2,#USART_DR]
 419 02a6 BDE80003 	    pop {T1,T2}
 420 02aa 7047     	    _RET  
 421              	
 422              	
 423              	/**********************************
 424              	  UART_QKEY
 425              	  check if character available in 
 426              	  rx1_qeue
 427              	  input:
 428              	    none
 429              	  output:
 430              	    r0 flag = RX_HEAD^REX_TAIL 
 431              	    flags 
 432              	  use:
 433              	    r0  RX_HEAD  
 434              	    r1  RX_TAIL   
 435              	***********************************/
 436              	    _GBL_FUNC uart_qkey
 437 02ac 02B4     	    push {r1}
 438 02ae A06C     	    ldr r0,[UPP,#RX_HEAD]
 439 02b0 E16C     	    ldr r1,[UPP,#RX_TAIL]
 440 02b2 4840     	    eors r0,r1
 441 02b4 02BC     	    pop {r1} 
 442 02b6 7047     	    _RET 
 443              	
 444              	/**********************************
 445              	  UART_GETC 
 446              	  wait a character from uart 
 447              	  input:
 448              	    none
 449              	  output:
 450              	    r0  character 
 451              	  use:
 452              	    T1  rx_queue 
 453              	    T2  rx_head  
 454              	**********************************/
 455              	    _GBL_FUNC uart_getc
 456 02b8 2DE90003 	    push {T1,T2}
 457              	1:
 458 02bc 00B5FFF7 	    _CALL uart_qkey 
 458      FEFF5DF8 
 458      04EB
 459 02c6 F9D0     	    beq 1b  
 460 02c8 04F15008 	    add T1,UPP,#RX_QUEUE
 461 02cc D4F84890 	    ldr T2, [UPP,#RX_HEAD]
 462 02d0 18F80900 	    ldrb r0,[T1,T2]
 463 02d4 09F10109 	    add T2,#1
 464 02d8 09F00F09 	    and T2,#(RX_QUEUE_SIZE-1)
 465 02dc C4F84890 	    str T2,[UPP,#RX_HEAD]
 466 02e0 BDE80003 	    pop {T1,T2}
 467 02e4 7047     	    _RET  
 468              	
 469              	
ARM GAS  stm32-tbi.s 			page 22


 470              	/***************************
 471              	  Flash memory interface
 472              	***************************/
 473              	
 474              	/***********************************
 475              	  unlock 
 476              	  unlock flash memory for writing
 477              	  input:
 478              	    r0    0 lock, 1 unlock 
 479              	  output:
 480              	    none
 481              	  use: 
 482              	    r6     temp  
 483              	***********************************/
 484 02e6 00BF     	    _GBL_FUNC unlock  
 485 02e8 40B4     	    push {r6}
 486 02ea 0040     	    ands r0,r0 
 487 02ec 15D0     	    beq lock 
 488 02ee 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 488      C4F20200 
 489 02f6 4FF03406 	    mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 490 02fa C660     	    str r6,[r0,#FLASH_SR]
 491 02fc 0669     	    ldr r6,[r0,#FLASH_CR]
 492 02fe 16F0800F 	    tst r6,#(1<<7)
 493 0302 11D0     	    beq 9f
 494 0304 40F22316 	    _MOV32 r6,FLASH_KEY1  
 494      C4F26756 
 495 030c 4660     	    str	r6, [r0, #FLASH_KEYR]
 496 030e 48F6AB16 	    _MOV32 r6,FLASH_KEY2
 496      CCF6EF56 
 497 0316 4660     	    str	r6, [r0, #FLASH_KEYR]
 498 0318 06E0     	    b 9f 
 499              	// lock flash memory
 500              	lock: 
 501 031a 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 501      C4F20200 
 502 0322 4FF08006 	    mov r6,#(1<<7)
 503 0326 0661     	    str r6,[r0,#FLASH_CR]
 504 0328 40BC     	9:  pop {r6}
 505 032a 7047     	  	_RET  
 506              	
 507              	
 508              	/*********************************
 509              	   wait_busy 
 510              	   wait until busy flag is cleared 
 511              	   input:
 512              	    none
 513              	   output:
 514              	    none 
 515              	   use:
 516              	     r0    flash registers address 
 517              	     r1    temp 
 518              	***********************************/
 519              	    _FUNC wait_busy 
 520 032c 03B4     	    push {r0,r1}
 521 032e 4FF40050 	    _MOV32	r0,FLASH_BASE_ADR
 521      C4F20200 
ARM GAS  stm32-tbi.s 			page 23


 522              	1:
 523 0336 C168     	    ldr	r1, [r0, #FLASH_SR]	//  FLASH_SR
 524 0338 11F00101 	    ands r1, #0x1	//  BSY
 525 033c FBD1     	    bne	1b 
 526 033e 03BC     	    pop {r0,r1}
 527 0340 7047     	    _RET
 528              	
 529              	/***************************************
 530              	   hword_write
 531              	   write 16 bits value to flash memory 
 532              	   input:
 533              	    r0  data 
 534              	    r1  address 
 535              	   output:
 536              	     none 
 537              	   use: 
 538              	     r6    flash control regs base address 
 539              	     r7    temp  
 540              	***************************************/
 541 0342 00BF     	    _GBL_FUNC hword_write 
 542 0344 C0B4     	    push {r6,r7}
 543 0346 4FF40056 	    _MOV32 r6,FLASH_BASE_ADR
 543      C4F20206 
 544 034e 4FF00107 	    mov r7,#1 // set PG 
 545 0352 3761     	    str r7,[r6,#FLASH_CR]
 546 0354 0880     	    strh r0,[r1] 
 547 0356 00B5FFF7 	    _CALL wait_busy  
 547      E8FF5DF8 
 547      04EB
 548 0360 F768     	    ldr r7,[r6,#FLASH_SR]
 549 0362 17F01407 	    ands r7,r7,#(5<<2) 
 550 0366 05D0     	    beq 9f
 551 0368 5048     	    ldr r0,=write_error
 552 036a 00B5FFF7 	    _CALL uart_puts   
 552      FEFF5DF8 
 552      04EB
 553 0374 C0BC     	9:	pop {r6,r7}
 554 0376 7047     	    _RET  
 555              	write_error:	
 556 0378 20777269 	    .asciz " write error!"
 556      74652065 
 556      72726F72 
 556      2100
 557 0386 00BF     	    .p2align 2
 558              	
 559              	/****************************************
 560              	    flash_store
 561              	    Write one word into flash memory
 562              	    address must even
 563              	    input:
 564              	      r0    data 
 565              	      r1    adr 
 566              	    output: 
 567              	      none 
 568              	    use:
 569              	      T1 data 
 570              	      T2 adr 
ARM GAS  stm32-tbi.s 			page 24


 571              	*****************************************/ 
 572              	    _GBL_FUNC flash_store 
 573 0388 2DE90003 	    push {T1,T2}
 574 038c 8046     	    mov T1,r0
 575 038e 8946     	    mov T2,r1  
 576 0390 4FF00100 	    mov r0,#1
 577 0394 00B5FFF7 	    _CALL unlock 
 577      FEFF5DF8 
 577      04EB
 578 039e 4046     	    mov r0,T1 
 579 03a0 4946     	    mov r1,T2 
 580 03a2 00B5FFF7 	    _CALL hword_write
 580      FEFF5DF8 
 580      04EB
 581 03ac 4FEA1840 	    mov r0,T1,lsr #16 
 582 03b0 09F10201 	    add r1,T2,#2
 583 03b4 00B5FFF7 	    _CALL hword_write
 583      FEFF5DF8 
 583      04EB
 584 03be 80EA0000 	    eor r0,r0 
 585 03c2 00B5FFF7 	    _CALL unlock  
 585      FEFF5DF8 
 585      04EB
 586 03cc BDE80003 	    pop {T1,T2}
 587 03d0 7047     	    _RET 
 588              	
 589              	/********************************************
 590              	    erase_page 
 591              	    erase 1024 bytes flash page 
 592              	    input:
 593              	       r0    adr 
 594              	    output:
 595              	       None 
 596              	    use:
 597              	      T1    adr
 598              	      T2    temp   
 599              	**********************************************/
 600 03d2 00BF     	    _GBL_FUNC erase_page 
 601 03d4 2DE90003 	    push {T1,T2}
 602 03d8 8046     	    mov T1,r0 
 603 03da 4FF00100 	    mov r0,#1 
 604 03de 00B5FFF7 	    _CALL unlock 
 604      FEFF5DF8 
 604      04EB
 605 03e8 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 605      C4F20200 
 606 03f0 4FF00209 	    mov T2,#2 // PER bit in FLASH_CR 
 607 03f4 C0F81090 	    str T2,[r0,#FLASH_CR]
 608 03f8 C0F81480 	    str T1,[r0,#FLASH_AR]
 609 03fc 49F04009 	    orr T2,#0x40 
 610 0400 C0F81090 	    str T2,[r0,#FLASH_CR]
 611 0404 00B5FFF7 	    _CALL wait_busy
 611      91FF5DF8 
 611      04EB
 612 040e D0F80C90 	    ldr T2,[r0,#FLASH_SR]
 613 0412 19F01409 	    ands T2,#(5<<2)
 614 0416 05D0     	    beq 9f
ARM GAS  stm32-tbi.s 			page 25


 615 0418 0748     	    ldr r0,erase_error
 616 041a 00B5FFF7 	    _CALL uart_puts 
 616      FEFF5DF8 
 616      04EB
 617 0424 80EA0000 	9:  eor r0,r0 
 618 0428 00B5FFF7 	    _CALL unlock 
 618      FEFF5DF8 
 618      04EB
 619 0432 BDE80003 	    pop {T1,T2}
 620 0436 7047     	    _RET 
 621              	erase_error:
 622 0438 20657261 	    .asciz " erase error!\r"
 622      73652065 
 622      72726F72 
 622      210D00
 623 0447 00       	    .p2align 2
 624              	
 625              	/*****************************************
 626              	    write_page 
 627              	    write a page buffer to flash memory 
 628              	    input:
 629              	      r0  *buffer 
 630              	      r1  flash_adr 
 631              	    output:
 632              	      none 
 633              	    use:
 634              	      r2  size counter
 635              	      T1  *buffer 
 636              	******************************************/
 637              	    _GBL_FUNC write_page
 638 0448 2DE90401 	    push {r2,T1}
 639 044c 8046     	    mov T1,r0
 640 044e 4FF00100 	    mov r0,#1 
 641 0452 00B5FFF7 	    _CALL unlock
 641      FEFF5DF8 
 641      04EB
 642 045c 4FF48062 	    mov r2,#PAGE_SIZE 
 643 0460 38F8020B 	1:  ldrh r0,[T1],#2 
 644 0464 00B5FFF7 	    _CALL hword_write 
 644      FEFF5DF8 
 644      04EB
 645 046e 01F10201 	    add r1,#2
 646 0472 023A     	    subs r2,#2 
 647 0474 F4D1     	    bne 1b 
 648 0476 80EA0000 	    eor r0,r0 
 649 047a 00B5FFF7 	    _CALL unlock 
 649      FEFF5DF8 
 649      04EB
 650 0484 BDE80401 	    pop {r2,T1}
 651 0488 7047     	    _RET 
 652              	
 653              	      
 654              	/**********************************************
 655              	   page_align 
 656              	   align address to FLASH page boundary 
 657              	   input:
 658              	     r0    address 
ARM GAS  stm32-tbi.s 			page 26


 659              	   output:
 660              	     r0    aligned 
 661              	   use: 
 662              	     r1  
 663              	**********************************************/
 664 048a 00BF     	    _GBL_FUNC page_align 
 665 048c 02B4     	    push {r1}
 666 048e 40F2FF31 	    mov r1,#PAGE_SIZE-1
 667 0492 0844     	    add r0,r1
 668 0494 6FEA0101 	    mvn r1,r1 
 669 0498 00EA0100 	    and r0,r1 
 670 049c 02BC     	    pop {r1}
 671 049e 7047     	    _RET 
 672 04a0 18000000 	
 672      00000000 
 672      B4000000 
 672      78030000 
ARM GAS  stm32-tbi.s 			page 27


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  stm32-tbi.s 			page 28


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  stm32-tbi.s 			page 29


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:192    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:193    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:194    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:195    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:196    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:197    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:198    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:199    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:200    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:201    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:202    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:203    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:204    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:205    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:206    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:207    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:208    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:209    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:210    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:211    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:212    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:215    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:216    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:217    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:218    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:220    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:221    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:222    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:223    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:224    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:225    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:226    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:227    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:228    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:229    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:230    *ABS*:0000000000000028 TIM_PSC
ARM GAS  stm32-tbi.s 			page 30


       stm32f103.inc:231    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:232    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:233    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:234    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:235    *ABS*:000000000000004c TIM_DMAR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
ARM GAS  stm32-tbi.s 			page 31


           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
ARM GAS  stm32-tbi.s 			page 32


      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
ARM GAS  stm32-tbi.s 			page 33


       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b READ_IDX
       cmd_index.inc:85     *ABS*:000000000000003c REM_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REST_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RET_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RND_IDX
ARM GAS  stm32-tbi.s 			page 34


       cmd_index.inc:89     *ABS*:0000000000000040 RSHIFT_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RUN_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SAVE_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SERVO_INIT_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_OFF_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_POS_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SLEEP_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SPC_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 STEP_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 STOP_IDX
       cmd_index.inc:99     *ABS*:000000000000004a STORE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TAB_IDX
       cmd_index.inc:101    *ABS*:000000000000004c THEN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d TICKS_IDX
       cmd_index.inc:103    *ABS*:000000000000004e TIMER_IDX
       cmd_index.inc:104    *ABS*:000000000000004f TMROUT_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 TO_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TONE_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 TONE_INIT_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 TRACE_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 UBOUND_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 UFLASH_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 UNTIL_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 WAIT_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 WORDS_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 XOR_IDX
       cmd_index.inc:115    *ABS*:000000000000005a XPOS_IDX
       cmd_index.inc:116    *ABS*:000000000000005b YPOS_IDX
         stm32-tbi.s:44     *ABS*:0000000040011000 LED_GPIO
         stm32-tbi.s:45     *ABS*:000000000000000d LED_PIN
         stm32-tbi.s:46     *ABS*:0000000040013800 UART
         stm32-tbi.s:55     .isr_vector:0000000000000000 isr_vectors
         stm32-tbi.s:225    .text:00000000000000c4 reset_handler
         stm32-tbi.s:148    .text:0000000000000000 default_handler
         stm32-tbi.s:163    .text:000000000000002c systick_handler
         stm32-tbi.s:73     .isr_vector:0000000000000040 irq0
         stm32-tbi.s:177    .text:0000000000000040 uart_rx_handler
         stm32-tbi.s:135    .isr_vector:0000000000000130 isr_end
         stm32-tbi.s:137    .isr_vector:0000000000000130 vectors_size
         stm32-tbi.s:148    .text:0000000000000000 $t
         stm32-tbi.s:157    .text:0000000000000018 exception_msg
         stm32-tbi.s:208    .text:000000000000009e reset_mcu
         stm32-tbi.s:158    .text:0000000000000018 $d
         stm32-tbi.s:201    .text:0000000000000088 user_reboot
         stm32-tbi.s:394    .text:0000000000000274 uart_flush_queue
         stm32-tbi.s:218    .text:00000000000000b4 user_reboot_msg
         stm32-tbi.s:216    .text:00000000000000b0 scb_adr
         stm32-tbi.s:217    .text:00000000000000b0 $d
         stm32-tbi.s:254    .text:0000000000000130 remap
         stm32-tbi.s:266    .text:0000000000000160 init_devices
         stm32-tbi.s:353    .text:000000000000021c uart_init
         stm32-tbi.s:235    .text:00000000000000e4 test
         stm32-tbi.s:411    .text:000000000000028c uart_putc
         stm32-tbi.s:249    .text:000000000000012a tib_addr
         stm32-tbi.s:250    .text:000000000000012a $d
         stm32-tbi.s:254    .text:000000000000012e $t
         stm32-tbi.s:279    .text:000000000000017e wait_hserdy
ARM GAS  stm32-tbi.s 			page 35


         stm32-tbi.s:299    .text:0000000000000198 wait_pllrdy
         stm32-tbi.s:311    .text:00000000000001b8 wait_sws
         stm32-tbi.s:436    .text:00000000000002ac uart_qkey
         stm32-tbi.s:455    .text:00000000000002b8 uart_getc
         stm32-tbi.s:484    .text:00000000000002e8 unlock
         stm32-tbi.s:500    .text:000000000000031a lock
         stm32-tbi.s:519    .text:000000000000032c wait_busy
         stm32-tbi.s:541    .text:0000000000000344 hword_write
         stm32-tbi.s:555    .text:0000000000000378 write_error
         stm32-tbi.s:556    .text:0000000000000378 $d
         stm32-tbi.s:557    .text:0000000000000386 $t
         stm32-tbi.s:572    .text:0000000000000388 flash_store
         stm32-tbi.s:600    .text:00000000000003d4 erase_page
         stm32-tbi.s:621    .text:0000000000000438 erase_error
         stm32-tbi.s:622    .text:0000000000000438 $d
         stm32-tbi.s:637    .text:0000000000000448 write_page
         stm32-tbi.s:664    .text:000000000000048c page_align
         stm32-tbi.s:672    .text:00000000000004a0 $d
         stm32-tbi.s:163    .text:000000000000002b $d
         stm32-tbi.s:163    .text:000000000000002c $t
         stm32-tbi.s:220    .text:00000000000000c3 $d
         stm32-tbi.s:220    .text:00000000000000c4 $t
         stm32-tbi.s:623    .text:0000000000000447 $d
         stm32-tbi.s:623    .text:0000000000000448 $t

UNDEFINED SYMBOLS
_mstack
uart_puts
warm_start
cold_start
get_curpos
print_int
_tib
cmove
