ARM GAS  stm32-tbi.s 			page 1


   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	/*****************************************
  20              	    REGISTERS USAGE 
  21              	
  22              	 R0-R3      // function parameters 
  23              	 R4         //  system variables base address 
  24              	 R5         //  FOR loop variable address 
  25              	 R6         //  FOR loop limit 
  26              	 R7         //  FOR loop increment 
  27              	 R8,R9      //  temporary registers
  28              	 R10        //  interpreter line index 
  29              	 R11        //  interpreter BASIC line address 
  30              	 R12        //  parameters stack pointer 
  31              	*****************************************/
  32              	
  33              	  .syntax unified
  34              	  .cpu cortex-m3
  35              	  .fpu softvfp
  36              	  .thumb
  37              	
  38              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
ARM GAS  stm32-tbi.s 			page 2


  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
ARM GAS  stm32-tbi.s 			page 3


  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* GPIO input|output CNF|MODE values */
  86              	   //output CNF field 
  87              	   .equ GPIO_O_PP,0 
  88              	   .equ GPIO_O_OD,(1<<2)
  89              	   .equ GPIO_O_AFPP,(2<<2) 
  90              	   .equ GPIO_O_AFOD,(3<<2)
  91              	  // output MODE field 
  92              	   .equ S2MHZ,2 
  93              	   .equ S10MHZ,1 
  94              	   .equ S50MHZ,3
  95              	   .equ OSPEED,S10MHZ      
  96              	   .equ OUTPUT_PP,GPIO_O_PP+OSPEED
  97              	   .equ OUTPUT_OD,GPIO_O_OD+OSPEED
  98              	   .equ OUTPUT_AFPP,GPIO_O_AFPP+OSPEED 
  99              	   .equ OUTPUT_AFOD,GPIO_AFOD+OSPEED 
 100              	  // input ODR 
 101              	   .equ PULLDOWN,0
 102              	   .equ PULLUP,1
 103              	  // input CNF field 
 104              	   .equ ANALOG,0
 105              	   .equ FLOATING,(1<<2) 
 106              	   .equ PULL_RESISTOR,(2<<2)  
 107              	   .equ INPUT_ANA,ANALOG 
 108              	   .equ INPUT_FLOAT,FLOATING 
 109              	   .equ INPUT_PD,(PULL_RESISTOR<<1)+PULLDOWN 
 110              	   .equ INPUT_PU,(PULL_RESISTOR<<1)+PULLUP    
 111              	
 112              	   /* AFIO base address */
 113              	   .equ AFIO_BASE_ADR, 0x40010000
 114              	   
 115              	   /* AFIO registers offset */
 116              	   .equ AFIO_EVCR,0
 117              	   .equ AFIO_MAPR,4
 118              	   .equ AFIO_EXTICR1,8
 119              	   .equ AFIO_EXTICR2,12 
 120              	   .equ AFIO_EXTICR3,16
 121              	   .equ AFIO_EXTICR4,20
 122              	   .equ AFIO_MAPR2,28
 123              	   
 124              	    /* USART1 registers */
 125              	    .equ USART1_BASE_ADR, 0x40013800
 126              	    .equ USART2_BASE_ADR, 0x40004400
 127              	    .equ USART3_BASE_ADR, 0x40004800
 128              	
 129              	    /* USARTx registers offset */
 130              	    .equ USART_SR, 0
 131              	    .equ USART_DR,4
 132              	    .equ USART_BRR,8
 133              	    .equ USART_CR1,12
ARM GAS  stm32-tbi.s 			page 4


 134              	    .equ USART_CR2,16
 135              	    .equ USART_CR3,20
 136              	    .equ USART_GTPR,24
 137              	
 138              	   /* systick */
 139              	    .equ STK_BASE_ADR, 0xE000E010
 140              	    /* registers offset */
 141              	    .equ STK_CTL, 0
 142              	    .equ STK_LOAD, 4
 143              	    .equ STK_VAL, 8
 144              	    .equ STK_CALIB, 12
 145              	
 146              	   /* system control block */
 147              	   .equ SCB_BASE_ADR, 0xE000ED00
 148              	   /* registers offset */
 149              	   .equ SCB_CPUID, 0
 150              	   .equ SCB_ICSR, 4 
 151              	   .equ SCB_VTOR, 8
 152              	   .equ SCB_AIRCR, 12
 153              	   .equ SCB_SCR, 16
 154              	   .equ SCB_CCR, 20
 155              	   .equ SCB_SHPR1,24
 156              	   .equ SCB_SHPR2,28
 157              	   .equ SCB_SHPR3,32
 158              	   .equ SCB_SHCRS,36
 159              	   .equ SCB_CFSR,40
 160              	   .equ SCB_HFSR,44
 161              	   .equ SCB_MMAR,52
 162              	   .equ SCB_BFAR,56
 163              	   // key to to write in SCB_AIRCR 
 164              	   .equ SCB_VECTKEY,0x5fa 
 165              	   
 166              	   /* NVIC block */
 167              	   .equ NVIC_BASE_ADR, 0xE000E100
 168              	   .equ NVIC_ISER0, 0
 169              	   .equ NVIC_ISER1, 4
 170              	   .equ NVIC_ISER2, 8
 171              	   .equ NVIC_ICER0, 0x80
 172              	   .equ NVIC_ICER1, 0x84 
 173              	   .equ NVIC_ICER2, 0x88 
 174              	   .equ NVIC_ISPR0, 0x100
 175              	   .equ NVIC_ISPR1, 0x104
 176              	   .equ NVIC_ISPR2, 0x108 
 177              	   .equ NVIC_ICPR0, 0x180
 178              	   .equ NVIC_ICPR1, 0x184
 179              	   .equ NVIC_ICPR2, 0x188
 180              	   .equ NVIC_IABR0, 0x200
 181              	   .equ NVIC_IABR1, 0x204
 182              	   .equ NVIC_IABR2, 0x208
 183              	   .equ NVIC_IPR_BASE, 0x300 
 184              	
 185              	/* IRQ number */
 186              	   .equ IRQ_WWDG,0
 187              	   .equ IRQ_PVD,1
 188              	   .equ IRQ_TAMPER,2
 189              	   .equ IRQ_RTC,3
 190              	   .equ IRQ_FLASH,4
ARM GAS  stm32-tbi.s 			page 5


 191              	   .equ IRQ_RCC,5
 192              	   .equ IRQ_EXTI0,6
 193              	   .equ IRQ_EXIT1,7
 194              	   .equ IRQ_EXTI2,8
 195              	   .equ IRQ_EXIT3,9
 196              	   .equ IRQ_EXIT4,10
 197              	   .equ IRQ_DMA1CH1,11
 198              	   .equ IRQ_DMA1CH2,12
 199              	   .equ IRQ_DAM1CH3,13
 200              	   .equ IRQ_DMA1CH4,14
 201              	   .equ IRQ_DMA1CH5,15
 202              	   .equ IRQ_DMA1CH6,16
 203              	   .equ IRQ_DMA1CH7,17
 204              	   .equ IRQ_ADC1_2,18   
 205              	   .equ IRQ_USB_HP_CAN_TX,19
 206              	   .equ IRQ_USB_LP_CAN_RX0,20
 207              	   .equ IRQ_CAN_RX1,21
 208              	   .equ IRQ_CAN_SCE,22
 209              	   .equ IRQ_EXTI9_5,23
 210              	   .equ IRQ_TIM1_BRK,24
 211              	   .equ IRQ_TIM1_UP,25
 212              	   .equ IRQ_TIM1_TRG_COM,26
 213              	   .equ IRQ_TIM1_CC,27
 214              	   .equ IRQ_TIM2,28
 215              	   .equ IRQ_TIM3,29
 216              	   .equ IRQ_TIM4,30
 217              	   .equ IRQ_I2C1_EV,31
 218              	   .equ IRQ_I2C1_ER,32
 219              	   .equ IRQ_I2C2_EV,33
 220              	   .equ IRQ_I2C2_ER,34
 221              	   .equ IRQ_SPI1,35
 222              	   .equ IRQ_SPI2,36
 223              	   .equ IRQ_USART1,37
 224              	   .equ IRQ_USART2,38
 225              	   .equ IRQ_USART3,39
 226              	   .equ IRQ_EXTI15_10,40
 227              	   .equ IRQ_RTCALARM,41
 228              	   .equ IRQ_USB_WKUP,42
 229              	   .equ IRQ_TIM8_BRK,43
 230              	   .equ IRQ_TIM8_UP,44
 231              	   .equ IRQ_TIM8_TRG_COM,45
 232              	   .equ IRQ_TIM8_CC,46
 233              	   .equ IRQ_ADC3,47
 234              	   .equ IRQ_FSMC,48
 235              	   .equ IRQ_SDIO,49            
 236              	   .equ IRQ_TIM5,50
 237              	   .equ IRQ_SPI3,51
 238              	   .equ IRQ_UART4,52
 239              	   .equ IRQ_UART5,53
 240              	   .equ IRQ_TIM6,54
 241              	   .equ IRQ_TIM7,55
 242              	   .equ IRQ_DMA2CH1,56
 243              	   .equ IRQ_DMA2CH2,57
 244              	   .equ IRQ_DMA2CH3,58
 245              	   .equ IRQ_DMA2CH4_5,59
 246              	
 247              	
ARM GAS  stm32-tbi.s 			page 6


 248              	/* system control register */
 249              	.equ SCR_BASE_ADR,0xE000ED10
 250              	.equ SCR_SLEEPONEXIT,(1<<1)
 251              	.equ SCR_SLEEPDEEP,(1<<2)
 252              	.equ SCR_SEVONPEND,(1<<4)
 253              	
 254              	/* power control register */
 255              	.equ PWR_CR_ADR,0x40007000
 256              	.equ PWR_CR_LPDS,(1<<0)
 257              	.equ PWR_CR_PDDS,(1<<1)
 258              	.equ PWR_CR_CWUF,(1<<2)
 259              	.equ PWR_CR_CSBF,(1<<3)
 260              	.equ PWR_CR_PVDE,(1<<4)
 261              	.equ PWR_CR_PLS,(1<<5)
 262              	.equ PWR_CR_DBP,(1<<8)
 263              	
 264              	/* power control and statut register */
 265              	.equ PWR_CSR_ADR,0x40007004 
 266              	.equ PWR_CSR_WUF,(1<<0)
 267              	.equ PWR_CSR_SBF,(1<<1)
 268              	.equ PWR_CSR_PVDO,(1<<2)
 269              	.equ PWR_CSR_EWUP,(1<<8)
 270              	
 271              	/* Window watchdog (WWDG) */
 272              	.equ WWDG_BASE_ADR,0x40002C00
 273              	.equ WWDG_CR,0
 274              	.equ WWDG_CFR,4
 275              	.equ WWDG_SR,8
 276              	
 277              	/* Independent watchdog (IWDG) */
 278              	.equ IWDG_BASE_ADR,0x40003000
 279              	.equ IWDG_KR,0 
 280              	.equ IWDG_PR,4
 281              	.equ IWDG_RLR,8
 282              	.equ IWDG_SR,12
 283              	
 284              	/*   ADC1 registers */
 285              	.equ ADC1_BASE_ADR, 0x40012400
 286              	.equ ADC_SR,0
 287              	.equ ADC_CR1,0X4
 288              	.equ ADC_CR2,0X8
 289              	.equ ADC_SMPR1,0XC
 290              	.equ ADC_SMPR2,0X10
 291              	.equ ADC_JOFR1,0X14
 292              	.equ ADC_JOFR2,0X18
 293              	.equ ADC_JOFR3,0X1C
 294              	.equ ADC_JOFR4,0X20
 295              	.equ ADC_HTR,0X24
 296              	.equ ADC_LTR,0X28
 297              	.equ ADC_SQR1,0X2C
 298              	.equ ADC_SQR2,0X30
 299              	.equ ADC_SQR3,0X34
 300              	.equ ADC_JSQR,0X38
 301              	.equ ADC_JDR1,0X3C
 302              	.equ ADC_JDR2,0X40
 303              	.equ ADC_JDR3,0X44
 304              	.equ ADC_JDR4,0X48
ARM GAS  stm32-tbi.s 			page 7


 305              	.equ ADC_DR,0X4C
 306              	
 307              	/* timer registers */
 308              	.equ TIMER1_BASE_ADR,0X40012C00
 309              	.equ TIMER2_BASE_ADR,0x40000000
 310              	.equ TIMER3_BASE_ADR,0x40000400
 311              	.equ TIMER4_BASE_ADR,0x40000800
 312              	
 313              	.equ TIM_CR1,0
 314              	.equ TIM_CR2,4
 315              	.equ TIM_SMCR,8
 316              	.equ TIM_DIER,0xc
 317              	.equ TIM_SR,0X10
 318              	.equ TIM_EGR,0X14
 319              	.equ TIM_CCMR1,0X18
 320              	.equ TIM_CCMR2,0X1C
 321              	.equ TIM_CCER,0X20
 322              	.equ TIM_CNT,0X24
 323              	.equ TIM_PSC,0X28
 324              	.equ TIM_ARR,0X2C
 325              	.equ TIM_CCR1,0X34
 326              	.equ TIM_CCR2,0X38
 327              	.equ TIM_DCR,0X48
 328              	.equ TIM_DMAR,0X4C
 329              	
 330              	/* SPI registers */
 331              	.equ SPI1_BASE_ADR, 0x40013000
 332              	.equ SPI2_BASE_ADR, 0x40003800
 333              	
 334              	.equ SPI_CR1, 0
 335              	.equ SPI_CR2, 4
 336              	.equ SPI_SR,  8
 337              	.equ SPI_DR,  12
 338              	.equ SPI_CRCPR, 16
 339              	.equ SPI_RXCRCR, 20
 340              	.equ SPI_TXCRCR, 24
  39              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
ARM GAS  stm32-tbi.s 			page 8


  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
ARM GAS  stm32-tbi.s 			page 9


  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  40              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
ARM GAS  stm32-tbi.s 			page 10


  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
ARM GAS  stm32-tbi.s 			page 11


 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ U2_RX_QUEUE,RX_QUEUE+RX_QUEUE_SIZE
 137              	  .equ U2_COUNT,U2_RX_QUEUE+4 
 138              	  .equ U3_RX_QUEUE,U2_COUNT+4
 139              	  .equ U3_COUNT,U3_RX_QUEUE+4 
 140              	  .equ VARS,U3_COUNT+4 // BASIC variables 
 141              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 142              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 143              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 144              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 145              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 146              	
 147              	/* flags used by BASIC interpreter */ 
 148              		.equ FRUN,(1<<0) // programm running
 149              		.equ FTRAP,(1<<1) // inside trap handler 
 150              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 151              		.equ FSTOP,(1<<3) // program stopped  
 152              		.equ FBREAK,(1<<4) // break point flag 
 153              		.equ FCOMP,(1<<5)  // compiling flags 
 154              		.equ FAUTORUN,(1<<6) // auto start program running 
 155              	  .equ FPRINT,(1<<7) // inside print command 
 156              	
 157              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 158              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 159              	
 160              	/***********************************************
ARM GAS  stm32-tbi.s 			page 12


 161              	*       MACROS
 162              	***********************************************/
 163              		.macro _CALL fn /* low level routine call */ 
 164              	 	PUSH {LR}
 165              		BL \fn  
 166              	  POP {LR}
 167              		.endm
 168              		
 169              		.macro	_RET /* return from subroutine */
 170              		BX	LR
 171              		.endm
 172              	
 173              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 174              		MOV \REG, #\LITERAL&0xffff
 175              		MOVT \REG, #\LITERAL>>16
 176              		.endm
 177              	
 178              	// local function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	*********************************/
 195              		.macro _dict_entry tok_type,name,cmd_idx 
 196              	  .word LINK 
 197              	  .word \cmd_idx 
 198              		.word \tok_type  	
 199              		.equ LINK,.
 200              		.asciz "\name"
 201              		.p2align 2 
 202              		.endm 
 203              	
 204              	  // pop parameter in register 
 205              	  .macro _POP  reg 
 206              	  ldmia  DP!,{\reg}
 207              	  .endm 
 208              	
 209              	  // push register on parameter stack 
 210              	  .macro _PUSH reg 
 211              	  stmdb DP!,{\reg}
 212              	  .endm 
 213              	
 214              	  // drop n parameters on dstack 
 215              	  .macro _DROP n
 216              	  mov r0,#4*\n
 217              	  add DP,R0 
ARM GAS  stm32-tbi.s 			page 13


 218              	  .endm 
 219              	
 220              	  // back to previous token in list 
 221              	  .macro _UNGET_TOKEN 
 222              	  ldr IN,[UPP,#IN_SAVED]
 223              	  ldr BPTR,[UPP,#BASICPTR] 
 224              	  .endm 
 225              	
 226              	 // create a text data 
 227              	 .macro _TEXT label,text
 228              	 \label: .asciz "\text"
 229              	 .p2align 2 
 230              	 .endm 
 231              	
 232              	// command line only 
 233              	  .macro _CLO 
 234              	  ldr r0,[UPP,#FLAGS]
 235              	  tst r0,#FRUN 
 236              	  beq 1f 
 237              	  mov r0,#ERR_CMD_ONLY
 238              	  b tb_error
 239              	1: 
 240              	  .endm 
 241              	
 242              	// run time only 
 243              	  .macro _RTO 
 244              	  ldr r0,[UPP,#FLAGS]
 245              	  tst r0,#FRUN 
 246              	  bne 1f 
 247              	  mov r0,#ERR_CMD_ONLY
 248              	  b tb_error
 249              	1:
 250              	  .endm 
 251              	
  41              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
ARM GAS  stm32-tbi.s 			page 14


  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
ARM GAS  stm32-tbi.s 			page 15


  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ RANDOMIZE_IDX,QKEY_IDX+1 //
  85              	    .equ READ_IDX, RANDOMIZE_IDX+1 // 
  86              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  87              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  88              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  89              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  90              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  91              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  92              	    .equ SAVE_IDX, RUN_IDX+1 // 
  93              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  94              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  95              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  96              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  97              	    .equ SPC_IDX,SLEEP_IDX+1 //
  98              	    .equ SPI_DSEL_IDX,SPC_IDX+1 // 
  99              	    .equ SPI_INIT_IDX,SPI_DSEL_IDX+1 //
 100              	    .equ SPI_READ_IDX,SPI_INIT_IDX+1 //
 101              	    .equ SPI_SELECT_IDX,SPI_READ_IDX+1 //
 102              	    .equ SPI_WRITE_IDX,SPI_SELECT_IDX+1 //
 103              	    .equ STEP_IDX, SPI_WRITE_IDX+1 // 
 104              	    .equ STOP_IDX, STEP_IDX+1 // 
 105              	    .equ STORE_IDX,STOP_IDX+1
 106              	    .equ TAB_IDX, STORE_IDX+1 //
 107              	    .equ THEN_IDX,TAB_IDX+1
 108              	    .equ TICKS_IDX, THEN_IDX+1 // 
 109              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 110              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 111              	    .equ TO_IDX, TMROUT_IDX+1 // 
 112              	    .equ TONE_IDX,TO_IDX+1
 113              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 114              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 115              	    .equ UART_GETC_IDX,TRACE_IDX+1 // 
 116              	    .equ UART_INIT_IDX,UART_GETC_IDX+1//
 117              	    .equ UART_PUTC_IDX,UART_INIT_IDX+1//
 118              	    .equ UBOUND_IDX, UART_PUTC_IDX+1 //
 119              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 120              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 121              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 122              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 123              	    .equ XOR_IDX, WORDS_IDX+1 //
 124              	    .equ XPOS_IDX,XOR_IDX+1 //
 125              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 126              	
  42              	
  43              	/* blue pill specific constants */ 
  44              	  .equ LED_GPIO, GPIOC_BASE_ADR
  45              	  .equ LED_PIN, 13
  46              	  .equ UART, USART1_BASE_ADR 
  47              	
  48              	
  49              	/*************************************
  50              	*   interrupt service vectors table 
  51              	**************************************/
ARM GAS  stm32-tbi.s 			page 16


  52              	   .section  .isr_vector,"a",%progbits
  53              	  .type  isr_vectors, %object
  54              	
  55              	isr_vectors:
  56 0000 00000000 	  .word    _mstack          /* main return stack address */
  57 0004 00000000 	  .word    reset_handler    /* startup address */
  58              	/* core interrupts || exceptions */
  59 0008 00000000 	  .word    default_handler  /*  -14 NMI */
  60 000c 00000000 	  .word    default_handler  /*  -13 HardFault */
  61 0010 00000000 	  .word    default_handler  /*  -12 Memory Management */
  62 0014 00000000 	  .word    default_handler  /* -11 Bus fault */
  63 0018 00000000 	  .word    default_handler  /* -10 Usage fault */
  64 001c 00000000 	  .word    0 /* -9 */
  65 0020 00000000 	  .word    0 /* -8 */ 
  66 0024 00000000 	  .word    0 /* -7 */
  67 0028 00000000 	  .word    0	/* -6 */
  68 002c 00000000 	  .word    default_handler  /* -5 SWI instruction */
  69 0030 00000000 	  .word    default_handler  /* -4 Debug monitor */
  70 0034 00000000 	  .word    0 /* -3 */
  71 0038 00000000 	  .word    default_handler  /* -2 PendSV */
  72 003c 00000000 	  .word    systick_handler  /* -1 Systick */
  73              	 irq0:  
  74              	  /* External Interrupts */
  75 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  76 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  77 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  78 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  79 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  80 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  81 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  82 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  83 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  84 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  85 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  86 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  87 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  88 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  89 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  90 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  91 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  92 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  93 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  94 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
  95 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
  96 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
  97 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
  98 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
  99 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 100 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 101 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 102 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 103 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 104 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 105 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 106 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 107 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 108 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
ARM GAS  stm32-tbi.s 			page 17


 109 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 110 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 111 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 112 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 113 00d8 00000000 	  .word      uart2_handler /* IRQ38, USART2 */                   
 114 00dc 00000000 	  .word      uart3_handler /* IRQ39, USART3 */                   
 115 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 116 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 117 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 118 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 119 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 120 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 121 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 122 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 123 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 124 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 125 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 126 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 127 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 128 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 129 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 130 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 131 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 132 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 133 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 134 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 135              	isr_end:
 136              	  .global vectors_size 
 137 0130 30010000 	vectors_size: .word isr_end - isr_vectors 
 138              	
 139              	
 140              	/*************************************
 141              	    EXCEPTIONS & INTERRUPTS HANDLERS 
 142              	*************************************/
 143              	
 144              	/*****************************************************
 145              	  default isr handler called on unexpected interrupt
 146              	*****************************************************/
 147              	   .section  .text , "ax", %progbits 
 148              	    _GBL_FUNC default_handler 
 149 0000 DFF88C05 	    ldr r0,=exception_msg 
 150 0004 00B5FFF7 	    _CALL uart_puts 
 150      FEFF5DF8 
 150      04EB
 151              	// delay
 152 000e 4FF40040 	    mov r0,#0x8000
 153 0012 0138     	    1: subs r0,#1 
 154 0014 FDD1     	    bne 1b 
 155 0016 82E0     	    b reset_mcu    
 156              	    .p2align 2 
 157              	exception_msg:
 158 0018 0A657865 	  	.asciz "\nexeption reboot!\n"
 158      7074696F 
 158      6E207265 
 158      626F6F74 
 158      210A00
 159              	
ARM GAS  stm32-tbi.s 			page 18


 160              	/*********************************
 161              		system milliseconds counter
 162              	*********************************/	
 163 002b 00       	    _GBL_FUNC systick_handler
 164 002c E069     	  ldr r0,[UPP,#TICKS]  
 165 002e 00F10100 	  add r0,#1
 166 0032 E061     	  str r0,[UPP,#TICKS]
 167 0034 206A     	  ldr r0,[UPP,#TIMER]
 168 0036 10B1     	  cbz r0, 9f
 169 0038 A0F10100 	  sub r0,#1
 170 003c 2062     	  str r0,[UPP,#TIMER]
 171              	9: 
 172 003e 7047     	  _RET 
 173              	
 174              	/*************************
 175              	  UART2_handler 
 176              	  receive character in 
 177              	  4 bytes rshift queue
 178              	  drop char if queue full.  
 179              	*************************/
 180              	    _GBL_FUNC uart2_handler 
 181 0040 4FF48840 	    _MOV32 r0,USART2_BASE_ADR 
 181      C4F20000 
 182 0048 0168     	    ldr r1,[r0,#USART_SR]
 183 004a 0079     	    ldrb r0,[r0,#USART_DR]
 184 004c 11F0200F 	    tst r1,#(1<<5) //RXNE 
 185 0050 15D0     	    beq 9f // no char in DR 
 186              	    // check if queue full.
 187 0052 626E     	    ldr r2,[UPP,#U2_COUNT]
 188 0054 042A     	    cmp r2,#4
 189 0056 12D0     	    beq 9f // queue full drop this char 
 190 0058 02F10101 	    add r1,r2,#1 
 191 005c 6166     	    str r1,[UPP,#U2_COUNT]
 192 005e 4FEAC202 	    lsl r2,#3 //COUNT*8
 193 0062 00FA02F0 	    lsl r0,r2 
 194 0066 4FF0FF01 	    mov r1,#255 
 195 006a 01FA02F1 	    lsl r1,r2 
 196 006e 6FEA0101 	    mvn r1,r1  
 197 0072 226E     	    ldr r2,[UPP,#U2_RX_QUEUE]
 198 0074 02EA0102 	    and r2,r1 
 199 0078 42EA0002 	    orr r2,r0 
 200 007c 2266     	    str r2,[UPP,#U2_RX_QUEUE]
 201 007e 7047     	9:  _RET 
 202              	
 203              	
 204              	/*************************
 205              	  uart3_handler
 206              	*************************/
 207              	    _GBL_FUNC uart3_handler 
 208 0080 4FF49040 	    _MOV32 r0,USART3_BASE_ADR 
 208      C4F20000 
 209 0088 0168     	    ldr r1,[r0,#USART_SR]
 210 008a 0079     	    ldrb r0,[r0,#USART_DR]
 211 008c 11F0200F 	    tst r1,#(1<<5) //RXNE 
 212 0090 15D0     	    beq 9f // no char in DR 
 213              	    // check if queue full.
 214 0092 E26E     	    ldr r2,[UPP,#U3_COUNT]
ARM GAS  stm32-tbi.s 			page 19


 215 0094 042A     	    cmp r2,#4
 216 0096 12D0     	    beq 9f // queue full drop this char 
 217 0098 02F10101 	    add r1,r2,#1 
 218 009c E166     	    str r1,[UPP,#U3_COUNT]
 219 009e 4FEAC202 	    lsl r2,#3 //COUNT*8
 220 00a2 00FA02F0 	    lsl r0,r2 
 221 00a6 4FF0FF01 	    mov r1,#255 
 222 00aa 01FA02F1 	    lsl r1,r2 
 223 00ae 6FEA0101 	    mvn r1,r1  
 224 00b2 A26E     	    ldr r2,[UPP,#U3_RX_QUEUE]
 225 00b4 02EA0102 	    and r2,r1 
 226 00b8 42EA0002 	    orr r2,r0 
 227 00bc A266     	    str r2,[UPP,#U3_RX_QUEUE]
 228 00be 7047     	9:  _RET 
 229              	
 230              	
 231              	/**************************
 232              		UART1 RX handler
 233              	**************************/
 234              	    _GBL_FUNC uart_rx_handler
 235 00c0 4FF46050 	    _MOV32 r0,UART 
 235      C4F20100 
 236 00c8 0168     	    ldr r1,[r0,#USART_SR]
 237 00ca 8288     	    ldrh r2,[r0,#USART_DR]
 238 00cc 11F0200F 	    tst r1,#(1<<5) // RXNE 
 239 00d0 0DD0     	    beq 2f // no char received 
 240 00d2 032A     	    cmp r2,#3 // CTRL_C // cold restart
 241 00d4 3FF4FEAF 	    beq user_reboot // received CTRL-C then reboot MCU 
 242 00d8 022A     	    cmp r2,#2 // CTRL_B  break program
 243 00da 09D0     	    beq 3f   
 244 00dc 04F15000 	    add r0,UPP,#RX_QUEUE
 245 00e0 E16C     	    ldr r1,[UPP,#RX_TAIL]
 246 00e2 4254     	    strb r2,[r0,r1]
 247 00e4 01F10101 	    add r1,#1 
 248 00e8 01F00F01 	    and r1,#(RX_QUEUE_SIZE-1)
 249 00ec E164     	    str r1,[UPP,#RX_TAIL]
 250              	2:
 251 00ee 7047     	  	_RET 
 252 00f0 00B5FFF7 	3:  _CALL uart_flush_queue
 252      FEFF5DF8 
 252      04EB
 253 00fa DFF89804 	    ldr r0,=warm_start 
 254 00fe 40F00100 	    orr r0,#1 
 255 0102 0690     	    str r0,[sp,#0x18]
 256 0104 7047     	    _RET 
 257              	
 258 0106 00BF     	    _GBL_FUNC user_reboot   
 259 0108 DFF88C04 	    ldr r0,=user_reboot_msg
 260 010c 00B5FFF7 	    _CALL uart_puts 
 260      FEFF5DF8 
 260      04EB
 261              	// delay 
 262 0116 4FF40040 	    mov r0,#0x8000
 263 011a 0138     	1: subs r0,#1  
 264 011c FDD1     	    bne 1b 
 265              	reset_mcu: 
 266 011e 0448     	    ldr r0,scb_adr 
ARM GAS  stm32-tbi.s 			page 20


 267 0120 C168     	    ldr r1,[r0,#SCB_AIRCR]
 268 0122 41F00401 	    orr r1,#(1<<2)
 269 0126 C0F2FA51 	    movt r1,#SCB_VECTKEY
 270 012a C160     	    str r1,[r0,#SCB_AIRCR]
 271 012c FEE7     	    b . 
 272 012e 00BF     	    .p2align 2 
 273              	scb_adr:
 274 0130 00ED00E0 	  	.word SCB_BASE_ADR 
 275              	user_reboot_msg:
 276 0134 0A757365 		  .asciz "\nuser reboot!\n"
 276      72207265 
 276      626F6F74 
 276      210A00
 277 0143 00       		  .p2align 2 
 278              	
 279              	/******************************
 280              	    nvic_enable_irq 
 281              	    enable irq in NVIC_ISERxx
 282              	    input:
 283              	        r0: irq#
 284              	    output:
 285              	        none 
 286              	    use:
 287              	      r1,r2,r3 
 288              	******************************/
 289              	    _GBL_FUNC nvic_enable_irq 
 290 0144 0EB4     	    push {r1,r2,r3}
 291 0146 4FF46142 	    _MOV32 r2,NVIC_BASE_ADR 
 291      CEF20002 
 292 014e 4FF02001 	    mov r1,#32 
 293 0152 B0FBF1F3 	    udiv r3,r0,r1 
 294 0156 4FEA8303 	    lsl r3,#2
 295 015a 1A44     	    add r2,r3 // NVIC_ISERxx 
 296 015c 4FEA9303 	    lsr r3,#2 
 297 0160 01FB03F3 	    mul r3,r1
 298 0164 A0EB0300 	    sub r0,r3 
 299 0168 4FF00101 	    mov r1,#1 
 300 016c 01FA00F1 	    lsl r1,r0 // irq bit mask
 301 0170 1068     	    ldr r0,[r2]
 302 0172 40EA0100 	    orr r0,r1 
 303 0176 1060     	    str r0,[r2]   
 304 0178 0EBC     	    pop {r1,r2,r3}
 305 017a 7047     	    _RET 
 306              	
 307              	
 308              	/******************************
 309              	    nvic_disable_irq 
 310              	    disable irq in NVIC_ICERxx
 311              	    input:
 312              	        r0: irq#
 313              	    output:
 314              	        none 
 315              	    use:
 316              	      r1,r2,r3 
 317              	******************************/
 318              	    _GBL_FUNC nvic_disable_irq 
 319 017c 0EB4     	    push {r1,r2,r3}
ARM GAS  stm32-tbi.s 			page 21


 320 017e 4EF28012 	    _MOV32 r2,(NVIC_BASE_ADR+NVIC_ICER0) 
 320      CEF20002 
 321 0186 4FF02001 	    mov r1,#32 
 322 018a B0FBF1F3 	    udiv r3,r0,r1 
 323 018e 4FEA8303 	    lsl r3,#2
 324 0192 1A44     	    add r2,r3 // NVIC_ICERxx 
 325 0194 4FEA9303 	    lsr r3,#2 
 326 0198 01FB03F3 	    mul r3,r1
 327 019c A0EB0300 	    sub r0,r3 
 328 01a0 4FF00101 	    mov r1,#1 
 329 01a4 01FA00F1 	    lsl r1,r0 // irq bit mask
 330 01a8 1068     	    ldr r0,[r2]
 331 01aa 40EA0100 	    orr r0,r1 
 332 01ae 1060     	    str r0,[r2]   
 333 01b0 0EBC     	    pop {r1,r2,r3}
 334 01b2 7047     	    _RET
 335              	
 336              	
 337              	/**************************************
 338              	  reset_handler execute at MCU reset
 339              	***************************************/
 340              	    _GBL_FUNC reset_handler
 341 01b4 4FF4A040 	    _MOV32 r0,RAM_END 
 341      C2F20000 
 342 01bc 8546     	    mov sp,r0 
 343 01be 00F02FF8 	    bl remap  
 344 01c2 00F045F8 	    bl	init_devices	 	/* RCC, GPIOs */
 345 01c6 00F0A1F8 	    bl  uart_init
 346 01ca FFF7FEFF 	    bl  cold_start  /* initialize BASIC SYSTEM */ 
 347 01ce 00F001F8 	    bl  test 
 348 01d2 FEE7     	    b .  
 349              	
 350              	    _FUNC test
 351 01d4 4FF00004 	  _MOV32 UPP,RAM_ADR
 351      C2F20004 
 352 01dc 04F59874 	  add UPP,#0x130
 353 01e0 00B5FFF7 	  _CALL get_curpos 
 353      FEFF5DF8 
 353      04EB
 354 01ea 02B4     	  push {r1} 
 355 01ec 4FF00A01 	  mov r1,#10 
 356 01f0 00B5FFF7 	  _CALL print_int 
 356      FEFF5DF8 
 356      04EB
 357 01fa 4FF02C00 	  mov r0,#','
 358 01fe 00B5FFF7 	  _CALL uart_putc 
 358      FEFF5DF8 
 358      04EB
 359 0208 01BC     	  pop {r0}
 360 020a 4FF00A01 	  mov r1,#10  
 361 020e 00B5FFF7 	  _CALL print_int 
 361      FEFF5DF8 
 361      04EB
 362 0218 7047     	  _RET 
 363              	
 364              	  tib_addr: 
 365 021a 00000000 	    .word _tib
ARM GAS  stm32-tbi.s 			page 22


 366              	
 367              	
 368              	// tranfert isr_vector to RAM at 0x20000000
 369 021e 00BF     	    _FUNC remap 
 370 0220 80EA0000 		eor r0,r0 // src 
 371 0224 4FF00001 		_MOV32 r1,RAM_ADR // dest 
 371      C2F20001 
 372 022c 4FF49872 		mov r2,#(isr_end-isr_vectors) // count 
 373 0230 00B5FFF7 	  _CALL cmove  
 373      FEFF5DF8 
 373      04EB
 374              	// set new vector table address
 375 023a 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 375      CEF20000 
 376 0242 4FF00001 		_MOV32 r1,RAM_ADR 
 376      C2F20001 
 377 024a 8160     		str r1,[r0,#SCB_VTOR]
 378 024c 7047     	  _RET 
 379              	
 380              	// initialize hardware devices 
 381 024e 00BF     	  _FUNC init_devices
 382              	/* init clock to HSE 72 Mhz */
 383              	/* set 2 wait states in FLASH_ACR_LATENCY */
 384 0250 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 384      C4F20200 
 385 0258 4FF01202 	  mov r2,#0x12
 386 025c 0260     	  str r2,[r0,#FLASH_ACR]
 387              	/* configure clock for HSE, 8 Mhz crystal */
 388              	/* enable HSE in RCC_CR */
 389 025e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 389      C4F20200 
 390 0266 0168     	  ldr r1,[r0,#RCC_CR]
 391 0268 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 392 026c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 393              	/* wait HSERDY loop */
 394              	wait_hserdy:
 395 026e 0168     	  ldr r1,[r0,#RCC_CR]
 396 0270 11F4003F 	  tst r1,#(1<<17)
 397 0274 FBD0     	  beq wait_hserdy
 398              	
 399              	/************************************************* 
 400              	   configure PLL mul factor and source 
 401              	   SYSCLOCK,72 Mhz
 402              	   select HSE as  PLL source clock
 403              	   multiply frequency by 9 
 404              	   APB1 clock is limited to 36 Mhz so divide by 2 
 405              	****************************************************/
 406 0276 4FF40441 	  mov r1,#(4<<8)+(2<<14) /* PLLMUL,7|PLLSCR,HSE|PPRE1=HCLK/2|ADCPRE=PCLK2/6 */
 407 027a C0F21D01 	  movt r1,#(7<<2)|1
 408 027e 4160     	  str r1,[r0,#RCC_CFGR]
 409              	  /* enable PLL */
 410 0280 0168     	  ldr r1,[r0,#RCC_CR]
 411 0282 41F08071 	  orr r1, #1<<24 
 412 0286 0160     	  str r1,[r0,#RCC_CR]
 413              	/* wait for PLLRDY */
 414              	wait_pllrdy:
 415 0288 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32-tbi.s 			page 23


 416 028a 11F0007F 	  tst r1,#(1<<25)
 417 028e FBD0     	  beq wait_pllrdy 
 418              	/* select PLL as sysclock */
 419 0290 4168     	  ldr r1,[r0,#RCC_CFGR]
 420 0292 4FF6FC72 	  _MOV32 r2,0xfffffffc
 420      CFF6FF72 
 421 029a 01EA0201 	  and r1,r1,r2 
 422 029e 4FF00202 	  mov r2,#2
 423 02a2 41EA0201 	  orr r1,r1,r2
 424 02a6 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 425              	/* wait for SWS,,2 */
 426              	wait_sws:
 427 02a8 4168     	  ldr r1,[r0,#RCC_CFGR]
 428 02aa 11F0080F 	  tst r1,#(2<<2)
 429 02ae FBD0     	  beq wait_sws
 430              	/* now sysclock is 72 Mhz */
 431              	
 432              	/* enable peripheral clock for GPIOs and USART1 */
 433 02b0 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 433      C4F20200 
 434 02b8 45F67D61 	  mov	r1, #0x5e7d		/* all GPIO and USART1 */
 435 02bc 8161     	  str	r1, [r0,#RCC_APB2ENR]
 436              	// enable T2-T4 clock 
 437 02be C169     	  ldr r1,[r0,#RCC_APB1ENR]
 438 02c0 41F00701 	  orr r1,#7 
 439 02c4 C161     	  str r1,[r0,#RCC_APB1ENR]
 440              	/* configure GPIOC:13 as output for user LED */
 441 02c6 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 441      C4F20100 
 442 02ce 4168     	  ldr r1,[r0,#GPIO_CRH]
 443 02d0 6FF47002 	  mvn r2,#(15<<20)
 444 02d4 01EA0201 	  and r1,r1,r2
 445 02d8 4FF4C002 	  mov r2,#(6<<20)
 446 02dc 41EA0201 	  orr r1,r1,r2
 447 02e0 4160     	  str r1,[r0,#GPIO_CRH]
 448              	/* turn off user LED */ 
 449 02e2 4FF40051 	  mov r1,#(1<<13)
 450 02e6 C160     	  str r1,[r0,#GPIO_ODR]
 451              	
 452              	/* disable JTDI,JTDO,JTRST */
 453 02e8 4FF00000 	  _MOV32 r0,AFIO_BASE_ADR
 453      C4F20100 
 454 02f0 4FF00071 	  mov r1,#2<<24 
 455 02f4 4160     	  str r1,[r0,#AFIO_MAPR]
 456              	
 457              	/* configure systicks for 1msec ticks */
 458 02f6 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 458      CEF20000 
 459 02fe 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 460 0302 4160     	  str r1,[r0,#STK_LOAD]
 461 0304 4FF00301 	  mov r1,#3
 462 0308 0160     	  str r1,[r0,STK_CTL]
 463 030a 7047     	  _RET  
 464              	
 465              	/*******************************
 466              	  initialize UART peripheral 
 467              	********************************/
ARM GAS  stm32-tbi.s 			page 24


 468              		  _FUNC uart_init
 469              	/* set GPIOA PIN 9, uart TX  */
 470 030c 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 470      C4F20100 
 471 0314 4168     	    ldr r1,[r0,#GPIO_CRH]
 472 0316 6FF0F002 	    mvn r2,#(15<<4)
 473 031a 01EA0201 	    and r1,r1,r2
 474 031e 4FF0A002 	    mov r2,#(0xA<<4)
 475 0322 41EA0201 	    orr r1,r1,r2 
 476 0326 4160     	    str r1,[r0,#GPIO_CRH]
 477              	/* lock PA9,PA10 to block pins reconfiguration */
 478 0328 4FF4C061 	    mov r1,#(1<<9)+(1<<10)
 479 032c 4FF00402 	    mov r2,#4
 480 0330 C0F20101 	    movt r1,#1
 481 0334 8161     	1:  str r1,[r0,#GPIO_LCKR]
 482 0336 81F48031 	    eor r1,#(1<<16) 
 483 033a 013A     	    subs r2,#1 
 484 033c FAD1     	    bne 1b 
 485              	/* configure usart */     
 486 033e 4FF46050 	    _MOV32 r0,UART 
 486      C4F20100 
 487              	/* BAUD rate */
 488 0346 40F27121 	    mov r1,#(39<<4)+1  /* (72Mhz/16)/115200,39,0625, quotient,39, reste,0,0625*16,1 */
 489 034a 8160     	    str r1,[r0,#USART_BRR]
 490 034c 42F22C01 	    mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 491 0350 C160     	    str r1,[r0,#USART_CR1] /*enable usart*/
 492              	/* enable interrupt in NVIC */
 493 0352 4FF02500 	    mov r0,#IRQ_USART1
 494 0356 00B5FFF7 	    _CALL nvic_enable_irq
 494      FEFF5DF8 
 494      04EB
 495 0360 7047     	    bx lr 
 496              	
 497              	/***************************
 498              	    uart_flush_queue
 499              	    flush rx queue
 500              	  input:
 501              	    none
 502              	  output:
 503              	    none 
 504              	  use:
 505              	    T1 temp
 506              	***************************/
 507 0362 00BF     	    _GBL_FUNC uart_flush_queue
 508 0364 4DF8048D 	    push {T1}
 509 0368 88EA0808 	    eor T1,T1 
 510 036c C4F84880 	    str T1,[UPP,#RX_HEAD]
 511 0370 C4F84C80 	    str T1,[UPP,#RX_TAIL]
 512 0374 5DF8048B 	    pop {T1}
 513 0378 7047     	    _RET 
 514              	
 515              	/****************************
 516              	    UART_PUTC
 517              	  send character to uart
 518              	  input: 
 519              	    R0 character to send 
 520              	  use:
ARM GAS  stm32-tbi.s 			page 25


 521              	    T1 status  
 522              	    T2 UART address
 523              	*****************************/
 524 037a 00BF     	    _GBL_FUNC uart_putc
 525 037c 2DE90003 	    push {T1,T2}
 526 0380 4FF46059 	    _MOV32 T2,UART
 526      C4F20109 
 527              	1: 
 528 0388 D9F80080 	    ldr T1,[T2,#USART_SR]
 529 038c 18F08008 	    ands T1,#0x80
 530 0390 FAD0     	    beq 1b // UART_DR full,wait  
 531 0392 89F80400 	    strb r0,[T2,#USART_DR]
 532 0396 BDE80003 	    pop {T1,T2}
 533 039a 7047     	    _RET  
 534              	
 535              	
 536              	/**********************************
 537              	  UART_QKEY
 538              	  check if character available in 
 539              	  rx1_qeue
 540              	  input:
 541              	    none
 542              	  output:
 543              	    r0 flag = RX_HEAD^REX_TAIL 
 544              	    flags 
 545              	  use:
 546              	    r0  RX_HEAD  
 547              	    r1  RX_TAIL   
 548              	***********************************/
 549              	    _GBL_FUNC uart_qkey
 550 039c 02B4     	    push {r1}
 551 039e A06C     	    ldr r0,[UPP,#RX_HEAD]
 552 03a0 E16C     	    ldr r1,[UPP,#RX_TAIL]
 553 03a2 4840     	    eors r0,r1
 554 03a4 02BC     	    pop {r1} 
 555 03a6 7047     	    _RET 
 556              	
 557              	/**********************************
 558              	  UART_GETC 
 559              	  wait a character from uart 
 560              	  input:
 561              	    none
 562              	  output:
 563              	    r0  character 
 564              	  use:
 565              	    T1  rx_queue 
 566              	    T2  rx_head  
 567              	**********************************/
 568              	    _GBL_FUNC uart_getc
 569 03a8 2DE90003 	    push {T1,T2}
 570              	1:
 571 03ac 00B5FFF7 	    _CALL uart_qkey 
 571      FEFF5DF8 
 571      04EB
 572 03b6 F9D0     	    beq 1b  
 573 03b8 04F15008 	    add T1,UPP,#RX_QUEUE
 574 03bc D4F84890 	    ldr T2, [UPP,#RX_HEAD]
ARM GAS  stm32-tbi.s 			page 26


 575 03c0 18F80900 	    ldrb r0,[T1,T2]
 576 03c4 09F10109 	    add T2,#1
 577 03c8 09F00F09 	    and T2,#(RX_QUEUE_SIZE-1)
 578 03cc C4F84890 	    str T2,[UPP,#RX_HEAD]
 579 03d0 BDE80003 	    pop {T1,T2}
 580 03d4 7047     	    _RET  
 581              	
 582              	
 583              	/***************************
 584              	  Flash memory interface
 585              	***************************/
 586              	
 587              	/***********************************
 588              	  unlock 
 589              	  unlock flash memory for writing
 590              	  input:
 591              	    r0    0 lock, 1 unlock 
 592              	  output:
 593              	    none
 594              	  use: 
 595              	    r6     temp  
 596              	***********************************/
 597 03d6 00BF     	    _GBL_FUNC unlock  
 598 03d8 40B4     	    push {r6}
 599 03da 0040     	    ands r0,r0 
 600 03dc 15D0     	    beq lock 
 601 03de 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 601      C4F20200 
 602 03e6 4FF03406 	    mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 603 03ea C660     	    str r6,[r0,#FLASH_SR]
 604 03ec 0669     	    ldr r6,[r0,#FLASH_CR]
 605 03ee 16F0800F 	    tst r6,#(1<<7)
 606 03f2 11D0     	    beq 9f
 607 03f4 40F22316 	    _MOV32 r6,FLASH_KEY1  
 607      C4F26756 
 608 03fc 4660     	    str	r6, [r0, #FLASH_KEYR]
 609 03fe 48F6AB16 	    _MOV32 r6,FLASH_KEY2
 609      CCF6EF56 
 610 0406 4660     	    str	r6, [r0, #FLASH_KEYR]
 611 0408 06E0     	    b 9f 
 612              	// lock flash memory
 613              	lock: 
 614 040a 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 614      C4F20200 
 615 0412 4FF08006 	    mov r6,#(1<<7)
 616 0416 0661     	    str r6,[r0,#FLASH_CR]
 617 0418 40BC     	9:  pop {r6}
 618 041a 7047     	  	_RET  
 619              	
 620              	
 621              	/*********************************
 622              	   wait_busy 
 623              	   wait until busy flag is cleared 
 624              	   input:
 625              	    none
 626              	   output:
 627              	    none 
ARM GAS  stm32-tbi.s 			page 27


 628              	   use:
 629              	     r0    flash registers address 
 630              	     r1    temp 
 631              	***********************************/
 632              	    _FUNC wait_busy 
 633 041c 03B4     	    push {r0,r1}
 634 041e 4FF40050 	    _MOV32	r0,FLASH_BASE_ADR
 634      C4F20200 
 635              	1:
 636 0426 C168     	    ldr	r1, [r0, #FLASH_SR]	//  FLASH_SR
 637 0428 11F00101 	    ands r1, #0x1	//  BSY
 638 042c FBD1     	    bne	1b 
 639 042e 03BC     	    pop {r0,r1}
 640 0430 7047     	    _RET
 641              	
 642              	/***************************************
 643              	   hword_write
 644              	   write 16 bits value to flash memory 
 645              	   input:
 646              	    r0  data 
 647              	    r1  address 
 648              	   output:
 649              	     none 
 650              	   use: 
 651              	     r6    flash control regs base address 
 652              	     r7    temp  
 653              	***************************************/
 654 0432 00BF     	    _GBL_FUNC hword_write 
 655 0434 C0B4     	    push {r6,r7}
 656 0436 4FF40056 	    _MOV32 r6,FLASH_BASE_ADR
 656      C4F20206 
 657 043e 4FF00107 	    mov r7,#1 // set PG 
 658 0442 3761     	    str r7,[r6,#FLASH_CR]
 659 0444 0880     	    strh r0,[r1] 
 660 0446 00B5FFF7 	    _CALL wait_busy  
 660      E8FF5DF8 
 660      04EB
 661 0450 F768     	    ldr r7,[r6,#FLASH_SR]
 662 0452 17F01407 	    ands r7,r7,#(5<<2) 
 663 0456 05D0     	    beq 9f
 664 0458 5048     	    ldr r0,=write_error
 665 045a 00B5FFF7 	    _CALL uart_puts   
 665      FEFF5DF8 
 665      04EB
 666 0464 C0BC     	9:	pop {r6,r7}
 667 0466 7047     	    _RET  
 668              	write_error:	
 669 0468 20777269 	    .asciz " write error!"
 669      74652065 
 669      72726F72 
 669      2100
 670 0476 00BF     	    .p2align 2
 671              	
 672              	/****************************************
 673              	    flash_store
 674              	    Write one word into flash memory
 675              	    address must even
ARM GAS  stm32-tbi.s 			page 28


 676              	    input:
 677              	      r0    data 
 678              	      r1    adr 
 679              	    output: 
 680              	      none 
 681              	    use:
 682              	      T1 data 
 683              	      T2 adr 
 684              	*****************************************/ 
 685              	    _GBL_FUNC flash_store 
 686 0478 2DE90003 	    push {T1,T2}
 687 047c 8046     	    mov T1,r0
 688 047e 8946     	    mov T2,r1  
 689 0480 4FF00100 	    mov r0,#1
 690 0484 00B5FFF7 	    _CALL unlock 
 690      FEFF5DF8 
 690      04EB
 691 048e 4046     	    mov r0,T1 
 692 0490 4946     	    mov r1,T2 
 693 0492 00B5FFF7 	    _CALL hword_write
 693      FEFF5DF8 
 693      04EB
 694 049c 4FEA1840 	    mov r0,T1,lsr #16 
 695 04a0 09F10201 	    add r1,T2,#2
 696 04a4 00B5FFF7 	    _CALL hword_write
 696      FEFF5DF8 
 696      04EB
 697 04ae 80EA0000 	    eor r0,r0 
 698 04b2 00B5FFF7 	    _CALL unlock  
 698      FEFF5DF8 
 698      04EB
 699 04bc BDE80003 	    pop {T1,T2}
 700 04c0 7047     	    _RET 
 701              	
 702              	/********************************************
 703              	    erase_page 
 704              	    erase 1024 bytes flash page 
 705              	    input:
 706              	       r0    adr 
 707              	    output:
 708              	       None 
 709              	    use:
 710              	      T1    adr
 711              	      T2    temp   
 712              	**********************************************/
 713 04c2 00BF     	    _GBL_FUNC erase_page 
 714 04c4 2DE90003 	    push {T1,T2}
 715 04c8 8046     	    mov T1,r0 
 716 04ca 4FF00100 	    mov r0,#1 
 717 04ce 00B5FFF7 	    _CALL unlock 
 717      FEFF5DF8 
 717      04EB
 718 04d8 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 718      C4F20200 
 719 04e0 4FF00209 	    mov T2,#2 // PER bit in FLASH_CR 
 720 04e4 C0F81090 	    str T2,[r0,#FLASH_CR]
 721 04e8 C0F81480 	    str T1,[r0,#FLASH_AR]
ARM GAS  stm32-tbi.s 			page 29


 722 04ec 49F04009 	    orr T2,#0x40 
 723 04f0 C0F81090 	    str T2,[r0,#FLASH_CR]
 724 04f4 00B5FFF7 	    _CALL wait_busy
 724      91FF5DF8 
 724      04EB
 725 04fe D0F80C90 	    ldr T2,[r0,#FLASH_SR]
 726 0502 19F01409 	    ands T2,#(5<<2)
 727 0506 05D0     	    beq 9f
 728 0508 0748     	    ldr r0,erase_error
 729 050a 00B5FFF7 	    _CALL uart_puts 
 729      FEFF5DF8 
 729      04EB
 730 0514 80EA0000 	9:  eor r0,r0 
 731 0518 00B5FFF7 	    _CALL unlock 
 731      FEFF5DF8 
 731      04EB
 732 0522 BDE80003 	    pop {T1,T2}
 733 0526 7047     	    _RET 
 734              	erase_error:
 735 0528 20657261 	    .asciz " erase error!\r"
 735      73652065 
 735      72726F72 
 735      210D00
 736 0537 00       	    .p2align 2
 737              	
 738              	/*****************************************
 739              	    write_page 
 740              	    write a page buffer to flash memory 
 741              	    input:
 742              	      r0  *buffer 
 743              	      r1  flash_adr 
 744              	    output:
 745              	      none 
 746              	    use:
 747              	      r2  size counter
 748              	      T1  *buffer 
 749              	******************************************/
 750              	    _GBL_FUNC write_page
 751 0538 2DE90401 	    push {r2,T1}
 752 053c 8046     	    mov T1,r0
 753 053e 4FF00100 	    mov r0,#1 
 754 0542 00B5FFF7 	    _CALL unlock
 754      FEFF5DF8 
 754      04EB
 755 054c 4FF48062 	    mov r2,#PAGE_SIZE 
 756 0550 38F8020B 	1:  ldrh r0,[T1],#2 
 757 0554 00B5FFF7 	    _CALL hword_write 
 757      FEFF5DF8 
 757      04EB
 758 055e 01F10201 	    add r1,#2
 759 0562 023A     	    subs r2,#2 
 760 0564 F4D1     	    bne 1b 
 761 0566 80EA0000 	    eor r0,r0 
 762 056a 00B5FFF7 	    _CALL unlock 
 762      FEFF5DF8 
 762      04EB
 763 0574 BDE80401 	    pop {r2,T1}
ARM GAS  stm32-tbi.s 			page 30


 764 0578 7047     	    _RET 
 765              	
 766              	      
 767              	/**********************************************
 768              	   page_align 
 769              	   align address to FLASH page boundary 
 770              	   input:
 771              	     r0    address 
 772              	   output:
 773              	     r0    aligned 
 774              	   use: 
 775              	     r1  
 776              	**********************************************/
 777 057a 00BF     	    _GBL_FUNC page_align 
 778 057c 02B4     	    push {r1}
 779 057e 40F2FF31 	    mov r1,#PAGE_SIZE-1
 780 0582 0844     	    add r0,r1
 781 0584 6FEA0101 	    mvn r1,r1 
 782 0588 00EA0100 	    and r0,r1 
 783 058c 02BC     	    pop {r1}
 784 058e 7047     	    _RET 
 785 0590 18000000 	
 785      00000000 
 785      34010000 
 785      68040000 
ARM GAS  stm32-tbi.s 			page 31


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:87     *ABS*:0000000000000000 GPIO_O_PP
       stm32f103.inc:88     *ABS*:0000000000000004 GPIO_O_OD
ARM GAS  stm32-tbi.s 			page 32


       stm32f103.inc:89     *ABS*:0000000000000008 GPIO_O_AFPP
       stm32f103.inc:90     *ABS*:000000000000000c GPIO_O_AFOD
       stm32f103.inc:92     *ABS*:0000000000000002 S2MHZ
       stm32f103.inc:93     *ABS*:0000000000000001 S10MHZ
       stm32f103.inc:94     *ABS*:0000000000000003 S50MHZ
       stm32f103.inc:95     *ABS*:0000000000000001 OSPEED
       stm32f103.inc:96     *ABS*:0000000000000001 OUTPUT_PP
       stm32f103.inc:97     *ABS*:0000000000000005 OUTPUT_OD
       stm32f103.inc:98     *ABS*:0000000000000009 OUTPUT_AFPP
       stm32f103.inc:101    *ABS*:0000000000000000 PULLDOWN
       stm32f103.inc:102    *ABS*:0000000000000001 PULLUP
       stm32f103.inc:104    *ABS*:0000000000000000 ANALOG
       stm32f103.inc:105    *ABS*:0000000000000004 FLOATING
       stm32f103.inc:106    *ABS*:0000000000000008 PULL_RESISTOR
       stm32f103.inc:107    *ABS*:0000000000000000 INPUT_ANA
       stm32f103.inc:108    *ABS*:0000000000000004 INPUT_FLOAT
       stm32f103.inc:109    *ABS*:0000000000000010 INPUT_PD
       stm32f103.inc:110    *ABS*:0000000000000011 INPUT_PU
       stm32f103.inc:113    *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:116    *ABS*:0000000000000000 AFIO_EVCR
       stm32f103.inc:117    *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:118    *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:119    *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:120    *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:121    *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:122    *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:125    *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:126    *ABS*:0000000040004400 USART2_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000040004800 USART3_BASE_ADR
       stm32f103.inc:130    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:131    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:132    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:133    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:134    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:135    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:136    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:139    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:141    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:142    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:143    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:144    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:147    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:149    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:150    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:151    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:152    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:153    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:154    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:155    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:156    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:157    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:158    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:159    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:160    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:161    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:162    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:164    *ABS*:00000000000005fa SCB_VECTKEY
ARM GAS  stm32-tbi.s 			page 33


       stm32f103.inc:167    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:168    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:169    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:170    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:171    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:172    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:173    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:174    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:175    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:176    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:177    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:178    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:179    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:180    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:181    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:182    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:183    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:186    *ABS*:0000000000000000 IRQ_WWDG
       stm32f103.inc:187    *ABS*:0000000000000001 IRQ_PVD
       stm32f103.inc:188    *ABS*:0000000000000002 IRQ_TAMPER
       stm32f103.inc:189    *ABS*:0000000000000003 IRQ_RTC
       stm32f103.inc:190    *ABS*:0000000000000004 IRQ_FLASH
       stm32f103.inc:191    *ABS*:0000000000000005 IRQ_RCC
       stm32f103.inc:192    *ABS*:0000000000000006 IRQ_EXTI0
       stm32f103.inc:193    *ABS*:0000000000000007 IRQ_EXIT1
       stm32f103.inc:194    *ABS*:0000000000000008 IRQ_EXTI2
       stm32f103.inc:195    *ABS*:0000000000000009 IRQ_EXIT3
       stm32f103.inc:196    *ABS*:000000000000000a IRQ_EXIT4
       stm32f103.inc:197    *ABS*:000000000000000b IRQ_DMA1CH1
       stm32f103.inc:198    *ABS*:000000000000000c IRQ_DMA1CH2
       stm32f103.inc:199    *ABS*:000000000000000d IRQ_DAM1CH3
       stm32f103.inc:200    *ABS*:000000000000000e IRQ_DMA1CH4
       stm32f103.inc:201    *ABS*:000000000000000f IRQ_DMA1CH5
       stm32f103.inc:202    *ABS*:0000000000000010 IRQ_DMA1CH6
       stm32f103.inc:203    *ABS*:0000000000000011 IRQ_DMA1CH7
       stm32f103.inc:204    *ABS*:0000000000000012 IRQ_ADC1_2
       stm32f103.inc:205    *ABS*:0000000000000013 IRQ_USB_HP_CAN_TX
       stm32f103.inc:206    *ABS*:0000000000000014 IRQ_USB_LP_CAN_RX0
       stm32f103.inc:207    *ABS*:0000000000000015 IRQ_CAN_RX1
       stm32f103.inc:208    *ABS*:0000000000000016 IRQ_CAN_SCE
       stm32f103.inc:209    *ABS*:0000000000000017 IRQ_EXTI9_5
       stm32f103.inc:210    *ABS*:0000000000000018 IRQ_TIM1_BRK
       stm32f103.inc:211    *ABS*:0000000000000019 IRQ_TIM1_UP
       stm32f103.inc:212    *ABS*:000000000000001a IRQ_TIM1_TRG_COM
       stm32f103.inc:213    *ABS*:000000000000001b IRQ_TIM1_CC
       stm32f103.inc:214    *ABS*:000000000000001c IRQ_TIM2
       stm32f103.inc:215    *ABS*:000000000000001d IRQ_TIM3
       stm32f103.inc:216    *ABS*:000000000000001e IRQ_TIM4
       stm32f103.inc:217    *ABS*:000000000000001f IRQ_I2C1_EV
       stm32f103.inc:218    *ABS*:0000000000000020 IRQ_I2C1_ER
       stm32f103.inc:219    *ABS*:0000000000000021 IRQ_I2C2_EV
       stm32f103.inc:220    *ABS*:0000000000000022 IRQ_I2C2_ER
       stm32f103.inc:221    *ABS*:0000000000000023 IRQ_SPI1
       stm32f103.inc:222    *ABS*:0000000000000024 IRQ_SPI2
       stm32f103.inc:223    *ABS*:0000000000000025 IRQ_USART1
       stm32f103.inc:224    *ABS*:0000000000000026 IRQ_USART2
       stm32f103.inc:225    *ABS*:0000000000000027 IRQ_USART3
ARM GAS  stm32-tbi.s 			page 34


       stm32f103.inc:226    *ABS*:0000000000000028 IRQ_EXTI15_10
       stm32f103.inc:227    *ABS*:0000000000000029 IRQ_RTCALARM
       stm32f103.inc:228    *ABS*:000000000000002a IRQ_USB_WKUP
       stm32f103.inc:229    *ABS*:000000000000002b IRQ_TIM8_BRK
       stm32f103.inc:230    *ABS*:000000000000002c IRQ_TIM8_UP
       stm32f103.inc:231    *ABS*:000000000000002d IRQ_TIM8_TRG_COM
       stm32f103.inc:232    *ABS*:000000000000002e IRQ_TIM8_CC
       stm32f103.inc:233    *ABS*:000000000000002f IRQ_ADC3
       stm32f103.inc:234    *ABS*:0000000000000030 IRQ_FSMC
       stm32f103.inc:235    *ABS*:0000000000000031 IRQ_SDIO
       stm32f103.inc:236    *ABS*:0000000000000032 IRQ_TIM5
       stm32f103.inc:237    *ABS*:0000000000000033 IRQ_SPI3
       stm32f103.inc:238    *ABS*:0000000000000034 IRQ_UART4
       stm32f103.inc:239    *ABS*:0000000000000035 IRQ_UART5
       stm32f103.inc:240    *ABS*:0000000000000036 IRQ_TIM6
       stm32f103.inc:241    *ABS*:0000000000000037 IRQ_TIM7
       stm32f103.inc:242    *ABS*:0000000000000038 IRQ_DMA2CH1
       stm32f103.inc:243    *ABS*:0000000000000039 IRQ_DMA2CH2
       stm32f103.inc:244    *ABS*:000000000000003a IRQ_DMA2CH3
       stm32f103.inc:245    *ABS*:000000000000003b IRQ_DMA2CH4_5
       stm32f103.inc:249    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:250    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:251    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:252    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:255    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:256    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:257    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:258    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:259    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:260    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:261    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:262    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:265    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:266    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:267    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:268    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:269    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:272    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:273    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:274    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:275    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:278    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:279    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:280    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:281    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:282    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:285    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:286    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:287    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:288    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:289    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:290    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:291    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:292    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:293    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:294    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:295    *ABS*:0000000000000024 ADC_HTR
ARM GAS  stm32-tbi.s 			page 35


       stm32f103.inc:296    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:297    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:298    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:299    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:300    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:301    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:302    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:303    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:304    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:305    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:308    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:309    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:310    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:311    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:313    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:314    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:315    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:316    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:317    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:318    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:319    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:320    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:321    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:322    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:323    *ABS*:0000000000000028 TIM_PSC
       stm32f103.inc:324    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:325    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:326    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:327    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:328    *ABS*:000000000000004c TIM_DMAR
       stm32f103.inc:331    *ABS*:0000000040013000 SPI1_BASE_ADR
       stm32f103.inc:332    *ABS*:0000000040003800 SPI2_BASE_ADR
       stm32f103.inc:334    *ABS*:0000000000000000 SPI_CR1
       stm32f103.inc:335    *ABS*:0000000000000004 SPI_CR2
       stm32f103.inc:336    *ABS*:0000000000000008 SPI_SR
       stm32f103.inc:337    *ABS*:000000000000000c SPI_DR
       stm32f103.inc:338    *ABS*:0000000000000010 SPI_CRCPR
       stm32f103.inc:339    *ABS*:0000000000000014 SPI_RXCRCR
       stm32f103.inc:340    *ABS*:0000000000000018 SPI_TXCRCR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
ARM GAS  stm32-tbi.s 			page 36


           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
ARM GAS  stm32-tbi.s 			page 37


      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
ARM GAS  stm32-tbi.s 			page 38


      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 U2_RX_QUEUE
      tbi_macros.inc:137    *ABS*:0000000000000064 U2_COUNT
      tbi_macros.inc:138    *ABS*:0000000000000068 U3_RX_QUEUE
      tbi_macros.inc:139    *ABS*:000000000000006c U3_COUNT
      tbi_macros.inc:140    *ABS*:0000000000000070 VARS
      tbi_macros.inc:141    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:142    *ABS*:00000000000000d8 ARRAY_ADR
      tbi_macros.inc:143    *ABS*:00000000000000dc TRACE_LEVEL
      tbi_macros.inc:144    *ABS*:00000000000000e0 HERE
      tbi_macros.inc:145    *ABS*:00000000000000e0 BASIC_START
      tbi_macros.inc:148    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:149    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:150    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:151    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:152    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:153    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:154    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:155    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:157    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:158    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
ARM GAS  stm32-tbi.s 			page 39


       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RANDOMIZE_IDX
       cmd_index.inc:85     *ABS*:000000000000003c READ_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REM_IDX
       cmd_index.inc:87     *ABS*:000000000000003e REST_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RET_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 RND_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RSHIFT_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 RUN_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SAVE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_INIT_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_OFF_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SERVO_POS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SLEEP_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 SPC_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 SPI_DSEL_IDX
       cmd_index.inc:99     *ABS*:000000000000004a SPI_INIT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b SPI_READ_IDX
       cmd_index.inc:101    *ABS*:000000000000004c SPI_SELECT_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SPI_WRITE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e STEP_IDX
       cmd_index.inc:104    *ABS*:000000000000004f STOP_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 STORE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TAB_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 THEN_IDX
ARM GAS  stm32-tbi.s 			page 40


       cmd_index.inc:108    *ABS*:0000000000000053 TICKS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 TIMER_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 TMROUT_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 TO_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TONE_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TONE_INIT_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TRACE_IDX
       cmd_index.inc:115    *ABS*:000000000000005a UART_GETC_IDX
       cmd_index.inc:116    *ABS*:000000000000005b UART_INIT_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UART_PUTC_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UBOUND_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UFLASH_IDX
       cmd_index.inc:120    *ABS*:000000000000005f UNTIL_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 XOR_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XPOS_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 YPOS_IDX
         stm32-tbi.s:44     *ABS*:0000000040011000 LED_GPIO
         stm32-tbi.s:45     *ABS*:000000000000000d LED_PIN
         stm32-tbi.s:46     *ABS*:0000000040013800 UART
         stm32-tbi.s:55     .isr_vector:0000000000000000 isr_vectors
         stm32-tbi.s:340    .text:00000000000001b4 reset_handler
         stm32-tbi.s:148    .text:0000000000000000 default_handler
         stm32-tbi.s:163    .text:000000000000002c systick_handler
         stm32-tbi.s:73     .isr_vector:0000000000000040 irq0
         stm32-tbi.s:234    .text:00000000000000c0 uart_rx_handler
         stm32-tbi.s:180    .text:0000000000000040 uart2_handler
         stm32-tbi.s:207    .text:0000000000000080 uart3_handler
         stm32-tbi.s:135    .isr_vector:0000000000000130 isr_end
         stm32-tbi.s:137    .isr_vector:0000000000000130 vectors_size
         stm32-tbi.s:148    .text:0000000000000000 $t
         stm32-tbi.s:157    .text:0000000000000018 exception_msg
         stm32-tbi.s:265    .text:000000000000011e reset_mcu
         stm32-tbi.s:158    .text:0000000000000018 $d
         stm32-tbi.s:258    .text:0000000000000108 user_reboot
         stm32-tbi.s:507    .text:0000000000000364 uart_flush_queue
         stm32-tbi.s:275    .text:0000000000000134 user_reboot_msg
         stm32-tbi.s:273    .text:0000000000000130 scb_adr
         stm32-tbi.s:274    .text:0000000000000130 $d
         stm32-tbi.s:289    .text:0000000000000144 nvic_enable_irq
         stm32-tbi.s:318    .text:000000000000017c nvic_disable_irq
         stm32-tbi.s:369    .text:0000000000000220 remap
         stm32-tbi.s:381    .text:0000000000000250 init_devices
         stm32-tbi.s:468    .text:000000000000030c uart_init
         stm32-tbi.s:350    .text:00000000000001d4 test
         stm32-tbi.s:524    .text:000000000000037c uart_putc
         stm32-tbi.s:364    .text:000000000000021a tib_addr
         stm32-tbi.s:365    .text:000000000000021a $d
         stm32-tbi.s:369    .text:000000000000021e $t
         stm32-tbi.s:394    .text:000000000000026e wait_hserdy
         stm32-tbi.s:414    .text:0000000000000288 wait_pllrdy
         stm32-tbi.s:426    .text:00000000000002a8 wait_sws
         stm32-tbi.s:549    .text:000000000000039c uart_qkey
         stm32-tbi.s:568    .text:00000000000003a8 uart_getc
         stm32-tbi.s:597    .text:00000000000003d8 unlock
         stm32-tbi.s:613    .text:000000000000040a lock
ARM GAS  stm32-tbi.s 			page 41


         stm32-tbi.s:632    .text:000000000000041c wait_busy
         stm32-tbi.s:654    .text:0000000000000434 hword_write
         stm32-tbi.s:668    .text:0000000000000468 write_error
         stm32-tbi.s:669    .text:0000000000000468 $d
         stm32-tbi.s:670    .text:0000000000000476 $t
         stm32-tbi.s:685    .text:0000000000000478 flash_store
         stm32-tbi.s:713    .text:00000000000004c4 erase_page
         stm32-tbi.s:734    .text:0000000000000528 erase_error
         stm32-tbi.s:735    .text:0000000000000528 $d
         stm32-tbi.s:750    .text:0000000000000538 write_page
         stm32-tbi.s:777    .text:000000000000057c page_align
         stm32-tbi.s:785    .text:0000000000000590 $d
         stm32-tbi.s:163    .text:000000000000002b $d
         stm32-tbi.s:163    .text:000000000000002c $t
         stm32-tbi.s:277    .text:0000000000000143 $d
         stm32-tbi.s:277    .text:0000000000000144 $t
         stm32-tbi.s:736    .text:0000000000000537 $d
         stm32-tbi.s:736    .text:0000000000000538 $t

UNDEFINED SYMBOLS
GPIO_AFOD
_mstack
uart_puts
warm_start
cold_start
get_curpos
print_int
_tib
cmove
