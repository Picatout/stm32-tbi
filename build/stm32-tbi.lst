ARM GAS  stm32-tbi.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	/*****************************************
  20              	    REGISTERS USAGE 
  21              	
  22              	 R0   ACCA  //  arithmetic operator A 
  23              	 R1   ACCB  //  arithmetic operator B 
  24              	 R2   VPC   //  virtual machine program counter  
  25              	 R3   UPP   //  system variables base address 
  26              	 R4   VPP   //  BASIC variables base address 
  27              	 R5         //  FOR loop counter 
  28              	 R6         //  FOR loop limit 
  29              	 R7         //  FOR loop increment 
  30              	 R8-R11     //  temporary registers
  31              	 R12        //  parameters stack pointer 
  32              	*****************************************/
  33              	
  34              	  .syntax unified
  35              	  .cpu cortex-m3
  36              	  .fpu softvfp
  37              	  .thumb
  38              	
  39              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
ARM GAS  stm32-tbi.s 			page 2


  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
ARM GAS  stm32-tbi.s 			page 3


  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
ARM GAS  stm32-tbi.s 			page 4


 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  40              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
ARM GAS  stm32-tbi.s 			page 5


  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  41              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
ARM GAS  stm32-tbi.s 			page 6


  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	// keyword types 
  30              	  .equ F_CMD,0x20     // command keyword
  31              	  .equ F_IFUNC,0x40 // integer function keyword
  32              	  .equ F_CFUNC,0x80 // character function keyword
  33              	  .equ F_CONST,0xC0 // function keyword that return a constant
  34              	
  35              	//--------------------------------------
  36              	//   constantes related to Arduino 
  37              	//   API mapping 
  38              	//-------------------------------------
  39              	  .equ INP,0
  40              	  .equ OUTP,1 
  41              	
  42              	//--------------------------------------
  43              	//       token attribute
  44              	//--------------------------------------
  45              	// bits 4:5 identify token group 
  46              	// 0x0n -> miscelinous 
  47              	// 0x1n -> +|- operators 
  48              	// 0x2n -> *|/|% operators
  49              	// 0x3n -> relational operators 
  50              	  .equ TK_NONE,0       // not a token 
  51              	  .equ TK_COLON,1      // command separator ':' 
  52              	  .equ TK_QSTR,2     // quoted string  
  53              	  .equ TK_CHAR,3       // ASCII character 
  54              	  .equ TK_VAR,5      // variable index 
  55              	  .equ TK_ARRAY,6     // array variable '@' 
  56              	  .equ TK_LPAREN,7     // left parenthesis '('
  57              	  .equ TK_RPAREN,8     // right parenthesis ')'
  58              	  .equ TK_COMMA,9     // item separator ',' 
  59              	  .equ TK_SHARP,0xa     // print colon width '#' 
  60              	  .equ TK_CMD,0xb      // BASIC command   
  61              	  .equ TK_IFUNC,0xc    // BASIC integer function
  62              	  .equ TK_CFUNC,0xd    // BASIC character function
  63              	  .equ TK_CONST,0xe    // BASIC constant 
  64              	  .equ TK_INTGR,0xf    // 32 bits integer 
  65              	  .equ TK_PLUS,0x10    // addition operator '+'
  66              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  67              	  .equ TK_MULT,0x20    // multiplication operator '*'
  68              	  .equ TK_DIV,0x21     // division operator '/'
  69              	  .equ TK_MOD,0x22     // modulo operator '%'
  70              	
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
ARM GAS  stm32-tbi.s 			page 7


  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  79              	  .equ TK_GE,0x33      // relation operator '>,'
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<,'
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	
 111              	//--------------------------------------
 112              	//   assembler flags 
 113              	//-------------------------------------
 114              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 115              	
 116              	.equ CELL_SIZE,4 
 117              	
 118              	
 119              	//-------------------------------
 120              	//  macros used to help debugging
 121              	//-------------------------------
 122              	  .equ DEBUG,0
 123              	
 124              	/***************************
 125              	  SYSTEM variables offset 
 126              	  from UPP  
 127              	***************************/ 
 128              	  .equ IN,0    // low byte of in.w 
 129              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
ARM GAS  stm32-tbi.s 			page 8


 130              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 131              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 132              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 133              	  .equ DATA,DATAPTR+4 // index to next data item 
 134              	  .equ DATALEN, DATA+4 // length of data line 
 135              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 136              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 137              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 138              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 139              	  .equ FSPTR,SEED+4 //  pointer used by file system
 140              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 141              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 142              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 143              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 144              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 145              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 146              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 147              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 148              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 149              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 150              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 151              	  .equ CELLL,4 // size of integer 
 152              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 153              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 154              	
 155              	/***********************************************
 156              	*       MACROS
 157              	***********************************************/
 158              		.macro _CALL fn /* low level routine call */ 
 159              	 	PUSH {LR}
 160              		BL \fn  
 161              	  POP {LR}
 162              		.endm
 163              		
 164              		.macro	_RET /* return from subroutine */
 165              		BX	LR
 166              		.endm
 167              	
 168              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 169              		MOV \REG, #\LITERAL&0xffff
 170              		MOVT \REG, #\LITERAL>>16
 171              		.endm
 172              	
 173              	 	.macro	_DOLIT  value /*long literals */
 174              		BL	DOLIT
 175              		.word \value 
 176              		.endm
 177              	
 178              	// function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
ARM GAS  stm32-tbi.s 			page 9


 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	------------------------------
 195              	 format:
 196              	   link:    
 197              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 198              	   cmd_name: 31 characters max 
 199              	   cmd_index: 2 bytes 
 200              	**********************************/
 201              		.macro _dict_entry len,name,cmd_idx 
 202              		.p2align 2 
 203              	  .word LINK 
 204              	  .word \cmd_idx 
 205              		.equ LINK,.
 206              		.byte \len 	
 207              		.ascii "\name"
 208              		.p2align 2 
 209              		.endm 
 210              	
 211              	  // pop parameter in register 
 212              	  .macro _POP  reg 
 213              	  ldmia  r12!,{\reg}
 214              	  .endm 
 215              	
 216              	  // push register on parameter stack 
 217              	  .macro _PUSH reg 
 218              	  stmdb r12!,{\reg}
 219              	  .endm 
  42              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
ARM GAS  stm32-tbi.s 			page 10


  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
ARM GAS  stm32-tbi.s 			page 11


  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  43              	
  44              	/* blue pill specific constants */ 
  45              	  .equ LED_GPIO, GPIOC_BASE_ADR
  46              	  .equ LED_PIN, 13
  47              	  .equ UART, USART1_BASE_ADR 
  48              	
  49              	
  50              	/*************************************
  51              	*   interrupt service vectors table 
  52              	**************************************/
  53              	   .section  .isr_vector,"a",%progbits
ARM GAS  stm32-tbi.s 			page 12


  54              	  .type  isr_vectors, %object
  55              	
  56              	isr_vectors:
  57 0000 00000000 	  .word    _mstack          /* main return stack address */
  58 0004 00000000 	  .word    reset_handler    /* startup address */
  59              	/* core interrupts || exceptions */
  60 0008 00000000 	  .word    default_handler  /*  -14 NMI */
  61 000c 00000000 	  .word    default_handler  /*  -13 HardFault */
  62 0010 00000000 	  .word    default_handler  /*  -12 Memory Management */
  63 0014 00000000 	  .word    default_handler  /* -11 Bus fault */
  64 0018 00000000 	  .word    default_handler  /* -10 Usage fault */
  65 001c 00000000 	  .word    0 /* -9 */
  66 0020 00000000 	  .word    0 /* -8 */ 
  67 0024 00000000 	  .word    0 /* -7 */
  68 0028 00000000 	  .word    0	/* -6 */
  69 002c 00000000 	  .word    default_handler  /* -5 SWI instruction */
  70 0030 00000000 	  .word    default_handler  /* -4 Debug monitor */
  71 0034 00000000 	  .word    0 /* -3 */
  72 0038 00000000 	  .word    default_handler  /* -2 PendSV */
  73 003c 00000000 	  .word    systick_handler  /* -1 Systick */
  74              	 irq0:  
  75              	  /* External Interrupts */
  76 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
  77 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
  78 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
  79 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
  80 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
  81 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
  82 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
  83 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
  84 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
  85 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
  86 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
  87 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
  88 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
  89 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
  90 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
  91 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
  92 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
  93 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
  94 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
  95 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
  96 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
  97 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
  98 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
  99 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 100 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 101 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 102 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 103 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 104 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 105 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 106 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 107 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 108 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 109 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 110 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
ARM GAS  stm32-tbi.s 			page 13


 111 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 112 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 113 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 114 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 115 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 116 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 117 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 118 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 119 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 120 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 121 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 122 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 123 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 124 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 125 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 126 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 127 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 128 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 129 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 130 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 131 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 132 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 133 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 134 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 135 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 136              	isr_end:
 137              	  .global isr_table_size 
 138              	upp:
 139              	
 140              	/*************************************
 141              	    EXCEPTIONS & INTERRUPTS HANDLERS 
 142              	*************************************/
 143              	
 144              	/*****************************************************
 145              	  default isr handler called on unexpected interrupt
 146              	*****************************************************/
 147              	   .section  .text , "ax", %progbits 
 148              	   
 149              	  .type default_handler, %function
 150              	  .p2align 2 
 151              	  .global default_handler
 152              	default_handler:
 153 0000 0548     		ldr r0,exception_msg 
 154 0002 00B5FFF7 		_CALL uart_putsz 
 154      FEFF5DF8 
 154      04EB
 155 000c 4FF40040 	  mov r0,#0x8000
 156 0010 0138     	1: subs r0,#1 
 157 0012 FDD1     	  bne 1b 
 158 0014 34E0     		b reset_mcu    
 159 0016 00BF     	  .p2align 2 
 160              	exception_msg:
 161 0018 0A657865 		.asciz "\nexeption reboot!\n"
 161      7074696F 
 161      6E207265 
 161      626F6F74 
 161      210A00
ARM GAS  stm32-tbi.s 			page 14


 162              	
 163              	/*********************************
 164              		system milliseconds counter
 165              	*********************************/	
 166 002b 00       	  .p2align 2 
 167              	  .type systick_handler, %function
 168              	  .global systick_handler
 169              	systick_handler:
 170 002c 186A     	  ldr r0,[r3,#TICKS]  
 171 002e 00F10100 	  add r0,#1
 172 0032 1862     	  str r0,[r3,#TICKS]
 173 0034 586A     	  ldr r0,[r3,#TIMER]
 174 0036 10B1     	  cbz r0, systick_exit
 175 0038 A0F10100 	  sub r0,#1
 176 003c 5862     	  str r0,[r3,#TIMER]
 177              	systick_exit:
 178 003e 7047     	  _RET 
 179              	
 180              	/**************************
 181              		UART RX handler
 182              	**************************/
 183              		.p2align 2
 184              		.type uart_rx_handler, %function
 185              	  .global uart_rx_handler 
 186              	uart_rx_handler:
 187 0040 4FF46050 		_MOV32 r0,UART 
 187      C4F20100 
 188 0048 0168     		ldr r1,[r0,#USART_SR]
 189 004a 8288     		ldrh r2,[r0,#USART_DR]
 190 004c 11F0200F 		tst r1,#(1<<5) // RXNE 
 191 0050 0BD0     		beq 2f // no char received 
 192 0052 032A     		cmp r2,#3
 193 0054 3FF4FEAF 		beq user_reboot // received CTRL-C then reboot MCU 
 194 0058 03F15400 		add r0,r3,#RX_QUEUE
 195 005c 196D     	  ldr r1,[r3,#RX_TAIL]
 196 005e 4254     		strb r2,[r0,r1]
 197 0060 01F10101 		add r1,#1 
 198 0064 01F00F01 		and r1,#(RX_QUEUE_SIZE-1)
 199 0068 1965     		str r1,[r3,#RX_TAIL]
 200              	2:	
 201 006a 7047     		_RET 
 202              	
 203              	  .global user_reboot 
 204              	user_reboot:
 205 006c 0948     		ldr r0,user_reboot_msg
 206 006e 00B5FFF7 		_CALL uart_putsz
 206      FEFF5DF8 
 206      04EB
 207              	// delay 
 208 0078 4FF40040 	  mov r0,#0x8000
 209 007c 0138     	1: subs r0,#1  
 210 007e FDD1     	   bne 1b 
 211              	reset_mcu: 
 212 0080 0348     		ldr r0,scb_adr 
 213 0082 C168     		ldr r1,[r0,#SCB_AIRCR]
 214 0084 41F00401 		orr r1,#(1<<2)
 215 0088 C0F2FA51 		movt r1,#SCB_VECTKEY
ARM GAS  stm32-tbi.s 			page 15


 216 008c C160     		str r1,[r0,#SCB_AIRCR]
 217 008e FEE7     		b . 
 218              		.p2align 2 
 219              	scb_adr:
 220 0090 00ED00E0 		.word SCB_BASE_ADR 
 221              	user_reboot_msg:
 222 0094 0A757365 		.asciz "\nuser reboot!\n"
 222      72207265 
 222      626F6F74 
 222      210A00
 223 00a3 00       		.p2align 2 
 224              	
 225              	/**************************************
 226              	  reset_handler execute at MCU reset
 227              	***************************************/
 228              	  .p2align 2
 229              	  .type  reset_handler, %function 
 230              	  .global reset_handler 
 231              	reset_handler:   
 232 00a4 4FF4A040 	  _MOV32 r0,RAM_END 
 232      C2F20000 
 233 00ac 8546     	  mov sp,r0 
 234 00ae 00F025F8 	  bl remap  
 235 00b2 00F03BF8 		bl	init_devices	 	/* RCC, GPIOs */
 236 00b6 00F089F8 		bl  uart_init
 237 00ba 4FF49871 	  _MOV32 r1,(RAM_ADR + (isr_end-isr_vectors))
 237      C2F20001 
 238 00c2 FFF7FEFF 		bl  cold_start  /* initialize BASIC SYSTEM */ 
 239 00c6 00F001F8 	  bl  test 
 240 00ca FEE7     	  b .  
 241              	
 242              	    _FUNC test
 243              	/*
 244              	  // page erase test 
 245              	    _MOV32 r0,0x800fff0 
 246              	    _CALL erase_page 
 247              	    _MOV32 R1,0x800fff0 
 248              	    ldr r1,[r1]
 249              	    cmp r1,#-1 
 250              	    beq 0f
 251              	    ldr r0,=per_error
 252              	    _CALL uart_puts
 253              	    b 1f 
 254              	  0:     
 255              	  // flash write test
 256              	    _MOV32 r0,0x01020304
 257              	    _MOV32 r1,0x0800fff0
 258              	    _CALL flash_store 
 259              	    _MOV32 r1,0x800fff0 
 260              	    ldr r1,[r1]
 261              	    _MOV32 r0,0X01020304
 262              	    cmp r0,r1 
 263              	    beq 1f
 264              	    ldr r0,=wr_error 
 265              	    _CALL uart_puts 
 266              	*/
 267              	  1: // readln test 
ARM GAS  stm32-tbi.s 			page 16


 268 00cc 0A48     	    ldr r0,tib_addr   
 269 00ce 4FF05001 	    mov r1,#80
 270 00d2 00B5FFF7 	    _CALL readln
 270      FEFF5DF8 
 270      04EB
 271 00dc 00B5FFF7 	    _CALL uart_putsz
 271      FEFF5DF8 
 271      04EB
 272 00e6 4FF00D00 	    mov r0,#CR 
 273 00ea 00B5FFF7 	    _CALL uart_putc 
 273      FEFF5DF8 
 273      04EB
 274 00f4 EAE7     	    b 1b   
 275 00f6 7047     	    _RET 
 276              	  tib_addr: 
 277 00f8 00000000 	    .word _tib
 278              	/*
 279              	  wr_error:
 280              	    .byte 19
 281              	    .ascii "flash write error!\r"
 282              	    .p2align 2
 283              	  per_error:
 284              	    .byte 11
 285              	    .ascii "per error!\r"
 286              	    .p2align 2 
 287              	*/
 288              	
 289              	// tranfert isr_vector to RAM at 0x20000000
 290              	    _FUNC remap 
 291 00fc 80EA0000 		eor r0,r0 // src 
 292 0100 4FF00001 		_MOV32 r1,RAM_ADR // dest 
 292      C2F20001 
 293 0108 4FF49878 		mov r8,#(isr_end-isr_vectors) // count 
 294 010c 00B5FFF7 	  _CALL cmove  
 294      FEFF5DF8 
 294      04EB
 295              	// set new vector table address
 296 0116 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 296      CEF20000 
 297 011e 4FF00001 		_MOV32 r1,RAM_ADR 
 297      C2F20001 
 298 0126 8160     		str r1,[r0,#SCB_VTOR]
 299 0128 7047     	  _RET 
 300              	
 301              	// initialize hardware devices 
 302 012a 00BF     	  _FUNC init_devices
 303              	/* init clock to HSE 72 Mhz */
 304              	/* set 2 wait states in FLASH_ACR_LATENCY */
 305 012c 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 305      C4F20200 
 306 0134 4FF01202 	  mov r2,#0x12
 307 0138 0260     	  str r2,[r0,#FLASH_ACR]
 308              	/* configure clock for HSE, 8 Mhz crystal */
 309              	/* enable HSE in RCC_CR */
 310 013a 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 310      C4F20200 
 311 0142 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32-tbi.s 			page 17


 312 0144 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 313 0148 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 314              	/* wait HSERDY loop */
 315              	wait_hserdy:
 316 014a 0168     	  ldr r1,[r0,#RCC_CR]
 317 014c 11F4003F 	  tst r1,#(1<<17)
 318 0150 FBD0     	  beq wait_hserdy
 319              	
 320              	/************************************************* 
 321              	   configure PLL mul factor and source 
 322              	   SYSCLOCK,72 Mhz
 323              	   select HSE as  PLL source clock
 324              	   multiply frequency by 9 
 325              	   APB1 clock is limited to 36 Mhz so divide by 2 
 326              	****************************************************/
 327 0152 4FF48061 	  mov r1,#(4<<8) /* PLLMUL,7|PLLSCR,HSE|PPRE1,HCLK/2| */
 328 0156 C0F21D01 	  movt r1,#(7<<2)|1
 329 015a 4160     	  str r1,[r0,#RCC_CFGR]
 330              	  /* enable PLL */
 331 015c 0168     	  ldr r1,[r0,#RCC_CR]
 332 015e 41F08071 	  orr r1, #1<<24 
 333 0162 0160     	  str r1,[r0,#RCC_CR]
 334              	/* wait for PLLRDY */
 335              	wait_pllrdy:
 336 0164 0168     	  ldr r1,[r0,#RCC_CR]
 337 0166 11F0007F 	  tst r1,#(1<<25)
 338 016a FBD0     	  beq wait_pllrdy 
 339              	/* select PLL as sysclock */
 340 016c 4168     	  ldr r1,[r0,#RCC_CFGR]
 341 016e 4FF6FC72 	  _MOV32 r2,0xfffffffc
 341      CFF6FF72 
 342 0176 01EA0201 	  and r1,r1,r2 
 343 017a 4FF00202 	  mov r2,#2
 344 017e 41EA0201 	  orr r1,r1,r2
 345 0182 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 346              	/* wait for SWS,,2 */
 347              	wait_sws:
 348 0184 4168     	  ldr r1,[r0,#RCC_CFGR]
 349 0186 11F0080F 	  tst r1,#(2<<2)
 350 018a FBD0     	  beq wait_sws
 351              	/* now sysclock is 72 Mhz */
 352              	
 353              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 354 018c 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 354      C4F20200 
 355 0194 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 356 0198 8161     	  str	r1, [r0, #RCC_APB2ENR]
 357              	
 358              	/* configure GPIOC:13 as output for user LED */
 359 019a 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 359      C4F20100 
 360 01a2 4168     	  ldr r1,[r0,#GPIO_CRH]
 361 01a4 6FF47002 	  mvn r2,#(15<<20)
 362 01a8 01EA0201 	  and r1,r1,r2
 363 01ac 4FF4C002 	  mov r2,#(6<<20)
 364 01b0 41EA0201 	  orr r1,r1,r2
 365 01b4 4160     	  str r1,[r0,#GPIO_CRH]
ARM GAS  stm32-tbi.s 			page 18


 366              	
 367              	/* configure systicks for 1msec ticks */
 368 01b6 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 368      CEF20000 
 369 01be 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 370 01c2 4160     	  str r1,[r0,#STK_LOAD]
 371 01c4 4FF00301 	  mov r1,#3
 372 01c8 0160     	  str r1,[r0,STK_CTL]
 373 01ca 7047     	  _RET  
 374              	
 375              	/*******************************
 376              	  initialize UART peripheral 
 377              	********************************/
 378              		_FUNC uart_init
 379              	/* set GPIOA PIN 9, uart TX  */
 380 01cc 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 380      C4F20100 
 381 01d4 4168     	  ldr r1,[r0,#GPIO_CRH]
 382 01d6 6FF0F002 	  mvn r2,#(15<<4)
 383 01da 01EA0201 	  and r1,r1,r2
 384 01de 4FF0A002 	  mov r2,#(0xA<<4)
 385 01e2 41EA0201 	  orr r1,r1,r2 
 386 01e6 4160     	  str r1,[r0,#GPIO_CRH]
 387 01e8 4FF46050 	  _MOV32 r0,UART 
 387      C4F20100 
 388              	/* BAUD rate */
 389 01f0 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200,39,0625, quotient,39, reste,0,0625*16,1 */
 390 01f4 8160     	  str r1,[r0,#USART_BRR]
 391 01f6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 392 01fa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 393              	/* enable interrupt in NVIC */
 394 01fc 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 394      CEF20000 
 395 0204 4168     	  ldr r1,[r0,#NVIC_ISER1]
 396 0206 41F02001 	  orr r1,#32   
 397 020a 4160     	  str r1,[r0,#NVIC_ISER1]
 398 020c 7047     	  bx lr 
 399              	
 400              	/****************************
 401              	    UART_PUTC
 402              	  send character to uart
 403              	  input: 
 404              	    R0 character to send 
 405              	  use:
 406              	    R8 status  
 407              	    R9 UART address
 408              	*****************************/
 409 020e 00BF     	  _GBL_FUNC uart_putc
 410 0210 2DE90003 	  push {r8,r9}
 411 0214 4FF46059 	  _MOV32 R9,UART
 411      C4F20109 
 412              	1: 
 413 021c D9F80080 	  ldr r8,[r9,#USART_SR]
 414 0220 18F08008 	  ands r8,#0x80
 415 0224 FAD0     	  beq 1b // UART_DR full,wait  
 416 0226 89F80400 	  strb r0,[r9,#USART_DR]
 417 022a BDE80003 	  pop {r8,r9}
ARM GAS  stm32-tbi.s 			page 19


 418 022e 7047     	  _RET  
 419              	
 420              	
 421              	/**********************************
 422              	  UART_QKEY
 423              	  check if character available in 
 424              	  rx1_qeue
 425              	  input:
 426              	    none
 427              	  output:
 428              	    r0 flag = RX_HEAD^REX_TAIL 
 429              	  use:
 430              	    r8  RX_HEAD  
 431              	    r9  RX_TAIL   
 432              	***********************************/
 433              	  _GBL_FUNC uart_qkey
 434 0230 2DE90003 	  push {r8,r9}
 435 0234 D3F84C80 	  ldr r8,[r3,#RX_HEAD]
 436 0238 D3F85090 	  ldr r9,[r3,#RX_TAIL]
 437 023c 88EA0900 	  eor r0,r8,r9 
 438 0240 BDE80003 	  pop {r8,r9}
 439 0244 7047     	  _RET 
 440              	
 441              	/**********************************
 442              	  UART_GETC 
 443              	  wait a character from uart 
 444              	  input:
 445              	    none
 446              	  output:
 447              	    r0  character 
 448              	  use:
 449              	    r8  rx_queue 
 450              	    r9  rx_head  
 451              	**********************************/
 452 0246 00BF     	  _GBL_FUNC uart_getc
 453 0248 2DE90003 	  push {r8,r9}
 454              	1:
 455 024c 00B5FFF7 	  _CALL uart_qkey 
 455      FEFF5DF8 
 455      04EB
 456 0256 0043     	  orrs r0,r0
 457 0258 F8D0     	  beq 1b  
 458 025a 03F15408 	  add r8,r3,#RX_QUEUE
 459 025e D3F84C90 	  ldr r9, [r3,#RX_HEAD]
 460 0262 18F80900 	  ldrb r0,[r8,r9]
 461 0266 09F10109 	  add r9,#1
 462 026a 09F00F09 	  and r9,#(RX_QUEUE_SIZE-1)
 463 026e C3F84C90 	  str r9,[r3,#RX_HEAD]
 464 0272 BDE80003 	  pop {r8,r9}
 465 0276 7047     	  _RET  
 466              	
 467              	
 468              	/***************************
 469              	  Flash memory interface
 470              	***************************/
 471              	
 472              	/***********************************
ARM GAS  stm32-tbi.s 			page 20


 473              	  unlock 
 474              	  unlock flash memory for writing
 475              	  input:
 476              	    r0    0 lock, 1 unlock 
 477              	  output:
 478              	    none
 479              	  use: 
 480              	    r6     temp  
 481              	***********************************/
 482              	    _GBL_FUNC unlock  
 483 0278 40B4     	    push {r6}
 484 027a 0040     	    ands r0,r0 
 485 027c 15D0     	    beq lock 
 486 027e 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 486      C4F20200 
 487 0286 4FF03406 	    mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 488 028a C660     	    str r6,[r0,#FLASH_SR]
 489 028c 0669     	    ldr r6,[r0,#FLASH_CR]
 490 028e 16F0800F 	    tst r6,#(1<<7)
 491 0292 11D0     	    beq 9f
 492 0294 40F22316 	    _MOV32 r6,FLASH_KEY1  
 492      C4F26756 
 493 029c 4660     	    str	r6, [r0, #FLASH_KEYR]
 494 029e 48F6AB16 	    _MOV32 r6,FLASH_KEY2
 494      CCF6EF56 
 495 02a6 4660     	    str	r6, [r0, #FLASH_KEYR]
 496 02a8 06E0     	    b 9f 
 497              	// lock flash memory
 498              	lock: 
 499 02aa 4FF40050 	  _MOV32 r0,FLASH_BASE_ADR
 499      C4F20200 
 500 02b2 4FF08006 		mov r6,#(1<<7)
 501 02b6 0661     		str r6,[r0,#FLASH_CR]
 502 02b8 40BC     	9: pop {r6}
 503 02ba 7047     		_RET  
 504              	
 505              	/*********************************
 506              	   wait_busy 
 507              	   wait until busy flag is cleared 
 508              	   input:
 509              	    none
 510              	   output:
 511              	    none 
 512              	   use:
 513              	     r0    flash registers address 
 514              	     r1    temp 
 515              	***********************************/
 516              	    _FUNC wait_busy 
 517 02bc 03B4     	    push {r0,r1}
 518 02be 4FF40050 	    _MOV32	r0,FLASH_BASE_ADR
 518      C4F20200 
 519              	1:
 520 02c6 C168     	    ldr	r1, [r0, #FLASH_SR]	//  FLASH_SR
 521 02c8 11F00101 	    ands r1, #0x1	//  BSY
 522 02cc FBD1     	    bne	1b 
 523 02ce 03BC     	    pop {r0,r1}
 524 02d0 7047     	    _RET
ARM GAS  stm32-tbi.s 			page 21


 525              	
 526              	/***************************************
 527              	   hword_write
 528              	   write 16 bits value to flash memory 
 529              	   input:
 530              	    r0  data 
 531              	    r1  address 
 532              	   output:
 533              	     none 
 534              	   use: 
 535              	     r6    flash control regs base address 
 536              	     r7    temp  
 537              	***************************************/
 538 02d2 00BF     	    _FUNC hword_write 
 539 02d4 C0B4     	    push {r6,r7}
 540 02d6 4FF40056 	    _MOV32 r6,FLASH_BASE_ADR
 540      C4F20206 
 541 02de 4FF00107 	    mov r7,#1 // set PG 
 542 02e2 3761     	    str r7,[r6,#FLASH_CR]
 543 02e4 0880     	    strh r0,[r1] 
 544 02e6 00B5FFF7 	    _CALL wait_busy  
 544      E8FF5DF8 
 544      04EB
 545 02f0 F768     	    ldr r7,[r6,#FLASH_SR]
 546 02f2 17F01407 	    ands r7,r7,#(5<<2) 
 547 02f6 05D0     	    beq 9f
 548 02f8 3548     	    ldr r0,=write_error
 549 02fa 00B5FFF7 	    _CALL uart_puts   
 549      FEFF5DF8 
 549      04EB
 550 0304 C0BC     	9:	pop {r6,r7}
 551 0306 7047     	    _RET  
 552              	write_error:	
 553 0308 0D       	    .byte 13
 554 0309 20777269 	    .ascii " write error!"
 554      74652065 
 554      72726F72 
 554      21
 555 0316 00BF     	    .p2align 2
 556              	
 557              	/****************************************
 558              	    flash_store
 559              	    Write one word into flash memory
 560              	    address must even
 561              	    input:
 562              	      r0    data 
 563              	      r1    adr 
 564              	    output: 
 565              	      none 
 566              	    use:
 567              	      r8 data 
 568              	      r9 adr 
 569              	*****************************************/ 
 570              	    _GBL_FUNC flash_store 
 571 0318 2DE90003 	    push {r8,r9}
 572 031c 8046     	    mov r8,r0
 573 031e 8946     	    mov r9,r1  
ARM GAS  stm32-tbi.s 			page 22


 574 0320 4FF00100 	    mov r0,#1
 575 0324 00B5FFF7 	    _CALL unlock 
 575      FEFF5DF8 
 575      04EB
 576 032e 4046     	    mov r0,r8 
 577 0330 4946     	    mov r1,r9 
 578 0332 00B5FFF7 	    _CALL hword_write
 578      CEFF5DF8 
 578      04EB
 579 033c 4FEA1840 	    mov r0,r8,lsr #16 
 580 0340 09F10201 	    add r1,r9,#2
 581 0344 00B5FFF7 	    _CALL hword_write
 581      C5FF5DF8 
 581      04EB
 582 034e 80EA0000 	    eor r0,r0 
 583 0352 00B5FFF7 	    _CALL unlock  
 583      FEFF5DF8 
 583      04EB
 584 035c BDE80003 	    pop {r8,r9}
 585 0360 7047     	    _RET 
 586              	
 587              	/********************************************
 588              	    erase_page 
 589              	    erase 1024 bytes flash page 
 590              	    input:
 591              	       r0    adr 
 592              	    output:
 593              	       None 
 594              	    use:
 595              	      r8    adr
 596              	      r9    temp   
 597              	**********************************************/
 598 0362 00BF     	    _GBL_FUNC erase_page 
 599 0364 2DE90003 	    push {r8,r9}
 600 0368 8046     	    mov r8,r0 
 601 036a 4FF00100 	    mov r0,#1 
 602 036e 00B5FFF7 	    _CALL unlock 
 602      FEFF5DF8 
 602      04EB
 603 0378 4FF40050 	    _MOV32 r0,FLASH_BASE_ADR
 603      C4F20200 
 604 0380 4FF00209 	    mov r9,#2 // PER bit in FLASH_CR 
 605 0384 C0F81090 	    str r9,[r0,#FLASH_CR]
 606 0388 C0F81480 	    str r8,[r0,#FLASH_AR]
 607 038c 49F04009 	    orr r9,#0x40 
 608 0390 C0F81090 	    str r9,[r0,#FLASH_CR]
 609 0394 D0F80C90 	    ldr r9,[r0,#FLASH_SR]
 610 0398 19F01409 	    ands r9,#(5<<2)
 611 039c 05D0     	    beq 9f
 612 039e 0D48     	    ldr r0,=erase_error
 613 03a0 00B5FFF7 	    _CALL uart_puts 
 613      FEFF5DF8 
 613      04EB
 614 03aa 80EA0000 	9:  eor r0,r0 
 615 03ae 00B5FFF7 	    _CALL unlock 
 615      FEFF5DF8 
 615      04EB
ARM GAS  stm32-tbi.s 			page 23


 616 03b8 BDE80003 	    pop {r8,r9}
 617 03bc 7047     	    _RET 
 618              	erase_error:
 619 03be 0E       	    .byte 14
 620 03bf 20657261 	    .ascii " erase error!\r"
 620      73652065 
 620      72726F72 
 620      210D
 621 03cd 0000BF   	    .p2align 2
 622              	
 623              	
 624              	
 625 03d0 08030000 	
 625      BE030000 
ARM GAS  stm32-tbi.s 			page 24


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32-tbi.s 			page 25


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  stm32-tbi.s 			page 26


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  stm32-tbi.s 			page 27


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:30     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:31     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:32     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:33     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:39     *ABS*:0000000000000000 INP
      tbi_macros.inc:40     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:50     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:51     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:52     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:53     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:54     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:55     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:56     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:57     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:58     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:59     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:60     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:61     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:62     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:63     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:64     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:65     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:66     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:67     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:68     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:69     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:114    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:116    *ABS*:0000000000000004 CELL_SIZE
ARM GAS  stm32-tbi.s 			page 28


      tbi_macros.inc:122    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:128    *ABS*:0000000000000000 IN
      tbi_macros.inc:129    *ABS*:0000000000000004 IN_SAVED
      tbi_macros.inc:130    *ABS*:0000000000000008 COUNT
      tbi_macros.inc:131    *ABS*:000000000000000c BASICPTR
      tbi_macros.inc:132    *ABS*:0000000000000010 DATAPTR
      tbi_macros.inc:133    *ABS*:0000000000000014 DATA
      tbi_macros.inc:134    *ABS*:0000000000000018 DATALEN
      tbi_macros.inc:135    *ABS*:000000000000001c BASE
      tbi_macros.inc:136    *ABS*:0000000000000020 TICKS
      tbi_macros.inc:137    *ABS*:0000000000000024 TIMER
      tbi_macros.inc:138    *ABS*:0000000000000028 SEED
      tbi_macros.inc:139    *ABS*:000000000000002c FSPTR
      tbi_macros.inc:140    *ABS*:0000000000000030 FFREE
      tbi_macros.inc:141    *ABS*:0000000000000034 TXTBGN
      tbi_macros.inc:142    *ABS*:0000000000000038 TXTEND
      tbi_macros.inc:143    *ABS*:000000000000003c LOOP_DEPTH
      tbi_macros.inc:144    *ABS*:0000000000000040 ARRAY_SIZE
      tbi_macros.inc:145    *ABS*:0000000000000044 FLAGS
      tbi_macros.inc:146    *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:147    *ABS*:000000000000004c RX_HEAD
      tbi_macros.inc:148    *ABS*:0000000000000050 RX_TAIL
      tbi_macros.inc:149    *ABS*:0000000000000054 RX_QUEUE
      tbi_macros.inc:150    *ABS*:0000000000000064 VARS
      tbi_macros.inc:151    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:152    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:153    *ABS*:00000000000000cc FREE_RAM
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
ARM GAS  stm32-tbi.s 			page 29


       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
ARM GAS  stm32-tbi.s 			page 30


       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         stm32-tbi.s:45     *ABS*:0000000040011000 LED_GPIO
         stm32-tbi.s:46     *ABS*:000000000000000d LED_PIN
         stm32-tbi.s:47     *ABS*:0000000040013800 UART
         stm32-tbi.s:56     .isr_vector:0000000000000000 isr_vectors
         stm32-tbi.s:231    .text:00000000000000a4 reset_handler
         stm32-tbi.s:152    .text:0000000000000000 default_handler
         stm32-tbi.s:169    .text:000000000000002c systick_handler
         stm32-tbi.s:74     .isr_vector:0000000000000040 irq0
         stm32-tbi.s:186    .text:0000000000000040 uart_rx_handler
         stm32-tbi.s:136    .isr_vector:0000000000000130 isr_end
         stm32-tbi.s:138    .isr_vector:0000000000000130 upp
         stm32-tbi.s:150    .text:0000000000000000 $t
         stm32-tbi.s:160    .text:0000000000000018 exception_msg
         stm32-tbi.s:211    .text:0000000000000080 reset_mcu
         stm32-tbi.s:161    .text:0000000000000018 $d
         stm32-tbi.s:177    .text:000000000000003e systick_exit
         stm32-tbi.s:204    .text:000000000000006c user_reboot
         stm32-tbi.s:221    .text:0000000000000094 user_reboot_msg
         stm32-tbi.s:219    .text:0000000000000090 scb_adr
         stm32-tbi.s:220    .text:0000000000000090 $d
         stm32-tbi.s:290    .text:00000000000000fc remap
         stm32-tbi.s:302    .text:000000000000012c init_devices
         stm32-tbi.s:378    .text:00000000000001cc uart_init
         stm32-tbi.s:242    .text:00000000000000cc test
         stm32-tbi.s:276    .text:00000000000000f8 tib_addr
         stm32-tbi.s:409    .text:0000000000000210 uart_putc
         stm32-tbi.s:277    .text:00000000000000f8 $d
         stm32-tbi.s:290    .text:00000000000000fc $t
         stm32-tbi.s:315    .text:000000000000014a wait_hserdy
         stm32-tbi.s:335    .text:0000000000000164 wait_pllrdy
         stm32-tbi.s:347    .text:0000000000000184 wait_sws
         stm32-tbi.s:433    .text:0000000000000230 uart_qkey
         stm32-tbi.s:452    .text:0000000000000248 uart_getc
         stm32-tbi.s:482    .text:0000000000000278 unlock
         stm32-tbi.s:498    .text:00000000000002aa lock
         stm32-tbi.s:516    .text:00000000000002bc wait_busy
         stm32-tbi.s:538    .text:00000000000002d4 hword_write
         stm32-tbi.s:552    .text:0000000000000308 write_error
         stm32-tbi.s:553    .text:0000000000000308 $d
         stm32-tbi.s:555    .text:0000000000000316 $t
         stm32-tbi.s:570    .text:0000000000000318 flash_store
         stm32-tbi.s:598    .text:0000000000000364 erase_page
ARM GAS  stm32-tbi.s 			page 31


         stm32-tbi.s:618    .text:00000000000003be erase_error
         stm32-tbi.s:619    .text:00000000000003be $d
         stm32-tbi.s:625    .text:00000000000003d0 $d
         stm32-tbi.s:166    .text:000000000000002b $d
         stm32-tbi.s:166    .text:000000000000002c $t
         stm32-tbi.s:223    .text:00000000000000a3 $d
         stm32-tbi.s:223    .text:00000000000000a4 $t
         stm32-tbi.s:621    .text:00000000000003cd $d
         stm32-tbi.s:621    .text:00000000000003ce $t

UNDEFINED SYMBOLS
_mstack
isr_table_size
uart_putsz
cold_start
readln
_tib
cmove
uart_puts
