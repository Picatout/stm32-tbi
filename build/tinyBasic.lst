ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, ABS_IDX+1  //   adc on 
  27              	    .equ ADCREAD_IDX,ADCON_IDX+1  // read adc 
  28              	    .equ AND_IDX,ADCREAD_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1  // 
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ BYE_IDX,BTOGL_IDX+1 // 
  38              	    .equ CHAR_IDX,BYE_IDX+1 // 
  39              	    .equ DATA_IDX,CHAR_IDX+1 // 
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ DATALN_IDX,DATA_IDX+1 // 
  41              	    .equ DEC_IDX,DATALN_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DREAD_IDX,DO_IDX+1 // 
  45              	    .equ DUMP_IDX, DREAD_IDX+1 
  46              	    .equ DWRITE_IDX,DUMP_IDX+1 // 
  47              	    .equ END_IDX,DWRITE_IDX+1 // 
  48              	    .equ FOR_IDX, END_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  51              	    .equ GOTO_IDX, GOSUB_IDX+1
  52              	    .equ HEX_IDX, GOTO_IDX+1 // 
  53              	    .equ IF_IDX, HEX_IDX+1 // 
  54              	    .equ INPUT_IDX, IF_IDX+1 // 
  55              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  56              	    .equ KEY_IDX, INVERT_IDX+1 // 
  57              	    .equ LET_IDX, KEY_IDX+1 // 
  58              	    .equ LIST_IDX, LET_IDX+1 // 
  59              	    .equ LOAD_IDX, LIST_IDX+1 // 
  60              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  61              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  62              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  63              	    .equ NEXT_IDX, NEW_IDX+1 // 
  64              	    .equ NOT_IDX, NEXT_IDX+1 // 
  65              	    .equ OR_IDX, NOT_IDX+1 // 
  66              	    .equ PAD_IDX, OR_IDX+1 // 
  67              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  68              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  69              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  70              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  71              	    .equ PEEK32_IDX, PEEK16_IDX+1
  72              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  73              	    .equ POKE16_IDX,POKE8_IDX+1 
  74              	    .equ POKE32_IDX,POKE16_IDX+1
  75              	    .equ PRT_IDX, POKE32_IDX+1 //  //  PRINT commande index 
  76              	    .equ QKEY_IDX, PRT_IDX+1 // 
  77              	    .equ READ_IDX, QKEY_IDX+1 // 
  78              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  79              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  80              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  81              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  82              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  83              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  84              	    .equ SAVE_IDX, RUN_IDX+1 // 
  85              	    .equ SHOW_IDX, SAVE_IDX+1 // 
  86              	    .equ SIZE_IDX, SHOW_IDX+1 // 
  87              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  88              	    .equ SPIRD_IDX, SLEEP_IDX+1 // 
  89              	    .equ SPIEN_IDX, SPIRD_IDX+1 // 
  90              	    .equ SPISEL_IDX, SPIEN_IDX+1 // 
  91              	    .equ SPIWR_IDX, SPISEL_IDX+1 // 
  92              	    .equ STEP_IDX, SPIWR_IDX+1 // 
  93              	    .equ STOP_IDX, STEP_IDX+1 // 
  94              	    .equ THEN_IDX,STOP_IDX+1
  95              	    .equ TICKS_IDX, THEN_IDX+1 // 
  96              	    .equ TIMER_IDX, TICKS_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  98              	    .equ TO_IDX, TMROUT_IDX+1 // 
  99              	    .equ TONE_IDX, TO_IDX+1 // 
 100              	    .equ UBOUND_IDX, TONE_IDX+1 // 
 101              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 102              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 103              	    .equ USR_IDX, UNTIL_IDX+1 // 
 104              	    .equ WAIT_IDX, USR_IDX+1 // 
 105              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 106              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 107              	    .equ XOR_IDX, WRITE_IDX+1 //  
 108              	    .equ XTRMT_IDX, XOR_IDX+1 // 
 109              	    .equ XRCV_IDX, XTRMT_IDX+1 // 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
ARM GAS  tinyBasic.s 			page 13


  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
ARM GAS  tinyBasic.s 			page 14


 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
ARM GAS  tinyBasic.s 			page 15


 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00C00 	    mov r0,#12
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
 208 0118 03BC     	    pop {r0,r1}
 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
ARM GAS  tinyBasic.s 			page 16


 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _GBL_FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
ARM GAS  tinyBasic.s 			page 17


 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
 314 01b0 8846     	    mov T1,R1
 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
ARM GAS  tinyBasic.s 			page 18


 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      FEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
 361              	    in pas buffer.
 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF8E899 	    ldr T2,pad // tokens buffer
ARM GAS  tinyBasic.s 			page 19


 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      00F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e 27E3     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e 1FE3     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      21F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF89039 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 414 028e 1888     	    ldrh r0,[r3] // line number 
 415 0290 38B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 1846     	    mov r0,r3 
 418 0294 00B5FFF7 	    _CALL insert_line 
 418      9DFF5DF8 
 418      04EB
 419 029e 4040     	    eors r0,r0 
 420 02a0 08E0     	    b 9f 
 421 02a2 9B46     	8:  mov BPTR,r3 // *token_list 
 422 02a4 4FF0030A 	    mov IN,#3
 423 02a8 206C     	    ldr r0,[UPP,#FLAGS]
 424 02aa A0F12000 	    sub r0,#FCOMP
 425 02ae 2064     	    str r0,[UPP,#FLAGS]
 426 02b0 5FF0FF30 	    movs r0,#-1 
 427 02b4 7047     	9:  _RET 
 428              	
 429              	/*********************************************
 430              	    compile next token from source 
ARM GAS  tinyBasic.s 			page 20


 431              	    input: 
 432              	      r3 		tib index  
 433              	      T1    tib adr
 434              	      T2    insert point in pad  
 435              	    output:
 436              	      r0     token attribute 
 437              	      r1 		token value
 438              	      r3     tib index updated    
 439              	      T2     updated 
 440              	      use:
 441              	**********************************************/
 442              	    .macro _case c, next  
 443              	    cmp r0,#\c 
 444              	    bne \next
 445              	    .endm 
 446              	
 447 02b6 00BF     	    _FUNC comp_token 
 448 02b8 40B4     	    push {r6}
 449 02ba 18F80300 	    ldrb r0,[T1,r3]
 450 02be 0040     	    ands r0,r0 
 451 02c0 70D0     	    beq store_r0  // reached end of text  
 452 02c2 4FF02000 	    mov r0,#SPACE 
 453 02c6 00B500F0 	    _CALL skip  // skip spaces 
 453      12F95DF8 
 453      04EB
 454 02d0 18F80300 	    ldrb r0,[T1,r3]
 455 02d4 0040     	    ands r0,r0 
 456 02d6 65D0     	    beq store_r0  // reached end of text 
 457 02d8 03F10103 	    add r3,#1 
 458 02dc 00B500F0 	    _CALL upper 
 458      13F95DF8 
 458      04EB
 459 02e6 00B500F0 	    _CALL is_special
 459      7CF85DF8 
 459      04EB
 460 02f0 DFF8AC6D 	    ldr r6,=token_ofs
 461 02f4 D6E811F0 	    tbh [r6,r1] 
 462              	tok_idx0:     
 463              	//  not special char.  
 464 02f8 57E0     	    b try_number 
 465              	// single char token with no value 
 466              	single: 
 467 02fa DFF8A86D 	    ldr r6,=tok_single
 468 02fe 705C     	    ldrb r0,[r6,r1] 
 469 0300 50E0     	    b store_r0  
 470              	lt:
 471 0302 4FF03400 	    mov r0,#TK_LT
 472 0306 18F80310 	    ldrb r1,[T1,r3]
 473 030a 3E29     	    cmp r1,#'>' 
 474 030c 06D0     	    beq 1f
 475 030e 0AE0     	    b 2f 
 476              	gt:
 477 0310 4FF03100 	    mov r0,#TK_GT 
 478 0314 18F80310 	    ldrb r1,[T1,r3]
 479 0318 3C29     	    cmp r1,#'<'
 480 031a 04D1     	    bne 2f  
 481 031c 03F10103 	1:  add r3,#1
ARM GAS  tinyBasic.s 			page 21


 482 0320 4FF03500 	    mov r0,#TK_NE  
 483 0324 3EE0     	    b store_r0
 484 0326 3D29     	2:  cmp r1,#'=' 
 485 0328 3CD1     	    bne store_r0  
 486 032a 03F10103 	    add r3,#1
 487 032e 00F10200 	    add r0,#2
 488 0332 37E0     	    b store_r0       
 489              	bkslash:
 490 0334 18F80310 	    ldrb r1,[T1,r3]
 491 0338 03F10103 	    add r3,#1
 492 033c 4FF00300 	    mov r0,#TK_CHAR 
 493 0340 09F8010B 	    strb r0,[T2],#1
 494 0344 09F8011B 	    strb r1,[T2],#1
 495 0348 49E0     	    b token_exit 
 496              	prt_cmd: 
 497 034a 4FF00A00 	    mov r0,#TK_CMD 
 498 034e 4FF03201 	    mov r1,#PRT_IDX
 499 0352 09F8010B 	    strb r0,[T2],#1
 500 0356 09F8011B 	    strb r1,[T2],#1
 501 035a 40E0     	    b token_exit 
 502              	quote:
 503 035c 4FF00200 	    mov r0,#TK_QSTR 
 504 0360 09F8010B 	    strb r0,[T2],#1
 505 0364 00B500F0 	    _CALL parse_quote
 505      8FF85DF8 
 505      04EB
 506 036e 36E0     	    b token_exit
 507              	tick: 
 508              	// copy comment in pad 
 509 0370 4FF00A00 	    mov r0,#TK_CMD 
 510 0374 4FF03501 	    mov r1,#REM_IDX 
 511 0378 09F8010B 	    strb r0,[T2],#1 
 512 037c 09F8011B 	    strb r1,[T2],#1
 513 0380 08EB0300 	    add r0,T1,r3 
 514 0384 4946     	    mov r1,T2 
 515 0386 00B5FFF7 	    _CALL strcpy 
 515      FEFF5DF8 
 515      04EB
 516 0390 00B5FFF7 	    _CALL strlen 
 516      FEFF5DF8 
 516      04EB
 517 039a 8144     	    add T2,r0
 518 039c 09F10109 	    add T2,#1
 519 03a0 6368     	    ldr r3,[UPP,#COUNT]
 520 03a2 1CE0     	    b token_exit
 521              	store_r0: 
 522 03a4 09F8010B 	    strb r0,[T2],#1
 523 03a8 19E0     	    b token_exit 
 524              	try_number:
 525 03aa A3F10103 	    sub r3,#1
 526 03ae 00B500F0 	    _CALL parse_int  
 526      4EF85DF8 
 526      04EB
 527 03b8 04D0     	    beq 1f 
 528 03ba 09F8010B 	    strb r0,[T2],#1 
 529 03be 49F8041B 	    str r1,[T2],#4
 530 03c2 0CE0     	    b token_exit 
ARM GAS  tinyBasic.s 			page 22


 531 03c4 00B500F0 	1:  _CALL parse_keyword 
 531      1FF95DF8 
 531      04EB
 532 03ce 0428     	    cmp r0,#TK_VAR 
 533 03d0 01D0     	    beq 2f 
 534 03d2 3529     	    cmp r1,#REM_IDX 
 535 03d4 CCD0     	    beq tick
 536 03d6 09F8010B 	2:  strb r0,[T2],#1 
 537 03da 09F8011B 	    strb r1,[T2],#1
 538              	token_exit:
 539 03de 40BC     	    pop {r6}
 540 03e0 7047     	    _RET 
 541              	
 542              	/****************************
 543              	    is_special  
 544              	    check for non alphanum
 545              	    input:
 546              	      r0    character to scan 
 547              	    output:
 548              	      r0    character 
 549              	      r1    0 || index 
 550              	    use: 
 551              	      r1    scan index 
 552              	      r2    temp 
 553              	      r3    char_list 
 554              	*****************************/
 555 03e2 00BF     	    _FUNC is_special 
 556 03e4 0CB4     	    push {r2,r3}
 557 03e6 4FF00101 	    mov r1,#1
 558 03ea DFF8BC3C 	    ldr r3,=char_list 
 559 03ee 5A5C     	1:  ldrb r2,[r3,r1]
 560 03f0 22B1     	    cbz r2,8f 
 561 03f2 8242     	    cmp r2,r0 
 562 03f4 04D0     	    beq 9f 
 563 03f6 01F10101 	    add r1,#1 
 564 03fa F8E7     	    b 1b
 565 03fc 81EA0101 	8:  eor r1,r1     
 566 0400 0CBC     	9:  pop {r2,r3}
 567 0402 7047     	    _RET 
 568              	
 569              	char_list:
 570 0404 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 570      293A232D 
 570      2B2A2F25 
 570      3D3C3E5C 
 570      3F272200 
 571              	
 572              	tok_single:
 573 0418 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 573      070109
 574 041f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 574      2232
 575              	  
 576 0425 0000BF   	  .p2align 2
 577              	token_ofs:
 578 0428 0000     	  .hword  0 // not found
 579              	  // TK_COMMA...TK_EQUAL , 12 
ARM GAS  tinyBasic.s 			page 23


 580 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 580      01000100 
 581 0432 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 581      01000100 
 582 043a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 582      01000100 
 583              	  // '<','>'
 584 0442 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 585              	  // '\'
 586 0446 1E00     	  .hword  (bkslash-tok_idx0)/2
 587              	  // '?' 
 588 0448 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 589              	  // "'"  
 590 044a 3C00     	  .hword  (tick-tok_idx0)/2 
 591              	  // '"' quote 
 592 044c 3200     	  .hword (quote-tok_idx0)/2
 593              	
 594 044e 00BF     	  .p2align 2
 595              	
 596              	/****************************
 597              	    parse_int 
 598              	    parse an integer from text
 599              	    if not valid integer 
 600              	    r1 return *buffer else 
 601              	    *buffer is incremented after integer 
 602              	  input:
 603              	    r0   *buffer 
 604              	  output:
 605              	    r0   TK_INTGR|TK_NONE
 606              	    r1   int|0   
 607              	  use:
 608              	    r3   tib index updated     
 609              	*****************************/
 610              	    _FUNC parse_int 
 611 0450 4FF00A01 	    mov r1,#10 // default base 
 612 0454 18F80300 	    ldrb r0,[T1,r3]
 613 0458 2428     	    cmp r0,'$' 
 614 045a 02D1     	    bne 2f 
 615 045c 4FF01001 	    mov r1,#16 // hexadecimal number 
 616 0460 03E0     	    b 3f  
 617 0462 2628     	2:  cmp r0,#'&' 
 618 0464 03D1     	    bne 4f
 619 0466 4FF00201 	    mov r1,#2 //binary number  
 620 046a 03F10103 	3:  add r3,#1
 621 046e 03EB0800 	4:  add r0,r3,T1 
 622 0472 00B5FFF7 	    _CALL atoi 
 622      FEFF5DF8 
 622      04EB
 623 047c 10B1     	    cbz r0,9f
 624 047e 0344     	    add r3,r0
 625 0480 4FF00E00 	    mov r0,#TK_INTGR
 626 0484 0040     	9:  ands r0,r0   
 627 0486 7047     	    _RET 
 628              	
 629              	/*********************************************
 630              	    parse_quote 
 631              	    parse quoted string 
ARM GAS  tinyBasic.s 			page 24


 632              	    input: 
 633              	      r3 		tib index  
 634              	      T1    tib adr
 635              	      T2    insert point in pad  
 636              	    output:
 637              	      r0     token attribute 
 638              	      r1 		*str 
 639              	      r3     tib index updated    
 640              	      T2     updated 
 641              	      use:
 642              	*********************************************/
 643              	    _FUNC parse_quote
 644 0488 4DF8049D 	    push {T2} 
 645 048c 18F80300 	1:  ldrb r0,[T1,r3]
 646 0490 03F10103 	    add r3,#1 
 647 0494 2228     	    cmp r0,#'"'
 648 0496 09D0     	    beq 9f 
 649 0498 5C28     	    cmp r0,#'\\'
 650 049a 04D1     	    bne 2f 
 651 049c 00B500F0 	    _CALL get_escaped_char 
 651      0DF85DF8 
 651      04EB
 652 04a6 09F8010B 	2:  strb r0,[T2],#1
 653 04aa EFE7     	    b 1b 
 654 04ac 80EA0000 	9:  eor  r0,r0
 655 04b0 09F8010B 	    strb r0,[T2],#1
 656 04b4 4FF00200 	    mov r0,#TK_QSTR
 657 04b8 02BC     	    pop {r1}
 658 04ba 7047     	    _RET 
 659              	
 660              	/**********************************************
 661              	    get_escaped_char 
 662              	    convert "\c" in quoted string 
 663              	    input:
 664              	      r0 
 665              	      r3   index 
 666              	      T1   tib 
 667              	    output:
 668              	      r0   replacement char
 669              	      r3   updated 
 670              	    use:
 671              	      r1   *table 
 672              	      r2   temp 
 673              	**********************************************/
 674              	    _FUNC get_escaped_char 
 675 04bc 06B4     	    push {r1,r2}
 676 04be 18F80300 	    ldrb r0,[T1,r3]
 677 04c2 03F10103 	    add r3,#1
 678 04c6 2228     	    cmp r0,#'"' 
 679 04c8 0BD0     	    beq 9f 
 680 04ca DFF8E01B 	1:  ldr r1,=escaped 
 681 04ce 11F8012B 	2:  ldrb r2,[r1],#1
 682 04d2 12B1     	    cbz r2,6f 
 683 04d4 8242     	    cmp r2,r0 
 684 04d6 02D0     	    beq 7f 
 685 04d8 F9E7     	    b 2b
 686 04da A0F10702 	6:  sub r2,r0,#7     
ARM GAS  tinyBasic.s 			page 25


 687 04de 02F10700 	7:  add r0,r2,#7
 688 04e2 06BC     	9:  pop {r1,r2}   
 689 04e4 7047     	    _RET
 690              	
 691 04e6 6162746E 	escaped: .asciz "abtnvfr"
 691      76667200 
 692              	
 693              	/*********************************************
 694              	   skip character in TIB 
 695              	   input:
 696              	      r0    character to skip 
 697              	      r3    tib index 
 698              	      T1    tib adr
 699              	    output: 
 700              	      r3    updated
 701              	    use:
 702              	      r1     
 703              	**********************************************/   
 704 04ee 00BF     	    _FUNC skip
 705 04f0 02B4     	    push {r1} 
 706 04f2 18F80310 	1:  ldrb r1,[T1,r3]
 707 04f6 8142     	    cmp r1,r0
 708 04f8 02D1     	    bne 2f
 709 04fa 03F10103 	    add r3,#1 
 710 04fe F8E7     	    b 1b 
 711 0500 2360     	2:  str r3,[UPP,#IN_SAVED]
 712 0502 02BC     	    pop {r1}
 713 0504 7047     	    _RET
 714              	
 715              	/********************************************
 716              	    upper
 717              	    convert character in upper case 
 718              	    input: 
 719              	      r0   character 
 720              	    output:
 721              	      r0   upper case character 
 722              	*********************************************/
 723 0506 00BF     	    _FUNC upper 
 724 0508 6128     	    cmp r0,#'a' 
 725 050a 03DB     	    blt 9f 
 726 050c 7A28     	    cmp r0,#'z' 
 727 050e 01DC     	    bgt 9f 
 728 0510 00F05F00 	    and r0,#0x5f 
 729 0514 7047     	9:  _RET 
 730              	
 731              	/***************************************
 732              	   is_digit 
 733              	   check if char is decimal digit.
 734              	   convert to decimal digit.
 735              	   input:
 736              	      r0    char 
 737              	   output:
 738              	      r0    if !Z then converted digit 
 739              	      Z     0 true | 1 false  
 740              	***************************************/
 741 0516 00BF     	    _GBL_FUNC is_digit 
 742 0518 02B4     	    push {r1} 
ARM GAS  tinyBasic.s 			page 26


 743 051a 81EA0101 	    eor r1,r1 
 744 051e 3028     	    cmp r0,#'0' 
 745 0520 05DB     	    blt 9f
 746 0522 3A28     	    cmp r0,'9'+1
 747 0524 03D5     	    bpl 9f 
 748 0526 4FF0FF31 	    mov r1,#-1
 749 052a A0F13000 	    sub r0,#'0'  
 750              	9:   
 751 052e 0940     	    ands r1,r1
 752 0530 02BC     	    pop {r1} 
 753 0532 7047     	    _RET 
 754              	
 755              	/***************************************
 756              	    is_hex 
 757              	    check for hexadecimal digit 
 758              	    convert to hex digit.
 759              	    input:
 760              	      r0    
 761              	    output:
 762              	      r0     if !Z then converted digit 
 763              	      Z      0 true | 1 false         
 764              	***************************************/
 765              	    _FUNC is_hex 
 766 0534 02B4     	    push {r1}
 767 0536 4FF0FF31 	    mov r1,#-1 
 768 053a 4128     	    cmp r0,#'A' 
 769 053c 01D4     	    bmi 1f 
 770 053e A0F10700 	    sub r0,#7 
 771 0542 A0F13000 	1:  sub r0,#'0'
 772 0546 01D4     	    bmi 2f 
 773 0548 1028     	    cmp r0,#16
 774 054a 01D4     	    bmi 9f 
 775 054c 81EA0101 	2:  eor r1,r1  
 776 0550 0940     	9:  ands r1,r1 
 777 0552 02BC     	    pop {r1}
 778 0554 7047     	    _RET 
 779              	
 780              	/***************************************
 781              	    is_bit 
 782              	    check if char is '0'|'1' 
 783              	    convert to binary digit. 
 784              	    input:
 785              	      r0    
 786              	    output:
 787              	      r0     if !Z then converted digit 
 788              	      Z      0 true | 1 false         
 789              	***************************************/
 790 0556 00BF     	    _FUNC is_bit
 791 0558 02B4     	    push  {r1}
 792 055a 4FF0FF31 	    mov r1,#-1 
 793 055e A0F13000 	    sub r0,#'0' 
 794 0562 01D4     	    bmi 2f 
 795 0564 0229     	    cmp r1,#2
 796 0566 01D4     	    bmi 9f 
 797 0568 81EA0101 	2:  eor r1,r1 
 798 056c 0940     	9:  ands r1,r1 
 799 056e 02BC     	    pop {r1}
ARM GAS  tinyBasic.s 			page 27


 800 0570 7047     	    _RET 
 801              	
 802              	/***************************************
 803              	    is_alpha 
 804              	    check if character is {A..Z} 
 805              	  input:
 806              	    r0   character 
 807              	  output: 
 808              	    r0    same character 
 809              	    Z    0 true | 1 false  
 810              	****************************************/
 811 0572 00BF     	    _FUNC is_alpha
 812 0574 02B4     	    push {r1} 
 813 0576 4FF0FF31 	    mov r1,#-1 
 814 057a 4128     	    cmp r0,#'A' 
 815 057c 01DB     	    blt 8f 
 816 057e 5B28     	    cmp r0,#'Z'+1 
 817 0580 01D4     	    bmi 9f 
 818 0582 81EA0101 	8:  eor r1,r1  
 819 0586 0940     	9:  ands r1,r1 
 820 0588 02BC     	    pop {r1}
 821 058a 7047     	    _RET 
 822              	
 823              	/***************************************
 824              	    is_num 
 825              	    check if character is {0..9} 
 826              	  input:
 827              	    r0   character 
 828              	  output: 
 829              	    r0    same character 
 830              	    Z    0 true | 1 false  
 831              	****************************************/
 832              	    _FUNC is_num 
 833 058c 02B4     	    push {r1} 
 834 058e 4FF0FF31 	    mov r1,#-1 
 835 0592 3028     	    cmp r0,#'0' 
 836 0594 01DB     	    blt 8f 
 837 0596 3A28     	    cmp r0,#'9'+1 
 838 0598 01D4     	    bmi 9f 
 839 059a 81EA0101 	8:  eor r1,r1  
 840 059e 0940     	9:  ands r1,r1 
 841 05a0 02BC     	    pop {r1}
 842 05a2 7047     	    _RET 
 843              	
 844              	/*****************************************
 845              	    is_alnum 
 846              	    check if character is alphanumeric 
 847              	    input:
 848              	      r0 
 849              	    output:
 850              	      r0     same 
 851              	      Z      1 false | 0 true 
 852              	*****************************************/
 853              	    _FUNC is_alnum 
 854 05a4 00B5FFF7 	    _CALL is_alpha 
 854      E5FF5DF8 
 854      04EB
ARM GAS  tinyBasic.s 			page 28


 855 05ae 04D1     	    bne 9f 
 856 05b0 00B5FFF7 	    _CALL is_num 
 856      EBFF5DF8 
 856      04EB
 857 05ba 7047     	9:  _RET 
 858              	
 859              	/******************************************
 860              	    atoi 
 861              	    convert ascii to integer 
 862              	    input:
 863              	      r0   *buffer 
 864              	      r1   base 
 865              	    output:
 866              	      r0   0 no integer found 
 867              	      r1   integer
 868              	    use:
 869              	      r2   base  
 870              	      T1   *buffer 
 871              	      T2   digit count  
 872              	******************************************/
 873              	    _GBL_FUNC atoi 
 874 05bc 2DE90403 	    push {r2,T1,T2}
 875 05c0 8046     	    mov T1,r0  // *buffer 
 876 05c2 0A46     	    mov r2,r1  // base  
 877 05c4 81EA0101 	    eor r1,r1  // converted integer 
 878 05c8 89EA0909 	    eor T2,T2  // digit count 
 879 05cc 18F8010B 	1:  ldrb r0,[T1],#1
 880 05d0 00B5FFF7 	    _CALL upper 
 880      99FF5DF8 
 880      04EB
 881 05da 3028     	    cmp r0,#'0'
 882 05dc 0FD4     	    bmi 8f
 883 05de 3A28     	    cmp r0,#'9'+1 
 884 05e0 03D4     	    bmi 2f 
 885 05e2 4128     	    cmp r0,#'A'
 886 05e4 0BD4     	    bmi 8f 
 887 05e6 A0F10700 	    sub r0,#7 
 888 05ea A0F13000 	2:  sub r0,#'0' 
 889 05ee 9042     	    cmp r0,r2
 890 05f0 05D5     	    bpl 8f  
 891 05f2 02FB01F1 	    mul r1,r2 
 892 05f6 0144     	    add r1,r0
 893 05f8 09F10109 	    add T2,#1
 894 05fc E6E7     	    b 1b 
 895 05fe 4846     	8:  mov r0,T2  
 896 0600 BDE80403 	    pop {r2,T1,T2}
 897 0604 7047     	    _RET 
 898              	
 899              	/*****************************************
 900              	    parse_keyword 
 901              	    parse work and ckeck if in dictionary 
 902              	    input:
 903              	      r0    first character 
 904              	      r3    tib index 
 905              	      t1    tib 
 906              	      t2    pad 
 907              	    output:
ARM GAS  tinyBasic.s 			page 29


 908              	      r3    updated 
 909              	      t1    updated 
 910              	      t2    updated   
 911              	    use:
 912              	    
 913              	*****************************************/
 914 0606 00BF     	    _FUNC parse_keyword 
 915 0608 4DF8049D 	    push {T2}
 916 060c 18F80300 	    ldrb r0,[T1,r3]
 917 0610 03F10103 	    add r3,#1
 918 0614 00B3     	    cbz r0,2f 
 919 0616 00B5FFF7 	    _CALL upper 
 919      76FF5DF8 
 919      04EB
 920 0620 00B5FFF7 	    _CALL is_alpha 
 920      A7FF5DF8 
 920      04EB
 921 062a 00F03D81 	    beq syntax_error 
 922 062e 09F8010B 	    strb r0,[T2],#1
 923 0632 18F80300 	1:  ldrb r0,[T1,r3]
 924 0636 03F10103 	    add r3,#1 
 925 063a 68B1     	    cbz r0,2f 
 926 063c 00B5FFF7 	    _CALL upper 
 926      63FF5DF8 
 926      04EB
 927 0646 00B5FFF7 	    _CALL is_alnum
 927      ACFF5DF8 
 927      04EB
 928 0650 02D0     	    beq 2f 
 929 0652 09F8010B 	    strb r0,[T2],#1
 930 0656 ECE7     	    b 1b 
 931 0658 A3F10103 	2:  sub r3,#1
 932 065c 80EA0000 	    eor r0,r0
 933 0660 89F80000 	    strb r0,[T2] 
 934 0664 0098     	    ldr r0,[sp]
 935 0666 4178     	    ldrb r1,[r0,#1] 
 936 0668 29B9     	    cbnz r1,3f
 937 066a 0178     	    ldrb r1,[r0]
 938 066c A1F14101 	    sub r1,#'A'
 939 0670 4FF00400 	    mov r0,#TK_VAR
 940 0674 08E0     	    b 9f 
 941 0676 DFF8381A 	3:  ldr r1,=kword_dict  
 942 067a 00B500F0 	    _CALL search_dict 
 942      F0F95DF8 
 942      04EB
 943 0684 00B9     	    cbnz r0,9f 
 944 0686 0FE1     	    b syntax_error 
 945 0688 5DF8049B 	9:  pop {T2}
 946 068c 7047     	    _RET 
 947              	
 948              	
 949              	/*******************
 950              	    DECOMPILER 
 951              	*******************/
 952              	
 953              	/********************************************
 954              	    cmd_name 
ARM GAS  tinyBasic.s 			page 30


 955              	    search bytecode in dictionary and 
 956              	    return its name 
 957              	  input:
 958              	    r0    keyword bytecode 
 959              	  ouput:
 960              	    r0    name string 
 961              	  use:
 962              	    T1    link 
 963              	    T2    tmp 
 964              	*********************************************/
 965 068e 00BF     	    _FUNC cmd_name 
 966 0690 2DE90003 	    push {T1,T2}
 967 0694 DFF8188A 	    ldr T1,=kword_dict 
 968 0698 58F8089C 	1:  ldr T2,[T1,#-8]
 969 069c 8145     	    cmp T2,r0 
 970 069e 04D0     	    beq 2f 
 971 06a0 58F80C8C 	    ldr T1,[T1,#-12]
 972 06a4 B8F1000F 	    cmp T1,#0
 973 06a8 F6D1     	    bne 1b  
 974 06aa 4046     	2:  mov r0,T1 
 975 06ac BDE80003 	    pop {T1,T2}
 976 06b0 7047     	    _RET
 977              	
 978              	/*****************************
 979              	  decompile_line 
 980              	  detokenize BASIC line 
 981              	  input:
 982              	    r0  *token list 
 983              	    r1  *output buffer 
 984              	  output:
 985              	    r0  *output buffer (.asciz) 
 986              	  use:
 987              	    T1  *output buffer
 988              	    BPTR  *token list
 989              	    IN  offset in token list  
 990              	******************************/
 991 06b2 00BF     	    _GBL_FUNC decompile_line
 992 06b4 2DE90201 	    push {r1,T1} 
 993 06b8 8346     	    mov BPTR,r0 
 994 06ba 4FF0000A 	    mov IN,#0
 995 06be 8846     	    mov T1,r1 
 996 06c0 3BF80A00 	    ldrh r0,[BPTR,IN]
 997 06c4 0AF1020A 	    add IN,#2 
 998 06c8 4FF00A01 	    mov r1,#10 
 999 06cc 00B5FFF7 	    _CALL itoa
 999      FEFF5DF8 
 999      04EB
 1000 06d6 4146     	    mov r1,T1
 1001 06d8 00B5FFF7 	    _CALL strcpy
 1001      FEFF5DF8 
 1001      04EB
 1002 06e2 4046     	    mov r0,T1 
 1003 06e4 00B5FFF7 	    _CALL strlen
 1003      FEFF5DF8 
 1003      04EB
 1004 06ee 8044     	    add T1,r0 
 1005 06f0 1BF80A00 	    ldrb r0,[BPTR,IN]    
ARM GAS  tinyBasic.s 			page 31


 1006 06f4 0AF1010A 	    add IN,#1 
 1007 06f8 6060     	    str r0,[UPP,#COUNT]
 1008              	decomp_loop:
 1009 06fa 00B500F0 	    _CALL next_token
 1009      DCFA5DF8 
 1009      04EB
 1010 0704 0028     	    cmp r0,#TK_NONE 
 1011 0706 00F09B80 	    beq 9f  
 1012 070a 0E28     	    cmp r0,#TK_INTGR 
 1013 070c 15D1     	    bne 1f 
 1014 070e 0846     	    mov r0,r1 
 1015 0710 A169     	    ldr r1,[UPP,#BASE]
 1016 0712 00B5FFF7 	    _CALL itoa
 1016      FEFF5DF8 
 1016      04EB
 1017 071c 01B4     	    push {r0}
 1018 071e 4146     	    mov r1,T1 
 1019 0720 00B5FFF7 	    _CALL strcpy
 1019      FEFF5DF8 
 1019      04EB
 1020 072a 01BC     	    pop {r0} 
 1021 072c 00B5FFF7 	    _CALL strlen
 1021      FEFF5DF8 
 1021      04EB
 1022 0736 8044     	    add T1,r0 
 1023 0738 DFE7     	    b decomp_loop 
 1024 073a 0428     	1:  cmp r0,#TK_VAR 
 1025 073c 04D1     	    bne 2f 
 1026 073e 01F14100 	    add r0,r1,'A'
 1027 0742 08F8010B 	    strb r0,[T1],#1 
 1028 0746 D8E7     	    b decomp_loop 
 1029 0748 0328     	2:  cmp r0,#TK_CHAR 
 1030 074a 0AD1     	    bne 3f 
 1031 074c 4FF05C00 	    mov r0,#'\\'
 1032 0750 08F8010B 	    strb r0,[T1],#1
 1033 0754 08F8011B 	    strb r1,[T1],#1
 1034 0758 4FF02000 	    mov r0,#SPACE 
 1035 075c 08F8010B 	    strb r0,[T1],#1
 1036 0760 CBE7     	    b decomp_loop 
 1037 0762 0228     	3:  cmp r0,#TK_QSTR 
 1038 0764 17D1     	    bne 4f 
 1039 0766 4FF02200 	    mov r0,#'"'
 1040 076a 08F8010B 	    strb r0,[T1],#1 
 1041 076e 0846     	    mov r0,r1
 1042 0770 02B4     	    push {r1}
 1043 0772 4146     	    mov r1,T1  
 1044 0774 00B5FFF7 	    _CALL strcpy
 1044      FEFF5DF8 
 1044      04EB
 1045 077e 01BC     	    pop {r0}
 1046 0780 00B5FFF7 	    _CALL strlen 
 1046      FEFF5DF8 
 1046      04EB
 1047 078a 8044     	    add T1,r0 
 1048 078c 4FF02200 	    mov r0,#'"'
 1049 0790 08F8010B 	    strb r0,[T1],#1 
 1050 0794 B1E7     	    b decomp_loop
ARM GAS  tinyBasic.s 			page 32


 1051 0796 0A28     	4:  cmp r0,#TK_CMD
 1052 0798 3AD4     	    bmi 5f 
 1053 079a 0E28     	    cmp r0,#TK_INTGR 
 1054 079c 38D5     	    bpl 5f
 1055 079e 4FF02000 	    mov r0,#SPACE 
 1056 07a2 08F8010B 	    strb r0,[T1],#1  
 1057 07a6 0846     	    mov r0,r1
 1058 07a8 3228     	    cmp r0,#PRT_IDX 
 1059 07aa 04D1     	    bne 1f  
 1060 07ac 4FF03F00 	    mov r0,#'?'
 1061 07b0 08F8010B 	    strb r0,[T1],#1 
 1062 07b4 27E0     	    b 3f 
 1063 07b6 3528     	1:  cmp r0,#REM_IDX
 1064 07b8 12D1     	    bne 1f
 1065 07ba 4FF02700 	    mov r0,#'\''
 1066 07be 08F8010B 	    strb r0,[T1],#1 
 1067 07c2 0BEB0A00 	    add r0,BPTR,IN
 1068 07c6 4146     	    mov r1,T1   
 1069 07c8 00B5FFF7 	    _CALL strcpy
 1069      FEFF5DF8 
 1069      04EB
 1070 07d2 80EA0000 	    eor r0,r0 
 1071 07d6 88F80000 	    strb r0,[T1]  
 1072 07da D4F804A0 	    ldr IN,[UPP,#COUNT]
 1073 07de 2FE0     	    b 9f 
 1074 07e0 00B5FFF7 	1:  _CALL cmd_name
 1074      55FF5DF8 
 1074      04EB
 1075 07ea 01B4     	2:  push {r0}
 1076 07ec 4146     	    mov r1,T1 
 1077 07ee 00B5FFF7 	    _CALL strcpy 
 1077      FEFF5DF8 
 1077      04EB
 1078 07f8 01BC     	    pop {r0}
 1079 07fa 00B5FFF7 	    _CALL strlen 
 1079      FEFF5DF8 
 1079      04EB
 1080 0804 8044     	    add T1,r0 
 1081 0806 4FF02000 	3:  mov r0,#SPACE 
 1082 080a 08F8010B 	    strb r0,[T1],#1 
 1083 080e 74E7     	    b decomp_loop
 1084 0810 01B4     	5:  push {r0}
 1085 0812 DFF8A018 	    ldr r1,=single_char 
 1086 0816 085C     	    ldrb r0,[r1,r0]
 1087 0818 02BC     	    pop {r1}
 1088 081a 10B1     	    cbz r0,6f 
 1089 081c 08F8010B 	    strb r0,[T1],#1 
 1090 0820 6BE7     	    b decomp_loop
 1091 0822 3329     	6:  cmp r1,#TK_GE 
 1092 0824 02D1     	    bne 7f 
 1093 0826 DFF89008 	    ldr r0,=ge_str
 1094 082a DEE7     	    b 2b 
 1095 082c 3629     	7:  cmp r1,#TK_LE 
 1096 082e 02D1     	    bne 8f
 1097 0830 DFF88808 	    ldr r0,=le_str
 1098 0834 D9E7     	    b 2b
 1099 0836 3529     	8:  cmp r1,#TK_NE 
ARM GAS  tinyBasic.s 			page 33


 1100 0838 02D1     	    bne 9f 
 1101 083a DFF88408 	    ldr r0,=ne_str 
 1102 083e D4E7     	    b 2b 
 1103 0840 80EA0000 	9:  eor r0,r0 
 1104 0844 88F80000 	    strb r0,[T1]
 1105 0848 BDE80101 	    pop {r0,T1}
 1106 084c 7047     	    _RET 
 1107              	
 1108 084e 3E3D00   	ge_str: .asciz ">="
 1109 0851 3C3D00   	le_str: .asciz "<="
 1110 0854 3C3E00   	ne_str: .asciz "<>"
 1111              	
 1112              	single_char:
 1113 0857 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1113      00402829 
 1113      2C23
 1114 0861 00000000 	  .space 6
 1114      0000
 1115 0867 2B2D     	  .byte '+','-'
 1116 0869 00000000 	  .space 14
 1116      00000000 
 1116      00000000 
 1116      0000
 1117 0877 2A2F25   	  .byte '*','/','%'
 1118 087a 00000000 	  .space 14
 1118      00000000 
 1118      00000000 
 1118      0000
 1119 0888 3E3D003C 	  .byte '>','=',0,'<',0,0
 1119      0000
 1120              	
 1121              	
 1122              	/**********************************
 1123              	  modulo 
 1124              	  compute r0 mod r1
 1125              	  input:
 1126              	    r0   dividend
 1127              	    r1   divisor 
 1128              	  output:
 1129              	    r0   TK_INTGR 
 1130              	    r1   r0 mod r1 
 1131              	*********************************/
 1132 088e 00BF     	    _GBL_FUNC modulo 
 1133 0890 01B4     	    push {r0}
 1134 0892 B0FBF1F0 	    udiv r0,r1 
 1135 0896 01FB00F0 	    mul  r0,r1 
 1136 089a 02BC     	    pop {r1}
 1137 089c A1EB0001 	    sub r1,r0
 1138 08a0 4FF00E00 	    mov r0,#TK_INTGR
 1139 08a4 7047     	    _RET 
 1140              	
 1141              	/**********************************
 1142              	      BASIC commands 
 1143              	**********************************/
 1144              	
 1145              	/*********************************
 1146              	    syntax_error 
ARM GAS  tinyBasic.s 			page 34


 1147              	    display syntax error message and 
 1148              	    abort program 
 1149              	  input:
 1150              	    none  
 1151              	  output: 
 1152              	    none 
 1153              	  use:
 1154              	*********************************/
 1155 08a6 00BF     	    _FUNC syntax_error 
 1156 08a8 4FF00200 	    mov r0,#ERR_SYNTAX
 1157 08ac 00E0     	    b tb_error 
 1158              	
 1159              	/*********************************
 1160              	    tb_error 
 1161              	    display BASIC error and 
 1162              	    abort program. 
 1163              	  input:
 1164              	    r0    error code   
 1165              	  output: 
 1166              	    none 
 1167              	  use:
 1168              	    r1    temp 
 1169              	*********************************/
 1170 08ae 00BF     	    _FUNC tb_error 
 1171 08b0 216C     	    ldr r1,[UPP,#FLAGS]
 1172 08b2 11F0200F 	    tst r1,#FCOMP
 1173 08b6 56D1     	    bne compile_error
 1174              	rt_error:
 1175 08b8 01B4     	    push {r0}
 1176 08ba DFF80808 	    ldr r0,=rt_error_msg 
 1177 08be 00B5FFF7 	    _CALL uart_puts 
 1177      FEFF5DF8 
 1177      04EB
 1178 08c8 01BC     	    pop {r0}
 1179 08ca DFF8FC17 	    ldr r1,=err_msg  
 1180 08ce 4FEA8000 	    lsl r0,#2 
 1181 08d2 0858     	    ldr r0,[r1,r0]
 1182 08d4 00B5FFF7 	    _CALL uart_puts
 1182      FEFF5DF8 
 1182      04EB
 1183              	// print line number     
 1184 08de D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1185 08e2 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1186 08e6 DFF8E407 	    ldr r0,=lineno_msg 
 1187 08ea 00B5FFF7 	    _CALL uart_puts
 1187      FEFF5DF8 
 1187      04EB
 1188 08f4 BBF80000 	    ldrh r0,[BPTR]
 1189 08f8 4FF00A01 	    mov r1,#10
 1190 08fc 00B5FFF7 	    _CALL print_int 
 1190      FEFF5DF8 
 1190      04EB
 1191              	// line address 
 1192 0906 DFF8C807 	    ldr r0,=line_adr_msg 
 1193 090a 00B5FFF7 	    _CALL uart_puts 
 1193      FEFF5DF8 
 1193      04EB
ARM GAS  tinyBasic.s 			page 35


 1194 0914 5846     	    mov r0,BPTR 
 1195 0916 4FF01001 	    MOV r1,#16
 1196 091a 00B5FFF7 	    _CALL print_int
 1196      FEFF5DF8 
 1196      04EB
 1197              	// print error offset on line      
 1198 0924 DFF8AC07 	    ldr r0,=token_at_msg 
 1199 0928 00B5FFF7 	    _CALL uart_puts 
 1199      FEFF5DF8 
 1199      04EB
 1200 0932 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1201 0936 5046     	    mov r0,IN 
 1202 0938 4FF01001 	    mov r1,#16 
 1203 093c 00B5FFF7 	    _CALL print_int
 1203      FEFF5DF8 
 1203      04EB
 1204 0946 4FF00D00 	    mov r0,#CR 
 1205 094a 00B5FFF7 	    _CALL uart_putc
 1205      FEFF5DF8 
 1205      04EB
 1206              	// dump tokenize line 
 1207 0954 5846     	    mov r0,BPTR
 1208 0956 8278     	    ldrb r2,[r0,#2]
 1209 0958 04B4     	    push {r2}
 1210 095a 00B500F0 	    _CALL dump01 
 1210      75F95DF8 
 1210      04EB
 1211 0964 5EE1     	    b warm_start 
 1212              	compile_error:
 1213 0966 DFF86017 	    ldr r1,=err_msg 
 1214 096a 4FEA8000 	    lsl r0,#2 
 1215 096e 0858     	    ldr r0,[r1,r0]
 1216 0970 00B5FFF7 	    _CALL uart_puts
 1216      FEFF5DF8 
 1216      04EB
 1217 097a A068     	    ldr r0,[UPP,#BASICPTR]
 1218 097c 00B5FFF7 	    _CALL uart_puts
 1218      FEFF5DF8 
 1218      04EB
 1219 0986 4FF00D00 	    mov r0,#CR 
 1220 098a 00B5FFF7 	    _CALL uart_putc  
 1220      FEFF5DF8 
 1220      04EB
 1221 0994 2068     	    ldr r0,[UPP,#IN_SAVED]
 1222 0996 00B5FFF7 	    _CALL spaces 
 1222      FEFF5DF8 
 1222      04EB
 1223 09a0 4FF05E00 	    mov r0,#'^' 
 1224 09a4 00B5FFF7 	    _CALL uart_putc
 1224      FEFF5DF8 
 1224      04EB
 1225 09ae 4FF00D00 	    mov r0,#CR 
 1226 09b2 00B5FFF7 	    _CALL uart_putc   
 1226      FEFF5DF8 
 1226      04EB
 1227 09bc 32E1     	    b  warm_start  
 1228              	    
ARM GAS  tinyBasic.s 			page 36


 1229 09be 0A52756E 	rt_error_msg: .asciz "\nRuntime error\n"
 1229      74696D65 
 1229      20657272 
 1229      6F720A00 
 1230 09ce 6C696E65 	lineno_msg:   .asciz "line: "
 1230      3A2000
 1231 09d5 2C616464 	line_adr_msg:   .asciz ",address: "
 1231      72657373 
 1231      3A2000
 1232 09e0 2C6F6666 	token_at_msg: .asciz ",offset: "
 1232      7365743A 
 1232      2000
 1233              	
 1234              	err_msg:
 1235 09ea 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1235      00000000 
 1235      0D000000 
 1235      1B000000 
 1235      34000000 
 1236 0a02 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1236      6F000000 
 1236      89000000 
 1236      9A000000 
 1236      AB000000 
 1237 0a16 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1237      EA000000 
 1237      FA000000 
 1237      0E010000 
 1237      21010000 
 1238              	
 1239              	    .section .rodata.tb_error 
 1240              	
 1241 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1241      72792066 
 1241      756C6C0A 
 1241      00
 1242 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1242      61782065 
 1242      72726F72 
 1242      0A00
 1243 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1243      206F7065 
 1243      72617469 
 1243      6F6E206F 
 1243      76657266 
 1244 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1244      73696F6E 
 1244      20627920 
 1244      300A00
 1245 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1245      6C696420 
 1245      6C696E65 
 1245      206E756D 
 1245      6265722E 
 1246 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1246      74696D65 
 1246      206F6E6C 
ARM GAS  tinyBasic.s 			page 37


 1246      79207573 
 1246      6167652E 
 1247 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1247      616E6420 
 1247      6C696E65 
 1247      206F6E6C 
 1247      79207573 
 1248 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1248      69636174 
 1248      65206E61 
 1248      6D652E0A 
 1248      00
 1249 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1249      206E6F74 
 1249      20666F75 
 1249      6E642E0A 
 1249      00
 1250 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1250      76616C75 
 1250      652E0A00 
 1251 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1251      20696E20 
 1251      65787465 
 1251      6E646564 
 1251      206D656D 
 1252 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1252      61746120 
 1252      666F756E 
 1252      642E0A00 
 1253 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1253      726F6772 
 1253      616D2069 
 1253      6E205241 
 1253      4D210A00 
 1254 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1254      20737973 
 1254      74656D20 
 1254      66756C6C 
 1254      2E0A00
 1255 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1255      65722066 
 1255      756C6C0A 
 1255      00
 1256              	
 1257 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1257      2074696D 
 1257      65206572 
 1257      726F722C 
 1257      2000
 1258 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1258      70696C65 
 1258      20657272 
 1258      6F722C20 
 1258      00
 1259 0151 6C617374 	tk_id: .asciz "last token id: "
 1259      20746F6B 
 1259      656E2069 
ARM GAS  tinyBasic.s 			page 38


 1259      643A2000 
 1260              	
 1261              	
 1262              	    .section  .text , "ax", %progbits 
 1263              	
 1264              	/*********************************
 1265              	   skip_line 
 1266              	   data and remark line are skipped
 1267              	   by the interpreter 
 1268              	***********************************/
 1269 0a2a 00BF     	    _FUNC skip_line 
 1270 0a2c D4F804A0 	    ldr IN,[UPP,#COUNT]
 1271 0a30 7047     	    _RET 
 1272              	
 1273              	
 1274              	/*********************************
 1275              	   BASIC: BTGL adr, mask   
 1276              	   toggle bits [adr]=[adr]^mask  
 1277              	   input:
 1278              	     r0    adr 
 1279              	     r1    mask 
 1280              	    output;
 1281              	      none 
 1282              	    use:
 1283              	      T1   temp
 1284              	      T2   temp  
 1285              	*******************************/     
 1286 0a32 00BF     	    _FUNC BTGL 
 1287              	
 1288 0a34 7047     	    _RET 
 1289              	
 1290              	/***************************************
 1291              	   kword_cmp
 1292              	   compare keyword to dict entry
 1293              	  input:
 1294              	    r0  keyword 
 1295              	    r1  dict entry 
 1296              	    r2  character count 
 1297              	  output:
 1298              	    r0  0 not same | -1 same 
 1299              	  use:
 1300              	    r6   result  
 1301              	    T1   char 1
 1302              	    T2   char 2
 1303              	**************************************/   
 1304 0a36 00BF     	    _FUNC kword_cmp 
 1305 0a38 2DE94003 	    push {r6,T1,T2}
 1306 0a3c 4FF0FF36 	    mov r6,#-1 
 1307 0a40 4AB1     	1:  cbz r2,9f       
 1308 0a42 10F8018B 	    ldrb T1,[r0],#1
 1309 0a46 11F8019B 	    ldrb T2,[r1],#1
 1310 0a4a A2F10102 	    sub r2,#1
 1311 0a4e C845     	    cmp T1,T2
 1312 0a50 F6D0     	    beq 1b 
 1313 0a52 86EA0606 	    eor r6,r6  
 1314 0a56 3046     	9:  mov r0,r6
 1315 0a58 BDE84003 	    pop {r6,T1,T2}
ARM GAS  tinyBasic.s 			page 39


 1316 0a5c 7047     	    _RET 
 1317              	
 1318              	/***********************************************
 1319              	    search_dict 
 1320              	    search keyword in dictionary
 1321              	   input:
 1322              	  	 r0   keyword 
 1323              	     r1		dictionary first name field address  
 1324              	   output:
 1325              	     r0 		token attribute 
 1326              	     r1		  cmd_index if r0!=TK_NONE  
 1327              	   use:
 1328              	     r3   length keyword 
 1329              	     T1   keyword
 1330              	     T2   link  
 1331              	**********************************************/
 1332 0a5e 00BF     	  _FUNC search_dict
 1333 0a60 2DE90C03 	  push {r2,r3,T1,T2}
 1334 0a64 8046     	  mov T1,r0 
 1335 0a66 00B5FFF7 	  _CALL strlen 
 1335      FEFF5DF8 
 1335      04EB
 1336 0a70 0346     	  mov r3,r0  
 1337              	1:  
 1338 0a72 8946     	   mov T2,r1  // keep for linking   
 1339 0a74 0878     	   ldrb r0,[r1] 
 1340 0a76 78B1     	   cbz r0,9f // null byte, end of dictionary
 1341 0a78 4046     	   mov r0,T1
 1342 0a7a 1A46     	   mov r2,r3   
 1343 0a7c 00B5FFF7 	   _CALL kword_cmp  
 1343      DBFF5DF8 
 1343      04EB
 1344 0a86 18B9     	   cbnz r0,2f 
 1345 0a88 4946     	   mov r1,T2
 1346 0a8a 51F80C1C 	   ldr r1,[r1,#-12]
 1347 0a8e F0E7     	   b 1b   
 1348              	2: // found
 1349 0a90 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1350 0a94 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1351 0a98 BDE80C03 	9: pop {r2,r3,T1,T2}
 1352 0a9c 7047     	   _RET 
 1353              	
 1354              	
 1355              	/**************************
 1356              	    INTERPRETER 
 1357              	*************************/
 1358              	
 1359              	/*********************************
 1360              	   cold_start 
 1361              	   initialize BASIC interpreter 
 1362              	   never leave 
 1363              	   input:
 1364              	     none 
 1365              	   output:
 1366              	    none 
 1367              	*********************************/
 1368              	  .type cold_start, %function 
ARM GAS  tinyBasic.s 			page 40


 1369              	  .global cold_start 
 1370              	cold_start: 
 1371 0a9e 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1371      C2F20004 
 1372 0aa6 DFF84400 	    ldr r0,src_addr 
 1373 0aaa 1149     	    ldr r1,dest_addr
 1374 0aac 0968     	    ldr r1,[r1] 
 1375 0aae 0C44     	    add UPP,r1 // system variables base address   
 1376              	// clear RAM
 1377 0ab0 2046     	    mov r0,UPP  
 1378 0ab2 DFF85C11 	    ldr r1,tib 
 1379 0ab6 82EA0202 	    eor r2,r2 
 1380 0aba 40F8042B 	1:  str r2,[r0],#4 
 1381 0abe 8842     	    cmp r0,r1 
 1382 0ac0 FBD4     	    bmi 1b 
 1383              	//copy initialized system variables to ram 
 1384 0ac2 DFF82800 	    ldr r0,src_addr 
 1385 0ac6 2146     	    mov r1,UPP 
 1386 0ac8 DFF82820 	    ldr r2,sysvar_size
 1387 0acc 00B5FFF7 	    _CALL cmove
 1387      FEFF5DF8 
 1387      04EB
 1388 0ad6 00B500F0 	    _CALL prt_version
 1388      0EF85DF8 
 1388      04EB
 1389 0ae0 00B500F0 	    _CALL clear_basic  
 1389      5DF85DF8 
 1389      04EB
 1390 0aea 9BE0     	    b warm_start    
 1391              	src_addr:
 1392 0aec 00000000 	  .word uzero
 1393              	dest_addr:
 1394 0af0 00000000 	  .word vectors_size
 1395 0af4 CC000000 	sysvar_size: .word ulast-uzero 
 1396              	
 1397              	/************************************
 1398              	    print firmware version 
 1399              	    input: 
 1400              	      none 
 1401              	    output:
 1402              	      none 
 1403              	    use:
 1404              	      r0 
 1405              	***********************************/
 1406              	    _FUNC prt_version 
 1407 0af8 DFF8DC05 	    ldr r0,=version_msg 
 1408 0afc 00B5FFF7 	    _CALL uart_puts
 1408      FEFF5DF8 
 1408      04EB
 1409 0b06 9FF87800 	    ldrb r0,version 
 1410 0b0a 4FEA1010 	    lsr r0,#4 
 1411 0b0e 00F13000 	    add r0,#'0' 
 1412 0b12 3A28     	    cmp r0,#'9'+1 
 1413 0b14 01D4     	    bmi 1f 
 1414 0b16 00F10700 	    add r0,#7 
 1415              	  1:
 1416 0b1a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 41


 1416      FEFF5DF8 
 1416      04EB
 1417 0b24 4FF02E00 	    mov r0,#'. 
 1418 0b28 00B5FFF7 	    _CALL uart_putc 
 1418      FEFF5DF8 
 1418      04EB
 1419 0b32 9FF84C00 	    ldrb r0,version 
 1420 0b36 00F00F00 	    and r0,#15 
 1421 0b3a 00F13000 	    add r0,'0' 
 1422 0b3e 3A28     	    cmp r0,#'9'+1 
 1423 0b40 01D4     	    bmi 1f 
 1424 0b42 00F10700 	    add r0,#7
 1425              	  1: 
 1426 0b46 00B5FFF7 	    _CALL uart_putc 
 1426      FEFF5DF8 
 1426      04EB
 1427 0b50 4FF00D00 	    mov r0,#CR 
 1428 0b54 00B5FFF7 	    _CALL uart_putc 
 1428      FEFF5DF8 
 1428      04EB
 1429 0b5e 7047     	    _RET  
 1430              	version_msg:
 1431 0b60 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1431      65207069 
 1431      6C6C2074 
 1431      696E7920 
 1431      42415349 
 1432              	version:
 1433 0b80 10       	    .byte 0x10 
 1434 0b81 0000BF   	    .p2align 2 
 1435              	
 1436              	
 1437              	/*****************************
 1438              	    clear_vars 
 1439              	    initialize variables to 0
 1440              	  input:
 1441              	    none 
 1442              	  output:
 1443              	    none 
 1444              	  use:
 1445              	    r0,r1,r2 
 1446              	*****************************/
 1447              	    _FUNC clear_vars 
 1448 0b84 07B4     	    push {r0,r1,r2}
 1449 0b86 80EA0000 	    eor r0,r0 
 1450 0b8a 04F16001 	    add r1,UPP,#VARS
 1451 0b8e 4FF01A02 	    mov r2,#26
 1452 0b92 41F8040B 	1:  str r0,[r1],#4 
 1453 0b96 013A     	    subs r2,#1
 1454 0b98 FBD1     	    bne 1b  
 1455 0b9a 07BC     	    pop {r0,r1,r2}
 1456 0b9c 7047     	    _RET 
 1457              	
 1458              	/*****************************
 1459              	   clear_basic 
 1460              	   reset BASIC system variables 
 1461              	   and clear variables and RAM 
ARM GAS  tinyBasic.s 			page 42


 1462              	*****************************/
 1463 0b9e 00BF     	    _FUNC clear_basic
 1464 0ba0 80EA0000 	  	eor r0,r0
 1465 0ba4 2064     	    str r0,[UPP,#FLAGS] 
 1466 0ba6 6060     	    str r0,[UPP,#COUNT]
 1467 0ba8 2060     	    str r0,[UPP,#IN_SAVED]
 1468 0baa A060     	    str r0,[UPP,#BASICPTR]
 1469 0bac E060     	    str r0,[UPP,#DATAPTR]
 1470 0bae 2061     	    str r0,[UPP,#DATA]
 1471 0bb0 6061     	    str r0,[UPP,#DATALEN]
 1472 0bb2 04F1CC00 	    add r0,UPP,#BASIC_START 
 1473 0bb6 00F11000 	    add r0,#16 
 1474 0bba 6FF00F01 	    mvn r1,#15
 1475 0bbe 00EA0100 	    and r0,r1 
 1476 0bc2 2063     	    str r0,[UPP,#TXTBGN]
 1477 0bc4 6063     	    str r0,[UPP,#TXTEND]
 1478 0bc6 00B5FFF7 	    _CALL clear_vars
 1478      DCFF5DF8 
 1478      04EB
 1479 0bd0 206B     	    ldr r0,[UPP,#TXTBGN]
 1480 0bd2 DFF83C10 	    ldr r1,tib 
 1481 0bd6 82EA0202 	    eor r2,r2 
 1482 0bda 40F8042B 	1:  str r2,[r0],#4
 1483 0bde 8842     	    cmp r0,r1 
 1484 0be0 FBD4     	    bmi 1b 
 1485 0be2 7047     	    _RET  
 1486              	
 1487              	/***********************************
 1488              	   warm_init 
 1489              	   initialize interpreter context 
 1490              	  input:
 1491              	    none
 1492              	  output:
 1493              	    none 
 1494              	  use:
 1495              	    r0 
 1496              	***********************************/
 1497              	warm_init:
 1498              	// reset data stack       
 1499 0be4 DFF824C0 	    ldr DP,dstack 
 1500 0be8 4FF0000A 	    mov IN,#0 // BASIC line index 
 1501 0bec 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1502 0bf0 80EA0000 	    eor r0,r0 
 1503 0bf4 6060     	    str r0,[UPP,#COUNT]  
 1504 0bf6 2064     	    str r0,[UPP,#FLAGS]
 1505 0bf8 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1506 0bfa 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1507 0bfe 6064     	    str r0,[UPP,#TAB_WIDTH]
 1508 0c00 4FF00A00 	    mov r0,#10 // default base decimal 
 1509 0c04 A061     	    str r0,[UPP,#BASE]
 1510 0c06 7047     	    _RET  
 1511              	
 1512 0c08 00000000 	mstack: .word _mstack 
 1513 0c0c 00000000 	dstack: .word _dstack 
 1514 0c10 00000000 	tib: .word _tib 
 1515 0c14 00000000 	pad: .word _pad 
 1516 0c18 FCFFFFFF 	array: .word _pad - 4 
ARM GAS  tinyBasic.s 			page 43


 1517 0c1c 0A524541 	ready: .asciz "\nREADY" 
 1517      445900
 1518              	
 1519              	/**********************************
 1520              	    warm_start 
 1521              	    start BASIC interpreter doesn't  
 1522              	    reset variables and code space 
 1523              	  input:
 1524              	    none 
 1525              	  output:
 1526              	    none 
 1527              	**********************************/
 1528 0c23 00       	    _FUNC warm_start 
 1529              	// initialise parameters stack
 1530 0c24 FFF7DEFF 	    bl warm_init
 1531              	// reset main stack 
 1532 0c28 5FF82400 	    ldr r0,mstack
 1533 0c2c 8546     	    mov sp,r0 
 1534 0c2e DFF8AC04 	    ldr r0,=ready 
 1535 0c32 00B5FFF7 	    _CALL uart_puts 
 1535      FEFF5DF8 
 1535      04EB
 1536              	// fall in cmd_line 
 1537              	
 1538              	/**********************************
 1539              	   cmd_line 
 1540              	   shell command line 
 1541              	   input:
 1542              	      none 
 1543              	   output:
 1544              	      none 
 1545              	   use:
 1546              	
 1547              	***********************************/
 1548              	    _FUNC cmd_line 
 1549 0c3c 4FF00D00 	    mov r0,#CR 
 1550 0c40 00B5FFF7 	    _CALL uart_putc 
 1550      FEFF5DF8 
 1550      04EB
 1551 0c4a 5FF83C00 	1:  ldr r0,tib
 1552 0c4e 4FF05001 	    mov r1,#TIB_SIZE 
 1553 0c52 00B5FFF7 	    _CALL readln 
 1553      FEFF5DF8 
 1553      04EB
 1554 0c5c 0940     	    ands r1,r1 // empty line 
 1555 0c5e F4D0     	    beq 1b 
 1556 0c60 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1556      DFFA5DF8 
 1556      04EB
 1557 0c6a EED0     	    beq 1b  // tokens stored in text area 
 1558              	// interpret tokenized line 
 1559              	interpreter:
 1560 0c6c 00B500F0 	  _CALL next_token 
 1560      23F85DF8 
 1560      04EB
 1561 0c76 0028     	  cmp r0,#TK_NONE 
 1562 0c78 F8D0     	  beq interpreter   
ARM GAS  tinyBasic.s 			page 44


 1563 0c7a 0A28     	  cmp r0,#TK_CMD 
 1564 0c7c 03D1     	  bne 2f
 1565 0c7e 0846     	  mov r0,r1 
 1566 0c80 00F014F8 	  bl execute  
 1567 0c84 F2E7     	  b interpreter   
 1568              	2: 
 1569 0c86 0428     	  cmp r0,#TK_VAR 
 1570 0c88 05D1     	  bne 3f 
 1571 0c8a 00B500F0 	  _CALL let_var 
 1571      05FB5DF8 
 1571      04EB
 1572 0c94 EAE7     	  b interpreter 
 1573              	3: 
 1574 0c96 0528     	  cmp r0,#TK_ARRAY 
 1575 0c98 05D1     	  bne 4f
 1576 0c9a 00B500F0 	  _CALL let_array 
 1576      0BFB5DF8 
 1576      04EB
 1577 0ca4 E2E7     	  b interpreter
 1578              	4: 
 1579 0ca6 0128     	  cmp r0,#TK_COLON
 1580 0ca8 E0D0     	  beq interpreter
 1581 0caa FDE5     	  b syntax_error
 1582              	
 1583              	/*****************************
 1584              	    execute 
 1585              	    execute a BASIC routine from 
 1586              	    its token value 
 1587              	  input:
 1588              	    r0  BASIC SUB|FUNC token  
 1589              	  output: 
 1590              	    depend on SUB|FUNc
 1591              	*****************************/
 1592              	    _FUNC execute 
 1593 0cac DFF83014 	    ldr r1,=fn_table 
 1594 0cb0 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1595 0cb4 0047     	    bx r0 
 1596              	
 1597              	/*************************************
 1598              	  next_token 
 1599              	  extract next token from token list 
 1600              	  input:
 1601              	    none 
 1602              	  output:
 1603              	    r0    token attribute
 1604              	    r1    token value if there is one 
 1605              	  use:
 1606              	    T1    exit token type  
 1607              	****************************/
 1608 0cb6 00BF     	    _FUNC next_token 
 1609 0cb8 4DF8048D 	    push {T1}
 1610 0cbc 88EA0808 	    eor T1,T1 // TK_NONE 
 1611 0cc0 6068     	    ldr r0,[UPP,#COUNT]
 1612 0cc2 8245     	    cmp IN,r0 
 1613 0cc4 0FD4     	    bmi 0f
 1614              	new_line:
 1615 0cc6 BBF80010 	    ldrh r1,[BPTR] // line #
ARM GAS  tinyBasic.s 			page 45


 1616 0cca 01B9     	    cbnz r1, end_of_line  // command line
 1617 0ccc AAE7     	    b warm_start
 1618              	end_of_line:        
 1619 0cce 8344     	    add BPTR,r0 // next line 
 1620 0cd0 606B     	    ldr r0,[UPP,#TXTEND]
 1621 0cd2 8345     	    cmp BPTR,r0 
 1622 0cd4 A6D5     	    bpl warm_start // end of program
 1623 0cd6 9BF80200 	    ldrb r0,[BPTR,#2]
 1624 0cda 6060     	    str r0,[UPP,#COUNT] 
 1625 0cdc 4FF0030A 	    mov IN,#3
 1626 0ce0 4FF00100 	    mov r0,#TK_COLON 
 1627 0ce4 2AE0     	    b 9f    
 1628              	0: 
 1629 0ce6 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1630 0cea C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1631 0cee 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1632 0cf2 0AF1010A 	    add IN,#1  
 1633 0cf6 8046     	    mov T1,r0 
 1634 0cf8 00F03F00 	    and r0,#0x3f // limit mask 
 1635 0cfc F949     	    ldr r1,=tok_jmp 
 1636 0cfe D1E800F0 	    tbb [r1,r0]
 1637              	1: // pc reference point 
 1638 0d02 1BE0     	    b 9f 
 1639              	2: // .byte param
 1640 0d04 1BF80A10 	    ldrb r1,[BPTR,IN]
 1641 0d08 0AF1010A 	    add IN,#1 
 1642 0d0c 16E0     	    b 9f 
 1643              	3: // .hword param 
 1644 0d0e 3BF80A10 	    ldrh r1,[BPTR,IN]
 1645 0d12 0AF1020A 	    add IN,#2 
 1646 0d16 11E0     	    b 9f 
 1647              	4: // .word param  
 1648 0d18 5BF80A10 	    ldr r1,[BPTR,IN]
 1649 0d1c 0AF1040A 	    add IN,#4
 1650 0d20 0CE0     	    b 9f 
 1651              	5: // .asciz param 
 1652 0d22 0BEB0A01 	    add r1,BPTR,IN 
 1653 0d26 0846     	    mov r0,r1  
 1654 0d28 00B5FFF7 	    _CALL strlen 
 1654      FEFF5DF8 
 1654      04EB
 1655 0d32 8244     	    add IN,r0
 1656 0d34 0AF1010A 	    add IN,#1
 1657 0d38 00E0     	    b 9f  
 1658              	8: // syntax error 
 1659 0d3a B5E5     	    b syntax_error 
 1660 0d3c 4046     	9:  mov r0,T1  
 1661 0d3e 5DF8048B 	    pop {T1}
 1662 0d42 7047     	    _RET
 1663              	
 1664              	  .p2align 2
 1665              	tok_jmp: // token id  tbb offset 
 1666 0d44 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1667 0d46 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1668 0d4a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1669 0d4e 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1670 0d52 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
ARM GAS  tinyBasic.s 			page 46


 1671 0d56 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1671      1C
 1672 0d5b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1672      1C1C
 1673 0d61 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1674 0d64 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1675 0d67 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1675      1C1C1C1C 
 1676 0d6f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1676      1C1C
 1677 0d75 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1677      1D1D
 1678 0d7b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1678      1C1C1C1C 
 1678      1C
 1679              	
 1680              	  .p2align 2 
 1681              	
 1682              	/*********************************
 1683              	    expect 
 1684              	    check if next token is of 
 1685              	    expected type. If not 
 1686              	    call syntax_error  
 1687              	  input:
 1688              	      r0   token attribute
 1689              	  output:
 1690              	      r0  token attribute 
 1691              	      r1  token value
 1692              	  use:
 1693              	      T1   
 1694              	**********************************/
 1695              	    _FUNC expect 
 1696 0d84 4DF8048D 	    push {T1}
 1697 0d88 8046     	    mov T1,r0 
 1698 0d8a 00B5FFF7 	    _CALL next_token 
 1698      94FF5DF8 
 1698      04EB
 1699 0d94 4045     	    cmp r0,T1  
 1700 0d96 7FF487AD 	    bne syntax_error 
 1701 0d9a 5DF8048B 	    pop {T1}
 1702 0d9e 7047     	    _RET 
 1703              	
 1704              	/***********************************
 1705              	    func_args 
 1706              	    get function arguments list 
 1707              	  input:
 1708              	    none 
 1709              	  output:
 1710              	    r0    arg. count 
 1711              	  use:
 1712              	
 1713              	************************************/
 1714              	    _FUNC func_args 
 1715 0da0 4FF00600 	    mov r0,#TK_LPAREN 
 1716 0da4 00B5FFF7 	    _CALL expect 
 1716      EDFF5DF8 
 1716      04EB
ARM GAS  tinyBasic.s 			page 47


 1717 0dae 00B500F0 	    _CALL arg_list 
 1717      0CF85DF8 
 1717      04EB
 1718 0db8 01B4     	    push {r0}
 1719 0dba 4FF00700 	    mov r0,#TK_RPAREN 
 1720 0dbe 00B5FFF7 	    _CALL expect 
 1720      E0FF5DF8 
 1720      04EB
 1721 0dc8 01BC     	    pop {r0}
 1722 0dca 7047     	    _RET 
 1723              	
 1724              	/**********************************
 1725              	    arg_list 
 1726              	    get arguments list on dstack 
 1727              	  input:
 1728              	    none 
 1729              	  output:
 1730              	    r0    arg count
 1731              	  use:
 1732              	    T1    tmp count  
 1733              	***********************************/
 1734              	    _FUNC arg_list 
 1735 0dcc 4DF8048D 	    push {T1}
 1736 0dd0 88EA0808 	    eor T1,T1 
 1737 0dd4 00B500F0 	1:  _CALL expression 
 1737      C9F85DF8 
 1737      04EB
 1738 0dde 0028     	    cmp R0,#TK_NONE 
 1739 0de0 10D0     	    beq 9f 
 1740 0de2 0E28     	    cmp r0,#TK_INTGR
 1741 0de4 0ED1     	    bne 9f 
 1742 0de6 4CF8041D 	    _PUSH r1 
 1743 0dea 08F10108 	    add T1,#1 
 1744 0dee 00B5FFF7 	    _CALL next_token 
 1744      62FF5DF8 
 1744      04EB
 1745 0df8 0828     	    cmp r0,#TK_COMMA 
 1746 0dfa EBD0     	    beq 1b 
 1747 0dfc D4F800A0 	    _UNGET_TOKEN 
 1747      D4F808B0 
 1748 0e04 4046     	9:  mov r0,T1 
 1749 0e06 5DF8048B 	    pop {T1}
 1750 0e0a 7047     	    _RET 
 1751              	
 1752              	/***********************************
 1753              	 factor
 1754              	 arithmetick factor parser 
 1755              	 factor ::= ['+'|'-'|e]  var | @ |
 1756              				 integer | function |
 1757              				 '('expression')' 
 1758              	  input: 
 1759              	    none 
 1760              	  output:
 1761              	    r0   token attribute 
 1762              	    r1   token value 
 1763              	  use:
 1764              	    r2   temp 
ARM GAS  tinyBasic.s 			page 48


 1765              	    T1   sign 
 1766              	    T2   exit token attribute 
 1767              	***********************************/
 1768              	    _FUNC factor 
 1769 0e0c 2DE90403 	    push {r2,T1,T2}
 1770 0e10 4FF00E09 	    mov T2,#TK_INTGR 
 1771 0e14 4FF00108 	    mov T1,#1 // default sign +  
 1772 0e18 00B5FFF7 	    _CALL next_token
 1772      4DFF5DF8 
 1772      04EB
 1773 0e22 0246     	    mov r2,r0 
 1774 0e24 00F03000 	    and r0,#TK_GRP_MASK 
 1775 0e28 1028     	    cmp r0,#TK_GRP_ADD
 1776 0e2a 1046     	    mov r0,r2
 1777 0e2c 08D1     	    bne 1f 
 1778 0e2e 1028     	    cmp r0,#TK_PLUS 
 1779 0e30 01D0     	    beq 0f 
 1780 0e32 4FF0FF38 	    mov T1,#-1 // minus sign 
 1781 0e36 00B5FFF7 	0:  _CALL next_token
 1781      3EFF5DF8 
 1781      04EB
 1782 0e40 0E28     	1:  cmp r0,#TK_INTGR 
 1783 0e42 4ED0     	    beq 8f 
 1784 0e44 0528     	    cmp r0,#TK_ARRAY 
 1785 0e46 1ED1     	    bne 2f 
 1786 0e48 4FF00600 	    mov r0,#TK_LPAREN 
 1787 0e4c 00B5FFF7 	    _CALL expect 
 1787      99FF5DF8 
 1787      04EB
 1788 0e56 00B500F0 	    _CALL expression
 1788      88F85DF8 
 1788      04EB
 1789 0e60 0E28     	    cmp r0,#TK_INTGR
 1790 0e62 7FF421AD 	    bne syntax_error
 1791 0e66 8146     	    mov T2,r0
 1792 0e68 0A46     	    mov r2,r1  
 1793 0e6a 4FF00700 	    mov r0,#TK_RPAREN
 1794 0e6e 00B5FFF7 	    _CALL expect 
 1794      88FF5DF8 
 1794      04EB
 1795 0e78 1046     	    mov r0,r2 
 1796 0e7a 00B500F0 	    _CALL get_array_element 
 1796      ECF85DF8 
 1796      04EB
 1797 0e84 2DE0     	    b 8f
 1798 0e86 0628     	2:  cmp r0,#TK_LPAREN 
 1799 0e88 12D1     	    bne 3f 
 1800 0e8a 00B500F0 	    _CALL expression 
 1800      6EF85DF8 
 1800      04EB
 1801 0e94 0E28     	    cmp r0,#TK_INTGR 
 1802 0e96 7FF407AD 	    bne syntax_error
 1803 0e9a 8146     	    mov T2,r0
 1804 0e9c 0A46     	    mov r2,r1   
 1805 0e9e 4FF00700 	    mov r0,#TK_RPAREN
 1806 0ea2 00B5FFF7 	    _CALL expect 
 1806      6EFF5DF8 
ARM GAS  tinyBasic.s 			page 49


 1806      04EB
 1807 0eac 1146     	    mov r1,r2 
 1808 0eae 18E0     	    b 8f       
 1809 0eb0 0428     	3:  cmp r0,#TK_VAR 
 1810 0eb2 06D1     	    bne 4f
 1811 0eb4 0846     	    mov r0,r1  
 1812 0eb6 00B500F0 	    _CALL get_var 
 1812      E2F85DF8 
 1812      04EB
 1813 0ec0 0FE0     	    b 8f 
 1814 0ec2 0B28     	4:  cmp r0,#TK_IFUNC 
 1815 0ec4 06D1     	    bne 6f 
 1816 0ec6 0846     	5:  mov r0,r1  
 1817 0ec8 00B5FFF7 	    _CALL execute
 1817      EFFE5DF8 
 1817      04EB
 1818 0ed2 06E0     	    b 8f 
 1819 0ed4 D4F800A0 	6:  _UNGET_TOKEN      
 1819      D4F808B0 
 1820 0edc 4FF00000 	    mov r0,#TK_NONE
 1821 0ee0 03E0     	    b 9f  
 1822 0ee2 08FB01F1 	8:  mul r1,T1 
 1823 0ee6 5FEA0900 	    movs r0,T2 
 1824 0eea BDE80403 	9:  pop {r2,T1,T2}   
 1825 0eee 7047     	    _RET 
 1826              	
 1827              	
 1828              	/*****************************************
 1829              	    term 
 1830              	    term parser 
 1831              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1832              	    output:
 1833              	      r0  	token attribute 
 1834              	      r1		integer
 1835              	    use:
 1836              	      r2    first operand 
 1837              	      r3    temp 
 1838              	      T1    operator 
 1839              	      T2    exit token attribute 
 1840              	******************************************/
 1841              	     _FUNC term 
 1842 0ef0 2DE90C03 	    push {r2,r3,T1,T2}
 1843 0ef4 4FF00009 	    mov T2,#TK_NONE 
 1844 0ef8 00B5FFF7 	    _CALL factor
 1844      87FF5DF8 
 1844      04EB
 1845 0f02 60B3     	    cbz r0, 9f  // no factor   
 1846 0f04 8146     	    mov T2,r0  // TK_INTGR 
 1847 0f06 0A46     	    mov r2,r1 // first factor    
 1848 0f08 00B5FFF7 	0:  _CALL next_token
 1848      D5FE5DF8 
 1848      04EB
 1849 0f12 0346     	    mov r3,r0   
 1850 0f14 00F03000 	    and r0,#TK_GRP_MASK 
 1851 0f18 2028     	    cmp r0,#TK_GRP_MULT
 1852 0f1a 04D0     	    beq 1f
 1853 0f1c D4F800A0 	    _UNGET_TOKEN
ARM GAS  tinyBasic.s 			page 50


 1853      D4F808B0 
 1854 0f24 1BE0     	    b 9f 
 1855 0f26 9846     	1:  mov T1,r3 
 1856 0f28 00B5FFF7 	    _CALL factor  
 1856      6FFF5DF8 
 1856      04EB
 1857 0f32 3FF4B9AC 	    beq syntax_error 
 1858 0f36 B8F1200F 	    cmp T1,#TK_MULT
 1859 0f3a 02D1     	    bne 2f 
 1860              	// multiplication
 1861 0f3c 01FB02F2 	    mul r2,r1
 1862 0f40 E2E7     	    b 0b  
 1863 0f42 B8F1210F 	2:  cmp T1,#TK_DIV 
 1864 0f46 02D1     	    bne 3f
 1865              	// division
 1866 0f48 92FBF1F2 	    sdiv r2,r2,r1
 1867 0f4c DCE7     	    b 0b  
 1868              	3: // modulo
 1869 0f4e 1046     	    mov r0,r2 
 1870 0f50 92FBF1F2 	    sdiv r2,r2,r1 
 1871 0f54 01FB02F2 	    mul  r2,r1 
 1872 0f58 A0EB0202 	    sub  r2,r0,r2
 1873 0f5c D4E7     	    b 0b  
 1874 0f5e 1146     	9:  mov r1,r2 
 1875 0f60 5FEA0900 	    movs r0,T2 
 1876 0f64 BDE80C03 	    pop {r2,r3,T1,T2}
 1877 0f68 7047     	    _RET 
 1878              	
 1879              	/*****************************************
 1880              	    expression 
 1881              	    arithmetic expression parser 
 1882              	    expression ::= term [['+'|'-'] term]*
 1883              	    result range {-32768..32767}
 1884              	    output:
 1885              	      r0    TK_NONE || TK_INTGR 
 1886              	      r1 	  integer
 1887              	    use:
 1888              	      r2  left operand 
 1889              	      T1  operator 
 1890              	      T2  exit token attribute
 1891              	******************************************/
 1892 0f6a 00BF     	    _FUNC expression 
 1893 0f6c 2DE90403 	    push {r2,t1,t2}
 1894 0f70 4FF00009 	    mov T2,#TK_NONE
 1895 0f74 82EA0202 	    eor r2,r2 // zero 
 1896 0f78 00B5FFF7 	    _CALL term 
 1896      B9FF5DF8 
 1896      04EB
 1897 0f82 21D0     	    beq 9f  // no term  
 1898 0f84 0A46     	    mov r2,r1 // first term
 1899 0f86 4FF00E09 	    mov T2,#TK_INTGR    
 1900 0f8a 00B5FFF7 	1:  _CALL next_token 
 1900      94FE5DF8 
 1900      04EB
 1901 0f94 8046     	    mov T1,r0 // token attribute 
 1902 0f96 00F03000 	    and r0,#TK_GRP_MASK 
 1903 0f9a 1028     	    cmp r0,#TK_GRP_ADD 
ARM GAS  tinyBasic.s 			page 51


 1904 0f9c 04D0     	    beq 3f 
 1905 0f9e D4F800A0 	    _UNGET_TOKEN
 1905      D4F808B0 
 1906 0fa6 0FE0     	    b 9f  
 1907 0fa8 00B5FFF7 	3:  _CALL term 
 1907      A1FF5DF8 
 1907      04EB
 1908 0fb2 0E28     	    cmp r0,#TK_INTGR 
 1909 0fb4 7FF478AC 	    bne syntax_error 
 1910 0fb8 B8F1100F 	    cmp T1,#TK_PLUS 
 1911 0fbc 02D0     	    beq 4f 
 1912 0fbe A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1913 0fc2 E2E7     	    b 1b 
 1914 0fc4 0A44     	4:  add r2,r2,r1 // N1+N2
 1915 0fc6 E0E7     	    b 1b
 1916 0fc8 4846     	9:  mov r0,T2 
 1917 0fca 1146     	    mov r1,r2 
 1918 0fcc BDE80403 	    pop {r2,t1,t2}
 1919 0fd0 7047     	    _RET 
 1920              	
 1921              	
 1922              	/**********************************************
 1923              	    relation parser 
 1924              	    rel ::= expr1 rel_op expr2
 1925              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1926              	    relation return  integer , zero is false 
 1927              	    output:
 1928              	        r0	TK_INTGR  
 1929              	        r1	integer 
 1930              	    use:
 1931              	        r2   first operand 
 1932              	        T1   relop   
 1933              	**********************************************/
 1934 0fd2 00BF     	    _FUNC relation 
 1935 0fd4 2DE90401 	    push {r2,T1}
 1936 0fd8 00B5FFF7 	    _CALL expression 
 1936      C7FF5DF8 
 1936      04EB
 1937 0fe2 0E28     	    cmp r0,#TK_INTGR 
 1938 0fe4 7FF460AC 	    bne syntax_error 
 1939 0fe8 0A46     	    mov r2,r1  // first operand  
 1940 0fea 00B5FFF7 	    _CALL next_token 
 1940      64FE5DF8 
 1940      04EB
 1941 0ff4 8046     	    mov T1,r0  // relop  
 1942 0ff6 00F03000 	    and r0,#TK_GRP_MASK 
 1943 0ffa 3028     	    cmp r0,#TK_GRP_RELOP 
 1944 0ffc 1DD1     	    bne 8f  // single operand 
 1945 0ffe 00B5FFF7 	    _CALL expression 
 1945      B4FF5DF8 
 1945      04EB
 1946 1008 0E28     	    cmp r0,#TK_INTGR 
 1947 100a 7FF44DAC 	    bne syntax_error 
 1948 100e 8A42     	    cmp r2,r1 // compare operands  
 1949 1010 4FF0FF31 	    mov r1,#-1 
 1950 1014 344A     	    ldr r2,=relop_jmp
 1951 1016 08F00708 	    and T1,#7 // {1..6}
ARM GAS  tinyBasic.s 			page 52


 1952 101a D2E808F0 	    tbb [r2,T1]    
 1953              	rel_idx0:
 1954              	rel_eq:
 1955 101e 11D0     	    beq 9f 
 1956 1020 08E0     	    b rel_false
 1957              	rel_lt: 
 1958 1022 0FDB     	    blt 9f   
 1959 1024 06E0     	    b rel_false 
 1960              	rel_le:
 1961 1026 0DDD     	    ble 9f  
 1962 1028 04E0     	    b rel_false 
 1963              	rel_gt:
 1964 102a 0BDC     	    bgt 9f  
 1965 102c 02E0     	    b rel_false  
 1966              	rel_ge:
 1967 102e 09DA     	    bge 9f  
 1968 1030 00E0     	    b rel_false  
 1969              	rel_diff:
 1970 1032 07D1     	    bne 9f 
 1971              	rel_false:    
 1972 1034 81EA0101 	    eor r1,r1  // false
 1973 1038 04E0     	    b 9f  
 1974 103a D4F800A0 	8:  _UNGET_TOKEN 
 1974      D4F808B0 
 1975 1042 1146     	    mov r1,r2    
 1976 1044 4FF00E00 	9:  mov r0,#TK_INTGR
 1977 1048 BDE80401 	    pop {r2,T1}
 1978 104c 7047     	    _RET 
 1979              	
 1980              	
 1981              	relop_jmp: 
 1982 104e 00       	  .byte 0 
 1983 104f 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1984 1050 00       	  .byte 0 // =
 1985 1051 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1986 1052 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1987 1053 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1988 1054 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1989              	
 1990              	
 1991              	/***********************************
 1992              	    get_array_element
 1993              	    return value of @(n)
 1994              	  input:
 1995              	    r0    indice 
 1996              	  output:
 1997              	    r0   TK_INTGR
 1998              	    r1   value  
 1999              	************************************/
 2000 1055 0000BF   	    _FUNC get_array_element 
 2001 1058 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2002 105c 4FEA8000 	    lsl r0,#2 
 2003 1060 C0EB0100 	    rsb r0,r1 
 2004 1064 0168     	    ldr r1,[r0]
 2005 1066 4FF00E00 	    mov r0,#TK_INTGR 
 2006 106a 7047     	    _RET 
 2007              	
ARM GAS  tinyBasic.s 			page 53


 2008              	
 2009              	/***********************************
 2010              	    set_array_element 
 2011              	    set value of array element 
 2012              	  input:
 2013              	    r0   index 
 2014              	    r1   new value 
 2015              	  output:
 2016              	    none
 2017              	  use:
 2018              	    r2    array pointer 
 2019              	**********************************/
 2020              	    _FUNC set_array_element 
 2021 106c 04B4     	    push {r2}
 2022 106e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2023 1072 4FEA8000 	    lsl r0,#2 
 2024 1076 A1EB0001 	    sub r1,r0 
 2025 107a 0960     	    str r1,[r1]
 2026 107c 04BC     	    pop {r2}
 2027 107e 7047     	    _RET 
 2028              	
 2029              	/***********************************
 2030              	   get_var 
 2031              	   get variable value 
 2032              	  input:
 2033              	     r0    variable index {0..25}
 2034              	  output:
 2035              	     r0    TK_INTGR
 2036              	     r1    value 
 2037              	**********************************/
 2038              	    _FUNC get_var 
 2039 1080 04F16001 	    add r1,UPP,#VARS
 2040 1084 4FEA8000 	    lsl r0,#2 
 2041 1088 0958     	    ldr r1,[r1,r0]
 2042 108a 4FF00E00 	    mov r0,#TK_INTGR
 2043 108e 7047     	    _RET 
 2044              	
 2045              	/*********************************
 2046              	    set_var 
 2047              	    set variable value 
 2048              	  input:
 2049              	     r0    variable index {0..25}
 2050              	     r1    new value 
 2051              	  output:
 2052              	    none 
 2053              	  use:
 2054              	    r2   vars pointer 
 2055              	*********************************/
 2056              	    _FUNC set_var 
 2057 1090 04B4     	    push {r2}
 2058 1092 04F16002 	    add r2,UPP,#VARS
 2059 1096 4FEA8000 	    lsl r0,#2
 2060 109a 1150     	    str r1,[r2,r0]
 2061 109c 04BC     	    pop {r2}
 2062 109e 7047     	    _RET 
 2063              	
 2064              	/******************************
ARM GAS  tinyBasic.s 			page 54


 2065              	    CONSTANTS data
 2066              	******************************/
 2067              	
 2068              	  .section .rodata 
 2069              	
 2070              	// system variables initial value 
 2071              	uzero:
 2072 0000 00000000 	  .word 0 // IN_SAVED
 2073 0004 00000000 	  .word 0 // COUNT
 2074 0008 00000000 	  .word 0 // BASICPTR
 2075 000c 00000000 	  .word 0 // DATAPTR
 2076 0010 00000000 	  .word 0 // DATA
 2077 0014 00000000 	  .word 0 // DATALEN
 2078 0018 0A000000 	  .word 10 // BASE
 2079 001c 00000000 	  .word 0 // TICKS
 2080 0020 00000000 	  .word 0 // TIMER
 2081 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2082 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2083 002c 00000000 	  .word 0 // FFREE
 2084 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2085 0034 CC000000 	  .word ulast-uzero // TXTEND
 2086 0038 00000000 	  .word 0 //LOOP_DEPTH
 2087 003c 00000000 	  .word 0 // ARRAY_SIZE
 2088 0040 00000000 	  .word 0 // FLAGS
 2089 0044 04000000 	  .word 4 // TAB_WIDTH
 2090 0048 00000000 	  .word 0 // RX_HEAD
 2091 004c 00000000 	  .word 0 // RX_TAIL
 2092 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2092      00000000 
 2092      00000000 
 2092      00000000 
 2093 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2094 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2095              	ulast:
 2096              	
 2097              	  .section .rodata.dictionary 
 2098              	
 2099              	// keep alphabetic order for BASIC names from Z-A
 2100              	// this sort order is for for WORDS cmd output. 	
 2101              	
 2102              		.equ link, 0
 2103              	kword_end:
 2104 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2104      00000000 
 2104      00000000 
 2104      00000000 
 2105 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2105      53000000 
 2105      0A000000 
 2105      5854524D 
 2105      54000000 
 2106 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2106      54000000 
ARM GAS  tinyBasic.s 			page 55


 2106      0A000000 
 2106      58524356 
 2106      00000000 
 2107 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2107      52000000 
 2107      0B000000 
 2107      584F5200 
 2108 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2108      51000000 
 2108      0A000000 
 2108      57524954 
 2108      45000000 
 2109 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2109      50000000 
 2109      0A000000 
 2109      574F5244 
 2109      53000000 
 2110 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2110      4F000000 
 2110      0A000000 
 2110      57414954 
 2110      00000000 
 2111 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2111      4E000000 
 2111      0B000000 
 2111      55535200 
 2112 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2112      4D000000 
 2112      0A000000 
 2112      554E5449 
 2112      4C000000 
 2113 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2113      4C000000 
 2113      0B000000 
 2113      55464C41 
 2113      53480000 
 2114 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2114      4B000000 
 2114      0B000000 
 2114      55424F55 
 2114      4E440000 
 2115 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2115      4A000000 
 2115      0A000000 
 2115      544F4E45 
 2115      00000000 
 2116 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2116      49000000 
 2116      0A000000 
 2116      544F0000 
 2117 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2117      47000000 
 2117      0A000000 
 2117      54494D45 
 2117      52000000 
 2118 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2118      48000000 
ARM GAS  tinyBasic.s 			page 56


 2118      0B000000 
 2118      54494D45 
 2118      4F555400 
 2119 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2119      46000000 
 2119      0B000000 
 2119      5449434B 
 2119      53000000 
 2120 0130 28010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2120      45000000 
 2120      0A000000 
 2120      5448454E 
 2120      00000000 
 2121 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2121      44000000 
 2121      0A000000 
 2121      53544F50 
 2121      00000000 
 2122 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2122      43000000 
 2122      0A000000 
 2122      53544550 
 2122      00000000 
 2123 016c 64010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2123      42000000 
 2123      0A000000 
 2123      53504957 
 2123      52000000 
 2124 0180 78010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2124      41000000 
 2124      0A000000 
 2124      53504953 
 2124      454C0000 
 2125 0194 8C010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2125      3F000000 
 2125      0B000000 
 2125      53504952 
 2125      44000000 
 2126 01a8 A0010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2126      40000000 
 2126      0A000000 
 2126      53504945 
 2126      4E000000 
 2127 01bc B4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2127      3E000000 
 2127      0A000000 
 2127      534C4545 
 2127      50000000 
 2128 01d0 C8010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2128      3D000000 
 2128      0B000000 
 2128      53495A45 
 2128      00000000 
 2129 01e4 DC010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2129      3C000000 
 2129      0A000000 
 2129      53484F57 
ARM GAS  tinyBasic.s 			page 57


 2129      00000000 
 2130 01f8 F0010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2130      3B000000 
 2130      0A000000 
 2130      53415645 
 2130      00000000 
 2131 020c 04020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2131      3A000000 
 2131      0A000000 
 2131      52554E00 
 2132 021c 18020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2132      39000000 
 2132      0B000000 
 2132      52534849 
 2132      46540000 
 2133 0230 28020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2133      38000000 
 2133      0B000000 
 2133      524E4400 
 2134 0240 3C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2134      37000000 
 2134      0A000000 
 2134      52455455 
 2134      524E0000 
 2135 0254 4C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2135      36000000 
 2135      0A000000 
 2135      52455354 
 2135      4F524500 
 2136 0268 60020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2136      35000000 
 2136      0A000000 
 2136      52454D41 
 2136      524B0000 
 2137 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2137      34000000 
 2137      0B000000 
 2137      52454144 
 2137      00000000 
 2138 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2138      33000000 
 2138      0B000000 
 2138      514B4559 
 2138      00000000 
 2139 02a4 9C020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2139      32000000 
 2139      0A000000 
 2139      5052494E 
 2139      54000000 
 2140 02b8 B0020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2140      2F000000 
 2140      0A000000 
 2140      504F4B45 
 2140      38000000 
 2141 02cc C4020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2141      31000000 
 2141      0A000000 
ARM GAS  tinyBasic.s 			page 58


 2141      504F4B45 
 2141      33320000 
 2142 02e0 D8020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2142      30000000 
 2142      0A000000 
 2142      504F4B45 
 2142      31360000 
 2143 02f4 EC020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2143      2B000000 
 2143      0A000000 
 2143      504D4F44 
 2143      45000000 
 2144 0308 00030000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2144      2C000000 
 2144      0B000000 
 2144      5045454B 
 2144      38000000 
 2145 031c 14030000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2145      2E000000 
 2145      0B000000 
 2145      5045454B 
 2145      33320000 
 2146 0330 28030000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2146      2D000000 
 2146      0B000000 
 2146      5045454B 
 2146      31360000 
 2147 0344 3C030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2147      2A000000 
 2147      0A000000 
 2147      50415553 
 2147      45000000 
 2148 0358 50030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2148      29000000 
 2148      0B000000 
 2148      50414400 
 2149 0368 64030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2149      28000000 
 2149      0B000000 
 2149      4F520000 
 2150 0378 74030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2150      27000000 
 2150      0B000000 
 2150      4E4F5400 
 2151 0388 84030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2151      26000000 
 2151      0A000000 
 2151      4E455854 
 2151      00000000 
 2152 039c 94030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2152      25000000 
 2152      0A000000 
 2152      4E455700 
 2153 03ac A8030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2153      24000000 
 2153      0B000000 
 2153      4C534849 
ARM GAS  tinyBasic.s 			page 59


 2153      46540000 
 2154 03c0 B8030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2154      23000000 
 2154      0B000000 
 2154      4C4F4732 
 2154      00000000 
 2155 03d4 CC030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2155      22000000 
 2155      0A000000 
 2155      4C4F4144 
 2155      00000000 
 2156 03e8 E0030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2156      21000000 
 2156      0A000000 
 2156      4C495354 
 2156      00000000 
 2157 03fc F4030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2157      20000000 
 2157      0A000000 
 2157      4C455400 
 2158 040c 08040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2158      1F000000 
 2158      0B000000 
 2158      4B455900 
 2159 041c 18040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2159      1E000000 
 2159      0B000000 
 2159      494E5645 
 2159      52540000 
 2160 0430 28040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2160      1D000000 
 2160      0A000000 
 2160      494E5055 
 2160      54000000 
 2161 0444 3C040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2161      1C000000 
 2161      0A000000 
 2161      49460000 
 2162 0454 50040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2162      1B000000 
 2162      0A000000 
 2162      48455800 
 2163 0464 60040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2163      1A000000 
 2163      0A000000 
 2163      474F544F 
 2163      00000000 
 2164 0478 70040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2164      19000000 
 2164      0A000000 
 2164      474F5355 
 2164      42000000 
 2165 048c 84040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2165      18000000 
 2165      0A000000 
 2165      464F5247 
 2165      45540000 
ARM GAS  tinyBasic.s 			page 60


 2166 04a0 98040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2166      17000000 
 2166      0A000000 
 2166      464F5200 
 2167 04b0 AC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2167      16000000 
 2167      0A000000 
 2167      454E4400 
 2168 04c0 BC040000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2168      15000000 
 2168      0A000000 
 2168      44575249 
 2168      54450000 
 2169 04d4 CC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2169      14000000 
 2169      0A000000 
 2169      44554D50 
 2169      00000000 
 2170 04e8 E0040000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2170      13000000 
 2170      0B000000 
 2170      44524541 
 2170      44000000 
 2171 04fc F4040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2171      12000000 
 2171      0A000000 
 2171      444F0000 
 2172 050c 08050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2172      11000000 
 2172      0A000000 
 2172      44495200 
 2173 051c 18050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2173      10000000 
 2173      0A000000 
 2173      44454300 
 2174 052c 28050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2174      0F000000 
 2174      0A000000 
 2174      44415441 
 2174      4C4E0000 
 2175 0540 38050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2175      0E000000 
 2175      0A000000 
 2175      44415441 
 2175      00000000 
 2176 0554 4C050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2176      0D000000 
 2176      0C000000 
 2176      43484152 
 2176      00000000 
 2177 0568 60050000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2177      0C000000 
 2177      0A000000 
 2177      42594500 
 2178 0578 74050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2178      0B000000 
 2178      0A000000 
ARM GAS  tinyBasic.s 			page 61


 2178      42544F47 
 2178      4C000000 
 2179 058c 84050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2179      0A000000 
 2179      0B000000 
 2179      42544553 
 2179      54000000 
 2180 05a0 98050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2180      09000000 
 2180      0A000000 
 2180      42534554 
 2180      00000000 
 2181 05b4 AC050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2181      08000000 
 2181      0A000000 
 2181      42524553 
 2181      00000000 
 2182 05c8 C0050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2182      07000000 
 2182      0B000000 
 2182      42495400 
 2183 05d8 D4050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2183      06000000 
 2183      0A000000 
 2183      41575500 
 2184 05e8 E4050000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2184      05000000 
 2184      0A000000 
 2184      4155544F 
 2184      52554E00 
 2185 05fc F4050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2185      04000000 
 2185      0B000000 
 2185      41534300 
 2186 060c 08060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2186      03000000 
 2186      0B000000 
 2186      414E4400 
 2187 061c 18060000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2187      02000000 
 2187      0B000000 
 2187      41444352 
 2187      45414400 
 2188 0630 28060000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2188      01000000 
 2188      0A000000 
 2188      4144434F 
 2188      4E000000 
 2189              	first_link: 
 2190 0644 3C060000 	  .word LINK 
 2191 0648 00000000 	  .word ABS_IDX 
 2192 064c 0B000000 	  .word TK_IFUNC
 2193              	kword_dict: // first name field 
 2194              	  .equ LINK,. 
 2195 0650 41425300 	  .asciz "ABS" 
 2196              	  .p2align 2 
 2197              	
ARM GAS  tinyBasic.s 			page 62


 2198              	    .section .rodata.fn_tabld 
 2199              	
 2200              	//comands and fonctions address table 	
 2201              	fn_table:
 2202 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char  
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2204 0038 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,digital_read,dump,digital_write
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2205 0058 00000000 		.word cmd_end,for,forget,gosub,goto 
 2205      00000000 
 2205      00000000 
 2205      00000000 
 2205      00000000 
 2206 006c 00000000 		.word hex_base,if,input_var,invert,key
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2207 0080 00000000 		.word let,list,load,log2,lshift,new,next
 2207      00000000 
 2207      00000000 
 2207      00000000 
 2207      00000000 
 2208 009c 00000000 		.word func_not,bit_or,pad_ref,pause,pin_mode,peek8,peek16,peek32,poke8,poke16
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2209 00c4 00000000 		.word poke32,print
 2209      00000000 
 2210 00cc 00000000 		.word qkey,read,skip_line
 2210      00000000 
 2210      00000000 
 2211 00d8 00000000 		.word restore,return, random,rshift,run,save,show,size 
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2212 00f8 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks
 2212      00000000 
 2212      00000000 
 2212      00000000 
 2212      00000000 
 2213 0118 00000000 		.word then,set_timer,timeout,to,tone,ubound,uflash,until,usr
 2213      00000000 
 2213      00000000 
ARM GAS  tinyBasic.s 			page 63


 2213      00000000 
 2213      00000000 
 2214 013c 00000000 		.word wait,words,write,bit_xor,transmit,receive
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2215 0154 00000000 		.word 0 
 2216              	
 2217              	
 2218              	/**********************************
 2219              	    BASIC commands and functions 
 2220              	**********************************/
 2221              	
 2222              	    .section .text.basic , "ax", %progbits 
 2223              	
 2224              	
 2225              	/*******************************
 2226              	  BASIC:  ABS expr 
 2227              	  input:
 2228              	    none 
 2229              	  output:
 2230              	    r0    token type 
 2231              	    r1    abs(expr)
 2232              	  use:
 2233              	    none 
 2234              	******************************/
 2235              	    _FUNC abs 
 2236 0000 00B5FFF7 	    _CALL arg_list
 2236      FEFF5DF8 
 2236      04EB
 2237 000a 0128     	    cmp r0,#1 
 2238 000c 01D0     	    beq 1f 
 2239 000e FFF7FEBF 	    b syntax_error 
 2240 0012 5CF8041B 	1:  _POP r1 
 2241 0016 11F0004F 	    tst r1,#(1<<31)
 2242 001a 01D0     	    beq 9f
 2243 001c C1F10001 	    rsb r1,#0 
 2244 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2245 0024 7047     	   _RET 
 2246              	
 2247 0026 00BF     	    _FUNC power_adc
 2248 0028 7047     	    _RET
 2249              	
 2250 002a 00BF     	    _FUNC analog_read
 2251 002c 7047     	    _RET
 2252              	
 2253              	/************************************
 2254              	  BASIC: AND(expr1,expr2)
 2255              	  logical ANND bit to between expr1,expr2
 2256              	************************************/
 2257 002e 00BF     	    _FUNC bit_and
 2258 0030 00B5FFF7 	    _CALL func_args 
 2258      FEFF5DF8 
 2258      04EB
 2259 003a 0228     	    cmp r0,#2 
 2260 003c 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 64


 2261 0040 5CF8040B 	    _POP r0 
 2262 0044 5CF8041B 	    _POP r1 
 2263 0048 01EA0001 	    and r1,r0 
 2264 004c 4FF00E00 	    mov r0,#TK_INTGR
 2265 0050 7047     	    _RET
 2266              	
 2267              	/*******************************************
 2268              	  BASIC: ASC(string|char)
 2269              	  return ASCII code of char of first char 
 2270              	  of string 
 2271              	*******************************************/
 2272 0052 00BF     	    _FUNC ascii
 2273 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2274 0058 00B5FFF7 	    _CALL expect 
 2274      FEFF5DF8 
 2274      04EB
 2275 0062 00B5FFF7 	    _CALL next_token 
 2275      FEFF5DF8 
 2275      04EB
 2276 006c 0228     	    cmp r0,#TK_QSTR
 2277 006e 03D0     	    beq 2f 
 2278 0070 0328     	    cmp r0,#TK_CHAR 
 2279 0072 7FF4FEAF 	    bne syntax_error 
 2280 0076 00E0     	    b 9f 
 2281 0078 0978     	2:  ldrb r1,[r1]
 2282 007a 4CF8041D 	9:  _PUSH r1 
 2283 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2284 0082 00B5FFF7 	    _CALL expect 
 2284      FEFF5DF8 
 2284      04EB
 2285 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2286 0090 5CF8041B 	    _POP r1 
 2287 0094 7047     	    _RET
 2288              	
 2289 0096 00BF     	    _FUNC autorun
 2290 0098 7047     	    _RET
 2291              	
 2292 009a 00BF     	    _FUNC awu
 2293 009c 7047     	    _RET
 2294              	
 2295              	/********************************************
 2296              	  BASIC: BIT(expr)
 2297              	  expr must be between 0..31 and is used 
 2298              	  to create 1 bit mask at that position
 2299              	*******************************************/
 2300 009e 00BF     	    _FUNC bitmask
 2301 00a0 00B5FFF7 	    _CALL func_args
 2301      FEFF5DF8 
 2301      04EB
 2302 00aa 0128     	    cmp r0,#1 
 2303 00ac 7FF4FEAF 	    bne syntax_error 
 2304 00b0 5CF8040B 	    _POP r0
 2305 00b4 4FF00101 	    mov r1,#1
 2306 00b8 01FA00F1 	    lsl r1,r0 
 2307 00bc 4FF00E00 	9:  mov r0,#TK_INTGR
 2308 00c0 7047     	    _RET 
 2309              	
ARM GAS  tinyBasic.s 			page 65


 2310              	  
 2311              	  /*********************************
 2312              	   BASIC: BRES adr, mask   
 2313              	   reset bits [adr]= [adr] & ~mask  
 2314              	   input:
 2315              	     none 
 2316              	    output;
 2317              	      none 
 2318              	    use:
 2319              	      T1   temp
 2320              	      T2   temp 
 2321              	*******************************/     
 2322 00c2 00BF     	  _FUNC bit_reset
 2323 00c4 00B5FFF7 	    _CALL arg_list 
 2323      FEFF5DF8 
 2323      04EB
 2324 00ce 0228     	    cmp r0,#2 
 2325 00d0 01D0     	    beq 1f 
 2326 00d2 FFF7FEBF 	    b syntax_error 
 2327 00d6 5CF8041B 	1:  _POP r1 //mask 
 2328 00da 5CF8040B 	    _POP r0 //address 
 2329 00de D0F80090 	    ldr T2,[r0] 
 2330 00e2 81F0FF31 	    eor r1,#-1 // ~mask 
 2331 00e6 01EA0901 	    and r1,T2
 2332 00ea 0160     	    str r1,[r0]
 2333 00ec 7047     	    _RET  
 2334              	
 2335              	
 2336              	/*********************************
 2337              	   BASIC: BSET adr, mask   
 2338              	   reset bits [adr]= [adr] & ~mask  
 2339              	   input:
 2340              	      none 
 2341              	    output;
 2342              	      none 
 2343              	    use:
 2344              	      T1   temp
 2345              	      T2   temp  
 2346              	*******************************/     
 2347 00ee 00BF     	    _FUNC bit_set
 2348 00f0 00B5FFF7 	    _CALL arg_list 
 2348      FEFF5DF8 
 2348      04EB
 2349 00fa 0228     	    cmp r0,#2 
 2350 00fc 01D0     	    beq 1f 
 2351 00fe FFF7FEBF 	    b syntax_error 
 2352 0102 5CF8041B 	1:  _POP r1 //mask 
 2353 0106 5CF8040B 	    _POP r0 //address 
 2354 010a D0F80090 	    ldr T2,[r0] 
 2355 010e 41EA0901 	    orr r1,T2
 2356 0112 0160     	    str r1,[r0]
 2357 0114 7047     	    _RET 
 2358              	
 2359              	  /*********************************
 2360              	   BASIC: BTOGL adr, mask   
 2361              	   reset bits [adr]= [adr] & ~mask  
 2362              	   input:
ARM GAS  tinyBasic.s 			page 66


 2363              	     r0    adr 
 2364              	     r1    mask 
 2365              	    output;
 2366              	      none 
 2367              	    use:
 2368              	      T1   temp
 2369              	      T2   temp  
 2370              	*******************************/     
 2371 0116 00BF     	  _FUNC bit_toggle
 2372 0118 00B5FFF7 	    _CALL arg_list 
 2372      FEFF5DF8 
 2372      04EB
 2373 0122 0228     	    cmp r0,#2 
 2374 0124 01D0     	    beq 1f 
 2375 0126 FFF7FEBF 	    b syntax_error 
 2376 012a 5CF8041B 	1:  _POP r1 //mask 
 2377 012e 5CF8040B 	    _POP r0 //address 
 2378 0132 D0F80090 	    ldr T2,[r0] 
 2379 0136 81EA0901 	    eor r1,T2
 2380 013a 0160     	    str r1,[r0]
 2381 013c 7047     	    _RET  
 2382              	
 2383              	/********************************
 2384              	  BASIC: BTEST(addr,bit)
 2385              	  return bit state at address
 2386              	********************************/
 2387 013e 00BF     	    _FUNC bit_test
 2388 0140 00B5FFF7 	    _CALL func_args
 2388      FEFF5DF8 
 2388      04EB
 2389 014a 0228     	    cmp r0,#2 
 2390 014c 7FF4FEAF 	    bne syntax_error 
 2391 0150 5CF8041B 	    _POP r1
 2392 0154 4FF00100 	    mov r0,#1
 2393 0158 01F01F01 	    and r1,#31  
 2394 015c 21B1     	1:  cbz r1, 2f
 2395 015e 4FEA4000 	    lsl r0,#1
 2396 0162 A1F10101 	    sub r1,#1
 2397 0166 F9E7     	    b 1b 
 2398 0168 5CF8041B 	2:  _POP r1
 2399 016c 0968     	    ldr r1,[r1]
 2400 016e 01EA0001 	    and r1,r0 
 2401 0172 09B1     	    cbz r1,9f 
 2402 0174 4FF00101 	    mov r1,#1
 2403 0178 4FF00E00 	9:  mov r0,#TK_INTGR    
 2404 017c 7047     	    _RET 
 2405              	
 2406 017e 00BF     	    _FUNC bye
 2407 0180 7047     	    _RET 
 2408              	
 2409              	/*********************************
 2410              	  BASIC: CHAR(expr)
 2411              	  convert expr in character 
 2412              	********************************/
 2413 0182 00BF     	    _FUNC char
 2414 0184 00B5FFF7 	    _CALL func_args
 2414      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 67


 2414      04EB
 2415 018e 0128     	    cmp r0,#1
 2416 0190 7FF4FEAF 	    bne syntax_error 
 2417 0194 5CF8041B 	    _POP r1 
 2418 0198 01F07F01 	    and r1,#127 
 2419 019c 4FF00300 	    mov r0,#TK_CHAR
 2420 01a0 7047     	    _RET 
 2421              	
 2422 01a2 00BF     	    _FUNC const_cr2
 2423 01a4 7047     	    _RET  
 2424              	
 2425 01a6 00BF     	    _FUNC const_cr1
 2426 01a8 7047     	    _RET 
 2427              	
 2428              	
 2429              	/**************************
 2430              	  BASIC: DATALN expr 
 2431              	  set data pointer to line#
 2432              	  specified by expr. 
 2433              	  if line# not valid program 
 2434              	  end with error.
 2435              	  use:
 2436              	
 2437              	**************************/
 2438 01aa 00BF     	    _FUNC data_line
 2439 01ac 206C10F0 	    _RTO // run time only 
 2439      010F03D1 
 2439      4FF00700 
 2439      FFF7FEBF 
 2440 01bc 00B5FFF7 	    _CALL expression 
 2440      FEFF5DF8 
 2440      04EB
 2441 01c6 0E28     	    cmp r0,#TK_INTGR
 2442 01c8 7FF4FEAF 	    bne syntax_error
 2443 01cc 0846     	    mov r0,r1 
 2444 01ce 00B5FFF7 	    _CALL search_lineno
 2444      FEFF5DF8 
 2444      04EB
 2445 01d8 0029     	    cmp r1,#0
 2446 01da 03D0     	    beq 1f 
 2447 01dc 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2448 01e0 FFF7FEBF 	    b syntax_error 
 2449 01e4 C178     	1:  ldrb r1,[r0,#3]
 2450 01e6 0A29     	    cmp r1,#TK_CMD 
 2451 01e8 F8D1     	    bne 0b
 2452 01ea 0179     	    ldrb r1,[r0,#4]
 2453 01ec 0E29     	    cmp r1,#DATA_IDX 
 2454 01ee F5D1     	    bne 0b  
 2455 01f0 E060     	    str r0,[UPP,#DATAPTR]
 2456 01f2 8178     	    ldrb r1,[r0,#2]
 2457 01f4 6161     	    str r1,[UPP,#DATALEN]
 2458 01f6 4FF00501 	    mov r1,#5 // position of first data item  
 2459 01fa 2161     	    str r1,[UPP,#DATA]
 2460 01fc 7047     	    _RET 
 2461              	
 2462              	/*****************************
 2463              	  BASIC: READ 
ARM GAS  tinyBasic.s 			page 68


 2464              	  read next data item 
 2465              	  the value can be assigned to
 2466              	  variable or used in expression
 2467              	*****************************/
 2468 01fe 00BF     	    _FUNC read
 2469 0200 206C10F0 	    _RTO
 2469      010F03D1 
 2469      4FF00700 
 2469      FFF7FEBF 
 2470 0210 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2471 0212 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2472 0214 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2473 0216 8242     	    cmp r2,r0
 2474 0218 0ED0     	    beq seek_next
 2475 021a 885C     	1:  ldrb r0,[r1,r2]
 2476 021c 02F10102 	    add r2,#1
 2477 0220 0028     	    cmp r0,#TK_NONE
 2478 0222 09D0     	    beq seek_next
 2479 0224 0828     	    cmp r0,#TK_COMMA
 2480 0226 F8D0     	    beq 1b  
 2481 0228 0E28     	    cmp r0,#TK_INTGR 
 2482 022a 7FF4FEAF 	    bne syntax_error  
 2483 022e 8958     	    ldr r1,[r1,r2]
 2484 0230 02F10402 	    add r2,#4
 2485 0234 2261     	    str r2,[UPP,#DATA]
 2486 0236 12E0     	    b 9f  
 2487              	seek_next: // is next line data ?
 2488 0238 8878     	    ldrb r0,[R1,#2]
 2489 023a 0144     	    add r1,r0 
 2490 023c C878     	    ldrb r0,[R1,#3]
 2491 023e 0A28     	    cmp r0,#TK_CMD
 2492 0240 09D1     	    bne 2f 
 2493 0242 0879     	    ldrb r0,[r1,#4]
 2494 0244 0E28     	    cmp r0,#DATA_IDX 
 2495 0246 06D1     	    bne 2f 
 2496 0248 E160     	    str r1,[UPP,#DATAPTR]
 2497 024a 8878     	    ldrb r0,[r1,#2]
 2498 024c 6061     	    str  r0,[UPP,#DATALEN]
 2499 024e 4FF00502 	    mov r2,#5 
 2500 0252 2261     	    str r2,[UPP,#DATA]
 2501 0254 E1E7     	    b 1b 
 2502 0256 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2503 025a FFF7FEBF 	    b tb_error 
 2504 025e 7047     	9:  _RET 
 2505              	
 2506              	/********************************
 2507              	  BASIC: RESTORE 
 2508              	  seek first data line 
 2509              	********************************/
 2510              	    _FUNC restore
 2511 0260 206C10F0 	    _RTO 
 2511      010F03D1 
 2511      4FF00700 
 2511      FFF7FEBF 
 2512 0270 216B     	    ldr r1,[UPP,#TXTBGN]
 2513 0272 606B     	1:  ldr r0,[UPP,#TXTEND]
 2514 0274 0FD0     	    beq no_data_line 
ARM GAS  tinyBasic.s 			page 69


 2515 0276 0879     	    ldrb r0,[r1,#4]
 2516 0278 0E28     	    cmp r0,#DATA_IDX
 2517 027a 09D1     	    bne try_next_line
 2518 027c C878     	    ldrb r0,[r1,#3]
 2519 027e 0A28     	    cmp r0,#TK_CMD
 2520 0280 06D1     	    bne try_next_line
 2521              	// this a the first data line 
 2522 0282 E160     	    str r1,[UPP,#DATAPTR]
 2523 0284 8878     	    ldrb r0,[r1,#2]
 2524 0286 6061     	    str r0,[UPP,#DATALEN]
 2525 0288 4FF00500 	    mov r0,#5 
 2526 028c 2061     	    str r0,[UPP,#DATA]
 2527 028e 07E0     	    b 9f
 2528              	try_next_line:
 2529 0290 8878     	    ldrb r0,[r1,#2]
 2530 0292 0144     	    add r1,r0 
 2531 0294 EDE7     	    b 1b 
 2532              	no_data_line:
 2533 0296 80EA0000 	    eor r0,r0 
 2534 029a E060     	    str r0,[UPP,#DATAPTR]
 2535 029c 2061     	    str r0,[UPP,#DATA]
 2536 029e 6061     	    str r0,[UPP,#DATALEN]
 2537 02a0 7047     	9:  _RET 
 2538              	
 2539 02a2 00BF     	    _FUNC const_ddr
 2540 02a4 7047     	    _RET 
 2541              	
 2542              	/***********************************
 2543              	  BASIC: DEC 
 2544              	  switch base to decimal 
 2545              	***********************************/
 2546 02a6 00BF     	    _FUNC dec_base
 2547 02a8 4FF00A00 	    mov r0,#10
 2548 02ac A061     	    str r0,[UPP,#BASE]
 2549 02ae 7047     	    _RET 
 2550              	
 2551              	    _FUNC directory
 2552 02b0 7047     	    _RET 
 2553              	
 2554              	/***************************************
 2555              	  BASIC: DO 
 2556              	  initialize a DO..UNTIL loop 
 2557              	***************************************/
 2558 02b2 00BF     	    _FUNC do_loop
 2559 02b4 6068     	    ldr r0,[UPP,#COUNT]
 2560 02b6 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 2561 02ba 7047     	    _RET 
 2562              	
 2563              	    _FUNC digital_read
 2564 02bc 7047     	    _RET 
 2565              	
 2566 02be 00BF     	    _FUNC digital_write
 2567 02c0 7047     	    _RET  
 2568              	
 2569              	
 2570              	/****************************************
 2571              	  BASIC: DUMP adr, count 
ARM GAS  tinyBasic.s 			page 70


 2572              	    command line only  
 2573              	    print memory content in hexadecimal 
 2574              	    16 bytes per row 
 2575              	    ouput:
 2576              	      none 
 2577              	    use:
 2578              	      r2   byte counter  
 2579              	****************************************/
 2580 02c2 00BF     	    _FUNC dump 
 2581 02c4 04B4     	    push {r2}
 2582 02c6 226C     	    ldr r2,[UPP,#FLAGS]
 2583 02c8 12F0010F 	    tst r2,#FRUN 
 2584 02cc 03D0     	    beq 0f
 2585 02ce 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2586 02d2 FFF7FEBF 	    b tb_error  
 2587 02d6 00B5FFF7 	0:  _CALL arg_list 
 2587      FEFF5DF8 
 2587      04EB
 2588 02e0 0228     	    cmp r0,#2
 2589 02e2 7FF4FEAF 	    bne syntax_error 
 2590 02e6 5CF8042B 	    _POP r2   // count 
 2591 02ea 5CF8040B 	    _POP  r0  // adr 
 2592              	dump01:
 2593 02ee 00B500F0 	    _CALL print_dump_header 
 2593      0EF85DF8 
 2593      04EB
 2594 02f8 4FF01001 	1:  mov r1,#16
 2595 02fc 00B5FFF7 	    _CALL prt_row 
 2595      FEFF5DF8 
 2595      04EB
 2596 0306 103A     	    subs r2,#16 
 2597 0308 F6D5     	    bpl 1b 
 2598 030a 04BC     	2:  pop {r2}
 2599 030c 7047     	    _RET 
 2600              	
 2601              	/********************************
 2602              	   print_dump_header
 2603              	********************************/
 2604 030e 00BF     	    _FUNC print_dump_header
 2605 0310 2DE90103 	    push {r0,T1,T2}
 2606 0314 4FF00C00 	    mov r0,#12 
 2607 0318 00B5FFF7 	    _CALL spaces
 2607      FEFF5DF8 
 2607      04EB
 2608 0322 4FF00000 	    mov r0,#0
 2609 0326 4FF01009 	    mov T2,#16
 2610 032a 8046     	1:  mov T1,r0 
 2611 032c 00B5FFF7 	    _CALL print_hex 
 2611      FEFF5DF8 
 2611      04EB
 2612 0336 08F10100 	    add r0,T1,#1  
 2613 033a 4845     	    cmp r0,T2 
 2614 033c F5D4     	    bmi 1b 
 2615 033e 4FF00D00 	    mov r0,#CR 
 2616 0342 00B5FFF7 	    _CALL uart_putc 
 2616      FEFF5DF8 
 2616      04EB
ARM GAS  tinyBasic.s 			page 71


 2617 034c 4FF03D00 	    mov r0,#'='
 2618 0350 4FF04F08 	    mov T1,#79
 2619 0354 00B5FFF7 	2:  _CALL uart_putc
 2619      FEFF5DF8 
 2619      04EB
 2620 035e B8F10108 	    subs T1,#1 
 2621 0362 F7D1     	    bne 2b     
 2622 0364 4FF00D00 	    mov r0,#CR 
 2623 0368 00B5FFF7 	    _CALL uart_putc 
 2623      FEFF5DF8 
 2623      04EB
 2624 0372 BDE80103 	    pop {r0,T1,T2}
 2625 0376 7047     	    _RET 
 2626              	
 2627              	
 2628              	/*******************************
 2629              	  BASIC: END 
 2630              	  exit program 
 2631              	******************************/ 
 2632              	    _FUNC cmd_end
 2633 0378 FFF7FEBF 	    b warm_start 
 2634 037c 7047     	    _RET 
 2635              	
 2636 037e 00BF     	    _FUNC const_eeprom_base
 2637 0380 7047     	    _RET 
 2638              	
 2639 0382 00BF     	    _FUNC fcpu
 2640 0384 7047     	    _RET 
 2641              	
 2642 0386 00BF     	    _FUNC forget
 2643 0388 7047     	    _RET 
 2644              	
 2645              	/**************************************************
 2646              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2647              	  introdure FOR...NEXT loop 
 2648              	**************************************************/
 2649 038a 00BF     	    _FUNC for
 2650 038c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2651 0390 4FF00107 	    mov INCR,#1
 2652 0394 00B5FFF7 	    _CALL next_token
 2652      FEFF5DF8 
 2652      04EB
 2653 039e 0428     	    cmp r0,#TK_VAR
 2654 03a0 7FF4FEAF 	    bne syntax_error
 2655 03a4 02B4     	    push {r1} 
 2656 03a6 00B500F0 	    _CALL let_var 
 2656      31F95DF8 
 2656      04EB
 2657 03b0 20BC     	    pop {VADR}
 2658 03b2 4FEA8505 	    lsl VADR,#2
 2659 03b6 2544     	    add VADR,UPP 
 2660 03b8 05F16005 	    add VADR,#VARS 
 2661 03bc 7047     	    _RET 
 2662              	
 2663              	/***************************************
 2664              	  BASIC: TO expr 
 2665              	  set limit of FOR...NEXT loop 
ARM GAS  tinyBasic.s 			page 72


 2666              	**************************************/
 2667 03be 00BF     	    _FUNC to
 2668 03c0 00B5FFF7 	    _CALL expression 
 2668      FEFF5DF8 
 2668      04EB
 2669 03ca 0E28     	    cmp r0,#TK_INTGR
 2670 03cc 7FF4FEAF 	    bne syntax_error 
 2671 03d0 0E46     	    mov LIMIT,r1
 2672              	    // save loop back parameters 
 2673 03d2 6068     	    ldr r0,[UPP,#COUNT]
 2674 03d4 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2675 03d8 7047     	    _RET 
 2676              	
 2677              	/********************************************
 2678              	  BASIC: STEP expr 
 2679              	  set increment for FOR...NEXT loop 
 2680              	********************************************/
 2681 03da 00BF     	    _FUNC step
 2682 03dc 00B5FFF7 	    _CALL expression 
 2682      FEFF5DF8 
 2682      04EB
 2683 03e6 0E28     	    cmp r0,#TK_INTGR
 2684 03e8 7FF4FEAF 	    bne syntax_error 
 2685 03ec 0F46     	    mov INCR,r1
 2686              	    // replace parameters left by TO
 2687 03ee 6068     	    ldr r0,[UPP,#COUNT]
 2688 03f0 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2689 03f4 7047     	    _RET 
 2690              	
 2691              	/********************************************
 2692              	  BASIC: NEXT var 
 2693              	  incrment FOR...NEXT loop variable
 2694              	  exit if variable cross LIMIT 
 2695              	********************************************/
 2696 03f6 00BF     	    _FUNC next
 2697 03f8 00B5FFF7 	    _CALL next_token 
 2697      FEFF5DF8 
 2697      04EB
 2698 0402 0428     	    cmp r0,#TK_VAR 
 2699 0404 7FF4FEAF 	    bne syntax_error 
 2700 0408 4FEA8101 	    lsl r1,#2 
 2701 040c 2144     	    add r1,UPP 
 2702 040e 01F16001 	    add r1,#VARS 
 2703 0412 A942     	    cmp r1,VADR
 2704 0414 7FF4FEAF 	    bne syntax_error 
 2705 0418 2868     	    ldr r0,[VADR]
 2706 041a 3844     	    add r0,INCR 
 2707 041c 2860     	    str r0,[VADR]
 2708 041e 002F     	    cmp INCR,#0
 2709 0420 02D4     	    bmi 2f
 2710 0422 B042     	    cmp r0,LIMIT 
 2711 0424 02DC     	    bgt 8f  
 2712 0426 07E0     	    b 9f  
 2713 0428 B042     	2:  cmp r0,LIMIT 
 2714 042a 05DA     	    bge 9f  
 2715              	8: // exit for...next
 2716              	  //  drop branch parameters
ARM GAS  tinyBasic.s 			page 73


 2717 042c 4FF00C00 	    _DROP 3
 2717      8444
 2718              	  // restore outer loop parameters
 2719 0432 BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2720 0436 7047     	    _RET 
 2721 0438 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2722 043c 6060     	    str r0,[UPP,#COUNT]
 2723 043e 7047     	    _RET 
 2724              	
 2725              	/*********************************
 2726              	  BASIC: GOSUB expr 
 2727              	  call a subroutine at line# 
 2728              	*********************************/
 2729              	    _FUNC gosub
 2730 0440 00B5FFF7 	    _CALL expression
 2730      FEFF5DF8 
 2730      04EB
 2731 044a 0E28     	    cmp r0,#TK_INTGR 
 2732 044c 7FF4FEAF 	    bne syntax_error 
 2733 0450 0846     	    mov r0,r1 
 2734 0452 00B5FFF7 	    _CALL search_lineno  
 2734      FEFF5DF8 
 2734      04EB
 2735 045c 19B1     	    cbz r1,1f 
 2736 045e 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2737 0462 FFF7FEBF 	    b tb_error 
 2738 0466 6168     	1:  ldr r1,[UPP,#COUNT]
 2739 0468 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2740 046c 8346     	    mov BPTR,r0 
 2741 046e 4FF0030A 	    mov IN,#3 
 2742 0472 9BF80200 	    ldrb r0,[BPTR,#2]
 2743 0476 6060     	    str r0,[UPP,#COUNT]
 2744 0478 7047     	    _RET 
 2745              	
 2746              	/**********************************
 2747              	  BASIC: RETURN 
 2748              	  leave a subroutine 
 2749              	*********************************/
 2750 047a 00BF     	    _FUNC return 
 2751 047c BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2752 0480 6060     	    str r0,[UPP,#COUNT]
 2753 0482 7047     	    _RET 
 2754              	
 2755              	/**********************************
 2756              	  BASIC: GOTO expr 
 2757              	  go to line # 
 2758              	  use:
 2759              	
 2760              	**********************************/
 2761              	    _FUNC goto
 2762 0484 00B5FFF7 	    _CALL expression 
 2762      FEFF5DF8 
 2762      04EB
 2763 048e 0E28     	    cmp r0,#TK_INTGR 
 2764 0490 7FF4FEAF 	    bne syntax_error 
 2765 0494 59B1     	    cbz r1,9f 
 2766 0496 0846     	1:  mov r0,r1 
ARM GAS  tinyBasic.s 			page 74


 2767 0498 00B5FFF7 	    _CALL search_lineno 
 2767      FEFF5DF8 
 2767      04EB
 2768 04a2 19B1     	    cbz r1,2f 
 2769 04a4 4FF00500 	    mov r0,#ERR_NO_LINE 
 2770 04a8 FFF7FEBF 	    b tb_error 
 2771 04ac 8346     	2:  mov BPTR,r0 
 2772 04ae 4FF0030A 	9:  mov IN,#3 
 2773 04b2 7047     	    _RET 
 2774              	
 2775              	    _FUNC gpio
 2776 04b4 7047     	    _RET  
 2777              	
 2778              	/***************************************
 2779              	  BASIC: HEX 
 2780              	  set numeric base to hexadecimal 
 2781              	***************************************/
 2782 04b6 00BF     	    _FUNC hex_base
 2783 04b8 4FF01000 	    mov r0,#16 
 2784 04bc A061     	    str r0,[UPP,#BASE]
 2785 04be 7047     	    _RET 
 2786              	
 2787              	    _FUNC const_idr
 2788 04c0 7047     	    _RET 
 2789              	
 2790              	/**********************************************
 2791              	  BASIC: IF relation THEN statement
 2792              	  execute statement only if relation is true
 2793              	*********************************************/
 2794 04c2 00BF     	    _FUNC if
 2795 04c4 00B5FFF7 	    _CALL relation 
 2795      FEFF5DF8 
 2795      04EB
 2796 04ce 09B9     	    cbnz r1,9f 
 2797 04d0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2798 04d4 7047     	9:  _RET 
 2799              	
 2800              	/*******************************************************
 2801              	  BASIC: THEN statement
 2802              	  following statement are executed if relation is !=0
 2803              	  optional, retained for compatibility.
 2804              	******************************************************/
 2805 04d6 00BF     	    _FUNC then 
 2806              	// do nothing 
 2807 04d8 7047     	    _RET
 2808              	
 2809              	/****************************************
 2810              	  BASIC: INPUT [string]var [,[string]var]+
 2811              	  prompt user for variable value
 2812              	***************************************/
 2813 04da 00BF     	     _FUNC input_var
 2814 04dc 2DE90401 	    push {r2,T1}
 2815 04e0 00B5FFF7 	1:  _CALL next_token 
 2815      FEFF5DF8 
 2815      04EB
 2816 04ea 0228     	    cmp r0,#2
 2817 04ec 5BD4     	    bmi 8f 
ARM GAS  tinyBasic.s 			page 75


 2818 04ee 0228     	    cmp r0,#TK_QSTR 
 2819 04f0 12D1     	    bne 2f 
 2820 04f2 0846     	    mov r0,r1
 2821 04f4 DFF8C010 	    ldr r1,str_buffer
 2822 04f8 00B5FFF7 	    _CALL strcpy
 2822      FEFF5DF8 
 2822      04EB
 2823 0502 4FF00400 	    mov r0,#TK_VAR   
 2824 0506 00B5FFF7 	    _CALL expect 
 2824      FEFF5DF8 
 2824      04EB
 2825 0510 8846     	    mov T1,r1 
 2826 0512 DFF8A400 	    ldr r0,str_buffer 
 2827 0516 08E0     	    b 3f 
 2828 0518 0428     	2:  cmp r0,#TK_VAR 
 2829 051a 7FF4FEAF 	    bne syntax_error     
 2830 051e 8846     	    mov T1,r1 
 2831 0520 01F14100 	    add r0,r1,#'A' 
 2832 0524 2449     	    ldr r1,str_buffer
 2833 0526 0880     	    strh r0,[r1]
 2834 0528 0846     	    mov r0,r1 
 2835 052a 00B5FFF7 	3:  _CALL uart_puts  
 2835      FEFF5DF8 
 2835      04EB
 2836 0534 4FF03D00 	    mov r0,#'='
 2837 0538 00B5FFF7 	    _CALL uart_putc
 2837      FEFF5DF8 
 2837      04EB
 2838 0542 DFF87000 	    ldr r0,input_buffer
 2839 0546 4FF02201 	    mov r1,#34 
 2840 054a 00B5FFF7 	    _CALL readln
 2840      FEFF5DF8 
 2840      04EB
 2841 0554 D1B1     	    cbz r1,6f
 2842 0556 0178     	    ldrb r1,[r0]
 2843 0558 2429     	    cmp r1,#'$'
 2844 055a 04D1     	    bne 3f 
 2845 055c 4FF01001 	    mov r1,#16
 2846 0560 00F10100 	    add r0,#1  
 2847 0564 08E0     	    b 5f 
 2848 0566 2629     	3:  cmp r1,#'&' 
 2849 0568 04D1     	    bne 4f 
 2850 056a 4FF00201 	    mov r1,#2
 2851 056e 00F10100 	    add r0,#1 
 2852 0572 01E0     	    b 5f 
 2853 0574 4FF00A01 	4:  mov r1,#10 
 2854 0578 00B5FFF7 	5:  _CALL atoi 
 2854      FEFF5DF8 
 2854      04EB
 2855 0582 18B9     	    cbnz r0,6f
 2856 0584 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 2857 0588 FFF7FEBF 	    b tb_error
 2858 058c 4046     	6:  mov r0,T1 
 2859 058e 00B5FFF7 	    _CALL set_var
 2859      FEFF5DF8 
 2859      04EB
 2860 0598 00B5FFF7 	    _CALL next_token
ARM GAS  tinyBasic.s 			page 76


 2860      FEFF5DF8 
 2860      04EB
 2861 05a2 0828     	    cmp r0,#TK_COMMA 
 2862 05a4 9CD0     	    beq 1b 
 2863 05a6 D4F800A0 	8:  _UNGET_TOKEN          
 2863      D4F808B0 
 2864 05ae BDE80401 	9:  pop {r2,T1}       
 2865 05b2 7047     	    _RET 
 2866 05b4 00000000 	input_buffer: .word _tib 
 2867 05b8 00000000 	str_buffer: .word _pad 
 2868              	
 2869              	
 2870              	/*****************************************
 2871              	  BASIC: INVERT(expr)
 2872              	  return 1's complement of expr
 2873              	****************************************/
 2874              	    _FUNC invert
 2875 05bc 00B5FFF7 	    _CALL func_args
 2875      FEFF5DF8 
 2875      04EB
 2876 05c6 0128     	    cmp r0,#1 
 2877 05c8 7FF4FEAF 	    bne syntax_error
 2878 05cc 5CF8041B 	    _POP r1  
 2879 05d0 6FEA0101 	    mvn r1,r1
 2880 05d4 4FF00E00 	    mov r0,#TK_INTGR
 2881 05d8 7047     	    _RET 
 2882              	
 2883 05da 00BF     	    _FUNC enable_iwdg
 2884 05dc 7047     	    _RET 
 2885              	
 2886 05de 00BF     	    _FUNC refresh_iwdg
 2887 05e0 7047     	    _RET 
 2888              	
 2889              	/*************************************
 2890              	  BASIC: KEY 
 2891              	  wait for a character from console
 2892              	*************************************/
 2893 05e2 00BF     	    _FUNC key
 2894 05e4 00B5FFF7 	    _CALL uart_getc
 2894      FEFF5DF8 
 2894      04EB
 2895 05ee 0146     	    mov r1,r0
 2896 05f0 4FF00300 	    mov r0,#TK_CHAR 
 2897 05f4 7047     	    _RET  
 2898              	
 2899              	/******************************
 2900              	  BASIC: [let] var=expr 
 2901              	         [let] @(expr)=expr
 2902              	  input:
 2903              	    none 
 2904              	  output:
 2905              	    none 
 2906              	  use:
 2907              	
 2908              	****************************/         
 2909 05f6 00BF     	    _FUNC let
 2910 05f8 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 77


 2910      FEFF5DF8 
 2910      04EB
 2911 0602 0428     	    cmp r0,#TK_VAR
 2912 0604 03D0     	    beq let_var 
 2913 0606 0528     	    cmp r0,#TK_ARRAY 
 2914 0608 07D0     	    beq let_array 
 2915 060a FFF7FEBF 	    b syntax_error 
 2916              	let_var:
 2917 060e 4FEA8101 	    lsl r1,#2
 2918 0612 04F16000 	    add r0,UPP,#VARS
 2919 0616 0844     	    add r0,r1
 2920 0618 1FE0     	    b 1f 
 2921              	let_array: 
 2922 061a 4FF00600 	    mov r0,#TK_LPAREN
 2923 061e 00B5FFF7 	    _CALL expect 
 2923      FEFF5DF8 
 2923      04EB
 2924 0628 00B5FFF7 	    _CALL expression
 2924      FEFF5DF8 
 2924      04EB
 2925 0632 0E28     	    cmp r0,#TK_INTGR 
 2926 0634 7FF4FEAF 	    bne syntax_error
 2927 0638 4CF8041D 	    _PUSH r1 
 2928 063c 4FF00700 	    mov r0,#TK_RPAREN
 2929 0640 00B5FFF7 	    _CALL expect 
 2929      FEFF5DF8 
 2929      04EB
 2930 064a 5CF8041B 	    _POP r1 
 2931 064e D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2932 0652 4FEA8101 	    lsl r1,#2 
 2933 0656 A0EB0100 	    sub r0,r1 
 2934 065a 4CF8040D 	1:  _PUSH r0 
 2935 065e 4FF03200 	    mov r0,#TK_EQUAL 
 2936 0662 00B5FFF7 	    _CALL expect 
 2936      FEFF5DF8 
 2936      04EB
 2937 066c 00B5FFF7 	    _CALL expression   
 2937      FEFF5DF8 
 2937      04EB
 2938 0676 0E28     	    cmp r0,#TK_INTGR
 2939 0678 7FF4FEAF 	    bne syntax_error   
 2940 067c 5CF8040B 	2:  _POP r0 
 2941 0680 0160     	    str r1,[r0]
 2942 0682 7047     	    _RET  
 2943              	
 2944              	/***************************************
 2945              	  BASIC: LIST [[first]-last]
 2946              	  use:
 2947              	    r2   first line# 
 2948              	    r3   last line#
 2949              	    T1   *line 
 2950              	    T2   TXTEND 
 2951              	**************************************/  
 2952              	    _FUNC list
 2953 0684 206C10F0 	    _CLO
 2953      010F03D0 
 2953      4FF00700 
ARM GAS  tinyBasic.s 			page 78


 2953      FFF7FEBF 
 2954 0694 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 2955 0698 D4F83490 	    ldr T2,[UPP,#TXTEND]
 2956 069c B8F80020 	    ldrh r2,[T1]
 2957 06a0 4FF40043 	    mov r3,#32768
 2958 06a4 00B5FFF7 	    _CALL next_token 
 2958      FEFF5DF8 
 2958      04EB
 2959 06ae E8B1     	    cbz r0,6f 
 2960 06b0 0E28     	    cmp r0,#TK_INTGR
 2961 06b2 06D1     	    bne 1f 
 2962 06b4 0A46     	    mov r2,r1 // first line
 2963 06b6 00B5FFF7 	    _CALL next_token
 2963      FEFF5DF8 
 2963      04EB
 2964 06c0 60B1     	    cbz r0,4f
 2965 06c2 1128     	1:  cmp r0,#TK_MINUS 
 2966 06c4 7FF4FEAF 	    bne syntax_error 
 2967 06c8 00B5FFF7 	    _CALL next_token 
 2967      FEFF5DF8 
 2967      04EB
 2968 06d2 18B1     	    cbz r0,4f 
 2969 06d4 0E28     	    cmp r0,#TK_INTGR
 2970 06d6 7FF4FEAF 	    bne syntax_error  
 2971 06da 0B46     	    mov r3,r1 
 2972              	4:  // skip lines below r2 
 2973 06dc B8F80000 	    ldrh r0,[T1]
 2974 06e0 9042     	    cmp r0,r2 
 2975 06e2 03D5     	    bpl 6f 
 2976 06e4 98F80200 	    ldrb r0,[T1,#2]
 2977 06e8 8044     	    add T1,r0
 2978 06ea F7E7     	    b 4b 
 2979 06ec C845     	6:  cmp T1,T2  
 2980 06ee 1AD5     	    bpl 9f
 2981 06f0 4046     	    mov r0,T1   
 2982 06f2 DFF83610 	    ldr r1,out_buff 
 2983 06f6 00B5FFF7 	    _CALL decompile_line 
 2983      FEFF5DF8 
 2983      04EB
 2984 0700 00B5FFF7 	    _CALL uart_puts 
 2984      FEFF5DF8 
 2984      04EB
 2985 070a 4FF00D00 	    mov r0,#CR 
 2986 070e 00B5FFF7 	    _CALL uart_putc 
 2986      FEFF5DF8 
 2986      04EB
 2987 0718 98F80200 	    ldrb r0,[T1,#2]
 2988 071c 8044     	    add T1,r0
 2989 071e 98F80000 	    ldrb r0,[T1]
 2990 0722 9842     	    cmp r0,r3 
 2991 0724 E2DD     	    ble 6b 
 2992 0726 FFF7FEBF 	9:  b warm_start 
 2993 072a 00000000 	out_buff: .word _tib 
 2994              	
 2995 072e 00BF     	    _FUNC load
 2996 0730 7047     	    _RET 
 2997              	
ARM GAS  tinyBasic.s 			page 79


 2998              	/********************************
 2999              	  BASIC: LOG2(expr)
 3000              	  return log base 2 of expr 
 3001              	********************************/
 3002 0732 00BF     	    _FUNC log2
 3003 0734 00B5FFF7 	    _CALL func_args
 3003      FEFF5DF8 
 3003      04EB
 3004 073e 0128     	    cmp r0,#1 
 3005 0740 7FF4FEAF 	    bne syntax_error
 3006 0744 5CF8040B 	    _POP r0 
 3007 0748 B0FA80F1 	    clz r1,r0 
 3008 074c C1F11F01 	    rsb r1,#31
 3009 0750 4FF00E00 	9:  mov r0,#TK_INTGR
 3010 0754 7047     	    _RET 
 3011              	
 3012              	
 3013              	/****************************************
 3014              	  BASIC: LSHIFT(expr1,expr2)
 3015              	  shift right expr1 of expr2 bits 
 3016              	****************************************/
 3017 0756 00BF     	    _FUNC lshift
 3018 0758 00B5FFF7 	    _CALL func_args
 3018      FEFF5DF8 
 3018      04EB
 3019 0762 0228     	    cmp r0,#2
 3020 0764 7FF4FEAF 	    bne syntax_error 
 3021 0768 BCE80300 	    ldmia DP!,{r0,r1}
 3022 076c 01FA00F1 	    lsl r1,r0 
 3023 0770 4FF00E00 	    mov r0,#TK_INTGR
 3024 0774 7047     	    _RET 
 3025              	
 3026              	/***********************************
 3027              	  BASIC: NEW 
 3028              	  delete existing program in memory
 3029              	  and clear variables and RAM 
 3030              	***********************************/
 3031 0776 00BF     	    _FUNC new
 3032 0778 206C10F0 	    _CLO 
 3032      010F03D0 
 3032      4FF00700 
 3032      FFF7FEBF 
 3033 0788 00B5FFF7 	    _CALL clear_basic 
 3033      FEFF5DF8 
 3033      04EB
 3034 0792 FFF7FEBF 	    b warm_start   
 3035              	
 3036              	/************************************
 3037              	  BASIC: NOT relation  
 3038              	  invert logical value or relation
 3039              	************************************/
 3040 0796 00BF     	      _FUNC func_not
 3041 0798 00B5FFF7 	      _CALL relation 
 3041      FEFF5DF8 
 3041      04EB
 3042 07a2 11B1     	      cbz r1,8f 
 3043 07a4 81EA0101 	      eor r1,r1
ARM GAS  tinyBasic.s 			page 80


 3044 07a8 01E0     	      b 9f 
 3045 07aa 4FF0FF31 	  8:  mov r1,#-1
 3046 07ae 7047     	  9:  _RET 
 3047              	
 3048              	    _FUNC const_odr
 3049 07b0 7047     	    _RET 
 3050              	
 3051              	/******************************************
 3052              	  BASIC: OR(expr1,expr2)
 3053              	  binary OR between 2 expressions
 3054              	******************************************/
 3055 07b2 00BF     	    _FUNC bit_or
 3056 07b4 00B5FFF7 	    _CALL func_args
 3056      FEFF5DF8 
 3056      04EB
 3057 07be 0228     	    cmp r0,#2
 3058 07c0 7FF4FEAF 	    bne syntax_error
 3059 07c4 5CF8040B 	    _POP r0 
 3060 07c8 5CF8041B 	    _POP r1
 3061 07cc 41EA0001 	    orr r1,r0 
 3062 07d0 4FF00E00 	    mov r0,#TK_INTGR
 3063 07d4 7047     	    _RET 
 3064              	
 3065              	/****************************************
 3066              	  BASIC: PAD 
 3067              	  return pad buffer address 
 3068              	****************************************/
 3069 07d6 00BF     	    _FUNC pad_ref
 3070 07d8 0149     	    ldr r1,pad_adr  
 3071 07da 4FF00E00 	    mov r0,#TK_INTGR 
 3072 07de 7047     	    _RET 
 3073 07e0 00000000 	pad_adr: .word _pad 
 3074              	
 3075              	/***********************
 3076              	  BASIC: PAUSE expr 
 3077              	  suspend execution for 
 3078              	  expr milliseconds 
 3079              	************************/
 3080              	    _FUNC pause
 3081 07e4 00B5FFF7 	    _CALL expression 
 3081      FEFF5DF8 
 3081      04EB
 3082 07ee 0E28     	    cmp r0,#TK_INTGR 
 3083 07f0 7FF4FEAF 	    bne syntax_error 
 3084 07f4 E069     	    ldr r0,[UPP,#TICKS]
 3085 07f6 0844     	    add r0,r1 
 3086 07f8 E169     	1:  ldr r1,[UPP,#TICKS]
 3087 07fa 8842     	    cmp r0,r1 
 3088 07fc FCD1     	    bne 1b     
 3089 07fe 7047     	    _RET 
 3090              	
 3091              	    _FUNC pin_mode
 3092 0800 7047     	    _RET 
 3093              	
 3094              	/*****************************************
 3095              	  BASIC: PEEK8 (expr)  
 3096              	  return byte value at address 
ARM GAS  tinyBasic.s 			page 81


 3097              	*****************************************/
 3098 0802 00BF     	    _FUNC peek8
 3099 0804 00B5FFF7 	    _CALL func_args  
 3099      FEFF5DF8 
 3099      04EB
 3100 080e 0128     	    cmp r0,#1
 3101 0810 3FF5FEAF 	    bmi syntax_error
 3102 0814 5CF8041B 	    _POP r1 
 3103 0818 0978     	    ldrb r1,[r1]
 3104 081a 4FF00E00 	    mov r0,#TK_INTGR     
 3105 081e 7047     	    _RET 
 3106              	
 3107              	/*****************************************
 3108              	  BASIC: PEEK16 (expr)  
 3109              	  return byte value at address 
 3110              	*****************************************/
 3111              	    _FUNC peek16
 3112 0820 00B5FFF7 	    _CALL func_args  
 3112      FEFF5DF8 
 3112      04EB
 3113 082a 0128     	    cmp r0,#1
 3114 082c 3FF5FEAF 	    bmi syntax_error
 3115 0830 5CF8041B 	    _POP r1 
 3116 0834 0988     	    ldrh r1,[r1]
 3117 0836 4FF00E00 	    mov r0,#TK_INTGR     
 3118 083a 7047     	    _RET 
 3119              	
 3120              	/*****************************************
 3121              	  BASIC: PEEK32 (expr)  
 3122              	  return byte value at address 
 3123              	*****************************************/
 3124              	    _FUNC peek32
 3125 083c 00B5FFF7 	    _CALL func_args  
 3125      FEFF5DF8 
 3125      04EB
 3126 0846 0128     	    cmp r0,#1
 3127 0848 3FF5FEAF 	    bmi syntax_error
 3128 084c 5CF8041B 	    _POP r1 
 3129 0850 0968     	    ldr r1,[r1]
 3130 0852 4FF00E00 	    mov r0,#TK_INTGR     
 3131 0856 7047     	    _RET 
 3132              	
 3133              	
 3134              	/**********************************
 3135              	  BASIC: POKE8 addr,byte
 3136              	  store byte at addr   
 3137              	**********************************/
 3138              	    _FUNC poke8
 3139 0858 00B5FFF7 	    _CALL arg_list
 3139      FEFF5DF8 
 3139      04EB
 3140 0862 0228     	    cmp r0,#2 
 3141 0864 7FF4FEAF 	    bne syntax_error
 3142 0868 BCE80300 	    ldmia DP!,{r0,r1} 
 3143 086c 0870     	    strb r0,[r1]
 3144 086e 7047     	    _RET 
 3145              	
ARM GAS  tinyBasic.s 			page 82


 3146              	/**********************************
 3147              	  BASIC: POKE16 addr,hword
 3148              	  store hword at addr   
 3149              	**********************************/
 3150              	    _FUNC poke16
 3151 0870 00B5FFF7 	    _CALL arg_list
 3151      FEFF5DF8 
 3151      04EB
 3152 087a 0228     	    cmp r0,#2 
 3153 087c 7FF4FEAF 	    bne syntax_error
 3154 0880 BCE80300 	    ldmia DP!,{r0,r1} 
 3155 0884 0880     	    strh r0,[r1]
 3156 0886 7047     	    _RET 
 3157              	
 3158              	/**********************************
 3159              	  BASIC: POKE32 addr,word
 3160              	  store word at addr   
 3161              	**********************************/
 3162              	    _FUNC poke32
 3163 0888 00B5FFF7 	    _CALL arg_list 
 3163      FEFF5DF8 
 3163      04EB
 3164 0892 0228     	    cmp r0,#2 
 3165 0894 7FF4FEAF 	    bne syntax_error
 3166 0898 BCE80300 	    ldmia DP!,{r0,r1} 
 3167 089c 0860     	    str r0,[r1]
 3168 089e 7047     	    _RET 
 3169              	
 3170              	
 3171              	
 3172              	/****************************
 3173              	  BASIC: PRINT|? arg_list 
 3174              	  print list of arguments 
 3175              	****************************/
 3176              	    _FUNC print
 3177 08a0 88EA0808 	    eor T1,T1 
 3178 08a4 00B5FFF7 	0:  _CALL expression
 3178      FEFF5DF8 
 3178      04EB
 3179 08ae 0E28     	    cmp r0,#TK_INTGR
 3180 08b0 07D1     	    bne 1f 
 3181 08b2 0846     	    mov r0,r1
 3182 08b4 A169     	    ldr r1,[UPP,#BASE]
 3183 08b6 00B5FFF7 	    _CALL print_int
 3183      FEFF5DF8 
 3183      04EB
 3184 08c0 3DE0     	    b 8f 
 3185 08c2 00B5FFF7 	1:  _CALL next_token
 3185      FEFF5DF8 
 3185      04EB
 3186 08cc 0128     	    cmp r0,#TK_COLON 
 3187 08ce 04DC     	    bgt 2f
 3188 08d0 D4F800A0 	    _UNGET_TOKEN 
 3188      D4F808B0 
 3189 08d8 41E0     	    b print_exit
 3190 08da 0228     	2:  cmp r0,#TK_QSTR 
 3191 08dc 06D1     	    bne 4f
ARM GAS  tinyBasic.s 			page 83


 3192 08de 0846     	    mov r0,r1 
 3193 08e0 00B5FFF7 	    _CALL uart_puts  
 3193      FEFF5DF8 
 3193      04EB
 3194 08ea 28E0     	    b 8f 
 3195 08ec 0C28     	4:  cmp r0,#TK_CFUNC
 3196 08ee 05D1     	    bne 5f
 3197 08f0 0846     	    mov r0,r1
 3198 08f2 00B5FFF7 	    _CALL execute 
 3198      FEFF5DF8 
 3198      04EB
 3199 08fc 0328     	5:  cmp r0,#TK_CHAR 
 3200 08fe 06D1     	    bne 6f 
 3201 0900 0846     	    mov r0,r1 
 3202 0902 00B5FFF7 	    _CALL uart_putc 
 3202      FEFF5DF8 
 3202      04EB
 3203 090c 17E0     	    b 8f 
 3204 090e 0928     	6:  cmp r0,#TK_SHARP
 3205 0910 04D0     	    beq 6f 
 3206 0912 D4F800A0 	    _UNGET_TOKEN
 3206      D4F808B0 
 3207 091a 20E0     	    b print_exit  
 3208 091c 00B5FFF7 	6:  _CALL next_token
 3208      FEFF5DF8 
 3208      04EB
 3209 0926 0928     	    cmp r0,#TK_SHARP 
 3210 0928 05D1     	    bne 7f
 3211 092a 00B5FFF7 	    _CALL tabulation 
 3211      FEFF5DF8 
 3211      04EB
 3212 0934 03E0     	    b 8f 
 3213 0936 0E28     	7:  cmp r0,#TK_INTGR 
 3214 0938 7FF4FEAF 	    bne syntax_error 
 3215 093c 6164     	    str r1,[UPP,#TAB_WIDTH]
 3216 093e 88EA0808 	8:  eor T1,T1 
 3217 0942 00B5FFF7 	    _CALL next_token 
 3217      FEFF5DF8 
 3217      04EB
 3218 094c 0828     	    cmp r0,#TK_COMMA 
 3219 094e 02D1     	    bne 8f 
 3220 0950 4FF0FF38 	    mov T1,#-1
 3221 0954 A6D0     	    beq 0b
 3222 0956 D4F800A0 	8: _UNGET_TOKEN 
 3222      D4F808B0 
 3223              	print_exit:
 3224 095e 18EA0808 	    ands T1,T1 
 3225 0962 06D1     	    bne 9f
 3226 0964 4FF00D00 	    mov r0,#CR 
 3227 0968 00B5FFF7 	    _CALL uart_putc 
 3227      FEFF5DF8 
 3227      04EB
 3228 0972 7047     	9:  _RET 
 3229              	
 3230              	    _FUNC const_porta
 3231 0974 7047     	    _RET 
 3232              	
ARM GAS  tinyBasic.s 			page 84


 3233 0976 00BF     	    _FUNC const_portb
 3234 0978 7047     	    _RET 
 3235              	
 3236 097a 00BF     	    _FUNC const_portc
 3237 097c 7047     	    _RET 
 3238              	
 3239 097e 00BF     	    _FUNC const_portd
 3240 0980 7047     	    _RET 
 3241              	
 3242 0982 00BF     	    _FUNC const_porte
 3243 0984 7047     	    _RET  
 3244              	
 3245 0986 00BF     	    _FUNC const_portf
 3246 0988 7047     	    _RET 
 3247              	
 3248 098a 00BF     	    _FUNC const_portg
 3249 098c 7047     	    _RET 
 3250              	
 3251 098e 00BF     	    _FUNC const_porth
 3252 0990 7047     	    _RET 
 3253              	
 3254 0992 00BF     	    _FUNC const_porti
 3255 0994 7047     	    _RET 
 3256              	
 3257              	/**************************************
 3258              	  BASIC: QKEY
 3259              	  check if key pressed 
 3260              	**************************************/ 
 3261 0996 00BF     	    _FUNC qkey
 3262 0998 4FF00001 	    mov r1,#0
 3263 099c 00B5FFF7 	    _CALL uart_qkey
 3263      FEFF5DF8 
 3263      04EB
 3264 09a6 01D0     	    beq 9f 
 3265 09a8 4FF0FF31 	    mov r1,#-1 
 3266 09ac 4FF00E00 	9:  mov r0,#TK_INTGR
 3267 09b0 7047     	    _RET 
 3268              	
 3269              	/******************************************
 3270              	  BASIC RANDOM(expr)
 3271              	  generate random number between 0..expr-1
 3272              	******************************************/
 3273 09b2 00BF     	    _FUNC random
 3274 09b4 00B5FFF7 	    _CALL func_args 
 3274      FEFF5DF8 
 3274      04EB
 3275 09be 0128     	    cmp r0,#1
 3276 09c0 7FF4FEAF 	    bne syntax_error 
 3277 09c4 606A     	    ldr r0,[UPP,#SEED]
 3278 09c6 4FEA4031 	    lsl r1,r0,#13
 3279 09ca 81EA0001 	    eor r1,r0
 3280 09ce 4FEA5140 	    lsr r0,r1,#17
 3281 09d2 81EA0001 	    eor r1,r0
 3282 09d6 4FEA4110 	    lsl r0,r1,#5
 3283 09da 81EA0001 	    eor r1,r0
 3284 09de 6162     	    str r1,[UPP,#SEED]
 3285 09e0 5CF8040B 	    _POP r0 
ARM GAS  tinyBasic.s 			page 85


 3286 09e4 B1FBF0F2 	    udiv r2,r1,r0  
 3287 09e8 00FB02F2 	    mul r2,r0 
 3288 09ec A1EB0201 	    sub r1,r2 
 3289 09f0 4FF00E00 	    mov r0,#TK_INTGR
 3290 09f4 7047     	    _RET 
 3291              	
 3292              	/****************************************
 3293              	  BASIC: RSHIFT(expr1,expr2)
 3294              	  shift left expr1 de expr2 bits 
 3295              	****************************************/
 3296 09f6 00BF     	    _FUNC rshift
 3297 09f8 00B5FFF7 	    _CALL func_args
 3297      FEFF5DF8 
 3297      04EB
 3298 0a02 0228     	    cmp r0,#2 
 3299 0a04 7FF4FEAF 	    bne syntax_error
 3300 0a08 BCE80300 	    ldmia DP!,{r0,r1}
 3301 0a0c 21FA00F1 	    lsr r1,r0  
 3302 0a10 4FF00E00 	    mov r0,#TK_INTGR
 3303 0a14 7047     	    _RET 
 3304              	
 3305              	/****************************
 3306              	  BASIC: RUN 
 3307              	  execute program in memory
 3308              	****************************/
 3309 0a16 00BF     	    _FUNC run
 3310 0a18 206C10F0 	    _CLO 
 3310      010F03D0 
 3310      4FF00700 
 3310      FFF7FEBF 
 3311 0a28 206B     	    ldr r0,[UPP,#TXTBGN]
 3312 0a2a 616B     	    ldr r1,[UPP,#TXTEND]
 3313 0a2c 8842     	    cmp r0,r1
 3314 0a2e 0DD0     	    beq 9f 
 3315 0a30 8178     	    ldrb r1,[r0,#2]
 3316 0a32 6160     	    str r1,[UPP,#COUNT]
 3317 0a34 8346     	    mov BPTR,r0 
 3318 0a36 4FF0030A 	    mov IN,#3
 3319              	    // reset dataline pointers 
 3320 0a3a 80EA0000 	    eor r0,r0 
 3321 0a3e E060     	    str r0,[UPP,#DATAPTR]
 3322 0a40 2061     	    str r0,[UPP,#DATA]
 3323 0a42 6061     	    str r0,[UPP,#DATALEN] 
 3324 0a44 206C     	    ldr r0,[UPP,#FLAGS]
 3325 0a46 40F00100 	    orr r0,#FRUN 
 3326 0a4a 2064     	    str r0,[UPP,#FLAGS]
 3327 0a4c 7047     	9:  _RET 
 3328              	
 3329 0a4e 00BF     	    _FUNC save
 3330 0a50 7047     	    _RET 
 3331              	
 3332 0a52 00BF     	    _FUNC show
 3333 0a54 7047     	    _RET 
 3334              	
 3335 0a56 00BF     	    _FUNC size
 3336 0a58 7047     	    _RET  
 3337              	
ARM GAS  tinyBasic.s 			page 86


 3338 0a5a 00BF     	    _FUNC sleep
 3339 0a5c 7047     	    _RET 
 3340              	
 3341 0a5e 00BF     	    _FUNC spi_read
 3342 0a60 7047     	    _RET 
 3343              	
 3344 0a62 00BF     	    _FUNC spi_enable
 3345 0a64 7047     	    _RET 
 3346              	
 3347 0a66 00BF     	    _FUNC spi_select
 3348 0a68 7047     	    _RET 
 3349              	
 3350 0a6a 00BF     	    _FUNC spi_write
 3351 0a6c 7047     	    _RET 
 3352              	
 3353 0a6e 00BF     	    _FUNC stop
 3354 0a70 7047     	    _RET 
 3355              	
 3356              	/**************************
 3357              	  BASIC: TICKS 
 3358              	  return msec counter
 3359              	**************************/  
 3360 0a72 00BF     	    _FUNC get_ticks
 3361 0a74 E169     	    ldr r1,[UPP,#TICKS]
 3362 0a76 4FF00E00 	    mov r0,#TK_INTGR
 3363 0a7a 7047     	    _RET  
 3364              	
 3365              	/*************************
 3366              	  BASIC: TIMER expr 
 3367              	  set countdown timer 
 3368              	************************/
 3369              	    _FUNC set_timer
 3370 0a7c 00B5FFF7 	    _CALL expression 
 3370      FEFF5DF8 
 3370      04EB
 3371 0a86 0E28     	    cmp r0,#TK_INTGR
 3372 0a88 7FF4FEAF 	    bne syntax_error 
 3373 0a8c 2162     	    str r1,[UPP,#TIMER]
 3374 0a8e 7047     	    _RET 
 3375              	
 3376              	/***************************
 3377              	  BASIC: TIMEOUT
 3378              	  check for timer expiration 
 3379              	  return -1 true || 0 false
 3380              	****************************/
 3381              	    _FUNC timeout
 3382 0a90 81EA0101 	    eor r1,r1 
 3383 0a94 206A     	    ldr r0,[UPP,#TIMER]
 3384 0a96 08B9     	    cbnz r0,9f 
 3385 0a98 6FEA0101 	    mvn r1,r1 
 3386 0a9c 4FF00E00 	9:  mov r0,#TK_INTGR    
 3387 0aa0 7047     	    _RET 
 3388              	
 3389 0aa2 00BF     	    _FUNC tone
 3390 0aa4 7047     	    _RET 
 3391              	
 3392              	/***************************
ARM GAS  tinyBasic.s 			page 87


 3393              	  BASIC: UBOUND 
 3394              	  return last indice of @
 3395              	  output:
 3396              	    r0  TK_INTGR 
 3397              	    r1  +int 
 3398              	**************************/
 3399 0aa6 00BF     	    _FUNC ubound
 3400 0aa8 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3401 0aac 606B     	    ldr r0,[UPP,#TXTEND]
 3402 0aae A1EB0001 	    sub r1,r0 
 3403 0ab2 4FEA9101 	    lsr r1,#2
 3404 0ab6 4FF00E00 	    mov r0,#TK_INTGR 
 3405 0aba 7047     	    _RET 
 3406              	
 3407              	    _FUNC uflash
 3408 0abc 7047     	    _RET 
 3409              	
 3410              	/************************************
 3411              	  BASIC: UNTIL relation 
 3412              	  close a DO..UNTIL loop 
 3413              	  loop until relation come true 
 3414              	************************************/
 3415 0abe 00BF     	    _FUNC until
 3416 0ac0 00B5FFF7 	    _CALL relation 
 3416      FEFF5DF8 
 3416      04EB
 3417 0aca 11B1     	    cbz r1,9f
 3418 0acc 0CF10C0C 	    add DP,#12
 3419 0ad0 7047     	    _RET  
 3420 0ad2 9CE8010C 	9:  ldmia DP,{r0,IN,BPTR}
 3421 0ad6 6060     	    str r0,[UPP,#COUNT]
 3422 0ad8 7047     	    _RET 
 3423              	
 3424 0ada 00BF     	    _FUNC usr
 3425 0adc 7047     	    _RET  
 3426              	
 3427 0ade 00BF     	    _FUNC wait
 3428 0ae0 7047     	    _RET 
 3429              	
 3430              	/*********************************************
 3431              	  BASIC: WORDS 
 3432              	  print list of BASIC WORDS in dictionary 
 3433              	  use:
 3434              	    r0,r1,T1,T2  
 3435              	********************************************/
 3436 0ae2 00BF     	    _FUNC words
 3437 0ae4 206C10F0 	    _CLO 
 3437      010F03D0 
 3437      4FF00700 
 3437      FFF7FEBF 
 3438 0af4 DFF80881 	    ldr T1,=kword_dict
 3439 0af8 89EA0909 	    eor T2,T2 
 3440              	1:  
 3441 0afc 4046     	    mov r0,T1
 3442 0afe 00B5FFF7 	    _CALL strlen
 3442      FEFF5DF8 
 3442      04EB
ARM GAS  tinyBasic.s 			page 88


 3443 0b08 F0B1     	    cbz r0,9f 
 3444 0b0a 8144     	    add T2,r0 
 3445 0b0c B9F1500F 	    cmp T2,#80 
 3446 0b10 08D4     	    bmi 2f
 3447 0b12 89EA0909 	    eor T2,T2  
 3448 0b16 4FF00D00 	    mov r0,#CR 
 3449 0b1a 00B5FFF7 	    _CALL uart_putc 
 3449      FEFF5DF8 
 3449      04EB
 3450 0b24 4046     	2:  mov r0,T1 
 3451 0b26 00B5FFF7 	    _CALL uart_puts 
 3451      FEFF5DF8 
 3451      04EB
 3452 0b30 4FF02000 	    mov r0,#SPACE
 3453 0b34 09F10109 	    add T2,#1  
 3454 0b38 00B5FFF7 	    _CALL uart_putc 
 3454      FEFF5DF8 
 3454      04EB
 3455 0b42 58F80C8C 	    ldr T1,[T1,#-12]
 3456 0b46 D9E7     	    b 1b 
 3457 0b48 7047     	9:  _RET 
 3458              	
 3459 0b4a 00BF     	    _FUNC write
 3460 0b4c 7047     	    _RET 
 3461              	
 3462              	/**************************************
 3463              	  BASIC: XOR(expr1,expr2)
 3464              	  binary exclusive or between 2 expressions
 3465              	**************************************/
 3466 0b4e 00BF     	    _FUNC bit_xor
 3467 0b50 00B5FFF7 	    _CALL func_args
 3467      FEFF5DF8 
 3467      04EB
 3468 0b5a 0228     	    cmp r0,#2
 3469 0b5c 7FF4FEAF 	    bne syntax_error
 3470 0b60 5CF8040B 	    _POP r0
 3471 0b64 5CF8041B 	    _POP r1 
 3472 0b68 81EA0001 	    eor r1,r0 
 3473 0b6c 4FF00E00 	    mov r0,#TK_INTGR
 3474 0b70 7047     	    _RET 
 3475              	
 3476 0b72 00BF     	    _FUNC transmit
 3477 0b74 7047     	    _RET 
 3478              	
 3479 0b76 00BF     	    _FUNC receive
 3480 0b78 7047     	    _RET  
 3481              	
 3482              	
 3483              	/*************************************************
 3484              	   extra FLASH memory not used by Tiny BASIC
 3485              	   is used to save BASIC programs.
 3486              	************************************************/
 3487 0b7a 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3487      00800000 
 3487      00000000 
 3487      00000000 
 3487      00000000 
ARM GAS  tinyBasic.s 			page 89


 3488              	  .section .fs
 3489              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 90


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 91


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 92


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 93


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 94


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATA_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATALN_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DREAD_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DWRITE_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 END_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
ARM GAS  tinyBasic.s 			page 95


       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GOSUB_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOTO_IDX
       cmd_index.inc:52     *ABS*:000000000000001b HEX_IDX
       cmd_index.inc:53     *ABS*:000000000000001c IF_IDX
       cmd_index.inc:54     *ABS*:000000000000001d INPUT_IDX
       cmd_index.inc:55     *ABS*:000000000000001e INVERT_IDX
       cmd_index.inc:56     *ABS*:000000000000001f KEY_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LET_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LIST_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LOAD_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LOG2_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LSHIFT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NEW_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NEXT_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NOT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 OR_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 PAD_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PAUSE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PMODE_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK8_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK16_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK32_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PRT_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 QKEY_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 READ_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 REM_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 REST_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 RET_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 RND_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RSHIFT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a RUN_IDX
       cmd_index.inc:84     *ABS*:000000000000003b SAVE_IDX
       cmd_index.inc:85     *ABS*:000000000000003c SHOW_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SIZE_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SLEEP_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SPIRD_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPIEN_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SPISEL_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SPIWR_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STEP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STOP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 THEN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TICKS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TIMER_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TMROUT_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TO_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TONE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UBOUND_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UFLASH_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UNTIL_IDX
       cmd_index.inc:103    *ABS*:000000000000004e USR_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WAIT_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WORDS_IDX
ARM GAS  tinyBasic.s 			page 96


       cmd_index.inc:106    *ABS*:0000000000000051 WRITE_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XOR_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XTRMT_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1515   .text:0000000000000c14 pad
         tinyBasic.s:610    .text:0000000000000450 parse_int
         tinyBasic.s:1170   .text:00000000000008b0 tb_error
         tinyBasic.s:447    .text:00000000000002b8 comp_token
         tinyBasic.s:521    .text:00000000000003a4 store_r0
         tinyBasic.s:704    .text:00000000000004f0 skip
         tinyBasic.s:723    .text:0000000000000508 upper
         tinyBasic.s:555    .text:00000000000003e4 is_special
         tinyBasic.s:577    .text:0000000000000428 token_ofs
         tinyBasic.s:462    .text:00000000000002f8 tok_idx0
         tinyBasic.s:524    .text:00000000000003aa try_number
         tinyBasic.s:466    .text:00000000000002fa single
         tinyBasic.s:572    .text:0000000000000418 tok_single
         tinyBasic.s:470    .text:0000000000000302 lt
         tinyBasic.s:476    .text:0000000000000310 gt
         tinyBasic.s:489    .text:0000000000000334 bkslash
         tinyBasic.s:538    .text:00000000000003de token_exit
         tinyBasic.s:496    .text:000000000000034a prt_cmd
         tinyBasic.s:502    .text:000000000000035c quote
         tinyBasic.s:643    .text:0000000000000488 parse_quote
         tinyBasic.s:507    .text:0000000000000370 tick
         tinyBasic.s:914    .text:0000000000000608 parse_keyword
         tinyBasic.s:569    .text:0000000000000404 char_list
         tinyBasic.s:570    .text:0000000000000404 $d
         tinyBasic.s:578    .text:0000000000000428 $d
         tinyBasic.s:594    .text:000000000000044e $t
         tinyBasic.s:873    .text:00000000000005bc atoi
         tinyBasic.s:674    .text:00000000000004bc get_escaped_char
         tinyBasic.s:691    .text:00000000000004e6 escaped
         tinyBasic.s:691    .text:00000000000004e6 $d
         tinyBasic.s:704    .text:00000000000004ee $t
         tinyBasic.s:741    .text:0000000000000518 is_digit
         tinyBasic.s:765    .text:0000000000000534 is_hex
         tinyBasic.s:790    .text:0000000000000558 is_bit
         tinyBasic.s:811    .text:0000000000000574 is_alpha
ARM GAS  tinyBasic.s 			page 97


         tinyBasic.s:832    .text:000000000000058c is_num
         tinyBasic.s:853    .text:00000000000005a4 is_alnum
         tinyBasic.s:1155   .text:00000000000008a8 syntax_error
         tinyBasic.s:2193   .rodata.dictionary:0000000000000650 kword_dict
         tinyBasic.s:1332   .text:0000000000000a60 search_dict
         tinyBasic.s:965    .text:0000000000000690 cmd_name
         tinyBasic.s:991    .text:00000000000006b4 decompile_line
         tinyBasic.s:1008   .text:00000000000006fa decomp_loop
         tinyBasic.s:1608   .text:0000000000000cb8 next_token
         tinyBasic.s:1112   .text:0000000000000857 single_char
         tinyBasic.s:1108   .text:000000000000084e ge_str
         tinyBasic.s:1109   .text:0000000000000851 le_str
         tinyBasic.s:1110   .text:0000000000000854 ne_str
         tinyBasic.s:1108   .text:000000000000084e $d
         tinyBasic.s:1132   .text:0000000000000890 modulo
         tinyBasic.s:1132   .text:000000000000088e $t
         tinyBasic.s:1212   .text:0000000000000966 compile_error
         tinyBasic.s:1174   .text:00000000000008b8 rt_error
         tinyBasic.s:1229   .text:00000000000009be rt_error_msg
         tinyBasic.s:1234   .text:00000000000009ea err_msg
         tinyBasic.s:1230   .text:00000000000009ce lineno_msg
         tinyBasic.s:1231   .text:00000000000009d5 line_adr_msg
         tinyBasic.s:1232   .text:00000000000009e0 token_at_msg
         tinyBasic.s:2592   .text.basic:00000000000002ee dump01
         tinyBasic.s:1528   .text:0000000000000c24 warm_start
         tinyBasic.s:1229   .text:00000000000009be $d
         tinyBasic.s:1241   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1242   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1243   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1244   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1245   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1246   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1247   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1248   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1249   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1250   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1251   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1252   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1253   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1254   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1255   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1257   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1258   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1259   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1269   .text:0000000000000a2a $t
         tinyBasic.s:1269   .text:0000000000000a2c skip_line
         tinyBasic.s:1286   .text:0000000000000a34 BTGL
         tinyBasic.s:1304   .text:0000000000000a38 kword_cmp
         tinyBasic.s:1370   .text:0000000000000a9e cold_start
         tinyBasic.s:1391   .text:0000000000000aec src_addr
         tinyBasic.s:1393   .text:0000000000000af0 dest_addr
         tinyBasic.s:1514   .text:0000000000000c10 tib
         tinyBasic.s:1395   .text:0000000000000af4 sysvar_size
         tinyBasic.s:1406   .text:0000000000000af8 prt_version
         tinyBasic.s:1463   .text:0000000000000ba0 clear_basic
         tinyBasic.s:1392   .text:0000000000000aec $d
         tinyBasic.s:2071   .rodata:0000000000000000 uzero
ARM GAS  tinyBasic.s 			page 98


         tinyBasic.s:2095   .rodata:00000000000000cc ulast
         tinyBasic.s:1406   .text:0000000000000af8 $t
         tinyBasic.s:1430   .text:0000000000000b60 version_msg
         tinyBasic.s:1432   .text:0000000000000b80 version
         tinyBasic.s:1431   .text:0000000000000b60 $d
         tinyBasic.s:1447   .text:0000000000000b84 clear_vars
         tinyBasic.s:1497   .text:0000000000000be4 warm_init
         tinyBasic.s:1513   .text:0000000000000c0c dstack
         tinyBasic.s:1512   .text:0000000000000c08 mstack
         tinyBasic.s:1512   .text:0000000000000c08 $d
         tinyBasic.s:1516   .text:0000000000000c18 array
         tinyBasic.s:1517   .text:0000000000000c1c ready
         tinyBasic.s:1548   .text:0000000000000c3c cmd_line
         tinyBasic.s:1559   .text:0000000000000c6c interpreter
         tinyBasic.s:1592   .text:0000000000000cac execute
         tinyBasic.s:2916   .text.basic:000000000000060e let_var
         tinyBasic.s:2921   .text.basic:000000000000061a let_array
         tinyBasic.s:2201   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1614   .text:0000000000000cc6 new_line
         tinyBasic.s:1618   .text:0000000000000cce end_of_line
         tinyBasic.s:1665   .text:0000000000000d44 tok_jmp
         tinyBasic.s:1666   .text:0000000000000d44 $d
         tinyBasic.s:1680   .text:0000000000000d84 $t
         tinyBasic.s:1695   .text:0000000000000d84 expect
         tinyBasic.s:1714   .text:0000000000000da0 func_args
         tinyBasic.s:1734   .text:0000000000000dcc arg_list
         tinyBasic.s:1892   .text:0000000000000f6c expression
         tinyBasic.s:1768   .text:0000000000000e0c factor
         tinyBasic.s:2000   .text:0000000000001058 get_array_element
         tinyBasic.s:2038   .text:0000000000001080 get_var
         tinyBasic.s:1841   .text:0000000000000ef0 term
         tinyBasic.s:1934   .text:0000000000000fd4 relation
         tinyBasic.s:1981   .text:000000000000104e relop_jmp
         tinyBasic.s:1953   .text:000000000000101e rel_idx0
         tinyBasic.s:1954   .text:000000000000101e rel_eq
         tinyBasic.s:1971   .text:0000000000001034 rel_false
         tinyBasic.s:1957   .text:0000000000001022 rel_lt
         tinyBasic.s:1960   .text:0000000000001026 rel_le
         tinyBasic.s:1963   .text:000000000000102a rel_gt
         tinyBasic.s:1966   .text:000000000000102e rel_ge
         tinyBasic.s:1969   .text:0000000000001032 rel_diff
         tinyBasic.s:1982   .text:000000000000104e $d
         tinyBasic.s:2020   .text:000000000000106c set_array_element
         tinyBasic.s:2056   .text:0000000000001090 set_var
         tinyBasic.s:3489   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2092   .rodata:0000000000000050 $d
         tinyBasic.s:2102   *ABS*:0000000000000000 link
         tinyBasic.s:2103   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2194   .rodata.dictionary:0000000000000650 LINK
         tinyBasic.s:2104   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2189   .rodata.dictionary:0000000000000644 first_link
         tinyBasic.s:2235   .text.basic:0000000000000000 abs
         tinyBasic.s:2247   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2250   .text.basic:000000000000002c analog_read
         tinyBasic.s:2257   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2272   .text.basic:0000000000000054 ascii
         tinyBasic.s:2289   .text.basic:0000000000000098 autorun
ARM GAS  tinyBasic.s 			page 99


         tinyBasic.s:2292   .text.basic:000000000000009c awu
         tinyBasic.s:2300   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2322   .text.basic:00000000000000c4 bit_reset
         tinyBasic.s:2347   .text.basic:00000000000000f0 bit_set
         tinyBasic.s:2387   .text.basic:0000000000000140 bit_test
         tinyBasic.s:2371   .text.basic:0000000000000118 bit_toggle
         tinyBasic.s:2406   .text.basic:0000000000000180 bye
         tinyBasic.s:2413   .text.basic:0000000000000184 char
         tinyBasic.s:2438   .text.basic:00000000000001ac data_line
         tinyBasic.s:2546   .text.basic:00000000000002a8 dec_base
         tinyBasic.s:2551   .text.basic:00000000000002b0 directory
         tinyBasic.s:2558   .text.basic:00000000000002b4 do_loop
         tinyBasic.s:2563   .text.basic:00000000000002bc digital_read
         tinyBasic.s:2580   .text.basic:00000000000002c4 dump
         tinyBasic.s:2566   .text.basic:00000000000002c0 digital_write
         tinyBasic.s:2632   .text.basic:0000000000000378 cmd_end
         tinyBasic.s:2649   .text.basic:000000000000038c for
         tinyBasic.s:2642   .text.basic:0000000000000388 forget
         tinyBasic.s:2729   .text.basic:0000000000000440 gosub
         tinyBasic.s:2761   .text.basic:0000000000000484 goto
         tinyBasic.s:2782   .text.basic:00000000000004b8 hex_base
         tinyBasic.s:2794   .text.basic:00000000000004c4 if
         tinyBasic.s:2813   .text.basic:00000000000004dc input_var
         tinyBasic.s:2874   .text.basic:00000000000005bc invert
         tinyBasic.s:2893   .text.basic:00000000000005e4 key
         tinyBasic.s:2909   .text.basic:00000000000005f8 let
         tinyBasic.s:2952   .text.basic:0000000000000684 list
         tinyBasic.s:2995   .text.basic:0000000000000730 load
         tinyBasic.s:3002   .text.basic:0000000000000734 log2
         tinyBasic.s:3017   .text.basic:0000000000000758 lshift
         tinyBasic.s:3031   .text.basic:0000000000000778 new
         tinyBasic.s:2696   .text.basic:00000000000003f8 next
         tinyBasic.s:3040   .text.basic:0000000000000798 func_not
         tinyBasic.s:3055   .text.basic:00000000000007b4 bit_or
         tinyBasic.s:3069   .text.basic:00000000000007d8 pad_ref
         tinyBasic.s:3080   .text.basic:00000000000007e4 pause
         tinyBasic.s:3091   .text.basic:0000000000000800 pin_mode
         tinyBasic.s:3098   .text.basic:0000000000000804 peek8
         tinyBasic.s:3111   .text.basic:0000000000000820 peek16
         tinyBasic.s:3124   .text.basic:000000000000083c peek32
         tinyBasic.s:3138   .text.basic:0000000000000858 poke8
         tinyBasic.s:3150   .text.basic:0000000000000870 poke16
         tinyBasic.s:3162   .text.basic:0000000000000888 poke32
         tinyBasic.s:3176   .text.basic:00000000000008a0 print
         tinyBasic.s:3261   .text.basic:0000000000000998 qkey
         tinyBasic.s:2468   .text.basic:0000000000000200 read
         tinyBasic.s:2510   .text.basic:0000000000000260 restore
         tinyBasic.s:2750   .text.basic:000000000000047c return
         tinyBasic.s:3273   .text.basic:00000000000009b4 random
         tinyBasic.s:3296   .text.basic:00000000000009f8 rshift
         tinyBasic.s:3309   .text.basic:0000000000000a18 run
         tinyBasic.s:3329   .text.basic:0000000000000a50 save
         tinyBasic.s:3332   .text.basic:0000000000000a54 show
         tinyBasic.s:3335   .text.basic:0000000000000a58 size
         tinyBasic.s:3338   .text.basic:0000000000000a5c sleep
         tinyBasic.s:3341   .text.basic:0000000000000a60 spi_read
         tinyBasic.s:3344   .text.basic:0000000000000a64 spi_enable
ARM GAS  tinyBasic.s 			page 100


         tinyBasic.s:3347   .text.basic:0000000000000a68 spi_select
         tinyBasic.s:3350   .text.basic:0000000000000a6c spi_write
         tinyBasic.s:2681   .text.basic:00000000000003dc step
         tinyBasic.s:3353   .text.basic:0000000000000a70 stop
         tinyBasic.s:3360   .text.basic:0000000000000a74 get_ticks
         tinyBasic.s:2805   .text.basic:00000000000004d8 then
         tinyBasic.s:3369   .text.basic:0000000000000a7c set_timer
         tinyBasic.s:3381   .text.basic:0000000000000a90 timeout
         tinyBasic.s:2667   .text.basic:00000000000003c0 to
         tinyBasic.s:3389   .text.basic:0000000000000aa4 tone
         tinyBasic.s:3399   .text.basic:0000000000000aa8 ubound
         tinyBasic.s:3407   .text.basic:0000000000000abc uflash
         tinyBasic.s:3415   .text.basic:0000000000000ac0 until
         tinyBasic.s:3424   .text.basic:0000000000000adc usr
         tinyBasic.s:3427   .text.basic:0000000000000ae0 wait
         tinyBasic.s:3436   .text.basic:0000000000000ae4 words
         tinyBasic.s:3459   .text.basic:0000000000000b4c write
         tinyBasic.s:3466   .text.basic:0000000000000b50 bit_xor
         tinyBasic.s:3476   .text.basic:0000000000000b74 transmit
         tinyBasic.s:3479   .text.basic:0000000000000b78 receive
         tinyBasic.s:2235   .text.basic:0000000000000000 $t
         tinyBasic.s:2422   .text.basic:00000000000001a4 const_cr2
         tinyBasic.s:2425   .text.basic:00000000000001a8 const_cr1
         tinyBasic.s:2487   .text.basic:0000000000000238 seek_next
         tinyBasic.s:2532   .text.basic:0000000000000296 no_data_line
         tinyBasic.s:2528   .text.basic:0000000000000290 try_next_line
         tinyBasic.s:2539   .text.basic:00000000000002a4 const_ddr
         tinyBasic.s:2604   .text.basic:0000000000000310 print_dump_header
         tinyBasic.s:2636   .text.basic:0000000000000380 const_eeprom_base
         tinyBasic.s:2639   .text.basic:0000000000000384 fcpu
         tinyBasic.s:2775   .text.basic:00000000000004b4 gpio
         tinyBasic.s:2787   .text.basic:00000000000004c0 const_idr
         tinyBasic.s:2867   .text.basic:00000000000005b8 str_buffer
         tinyBasic.s:2866   .text.basic:00000000000005b4 input_buffer
         tinyBasic.s:2866   .text.basic:00000000000005b4 $d
         tinyBasic.s:2874   .text.basic:00000000000005bc $t
         tinyBasic.s:2883   .text.basic:00000000000005dc enable_iwdg
         tinyBasic.s:2886   .text.basic:00000000000005e0 refresh_iwdg
         tinyBasic.s:2993   .text.basic:000000000000072a out_buff
         tinyBasic.s:2993   .text.basic:000000000000072a $d
         tinyBasic.s:2995   .text.basic:000000000000072e $t
         tinyBasic.s:3048   .text.basic:00000000000007b0 const_odr
         tinyBasic.s:3073   .text.basic:00000000000007e0 pad_adr
         tinyBasic.s:3073   .text.basic:00000000000007e0 $d
         tinyBasic.s:3080   .text.basic:00000000000007e4 $t
         tinyBasic.s:3223   .text.basic:000000000000095e print_exit
         tinyBasic.s:3230   .text.basic:0000000000000974 const_porta
         tinyBasic.s:3233   .text.basic:0000000000000978 const_portb
         tinyBasic.s:3236   .text.basic:000000000000097c const_portc
         tinyBasic.s:3239   .text.basic:0000000000000980 const_portd
         tinyBasic.s:3242   .text.basic:0000000000000984 const_porte
         tinyBasic.s:3245   .text.basic:0000000000000988 const_portf
         tinyBasic.s:3248   .text.basic:000000000000098c const_portg
         tinyBasic.s:3251   .text.basic:0000000000000990 const_porth
         tinyBasic.s:3254   .text.basic:0000000000000994 const_porti
         tinyBasic.s:3489   .text.basic:0000000000000c00 $d
         tinyBasic.s:3489   .text:00000000000010a0 $d
ARM GAS  tinyBasic.s 			page 101


         tinyBasic.s:576    .text:0000000000000425 $d
         tinyBasic.s:576    .text:0000000000000426 $t
         tinyBasic.s:1434   .text:0000000000000b81 $d
         tinyBasic.s:1434   .text:0000000000000b82 $t
         tinyBasic.s:1528   .text:0000000000000c23 $d
         tinyBasic.s:1528   .text:0000000000000c24 $t
         tinyBasic.s:2000   .text:0000000000001055 $d
         tinyBasic.s:2000   .text:0000000000001056 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_getc
uart_qkey
