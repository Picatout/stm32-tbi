ARM GAS  stm32-tbi.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	/*****************************************
  20              	    REGISTERS USAGE 
  21              	
  22              	 R0   ACCA  //  arithmetic operator A 
  23              	 R1   ACCB  //  arithmetic operator B 
  24              	 R2   VPC   //  virtual machine program counter  
  25              	 R3   UPP   //  system variables base address 
  26              	 R4   VPP   //  BASIC variables base address 
  27              	 R5         //  FOR loop counter 
  28              	 R6         //  FOR loop limit 
  29              	 R7         //  FOR loop increment 
  30              	 R8-R11     //  temporary registers saved by caller 
  31              	*****************************************/
  32              	
  33              	  .syntax unified
  34              	  .cpu cortex-m3
  35              	  .fpu softvfp
  36              	  .thumb
  37              	
  38              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
ARM GAS  stm32-tbi.s 			page 2


  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
ARM GAS  stm32-tbi.s 			page 3


  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
ARM GAS  stm32-tbi.s 			page 4


 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  39              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
ARM GAS  stm32-tbi.s 			page 5


  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  40              	  .include "gen_macros.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  stm32-tbi.s 			page 6


  17              	////
  18              	//--------------------------------------
  19              	
  20              	    // reserve space on stack
  21              	    // for local variables
  22              	    .macro _vars n 
  23              	    sub sp,sp,#n 
  24              	    .endm 
  25              	    
  26              	    // free space on stack
  27              	    .macro _drop n 
  28              	    add sp,sp,#n 
  29              	    .endm
  30              	
  31              	    // declare ARG_OFS for arguments 
  32              	    // displacement on stack. This 
  33              	    // value depend on local variables 
  34              	    // size.
  35              	    .macro _argofs n 
  36              	    ARG_OFS=4+n 
  37              	    .endm 
  38              	
  39              	    // declare a function argument 
  40              	    // position relative to stack pointer 
  41              	    // _argofs must be called before it.
  42              	    .macro _arg name ofs 
  43              	    name=ARG_OFS+ofs 
  44              	    .endm 
  41              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	.equ TAB_WIDTH,4 // default tabulation width 
  20              	.equ EOF,0xff // end of file marker 
  21              	// keyword types 
  22              	.equ F_CMD,0x20     // command keyword
  23              	.equ F_IFUNC,0x40 // integer function keyword
  24              	.equ F_CFUNC,0x80 // character function keyword
  25              	.equ F_CONST,0xC0 // function keyword that return a constant
  26              	
  27              	//--------------------------------------
  28              	//   constantes related to Arduino 
ARM GAS  stm32-tbi.s 			page 7


  29              	//   API mapping 
  30              	//-------------------------------------
  31              	.equ INP,0
  32              	.equ OUTP,1 
  33              	
  34              	//--------------------------------------
  35              	//       token attribute
  36              	//--------------------------------------
  37              	// bits 4:5 identify token group 
  38              	// 0x0n -> miscelinous 
  39              	// 0x1n -> +|- operators 
  40              	// 0x2n -> *|/|% operators
  41              	// 0x3n -> relational operators 
  42              	.equ TK_CMD,128      // BASIC command   
  43              	.equ TK_IFUNC,129    // BASIC integer function
  44              	.equ TK_CFUNC,130    // BASIC character function
  45              	.equ TK_CONST,131    // BASIC constant 
  46              	.equ TK_INTGR,132
  47              	.equ TK_VAR,133
  48              	.equ TK_NONE,0       // not a token 
  49              	.equ TK_COLON,1      // command separator ':' 
  50              	.equ TK_QSTR,2     // quoted string  
  51              	.equ TK_CHAR,3       // ASCII character 
  52              	.equ TK_ARRAY,6     // array variable '@' 
  53              	.equ TK_LPAREN,7     // left parenthesis '('
  54              	.equ TK_RPAREN,8     // right parenthesis ')'
  55              	.equ TK_COMMA,9     // item separator ',' 
  56              	.equ TK_SHARP,0xa     // print colon width '#' 
  57              	.equ TK_PLUS,0x10    // addition operator '+'
  58              	.equ TK_MINUS,0x11   // subtraction operator '-'
  59              	.equ TK_MULT,0x20    // multiplication operator '*'
  60              	.equ TK_DIV,0x21     // division operator '/'
  61              	.equ TK_MOD,0x22     // modulo operator '%'
  62              	
  63              	// don't change these token values 
  64              	// values chosen to be used as a mask.
  65              	// bit 7   1 for dictionary words else 0 
  66              	// bits 6  always 0 
  67              	// bits 5:4 identify group 
  68              	// bits 3:0 token identifier inside group  
  69              	.equ TK_GT,0x31      // relation operator '>'
  70              	.equ TK_EQUAL,0x32   // assignment or relation operator ','
  71              	.equ TK_GE,0x33      // relation operator '>,'
  72              	.equ TK_LT,0x34      // relation operator '<'
  73              	.equ TK_LE,0x36      // relation operator '<,'
  74              	.equ TK_NE,0x35      // relation operator '<>' not equal 
  75              	// token groups 
  76              	.equ TK_GRP_MASK,0x30 // groups bits selector 
  77              	.equ TK_GRP_MISC,0x00 // miscelinous group 
  78              	.equ TK_GRP_ADD,0x10  // additive operators
  79              	.equ TK_GRP_MULT,0x20 // multiplicative operators
  80              	.equ TK_GRP_RELOP,0x30 //relational operators. 
  81              	.equ CMD_END,2 
  82              	
  83              	//--------------------------------------
  84              	//   error codes 
  85              	//--------------------------------------
ARM GAS  stm32-tbi.s 			page 8


  86              	.equ ERR_NONE,0
  87              	.equ ERR_MEM_FULL,1 
  88              	.equ ERR_SYNTAX,2
  89              	.equ ERR_MATH_OVF,3
  90              	.equ ERR_DIV0,4 
  91              	.equ ERR_NO_LINE,5
  92              	.equ ERR_RUN_ONLY,6
  93              	.equ ERR_CMD_ONLY,7
  94              	.equ ERR_DUPLICATE,8
  95              	.equ ERR_NOT_FILE,9
  96              	.equ ERR_BAD_VALUE,10
  97              	.equ ERR_NO_ACCESS,11
  98              	.equ ERR_NO_DATA,12 
  99              	.equ ERR_NO_PROG,13
 100              	.equ ERR_NO_FSPACE,14
 101              	.equ ERR_BUF_FULL,15
 102              	
 103              	//--------------------------------------
 104              	//   assembler flags 
 105              	//-------------------------------------
 106              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 107              	
 108              	.equ CELL_SIZE,4 
 109              	
 110              	
 111              	//-------------------------------
 112              	//  macros used to help debugging
 113              	//-------------------------------
 114              	.equ DEBUG,0
 115              	
 116              	/***********************************************
 117              	*       MACROS
 118              	***********************************************/
 119              		.macro _CALL fn /* low level routine call */ 
 120              	 	PUSH {LR}
 121              		BL \fn  
 122              		POP {LR}
 123              		.endm
 124              		
 125              		.macro	_RET /* return from subroutine */
 126              		BX	LR
 127              		.endm
 128              	
 129              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 130              		MOV \REG, #\LITERAL&0xffff
 131              		MOVT \REG, #\LITERAL>>16
 132              		.endm
 133              	
 134              	 	.macro	_DOLIT  value /*long literals */
 135              		BL	DOLIT
 136              		.word \value 
 137              		.endm
 138              	
 139              	  .macro _FUNC label 
 140              	  .p2align 2 
 141              	  .type \label, %function  
 142              	\label:
ARM GAS  stm32-tbi.s 			page 9


 143              	  .endm 
 144              	
 145              	
 146              	/********************************
 147              	    dictionary structure
 148              	------------------------------
 149              	 format:
 150              	   link:    
 151              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 152              	   cmd_name: 31 characters max 
 153              	   cmd_index: 2 bytes 
 154              	**********************************/
 155              		.macro _dict_entry len,name,cmd_idx 
 156              		.p2align 2 
 157              	  .word LINK 
 158              	  .word \cmd_idx 
 159              		.equ LINK,.
 160              		.byte \len 	
 161              		.ascii "\name"
 162              		.p2align 2 
 163              		.endm 
 164              	
  42              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
ARM GAS  stm32-tbi.s 			page 10


  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
ARM GAS  stm32-tbi.s 			page 11


  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  43              	
  44              	/* blue pill specific constants */ 
  45              	  .equ LED_GPIO, GPIOC_BASE_ADR
  46              	  .equ LED_PIN, 13
  47              	  .equ UART, USART1_BASE_ADR 
  48              	
  49              		.equ STACK_SIZE,256
  50              		.equ STACK_EMPTY,RAM_END-1
  51              	  .equ TIB_SIZE,80 
  52              	  .equ PAD_SIZE,80   
  53              	/* flags used by BASIC interpreter */ 
  54              		.equ FRUN,0 // flags run code in variable flags
  55              		.equ FTRAP,1 // inside trap handler 
  56              		.equ FLOOP,2 // FOR loop in preparation 
  57              		.equ FSLEEP,3 // halt produit par la commande SLEEP 
  58              		.equ FBREAK,4 // break point flag 
  59              		.equ FCOMP,5  // compiling flags 
  60              	
  61              		.equ FAUTORUN,6// auto start program running 
  62              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
  63              	  
  64              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
ARM GAS  stm32-tbi.s 			page 12


  65              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
  66              	
  67              		.equ RX_QUEUE_SIZE,16
  68              	
  69              	/***************************
  70              	  SYSTEM variables offset 
  71              	  from UPP  
  72              	***************************/ 
  73              	  .equ IN,0    // low byte of in.w 
  74              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
  75              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
  76              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
  77              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
  78              	  .equ DATA,DATAPTR+4 // index to next data item 
  79              	  .equ DATALEN, DATA+4 // length of data line 
  80              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
  81              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
  82              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
  83              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
  84              	  .equ FSPTR,SEED+4 //  pointer used by file system
  85              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
  86              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
  87              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
  88              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
  89              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
  90              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
  91              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
  92              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
  93              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
  94              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
  95              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
  96              	  .equ CELLL,4 // size of integer 
  97              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
  98              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
  99              	
 100              	
 101              	
 102              	/*************************************
 103              	*   interrupt service vectors table 
 104              	**************************************/
 105              	   .section  .isr_vector,"a",%progbits
 106              	  .type  isr_vectors, %object
 107              	
 108              	isr_vectors:
 109 0000 00000000 	  .word    _mstack          /* main return stack address */
 110 0004 00000000 	  .word    reset_handler    /* startup address */
 111              	/* core interrupts || exceptions */
 112 0008 00000000 	  .word    default_handler  /*  -14 NMI */
 113 000c 00000000 	  .word    default_handler  /*  -13 HardFault */
 114 0010 00000000 	  .word    default_handler  /*  -12 Memory Management */
 115 0014 00000000 	  .word    default_handler  /* -11 Bus fault */
 116 0018 00000000 	  .word    default_handler  /* -10 Usage fault */
 117 001c 00000000 	  .word    0 /* -9 */
 118 0020 00000000 	  .word    0 /* -8 */ 
 119 0024 00000000 	  .word    0 /* -7 */
 120 0028 00000000 	  .word    0	/* -6 */
 121 002c 00000000 	  .word    default_handler  /* -5 SWI instruction */
ARM GAS  stm32-tbi.s 			page 13


 122 0030 00000000 	  .word    default_handler  /* -4 Debug monitor */
 123 0034 00000000 	  .word    0 /* -3 */
 124 0038 00000000 	  .word    default_handler  /* -2 PendSV */
 125 003c 00000000 	  .word    systick_handler  /* -1 Systick */
 126              	 irq0:  
 127              	  /* External Interrupts */
 128 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 129 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 130 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 131 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 132 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 133 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 134 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 135 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 136 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 137 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 138 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 139 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 140 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 141 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 142 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 143 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 144 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 145 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 146 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 147 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 148 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 149 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 150 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 151 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 152 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 153 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 154 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 155 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 156 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 157 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 158 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 159 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 160 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 161 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 162 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 163 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 164 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 165 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 166 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 167 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 168 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 169 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 170 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 171 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 172 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 173 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 174 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 175 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 176 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 177 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 178 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
ARM GAS  stm32-tbi.s 			page 14


 179 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 180 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 181 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 182 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 183 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 184 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 185 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 186 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 187 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 188              	isr_end:
 189              	  .size  isr_vectors, .-isr_vectors
 190              	upp:
 191              	
 192              	/*************************************
 193              	    EXCEPTIONS & INTERRUPTS HANDLERS 
 194              	*************************************/
 195              	
 196              	/*****************************************************
 197              	  default isr handler called on unexpected interrupt
 198              	*****************************************************/
 199              	   .section  .text , "ax", %progbits 
 200              	   
 201              	  .type default_handler, %function
 202              	  .p2align 2 
 203              	  .global default_handler
 204              	default_handler:
 205 0000 0548     		ldr r0,exception_msg 
 206 0002 00B500F0 		_CALL uart_puts 
 206      4EF95DF8 
 206      04EB
 207 000c 4FF40040 	  mov r0,#0x8000
 208 0010 0138     	1: subs r0,#1 
 209 0012 FDD1     	  bne 1b 
 210 0014 35E0     		b reset_mcu    
 211 0016 00BF     	  .p2align 2 
 212              	exception_msg:
 213 0018 1C000000 		.word .+4 
 214 001c 12       		.byte 18
 215 001d 0A657865 		.ascii "\nexeption reboot!\n"
 215      7074696F 
 215      6E207265 
 215      626F6F74 
 215      210A
 216              	
 217              	/*********************************
 218              		system milliseconds counter
 219              	*********************************/	
 220 002f 00       	  .p2align 2 
 221              	  .type systick_handler, %function
 222              	  .global systick_handler
 223              	systick_handler:
 224 0030 186A     	  ldr r0,[r3,#TICKS]  
 225 0032 00F10100 	  add r0,#1
 226 0036 1862     	  str r0,[r3,#TICKS]
 227 0038 586A     	  ldr r0,[r3,#TIMER]
 228 003a 10B1     	  cbz r0, systick_exit
 229 003c A0F10100 	  sub r0,#1
ARM GAS  stm32-tbi.s 			page 15


 230 0040 5862     	  str r0,[r3,#TIMER]
 231              	systick_exit:
 232 0042 7047     	  _RET 
 233              	
 234              	
 235              	/**************************
 236              		UART RX handler
 237              	**************************/
 238              		.p2align 2
 239              		.type uart_rx_handler, %function
 240              	  .global uart_rx_handler 
 241              	uart_rx_handler:
 242 0044 4FF46050 		_MOV32 r0,UART 
 242      C4F20100 
 243 004c 0168     		ldr r1,[r0,#USART_SR]
 244 004e 8288     		ldrh r2,[r0,#USART_DR]
 245 0050 11F0200F 		tst r1,#(1<<5) // RXNE 
 246 0054 0AD0     		beq 2f // no char received 
 247 0056 032A     		cmp r2,#3
 248 0058 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 249 005a 03F15400 		add r0,r3,#RX_QUEUE
 250 005e 196D     	  ldr r1,[r3,#RX_TAIL]
 251 0060 4254     		strb r2,[r0,r1]
 252 0062 01F10101 		add r1,#1 
 253 0066 01F00F01 		and r1,#(RX_QUEUE_SIZE-1)
 254 006a 1965     		str r1,[r3,#RX_TAIL]
 255              	2:	
 256 006c 7047     		_RET 
 257              	
 258              	user_reboot:
 259 006e 0A48     		ldr r0,user_reboot_msg
 260 0070 00B500F0 		_CALL uart_puts
 260      17F95DF8 
 260      04EB
 261              	// delay 
 262 007a 4FF40040 	  mov r0,#0x8000
 263 007e 0138     	1: subs r0,#1  
 264 0080 FDD1     	   bne 1b 
 265              	reset_mcu: 
 266 0082 0448     		ldr r0,scb_adr 
 267 0084 C168     		ldr r1,[r0,#SCB_AIRCR]
 268 0086 41F00401 		orr r1,#(1<<2)
 269 008a C0F2FA51 		movt r1,#SCB_VECTKEY
 270 008e C160     		str r1,[r0,#SCB_AIRCR]
 271 0090 FEE7     		b . 
 272 0092 00BF     		.p2align 2 
 273              	scb_adr:
 274 0094 00ED00E0 		.word SCB_BASE_ADR 
 275              	user_reboot_msg:
 276 0098 9C000000 		.word .+4
 277 009c 0E       		.byte  14 
 278 009d 0A757365 		.ascii "\nuser reboot!\n"
 278      72207265 
 278      626F6F74 
 278      210A
 279 00ab 00       		.p2align 2 
 280              	
ARM GAS  stm32-tbi.s 			page 16


 281              	/**************************************
 282              	  reset_handler execute at MCU reset
 283              	***************************************/
 284              	  .p2align 2
 285              	  .type  reset_handler, %function 
 286              	  .global reset_handler 
 287              	reset_handler:   
 288 00ac 4FF4A040 	  _MOV32 r0,RAM_END 
 288      C2F20000 
 289 00b4 8546     	  mov sp,r0 
 290 00b6 00F05FF8 	  bl remap  
 291 00ba 00F075F8 		bl	init_devices	 	/* RCC, GPIOs */
 292 00be 00F0C3F8 		bl  uart_init
 293 00c2 00F04DF9 		bl  cold_init  /* initialize BASIC SYSTEM */ 
 294 00c6 00F011F8 	  bl  prt_version 
 295 00ca 00F001F8 	  bl  test 
 296 00ce FEE7     	  b .  
 297              	
 298              	    _FUNC test
 299 00d0 0348     	    ldr r0, str1 
 300 00d2 B149     	    ldr r1,=kword_dict  
 301 00d4 00B500F0 	    _CALL search_dict 
 301      27F95DF8 
 301      04EB
 302 00de 7047     	    _RET 
 303              	  str1:
 304 00e0 E4000000 	    .word .+4 
 305 00e4 05       	    .byte 5
 306 00e5 48454C4C 	    .ascii "HELLO" 
 306      4F
 307 00ea 00BF     	    .p2align 2 
 308              	
 309              	    _FUNC prt_version 
 310 00ec DFF86400 	    ldr r0,version_msg 
 311 00f0 00B500F0 	    _CALL uart_puts 
 311      D7F85DF8 
 311      04EB
 312 00fa 9FF87B00 	    ldrb r0,version 
 313 00fe 4FEA1010 	    lsr r0,#4 
 314 0102 00F13000 	    add r0,#'0' 
 315 0106 3A28     	    cmp r0,#'9'+1 
 316 0108 01D4     	    bmi 1f 
 317 010a 00F10700 	    add r0,#7 
 318              	  1:
 319 010e 00B500F0 	    _CALL uart_putc 
 319      BCF85DF8 
 319      04EB
 320 0118 4FF02E00 	    mov r0,#'. 
 321 011c 00B500F0 	    _CALL uart_putc 
 321      B5F85DF8 
 321      04EB
 322 0126 9FF84F00 	    ldrb r0,version 
 323 012a 00F00F00 	    and r0,#15 
 324 012e 00F13000 	    add r0,'0' 
 325 0132 3A28     	    cmp r0,#'9'+1 
 326 0134 01D4     	    bmi 1f 
 327 0136 00F10700 	    add r0,#7
ARM GAS  stm32-tbi.s 			page 17


 328              	  1: 
 329 013a 00B500F0 	    _CALL uart_putc 
 329      A6F85DF8 
 329      04EB
 330 0144 4FF00D00 	    mov r0,#CR 
 331 0148 00B500F0 	    _CALL uart_putc 
 331      9FF85DF8 
 331      04EB
 332 0152 7047     	    _RET  
 333              	version_msg:
 334 0154 58010000 	    .word .+4 
 335 0158 1E       	    .byte 30
 336 0159 626C7565 	    .ascii "blue pill tiny BASIC, version "
 336      2070696C 
 336      6C207469 
 336      6E792042 
 336      41534943 
 337              	version:
 338 0177 10       	    .byte 0x10 
 339              	    .p2align 2 
 340              	
 341              	// tranfert isr_vector to RAM at 0x20000000
 342              	    _FUNC remap 
 343 0178 4FF00000 		_MOV32 r0,RAM_ADR
 343      C2F20000 
 344 0180 81EA0101 		eor r1,r1
 345 0184 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 346 0188 51F8043B 	1:	ldr r3,[r1],#4
 347 018c 40F8043B 		str r3,[r0],#4
 348 0190 043A     		subs r2,#4
 349 0192 F9D1     		bne 1b
 350              	// set new vector table address
 351 0194 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 351      CEF20000 
 352 019c 4FF00001 		_MOV32 r1,RAM_ADR 
 352      C2F20001 
 353 01a4 8160     		str r1,[r0,#SCB_VTOR]
 354 01a6 7047     	  bx lr 
 355              	
 356              	// initialize hardware devices 
 357              	  _FUNC init_devices
 358              	/* init clock to HSE 72 Mhz */
 359              	/* set 2 wait states in FLASH_ACR_LATENCY */
 360 01a8 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 360      C4F20200 
 361 01b0 4FF01202 	  mov r2,#0x12
 362 01b4 0260     	  str r2,[r0,#FLASH_ACR]
 363              	/* configure clock for HSE, 8 Mhz crystal */
 364              	/* enable HSE in RCC_CR */
 365 01b6 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 365      C4F20200 
 366 01be 0168     	  ldr r1,[r0,#RCC_CR]
 367 01c0 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 368 01c4 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 369              	/* wait HSERDY loop */
 370              	wait_hserdy:
 371 01c6 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32-tbi.s 			page 18


 372 01c8 11F4003F 	  tst r1,#(1<<17)
 373 01cc FBD0     	  beq wait_hserdy
 374              	
 375              	/************************************************* 
 376              	   configure PLL mul factor and source 
 377              	   SYSCLOCK,72 Mhz
 378              	   select HSE as  PLL source clock
 379              	   multiply frequency by 9 
 380              	   APB1 clock is limited to 36 Mhz so divide by 2 
 381              	****************************************************/
 382 01ce 4FF48061 	  mov r1,#(4<<8) /* PLLMUL,7|PLLSCR,HSE|PPRE1,HCLK/2| */
 383 01d2 C0F21D01 	  movt r1,#(7<<2)|1
 384 01d6 4160     	  str r1,[r0,#RCC_CFGR]
 385              	  /* enable PLL */
 386 01d8 0168     	  ldr r1,[r0,#RCC_CR]
 387 01da 41F08071 	  orr r1, #1<<24 
 388 01de 0160     	  str r1,[r0,#RCC_CR]
 389              	/* wait for PLLRDY */
 390              	wait_pllrdy:
 391 01e0 0168     	  ldr r1,[r0,#RCC_CR]
 392 01e2 11F0007F 	  tst r1,#(1<<25)
 393 01e6 FBD0     	  beq wait_pllrdy 
 394              	/* select PLL as sysclock */
 395 01e8 4168     	  ldr r1,[r0,#RCC_CFGR]
 396 01ea 4FF6FC72 	  _MOV32 r2,0xfffffffc
 396      CFF6FF72 
 397 01f2 01EA0201 	  and r1,r1,r2 
 398 01f6 4FF00202 	  mov r2,#2
 399 01fa 41EA0201 	  orr r1,r1,r2
 400 01fe 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 401              	/* wait for SWS,,2 */
 402              	wait_sws:
 403 0200 4168     	  ldr r1,[r0,#RCC_CFGR]
 404 0202 11F0080F 	  tst r1,#(2<<2)
 405 0206 FBD0     	  beq wait_sws
 406              	/* now sysclock is 72 Mhz */
 407              	
 408              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 409 0208 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 409      C4F20200 
 410 0210 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 411 0214 8161     	  str	r1, [r0, #RCC_APB2ENR]
 412              	
 413              	/* configure GPIOC:13 as output for user LED */
 414 0216 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 414      C4F20100 
 415 021e 4168     	  ldr r1,[r0,#GPIO_CRH]
 416 0220 6FF47002 	  mvn r2,#(15<<20)
 417 0224 01EA0201 	  and r1,r1,r2
 418 0228 4FF4C002 	  mov r2,#(6<<20)
 419 022c 41EA0201 	  orr r1,r1,r2
 420 0230 4160     	  str r1,[r0,#GPIO_CRH]
 421              	
 422              	/* configure systicks for 1msec ticks */
 423 0232 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 423      CEF20000 
 424 023a 42F22831 	  mov r1,#9000 /* reload value for 1msec */
ARM GAS  stm32-tbi.s 			page 19


 425 023e 4160     	  str r1,[r0,#STK_LOAD]
 426 0240 4FF00301 	  mov r1,#3
 427 0244 0160     	  str r1,[r0,STK_CTL]
 428 0246 7047     	  _RET  
 429              	
 430              	/*******************************
 431              	  initialize UART peripheral 
 432              	********************************/
 433              		_FUNC uart_init
 434              	/* set GPIOA PIN 9, uart TX  */
 435 0248 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 435      C4F20100 
 436 0250 4168     	  ldr r1,[r0,#GPIO_CRH]
 437 0252 6FF0F002 	  mvn r2,#(15<<4)
 438 0256 01EA0201 	  and r1,r1,r2
 439 025a 4FF0A002 	  mov r2,#(0xA<<4)
 440 025e 41EA0201 	  orr r1,r1,r2 
 441 0262 4160     	  str r1,[r0,#GPIO_CRH]
 442 0264 4FF46050 	  _MOV32 r0,UART 
 442      C4F20100 
 443              	/* BAUD rate */
 444 026c 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200,39,0625, quotient,39, reste,0,0625*16,1 */
 445 0270 8160     	  str r1,[r0,#USART_BRR]
 446 0272 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 447 0276 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 448              	/* enable interrupt in NVIC */
 449 0278 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 449      CEF20000 
 450 0280 4168     	  ldr r1,[r0,#NVIC_ISER1]
 451 0282 41F02001 	  orr r1,#32   
 452 0286 4160     	  str r1,[r0,#NVIC_ISER1]
 453 0288 7047     	  bx lr 
 454              	
 455              	/****************************
 456              	    UART_PUTC
 457              	  send character to uart
 458              	  input: 
 459              	    R0 character to send 
 460              	  use:
 461              	    R8 status  
 462              	    R9 UART address
 463              	*****************************/
 464 028a 00BF     	  _FUNC uart_putc
 465 028c 4FF46059 	  _MOV32 R9,UART
 465      C4F20109 
 466              	1: 
 467 0294 D9F80080 	  ldr r8,[r9,#USART_SR]
 468 0298 18F08008 	  ands r8,#0x80
 469 029c FAD0     	  beq 1b // UART_DR full,wait  
 470 029e 89F80400 	  strb r0,[r9,#USART_DR]
 471 02a2 7047     	  _RET  
 472              	
 473              	
 474              	/*******************************
 475              	    UART_PUTS 
 476              	 send counted string to uart 
 477              	 input: r0 *string to send 
ARM GAS  stm32-tbi.s 			page 20


 478              	  use:  
 479              	    r0 char to send 
 480              	    r10 counter
 481              	    r11 *string  
 482              	******************************/
 483              		_FUNC uart_puts
 484 02a4 8346     	  mov r11,r0 
 485 02a6 1BF801AB 		ldrb r10,[r11],#1 // string length
 486 02aa 1AEA0A0A 		ands r10,r10
 487 02ae 09D0     		beq 9f // len==0 
 488              	1:
 489 02b0 5BF8010B 	  ldr r0,[r11],#1 
 490 02b4 00B5FFF7 	  _CALL uart_putc   
 490      E9FF5DF8 
 490      04EB
 491 02be BAF1010A 	  subs r10,r10,#1 
 492 02c2 F5D1     	  bne 1b 
 493              	9: 
 494 02c4 7047     	  _RET  
 495              	
 496              	/**********************************
 497              	  UART_QKEY
 498              	  check if character available in 
 499              	  rx1_qeue
 500              	  input:
 501              	    none
 502              	  output:
 503              	    r0 flag = RX_HEAD^REX_TAIL 
 504              	  use:
 505              	    r8  RX_HEAD  
 506              	    r9  RX_TAIL   
 507              	***********************************/
 508 02c6 00BF     	  _FUNC uart_qkey
 509 02c8 D3F84C80 	  ldr r8,[r3,#RX_HEAD]
 510 02cc D3F85090 	  ldr r9,[r3,#RX_TAIL]
 511 02d0 88EA0900 	  eor r0,r8,r9 
 512 02d4 7047     	  _RET 
 513              	
 514              	/**********************************
 515              	  UART_GETC 
 516              	  wait a character from uart 
 517              	  input:
 518              	    none
 519              	  output:
 520              	    r0  character 
 521              	  use:
 522              	    r8  rx_queue 
 523              	    r9  rx_head  
 524              	**********************************/
 525 02d6 00BF     	  _FUNC uart_getc
 526              	1:
 527 02d8 00B5FFF7 	  _CALL uart_qkey 
 527      F5FF5DF8 
 527      04EB
 528 02e2 0043     	  orrs r0,r0
 529 02e4 F8D0     	  beq 1b  
 530 02e6 03F15408 	  add r8,r3,#RX_QUEUE
ARM GAS  stm32-tbi.s 			page 21


 531 02ea D3F84C90 	  ldr r9, [r3,#RX_HEAD]
 532 02ee 18F80900 	  ldrb r0,[r8,r9]
 533 02f2 09F10109 	  add r9,#1
 534 02f6 09F00F09 	  and r9,#(RX_QUEUE_SIZE-1)
 535 02fa C3F84C90 	  str r9,[r3,#RX_HEAD]
 536 02fe 7047     	  _RET  
 537              	
 538              	/*************************************
 539              	  readln 
 540              	  read a line of text from terminal
 541              	  input:
 542              	    r0  *buffer
 543              	    r1  buffer size 
 544              	  output:
 545              	    r0  text length 
 546              	    buffer contain text 
 547              	  use:
 548              	
 549              	*************************************/
 550              	  _FUNC readln
 551              	
 552 0300 7047     	  _RET 
 553              	
 554              	
 555              	/*********************************
 556              	  cp_cstr 
 557              	  compare 2 counted strings 
 558              	  input:
 559              	    r0  *str1 
 560              	    r1  *str2
 561              	    r8  length 
 562              	  output:
 563              	    r0  <0 str1<str2 
 564              	        0  str1==str2 
 565              	        >0  str1>str2  
 566              	  use:
 567              	    r9  *str1
 568              	    r10 temp
 569              	    r11 temp    
 570              	*********************************/
 571 0302 00BF     	  _FUNC cp_cstr
 572 0304 8146     	  mov r9, r0 
 573 0306 19F801AB 	  ldrb r10,[r9],#1 // length 
 574 030a B8EB0A00 	  subs r0,r8,r10 
 575 030e 09D1     	  bne 2f 
 576              	1:
 577 0310 19F801AB 	  ldrb r10,[r9],#1
 578 0314 11F801BB 	  ldrb r11,[r1],#1 
 579 0318 BAEB0B00 	  subs r0,r10,r11  
 580 031c 02D1     	  bne 2f // not same length       
 581 031e B8F10108 	  subs r8,#1 
 582 0322 F5D1     	  bne 1b 
 583              	2: 
 584 0324 7047     	  _RET 
 585              	
 586              	//---------------------------------
 587              	// dictionary search 
ARM GAS  stm32-tbi.s 			page 22


 588              	// input:
 589              	//	 r0   target name
 590              	//   r1		dictionary first link address  
 591              	// output:
 592              	//  r0 		TK_CMD|TK_IFUNC|TK_CONST|TK_NONE 
 593              	//  r1		cmd_index if r0!=TK_NONE  
 594              	// use:
 595              	//  r8   length dictionary name 
 596              	//---------------------------------
 597 0326 00BF     	  _FUNC search_dict
 598 0328 03B4     	  push {r0,r1}
 599              	1:
 600 032a 11F8010B 	  ldrb r0,[r1],#1 
 601 032e 0043     	  orrs r0,r0
 602 0330 13D0     	  beq 9f // end of dictinary 
 603 0332 00F01F08 	  and r8,r0,#0x1f 
 604 0336 0098     	  ldr r0,[sp]  
 605 0338 00B5FFF7 	  _CALL cp_cstr 
 605      E3FF5DF8 
 605      04EB
 606 0342 04D0     	  beq 2f 
 607 0344 0199     	  ldr r1,[sp,#4]
 608 0346 51F8081C 	  ldr r1,[r1,#-8]
 609 034a 0191     	  str r1,[sp,#4]
 610 034c EDE7     	  b 1b   
 611              	2: // found
 612 034e 0199     	  ldr r1,[sp,#4]
 613 0350 0878     	  ldrb r0,[r1]
 614 0352 4FEA5010 	  lsr r0,#5    // token type 
 615 0356 51F8041C 	  ldr r1,[r1,#-4]  // command index 
 616 035a 02B0     	9: add sp,#8  // drop pushed r0,r1 
 617 035c 7047     	   _RET 
 618              	
 619 035e 00BF     	  _FUNC cold_init
 620              	//copy system variables to ram 
 621 0360 DFF82680 	  ldr r8,src_addr 
 622 0364 DFF82690 	  ldr r9,dest_addr 
 623 0368 4FF0D00A 	  mov r10,#ulast-uzero 
 624              	1:
 625 036c 58F804BB 	  ldr r11,[r8],#4 
 626 0370 49F804BB 	  str r11,[r9],#4 
 627 0374 BAF1040A 	  subs r10,#4 
 628 0378 F8D1     	  bne 1b
 629              	// set UPP 
 630 037a 4FF00003 	  _MOV32 r3,RAM_ADR
 630      C2F20003 
 631 0382 DFF80E80 	  ldr r8,isr_table_size 
 632 0386 4344     	  add r3,r3,r8
 633              	
 634 0388 7047     	  _RET 
 635              	src_addr:
 636 038a 00000000 	  .word uzero
 637              	dest_addr:
 638 038e 30010020 	  .word RAM_ADR+isr_end-isr_vectors  
 639              	isr_table_size:
 640 0392 30010000 	  .word isr_end-isr_vectors 
 641              	
ARM GAS  stm32-tbi.s 			page 23


 642              	
 643 0396 0000     	  .section .rodata 
 644              	
 645              	// system variables initial value 
 646              	uzero:
 647 0000 00000000 	  .word 0 // IN
 648 0004 00000000 	  .word 0 // IN_SAVED
 649 0008 00000000 	  .word 0 // COUNT
 650 000c 00000000 	  .word 0 // BASICPTR
 651 0010 00000000 	  .word 0 // DATAPTR
 652 0014 00000000 	  .word 0 // DATA
 653 0018 00000000 	  .word 0 // DATALEN
 654 001c 0A000000 	  .word 10 // BASE
 655 0020 00000000 	  .word 0 // TICKS
 656 0024 00000000 	  .word 0 // TIMER
 657 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 658 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 659 0030 00000000 	  .word 0 // FFREE
 660 0034 00020020 	  .word RAM_ADR+(isr_end-isr_vectors)+(ulast-uzero) // TXTBGN
 661 0038 00020020 	  .word RAM_ADR+(isr_end-isr_vectors)+(ulast-uzero) // TXTEND
 662 003c 00000000 	  .word 0 //LOOP_DEPTH
 663 0040 00000000 	  .word 0 // ARRAY_SIZE
 664 0044 00000000 	  .word 0 // FLAGS
 665 0048 04000000 	  .word 4 // TAB_WIDTH
 666 004c 00000000 	  .word 0 // RX_HEAD
 667 0050 00000000 	  .word 0 // RX_TAIL
 668 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 668      00000000 
 668      00000000 
 668      00000000 
 669 0064 00000000 	  .space VARS_SIZE,0 // VARS
 669      00000000 
 669      00000000 
 669      00000000 
 669      00000000 
 670 00cc 00000000 	  .space 4, 0 // filling 
 671              	ulast:
 672              	
 673              	  .section .rodata.dictionary 
 674              	
 675              	// keep alphabetic order for BASIC names from Z-A
 676              	// this sort order is for for WORDS cmd output. 	
 677              	
 678              		.equ link, 0
 679              	kword_end:
 680 0000 00000000 	  .word link,0
 680      00000000 
 681              	  .equ LINK, .
 682 0008 00000000 	  .word 0
 683              	  .p2align 2  
 684 000c 08000000 	  _dict_entry 5+F_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 684      64000000 
 684      25585452 
 684      4D540000 
 685 001c 14000000 	  _dict_entry 4+F_CMD,XRCV,XRCV_IDX // xmodem receive
 685      65000000 
 685      24585243 
ARM GAS  stm32-tbi.s 			page 24


 685      56000000 
 686 002c 24000000 	  _dict_entry 3+F_IFUNC,XOR,XOR_IDX //bit_xor
 686      63000000 
 686      43584F52 
 687 0038 34000000 	  _dict_entry 5+F_CMD,WRITE,WRITE_IDX //write  
 687      62000000 
 687      25575249 
 687      54450000 
 688 0048 40000000 	  _dict_entry 5+F_CMD,WORDS,WORDS_IDX //words 
 688      61000000 
 688      25574F52 
 688      44530000 
 689 0058 50000000 	  _dict_entry 4+F_CMD,WAIT,WAIT_IDX //wait 
 689      60000000 
 689      24574149 
 689      54000000 
 690 0068 60000000 	  _dict_entry 3+F_IFUNC,USR,USR_IDX //usr
 690      5F000000 
 690      43555352 
 691 0074 70000000 	  _dict_entry 5+F_CMD,UNTIL,UNTIL_IDX //until 
 691      5E000000 
 691      25554E54 
 691      494C0000 
 692 0084 7C000000 	  _dict_entry 6+F_IFUNC,UFLASH,UFLASH_IDX //uflash 
 692      5D000000 
 692      4655464C 
 692      41534800 
 693 0094 8C000000 	  _dict_entry 6+F_IFUNC,UBOUND,UBOUND_IDX //ubound
 693      5C000000 
 693      4655424F 
 693      554E4400 
 694 00a4 9C000000 	  _dict_entry 4+F_CMD,TONE,TONE_IDX //tone  
 694      5B000000 
 694      24544F4E 
 694      45000000 
 695 00b4 AC000000 	  _dict_entry 2+F_CMD,TO,TO_IDX //to
 695      5A000000 
 695      22544F00 
 696 00c0 BC000000 	  _dict_entry 5+F_CMD,TIMER,TIMER_IDX //set_timer
 696      58000000 
 696      2554494D 
 696      45520000 
 697 00d0 C8000000 	  _dict_entry 7+F_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 697      59000000 
 697      4754494D 
 697      454F5554 
 698 00e0 D8000000 	  _dict_entry 5+F_IFUNC,TICKS,TICKS_IDX //get_ticks
 698      57000000 
 698      45544943 
 698      4B530000 
 699 00f0 E8000000 	  _dict_entry 4+F_CMD,STOP,STOP_IDX //stop 
 699      56000000 
 699      2453544F 
 699      50000000 
 700 0100 F8000000 	  _dict_entry 4+F_CMD,STEP,STEP_IDX //step 
 700      55000000 
 700      24535445 
ARM GAS  stm32-tbi.s 			page 25


 700      50000000 
 701 0110 08010000 	  _dict_entry 5+F_CMD,SPIWR,SPIWR_IDX //spi_write
 701      54000000 
 701      25535049 
 701      57520000 
 702 0120 18010000 	  _dict_entry 6+F_CMD,SPISEL,SPISEL_IDX //spi_select
 702      53000000 
 702      26535049 
 702      53454C00 
 703 0130 28010000 	  _dict_entry 5+F_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 703      51000000 
 703      45535049 
 703      52440000 
 704 0140 38010000 	  _dict_entry 5+F_CMD,SPIEN,SPIEN_IDX //spi_enable 
 704      52000000 
 704      25535049 
 704      454E0000 
 705 0150 48010000 	  _dict_entry 5+F_CMD,SLEEP,SLEEP_IDX //sleep 
 705      50000000 
 705      25534C45 
 705      45500000 
 706 0160 58010000 	  _dict_entry 4+F_IFUNC,SIZE,SIZE_IDX //size
 706      4F000000 
 706      4453495A 
 706      45000000 
 707 0170 68010000 	  _dict_entry 4+F_CMD,SHOW,SHOW_IDX //show 
 707      4E000000 
 707      2453484F 
 707      57000000 
 708 0180 78010000 	  _dict_entry 4+F_CMD,SAVE,SAVE_IDX //save
 708      4D000000 
 708      24534156 
 708      45000000 
 709 0190 88010000 	  _dict_entry 3+F_CMD,RUN,RUN_IDX //run
 709      4C000000 
 709      2352554E 
 710 019c 98010000 	  _dict_entry 6+F_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 710      4B000000 
 710      46525348 
 710      49465400 
 711 01ac A4010000 	  _dict_entry 3+F_IFUNC,RND,RND_IDX //random 
 711      4A000000 
 711      43524E44 
 712 01b8 B4010000 	  _dict_entry 6+F_CMD,RETURN,RET_IDX //return 
 712      49000000 
 712      26524554 
 712      55524E00 
 713 01c8 C0010000 	  _dict_entry 7+F_CMD,RESTORE,REST_IDX //restore 
 713      48000000 
 713      27524553 
 713      544F5245 
 714 01d8 D0010000 	  _dict_entry 6+F_CMD,REMARK,REM_IDX //remark 
 714      47000000 
 714      2652454D 
 714      41524B00 
 715 01e8 E0010000 	  _dict_entry 6+F_CMD,REBOOT,RBT_IDX //cold_start
 715      46000000 
ARM GAS  stm32-tbi.s 			page 26


 715      26524542 
 715      4F4F5400 
 716 01f8 F0010000 	  _dict_entry 4+F_IFUNC,READ,READ_IDX //read  
 716      45000000 
 716      44524541 
 716      44000000 
 717 0208 00020000 	  _dict_entry 4+F_IFUNC,QKEY,QKEY_IDX //qkey  
 717      44000000 
 717      44514B45 
 717      59000000 
 718 0218 10020000 	  _dict_entry 4+F_IFUNC,PRTI,PRTI_IDX //const_porti 
 718      43000000 
 718      44505254 
 718      49000000 
 719 0228 20020000 	  _dict_entry 4+F_IFUNC,PRTH,PRTH_IDX //const_porth 
 719      42000000 
 719      44505254 
 719      48000000 
 720 0238 30020000 	  _dict_entry 4+F_IFUNC,PRTG,PRTG_IDX //const_portg 
 720      41000000 
 720      44505254 
 720      47000000 
 721 0248 40020000 	  _dict_entry 4+F_IFUNC,PRTF,PRTF_IDX //const_portf
 721      40000000 
 721      44505254 
 721      46000000 
 722 0258 50020000 	  _dict_entry 4+F_IFUNC,PRTE,PRTE_IDX //const_porte
 722      3F000000 
 722      44505254 
 722      45000000 
 723 0268 60020000 	  _dict_entry 4+F_IFUNC,PRTD,PRTD_IDX //const_portd
 723      3E000000 
 723      44505254 
 723      44000000 
 724 0278 70020000 	  _dict_entry 4+F_IFUNC,PRTC,PRTC_IDX //const_portc
 724      3D000000 
 724      44505254 
 724      43000000 
 725 0288 80020000 	  _dict_entry 4+F_IFUNC,PRTB,PRTB_IDX //const_portb
 725      3C000000 
 725      44505254 
 725      42000000 
 726 0298 90020000 	  _dict_entry 4+F_IFUNC,PRTA,PRTA_IDX //const_porta 
 726      3B000000 
 726      44505254 
 726      41000000 
 727 02a8 A0020000 	  _dict_entry 5+F_CMD,PRINT,PRT_IDX //print 
 727      3A000000 
 727      25505249 
 727      4E540000 
 728 02b8 B0020000 	  _dict_entry 4+F_IFUNC,POUT,POUT_IDX //const_output
 728      39000000 
 728      44504F55 
 728      54000000 
 729 02c8 C0020000 	  _dict_entry 4+F_CMD,POKE,POKE_IDX //poke 
 729      38000000 
 729      24504F4B 
ARM GAS  stm32-tbi.s 			page 27


 729      45000000 
 730 02d8 D0020000 	  _dict_entry 5+F_CMD,PMODE,PMODE_IDX //pin_mode 
 730      35000000 
 730      25504D4F 
 730      44450000 
 731 02e8 E0020000 	  _dict_entry 4+F_IFUNC,PINP,PINP_IDX //const_input
 731      37000000 
 731      4450494E 
 731      50000000 
 732 02f8 F0020000 	  _dict_entry 4+F_IFUNC,PEEK,PEEK_IDX //peek 
 732      36000000 
 732      44504545 
 732      4B000000 
 733 0308 00030000 	  _dict_entry 5+F_CMD,PAUSE,PAUSE_IDX //pause 
 733      34000000 
 733      25504155 
 733      53450000 
 734 0318 10030000 	  _dict_entry 3+F_IFUNC,PAD,PAD_IDX //pad_ref 
 734      33000000 
 734      43504144 
 735 0324 20030000 	  _dict_entry 2+F_IFUNC,OR,OR_IDX //bit_or
 735      32000000 
 735      424F5200 
 736 0330 2C030000 	  _dict_entry 3+F_IFUNC,ODR,ODR_IDX //const_odr 
 736      31000000 
 736      434F4452 
 737 033c 38030000 	  _dict_entry 3+F_IFUNC,NOT,NOT_IDX //func_not 
 737      30000000 
 737      434E4F54 
 738 0348 44030000 	  _dict_entry 4+F_CMD,NEXT,NEXT_IDX //next 
 738      2E000000 
 738      244E4558 
 738      54000000 
 739 0358 50030000 	  _dict_entry 3+F_CMD,NEW,NEW_IDX //new
 739      2F000000 
 739      234E4557 
 740 0364 60030000 	  _dict_entry 6+F_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 740      2D000000 
 740      464D554C 
 740      44495600 
 741 0374 6C030000 	  _dict_entry 6+F_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 741      2C000000 
 741      464C5348 
 741      49465400 
 742 0384 7C030000 	  _dict_entry 3+F_IFUNC,LOG,LOG_IDX //log2 
 742      2B000000 
 742      434C4F47 
 743 0390 8C030000 	  _dict_entry 4+F_CMD,LOAD,LOAD_IDX //load 
 743      2A000000 
 743      244C4F41 
 743      44000000 
 744 03a0 98030000 	  _dict_entry 4+F_CMD,LIST,LIST_IDX //list
 744      29000000 
 744      244C4953 
 744      54000000 
 745 03b0 A8030000 	  _dict_entry 3+F_CMD,LET,LET_IDX //let 
 745      28000000 
ARM GAS  stm32-tbi.s 			page 28


 745      234C4554 
 746 03bc B8030000 	  _dict_entry 3+F_IFUNC,KEY,KEY_IDX //key 
 746      27000000 
 746      434B4559 
 747 03c8 C4030000 	  _dict_entry 7+F_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 747      26000000 
 747      27495744 
 747      47524546 
 748 03d8 D0030000 	  _dict_entry 6+F_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 748      25000000 
 748      26495744 
 748      47454E00 
 749 03e8 E0030000 	  _dict_entry 6+F_IFUNC,INVERT,INVERT_IDX //invert 
 749      24000000 
 749      46494E56 
 749      45525400 
 750 03f8 F0030000 	  _dict_entry 5+F_CMD,INPUT,INPUT_IDX //input_var  
 750      23000000 
 750      25494E50 
 750      55540000 
 751 0408 00040000 	  _dict_entry 2+F_CMD,IF,IF_IDX //if 
 751      22000000 
 751      22494600 
 752 0414 10040000 	  _dict_entry 3+F_IFUNC,IDR,IDR_IDX //const_idr 
 752      21000000 
 752      43494452 
 753 0420 1C040000 	  _dict_entry 3+F_CMD,HEX,HEX_IDX //hex_base
 753      20000000 
 753      23484558 
 754 042c 28040000 	  _dict_entry 4+F_IFUNC,GPIO,GPIO_IDX //gpio 
 754      1F000000 
 754      44475049 
 754      4F000000 
 755 043c 34040000 	  _dict_entry 4+F_CMD,GOTO,GOTO_IDX //goto 
 755      1E000000 
 755      24474F54 
 755      4F000000 
 756 044c 44040000 	  _dict_entry 5+F_CMD,GOSUB,GOSUB_IDX //gosub 
 756      1D000000 
 756      25474F53 
 756      55420000 
 757 045c 54040000 	  _dict_entry 6+F_CMD,FORGET,FORGET_IDX //forget 
 757      1C000000 
 757      26464F52 
 757      47455400 
 758 046c 64040000 	  _dict_entry 3+F_CMD,FOR,FOR_IDX //for 
 758      1B000000 
 758      23464F52 
 759 0478 74040000 	  _dict_entry 4+F_CMD,FCPU,FCPU_IDX //fcpu 
 759      1A000000 
 759      24464350 
 759      55000000 
 760 0488 80040000 	  _dict_entry 3+F_CMD,END,END_IDX //cmd_end  
 760      18000000 
 760      23454E44 
 761 0494 90040000 	  _dict_entry 6+F_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 761      19000000 
ARM GAS  stm32-tbi.s 			page 29


 761      46454550 
 761      524F4D00 
 762 04a4 9C040000 	  _dict_entry 6+F_CMD,DWRITE,DWRITE_IDX //digital_write
 762      17000000 
 762      26445752 
 762      49544500 
 763 04b4 AC040000 	  _dict_entry 5+F_IFUNC,DREAD,DREAD_IDX //digital_read
 763      16000000 
 763      45445245 
 763      41440000 
 764 04c4 BC040000 	  _dict_entry 2+F_CMD,DO,DO_IDX //do_loop
 764      15000000 
 764      22444F00 
 765 04d0 CC040000 	  _dict_entry 3+F_CMD,DIR,DIR_IDX //directory 
 765      14000000 
 765      23444952 
 766 04dc D8040000 	  _dict_entry 3+F_CMD,DEC,DEC_IDX //dec_base
 766      13000000 
 766      23444543 
 767 04e8 E4040000 	  _dict_entry 3+F_IFUNC,DDR,DDR_IDX //const_ddr 
 767      12000000 
 767      43444452 
 768 04f4 F0040000 	  _dict_entry 6+F_CMD,DATALN,DATALN_IDX //data_line  
 768      11000000 
 768      26444154 
 768      414C4E00 
 769 0504 FC040000 	  _dict_entry 4+F_CMD,DATA,DATA_IDX //data  
 769      10000000 
 769      24444154 
 769      41000000 
 770 0514 0C050000 	  _dict_entry 3+F_IFUNC,CRL,CRL_IDX //const_cr1 
 770      0F000000 
 770      4343524C 
 771 0520 1C050000 	  _dict_entry 3+F_IFUNC,CRH,CRH_IDX //const_cr2 
 771      0E000000 
 771      43435248 
 772 052c 28050000 	  _dict_entry 4+F_CFUNC,CHAR,CHAR_IDX //char
 772      0D000000 
 772      84434841 
 772      52000000 
 773 053c 34050000 	  _dict_entry 3+F_CMD,BYE,BYE_IDX //bye 
 773      0C000000 
 773      23425945 
 774 0548 44050000 	  _dict_entry 5+F_CMD,BTOGL,BTOGL_IDX //bit_toggle
 774      0B000000 
 774      2542544F 
 774      474C0000 
 775 0558 50050000 	  _dict_entry 5+F_IFUNC,BTEST,BTEST_IDX //bit_test 
 775      0A000000 
 775      45425445 
 775      53540000 
 776 0568 60050000 	  _dict_entry 4+F_CMD,BSET,BSET_IDX //bit_set 
 776      09000000 
 776      24425345 
 776      54000000 
 777 0578 70050000 	  _dict_entry 4+F_CMD,BRES,BRES_IDX //bit_reset
 777      08000000 
ARM GAS  stm32-tbi.s 			page 30


 777      24425245 
 777      53000000 
 778 0588 80050000 	  _dict_entry 3+F_IFUNC,BIT,BIT_IDX //bitmask
 778      07000000 
 778      43424954 
 779 0594 90050000 	  _dict_entry 3+F_CMD,AWU,AWU_IDX //awu 
 779      06000000 
 779      23415755 
 780 05a0 9C050000 	  _dict_entry 7+F_CMD,AUTORUN,AUTORUN_IDX //autorun
 780      05000000 
 780      27415554 
 780      4F52554E 
 781 05b0 A8050000 	  _dict_entry 3+F_IFUNC,ASC,ASC_IDX //ascii
 781      04000000 
 781      43415343 
 782 05bc B8050000 	  _dict_entry 3+F_IFUNC,AND,AND_IDX //bit_and
 782      03000000 
 782      43414E44 
 783 05c8 C4050000 	  _dict_entry 7+F_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 783      02000000 
 783      47414443 
 783      52454144 
 784 05d8 D0050000 	  _dict_entry 5+F_CMD,ADCON,ADCON_IDX //power_adc 
 784      01000000 
 784      25414443 
 784      4F4E0000 
 785              	first_link: 
 786 05e8 E0050000 	  .word LINK 
 787 05ec 00000000 	  .word ABS_IDX 
 788              	  .equ LINK,. 
 789              	kword_dict: // first name field 
 790 05f0 43       	  .byte 3+F_IFUNC
 791 05f1 414253   	  .ascii "ABS" 
 792              	  .p2align 2 
 793              	
 794              	//comands and fonctions address table 	
 795              	code_addr:
 796              	/*
 797              		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 798              		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 799              		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 800              		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 801              		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 802              		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 803              		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 804              		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 805              		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 806              		.word restore,return, random,rshift,run,save,show,size // 72..79
 807              		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 808              		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 809              		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 810              	*/ 
 811 05f4 00000000 		.word 0 
 812              	
 813              	
 814              	
 815              	/*************************************************
ARM GAS  stm32-tbi.s 			page 31


 816              	   extra FLASH memory not used by Tiny BASIC
 817              	   is used to save BASIC programs.
 818              	************************************************/
 819 05f8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 819      00000000 
 819      00000000 
 819      00000000 
 819      00000000 
 820              	  .section .fs
 821              	FILE_SYSTEM: // file system start here
 822              	
 823              	
ARM GAS  stm32-tbi.s 			page 32


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32-tbi.s 			page 33


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  stm32-tbi.s 			page 34


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:19     *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:22     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:23     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:24     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:25     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:31     *ABS*:0000000000000000 INP
ARM GAS  stm32-tbi.s 			page 35


      tbi_macros.inc:32     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:42     *ABS*:0000000000000080 TK_CMD
      tbi_macros.inc:43     *ABS*:0000000000000081 TK_IFUNC
      tbi_macros.inc:44     *ABS*:0000000000000082 TK_CFUNC
      tbi_macros.inc:45     *ABS*:0000000000000083 TK_CONST
      tbi_macros.inc:46     *ABS*:0000000000000084 TK_INTGR
      tbi_macros.inc:47     *ABS*:0000000000000085 TK_VAR
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:53     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:54     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:55     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:56     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:57     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:58     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:59     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:60     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:61     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:69     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:70     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:71     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:72     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:73     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:74     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:76     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:77     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:78     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:79     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:81     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:86     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:87     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:88     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:89     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:90     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:91     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:92     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:93     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:94     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:95     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:96     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:97     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:98     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:99     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:100    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:101    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:106    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:108    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:114    *ABS*:0000000000000000 DEBUG
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
ARM GAS  stm32-tbi.s 			page 36


       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
ARM GAS  stm32-tbi.s 			page 37


       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         stm32-tbi.s:45     *ABS*:0000000040011000 LED_GPIO
         stm32-tbi.s:46     *ABS*:000000000000000d LED_PIN
         stm32-tbi.s:47     *ABS*:0000000040013800 UART
         stm32-tbi.s:49     *ABS*:0000000000000100 STACK_SIZE
         stm32-tbi.s:50     *ABS*:0000000020004fff STACK_EMPTY
         stm32-tbi.s:51     *ABS*:0000000000000050 TIB_SIZE
         stm32-tbi.s:52     *ABS*:0000000000000050 PAD_SIZE
         stm32-tbi.s:54     *ABS*:0000000000000000 FRUN
         stm32-tbi.s:55     *ABS*:0000000000000001 FTRAP
         stm32-tbi.s:56     *ABS*:0000000000000002 FLOOP
         stm32-tbi.s:57     *ABS*:0000000000000003 FSLEEP
         stm32-tbi.s:58     *ABS*:0000000000000004 FBREAK
         stm32-tbi.s:59     *ABS*:0000000000000005 FCOMP
         stm32-tbi.s:61     *ABS*:0000000000000006 FAUTORUN
         stm32-tbi.s:62     *ABS*:0000000008001c00 AUTORUN_NAME
         stm32-tbi.s:64     *ABS*:0000000000000006 FIRST_DATA_ITEM
         stm32-tbi.s:65     *ABS*:0000000000007fff MAX_LINENO
ARM GAS  stm32-tbi.s 			page 38


         stm32-tbi.s:67     *ABS*:0000000000000010 RX_QUEUE_SIZE
         stm32-tbi.s:73     *ABS*:0000000000000000 IN
         stm32-tbi.s:74     *ABS*:0000000000000004 IN_SAVED
         stm32-tbi.s:75     *ABS*:0000000000000008 COUNT
         stm32-tbi.s:76     *ABS*:000000000000000c BASICPTR
         stm32-tbi.s:77     *ABS*:0000000000000010 DATAPTR
         stm32-tbi.s:78     *ABS*:0000000000000014 DATA
         stm32-tbi.s:79     *ABS*:0000000000000018 DATALEN
         stm32-tbi.s:80     *ABS*:000000000000001c BASE
         stm32-tbi.s:81     *ABS*:0000000000000020 TICKS
         stm32-tbi.s:82     *ABS*:0000000000000024 TIMER
         stm32-tbi.s:83     *ABS*:0000000000000028 SEED
         stm32-tbi.s:84     *ABS*:000000000000002c FSPTR
         stm32-tbi.s:85     *ABS*:0000000000000030 FFREE
         stm32-tbi.s:86     *ABS*:0000000000000034 TXTBGN
         stm32-tbi.s:87     *ABS*:0000000000000038 TXTEND
         stm32-tbi.s:88     *ABS*:000000000000003c LOOP_DEPTH
         stm32-tbi.s:89     *ABS*:0000000000000040 ARRAY_SIZE
         stm32-tbi.s:90     *ABS*:0000000000000044 FLAGS
         stm32-tbi.s:92     *ABS*:000000000000004c RX_HEAD
         stm32-tbi.s:93     *ABS*:0000000000000050 RX_TAIL
         stm32-tbi.s:94     *ABS*:0000000000000054 RX_QUEUE
         stm32-tbi.s:95     *ABS*:0000000000000064 VARS
         stm32-tbi.s:96     *ABS*:0000000000000004 CELLL
         stm32-tbi.s:97     *ABS*:0000000000000068 VARS_SIZE
         stm32-tbi.s:98     *ABS*:00000000000000cc FREE_RAM
         stm32-tbi.s:108    .isr_vector:0000000000000000 isr_vectors
         stm32-tbi.s:287    .text:00000000000000ac reset_handler
         stm32-tbi.s:204    .text:0000000000000000 default_handler
         stm32-tbi.s:223    .text:0000000000000030 systick_handler
         stm32-tbi.s:126    .isr_vector:0000000000000040 irq0
         stm32-tbi.s:241    .text:0000000000000044 uart_rx_handler
         stm32-tbi.s:188    .isr_vector:0000000000000130 isr_end
         stm32-tbi.s:190    .isr_vector:0000000000000130 upp
         stm32-tbi.s:202    .text:0000000000000000 $t
         stm32-tbi.s:212    .text:0000000000000018 exception_msg
         stm32-tbi.s:483    .text:00000000000002a4 uart_puts
         stm32-tbi.s:265    .text:0000000000000082 reset_mcu
         stm32-tbi.s:213    .text:0000000000000018 $d
         stm32-tbi.s:231    .text:0000000000000042 systick_exit
         stm32-tbi.s:258    .text:000000000000006e user_reboot
         stm32-tbi.s:275    .text:0000000000000098 user_reboot_msg
         stm32-tbi.s:273    .text:0000000000000094 scb_adr
         stm32-tbi.s:274    .text:0000000000000094 $d
         stm32-tbi.s:342    .text:0000000000000178 remap
         stm32-tbi.s:357    .text:00000000000001a8 init_devices
         stm32-tbi.s:433    .text:0000000000000248 uart_init
         stm32-tbi.s:619    .text:0000000000000360 cold_init
         stm32-tbi.s:309    .text:00000000000000ec prt_version
         stm32-tbi.s:298    .text:00000000000000d0 test
         stm32-tbi.s:303    .text:00000000000000e0 str1
         stm32-tbi.s:789    .rodata.dictionary:00000000000005f0 kword_dict
         stm32-tbi.s:597    .text:0000000000000328 search_dict
         stm32-tbi.s:304    .text:00000000000000e0 $d
         stm32-tbi.s:307    .text:00000000000000ea $t
         stm32-tbi.s:333    .text:0000000000000154 version_msg
         stm32-tbi.s:337    .text:0000000000000177 version
ARM GAS  stm32-tbi.s 			page 39


         stm32-tbi.s:464    .text:000000000000028c uart_putc
         stm32-tbi.s:334    .text:0000000000000154 $d
         stm32-tbi.s:339    .text:0000000000000178 $t
         stm32-tbi.s:370    .text:00000000000001c6 wait_hserdy
         stm32-tbi.s:390    .text:00000000000001e0 wait_pllrdy
         stm32-tbi.s:402    .text:0000000000000200 wait_sws
         stm32-tbi.s:508    .text:00000000000002c8 uart_qkey
         stm32-tbi.s:525    .text:00000000000002d8 uart_getc
         stm32-tbi.s:550    .text:0000000000000300 readln
         stm32-tbi.s:571    .text:0000000000000304 cp_cstr
         stm32-tbi.s:635    .text:000000000000038a src_addr
         stm32-tbi.s:637    .text:000000000000038e dest_addr
         stm32-tbi.s:671    .rodata:00000000000000d0 ulast
         stm32-tbi.s:646    .rodata:0000000000000000 uzero
         stm32-tbi.s:639    .text:0000000000000392 isr_table_size
         stm32-tbi.s:636    .text:000000000000038a $d
         stm32-tbi.s:821    .fs:0000000000000000 FILE_SYSTEM
         stm32-tbi.s:668    .rodata:0000000000000054 $d
         stm32-tbi.s:678    *ABS*:0000000000000000 link
         stm32-tbi.s:679    .rodata.dictionary:0000000000000000 kword_end
         stm32-tbi.s:788    .rodata.dictionary:00000000000005f0 LINK
         stm32-tbi.s:683    .rodata.dictionary:000000000000000c $d
         stm32-tbi.s:785    .rodata.dictionary:00000000000005e8 first_link
         stm32-tbi.s:795    .rodata.dictionary:00000000000005f4 code_addr
         stm32-tbi.s:823    .text:0000000000000398 $d
         stm32-tbi.s:220    .text:000000000000002f $d
         stm32-tbi.s:220    .text:0000000000000030 $t
         stm32-tbi.s:279    .text:00000000000000ab $d
         stm32-tbi.s:279    .text:00000000000000ac $t

UNDEFINED SYMBOLS
_mstack
