ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  .macro _UNGET_TOKEN 
 236              	  ldr IN,[UPP,#IN_SAVED]
 237              	  ldr BPTR,[UPP,#BASICPTR] 
 238              	  .endm 
 239              	
 240              	 // create a text data 
 241              	 .macro _TEXT label,text
 242              	 \label: .asciz "\text"
 243              	 .p2align 2 
 244              	 .endm 
 245              	
 246              	// command line only 
 247              	  .macro _CLO 
 248              	  ldr r0,[UPP,#FLAGS]
 249              	  tst r0,#FRUN 
 250              	  beq 1f 
 251              	  mov r0,#ERR_CMD_ONLY
 252              	  b tb_error
 253              	1: 
 254              	  .endm 
 255              	
ARM GAS  tinyBasic.s 			page 10


 256              	// run time only 
 257              	  .macro RTO 
 258              	  ldr r0,[UPP,#FLAGS]
 259              	  tst r0,#FRUN 
 260              	  bne 1f 
 261              	  mov r0,#ERR_CMD_ONLY
 262              	  b tb_error
 263              	1:
 264              	  .endm 
 265              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
ARM GAS  tinyBasic.s 			page 11


  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
ARM GAS  tinyBasic.s 			page 12


 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
ARM GAS  tinyBasic.s 			page 13


  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
ARM GAS  tinyBasic.s 			page 14


 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
ARM GAS  tinyBasic.s 			page 15


 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
ARM GAS  tinyBasic.s 			page 16


 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	  BASIC: DUMP adr, count 
 239              	    command line only  
 240              	    print memory content in hexadecimal 
 241              	    16 bytes per row 
 242              	    ouput:
 243              	      none 
 244              	    use:
 245              	      r2   byte counter  
 246              	****************************************/
 247              	    _FUNC dump 
 248 0150 04B4     	    push {r2}
 249 0152 226C     	    ldr r2,[UPP,#FLAGS]
 250 0154 12F0010F 	    tst r2,#FRUN 
 251 0158 02D0     	    beq 0f
 252 015a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 253 015e AFE2     	    b tb_error  
 254 0160 00B500F0 	0:  _CALL arg_list 
 254      ADFC5DF8 
 254      04EB
 255 016a 0228     	    cmp r0,#2
 256 016c 40F0A482 	    bne syntax_error 
 257 0170 5CF8042B 	    _POP r2   // count 
 258 0174 5CF8040B 	    _POP  r0  // adr 
 259 0178 4FF01001 	1:  mov r1,#16
 260 017c 00B5FFF7 	    _CALL prt_row 
 260      A3FF5DF8 
 260      04EB
 261 0186 103A     	    subs r2,#16 
 262 0188 F6D5     	    bpl 1b 
ARM GAS  tinyBasic.s 			page 17


 263 018a 04BC     	2:  pop {r2}
 264 018c 7047     	    _RET 
 265              	
 266              	/***************************************
 267              	    search_lineno 
 268              	    localize BASIC line from its number 
 269              	    input:
 270              	      r0   line# 
 271              	    output: 
 272              	      r0   adr where found || adr new to be inserted 
 273              	      r1   0 found || !0 not found  
 274              	    use:
 275              	      r0   scan address 
 276              	      r1   temp   
 277              	      r2   address end of text
 278              	      r3   target line#
 279              	****************************************/    
 280 018e 00BF     	    _FUNC search_lineno
 281 0190 0CB4     	    push {r2,r3} 
 282 0192 0346     	    mov r3,r0 // target 
 283 0194 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 284 0196 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 285 0198 9042     	1:  cmp r0,r2 
 286 019a 05D0     	    beq  8f
 287 019c 0188     	    ldrh r1,[r0]
 288 019e C91A     	    subs r1,r3 
 289 01a0 04D5     	    bpl 9f 
 290 01a2 8178     	    ldrb r1,[r0,#2]
 291 01a4 0844     	    add r0,r1
 292 01a6 F7E7     	    b 1b 
 293 01a8 4FF0FF31 	8:  mov r1,#-1 
 294 01ac 0CBC     	9:  pop {r2,r3}
 295 01ae 7047     	    _RET 
 296              	
 297              	
 298              	/********************************************
 299              	    delete_line 
 300              	    delete BASIC line at addr 
 301              	    input:
 302              	      r0    address 
 303              	    output:
 304              	      r0    address  
 305              	    use: 
 306              	      r1    dest adr
 307              	      r2    bytes to move 
 308              	      T1    length line to delete 
 309              	      T2    txtend 
 310              	********************************************/
 311              	    _FUNC delete_line 
 312 01b0 2DE90703 	    push {r0,r1,r2,T1,T2}
 313 01b4 0146     	    mov r1,r0 // dest 
 314 01b6 91F80280 	    ldrb T1,[r1,#2] // line length 
 315 01ba 4044     	    add r0,T1  // src
 316 01bc D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01c0 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 318 01c4 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 18


 318      04EB
 319 01ce A9EB0809 	    sub T2,T1 // txtend-count 
 320 01d2 C4F83480 	    str T1,[UPP,#TXTEND] 
 321 01d6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 322 01da 7047     	    _RET 
 323              	
 324              	/******************************************
 325              	    create_gap 
 326              	    create a gap in text area to insert new line 
 327              	    input:
 328              	      r0    adr 
 329              	      r1    length 
 330              	    output:
 331              	      r0    adr 
 332              	    use:
 333              	      T1    length 
 334              	      T2    txtend 
 335              	************************************************/
 336              	    _FUNC create_gap 
 337 01dc 2DE90503 	    push {r0,r2,T1,T2}
 338 01e0 8846     	    mov T1,R1
 339 01e2 0144     	    add r1,r0  // dest 
 340 01e4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 341 01e8 A9EB0002 	    sub r2,T2,r0 
 342 01ec 00B5FFF7 	    _CALL cmove
 342      FEFF5DF8 
 342      04EB
 343 01f6 C144     	    add T2,T1 
 344 01f8 C4F83490 	    str T2,[UPP,#TXTEND]
 345 01fc BDE80503 	    pop {r0,r2,T1,T2}
 346 0200 7047     	    _RET 
 347              	
 348              	/************************************************
 349              	    insert_line 
 350              	    insert BASIC line in text area 
 351              	    first search if line with same number exist 
 352              	    replace if so. 
 353              	    input:
 354              	      r0    *buffer to insert 
 355              	    output:
 356              	      none 
 357              	    use: 
 358              	      T1     *buffer
 359              	      T2     temp  
 360              	************************************************/ 
 361 0202 00BF     	    _FUNC insert_line 
 362 0204 2DE90203 	    push {r1,T1,T2}
 363 0208 8046     	    mov T1,r0 
 364 020a B8F80000 	    ldrh r0,[T1]
 365 020e 00B5FFF7 	    _CALL search_lineno 
 365      BEFF5DF8 
 365      04EB
 366 0218 49B9     	    cbnz  r1, 1f // line# doesn't exist
 367              	// already exist 
 368 021a 00B5FFF7 	    _CALL delete_line // delete old one 
 368      C8FF5DF8 
 368      04EB
ARM GAS  tinyBasic.s 			page 19


 369 0224 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 370 0228 B9F1030F 	    cmp T2,#3 
 371 022c 0ED0     	    beq 9f
 372              	1: //insert new line 
 373 022e 98F80210 	    ldrb r1,[T1,#2]
 374 0232 00B5FFF7 	    _CALL create_gap 
 374      D2FF5DF8 
 374      04EB
 375 023c 0146     	    mov r1,r0
 376 023e 4046     	    mov r0,T1 
 377 0240 8278     	    ldrb r2,[r0,#2]
 378 0242 00B5FFF7 	    _CALL cmove 
 378      FEFF5DF8 
 378      04EB
 379 024c BDE80203 	9:  pop {r1,T1,T2}
 380 0250 7047     	    _RET 
 381              	
 382              	/*********************************
 383              	    compile 
 384              	    tokenize source line save it 
 385              	    in pas buffer.
 386              	    compiled line format: 
 387              	      line_no  2 bytes {0...32767}
 388              	      count    1 byte  
 389              	      tokens   variable length 
 390              	  input:
 391              	     r0   *text buffer 
 392              	     r1   *text length   
 393              	  output:
 394              	    r0    0 stored | -1 immediate 
 395              	  use:
 396              	    r3    tib index   
 397              	    T1    tib
 398              	    T2    pad
 399              	***********************************/
 400 0252 00BF     	    _FUNC compile
 401 0254 8046     	    mov T1, r0  // source text buffer 
 402 0256 6160     	    str r1,[UPP,#COUNT] // save line length 
 403 0258 DFF8C296 	    ldr T2,pad // tokens buffer
 404 025c 83EA0303 	    eor r3,r3 // source index  
 405 0260 206C     	    ldr r0,[UPP,#FLAGS]
 406 0262 40F02000 	    orr r0,#FCOMP
 407 0266 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 408 0268 80EA0000 	    eor r0,r0     
 409 026c 29F8020B 	    strh r0,[T2],#2   // line no 
 410 0270 09F8010B 	    strb r0,[T2],#1 // length 
 411 0274 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 412 0276 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 413 027a 00B500F0 	    _CALL parse_int 
 413      F8F85DF8 
 413      04EB
 414 0284 07D0     	    beq 2f 
 415              	// this is a line number     
 416 0286 0129     	    cmp r1,#1 
 417 0288 02D5     	    bpl 1f 
 418 028a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 419 028e 17E2     	    b tb_error  
ARM GAS  tinyBasic.s 			page 20


 420              	1:  // write line # to pad 
 421 0290 29F8031C 	    strh r1,[T2,#-3]
 422 0294 2360     	    str r3,[UPP,#IN_SAVED]
 423              	2:  // check for pad full 
 424 0296 C145     	    cmp T2,T1
 425 0298 02DB     	    blt 3f 
 426 029a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 427 029e 0FE2     	    b tb_error 
 428 02a0 00B500F0 	3:  _CALL comp_token 
 428      21F85DF8 
 428      04EB
 429 02aa 0028     	    cmp r0,#TK_NONE 
 430 02ac 01D0     	    beq 4f 
 431 02ae 2360     	    str r3,[UPP,#IN_SAVED]
 432 02b0 F1E7     	    b 2b 
 433              	4: // compilation completed 
 434 02b2 DFF86A36 	    ldr r3,pad 
 435 02b6 A9EB0300 	    sub r0,T2,r3 // line length 
 436 02ba 9870     	    strb r0,[r3,#2]
 437 02bc 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 438 02be 1888     	    ldrh r0,[r3] // line number 
 439 02c0 38B1     	    cbz r0,8f  
 440              	// insert line in text buffer 
 441 02c2 1846     	    mov r0,r3 
 442 02c4 00B5FFF7 	    _CALL insert_line 
 442      9DFF5DF8 
 442      04EB
 443 02ce 4040     	    eors r0,r0 
 444 02d0 08E0     	    b 9f 
 445 02d2 9B46     	8:  mov BPTR,r3 // *token_list 
 446 02d4 4FF0030A 	    mov IN,#3
 447 02d8 206C     	    ldr r0,[UPP,#FLAGS]
 448 02da A0F12000 	    sub r0,#FCOMP
 449 02de 2064     	    str r0,[UPP,#FLAGS]
 450 02e0 5FF0FF30 	    movs r0,#-1 
 451 02e4 7047     	9:  _RET 
 452              	
 453              	/*********************************************
 454              	    compile next token from source 
 455              	    input: 
 456              	      r3 		tib index  
 457              	      T1    tib adr
 458              	      T2    insert point in pad  
 459              	    output:
 460              	      r0     token attribute 
 461              	      r1 		token value
 462              	      r3     tib index updated    
 463              	      T2     updated 
 464              	      use:
 465              	**********************************************/
 466              	    .macro _case c, next  
 467              	    cmp r0,#\c 
 468              	    bne \next
 469              	    .endm 
 470              	
 471 02e6 00BF     	    _FUNC comp_token 
 472 02e8 40B4     	    push {r6}
ARM GAS  tinyBasic.s 			page 21


 473 02ea 18F80300 	    ldrb r0,[T1,r3]
 474 02ee 0040     	    ands r0,r0 
 475 02f0 68D0     	    beq store_r0  // reached end of text  
 476 02f2 4FF02000 	    mov r0,#SPACE 
 477 02f6 00B500F0 	    _CALL skip  // skip spaces 
 477      26F95DF8 
 477      04EB
 478 0300 18F80300 	    ldrb r0,[T1,r3]
 479 0304 0040     	    ands r0,r0 
 480 0306 5DD0     	    beq store_r0  // reached end of text 
 481 0308 03F10103 	    add r3,#1 
 482 030c 00B500F0 	    _CALL upper 
 482      27F95DF8 
 482      04EB
 483 0316 00B500F0 	    _CALL is_special
 483      74F85DF8 
 483      04EB
 484 0320 DFF8706A 	    ldr r6,=token_ofs
 485 0324 D6E811F0 	    tbh [r6,r1] 
 486              	tok_idx0:     
 487              	//  not special char.  
 488 0328 4FE0     	    b try_number 
 489              	// single char token with no value 
 490              	single: 
 491 032a DFF86C6A 	    ldr r6,=tok_single
 492 032e 705C     	    ldrb r0,[r6,r1] 
 493 0330 48E0     	    b store_r0  
 494              	lt:
 495 0332 4FF03400 	    mov r0,#TK_LT
 496 0336 18F80310 	    ldrb r1,[T1,r3]
 497 033a 3E29     	    cmp r1,#'>' 
 498 033c 06D0     	    beq 1f
 499 033e 41E0     	    b store_r0 
 500              	gt:
 501 0340 4FF03100 	    mov r0,#TK_GT 
 502 0344 18F80310 	    ldrb r1,[T1,r3]
 503 0348 3C29     	    cmp r1,#'<'
 504 034a 04D1     	    bne 2f  
 505 034c 03F10103 	1:  add r3,#1
 506 0350 4FF03500 	    mov r0,#TK_NE  
 507 0354 36E0     	    b store_r0
 508 0356 3D29     	2:  cmp r1,#'=' 
 509 0358 34D1     	    bne store_r0  
 510 035a 03F10103 	    add r3,#1
 511 035e 00F10200 	    add r0,#2
 512 0362 2FE0     	    b store_r0       
 513              	bkslash:
 514 0364 18F80310 	    ldrb r1,[T1,r3]
 515 0368 03F10103 	    add r3,#1
 516 036c 4FF00300 	    mov r0,#TK_CHAR 
 517 0370 09F8010B 	    strb r0,[T2],#1
 518 0374 09F8011B 	    strb r1,[T2],#1
 519 0378 41E0     	    b token_exit 
 520              	prt_cmd: 
 521 037a 4FF00A00 	    mov r0,#TK_CMD 
 522 037e 4FF03A01 	    mov r1,#PRT_IDX
 523 0382 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 22


 524 0386 09F8011B 	    strb r1,[T2],#1
 525 038a 38E0     	    b token_exit 
 526              	quote:
 527 038c 4FF00200 	    mov r0,#TK_QSTR 
 528 0390 09F8010B 	    strb r0,[T2],#1
 529 0394 00B500F0 	    _CALL parse_quote
 529      A3F85DF8 
 529      04EB
 530 039e 2EE0     	    b token_exit
 531              	tick: 
 532              	// copy comment in pad 
 533 03a0 4FF00A00 	    mov r0,#TK_CMD 
 534 03a4 4FF04701 	    mov r1,#REM_IDX 
 535 03a8 09F8010B 	    strb r0,[T2],#1 
 536 03ac 09F8011B 	    strb r1,[T2],#1
 537 03b0 08EB0300 	    add r0,T1,r3 
 538 03b4 4946     	    mov r1,T2 
 539 03b6 00B5FFF7 	    _CALL strcpy 
 539      FEFF5DF8 
 539      04EB
 540 03c0 6368     	    ldr r3,[UPP,#COUNT]
 541 03c2 1CE0     	    b token_exit
 542              	store_r0: 
 543 03c4 09F8010B 	    strb r0,[T2],#1
 544 03c8 19E0     	    b token_exit 
 545              	try_number:
 546 03ca A3F10103 	    sub r3,#1
 547 03ce 00B500F0 	    _CALL parse_int  
 547      4EF85DF8 
 547      04EB
 548 03d8 04D0     	    beq 1f 
 549 03da 09F8010B 	    strb r0,[T2],#1 
 550 03de 49F8041B 	    str r1,[T2],#4
 551 03e2 0CE0     	    b token_exit 
 552 03e4 00B500F0 	1:  _CALL parse_keyword 
 552      15F95DF8 
 552      04EB
 553 03ee 0428     	    cmp r0,#TK_VAR 
 554 03f0 01D0     	    beq 2f 
 555 03f2 4729     	    cmp r1,#REM_IDX 
 556 03f4 D4D0     	    beq tick
 557 03f6 09F8010B 	2:  strb r0,[T2],#1 
 558 03fa 09F8011B 	    strb r1,[T2],#1
 559              	token_exit:
 560 03fe 40BC     	    pop {r6}
 561 0400 7047     	    _RET 
 562              	
 563              	/****************************
 564              	    is_special  
 565              	    check for non alphanum
 566              	    input:
 567              	      r0    character to scan 
 568              	    output:
 569              	      r0    character 
 570              	      r1    0 || index 
 571              	    use: 
 572              	      r1    scan index 
ARM GAS  tinyBasic.s 			page 23


 573              	      r2    temp 
 574              	      r3    char_list 
 575              	*****************************/
 576 0402 00BF     	    _FUNC is_special 
 577 0404 0CB4     	    push {r2,r3}
 578 0406 4FF00101 	    mov r1,#1
 579 040a DFF89039 	    ldr r3,=char_list 
 580 040e 5A5C     	1:  ldrb r2,[r3,r1]
 581 0410 22B1     	    cbz r2,8f 
 582 0412 8242     	    cmp r2,r0 
 583 0414 04D0     	    beq 9f 
 584 0416 01F10101 	    add r1,#1 
 585 041a F8E7     	    b 1b
 586 041c 81EA0101 	8:  eor r1,r1     
 587 0420 0CBC     	9:  pop {r2,r3}
 588 0422 7047     	    _RET 
 589              	
 590              	char_list:
 591 0424 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 591      293A232D 
 591      2B2A2F25 
 591      3D3C3E5C 
 591      3F272200 
 592              	
 593              	tok_single:
 594 0438 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 594      070109
 595 043f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 595      2232
 596              	  
 597 0445 0000BF   	  .p2align 2
 598              	token_ofs:
 599 0448 0000     	  .hword  0 // not found
 600              	  // TK_COMMA...TK_EQUAL , 12 
 601 044a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 601      01000100 
 602 0452 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 602      01000100 
 603 045a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 603      01000100 
 604              	  // '<','>'
 605 0462 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 606              	  // '\'
 607 0466 1E00     	  .hword  (bkslash-tok_idx0)/2
 608              	  // '?' 
 609 0468 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 610              	  // "'"  
 611 046a 3C00     	  .hword  (tick-tok_idx0)/2 
 612              	  // '"' quote 
 613 046c 3200     	  .hword (quote-tok_idx0)/2
 614              	
 615 046e 00BF     	  .p2align 2
 616              	
 617              	/****************************
 618              	    parse_int 
 619              	    parse an integer from text
 620              	    if not valid integer 
ARM GAS  tinyBasic.s 			page 24


 621              	    r1 return *buffer else 
 622              	    *buffer is incremented after integer 
 623              	  input:
 624              	    r0   *buffer 
 625              	  output:
 626              	    r0   TK_INTGR|TK_NONE
 627              	    r1   int|0   
 628              	  use:
 629              	    r0   char 
 630              	    r1   save r3 
 631              	    r2   int
 632              	    r6   base 
 633              	    r7   digit count 
 634              	    r3   tib index   
 635              	    T1   *tib 
 636              	    T2   *pad  
 637              	*****************************/
 638              	    _FUNC parse_int 
 639 0470 C0B4     	    push {r6,r7}
 640 0472 82EA0202 	    eor r2,r2 // int 
 641 0476 1946     	    mov r1,r3 
 642 0478 4FF00A06 	    mov r6,#10 // default base 
 643 047c 87EA0707 	    eor r7,r7 // digit count 
 644 0480 18F80300 	    ldrb r0,[T1,r3]
 645 0484 03F10103 	    add r3,#1 
 646 0488 2428     	    cmp r0,'$' 
 647 048a 02D1     	    bne 2f 
 648 048c 4FF01006 	    mov r6,#16 // hexadecimal number 
 649 0490 03E0     	    b 3f  
 650 0492 2628     	2:  cmp r0,#'&' 
 651 0494 05D1     	    bne 4f
 652 0496 4FF00206 	    mov r6,#2 //binary number  
 653 049a 18F80300 	3:  ldrb r0,[T1,r3]
 654 049e 03F10103 	    add r3,#1
 655 04a2 00B500F0 	4:  _CALL upper 
 655      5CF85DF8 
 655      04EB
 656 04ac 4128     	    cmp r0,#'A'
 657 04ae 00D4     	    bmi 5f
 658 04b0 0738     	    subs r0,#7  
 659 04b2 3038     	5:  subs r0,#'0' 
 660 04b4 07D4     	    bmi 6f // not digit   
 661 04b6 B042     	    cmp r0,r6 
 662 04b8 05D5     	    bpl 6f // not digit 
 663 04ba 06FB02F2 	    mul r2,r6 
 664 04be 0244     	    add r2,r0
 665 04c0 07F10107 	    add r7,#1  
 666 04c4 E9E7     	    b 3b
 667 04c6 A3F10103 	6:  sub r3,#1  // unget last char
 668 04ca 1FB1     	    cbz r7, 7f 
 669 04cc 4FF00E00 	    mov r0,#TK_INTGR  
 670 04d0 1146     	    mov r1,r2 
 671 04d2 02E0     	    b 9f 
 672              	7: // not a number 
 673 04d4 0B46     	    mov r3,r1 // restore r3 
 674 04d6 80EA0000 	    eor r0,r0 // TK_NONE 
 675 04da 0040     	9:  ands r0,r0 // to set zero flag 
ARM GAS  tinyBasic.s 			page 25


 676 04dc C0BC     	    pop {r6,r7}
 677 04de 7047     	    _RET 
 678              	
 679              	/*********************************************
 680              	    parse_quote 
 681              	    parse quoted string 
 682              	    input: 
 683              	      r3 		tib index  
 684              	      T1    tib adr
 685              	      T2    insert point in pad  
 686              	    output:
 687              	      r0     token attribute 
 688              	      r1 		*str 
 689              	      r3     tib index updated    
 690              	      T2     updated 
 691              	      use:
 692              	*********************************************/
 693              	    _FUNC parse_quote
 694 04e0 4DF8049D 	    push {T2} 
 695 04e4 18F80300 	1:  ldrb r0,[T1,r3]
 696 04e8 03F10103 	    add r3,#1 
 697 04ec 2228     	    cmp r0,#'"'
 698 04ee 09D0     	    beq 9f 
 699 04f0 5C28     	    cmp r0,#'\\'
 700 04f2 04D1     	    bne 2f 
 701 04f4 00B500F0 	    _CALL get_escaped_char 
 701      0DF85DF8 
 701      04EB
 702 04fe 09F8010B 	2:  strb r0,[T2],#1
 703 0502 EFE7     	    b 1b 
 704 0504 80EA0000 	9:  eor  r0,r0
 705 0508 09F8010B 	    strb r0,[T2],#1
 706 050c 4FF00200 	    mov r0,#TK_QSTR
 707 0510 02BC     	    pop {r1}
 708 0512 7047     	    _RET 
 709              	
 710              	/**********************************************
 711              	    get_escaped_char 
 712              	    convert "\c" in quoted string 
 713              	    input:
 714              	      r0 
 715              	      r3   index 
 716              	      T1   tib 
 717              	    output:
 718              	      r0   replacement char
 719              	      r3   updated 
 720              	    use:
 721              	      r1   *table 
 722              	      r2   temp 
 723              	**********************************************/
 724              	    _FUNC get_escaped_char 
 725 0514 06B4     	    push {r1,r2}
 726 0516 18F80300 	    ldrb r0,[T1,r3]
 727 051a 03F10103 	    add r3,#1
 728 051e 2228     	    cmp r0,#'"' 
 729 0520 0BD0     	    beq 9f 
 730 0522 DFF87C18 	1:  ldr r1,=escaped 
ARM GAS  tinyBasic.s 			page 26


 731 0526 11F8012B 	2:  ldrb r2,[r1],#1
 732 052a 12B1     	    cbz r2,6f 
 733 052c 8242     	    cmp r2,r0 
 734 052e 02D0     	    beq 7f 
 735 0530 F9E7     	    b 2b
 736 0532 A0F10702 	6:  sub r2,r0,#7     
 737 0536 02F10700 	7:  add r0,r2,#7
 738 053a 06BC     	9:  pop {r1,r2}   
 739 053c 7047     	    _RET
 740              	
 741 053e 6162746E 	escaped: .asciz "abtnvfr"
 741      76667200 
 742              	
 743              	/*********************************************
 744              	   skip character in TIB 
 745              	   input:
 746              	      r0    character to skip 
 747              	      r3    tib index 
 748              	      T1    tib adr
 749              	    output: 
 750              	      r3    updated
 751              	    use:
 752              	      r1     
 753              	**********************************************/   
 754 0546 00BF     	    _FUNC skip
 755 0548 02B4     	    push {r1} 
 756 054a 18F80310 	1:  ldrb r1,[T1,r3]
 757 054e 8142     	    cmp r1,r0
 758 0550 02D1     	    bne 2f
 759 0552 03F10103 	    add r3,#1 
 760 0556 F8E7     	    b 1b 
 761 0558 2360     	2:  str r3,[UPP,#IN_SAVED]
 762 055a 02BC     	    pop {r1}
 763 055c 7047     	    _RET
 764              	
 765              	/********************************************
 766              	    upper
 767              	    convert character in upper case 
 768              	    input: 
 769              	      r0   character 
 770              	    output:
 771              	      r0   upper case character 
 772              	*********************************************/
 773 055e 00BF     	    _FUNC upper 
 774 0560 6128     	    cmp r0,#'a' 
 775 0562 03DB     	    blt 9f 
 776 0564 7A28     	    cmp r0,#'z' 
 777 0566 01DC     	    bgt 9f 
 778 0568 00F05F00 	    and r0,#0x5f 
 779 056c 7047     	9:  _RET 
 780              	
 781              	/***************************************
 782              	   is_digit 
 783              	   check if char is decimal digit.
 784              	   convert to decimal digit.
 785              	   input:
 786              	      r0    char 
ARM GAS  tinyBasic.s 			page 27


 787              	   output:
 788              	      r0    if !Z then converted digit 
 789              	      Z     0 true | 1 false  
 790              	***************************************/
 791 056e 00BF     	    _GBL_FUNC is_digit 
 792 0570 02B4     	    push {r1} 
 793 0572 81EA0101 	    eor r1,r1 
 794 0576 3028     	    cmp r0,#'0' 
 795 0578 05DB     	    blt 9f
 796 057a 3A28     	    cmp r0,'9'+1
 797 057c 03D5     	    bpl 9f 
 798 057e 4FF0FF31 	    mov r1,#-1
 799 0582 A0F13000 	    sub r0,#'0'  
 800              	9:   
 801 0586 0940     	    ands r1,r1
 802 0588 02BC     	    pop {r1} 
 803 058a 7047     	    _RET 
 804              	
 805              	/***************************************
 806              	    is_hex 
 807              	    check for hexadecimal digit 
 808              	    convert to hex digit.
 809              	    input:
 810              	      r0    
 811              	    output:
 812              	      r0     if !Z then converted digit 
 813              	      Z      0 true | 1 false         
 814              	***************************************/
 815              	    _FUNC is_hex 
 816 058c 02B4     	    push {r1}
 817 058e 4FF0FF31 	    mov r1,#-1 
 818 0592 4128     	    cmp r0,#'A' 
 819 0594 01D4     	    bmi 1f 
 820 0596 A0F10700 	    sub r0,#7 
 821 059a A0F13000 	1:  sub r0,#'0'
 822 059e 01D4     	    bmi 2f 
 823 05a0 1028     	    cmp r0,#16
 824 05a2 01D4     	    bmi 9f 
 825 05a4 81EA0101 	2:  eor r1,r1  
 826 05a8 0940     	9:  ands r1,r1 
 827 05aa 02BC     	    pop {r1}
 828 05ac 7047     	    _RET 
 829              	
 830              	/***************************************
 831              	    is_bit 
 832              	    check if char is '0'|'1' 
 833              	    convert to binary digit. 
 834              	    input:
 835              	      r0    
 836              	    output:
 837              	      r0     if !Z then converted digit 
 838              	      Z      0 true | 1 false         
 839              	***************************************/
 840 05ae 00BF     	    _FUNC is_bit
 841 05b0 02B4     	    push  {r1}
 842 05b2 4FF0FF31 	    mov r1,#-1 
 843 05b6 A0F13000 	    sub r0,#'0' 
ARM GAS  tinyBasic.s 			page 28


 844 05ba 01D4     	    bmi 2f 
 845 05bc 0229     	    cmp r1,#2
 846 05be 01D4     	    bmi 9f 
 847 05c0 81EA0101 	2:  eor r1,r1 
 848 05c4 0940     	9:  ands r1,r1 
 849 05c6 02BC     	    pop {r1}
 850 05c8 7047     	    _RET 
 851              	
 852              	/***************************************
 853              	    is_alpha 
 854              	    check if character is {A..Z} 
 855              	  input:
 856              	    r0   character 
 857              	  output: 
 858              	    r0    same character 
 859              	    Z    0 true | 1 false  
 860              	****************************************/
 861 05ca 00BF     	    _FUNC is_alpha
 862 05cc 02B4     	    push {r1} 
 863 05ce 4FF0FF31 	    mov r1,#-1 
 864 05d2 4128     	    cmp r0,#'A' 
 865 05d4 01DB     	    blt 8f 
 866 05d6 5B28     	    cmp r0,#'Z'+1 
 867 05d8 01D4     	    bmi 9f 
 868 05da 81EA0101 	8:  eor r1,r1  
 869 05de 0940     	9:  ands r1,r1 
 870 05e0 02BC     	    pop {r1}
 871 05e2 7047     	    _RET 
 872              	
 873              	/***************************************
 874              	    is_num 
 875              	    check if character is {0..9} 
 876              	  input:
 877              	    r0   character 
 878              	  output: 
 879              	    r0    same character 
 880              	    Z    0 true | 1 false  
 881              	****************************************/
 882              	    _FUNC is_num 
 883 05e4 02B4     	    push {r1} 
 884 05e6 4FF0FF31 	    mov r1,#-1 
 885 05ea 3028     	    cmp r0,#'0' 
 886 05ec 01DB     	    blt 8f 
 887 05ee 3A28     	    cmp r0,#'9'+1 
 888 05f0 01D4     	    bmi 9f 
 889 05f2 81EA0101 	8:  eor r1,r1  
 890 05f6 0940     	9:  ands r1,r1 
 891 05f8 02BC     	    pop {r1}
 892 05fa 7047     	    _RET 
 893              	
 894              	/*****************************************
 895              	    is_alnum 
 896              	    check if character is alphanumeric 
 897              	    input:
 898              	      r0 
 899              	    output:
 900              	      r0     same 
ARM GAS  tinyBasic.s 			page 29


 901              	      Z      1 false | 0 true 
 902              	*****************************************/
 903              	    _FUNC is_alnum 
 904 05fc 00B5FFF7 	    _CALL is_alpha 
 904      E5FF5DF8 
 904      04EB
 905 0606 04D1     	    bne 9f 
 906 0608 00B5FFF7 	    _CALL is_num 
 906      EBFF5DF8 
 906      04EB
 907 0612 7047     	9:  _RET 
 908              	
 909              	
 910              	/*****************************************
 911              	    parse_keyword 
 912              	    parse work and ckeck if in dictionary 
 913              	    input:
 914              	      r0    first character 
 915              	      r3    tib index 
 916              	      t1    tib 
 917              	      t2    pad 
 918              	    output:
 919              	      r3    updated 
 920              	      t1    updated 
 921              	      t2    updated   
 922              	    use:
 923              	    
 924              	*****************************************/
 925              	    _FUNC parse_keyword 
 926 0614 4DF8049D 	    push {T2}
 927 0618 18F80300 	    ldrb r0,[T1,r3]
 928 061c 03F10103 	    add r3,#1
 929 0620 F8B1     	    cbz r0,2f 
 930 0622 00B5FFF7 	    _CALL upper 
 930      9CFF5DF8 
 930      04EB
 931 062c 00B5FFF7 	    _CALL is_alpha 
 931      CDFF5DF8 
 931      04EB
 932 0636 3FD0     	    beq syntax_error 
 933 0638 09F8010B 	    strb r0,[T2],#1
 934 063c 18F80300 	1:  ldrb r0,[T1,r3]
 935 0640 03F10103 	    add r3,#1 
 936 0644 68B1     	    cbz r0,2f 
 937 0646 00B5FFF7 	    _CALL upper 
 937      8AFF5DF8 
 937      04EB
 938 0650 00B5FFF7 	    _CALL is_alnum
 938      D3FF5DF8 
 938      04EB
 939 065a 02D0     	    beq 2f 
 940 065c 09F8010B 	    strb r0,[T2],#1
 941 0660 ECE7     	    b 1b 
 942 0662 A3F10103 	2:  sub r3,#1
 943 0666 80EA0000 	    eor r0,r0
 944 066a 89F80000 	    strb r0,[T2] 
 945 066e 0098     	    ldr r0,[sp]
ARM GAS  tinyBasic.s 			page 30


 946 0670 4178     	    ldrb r1,[r0,#1] 
 947 0672 29B9     	    cbnz r1,3f
 948 0674 0178     	    ldrb r1,[r0]
 949 0676 A1F14101 	    sub r1,#'A'
 950 067a 4FF00400 	    mov r0,#TK_VAR
 951 067e 08E0     	    b 9f 
 952 0680 DFF82017 	3:  ldr r1,=kword_dict  
 953 0684 00B500F0 	    _CALL search_dict 
 953      7BF85DF8 
 953      04EB
 954 068e 00B9     	    cbnz r0,9f 
 955 0690 12E0     	    b syntax_error 
 956 0692 5DF8049B 	9:  pop {T2}
 957 0696 7047     	    _RET 
 958              	
 959              	
 960              	/*******************
 961              	    DECOMPILER 
 962              	*******************/
 963              	
 964              	/**********************************
 965              	    cmd_name 
 966              	    reverse dictionary search 
 967              	    from CMD_IDX to NAME 
 968              	  input:
 969              	    r0    CMD_IDX 
 970              	  output:
 971              	    r0    *NAME | 0 
 972              	  use:
 973              	    r1    dictionary link
 974              	    r2    tmp 
 975              	**********************************/
 976              	    _FUNC cmd_name
 977 0698 06B4     	    push {r1,r2}
 978 069a DFF80817 	    ldr r1,=kword_dict  
 979 069e 0A78     	1:  ldrb r2,[r1]
 980 06a0 3AB1     	    cbz r2,3f 
 981 06a2 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 982 06a6 9042     	    cmp r0,r2 
 983 06a8 02D0     	    beq 2f 
 984 06aa 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 985 06ae F6E7     	    b 1b
 986 06b0 0A46     	2:  mov r2,r1
 987 06b2 1046     	3:  mov r0,r2 
 988 06b4 06BC     	    pop {r1,r2}
 989 06b6 7047     	    _RET 
 990              	
 991              	
 992              	/**********************************
 993              	      BASIC commands 
 994              	**********************************/
 995              	
 996              	/*********************************
 997              	    syntax_error 
 998              	    display syntax error message and 
 999              	    abort program 
 1000              	  input:
ARM GAS  tinyBasic.s 			page 31


 1001              	    none  
 1002              	  output: 
 1003              	    none 
 1004              	  use:
 1005              	*********************************/
 1006              	    _FUNC syntax_error 
 1007 06b8 4FF00200 	    mov r0,#ERR_SYNTAX
 1008 06bc 00E0     	    b tb_error 
 1009              	
 1010              	/*********************************
 1011              	    tb_error 
 1012              	    display BASIC error and 
 1013              	    abort program. 
 1014              	  input:
 1015              	    r0    error code   
 1016              	  output: 
 1017              	    none 
 1018              	  use:
 1019              	    r1    temp 
 1020              	*********************************/
 1021 06be 00BF     	    _FUNC tb_error 
 1022 06c0 DFF8E416 	    ldr r1,=err_msg 
 1023 06c4 4FEA8000 	    lsl r0,#2 
 1024 06c8 0858     	    ldr r0,[r1,r0]
 1025 06ca 00B5FFF7 	    _CALL uart_puts
 1025      FEFF5DF8 
 1025      04EB
 1026 06d4 206C     	    ldr r0,[UPP,#FLAGS]
 1027 06d6 10F0200F 	    tst r0,#FCOMP
 1028 06da 00D1     	    bne compile_error
 1029              	interpret_error:
 1030              	    
 1031 06dc 26E1     	    b warm_start 
 1032              	compile_error:
 1033 06de A068     	    ldr r0,[UPP,#BASICPTR]
 1034 06e0 00B5FFF7 	    _CALL uart_puts 
 1034      FEFF5DF8 
 1034      04EB
 1035 06ea 2068     	    ldr r0,[UPP,#IN_SAVED]
 1036 06ec 00B5FFF7 	    _CALL spaces 
 1036      FEFF5DF8 
 1036      04EB
 1037 06f6 4FF05E00 	    mov r0,#'^' 
 1038 06fa 00B5FFF7 	    _CALL uart_putc
 1038      FEFF5DF8 
 1038      04EB
 1039 0704 4FF00D00 	    mov r0,#CR 
 1040 0708 00B5FFF7 	    _CALL uart_putc   
 1040      FEFF5DF8 
 1040      04EB
 1041 0712 0BE1     	    b  warm_start  
 1042              	    
 1043              	err_msg:
 1044 0714 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1044      00000000 
 1044      0D000000 
 1044      1B000000 
ARM GAS  tinyBasic.s 			page 32


 1044      34000000 
 1045 072c 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1045      6F000000 
 1045      89000000 
 1045      9A000000 
 1045      AB000000 
 1046 0740 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1046      EA000000 
 1046      FA000000 
 1046      0E010000 
 1046      21010000 
 1047              	
 1048              	    .section .rodata.tb_error 
 1049              	
 1050 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1050      72792066 
 1050      756C6C0A 
 1050      00
 1051 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1051      61782065 
 1051      72726F72 
 1051      0A00
 1052 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1052      206F7065 
 1052      72617469 
 1052      6F6E206F 
 1052      76657266 
 1053 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1053      73696F6E 
 1053      20627920 
 1053      300A00
 1054 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1054      6C696420 
 1054      6C696E65 
 1054      206E756D 
 1054      6265722E 
 1055 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1055      74696D65 
 1055      206F6E6C 
 1055      79207573 
 1055      6167652E 
 1056 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1056      616E6420 
 1056      6C696E65 
 1056      206F6E6C 
 1056      79207573 
 1057 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1057      69636174 
 1057      65206E61 
 1057      6D652E0A 
 1057      00
 1058 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1058      206E6F74 
 1058      20666F75 
 1058      6E642E0A 
 1058      00
 1059 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
ARM GAS  tinyBasic.s 			page 33


 1059      76616C75 
 1059      652E0A00 
 1060 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1060      20696E20 
 1060      65787465 
 1060      6E646564 
 1060      206D656D 
 1061 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1061      61746120 
 1061      666F756E 
 1061      642E0A00 
 1062 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1062      726F6772 
 1062      616D2069 
 1062      6E205241 
 1062      4D210A00 
 1063 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1063      20737973 
 1063      74656D20 
 1063      66756C6C 
 1063      2E0A00
 1064 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1064      65722066 
 1064      756C6C0A 
 1064      00
 1065              	
 1066 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1066      2074696D 
 1066      65206572 
 1066      726F722C 
 1066      2000
 1067 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1067      70696C65 
 1067      20657272 
 1067      6F722C20 
 1067      00
 1068 0151 6C617374 	tk_id: .asciz "last token id: "
 1068      20746F6B 
 1068      656E2069 
 1068      643A2000 
 1069              	
 1070              	
 1071              	    .section  .text , "ax", %progbits 
 1072              	
 1073              	/*********************************
 1074              	   BASIC: BTGL adr, mask   
 1075              	   toggle bits [adr]=[adr]^mask  
 1076              	   input:
 1077              	     r0    adr 
 1078              	     r1    mask 
 1079              	    output;
 1080              	      none 
 1081              	    use:
 1082              	      T1   temp
 1083              	      T2   temp  
 1084              	*******************************/     
 1085              	    _FUNC BTGL 
ARM GAS  tinyBasic.s 			page 34


 1086              	
 1087 0754 7047     	    _RET 
 1088              	
 1089              	/***************************************
 1090              	   kword_cmp
 1091              	   compare keyword to dict entry
 1092              	  input:
 1093              	    r0  keyword 
 1094              	    r1  dict entry 
 1095              	    r2  character count 
 1096              	  output:
 1097              	    r0  0 not same | -1 same 
 1098              	  use:
 1099              	    r6   result  
 1100              	    T1   char 1
 1101              	    T2   char 2
 1102              	**************************************/   
 1103 0756 00BF     	    _FUNC kword_cmp 
 1104 0758 2DE94003 	    push {r6,T1,T2}
 1105 075c 4FF0FF36 	    mov r6,#-1 
 1106 0760 4AB1     	1:  cbz r2,9f       
 1107 0762 10F8018B 	    ldrb T1,[r0],#1
 1108 0766 11F8019B 	    ldrb T2,[r1],#1
 1109 076a A2F10102 	    sub r2,#1
 1110 076e C845     	    cmp T1,T2
 1111 0770 F6D0     	    beq 1b 
 1112 0772 86EA0606 	    eor r6,r6  
 1113 0776 3046     	9:  mov r0,r6
 1114 0778 BDE84003 	    pop {r6,T1,T2}
 1115 077c 7047     	    _RET 
 1116              	
 1117              	/***********************************************
 1118              	    search_dict 
 1119              	    search keyword in dictionary
 1120              	   input:
 1121              	  	 r0   keyword 
 1122              	     r1		dictionary first name field address  
 1123              	   output:
 1124              	     r0 		token attribute 
 1125              	     r1		  cmd_index if r0!=TK_NONE  
 1126              	   use:
 1127              	     r3   length keyword 
 1128              	     T1   keyword
 1129              	     T2   link  
 1130              	**********************************************/
 1131 077e 00BF     	  _FUNC search_dict
 1132 0780 2DE90C03 	  push {r2,r3,T1,T2}
 1133 0784 8046     	  mov T1,r0 
 1134 0786 00B5FFF7 	  _CALL strlen 
 1134      FEFF5DF8 
 1134      04EB
 1135 0790 0346     	  mov r3,r0  
 1136              	1:  
 1137 0792 8946     	   mov T2,r1  // keep for linking   
 1138 0794 0878     	   ldrb r0,[r1] 
 1139 0796 78B1     	   cbz r0,9f // null byte, end of dictionary
 1140 0798 4046     	   mov r0,T1
ARM GAS  tinyBasic.s 			page 35


 1141 079a 1A46     	   mov r2,r3   
 1142 079c 00B5FFF7 	   _CALL kword_cmp  
 1142      DBFF5DF8 
 1142      04EB
 1143 07a6 18B9     	   cbnz r0,2f 
 1144 07a8 4946     	   mov r1,T2
 1145 07aa 51F80C1C 	   ldr r1,[r1,#-12]
 1146 07ae F0E7     	   b 1b   
 1147              	2: // found
 1148 07b0 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1149 07b4 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1150 07b8 BDE80C03 	9: pop {r2,r3,T1,T2}
 1151 07bc 7047     	   _RET 
 1152              	
 1153              	/**************************
 1154              	    INTERPRETER 
 1155              	*************************/
 1156              	
 1157              	/*********************************
 1158              	   cold_start 
 1159              	   initialize BASIC interpreter 
 1160              	   never leave 
 1161              	   input:
 1162              	     none 
 1163              	   output:
 1164              	    none 
 1165              	*********************************/
 1166              	  .type cold_start, %function 
 1167              	  .global cold_start 
 1168              	cold_start: 
 1169 07be 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1169      C2F20004 
 1170 07c6 1048     	    ldr r0,src_addr 
 1171 07c8 1049     	    ldr r1,dest_addr
 1172 07ca 0968     	    ldr r1,[r1] 
 1173 07cc 0C44     	    add UPP,r1 // system variables base address   
 1174              	// clear RAM
 1175 07ce 2046     	    mov r0,UPP  
 1176 07d0 DFF84611 	    ldr r1,tib 
 1177 07d4 82EA0202 	    eor r2,r2 
 1178 07d8 40F8042B 	1:  str r2,[r0],#4 
 1179 07dc 8842     	    cmp r0,r1 
 1180 07de FBD4     	    bmi 1b 
 1181              	//copy initialized system variables to ram 
 1182 07e0 0948     	    ldr r0,src_addr 
 1183 07e2 2146     	    mov r1,UPP 
 1184 07e4 DFF82820 	    ldr r2,sysvar_size
 1185 07e8 00B5FFF7 	    _CALL cmove
 1185      FEFF5DF8 
 1185      04EB
 1186 07f2 00B500F0 	    _CALL prt_version
 1186      0EF85DF8 
 1186      04EB
 1187 07fc 00B500F0 	    _CALL clear_basic  
 1187      5DF85DF8 
 1187      04EB
 1188 0806 91E0     	    b warm_start    
ARM GAS  tinyBasic.s 			page 36


 1189              	src_addr:
 1190 0808 00000000 	  .word uzero
 1191              	dest_addr:
 1192 080c 00000000 	  .word vectors_size
 1193 0810 CC000000 	sysvar_size: .word ulast-uzero 
 1194              	
 1195              	/************************************
 1196              	    print firmware version 
 1197              	    input: 
 1198              	      none 
 1199              	    output:
 1200              	      none 
 1201              	    use:
 1202              	      r0 
 1203              	***********************************/
 1204              	    _FUNC prt_version 
 1205 0814 DFF89405 	    ldr r0,=version_msg 
 1206 0818 00B5FFF7 	    _CALL uart_puts
 1206      FEFF5DF8 
 1206      04EB
 1207 0822 9FF87800 	    ldrb r0,version 
 1208 0826 4FEA1010 	    lsr r0,#4 
 1209 082a 00F13000 	    add r0,#'0' 
 1210 082e 3A28     	    cmp r0,#'9'+1 
 1211 0830 01D4     	    bmi 1f 
 1212 0832 00F10700 	    add r0,#7 
 1213              	  1:
 1214 0836 00B5FFF7 	    _CALL uart_putc 
 1214      FEFF5DF8 
 1214      04EB
 1215 0840 4FF02E00 	    mov r0,#'. 
 1216 0844 00B5FFF7 	    _CALL uart_putc 
 1216      FEFF5DF8 
 1216      04EB
 1217 084e 9FF84C00 	    ldrb r0,version 
 1218 0852 00F00F00 	    and r0,#15 
 1219 0856 00F13000 	    add r0,'0' 
 1220 085a 3A28     	    cmp r0,#'9'+1 
 1221 085c 01D4     	    bmi 1f 
 1222 085e 00F10700 	    add r0,#7
 1223              	  1: 
 1224 0862 00B5FFF7 	    _CALL uart_putc 
 1224      FEFF5DF8 
 1224      04EB
 1225 086c 4FF00D00 	    mov r0,#CR 
 1226 0870 00B5FFF7 	    _CALL uart_putc 
 1226      FEFF5DF8 
 1226      04EB
 1227 087a 7047     	    _RET  
 1228              	version_msg:
 1229 087c 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1229      65207069 
 1229      6C6C2074 
 1229      696E7920 
 1229      42415349 
 1230              	version:
 1231 089c 10       	    .byte 0x10 
ARM GAS  tinyBasic.s 			page 37


 1232 089d 0000BF   	    .p2align 2 
 1233              	
 1234              	
 1235              	/*****************************
 1236              	    clear_vars 
 1237              	    initialize variables to 0
 1238              	  input:
 1239              	    none 
 1240              	  output:
 1241              	    none 
 1242              	  use:
 1243              	    r0,r1,r2 
 1244              	*****************************/
 1245              	    _FUNC clear_vars 
 1246 08a0 07B4     	    push {r0,r1,r2}
 1247 08a2 80EA0000 	    eor r0,r0 
 1248 08a6 04F16001 	    add r1,UPP,#VARS
 1249 08aa 4FF01A02 	    mov r2,#26
 1250 08ae 41F8040B 	1:  str r0,[r1],#4 
 1251 08b2 013A     	    subs r2,#1
 1252 08b4 FBD1     	    bne 1b  
 1253 08b6 07BC     	    pop {r0,r1,r2}
 1254 08b8 7047     	    _RET 
 1255              	
 1256              	/*****************************
 1257              	   clear_basic 
 1258              	   reset BASIC system variables 
 1259              	   and clear variables 
 1260              	*****************************/
 1261 08ba 00BF     	    _FUNC clear_basic
 1262 08bc 80EA0000 	  	eor r0,r0
 1263 08c0 2064     	    str r0,[UPP,#FLAGS] 
 1264 08c2 6060     	    str r0,[UPP,#COUNT]
 1265 08c4 2060     	    str r0,[UPP,#IN_SAVED]
 1266 08c6 A060     	    str r0,[UPP,#BASICPTR]
 1267 08c8 E060     	    str r0,[UPP,#DATAPTR]
 1268 08ca 2061     	    str r0,[UPP,#DATA]
 1269 08cc 6061     	    str r0,[UPP,#DATALEN]
 1270 08ce 04F1CC00 	    add r0,UPP,#BASIC_START 
 1271 08d2 00F11000 	    add r0,#16 
 1272 08d6 6FF00F01 	    mvn r1,#15
 1273 08da 00EA0100 	    and r0,r1 
 1274 08de 2063     	    str r0,[UPP,#TXTBGN]
 1275 08e0 6063     	    str r0,[UPP,#TXTEND]
 1276 08e2 00B5FFF7 	    _CALL clear_vars 
 1276      DCFF5DF8 
 1276      04EB
 1277 08ec 7047     	    _RET  
 1278              	
 1279              	/***********************************
 1280              	   warm_init 
 1281              	   initialize interpreter context 
 1282              	  input:
 1283              	    none
 1284              	  output:
 1285              	    none 
 1286              	  use:
ARM GAS  tinyBasic.s 			page 38


 1287              	    r0 
 1288              	***********************************/
 1289              	warm_init:
 1290              	// reset data stack       
 1291 08ee DFF826C0 	    ldr DP,dstack 
 1292 08f2 4FF0000A 	    mov IN,#0 // BASIC line index 
 1293 08f6 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1294 08fa 80EA0000 	    eor r0,r0 
 1295 08fe 6060     	    str r0,[UPP,#COUNT]  
 1296 0900 2064     	    str r0,[UPP,#FLAGS]
 1297 0902 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1298 0904 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1299 0908 6064     	    str r0,[UPP,#TAB_WIDTH]
 1300 090a 4FF00A00 	    mov r0,#10 // default base decimal 
 1301 090e A061     	    str r0,[UPP,#BASE]
 1302 0910 7047     	    _RET  
 1303              	
 1304 0912 00000000 	mstack: .word _mstack 
 1305 0916 00000000 	dstack: .word _dstack 
 1306 091a 00000000 	tib: .word _tib 
 1307 091e 00000000 	pad: .word _pad 
 1308 0922 FCFFFFFF 	array: .word _pad - 4 
 1309 0926 52454144 	ready: .asciz "READY" 
 1309      5900
 1310              	
 1311              	/**********************************
 1312              	    warm_start 
 1313              	    start BASIC interpreter doesn't  
 1314              	    reset variables and code space 
 1315              	  input:
 1316              	    none 
 1317              	  output:
 1318              	    none 
 1319              	**********************************/
 1320              	    _FUNC warm_start 
 1321              	// initialise parameters stack
 1322 092c FFF7DFFF 	    bl warm_init
 1323              	// reset main stack 
 1324 0930 5FF82200 	    ldr r0,mstack
 1325 0934 8546     	    mov sp,r0 
 1326 0936 DFF87804 	    ldr r0,=ready 
 1327 093a 00B5FFF7 	    _CALL uart_puts 
 1327      FEFF5DF8 
 1327      04EB
 1328              	// fall in cmd_line 
 1329              	
 1330              	/**********************************
 1331              	   cmd_line 
 1332              	   shell command line 
 1333              	   input:
 1334              	      none 
 1335              	   output:
 1336              	      none 
 1337              	   use:
 1338              	
 1339              	***********************************/
 1340              	    _FUNC cmd_line 
ARM GAS  tinyBasic.s 			page 39


 1341 0944 4FF00D00 	    mov r0,#CR 
 1342 0948 00B5FFF7 	    _CALL uart_putc 
 1342      FEFF5DF8 
 1342      04EB
 1343 0952 5FF83A00 	1:  ldr r0,tib
 1344 0956 4FF05001 	    mov r1,#TIB_SIZE 
 1345 095a 00B5FFF7 	    _CALL readln 
 1345      FEFF5DF8 
 1345      04EB
 1346 0964 0940     	    ands r1,r1 // empty line 
 1347 0966 F4D0     	    beq 1b 
 1348 0968 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1348      73FC5DF8 
 1348      04EB
 1349 0972 EED0     	    beq 1b  // tokens stored in text area 
 1350              	// interpret tokenized line 
 1351              	interpreter:
 1352              	/*
 1353              	   ldr r0,[UPP,#COUNT]
 1354              	   cmp IN,r0  
 1355              	   bmi interp_loop
 1356              	// end of line reached     
 1357              	next_line:
 1358              	  ldr r0,[UPP,#FLAGS]
 1359              	  tst r0,#FRUN 
 1360              	  beq cmd_line 
 1361              	  ldr r0,[UPP,#COUNT]
 1362              	  add BPTR,r0 
 1363              	  ldr r0,[UPP,#TXTEND]
 1364              	  cmp BPTR,r0 
 1365              	  bmi 1f 
 1366              	  b warm_start 
 1367              	1:
 1368              	  mov IN,#3
 1369              	*/ 
 1370              	interp_loop:
 1371 0974 00B500F0 	  _CALL next_token 
 1371      1DF85DF8 
 1371      04EB
 1372 097e 0028     	  cmp r0,#TK_NONE 
 1373 0980 D4D0     	  beq warm_start  
 1374 0982 0A28     	  cmp r0,#TK_CMD 
 1375 0984 03D1     	  bne 2f
 1376 0986 0846     	  mov r0,r1 
 1377 0988 00F00EF8 	  bl execute  
 1378 098c F2E7     	  b interp_loop   
 1379              	2: 
 1380 098e 0428     	  cmp r0,#TK_VAR 
 1381 0990 02D1     	  bne 3f 
 1382 0992 00F0C3B8 	  b let_var 
 1383 0996 EDE7     	  b interp_loop 
 1384              	3: 
 1385 0998 0528     	  cmp r0,#TK_ARRAY 
 1386 099a 02D1     	  bne 4f
 1387 099c 00F0C9B8 	  b let_array 
 1388 09a0 E8E7     	  b interp_loop
 1389              	4: 
ARM GAS  tinyBasic.s 			page 40


 1390 09a2 0128     	  cmp r0,#TK_COLON
 1391 09a4 E6D0     	  beq interp_loop
 1392 09a6 87E6     	  b syntax_error
 1393              	
 1394              	/*****************************
 1395              	    execute 
 1396              	    execute a BASIC routine from 
 1397              	    its token value 
 1398              	  input:
 1399              	    r0  BASIC SUB|FUNC token  
 1400              	  output: 
 1401              	    depend on SUB|FUNc
 1402              	*****************************/
 1403              	    _FUNC execute 
 1404 09a8 DFF80814 	    ldr r1,=fn_table 
 1405 09ac 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1406 09b0 0047     	    bx r0 
 1407              	
 1408              	/*************************************
 1409              	  next_token 
 1410              	  extract next token from token list 
 1411              	  input:
 1412              	    none 
 1413              	  output:
 1414              	    r0    token attribute
 1415              	    r1    token value if there is one 
 1416              	  use:
 1417              	    T1    exit token type  
 1418              	****************************/
 1419 09b2 00BF     	    _FUNC next_token 
 1420 09b4 4DF8048D 	    push {T1}
 1421 09b8 88EA0808 	    eor T1,T1 // TK_NONE 
 1422 09bc 6068     	    ldr r0,[UPP,#COUNT]
 1423 09be 8245     	    cmp IN,r0 
 1424 09c0 0BD4     	    bmi 0f
 1425 09c2 BBF80010 	    ldrh r1,[BPTR] // line #
 1426 09c6 99B3     	    cbz r1, 9f  // command line  
 1427 09c8 8344     	    add BPTR,r0 // next line 
 1428 09ca 606B     	    ldr r0,[UPP,#TXTEND]
 1429 09cc 8345     	    cmp BPTR,r0 
 1430 09ce 2FD5     	    bpl 9f // end of program
 1431 09d0 9BF80200 	    ldrb r0,[BPTR,#2]
 1432 09d4 6060     	    str r0,[UPP,#COUNT] 
 1433 09d6 4FF0030A 	    mov IN,#3   
 1434              	0: 
 1435 09da C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1436 09de C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1437 09e2 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1438 09e6 0AF1010A 	    add IN,#1  
 1439 09ea 8046     	    mov T1,r0 
 1440 09ec 00F03F00 	    and r0,#0x3f // limit mask 
 1441 09f0 F149     	    ldr r1,=tok_jmp 
 1442 09f2 D1E800F0 	    tbb [r1,r0]
 1443              	1: // pc reference point 
 1444 09f6 1BE0     	    b 9f 
 1445              	2: // .byte param
 1446 09f8 1BF80A10 	    ldrb r1,[BPTR,IN]
ARM GAS  tinyBasic.s 			page 41


 1447 09fc 0AF1010A 	    add IN,#1 
 1448 0a00 16E0     	    b 9f 
 1449              	3: // .hword param 
 1450 0a02 3BF80A10 	    ldrh r1,[BPTR,IN]
 1451 0a06 0AF1020A 	    add IN,#2 
 1452 0a0a 11E0     	    b 9f 
 1453              	4: // .word param  
 1454 0a0c 5BF80A10 	    ldr r1,[BPTR,IN]
 1455 0a10 0AF1040A 	    add IN,#4
 1456 0a14 0CE0     	    b 9f 
 1457              	5: // .asciz param 
 1458 0a16 0BEB0A01 	    add r1,BPTR,IN 
 1459 0a1a 0846     	    mov r0,r1  
 1460 0a1c 00B5FFF7 	    _CALL strlen 
 1460      FEFF5DF8 
 1460      04EB
 1461 0a26 8244     	    add IN,r0
 1462 0a28 0AF1010A 	    add IN,#1
 1463 0a2c 00E0     	    b 9f  
 1464              	8: // syntax error 
 1465 0a2e 43E6     	    b syntax_error 
 1466 0a30 4046     	9:  mov r0,T1  
 1467 0a32 5DF8048B 	    pop {T1}
 1468 0a36 7047     	    _RET
 1469              	
 1470              	  .p2align 2
 1471              	tok_jmp: // token id  tbb offset 
 1472 0a38 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1473 0a3a 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1474 0a3e 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1475 0a42 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1476 0a46 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1477 0a4a 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1477      1C
 1478 0a4f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1478      1C1C
 1479 0a55 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1480 0a58 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1481 0a5b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1481      1C1C1C1C 
 1482 0a63 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1482      1C1C
 1483 0a69 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1483      1D1D
 1484 0a6f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1484      1C1C1C1C 
 1484      1C
 1485              	
 1486              	  .p2align 2 
 1487              	
 1488              	/*********************************
 1489              	    expect 
 1490              	    check if next token is of 
 1491              	    expected type. If not 
 1492              	    call syntax_error  
 1493              	  input:
 1494              	      r0   token attribute
ARM GAS  tinyBasic.s 			page 42


 1495              	  output:
 1496              	      r0  token attribute 
 1497              	      r1  token value
 1498              	  use:
 1499              	      T1   
 1500              	**********************************/
 1501              	    _FUNC expect 
 1502 0a78 4DF8048D 	    push {T1}
 1503 0a7c 8046     	    mov T1,r0 
 1504 0a7e 00B5FFF7 	    _CALL next_token 
 1504      98FF5DF8 
 1504      04EB
 1505 0a88 4045     	    cmp r0,T1  
 1506 0a8a 7FF415AE 	    bne syntax_error 
 1507 0a8e 5DF8048B 	    pop {T1}
 1508 0a92 7047     	    _RET 
 1509              	
 1510              	/***********************************
 1511              	    func_args 
 1512              	    get function arguments list 
 1513              	  input:
 1514              	    none 
 1515              	  output:
 1516              	    r0    arg. count 
 1517              	  use:
 1518              	
 1519              	************************************/
 1520              	    _FUNC func_args 
 1521 0a94 4FF00600 	    mov r0,#TK_LPAREN 
 1522 0a98 00B5FFF7 	    _CALL expect 
 1522      EDFF5DF8 
 1522      04EB
 1523 0aa2 00B500F0 	    _CALL arg_list 
 1523      0CF85DF8 
 1523      04EB
 1524 0aac 01B4     	    push {r0}
 1525 0aae 4FF00700 	    mov r0,#TK_RPAREN 
 1526 0ab2 00B5FFF7 	    _CALL expect 
 1526      E0FF5DF8 
 1526      04EB
 1527 0abc 01BC     	    pop {r0}
 1528 0abe 7047     	    _RET 
 1529              	
 1530              	/**********************************
 1531              	    arg_list 
 1532              	    get arguments list on dstack 
 1533              	  input:
 1534              	    none 
 1535              	  output:
 1536              	    r0    arg count
 1537              	  use:
 1538              	    T1    tmp count  
 1539              	***********************************/
 1540              	    _FUNC arg_list 
 1541 0ac0 4DF8048D 	    push {T1}
 1542 0ac4 88EA0808 	    eor T1,T1 
 1543 0ac8 00B500F0 	1:  _CALL expression 
ARM GAS  tinyBasic.s 			page 43


 1543      C9F85DF8 
 1543      04EB
 1544 0ad2 0028     	    cmp R0,#TK_NONE 
 1545 0ad4 10D0     	    beq 9f 
 1546 0ad6 0E28     	    cmp r0,#TK_INTGR
 1547 0ad8 0ED1     	    bne 9f 
 1548 0ada 4CF8041D 	    _PUSH r1 
 1549 0ade 08F10108 	    add T1,#1 
 1550 0ae2 00B5FFF7 	    _CALL next_token 
 1550      66FF5DF8 
 1550      04EB
 1551 0aec 0828     	    cmp r0,#TK_COMMA 
 1552 0aee EBD0     	    beq 1b 
 1553 0af0 D4F800A0 	    _UNGET_TOKEN 
 1553      D4F808B0 
 1554 0af8 4046     	9:  mov r0,T1 
 1555 0afa 5DF8048B 	    pop {T1}
 1556 0afe 7047     	    _RET 
 1557              	
 1558              	/***********************************
 1559              	 factor
 1560              	 arithmetick factor parser 
 1561              	 factor ::= ['+'|'-'|e]  var | @ |
 1562              				 integer | function |
 1563              				 '('expression')' 
 1564              	  input: 
 1565              	    none 
 1566              	  output:
 1567              	    r0   token attribute 
 1568              	    r1   token value 
 1569              	  use:
 1570              	    r2   temp 
 1571              	    T1   sign 
 1572              	    T2   exit token attribute 
 1573              	***********************************/
 1574              	    _FUNC factor 
 1575 0b00 2DE90403 	    push {r2,T1,T2}
 1576 0b04 4FF00E09 	    mov T2,#TK_INTGR 
 1577 0b08 4FF00108 	    mov T1,#1 // default sign +  
 1578 0b0c 00B5FFF7 	    _CALL next_token
 1578      51FF5DF8 
 1578      04EB
 1579 0b16 0246     	    mov r2,r0 
 1580 0b18 00F03000 	    and r0,#TK_GRP_MASK 
 1581 0b1c 1028     	    cmp r0,#TK_GRP_ADD
 1582 0b1e 1046     	    mov r0,r2
 1583 0b20 08D1     	    bne 1f 
 1584 0b22 1028     	    cmp r0,#TK_PLUS 
 1585 0b24 01D0     	    beq 0f 
 1586 0b26 4FF0FF38 	    mov T1,#-1 // minus sign 
 1587 0b2a 00B5FFF7 	0:  _CALL next_token
 1587      42FF5DF8 
 1587      04EB
 1588 0b34 0E28     	1:  cmp r0,#TK_INTGR 
 1589 0b36 4DD0     	    beq 8f 
 1590 0b38 0528     	    cmp r0,#TK_ARRAY 
 1591 0b3a 1ED1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 44


 1592 0b3c 4FF00600 	    mov r0,#TK_LPAREN 
 1593 0b40 00B5FFF7 	    _CALL expect 
 1593      99FF5DF8 
 1593      04EB
 1594 0b4a 00B500F0 	    _CALL expression
 1594      88F85DF8 
 1594      04EB
 1595 0b54 0E28     	    cmp r0,#TK_INTGR
 1596 0b56 7FF4AFAD 	    bne syntax_error
 1597 0b5a 8146     	    mov T2,r0
 1598 0b5c 0A46     	    mov r2,r1  
 1599 0b5e 4FF00700 	    mov r0,#TK_RPAREN
 1600 0b62 00B5FFF7 	    _CALL expect 
 1600      88FF5DF8 
 1600      04EB
 1601 0b6c 1046     	    mov r0,r2 
 1602 0b6e 00B500F0 	    _CALL get_array_element 
 1602      ECF85DF8 
 1602      04EB
 1603 0b78 2CE0     	    b 8f
 1604 0b7a 0628     	2:  cmp r0,#TK_LPAREN 
 1605 0b7c 12D1     	    bne 3f 
 1606 0b7e 00B500F0 	    _CALL expression 
 1606      6EF85DF8 
 1606      04EB
 1607 0b88 0E28     	    cmp r0,#TK_INTGR 
 1608 0b8a 7FF495AD 	    bne syntax_error
 1609 0b8e 8146     	    mov T2,r0
 1610 0b90 0A46     	    mov r2,r1   
 1611 0b92 4FF00700 	    mov r0,#TK_RPAREN
 1612 0b96 00B5FFF7 	    _CALL expect 
 1612      6EFF5DF8 
 1612      04EB
 1613 0ba0 1146     	    mov r1,r2 
 1614 0ba2 17E0     	    b 8f       
 1615 0ba4 0428     	3:  cmp r0,#TK_VAR 
 1616 0ba6 06D1     	    bne 4f
 1617 0ba8 0846     	    mov r0,r1  
 1618 0baa 00B500F0 	    _CALL get_var 
 1618      E2F85DF8 
 1618      04EB
 1619 0bb4 0EE0     	    b 8f 
 1620 0bb6 0B28     	4:  cmp r0,#TK_IFUNC 
 1621 0bb8 01D0     	    beq 5f 
 1622 0bba 0C28     	    cmp r0,#TK_CFUNC 
 1623 0bbc 03D1     	    bne 6f 
 1624 0bbe 0846     	5:  mov r0,r1  
 1625 0bc0 FFF7F2FE 	    bl execute
 1626 0bc4 06E0     	    b 8f 
 1627 0bc6 D4F800A0 	6:  _UNGET_TOKEN      
 1627      D4F808B0 
 1628 0bce 4FF00000 	    mov r0,#TK_NONE
 1629 0bd2 03E0     	    b 9f  
 1630 0bd4 08FB01F1 	8:  mul r1,T1 
 1631 0bd8 5FEA0900 	    movs r0,T2 
 1632 0bdc BDE80403 	9:  pop {r2,T1,T2}   
 1633 0be0 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 45


 1634              	
 1635              	
 1636              	/*****************************************
 1637              	    term 
 1638              	    term parser 
 1639              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1640              	    output:
 1641              	      r0  	token attribute 
 1642              	      r1		integer
 1643              	    use:
 1644              	      r2    first operand 
 1645              	      r3    temp 
 1646              	      T1    operator 
 1647              	      T2    exit token attribute 
 1648              	******************************************/
 1649 0be2 00BF     	     _FUNC term 
 1650 0be4 2DE90C03 	    push {r2,r3,T1,T2}
 1651 0be8 4FF00009 	    mov T2,#TK_NONE 
 1652 0bec 00B5FFF7 	    _CALL factor
 1652      87FF5DF8 
 1652      04EB
 1653 0bf6 60B3     	    cbz r0, 9f  // no factor   
 1654 0bf8 8146     	    mov T2,r0  // TK_INTGR 
 1655 0bfa 0A46     	    mov r2,r1 // first factor    
 1656 0bfc 00B5FFF7 	0:  _CALL next_token
 1656      D9FE5DF8 
 1656      04EB
 1657 0c06 0346     	    mov r3,r0   
 1658 0c08 00F03000 	    and r0,#TK_GRP_MASK 
 1659 0c0c 2028     	    cmp r0,#TK_GRP_MULT
 1660 0c0e 04D0     	    beq 1f
 1661 0c10 D4F800A0 	    _UNGET_TOKEN
 1661      D4F808B0 
 1662 0c18 1BE0     	    b 9f 
 1663 0c1a 9846     	1:  mov T1,r3 
 1664 0c1c 00B5FFF7 	    _CALL factor  
 1664      6FFF5DF8 
 1664      04EB
 1665 0c26 3FF447AD 	    beq syntax_error 
 1666 0c2a B8F1200F 	    cmp T1,#TK_MULT
 1667 0c2e 02D1     	    bne 2f 
 1668              	// multiplication
 1669 0c30 01FB02F2 	    mul r2,r1
 1670 0c34 E2E7     	    b 0b  
 1671 0c36 B8F1210F 	2:  cmp T1,#TK_DIV 
 1672 0c3a 02D1     	    bne 3f
 1673              	// division
 1674 0c3c 92FBF1F2 	    sdiv r2,r2,r1
 1675 0c40 DCE7     	    b 0b  
 1676              	3: // modulo
 1677 0c42 1046     	    mov r0,r2 
 1678 0c44 92FBF1F2 	    sdiv r2,r2,r1 
 1679 0c48 01FB02F2 	    mul  r2,r1 
 1680 0c4c A0EB0202 	    sub  r2,r0,r2
 1681 0c50 D4E7     	    b 0b  
 1682 0c52 1146     	9:  mov r1,r2 
 1683 0c54 5FEA0900 	    movs r0,T2 
ARM GAS  tinyBasic.s 			page 46


 1684 0c58 BDE80C03 	    pop {r2,r3,T1,T2}
 1685 0c5c 7047     	    _RET 
 1686              	
 1687              	/*****************************************
 1688              	    expression 
 1689              	    arithmetic expression parser 
 1690              	    expression ::= term [['+'|'-'] term]*
 1691              	    result range {-32768..32767}
 1692              	    output:
 1693              	      r0    TK_NONE || TK_INTGR 
 1694              	      r1 	  integer
 1695              	    use:
 1696              	      r2  left operand 
 1697              	      T1  operator 
 1698              	      T2  exit token attribute
 1699              	******************************************/
 1700 0c5e 00BF     	    _FUNC expression 
 1701 0c60 2DE90403 	    push {r2,t1,t2}
 1702 0c64 4FF00009 	    mov T2,#TK_NONE
 1703 0c68 82EA0202 	    eor r2,r2 // zero 
 1704 0c6c 00B5FFF7 	    _CALL term 
 1704      B9FF5DF8 
 1704      04EB
 1705 0c76 21D0     	    beq 9f  // no term  
 1706 0c78 0A46     	    mov r2,r1 // first term
 1707 0c7a 4FF00E09 	    mov T2,#TK_INTGR    
 1708 0c7e 00B5FFF7 	1:  _CALL next_token 
 1708      98FE5DF8 
 1708      04EB
 1709 0c88 8046     	    mov T1,r0 // token attribute 
 1710 0c8a 00F03000 	    and r0,#TK_GRP_MASK 
 1711 0c8e 1028     	    cmp r0,#TK_GRP_ADD 
 1712 0c90 04D0     	    beq 3f 
 1713 0c92 D4F800A0 	    _UNGET_TOKEN
 1713      D4F808B0 
 1714 0c9a 0FE0     	    b 9f  
 1715 0c9c 00B5FFF7 	3:  _CALL term 
 1715      A1FF5DF8 
 1715      04EB
 1716 0ca6 0E28     	    cmp r0,#TK_INTGR 
 1717 0ca8 7FF406AD 	    bne syntax_error 
 1718 0cac B8F1100F 	    cmp T1,#TK_PLUS 
 1719 0cb0 02D0     	    beq 4f 
 1720 0cb2 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1721 0cb6 E2E7     	    b 1b 
 1722 0cb8 0A44     	4:  add r2,r2,r1 // N1+N2
 1723 0cba E0E7     	    b 1b
 1724 0cbc 4846     	9:  mov r0,T2 
 1725 0cbe 1146     	    mov r1,r2 
 1726 0cc0 BDE80403 	    pop {r2,t1,t2}
 1727 0cc4 7047     	    _RET 
 1728              	
 1729              	
 1730              	/**********************************************
 1731              	    relation parser 
 1732              	    rel ::= expr1 rel_op expr2
 1733              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
ARM GAS  tinyBasic.s 			page 47


 1734              	    relation return  integer , zero is false 
 1735              	    output:
 1736              	        r0	TK_INTGR  
 1737              	        r1	integer 
 1738              	    use:
 1739              	        r2   first operand 
 1740              	        T1   relop   
 1741              	**********************************************/
 1742 0cc6 00BF     	    _FUNC relation 
 1743 0cc8 2DE90401 	    push {r2,T1}
 1744 0ccc 00B5FFF7 	    _CALL expression 
 1744      C7FF5DF8 
 1744      04EB
 1745 0cd6 0E28     	    cmp r0,#TK_INTGR 
 1746 0cd8 7FF4EEAC 	    bne syntax_error 
 1747 0cdc 0A46     	    mov r2,r1  // first operand  
 1748 0cde 00B5FFF7 	    _CALL next_token 
 1748      68FE5DF8 
 1748      04EB
 1749 0ce8 8046     	    mov T1,r0  // relop  
 1750 0cea 00F03000 	    and r0,#TK_GRP_MASK 
 1751 0cee 3028     	    cmp r0,#TK_GRP_RELOP 
 1752 0cf0 1DD1     	    bne 8f  // single operand 
 1753 0cf2 00B5FFF7 	    _CALL expression 
 1753      B4FF5DF8 
 1753      04EB
 1754 0cfc 0E28     	    cmp r0,#TK_INTGR 
 1755 0cfe 7FF4DBAC 	    bne syntax_error 
 1756 0d02 8A42     	    cmp r2,r1 // compare operands  
 1757 0d04 4FF0FF31 	    mov r1,#-1 
 1758 0d08 2C4A     	    ldr r2,=relop_jmp
 1759 0d0a 08F00708 	    and T1,#7 // {1..6}
 1760 0d0e D2E808F0 	    tbb [r2,T1]    
 1761              	rel_idx0:
 1762              	rel_eq:
 1763 0d12 11D0     	    beq 9f 
 1764 0d14 08E0     	    b rel_false
 1765              	rel_lt: 
 1766 0d16 0FDB     	    blt 9f   
 1767 0d18 06E0     	    b rel_false 
 1768              	rel_le:
 1769 0d1a 0DDD     	    ble 9f  
 1770 0d1c 04E0     	    b rel_false 
 1771              	rel_gt:
 1772 0d1e 0BDC     	    bgt 9f  
 1773 0d20 02E0     	    b rel_false  
 1774              	rel_ge:
 1775 0d22 09DA     	    bge 9f  
 1776 0d24 00E0     	    b rel_false  
 1777              	rel_diff:
 1778 0d26 07D1     	    bne 9f 
 1779              	rel_false:    
 1780 0d28 81EA0101 	    eor r1,r1  // false
 1781 0d2c 04E0     	    b 9f  
 1782 0d2e D4F800A0 	8:  _UNGET_TOKEN 
 1782      D4F808B0 
 1783 0d36 1146     	    mov r1,r2    
ARM GAS  tinyBasic.s 			page 48


 1784 0d38 4FF00E00 	9:  mov r0,#TK_INTGR
 1785 0d3c BDE80401 	    pop {r2,T1}
 1786 0d40 7047     	    _RET 
 1787              	
 1788              	
 1789              	relop_jmp: 
 1790 0d42 00       	  .byte 0 
 1791 0d43 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1792 0d44 00       	  .byte 0 // =
 1793 0d45 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1794 0d46 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1795 0d47 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1796 0d48 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1797              	
 1798              	
 1799              	/***********************************
 1800              	    get_array_element
 1801              	    return value of @(n)
 1802              	  input:
 1803              	    r0    indice 
 1804              	  output:
 1805              	    r0   TK_INTGR
 1806              	    r1   value  
 1807              	************************************/
 1808 0d49 0000BF   	    _FUNC get_array_element 
 1809 0d4c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1810 0d50 4FEA8000 	    lsl r0,#2 
 1811 0d54 C0EB0100 	    rsb r0,r1 
 1812 0d58 0168     	    ldr r1,[r0]
 1813 0d5a 4FF00E00 	    mov r0,#TK_INTGR 
 1814 0d5e 7047     	    _RET 
 1815              	
 1816              	
 1817              	/***********************************
 1818              	    set_array_element 
 1819              	    set value of array element 
 1820              	  input:
 1821              	    r0   index 
 1822              	    r1   new value 
 1823              	  output:
 1824              	    none
 1825              	  use:
 1826              	    r2    array pointer 
 1827              	**********************************/
 1828              	    _FUNC set_array_element 
 1829 0d60 04B4     	    push {r2}
 1830 0d62 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1831 0d66 4FEA8000 	    lsl r0,#2 
 1832 0d6a A1EB0001 	    sub r1,r0 
 1833 0d6e 0960     	    str r1,[r1]
 1834 0d70 04BC     	    pop {r2}
 1835 0d72 7047     	    _RET 
 1836              	
 1837              	/***********************************
 1838              	   get_var 
 1839              	   get variable value 
 1840              	  input:
ARM GAS  tinyBasic.s 			page 49


 1841              	     r0    variable index {0..25}
 1842              	  output:
 1843              	     r0    TK_INTGR
 1844              	     r1    value 
 1845              	**********************************/
 1846              	    _FUNC get_var 
 1847 0d74 04F16001 	    add r1,UPP,#VARS
 1848 0d78 4FEA8000 	    lsl r0,#2 
 1849 0d7c 0958     	    ldr r1,[r1,r0]
 1850 0d7e 4FF00E00 	    mov r0,#TK_INTGR
 1851 0d82 7047     	    _RET 
 1852              	
 1853              	/*********************************
 1854              	    set_var 
 1855              	    set variable value 
 1856              	  input:
 1857              	     r0    variable index {0..25}
 1858              	     r1    new value 
 1859              	  output:
 1860              	    none 
 1861              	  use:
 1862              	    r2   vars pointer 
 1863              	*********************************/
 1864              	    _FUNC set_var 
 1865 0d84 04B4     	    push {r2}
 1866 0d86 226E     	    ldr r2,[UPP,#VARS]
 1867 0d88 4FEA8000 	    lsl r0,#2
 1868 0d8c 1150     	    str r1,[r2,r0]
 1869 0d8e 04BC     	    pop {r2}
 1870 0d90 7047     	    _RET 
 1871              	
 1872              	/******************************
 1873              	    CONSTANTS data
 1874              	******************************/
 1875              	
 1876 0d92 0000     	  .section .rodata 
 1877              	
 1878              	// system variables initial value 
 1879              	uzero:
 1880 0000 00000000 	  .word 0 // IN_SAVED
 1881 0004 00000000 	  .word 0 // COUNT
 1882 0008 00000000 	  .word 0 // BASICPTR
 1883 000c 00000000 	  .word 0 // DATAPTR
 1884 0010 00000000 	  .word 0 // DATA
 1885 0014 00000000 	  .word 0 // DATALEN
 1886 0018 0A000000 	  .word 10 // BASE
 1887 001c 00000000 	  .word 0 // TICKS
 1888 0020 00000000 	  .word 0 // TIMER
 1889 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 1890 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 1891 002c 00000000 	  .word 0 // FFREE
 1892 0030 CC000000 	  .word ulast-uzero // TXTBGN
 1893 0034 CC000000 	  .word ulast-uzero // TXTEND
 1894 0038 00000000 	  .word 0 //LOOP_DEPTH
 1895 003c 00000000 	  .word 0 // ARRAY_SIZE
 1896 0040 00000000 	  .word 0 // FLAGS
 1897 0044 04000000 	  .word 4 // TAB_WIDTH
ARM GAS  tinyBasic.s 			page 50


 1898 0048 00000000 	  .word 0 // RX_HEAD
 1899 004c 00000000 	  .word 0 // RX_TAIL
 1900 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1900      00000000 
 1900      00000000 
 1900      00000000 
 1901 0060 00000000 	  .space VARS_SIZE,0 // VARS
 1901      00000000 
 1901      00000000 
 1901      00000000 
 1901      00000000 
 1902 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 1903              	ulast:
 1904              	
 1905              	  .section .rodata.dictionary 
 1906              	
 1907              	// keep alphabetic order for BASIC names from Z-A
 1908              	// this sort order is for for WORDS cmd output. 	
 1909              	
 1910              		.equ link, 0
 1911              	kword_end:
 1912 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1912      00000000 
 1912      00000000 
 1912      00000000 
 1913 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1913      64000000 
 1913      0A000000 
 1913      5854524D 
 1913      54000000 
 1914 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1914      65000000 
 1914      0A000000 
 1914      58524356 
 1914      00000000 
 1915 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1915      63000000 
 1915      0B000000 
 1915      584F5200 
 1916 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1916      62000000 
 1916      0A000000 
 1916      57524954 
 1916      45000000 
 1917 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1917      61000000 
 1917      0A000000 
 1917      574F5244 
 1917      53000000 
 1918 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1918      60000000 
 1918      0A000000 
 1918      57414954 
 1918      00000000 
 1919 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1919      5F000000 
 1919      0B000000 
ARM GAS  tinyBasic.s 			page 51


 1919      55535200 
 1920 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1920      5E000000 
 1920      0A000000 
 1920      554E5449 
 1920      4C000000 
 1921 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1921      5D000000 
 1921      0B000000 
 1921      55464C41 
 1921      53480000 
 1922 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1922      5C000000 
 1922      0B000000 
 1922      55424F55 
 1922      4E440000 
 1923 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1923      5B000000 
 1923      0A000000 
 1923      544F4E45 
 1923      00000000 
 1924 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1924      5A000000 
 1924      0A000000 
 1924      544F0000 
 1925 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1925      58000000 
 1925      0A000000 
 1925      54494D45 
 1925      52000000 
 1926 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1926      59000000 
 1926      0B000000 
 1926      54494D45 
 1926      4F555400 
 1927 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1927      57000000 
 1927      0B000000 
 1927      5449434B 
 1927      53000000 
 1928 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1928      56000000 
 1928      0A000000 
 1928      53544F50 
 1928      00000000 
 1929 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1929      55000000 
 1929      0A000000 
 1929      53544550 
 1929      00000000 
 1930 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1930      54000000 
 1930      0A000000 
 1930      53504957 
 1930      52000000 
 1931 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1931      53000000 
ARM GAS  tinyBasic.s 			page 52


 1931      0A000000 
 1931      53504953 
 1931      454C0000 
 1932 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1932      51000000 
 1932      0B000000 
 1932      53504952 
 1932      44000000 
 1933 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1933      52000000 
 1933      0A000000 
 1933      53504945 
 1933      4E000000 
 1934 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1934      50000000 
 1934      0A000000 
 1934      534C4545 
 1934      50000000 
 1935 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1935      4F000000 
 1935      0B000000 
 1935      53495A45 
 1935      00000000 
 1936 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1936      4E000000 
 1936      0A000000 
 1936      53484F57 
 1936      00000000 
 1937 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1937      4D000000 
 1937      0A000000 
 1937      53415645 
 1937      00000000 
 1938 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1938      4C000000 
 1938      0A000000 
 1938      52554E00 
 1939 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1939      4B000000 
 1939      0B000000 
 1939      52534849 
 1939      46540000 
 1940 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1940      4A000000 
 1940      0B000000 
 1940      524E4400 
 1941 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1941      49000000 
 1941      0A000000 
 1941      52455455 
 1941      524E0000 
 1942 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1942      48000000 
 1942      0A000000 
 1942      52455354 
 1942      4F524500 
 1943 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
ARM GAS  tinyBasic.s 			page 53


 1943      47000000 
 1943      0A000000 
 1943      52454D41 
 1943      524B0000 
 1944 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1944      46000000 
 1944      0A000000 
 1944      5245424F 
 1944      4F540000 
 1945 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1945      45000000 
 1945      0B000000 
 1945      52454144 
 1945      00000000 
 1946 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1946      44000000 
 1946      0B000000 
 1946      514B4559 
 1946      00000000 
 1947 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1947      43000000 
 1947      0B000000 
 1947      50525449 
 1947      00000000 
 1948 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1948      42000000 
 1948      0B000000 
 1948      50525448 
 1948      00000000 
 1949 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1949      41000000 
 1949      0B000000 
 1949      50525447 
 1949      00000000 
 1950 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1950      40000000 
 1950      0B000000 
 1950      50525446 
 1950      00000000 
 1951 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1951      3F000000 
 1951      0B000000 
 1951      50525445 
 1951      00000000 
 1952 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1952      3E000000 
 1952      0B000000 
 1952      50525444 
 1952      00000000 
 1953 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1953      3D000000 
 1953      0B000000 
 1953      50525443 
 1953      00000000 
 1954 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1954      3C000000 
 1954      0B000000 
ARM GAS  tinyBasic.s 			page 54


 1954      50525442 
 1954      00000000 
 1955 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1955      3B000000 
 1955      0B000000 
 1955      50525441 
 1955      00000000 
 1956 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1956      3A000000 
 1956      0A000000 
 1956      5052494E 
 1956      54000000 
 1957 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1957      39000000 
 1957      0B000000 
 1957      504F5554 
 1957      00000000 
 1958 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1958      38000000 
 1958      0A000000 
 1958      504F4B45 
 1958      00000000 
 1959 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1959      35000000 
 1959      0A000000 
 1959      504D4F44 
 1959      45000000 
 1960 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1960      37000000 
 1960      0B000000 
 1960      50494E50 
 1960      00000000 
 1961 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1961      36000000 
 1961      0B000000 
 1961      5045454B 
 1961      00000000 
 1962 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1962      34000000 
 1962      0A000000 
 1962      50415553 
 1962      45000000 
 1963 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1963      33000000 
 1963      0B000000 
 1963      50414400 
 1964 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1964      32000000 
 1964      0B000000 
 1964      4F520000 
 1965 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1965      31000000 
 1965      0B000000 
 1965      4F445200 
 1966 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1966      30000000 
 1966      0B000000 
ARM GAS  tinyBasic.s 			page 55


 1966      4E4F5400 
 1967 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1967      2E000000 
 1967      0A000000 
 1967      4E455854 
 1967      00000000 
 1968 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1968      2F000000 
 1968      0A000000 
 1968      4E455700 
 1969 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1969      2D000000 
 1969      0B000000 
 1969      4D554C44 
 1969      49560000 
 1970 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1970      2C000000 
 1970      0B000000 
 1970      4C534849 
 1970      46540000 
 1971 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1971      2B000000 
 1971      0B000000 
 1971      4C4F4700 
 1972 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1972      2A000000 
 1972      0A000000 
 1972      4C4F4144 
 1972      00000000 
 1973 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1973      29000000 
 1973      0A000000 
 1973      4C495354 
 1973      00000000 
 1974 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1974      28000000 
 1974      0A000000 
 1974      4C455400 
 1975 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1975      27000000 
 1975      0B000000 
 1975      4B455900 
 1976 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1976      26000000 
 1976      0A000000 
 1976      49574447 
 1976      52454600 
 1977 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1977      25000000 
 1977      0A000000 
 1977      49574447 
 1977      454E0000 
 1978 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1978      24000000 
 1978      0B000000 
 1978      494E5645 
 1978      52540000 
ARM GAS  tinyBasic.s 			page 56


 1979 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1979      23000000 
 1979      0A000000 
 1979      494E5055 
 1979      54000000 
 1980 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1980      22000000 
 1980      0A000000 
 1980      49460000 
 1981 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1981      21000000 
 1981      0B000000 
 1981      49445200 
 1982 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1982      20000000 
 1982      0A000000 
 1982      48455800 
 1983 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1983      1F000000 
 1983      0B000000 
 1983      4750494F 
 1983      00000000 
 1984 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1984      1E000000 
 1984      0A000000 
 1984      474F544F 
 1984      00000000 
 1985 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1985      1D000000 
 1985      0A000000 
 1985      474F5355 
 1985      42000000 
 1986 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1986      1C000000 
 1986      0A000000 
 1986      464F5247 
 1986      45540000 
 1987 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1987      1B000000 
 1987      0A000000 
 1987      464F5200 
 1988 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1988      1A000000 
 1988      0A000000 
 1988      46435055 
 1988      00000000 
 1989 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1989      18000000 
 1989      0A000000 
 1989      454E4400 
 1990 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1990      19000000 
 1990      0B000000 
 1990      45455052 
 1990      4F4D0000 
 1991 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1991      17000000 
ARM GAS  tinyBasic.s 			page 57


 1991      0A000000 
 1991      44575249 
 1991      54450000 
 1992 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 1992      66000000 
 1992      0A000000 
 1992      44554D50 
 1992      00000000 
 1993 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1993      16000000 
 1993      0B000000 
 1993      44524541 
 1993      44000000 
 1994 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1994      15000000 
 1994      0A000000 
 1994      444F0000 
 1995 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1995      14000000 
 1995      0A000000 
 1995      44495200 
 1996 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1996      13000000 
 1996      0A000000 
 1996      44454300 
 1997 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1997      12000000 
 1997      0B000000 
 1997      44445200 
 1998 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1998      11000000 
 1998      0A000000 
 1998      44415441 
 1998      4C4E0000 
 1999 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 1999      10000000 
 1999      0A000000 
 1999      44415441 
 1999      00000000 
 2000 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2000      0F000000 
 2000      0B000000 
 2000      43524C00 
 2001 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2001      0E000000 
 2001      0B000000 
 2001      43524800 
 2002 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2002      0D000000 
 2002      0C000000 
 2002      43484152 
 2002      00000000 
 2003 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2003      0C000000 
 2003      0A000000 
 2003      42594500 
 2004 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
ARM GAS  tinyBasic.s 			page 58


 2004      0B000000 
 2004      0A000000 
 2004      42544F47 
 2004      4C000000 
 2005 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2005      0A000000 
 2005      0B000000 
 2005      42544553 
 2005      54000000 
 2006 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2006      09000000 
 2006      0A000000 
 2006      42534554 
 2006      00000000 
 2007 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2007      08000000 
 2007      0A000000 
 2007      42524553 
 2007      00000000 
 2008 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2008      07000000 
 2008      0B000000 
 2008      42495400 
 2009 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2009      06000000 
 2009      0A000000 
 2009      41575500 
 2010 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2010      05000000 
 2010      0A000000 
 2010      4155544F 
 2010      52554E00 
 2011 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2011      04000000 
 2011      0B000000 
 2011      41534300 
 2012 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2012      03000000 
 2012      0B000000 
 2012      414E4400 
 2013 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2013      02000000 
 2013      0B000000 
 2013      41444352 
 2013      45414400 
 2014 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2014      01000000 
 2014      0A000000 
 2014      4144434F 
 2014      4E000000 
 2015              	first_link: 
 2016 0794 8C070000 	  .word LINK 
 2017 0798 00000000 	  .word ABS_IDX 
 2018 079c 0B000000 	  .word TK_IFUNC
 2019              	kword_dict: // first name field 
 2020              	  .equ LINK,. 
 2021 07a0 41425300 	  .asciz "ABS" 
ARM GAS  tinyBasic.s 			page 59


 2022              	  .p2align 2 
 2023              	
 2024              	    .section .rodata.fn_tabld 
 2025              	
 2026              	//comands and fonctions address table 	
 2027              	fn_table:
 2028 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2028      00000000 
 2028      00000000 
 2028      00000000 
 2028      00000000 
 2029 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2029      00000000 
 2029      00000000 
 2029      00000000 
 2029      00000000 
 2030 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 2030      00000000 
 2030      00000000 
 2030      00000000 
 2030      00000000 
 2031 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2031      00000000 
 2031      00000000 
 2031      00000000 
 2031      00000000 
 2032 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2032      00000000 
 2032      00000000 
 2032      00000000 
 2032      00000000 
 2033 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2033      00000000 
 2033      00000000 
 2033      00000000 
 2033      00000000 
 2034 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2034      00000000 
 2034      00000000 
 2034      00000000 
 2034      00000000 
 2035 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2035      00000000 
 2035      00000000 
 2035      00000000 
 2035      00000000 
 2036 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 2036      00000000 
 2036      00000000 
 2036      00000000 
 2036      00000000 
 2037 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2038 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
ARM GAS  tinyBasic.s 			page 60


 2038      00000000 
 2038      00000000 
 2038      00000000 
 2038      00000000 
 2039 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2039      00000000 
 2039      00000000 
 2039      00000000 
 2039      00000000 
 2040 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2040      00000000 
 2040      00000000 
 2040      00000000 
 2040      00000000 
 2041 019c 00000000 		.word 0 
 2042              	
 2043              	
 2044              	/**********************************
 2045              	    BASIC commands and functions 
 2046              	**********************************/
 2047              	
 2048              	    .section .text.basic , "ax", %progbits 
 2049              	
 2050              	
 2051              	/*******************************
 2052              	  BASIC:  ABS expr 
 2053              	  input:
 2054              	    none 
 2055              	  output:
 2056              	    r0    token type 
 2057              	    r1    abs(expr)
 2058              	  use:
 2059              	    none 
 2060              	******************************/
 2061              	    _FUNC abs 
 2062 0000 00B5FFF7 	    _CALL arg_list
 2062      FEFF5DF8 
 2062      04EB
 2063 000a 0128     	    cmp r0,#1 
 2064 000c 01D0     	    beq 1f 
 2065 000e FFF7FEBF 	    b syntax_error 
 2066 0012 5CF8041B 	1:  _POP r1 
 2067 0016 11F0004F 	    tst r1,#(1<<31)
 2068 001a 01D0     	    beq 9f
 2069 001c C1F10001 	    rsb r1,#0 
 2070 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2071 0024 7047     	   _RET 
 2072              	
 2073 0026 00BF     	    _FUNC power_adc
 2074 0028 7047     	    _RET
 2075              	
 2076 002a 00BF     	    _FUNC analog_read
 2077 002c 7047     	    _RET
 2078              	
 2079 002e 00BF     	    _FUNC bit_and
 2080 0030 7047     	    _RET
 2081              	
ARM GAS  tinyBasic.s 			page 61


 2082 0032 00BF     	    _FUNC ascii
 2083 0034 7047     	    _RET
 2084              	
 2085 0036 00BF     	    _FUNC autorun
 2086 0038 7047     	    _RET
 2087              	
 2088 003a 00BF     	    _FUNC awu
 2089 003c 7047     	    _RET
 2090              	
 2091 003e 00BF     	    _FUNC bitmask
 2092 0040 7047     	    _RET 
 2093              	
 2094              	  
 2095              	  /*********************************
 2096              	   BASIC: BRES adr, mask   
 2097              	   reset bits [adr]= [adr] & ~mask  
 2098              	   input:
 2099              	     none 
 2100              	    output;
 2101              	      none 
 2102              	    use:
 2103              	      T1   temp
 2104              	      T2   temp 
 2105              	*******************************/     
 2106 0042 00BF     	  _FUNC bit_reset
 2107 0044 00B5FFF7 	    _CALL arg_list 
 2107      FEFF5DF8 
 2107      04EB
 2108 004e 0228     	    cmp r0,#2 
 2109 0050 01D0     	    beq 1f 
 2110 0052 FFF7FEBF 	    b syntax_error 
 2111 0056 5CF8041B 	1:  _POP r1 //mask 
 2112 005a 5CF8040B 	    _POP r0 //address 
 2113 005e D0F80090 	    ldr T2,[r0] 
 2114 0062 81F0FF31 	    eor r1,#-1 // ~mask 
 2115 0066 01EA0901 	    and r1,T2
 2116 006a 0160     	    str r1,[r0]
 2117 006c 7047     	    _RET  
 2118              	
 2119              	
 2120              	/*********************************
 2121              	   BASIC: BSET adr, mask   
 2122              	   reset bits [adr]= [adr] & ~mask  
 2123              	   input:
 2124              	      none 
 2125              	    output;
 2126              	      none 
 2127              	    use:
 2128              	      T1   temp
 2129              	      T2   temp  
 2130              	*******************************/     
 2131 006e 00BF     	    _FUNC bit_set
 2132 0070 00B5FFF7 	    _CALL arg_list 
 2132      FEFF5DF8 
 2132      04EB
 2133 007a 0228     	    cmp r0,#2 
 2134 007c 01D0     	    beq 1f 
ARM GAS  tinyBasic.s 			page 62


 2135 007e FFF7FEBF 	    b syntax_error 
 2136 0082 5CF8041B 	1:  _POP r1 //mask 
 2137 0086 5CF8040B 	    _POP r0 //address 
 2138 008a D0F80090 	    ldr T2,[r0] 
 2139 008e 41EA0901 	    orr r1,T2
 2140 0092 0160     	    str r1,[r0]
 2141 0094 7047     	    _RET 
 2142              	
 2143              	  /*********************************
 2144              	   BASIC: BTOGL adr, mask   
 2145              	   reset bits [adr]= [adr] & ~mask  
 2146              	   input:
 2147              	     r0    adr 
 2148              	     r1    mask 
 2149              	    output;
 2150              	      none 
 2151              	    use:
 2152              	      T1   temp
 2153              	      T2   temp  
 2154              	*******************************/     
 2155 0096 00BF     	  _FUNC bit_toggle
 2156 0098 00B5FFF7 	    _CALL arg_list 
 2156      FEFF5DF8 
 2156      04EB
 2157 00a2 0228     	    cmp r0,#2 
 2158 00a4 01D0     	    beq 1f 
 2159 00a6 FFF7FEBF 	    b syntax_error 
 2160 00aa 5CF8041B 	1:  _POP r1 //mask 
 2161 00ae 5CF8040B 	    _POP r0 //address 
 2162 00b2 D0F80090 	    ldr T2,[r0] 
 2163 00b6 81EA0901 	    eor r1,T2
 2164 00ba 0160     	    str r1,[r0]
 2165 00bc 7047     	    _RET  
 2166              	
 2167 00be 00BF     	    _FUNC bit_test
 2168 00c0 7047     	    _RET 
 2169              	
 2170 00c2 00BF     	    _FUNC bye
 2171 00c4 7047     	    _RET 
 2172              	
 2173 00c6 00BF     	    _FUNC char
 2174 00c8 7047     	    _RET 
 2175              	
 2176 00ca 00BF     	    _FUNC const_cr2
 2177 00cc 7047     	    _RET  
 2178              	
 2179 00ce 00BF     	    _FUNC const_cr1
 2180 00d0 7047     	    _RET 
 2181              	
 2182 00d2 00BF     	    _FUNC data
 2183 00d4 7047     	    _RET 
 2184              	
 2185 00d6 00BF     	    _FUNC data_line
 2186 00d8 7047     	    _RET 
 2187              	
 2188 00da 00BF     	    _FUNC const_ddr
 2189 00dc 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 63


 2190              	
 2191 00de 00BF     	    _FUNC dec_base
 2192 00e0 7047     	    _RET 
 2193              	
 2194 00e2 00BF     	    _FUNC directory
 2195 00e4 7047     	    _RET 
 2196              	
 2197 00e6 00BF     	    _FUNC do_loop
 2198 00e8 7047     	    _RET 
 2199              	
 2200 00ea 00BF     	    _FUNC digital_read
 2201 00ec 7047     	    _RET 
 2202              	
 2203 00ee 00BF     	    _FUNC digital_write
 2204 00f0 7047     	    _RET  
 2205              	
 2206              	/*******************************
 2207              	  BASIC: END 
 2208              	  exit program 
 2209              	******************************/ 
 2210 00f2 00BF     	    _FUNC cmd_end
 2211 00f4 FFF7FEBF 	    b warm_start 
 2212 00f8 7047     	    _RET 
 2213              	
 2214 00fa 00BF     	    _FUNC const_eeprom_base
 2215 00fc 7047     	    _RET 
 2216              	
 2217 00fe 00BF     	    _FUNC fcpu
 2218 0100 7047     	    _RET 
 2219              	
 2220 0102 00BF     	    _FUNC for
 2221 0104 7047     	    _RET 
 2222              	
 2223 0106 00BF     	    _FUNC forget
 2224 0108 7047     	    _RET 
 2225              	
 2226 010a 00BF     	    _FUNC gosub
 2227 010c 7047     	    _RET 
 2228              	
 2229              	/**********************************
 2230              	  BASIC: GOTO expr 
 2231              	  go to line # 
 2232              	  use:
 2233              	
 2234              	**********************************/
 2235 010e 00BF     	    _FUNC goto
 2236 0110 00B5FFF7 	    _CALL expression 
 2236      FEFF5DF8 
 2236      04EB
 2237 011a 0E28     	    cmp r0,#TK_INTGR 
 2238 011c 7FF4FEAF 	    bne syntax_error 
 2239 0120 59B1     	    cbz r1,9f 
 2240 0122 0846     	1:  mov r0,r1 
 2241 0124 00B5FFF7 	    _CALL search_lineno 
 2241      FEFF5DF8 
 2241      04EB
 2242 012e 19B1     	    cbz r1,2f 
ARM GAS  tinyBasic.s 			page 64


 2243 0130 4FF00500 	    mov r0,#ERR_NO_LINE 
 2244 0134 FFF7FEBF 	    b tb_error 
 2245 0138 8346     	2:  mov BPTR,r0 
 2246 013a 4FF0030A 	9:  mov IN,#3 
 2247 013e 7047     	    _RET 
 2248              	
 2249              	    _FUNC gpio
 2250 0140 7047     	    _RET  
 2251              	
 2252 0142 00BF     	    _FUNC hex_base
 2253 0144 7047     	    _RET 
 2254              	
 2255 0146 00BF     	    _FUNC const_idr
 2256 0148 7047     	    _RET 
 2257              	
 2258              	/**********************************************
 2259              	  BASIC: IF relation : statement
 2260              	  execute statement only if relation is true
 2261              	*********************************************/
 2262 014a 00BF     	    _FUNC if
 2263 014c 00B5FFF7 	    _CALL relation 
 2263      FEFF5DF8 
 2263      04EB
 2264 0156 09B9     	    cbnz r1,9f 
 2265 0158 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2266 015c 7047     	9:  _RET 
 2267              	
 2268 015e 00BF     	    _FUNC input_var
 2269 0160 7047     	    _RET 
 2270              	
 2271 0162 00BF     	    _FUNC invert
 2272 0164 7047     	    _RET 
 2273              	
 2274 0166 00BF     	    _FUNC enable_iwdg
 2275 0168 7047     	    _RET 
 2276              	
 2277 016a 00BF     	    _FUNC refresh_iwdg
 2278 016c 7047     	    _RET 
 2279              	
 2280 016e 00BF     	    _FUNC key
 2281 0170 7047     	    _RET  
 2282              	
 2283              	/******************************
 2284              	  BASIC: [let] var=expr 
 2285              	         [let] @(expr)=expr
 2286              	  input:
 2287              	    none 
 2288              	  output:
 2289              	    none 
 2290              	  use:
 2291              	
 2292              	****************************/         
 2293 0172 00BF     	    _FUNC let
 2294 0174 00B5FFF7 	    _CALL next_token 
 2294      FEFF5DF8 
 2294      04EB
 2295 017e 0428     	    cmp r0,#TK_VAR
ARM GAS  tinyBasic.s 			page 65


 2296 0180 03D0     	    beq let_var 
 2297 0182 0528     	    cmp r0,#TK_ARRAY 
 2298 0184 07D0     	    beq let_array 
 2299 0186 FFF7FEBF 	    b syntax_error 
 2300              	let_var:
 2301 018a 4FEA8101 	    lsl r1,#2
 2302 018e 04F16000 	    add r0,UPP,#VARS
 2303 0192 0844     	    add r0,r1
 2304 0194 1FE0     	    b 1f 
 2305              	let_array: 
 2306 0196 4FF00600 	    mov r0,#TK_LPAREN
 2307 019a 00B5FFF7 	    _CALL expect 
 2307      FEFF5DF8 
 2307      04EB
 2308 01a4 00B5FFF7 	    _CALL expression
 2308      FEFF5DF8 
 2308      04EB
 2309 01ae 0E28     	    cmp r0,#TK_INTGR 
 2310 01b0 7FF4FEAF 	    bne syntax_error
 2311 01b4 4CF8041D 	    _PUSH r1 
 2312 01b8 4FF00700 	    mov r0,#TK_RPAREN
 2313 01bc 00B5FFF7 	    _CALL expect 
 2313      FEFF5DF8 
 2313      04EB
 2314 01c6 5CF8041B 	    _POP r1 
 2315 01ca D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2316 01ce 4FEA8101 	    lsl r1,#2 
 2317 01d2 A0EB0100 	    sub r0,r1 
 2318 01d6 4CF8040D 	1:  _PUSH r0 
 2319 01da 4FF03200 	    mov r0,#TK_EQUAL 
 2320 01de 00B5FFF7 	    _CALL expect 
 2320      FEFF5DF8 
 2320      04EB
 2321 01e8 00B5FFF7 	    _CALL expression   
 2321      FEFF5DF8 
 2321      04EB
 2322 01f2 0E28     	    cmp r0,#TK_INTGR
 2323 01f4 7FF4FEAF 	    bne syntax_error   
 2324 01f8 5CF8040B 	2:  _POP r0 
 2325 01fc 0160     	    str r1,[r0]
 2326 01fe 7047     	    _RET  
 2327              	
 2328              	    _FUNC list
 2329 0200 7047     	    _RET 
 2330              	
 2331 0202 00BF     	    _FUNC load
 2332 0204 7047     	    _RET 
 2333              	
 2334 0206 00BF     	    _FUNC log2
 2335 0208 7047     	    _RET 
 2336              	
 2337 020a 00BF     	    _FUNC lshift
 2338 020c 7047     	    _RET 
 2339              	
 2340 020e 00BF     	    _FUNC muldiv
 2341 0210 7047     	    _RET 
 2342              	
ARM GAS  tinyBasic.s 			page 66


 2343 0212 00BF     	    _FUNC next
 2344 0214 7047     	    _RET 
 2345              	
 2346 0216 00BF     	    _FUNC new
 2347 0218 7047     	    _RET  
 2348              	
 2349 021a 00BF     	    _FUNC func_not
 2350 021c 7047     	    _RET 
 2351              	
 2352 021e 00BF     	    _FUNC const_odr
 2353 0220 7047     	    _RET 
 2354              	
 2355 0222 00BF     	    _FUNC bit_or
 2356 0224 7047     	    _RET 
 2357              	
 2358 0226 00BF     	    _FUNC pad_ref
 2359 0228 7047     	    _RET 
 2360              	
 2361 022a 00BF     	    _FUNC pause
 2362 022c 7047     	    _RET 
 2363              	
 2364 022e 00BF     	    _FUNC pin_mode
 2365 0230 7047     	    _RET 
 2366              	
 2367 0232 00BF     	    _FUNC peek
 2368 0234 7047     	    _RET 
 2369              	
 2370 0236 00BF     	    _FUNC const_input
 2371 0238 7047     	    _RET  
 2372              	
 2373 023a 00BF     	    _FUNC poke
 2374 023c 7047     	    _RET 
 2375              	
 2376 023e 00BF     	    _FUNC const_output
 2377 0240 7047     	    _RET 
 2378              	
 2379              	/****************************
 2380              	  BASIC: PRINT|? arg_list 
 2381              	  print list of arguments 
 2382              	****************************/
 2383 0242 00BF     	    _FUNC print
 2384 0244 88EA0808 	    eor T1,T1 // no comma 
 2385 0248 00B5FFF7 	0:  _CALL expression
 2385      FEFF5DF8 
 2385      04EB
 2386 0252 0E28     	    cmp r0,#TK_INTGR
 2387 0254 07D1     	    bne 1f 
 2388 0256 0846     	    mov r0,r1
 2389 0258 A169     	    ldr r1,[UPP,#BASE]
 2390 025a 00B5FFF7 	    _CALL print_int
 2390      FEFF5DF8 
 2390      04EB
 2391 0264 2BE0     	    b 6f 
 2392 0266 00B5FFF7 	1:  _CALL next_token
 2392      FEFF5DF8 
 2392      04EB
 2393 0270 0128     	    cmp r0,#TK_COLON 
ARM GAS  tinyBasic.s 			page 67


 2394 0272 04DC     	    bgt 2f
 2395 0274 D4F800A0 	    _UNGET_TOKEN 
 2395      D4F808B0 
 2396 027c 2CE0     	    b print_exit
 2397 027e 88EA0808 	2:  eor T1, T1 
 2398 0282 0228     	    cmp r0,#TK_QSTR 
 2399 0284 06D1     	    bne 4f
 2400 0286 0846     	    mov r0,r1 
 2401 0288 00B5FFF7 	    _CALL uart_puts  
 2401      FEFF5DF8 
 2401      04EB
 2402 0292 14E0     	    b 6f 
 2403 0294 0328     	4:  cmp r0,#TK_CHAR 
 2404 0296 06D1     	    bne 5f 
 2405 0298 0846     	    mov r0,r1 
 2406 029a 00B5FFF7 	    _CALL uart_putc 
 2406      FEFF5DF8 
 2406      04EB
 2407 02a4 0BE0     	    b 6f 
 2408 02a6 0928     	5:  cmp r0,#TK_SHARP
 2409 02a8 7FF4FEAF 	    bne syntax_error 
 2410 02ac 00B5FFF7 	    _CALL next_token 
 2410      FEFF5DF8 
 2410      04EB
 2411 02b6 0E28     	    cmp r0,#TK_INTGR 
 2412 02b8 7FF4FEAF 	    bne syntax_error 
 2413 02bc 6164     	    str r1,[UPP,#TAB_WIDTH]
 2414 02be 00B5FFF7 	6:  _CALL next_token 
 2414      FEFF5DF8 
 2414      04EB
 2415 02c8 0828     	    cmp r0,#TK_COMMA 
 2416 02ca 02D1     	    bne 7f
 2417 02cc 4FF00108 	    mov T1,#1
 2418 02d0 BAE7     	    b 0b  
 2419 02d2 0228     	7:  cmp r0,#2 
 2420 02d4 7FF5FEAF 	    bpl syntax_error  
 2421              	print_exit:
 2422 02d8 18EA0808 	      ands T1,T1 
 2423 02dc 06D1     	      bne 9f
 2424 02de 4FF00D00 	      mov r0,#CR 
 2425 02e2 00B5FFF7 	      _CALL uart_putc 
 2425      FEFF5DF8 
 2425      04EB
 2426 02ec 7047     	  9:  _RET 
 2427              	
 2428 02ee 00BF     	    _FUNC const_porta
 2429 02f0 7047     	    _RET 
 2430              	
 2431 02f2 00BF     	    _FUNC const_portb
 2432 02f4 7047     	    _RET 
 2433              	
 2434 02f6 00BF     	    _FUNC const_portc
 2435 02f8 7047     	    _RET 
 2436              	
 2437 02fa 00BF     	    _FUNC const_portd
 2438 02fc 7047     	    _RET 
 2439              	
ARM GAS  tinyBasic.s 			page 68


 2440 02fe 00BF     	    _FUNC const_porte
 2441 0300 7047     	    _RET  
 2442              	
 2443 0302 00BF     	    _FUNC const_portf
 2444 0304 7047     	    _RET 
 2445              	
 2446 0306 00BF     	    _FUNC const_portg
 2447 0308 7047     	    _RET 
 2448              	
 2449 030a 00BF     	    _FUNC const_porth
 2450 030c 7047     	    _RET 
 2451              	
 2452 030e 00BF     	    _FUNC const_porti
 2453 0310 7047     	    _RET 
 2454              	
 2455 0312 00BF     	    _FUNC qkey
 2456 0314 7047     	    _RET 
 2457              	
 2458 0316 00BF     	    _FUNC read
 2459 0318 7047     	    _RET 
 2460              	
 2461 031a 00BF     	    _FUNC remark
 2462 031c 7047     	    _RET  
 2463              	
 2464 031e 00BF     	    _FUNC restore
 2465 0320 7047     	    _RET 
 2466              	
 2467 0322 00BF     	    _FUNC return
 2468 0324 7047     	    _RET 
 2469              	
 2470 0326 00BF     	    _FUNC  random
 2471 0328 7047     	    _RET 
 2472              	
 2473 032a 00BF     	    _FUNC rshift
 2474 032c 7047     	    _RET 
 2475              	
 2476              	/****************************
 2477              	  BASIC: RUN 
 2478              	  execute program in memory
 2479              	****************************/
 2480 032e 00BF     	    _FUNC run
 2481 0330 206C10F0 	    _CLO 
 2481      010F03D0 
 2481      4FF00700 
 2481      FFF7FEBF 
 2482 0340 206B     	    ldr r0,[UPP,#TXTBGN]
 2483 0342 616B     	    ldr r1,[UPP,#TXTEND]
 2484 0344 8842     	    cmp r0,r1
 2485 0346 08D0     	    beq 9f 
 2486 0348 8178     	    ldrb r1,[r0,#2]
 2487 034a 6160     	    str r1,[UPP,#COUNT]
 2488 034c 8346     	    mov BPTR,r0 
 2489 034e 4FF0030A 	    mov IN,#3 
 2490 0352 206C     	    ldr r0,[UPP,#FLAGS]
 2491 0354 40F00100 	    orr r0,#FRUN 
 2492 0358 2064     	    str r0,[UPP,#FLAGS]
 2493 035a 7047     	9:  _RET 
ARM GAS  tinyBasic.s 			page 69


 2494              	
 2495              	    _FUNC save
 2496 035c 7047     	    _RET 
 2497              	
 2498 035e 00BF     	    _FUNC show
 2499 0360 7047     	    _RET 
 2500              	
 2501 0362 00BF     	    _FUNC size
 2502 0364 7047     	    _RET  
 2503              	
 2504 0366 00BF     	    _FUNC sleep
 2505 0368 7047     	    _RET 
 2506              	
 2507 036a 00BF     	    _FUNC spi_read
 2508 036c 7047     	    _RET 
 2509              	
 2510 036e 00BF     	    _FUNC spi_enable
 2511 0370 7047     	    _RET 
 2512              	
 2513 0372 00BF     	    _FUNC spi_select
 2514 0374 7047     	    _RET 
 2515              	
 2516 0376 00BF     	    _FUNC spi_write
 2517 0378 7047     	    _RET 
 2518              	
 2519 037a 00BF     	    _FUNC step
 2520 037c 7047     	    _RET 
 2521              	
 2522 037e 00BF     	    _FUNC stop
 2523 0380 7047     	    _RET 
 2524              	
 2525 0382 00BF     	    _FUNC get_ticks
 2526 0384 7047     	    _RET  
 2527              	
 2528 0386 00BF     	    _FUNC set_timer
 2529 0388 7047     	    _RET 
 2530              	
 2531 038a 00BF     	    _FUNC timeout
 2532 038c 7047     	    _RET 
 2533              	
 2534 038e 00BF     	    _FUNC to
 2535 0390 7047     	    _RET 
 2536              	
 2537 0392 00BF     	    _FUNC tone
 2538 0394 7047     	    _RET 
 2539              	
 2540              	/***************************
 2541              	  BASIC: UBOUND 
 2542              	  return last indice of @
 2543              	  output:
 2544              	    r0  TK_INTGR 
 2545              	    r1  +int 
 2546              	**************************/
 2547 0396 00BF     	    _FUNC ubound
 2548 0398 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2549 039c 606B     	    ldr r0,[UPP,#TXTEND]
 2550 039e A1EB0001 	    sub r1,r0 
ARM GAS  tinyBasic.s 			page 70


 2551 03a2 4FEA9101 	    lsr r1,#2
 2552 03a6 4FF00E00 	    mov r0,#TK_INTGR 
 2553 03aa 7047     	    _RET 
 2554              	
 2555              	    _FUNC uflash
 2556 03ac 7047     	    _RET 
 2557              	
 2558 03ae 00BF     	    _FUNC until
 2559 03b0 7047     	    _RET 
 2560              	
 2561 03b2 00BF     	    _FUNC usr
 2562 03b4 7047     	    _RET  
 2563              	
 2564 03b6 00BF     	    _FUNC wait
 2565 03b8 7047     	    _RET 
 2566              	
 2567              	/*********************************************
 2568              	  BASIC: WORDS 
 2569              	  print list of BASIC WORDS in dictionary 
 2570              	  use:
 2571              	    r0,r1,T1,T2  
 2572              	********************************************/
 2573 03ba 00BF     	    _FUNC words
 2574 03bc 206C10F0 	    _CLO 
 2574      010F03D0 
 2574      4FF00700 
 2574      FFF7FEBF 
 2575 03cc DFF83084 	    ldr T1,=kword_dict
 2576 03d0 89EA0909 	    eor T2,T2 
 2577              	1:  
 2578 03d4 4046     	    mov r0,T1
 2579 03d6 00B5FFF7 	    _CALL strlen
 2579      FEFF5DF8 
 2579      04EB
 2580 03e0 F0B1     	    cbz r0,9f 
 2581 03e2 8144     	    add T2,r0 
 2582 03e4 B9F1500F 	    cmp T2,#80 
 2583 03e8 08D4     	    bmi 2f
 2584 03ea 89EA0909 	    eor T2,T2  
 2585 03ee 4FF00D00 	    mov r0,#CR 
 2586 03f2 00B5FFF7 	    _CALL uart_putc 
 2586      FEFF5DF8 
 2586      04EB
 2587 03fc 4046     	2:  mov r0,T1 
 2588 03fe 00B5FFF7 	    _CALL uart_puts 
 2588      FEFF5DF8 
 2588      04EB
 2589 0408 4FF02000 	    mov r0,#SPACE
 2590 040c 09F10109 	    add T2,#1  
 2591 0410 00B5FFF7 	    _CALL uart_putc 
 2591      FEFF5DF8 
 2591      04EB
 2592 041a 58F80C8C 	    ldr T1,[T1,#-12]
 2593 041e D9E7     	    b 1b 
 2594 0420 7047     	9:  _RET 
 2595              	
 2596 0422 00BF     	    _FUNC write
ARM GAS  tinyBasic.s 			page 71


 2597 0424 7047     	    _RET 
 2598              	
 2599 0426 00BF     	    _FUNC bit_xor
 2600 0428 7047     	    _RET 
 2601              	
 2602 042a 00BF     	    _FUNC transmit
 2603 042c 7047     	    _RET 
 2604              	
 2605 042e 00BF     	    _FUNC receive
 2606 0430 7047     	    _RET  
 2607              	
 2608              	
 2609              	/*************************************************
 2610              	   extra FLASH memory not used by Tiny BASIC
 2611              	   is used to save BASIC programs.
 2612              	************************************************/
 2613 0432 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2613      0080AFF3 
 2613      0080AFF3 
 2613      00800000 
 2613      00000000 
 2614              	  .section .fs
 2615              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 72


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 73


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 74


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 75


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 76


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 77


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 78


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:247    .text:0000000000000150 dump
         tinyBasic.s:1021   .text:00000000000006c0 tb_error
         tinyBasic.s:1540   .text:0000000000000ac0 arg_list
         tinyBasic.s:1006   .text:00000000000006b8 syntax_error
         tinyBasic.s:280    .text:0000000000000190 search_lineno
         tinyBasic.s:311    .text:00000000000001b0 delete_line
         tinyBasic.s:336    .text:00000000000001dc create_gap
         tinyBasic.s:361    .text:0000000000000204 insert_line
         tinyBasic.s:400    .text:0000000000000254 compile
         tinyBasic.s:1307   .text:000000000000091e pad
         tinyBasic.s:638    .text:0000000000000470 parse_int
         tinyBasic.s:471    .text:00000000000002e8 comp_token
         tinyBasic.s:542    .text:00000000000003c4 store_r0
         tinyBasic.s:754    .text:0000000000000548 skip
         tinyBasic.s:773    .text:0000000000000560 upper
         tinyBasic.s:576    .text:0000000000000404 is_special
         tinyBasic.s:598    .text:0000000000000448 token_ofs
         tinyBasic.s:486    .text:0000000000000328 tok_idx0
         tinyBasic.s:545    .text:00000000000003ca try_number
         tinyBasic.s:490    .text:000000000000032a single
         tinyBasic.s:593    .text:0000000000000438 tok_single
         tinyBasic.s:494    .text:0000000000000332 lt
ARM GAS  tinyBasic.s 			page 79


         tinyBasic.s:500    .text:0000000000000340 gt
         tinyBasic.s:513    .text:0000000000000364 bkslash
         tinyBasic.s:559    .text:00000000000003fe token_exit
         tinyBasic.s:520    .text:000000000000037a prt_cmd
         tinyBasic.s:526    .text:000000000000038c quote
         tinyBasic.s:693    .text:00000000000004e0 parse_quote
         tinyBasic.s:531    .text:00000000000003a0 tick
         tinyBasic.s:925    .text:0000000000000614 parse_keyword
         tinyBasic.s:590    .text:0000000000000424 char_list
         tinyBasic.s:591    .text:0000000000000424 $d
         tinyBasic.s:599    .text:0000000000000448 $d
         tinyBasic.s:615    .text:000000000000046e $t
         tinyBasic.s:724    .text:0000000000000514 get_escaped_char
         tinyBasic.s:741    .text:000000000000053e escaped
         tinyBasic.s:741    .text:000000000000053e $d
         tinyBasic.s:754    .text:0000000000000546 $t
         tinyBasic.s:791    .text:0000000000000570 is_digit
         tinyBasic.s:815    .text:000000000000058c is_hex
         tinyBasic.s:840    .text:00000000000005b0 is_bit
         tinyBasic.s:861    .text:00000000000005cc is_alpha
         tinyBasic.s:882    .text:00000000000005e4 is_num
         tinyBasic.s:903    .text:00000000000005fc is_alnum
         tinyBasic.s:2019   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1131   .text:0000000000000780 search_dict
         tinyBasic.s:976    .text:0000000000000698 cmd_name
         tinyBasic.s:1043   .text:0000000000000714 err_msg
         tinyBasic.s:1032   .text:00000000000006de compile_error
         tinyBasic.s:1029   .text:00000000000006dc interpret_error
         tinyBasic.s:1320   .text:000000000000092c warm_start
         tinyBasic.s:1044   .text:0000000000000714 $d
         tinyBasic.s:1050   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1051   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1052   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1053   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1054   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1055   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1056   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1057   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1058   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1059   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1060   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1061   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1062   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1063   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1064   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1066   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1067   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1068   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1085   .text:0000000000000754 $t
         tinyBasic.s:1085   .text:0000000000000754 BTGL
         tinyBasic.s:1103   .text:0000000000000758 kword_cmp
         tinyBasic.s:1168   .text:00000000000007be cold_start
         tinyBasic.s:1189   .text:0000000000000808 src_addr
         tinyBasic.s:1191   .text:000000000000080c dest_addr
         tinyBasic.s:1306   .text:000000000000091a tib
         tinyBasic.s:1193   .text:0000000000000810 sysvar_size
         tinyBasic.s:1204   .text:0000000000000814 prt_version
ARM GAS  tinyBasic.s 			page 80


         tinyBasic.s:1261   .text:00000000000008bc clear_basic
         tinyBasic.s:1190   .text:0000000000000808 $d
         tinyBasic.s:1879   .rodata:0000000000000000 uzero
         tinyBasic.s:1903   .rodata:00000000000000cc ulast
         tinyBasic.s:1204   .text:0000000000000814 $t
         tinyBasic.s:1228   .text:000000000000087c version_msg
         tinyBasic.s:1230   .text:000000000000089c version
         tinyBasic.s:1229   .text:000000000000087c $d
         tinyBasic.s:1245   .text:00000000000008a0 clear_vars
         tinyBasic.s:1289   .text:00000000000008ee warm_init
         tinyBasic.s:1305   .text:0000000000000916 dstack
         tinyBasic.s:1304   .text:0000000000000912 mstack
         tinyBasic.s:1304   .text:0000000000000912 $d
         tinyBasic.s:1308   .text:0000000000000922 array
         tinyBasic.s:1309   .text:0000000000000926 ready
         tinyBasic.s:1320   .text:000000000000092c $t
         tinyBasic.s:1340   .text:0000000000000944 cmd_line
         tinyBasic.s:1351   .text:0000000000000974 interpreter
         tinyBasic.s:1370   .text:0000000000000974 interp_loop
         tinyBasic.s:1419   .text:00000000000009b4 next_token
         tinyBasic.s:1403   .text:00000000000009a8 execute
         tinyBasic.s:2300   .text.basic:000000000000018a let_var
         tinyBasic.s:2305   .text.basic:0000000000000196 let_array
         tinyBasic.s:2027   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1471   .text:0000000000000a38 tok_jmp
         tinyBasic.s:1472   .text:0000000000000a38 $d
         tinyBasic.s:1486   .text:0000000000000a78 $t
         tinyBasic.s:1501   .text:0000000000000a78 expect
         tinyBasic.s:1520   .text:0000000000000a94 func_args
         tinyBasic.s:1700   .text:0000000000000c60 expression
         tinyBasic.s:1574   .text:0000000000000b00 factor
         tinyBasic.s:1808   .text:0000000000000d4c get_array_element
         tinyBasic.s:1846   .text:0000000000000d74 get_var
         tinyBasic.s:1649   .text:0000000000000be4 term
         tinyBasic.s:1742   .text:0000000000000cc8 relation
         tinyBasic.s:1789   .text:0000000000000d42 relop_jmp
         tinyBasic.s:1761   .text:0000000000000d12 rel_idx0
         tinyBasic.s:1762   .text:0000000000000d12 rel_eq
         tinyBasic.s:1779   .text:0000000000000d28 rel_false
         tinyBasic.s:1765   .text:0000000000000d16 rel_lt
         tinyBasic.s:1768   .text:0000000000000d1a rel_le
         tinyBasic.s:1771   .text:0000000000000d1e rel_gt
         tinyBasic.s:1774   .text:0000000000000d22 rel_ge
         tinyBasic.s:1777   .text:0000000000000d26 rel_diff
         tinyBasic.s:1790   .text:0000000000000d42 $d
         tinyBasic.s:1828   .text:0000000000000d60 set_array_element
         tinyBasic.s:1864   .text:0000000000000d84 set_var
         tinyBasic.s:2615   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1900   .rodata:0000000000000050 $d
         tinyBasic.s:1910   *ABS*:0000000000000000 link
         tinyBasic.s:1911   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2020   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:1912   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2015   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2061   .text.basic:0000000000000000 abs
         tinyBasic.s:2073   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2076   .text.basic:000000000000002c analog_read
ARM GAS  tinyBasic.s 			page 81


         tinyBasic.s:2079   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2082   .text.basic:0000000000000034 ascii
         tinyBasic.s:2085   .text.basic:0000000000000038 autorun
         tinyBasic.s:2088   .text.basic:000000000000003c awu
         tinyBasic.s:2091   .text.basic:0000000000000040 bitmask
         tinyBasic.s:2106   .text.basic:0000000000000044 bit_reset
         tinyBasic.s:2131   .text.basic:0000000000000070 bit_set
         tinyBasic.s:2167   .text.basic:00000000000000c0 bit_test
         tinyBasic.s:2155   .text.basic:0000000000000098 bit_toggle
         tinyBasic.s:2170   .text.basic:00000000000000c4 bye
         tinyBasic.s:2173   .text.basic:00000000000000c8 char
         tinyBasic.s:2176   .text.basic:00000000000000cc const_cr2
         tinyBasic.s:2179   .text.basic:00000000000000d0 const_cr1
         tinyBasic.s:2182   .text.basic:00000000000000d4 data
         tinyBasic.s:2185   .text.basic:00000000000000d8 data_line
         tinyBasic.s:2188   .text.basic:00000000000000dc const_ddr
         tinyBasic.s:2191   .text.basic:00000000000000e0 dec_base
         tinyBasic.s:2194   .text.basic:00000000000000e4 directory
         tinyBasic.s:2197   .text.basic:00000000000000e8 do_loop
         tinyBasic.s:2200   .text.basic:00000000000000ec digital_read
         tinyBasic.s:2203   .text.basic:00000000000000f0 digital_write
         tinyBasic.s:2210   .text.basic:00000000000000f4 cmd_end
         tinyBasic.s:2214   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2217   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2220   .text.basic:0000000000000104 for
         tinyBasic.s:2223   .text.basic:0000000000000108 forget
         tinyBasic.s:2226   .text.basic:000000000000010c gosub
         tinyBasic.s:2235   .text.basic:0000000000000110 goto
         tinyBasic.s:2249   .text.basic:0000000000000140 gpio
         tinyBasic.s:2252   .text.basic:0000000000000144 hex_base
         tinyBasic.s:2255   .text.basic:0000000000000148 const_idr
         tinyBasic.s:2262   .text.basic:000000000000014c if
         tinyBasic.s:2268   .text.basic:0000000000000160 input_var
         tinyBasic.s:2271   .text.basic:0000000000000164 invert
         tinyBasic.s:2274   .text.basic:0000000000000168 enable_iwdg
         tinyBasic.s:2277   .text.basic:000000000000016c refresh_iwdg
         tinyBasic.s:2280   .text.basic:0000000000000170 key
         tinyBasic.s:2293   .text.basic:0000000000000174 let
         tinyBasic.s:2328   .text.basic:0000000000000200 list
         tinyBasic.s:2331   .text.basic:0000000000000204 load
         tinyBasic.s:2334   .text.basic:0000000000000208 log2
         tinyBasic.s:2337   .text.basic:000000000000020c lshift
         tinyBasic.s:2340   .text.basic:0000000000000210 muldiv
         tinyBasic.s:2343   .text.basic:0000000000000214 next
         tinyBasic.s:2346   .text.basic:0000000000000218 new
         tinyBasic.s:2349   .text.basic:000000000000021c func_not
         tinyBasic.s:2352   .text.basic:0000000000000220 const_odr
         tinyBasic.s:2355   .text.basic:0000000000000224 bit_or
         tinyBasic.s:2358   .text.basic:0000000000000228 pad_ref
         tinyBasic.s:2361   .text.basic:000000000000022c pause
         tinyBasic.s:2364   .text.basic:0000000000000230 pin_mode
         tinyBasic.s:2367   .text.basic:0000000000000234 peek
         tinyBasic.s:2370   .text.basic:0000000000000238 const_input
         tinyBasic.s:2373   .text.basic:000000000000023c poke
         tinyBasic.s:2376   .text.basic:0000000000000240 const_output
         tinyBasic.s:2383   .text.basic:0000000000000244 print
         tinyBasic.s:2428   .text.basic:00000000000002f0 const_porta
ARM GAS  tinyBasic.s 			page 82


         tinyBasic.s:2431   .text.basic:00000000000002f4 const_portb
         tinyBasic.s:2434   .text.basic:00000000000002f8 const_portc
         tinyBasic.s:2437   .text.basic:00000000000002fc const_portd
         tinyBasic.s:2440   .text.basic:0000000000000300 const_porte
         tinyBasic.s:2443   .text.basic:0000000000000304 const_portf
         tinyBasic.s:2446   .text.basic:0000000000000308 const_portg
         tinyBasic.s:2449   .text.basic:000000000000030c const_porth
         tinyBasic.s:2452   .text.basic:0000000000000310 const_porti
         tinyBasic.s:2455   .text.basic:0000000000000314 qkey
         tinyBasic.s:2458   .text.basic:0000000000000318 read
         tinyBasic.s:2461   .text.basic:000000000000031c remark
         tinyBasic.s:2464   .text.basic:0000000000000320 restore
         tinyBasic.s:2467   .text.basic:0000000000000324 return
         tinyBasic.s:2470   .text.basic:0000000000000328 random
         tinyBasic.s:2473   .text.basic:000000000000032c rshift
         tinyBasic.s:2480   .text.basic:0000000000000330 run
         tinyBasic.s:2495   .text.basic:000000000000035c save
         tinyBasic.s:2498   .text.basic:0000000000000360 show
         tinyBasic.s:2501   .text.basic:0000000000000364 size
         tinyBasic.s:2504   .text.basic:0000000000000368 sleep
         tinyBasic.s:2507   .text.basic:000000000000036c spi_read
         tinyBasic.s:2510   .text.basic:0000000000000370 spi_enable
         tinyBasic.s:2513   .text.basic:0000000000000374 spi_select
         tinyBasic.s:2516   .text.basic:0000000000000378 spi_write
         tinyBasic.s:2519   .text.basic:000000000000037c step
         tinyBasic.s:2522   .text.basic:0000000000000380 stop
         tinyBasic.s:2525   .text.basic:0000000000000384 get_ticks
         tinyBasic.s:2528   .text.basic:0000000000000388 set_timer
         tinyBasic.s:2531   .text.basic:000000000000038c timeout
         tinyBasic.s:2534   .text.basic:0000000000000390 to
         tinyBasic.s:2537   .text.basic:0000000000000394 tone
         tinyBasic.s:2547   .text.basic:0000000000000398 ubound
         tinyBasic.s:2555   .text.basic:00000000000003ac uflash
         tinyBasic.s:2558   .text.basic:00000000000003b0 until
         tinyBasic.s:2561   .text.basic:00000000000003b4 usr
         tinyBasic.s:2564   .text.basic:00000000000003b8 wait
         tinyBasic.s:2573   .text.basic:00000000000003bc words
         tinyBasic.s:2596   .text.basic:0000000000000424 write
         tinyBasic.s:2599   .text.basic:0000000000000428 bit_xor
         tinyBasic.s:2602   .text.basic:000000000000042c transmit
         tinyBasic.s:2605   .text.basic:0000000000000430 receive
         tinyBasic.s:2061   .text.basic:0000000000000000 $t
         tinyBasic.s:2421   .text.basic:00000000000002d8 print_exit
         tinyBasic.s:2615   .text.basic:0000000000000800 $d
         tinyBasic.s:1876   .text:0000000000000d92 $d
         tinyBasic.s:2615   .text:0000000000000d94 $d
         tinyBasic.s:597    .text:0000000000000445 $d
         tinyBasic.s:597    .text:0000000000000446 $t
         tinyBasic.s:1232   .text:000000000000089d $d
         tinyBasic.s:1232   .text:000000000000089e $t
         tinyBasic.s:1808   .text:0000000000000d49 $d
         tinyBasic.s:1808   .text:0000000000000d4a $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
ARM GAS  tinyBasic.s 			page 83


spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
