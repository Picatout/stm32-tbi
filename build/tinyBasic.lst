ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	
 160              	/* flags used by BASIC interpreter */ 
 161              		.equ FRUN,(1<<0) // programm running
 162              		.equ FTRAP,(1<<1) // inside trap handler 
 163              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 164              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 165              		.equ FBREAK,(1<<4) // break point flag 
 166              		.equ FCOMP,(1<<5)  // compiling flags 
 167              		.equ FAUTORUN,(1<<6) // auto start program running 
 168              	
 169              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 170              	  
 171              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 172              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 173              	
 174              	/***********************************************
 175              	*       MACROS
 176              	***********************************************/
 177              		.macro _CALL fn /* low level routine call */ 
 178              	 	PUSH {LR}
 179              		BL \fn  
 180              	  POP {LR}
 181              		.endm
 182              		
 183              		.macro	_RET /* return from subroutine */
 184              		BX	LR
 185              		.endm
 186              	
 187              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 188              		MOV \REG, #\LITERAL&0xffff
 189              		MOVT \REG, #\LITERAL>>16
 190              		.endm
 191              	
 192              	// local function header 
 193              	  .macro _FUNC label 
 194              	  .p2align 2 
 195              	  .type \label, %function  
 196              	\label:
 197              	  .endm 
 198              	
ARM GAS  tinyBasic.s 			page 9


 199              	// global function header 
 200              	  .macro _GBL_FUNC label 
 201              	  .global \label 
 202              	  _FUNC \label 
 203              	  .endm 
 204              	
 205              	
 206              	/********************************
 207              	    dictionary structure
 208              	------------------------------
 209              	 format:
 210              	   link:    
 211              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 212              	   cmd_name: 31 characters max 
 213              	   cmd_index: 2 bytes 
 214              	**********************************/
 215              		.macro _dict_entry tok_type,name,cmd_idx 
 216              	  .word LINK 
 217              	  .word \cmd_idx 
 218              		.word \tok_type  	
 219              		.equ LINK,.
 220              		.asciz "\name"
 221              		.p2align 2 
 222              		.endm 
 223              	
 224              	  // pop parameter in register 
 225              	  .macro _POP  reg 
 226              	  ldmia  DP!,{\reg}
 227              	  .endm 
 228              	
 229              	  // push register on parameter stack 
 230              	  .macro _PUSH reg 
 231              	  stmdb DP!,{\reg}
 232              	  .endm 
 233              	
 234              	  .macro _UNGET_TOKEN 
 235              	  ldr IN,[UPP,#IN_SAVED]
 236              	  ldr BPTR,[UPP,#BASICPTR] 
 237              	  .endm 
 238              	
 239              	 // create a text data 
 240              	 .macro _TEXT label,text
 241              	 \label: .asciz "\text"
 242              	 .p2align 2 
 243              	 .endm 
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
ARM GAS  tinyBasic.s 			page 10


  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
ARM GAS  tinyBasic.s 			page 11


  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
ARM GAS  tinyBasic.s 			page 12


 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
ARM GAS  tinyBasic.s 			page 13


  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
ARM GAS  tinyBasic.s 			page 14


 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
ARM GAS  tinyBasic.s 			page 15


 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
ARM GAS  tinyBasic.s 			page 16


 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	  BASIC: DUMP adr, count 
 239              	    command line only  
 240              	    print memory content in hexadecimal 
 241              	    16 bytes per row 
 242              	    ouput:
 243              	      none 
 244              	    use:
 245              	      r2   byte counter  
 246              	****************************************/
 247              	    _FUNC dump 
 248 0150 04B4     	    push {r2}
 249 0152 226C     	    ldr r2,[UPP,#FLAGS]
 250 0154 12F0010F 	    tst r2,#FRUN 
 251 0158 02D0     	    beq 0f
 252 015a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 253 015e ABE2     	    b tb_error  
 254 0160 00B500F0 	0:  _CALL arg_list 
 254      ABFC5DF8 
 254      04EB
 255 016a 0228     	    cmp r0,#2
 256 016c 40F0A082 	    bne syntax_error 
 257 0170 5CF8042B 	    _POP r2   // count 
 258 0174 5CF8040B 	    _POP  r0  // adr 
 259 0178 4FF01001 	1:  mov r1,#16
 260 017c 00B5FFF7 	    _CALL prt_row 
 260      A3FF5DF8 
 260      04EB
 261 0186 103A     	    subs r2,#16 
 262 0188 F6D5     	    bpl 1b 
 263 018a 04BC     	2:  pop {r2}
 264 018c 7047     	    _RET 
 265              	
 266              	/***************************************
 267              	    search_lineno 
 268              	    localize BASIC line from its number 
 269              	    input:
 270              	      r0   line# 
 271              	    output: 
 272              	      r0   adr where found || adr new to be inserted 
 273              	      r1   0 found || !0 not found  
 274              	    use:
 275              	      r0   scan address 
 276              	      r1   temp   
 277              	      r2   address end of text
 278              	      r3   target line#
 279              	****************************************/    
 280 018e 00BF     	    _FUNC search_lineno
 281 0190 0CB4     	    push {r2,r3} 
 282 0192 0346     	    mov r3,r0 // target 
 283 0194 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 284 0196 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
ARM GAS  tinyBasic.s 			page 17


 285 0198 9042     	1:  cmp r0,r2 
 286 019a 05D0     	    beq  8f
 287 019c 0188     	    ldrh r1,[r0]
 288 019e C91A     	    subs r1,r3 
 289 01a0 04D5     	    bpl 9f 
 290 01a2 8178     	    ldrb r1,[r0,#2]
 291 01a4 0844     	    add r0,r1
 292 01a6 F7E7     	    b 1b 
 293 01a8 4FF0FF31 	8:  mov r1,#-1 
 294 01ac 0CBC     	9:  pop {r2,r3}
 295 01ae 7047     	    _RET 
 296              	
 297              	
 298              	/********************************************
 299              	    delete_line 
 300              	    delete BASIC line at addr 
 301              	    input:
 302              	      r0    address 
 303              	    output:
 304              	      r0    address  
 305              	    use: 
 306              	      r1    dest adr
 307              	      r2    bytes to move 
 308              	      T1    length line to delete 
 309              	      T2    txtend 
 310              	********************************************/
 311              	    _FUNC delete_line 
 312 01b0 2DE90703 	    push {r0,r1,r2,T1,T2}
 313 01b4 0146     	    mov r1,r0 // dest 
 314 01b6 91F80280 	    ldrb T1,[r1,#2] // line length 
 315 01ba 4044     	    add r0,T1  // src
 316 01bc D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01c0 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 318 01c4 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01ce A9EB0809 	    sub T2,T1 // txtend-count 
 320 01d2 C4F83480 	    str T1,[UPP,#TXTEND] 
 321 01d6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 322 01da 7047     	    _RET 
 323              	
 324              	/******************************************
 325              	    create_gap 
 326              	    create a gap in text area to insert new line 
 327              	    input:
 328              	      r0    adr 
 329              	      r1    length 
 330              	    output:
 331              	      r0    adr 
 332              	    use:
 333              	      T1    length 
 334              	      T2    txtend 
 335              	************************************************/
 336              	    _FUNC create_gap 
 337 01dc 2DE90503 	    push {r0,r2,T1,T2}
 338 01e0 8846     	    mov T1,R1
 339 01e2 0144     	    add r1,r0  // dest 
ARM GAS  tinyBasic.s 			page 18


 340 01e4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 341 01e8 A9EB0002 	    sub r2,T2,r0 
 342 01ec 00B5FFF7 	    _CALL cmove
 342      FEFF5DF8 
 342      04EB
 343 01f6 C144     	    add T2,T1 
 344 01f8 C4F83490 	    str T2,[UPP,#TXTEND]
 345 01fc BDE80503 	    pop {r0,r2,T1,T2}
 346 0200 7047     	    _RET 
 347              	
 348              	/************************************************
 349              	    insert_line 
 350              	    insert BASIC line in text area 
 351              	    first search if line with same number exist 
 352              	    replace if so. 
 353              	    input:
 354              	      r0    *buffer to insert 
 355              	    output:
 356              	      none 
 357              	    use: 
 358              	      T1     *buffer
 359              	      T2     temp  
 360              	************************************************/ 
 361 0202 00BF     	    _FUNC insert_line 
 362 0204 2DE90203 	    push {r1,T1,T2}
 363 0208 8046     	    mov T1,r0 
 364 020a B8F80000 	    ldrh r0,[T1]
 365 020e 00B5FFF7 	    _CALL search_lineno 
 365      BEFF5DF8 
 365      04EB
 366 0218 49B9     	    cbnz  r1, 1f // line# doesn't exist
 367              	// already exist 
 368 021a 00B5FFF7 	    _CALL delete_line // delete old one 
 368      C8FF5DF8 
 368      04EB
 369 0224 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 370 0228 B9F1030F 	    cmp T2,#3 
 371 022c 0DD0     	    beq 9f
 372              	1: //insert new line 
 373 022e 98F80210 	    ldrb r1,[T1,#2]
 374 0232 00B5FFF7 	    _CALL create_gap 
 374      D2FF5DF8 
 374      04EB
 375 023c 4146     	    mov r1,T1 
 376 023e 8A78     	    ldrb r2,[r1,#2]
 377 0240 00B5FFF7 	    _CALL cmove 
 377      FEFF5DF8 
 377      04EB
 378 024a BDE80203 	9:  pop {r1,T1,T2}
 379 024e 7047     	    _RET 
 380              	
 381              	/*********************************
 382              	    compile 
 383              	    tokenize source line save it 
 384              	    in pas buffer.
 385              	    compiled line format: 
 386              	      line_no  2 bytes {0...32767}
ARM GAS  tinyBasic.s 			page 19


 387              	      count    1 byte  
 388              	      tokens   variable length 
 389              	  input:
 390              	     r0   *text buffer 
 391              	     r1   *text length   
 392              	  output:
 393              	    r0    0 stored | -1 immediate 
 394              	  use:
 395              	    r3    tib index   
 396              	    T1    tib
 397              	    T2    pad
 398              	***********************************/
 399              	    _FUNC compile
 400 0250 8046     	    mov T1, r0  // source text buffer 
 401 0252 6160     	    str r1,[UPP,#COUNT] // save line length 
 402 0254 DFF8B896 	    ldr T2,pad // tokens buffer
 403 0258 83EA0303 	    eor r3,r3 // source index  
 404 025c 206C     	    ldr r0,[UPP,#FLAGS]
 405 025e 40F02000 	    orr r0,#FCOMP
 406 0262 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 407 0264 80EA0000 	    eor r0,r0     
 408 0268 29F8020B 	    strh r0,[T2],#2   // line no 
 409 026c 09F8010B 	    strb r0,[T2],#1 // length 
 410 0270 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 411 0272 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 412 0276 00B500F0 	    _CALL parse_int 
 412      F8F85DF8 
 412      04EB
 413 0280 07D0     	    beq 2f 
 414              	// this is a line number     
 415 0282 0129     	    cmp r1,#1 
 416 0284 02D5     	    bpl 1f 
 417 0286 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 418 028a 15E2     	    b tb_error  
 419              	1:  // write line # to pad 
 420 028c 29F8031C 	    strh r1,[T2,#-3]
 421 0290 2360     	    str r3,[UPP,#IN_SAVED]
 422              	2:  // check for pad full 
 423 0292 C145     	    cmp T2,T1
 424 0294 02DB     	    blt 3f 
 425 0296 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 426 029a 0DE2     	    b tb_error 
 427 029c 00B500F0 	3:  _CALL comp_token 
 427      21F85DF8 
 427      04EB
 428 02a6 0028     	    cmp r0,#TK_NONE 
 429 02a8 01D0     	    beq 4f 
 430 02aa 2360     	    str r3,[UPP,#IN_SAVED]
 431 02ac F1E7     	    b 2b 
 432              	4: // compilation completed 
 433 02ae DFF86036 	    ldr r3,pad 
 434 02b2 A9EB0300 	    sub r0,T2,r3 // line length 
 435 02b6 9870     	    strb r0,[r3,#2]
 436 02b8 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 437 02ba 1888     	    ldrh r0,[r3] // line number 
 438 02bc 38B1     	    cbz r0,8f  
 439              	// insert line in text buffer 
ARM GAS  tinyBasic.s 			page 20


 440 02be 1846     	    mov r0,r3 
 441 02c0 00B5FFF7 	    _CALL insert_line 
 441      9FFF5DF8 
 441      04EB
 442 02ca 4040     	    eors r0,r0 
 443 02cc 08E0     	    b 9f 
 444 02ce 9B46     	8:  mov BPTR,r3 // *token_list 
 445 02d0 4FF0030A 	    mov IN,#3
 446 02d4 206C     	    ldr r0,[UPP,#FLAGS]
 447 02d6 A0F12000 	    sub r0,#FCOMP
 448 02da 2064     	    str r0,[UPP,#FLAGS]
 449 02dc 5FF0FF30 	    movs r0,#-1 
 450 02e0 7047     	9:  _RET 
 451              	
 452              	/*********************************************
 453              	    compile next token from source 
 454              	    input: 
 455              	      r3 		tib index  
 456              	      T1    tib adr
 457              	      T2    insert point in pad  
 458              	    output:
 459              	      r0     token attribute 
 460              	      r1 		token value
 461              	      r3     tib index updated    
 462              	      T2     updated 
 463              	      use:
 464              	**********************************************/
 465              	    .macro _case c, next  
 466              	    cmp r0,#\c 
 467              	    bne \next
 468              	    .endm 
 469              	
 470 02e2 00BF     	    _FUNC comp_token 
 471 02e4 40B4     	    push {r6}
 472 02e6 18F80300 	    ldrb r0,[T1,r3]
 473 02ea 0040     	    ands r0,r0 
 474 02ec 68D0     	    beq store_r0  // reached end of text  
 475 02ee 4FF02000 	    mov r0,#SPACE 
 476 02f2 00B500F0 	    _CALL skip  // skip spaces 
 476      26F95DF8 
 476      04EB
 477 02fc 18F80300 	    ldrb r0,[T1,r3]
 478 0300 0040     	    ands r0,r0 
 479 0302 5DD0     	    beq store_r0  // reached end of text 
 480 0304 03F10103 	    add r3,#1 
 481 0308 00B500F0 	    _CALL upper 
 481      27F95DF8 
 481      04EB
 482 0312 00B500F0 	    _CALL is_special
 482      74F85DF8 
 482      04EB
 483 031c DFF86C6A 	    ldr r6,=token_ofs
 484 0320 D6E811F0 	    tbh [r6,r1] 
 485              	tok_idx0:     
 486              	//  not special char.  
 487 0324 4FE0     	    b try_number 
 488              	// single char token with no value 
ARM GAS  tinyBasic.s 			page 21


 489              	single: 
 490 0326 DFF8686A 	    ldr r6,=tok_single
 491 032a 705C     	    ldrb r0,[r6,r1] 
 492 032c 48E0     	    b store_r0  
 493              	lt:
 494 032e 4FF03400 	    mov r0,#TK_LT
 495 0332 18F80310 	    ldrb r1,[T1,r3]
 496 0336 3E29     	    cmp r1,#'>' 
 497 0338 06D0     	    beq 1f
 498 033a 41E0     	    b store_r0 
 499              	gt:
 500 033c 4FF03100 	    mov r0,#TK_GT 
 501 0340 18F80310 	    ldrb r1,[T1,r3]
 502 0344 3C29     	    cmp r1,#'<'
 503 0346 04D1     	    bne 2f  
 504 0348 03F10103 	1:  add r3,#1
 505 034c 4FF03500 	    mov r0,#TK_NE  
 506 0350 36E0     	    b store_r0
 507 0352 3D29     	2:  cmp r1,#'=' 
 508 0354 34D1     	    bne store_r0  
 509 0356 03F10103 	    add r3,#1
 510 035a 00F10200 	    add r0,#2
 511 035e 2FE0     	    b store_r0       
 512              	bkslash:
 513 0360 18F80310 	    ldrb r1,[T1,r3]
 514 0364 03F10103 	    add r3,#1
 515 0368 4FF00300 	    mov r0,#TK_CHAR 
 516 036c 09F8010B 	    strb r0,[T2],#1
 517 0370 09F8011B 	    strb r1,[T2],#1
 518 0374 41E0     	    b token_exit 
 519              	prt_cmd: 
 520 0376 4FF00A00 	    mov r0,#TK_CMD 
 521 037a 4FF03A01 	    mov r1,#PRT_IDX
 522 037e 09F8010B 	    strb r0,[T2],#1
 523 0382 09F8011B 	    strb r1,[T2],#1
 524 0386 38E0     	    b token_exit 
 525              	quote:
 526 0388 4FF00200 	    mov r0,#TK_QSTR 
 527 038c 09F8010B 	    strb r0,[T2],#1
 528 0390 00B500F0 	    _CALL parse_quote
 528      A3F85DF8 
 528      04EB
 529 039a 2EE0     	    b token_exit
 530              	tick: 
 531              	// copy comment in pad 
 532 039c 4FF00A00 	    mov r0,#TK_CMD 
 533 03a0 4FF04701 	    mov r1,#REM_IDX 
 534 03a4 09F8010B 	    strb r0,[T2],#1 
 535 03a8 09F8011B 	    strb r1,[T2],#1
 536 03ac 08EB0300 	    add r0,T1,r3 
 537 03b0 4946     	    mov r1,T2 
 538 03b2 00B5FFF7 	    _CALL strcpy 
 538      FEFF5DF8 
 538      04EB
 539 03bc 6368     	    ldr r3,[UPP,#COUNT]
 540 03be 1CE0     	    b token_exit
 541              	store_r0: 
ARM GAS  tinyBasic.s 			page 22


 542 03c0 09F8010B 	    strb r0,[T2],#1
 543 03c4 19E0     	    b token_exit 
 544              	try_number:
 545 03c6 A3F10103 	    sub r3,#1
 546 03ca 00B500F0 	    _CALL parse_int  
 546      4EF85DF8 
 546      04EB
 547 03d4 04D0     	    beq 1f 
 548 03d6 09F8010B 	    strb r0,[T2],#1 
 549 03da 49F8041B 	    str r1,[T2],#4
 550 03de 0CE0     	    b token_exit 
 551 03e0 00B500F0 	1:  _CALL parse_keyword 
 551      13F95DF8 
 551      04EB
 552 03ea 0428     	    cmp r0,#TK_VAR 
 553 03ec 01D0     	    beq 2f 
 554 03ee 4729     	    cmp r1,#REM_IDX 
 555 03f0 D4D0     	    beq tick
 556 03f2 09F8010B 	2:  strb r0,[T2],#1 
 557 03f6 09F8011B 	    strb r1,[T2],#1
 558              	token_exit:
 559 03fa 40BC     	    pop {r6}
 560 03fc 7047     	    _RET 
 561              	
 562              	/****************************
 563              	    is_special  
 564              	    check for non alphanum
 565              	    input:
 566              	      r0    character to scan 
 567              	    output:
 568              	      r0    character 
 569              	      r1    0 || index 
 570              	    use: 
 571              	      r1    scan index 
 572              	      r2    temp 
 573              	      r3    char_list 
 574              	*****************************/
 575 03fe 00BF     	    _FUNC is_special 
 576 0400 0CB4     	    push {r2,r3}
 577 0402 4FF00101 	    mov r1,#1
 578 0406 DFF88C39 	    ldr r3,=char_list 
 579 040a 5A5C     	1:  ldrb r2,[r3,r1]
 580 040c 22B1     	    cbz r2,8f 
 581 040e 8242     	    cmp r2,r0 
 582 0410 04D0     	    beq 9f 
 583 0412 01F10101 	    add r1,#1 
 584 0416 F8E7     	    b 1b
 585 0418 81EA0101 	8:  eor r1,r1     
 586 041c 0CBC     	9:  pop {r2,r3}
 587 041e 7047     	    _RET 
 588              	
 589              	char_list:
 590 0420 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 590      293A232D 
 590      2B2A2F25 
 590      3D3C3E5C 
 590      3F272200 
ARM GAS  tinyBasic.s 			page 23


 591              	
 592              	tok_single:
 593 0434 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 593      070109
 594 043b 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 594      2232
 595              	  
 596 0441 0000BF   	  .p2align 2
 597              	token_ofs:
 598 0444 0000     	  .hword  0 // not found
 599              	  // TK_COMMA...TK_EQUAL , 12 
 600 0446 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 600      01000100 
 601 044e 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 601      01000100 
 602 0456 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 602      01000100 
 603              	  // '<','>'
 604 045e 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 605              	  // '\'
 606 0462 1E00     	  .hword  (bkslash-tok_idx0)/2
 607              	  // '?' 
 608 0464 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 609              	  // "'"  
 610 0466 3C00     	  .hword  (tick-tok_idx0)/2 
 611              	  // '"' quote 
 612 0468 3200     	  .hword (quote-tok_idx0)/2
 613              	
 614 046a 00BF     	  .p2align 2
 615              	
 616              	/****************************
 617              	    parse_int 
 618              	    parse an integer from text
 619              	    if not valid integer 
 620              	    r1 return *buffer else 
 621              	    *buffer is incremented after integer 
 622              	  input:
 623              	    r0   *buffer 
 624              	  output:
 625              	    r0   TK_INTGR|TK_NONE
 626              	    r1   int|0   
 627              	  use:
 628              	    r0   char 
 629              	    r1   save r3 
 630              	    r2   int
 631              	    r6   base 
 632              	    r7   digit count 
 633              	    r3   tib index   
 634              	    T1   *tib 
 635              	    T2   *pad  
 636              	*****************************/
 637              	    _FUNC parse_int 
 638 046c C0B4     	    push {r6,r7}
 639 046e 82EA0202 	    eor r2,r2 // int 
 640 0472 1946     	    mov r1,r3 
 641 0474 4FF00A06 	    mov r6,#10 // default base 
 642 0478 87EA0707 	    eor r7,r7 // digit count 
ARM GAS  tinyBasic.s 			page 24


 643 047c 18F80300 	    ldrb r0,[T1,r3]
 644 0480 03F10103 	    add r3,#1 
 645 0484 2428     	    cmp r0,'$' 
 646 0486 02D1     	    bne 2f 
 647 0488 4FF01006 	    mov r6,#16 // hexadecimal number 
 648 048c 03E0     	    b 3f  
 649 048e 2628     	2:  cmp r0,#'&' 
 650 0490 05D1     	    bne 4f
 651 0492 4FF00206 	    mov r6,#2 //binary number  
 652 0496 18F80300 	3:  ldrb r0,[T1,r3]
 653 049a 03F10103 	    add r3,#1
 654 049e 00B500F0 	4:  _CALL upper 
 654      5CF85DF8 
 654      04EB
 655 04a8 4128     	    cmp r0,#'A'
 656 04aa 00D4     	    bmi 5f
 657 04ac 0738     	    subs r0,#7  
 658 04ae 3038     	5:  subs r0,#'0' 
 659 04b0 07D4     	    bmi 6f // not digit   
 660 04b2 B042     	    cmp r0,r6 
 661 04b4 05D5     	    bpl 6f // not digit 
 662 04b6 06FB02F2 	    mul r2,r6 
 663 04ba 0244     	    add r2,r0
 664 04bc 07F10107 	    add r7,#1  
 665 04c0 E9E7     	    b 3b
 666 04c2 A3F10103 	6:  sub r3,#1  // unget last char
 667 04c6 1FB1     	    cbz r7, 7f 
 668 04c8 4FF00E00 	    mov r0,#TK_INTGR  
 669 04cc 1146     	    mov r1,r2 
 670 04ce 02E0     	    b 9f 
 671              	7: // not a number 
 672 04d0 0B46     	    mov r3,r1 // restore r3 
 673 04d2 80EA0000 	    eor r0,r0 // TK_NONE 
 674 04d6 0040     	9:  ands r0,r0 // to set zero flag 
 675 04d8 C0BC     	    pop {r6,r7}
 676 04da 7047     	    _RET 
 677              	
 678              	/*********************************************
 679              	    parse_quote 
 680              	    parse quoted string 
 681              	    input: 
 682              	      r3 		tib index  
 683              	      T1    tib adr
 684              	      T2    insert point in pad  
 685              	    output:
 686              	      r0     token attribute 
 687              	      r1 		*str 
 688              	      r3     tib index updated    
 689              	      T2     updated 
 690              	      use:
 691              	*********************************************/
 692              	    _FUNC parse_quote
 693 04dc 4DF8049D 	    push {T2} 
 694 04e0 18F80300 	1:  ldrb r0,[T1,r3]
 695 04e4 03F10103 	    add r3,#1 
 696 04e8 2228     	    cmp r0,#'"'
 697 04ea 09D0     	    beq 9f 
ARM GAS  tinyBasic.s 			page 25


 698 04ec 5C28     	    cmp r0,#'\\'
 699 04ee 04D1     	    bne 2f 
 700 04f0 00B500F0 	    _CALL get_escaped_char 
 700      0DF85DF8 
 700      04EB
 701 04fa 09F8010B 	2:  strb r0,[T2],#1
 702 04fe EFE7     	    b 1b 
 703 0500 80EA0000 	9:  eor  r0,r0
 704 0504 09F8010B 	    strb r0,[T2],#1
 705 0508 4FF00200 	    mov r0,#TK_QSTR
 706 050c 02BC     	    pop {r1}
 707 050e 7047     	    _RET 
 708              	
 709              	/**********************************************
 710              	    get_escaped_char 
 711              	    convert "\c" in quoted string 
 712              	    input:
 713              	      r0 
 714              	      r3   index 
 715              	      T1   tib 
 716              	    output:
 717              	      r0   replacement char
 718              	      r3   updated 
 719              	    use:
 720              	      r1   *table 
 721              	      r2   temp 
 722              	**********************************************/
 723              	    _FUNC get_escaped_char 
 724 0510 06B4     	    push {r1,r2}
 725 0512 18F80300 	    ldrb r0,[T1,r3]
 726 0516 03F10103 	    add r3,#1
 727 051a 2228     	    cmp r0,#'"' 
 728 051c 0BD0     	    beq 9f 
 729 051e DFF87818 	1:  ldr r1,=escaped 
 730 0522 11F8012B 	2:  ldrb r2,[r1],#1
 731 0526 12B1     	    cbz r2,6f 
 732 0528 8242     	    cmp r2,r0 
 733 052a 02D0     	    beq 7f 
 734 052c F9E7     	    b 2b
 735 052e A0F10702 	6:  sub r2,r0,#7     
 736 0532 02F10700 	7:  add r0,r2,#7
 737 0536 06BC     	9:  pop {r1,r2}   
 738 0538 7047     	    _RET
 739              	
 740 053a 6162746E 	escaped: .asciz "abtnvfr"
 740      76667200 
 741              	
 742              	/*********************************************
 743              	   skip character in TIB 
 744              	   input:
 745              	      r0    character to skip 
 746              	      r3    tib index 
 747              	      T1    tib adr
 748              	    output: 
 749              	      r3    updated
 750              	    use:
 751              	      r1     
ARM GAS  tinyBasic.s 			page 26


 752              	**********************************************/   
 753 0542 00BF     	    _FUNC skip
 754 0544 02B4     	    push {r1} 
 755 0546 18F80310 	1:  ldrb r1,[T1,r3]
 756 054a 8142     	    cmp r1,r0
 757 054c 02D1     	    bne 2f
 758 054e 03F10103 	    add r3,#1 
 759 0552 F8E7     	    b 1b 
 760 0554 2360     	2:  str r3,[UPP,#IN_SAVED]
 761 0556 02BC     	    pop {r1}
 762 0558 7047     	    _RET
 763              	
 764              	/********************************************
 765              	    upper
 766              	    convert character in upper case 
 767              	    input: 
 768              	      r0   character 
 769              	    output:
 770              	      r0   upper case character 
 771              	*********************************************/
 772 055a 00BF     	    _FUNC upper 
 773 055c 6128     	    cmp r0,#'a' 
 774 055e 03DB     	    blt 9f 
 775 0560 7A28     	    cmp r0,#'z' 
 776 0562 01DC     	    bgt 9f 
 777 0564 00F05F00 	    and r0,#0x5f 
 778 0568 7047     	9:  _RET 
 779              	
 780              	/***************************************
 781              	   is_digit 
 782              	   check if char is decimal digit.
 783              	   convert to decimal digit.
 784              	   input:
 785              	      r0    char 
 786              	   output:
 787              	      r0    if Z then converted digit 
 788              	      Z     0 true | 1 false  
 789              	***************************************/
 790 056a 00BF     	    _FUNC is_digit 
 791 056c 02B4     	    push {r1} 
 792 056e 81EA0101 	    eor r1,r1 
 793 0572 3038     	    subs r0,#'0' 
 794 0574 03DB     	    blt 9f
 795 0576 3A28     	    cmp r0,'9'+1
 796 0578 01D4     	    bmi 9f 
 797 057a 4FF0FF31 	    mov r1,#-1 
 798              	9:   
 799 057e 0940     	    ands r1,r1
 800 0580 02BC     	    pop {r1} 
 801 0582 7047     	    _RET 
 802              	
 803              	/***************************************
 804              	    is_hex 
 805              	    check for hexadecimal digit 
 806              	    convert to hex digit.
 807              	    input:
 808              	      r0    
ARM GAS  tinyBasic.s 			page 27


 809              	    output:
 810              	      r0     if Z then converted digit 
 811              	      Z      0 true | 1 false         
 812              	***************************************/
 813              	    _FUNC is_hex 
 814 0584 02B4     	    push {r1}
 815 0586 4FF0FF31 	    mov r1,#-1 
 816 058a 4128     	    cmp r0,#'A' 
 817 058c 01D4     	    bmi 1f 
 818 058e A0F10700 	    sub r0,#7 
 819 0592 A0F13000 	1:  sub r0,#'0'
 820 0596 01D4     	    bmi 2f 
 821 0598 1028     	    cmp r0,#16
 822 059a 01D4     	    bmi 9f 
 823 059c 81EA0101 	2:  eor r1,r1  
 824 05a0 0940     	9:  ands r1,r1 
 825 05a2 02BC     	    pop {r1}
 826 05a4 7047     	    _RET 
 827              	
 828              	/***************************************
 829              	    is_bit 
 830              	    check if char is '0'|'1' 
 831              	    convert to binary digit. 
 832              	    input:
 833              	      r0    
 834              	    output:
 835              	      r0     if Z then converted digit 
 836              	      Z      0 true | 1 false         
 837              	***************************************/
 838 05a6 00BF     	    _FUNC is_bit
 839 05a8 02B4     	    push  {r1}
 840 05aa 4FF0FF31 	    mov r1,#-1 
 841 05ae A0F13000 	    sub r0,#'0' 
 842 05b2 01D4     	    bmi 2f 
 843 05b4 0229     	    cmp r1,#2
 844 05b6 01D4     	    bmi 9f 
 845 05b8 81EA0101 	2:  eor r1,r1 
 846 05bc 0940     	9:  ands r1,r1 
 847 05be 02BC     	    pop {r1}
 848 05c0 7047     	    _RET 
 849              	
 850              	/***************************************
 851              	    is_alpha 
 852              	    check if character is {A..Z} 
 853              	  input:
 854              	    r0   character 
 855              	  output: 
 856              	    r0    same character 
 857              	    Z    0 true | 1 false  
 858              	****************************************/
 859 05c2 00BF     	    _FUNC is_alpha
 860 05c4 02B4     	    push {r1} 
 861 05c6 4FF0FF31 	    mov r1,#-1 
 862 05ca 4128     	    cmp r0,#'A' 
 863 05cc 01DB     	    blt 8f 
 864 05ce 5B28     	    cmp r0,#'Z'+1 
 865 05d0 01D4     	    bmi 9f 
ARM GAS  tinyBasic.s 			page 28


 866 05d2 81EA0101 	8:  eor r1,r1  
 867 05d6 0940     	9:  ands r1,r1 
 868 05d8 02BC     	    pop {r1}
 869 05da 7047     	    _RET 
 870              	
 871              	/***************************************
 872              	    is_num 
 873              	    check if character is {0..9} 
 874              	  input:
 875              	    r0   character 
 876              	  output: 
 877              	    r0    same character 
 878              	    Z    0 true | 1 false  
 879              	****************************************/
 880              	    _FUNC is_num 
 881 05dc 02B4     	    push {r1} 
 882 05de 4FF0FF31 	    mov r1,#-1 
 883 05e2 3028     	    cmp r0,#'0' 
 884 05e4 01DB     	    blt 8f 
 885 05e6 3A28     	    cmp r0,#'9'+1 
 886 05e8 01D4     	    bmi 9f 
 887 05ea 81EA0101 	8:  eor r1,r1  
 888 05ee 0940     	9:  ands r1,r1 
 889 05f0 02BC     	    pop {r1}
 890 05f2 7047     	    _RET 
 891              	
 892              	/*****************************************
 893              	    is_alnum 
 894              	    check if character is alphanumeric 
 895              	    input:
 896              	      r0 
 897              	    output:
 898              	      r0     same 
 899              	      Z      1 false | 0 true 
 900              	*****************************************/
 901              	    _FUNC is_alnum 
 902 05f4 00B5FFF7 	    _CALL is_alpha 
 902      E5FF5DF8 
 902      04EB
 903 05fe 04D1     	    bne 9f 
 904 0600 00B5FFF7 	    _CALL is_num 
 904      EBFF5DF8 
 904      04EB
 905 060a 7047     	9:  _RET 
 906              	
 907              	
 908              	/*****************************************
 909              	    parse_keyword 
 910              	    parse work and ckeck if in dictionary 
 911              	    input:
 912              	      r0    first character 
 913              	      r3    tib index 
 914              	      t1    tib 
 915              	      t2    pad 
 916              	    output:
 917              	      r3    updated 
 918              	      t1    updated 
ARM GAS  tinyBasic.s 			page 29


 919              	      t2    updated   
 920              	    use:
 921              	    
 922              	*****************************************/
 923              	    _FUNC parse_keyword 
 924 060c 4DF8049D 	    push {T2}
 925 0610 18F80300 	    ldrb r0,[T1,r3]
 926 0614 03F10103 	    add r3,#1
 927 0618 F8B1     	    cbz r0,2f 
 928 061a 00B5FFF7 	    _CALL upper 
 928      9EFF5DF8 
 928      04EB
 929 0624 00B5FFF7 	    _CALL is_alpha 
 929      CDFF5DF8 
 929      04EB
 930 062e 3FD0     	    beq syntax_error 
 931 0630 09F8010B 	    strb r0,[T2],#1
 932 0634 18F80300 	1:  ldrb r0,[T1,r3]
 933 0638 03F10103 	    add r3,#1 
 934 063c 68B1     	    cbz r0,2f 
 935 063e 00B5FFF7 	    _CALL upper 
 935      8CFF5DF8 
 935      04EB
 936 0648 00B5FFF7 	    _CALL is_alnum
 936      D3FF5DF8 
 936      04EB
 937 0652 02D0     	    beq 2f 
 938 0654 09F8010B 	    strb r0,[T2],#1
 939 0658 ECE7     	    b 1b 
 940 065a A3F10103 	2:  sub r3,#1
 941 065e 80EA0000 	    eor r0,r0
 942 0662 89F80000 	    strb r0,[T2] 
 943 0666 0098     	    ldr r0,[sp]
 944 0668 4178     	    ldrb r1,[r0,#1] 
 945 066a 29B9     	    cbnz r1,3f
 946 066c 0178     	    ldrb r1,[r0]
 947 066e A1F14101 	    sub r1,#'A'
 948 0672 4FF00400 	    mov r0,#TK_VAR
 949 0676 08E0     	    b 9f 
 950 0678 DFF82017 	3:  ldr r1,=kword_dict  
 951 067c 00B500F0 	    _CALL search_dict 
 951      7BF85DF8 
 951      04EB
 952 0686 00B9     	    cbnz r0,9f 
 953 0688 12E0     	    b syntax_error 
 954 068a 5DF8049B 	9:  pop {T2}
 955 068e 7047     	    _RET 
 956              	
 957              	
 958              	/*******************
 959              	    DECOMPILER 
 960              	*******************/
 961              	
 962              	/**********************************
 963              	    cmd_name 
 964              	    reverse dictionary search 
 965              	    from CMD_IDX to NAME 
ARM GAS  tinyBasic.s 			page 30


 966              	  input:
 967              	    r0    CMD_IDX 
 968              	  output:
 969              	    r0    *NAME | 0 
 970              	  use:
 971              	    r1    dictionary link
 972              	    r2    tmp 
 973              	**********************************/
 974              	    _FUNC cmd_name
 975 0690 06B4     	    push {r1,r2}
 976 0692 DFF80817 	    ldr r1,=kword_dict  
 977 0696 0A78     	1:  ldrb r2,[r1]
 978 0698 3AB1     	    cbz r2,3f 
 979 069a 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 980 069e 9042     	    cmp r0,r2 
 981 06a0 02D0     	    beq 2f 
 982 06a2 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 983 06a6 F6E7     	    b 1b
 984 06a8 0A46     	2:  mov r2,r1
 985 06aa 1046     	3:  mov r0,r2 
 986 06ac 06BC     	    pop {r1,r2}
 987 06ae 7047     	    _RET 
 988              	
 989              	
 990              	/**********************************
 991              	      BASIC commands 
 992              	**********************************/
 993              	
 994              	/*********************************
 995              	    syntax_error 
 996              	    display syntax error message and 
 997              	    abort program 
 998              	  input:
 999              	    none  
 1000              	  output: 
 1001              	    none 
 1002              	  use:
 1003              	*********************************/
 1004              	    _FUNC syntax_error 
 1005 06b0 4FF00200 	    mov r0,#ERR_SYNTAX
 1006 06b4 00E0     	    b tb_error 
 1007              	
 1008              	/*********************************
 1009              	    tb_error 
 1010              	    display BASIC error and 
 1011              	    abort program. 
 1012              	  input:
 1013              	    r0    error code   
 1014              	  output: 
 1015              	    none 
 1016              	  use:
 1017              	    r1    temp 
 1018              	*********************************/
 1019 06b6 00BF     	    _FUNC tb_error 
 1020 06b8 DFF8E416 	    ldr r1,=err_msg 
 1021 06bc 4FEA8000 	    lsl r0,#2 
 1022 06c0 0858     	    ldr r0,[r1,r0]
ARM GAS  tinyBasic.s 			page 31


 1023 06c2 00B5FFF7 	    _CALL uart_puts
 1023      FEFF5DF8 
 1023      04EB
 1024 06cc 206C     	    ldr r0,[UPP,#FLAGS]
 1025 06ce 10F0200F 	    tst r0,#FCOMP
 1026 06d2 00D1     	    bne compile_error
 1027              	interpret_error:
 1028              	    
 1029 06d4 24E1     	    b warm_start 
 1030              	compile_error:
 1031 06d6 A068     	    ldr r0,[UPP,#BASICPTR]
 1032 06d8 00B5FFF7 	    _CALL uart_puts 
 1032      FEFF5DF8 
 1032      04EB
 1033 06e2 2068     	    ldr r0,[UPP,#IN_SAVED]
 1034 06e4 00B5FFF7 	    _CALL spaces 
 1034      FEFF5DF8 
 1034      04EB
 1035 06ee 4FF05E00 	    mov r0,#'^' 
 1036 06f2 00B5FFF7 	    _CALL uart_putc
 1036      FEFF5DF8 
 1036      04EB
 1037 06fc 4FF00D00 	    mov r0,#CR 
 1038 0700 00B5FFF7 	    _CALL uart_putc   
 1038      FEFF5DF8 
 1038      04EB
 1039 070a 09E1     	    b  warm_start  
 1040              	    
 1041              	err_msg:
 1042 070c 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1042      00000000 
 1042      0D000000 
 1042      1B000000 
 1042      34000000 
 1043 0724 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1043      6F000000 
 1043      89000000 
 1043      9A000000 
 1043      AB000000 
 1044 0738 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1044      EA000000 
 1044      FA000000 
 1044      0E010000 
 1044      21010000 
 1045              	
 1046              	    .section .rodata.tb_error 
 1047              	
 1048 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1048      72792066 
 1048      756C6C0A 
 1048      00
 1049 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1049      61782065 
 1049      72726F72 
 1049      0A00
 1050 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1050      206F7065 
ARM GAS  tinyBasic.s 			page 32


 1050      72617469 
 1050      6F6E206F 
 1050      76657266 
 1051 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1051      73696F6E 
 1051      20627920 
 1051      300A00
 1052 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1052      6C696420 
 1052      6C696E65 
 1052      206E756D 
 1052      6265722E 
 1053 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1053      74696D65 
 1053      206F6E6C 
 1053      79207573 
 1053      6167652E 
 1054 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1054      616E6420 
 1054      6C696E65 
 1054      206F6E6C 
 1054      79207573 
 1055 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1055      69636174 
 1055      65206E61 
 1055      6D652E0A 
 1055      00
 1056 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1056      206E6F74 
 1056      20666F75 
 1056      6E642E0A 
 1056      00
 1057 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1057      76616C75 
 1057      652E0A00 
 1058 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1058      20696E20 
 1058      65787465 
 1058      6E646564 
 1058      206D656D 
 1059 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1059      61746120 
 1059      666F756E 
 1059      642E0A00 
 1060 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1060      726F6772 
 1060      616D2069 
 1060      6E205241 
 1060      4D210A00 
 1061 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1061      20737973 
 1061      74656D20 
 1061      66756C6C 
 1061      2E0A00
 1062 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1062      65722066 
 1062      756C6C0A 
ARM GAS  tinyBasic.s 			page 33


 1062      00
 1063              	
 1064 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1064      2074696D 
 1064      65206572 
 1064      726F722C 
 1064      2000
 1065 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1065      70696C65 
 1065      20657272 
 1065      6F722C20 
 1065      00
 1066 0151 6C617374 	tk_id: .asciz "last token id: "
 1066      20746F6B 
 1066      656E2069 
 1066      643A2000 
 1067              	
 1068              	
 1069              	    .section  .text , "ax", %progbits 
 1070              	
 1071              	/*********************************
 1072              	   BASIC: BTGL adr, mask   
 1073              	   toggle bits [adr]=[adr]^mask  
 1074              	   input:
 1075              	     r0    adr 
 1076              	     r1    mask 
 1077              	    output;
 1078              	      none 
 1079              	    use:
 1080              	      T1   temp
 1081              	      T2   temp  
 1082              	*******************************/     
 1083              	    _FUNC BTGL 
 1084              	
 1085 074c 7047     	    _RET 
 1086              	
 1087              	/***************************************
 1088              	   kword_cmp
 1089              	   compare keyword to dict entry
 1090              	  input:
 1091              	    r0  keyword 
 1092              	    r1  dict entry 
 1093              	    r2  character count 
 1094              	  output:
 1095              	    r0  0 not same | -1 same 
 1096              	  use:
 1097              	    r6   result  
 1098              	    T1   char 1
 1099              	    T2   char 2
 1100              	**************************************/   
 1101 074e 00BF     	    _FUNC kword_cmp 
 1102 0750 2DE94003 	    push {r6,T1,T2}
 1103 0754 4FF0FF36 	    mov r6,#-1 
 1104 0758 4AB1     	1:  cbz r2,9f       
 1105 075a 10F8018B 	    ldrb T1,[r0],#1
 1106 075e 11F8019B 	    ldrb T2,[r1],#1
 1107 0762 A2F10102 	    sub r2,#1
ARM GAS  tinyBasic.s 			page 34


 1108 0766 C845     	    cmp T1,T2
 1109 0768 F6D0     	    beq 1b 
 1110 076a 86EA0606 	    eor r6,r6  
 1111 076e 3046     	9:  mov r0,r6
 1112 0770 BDE84003 	    pop {r6,T1,T2}
 1113 0774 7047     	    _RET 
 1114              	
 1115              	/***********************************************
 1116              	    search_dict 
 1117              	    search keyword in dictionary
 1118              	   input:
 1119              	  	 r0   keyword 
 1120              	     r1		dictionary first name field address  
 1121              	   output:
 1122              	     r0 		token attribute 
 1123              	     r1		  cmd_index if r0!=TK_NONE  
 1124              	   use:
 1125              	     r3   length keyword 
 1126              	     T1   keyword
 1127              	     T2   link  
 1128              	**********************************************/
 1129 0776 00BF     	  _FUNC search_dict
 1130 0778 2DE90C03 	  push {r2,r3,T1,T2}
 1131 077c 8046     	  mov T1,r0 
 1132 077e 00B5FFF7 	  _CALL strlen 
 1132      FEFF5DF8 
 1132      04EB
 1133 0788 0346     	  mov r3,r0  
 1134              	1:  
 1135 078a 8946     	   mov T2,r1  // keep for linking   
 1136 078c 0878     	   ldrb r0,[r1] 
 1137 078e 78B1     	   cbz r0,9f // null byte, end of dictionary
 1138 0790 4046     	   mov r0,T1
 1139 0792 1A46     	   mov r2,r3   
 1140 0794 00B5FFF7 	   _CALL kword_cmp  
 1140      DBFF5DF8 
 1140      04EB
 1141 079e 18B9     	   cbnz r0,2f 
 1142 07a0 4946     	   mov r1,T2
 1143 07a2 51F80C1C 	   ldr r1,[r1,#-12]
 1144 07a6 F0E7     	   b 1b   
 1145              	2: // found
 1146 07a8 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1147 07ac 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1148 07b0 BDE80C03 	9: pop {r2,r3,T1,T2}
 1149 07b4 7047     	   _RET 
 1150              	
 1151              	/**************************
 1152              	    INTERPRETER 
 1153              	*************************/
 1154              	
 1155              	/*********************************
 1156              	   cold_start 
 1157              	   initialize BASIC interpreter 
 1158              	   never leave 
 1159              	   input:
 1160              	     none 
ARM GAS  tinyBasic.s 			page 35


 1161              	   output:
 1162              	    none 
 1163              	*********************************/
 1164              	  .type cold_start, %function 
 1165              	  .global cold_start 
 1166              	cold_start: 
 1167 07b6 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1167      C2F20004 
 1168 07be 1048     	    ldr r0,src_addr 
 1169 07c0 1049     	    ldr r1,dest_addr
 1170 07c2 0968     	    ldr r1,[r1] 
 1171 07c4 0C44     	    add UPP,r1 // system variables base address   
 1172              	// clear RAM
 1173 07c6 2046     	    mov r0,UPP  
 1174 07c8 5049     	    ldr r1,tib 
 1175 07ca 82EA0202 	    eor r2,r2 
 1176 07ce 40F8042B 	1:  str r2,[r0],#4 
 1177 07d2 8842     	    cmp r0,r1 
 1178 07d4 FBD4     	    bmi 1b 
 1179              	//copy initialized system variables to ram 
 1180 07d6 DFF82800 	    ldr r0,src_addr 
 1181 07da 2146     	    mov r1,UPP 
 1182 07dc DFF82820 	    ldr r2,sysvar_size
 1183 07e0 00B5FFF7 	    _CALL cmove  
 1183      FEFF5DF8 
 1183      04EB
 1184 07ea 00B500F0 	    _CALL prt_version
 1184      0EF85DF8 
 1184      04EB
 1185 07f4 00B500F0 	    _CALL clear_basic  
 1185      5DF85DF8 
 1185      04EB
 1186 07fe 8FE0     	    b warm_start    
 1187              	src_addr:
 1188 0800 00000000 	  .word uzero
 1189              	dest_addr:
 1190 0804 00000000 	  .word vectors_size
 1191 0808 D0000000 	sysvar_size: .word ulast-uzero 
 1192              	
 1193              	/************************************
 1194              	    print firmware version 
 1195              	    input: 
 1196              	      none 
 1197              	    output:
 1198              	      none 
 1199              	    use:
 1200              	      r0 
 1201              	***********************************/
 1202              	    _FUNC prt_version 
 1203 080c DFF89405 	    ldr r0,=version_msg 
 1204 0810 00B5FFF7 	    _CALL uart_puts
 1204      FEFF5DF8 
 1204      04EB
 1205 081a 9FF87800 	    ldrb r0,version 
 1206 081e 4FEA1010 	    lsr r0,#4 
 1207 0822 00F13000 	    add r0,#'0' 
 1208 0826 3A28     	    cmp r0,#'9'+1 
ARM GAS  tinyBasic.s 			page 36


 1209 0828 01D4     	    bmi 1f 
 1210 082a 00F10700 	    add r0,#7 
 1211              	  1:
 1212 082e 00B5FFF7 	    _CALL uart_putc 
 1212      FEFF5DF8 
 1212      04EB
 1213 0838 4FF02E00 	    mov r0,#'. 
 1214 083c 00B5FFF7 	    _CALL uart_putc 
 1214      FEFF5DF8 
 1214      04EB
 1215 0846 9FF84C00 	    ldrb r0,version 
 1216 084a 00F00F00 	    and r0,#15 
 1217 084e 00F13000 	    add r0,'0' 
 1218 0852 3A28     	    cmp r0,#'9'+1 
 1219 0854 01D4     	    bmi 1f 
 1220 0856 00F10700 	    add r0,#7
 1221              	  1: 
 1222 085a 00B5FFF7 	    _CALL uart_putc 
 1222      FEFF5DF8 
 1222      04EB
 1223 0864 4FF00D00 	    mov r0,#CR 
 1224 0868 00B5FFF7 	    _CALL uart_putc 
 1224      FEFF5DF8 
 1224      04EB
 1225 0872 7047     	    _RET  
 1226              	version_msg:
 1227 0874 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1227      65207069 
 1227      6C6C2074 
 1227      696E7920 
 1227      42415349 
 1228              	version:
 1229 0894 10       	    .byte 0x10 
 1230 0895 0000BF   	    .p2align 2 
 1231              	
 1232              	
 1233              	/*****************************
 1234              	    clear_vars 
 1235              	    initialize variables to 0
 1236              	  input:
 1237              	    none 
 1238              	  output:
 1239              	    none 
 1240              	  use:
 1241              	    r0,r1,r2 
 1242              	*****************************/
 1243              	    _FUNC clear_vars 
 1244 0898 07B4     	    push {r0,r1,r2}
 1245 089a 80EA0000 	    eor r0,r0 
 1246 089e 04F16001 	    add r1,UPP,#VARS
 1247 08a2 4FF01A02 	    mov r2,#26
 1248 08a6 41F8040B 	1:  str r0,[r1],#4 
 1249 08aa 013A     	    subs r2,#1
 1250 08ac FBD1     	    bne 1b  
 1251 08ae 07BC     	    pop {r0,r1,r2}
 1252 08b0 7047     	    _RET 
 1253              	
ARM GAS  tinyBasic.s 			page 37


 1254              	/*****************************
 1255              	   clear_basic 
 1256              	   reset BASIC system variables 
 1257              	   and clear variables 
 1258              	*****************************/
 1259 08b2 00BF     	    _FUNC clear_basic
 1260 08b4 80EA0000 	  	eor r0,r0
 1261 08b8 2064     	    str r0,[UPP,#FLAGS] 
 1262 08ba 6060     	    str r0,[UPP,#COUNT]
 1263 08bc 2060     	    str r0,[UPP,#IN_SAVED]
 1264 08be A060     	    str r0,[UPP,#BASICPTR]
 1265 08c0 E060     	    str r0,[UPP,#DATAPTR]
 1266 08c2 2061     	    str r0,[UPP,#DATA]
 1267 08c4 6061     	    str r0,[UPP,#DATALEN]
 1268 08c6 5FF8C000 	    ldr r0,sysvar_size
 1269 08ca 2044     	    add r0,UPP 
 1270 08cc 2063     	    str r0,[UPP,#TXTBGN]
 1271 08ce 6063     	    str r0,[UPP,#TXTEND]
 1272 08d0 00B5FFF7 	    _CALL clear_vars 
 1272      E1FF5DF8 
 1272      04EB
 1273 08da 7047     	    _RET  
 1274              	
 1275              	/***********************************
 1276              	   warm_init 
 1277              	   initialize interpreter context 
 1278              	  input:
 1279              	    none
 1280              	  output:
 1281              	    none 
 1282              	  use:
 1283              	    r0 
 1284              	***********************************/
 1285              	warm_init:
 1286              	// reset main stack 
 1287 08dc 0948     	    ldr r0,mstack
 1288 08de 8546     	    mov sp,r0 
 1289              	// reset data stack       
 1290 08e0 DFF824C0 	    ldr DP,dstack 
 1291 08e4 4FF0000A 	    mov IN,#0 // BASIC line index 
 1292 08e8 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1293 08ec 80EA0000 	    eor r0,r0 
 1294 08f0 6060     	    str r0,[UPP,#COUNT]  
 1295 08f2 2064     	    str r0,[UPP,#FLAGS]
 1296 08f4 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1297 08f6 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1298 08fa 6064     	    str r0,[UPP,#TAB_WIDTH]
 1299 08fc 4FF00A00 	    mov r0,#10 // default base decimal 
 1300 0900 A061     	    str r0,[UPP,#BASE]
 1301 0902 7047     	    _RET  
 1302              	
 1303 0904 00000000 	mstack: .word _mstack 
 1304 0908 00000000 	dstack: .word _dstack 
 1305 090c 00000000 	tib: .word _tib 
 1306 0910 00000000 	pad: .word _pad 
 1307 0914 FCFFFFFF 	array: .word _pad - 4 
 1308 0918 52454144 	ready: .asciz "READY" 
ARM GAS  tinyBasic.s 			page 38


 1308      5900
 1309              	
 1310              	/**********************************
 1311              	    warm_start 
 1312              	    start BASIC interpreter doesn't  
 1313              	    reset variables and code space 
 1314              	  input:
 1315              	    none 
 1316              	  output:
 1317              	    none 
 1318              	**********************************/
 1319 091e 00BF     	    _FUNC warm_start 
 1320              	// initialise parameters stack
 1321 0920 FFF7DCFF 	    bl warm_init
 1322 0924 DFF88004 	    ldr r0,=ready 
 1323 0928 00B5FFF7 	    _CALL uart_puts 
 1323      FEFF5DF8 
 1323      04EB
 1324              	// fall in cmd_line 
 1325              	
 1326              	/**********************************
 1327              	   cmd_line 
 1328              	   shell command line 
 1329              	   input:
 1330              	      none 
 1331              	   output:
 1332              	      none 
 1333              	   use:
 1334              	
 1335              	***********************************/
 1336 0932 00BF     	    _FUNC cmd_line 
 1337 0934 4FF00D00 	    mov r0,#CR 
 1338 0938 00B5FFF7 	    _CALL uart_putc 
 1338      FEFF5DF8 
 1338      04EB
 1339 0942 5FF83800 	1:  ldr r0,tib
 1340 0946 4FF05001 	    mov r1,#TIB_SIZE 
 1341 094a 00B5FFF7 	    _CALL readln 
 1341      FEFF5DF8 
 1341      04EB
 1342 0954 0940     	    ands r1,r1 // empty line 
 1343 0956 F4D0     	    beq 1b 
 1344 0958 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1344      79FC5DF8 
 1344      04EB
 1345 0962 EED0     	    beq 1b  // tokens stored in text area 
 1346              	// interpret tokenized line 
 1347              	interpreter:
 1348 0964 6068     	   ldr r0,[UPP,#COUNT]
 1349 0966 8245     	   cmp IN,r0  
 1350 0968 0DD4     	   bmi interp_loop
 1351              	// end of line reached     
 1352              	next_line:
 1353 096a 206C     	  ldr r0,[UPP,#FLAGS]
 1354 096c 10F0010F 	  tst r0,#FRUN 
 1355 0970 E0D0     	  beq cmd_line 
 1356 0972 6068     	  ldr r0,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 39


 1357 0974 D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 1358 0978 8344     	  add BPTR,r0  
 1359 097a 606B     	  ldr r0,[UPP,#TXTEND]
 1360 097c 8345     	  cmp BPTR,r0 
 1361 097e 00D4     	  bmi 1f 
 1362 0980 CEE7     	  b warm_start 
 1363              	1:
 1364 0982 4FF0030A 	  mov IN,#3 
 1365              	interp_loop:
 1366 0986 00B500F0 	  _CALL next_token 
 1366      1CF85DF8 
 1366      04EB
 1367 0990 0028     	  cmp r0,#TK_NONE 
 1368 0992 EAD0     	  beq next_line 
 1369 0994 0A28     	  cmp r0,#TK_CMD 
 1370 0996 03D1     	  bne 2f
 1371 0998 0846     	  mov r0,r1 
 1372 099a 00F00FF8 	  bl execute  
 1373 099e F2E7     	  b interp_loop   
 1374              	2: 
 1375 09a0 0428     	  cmp r0,#TK_VAR 
 1376 09a2 02D1     	  bne 3f 
 1377 09a4 00F0ADB8 	  b let_var 
 1378 09a8 EDE7     	  b interp_loop 
 1379              	3: 
 1380 09aa 0528     	  cmp r0,#TK_ARRAY 
 1381 09ac 02D1     	  bne 4f
 1382 09ae 00F0B3B8 	  b let_array 
 1383 09b2 E8E7     	  b interp_loop
 1384              	4: 
 1385 09b4 0128     	  cmp r0,#TK_COLON
 1386 09b6 E6D0     	  beq interp_loop
 1387 09b8 7AE6     	  b syntax_error
 1388              	
 1389              	/*****************************
 1390              	    execute 
 1391              	    execute a BASIC routine from 
 1392              	    its token value 
 1393              	  input:
 1394              	    r0  BASIC SUB|FUNC token  
 1395              	  output: 
 1396              	    depend on SUB|FUNc
 1397              	*****************************/
 1398 09ba 00BF     	    _FUNC execute 
 1399 09bc FB49     	    ldr r1,=fn_table 
 1400 09be 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1401 09c2 0047     	    bx r0 
 1402              	
 1403              	/*************************************
 1404              	  next_token 
 1405              	  extract next token from token list 
 1406              	  input:
 1407              	    none 
 1408              	  output:
 1409              	    r0    token attribute
 1410              	    r1    token value if there is one 
 1411              	  use:
ARM GAS  tinyBasic.s 			page 40


 1412              	    T1    exit token type  
 1413              	****************************/
 1414              	    _FUNC next_token 
 1415 09c4 4DF8048D 	    push {T1}
 1416 09c8 88EA0808 	    eor T1,T1 // TK_NONE 
 1417 09cc 6068     	    ldr r0,[UPP,#COUNT]
 1418 09ce 8245     	    cmp IN,r0 
 1419 09d0 00D4     	    bmi 0f 
 1420 09d2 2AE0     	    b 9f  
 1421              	0: 
 1422 09d4 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1423 09d8 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1424 09dc 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1425 09e0 0AF1010A 	    add IN,#1  
 1426 09e4 8046     	    mov T1,r0 
 1427 09e6 00F03F00 	    and r0,#0x3f // limit mask 
 1428 09ea F149     	    ldr r1,=tok_jmp 
 1429 09ec D1E800F0 	    tbb [r1,r0]
 1430              	1: // pc reference point 
 1431 09f0 1BE0     	    b 9f 
 1432              	2: // .byte param
 1433 09f2 1BF80A10 	    ldrb r1,[BPTR,IN]
 1434 09f6 0AF1010A 	    add IN,#1 
 1435 09fa 16E0     	    b 9f 
 1436              	3: // .hword param 
 1437 09fc 3BF80A10 	    ldrh r1,[BPTR,IN]
 1438 0a00 0AF1020A 	    add IN,#2 
 1439 0a04 11E0     	    b 9f 
 1440              	4: // .word param  
 1441 0a06 5BF80A10 	    ldr r1,[BPTR,IN]
 1442 0a0a 0AF1040A 	    add IN,#4
 1443 0a0e 0CE0     	    b 9f 
 1444              	5: // .asciz param 
 1445 0a10 0BEB0A01 	    add r1,BPTR,IN 
 1446 0a14 0846     	    mov r0,r1  
 1447 0a16 00B5FFF7 	    _CALL strlen 
 1447      FEFF5DF8 
 1447      04EB
 1448 0a20 8244     	    add IN,r0
 1449 0a22 0AF1010A 	    add IN,#1
 1450 0a26 00E0     	    b 9f  
 1451              	8: // syntax error 
 1452 0a28 42E6     	    b syntax_error 
 1453 0a2a 4046     	9:  mov r0,T1  
 1454 0a2c 5DF8048B 	    pop {T1}
 1455 0a30 7047     	    _RET
 1456              	
 1457 0a32 00BF     	  .p2align 2
 1458              	tok_jmp: // token id  tbb offset 
 1459 0a34 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1460 0a36 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1461 0a3a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1462 0a3e 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1463 0a42 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1464 0a46 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1464      1C
 1465 0a4b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
ARM GAS  tinyBasic.s 			page 41


 1465      1C1C
 1466 0a51 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1467 0a54 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1468 0a57 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1468      1C1C1C1C 
 1469 0a5f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1469      1C1C
 1470 0a65 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1470      1D1D
 1471 0a6b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1471      1C1C1C1C 
 1471      1C
 1472              	
 1473              	  .p2align 2 
 1474              	
 1475              	/*********************************
 1476              	    expect 
 1477              	    check if next token is of 
 1478              	    expected type. If not 
 1479              	    call syntax_error  
 1480              	  input:
 1481              	      r0   token attribute
 1482              	  output:
 1483              	      r0  token attribute 
 1484              	      r1  token value
 1485              	  use:
 1486              	      T1   
 1487              	**********************************/
 1488              	    _FUNC expect 
 1489 0a74 4DF8048D 	    push {T1}
 1490 0a78 8046     	    mov T1,r0 
 1491 0a7a 00B5FFF7 	    _CALL next_token 
 1491      A2FF5DF8 
 1491      04EB
 1492 0a84 4045     	    cmp r0,T1  
 1493 0a86 7FF413AE 	    bne syntax_error 
 1494 0a8a 5DF8048B 	    pop {T1}
 1495 0a8e 7047     	    _RET 
 1496              	
 1497              	/***********************************
 1498              	    func_args 
 1499              	    get function arguments list 
 1500              	  input:
 1501              	    none 
 1502              	  output:
 1503              	    r0    arg. count 
 1504              	  use:
 1505              	
 1506              	************************************/
 1507              	    _FUNC func_args 
 1508 0a90 4FF00600 	    mov r0,#TK_LPAREN 
 1509 0a94 00B5FFF7 	    _CALL expect 
 1509      EDFF5DF8 
 1509      04EB
 1510 0a9e 00B500F0 	    _CALL arg_list 
 1510      0CF85DF8 
 1510      04EB
ARM GAS  tinyBasic.s 			page 42


 1511 0aa8 01B4     	    push {r0}
 1512 0aaa 4FF00700 	    mov r0,#TK_RPAREN 
 1513 0aae 00B5FFF7 	    _CALL expect 
 1513      E0FF5DF8 
 1513      04EB
 1514 0ab8 01BC     	    pop {r0}
 1515 0aba 7047     	    _RET 
 1516              	
 1517              	/**********************************
 1518              	    arg_list 
 1519              	    get arguments list on dstack 
 1520              	  input:
 1521              	    none 
 1522              	  output:
 1523              	    r0    arg count
 1524              	  use:
 1525              	    T1    tmp count  
 1526              	***********************************/
 1527              	    _FUNC arg_list 
 1528 0abc 4DF8048D 	    push {T1}
 1529 0ac0 88EA0808 	    eor T1,T1 
 1530 0ac4 00B500F0 	1:  _CALL expression 
 1530      C7F85DF8 
 1530      04EB
 1531 0ace 0028     	    cmp R0,#TK_NONE 
 1532 0ad0 10D0     	    beq 9f 
 1533 0ad2 0E28     	    cmp r0,#TK_INTGR
 1534 0ad4 0ED1     	    bne 9f 
 1535 0ad6 4CF8041D 	    _PUSH r1 
 1536 0ada 08F10108 	    add T1,#1 
 1537 0ade 00B5FFF7 	    _CALL next_token 
 1537      70FF5DF8 
 1537      04EB
 1538 0ae8 0828     	    cmp r0,#TK_COMMA 
 1539 0aea EBD0     	    beq 1b 
 1540 0aec D4F800A0 	    _UNGET_TOKEN 
 1540      D4F808B0 
 1541 0af4 4046     	9:  mov r0,T1 
 1542 0af6 5DF8048B 	    pop {T1}
 1543 0afa 7047     	    _RET 
 1544              	
 1545              	/***********************************
 1546              	 factor
 1547              	 arithmetick factor parser 
 1548              	 factor ::= ['+'|'-'|e]  var | @ |
 1549              				 integer | function |
 1550              				 '('expression')' 
 1551              	  input: 
 1552              	    none 
 1553              	  output:
 1554              	    r0   token attribute 
 1555              	    r1   token value 
 1556              	  use:
 1557              	    r2   temp 
 1558              	    T1   sign 
 1559              	    T2   exit token attribute 
 1560              	***********************************/
ARM GAS  tinyBasic.s 			page 43


 1561              	    _FUNC factor 
 1562 0afc 2DE90403 	    push {r2,T1,T2}
 1563 0b00 4FF00E09 	    mov T2,#TK_INTGR 
 1564 0b04 4FF00108 	    mov T1,#1 // default sign +  
 1565 0b08 00B5FFF7 	    _CALL next_token 
 1565      5BFF5DF8 
 1565      04EB
 1566 0b12 0246     	    mov r2,r0 
 1567 0b14 00F03000 	    and r0,#TK_GRP_MASK 
 1568 0b18 1028     	    cmp r0,#TK_GRP_ADD
 1569 0b1a 1046     	    mov r0,r2
 1570 0b1c 08D1     	    bne 1f 
 1571 0b1e 1028     	    cmp r0,#TK_PLUS 
 1572 0b20 01D0     	    beq 0f 
 1573 0b22 4FF0FF38 	    mov T1,#-1 // minus sign 
 1574 0b26 00B5FFF7 	0:  _CALL next_token 
 1574      4CFF5DF8 
 1574      04EB
 1575 0b30 0E28     	1:  cmp r0,#TK_INTGR 
 1576 0b32 4CD0     	    beq 8f 
 1577 0b34 0528     	    cmp r0,#TK_ARRAY 
 1578 0b36 1ED1     	    bne 2f 
 1579 0b38 4FF00600 	    mov r0,#TK_LPAREN 
 1580 0b3c 00B5FFF7 	    _CALL expect 
 1580      99FF5DF8 
 1580      04EB
 1581 0b46 00B500F0 	    _CALL expression
 1581      86F85DF8 
 1581      04EB
 1582 0b50 0E28     	    cmp r0,#TK_INTGR
 1583 0b52 7FF4ADAD 	    bne syntax_error
 1584 0b56 8146     	    mov T2,r0
 1585 0b58 0A46     	    mov r2,r1  
 1586 0b5a 4FF00700 	    mov r0,#TK_RPAREN
 1587 0b5e 00B5FFF7 	    _CALL expect 
 1587      88FF5DF8 
 1587      04EB
 1588 0b68 1046     	    mov r0,r2 
 1589 0b6a 00B500F0 	    _CALL get_array_element 
 1589      EAF85DF8 
 1589      04EB
 1590 0b74 2BE0     	    b 8f
 1591 0b76 0628     	2:  cmp r0,#TK_LPAREN 
 1592 0b78 12D1     	    bne 3f 
 1593 0b7a 00B500F0 	    _CALL expression 
 1593      6CF85DF8 
 1593      04EB
 1594 0b84 0E28     	    cmp r0,#TK_INTGR 
 1595 0b86 7FF493AD 	    bne syntax_error
 1596 0b8a 8146     	    mov T2,r0
 1597 0b8c 0A46     	    mov r2,r1   
 1598 0b8e 4FF00700 	    mov r0,#TK_RPAREN
 1599 0b92 00B5FFF7 	    _CALL expect 
 1599      6EFF5DF8 
 1599      04EB
 1600 0b9c 1146     	    mov r1,r2 
 1601 0b9e 16E0     	    b 8f       
ARM GAS  tinyBasic.s 			page 44


 1602 0ba0 0428     	3:  cmp r0,#TK_VAR 
 1603 0ba2 06D1     	    bne 4f
 1604 0ba4 0846     	    mov r0,r1  
 1605 0ba6 00B500F0 	    _CALL get_var 
 1605      E0F85DF8 
 1605      04EB
 1606 0bb0 0DE0     	    b 8f 
 1607 0bb2 0B28     	4:  cmp r0,#TK_IFUNC 
 1608 0bb4 01D0     	    beq 5f 
 1609 0bb6 0C28     	    cmp r0,#TK_CFUNC 
 1610 0bb8 03D1     	    bne 6f 
 1611 0bba 0846     	5:  mov r0,r1  
 1612 0bbc FFF7FEFE 	    bl execute
 1613 0bc0 05E0     	    b 8f  
 1614 0bc2 D4F800A0 	6:  _UNGET_TOKEN 
 1614      D4F808B0 
 1615 0bca 4FF00009 	    mov T2,#TK_NONE 
 1616 0bce 08FB01F1 	8:  mul r1,T1 
 1617 0bd2 5FEA0900 	    movs r0,T2 
 1618 0bd6 BDE80403 	    pop {r2,T1,T2}   
 1619 0bda 7047     	    _RET 
 1620              	
 1621              	
 1622              	/*****************************************
 1623              	    term 
 1624              	    term parser 
 1625              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1626              	    output:
 1627              	      r0  	token attribute 
 1628              	      r1		integer
 1629              	    use:
 1630              	      r2    first operand 
 1631              	      r3    temp 
 1632              	      T1    operator 
 1633              	      T2    exit token attribute 
 1634              	******************************************/
 1635              	     _FUNC term 
 1636 0bdc 2DE90C03 	    push {r2,r3,T1,T2}
 1637 0be0 4FF00009 	    mov T2,#TK_NONE 
 1638 0be4 00B5FFF7 	    _CALL factor
 1638      89FF5DF8 
 1638      04EB
 1639 0bee 2CD0     	    beq 9f  // no factor   
 1640 0bf0 8146     	    mov T2,r0  // TK_INTGR 
 1641 0bf2 0A46     	    mov r2,r1 // first factor    
 1642 0bf4 00B5FFF7 	0:  _CALL next_token
 1642      E5FE5DF8 
 1642      04EB
 1643 0bfe 0346     	    mov r3,r0   
 1644 0c00 00F03000 	    and r0,#TK_GRP_MASK 
 1645 0c04 2028     	    cmp r0,#TK_GRP_MULT
 1646 0c06 04D0     	    beq 1f
 1647 0c08 D4F800A0 	    _UNGET_TOKEN
 1647      D4F808B0 
 1648 0c10 1BE0     	    b 9f 
 1649 0c12 9846     	1:  mov T1,r3 
 1650 0c14 00B5FFF7 	    _CALL factor  
ARM GAS  tinyBasic.s 			page 45


 1650      71FF5DF8 
 1650      04EB
 1651 0c1e 3FF447AD 	    beq syntax_error 
 1652 0c22 B8F1200F 	    cmp T1,#TK_MULT
 1653 0c26 02D1     	    bne 2f 
 1654              	// multiplication
 1655 0c28 01FB02F2 	    mul r2,r1
 1656 0c2c E2E7     	    b 0b  
 1657 0c2e B8F1210F 	2:  cmp T1,#TK_DIV 
 1658 0c32 02D1     	    bne 3f
 1659              	// division
 1660 0c34 92FBF1F2 	    sdiv r2,r2,r1
 1661 0c38 DCE7     	    b 0b  
 1662              	3: // modulo
 1663 0c3a 1046     	    mov r0,r2 
 1664 0c3c 92FBF1F2 	    sdiv r2,r2,r1 
 1665 0c40 01FB02F2 	    mul  r2,r1 
 1666 0c44 A0EB0202 	    sub  r2,r0,r2
 1667 0c48 D4E7     	    b 0b  
 1668 0c4a 1146     	9:  mov r1,r2 
 1669 0c4c 5FEA0900 	    movs r0,T2 
 1670 0c50 BDE80C03 	    pop {r2,r3,T1,T2}
 1671 0c54 7047     	    _RET 
 1672              	
 1673              	/*****************************************
 1674              	    expression 
 1675              	    arithmetic expression parser 
 1676              	    expression ::= term [['+'|'-'] term]*
 1677              	    result range {-32768..32767}
 1678              	    output:
 1679              	      r0    TK_NONE || TK_INTGR 
 1680              	      r1 	  integer
 1681              	    use:
 1682              	      r2  left operand 
 1683              	      T1  operator 
 1684              	      T2  exit token attribute
 1685              	******************************************/
 1686 0c56 00BF     	    _FUNC expression 
 1687 0c58 2DE90403 	    push {r2,t1,t2}
 1688 0c5c 4FF00009 	    mov T2,#TK_NONE
 1689 0c60 82EA0202 	    eor r2,r2 // zero 
 1690 0c64 00B5FFF7 	    _CALL term 
 1690      B9FF5DF8 
 1690      04EB
 1691 0c6e 21D0     	    beq 9f  // no term  
 1692 0c70 0A46     	    mov r2,r1 // first term
 1693 0c72 4FF00E09 	    mov T2,#TK_INTGR    
 1694 0c76 00B5FFF7 	1:  _CALL next_token 
 1694      A4FE5DF8 
 1694      04EB
 1695 0c80 8046     	    mov T1,r0 // token attribute 
 1696 0c82 00F03000 	    and r0,#TK_GRP_MASK 
 1697 0c86 1028     	    cmp r0,#TK_GRP_ADD 
 1698 0c88 04D0     	    beq 3f 
 1699 0c8a D4F800A0 	    _UNGET_TOKEN
 1699      D4F808B0 
 1700 0c92 0FE0     	    b 9f  
ARM GAS  tinyBasic.s 			page 46


 1701 0c94 00B5FFF7 	3:  _CALL term 
 1701      A1FF5DF8 
 1701      04EB
 1702 0c9e 0E28     	    cmp r0,#TK_INTGR 
 1703 0ca0 7FF406AD 	    bne syntax_error 
 1704 0ca4 B8F1100F 	    cmp T1,#TK_PLUS 
 1705 0ca8 02D0     	    beq 4f 
 1706 0caa A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1707 0cae E2E7     	    b 1b 
 1708 0cb0 0A44     	4:  add r2,r2,r1 // N1+N2
 1709 0cb2 E0E7     	    b 1b
 1710 0cb4 4846     	9:  mov r0,T2 
 1711 0cb6 1146     	    mov r1,r2 
 1712 0cb8 BDE80403 	    pop {r2,t1,t2}
 1713 0cbc 7047     	    _RET 
 1714              	
 1715              	
 1716              	/**********************************************
 1717              	    relation parser 
 1718              	    rel ::= expr1 rel_op expr2
 1719              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1720              	    relation return  integer , zero is false 
 1721              	    output:
 1722              	        r0	TK_INTGR  
 1723              	        r1	integer 
 1724              	    use:
 1725              	        r2   first operand 
 1726              	        T1   relop   
 1727              	**********************************************/
 1728 0cbe 00BF     	    _FUNC relation 
 1729 0cc0 2DE90401 	    push {r2,T1}
 1730 0cc4 00B5FFF7 	    _CALL expression 
 1730      C7FF5DF8 
 1730      04EB
 1731 0cce 0E28     	    cmp r0,#TK_INTGR 
 1732 0cd0 7FF4EEAC 	    bne syntax_error 
 1733 0cd4 0A46     	    mov r2,r1  // first operand  
 1734 0cd6 00B5FFF7 	    _CALL next_token 
 1734      74FE5DF8 
 1734      04EB
 1735 0ce0 8046     	    mov T1,r0  // relop  
 1736 0ce2 00F03000 	    and r0,#TK_GRP_MASK 
 1737 0ce6 3028     	    cmp r0,#TK_GRP_RELOP 
 1738 0ce8 1DD1     	    bne 8f  // single operand 
 1739 0cea 00B5FFF7 	    _CALL expression 
 1739      B4FF5DF8 
 1739      04EB
 1740 0cf4 0E28     	    cmp r0,#TK_INTGR 
 1741 0cf6 7FF4DBAC 	    bne syntax_error 
 1742 0cfa 8A42     	    cmp r2,r1 // compare operands  
 1743 0cfc 4FF0FF31 	    mov r1,#-1 
 1744 0d00 2C4A     	    ldr r2,=relop_jmp
 1745 0d02 08F00708 	    and T1,#7 // {1..6}
 1746 0d06 D2E808F0 	    tbb [r2,T1]    
 1747              	rel_idx0:
 1748              	rel_eq:
 1749 0d0a 11D0     	    beq 9f 
ARM GAS  tinyBasic.s 			page 47


 1750 0d0c 08E0     	    b rel_false
 1751              	rel_lt: 
 1752 0d0e 0FDB     	    blt 9f   
 1753 0d10 06E0     	    b rel_false 
 1754              	rel_le:
 1755 0d12 0DDD     	    ble 9f  
 1756 0d14 04E0     	    b rel_false 
 1757              	rel_gt:
 1758 0d16 0BDC     	    bgt 9f  
 1759 0d18 02E0     	    b rel_false  
 1760              	rel_ge:
 1761 0d1a 09DA     	    bge 9f  
 1762 0d1c 00E0     	    b rel_false  
 1763              	rel_diff:
 1764 0d1e 07D1     	    bne 9f 
 1765              	rel_false:    
 1766 0d20 81EA0101 	    eor r1,r1  // false
 1767 0d24 04E0     	    b 9f  
 1768 0d26 D4F800A0 	8:  _UNGET_TOKEN 
 1768      D4F808B0 
 1769 0d2e 1146     	    mov r1,r2    
 1770 0d30 4FF00E00 	9:  mov r0,#TK_INTGR
 1771 0d34 BDE80401 	    pop {r2,T1}
 1772 0d38 7047     	    _RET 
 1773              	
 1774              	
 1775              	relop_jmp: 
 1776 0d3a 00       	  .byte 0 
 1777 0d3b 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1778 0d3c 00       	  .byte 0 // =
 1779 0d3d 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1780 0d3e 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1781 0d3f 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1782 0d40 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1783              	
 1784              	
 1785              	/***********************************
 1786              	    get_array_element
 1787              	    return value of @(n)
 1788              	  input:
 1789              	    r0    indice 
 1790              	  output:
 1791              	    r0   TK_INTGR
 1792              	    r1   value  
 1793              	************************************/
 1794 0d41 0000BF   	    _FUNC get_array_element 
 1795 0d44 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1796 0d48 4FEA8000 	    lsl r0,#2 
 1797 0d4c C0EB0100 	    rsb r0,r1 
 1798 0d50 0168     	    ldr r1,[r0]
 1799 0d52 4FF00E00 	    mov r0,#TK_INTGR 
 1800 0d56 7047     	    _RET 
 1801              	
 1802              	
 1803              	/***********************************
 1804              	    set_array_element 
 1805              	    set value of array element 
ARM GAS  tinyBasic.s 			page 48


 1806              	  input:
 1807              	    r0   index 
 1808              	    r1   new value 
 1809              	  output:
 1810              	    none
 1811              	  use:
 1812              	    r2    array pointer 
 1813              	**********************************/
 1814              	    _FUNC set_array_element 
 1815 0d58 04B4     	    push {r2}
 1816 0d5a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1817 0d5e 4FEA8000 	    lsl r0,#2 
 1818 0d62 A1EB0001 	    sub r1,r0 
 1819 0d66 0960     	    str r1,[r1]
 1820 0d68 04BC     	    pop {r2}
 1821 0d6a 7047     	    _RET 
 1822              	
 1823              	/***********************************
 1824              	   get_var 
 1825              	   get variable value 
 1826              	  input:
 1827              	     r0    variable index {0..25}
 1828              	  output:
 1829              	     r0    TK_INTGR
 1830              	     r1    value 
 1831              	**********************************/
 1832              	    _FUNC get_var 
 1833 0d6c 04F16001 	    add r1,UPP,#VARS
 1834 0d70 4FEA8000 	    lsl r0,#2 
 1835 0d74 0958     	    ldr r1,[r1,r0]
 1836 0d76 4FF00E00 	    mov r0,#TK_INTGR
 1837 0d7a 7047     	    _RET 
 1838              	
 1839              	/*********************************
 1840              	    set_var 
 1841              	    set variable value 
 1842              	  input:
 1843              	     r0    variable index {0..25}
 1844              	     r1    new value 
 1845              	  output:
 1846              	    none 
 1847              	  use:
 1848              	    r2   vars pointer 
 1849              	*********************************/
 1850              	    _FUNC set_var 
 1851 0d7c 04B4     	    push {r2}
 1852 0d7e 226E     	    ldr r2,[UPP,#VARS]
 1853 0d80 4FEA8000 	    lsl r0,#2
 1854 0d84 1150     	    str r1,[r2,r0]
 1855 0d86 04BC     	    pop {r2}
 1856 0d88 7047     	    _RET 
 1857              	
 1858              	/******************************
 1859              	    CONSTANTS data
 1860              	******************************/
 1861              	
 1862 0d8a 0000     	  .section .rodata 
ARM GAS  tinyBasic.s 			page 49


 1863              	
 1864              	// system variables initial value 
 1865              	uzero:
 1866 0000 00000000 	  .word 0 // IN_SAVED
 1867 0004 00000000 	  .word 0 // COUNT
 1868 0008 00000000 	  .word 0 // BASICPTR
 1869 000c 00000000 	  .word 0 // DATAPTR
 1870 0010 00000000 	  .word 0 // DATA
 1871 0014 00000000 	  .word 0 // DATALEN
 1872 0018 0A000000 	  .word 10 // BASE
 1873 001c 00000000 	  .word 0 // TICKS
 1874 0020 00000000 	  .word 0 // TIMER
 1875 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 1876 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 1877 002c 00000000 	  .word 0 // FFREE
 1878 0030 D0000000 	  .word ulast // TXTBGN
 1879 0034 D0000000 	  .word ulast // TXTEND
 1880 0038 00000000 	  .word 0 //LOOP_DEPTH
 1881 003c 00000000 	  .word 0 // ARRAY_SIZE
 1882 0040 00000000 	  .word 0 // FLAGS
 1883 0044 04000000 	  .word 4 // TAB_WIDTH
 1884 0048 00000000 	  .word 0 // RX_HEAD
 1885 004c 00000000 	  .word 0 // RX_TAIL
 1886 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1886      00000000 
 1886      00000000 
 1886      00000000 
 1887 0060 00000000 	  .space VARS_SIZE,0 // VARS
 1887      00000000 
 1887      00000000 
 1887      00000000 
 1887      00000000 
 1888 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 1889 00cc 00000000 	  .space 4, 0 // padding 
 1890              	ulast:
 1891              	
 1892              	  .section .rodata.dictionary 
 1893              	
 1894              	// keep alphabetic order for BASIC names from Z-A
 1895              	// this sort order is for for WORDS cmd output. 	
 1896              	
 1897              		.equ link, 0
 1898              	kword_end:
 1899 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1899      00000000 
 1899      00000000 
 1899      00000000 
 1900 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1900      64000000 
 1900      0A000000 
 1900      5854524D 
 1900      54000000 
 1901 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1901      65000000 
 1901      0A000000 
 1901      58524356 
 1901      00000000 
ARM GAS  tinyBasic.s 			page 50


 1902 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1902      63000000 
 1902      0B000000 
 1902      584F5200 
 1903 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1903      62000000 
 1903      0A000000 
 1903      57524954 
 1903      45000000 
 1904 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1904      61000000 
 1904      0A000000 
 1904      574F5244 
 1904      53000000 
 1905 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1905      60000000 
 1905      0A000000 
 1905      57414954 
 1905      00000000 
 1906 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1906      5F000000 
 1906      0B000000 
 1906      55535200 
 1907 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1907      5E000000 
 1907      0A000000 
 1907      554E5449 
 1907      4C000000 
 1908 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1908      5D000000 
 1908      0B000000 
 1908      55464C41 
 1908      53480000 
 1909 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1909      5C000000 
 1909      0B000000 
 1909      55424F55 
 1909      4E440000 
 1910 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1910      5B000000 
 1910      0A000000 
 1910      544F4E45 
 1910      00000000 
 1911 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1911      5A000000 
 1911      0A000000 
 1911      544F0000 
 1912 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1912      58000000 
 1912      0A000000 
 1912      54494D45 
 1912      52000000 
 1913 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1913      59000000 
 1913      0B000000 
 1913      54494D45 
 1913      4F555400 
ARM GAS  tinyBasic.s 			page 51


 1914 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1914      57000000 
 1914      0B000000 
 1914      5449434B 
 1914      53000000 
 1915 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1915      56000000 
 1915      0A000000 
 1915      53544F50 
 1915      00000000 
 1916 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1916      55000000 
 1916      0A000000 
 1916      53544550 
 1916      00000000 
 1917 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1917      54000000 
 1917      0A000000 
 1917      53504957 
 1917      52000000 
 1918 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1918      53000000 
 1918      0A000000 
 1918      53504953 
 1918      454C0000 
 1919 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1919      51000000 
 1919      0B000000 
 1919      53504952 
 1919      44000000 
 1920 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1920      52000000 
 1920      0A000000 
 1920      53504945 
 1920      4E000000 
 1921 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1921      50000000 
 1921      0A000000 
 1921      534C4545 
 1921      50000000 
 1922 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1922      4F000000 
 1922      0B000000 
 1922      53495A45 
 1922      00000000 
 1923 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1923      4E000000 
 1923      0A000000 
 1923      53484F57 
 1923      00000000 
 1924 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1924      4D000000 
 1924      0A000000 
 1924      53415645 
 1924      00000000 
 1925 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1925      4C000000 
ARM GAS  tinyBasic.s 			page 52


 1925      0A000000 
 1925      52554E00 
 1926 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1926      4B000000 
 1926      0B000000 
 1926      52534849 
 1926      46540000 
 1927 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1927      4A000000 
 1927      0B000000 
 1927      524E4400 
 1928 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1928      49000000 
 1928      0A000000 
 1928      52455455 
 1928      524E0000 
 1929 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1929      48000000 
 1929      0A000000 
 1929      52455354 
 1929      4F524500 
 1930 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1930      47000000 
 1930      0A000000 
 1930      52454D41 
 1930      524B0000 
 1931 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1931      46000000 
 1931      0A000000 
 1931      5245424F 
 1931      4F540000 
 1932 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1932      45000000 
 1932      0B000000 
 1932      52454144 
 1932      00000000 
 1933 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1933      44000000 
 1933      0B000000 
 1933      514B4559 
 1933      00000000 
 1934 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1934      43000000 
 1934      0B000000 
 1934      50525449 
 1934      00000000 
 1935 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1935      42000000 
 1935      0B000000 
 1935      50525448 
 1935      00000000 
 1936 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1936      41000000 
 1936      0B000000 
 1936      50525447 
 1936      00000000 
 1937 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
ARM GAS  tinyBasic.s 			page 53


 1937      40000000 
 1937      0B000000 
 1937      50525446 
 1937      00000000 
 1938 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1938      3F000000 
 1938      0B000000 
 1938      50525445 
 1938      00000000 
 1939 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1939      3E000000 
 1939      0B000000 
 1939      50525444 
 1939      00000000 
 1940 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1940      3D000000 
 1940      0B000000 
 1940      50525443 
 1940      00000000 
 1941 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1941      3C000000 
 1941      0B000000 
 1941      50525442 
 1941      00000000 
 1942 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1942      3B000000 
 1942      0B000000 
 1942      50525441 
 1942      00000000 
 1943 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1943      3A000000 
 1943      0A000000 
 1943      5052494E 
 1943      54000000 
 1944 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1944      39000000 
 1944      0B000000 
 1944      504F5554 
 1944      00000000 
 1945 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1945      38000000 
 1945      0A000000 
 1945      504F4B45 
 1945      00000000 
 1946 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1946      35000000 
 1946      0A000000 
 1946      504D4F44 
 1946      45000000 
 1947 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1947      37000000 
 1947      0B000000 
 1947      50494E50 
 1947      00000000 
 1948 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1948      36000000 
 1948      0B000000 
ARM GAS  tinyBasic.s 			page 54


 1948      5045454B 
 1948      00000000 
 1949 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1949      34000000 
 1949      0A000000 
 1949      50415553 
 1949      45000000 
 1950 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1950      33000000 
 1950      0B000000 
 1950      50414400 
 1951 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1951      32000000 
 1951      0B000000 
 1951      4F520000 
 1952 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1952      31000000 
 1952      0B000000 
 1952      4F445200 
 1953 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1953      30000000 
 1953      0B000000 
 1953      4E4F5400 
 1954 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1954      2E000000 
 1954      0A000000 
 1954      4E455854 
 1954      00000000 
 1955 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1955      2F000000 
 1955      0A000000 
 1955      4E455700 
 1956 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1956      2D000000 
 1956      0B000000 
 1956      4D554C44 
 1956      49560000 
 1957 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1957      2C000000 
 1957      0B000000 
 1957      4C534849 
 1957      46540000 
 1958 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1958      2B000000 
 1958      0B000000 
 1958      4C4F4700 
 1959 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1959      2A000000 
 1959      0A000000 
 1959      4C4F4144 
 1959      00000000 
 1960 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1960      29000000 
 1960      0A000000 
 1960      4C495354 
 1960      00000000 
 1961 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
ARM GAS  tinyBasic.s 			page 55


 1961      28000000 
 1961      0A000000 
 1961      4C455400 
 1962 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1962      27000000 
 1962      0B000000 
 1962      4B455900 
 1963 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1963      26000000 
 1963      0A000000 
 1963      49574447 
 1963      52454600 
 1964 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1964      25000000 
 1964      0A000000 
 1964      49574447 
 1964      454E0000 
 1965 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1965      24000000 
 1965      0B000000 
 1965      494E5645 
 1965      52540000 
 1966 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1966      23000000 
 1966      0A000000 
 1966      494E5055 
 1966      54000000 
 1967 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1967      22000000 
 1967      0A000000 
 1967      49460000 
 1968 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1968      21000000 
 1968      0B000000 
 1968      49445200 
 1969 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1969      20000000 
 1969      0A000000 
 1969      48455800 
 1970 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1970      1F000000 
 1970      0B000000 
 1970      4750494F 
 1970      00000000 
 1971 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1971      1E000000 
 1971      0A000000 
 1971      474F544F 
 1971      00000000 
 1972 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1972      1D000000 
 1972      0A000000 
 1972      474F5355 
 1972      42000000 
 1973 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1973      1C000000 
 1973      0A000000 
ARM GAS  tinyBasic.s 			page 56


 1973      464F5247 
 1973      45540000 
 1974 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1974      1B000000 
 1974      0A000000 
 1974      464F5200 
 1975 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1975      1A000000 
 1975      0A000000 
 1975      46435055 
 1975      00000000 
 1976 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1976      18000000 
 1976      0A000000 
 1976      454E4400 
 1977 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1977      19000000 
 1977      0B000000 
 1977      45455052 
 1977      4F4D0000 
 1978 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1978      17000000 
 1978      0A000000 
 1978      44575249 
 1978      54450000 
 1979 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1979      16000000 
 1979      0B000000 
 1979      44524541 
 1979      44000000 
 1980 0608 00060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 1980      66000000 
 1980      0A000000 
 1980      44554D50 
 1980      00000000 
 1981 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1981      15000000 
 1981      0A000000 
 1981      444F0000 
 1982 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1982      14000000 
 1982      0A000000 
 1982      44495200 
 1983 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1983      13000000 
 1983      0A000000 
 1983      44454300 
 1984 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1984      12000000 
 1984      0B000000 
 1984      44445200 
 1985 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1985      11000000 
 1985      0A000000 
 1985      44415441 
 1985      4C4E0000 
 1986 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
ARM GAS  tinyBasic.s 			page 57


 1986      10000000 
 1986      0A000000 
 1986      44415441 
 1986      00000000 
 1987 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 1987      0F000000 
 1987      0B000000 
 1987      43524C00 
 1988 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 1988      0E000000 
 1988      0B000000 
 1988      43524800 
 1989 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 1989      0D000000 
 1989      0C000000 
 1989      43484152 
 1989      00000000 
 1990 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 1990      0C000000 
 1990      0A000000 
 1990      42594500 
 1991 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 1991      0B000000 
 1991      0A000000 
 1991      42544F47 
 1991      4C000000 
 1992 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 1992      0A000000 
 1992      0B000000 
 1992      42544553 
 1992      54000000 
 1993 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 1993      09000000 
 1993      0A000000 
 1993      42534554 
 1993      00000000 
 1994 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 1994      08000000 
 1994      0A000000 
 1994      42524553 
 1994      00000000 
 1995 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 1995      07000000 
 1995      0B000000 
 1995      42495400 
 1996 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 1996      06000000 
 1996      0A000000 
 1996      41575500 
 1997 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 1997      05000000 
 1997      0A000000 
 1997      4155544F 
 1997      52554E00 
 1998 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 1998      04000000 
 1998      0B000000 
ARM GAS  tinyBasic.s 			page 58


 1998      41534300 
 1999 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 1999      03000000 
 1999      0B000000 
 1999      414E4400 
 2000 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2000      02000000 
 2000      0B000000 
 2000      41444352 
 2000      45414400 
 2001 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2001      01000000 
 2001      0A000000 
 2001      4144434F 
 2001      4E000000 
 2002              	first_link: 
 2003 0794 8C070000 	  .word LINK 
 2004 0798 00000000 	  .word ABS_IDX 
 2005 079c 0B000000 	  .word TK_IFUNC
 2006              	kword_dict: // first name field 
 2007              	  .equ LINK,. 
 2008 07a0 41425300 	  .asciz "ABS" 
 2009              	  .p2align 2 
 2010              	
 2011              	    .section .rodata.fn_tabld 
 2012              	
 2013              	//comands and fonctions address table 	
 2014              	fn_table:
 2015 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2015      00000000 
 2015      00000000 
 2015      00000000 
 2015      00000000 
 2016 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2016      00000000 
 2016      00000000 
 2016      00000000 
 2016      00000000 
 2017 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 2017      00000000 
 2017      00000000 
 2017      00000000 
 2017      00000000 
 2018 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2018      00000000 
 2018      00000000 
 2018      00000000 
 2018      00000000 
 2019 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2019      00000000 
 2019      00000000 
 2019      00000000 
 2019      00000000 
 2020 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2020      00000000 
 2020      00000000 
 2020      00000000 
ARM GAS  tinyBasic.s 			page 59


 2020      00000000 
 2021 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2021      00000000 
 2021      00000000 
 2021      00000000 
 2021      00000000 
 2022 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2022      00000000 
 2022      00000000 
 2022      00000000 
 2022      00000000 
 2023 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 2023      00000000 
 2023      00000000 
 2023      00000000 
 2023      00000000 
 2024 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2024      00000000 
 2024      00000000 
 2024      00000000 
 2024      00000000 
 2025 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2025      00000000 
 2025      00000000 
 2025      00000000 
 2025      00000000 
 2026 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2026      00000000 
 2026      00000000 
 2026      00000000 
 2026      00000000 
 2027 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2027      00000000 
 2027      00000000 
 2027      00000000 
 2027      00000000 
 2028 019c 00000000 		.word 0 
 2029              	
 2030              	
 2031              	/**********************************
 2032              	    BASIC commands and functions 
 2033              	**********************************/
 2034              	
 2035              	    .section .text.basic , "ax", %progbits 
 2036              	
 2037              	
 2038              	//************ test code  *****************
 2039              	    _GBL_FUNC tbi_test 
 2040              	
 2041              	
 2042 0000 7047     	    _RET 
 2043              	
 2044              	//************ end test code **************
 2045              	
 2046              	
 2047              	/*******************************
 2048              	  BASIC:  ABS expr 
ARM GAS  tinyBasic.s 			page 60


 2049              	  input:
 2050              	    none 
 2051              	  output:
 2052              	    r0    token type 
 2053              	    r1    abs(expr)
 2054              	  use:
 2055              	    none 
 2056              	******************************/
 2057 0002 00BF     	    _FUNC abs 
 2058 0004 00B5FFF7 	    _CALL arg_list
 2058      FEFF5DF8 
 2058      04EB
 2059 000e 0128     	    cmp r0,#1 
 2060 0010 01D0     	    beq 1f 
 2061 0012 FFF7FEBF 	    b syntax_error 
 2062 0016 5CF8041B 	1:  _POP r1 
 2063 001a 11F0004F 	    tst r1,#(1<<31)
 2064 001e 01D0     	    beq 9f
 2065 0020 C1F10001 	    rsb r1,#0 
 2066 0024 4FF00E00 	9:  mov r0,#TK_INTGR
 2067 0028 7047     	   _RET 
 2068              	
 2069 002a 00BF     	    _FUNC power_adc
 2070 002c 7047     	    _RET
 2071              	
 2072 002e 00BF     	    _FUNC analog_read
 2073 0030 7047     	    _RET
 2074              	
 2075 0032 00BF     	    _FUNC bit_and
 2076 0034 7047     	    _RET
 2077              	
 2078 0036 00BF     	    _FUNC ascii
 2079 0038 7047     	    _RET
 2080              	
 2081 003a 00BF     	    _FUNC autorun
 2082 003c 7047     	    _RET
 2083              	
 2084 003e 00BF     	    _FUNC awu
 2085 0040 7047     	    _RET
 2086              	
 2087 0042 00BF     	    _FUNC bitmask
 2088 0044 7047     	    _RET 
 2089              	
 2090              	  
 2091              	  /*********************************
 2092              	   BASIC: BRES adr, mask   
 2093              	   reset bits [adr]= [adr] & ~mask  
 2094              	   input:
 2095              	     none 
 2096              	    output;
 2097              	      none 
 2098              	    use:
 2099              	      T1   temp
 2100              	      T2   temp 
 2101              	*******************************/     
 2102 0046 00BF     	  _FUNC bit_reset
 2103 0048 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 61


 2103      FEFF5DF8 
 2103      04EB
 2104 0052 0228     	    cmp r0,#2 
 2105 0054 01D0     	    beq 1f 
 2106 0056 FFF7FEBF 	    b syntax_error 
 2107 005a 5CF8041B 	1:  _POP r1 //mask 
 2108 005e 5CF8040B 	    _POP r0 //address 
 2109 0062 D0F80090 	    ldr T2,[r0] 
 2110 0066 81F0FF31 	    eor r1,#-1 // ~mask 
 2111 006a 01EA0901 	    and r1,T2
 2112 006e 0160     	    str r1,[r0]
 2113 0070 7047     	    _RET  
 2114              	
 2115              	
 2116              	/*********************************
 2117              	   BASIC: BSET adr, mask   
 2118              	   reset bits [adr]= [adr] & ~mask  
 2119              	   input:
 2120              	      none 
 2121              	    output;
 2122              	      none 
 2123              	    use:
 2124              	      T1   temp
 2125              	      T2   temp  
 2126              	*******************************/     
 2127 0072 00BF     	    _FUNC bit_set
 2128 0074 00B5FFF7 	    _CALL arg_list 
 2128      FEFF5DF8 
 2128      04EB
 2129 007e 0228     	    cmp r0,#2 
 2130 0080 01D0     	    beq 1f 
 2131 0082 FFF7FEBF 	    b syntax_error 
 2132 0086 5CF8041B 	1:  _POP r1 //mask 
 2133 008a 5CF8040B 	    _POP r0 //address 
 2134 008e D0F80090 	    ldr T2,[r0] 
 2135 0092 41EA0901 	    orr r1,T2
 2136 0096 0160     	    str r1,[r0]
 2137 0098 7047     	    _RET 
 2138              	
 2139              	  /*********************************
 2140              	   BASIC: BTOGL adr, mask   
 2141              	   reset bits [adr]= [adr] & ~mask  
 2142              	   input:
 2143              	     r0    adr 
 2144              	     r1    mask 
 2145              	    output;
 2146              	      none 
 2147              	    use:
 2148              	      T1   temp
 2149              	      T2   temp  
 2150              	*******************************/     
 2151 009a 00BF     	  _FUNC bit_toggle
 2152 009c 00B5FFF7 	    _CALL arg_list 
 2152      FEFF5DF8 
 2152      04EB
 2153 00a6 0228     	    cmp r0,#2 
 2154 00a8 01D0     	    beq 1f 
ARM GAS  tinyBasic.s 			page 62


 2155 00aa FFF7FEBF 	    b syntax_error 
 2156 00ae 5CF8041B 	1:  _POP r1 //mask 
 2157 00b2 5CF8040B 	    _POP r0 //address 
 2158 00b6 D0F80090 	    ldr T2,[r0] 
 2159 00ba 81EA0901 	    eor r1,T2
 2160 00be 0160     	    str r1,[r0]
 2161 00c0 7047     	    _RET  
 2162              	
 2163 00c2 00BF     	    _FUNC bit_test
 2164 00c4 7047     	    _RET 
 2165              	
 2166 00c6 00BF     	    _FUNC bye
 2167 00c8 7047     	    _RET 
 2168              	
 2169 00ca 00BF     	    _FUNC char
 2170 00cc 7047     	    _RET 
 2171              	
 2172 00ce 00BF     	    _FUNC const_cr2
 2173 00d0 7047     	    _RET  
 2174              	
 2175 00d2 00BF     	    _FUNC const_cr1
 2176 00d4 7047     	    _RET 
 2177              	
 2178 00d6 00BF     	    _FUNC data
 2179 00d8 7047     	    _RET 
 2180              	
 2181 00da 00BF     	    _FUNC data_line
 2182 00dc 7047     	    _RET 
 2183              	
 2184 00de 00BF     	    _FUNC const_ddr
 2185 00e0 7047     	    _RET 
 2186              	
 2187 00e2 00BF     	    _FUNC dec_base
 2188 00e4 7047     	    _RET 
 2189              	
 2190 00e6 00BF     	    _FUNC directory
 2191 00e8 7047     	    _RET 
 2192              	
 2193 00ea 00BF     	    _FUNC do_loop
 2194 00ec 7047     	    _RET 
 2195              	
 2196 00ee 00BF     	    _FUNC digital_read
 2197 00f0 7047     	    _RET 
 2198              	
 2199 00f2 00BF     	    _FUNC digital_write
 2200 00f4 7047     	    _RET  
 2201              	
 2202 00f6 00BF     	    _FUNC cmd_end
 2203 00f8 7047     	    _RET 
 2204              	
 2205 00fa 00BF     	    _FUNC const_eeprom_base
 2206 00fc 7047     	    _RET 
 2207              	
 2208 00fe 00BF     	    _FUNC fcpu
 2209 0100 7047     	    _RET 
 2210              	
 2211 0102 00BF     	    _FUNC for
ARM GAS  tinyBasic.s 			page 63


 2212 0104 7047     	    _RET 
 2213              	
 2214 0106 00BF     	    _FUNC forget
 2215 0108 7047     	    _RET 
 2216              	
 2217 010a 00BF     	    _FUNC gosub
 2218 010c 7047     	    _RET 
 2219              	
 2220 010e 00BF     	    _FUNC goto
 2221 0110 7047     	    _RET 
 2222              	
 2223 0112 00BF     	    _FUNC gpio
 2224 0114 7047     	    _RET  
 2225              	
 2226 0116 00BF     	    _FUNC hex_base
 2227 0118 7047     	    _RET 
 2228              	
 2229 011a 00BF     	    _FUNC const_idr
 2230 011c 7047     	    _RET 
 2231              	
 2232              	/**********************************************
 2233              	  BASIC: IF relation : statement
 2234              	  execute statement only if relation is true
 2235              	*********************************************/
 2236 011e 00BF     	    _FUNC if
 2237 0120 00B5FFF7 	    _CALL relation 
 2237      FEFF5DF8 
 2237      04EB
 2238 012a 09B9     	    cbnz r1,9f 
 2239 012c D4F804A0 	    ldr IN,[UPP,#COUNT]
 2240 0130 7047     	9:  _RET 
 2241              	
 2242 0132 00BF     	    _FUNC input_var
 2243 0134 7047     	    _RET 
 2244              	
 2245 0136 00BF     	    _FUNC invert
 2246 0138 7047     	    _RET 
 2247              	
 2248 013a 00BF     	    _FUNC enable_iwdg
 2249 013c 7047     	    _RET 
 2250              	
 2251 013e 00BF     	    _FUNC refresh_iwdg
 2252 0140 7047     	    _RET 
 2253              	
 2254 0142 00BF     	    _FUNC key
 2255 0144 7047     	    _RET  
 2256              	
 2257              	/******************************
 2258              	  BASIC: [let] var=expr 
 2259              	         [let] @(expr)=expr
 2260              	  input:
 2261              	    none 
 2262              	  output:
 2263              	    none 
 2264              	  use:
 2265              	
 2266              	****************************/         
ARM GAS  tinyBasic.s 			page 64


 2267 0146 00BF     	    _FUNC let
 2268 0148 00B5FFF7 	    _CALL next_token 
 2268      FEFF5DF8 
 2268      04EB
 2269 0152 0428     	    cmp r0,#TK_VAR
 2270 0154 03D0     	    beq let_var 
 2271 0156 0528     	    cmp r0,#TK_ARRAY 
 2272 0158 07D0     	    beq let_array 
 2273 015a FFF7FEBF 	    b syntax_error 
 2274              	let_var:
 2275 015e 4FEA8101 	    lsl r1,#2
 2276 0162 04F16000 	    add r0,UPP,#VARS
 2277 0166 0844     	    add r0,r1
 2278 0168 1FE0     	    b 1f 
 2279              	let_array: 
 2280 016a 4FF00600 	    mov r0,#TK_LPAREN
 2281 016e 00B5FFF7 	    _CALL expect 
 2281      FEFF5DF8 
 2281      04EB
 2282 0178 00B5FFF7 	    _CALL expression
 2282      FEFF5DF8 
 2282      04EB
 2283 0182 0E28     	    cmp r0,#TK_INTGR 
 2284 0184 7FF4FEAF 	    bne syntax_error
 2285 0188 4CF8041D 	    _PUSH r1 
 2286 018c 4FF00700 	    mov r0,#TK_RPAREN
 2287 0190 00B5FFF7 	    _CALL expect 
 2287      FEFF5DF8 
 2287      04EB
 2288 019a 5CF8041B 	    _POP r1 
 2289 019e D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2290 01a2 4FEA8101 	    lsl r1,#2 
 2291 01a6 A0EB0100 	    sub r0,r1 
 2292 01aa 4CF8040D 	1:  _PUSH r0 
 2293 01ae 4FF03200 	    mov r0,#TK_EQUAL 
 2294 01b2 00B5FFF7 	    _CALL expect 
 2294      FEFF5DF8 
 2294      04EB
 2295 01bc 00B5FFF7 	    _CALL expression   
 2295      FEFF5DF8 
 2295      04EB
 2296 01c6 0E28     	    cmp r0,#TK_INTGR
 2297 01c8 7FF4FEAF 	    bne syntax_error   
 2298 01cc 5CF8040B 	2:  _POP r0 
 2299 01d0 0160     	    str r1,[r0]
 2300 01d2 7047     	    _RET  
 2301              	
 2302              	    _FUNC list
 2303 01d4 7047     	    _RET 
 2304              	
 2305 01d6 00BF     	    _FUNC load
 2306 01d8 7047     	    _RET 
 2307              	
 2308 01da 00BF     	    _FUNC log2
 2309 01dc 7047     	    _RET 
 2310              	
 2311 01de 00BF     	    _FUNC lshift
ARM GAS  tinyBasic.s 			page 65


 2312 01e0 7047     	    _RET 
 2313              	
 2314 01e2 00BF     	    _FUNC muldiv
 2315 01e4 7047     	    _RET 
 2316              	
 2317 01e6 00BF     	    _FUNC next
 2318 01e8 7047     	    _RET 
 2319              	
 2320 01ea 00BF     	    _FUNC new
 2321 01ec 7047     	    _RET  
 2322              	
 2323 01ee 00BF     	    _FUNC func_not
 2324 01f0 7047     	    _RET 
 2325              	
 2326 01f2 00BF     	    _FUNC const_odr
 2327 01f4 7047     	    _RET 
 2328              	
 2329 01f6 00BF     	    _FUNC bit_or
 2330 01f8 7047     	    _RET 
 2331              	
 2332 01fa 00BF     	    _FUNC pad_ref
 2333 01fc 7047     	    _RET 
 2334              	
 2335 01fe 00BF     	    _FUNC pause
 2336 0200 7047     	    _RET 
 2337              	
 2338 0202 00BF     	    _FUNC pin_mode
 2339 0204 7047     	    _RET 
 2340              	
 2341 0206 00BF     	    _FUNC peek
 2342 0208 7047     	    _RET 
 2343              	
 2344 020a 00BF     	    _FUNC const_input
 2345 020c 7047     	    _RET  
 2346              	
 2347 020e 00BF     	    _FUNC poke
 2348 0210 7047     	    _RET 
 2349              	
 2350 0212 00BF     	    _FUNC const_output
 2351 0214 7047     	    _RET 
 2352              	
 2353              	/****************************
 2354              	  BASIC: PRINT|? arg_list 
 2355              	  print list of arguments 
 2356              	****************************/
 2357 0216 00BF     	    _FUNC print
 2358 0218 88EA0808 	    eor T1,T1 // no comma 
 2359 021c 00B5FFF7 	0:  _CALL expression
 2359      FEFF5DF8 
 2359      04EB
 2360 0226 0E28     	    cmp r0,#TK_INTGR
 2361 0228 07D1     	    bne 1f 
 2362 022a 0846     	    mov r0,r1
 2363 022c A169     	    ldr r1,[UPP,#BASE]
 2364 022e 00B5FFF7 	    _CALL print_int
 2364      FEFF5DF8 
 2364      04EB
ARM GAS  tinyBasic.s 			page 66


 2365 0238 2BE0     	    b 6f 
 2366 023a 00B5FFF7 	1:  _CALL next_token
 2366      FEFF5DF8 
 2366      04EB
 2367 0244 0128     	    cmp r0,#TK_COLON 
 2368 0246 04DC     	    bgt 2f
 2369 0248 D4F800A0 	    _UNGET_TOKEN 
 2369      D4F808B0 
 2370 0250 2CE0     	    b print_exit
 2371 0252 88EA0808 	2:  eor T1, T1 
 2372 0256 0228     	    cmp r0,#TK_QSTR 
 2373 0258 06D1     	    bne 4f
 2374 025a 0846     	    mov r0,r1 
 2375 025c 00B5FFF7 	    _CALL uart_puts  
 2375      FEFF5DF8 
 2375      04EB
 2376 0266 14E0     	    b 6f 
 2377 0268 0328     	4:  cmp r0,#TK_CHAR 
 2378 026a 06D1     	    bne 5f 
 2379 026c 0846     	    mov r0,r1 
 2380 026e 00B5FFF7 	    _CALL uart_putc 
 2380      FEFF5DF8 
 2380      04EB
 2381 0278 0BE0     	    b 6f 
 2382 027a 0928     	5:  cmp r0,#TK_SHARP
 2383 027c 7FF4FEAF 	    bne syntax_error 
 2384 0280 00B5FFF7 	    _CALL next_token 
 2384      FEFF5DF8 
 2384      04EB
 2385 028a 0E28     	    cmp r0,#TK_INTGR 
 2386 028c 7FF4FEAF 	    bne syntax_error 
 2387 0290 6164     	    str r1,[UPP,#TAB_WIDTH]
 2388 0292 00B5FFF7 	6:  _CALL next_token 
 2388      FEFF5DF8 
 2388      04EB
 2389 029c 0828     	    cmp r0,#TK_COMMA 
 2390 029e 02D1     	    bne 7f
 2391 02a0 4FF00108 	    mov T1,#1
 2392 02a4 BAE7     	    b 0b  
 2393 02a6 0228     	7:  cmp r0,#2 
 2394 02a8 7FF5FEAF 	    bpl syntax_error  
 2395              	print_exit:
 2396 02ac 18EA0808 	      ands T1,T1 
 2397 02b0 06D1     	      bne 9f
 2398 02b2 4FF00D00 	      mov r0,#CR 
 2399 02b6 00B5FFF7 	      _CALL uart_putc 
 2399      FEFF5DF8 
 2399      04EB
 2400 02c0 7047     	  9:  _RET 
 2401              	
 2402 02c2 00BF     	    _FUNC const_porta
 2403 02c4 7047     	    _RET 
 2404              	
 2405 02c6 00BF     	    _FUNC const_portb
 2406 02c8 7047     	    _RET 
 2407              	
 2408 02ca 00BF     	    _FUNC const_portc
ARM GAS  tinyBasic.s 			page 67


 2409 02cc 7047     	    _RET 
 2410              	
 2411 02ce 00BF     	    _FUNC const_portd
 2412 02d0 7047     	    _RET 
 2413              	
 2414 02d2 00BF     	    _FUNC const_porte
 2415 02d4 7047     	    _RET  
 2416              	
 2417 02d6 00BF     	    _FUNC const_portf
 2418 02d8 7047     	    _RET 
 2419              	
 2420 02da 00BF     	    _FUNC const_portg
 2421 02dc 7047     	    _RET 
 2422              	
 2423 02de 00BF     	    _FUNC const_porth
 2424 02e0 7047     	    _RET 
 2425              	
 2426 02e2 00BF     	    _FUNC const_porti
 2427 02e4 7047     	    _RET 
 2428              	
 2429 02e6 00BF     	    _FUNC qkey
 2430 02e8 7047     	    _RET 
 2431              	
 2432 02ea 00BF     	    _FUNC read
 2433 02ec 7047     	    _RET 
 2434              	
 2435 02ee 00BF     	    _FUNC remark
 2436 02f0 7047     	    _RET  
 2437              	
 2438 02f2 00BF     	    _FUNC restore
 2439 02f4 7047     	    _RET 
 2440              	
 2441 02f6 00BF     	    _FUNC return
 2442 02f8 7047     	    _RET 
 2443              	
 2444 02fa 00BF     	    _FUNC  random
 2445 02fc 7047     	    _RET 
 2446              	
 2447 02fe 00BF     	    _FUNC rshift
 2448 0300 7047     	    _RET 
 2449              	
 2450 0302 00BF     	    _FUNC run
 2451 0304 7047     	    _RET 
 2452              	
 2453 0306 00BF     	    _FUNC save
 2454 0308 7047     	    _RET 
 2455              	
 2456 030a 00BF     	    _FUNC show
 2457 030c 7047     	    _RET 
 2458              	
 2459 030e 00BF     	    _FUNC size
 2460 0310 7047     	    _RET  
 2461              	
 2462 0312 00BF     	    _FUNC sleep
 2463 0314 7047     	    _RET 
 2464              	
 2465 0316 00BF     	    _FUNC spi_read
ARM GAS  tinyBasic.s 			page 68


 2466 0318 7047     	    _RET 
 2467              	
 2468 031a 00BF     	    _FUNC spi_enable
 2469 031c 7047     	    _RET 
 2470              	
 2471 031e 00BF     	    _FUNC spi_select
 2472 0320 7047     	    _RET 
 2473              	
 2474 0322 00BF     	    _FUNC spi_write
 2475 0324 7047     	    _RET 
 2476              	
 2477 0326 00BF     	    _FUNC step
 2478 0328 7047     	    _RET 
 2479              	
 2480 032a 00BF     	    _FUNC stop
 2481 032c 7047     	    _RET 
 2482              	
 2483 032e 00BF     	    _FUNC get_ticks
 2484 0330 7047     	    _RET  
 2485              	
 2486 0332 00BF     	    _FUNC set_timer
 2487 0334 7047     	    _RET 
 2488              	
 2489 0336 00BF     	    _FUNC timeout
 2490 0338 7047     	    _RET 
 2491              	
 2492 033a 00BF     	    _FUNC to
 2493 033c 7047     	    _RET 
 2494              	
 2495 033e 00BF     	    _FUNC tone
 2496 0340 7047     	    _RET 
 2497              	
 2498              	/***************************
 2499              	  BASIC: UBOUND 
 2500              	  return last indice of @
 2501              	  output:
 2502              	    r0  TK_INTGR 
 2503              	    r1  +int 
 2504              	**************************/
 2505 0342 00BF     	    _FUNC ubound
 2506 0344 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2507 0348 606B     	    ldr r0,[UPP,#TXTEND]
 2508 034a A1EB0001 	    sub r1,r0 
 2509 034e 4FEA9101 	    lsr r1,#2
 2510 0352 4FF00E00 	    mov r0,#TK_INTGR 
 2511 0356 7047     	    _RET 
 2512              	
 2513              	    _FUNC uflash
 2514 0358 7047     	    _RET 
 2515              	
 2516 035a 00BF     	    _FUNC until
 2517 035c 7047     	    _RET 
 2518              	
 2519 035e 00BF     	    _FUNC usr
 2520 0360 7047     	    _RET  
 2521              	
 2522 0362 00BF     	    _FUNC wait
ARM GAS  tinyBasic.s 			page 69


 2523 0364 7047     	    _RET 
 2524              	
 2525 0366 00BF     	    _FUNC words
 2526 0368 7047     	    _RET 
 2527              	
 2528 036a 00BF     	    _FUNC write
 2529 036c 7047     	    _RET 
 2530              	
 2531 036e 00BF     	    _FUNC bit_xor
 2532 0370 7047     	    _RET 
 2533              	
 2534 0372 00BF     	    _FUNC transmit
 2535 0374 7047     	    _RET 
 2536              	
 2537 0376 00BF     	    _FUNC receive
 2538 0378 7047     	    _RET  
 2539              	
 2540              	
 2541              	/*************************************************
 2542              	   extra FLASH memory not used by Tiny BASIC
 2543              	   is used to save BASIC programs.
 2544              	************************************************/
 2545 037a 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2545      00800000 
 2545      00000000 
 2545      00000000 
 2545      00000000 
 2546              	  .section .fs
 2547              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 70


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 71


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 72


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 73


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 74


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:161    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:162    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:163    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:164    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:165    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:166    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:167    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:169    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:171    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:172    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
ARM GAS  tinyBasic.s 			page 75


       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
ARM GAS  tinyBasic.s 			page 76


       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:247    .text:0000000000000150 dump
         tinyBasic.s:1019   .text:00000000000006b8 tb_error
         tinyBasic.s:1527   .text:0000000000000abc arg_list
         tinyBasic.s:1004   .text:00000000000006b0 syntax_error
         tinyBasic.s:280    .text:0000000000000190 search_lineno
         tinyBasic.s:311    .text:00000000000001b0 delete_line
         tinyBasic.s:336    .text:00000000000001dc create_gap
         tinyBasic.s:361    .text:0000000000000204 insert_line
         tinyBasic.s:399    .text:0000000000000250 compile
         tinyBasic.s:1306   .text:0000000000000910 pad
         tinyBasic.s:637    .text:000000000000046c parse_int
         tinyBasic.s:470    .text:00000000000002e4 comp_token
         tinyBasic.s:541    .text:00000000000003c0 store_r0
         tinyBasic.s:753    .text:0000000000000544 skip
         tinyBasic.s:772    .text:000000000000055c upper
         tinyBasic.s:575    .text:0000000000000400 is_special
         tinyBasic.s:597    .text:0000000000000444 token_ofs
         tinyBasic.s:485    .text:0000000000000324 tok_idx0
         tinyBasic.s:544    .text:00000000000003c6 try_number
         tinyBasic.s:489    .text:0000000000000326 single
         tinyBasic.s:592    .text:0000000000000434 tok_single
         tinyBasic.s:493    .text:000000000000032e lt
         tinyBasic.s:499    .text:000000000000033c gt
ARM GAS  tinyBasic.s 			page 77


         tinyBasic.s:512    .text:0000000000000360 bkslash
         tinyBasic.s:558    .text:00000000000003fa token_exit
         tinyBasic.s:519    .text:0000000000000376 prt_cmd
         tinyBasic.s:525    .text:0000000000000388 quote
         tinyBasic.s:692    .text:00000000000004dc parse_quote
         tinyBasic.s:530    .text:000000000000039c tick
         tinyBasic.s:923    .text:000000000000060c parse_keyword
         tinyBasic.s:589    .text:0000000000000420 char_list
         tinyBasic.s:590    .text:0000000000000420 $d
         tinyBasic.s:598    .text:0000000000000444 $d
         tinyBasic.s:614    .text:000000000000046a $t
         tinyBasic.s:723    .text:0000000000000510 get_escaped_char
         tinyBasic.s:740    .text:000000000000053a escaped
         tinyBasic.s:740    .text:000000000000053a $d
         tinyBasic.s:753    .text:0000000000000542 $t
         tinyBasic.s:790    .text:000000000000056c is_digit
         tinyBasic.s:813    .text:0000000000000584 is_hex
         tinyBasic.s:838    .text:00000000000005a8 is_bit
         tinyBasic.s:859    .text:00000000000005c4 is_alpha
         tinyBasic.s:880    .text:00000000000005dc is_num
         tinyBasic.s:901    .text:00000000000005f4 is_alnum
         tinyBasic.s:2006   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1129   .text:0000000000000778 search_dict
         tinyBasic.s:974    .text:0000000000000690 cmd_name
         tinyBasic.s:1041   .text:000000000000070c err_msg
         tinyBasic.s:1030   .text:00000000000006d6 compile_error
         tinyBasic.s:1027   .text:00000000000006d4 interpret_error
         tinyBasic.s:1319   .text:0000000000000920 warm_start
         tinyBasic.s:1042   .text:000000000000070c $d
         tinyBasic.s:1048   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1049   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1050   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1051   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1052   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1053   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1054   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1055   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1056   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1057   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1058   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1059   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1060   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1061   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1062   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1064   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1065   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1066   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1083   .text:000000000000074c $t
         tinyBasic.s:1083   .text:000000000000074c BTGL
         tinyBasic.s:1101   .text:0000000000000750 kword_cmp
         tinyBasic.s:1166   .text:00000000000007b6 cold_start
         tinyBasic.s:1187   .text:0000000000000800 src_addr
         tinyBasic.s:1189   .text:0000000000000804 dest_addr
         tinyBasic.s:1305   .text:000000000000090c tib
         tinyBasic.s:1191   .text:0000000000000808 sysvar_size
         tinyBasic.s:1202   .text:000000000000080c prt_version
         tinyBasic.s:1259   .text:00000000000008b4 clear_basic
ARM GAS  tinyBasic.s 			page 78


         tinyBasic.s:1188   .text:0000000000000800 $d
         tinyBasic.s:1865   .rodata:0000000000000000 uzero
         tinyBasic.s:1890   .rodata:00000000000000d0 ulast
         tinyBasic.s:1202   .text:000000000000080c $t
         tinyBasic.s:1226   .text:0000000000000874 version_msg
         tinyBasic.s:1228   .text:0000000000000894 version
         tinyBasic.s:1227   .text:0000000000000874 $d
         tinyBasic.s:1243   .text:0000000000000898 clear_vars
         tinyBasic.s:1285   .text:00000000000008dc warm_init
         tinyBasic.s:1303   .text:0000000000000904 mstack
         tinyBasic.s:1304   .text:0000000000000908 dstack
         tinyBasic.s:1303   .text:0000000000000904 $d
         tinyBasic.s:1307   .text:0000000000000914 array
         tinyBasic.s:1308   .text:0000000000000918 ready
         tinyBasic.s:1319   .text:000000000000091e $t
         tinyBasic.s:1336   .text:0000000000000934 cmd_line
         tinyBasic.s:1347   .text:0000000000000964 interpreter
         tinyBasic.s:1365   .text:0000000000000986 interp_loop
         tinyBasic.s:1352   .text:000000000000096a next_line
         tinyBasic.s:1414   .text:00000000000009c4 next_token
         tinyBasic.s:1398   .text:00000000000009bc execute
         tinyBasic.s:2274   .text.basic:000000000000015e let_var
         tinyBasic.s:2279   .text.basic:000000000000016a let_array
         tinyBasic.s:2014   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1458   .text:0000000000000a34 tok_jmp
         tinyBasic.s:1459   .text:0000000000000a34 $d
         tinyBasic.s:1473   .text:0000000000000a74 $t
         tinyBasic.s:1488   .text:0000000000000a74 expect
         tinyBasic.s:1507   .text:0000000000000a90 func_args
         tinyBasic.s:1686   .text:0000000000000c58 expression
         tinyBasic.s:1561   .text:0000000000000afc factor
         tinyBasic.s:1794   .text:0000000000000d44 get_array_element
         tinyBasic.s:1832   .text:0000000000000d6c get_var
         tinyBasic.s:1635   .text:0000000000000bdc term
         tinyBasic.s:1728   .text:0000000000000cc0 relation
         tinyBasic.s:1775   .text:0000000000000d3a relop_jmp
         tinyBasic.s:1747   .text:0000000000000d0a rel_idx0
         tinyBasic.s:1748   .text:0000000000000d0a rel_eq
         tinyBasic.s:1765   .text:0000000000000d20 rel_false
         tinyBasic.s:1751   .text:0000000000000d0e rel_lt
         tinyBasic.s:1754   .text:0000000000000d12 rel_le
         tinyBasic.s:1757   .text:0000000000000d16 rel_gt
         tinyBasic.s:1760   .text:0000000000000d1a rel_ge
         tinyBasic.s:1763   .text:0000000000000d1e rel_diff
         tinyBasic.s:1776   .text:0000000000000d3a $d
         tinyBasic.s:1814   .text:0000000000000d58 set_array_element
         tinyBasic.s:1850   .text:0000000000000d7c set_var
         tinyBasic.s:2547   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1886   .rodata:0000000000000050 $d
         tinyBasic.s:1897   *ABS*:0000000000000000 link
         tinyBasic.s:1898   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2007   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:1899   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2002   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2057   .text.basic:0000000000000004 abs
         tinyBasic.s:2069   .text.basic:000000000000002c power_adc
         tinyBasic.s:2072   .text.basic:0000000000000030 analog_read
ARM GAS  tinyBasic.s 			page 79


         tinyBasic.s:2075   .text.basic:0000000000000034 bit_and
         tinyBasic.s:2078   .text.basic:0000000000000038 ascii
         tinyBasic.s:2081   .text.basic:000000000000003c autorun
         tinyBasic.s:2084   .text.basic:0000000000000040 awu
         tinyBasic.s:2087   .text.basic:0000000000000044 bitmask
         tinyBasic.s:2102   .text.basic:0000000000000048 bit_reset
         tinyBasic.s:2127   .text.basic:0000000000000074 bit_set
         tinyBasic.s:2163   .text.basic:00000000000000c4 bit_test
         tinyBasic.s:2151   .text.basic:000000000000009c bit_toggle
         tinyBasic.s:2166   .text.basic:00000000000000c8 bye
         tinyBasic.s:2169   .text.basic:00000000000000cc char
         tinyBasic.s:2172   .text.basic:00000000000000d0 const_cr2
         tinyBasic.s:2175   .text.basic:00000000000000d4 const_cr1
         tinyBasic.s:2178   .text.basic:00000000000000d8 data
         tinyBasic.s:2181   .text.basic:00000000000000dc data_line
         tinyBasic.s:2184   .text.basic:00000000000000e0 const_ddr
         tinyBasic.s:2187   .text.basic:00000000000000e4 dec_base
         tinyBasic.s:2190   .text.basic:00000000000000e8 directory
         tinyBasic.s:2193   .text.basic:00000000000000ec do_loop
         tinyBasic.s:2196   .text.basic:00000000000000f0 digital_read
         tinyBasic.s:2199   .text.basic:00000000000000f4 digital_write
         tinyBasic.s:2202   .text.basic:00000000000000f8 cmd_end
         tinyBasic.s:2205   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2208   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2211   .text.basic:0000000000000104 for
         tinyBasic.s:2214   .text.basic:0000000000000108 forget
         tinyBasic.s:2217   .text.basic:000000000000010c gosub
         tinyBasic.s:2220   .text.basic:0000000000000110 goto
         tinyBasic.s:2223   .text.basic:0000000000000114 gpio
         tinyBasic.s:2226   .text.basic:0000000000000118 hex_base
         tinyBasic.s:2229   .text.basic:000000000000011c const_idr
         tinyBasic.s:2236   .text.basic:0000000000000120 if
         tinyBasic.s:2242   .text.basic:0000000000000134 input_var
         tinyBasic.s:2245   .text.basic:0000000000000138 invert
         tinyBasic.s:2248   .text.basic:000000000000013c enable_iwdg
         tinyBasic.s:2251   .text.basic:0000000000000140 refresh_iwdg
         tinyBasic.s:2254   .text.basic:0000000000000144 key
         tinyBasic.s:2267   .text.basic:0000000000000148 let
         tinyBasic.s:2302   .text.basic:00000000000001d4 list
         tinyBasic.s:2305   .text.basic:00000000000001d8 load
         tinyBasic.s:2308   .text.basic:00000000000001dc log2
         tinyBasic.s:2311   .text.basic:00000000000001e0 lshift
         tinyBasic.s:2314   .text.basic:00000000000001e4 muldiv
         tinyBasic.s:2317   .text.basic:00000000000001e8 next
         tinyBasic.s:2320   .text.basic:00000000000001ec new
         tinyBasic.s:2323   .text.basic:00000000000001f0 func_not
         tinyBasic.s:2326   .text.basic:00000000000001f4 const_odr
         tinyBasic.s:2329   .text.basic:00000000000001f8 bit_or
         tinyBasic.s:2332   .text.basic:00000000000001fc pad_ref
         tinyBasic.s:2335   .text.basic:0000000000000200 pause
         tinyBasic.s:2338   .text.basic:0000000000000204 pin_mode
         tinyBasic.s:2341   .text.basic:0000000000000208 peek
         tinyBasic.s:2344   .text.basic:000000000000020c const_input
         tinyBasic.s:2347   .text.basic:0000000000000210 poke
         tinyBasic.s:2350   .text.basic:0000000000000214 const_output
         tinyBasic.s:2357   .text.basic:0000000000000218 print
         tinyBasic.s:2402   .text.basic:00000000000002c4 const_porta
ARM GAS  tinyBasic.s 			page 80


         tinyBasic.s:2405   .text.basic:00000000000002c8 const_portb
         tinyBasic.s:2408   .text.basic:00000000000002cc const_portc
         tinyBasic.s:2411   .text.basic:00000000000002d0 const_portd
         tinyBasic.s:2414   .text.basic:00000000000002d4 const_porte
         tinyBasic.s:2417   .text.basic:00000000000002d8 const_portf
         tinyBasic.s:2420   .text.basic:00000000000002dc const_portg
         tinyBasic.s:2423   .text.basic:00000000000002e0 const_porth
         tinyBasic.s:2426   .text.basic:00000000000002e4 const_porti
         tinyBasic.s:2429   .text.basic:00000000000002e8 qkey
         tinyBasic.s:2432   .text.basic:00000000000002ec read
         tinyBasic.s:2435   .text.basic:00000000000002f0 remark
         tinyBasic.s:2438   .text.basic:00000000000002f4 restore
         tinyBasic.s:2441   .text.basic:00000000000002f8 return
         tinyBasic.s:2444   .text.basic:00000000000002fc random
         tinyBasic.s:2447   .text.basic:0000000000000300 rshift
         tinyBasic.s:2450   .text.basic:0000000000000304 run
         tinyBasic.s:2453   .text.basic:0000000000000308 save
         tinyBasic.s:2456   .text.basic:000000000000030c show
         tinyBasic.s:2459   .text.basic:0000000000000310 size
         tinyBasic.s:2462   .text.basic:0000000000000314 sleep
         tinyBasic.s:2465   .text.basic:0000000000000318 spi_read
         tinyBasic.s:2468   .text.basic:000000000000031c spi_enable
         tinyBasic.s:2471   .text.basic:0000000000000320 spi_select
         tinyBasic.s:2474   .text.basic:0000000000000324 spi_write
         tinyBasic.s:2477   .text.basic:0000000000000328 step
         tinyBasic.s:2480   .text.basic:000000000000032c stop
         tinyBasic.s:2483   .text.basic:0000000000000330 get_ticks
         tinyBasic.s:2486   .text.basic:0000000000000334 set_timer
         tinyBasic.s:2489   .text.basic:0000000000000338 timeout
         tinyBasic.s:2492   .text.basic:000000000000033c to
         tinyBasic.s:2495   .text.basic:0000000000000340 tone
         tinyBasic.s:2505   .text.basic:0000000000000344 ubound
         tinyBasic.s:2513   .text.basic:0000000000000358 uflash
         tinyBasic.s:2516   .text.basic:000000000000035c until
         tinyBasic.s:2519   .text.basic:0000000000000360 usr
         tinyBasic.s:2522   .text.basic:0000000000000364 wait
         tinyBasic.s:2525   .text.basic:0000000000000368 words
         tinyBasic.s:2528   .text.basic:000000000000036c write
         tinyBasic.s:2531   .text.basic:0000000000000370 bit_xor
         tinyBasic.s:2534   .text.basic:0000000000000374 transmit
         tinyBasic.s:2537   .text.basic:0000000000000378 receive
         tinyBasic.s:2039   .text.basic:0000000000000000 tbi_test
         tinyBasic.s:2039   .text.basic:0000000000000000 $t
         tinyBasic.s:2395   .text.basic:00000000000002ac print_exit
         tinyBasic.s:1862   .text:0000000000000d8a $d
         tinyBasic.s:2547   .text:0000000000000d8c $d
         tinyBasic.s:596    .text:0000000000000441 $d
         tinyBasic.s:596    .text:0000000000000442 $t
         tinyBasic.s:1230   .text:0000000000000895 $d
         tinyBasic.s:1230   .text:0000000000000896 $t
         tinyBasic.s:1794   .text:0000000000000d41 $d
         tinyBasic.s:1794   .text:0000000000000d42 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
ARM GAS  tinyBasic.s 			page 81


spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
