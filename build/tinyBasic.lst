ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
 143              	
 144              	/* system control register */
ARM GAS  tinyBasic.s 			page 4


 145              	.equ SCR_BASE_ADR,0xE000ED10
 146              	.equ SCR_SLEEPONEXIT,(1<<1)
 147              	.equ SCR_SLEEPDEEP,(1<<2)
 148              	.equ SCR_SEVONPEND,(1<<4)
 149              	
 150              	/* power control register */
 151              	.equ PWR_CR_ADR,0x40007000
 152              	.equ PWR_CR_LPDS,(1<<0)
 153              	.equ PWR_CR_PDDS,(1<<1)
 154              	.equ PWR_CR_CWUF,(1<<2)
 155              	.equ PWR_CR_CSBF,(1<<3)
 156              	.equ PWR_CR_PVDE,(1<<4)
 157              	.equ PWR_CR_PLS,(1<<5)
 158              	.equ PWR_CR_DBP,(1<<8)
 159              	
 160              	/* power control and statut register */
 161              	.equ PWR_CSR_ADR,0x40007004 
 162              	.equ PWR_CSR_WUF,(1<<0)
 163              	.equ PWR_CSR_SBF,(1<<1)
 164              	.equ PWR_CSR_PVDO,(1<<2)
 165              	.equ PWR_CSR_EWUP,(1<<8)
 166              	
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
ARM GAS  tinyBasic.s 			page 5


  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
ARM GAS  tinyBasic.s 			page 6


   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SEMIC,9     // semi-colon  
  55              	  .equ TK_SHARP,0xa     // print colon width '#' 
  56              	  .equ TK_CMD,0xb      // BASIC command   
  57              	  .equ TK_IFUNC,0xc    // BASIC integer function
  58              	  .equ TK_CFUNC,0xd    // BASIC character function
  59              	  .equ TK_CONST,0xe    // BASIC constant 
  60              	  .equ TK_INTGR,0xf    // 32 bits integer 
ARM GAS  tinyBasic.s 			page 7


  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	  .equ ERR_CANT_PROG,16
 107              	  
 108              	
 109              	//--------------------------------------
 110              	//   assembler flags 
 111              	//-------------------------------------
 112              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 113              	
 114              	.equ CELL_SIZE,4 
 115              	
 116              	
 117              	//-------------------------------
ARM GAS  tinyBasic.s 			page 8


 118              	//  macros used to help debugging
 119              	//-------------------------------
 120              	  .equ DEBUG,0
 121              	
 122              	    UPP .req r4  // base address system variables 
 123              	    VADR .req r5  // address FOR loop variable 
 124              	    LIMIT .req r6   // LOOP limit 
 125              	    INCR  .req  r7  // LOOP increment 
 126              	    T1  .req r8     // temporary register 
 127              	    T2  .req r9     // temporary register 
 128              	    IN  .req r10    //  index in text line or token list 
 129              	    BPTR .req r11   //  buffer address or BASIC line address 
 130              	    DP   .req r12   //  parameter stack pointer 
 131              	
 132              	/***************************
 133              	  SYSTEM variables offset 
 134              	  from UPP  
 135              	***************************/ 
 136              	
 137              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 138              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 139              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 140              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 141              	  .equ DATA,DATAPTR+4 // index to next data item 
 142              	  .equ DATALEN, DATA+4 // length of data line 
 143              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 144              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 145              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 146              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 147              	  .equ FSPTR,SEED+4 //  pointer used by file system
 148              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 149              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 150              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 151              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 152              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 153              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 154              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 155              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 156              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 157              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 158              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 159              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 160              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 161              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 162              	
 163              	/* flags used by BASIC interpreter */ 
 164              		.equ FRUN,(1<<0) // programm running
 165              		.equ FTRAP,(1<<1) // inside trap handler 
 166              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 167              		.equ FSTOP,(1<<3) // program stopped  
 168              		.equ FBREAK,(1<<4) // break point flag 
 169              		.equ FCOMP,(1<<5)  // compiling flags 
 170              		.equ FAUTORUN,(1<<6) // auto start program running 
 171              	
 172              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 173              	  
 174              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
ARM GAS  tinyBasic.s 			page 9


 175              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 176              	
 177              	/***********************************************
 178              	*       MACROS
 179              	***********************************************/
 180              		.macro _CALL fn /* low level routine call */ 
 181              	 	PUSH {LR}
 182              		BL \fn  
 183              	  POP {LR}
 184              		.endm
 185              		
 186              		.macro	_RET /* return from subroutine */
 187              		BX	LR
 188              		.endm
 189              	
 190              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 191              		MOV \REG, #\LITERAL&0xffff
 192              		MOVT \REG, #\LITERAL>>16
 193              		.endm
 194              	
 195              	// local function header 
 196              	  .macro _FUNC label 
 197              	  .p2align 2 
 198              	  .type \label, %function  
 199              	\label:
 200              	  .endm 
 201              	
 202              	// global function header 
 203              	  .macro _GBL_FUNC label 
 204              	  .global \label 
 205              	  _FUNC \label 
 206              	  .endm 
 207              	
 208              	
 209              	/********************************
 210              	    dictionary structure
 211              	------------------------------
 212              	 format:
 213              	   link:    
 214              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 215              	   cmd_name: 31 characters max 
 216              	   cmd_index: 2 bytes 
 217              	**********************************/
 218              		.macro _dict_entry tok_type,name,cmd_idx 
 219              	  .word LINK 
 220              	  .word \cmd_idx 
 221              		.word \tok_type  	
 222              		.equ LINK,.
 223              		.asciz "\name"
 224              		.p2align 2 
 225              		.endm 
 226              	
 227              	  // pop parameter in register 
 228              	  .macro _POP  reg 
 229              	  ldmia  DP!,{\reg}
 230              	  .endm 
 231              	
ARM GAS  tinyBasic.s 			page 10


 232              	  // push register on parameter stack 
 233              	  .macro _PUSH reg 
 234              	  stmdb DP!,{\reg}
 235              	  .endm 
 236              	
 237              	  // drop n parameters on dstack 
 238              	  .macro _DROP n
 239              	  mov r0,#4*\n
 240              	  add DP,R0 
 241              	  .endm 
 242              	
 243              	  // back to previous token in list 
 244              	  .macro _UNGET_TOKEN 
 245              	  ldr IN,[UPP,#IN_SAVED]
 246              	  ldr BPTR,[UPP,#BASICPTR] 
 247              	  .endm 
 248              	
 249              	 // create a text data 
 250              	 .macro _TEXT label,text
 251              	 \label: .asciz "\text"
 252              	 .p2align 2 
 253              	 .endm 
 254              	
 255              	// command line only 
 256              	  .macro _CLO 
 257              	  ldr r0,[UPP,#FLAGS]
 258              	  tst r0,#FRUN 
 259              	  beq 1f 
 260              	  mov r0,#ERR_CMD_ONLY
 261              	  b tb_error
 262              	1: 
 263              	  .endm 
 264              	
 265              	// run time only 
 266              	  .macro _RTO 
 267              	  ldr r0,[UPP,#FLAGS]
 268              	  tst r0,#FRUN 
 269              	  bne 1f 
 270              	  mov r0,#ERR_CMD_ONLY
 271              	  b tb_error
 272              	1:
 273              	  .endm 
 274              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
ARM GAS  tinyBasic.s 			page 11


  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, ABS_IDX+1  //   adc on 
  27              	    .equ ADCREAD_IDX,ADCON_IDX+1  // read adc 
  28              	    .equ AND_IDX,ADCREAD_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1  // 
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ DATA_IDX,CHAR_IDX+1 // 
  39              	    .equ DATALN_IDX,DATA_IDX+1 // 
  40              	    .equ DEC_IDX,DATALN_IDX+1 // 
  41              	    .equ DIR_IDX,DEC_IDX+1 // 
  42              	    .equ DO_IDX,DIR_IDX+1 // 
  43              	    .equ DUMP_IDX, DO_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ FOR_IDX, END_IDX+1 // 
  46              	    .equ FORGET_IDX, FOR_IDX+1 // 
  47              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  48              	    .equ GOTO_IDX, GOSUB_IDX+1
  49              	    .equ HEX_IDX, GOTO_IDX+1 // 
  50              	    .equ IF_IDX, HEX_IDX+1 // 
  51              	    .equ INP_IDX,IF_IDX+1
  52              	    .equ INPUT_IDX, INP_IDX+1 // 
  53              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  54              	    .equ KEY_IDX, INVERT_IDX+1 // 
  55              	    .equ LET_IDX, KEY_IDX+1 // 
  56              	    .equ LIST_IDX, LET_IDX+1 // 
  57              	    .equ LOAD_IDX, LIST_IDX+1 // 
  58              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
ARM GAS  tinyBasic.s 			page 12


  71              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  72              	    .equ POKE16_IDX,POKE8_IDX+1 
  73              	    .equ POKE32_IDX,POKE16_IDX+1
  74              	    .equ PRT_IDX, POKE32_IDX+1 //  //  PRINT commande index 
  75              	    .equ QKEY_IDX, PRT_IDX+1 // 
  76              	    .equ READ_IDX, QKEY_IDX+1 // 
  77              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  78              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  79              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  80              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  81              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  82              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  83              	    .equ SAVE_IDX, RUN_IDX+1 // 
  84              	    .equ SHOW_IDX, SAVE_IDX+1 // 
  85              	    .equ SIZE_IDX, SHOW_IDX+1 // 
  86              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  87              	    .equ SPIRD_IDX, SLEEP_IDX+1 // 
  88              	    .equ SPIEN_IDX, SPIRD_IDX+1 // 
  89              	    .equ SPISEL_IDX, SPIEN_IDX+1 // 
  90              	    .equ SPIWR_IDX, SPISEL_IDX+1 // 
  91              	    .equ STEP_IDX, SPIWR_IDX+1 // 
  92              	    .equ STOP_IDX, STEP_IDX+1 // 
  93              	    .equ THEN_IDX,STOP_IDX+1
  94              	    .equ TICKS_IDX, THEN_IDX+1 // 
  95              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  96              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  97              	    .equ TO_IDX, TMROUT_IDX+1 // 
  98              	    .equ TONE_IDX, TO_IDX+1 // 
  99              	    .equ UBOUND_IDX, TONE_IDX+1 // 
 100              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 101              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 102              	    .equ USR_IDX, UNTIL_IDX+1 // 
 103              	    .equ WAIT_IDX, USR_IDX+1 // 
 104              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 105              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 106              	    .equ XOR_IDX, WRITE_IDX+1 //  
 107              	    .equ XTRMT_IDX, XOR_IDX+1 // 
 108              	    .equ XRCV_IDX, XTRMT_IDX+1 // 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
ARM GAS  tinyBasic.s 			page 13


  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
ARM GAS  tinyBasic.s 			page 14


 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
ARM GAS  tinyBasic.s 			page 15


 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00C00 	    mov r0,#12
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
ARM GAS  tinyBasic.s 			page 16


 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
 208 0118 03BC     	    pop {r0,r1}
 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
ARM GAS  tinyBasic.s 			page 17


 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _GBL_FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
ARM GAS  tinyBasic.s 			page 18


 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
 314 01b0 8846     	    mov T1,R1
 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      FEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
ARM GAS  tinyBasic.s 			page 19


 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
 361              	    in pas buffer.
 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF8089A 	    ldr T2,pad // tokens buffer
 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      06F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e 31E3     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e 29E3     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      27F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 20


 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF8B039 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 414 028e 1888     	    ldrh r0,[r3] // line number 
 415 0290 70B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 206C     	    ldr r0,[UPP,#FLAGS]
 418 0294 10F0080F 	    tst r0,#FSTOP
 419 0298 02D0     	    beq 7f 
 420 029a 4FF01000 	    mov r0,#ERR_CANT_PROG 
 421 029e 11E3     	    b tb_error 
 422 02a0 1846     	7:  mov r0,r3 
 423 02a2 00B5FFF7 	    _CALL insert_line 
 423      96FF5DF8 
 423      04EB
 424 02ac 4040     	    eors r0,r0 
 425 02ae 08E0     	    b 9f 
 426 02b0 9B46     	8:  mov BPTR,r3 // *token_list 
 427 02b2 4FF0030A 	    mov IN,#3
 428 02b6 206C     	    ldr r0,[UPP,#FLAGS]
 429 02b8 A0F12000 	    sub r0,#FCOMP
 430 02bc 2064     	    str r0,[UPP,#FLAGS]
 431 02be 5FF0FF30 	    movs r0,#-1 
 432 02c2 7047     	9:  _RET 
 433              	
 434              	/*********************************************
 435              	    compile next token from source 
 436              	    input: 
 437              	      r3 		tib index  
 438              	      T1    tib adr
 439              	      T2    insert point in pad  
 440              	    output:
 441              	      r0     token attribute 
 442              	      r1 		token value
 443              	      r3     tib index updated    
 444              	      T2     updated 
 445              	      use:
 446              	**********************************************/
 447              	    .macro _case c, next  
 448              	    cmp r0,#\c 
 449              	    bne \next
 450              	    .endm 
 451              	
 452              	    _FUNC comp_token 
 453 02c4 40B4     	    push {r6}
 454 02c6 18F80300 	    ldrb r0,[T1,r3]
 455 02ca 0040     	    ands r0,r0 
 456 02cc 70D0     	    beq store_r0  // reached end of text  
 457 02ce 4FF02000 	    mov r0,#SPACE 
 458 02d2 00B500F0 	    _CALL skip  // skip spaces 
 458      12F95DF8 
 458      04EB
 459 02dc 18F80300 	    ldrb r0,[T1,r3]
 460 02e0 0040     	    ands r0,r0 
ARM GAS  tinyBasic.s 			page 21


 461 02e2 65D0     	    beq store_r0  // reached end of text 
 462 02e4 03F10103 	    add r3,#1 
 463 02e8 00B500F0 	    _CALL upper 
 463      13F95DF8 
 463      04EB
 464 02f2 00B500F0 	    _CALL is_special
 464      7CF85DF8 
 464      04EB
 465 02fc DFF8C46D 	    ldr r6,=token_ofs
 466 0300 D6E811F0 	    tbh [r6,r1] 
 467              	tok_idx0:     
 468              	//  not special char.  
 469 0304 57E0     	    b try_number 
 470              	// single char token with no value 
 471              	single: 
 472 0306 DFF8C06D 	    ldr r6,=tok_single
 473 030a 705C     	    ldrb r0,[r6,r1] 
 474 030c 50E0     	    b store_r0  
 475              	lt:
 476 030e 4FF03400 	    mov r0,#TK_LT
 477 0312 18F80310 	    ldrb r1,[T1,r3]
 478 0316 3E29     	    cmp r1,#'>' 
 479 0318 06D0     	    beq 1f
 480 031a 0AE0     	    b 2f 
 481              	gt:
 482 031c 4FF03100 	    mov r0,#TK_GT 
 483 0320 18F80310 	    ldrb r1,[T1,r3]
 484 0324 3C29     	    cmp r1,#'<'
 485 0326 04D1     	    bne 2f  
 486 0328 03F10103 	1:  add r3,#1
 487 032c 4FF03500 	    mov r0,#TK_NE  
 488 0330 3EE0     	    b store_r0
 489 0332 3D29     	2:  cmp r1,#'=' 
 490 0334 3CD1     	    bne store_r0  
 491 0336 03F10103 	    add r3,#1
 492 033a 00F10200 	    add r0,#2
 493 033e 37E0     	    b store_r0       
 494              	bkslash:
 495 0340 18F80310 	    ldrb r1,[T1,r3]
 496 0344 03F10103 	    add r3,#1
 497 0348 4FF00300 	    mov r0,#TK_CHAR 
 498 034c 09F8010B 	    strb r0,[T2],#1
 499 0350 09F8011B 	    strb r1,[T2],#1
 500 0354 49E0     	    b token_exit 
 501              	prt_cmd: 
 502 0356 4FF00B00 	    mov r0,#TK_CMD 
 503 035a 4FF03101 	    mov r1,#PRT_IDX
 504 035e 09F8010B 	    strb r0,[T2],#1
 505 0362 09F8011B 	    strb r1,[T2],#1
 506 0366 40E0     	    b token_exit 
 507              	quote:
 508 0368 4FF00200 	    mov r0,#TK_QSTR 
 509 036c 09F8010B 	    strb r0,[T2],#1
 510 0370 00B500F0 	    _CALL parse_quote
 510      8FF85DF8 
 510      04EB
 511 037a 36E0     	    b token_exit
ARM GAS  tinyBasic.s 			page 22


 512              	tick: 
 513              	// copy comment in pad 
 514 037c 4FF00B00 	    mov r0,#TK_CMD 
 515 0380 4FF03401 	    mov r1,#REM_IDX 
 516 0384 09F8010B 	    strb r0,[T2],#1 
 517 0388 09F8011B 	    strb r1,[T2],#1
 518 038c 08EB0300 	    add r0,T1,r3 
 519 0390 4946     	    mov r1,T2 
 520 0392 00B5FFF7 	    _CALL strcpy 
 520      FEFF5DF8 
 520      04EB
 521 039c 00B5FFF7 	    _CALL strlen 
 521      FEFF5DF8 
 521      04EB
 522 03a6 8144     	    add T2,r0
 523 03a8 09F10109 	    add T2,#1
 524 03ac 6368     	    ldr r3,[UPP,#COUNT]
 525 03ae 1CE0     	    b token_exit
 526              	store_r0: 
 527 03b0 09F8010B 	    strb r0,[T2],#1
 528 03b4 19E0     	    b token_exit 
 529              	try_number:
 530 03b6 A3F10103 	    sub r3,#1
 531 03ba 00B500F0 	    _CALL parse_int  
 531      4EF85DF8 
 531      04EB
 532 03c4 04D0     	    beq 1f 
 533 03c6 09F8010B 	    strb r0,[T2],#1 
 534 03ca 49F8041B 	    str r1,[T2],#4
 535 03ce 0CE0     	    b token_exit 
 536 03d0 00B500F0 	1:  _CALL parse_keyword 
 536      23F95DF8 
 536      04EB
 537 03da 0428     	    cmp r0,#TK_VAR 
 538 03dc 01D0     	    beq 2f 
 539 03de 3429     	    cmp r1,#REM_IDX 
 540 03e0 CCD0     	    beq tick
 541 03e2 09F8010B 	2:  strb r0,[T2],#1 
 542 03e6 09F8011B 	    strb r1,[T2],#1
 543              	token_exit:
 544 03ea 40BC     	    pop {r6}
 545 03ec 7047     	    _RET 
 546              	
 547              	/****************************
 548              	    is_special  
 549              	    check for non alphanum
 550              	    input:
 551              	      r0    character to scan 
 552              	    output:
 553              	      r0    character 
 554              	      r1    0 || index 
 555              	    use: 
 556              	      r1    scan index 
 557              	      r2    temp 
 558              	      r3    char_list 
 559              	*****************************/
 560 03ee 00BF     	    _FUNC is_special 
ARM GAS  tinyBasic.s 			page 23


 561 03f0 0CB4     	    push {r2,r3}
 562 03f2 4FF00101 	    mov r1,#1
 563 03f6 DFF8D43C 	    ldr r3,=char_list 
 564 03fa 5A5C     	1:  ldrb r2,[r3,r1]
 565 03fc 22B1     	    cbz r2,8f 
 566 03fe 8242     	    cmp r2,r0 
 567 0400 04D0     	    beq 9f 
 568 0402 01F10101 	    add r1,#1 
 569 0406 F8E7     	    b 1b
 570 0408 81EA0101 	8:  eor r1,r1     
 571 040c 0CBC     	9:  pop {r2,r3}
 572 040e 7047     	    _RET 
 573              	
 574              	char_list:
 575 0410 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 575      28293A23 
 575      2D2B2A2F 
 575      253D3C3E 
 575      5C3F2722 
 576              	
 577              	tok_single:
 578 0425 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 578      060701
 579 042c 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 579      212232
 580              	  
 581 0433 00       	  .p2align 2
 582              	token_ofs:
 583 0434 0000     	  .hword  0 // not found
 584              	  // TK_COMMA...TK_EQUAL , 13 
 585 0436 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 585      01000100 
 586 043e 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 586      01000100 
 587 0446 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 587      01000100 
 588 044e 0100     	  .hword  (single-tok_idx0)/2     
 589              	  // '<','>'
 590 0450 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 591              	  // '\'
 592 0454 1E00     	  .hword  (bkslash-tok_idx0)/2
 593              	  // '?' 
 594 0456 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 595              	  // "'"  
 596 0458 3C00     	  .hword  (tick-tok_idx0)/2 
 597              	  // '"' quote 
 598 045a 3200     	  .hword (quote-tok_idx0)/2
 599              	
 600              	  .p2align 2
 601              	
 602              	/****************************
 603              	    parse_int 
 604              	    parse an integer from text
 605              	    if not valid integer 
 606              	    r1 return *buffer else 
 607              	    *buffer is incremented after integer 
 608              	  input:
ARM GAS  tinyBasic.s 			page 24


 609              	    r0   *buffer 
 610              	  output:
 611              	    r0   TK_INTGR|TK_NONE
 612              	    r1   int|0   
 613              	  use:
 614              	    r3   tib index updated     
 615              	*****************************/
 616              	    _FUNC parse_int 
 617 045c 4FF00A01 	    mov r1,#10 // default base 
 618 0460 18F80300 	    ldrb r0,[T1,r3]
 619 0464 2428     	    cmp r0,'$' 
 620 0466 02D1     	    bne 2f 
 621 0468 4FF01001 	    mov r1,#16 // hexadecimal number 
 622 046c 03E0     	    b 3f  
 623 046e 2628     	2:  cmp r0,#'&' 
 624 0470 03D1     	    bne 4f
 625 0472 4FF00201 	    mov r1,#2 //binary number  
 626 0476 03F10103 	3:  add r3,#1
 627 047a 03EB0800 	4:  add r0,r3,T1 
 628 047e 00B5FFF7 	    _CALL atoi 
 628      FEFF5DF8 
 628      04EB
 629 0488 10B1     	    cbz r0,9f
 630 048a 0344     	    add r3,r0
 631 048c 4FF00F00 	    mov r0,#TK_INTGR
 632 0490 0040     	9:  ands r0,r0   
 633 0492 7047     	    _RET 
 634              	
 635              	/*********************************************
 636              	    parse_quote 
 637              	    parse quoted string 
 638              	    input: 
 639              	      r3 		tib index  
 640              	      T1    tib adr
 641              	      T2    insert point in pad  
 642              	    output:
 643              	      r0     token attribute 
 644              	      r1 		*str 
 645              	      r3     tib index updated    
 646              	      T2     updated 
 647              	      use:
 648              	*********************************************/
 649              	    _FUNC parse_quote
 650 0494 4DF8049D 	    push {T2} 
 651 0498 18F80300 	1:  ldrb r0,[T1,r3]
 652 049c 03F10103 	    add r3,#1 
 653 04a0 2228     	    cmp r0,#'"'
 654 04a2 09D0     	    beq 9f 
 655 04a4 5C28     	    cmp r0,#'\\'
 656 04a6 04D1     	    bne 2f 
 657 04a8 00B500F0 	    _CALL get_escaped_char 
 657      0DF85DF8 
 657      04EB
 658 04b2 09F8010B 	2:  strb r0,[T2],#1
 659 04b6 EFE7     	    b 1b 
 660 04b8 80EA0000 	9:  eor  r0,r0
 661 04bc 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 25


 662 04c0 4FF00200 	    mov r0,#TK_QSTR
 663 04c4 02BC     	    pop {r1}
 664 04c6 7047     	    _RET 
 665              	
 666              	/**********************************************
 667              	    get_escaped_char 
 668              	    convert "\c" in quoted string 
 669              	    input:
 670              	      r0 
 671              	      r3   index 
 672              	      T1   tib 
 673              	    output:
 674              	      r0   replacement char
 675              	      r3   updated 
 676              	    use:
 677              	      r1   *table 
 678              	      r2   temp 
 679              	**********************************************/
 680              	    _FUNC get_escaped_char 
 681 04c8 06B4     	    push {r1,r2}
 682 04ca 18F80300 	    ldrb r0,[T1,r3]
 683 04ce 03F10103 	    add r3,#1
 684 04d2 2228     	    cmp r0,#'"' 
 685 04d4 0BD0     	    beq 9f 
 686 04d6 DFF8F81B 	1:  ldr r1,=escaped 
 687 04da 11F8012B 	2:  ldrb r2,[r1],#1
 688 04de 12B1     	    cbz r2,6f 
 689 04e0 8242     	    cmp r2,r0 
 690 04e2 02D0     	    beq 7f 
 691 04e4 F9E7     	    b 2b
 692 04e6 A0F10702 	6:  sub r2,r0,#7     
 693 04ea 02F10700 	7:  add r0,r2,#7
 694 04ee 06BC     	9:  pop {r1,r2}   
 695 04f0 7047     	    _RET
 696              	
 697 04f2 6162746E 	escaped: .asciz "abtnvfr"
 697      76667200 
 698              	
 699              	/*********************************************
 700              	   skip character in TIB 
 701              	   input:
 702              	      r0    character to skip 
 703              	      r3    tib index 
 704              	      T1    tib adr
 705              	    output: 
 706              	      r3    updated
 707              	    use:
 708              	      r1     
 709              	**********************************************/   
 710 04fa 00BF     	    _FUNC skip
 711 04fc 02B4     	    push {r1} 
 712 04fe 18F80310 	1:  ldrb r1,[T1,r3]
 713 0502 8142     	    cmp r1,r0
 714 0504 02D1     	    bne 2f
 715 0506 03F10103 	    add r3,#1 
 716 050a F8E7     	    b 1b 
 717 050c 2360     	2:  str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 26


 718 050e 02BC     	    pop {r1}
 719 0510 7047     	    _RET
 720              	
 721              	/********************************************
 722              	    upper
 723              	    convert character in upper case 
 724              	    input: 
 725              	      r0   character 
 726              	    output:
 727              	      r0   upper case character 
 728              	*********************************************/
 729 0512 00BF     	    _FUNC upper 
 730 0514 6128     	    cmp r0,#'a' 
 731 0516 03DB     	    blt 9f 
 732 0518 7A28     	    cmp r0,#'z' 
 733 051a 01DC     	    bgt 9f 
 734 051c 00F05F00 	    and r0,#0x5f 
 735 0520 7047     	9:  _RET 
 736              	
 737              	/***************************************
 738              	   is_digit 
 739              	   check if char is decimal digit.
 740              	   convert to decimal digit.
 741              	   input:
 742              	      r0    char 
 743              	   output:
 744              	      r0    if !Z then converted digit 
 745              	      Z     0 true | 1 false  
 746              	***************************************/
 747 0522 00BF     	    _GBL_FUNC is_digit 
 748 0524 02B4     	    push {r1} 
 749 0526 81EA0101 	    eor r1,r1 
 750 052a 3028     	    cmp r0,#'0' 
 751 052c 05DB     	    blt 9f
 752 052e 3A28     	    cmp r0,'9'+1
 753 0530 03D5     	    bpl 9f 
 754 0532 4FF0FF31 	    mov r1,#-1
 755 0536 A0F13000 	    sub r0,#'0'  
 756              	9:   
 757 053a 0940     	    ands r1,r1
 758 053c 02BC     	    pop {r1} 
 759 053e 7047     	    _RET 
 760              	
 761              	/***************************************
 762              	    is_hex 
 763              	    check for hexadecimal digit 
 764              	    convert to hex digit.
 765              	    input:
 766              	      r0    
 767              	    output:
 768              	      r0     if !Z then converted digit 
 769              	      Z      0 true | 1 false         
 770              	***************************************/
 771              	    _FUNC is_hex 
 772 0540 02B4     	    push {r1}
 773 0542 4FF0FF31 	    mov r1,#-1 
 774 0546 4128     	    cmp r0,#'A' 
ARM GAS  tinyBasic.s 			page 27


 775 0548 01D4     	    bmi 1f 
 776 054a A0F10700 	    sub r0,#7 
 777 054e A0F13000 	1:  sub r0,#'0'
 778 0552 01D4     	    bmi 2f 
 779 0554 1028     	    cmp r0,#16
 780 0556 01D4     	    bmi 9f 
 781 0558 81EA0101 	2:  eor r1,r1  
 782 055c 0940     	9:  ands r1,r1 
 783 055e 02BC     	    pop {r1}
 784 0560 7047     	    _RET 
 785              	
 786              	/***************************************
 787              	    is_bit 
 788              	    check if char is '0'|'1' 
 789              	    convert to binary digit. 
 790              	    input:
 791              	      r0    
 792              	    output:
 793              	      r0     if !Z then converted digit 
 794              	      Z      0 true | 1 false         
 795              	***************************************/
 796 0562 00BF     	    _FUNC is_bit
 797 0564 02B4     	    push  {r1}
 798 0566 4FF0FF31 	    mov r1,#-1 
 799 056a A0F13000 	    sub r0,#'0' 
 800 056e 01D4     	    bmi 2f 
 801 0570 0229     	    cmp r1,#2
 802 0572 01D4     	    bmi 9f 
 803 0574 81EA0101 	2:  eor r1,r1 
 804 0578 0940     	9:  ands r1,r1 
 805 057a 02BC     	    pop {r1}
 806 057c 7047     	    _RET 
 807              	
 808              	/***************************************
 809              	    is_alpha 
 810              	    check if character is {a..z,A..Z} 
 811              	  input:
 812              	    r0   character 
 813              	  output: 
 814              	    r0    same character 
 815              	    Z    0 true | 1 false  
 816              	****************************************/
 817 057e 00BF     	    _FUNC is_alpha
 818 0580 02B4     	    push {r1} 
 819 0582 4FF0FF31 	    mov r1,#-1
 820 0586 4128     	    cmp r0,#'A' 
 821 0588 05D4     	    bmi 8f 
 822 058a 5B28     	    cmp r0,#'Z'+1 
 823 058c 05D4     	    bmi 9f
 824 058e 6128     	    cmp r0,#'a' 
 825 0590 01D4     	    bmi 8f 
 826 0592 7B28     	    cmp r0,#'z'+1
 827 0594 01D4     	    bmi 9f  
 828 0596 81EA0101 	8:  eor r1,r1  
 829 059a 0940     	9:  ands r1,r1 
 830 059c 02BC     	    pop {r1}
 831 059e 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 28


 832              	
 833              	/***************************************
 834              	    is_num 
 835              	    check if character is {0..9} 
 836              	  input:
 837              	    r0   character 
 838              	  output: 
 839              	    r0    same character 
 840              	    Z    0 true | 1 false  
 841              	****************************************/
 842              	    _FUNC is_num 
 843 05a0 02B4     	    push {r1} 
 844 05a2 4FF0FF31 	    mov r1,#-1 
 845 05a6 3028     	    cmp r0,#'0' 
 846 05a8 01DB     	    blt 8f 
 847 05aa 3A28     	    cmp r0,#'9'+1 
 848 05ac 01D4     	    bmi 9f 
 849 05ae 81EA0101 	8:  eor r1,r1  
 850 05b2 0940     	9:  ands r1,r1 
 851 05b4 02BC     	    pop {r1}
 852 05b6 7047     	    _RET 
 853              	
 854              	/*****************************************
 855              	    is_alnum 
 856              	    check if character is alphanumeric 
 857              	    input:
 858              	      r0 
 859              	    output:
 860              	      r0     same 
 861              	      Z      1 false | 0 true 
 862              	*****************************************/
 863              	    _FUNC is_alnum 
 864 05b8 00B5FFF7 	    _CALL is_alpha 
 864      E1FF5DF8 
 864      04EB
 865 05c2 04D1     	    bne 9f 
 866 05c4 00B5FFF7 	    _CALL is_num 
 866      EBFF5DF8 
 866      04EB
 867 05ce 7047     	9:  _RET 
 868              	
 869              	/******************************************
 870              	    atoi 
 871              	    convert ascii to integer 
 872              	    input:
 873              	      r0   *buffer 
 874              	      r1   base 
 875              	    output:
 876              	      r0   0 no integer found 
 877              	      r1   integer
 878              	    use:
 879              	      r2   base  
 880              	      T1   *buffer 
 881              	      T2   digit count  
 882              	******************************************/
 883              	    _GBL_FUNC atoi 
 884 05d0 2DE90403 	    push {r2,T1,T2}
ARM GAS  tinyBasic.s 			page 29


 885 05d4 8046     	    mov T1,r0  // *buffer 
 886 05d6 0A46     	    mov r2,r1  // base  
 887 05d8 81EA0101 	    eor r1,r1  // converted integer 
 888 05dc 89EA0909 	    eor T2,T2  // digit count 
 889 05e0 18F8010B 	1:  ldrb r0,[T1],#1
 890 05e4 00B5FFF7 	    _CALL upper 
 890      95FF5DF8 
 890      04EB
 891 05ee 3028     	    cmp r0,#'0'
 892 05f0 0FD4     	    bmi 8f
 893 05f2 3A28     	    cmp r0,#'9'+1 
 894 05f4 03D4     	    bmi 2f 
 895 05f6 4128     	    cmp r0,#'A'
 896 05f8 0BD4     	    bmi 8f 
 897 05fa A0F10700 	    sub r0,#7 
 898 05fe A0F13000 	2:  sub r0,#'0' 
 899 0602 9042     	    cmp r0,r2
 900 0604 05D5     	    bpl 8f  
 901 0606 02FB01F1 	    mul r1,r2 
 902 060a 0144     	    add r1,r0
 903 060c 09F10109 	    add T2,#1
 904 0610 E6E7     	    b 1b 
 905 0612 4846     	8:  mov r0,T2  
 906 0614 BDE80403 	    pop {r2,T1,T2}
 907 0618 7047     	    _RET 
 908              	
 909              	/*****************************************
 910              	    parse_keyword 
 911              	    parse work and ckeck if in dictionary 
 912              	    input:
 913              	      r0    first character 
 914              	      r3    tib index 
 915              	      t1    tib 
 916              	      t2    pad 
 917              	    output:
 918              	      r3    updated 
 919              	      t1    updated 
 920              	      t2    updated   
 921              	    use:
 922              	    
 923              	*****************************************/
 924 061a 00BF     	    _FUNC parse_keyword 
 925 061c 4DF8049D 	    push {T2}
 926 0620 18F80300 	    ldrb r0,[T1,r3]
 927 0624 03F10103 	    add r3,#1
 928 0628 00B3     	    cbz r0,2f 
 929 062a 00B5FFF7 	    _CALL upper 
 929      72FF5DF8 
 929      04EB
 930 0634 00B5FFF7 	    _CALL is_alpha 
 930      A3FF5DF8 
 930      04EB
 931 063e 00F03D81 	    beq syntax_error 
 932 0642 09F8010B 	    strb r0,[T2],#1
 933 0646 18F80300 	1:  ldrb r0,[T1,r3]
 934 064a 03F10103 	    add r3,#1 
 935 064e 68B1     	    cbz r0,2f 
ARM GAS  tinyBasic.s 			page 30


 936 0650 00B5FFF7 	    _CALL upper 
 936      5FFF5DF8 
 936      04EB
 937 065a 00B5FFF7 	    _CALL is_alnum
 937      ACFF5DF8 
 937      04EB
 938 0664 02D0     	    beq 2f 
 939 0666 09F8010B 	    strb r0,[T2],#1
 940 066a ECE7     	    b 1b 
 941 066c A3F10103 	2:  sub r3,#1
 942 0670 80EA0000 	    eor r0,r0
 943 0674 89F80000 	    strb r0,[T2] 
 944 0678 0098     	    ldr r0,[sp]
 945 067a 4178     	    ldrb r1,[r0,#1] 
 946 067c 29B9     	    cbnz r1,3f
 947 067e 0178     	    ldrb r1,[r0]
 948 0680 A1F14101 	    sub r1,#'A'
 949 0684 4FF00400 	    mov r0,#TK_VAR
 950 0688 08E0     	    b 9f 
 951 068a DFF8481A 	3:  ldr r1,=kword_dict  
 952 068e 00B500F0 	    _CALL search_dict 
 952      F4F95DF8 
 952      04EB
 953 0698 00B9     	    cbnz r0,9f 
 954 069a 0FE1     	    b syntax_error 
 955 069c 5DF8049B 	9:  pop {T2}
 956 06a0 7047     	    _RET 
 957              	
 958              	
 959              	/*******************
 960              	    DECOMPILER 
 961              	*******************/
 962              	
 963              	/********************************************
 964              	    cmd_name 
 965              	    search bytecode in dictionary and 
 966              	    return its name 
 967              	  input:
 968              	    r0    keyword bytecode 
 969              	  ouput:
 970              	    r0    name string 
 971              	  use:
 972              	    T1    link 
 973              	    T2    tmp 
 974              	*********************************************/
 975 06a2 00BF     	    _FUNC cmd_name 
 976 06a4 2DE90003 	    push {T1,T2}
 977 06a8 DFF8288A 	    ldr T1,=kword_dict 
 978 06ac 58F8089C 	1:  ldr T2,[T1,#-8]
 979 06b0 8145     	    cmp T2,r0 
 980 06b2 04D0     	    beq 2f 
 981 06b4 58F80C8C 	    ldr T1,[T1,#-12]
 982 06b8 B8F1000F 	    cmp T1,#0
 983 06bc F6D1     	    bne 1b  
 984 06be 4046     	2:  mov r0,T1 
 985 06c0 BDE80003 	    pop {T1,T2}
 986 06c4 7047     	    _RET
ARM GAS  tinyBasic.s 			page 31


 987              	
 988              	/*****************************
 989              	  decompile_line 
 990              	  detokenize BASIC line 
 991              	  input:
 992              	    r0  *token list 
 993              	    r1  *output buffer 
 994              	  output:
 995              	    r0  *output buffer (.asciz) 
 996              	  use:
 997              	    T1  *output buffer
 998              	    BPTR  *token list
 999              	    IN  offset in token list  
 1000              	******************************/
 1001 06c6 00BF     	    _GBL_FUNC decompile_line
 1002 06c8 2DE90201 	    push {r1,T1} 
 1003 06cc 8346     	    mov BPTR,r0 
 1004 06ce 4FF0000A 	    mov IN,#0
 1005 06d2 8846     	    mov T1,r1 
 1006 06d4 3BF80A00 	    ldrh r0,[BPTR,IN]
 1007 06d8 0AF1020A 	    add IN,#2 
 1008 06dc 4FF00A01 	    mov r1,#10 
 1009 06e0 00B5FFF7 	    _CALL itoa
 1009      FEFF5DF8 
 1009      04EB
 1010 06ea 4146     	    mov r1,T1
 1011 06ec 00B5FFF7 	    _CALL strcpy
 1011      FEFF5DF8 
 1011      04EB
 1012 06f6 4046     	    mov r0,T1 
 1013 06f8 00B5FFF7 	    _CALL strlen
 1013      FEFF5DF8 
 1013      04EB
 1014 0702 8044     	    add T1,r0 
 1015 0704 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1016 0708 0AF1010A 	    add IN,#1 
 1017 070c 6060     	    str r0,[UPP,#COUNT]
 1018              	decomp_loop:
 1019 070e 00B500F0 	    _CALL next_token
 1019      E2FA5DF8 
 1019      04EB
 1020 0718 0028     	    cmp r0,#TK_NONE 
 1021 071a 00F09B80 	    beq 9f  
 1022 071e 0F28     	    cmp r0,#TK_INTGR 
 1023 0720 15D1     	    bne 1f 
 1024 0722 0846     	    mov r0,r1 
 1025 0724 A169     	    ldr r1,[UPP,#BASE]
 1026 0726 00B5FFF7 	    _CALL itoa
 1026      FEFF5DF8 
 1026      04EB
 1027 0730 01B4     	    push {r0}
 1028 0732 4146     	    mov r1,T1 
 1029 0734 00B5FFF7 	    _CALL strcpy
 1029      FEFF5DF8 
 1029      04EB
 1030 073e 01BC     	    pop {r0} 
 1031 0740 00B5FFF7 	    _CALL strlen
ARM GAS  tinyBasic.s 			page 32


 1031      FEFF5DF8 
 1031      04EB
 1032 074a 8044     	    add T1,r0 
 1033 074c DFE7     	    b decomp_loop 
 1034 074e 0428     	1:  cmp r0,#TK_VAR 
 1035 0750 04D1     	    bne 2f 
 1036 0752 01F14100 	    add r0,r1,'A'
 1037 0756 08F8010B 	    strb r0,[T1],#1 
 1038 075a D8E7     	    b decomp_loop 
 1039 075c 0328     	2:  cmp r0,#TK_CHAR 
 1040 075e 0AD1     	    bne 3f 
 1041 0760 4FF05C00 	    mov r0,#'\\'
 1042 0764 08F8010B 	    strb r0,[T1],#1
 1043 0768 08F8011B 	    strb r1,[T1],#1
 1044 076c 4FF02000 	    mov r0,#SPACE 
 1045 0770 08F8010B 	    strb r0,[T1],#1
 1046 0774 CBE7     	    b decomp_loop 
 1047 0776 0228     	3:  cmp r0,#TK_QSTR 
 1048 0778 17D1     	    bne 4f 
 1049 077a 4FF02200 	    mov r0,#'"'
 1050 077e 08F8010B 	    strb r0,[T1],#1 
 1051 0782 0846     	    mov r0,r1
 1052 0784 02B4     	    push {r1}
 1053 0786 4146     	    mov r1,T1  
 1054 0788 00B5FFF7 	    _CALL strcpy
 1054      FEFF5DF8 
 1054      04EB
 1055 0792 01BC     	    pop {r0}
 1056 0794 00B5FFF7 	    _CALL strlen 
 1056      FEFF5DF8 
 1056      04EB
 1057 079e 8044     	    add T1,r0 
 1058 07a0 4FF02200 	    mov r0,#'"'
 1059 07a4 08F8010B 	    strb r0,[T1],#1 
 1060 07a8 B1E7     	    b decomp_loop
 1061 07aa 0B28     	4:  cmp r0,#TK_CMD
 1062 07ac 3AD4     	    bmi 5f 
 1063 07ae 0F28     	    cmp r0,#TK_INTGR 
 1064 07b0 38D5     	    bpl 5f
 1065 07b2 4FF02000 	    mov r0,#SPACE 
 1066 07b6 08F8010B 	    strb r0,[T1],#1  
 1067 07ba 0846     	    mov r0,r1
 1068 07bc 3128     	    cmp r0,#PRT_IDX 
 1069 07be 04D1     	    bne 1f  
 1070 07c0 4FF03F00 	    mov r0,#'?'
 1071 07c4 08F8010B 	    strb r0,[T1],#1 
 1072 07c8 27E0     	    b 3f 
 1073 07ca 3428     	1:  cmp r0,#REM_IDX
 1074 07cc 12D1     	    bne 1f
 1075 07ce 4FF02700 	    mov r0,#'\''
 1076 07d2 08F8010B 	    strb r0,[T1],#1 
 1077 07d6 0BEB0A00 	    add r0,BPTR,IN
 1078 07da 4146     	    mov r1,T1   
 1079 07dc 00B5FFF7 	    _CALL strcpy
 1079      FEFF5DF8 
 1079      04EB
 1080 07e6 80EA0000 	    eor r0,r0 
ARM GAS  tinyBasic.s 			page 33


 1081 07ea 88F80000 	    strb r0,[T1]  
 1082 07ee D4F804A0 	    ldr IN,[UPP,#COUNT]
 1083 07f2 2FE0     	    b 9f 
 1084 07f4 00B5FFF7 	1:  _CALL cmd_name
 1084      55FF5DF8 
 1084      04EB
 1085 07fe 01B4     	2:  push {r0}
 1086 0800 4146     	    mov r1,T1 
 1087 0802 00B5FFF7 	    _CALL strcpy 
 1087      FEFF5DF8 
 1087      04EB
 1088 080c 01BC     	    pop {r0}
 1089 080e 00B5FFF7 	    _CALL strlen 
 1089      FEFF5DF8 
 1089      04EB
 1090 0818 8044     	    add T1,r0 
 1091 081a 4FF02000 	3:  mov r0,#SPACE 
 1092 081e 08F8010B 	    strb r0,[T1],#1 
 1093 0822 74E7     	    b decomp_loop
 1094 0824 01B4     	5:  push {r0}
 1095 0826 DFF8B018 	    ldr r1,=single_char 
 1096 082a 085C     	    ldrb r0,[r1,r0]
 1097 082c 02BC     	    pop {r1}
 1098 082e 10B1     	    cbz r0,6f 
 1099 0830 08F8010B 	    strb r0,[T1],#1 
 1100 0834 6BE7     	    b decomp_loop
 1101 0836 3329     	6:  cmp r1,#TK_GE 
 1102 0838 02D1     	    bne 7f 
 1103 083a DFF8A008 	    ldr r0,=ge_str
 1104 083e DEE7     	    b 2b 
 1105 0840 3629     	7:  cmp r1,#TK_LE 
 1106 0842 02D1     	    bne 8f
 1107 0844 DFF89808 	    ldr r0,=le_str
 1108 0848 D9E7     	    b 2b
 1109 084a 3529     	8:  cmp r1,#TK_NE 
 1110 084c 02D1     	    bne 9f 
 1111 084e DFF89408 	    ldr r0,=ne_str 
 1112 0852 D4E7     	    b 2b 
 1113 0854 80EA0000 	9:  eor r0,r0 
 1114 0858 88F80000 	    strb r0,[T1]
 1115 085c BDE80201 	    pop {r1,T1}
 1116 0860 0846     	    mov r0,r1 
 1117 0862 7047     	    _RET 
 1118              	
 1119 0864 3E3D00   	ge_str: .asciz ">="
 1120 0867 3C3D00   	le_str: .asciz "<="
 1121 086a 3C3E00   	ne_str: .asciz "<>"
 1122              	
 1123              	single_char:
 1124 086d 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1124      00402829 
 1124      2C3B23
 1125 0878 00000000 	  .space 5
 1125      00
 1126 087d 2B2D     	  .byte '+', '-'
 1127 087f 00000000 	  .space 14
 1127      00000000 
ARM GAS  tinyBasic.s 			page 34


 1127      00000000 
 1127      0000
 1128 088d 2A2F25   	  .byte '*', '/', '%'
 1129 0890 00000000 	  .space 14
 1129      00000000 
 1129      00000000 
 1129      0000
 1130 089e 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1130      0000
 1131              	
 1132              	
 1133              	/**********************************
 1134              	  modulo 
 1135              	  compute r0 mod r1
 1136              	  input:
 1137              	    r0   dividend
 1138              	    r1   divisor 
 1139              	  output:
 1140              	    r0   TK_INTGR 
 1141              	    r1   r0 mod r1 
 1142              	*********************************/
 1143              	    _GBL_FUNC modulo 
 1144 08a4 01B4     	    push {r0}
 1145 08a6 B0FBF1F0 	    udiv r0,r1 
 1146 08aa 01FB00F0 	    mul  r0,r1 
 1147 08ae 02BC     	    pop {r1}
 1148 08b0 A1EB0001 	    sub r1,r0
 1149 08b4 4FF00F00 	    mov r0,#TK_INTGR
 1150 08b8 7047     	    _RET 
 1151              	
 1152              	/**********************************
 1153              	      BASIC commands 
 1154              	**********************************/
 1155              	
 1156              	/*********************************
 1157              	    syntax_error 
 1158              	    display syntax error message and 
 1159              	    abort program 
 1160              	  input:
 1161              	    none  
 1162              	  output: 
 1163              	    none 
 1164              	  use:
 1165              	*********************************/
 1166 08ba 00BF     	    _FUNC syntax_error 
 1167 08bc 4FF00200 	    mov r0,#ERR_SYNTAX
 1168 08c0 00E0     	    b tb_error 
 1169              	
 1170              	/*********************************
 1171              	    tb_error 
 1172              	    display BASIC error and 
 1173              	    abort program. 
 1174              	  input:
 1175              	    r0    error code   
 1176              	  output: 
 1177              	    none 
 1178              	  use:
ARM GAS  tinyBasic.s 			page 35


 1179              	    r1    temp 
 1180              	*********************************/
 1181 08c2 00BF     	    _FUNC tb_error 
 1182 08c4 216C     	    ldr r1,[UPP,#FLAGS]
 1183 08c6 11F0200F 	    tst r1,#FCOMP
 1184 08ca 57D1     	    bne compile_error
 1185              	rt_error:
 1186 08cc 01B4     	    push {r0}
 1187 08ce DFF81808 	    ldr r0,=rt_error_msg 
 1188 08d2 00B5FFF7 	    _CALL uart_puts 
 1188      FEFF5DF8 
 1188      04EB
 1189 08dc 01BC     	    pop {r0}
 1190 08de DFF80C18 	    ldr r1,=err_msg  
 1191 08e2 4FEA8000 	    lsl r0,#2 
 1192 08e6 0858     	    ldr r0,[r1,r0]
 1193 08e8 00B5FFF7 	    _CALL uart_puts
 1193      FEFF5DF8 
 1193      04EB
 1194              	// print line number     
 1195 08f2 D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1196 08f6 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1197 08fa DFF8F407 	    ldr r0,=lineno_msg 
 1198 08fe 00B5FFF7 	    _CALL uart_puts
 1198      FEFF5DF8 
 1198      04EB
 1199 0908 BBF80000 	    ldrh r0,[BPTR]
 1200 090c 4FF00A01 	    mov r1,#10
 1201 0910 00B5FFF7 	    _CALL print_int 
 1201      FEFF5DF8 
 1201      04EB
 1202              	// line address 
 1203 091a DFF8D807 	    ldr r0,=line_adr_msg 
 1204 091e 00B5FFF7 	    _CALL uart_puts 
 1204      FEFF5DF8 
 1204      04EB
 1205 0928 5846     	    mov r0,BPTR 
 1206 092a 4FF01001 	    MOV r1,#16
 1207 092e 00B5FFF7 	    _CALL print_int
 1207      FEFF5DF8 
 1207      04EB
 1208              	// print error offset on line      
 1209 0938 DFF8BC07 	    ldr r0,=token_at_msg 
 1210 093c 00B5FFF7 	    _CALL uart_puts 
 1210      FEFF5DF8 
 1210      04EB
 1211 0946 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1212 094a 5046     	    mov r0,IN 
 1213 094c 4FF01001 	    mov r1,#16 
 1214 0950 00B5FFF7 	    _CALL print_int
 1214      FEFF5DF8 
 1214      04EB
 1215 095a 4FF00D00 	    mov r0,#CR 
 1216 095e 00B5FFF7 	    _CALL uart_putc
 1216      FEFF5DF8 
 1216      04EB
 1217              	// dump tokenize line 
ARM GAS  tinyBasic.s 			page 36


 1218 0968 5846     	    mov r0,BPTR
 1219 096a 8278     	    ldrb r2,[r0,#2]
 1220 096c 04B4     	    push {r2}
 1221 096e 00B500F0 	    _CALL dump01 
 1221      69F95DF8 
 1221      04EB
 1222 0978 FFF7FEBF 	    b warm_start 
 1223              	compile_error:
 1224 097c DFF86C17 	    ldr r1,=err_msg 
 1225 0980 4FEA8000 	    lsl r0,#2 
 1226 0984 0858     	    ldr r0,[r1,r0]
 1227 0986 00B5FFF7 	    _CALL uart_puts
 1227      FEFF5DF8 
 1227      04EB
 1228 0990 A068     	    ldr r0,[UPP,#BASICPTR]
 1229 0992 00B5FFF7 	    _CALL uart_puts
 1229      FEFF5DF8 
 1229      04EB
 1230 099c 4FF00D00 	    mov r0,#CR 
 1231 09a0 00B5FFF7 	    _CALL uart_putc  
 1231      FEFF5DF8 
 1231      04EB
 1232 09aa 2068     	    ldr r0,[UPP,#IN_SAVED]
 1233 09ac 00B5FFF7 	    _CALL spaces 
 1233      FEFF5DF8 
 1233      04EB
 1234 09b6 4FF05E00 	    mov r0,#'^' 
 1235 09ba 00B5FFF7 	    _CALL uart_putc
 1235      FEFF5DF8 
 1235      04EB
 1236 09c4 4FF00D00 	    mov r0,#CR 
 1237 09c8 00B5FFF7 	    _CALL uart_putc   
 1237      FEFF5DF8 
 1237      04EB
 1238 09d2 FFF7FEBF 	    b  warm_start  
 1239              	    
 1240 09d6 0A52756E 	rt_error_msg: .asciz "\nRuntime error\n"
 1240      74696D65 
 1240      20657272 
 1240      6F720A00 
 1241 09e6 6C696E65 	lineno_msg:   .asciz "line: "
 1241      3A2000
 1242 09ed 2C616464 	line_adr_msg:   .asciz ",address: "
 1242      72657373 
 1242      3A2000
 1243 09f8 2C6F6666 	token_at_msg: .asciz ",offset: "
 1243      7365743A 
 1243      2000
 1244              	
 1245              	err_msg:
 1246 0a02 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1246      00000000 
 1246      0D000000 
 1246      1B000000 
 1246      34000000 
 1247 0a1a 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1247      6F000000 
ARM GAS  tinyBasic.s 			page 37


 1247      89000000 
 1247      9A000000 
 1247      AB000000 
 1248 0a2e B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1248      EA000000 
 1248      FA000000 
 1248      0E010000 
 1248      21010000 
 1249 0a42 2E010000 	   .word err_cant_prog 
 1250              	
 1251              	    .section .rodata.tb_error 
 1252              	
 1253 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1253      72792066 
 1253      756C6C0A 
 1253      00
 1254 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1254      61782065 
 1254      72726F72 
 1254      0A00
 1255 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1255      206F7065 
 1255      72617469 
 1255      6F6E206F 
 1255      76657266 
 1256 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1256      73696F6E 
 1256      20627920 
 1256      300A00
 1257 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1257      6C696420 
 1257      6C696E65 
 1257      206E756D 
 1257      6265722E 
 1258 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1258      74696D65 
 1258      206F6E6C 
 1258      79207573 
 1258      6167652E 
 1259 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1259      616E6420 
 1259      6C696E65 
 1259      206F6E6C 
 1259      79207573 
 1260 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1260      69636174 
 1260      65206E61 
 1260      6D652E0A 
 1260      00
 1261 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1261      206E6F74 
 1261      20666F75 
 1261      6E642E0A 
 1261      00
 1262 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1262      76616C75 
 1262      652E0A00 
ARM GAS  tinyBasic.s 			page 38


 1263 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1263      20696E20 
 1263      65787465 
 1263      6E646564 
 1263      206D656D 
 1264 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1264      61746120 
 1264      666F756E 
 1264      642E0A00 
 1265 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1265      726F6772 
 1265      616D2069 
 1265      6E205241 
 1265      4D210A00 
 1266 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1266      20737973 
 1266      74656D20 
 1266      66756C6C 
 1266      2E0A00
 1267 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1267      65722066 
 1267      756C6C0A 
 1267      00
 1268 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1268      74206D6F 
 1268      64696679 
 1268      2070726F 
 1268      6772616D 
 1269              	
 1270 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1270      2074696D 
 1270      65206572 
 1270      726F722C 
 1270      2000
 1271 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1271      70696C65 
 1271      20657272 
 1271      6F722C20 
 1271      00
 1272 018d 6C617374 	tk_id: .asciz "last token id: "
 1272      20746F6B 
 1272      656E2069 
 1272      643A2000 
 1273              	
 1274              	
 1275              	    .section  .text , "ax", %progbits 
 1276              	
 1277              	/*********************************
 1278              	   skip_line 
 1279              	   data and remark line are skipped
 1280              	   by the interpreter 
 1281              	***********************************/
 1282 0a46 00BF     	    _FUNC skip_line 
 1283 0a48 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1284 0a4c 7047     	    _RET 
 1285              	
 1286              	
ARM GAS  tinyBasic.s 			page 39


 1287              	/*********************************
 1288              	   BASIC: BTGL adr, mask   
 1289              	   toggle bits [adr]=[adr]^mask  
 1290              	   input:
 1291              	     r0    adr 
 1292              	     r1    mask 
 1293              	    output;
 1294              	      none 
 1295              	    use:
 1296              	      T1   temp
 1297              	      T2   temp  
 1298              	*******************************/     
 1299 0a4e 00BF     	    _FUNC BTGL 
 1300              	
 1301 0a50 7047     	    _RET 
 1302              	
 1303              	/***************************************
 1304              	   kword_cmp
 1305              	   compare keyword to dict entry
 1306              	  input:
 1307              	    r0  keyword 
 1308              	    r1  dict entry 
 1309              	    r2  character count 
 1310              	  output:
 1311              	    r0  0 not same | -1 same 
 1312              	  use:
 1313              	    r6   result  
 1314              	    T1   char 1
 1315              	    T2   char 2
 1316              	**************************************/   
 1317 0a52 00BF     	    _FUNC kword_cmp 
 1318 0a54 2DE94003 	    push {r6,T1,T2}
 1319 0a58 4FF0FF36 	    mov r6,#-1 
 1320 0a5c 4AB1     	1:  cbz r2,9f       
 1321 0a5e 10F8018B 	    ldrb T1,[r0],#1
 1322 0a62 11F8019B 	    ldrb T2,[r1],#1
 1323 0a66 A2F10102 	    sub r2,#1
 1324 0a6a C845     	    cmp T1,T2
 1325 0a6c F6D0     	    beq 1b 
 1326 0a6e 86EA0606 	    eor r6,r6  
 1327 0a72 3046     	9:  mov r0,r6
 1328 0a74 BDE84003 	    pop {r6,T1,T2}
 1329 0a78 7047     	    _RET 
 1330              	
 1331              	/***********************************************
 1332              	    search_dict 
 1333              	    search keyword in dictionary
 1334              	   input:
 1335              	  	 r0   keyword 
 1336              	     r1		dictionary first name field address  
 1337              	   output:
 1338              	     r0 		token attribute 
 1339              	     r1		  cmd_index if r0!=TK_NONE  
 1340              	   use:
 1341              	     r3   length keyword 
 1342              	     T1   keyword
 1343              	     T2   link  
ARM GAS  tinyBasic.s 			page 40


 1344              	**********************************************/
 1345 0a7a 00BF     	  _FUNC search_dict
 1346 0a7c 2DE90C03 	  push {r2,r3,T1,T2}
 1347 0a80 8046     	  mov T1,r0 
 1348 0a82 00B5FFF7 	  _CALL strlen 
 1348      FEFF5DF8 
 1348      04EB
 1349 0a8c 0346     	  mov r3,r0  
 1350              	1:  
 1351 0a8e 8946     	   mov T2,r1  // keep for linking   
 1352 0a90 0878     	   ldrb r0,[r1] 
 1353 0a92 78B1     	   cbz r0,9f // null byte, end of dictionary
 1354 0a94 4046     	   mov r0,T1
 1355 0a96 1A46     	   mov r2,r3   
 1356 0a98 00B5FFF7 	   _CALL kword_cmp  
 1356      DBFF5DF8 
 1356      04EB
 1357 0aa2 18B9     	   cbnz r0,2f 
 1358 0aa4 4946     	   mov r1,T2
 1359 0aa6 51F80C1C 	   ldr r1,[r1,#-12]
 1360 0aaa F0E7     	   b 1b   
 1361              	2: // found
 1362 0aac 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1363 0ab0 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1364 0ab4 BDE80C03 	9: pop {r2,r3,T1,T2}
 1365 0ab8 7047     	   _RET 
 1366              	
 1367              	
 1368              	/**************************
 1369              	    INTERPRETER 
 1370              	*************************/
 1371              	
 1372              	/*********************************
 1373              	   cold_start 
 1374              	   initialize BASIC interpreter 
 1375              	   never leave 
 1376              	   input:
 1377              	     none 
 1378              	   output:
 1379              	    none 
 1380              	*********************************/
 1381              	  .type cold_start, %function 
 1382              	  .global cold_start 
 1383              	cold_start: 
 1384 0aba 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1384      C2F20004 
 1385 0ac2 DFF84800 	    ldr r0,src_addr 
 1386 0ac6 DFF84810 	    ldr r1,dest_addr
 1387 0aca 0968     	    ldr r1,[r1] 
 1388 0acc 0C44     	    add UPP,r1 // system variables base address   
 1389              	// clear RAM
 1390 0ace 2046     	    mov r0,UPP  
 1391 0ad0 DFF85C11 	    ldr r1,tib 
 1392 0ad4 82EA0202 	    eor r2,r2 
 1393 0ad8 40F8042B 	1:  str r2,[r0],#4 
 1394 0adc 8842     	    cmp r0,r1 
 1395 0ade FBD4     	    bmi 1b 
ARM GAS  tinyBasic.s 			page 41


 1396              	//copy initialized system variables to ram 
 1397 0ae0 DFF82800 	    ldr r0,src_addr 
 1398 0ae4 2146     	    mov r1,UPP 
 1399 0ae6 DFF82C20 	    ldr r2,sysvar_size
 1400 0aea 00B5FFF7 	    _CALL cmove
 1400      FEFF5DF8 
 1400      04EB
 1401 0af4 00B500F0 	    _CALL prt_version
 1401      0FF85DF8 
 1401      04EB
 1402 0afe 00B500F0 	    _CALL clear_basic  
 1402      5EF85DF8 
 1402      04EB
 1403 0b08 FFF7FEBF 	    b warm_start    
 1404              	src_addr:
 1405 0b0c 00000000 	  .word uzero
 1406              	dest_addr:
 1407 0b10 00000000 	  .word vectors_size
 1408 0b14 CC000000 	sysvar_size: .word ulast-uzero 
 1409              	
 1410              	/************************************
 1411              	    print firmware version 
 1412              	    input: 
 1413              	      none 
 1414              	    output:
 1415              	      none 
 1416              	    use:
 1417              	      r0 
 1418              	***********************************/
 1419              	    _FUNC prt_version 
 1420 0b18 DFF8E005 	    ldr r0,=version_msg 
 1421 0b1c 00B5FFF7 	    _CALL uart_puts
 1421      FEFF5DF8 
 1421      04EB
 1422 0b26 9FF87800 	    ldrb r0,version 
 1423 0b2a 4FEA1010 	    lsr r0,#4 
 1424 0b2e 00F13000 	    add r0,#'0' 
 1425 0b32 3A28     	    cmp r0,#'9'+1 
 1426 0b34 01D4     	    bmi 1f 
 1427 0b36 00F10700 	    add r0,#7 
 1428              	  1:
 1429 0b3a 00B5FFF7 	    _CALL uart_putc 
 1429      FEFF5DF8 
 1429      04EB
 1430 0b44 4FF02E00 	    mov r0,#'. 
 1431 0b48 00B5FFF7 	    _CALL uart_putc 
 1431      FEFF5DF8 
 1431      04EB
 1432 0b52 9FF84C00 	    ldrb r0,version 
 1433 0b56 00F00F00 	    and r0,#15 
 1434 0b5a 00F13000 	    add r0,'0' 
 1435 0b5e 3A28     	    cmp r0,#'9'+1 
 1436 0b60 01D4     	    bmi 1f 
 1437 0b62 00F10700 	    add r0,#7
 1438              	  1: 
 1439 0b66 00B5FFF7 	    _CALL uart_putc 
 1439      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 42


 1439      04EB
 1440 0b70 4FF00D00 	    mov r0,#CR 
 1441 0b74 00B5FFF7 	    _CALL uart_putc 
 1441      FEFF5DF8 
 1441      04EB
 1442 0b7e 7047     	    _RET  
 1443              	version_msg:
 1444 0b80 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1444      65207069 
 1444      6C6C2074 
 1444      696E7920 
 1444      42415349 
 1445              	version:
 1446 0ba0 10       	    .byte 0x10 
 1447 0ba1 0000BF   	    .p2align 2 
 1448              	
 1449              	
 1450              	/*****************************
 1451              	    clear_vars 
 1452              	    initialize variables to 0
 1453              	  input:
 1454              	    none 
 1455              	  output:
 1456              	    none 
 1457              	  use:
 1458              	    r0,r1,r2 
 1459              	*****************************/
 1460              	    _FUNC clear_vars 
 1461 0ba4 07B4     	    push {r0,r1,r2}
 1462 0ba6 80EA0000 	    eor r0,r0 
 1463 0baa 04F16001 	    add r1,UPP,#VARS
 1464 0bae 4FF01A02 	    mov r2,#26
 1465 0bb2 41F8040B 	1:  str r0,[r1],#4 
 1466 0bb6 013A     	    subs r2,#1
 1467 0bb8 FBD1     	    bne 1b  
 1468 0bba 07BC     	    pop {r0,r1,r2}
 1469 0bbc 7047     	    _RET 
 1470              	
 1471              	/*****************************
 1472              	   clear_basic 
 1473              	   reset BASIC system variables 
 1474              	   and clear variables and RAM 
 1475              	*****************************/
 1476 0bbe 00BF     	    _FUNC clear_basic
 1477 0bc0 80EA0000 	  	eor r0,r0
 1478 0bc4 2064     	    str r0,[UPP,#FLAGS] 
 1479 0bc6 6060     	    str r0,[UPP,#COUNT]
 1480 0bc8 2060     	    str r0,[UPP,#IN_SAVED]
 1481 0bca A060     	    str r0,[UPP,#BASICPTR]
 1482 0bcc E060     	    str r0,[UPP,#DATAPTR]
 1483 0bce 2061     	    str r0,[UPP,#DATA]
 1484 0bd0 6061     	    str r0,[UPP,#DATALEN]
 1485 0bd2 04F1CC00 	    add r0,UPP,#BASIC_START 
 1486 0bd6 00F11000 	    add r0,#16 
 1487 0bda 6FF00F01 	    mvn r1,#15
 1488 0bde 00EA0100 	    and r0,r1 
 1489 0be2 2063     	    str r0,[UPP,#TXTBGN]
ARM GAS  tinyBasic.s 			page 43


 1490 0be4 6063     	    str r0,[UPP,#TXTEND]
 1491 0be6 00B5FFF7 	    _CALL clear_vars
 1491      DCFF5DF8 
 1491      04EB
 1492 0bf0 206B     	    ldr r0,[UPP,#TXTBGN]
 1493 0bf2 DFF83C10 	    ldr r1,tib 
 1494 0bf6 82EA0202 	    eor r2,r2 
 1495 0bfa 40F8042B 	1:  str r2,[r0],#4
 1496 0bfe 8842     	    cmp r0,r1 
 1497 0c00 FBD4     	    bmi 1b 
 1498 0c02 7047     	    _RET  
 1499              	
 1500              	/***********************************
 1501              	   warm_init 
 1502              	   initialize interpreter context 
 1503              	  input:
 1504              	    none
 1505              	  output:
 1506              	    none 
 1507              	  use:
 1508              	    r0 
 1509              	***********************************/
 1510              	warm_init:
 1511              	// reset data stack       
 1512 0c04 DFF824C0 	    ldr DP,dstack 
 1513 0c08 4FF0000A 	    mov IN,#0 // BASIC line index 
 1514 0c0c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1515 0c10 80EA0000 	    eor r0,r0 
 1516 0c14 6060     	    str r0,[UPP,#COUNT]  
 1517 0c16 2064     	    str r0,[UPP,#FLAGS]
 1518 0c18 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1519 0c1a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1520 0c1e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1521 0c20 4FF00A00 	    mov r0,#10 // default base decimal 
 1522 0c24 A061     	    str r0,[UPP,#BASE]
 1523 0c26 7047     	    _RET  
 1524              	
 1525 0c28 00000000 	mstack: .word _mstack 
 1526 0c2c 00000000 	dstack: .word _dstack 
 1527 0c30 00000000 	tib: .word _tib 
 1528 0c34 00000000 	pad: .word _pad 
 1529 0c38 FCFFFFFF 	array: .word _pad - 4 
 1530 0c3c 0A524541 	ready: .asciz "\nREADY" 
 1530      445900
 1531              	
 1532              	/**********************************
 1533              	    warm_start 
 1534              	    start BASIC interpreter doesn't  
 1535              	    reset variables and code space 
 1536              	  input:
 1537              	    none 
 1538              	  output:
 1539              	    none 
 1540              	**********************************/
 1541 0c43 00       	    _GBL_FUNC warm_start 
 1542              	// initialise parameters stack
 1543 0c44 FFF7DEFF 	    bl warm_init
ARM GAS  tinyBasic.s 			page 44


 1544              	// reset main stack 
 1545 0c48 5FF82400 	    ldr r0,mstack
 1546 0c4c 8546     	    mov sp,r0 
 1547 0c4e DFF8B004 	    ldr r0,=ready 
 1548 0c52 00B5FFF7 	    _CALL uart_puts 
 1548      FEFF5DF8 
 1548      04EB
 1549              	// fall in cmd_line 
 1550              	
 1551              	/**********************************
 1552              	   cmd_line 
 1553              	   shell command line 
 1554              	   input:
 1555              	      none 
 1556              	   output:
 1557              	      none 
 1558              	   use:
 1559              	
 1560              	***********************************/
 1561              	    _FUNC cmd_line 
 1562 0c5c 4FF00D00 	    mov r0,#CR 
 1563 0c60 00B5FFF7 	    _CALL uart_putc 
 1563      FEFF5DF8 
 1563      04EB
 1564 0c6a 5FF83C00 	1:  ldr r0,tib
 1565 0c6e 4FF05001 	    mov r1,#TIB_SIZE 
 1566 0c72 00B5FFF7 	    _CALL readln 
 1566      FEFF5DF8 
 1566      04EB
 1567 0c7c 0940     	    ands r1,r1 // empty line 
 1568 0c7e F4D0     	    beq 1b 
 1569 0c80 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1569      CFFA5DF8 
 1569      04EB
 1570 0c8a EED0     	    beq 1b  // tokens stored in text area 
 1571              	// interpret tokenized line 
 1572              	interpreter:
 1573 0c8c 00B500F0 	  _CALL next_token 
 1573      23F85DF8 
 1573      04EB
 1574 0c96 0028     	  cmp r0,#TK_NONE 
 1575 0c98 F8D0     	  beq interpreter    
 1576 0c9a 0B28     	  cmp r0,#TK_CMD 
 1577 0c9c 03D1     	  bne 2f
 1578 0c9e 0846     	  mov r0,r1 
 1579 0ca0 00F014F8 	  bl execute  
 1580 0ca4 F2E7     	  b interpreter   
 1581              	2: 
 1582 0ca6 0428     	  cmp r0,#TK_VAR 
 1583 0ca8 05D1     	  bne 3f 
 1584 0caa 00B500F0 	  _CALL let_var 
 1584      FFFA5DF8 
 1584      04EB
 1585 0cb4 EAE7     	  b interpreter 
 1586              	3: 
 1587 0cb6 0528     	  cmp r0,#TK_ARRAY 
 1588 0cb8 05D1     	  bne 4f
ARM GAS  tinyBasic.s 			page 45


 1589 0cba 00B500F0 	  _CALL let_array 
 1589      05FB5DF8 
 1589      04EB
 1590 0cc4 E2E7     	  b interpreter
 1591              	4: 
 1592 0cc6 0128     	  cmp r0,#TK_COLON
 1593 0cc8 E0D0     	  beq interpreter
 1594 0cca F7E5     	  b syntax_error
 1595              	
 1596              	/*****************************
 1597              	    execute 
 1598              	    execute a BASIC routine from 
 1599              	    its token value 
 1600              	  input:
 1601              	    r0  BASIC SUB|FUNC token  
 1602              	  output: 
 1603              	    depend on SUB|FUNc
 1604              	*****************************/
 1605              	    _FUNC execute 
 1606 0ccc DFF83414 	    ldr r1,=fn_table 
 1607 0cd0 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1608 0cd4 0047     	    bx r0 
 1609              	
 1610              	/*************************************
 1611              	  next_token 
 1612              	  extract next token from token list 
 1613              	  input:
 1614              	    none 
 1615              	  output:
 1616              	    r0    token attribute
 1617              	    r1    token value if there is one 
 1618              	  use:
 1619              	    T1    exit token type  
 1620              	****************************/
 1621 0cd6 00BF     	    _FUNC next_token 
 1622 0cd8 4DF8048D 	    push {T1}
 1623 0cdc 88EA0808 	    eor T1,T1 // TK_NONE 
 1624 0ce0 6068     	    ldr r0,[UPP,#COUNT]
 1625 0ce2 8245     	    cmp IN,r0 
 1626 0ce4 11D4     	    bmi 0f
 1627              	new_line:
 1628 0ce6 BBF80010 	    ldrh r1,[BPTR] // line #
 1629 0cea 09B9     	    cbnz r1, end_of_line  // command line
 1630 0cec FFF7FEBF 	    b warm_start
 1631              	end_of_line:        
 1632 0cf0 8344     	    add BPTR,r0 // next line 
 1633 0cf2 606B     	    ldr r0,[UPP,#TXTEND]
 1634 0cf4 8345     	    cmp BPTR,r0 
 1635 0cf6 7FF5FEAF 	    bpl warm_start // end of program
 1636 0cfa 9BF80200 	    ldrb r0,[BPTR,#2]
 1637 0cfe 6060     	    str r0,[UPP,#COUNT] 
 1638 0d00 4FF0030A 	    mov IN,#3
 1639 0d04 4FF00100 	    mov r0,#TK_COLON 
 1640 0d08 2AE0     	    b 9f    
 1641              	0: 
 1642 0d0a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1643 0d0e C4F808B0 	    str BPTR,[UPP,#BASICPTR]
ARM GAS  tinyBasic.s 			page 46


 1644 0d12 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1645 0d16 0AF1010A 	    add IN,#1  
 1646 0d1a 8046     	    mov T1,r0 
 1647 0d1c 00F03F00 	    and r0,#0x3f // limit mask 
 1648 0d20 F949     	    ldr r1,=tok_jmp 
 1649 0d22 D1E800F0 	    tbb [r1,r0]
 1650              	1: // pc reference point 
 1651 0d26 1BE0     	    b 9f 
 1652              	2: // .byte param
 1653 0d28 1BF80A10 	    ldrb r1,[BPTR,IN]
 1654 0d2c 0AF1010A 	    add IN,#1 
 1655 0d30 16E0     	    b 9f 
 1656              	3: // .hword param 
 1657 0d32 3BF80A10 	    ldrh r1,[BPTR,IN]
 1658 0d36 0AF1020A 	    add IN,#2 
 1659 0d3a 11E0     	    b 9f 
 1660              	4: // .word param  
 1661 0d3c 5BF80A10 	    ldr r1,[BPTR,IN]
 1662 0d40 0AF1040A 	    add IN,#4
 1663 0d44 0CE0     	    b 9f 
 1664              	5: // .asciz param 
 1665 0d46 0BEB0A01 	    add r1,BPTR,IN 
 1666 0d4a 0846     	    mov r0,r1  
 1667 0d4c 00B5FFF7 	    _CALL strlen 
 1667      FEFF5DF8 
 1667      04EB
 1668 0d56 8244     	    add IN,r0
 1669 0d58 0AF1010A 	    add IN,#1
 1670 0d5c 00E0     	    b 9f  
 1671              	8: // syntax error 
 1672 0d5e ADE5     	    b syntax_error 
 1673 0d60 4046     	9:  mov r0,T1  
 1674 0d62 5DF8048B 	    pop {T1}
 1675 0d66 7047     	    _RET
 1676              	
 1677              	  .p2align 2
 1678              	tok_jmp: // token id  tbb offset 
 1679 0d68 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1680 0d6a 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1681 0d6e 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1681      1D
 1682 0d73 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1683 0d77 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1684 0d7a 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1684      1C
 1685 0d7f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1685      1C1C
 1686 0d85 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1687 0d88 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1688 0d8b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1688      1C1C1C1C 
 1689 0d93 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1689      1C1C
 1690 0d99 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1690      1D1D
 1691 0d9f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1691      1C1C1C1C 
ARM GAS  tinyBasic.s 			page 47


 1691      1C
 1692              	
 1693              	  .p2align 2 
 1694              	
 1695              	/*********************************
 1696              	    expect 
 1697              	    check if next token is of 
 1698              	    expected type. If not 
 1699              	    call syntax_error  
 1700              	  input:
 1701              	      r0   token attribute
 1702              	  output:
 1703              	      r0  token attribute 
 1704              	      r1  token value
 1705              	  use:
 1706              	      T1   
 1707              	**********************************/
 1708              	    _FUNC expect 
 1709 0da8 4DF8048D 	    push {T1}
 1710 0dac 8046     	    mov T1,r0 
 1711 0dae 00B5FFF7 	    _CALL next_token 
 1711      92FF5DF8 
 1711      04EB
 1712 0db8 4045     	    cmp r0,T1  
 1713 0dba 7FF47FAD 	    bne syntax_error 
 1714 0dbe 5DF8048B 	    pop {T1}
 1715 0dc2 7047     	    _RET 
 1716              	
 1717              	/***********************************
 1718              	    func_args 
 1719              	    get function arguments list 
 1720              	  input:
 1721              	    none 
 1722              	  output:
 1723              	    r0    arg. count 
 1724              	  use:
 1725              	
 1726              	************************************/
 1727              	    _FUNC func_args 
 1728 0dc4 4FF00600 	    mov r0,#TK_LPAREN 
 1729 0dc8 00B5FFF7 	    _CALL expect 
 1729      EDFF5DF8 
 1729      04EB
 1730 0dd2 00B500F0 	    _CALL arg_list 
 1730      0CF85DF8 
 1730      04EB
 1731 0ddc 01B4     	    push {r0}
 1732 0dde 4FF00700 	    mov r0,#TK_RPAREN 
 1733 0de2 00B5FFF7 	    _CALL expect 
 1733      E0FF5DF8 
 1733      04EB
 1734 0dec 01BC     	    pop {r0}
 1735 0dee 7047     	    _RET 
 1736              	
 1737              	/**********************************
 1738              	    arg_list 
 1739              	    get arguments list on dstack 
ARM GAS  tinyBasic.s 			page 48


 1740              	  input:
 1741              	    none 
 1742              	  output:
 1743              	    r0    arg count
 1744              	  use:
 1745              	    T1    tmp count  
 1746              	***********************************/
 1747              	    _FUNC arg_list 
 1748 0df0 4DF8048D 	    push {T1}
 1749 0df4 88EA0808 	    eor T1,T1 
 1750 0df8 00B500F0 	1:  _CALL expression 
 1750      C9F85DF8 
 1750      04EB
 1751 0e02 0028     	    cmp R0,#TK_NONE 
 1752 0e04 10D0     	    beq 9f 
 1753 0e06 0F28     	    cmp r0,#TK_INTGR
 1754 0e08 0ED1     	    bne 9f 
 1755 0e0a 4CF8041D 	    _PUSH r1 
 1756 0e0e 08F10108 	    add T1,#1 
 1757 0e12 00B5FFF7 	    _CALL next_token 
 1757      60FF5DF8 
 1757      04EB
 1758 0e1c 0828     	    cmp r0,#TK_COMMA 
 1759 0e1e EBD0     	    beq 1b 
 1760 0e20 D4F800A0 	    _UNGET_TOKEN 
 1760      D4F808B0 
 1761 0e28 4046     	9:  mov r0,T1 
 1762 0e2a 5DF8048B 	    pop {T1}
 1763 0e2e 7047     	    _RET 
 1764              	
 1765              	/***********************************
 1766              	 factor
 1767              	 arithmetick factor parser 
 1768              	 factor ::= ['+'|'-'|e]  var | @ |
 1769              				 integer | function |
 1770              				 '('expression')' 
 1771              	  input: 
 1772              	    none 
 1773              	  output:
 1774              	    r0   token attribute 
 1775              	    r1   token value 
 1776              	  use:
 1777              	    r2   temp 
 1778              	    T1   sign 
 1779              	    T2   exit token attribute 
 1780              	***********************************/
 1781              	    _FUNC factor 
 1782 0e30 2DE90403 	    push {r2,T1,T2}
 1783 0e34 4FF00F09 	    mov T2,#TK_INTGR 
 1784 0e38 4FF00108 	    mov T1,#1 // default sign +  
 1785 0e3c 00B5FFF7 	    _CALL next_token
 1785      4BFF5DF8 
 1785      04EB
 1786 0e46 0246     	    mov r2,r0 
 1787 0e48 00F03000 	    and r0,#TK_GRP_MASK 
 1788 0e4c 1028     	    cmp r0,#TK_GRP_ADD
 1789 0e4e 1046     	    mov r0,r2
ARM GAS  tinyBasic.s 			page 49


 1790 0e50 08D1     	    bne 1f 
 1791 0e52 1028     	    cmp r0,#TK_PLUS 
 1792 0e54 01D0     	    beq 0f 
 1793 0e56 4FF0FF38 	    mov T1,#-1 // minus sign 
 1794 0e5a 00B5FFF7 	0:  _CALL next_token
 1794      3CFF5DF8 
 1794      04EB
 1795 0e64 0F28     	1:  cmp r0,#TK_INTGR 
 1796 0e66 4ED0     	    beq 8f 
 1797 0e68 0528     	    cmp r0,#TK_ARRAY 
 1798 0e6a 1ED1     	    bne 2f 
 1799 0e6c 4FF00600 	    mov r0,#TK_LPAREN 
 1800 0e70 00B5FFF7 	    _CALL expect 
 1800      99FF5DF8 
 1800      04EB
 1801 0e7a 00B500F0 	    _CALL expression
 1801      88F85DF8 
 1801      04EB
 1802 0e84 0F28     	    cmp r0,#TK_INTGR
 1803 0e86 7FF419AD 	    bne syntax_error
 1804 0e8a 8146     	    mov T2,r0
 1805 0e8c 0A46     	    mov r2,r1  
 1806 0e8e 4FF00700 	    mov r0,#TK_RPAREN
 1807 0e92 00B5FFF7 	    _CALL expect 
 1807      88FF5DF8 
 1807      04EB
 1808 0e9c 1046     	    mov r0,r2 
 1809 0e9e 00B500F0 	    _CALL get_array_element 
 1809      ECF85DF8 
 1809      04EB
 1810 0ea8 2DE0     	    b 8f
 1811 0eaa 0628     	2:  cmp r0,#TK_LPAREN 
 1812 0eac 12D1     	    bne 3f 
 1813 0eae 00B500F0 	    _CALL expression 
 1813      6EF85DF8 
 1813      04EB
 1814 0eb8 0F28     	    cmp r0,#TK_INTGR 
 1815 0eba 7FF4FFAC 	    bne syntax_error
 1816 0ebe 8146     	    mov T2,r0
 1817 0ec0 0A46     	    mov r2,r1   
 1818 0ec2 4FF00700 	    mov r0,#TK_RPAREN
 1819 0ec6 00B5FFF7 	    _CALL expect 
 1819      6EFF5DF8 
 1819      04EB
 1820 0ed0 1146     	    mov r1,r2 
 1821 0ed2 18E0     	    b 8f       
 1822 0ed4 0428     	3:  cmp r0,#TK_VAR 
 1823 0ed6 06D1     	    bne 4f
 1824 0ed8 0846     	    mov r0,r1  
 1825 0eda 00B500F0 	    _CALL get_var 
 1825      E2F85DF8 
 1825      04EB
 1826 0ee4 0FE0     	    b 8f 
 1827 0ee6 0C28     	4:  cmp r0,#TK_IFUNC 
 1828 0ee8 06D1     	    bne 6f 
 1829 0eea 0846     	5:  mov r0,r1  
 1830 0eec 00B5FFF7 	    _CALL execute
ARM GAS  tinyBasic.s 			page 50


 1830      EDFE5DF8 
 1830      04EB
 1831 0ef6 06E0     	    b 8f 
 1832 0ef8 D4F800A0 	6:  _UNGET_TOKEN      
 1832      D4F808B0 
 1833 0f00 4FF00000 	    mov r0,#TK_NONE
 1834 0f04 03E0     	    b 9f  
 1835 0f06 08FB01F1 	8:  mul r1,T1 
 1836 0f0a 5FEA0900 	    movs r0,T2 
 1837 0f0e BDE80403 	9:  pop {r2,T1,T2}   
 1838 0f12 7047     	    _RET 
 1839              	
 1840              	
 1841              	/*****************************************
 1842              	    term 
 1843              	    term parser 
 1844              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1845              	    output:
 1846              	      r0  	token attribute 
 1847              	      r1		integer
 1848              	    use:
 1849              	      r2    first operand 
 1850              	      r3    temp 
 1851              	      T1    operator 
 1852              	      T2    exit token attribute 
 1853              	******************************************/
 1854              	     _FUNC term 
 1855 0f14 2DE90C03 	    push {r2,r3,T1,T2}
 1856 0f18 4FF00009 	    mov T2,#TK_NONE 
 1857 0f1c 00B5FFF7 	    _CALL factor
 1857      87FF5DF8 
 1857      04EB
 1858 0f26 60B3     	    cbz r0, 9f  // no factor   
 1859 0f28 8146     	    mov T2,r0  // TK_INTGR 
 1860 0f2a 0A46     	    mov r2,r1 // first factor    
 1861 0f2c 00B5FFF7 	0:  _CALL next_token
 1861      D3FE5DF8 
 1861      04EB
 1862 0f36 0346     	    mov r3,r0   
 1863 0f38 00F03000 	    and r0,#TK_GRP_MASK 
 1864 0f3c 2028     	    cmp r0,#TK_GRP_MULT
 1865 0f3e 04D0     	    beq 1f
 1866 0f40 D4F800A0 	    _UNGET_TOKEN
 1866      D4F808B0 
 1867 0f48 1BE0     	    b 9f 
 1868 0f4a 9846     	1:  mov T1,r3 
 1869 0f4c 00B5FFF7 	    _CALL factor  
 1869      6FFF5DF8 
 1869      04EB
 1870 0f56 3FF4B1AC 	    beq syntax_error 
 1871 0f5a B8F1200F 	    cmp T1,#TK_MULT
 1872 0f5e 02D1     	    bne 2f 
 1873              	// multiplication
 1874 0f60 01FB02F2 	    mul r2,r1
 1875 0f64 E2E7     	    b 0b  
 1876 0f66 B8F1210F 	2:  cmp T1,#TK_DIV 
 1877 0f6a 02D1     	    bne 3f
ARM GAS  tinyBasic.s 			page 51


 1878              	// division
 1879 0f6c 92FBF1F2 	    sdiv r2,r2,r1
 1880 0f70 DCE7     	    b 0b  
 1881              	3: // modulo
 1882 0f72 1046     	    mov r0,r2 
 1883 0f74 92FBF1F2 	    sdiv r2,r2,r1 
 1884 0f78 01FB02F2 	    mul  r2,r1 
 1885 0f7c A0EB0202 	    sub  r2,r0,r2
 1886 0f80 D4E7     	    b 0b  
 1887 0f82 1146     	9:  mov r1,r2 
 1888 0f84 5FEA0900 	    movs r0,T2 
 1889 0f88 BDE80C03 	    pop {r2,r3,T1,T2}
 1890 0f8c 7047     	    _RET 
 1891              	
 1892              	/*****************************************
 1893              	    expression 
 1894              	    arithmetic expression parser 
 1895              	    expression ::= term [['+'|'-'] term]*
 1896              	    result range {-32768..32767}
 1897              	    output:
 1898              	      r0    TK_NONE || TK_INTGR 
 1899              	      r1 	  integer
 1900              	    use:
 1901              	      r2  left operand 
 1902              	      T1  operator 
 1903              	      T2  exit token attribute
 1904              	******************************************/
 1905 0f8e 00BF     	    _FUNC expression 
 1906 0f90 2DE90403 	    push {r2,t1,t2}
 1907 0f94 4FF00009 	    mov T2,#TK_NONE
 1908 0f98 82EA0202 	    eor r2,r2 // zero 
 1909 0f9c 00B5FFF7 	    _CALL term 
 1909      B9FF5DF8 
 1909      04EB
 1910 0fa6 21D0     	    beq 9f  // no term  
 1911 0fa8 0A46     	    mov r2,r1 // first term
 1912 0faa 4FF00F09 	    mov T2,#TK_INTGR    
 1913 0fae 00B5FFF7 	1:  _CALL next_token 
 1913      92FE5DF8 
 1913      04EB
 1914 0fb8 8046     	    mov T1,r0 // token attribute 
 1915 0fba 00F03000 	    and r0,#TK_GRP_MASK 
 1916 0fbe 1028     	    cmp r0,#TK_GRP_ADD 
 1917 0fc0 04D0     	    beq 3f 
 1918 0fc2 D4F800A0 	    _UNGET_TOKEN
 1918      D4F808B0 
 1919 0fca 0FE0     	    b 9f  
 1920 0fcc 00B5FFF7 	3:  _CALL term 
 1920      A1FF5DF8 
 1920      04EB
 1921 0fd6 0F28     	    cmp r0,#TK_INTGR 
 1922 0fd8 7FF470AC 	    bne syntax_error 
 1923 0fdc B8F1100F 	    cmp T1,#TK_PLUS 
 1924 0fe0 02D0     	    beq 4f 
 1925 0fe2 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1926 0fe6 E2E7     	    b 1b 
 1927 0fe8 0A44     	4:  add r2,r2,r1 // N1+N2
ARM GAS  tinyBasic.s 			page 52


 1928 0fea E0E7     	    b 1b
 1929 0fec 4846     	9:  mov r0,T2 
 1930 0fee 1146     	    mov r1,r2 
 1931 0ff0 BDE80403 	    pop {r2,t1,t2}
 1932 0ff4 7047     	    _RET 
 1933              	
 1934              	
 1935              	/**********************************************
 1936              	    relation parser 
 1937              	    rel ::= expr1 rel_op expr2
 1938              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1939              	    relation return  integer , zero is false 
 1940              	    output:
 1941              	        r0	TK_INTGR  
 1942              	        r1	integer 
 1943              	    use:
 1944              	        r2   first operand 
 1945              	        T1   relop   
 1946              	**********************************************/
 1947 0ff6 00BF     	    _FUNC relation 
 1948 0ff8 2DE90401 	    push {r2,T1}
 1949 0ffc 00B5FFF7 	    _CALL expression 
 1949      C7FF5DF8 
 1949      04EB
 1950 1006 0F28     	    cmp r0,#TK_INTGR 
 1951 1008 7FF458AC 	    bne syntax_error 
 1952 100c 0A46     	    mov r2,r1  // first operand  
 1953 100e 00B5FFF7 	    _CALL next_token 
 1953      62FE5DF8 
 1953      04EB
 1954 1018 8046     	    mov T1,r0  // relop  
 1955 101a 00F03000 	    and r0,#TK_GRP_MASK 
 1956 101e 3028     	    cmp r0,#TK_GRP_RELOP 
 1957 1020 1DD1     	    bne 8f  // single operand 
 1958 1022 00B5FFF7 	    _CALL expression 
 1958      B4FF5DF8 
 1958      04EB
 1959 102c 0F28     	    cmp r0,#TK_INTGR 
 1960 102e 7FF445AC 	    bne syntax_error 
 1961 1032 8A42     	    cmp r2,r1 // compare operands  
 1962 1034 4FF0FF31 	    mov r1,#-1 
 1963 1038 344A     	    ldr r2,=relop_jmp
 1964 103a 08F00708 	    and T1,#7 // {1..6}
 1965 103e D2E808F0 	    tbb [r2,T1]    
 1966              	rel_idx0:
 1967              	rel_eq:
 1968 1042 11D0     	    beq 9f 
 1969 1044 08E0     	    b rel_false
 1970              	rel_lt: 
 1971 1046 0FDB     	    blt 9f   
 1972 1048 06E0     	    b rel_false 
 1973              	rel_le:
 1974 104a 0DDD     	    ble 9f  
 1975 104c 04E0     	    b rel_false 
 1976              	rel_gt:
 1977 104e 0BDC     	    bgt 9f  
 1978 1050 02E0     	    b rel_false  
ARM GAS  tinyBasic.s 			page 53


 1979              	rel_ge:
 1980 1052 09DA     	    bge 9f  
 1981 1054 00E0     	    b rel_false  
 1982              	rel_diff:
 1983 1056 07D1     	    bne 9f 
 1984              	rel_false:    
 1985 1058 81EA0101 	    eor r1,r1  // false
 1986 105c 04E0     	    b 9f  
 1987 105e D4F800A0 	8:  _UNGET_TOKEN 
 1987      D4F808B0 
 1988 1066 1146     	    mov r1,r2    
 1989 1068 4FF00F00 	9:  mov r0,#TK_INTGR
 1990 106c BDE80401 	    pop {r2,T1}
 1991 1070 7047     	    _RET 
 1992              	
 1993              	
 1994              	relop_jmp: 
 1995 1072 00       	  .byte 0 
 1996 1073 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1997 1074 00       	  .byte 0 // =
 1998 1075 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1999 1076 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2000 1077 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2001 1078 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2002              	
 2003              	
 2004              	/***********************************
 2005              	    get_array_element
 2006              	    return value of @(n)
 2007              	  input:
 2008              	    r0    indice 
 2009              	  output:
 2010              	    r0   TK_INTGR
 2011              	    r1   value  
 2012              	************************************/
 2013 1079 0000BF   	    _FUNC get_array_element 
 2014 107c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2015 1080 4FEA8000 	    lsl r0,#2 
 2016 1084 C0EB0100 	    rsb r0,r1 
 2017 1088 0168     	    ldr r1,[r0]
 2018 108a 4FF00F00 	    mov r0,#TK_INTGR 
 2019 108e 7047     	    _RET 
 2020              	
 2021              	
 2022              	/***********************************
 2023              	    set_array_element 
 2024              	    set value of array element 
 2025              	  input:
 2026              	    r0   index 
 2027              	    r1   new value 
 2028              	  output:
 2029              	    none
 2030              	  use:
 2031              	    r2    array pointer 
 2032              	**********************************/
 2033              	    _FUNC set_array_element 
 2034 1090 04B4     	    push {r2}
ARM GAS  tinyBasic.s 			page 54


 2035 1092 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2036 1096 4FEA8000 	    lsl r0,#2 
 2037 109a A1EB0001 	    sub r1,r0 
 2038 109e 0960     	    str r1,[r1]
 2039 10a0 04BC     	    pop {r2}
 2040 10a2 7047     	    _RET 
 2041              	
 2042              	/***********************************
 2043              	   get_var 
 2044              	   get variable value 
 2045              	  input:
 2046              	     r0    variable index {0..25}
 2047              	  output:
 2048              	     r0    TK_INTGR
 2049              	     r1    value 
 2050              	**********************************/
 2051              	    _FUNC get_var 
 2052 10a4 04F16001 	    add r1,UPP,#VARS
 2053 10a8 4FEA8000 	    lsl r0,#2 
 2054 10ac 0958     	    ldr r1,[r1,r0]
 2055 10ae 4FF00F00 	    mov r0,#TK_INTGR
 2056 10b2 7047     	    _RET 
 2057              	
 2058              	/*********************************
 2059              	    set_var 
 2060              	    set variable value 
 2061              	  input:
 2062              	     r0    variable index {0..25}
 2063              	     r1    new value 
 2064              	  output:
 2065              	    none 
 2066              	  use:
 2067              	    r2   vars pointer 
 2068              	*********************************/
 2069              	    _FUNC set_var 
 2070 10b4 04B4     	    push {r2}
 2071 10b6 04F16002 	    add r2,UPP,#VARS
 2072 10ba 4FEA8000 	    lsl r0,#2
 2073 10be 1150     	    str r1,[r2,r0]
 2074 10c0 04BC     	    pop {r2}
 2075 10c2 7047     	    _RET 
 2076              	
 2077              	/******************************
 2078              	    CONSTANTS data
 2079              	******************************/
 2080              	
 2081              	  .section .rodata 
 2082              	
 2083              	// system variables initial value 
 2084              	uzero:
 2085 0000 00000000 	  .word 0 // IN_SAVED
 2086 0004 00000000 	  .word 0 // COUNT
 2087 0008 00000000 	  .word 0 // BASICPTR
 2088 000c 00000000 	  .word 0 // DATAPTR
 2089 0010 00000000 	  .word 0 // DATA
 2090 0014 00000000 	  .word 0 // DATALEN
 2091 0018 0A000000 	  .word 10 // BASE
ARM GAS  tinyBasic.s 			page 55


 2092 001c 00000000 	  .word 0 // TICKS
 2093 0020 00000000 	  .word 0 // TIMER
 2094 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2095 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2096 002c 00000000 	  .word 0 // FFREE
 2097 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2098 0034 CC000000 	  .word ulast-uzero // TXTEND
 2099 0038 00000000 	  .word 0 //LOOP_DEPTH
 2100 003c 00000000 	  .word 0 // ARRAY_SIZE
 2101 0040 00000000 	  .word 0 // FLAGS
 2102 0044 04000000 	  .word 4 // TAB_WIDTH
 2103 0048 00000000 	  .word 0 // RX_HEAD
 2104 004c 00000000 	  .word 0 // RX_TAIL
 2105 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2105      00000000 
 2105      00000000 
 2105      00000000 
 2106 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2106      00000000 
 2106      00000000 
 2106      00000000 
 2106      00000000 
 2107 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2108              	ulast:
 2109              	
 2110              	  .section .rodata.dictionary 
 2111              	
 2112              	// keep alphabetic order for BASIC names from Z-A
 2113              	// this sort order is for for WORDS cmd output. 	
 2114              	
 2115              		.equ link, 0
 2116              	kword_end:
 2117 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2117      00000000 
 2117      00000000 
 2117      00000000 
 2118 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2118      52000000 
 2118      0B000000 
 2118      5854524D 
 2118      54000000 
 2119 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2119      53000000 
 2119      0B000000 
 2119      58524356 
 2119      00000000 
 2120 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2120      51000000 
 2120      0C000000 
 2120      584F5200 
 2121 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2121      50000000 
 2121      0B000000 
 2121      57524954 
 2121      45000000 
 2122 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2122      4F000000 
ARM GAS  tinyBasic.s 			page 56


 2122      0B000000 
 2122      574F5244 
 2122      53000000 
 2123 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2123      4E000000 
 2123      0B000000 
 2123      57414954 
 2123      00000000 
 2124 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2124      4D000000 
 2124      0C000000 
 2124      55535200 
 2125 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2125      4C000000 
 2125      0B000000 
 2125      554E5449 
 2125      4C000000 
 2126 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2126      4B000000 
 2126      0C000000 
 2126      55464C41 
 2126      53480000 
 2127 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2127      4A000000 
 2127      0C000000 
 2127      55424F55 
 2127      4E440000 
 2128 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2128      49000000 
 2128      0B000000 
 2128      544F4E45 
 2128      00000000 
 2129 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2129      48000000 
 2129      0B000000 
 2129      544F0000 
 2130 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2130      46000000 
 2130      0B000000 
 2130      54494D45 
 2130      52000000 
 2131 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2131      47000000 
 2131      0C000000 
 2131      54494D45 
 2131      4F555400 
 2132 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2132      45000000 
 2132      0C000000 
 2132      5449434B 
 2132      53000000 
 2133 0130 28010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2133      44000000 
 2133      0B000000 
 2133      5448454E 
 2133      00000000 
 2134 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
ARM GAS  tinyBasic.s 			page 57


 2134      43000000 
 2134      0B000000 
 2134      53544F50 
 2134      00000000 
 2135 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2135      42000000 
 2135      0B000000 
 2135      53544550 
 2135      00000000 
 2136 016c 64010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2136      41000000 
 2136      0B000000 
 2136      53504957 
 2136      52000000 
 2137 0180 78010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2137      40000000 
 2137      0B000000 
 2137      53504953 
 2137      454C0000 
 2138 0194 8C010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2138      3E000000 
 2138      0C000000 
 2138      53504952 
 2138      44000000 
 2139 01a8 A0010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2139      3F000000 
 2139      0B000000 
 2139      53504945 
 2139      4E000000 
 2140 01bc B4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2140      3D000000 
 2140      0B000000 
 2140      534C4545 
 2140      50000000 
 2141 01d0 C8010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2141      3C000000 
 2141      0C000000 
 2141      53495A45 
 2141      00000000 
 2142 01e4 DC010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2142      3B000000 
 2142      0B000000 
 2142      53484F57 
 2142      00000000 
 2143 01f8 F0010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2143      3A000000 
 2143      0B000000 
 2143      53415645 
 2143      00000000 
 2144 020c 04020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2144      39000000 
 2144      0B000000 
 2144      52554E00 
 2145 021c 18020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2145      38000000 
 2145      0C000000 
 2145      52534849 
ARM GAS  tinyBasic.s 			page 58


 2145      46540000 
 2146 0230 28020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2146      37000000 
 2146      0C000000 
 2146      524E4400 
 2147 0240 3C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2147      36000000 
 2147      0B000000 
 2147      52455455 
 2147      524E0000 
 2148 0254 4C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2148      35000000 
 2148      0B000000 
 2148      52455354 
 2148      4F524500 
 2149 0268 60020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2149      34000000 
 2149      0B000000 
 2149      52454D41 
 2149      524B0000 
 2150 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2150      33000000 
 2150      0C000000 
 2150      52454144 
 2150      00000000 
 2151 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2151      32000000 
 2151      0C000000 
 2151      514B4559 
 2151      00000000 
 2152 02a4 9C020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2152      31000000 
 2152      0B000000 
 2152      5052494E 
 2152      54000000 
 2153 02b8 B0020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2153      2E000000 
 2153      0B000000 
 2153      504F4B45 
 2153      38000000 
 2154 02cc C4020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2154      30000000 
 2154      0B000000 
 2154      504F4B45 
 2154      33320000 
 2155 02e0 D8020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2155      2F000000 
 2155      0B000000 
 2155      504F4B45 
 2155      31360000 
 2156 02f4 EC020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2156      2A000000 
 2156      0B000000 
 2156      504D4F44 
 2156      45000000 
 2157 0308 00030000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2157      2B000000 
ARM GAS  tinyBasic.s 			page 59


 2157      0C000000 
 2157      5045454B 
 2157      38000000 
 2158 031c 14030000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2158      2D000000 
 2158      0C000000 
 2158      5045454B 
 2158      33320000 
 2159 0330 28030000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2159      2C000000 
 2159      0C000000 
 2159      5045454B 
 2159      31360000 
 2160 0344 3C030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2160      29000000 
 2160      0B000000 
 2160      50415553 
 2160      45000000 
 2161 0358 50030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2161      28000000 
 2161      0C000000 
 2161      50414400 
 2162 0368 64030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2162      27000000 
 2162      0B000000 
 2162      4F555400 
 2163 0378 74030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2163      26000000 
 2163      0C000000 
 2163      4F520000 
 2164 0388 84030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2164      25000000 
 2164      0C000000 
 2164      4E4F5400 
 2165 0398 94030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2165      24000000 
 2165      0B000000 
 2165      4E455854 
 2165      00000000 
 2166 03ac A4030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2166      23000000 
 2166      0B000000 
 2166      4E455700 
 2167 03bc B8030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2167      22000000 
 2167      0C000000 
 2167      4C534849 
 2167      46540000 
 2168 03d0 C8030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2168      21000000 
 2168      0C000000 
 2168      4C4F4732 
 2168      00000000 
 2169 03e4 DC030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2169      20000000 
 2169      0B000000 
 2169      4C4F4144 
ARM GAS  tinyBasic.s 			page 60


 2169      00000000 
 2170 03f8 F0030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2170      1F000000 
 2170      0B000000 
 2170      4C495354 
 2170      00000000 
 2171 040c 04040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2171      1E000000 
 2171      0B000000 
 2171      4C455400 
 2172 041c 18040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2172      1D000000 
 2172      0C000000 
 2172      4B455900 
 2173 042c 28040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2173      1C000000 
 2173      0C000000 
 2173      494E5645 
 2173      52540000 
 2174 0440 38040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2174      1B000000 
 2174      0B000000 
 2174      494E5055 
 2174      54000000 
 2175 0454 4C040000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2175      1A000000 
 2175      0C000000 
 2175      494E5000 
 2176 0464 60040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2176      19000000 
 2176      0B000000 
 2176      49460000 
 2177 0474 70040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2177      18000000 
 2177      0B000000 
 2177      48455800 
 2178 0484 80040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2178      17000000 
 2178      0B000000 
 2178      474F544F 
 2178      00000000 
 2179 0498 90040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2179      16000000 
 2179      0B000000 
 2179      474F5355 
 2179      42000000 
 2180 04ac A4040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2180      15000000 
 2180      0B000000 
 2180      464F5247 
 2180      45540000 
 2181 04c0 B8040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2181      14000000 
 2181      0B000000 
 2181      464F5200 
 2182 04d0 CC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2182      13000000 
ARM GAS  tinyBasic.s 			page 61


 2182      0B000000 
 2182      454E4400 
 2183 04e0 DC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2183      12000000 
 2183      0B000000 
 2183      44554D50 
 2183      00000000 
 2184 04f4 EC040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2184      11000000 
 2184      0B000000 
 2184      444F0000 
 2185 0504 00050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2185      10000000 
 2185      0B000000 
 2185      44495200 
 2186 0514 10050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2186      0F000000 
 2186      0B000000 
 2186      44454300 
 2187 0524 20050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2187      0E000000 
 2187      0B000000 
 2187      44415441 
 2187      4C4E0000 
 2188 0538 30050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2188      0D000000 
 2188      0B000000 
 2188      44415441 
 2188      00000000 
 2189 054c 44050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2189      0C000000 
 2189      0D000000 
 2189      43484152 
 2189      00000000 
 2190 0560 58050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2190      0B000000 
 2190      0B000000 
 2190      42544F47 
 2190      4C000000 
 2191 0574 6C050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2191      0A000000 
 2191      0C000000 
 2191      42544553 
 2191      54000000 
 2192 0588 80050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2192      09000000 
 2192      0B000000 
 2192      42534554 
 2192      00000000 
 2193 059c 94050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2193      08000000 
 2193      0B000000 
 2193      42524553 
 2193      00000000 
 2194 05b0 A8050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2194      07000000 
 2194      0C000000 
ARM GAS  tinyBasic.s 			page 62


 2194      42495400 
 2195 05c0 BC050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2195      06000000 
 2195      0B000000 
 2195      41575500 
 2196 05d0 CC050000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2196      05000000 
 2196      0B000000 
 2196      4155544F 
 2196      52554E00 
 2197 05e4 DC050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2197      04000000 
 2197      0C000000 
 2197      41534300 
 2198 05f4 F0050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2198      03000000 
 2198      0C000000 
 2198      414E4400 
 2199 0604 00060000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2199      02000000 
 2199      0C000000 
 2199      41444352 
 2199      45414400 
 2200 0618 10060000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2200      01000000 
 2200      0B000000 
 2200      4144434F 
 2200      4E000000 
 2201              	first_link: 
 2202 062c 24060000 	  .word LINK 
 2203 0630 00000000 	  .word ABS_IDX 
 2204 0634 0C000000 	  .word TK_IFUNC
 2205              	kword_dict: // first name field 
 2206              	  .equ LINK,. 
 2207 0638 41425300 	  .asciz "ABS" 
 2208              	  .p2align 2 
 2209              	
 2210              	    .section .rodata.fn_tabld 
 2211              	
 2212              	//comands and fonctions address table 	
 2213              	fn_table:
 2214 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2215 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char  
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216 0034 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,dump
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2217 004c 00000000 		.word cmd_end,for,forget,gosub,goto 
ARM GAS  tinyBasic.s 			page 63


 2217      00000000 
 2217      00000000 
 2217      00000000 
 2217      00000000 
 2218 0060 00000000 		.word hex_base,if,inp,input_var,invert,key
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2219 0078 00000000 		.word let,list,load,log2,lshift,new,next
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2220 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32,poke8,poke16
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2221 00c0 00000000 		.word poke32,print
 2221      00000000 
 2222 00c8 00000000 		.word qkey,read,skip_line
 2222      00000000 
 2222      00000000 
 2223 00d4 00000000 		.word restore,return, random,rshift,run,save,show,size 
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2224 00f4 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2225 0114 00000000 		.word then,set_timer,timeout,to,tone,ubound,uflash,until,usr
 2225      00000000 
 2225      00000000 
 2225      00000000 
 2225      00000000 
 2226 0138 00000000 		.word wait,words,write,bit_xor,transmit,receive
 2226      00000000 
 2226      00000000 
 2226      00000000 
 2226      00000000 
 2227 0150 00000000 		.word 0 
 2228              	
 2229              	
 2230              	/**********************************
 2231              	    BASIC commands and functions 
 2232              	**********************************/
 2233              	
 2234              	    .section .text.basic , "ax", %progbits 
 2235              	
 2236              	
 2237              	/*******************************
 2238              	  BASIC:  ABS expr 
 2239              	  input:
ARM GAS  tinyBasic.s 			page 64


 2240              	    none 
 2241              	  output:
 2242              	    r0    token type 
 2243              	    r1    abs(expr)
 2244              	  use:
 2245              	    none 
 2246              	******************************/
 2247              	    _FUNC abs 
 2248 0000 00B5FFF7 	    _CALL arg_list
 2248      FEFF5DF8 
 2248      04EB
 2249 000a 0128     	    cmp r0,#1 
 2250 000c 01D0     	    beq 1f 
 2251 000e FFF7FEBF 	    b syntax_error 
 2252 0012 5CF8041B 	1:  _POP r1 
 2253 0016 11F0004F 	    tst r1,#(1<<31)
 2254 001a 01D0     	    beq 9f
 2255 001c C1F10001 	    rsb r1,#0 
 2256 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2257 0024 7047     	   _RET 
 2258              	
 2259 0026 00BF     	    _FUNC power_adc
 2260 0028 7047     	    _RET
 2261              	
 2262 002a 00BF     	    _FUNC analog_read
 2263 002c 7047     	    _RET
 2264              	
 2265              	/************************************
 2266              	  BASIC: AND(expr1,expr2)
 2267              	  logical ANND bit to between expr1,expr2
 2268              	************************************/
 2269 002e 00BF     	    _FUNC bit_and
 2270 0030 00B5FFF7 	    _CALL func_args 
 2270      FEFF5DF8 
 2270      04EB
 2271 003a 0228     	    cmp r0,#2 
 2272 003c 7FF4FEAF 	    bne syntax_error 
 2273 0040 5CF8040B 	    _POP r0 
 2274 0044 5CF8041B 	    _POP r1 
 2275 0048 01EA0001 	    and r1,r0 
 2276 004c 4FF00F00 	    mov r0,#TK_INTGR
 2277 0050 7047     	    _RET
 2278              	
 2279              	/*******************************************
 2280              	  BASIC: ASC(string|char)
 2281              	  return ASCII code of char of first char 
 2282              	  of string 
 2283              	*******************************************/
 2284 0052 00BF     	    _FUNC ascii
 2285 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2286 0058 00B5FFF7 	    _CALL expect 
 2286      FEFF5DF8 
 2286      04EB
 2287 0062 00B5FFF7 	    _CALL next_token 
 2287      FEFF5DF8 
 2287      04EB
 2288 006c 0228     	    cmp r0,#TK_QSTR
ARM GAS  tinyBasic.s 			page 65


 2289 006e 03D0     	    beq 2f 
 2290 0070 0328     	    cmp r0,#TK_CHAR 
 2291 0072 7FF4FEAF 	    bne syntax_error 
 2292 0076 00E0     	    b 9f 
 2293 0078 0978     	2:  ldrb r1,[r1]
 2294 007a 4CF8041D 	9:  _PUSH r1 
 2295 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2296 0082 00B5FFF7 	    _CALL expect 
 2296      FEFF5DF8 
 2296      04EB
 2297 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2298 0090 5CF8041B 	    _POP r1 
 2299 0094 7047     	    _RET
 2300              	
 2301 0096 00BF     	    _FUNC autorun
 2302 0098 7047     	    _RET
 2303              	
 2304 009a 00BF     	    _FUNC awu
 2305 009c 7047     	    _RET
 2306              	
 2307              	/********************************************
 2308              	  BASIC: BIT(expr)
 2309              	  expr must be between 0..31 and is used 
 2310              	  to create 1 bit mask at that position
 2311              	*******************************************/
 2312 009e 00BF     	    _FUNC bitmask
 2313 00a0 00B5FFF7 	    _CALL func_args
 2313      FEFF5DF8 
 2313      04EB
 2314 00aa 0128     	    cmp r0,#1 
 2315 00ac 7FF4FEAF 	    bne syntax_error 
 2316 00b0 5CF8040B 	    _POP r0
 2317 00b4 4FF00101 	    mov r1,#1
 2318 00b8 01FA00F1 	    lsl r1,r0 
 2319 00bc 4FF00F00 	9:  mov r0,#TK_INTGR
 2320 00c0 7047     	    _RET 
 2321              	
 2322              	  
 2323              	  /*********************************
 2324              	   BASIC: BRES adr, mask   
 2325              	   reset bits [adr]= [adr] & ~mask  
 2326              	   input:
 2327              	     none 
 2328              	    output;
 2329              	      none 
 2330              	    use:
 2331              	      T1   temp
 2332              	      T2   temp 
 2333              	*******************************/     
 2334 00c2 00BF     	  _FUNC bit_reset
 2335 00c4 00B5FFF7 	    _CALL arg_list 
 2335      FEFF5DF8 
 2335      04EB
 2336 00ce 0228     	    cmp r0,#2 
 2337 00d0 01D0     	    beq 1f 
 2338 00d2 FFF7FEBF 	    b syntax_error 
 2339 00d6 5CF8041B 	1:  _POP r1 //mask 
ARM GAS  tinyBasic.s 			page 66


 2340 00da 5CF8040B 	    _POP r0 //address 
 2341 00de D0F80090 	    ldr T2,[r0] 
 2342 00e2 81F0FF31 	    eor r1,#-1 // ~mask 
 2343 00e6 01EA0901 	    and r1,T2
 2344 00ea 0160     	    str r1,[r0]
 2345 00ec 7047     	    _RET  
 2346              	
 2347              	
 2348              	/*********************************
 2349              	   BASIC: BSET adr, mask   
 2350              	   reset bits [adr]= [adr] & ~mask  
 2351              	   input:
 2352              	      none 
 2353              	    output;
 2354              	      none 
 2355              	    use:
 2356              	      T1   temp
 2357              	      T2   temp  
 2358              	*******************************/     
 2359 00ee 00BF     	    _FUNC bit_set
 2360 00f0 00B5FFF7 	    _CALL arg_list 
 2360      FEFF5DF8 
 2360      04EB
 2361 00fa 0228     	    cmp r0,#2 
 2362 00fc 01D0     	    beq 1f 
 2363 00fe FFF7FEBF 	    b syntax_error 
 2364 0102 5CF8041B 	1:  _POP r1 //mask 
 2365 0106 5CF8040B 	    _POP r0 //address 
 2366 010a D0F80090 	    ldr T2,[r0] 
 2367 010e 41EA0901 	    orr r1,T2
 2368 0112 0160     	    str r1,[r0]
 2369 0114 7047     	    _RET 
 2370              	
 2371              	  /*********************************
 2372              	   BASIC: BTOGL adr, mask   
 2373              	   reset bits [adr]= [adr] & ~mask  
 2374              	   input:
 2375              	     r0    adr 
 2376              	     r1    mask 
 2377              	    output;
 2378              	      none 
 2379              	    use:
 2380              	      T1   temp
 2381              	      T2   temp  
 2382              	*******************************/     
 2383 0116 00BF     	  _FUNC bit_toggle
 2384 0118 00B5FFF7 	    _CALL arg_list 
 2384      FEFF5DF8 
 2384      04EB
 2385 0122 0228     	    cmp r0,#2 
 2386 0124 01D0     	    beq 1f 
 2387 0126 FFF7FEBF 	    b syntax_error 
 2388 012a 5CF8041B 	1:  _POP r1 //mask 
 2389 012e 5CF8040B 	    _POP r0 //address 
 2390 0132 D0F80090 	    ldr T2,[r0] 
 2391 0136 81EA0901 	    eor r1,T2
 2392 013a 0160     	    str r1,[r0]
ARM GAS  tinyBasic.s 			page 67


 2393 013c 7047     	    _RET  
 2394              	
 2395              	/********************************
 2396              	  BASIC: BTEST(addr,bit)
 2397              	  return bit state at address
 2398              	********************************/
 2399 013e 00BF     	    _FUNC bit_test
 2400 0140 00B5FFF7 	    _CALL func_args
 2400      FEFF5DF8 
 2400      04EB
 2401 014a 0228     	    cmp r0,#2 
 2402 014c 7FF4FEAF 	    bne syntax_error 
 2403 0150 5CF8041B 	    _POP r1
 2404 0154 4FF00100 	    mov r0,#1
 2405 0158 01F01F01 	    and r1,#31  
 2406 015c 21B1     	1:  cbz r1, 2f
 2407 015e 4FEA4000 	    lsl r0,#1
 2408 0162 A1F10101 	    sub r1,#1
 2409 0166 F9E7     	    b 1b 
 2410 0168 5CF8041B 	2:  _POP r1
 2411 016c 0968     	    ldr r1,[r1]
 2412 016e 01EA0001 	    and r1,r0 
 2413 0172 09B1     	    cbz r1,9f 
 2414 0174 4FF00101 	    mov r1,#1
 2415 0178 4FF00F00 	9:  mov r0,#TK_INTGR    
 2416 017c 7047     	    _RET 
 2417              	
 2418              	/*********************************
 2419              	  BASIC: CHAR(expr)
 2420              	  convert expr in character 
 2421              	********************************/
 2422 017e 00BF     	    _FUNC char
 2423 0180 00B5FFF7 	    _CALL func_args
 2423      FEFF5DF8 
 2423      04EB
 2424 018a 0128     	    cmp r0,#1
 2425 018c 7FF4FEAF 	    bne syntax_error 
 2426 0190 5CF8041B 	    _POP r1 
 2427 0194 01F07F01 	    and r1,#127 
 2428 0198 4FF00300 	    mov r0,#TK_CHAR
 2429 019c 7047     	    _RET 
 2430              	
 2431              	/**************************
 2432              	  BASIC: DATALN expr 
 2433              	  set data pointer to line#
 2434              	  specified by expr. 
 2435              	  if line# not valid program 
 2436              	  end with error.
 2437              	  use:
 2438              	
 2439              	**************************/
 2440 019e 00BF     	    _FUNC data_line
 2441 01a0 206C10F0 	    _RTO // run time only 
 2441      010F03D1 
 2441      4FF00700 
 2441      FFF7FEBF 
 2442 01b0 00B5FFF7 	    _CALL expression 
ARM GAS  tinyBasic.s 			page 68


 2442      FEFF5DF8 
 2442      04EB
 2443 01ba 0F28     	    cmp r0,#TK_INTGR
 2444 01bc 7FF4FEAF 	    bne syntax_error
 2445 01c0 0846     	    mov r0,r1 
 2446 01c2 00B5FFF7 	    _CALL search_lineno
 2446      FEFF5DF8 
 2446      04EB
 2447 01cc 0029     	    cmp r1,#0
 2448 01ce 03D0     	    beq 1f 
 2449 01d0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2450 01d4 FFF7FEBF 	    b syntax_error 
 2451 01d8 C178     	1:  ldrb r1,[r0,#3]
 2452 01da 0B29     	    cmp r1,#TK_CMD 
 2453 01dc F8D1     	    bne 0b
 2454 01de 0179     	    ldrb r1,[r0,#4]
 2455 01e0 0D29     	    cmp r1,#DATA_IDX 
 2456 01e2 F5D1     	    bne 0b  
 2457 01e4 E060     	    str r0,[UPP,#DATAPTR]
 2458 01e6 8178     	    ldrb r1,[r0,#2]
 2459 01e8 6161     	    str r1,[UPP,#DATALEN]
 2460 01ea 4FF00501 	    mov r1,#5 // position of first data item  
 2461 01ee 2161     	    str r1,[UPP,#DATA]
 2462 01f0 7047     	    _RET 
 2463              	
 2464              	/*****************************
 2465              	  BASIC: READ 
 2466              	  read next data item 
 2467              	  the value can be assigned to
 2468              	  variable or used in expression
 2469              	*****************************/
 2470 01f2 00BF     	    _FUNC read
 2471 01f4 206C10F0 	    _RTO
 2471      010F03D1 
 2471      4FF00700 
 2471      FFF7FEBF 
 2472 0204 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2473 0206 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2474 0208 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2475 020a 8242     	    cmp r2,r0
 2476 020c 0ED0     	    beq seek_next
 2477 020e 885C     	1:  ldrb r0,[r1,r2]
 2478 0210 02F10102 	    add r2,#1
 2479 0214 0028     	    cmp r0,#TK_NONE
 2480 0216 09D0     	    beq seek_next
 2481 0218 0828     	    cmp r0,#TK_COMMA
 2482 021a F8D0     	    beq 1b  
 2483 021c 0F28     	    cmp r0,#TK_INTGR 
 2484 021e 7FF4FEAF 	    bne syntax_error  
 2485 0222 8958     	    ldr r1,[r1,r2]
 2486 0224 02F10402 	    add r2,#4
 2487 0228 2261     	    str r2,[UPP,#DATA]
 2488 022a 12E0     	    b 9f  
 2489              	seek_next: // is next line data ?
 2490 022c 8878     	    ldrb r0,[R1,#2]
 2491 022e 0144     	    add r1,r0 
 2492 0230 C878     	    ldrb r0,[R1,#3]
ARM GAS  tinyBasic.s 			page 69


 2493 0232 0B28     	    cmp r0,#TK_CMD
 2494 0234 09D1     	    bne 2f 
 2495 0236 0879     	    ldrb r0,[r1,#4]
 2496 0238 0D28     	    cmp r0,#DATA_IDX 
 2497 023a 06D1     	    bne 2f 
 2498 023c E160     	    str r1,[UPP,#DATAPTR]
 2499 023e 8878     	    ldrb r0,[r1,#2]
 2500 0240 6061     	    str  r0,[UPP,#DATALEN]
 2501 0242 4FF00502 	    mov r2,#5 
 2502 0246 2261     	    str r2,[UPP,#DATA]
 2503 0248 E1E7     	    b 1b 
 2504 024a 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2505 024e FFF7FEBF 	    b tb_error 
 2506 0252 7047     	9:  _RET 
 2507              	
 2508              	/********************************
 2509              	  BASIC: RESTORE 
 2510              	  seek first data line 
 2511              	********************************/
 2512              	    _FUNC restore
 2513 0254 206C10F0 	    _RTO 
 2513      010F03D1 
 2513      4FF00700 
 2513      FFF7FEBF 
 2514 0264 216B     	    ldr r1,[UPP,#TXTBGN]
 2515 0266 606B     	1:  ldr r0,[UPP,#TXTEND]
 2516 0268 0FD0     	    beq no_data_line 
 2517 026a 0879     	    ldrb r0,[r1,#4]
 2518 026c 0D28     	    cmp r0,#DATA_IDX
 2519 026e 09D1     	    bne try_next_line
 2520 0270 C878     	    ldrb r0,[r1,#3]
 2521 0272 0B28     	    cmp r0,#TK_CMD
 2522 0274 06D1     	    bne try_next_line
 2523              	// this a the first data line 
 2524 0276 E160     	    str r1,[UPP,#DATAPTR]
 2525 0278 8878     	    ldrb r0,[r1,#2]
 2526 027a 6061     	    str r0,[UPP,#DATALEN]
 2527 027c 4FF00500 	    mov r0,#5 
 2528 0280 2061     	    str r0,[UPP,#DATA]
 2529 0282 07E0     	    b 9f
 2530              	try_next_line:
 2531 0284 8878     	    ldrb r0,[r1,#2]
 2532 0286 0144     	    add r1,r0 
 2533 0288 EDE7     	    b 1b 
 2534              	no_data_line:
 2535 028a 80EA0000 	    eor r0,r0 
 2536 028e E060     	    str r0,[UPP,#DATAPTR]
 2537 0290 2061     	    str r0,[UPP,#DATA]
 2538 0292 6061     	    str r0,[UPP,#DATALEN]
 2539 0294 7047     	9:  _RET 
 2540              	
 2541              	/***********************************
 2542              	  BASIC: DEC 
 2543              	  switch base to decimal 
 2544              	***********************************/
 2545 0296 00BF     	    _FUNC dec_base
 2546 0298 4FF00A00 	    mov r0,#10
ARM GAS  tinyBasic.s 			page 70


 2547 029c A061     	    str r0,[UPP,#BASE]
 2548 029e 7047     	    _RET 
 2549              	
 2550              	    _FUNC directory
 2551 02a0 7047     	    _RET 
 2552              	
 2553              	/***************************************
 2554              	  BASIC: DO 
 2555              	  initialize a DO..UNTIL loop 
 2556              	***************************************/
 2557 02a2 00BF     	    _FUNC do_loop
 2558 02a4 6068     	    ldr r0,[UPP,#COUNT]
 2559 02a6 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 2560 02aa 7047     	    _RET 
 2561              	
 2562              	
 2563              	/****************************************
 2564              	  BASIC: DUMP adr, count 
 2565              	    command line only  
 2566              	    print memory content in hexadecimal 
 2567              	    16 bytes per row 
 2568              	    ouput:
 2569              	      none 
 2570              	    use:
 2571              	      r2   byte counter  
 2572              	****************************************/
 2573              	    _FUNC dump 
 2574 02ac 04B4     	    push {r2}
 2575 02ae 226C     	    ldr r2,[UPP,#FLAGS]
 2576 02b0 12F0010F 	    tst r2,#FRUN 
 2577 02b4 03D0     	    beq 0f
 2578 02b6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2579 02ba FFF7FEBF 	    b tb_error  
 2580 02be 00B5FFF7 	0:  _CALL arg_list 
 2580      FEFF5DF8 
 2580      04EB
 2581 02c8 0228     	    cmp r0,#2
 2582 02ca 7FF4FEAF 	    bne syntax_error 
 2583 02ce 5CF8042B 	    _POP r2   // count 
 2584 02d2 5CF8040B 	    _POP  r0  // adr 
 2585              	dump01:
 2586 02d6 00B500F0 	    _CALL print_dump_header 
 2586      0EF85DF8 
 2586      04EB
 2587 02e0 4FF01001 	1:  mov r1,#16
 2588 02e4 00B5FFF7 	    _CALL prt_row 
 2588      FEFF5DF8 
 2588      04EB
 2589 02ee 103A     	    subs r2,#16 
 2590 02f0 F6D5     	    bpl 1b 
 2591 02f2 04BC     	2:  pop {r2}
 2592 02f4 7047     	    _RET 
 2593              	
 2594              	/********************************
 2595              	   print_dump_header
 2596              	********************************/
 2597 02f6 00BF     	    _FUNC print_dump_header
ARM GAS  tinyBasic.s 			page 71


 2598 02f8 2DE90103 	    push {r0,T1,T2}
 2599 02fc 4FF00C00 	    mov r0,#12 
 2600 0300 00B5FFF7 	    _CALL spaces
 2600      FEFF5DF8 
 2600      04EB
 2601 030a 4FF00000 	    mov r0,#0
 2602 030e 4FF01009 	    mov T2,#16
 2603 0312 8046     	1:  mov T1,r0 
 2604 0314 00B5FFF7 	    _CALL print_hex 
 2604      FEFF5DF8 
 2604      04EB
 2605 031e 08F10100 	    add r0,T1,#1  
 2606 0322 4845     	    cmp r0,T2 
 2607 0324 F5D4     	    bmi 1b 
 2608 0326 4FF00D00 	    mov r0,#CR 
 2609 032a 00B5FFF7 	    _CALL uart_putc 
 2609      FEFF5DF8 
 2609      04EB
 2610 0334 4FF03D00 	    mov r0,#'='
 2611 0338 4FF04F08 	    mov T1,#79
 2612 033c 00B5FFF7 	2:  _CALL uart_putc
 2612      FEFF5DF8 
 2612      04EB
 2613 0346 B8F10108 	    subs T1,#1 
 2614 034a F7D1     	    bne 2b     
 2615 034c 4FF00D00 	    mov r0,#CR 
 2616 0350 00B5FFF7 	    _CALL uart_putc 
 2616      FEFF5DF8 
 2616      04EB
 2617 035a BDE80103 	    pop {r0,T1,T2}
 2618 035e 7047     	    _RET 
 2619              	
 2620              	
 2621              	/*******************************
 2622              	  BASIC: END 
 2623              	  exit program 
 2624              	******************************/ 
 2625              	    _FUNC cmd_end
 2626 0360 FFF7FEBF 	    b warm_start 
 2627 0364 7047     	    _RET 
 2628              	
 2629 0366 00BF     	    _FUNC forget
 2630 0368 7047     	    _RET 
 2631              	
 2632              	/**************************************************
 2633              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2634              	  introdure FOR...NEXT loop 
 2635              	**************************************************/
 2636 036a 00BF     	    _FUNC for
 2637 036c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2638 0370 4FF00107 	    mov INCR,#1
 2639 0374 00B5FFF7 	    _CALL next_token
 2639      FEFF5DF8 
 2639      04EB
 2640 037e 0428     	    cmp r0,#TK_VAR
 2641 0380 7FF4FEAF 	    bne syntax_error
 2642 0384 02B4     	    push {r1} 
ARM GAS  tinyBasic.s 			page 72


 2643 0386 00B500F0 	    _CALL let_var 
 2643      3BF95DF8 
 2643      04EB
 2644 0390 20BC     	    pop {VADR}
 2645 0392 4FEA8505 	    lsl VADR,#2
 2646 0396 2544     	    add VADR,UPP 
 2647 0398 05F16005 	    add VADR,#VARS 
 2648 039c 7047     	    _RET 
 2649              	
 2650              	/***************************************
 2651              	  BASIC: TO expr 
 2652              	  set limit of FOR...NEXT loop 
 2653              	**************************************/
 2654 039e 00BF     	    _FUNC to
 2655 03a0 00B5FFF7 	    _CALL expression 
 2655      FEFF5DF8 
 2655      04EB
 2656 03aa 0F28     	    cmp r0,#TK_INTGR
 2657 03ac 7FF4FEAF 	    bne syntax_error 
 2658 03b0 0E46     	    mov LIMIT,r1
 2659              	    // save loop back parameters 
 2660 03b2 6068     	    ldr r0,[UPP,#COUNT]
 2661 03b4 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2662 03b8 7047     	    _RET 
 2663              	
 2664              	/********************************************
 2665              	  BASIC: STEP expr 
 2666              	  set increment for FOR...NEXT loop 
 2667              	********************************************/
 2668 03ba 00BF     	    _FUNC step
 2669 03bc 00B5FFF7 	    _CALL expression 
 2669      FEFF5DF8 
 2669      04EB
 2670 03c6 0F28     	    cmp r0,#TK_INTGR
 2671 03c8 7FF4FEAF 	    bne syntax_error 
 2672 03cc 0F46     	    mov INCR,r1
 2673              	    // replace parameters left by TO
 2674 03ce 6068     	    ldr r0,[UPP,#COUNT]
 2675 03d0 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2676 03d4 7047     	    _RET 
 2677              	
 2678              	/********************************************
 2679              	  BASIC: NEXT var 
 2680              	  incrment FOR...NEXT loop variable
 2681              	  exit if variable cross LIMIT 
 2682              	********************************************/
 2683 03d6 00BF     	    _FUNC next
 2684 03d8 00B5FFF7 	    _CALL next_token 
 2684      FEFF5DF8 
 2684      04EB
 2685 03e2 0428     	    cmp r0,#TK_VAR 
 2686 03e4 7FF4FEAF 	    bne syntax_error 
 2687 03e8 4FEA8101 	    lsl r1,#2 
 2688 03ec 2144     	    add r1,UPP 
 2689 03ee 01F16001 	    add r1,#VARS 
 2690 03f2 A942     	    cmp r1,VADR
 2691 03f4 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 73


 2692 03f8 2868     	    ldr r0,[VADR]
 2693 03fa 3844     	    add r0,INCR 
 2694 03fc 2860     	    str r0,[VADR]
 2695 03fe 002F     	    cmp INCR,#0
 2696 0400 02D4     	    bmi 2f
 2697 0402 B042     	    cmp r0,LIMIT 
 2698 0404 02DC     	    bgt 8f  
 2699 0406 07E0     	    b 9f  
 2700 0408 B042     	2:  cmp r0,LIMIT 
 2701 040a 05DA     	    bge 9f  
 2702              	8: // exit for...next
 2703              	  //  drop branch parameters
 2704 040c 4FF00C00 	    _DROP 3
 2704      8444
 2705              	  // restore outer loop parameters
 2706 0412 BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2707 0416 7047     	    _RET 
 2708 0418 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2709 041c 6060     	    str r0,[UPP,#COUNT]
 2710 041e 7047     	    _RET 
 2711              	
 2712              	/*********************************
 2713              	  BASIC: GOSUB expr 
 2714              	  call a subroutine at line# 
 2715              	*********************************/
 2716              	    _FUNC gosub
 2717 0420 00B5FFF7 	    _CALL expression
 2717      FEFF5DF8 
 2717      04EB
 2718 042a 0F28     	    cmp r0,#TK_INTGR 
 2719 042c 7FF4FEAF 	    bne syntax_error 
 2720 0430 0846     	    mov r0,r1 
 2721 0432 00B5FFF7 	    _CALL search_lineno  
 2721      FEFF5DF8 
 2721      04EB
 2722 043c 19B1     	    cbz r1,1f 
 2723 043e 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2724 0442 FFF7FEBF 	    b tb_error 
 2725 0446 6168     	1:  ldr r1,[UPP,#COUNT]
 2726 0448 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2727 044c 8346     	    mov BPTR,r0 
 2728 044e 4FF0030A 	    mov IN,#3 
 2729 0452 9BF80200 	    ldrb r0,[BPTR,#2]
 2730 0456 6060     	    str r0,[UPP,#COUNT]
 2731 0458 7047     	    _RET 
 2732              	
 2733              	/**********************************
 2734              	  BASIC: RETURN 
 2735              	  leave a subroutine 
 2736              	*********************************/
 2737 045a 00BF     	    _FUNC return 
 2738 045c BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2739 0460 6060     	    str r0,[UPP,#COUNT]
 2740 0462 7047     	    _RET 
 2741              	
 2742              	/**********************************
 2743              	  BASIC: GOTO expr 
ARM GAS  tinyBasic.s 			page 74


 2744              	  go to line # 
 2745              	  use:
 2746              	
 2747              	**********************************/
 2748              	    _FUNC goto
 2749 0464 00B5FFF7 	    _CALL expression 
 2749      FEFF5DF8 
 2749      04EB
 2750 046e 0F28     	    cmp r0,#TK_INTGR 
 2751 0470 7FF4FEAF 	    bne syntax_error 
 2752 0474 59B1     	    cbz r1,9f 
 2753 0476 0846     	1:  mov r0,r1 
 2754 0478 00B5FFF7 	    _CALL search_lineno 
 2754      FEFF5DF8 
 2754      04EB
 2755 0482 19B1     	    cbz r1,2f 
 2756 0484 4FF00500 	    mov r0,#ERR_NO_LINE 
 2757 0488 FFF7FEBF 	    b tb_error 
 2758 048c 8346     	2:  mov BPTR,r0 
 2759 048e 4FF0030A 	9:  mov IN,#3 
 2760 0492 7047     	    _RET 
 2761              	
 2762              	/***************************************
 2763              	  BASIC: HEX 
 2764              	  set numeric base to hexadecimal 
 2765              	***************************************/
 2766              	    _FUNC hex_base
 2767 0494 4FF01000 	    mov r0,#16 
 2768 0498 A061     	    str r0,[UPP,#BASE]
 2769 049a 7047     	    _RET 
 2770              	
 2771              	    _FUNC const_idr
 2772 049c 7047     	    _RET 
 2773              	
 2774              	/**********************************************
 2775              	  BASIC: IF relation THEN statement
 2776              	  execute statement only if relation is true
 2777              	*********************************************/
 2778 049e 00BF     	    _FUNC if
 2779 04a0 00B5FFF7 	    _CALL relation 
 2779      FEFF5DF8 
 2779      04EB
 2780 04aa 09B9     	    cbnz r1,9f 
 2781 04ac D4F804A0 	    ldr IN,[UPP,#COUNT]
 2782 04b0 7047     	9:  _RET 
 2783              	
 2784              	/*******************************************************
 2785              	  BASIC: THEN statement
 2786              	  statements following THEN are executed if relation is !=0
 2787              	  optional, retained for compatibility.
 2788              	******************************************************/
 2789 04b2 00BF     	    _FUNC then 
 2790              	// do nothing 
 2791 04b4 7047     	    _RET
 2792              	
 2793              	/****************************************
 2794              	  BASIC: INPUT [string]var [,[string]var]+
ARM GAS  tinyBasic.s 			page 75


 2795              	  prompt user for variable value
 2796              	***************************************/
 2797 04b6 00BF     	     _FUNC input_var
 2798 04b8 2DE90401 	    push {r2,T1}
 2799 04bc 00B5FFF7 	1:  _CALL next_token 
 2799      FEFF5DF8 
 2799      04EB
 2800 04c6 0228     	    cmp r0,#2
 2801 04c8 67D4     	    bmi 8f 
 2802 04ca 0228     	    cmp r0,#TK_QSTR 
 2803 04cc 12D1     	    bne 2f 
 2804 04ce 0846     	    mov r0,r1
 2805 04d0 DFF8D810 	    ldr r1,str_buffer
 2806 04d4 00B5FFF7 	    _CALL strcpy
 2806      FEFF5DF8 
 2806      04EB
 2807 04de 4FF00400 	    mov r0,#TK_VAR   
 2808 04e2 00B5FFF7 	    _CALL expect 
 2808      FEFF5DF8 
 2808      04EB
 2809 04ec 8846     	    mov T1,r1 
 2810 04ee DFF8BC00 	    ldr r0,str_buffer 
 2811 04f2 08E0     	    b 3f 
 2812 04f4 0428     	2:  cmp r0,#TK_VAR 
 2813 04f6 7FF4FEAF 	    bne syntax_error     
 2814 04fa 8846     	    mov T1,r1 
 2815 04fc 01F14100 	    add r0,r1,#'A' 
 2816 0500 2A49     	    ldr r1,str_buffer
 2817 0502 0880     	    strh r0,[r1]
 2818 0504 0846     	    mov r0,r1 
 2819 0506 00B5FFF7 	3:  _CALL uart_puts  
 2819      FEFF5DF8 
 2819      04EB
 2820 0510 4FF03D00 	    mov r0,#'='
 2821 0514 00B5FFF7 	    _CALL uart_putc
 2821      FEFF5DF8 
 2821      04EB
 2822 051e DFF88800 	    ldr r0,input_buffer
 2823 0522 4FF02201 	    mov r1,#34 
 2824 0526 00B5FFF7 	    _CALL readln
 2824      FEFF5DF8 
 2824      04EB
 2825 0530 31B3     	    cbz r1,6f
 2826 0532 0178     	    ldrb r1,[r0]
 2827 0534 01B4     	    push {r0}
 2828 0536 0846     	    mov r0,r1
 2829 0538 00B5FFF7 	    _CALL is_alpha 
 2829      FEFF5DF8 
 2829      04EB
 2830 0542 01BC     	    pop {r0}
 2831 0544 02D0     	    beq 3f 
 2832 0546 01F05F01 	    and r1,#0x5f // uppercase  
 2833 054a 19E0     	    b 6f 
 2834 054c 2429     	3:  cmp r1,#'$'
 2835 054e 04D1     	    bne 3f 
 2836 0550 4FF01001 	    mov r1,#16
 2837 0554 00F10100 	    add r0,#1  
ARM GAS  tinyBasic.s 			page 76


 2838 0558 08E0     	    b 5f 
 2839 055a 2629     	3:  cmp r1,#'&' 
 2840 055c 04D1     	    bne 4f 
 2841 055e 4FF00201 	    mov r1,#2
 2842 0562 00F10100 	    add r0,#1 
 2843 0566 01E0     	    b 5f 
 2844 0568 4FF00A01 	4:  mov r1,#10 
 2845 056c 00B5FFF7 	5:  _CALL atoi 
 2845      FEFF5DF8 
 2845      04EB
 2846 0576 18B9     	    cbnz r0,6f
 2847 0578 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 2848 057c FFF7FEBF 	    b tb_error
 2849 0580 4046     	6:  mov r0,T1 
 2850 0582 00B5FFF7 	    _CALL set_var
 2850      FEFF5DF8 
 2850      04EB
 2851 058c 00B5FFF7 	    _CALL next_token
 2851      FEFF5DF8 
 2851      04EB
 2852 0596 0828     	    cmp r0,#TK_COMMA 
 2853 0598 90D0     	    beq 1b 
 2854 059a D4F800A0 	8:  _UNGET_TOKEN          
 2854      D4F808B0 
 2855 05a2 BDE80401 	9:  pop {r2,T1}       
 2856 05a6 7047     	    _RET 
 2857 05a8 00000000 	input_buffer: .word _tib 
 2858 05ac 00000000 	str_buffer: .word _pad 
 2859              	
 2860              	
 2861              	/*****************************************
 2862              	  BASIC: INVERT(expr)
 2863              	  return 1's complement of expr
 2864              	****************************************/
 2865              	    _FUNC invert
 2866 05b0 00B5FFF7 	    _CALL func_args
 2866      FEFF5DF8 
 2866      04EB
 2867 05ba 0128     	    cmp r0,#1 
 2868 05bc 7FF4FEAF 	    bne syntax_error
 2869 05c0 5CF8041B 	    _POP r1  
 2870 05c4 6FEA0101 	    mvn r1,r1
 2871 05c8 4FF00F00 	    mov r0,#TK_INTGR
 2872 05cc 7047     	    _RET 
 2873              	
 2874 05ce 00BF     	    _FUNC enable_iwdg
 2875 05d0 7047     	    _RET 
 2876              	
 2877 05d2 00BF     	    _FUNC refresh_iwdg
 2878 05d4 7047     	    _RET 
 2879              	
 2880              	/*************************************
 2881              	  BASIC: KEY 
 2882              	  wait for a character from console
 2883              	*************************************/
 2884 05d6 00BF     	    _FUNC key
 2885 05d8 00B5FFF7 	    _CALL uart_getc
ARM GAS  tinyBasic.s 			page 77


 2885      FEFF5DF8 
 2885      04EB
 2886 05e2 0146     	    mov r1,r0
 2887 05e4 4FF00300 	    mov r0,#TK_CHAR 
 2888 05e8 7047     	    _RET  
 2889              	
 2890              	/******************************
 2891              	  BASIC: [LET] var=expr 
 2892              	         [LET] @(expr)=expr
 2893              	  input:
 2894              	    none 
 2895              	  output:
 2896              	    none 
 2897              	  use:
 2898              	
 2899              	****************************/         
 2900 05ea 00BF     	    _FUNC let
 2901 05ec 00B5FFF7 	    _CALL next_token 
 2901      FEFF5DF8 
 2901      04EB
 2902 05f6 0428     	    cmp r0,#TK_VAR
 2903 05f8 03D0     	    beq let_var 
 2904 05fa 0528     	    cmp r0,#TK_ARRAY 
 2905 05fc 07D0     	    beq let_array 
 2906 05fe FFF7FEBF 	    b syntax_error 
 2907              	let_var:
 2908 0602 4FEA8101 	    lsl r1,#2
 2909 0606 04F16000 	    add r0,UPP,#VARS
 2910 060a 0844     	    add r0,r1
 2911 060c 1FE0     	    b 1f 
 2912              	let_array: 
 2913 060e 4FF00600 	    mov r0,#TK_LPAREN
 2914 0612 00B5FFF7 	    _CALL expect 
 2914      FEFF5DF8 
 2914      04EB
 2915 061c 00B5FFF7 	    _CALL expression
 2915      FEFF5DF8 
 2915      04EB
 2916 0626 0F28     	    cmp r0,#TK_INTGR 
 2917 0628 7FF4FEAF 	    bne syntax_error
 2918 062c 4CF8041D 	    _PUSH r1 
 2919 0630 4FF00700 	    mov r0,#TK_RPAREN
 2920 0634 00B5FFF7 	    _CALL expect 
 2920      FEFF5DF8 
 2920      04EB
 2921 063e 5CF8041B 	    _POP r1 
 2922 0642 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2923 0646 4FEA8101 	    lsl r1,#2 
 2924 064a A0EB0100 	    sub r0,r1 
 2925 064e 4CF8040D 	1:  _PUSH r0 
 2926 0652 4FF03200 	    mov r0,#TK_EQUAL 
 2927 0656 00B5FFF7 	    _CALL expect 
 2927      FEFF5DF8 
 2927      04EB
 2928 0660 00B5FFF7 	    _CALL expression   
 2928      FEFF5DF8 
 2928      04EB
ARM GAS  tinyBasic.s 			page 78


 2929 066a 0F28     	    cmp r0,#TK_INTGR
 2930 066c 7FF4FEAF 	    bne syntax_error   
 2931 0670 5CF8040B 	2:  _POP r0 
 2932 0674 0160     	    str r1,[r0]
 2933 0676 7047     	    _RET  
 2934              	
 2935              	/***************************************
 2936              	  BASIC: LIST [[first]-last]
 2937              	  use:
 2938              	    r2   first line# 
 2939              	    r3   last line#
 2940              	    T1   *line 
 2941              	    T2   TXTEND 
 2942              	**************************************/  
 2943              	    _FUNC list
 2944 0678 206C10F0 	    _CLO
 2944      010F03D0 
 2944      4FF00700 
 2944      FFF7FEBF 
 2945 0688 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 2946 068c D4F83490 	    ldr T2,[UPP,#TXTEND]
 2947 0690 B8F80020 	    ldrh r2,[T1]
 2948 0694 4FF40043 	    mov r3,#32768
 2949 0698 00B5FFF7 	    _CALL next_token 
 2949      FEFF5DF8 
 2949      04EB
 2950 06a2 10B3     	    cbz r0,6f 
 2951 06a4 0F28     	    cmp r0,#TK_INTGR
 2952 06a6 09D1     	    bne 1f 
 2953 06a8 0A46     	    mov r2,r1 // first line
 2954 06aa 00B5FFF7 	    _CALL next_token
 2954      FEFF5DF8 
 2954      04EB
 2955 06b4 0028     	    cmp r0,#TK_NONE 
 2956 06b6 01D1     	    bne 1f 
 2957 06b8 1346     	    mov r3,r2 
 2958 06ba 0CE0     	    b 4f 
 2959 06bc 1128     	1:  cmp r0,#TK_MINUS 
 2960 06be 7FF4FEAF 	    bne syntax_error 
 2961 06c2 00B5FFF7 	    _CALL next_token 
 2961      FEFF5DF8 
 2961      04EB
 2962 06cc 18B1     	    cbz r0,4f 
 2963 06ce 0F28     	    cmp r0,#TK_INTGR
 2964 06d0 7FF4FEAF 	    bne syntax_error  
 2965 06d4 0B46     	    mov r3,r1 
 2966              	4:  // skip lines below r2 
 2967 06d6 B8F80000 	    ldrh r0,[T1]
 2968 06da 9042     	    cmp r0,r2 
 2969 06dc 05D5     	    bpl 6f 
 2970 06de 98F80200 	    ldrb r0,[T1,#2]
 2971 06e2 8044     	    add T1,r0
 2972 06e4 C845     	    cmp T1,T2 
 2973 06e6 F6D4     	    bmi 4b
 2974 06e8 1CE0     	    b 9f 
 2975 06ea C845     	6:  cmp T1,T2  
 2976 06ec 1AD5     	    bpl 9f
ARM GAS  tinyBasic.s 			page 79


 2977 06ee 4046     	    mov r0,T1   
 2978 06f0 DFF83410 	    ldr r1,out_buff 
 2979 06f4 00B5FFF7 	    _CALL decompile_line 
 2979      FEFF5DF8 
 2979      04EB
 2980 06fe 00B5FFF7 	    _CALL uart_puts 
 2980      FEFF5DF8 
 2980      04EB
 2981 0708 4FF00D00 	    mov r0,#CR 
 2982 070c 00B5FFF7 	    _CALL uart_putc 
 2982      FEFF5DF8 
 2982      04EB
 2983 0716 98F80200 	    ldrb r0,[T1,#2]
 2984 071a 8044     	    add T1,r0
 2985 071c B8F80000 	    ldrh r0,[T1]
 2986 0720 9842     	    cmp r0,r3 
 2987 0722 E2DD     	    ble 6b 
 2988 0724 FFF7FEBF 	9:  b warm_start 
 2989 0728 00000000 	out_buff: .word _tib 
 2990              	
 2991              	    _FUNC load
 2992 072c 7047     	    _RET 
 2993              	
 2994              	/********************************
 2995              	  BASIC: LOG2(expr)
 2996              	  return log base 2 of expr 
 2997              	********************************/
 2998 072e 00BF     	    _FUNC log2
 2999 0730 00B5FFF7 	    _CALL func_args
 2999      FEFF5DF8 
 2999      04EB
 3000 073a 0128     	    cmp r0,#1 
 3001 073c 7FF4FEAF 	    bne syntax_error
 3002 0740 5CF8040B 	    _POP r0 
 3003 0744 B0FA80F1 	    clz r1,r0 
 3004 0748 C1F11F01 	    rsb r1,#31
 3005 074c 4FF00F00 	9:  mov r0,#TK_INTGR
 3006 0750 7047     	    _RET 
 3007              	
 3008              	
 3009              	/****************************************
 3010              	  BASIC: LSHIFT(expr1,expr2)
 3011              	  shift right expr1 of expr2 bits 
 3012              	****************************************/
 3013 0752 00BF     	    _FUNC lshift
 3014 0754 00B5FFF7 	    _CALL func_args
 3014      FEFF5DF8 
 3014      04EB
 3015 075e 0228     	    cmp r0,#2
 3016 0760 7FF4FEAF 	    bne syntax_error 
 3017 0764 BCE80300 	    ldmia DP!,{r0,r1}
 3018 0768 01FA00F1 	    lsl r1,r0 
 3019 076c 4FF00F00 	    mov r0,#TK_INTGR
 3020 0770 7047     	    _RET 
 3021              	
 3022              	/***********************************
 3023              	  BASIC: NEW 
ARM GAS  tinyBasic.s 			page 80


 3024              	  delete existing program in memory
 3025              	  and clear variables and RAM 
 3026              	***********************************/
 3027 0772 00BF     	    _FUNC new
 3028 0774 206C10F0 	    _CLO 
 3028      010F03D0 
 3028      4FF00700 
 3028      FFF7FEBF 
 3029 0784 00B5FFF7 	    _CALL clear_basic 
 3029      FEFF5DF8 
 3029      04EB
 3030 078e FFF7FEBF 	    b warm_start   
 3031              	
 3032              	/************************************
 3033              	  BASIC: NOT relation  
 3034              	  invert logical value or relation
 3035              	************************************/
 3036 0792 00BF     	      _FUNC func_not
 3037 0794 00B5FFF7 	      _CALL relation 
 3037      FEFF5DF8 
 3037      04EB
 3038 079e 11B1     	      cbz r1,8f 
 3039 07a0 81EA0101 	      eor r1,r1
 3040 07a4 01E0     	      b 9f 
 3041 07a6 4FF0FF31 	  8:  mov r1,#-1
 3042 07aa 7047     	  9:  _RET 
 3043              	
 3044              	/******************************************
 3045              	  BASIC: OR(expr1,expr2)
 3046              	  binary OR between 2 expressions
 3047              	******************************************/
 3048              	    _FUNC bit_or
 3049 07ac 00B5FFF7 	    _CALL func_args
 3049      FEFF5DF8 
 3049      04EB
 3050 07b6 0228     	    cmp r0,#2
 3051 07b8 7FF4FEAF 	    bne syntax_error
 3052 07bc 5CF8040B 	    _POP r0 
 3053 07c0 5CF8041B 	    _POP r1
 3054 07c4 41EA0001 	    orr r1,r0 
 3055 07c8 4FF00F00 	    mov r0,#TK_INTGR
 3056 07cc 7047     	    _RET 
 3057              	
 3058              	/****************************************
 3059              	  BASIC: INP(\c) 
 3060              	  read gpio_idr (16 bits value) 
 3061              	***************************************/
 3062 07ce 00BF     	    _FUNC inp 
 3063 07d0 4FF00600 	    mov r0,#TK_LPAREN 
 3064 07d4 00B5FFF7 	    _CALL expect 
 3064      FEFF5DF8 
 3064      04EB
 3065 07de 4FF00300 	    mov r0,#TK_CHAR 
 3066 07e2 00B5FFF7 	    _CALL expect
 3066      FEFF5DF8 
 3066      04EB
 3067 07ec 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 81


 3068 07ee 00B5FFF7 	    _CALL upper 
 3068      FEFF5DF8 
 3068      04EB
 3069 07f8 0246     	    mov r2,r0 
 3070 07fa 4FF00700 	    mov r0,#TK_RPAREN
 3071 07fe 00B5FFF7 	    _CALL expect 
 3071      FEFF5DF8 
 3071      04EB
 3072 0808 A2F14102 	    sub r2,#'A' 
 3073 080c 4FF48061 	    mov r1,0x400 
 3074 0810 02FB01F1 	    mul r1,r2
 3075 0814 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3075      C4F20102 
 3076 081c 0A44     	    add r2,r1 
 3077 081e 1168     	    ldr r1,[r2]
 3078 0820 4FF00F00 	    mov r0,#TK_INTGR
 3079 0824 7047     	    _RET 
 3080              	
 3081              	
 3082              	/****************************************
 3083              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3084              	  output to gpio_odr expr lower 16 bits
 3085              	***************************************/
 3086 0826 00BF     	    _FUNC out
 3087 0828 4FF00300 	1:  mov r0,#TK_CHAR 
 3088 082c 00B5FFF7 	    _CALL expect 
 3088      FEFF5DF8 
 3088      04EB
 3089 0836 0846     	    mov r0,r1
 3090 0838 00B5FFF7 	    _CALL upper
 3090      FEFF5DF8 
 3090      04EB
 3091 0842 0246     	    mov r2,r0 
 3092 0844 4FF00800 	    mov r0,#TK_COMMA 
 3093 0848 00B5FFF7 	    _CALL expect 
 3093      FEFF5DF8 
 3093      04EB
 3094 0852 00B5FFF7 	    _CALL expression 
 3094      FEFF5DF8 
 3094      04EB
 3095 085c A2F14102 	    sub r2,#'A'
 3096 0860 4FF48063 	    mov r3,#0x400 
 3097 0864 03FB02F2 	    mul r2,r3 
 3098 0868 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3098      C4F20103 
 3099 0870 1A44     	    add r2,r3
 3100 0872 1180     	    strh r1,[r2]
 3101 0874 00B5FFF7 	    _CALL next_token
 3101      FEFF5DF8 
 3101      04EB
 3102 087e 0828     	    cmp r0,#TK_COMMA
 3103 0880 D2D0     	    beq 1b 
 3104 0882 D4F800A0 	    _UNGET_TOKEN
 3104      D4F808B0 
 3105 088a 7047     	    _RET 
 3106              	
 3107              	/****************************************
ARM GAS  tinyBasic.s 			page 82


 3108              	  BASIC: PAD 
 3109              	  return pad buffer address 
 3110              	****************************************/
 3111              	    _FUNC pad_ref
 3112 088c 0149     	    ldr r1,pad_adr  
 3113 088e 4FF00F00 	    mov r0,#TK_INTGR 
 3114 0892 7047     	    _RET 
 3115 0894 00000000 	pad_adr: .word _pad 
 3116              	
 3117              	/***********************
 3118              	  BASIC: PAUSE expr 
 3119              	  suspend execution for 
 3120              	  expr milliseconds 
 3121              	************************/
 3122              	    _FUNC pause
 3123 0898 00B5FFF7 	    _CALL expression 
 3123      FEFF5DF8 
 3123      04EB
 3124 08a2 0F28     	    cmp r0,#TK_INTGR 
 3125 08a4 7FF4FEAF 	    bne syntax_error 
 3126 08a8 E069     	    ldr r0,[UPP,#TICKS]
 3127 08aa 0844     	    add r0,r1 
 3128 08ac E169     	1:  ldr r1,[UPP,#TICKS]
 3129 08ae 8842     	    cmp r0,r1 
 3130 08b0 FCD1     	    bne 1b     
 3131 08b2 7047     	    _RET 
 3132              	
 3133              	/***************************************************
 3134              	  BASIC: PMODE \c,pin,mode[,opt] 
 3135              	  configure a digital pin for input|output
 3136              	  paramters:
 3137              	    \c    port letter
 3138              	    pin   pin {0..15} 
 3139              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3140              	    for input mode:
 3141              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3142              	    for output mode:
 3143              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3144              	  use:
 3145              	    r2  opt
 3146              	    r3  mode 
 3147              	    T1  pin  
 3148              	    T2  port      
 3149              	***************************************************/
 3150              	      _FUNC pin_mode
 3151 08b4 4FF00300 	      mov r0,#TK_CHAR 
 3152 08b8 00B5FFF7 	      _CALL expect
 3152      FEFF5DF8 
 3152      04EB
 3153 08c2 0846     	      mov r0,r1 
 3154 08c4 00B5FFF7 	      _CALL upper 
 3154      FEFF5DF8 
 3154      04EB
 3155 08ce A0F14109 	      sub T2,r0,#'A'
 3156 08d2 4FF00800 	      mov r0,#TK_COMMA
 3157 08d6 00B5FFF7 	      _CALL expect 
 3157      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 83


 3157      04EB
 3158 08e0 00B5FFF7 	      _CALL arg_list
 3158      FEFF5DF8 
 3158      04EB
 3159 08ea 0228     	      cmp r0,#2 
 3160 08ec 3FF5FEAF 	      bmi syntax_error
 3161 08f0 0428     	      cmp r0,#4
 3162 08f2 01D4     	      bmi 1f 
 3163 08f4 FFF7FEBF 	      b syntax_error
 3164 08f8 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3165 08fc 0228     	      cmp r0,#2
 3166 08fe 02D0     	      beq 2f 
 3167              	// 3 parameters, pin,mode,opt  
 3168 0900 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3169 0904 01E0     	    b 4f  
 3170              	2: // 2 parameters, pin,mode 
 3171 0906 BCE80801 	    ldmia DP!,{r3,T1}
 3172 090a 4FF48060 	4:  mov r0,#0x400 
 3173 090e 00FB09F9 	    mul T2,r0 
 3174 0912 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3174      C4F20100 
 3175 091a 8144     	    add T2,r0 // port base address 
 3176              	// if input mode set pull in ODR 
 3177 091c 83B9     	    cbnz r3,2f 
 3178 091e 022A     	    cmp r2,#2
 3179 0920 0ED4     	    bmi 2f 
 3180 0922 4FF00100 	    mov r0,#1 
 3181 0926 4146     	    mov r1,T1 
 3182 0928 032A     	    cmp r2,#3 
 3183 092a 01D0     	    beq 1f
 3184 092c 01F11001 	    add r1,#16 //reset bit 
 3185 0930 00FA01F0 	1:  lsl r0,r1
 3186 0934 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3187 0938 032A     	    cmp r2,#3 
 3188 093a 01D4     	    bmi 2f 
 3189 093c A2F10102 	    sub r2,#1
 3190              	2: // set CNF|MODE bits GPIO_CRx 
 3191 0940 B8F1080F 	    cmp T1,#8 
 3192 0944 03D4     	    bmi 3f 
 3193 0946 A8F10808 	    sub T1,#8 
 3194 094a 09F10409 	    add T2,#4 //CRH 
 3195 094e 4FF00F00 	3:  mov r0,#15   
 3196 0952 4FEA8801 	    lsl r1,T1,#2 
 3197 0956 00FA01F0 	    lsl r0,r1
 3198 095a 6FEA0000 	    mvn r0,r0 // bitmask 
 3199 095e D9F80010 	    ldr r1,[T2]
 3200 0962 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3201              	// combine opt|mode     
 3202 0966 4FEA8200 	    lsl r0,r2,#2 
 3203 096a 40EA0300 	    orr r0,r3 // OPT|MODE 
 3204 096e 4FEA8803 	    lsl r3,T1,#2 
 3205 0972 00FA03F0 	    lsl r0,r3
 3206 0976 41EA0001 	    orr r1,r0   
 3207 097a C9F80010 	    str r1,[T2] // mode and option set
 3208 097e 7047     	    _RET 
 3209              	
 3210              	
ARM GAS  tinyBasic.s 			page 84


 3211              	/*****************************************
 3212              	  BASIC: PEEK8 (expr)  
 3213              	  return byte value at address 
 3214              	*****************************************/
 3215              	    _FUNC peek8
 3216 0980 00B5FFF7 	    _CALL func_args  
 3216      FEFF5DF8 
 3216      04EB
 3217 098a 0128     	    cmp r0,#1
 3218 098c 3FF5FEAF 	    bmi syntax_error
 3219 0990 5CF8041B 	    _POP r1 
 3220 0994 0978     	    ldrb r1,[r1]
 3221 0996 4FF00F00 	    mov r0,#TK_INTGR     
 3222 099a 7047     	    _RET 
 3223              	
 3224              	/*****************************************
 3225              	  BASIC: PEEK16 (expr)  
 3226              	  return byte value at address 
 3227              	*****************************************/
 3228              	    _FUNC peek16
 3229 099c 00B5FFF7 	    _CALL func_args  
 3229      FEFF5DF8 
 3229      04EB
 3230 09a6 0128     	    cmp r0,#1
 3231 09a8 3FF5FEAF 	    bmi syntax_error
 3232 09ac 5CF8041B 	    _POP r1 
 3233 09b0 0988     	    ldrh r1,[r1]
 3234 09b2 4FF00F00 	    mov r0,#TK_INTGR     
 3235 09b6 7047     	    _RET 
 3236              	
 3237              	/*****************************************
 3238              	  BASIC: PEEK32 (expr)  
 3239              	  return byte value at address 
 3240              	*****************************************/
 3241              	    _FUNC peek32
 3242 09b8 00B5FFF7 	    _CALL func_args  
 3242      FEFF5DF8 
 3242      04EB
 3243 09c2 0128     	    cmp r0,#1
 3244 09c4 3FF5FEAF 	    bmi syntax_error
 3245 09c8 5CF8041B 	    _POP r1 
 3246 09cc 0968     	    ldr r1,[r1]
 3247 09ce 4FF00F00 	    mov r0,#TK_INTGR     
 3248 09d2 7047     	    _RET 
 3249              	
 3250              	
 3251              	/**********************************
 3252              	  BASIC: POKE8 addr,byte
 3253              	  store byte at addr   
 3254              	**********************************/
 3255              	    _FUNC poke8
 3256 09d4 00B5FFF7 	    _CALL arg_list
 3256      FEFF5DF8 
 3256      04EB
 3257 09de 0228     	    cmp r0,#2 
 3258 09e0 7FF4FEAF 	    bne syntax_error
 3259 09e4 BCE80300 	    ldmia DP!,{r0,r1} 
ARM GAS  tinyBasic.s 			page 85


 3260 09e8 0870     	    strb r0,[r1]
 3261 09ea 7047     	    _RET 
 3262              	
 3263              	/**********************************
 3264              	  BASIC: POKE16 addr,hword
 3265              	  store hword at addr   
 3266              	**********************************/
 3267              	    _FUNC poke16
 3268 09ec 00B5FFF7 	    _CALL arg_list
 3268      FEFF5DF8 
 3268      04EB
 3269 09f6 0228     	    cmp r0,#2 
 3270 09f8 7FF4FEAF 	    bne syntax_error
 3271 09fc BCE80300 	    ldmia DP!,{r0,r1} 
 3272 0a00 0880     	    strh r0,[r1]
 3273 0a02 7047     	    _RET 
 3274              	
 3275              	/**********************************
 3276              	  BASIC: POKE32 addr,word
 3277              	  store word at addr   
 3278              	**********************************/
 3279              	    _FUNC poke32
 3280 0a04 00B5FFF7 	    _CALL arg_list 
 3280      FEFF5DF8 
 3280      04EB
 3281 0a0e 0228     	    cmp r0,#2 
 3282 0a10 7FF4FEAF 	    bne syntax_error
 3283 0a14 BCE80300 	    ldmia DP!,{r0,r1} 
 3284 0a18 0860     	    str r0,[r1]
 3285 0a1a 7047     	    _RET 
 3286              	
 3287              	
 3288              	
 3289              	/****************************
 3290              	  BASIC: PRINT|? arg_list 
 3291              	  print list of arguments 
 3292              	****************************/
 3293              	    _FUNC print
 3294 0a1c 88EA0808 	    eor T1,T1 
 3295 0a20 00B5FFF7 	0:  _CALL expression
 3295      FEFF5DF8 
 3295      04EB
 3296 0a2a 0F28     	    cmp r0,#TK_INTGR
 3297 0a2c 07D1     	    bne 1f 
 3298 0a2e 0846     	    mov r0,r1
 3299 0a30 A169     	    ldr r1,[UPP,#BASE]
 3300 0a32 00B5FFF7 	    _CALL print_int
 3300      FEFF5DF8 
 3300      04EB
 3301 0a3c 3DE0     	    b 8f 
 3302 0a3e 00B5FFF7 	1:  _CALL next_token
 3302      FEFF5DF8 
 3302      04EB
 3303 0a48 0128     	    cmp r0,#TK_COLON 
 3304 0a4a 04DC     	    bgt 2f
 3305 0a4c D4F800A0 	    _UNGET_TOKEN 
 3305      D4F808B0 
ARM GAS  tinyBasic.s 			page 86


 3306 0a54 4BE0     	    b print_exit
 3307 0a56 0228     	2:  cmp r0,#TK_QSTR 
 3308 0a58 06D1     	    bne 4f
 3309 0a5a 0846     	    mov r0,r1 
 3310 0a5c 00B5FFF7 	    _CALL uart_puts  
 3310      FEFF5DF8 
 3310      04EB
 3311 0a66 28E0     	    b 8f 
 3312 0a68 0D28     	4:  cmp r0,#TK_CFUNC
 3313 0a6a 05D1     	    bne 5f
 3314 0a6c 0846     	    mov r0,r1
 3315 0a6e 00B5FFF7 	    _CALL execute 
 3315      FEFF5DF8 
 3315      04EB
 3316 0a78 0328     	5:  cmp r0,#TK_CHAR 
 3317 0a7a 06D1     	    bne 6f 
 3318 0a7c 0846     	    mov r0,r1 
 3319 0a7e 00B5FFF7 	    _CALL uart_putc 
 3319      FEFF5DF8 
 3319      04EB
 3320 0a88 17E0     	    b 8f 
 3321 0a8a 0A28     	6:  cmp r0,#TK_SHARP
 3322 0a8c 04D0     	    beq 6f 
 3323 0a8e D4F800A0 	    _UNGET_TOKEN
 3323      D4F808B0 
 3324 0a96 2AE0     	    b print_exit  
 3325 0a98 00B5FFF7 	6:  _CALL next_token
 3325      FEFF5DF8 
 3325      04EB
 3326 0aa2 0A28     	    cmp r0,#TK_SHARP 
 3327 0aa4 05D1     	    bne 7f
 3328 0aa6 00B5FFF7 	    _CALL tabulation 
 3328      FEFF5DF8 
 3328      04EB
 3329 0ab0 03E0     	    b 8f 
 3330 0ab2 0F28     	7:  cmp r0,#TK_INTGR 
 3331 0ab4 7FF4FEAF 	    bne syntax_error 
 3332 0ab8 6164     	    str r1,[UPP,#TAB_WIDTH]
 3333 0aba 88EA0808 	8:  eor T1,T1 
 3334 0abe 00B5FFF7 	    _CALL next_token 
 3334      FEFF5DF8 
 3334      04EB
 3335 0ac8 0828     	    cmp r0,#TK_COMMA 
 3336 0aca 02D1     	    bne 8f 
 3337 0acc 4FF0FF38 	    mov T1,#-1
 3338 0ad0 A6E7     	    b 0b
 3339 0ad2 0928     	8:  cmp r0,#TK_SEMIC 
 3340 0ad4 07D1     	    bne 8f 
 3341 0ad6 00B5FFF7 	    _CALL tabulation 
 3341      FEFF5DF8 
 3341      04EB
 3342 0ae0 4FF0FF38 	    mov T1,#-1
 3343 0ae4 9CE7     	    b 0b     
 3344 0ae6 D4F800A0 	8: _UNGET_TOKEN 
 3344      D4F808B0 
 3345              	print_exit:
 3346 0aee 18EA0808 	    ands T1,T1 
ARM GAS  tinyBasic.s 			page 87


 3347 0af2 06D1     	    bne 9f
 3348 0af4 4FF00D00 	    mov r0,#CR 
 3349 0af8 00B5FFF7 	    _CALL uart_putc 
 3349      FEFF5DF8 
 3349      04EB
 3350 0b02 7047     	9:  _RET 
 3351              	
 3352              	/**************************************
 3353              	  BASIC: QKEY
 3354              	  check if key pressed 
 3355              	**************************************/ 
 3356              	    _FUNC qkey
 3357 0b04 4FF00001 	    mov r1,#0
 3358 0b08 00B5FFF7 	    _CALL uart_qkey
 3358      FEFF5DF8 
 3358      04EB
 3359 0b12 01D0     	    beq 9f 
 3360 0b14 4FF0FF31 	    mov r1,#-1 
 3361 0b18 4FF00F00 	9:  mov r0,#TK_INTGR
 3362 0b1c 7047     	    _RET 
 3363              	
 3364              	/******************************************
 3365              	  BASIC RANDOM(expr)
 3366              	  generate random number between 0..expr-1
 3367              	******************************************/
 3368 0b1e 00BF     	    _FUNC random
 3369 0b20 00B5FFF7 	    _CALL func_args 
 3369      FEFF5DF8 
 3369      04EB
 3370 0b2a 0128     	    cmp r0,#1
 3371 0b2c 7FF4FEAF 	    bne syntax_error 
 3372 0b30 606A     	    ldr r0,[UPP,#SEED]
 3373 0b32 4FEA4031 	    lsl r1,r0,#13
 3374 0b36 81EA0001 	    eor r1,r0
 3375 0b3a 4FEA5140 	    lsr r0,r1,#17
 3376 0b3e 81EA0001 	    eor r1,r0
 3377 0b42 4FEA4110 	    lsl r0,r1,#5
 3378 0b46 81EA0001 	    eor r1,r0
 3379 0b4a 6162     	    str r1,[UPP,#SEED]
 3380 0b4c 5CF8040B 	    _POP r0 
 3381 0b50 B1FBF0F2 	    udiv r2,r1,r0  
 3382 0b54 00FB02F2 	    mul r2,r0 
 3383 0b58 A1EB0201 	    sub r1,r2 
 3384 0b5c 4FF00F00 	    mov r0,#TK_INTGR
 3385 0b60 7047     	    _RET 
 3386              	
 3387              	/****************************************
 3388              	  BASIC: RSHIFT(expr1,expr2)
 3389              	  shift left expr1 de expr2 bits 
 3390              	****************************************/
 3391 0b62 00BF     	    _FUNC rshift
 3392 0b64 00B5FFF7 	    _CALL func_args
 3392      FEFF5DF8 
 3392      04EB
 3393 0b6e 0228     	    cmp r0,#2 
 3394 0b70 7FF4FEAF 	    bne syntax_error
 3395 0b74 BCE80300 	    ldmia DP!,{r0,r1}
ARM GAS  tinyBasic.s 			page 88


 3396 0b78 21FA00F1 	    lsr r1,r0  
 3397 0b7c 4FF00F00 	    mov r0,#TK_INTGR
 3398 0b80 7047     	    _RET 
 3399              	
 3400              	/****************************
 3401              	  BASIC: RUN 
 3402              	  execute program in memory
 3403              	****************************/
 3404 0b82 00BF     	    _FUNC run
 3405 0b84 206C10F0 	    _CLO 
 3405      010F03D0 
 3405      4FF00700 
 3405      FFF7FEBF 
 3406 0b94 206B     	    ldr r0,[UPP,#TXTBGN]
 3407 0b96 616B     	    ldr r1,[UPP,#TXTEND]
 3408 0b98 8842     	    cmp r0,r1
 3409 0b9a 1BD0     	    beq 9f
 3410 0b9c 216C     	    ldr r1,[UPP,#FLAGS]
 3411 0b9e 11F0080F 	    tst r1,#FSTOP
 3412 0ba2 09D0     	    beq 1f
 3413 0ba4 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3414 0ba8 6060     	    str r0,[UPP,#COUNT]
 3415 0baa 206C     	    ldr r0,[UPP,#FLAGS]
 3416 0bac 4FF00901 	    mov r1,#FRUN+FSTOP
 3417 0bb0 80EA0100 	    eor r0,r1
 3418 0bb4 2064     	    str r0,[UPP,#FLAGS] 
 3419 0bb6 0DE0     	    b 9f  
 3420 0bb8 8178     	1:  ldrb r1,[r0,#2]
 3421 0bba 6160     	    str r1,[UPP,#COUNT]
 3422 0bbc 8346     	    mov BPTR,r0 
 3423 0bbe 4FF0030A 	    mov IN,#3
 3424              	    // reset dataline pointers 
 3425 0bc2 80EA0000 	    eor r0,r0 
 3426 0bc6 E060     	    str r0,[UPP,#DATAPTR]
 3427 0bc8 2061     	    str r0,[UPP,#DATA]
 3428 0bca 6061     	    str r0,[UPP,#DATALEN] 
 3429 0bcc 206C     	    ldr r0,[UPP,#FLAGS]
 3430 0bce 40F00100 	    orr r0,#FRUN 
 3431 0bd2 2064     	    str r0,[UPP,#FLAGS]
 3432 0bd4 7047     	9:  _RET 
 3433              	
 3434 0bd6 00BF     	    _FUNC save
 3435 0bd8 7047     	    _RET 
 3436              	
 3437 0bda 00BF     	    _FUNC show
 3438 0bdc 7047     	    _RET 
 3439              	
 3440              	/*******************************
 3441              	  BASIC: SIZE 
 3442              	  return RAM free bytes 
 3443              	*******************************/
 3444 0bde 00BF     	    _FUNC size
 3445 0be0 606B     	    ldr r0,[UPP,#TXTEND]
 3446 0be2 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3447 0be6 A1EB0001 	    sub r1,R0
 3448 0bea 4FF00F00 	    mov r0,#TK_INTGR
 3449 0bee 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 89


 3450              	
 3451              	/*********************************
 3452              	  BASIC: SLEEP 
 3453              	  place MCU lowest power mode 
 3454              	  wait for external interrpt or
 3455              	  reset.
 3456              	*********************************/
 3457              	    _FUNC sleep
 3458 0bf0 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3458      CEF20000 
 3459 0bf8 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3460 0bfc 0160     	    str r1,[r0]
 3461 0bfe 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3461      C4F20000 
 3462 0c06 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3463 0c0a 0160     	    str r1,[r0]
 3464 0c0c 20BF     	    wfe 
 3465 0c0e 7047     	    _RET 
 3466              	
 3467              	    _FUNC spi_read
 3468 0c10 7047     	    _RET 
 3469              	
 3470 0c12 00BF     	    _FUNC spi_enable
 3471 0c14 7047     	    _RET 
 3472              	
 3473 0c16 00BF     	    _FUNC spi_select
 3474 0c18 7047     	    _RET 
 3475              	
 3476 0c1a 00BF     	    _FUNC spi_write
 3477 0c1c 7047     	    _RET 
 3478              	
 3479              	/******************************
 3480              	  BASIC: STOP 
 3481              	  stop program executre but 
 3482              	  keep execution state for 
 3483              	  resume 
 3484              	******************************/
 3485 0c1e 00BF     	    _FUNC stop
 3486 0c20 206C10F0 	    _RTO 
 3486      010F03D1 
 3486      4FF00700 
 3486      FFF7FEBF 
 3487 0c30 6068     	    ldr r0,[UPP,#COUNT]
 3488 0c32 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3489 0c36 206C     	    ldr r0,[UPP,#FLAGS]
 3490 0c38 4FF00901 	    mov r1,#FRUN+FSTOP
 3491 0c3c 80EA0100 	    eor r0,r1
 3492 0c40 2064     	    str r0,[UPP,#FLAGS]
 3493 0c42 8AEA0A0A 	    eor IN,IN 
 3494 0c46 8BEA0B0B 	    eor BPTR,BPTR 
 3495 0c4a C4F804A0 	    str IN,[UPP,#COUNT]
 3496 0c4e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3497 0c52 C4F808A0 	    str IN,[UPP,#BASICPTR]
 3498 0c56 4FF4A040 	    _MOV32 r0,RAM_END
 3498      C2F20000 
 3499 0c5e 8546     	    mov sp,r0
 3500 0c60 FFF7FEBF 	    b cmd_line 
ARM GAS  tinyBasic.s 			page 90


 3501              	
 3502              	
 3503              	/**************************
 3504              	  BASIC: TICKS 
 3505              	  return msec counter
 3506              	**************************/  
 3507              	    _FUNC get_ticks
 3508 0c64 E169     	    ldr r1,[UPP,#TICKS]
 3509 0c66 4FF00F00 	    mov r0,#TK_INTGR
 3510 0c6a 7047     	    _RET  
 3511              	
 3512              	/*************************
 3513              	  BASIC: TIMER expr 
 3514              	  set countdown timer 
 3515              	************************/
 3516              	    _FUNC set_timer
 3517 0c6c 00B5FFF7 	    _CALL expression 
 3517      FEFF5DF8 
 3517      04EB
 3518 0c76 0F28     	    cmp r0,#TK_INTGR
 3519 0c78 7FF4FEAF 	    bne syntax_error 
 3520 0c7c 2162     	    str r1,[UPP,#TIMER]
 3521 0c7e 7047     	    _RET 
 3522              	
 3523              	/***************************
 3524              	  BASIC: TIMEOUT
 3525              	  check for timer expiration 
 3526              	  return -1 true || 0 false
 3527              	****************************/
 3528              	    _FUNC timeout
 3529 0c80 81EA0101 	    eor r1,r1 
 3530 0c84 206A     	    ldr r0,[UPP,#TIMER]
 3531 0c86 08B9     	    cbnz r0,9f 
 3532 0c88 6FEA0101 	    mvn r1,r1 
 3533 0c8c 4FF00F00 	9:  mov r0,#TK_INTGR    
 3534 0c90 7047     	    _RET 
 3535              	
 3536 0c92 00BF     	    _FUNC tone
 3537 0c94 7047     	    _RET 
 3538              	
 3539              	/***************************
 3540              	  BASIC: UBOUND 
 3541              	  return last indice of @
 3542              	  output:
 3543              	    r0  TK_INTGR 
 3544              	    r1  +int 
 3545              	**************************/
 3546 0c96 00BF     	    _FUNC ubound
 3547 0c98 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3548 0c9c 606B     	    ldr r0,[UPP,#TXTEND]
 3549 0c9e A1EB0001 	    sub r1,r0 
 3550 0ca2 4FEA9101 	    lsr r1,#2
 3551 0ca6 4FF00F00 	    mov r0,#TK_INTGR 
 3552 0caa 7047     	    _RET 
 3553              	
 3554              	/****************************
 3555              	  BASIC: UFLASH 
ARM GAS  tinyBasic.s 			page 91


 3556              	  return user flash address
 3557              	*****************************/
 3558              	    _FUNC uflash
 3559 0cac 3C49     	    ldr r1,=user
 3560 0cae 4FF00F00 	    mov r0,#TK_INTGR 
 3561 0cb2 7047     	    _RET 
 3562              	
 3563              	
 3564              	/************************************
 3565              	  BASIC: UNTIL relation 
 3566              	  close a DO..UNTIL loop 
 3567              	  loop until relation come true 
 3568              	************************************/
 3569              	    _FUNC until
 3570 0cb4 00B5FFF7 	    _CALL relation 
 3570      FEFF5DF8 
 3570      04EB
 3571 0cbe 11B1     	    cbz r1,9f
 3572 0cc0 0CF10C0C 	    add DP,#12
 3573 0cc4 7047     	    _RET  
 3574 0cc6 9CE8010C 	9:  ldmia DP,{r0,IN,BPTR}
 3575 0cca 6060     	    str r0,[UPP,#COUNT]
 3576 0ccc 7047     	    _RET 
 3577              	
 3578 0cce 00BF     	    _FUNC usr
 3579 0cd0 7047     	    _RET  
 3580              	
 3581              	/*************************************
 3582              	  BASIC: WAIT addr,expr1[,expr2] 
 3583              	  wait until *addr&expr1 is not null 
 3584              	  or until (*addr&expr1)^expr2 is null 
 3585              	***************************************/
 3586 0cd2 00BF     	    _FUNC wait
 3587 0cd4 00B5FFF7 	    _CALL arg_list 
 3587      FEFF5DF8 
 3587      04EB
 3588 0cde 0228     	    cmp r0,#2
 3589 0ce0 03D0     	    beq 2f 
 3590 0ce2 0328     	    cmp r0,#3
 3591 0ce4 07D0     	    beq 4f
 3592 0ce6 FFF7FEBF 	    b syntax_error 
 3593 0cea BCE80300 	2:  ldmia DP!,{r0,r1}
 3594 0cee 0A88     	3:  ldrh r2,[r1]
 3595 0cf0 0240     	    ands r2,r0 
 3596 0cf2 FCD0     	    beq 3b 
 3597 0cf4 06E0     	    b 9f 
 3598 0cf6 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 3599 0cfa 1388     	5:  ldrh r3,[r2]
 3600 0cfc 83EA0003 	    eor r3,r0
 3601 0d00 0B40     	    ands r3,r1 
 3602 0d02 FAD0     	    beq 5b 
 3603 0d04 7047     	9:  _RET 
 3604              	
 3605              	/*********************************************
 3606              	  BASIC: WORDS 
 3607              	  print list of BASIC WORDS in dictionary 
 3608              	  use:
ARM GAS  tinyBasic.s 			page 92


 3609              	    r0,r1,T1,T2  
 3610              	********************************************/
 3611 0d06 00BF     	    _FUNC words
 3612 0d08 206C10F0 	    _CLO 
 3612      010F03D0 
 3612      4FF00700 
 3612      FFF7FEBF 
 3613 0d18 DFF88880 	    ldr T1,=kword_dict
 3614 0d1c 89EA0909 	    eor T2,T2 
 3615              	1:  
 3616 0d20 4046     	    mov r0,T1
 3617 0d22 00B5FFF7 	    _CALL strlen
 3617      FEFF5DF8 
 3617      04EB
 3618 0d2c F0B1     	    cbz r0,9f 
 3619 0d2e 8144     	    add T2,r0 
 3620 0d30 B9F1500F 	    cmp T2,#80 
 3621 0d34 08D4     	    bmi 2f
 3622 0d36 89EA0909 	    eor T2,T2  
 3623 0d3a 4FF00D00 	    mov r0,#CR 
 3624 0d3e 00B5FFF7 	    _CALL uart_putc 
 3624      FEFF5DF8 
 3624      04EB
 3625 0d48 4046     	2:  mov r0,T1 
 3626 0d4a 00B5FFF7 	    _CALL uart_puts 
 3626      FEFF5DF8 
 3626      04EB
 3627 0d54 4FF02000 	    mov r0,#SPACE
 3628 0d58 09F10109 	    add T2,#1  
 3629 0d5c 00B5FFF7 	    _CALL uart_putc 
 3629      FEFF5DF8 
 3629      04EB
 3630 0d66 58F80C8C 	    ldr T1,[T1,#-12]
 3631 0d6a D9E7     	    b 1b 
 3632 0d6c 7047     	9:  _RET 
 3633              	
 3634 0d6e 00BF     	    _FUNC write
 3635 0d70 7047     	    _RET 
 3636              	
 3637              	/**************************************
 3638              	  BASIC: XOR(expr1,expr2)
 3639              	  binary exclusive or between 2 expressions
 3640              	**************************************/
 3641 0d72 00BF     	    _FUNC bit_xor
 3642 0d74 00B5FFF7 	    _CALL func_args
 3642      FEFF5DF8 
 3642      04EB
 3643 0d7e 0228     	    cmp r0,#2
 3644 0d80 7FF4FEAF 	    bne syntax_error
 3645 0d84 5CF8040B 	    _POP r0
 3646 0d88 5CF8041B 	    _POP r1 
 3647 0d8c 81EA0001 	    eor r1,r0 
 3648 0d90 4FF00F00 	    mov r0,#TK_INTGR
 3649 0d94 7047     	    _RET 
 3650              	
 3651 0d96 00BF     	    _FUNC transmit
 3652 0d98 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 93


 3653              	
 3654 0d9a 00BF     	    _FUNC receive
 3655 0d9c 7047     	    _RET  
 3656              	
 3657 0d9e 0000     	  .section .rodata.user
 3658              	  .p2align 10 
 3659              	user:
 3660 0000 55534552 	  .ascii "USER"
 3661              	
 3662              	/*************************************************
 3663              	   extra FLASH memory not used by Tiny BASIC
 3664              	   is used to save BASIC programs.
 3665              	************************************************/
 3666 0004 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3666      00000000 
 3666      00000000 
 3666      00000000 
 3666      00000000 
 3667              	  .section .rodata.fs
 3668              	FILE_SYSTEM: // file system start here
 3669 0000 4653     	  .ascii "FS" 
ARM GAS  tinyBasic.s 			page 94


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 95


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:145    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:146    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:147    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:148    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:151    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:152    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:153    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:154    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:155    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:156    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:157    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:158    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:161    *ABS*:0000000040007004 PWR_CSR_ADR
ARM GAS  tinyBasic.s 			page 96


       stm32f103.inc:162    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:163    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:164    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:165    *ABS*:0000000000000100 PWR_CSR_EWUP
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
ARM GAS  tinyBasic.s 			page 97


           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:55     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:56     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:57     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:59     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:60     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
ARM GAS  tinyBasic.s 			page 98


      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:106    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:112    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:114    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:120    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:137    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:138    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:139    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:140    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:141    *ABS*:0000000000000010 DATA
      tbi_macros.inc:142    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:143    *ABS*:0000000000000018 BASE
      tbi_macros.inc:144    *ABS*:000000000000001c TICKS
      tbi_macros.inc:145    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:146    *ABS*:0000000000000024 SEED
      tbi_macros.inc:147    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:148    *ABS*:000000000000002c FFREE
      tbi_macros.inc:149    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:150    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:151    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:152    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:153    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:154    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:155    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:156    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:157    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:158    *ABS*:0000000000000060 VARS
      tbi_macros.inc:159    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:160    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:161    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:164    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:165    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:166    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:167    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:168    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:169    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:170    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:172    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:174    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:175    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
ARM GAS  tinyBasic.s 			page 99


       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATA_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATALN_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DEC_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DIR_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DO_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FOR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FORGET_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 GOSUB_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOTO_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 HEX_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 IF_IDX
       cmd_index.inc:51     *ABS*:000000000000001a INP_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INPUT_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INVERT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d KEY_IDX
       cmd_index.inc:55     *ABS*:000000000000001e LET_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LIST_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LOAD_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOG2_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e POKE8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE16_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PRT_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 QKEY_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 READ_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 REM_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 REST_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 RET_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 RND_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 RSHIFT_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RUN_IDX
       cmd_index.inc:83     *ABS*:000000000000003a SAVE_IDX
       cmd_index.inc:84     *ABS*:000000000000003b SHOW_IDX
       cmd_index.inc:85     *ABS*:000000000000003c SIZE_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SLEEP_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SPIRD_IDX
ARM GAS  tinyBasic.s 			page 100


       cmd_index.inc:88     *ABS*:000000000000003f SPIEN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPISEL_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SPIWR_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STEP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STOP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 THEN_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 TICKS_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TIMER_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TMROUT_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TO_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TONE_IDX
       cmd_index.inc:99     *ABS*:000000000000004a UBOUND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UFLASH_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UNTIL_IDX
       cmd_index.inc:102    *ABS*:000000000000004d USR_IDX
       cmd_index.inc:103    *ABS*:000000000000004e WAIT_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WORDS_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 XOR_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XTRMT_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1528   .text:0000000000000c34 pad
         tinyBasic.s:616    .text:000000000000045c parse_int
         tinyBasic.s:1181   .text:00000000000008c4 tb_error
         tinyBasic.s:452    .text:00000000000002c4 comp_token
         tinyBasic.s:526    .text:00000000000003b0 store_r0
         tinyBasic.s:710    .text:00000000000004fc skip
         tinyBasic.s:729    .text:0000000000000514 upper
         tinyBasic.s:560    .text:00000000000003f0 is_special
         tinyBasic.s:582    .text:0000000000000434 token_ofs
         tinyBasic.s:467    .text:0000000000000304 tok_idx0
         tinyBasic.s:529    .text:00000000000003b6 try_number
         tinyBasic.s:471    .text:0000000000000306 single
         tinyBasic.s:577    .text:0000000000000425 tok_single
         tinyBasic.s:475    .text:000000000000030e lt
         tinyBasic.s:481    .text:000000000000031c gt
         tinyBasic.s:494    .text:0000000000000340 bkslash
         tinyBasic.s:543    .text:00000000000003ea token_exit
         tinyBasic.s:501    .text:0000000000000356 prt_cmd
ARM GAS  tinyBasic.s 			page 101


         tinyBasic.s:507    .text:0000000000000368 quote
         tinyBasic.s:649    .text:0000000000000494 parse_quote
         tinyBasic.s:512    .text:000000000000037c tick
         tinyBasic.s:924    .text:000000000000061c parse_keyword
         tinyBasic.s:574    .text:0000000000000410 char_list
         tinyBasic.s:575    .text:0000000000000410 $d
         tinyBasic.s:583    .text:0000000000000434 $d
         tinyBasic.s:600    .text:000000000000045c $t
         tinyBasic.s:883    .text:00000000000005d0 atoi
         tinyBasic.s:680    .text:00000000000004c8 get_escaped_char
         tinyBasic.s:697    .text:00000000000004f2 escaped
         tinyBasic.s:697    .text:00000000000004f2 $d
         tinyBasic.s:710    .text:00000000000004fa $t
         tinyBasic.s:747    .text:0000000000000524 is_digit
         tinyBasic.s:771    .text:0000000000000540 is_hex
         tinyBasic.s:796    .text:0000000000000564 is_bit
         tinyBasic.s:817    .text:0000000000000580 is_alpha
         tinyBasic.s:842    .text:00000000000005a0 is_num
         tinyBasic.s:863    .text:00000000000005b8 is_alnum
         tinyBasic.s:1166   .text:00000000000008bc syntax_error
         tinyBasic.s:2205   .rodata.dictionary:0000000000000638 kword_dict
         tinyBasic.s:1345   .text:0000000000000a7c search_dict
         tinyBasic.s:975    .text:00000000000006a4 cmd_name
         tinyBasic.s:1001   .text:00000000000006c8 decompile_line
         tinyBasic.s:1018   .text:000000000000070e decomp_loop
         tinyBasic.s:1621   .text:0000000000000cd8 next_token
         tinyBasic.s:1123   .text:000000000000086d single_char
         tinyBasic.s:1119   .text:0000000000000864 ge_str
         tinyBasic.s:1120   .text:0000000000000867 le_str
         tinyBasic.s:1121   .text:000000000000086a ne_str
         tinyBasic.s:1119   .text:0000000000000864 $d
         tinyBasic.s:1143   .text:00000000000008a4 modulo
         tinyBasic.s:1143   .text:00000000000008a4 $t
         tinyBasic.s:1223   .text:000000000000097c compile_error
         tinyBasic.s:1185   .text:00000000000008cc rt_error
         tinyBasic.s:1240   .text:00000000000009d6 rt_error_msg
         tinyBasic.s:1245   .text:0000000000000a02 err_msg
         tinyBasic.s:1241   .text:00000000000009e6 lineno_msg
         tinyBasic.s:1242   .text:00000000000009ed line_adr_msg
         tinyBasic.s:1243   .text:00000000000009f8 token_at_msg
         tinyBasic.s:2585   .text.basic:00000000000002d6 dump01
         tinyBasic.s:1541   .text:0000000000000c44 warm_start
         tinyBasic.s:1240   .text:00000000000009d6 $d
         tinyBasic.s:1253   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1254   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1255   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1256   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1257   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1258   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1259   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1260   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1261   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1262   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1263   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1264   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1265   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1266   .rodata.tb_error:000000000000010e err_no_fspace
ARM GAS  tinyBasic.s 			page 102


         tinyBasic.s:1267   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1268   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1270   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1271   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1272   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1282   .text:0000000000000a46 $t
         tinyBasic.s:1282   .text:0000000000000a48 skip_line
         tinyBasic.s:1299   .text:0000000000000a50 BTGL
         tinyBasic.s:1317   .text:0000000000000a54 kword_cmp
         tinyBasic.s:1383   .text:0000000000000aba cold_start
         tinyBasic.s:1404   .text:0000000000000b0c src_addr
         tinyBasic.s:1406   .text:0000000000000b10 dest_addr
         tinyBasic.s:1527   .text:0000000000000c30 tib
         tinyBasic.s:1408   .text:0000000000000b14 sysvar_size
         tinyBasic.s:1419   .text:0000000000000b18 prt_version
         tinyBasic.s:1476   .text:0000000000000bc0 clear_basic
         tinyBasic.s:1405   .text:0000000000000b0c $d
         tinyBasic.s:2084   .rodata:0000000000000000 uzero
         tinyBasic.s:2108   .rodata:00000000000000cc ulast
         tinyBasic.s:1419   .text:0000000000000b18 $t
         tinyBasic.s:1443   .text:0000000000000b80 version_msg
         tinyBasic.s:1445   .text:0000000000000ba0 version
         tinyBasic.s:1444   .text:0000000000000b80 $d
         tinyBasic.s:1460   .text:0000000000000ba4 clear_vars
         tinyBasic.s:1510   .text:0000000000000c04 warm_init
         tinyBasic.s:1526   .text:0000000000000c2c dstack
         tinyBasic.s:1525   .text:0000000000000c28 mstack
         tinyBasic.s:1525   .text:0000000000000c28 $d
         tinyBasic.s:1529   .text:0000000000000c38 array
         tinyBasic.s:1530   .text:0000000000000c3c ready
         tinyBasic.s:1561   .text:0000000000000c5c cmd_line
         tinyBasic.s:1572   .text:0000000000000c8c interpreter
         tinyBasic.s:1605   .text:0000000000000ccc execute
         tinyBasic.s:2907   .text.basic:0000000000000602 let_var
         tinyBasic.s:2912   .text.basic:000000000000060e let_array
         tinyBasic.s:2213   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1627   .text:0000000000000ce6 new_line
         tinyBasic.s:1631   .text:0000000000000cf0 end_of_line
         tinyBasic.s:1678   .text:0000000000000d68 tok_jmp
         tinyBasic.s:1679   .text:0000000000000d68 $d
         tinyBasic.s:1693   .text:0000000000000da8 $t
         tinyBasic.s:1708   .text:0000000000000da8 expect
         tinyBasic.s:1727   .text:0000000000000dc4 func_args
         tinyBasic.s:1747   .text:0000000000000df0 arg_list
         tinyBasic.s:1905   .text:0000000000000f90 expression
         tinyBasic.s:1781   .text:0000000000000e30 factor
         tinyBasic.s:2013   .text:000000000000107c get_array_element
         tinyBasic.s:2051   .text:00000000000010a4 get_var
         tinyBasic.s:1854   .text:0000000000000f14 term
         tinyBasic.s:1947   .text:0000000000000ff8 relation
         tinyBasic.s:1994   .text:0000000000001072 relop_jmp
         tinyBasic.s:1966   .text:0000000000001042 rel_idx0
         tinyBasic.s:1967   .text:0000000000001042 rel_eq
         tinyBasic.s:1984   .text:0000000000001058 rel_false
         tinyBasic.s:1970   .text:0000000000001046 rel_lt
         tinyBasic.s:1973   .text:000000000000104a rel_le
         tinyBasic.s:1976   .text:000000000000104e rel_gt
ARM GAS  tinyBasic.s 			page 103


         tinyBasic.s:1979   .text:0000000000001052 rel_ge
         tinyBasic.s:1982   .text:0000000000001056 rel_diff
         tinyBasic.s:1995   .text:0000000000001072 $d
         tinyBasic.s:2033   .text:0000000000001090 set_array_element
         tinyBasic.s:2069   .text:00000000000010b4 set_var
         tinyBasic.s:3668   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2105   .rodata:0000000000000050 $d
         tinyBasic.s:2115   *ABS*:0000000000000000 link
         tinyBasic.s:2116   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2206   .rodata.dictionary:0000000000000638 LINK
         tinyBasic.s:2117   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2201   .rodata.dictionary:000000000000062c first_link
         tinyBasic.s:2247   .text.basic:0000000000000000 abs
         tinyBasic.s:2259   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2262   .text.basic:000000000000002c analog_read
         tinyBasic.s:2269   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2284   .text.basic:0000000000000054 ascii
         tinyBasic.s:2301   .text.basic:0000000000000098 autorun
         tinyBasic.s:2304   .text.basic:000000000000009c awu
         tinyBasic.s:2312   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2334   .text.basic:00000000000000c4 bit_reset
         tinyBasic.s:2359   .text.basic:00000000000000f0 bit_set
         tinyBasic.s:2399   .text.basic:0000000000000140 bit_test
         tinyBasic.s:2383   .text.basic:0000000000000118 bit_toggle
         tinyBasic.s:2422   .text.basic:0000000000000180 char
         tinyBasic.s:2440   .text.basic:00000000000001a0 data_line
         tinyBasic.s:2545   .text.basic:0000000000000298 dec_base
         tinyBasic.s:2550   .text.basic:00000000000002a0 directory
         tinyBasic.s:2557   .text.basic:00000000000002a4 do_loop
         tinyBasic.s:2573   .text.basic:00000000000002ac dump
         tinyBasic.s:2625   .text.basic:0000000000000360 cmd_end
         tinyBasic.s:2636   .text.basic:000000000000036c for
         tinyBasic.s:2629   .text.basic:0000000000000368 forget
         tinyBasic.s:2716   .text.basic:0000000000000420 gosub
         tinyBasic.s:2748   .text.basic:0000000000000464 goto
         tinyBasic.s:2766   .text.basic:0000000000000494 hex_base
         tinyBasic.s:2778   .text.basic:00000000000004a0 if
         tinyBasic.s:3062   .text.basic:00000000000007d0 inp
         tinyBasic.s:2797   .text.basic:00000000000004b8 input_var
         tinyBasic.s:2865   .text.basic:00000000000005b0 invert
         tinyBasic.s:2884   .text.basic:00000000000005d8 key
         tinyBasic.s:2900   .text.basic:00000000000005ec let
         tinyBasic.s:2943   .text.basic:0000000000000678 list
         tinyBasic.s:2991   .text.basic:000000000000072c load
         tinyBasic.s:2998   .text.basic:0000000000000730 log2
         tinyBasic.s:3013   .text.basic:0000000000000754 lshift
         tinyBasic.s:3027   .text.basic:0000000000000774 new
         tinyBasic.s:2683   .text.basic:00000000000003d8 next
         tinyBasic.s:3036   .text.basic:0000000000000794 func_not
         tinyBasic.s:3048   .text.basic:00000000000007ac bit_or
         tinyBasic.s:3086   .text.basic:0000000000000828 out
         tinyBasic.s:3111   .text.basic:000000000000088c pad_ref
         tinyBasic.s:3122   .text.basic:0000000000000898 pause
         tinyBasic.s:3150   .text.basic:00000000000008b4 pin_mode
         tinyBasic.s:3215   .text.basic:0000000000000980 peek8
         tinyBasic.s:3228   .text.basic:000000000000099c peek16
         tinyBasic.s:3241   .text.basic:00000000000009b8 peek32
ARM GAS  tinyBasic.s 			page 104


         tinyBasic.s:3255   .text.basic:00000000000009d4 poke8
         tinyBasic.s:3267   .text.basic:00000000000009ec poke16
         tinyBasic.s:3279   .text.basic:0000000000000a04 poke32
         tinyBasic.s:3293   .text.basic:0000000000000a1c print
         tinyBasic.s:3356   .text.basic:0000000000000b04 qkey
         tinyBasic.s:2470   .text.basic:00000000000001f4 read
         tinyBasic.s:2512   .text.basic:0000000000000254 restore
         tinyBasic.s:2737   .text.basic:000000000000045c return
         tinyBasic.s:3368   .text.basic:0000000000000b20 random
         tinyBasic.s:3391   .text.basic:0000000000000b64 rshift
         tinyBasic.s:3404   .text.basic:0000000000000b84 run
         tinyBasic.s:3434   .text.basic:0000000000000bd8 save
         tinyBasic.s:3437   .text.basic:0000000000000bdc show
         tinyBasic.s:3444   .text.basic:0000000000000be0 size
         tinyBasic.s:3457   .text.basic:0000000000000bf0 sleep
         tinyBasic.s:3467   .text.basic:0000000000000c10 spi_read
         tinyBasic.s:3470   .text.basic:0000000000000c14 spi_enable
         tinyBasic.s:3473   .text.basic:0000000000000c18 spi_select
         tinyBasic.s:3476   .text.basic:0000000000000c1c spi_write
         tinyBasic.s:2668   .text.basic:00000000000003bc step
         tinyBasic.s:3485   .text.basic:0000000000000c20 stop
         tinyBasic.s:3507   .text.basic:0000000000000c64 get_ticks
         tinyBasic.s:2789   .text.basic:00000000000004b4 then
         tinyBasic.s:3516   .text.basic:0000000000000c6c set_timer
         tinyBasic.s:3528   .text.basic:0000000000000c80 timeout
         tinyBasic.s:2654   .text.basic:00000000000003a0 to
         tinyBasic.s:3536   .text.basic:0000000000000c94 tone
         tinyBasic.s:3546   .text.basic:0000000000000c98 ubound
         tinyBasic.s:3558   .text.basic:0000000000000cac uflash
         tinyBasic.s:3569   .text.basic:0000000000000cb4 until
         tinyBasic.s:3578   .text.basic:0000000000000cd0 usr
         tinyBasic.s:3586   .text.basic:0000000000000cd4 wait
         tinyBasic.s:3611   .text.basic:0000000000000d08 words
         tinyBasic.s:3634   .text.basic:0000000000000d70 write
         tinyBasic.s:3641   .text.basic:0000000000000d74 bit_xor
         tinyBasic.s:3651   .text.basic:0000000000000d98 transmit
         tinyBasic.s:3654   .text.basic:0000000000000d9c receive
         tinyBasic.s:2247   .text.basic:0000000000000000 $t
         tinyBasic.s:2489   .text.basic:000000000000022c seek_next
         tinyBasic.s:2534   .text.basic:000000000000028a no_data_line
         tinyBasic.s:2530   .text.basic:0000000000000284 try_next_line
         tinyBasic.s:2597   .text.basic:00000000000002f8 print_dump_header
         tinyBasic.s:2771   .text.basic:000000000000049c const_idr
         tinyBasic.s:2858   .text.basic:00000000000005ac str_buffer
         tinyBasic.s:2857   .text.basic:00000000000005a8 input_buffer
         tinyBasic.s:2857   .text.basic:00000000000005a8 $d
         tinyBasic.s:2865   .text.basic:00000000000005b0 $t
         tinyBasic.s:2874   .text.basic:00000000000005d0 enable_iwdg
         tinyBasic.s:2877   .text.basic:00000000000005d4 refresh_iwdg
         tinyBasic.s:2989   .text.basic:0000000000000728 out_buff
         tinyBasic.s:2989   .text.basic:0000000000000728 $d
         tinyBasic.s:2991   .text.basic:000000000000072c $t
         tinyBasic.s:3115   .text.basic:0000000000000894 pad_adr
         tinyBasic.s:3115   .text.basic:0000000000000894 $d
         tinyBasic.s:3122   .text.basic:0000000000000898 $t
         tinyBasic.s:3345   .text.basic:0000000000000aee print_exit
         tinyBasic.s:3659   .rodata.user:0000000000000000 user
ARM GAS  tinyBasic.s 			page 105


         tinyBasic.s:3658   .rodata.user:0000000000000000 $d
         tinyBasic.s:3657   .text.basic:0000000000000d9e $d
         tinyBasic.s:3669   .text.basic:0000000000000da0 $d
         tinyBasic.s:3669   .text:00000000000010c4 $d
         tinyBasic.s:581    .text:0000000000000433 $d
         tinyBasic.s:1447   .text:0000000000000ba1 $d
         tinyBasic.s:1447   .text:0000000000000ba2 $t
         tinyBasic.s:1541   .text:0000000000000c43 $d
         tinyBasic.s:1541   .text:0000000000000c44 $t
         tinyBasic.s:2013   .text:0000000000001079 $d
         tinyBasic.s:2013   .text:000000000000107a $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_getc
uart_qkey
