ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ CELLL,4 // size of integer 
 158              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 159              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 160              	  .equ ARRAY_ADR,FREE_RAM+4 // array address at bottom of pad  
 161              	
 162              	/* flags used by BASIC interpreter */ 
 163              		.equ FRUN,(1<<0) // programm running
 164              		.equ FTRAP,(1<<1) // inside trap handler 
 165              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 166              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 167              		.equ FBREAK,(1<<4) // break point flag 
 168              		.equ FCOMP,(1<<5)  // compiling flags 
 169              		.equ FAUTORUN,(1<<6) // auto start program running 
 170              	
 171              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 172              	  
 173              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 174              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 175              	
 176              	/***********************************************
 177              	*       MACROS
 178              	***********************************************/
 179              		.macro _CALL fn /* low level routine call */ 
 180              	 	PUSH {LR}
 181              		BL \fn  
 182              	  POP {LR}
 183              		.endm
 184              		
 185              		.macro	_RET /* return from subroutine */
 186              		BX	LR
 187              		.endm
 188              	
 189              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 190              		MOV \REG, #\LITERAL&0xffff
 191              		MOVT \REG, #\LITERAL>>16
 192              		.endm
 193              	
 194              	// local function header 
 195              	  .macro _FUNC label 
 196              	  .p2align 2 
 197              	  .type \label, %function  
 198              	\label:
ARM GAS  tinyBasic.s 			page 9


 199              	  .endm 
 200              	
 201              	// global function header 
 202              	  .macro _GBL_FUNC label 
 203              	  .global \label 
 204              	  _FUNC \label 
 205              	  .endm 
 206              	
 207              	
 208              	/********************************
 209              	    dictionary structure
 210              	------------------------------
 211              	 format:
 212              	   link:    
 213              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 214              	   cmd_name: 31 characters max 
 215              	   cmd_index: 2 bytes 
 216              	**********************************/
 217              		.macro _dict_entry tok_type,name,cmd_idx 
 218              	  .word LINK 
 219              	  .word \cmd_idx 
 220              		.word \tok_type  	
 221              		.equ LINK,.
 222              		.asciz "\name"
 223              		.p2align 2 
 224              		.endm 
 225              	
 226              	  // pop parameter in register 
 227              	  .macro _POP  reg 
 228              	  ldmia  DP!,{\reg}
 229              	  .endm 
 230              	
 231              	  // push register on parameter stack 
 232              	  .macro _PUSH reg 
 233              	  stmdb DP!,{\reg}
 234              	  .endm 
 235              	
 236              	  .macro _UNGET_TOKEN 
 237              	  ldr IN,[UPP,#IN_SAVED]
 238              	  ldr BPTR,[UPP,#BASICPTR] 
 239              	  .endm 
 240              	
 241              	 // create a text data 
 242              	 .macro _TEXT label,text
 243              	 \label: .asciz "\text"
 244              	 .p2align 2 
 245              	 .endm 
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
ARM GAS  tinyBasic.s 			page 10


  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
ARM GAS  tinyBasic.s 			page 11


  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
ARM GAS  tinyBasic.s 			page 12


 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
ARM GAS  tinyBasic.s 			page 13


  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
ARM GAS  tinyBasic.s 			page 14


 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
ARM GAS  tinyBasic.s 			page 15


 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
ARM GAS  tinyBasic.s 			page 16


 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	    dump 
 239              	    print memory content in hexadecimal 
 240              	    16 bytes per row 
 241              	    input:
 242              	      r0  address 
 243              	      r1  count 
 244              	    ouput:
 245              	      none 
 246              	    use:
 247              	
 248              	****************************************/
 249              	    _FUNC dump 
 250 0150 04B4     	    push {r2}
 251 0152 0A46     	    mov r2,r1 
 252 0154 4FF01001 	1:  mov r1,#16
 253 0158 00B5FFF7 	    _CALL prt_row 
 253      B5FF5DF8 
 253      04EB
 254 0162 103A     	    subs r2,#16 
 255 0164 F6D5     	    bpl 1b 
 256 0166 04BC     	2:  pop {r2}
 257 0168 7047     	    _RET 
 258              	
 259              	/***************************************
 260              	    search_lineno 
 261              	    localize BASIC line from its number 
 262              	    input:
 263              	      r0   line# 
 264              	    output: 
 265              	      r0   adr where found || adr new to be inserted 
 266              	      r1   0 found || !0 not found  
 267              	    use:
 268              	      r0   scan address 
 269              	      r1   temp   
 270              	      r2   address end of text
 271              	      r3   target line#
 272              	****************************************/    
 273 016a 00BF     	    _FUNC search_lineno
 274 016c 0CB4     	    push {r2,r3} 
 275 016e 0346     	    mov r3,r0 // target 
 276 0170 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 277 0172 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 278 0174 9042     	1:  cmp r0,r2 
 279 0176 05D0     	    beq  8f
 280 0178 0188     	    ldrh r1,[r0]
 281 017a C91A     	    subs r1,r3 
 282 017c 04D5     	    bpl 9f 
 283 017e 8178     	    ldrb r1,[r0,#2]
 284 0180 0844     	    add r0,r1
 285 0182 F7E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 17


 286 0184 4FF0FF31 	8:  mov r1,#-1 
 287 0188 0CBC     	9:  pop {r2,r3}
 288 018a 7047     	    _RET 
 289              	
 290              	
 291              	/********************************************
 292              	    delete_line 
 293              	    delete BASIC line at addr 
 294              	    input:
 295              	      r0    address 
 296              	    output:
 297              	      r0    address  
 298              	    use: 
 299              	      r1    dest adr
 300              	      r2    bytes to move 
 301              	      T1    length line to delete 
 302              	      T2    txtend 
 303              	********************************************/
 304              	    _FUNC delete_line 
 305 018c 2DE90703 	    push {r0,r1,r2,T1,T2}
 306 0190 0146     	    mov r1,r0 // dest 
 307 0192 91F80280 	    ldrb T1,[r1,#2] // line length 
 308 0196 4044     	    add r0,T1  // src
 309 0198 D4F83490 	    ldr T2,[UPP,#TXTEND]
 310 019c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 311 01a0 00B5FFF7 	    _CALL cmove
 311      FEFF5DF8 
 311      04EB
 312 01aa A9EB0809 	    sub T2,T1 // txtend-count 
 313 01ae C4F83480 	    str T1,[UPP,#TXTEND] 
 314 01b2 BDE80703 	    pop {r0,r1,r2,T1,T2}
 315 01b6 7047     	    _RET 
 316              	
 317              	/******************************************
 318              	    create_gap 
 319              	    create a gap in text area to insert new line 
 320              	    input:
 321              	      r0    adr 
 322              	      r1    length 
 323              	    output:
 324              	      r0    adr 
 325              	    use:
 326              	      T1    length 
 327              	      T2    txtend 
 328              	************************************************/
 329              	    _FUNC create_gap 
 330 01b8 2DE90503 	    push {r0,r2,T1,T2}
 331 01bc 8846     	    mov T1,R1
 332 01be 0144     	    add r1,r0  // dest 
 333 01c0 D4F83490 	    ldr T2,[UPP,#TXTEND]
 334 01c4 A9EB0002 	    sub r2,T2,r0 
 335 01c8 00B5FFF7 	    _CALL cmove
 335      FEFF5DF8 
 335      04EB
 336 01d2 C144     	    add T2,T1 
 337 01d4 C4F83490 	    str T2,[UPP,#TXTEND]
 338 01d8 BDE80503 	    pop {r0,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 339 01dc 7047     	    _RET 
 340              	
 341              	/************************************************
 342              	    insert_line 
 343              	    insert BASIC line in text area 
 344              	    first search if line with same number exist 
 345              	    replace if so. 
 346              	    input:
 347              	      r0    *buffer to insert 
 348              	    output:
 349              	      none 
 350              	    use: 
 351              	      T1     *buffer
 352              	      T2     temp  
 353              	************************************************/ 
 354 01de 00BF     	    _FUNC insert_line 
 355 01e0 2DE90203 	    push {r1,T1,T2}
 356 01e4 8046     	    mov T1,r0 
 357 01e6 B8F80000 	    ldrh r0,[T1]
 358 01ea 00B5FFF7 	    _CALL search_lineno 
 358      BEFF5DF8 
 358      04EB
 359 01f4 49B9     	    cbnz  r1, 1f // line# doesn't exist
 360              	// already exist 
 361 01f6 00B5FFF7 	    _CALL delete_line // delete old one 
 361      C8FF5DF8 
 361      04EB
 362 0200 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 363 0204 B9F1030F 	    cmp T2,#3 
 364 0208 0DD0     	    beq 9f
 365              	1: //insert new line 
 366 020a 98F80210 	    ldrb r1,[T1,#2]
 367 020e 00B5FFF7 	    _CALL create_gap 
 367      D2FF5DF8 
 367      04EB
 368 0218 4146     	    mov r1,T1 
 369 021a 8A78     	    ldrb r2,[r1,#2]
 370 021c 00B5FFF7 	    _CALL cmove 
 370      FEFF5DF8 
 370      04EB
 371 0226 BDE80203 	9:  pop {r1,T1,T2}
 372 022a 7047     	    _RET 
 373              	
 374              	/*********************************
 375              	    compile 
 376              	    tokenize source line save it 
 377              	    in pas buffer.
 378              	    compiled line format: 
 379              	      line_no  2 bytes {0...32767}
 380              	      count    1 byte  
 381              	      tokens   variable length 
 382              	  input:
 383              	     r0   *text buffer 
 384              	     r1   *text length   
 385              	  output:
 386              	    r0    0 stored | -1 immediate 
 387              	  use:
ARM GAS  tinyBasic.s 			page 19


 388              	    r3    tib index   
 389              	    T1    tib
 390              	    T2    pad
 391              	***********************************/
 392              	    _FUNC compile
 393 022c 8046     	    mov T1, r0  // source text buffer 
 394 022e 6160     	    str r1,[UPP,#COUNT] // save line length 
 395 0230 DFF82496 	    ldr T2,pad // tokens buffer
 396 0234 83EA0303 	    eor r3,r3 // source index  
 397 0238 206C     	    ldr r0,[UPP,#FLAGS]
 398 023a 40F02000 	    orr r0,#FCOMP
 399 023e 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 400 0240 80EA0000 	    eor r0,r0     
 401 0244 29F8020B 	    strh r0,[T2],#2   // line no 
 402 0248 09F8010B 	    strb r0,[T2],#1 // length 
 403 024c 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 404 024e C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 405 0252 00B500F0 	    _CALL parse_int 
 405      F4F85DF8 
 405      04EB
 406 025c 07D0     	    beq 2f 
 407              	// this is a line number     
 408 025e 0129     	    cmp r1,#1 
 409 0260 02D5     	    bpl 1f 
 410 0262 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 411 0266 EFE1     	    b tb_error  
 412              	1:  // write line # to pad 
 413 0268 29F8031C 	    strh r1,[T2,#-3]
 414 026c 2360     	    str r3,[UPP,#IN_SAVED]
 415              	2:  // check for pad full 
 416 026e C145     	    cmp T2,T1
 417 0270 02DB     	    blt 3f 
 418 0272 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 419 0276 E7E1     	    b tb_error 
 420 0278 00B500F0 	3:  _CALL comp_token 
 420      21F85DF8 
 420      04EB
 421 0282 0028     	    cmp r0,#TK_NONE 
 422 0284 01D0     	    beq 4f 
 423 0286 2360     	    str r3,[UPP,#IN_SAVED]
 424 0288 F1E7     	    b 2b 
 425              	4: // compilation completed 
 426 028a DFF8CC35 	    ldr r3,pad 
 427 028e A9EB0300 	    sub r0,T2,r3 // line length 
 428 0292 9870     	    strb r0,[r3,#2]
 429 0294 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 430 0296 1888     	    ldrh r0,[r3] // line number 
 431 0298 38B1     	    cbz r0,8f  
 432              	// insert line in text buffer 
 433 029a 1846     	    mov r0,r3 
 434 029c 00B5FFF7 	    _CALL insert_line 
 434      9FFF5DF8 
 434      04EB
 435 02a6 4040     	    eors r0,r0 
 436 02a8 08E0     	    b 9f 
 437 02aa 9B46     	8:  mov BPTR,r3 // *token_list 
 438 02ac 4FF0030A 	    mov IN,#3
ARM GAS  tinyBasic.s 			page 20


 439 02b0 206C     	    ldr r0,[UPP,#FLAGS]
 440 02b2 A0F12000 	    sub r0,#FCOMP
 441 02b6 2064     	    str r0,[UPP,#FLAGS]
 442 02b8 5FF0FF30 	    movs r0,#-1 
 443 02bc 7047     	9:  _RET 
 444              	
 445              	/*********************************************
 446              	    compile next token from source 
 447              	    input: 
 448              	      r3 		tib index  
 449              	      T1    tib adr
 450              	      T2    insert point in pad  
 451              	    output:
 452              	      r0     token attribute 
 453              	      r1 		token value
 454              	      r3     tib index updated    
 455              	      T2     updated 
 456              	      use:
 457              	**********************************************/
 458              	    .macro _case c, next  
 459              	    cmp r0,#\c 
 460              	    bne \next
 461              	    .endm 
 462              	
 463 02be 00BF     	    _FUNC comp_token 
 464 02c0 40B4     	    push {r6}
 465 02c2 18F80300 	    ldrb r0,[T1,r3]
 466 02c6 0040     	    ands r0,r0 
 467 02c8 67D0     	    beq store_r0  // reached end of text  
 468 02ca 4FF02000 	    mov r0,#SPACE 
 469 02ce 00B500F0 	    _CALL skip  // skip spaces 
 469      20F95DF8 
 469      04EB
 470 02d8 18F80300 	    ldrb r0,[T1,r3]
 471 02dc 0040     	    ands r0,r0 
 472 02de 5CD0     	    beq store_r0  // reached end of text 
 473 02e0 03F10103 	    add r3,#1 
 474 02e4 00B500F0 	    _CALL upper 
 474      21F95DF8 
 474      04EB
 475 02ee 00B500F0 	    _CALL is_special
 475      70F85DF8 
 475      04EB
 476 02f8 DFF85C69 	    ldr r6,=token_ofs
 477 02fc D6E811F0 	    tbh [r6,r1] 
 478              	tok_idx0:     
 479              	//  not special char.  
 480 0300 4EE0     	    b try_number 
 481              	// single char token with no value 
 482              	single: 
 483 0302 DFF85869 	    ldr r6,=tok_single
 484 0306 705C     	    ldrb r0,[r6,r1] 
 485 0308 47E0     	    b store_r0  
 486              	lt:
 487 030a 4FF03400 	    mov r0,#TK_LT
 488 030e 01E0     	    b 1f 
 489              	gt:
ARM GAS  tinyBasic.s 			page 21


 490 0310 4FF03100 	    mov r0,#TK_GT 
 491              	1: // check next char for '<'||'>'||'='
 492 0314 18F80310 	    ldrb r1,[T1,r3]
 493 0318 3C29     	    cmp r1,#'<'
 494 031a 00F09181 	    beq syntax_error 
 495 031e 3E29     	    cmp r1,#'>'
 496 0320 04D1     	    bne 2f
 497 0322 03F10103 	    add r3,#1
 498 0326 00F10100 	    add r0,#1 
 499 032a 36E0     	    b store_r0
 500 032c 3D29     	2:  cmp r1,#'=' 
 501 032e 4FD1     	    bne token_exit  
 502 0330 03F10103 	    add r3,#1
 503 0334 00F10200 	    add r0,#2
 504 0338 2FE0     	    b store_r0       
 505              	bkslash:
 506 033a 18F80310 	    ldrb r1,[T1,r3]
 507 033e 03F10103 	    add r3,#1
 508 0342 4FF00300 	    mov r0,#TK_CHAR 
 509 0346 09F8010B 	    strb r0,[T2],#1
 510 034a 09F8011B 	    strb r1,[T2],#1
 511 034e 3FE0     	    b token_exit 
 512              	prt_cmd: 
 513 0350 4FF00A00 	    mov r0,#TK_CMD 
 514 0354 4FF03A01 	    mov r1,#PRT_IDX
 515 0358 09F8010B 	    strb r0,[T2],#1
 516 035c 09F8011B 	    strb r1,[T2],#1
 517 0360 36E0     	    b token_exit 
 518              	quote:
 519 0362 4FF00200 	    mov r0,#TK_QSTR 
 520 0366 09F8010B 	    strb r0,[T2],#1
 521 036a 00B500F0 	    _CALL parse_quote
 521      9EF85DF8 
 521      04EB
 522 0374 2CE0     	    b token_exit
 523              	tick: 
 524              	// copy comment in pad 
 525 0376 4FF00A00 	    mov r0,#TK_CMD 
 526 037a 4FF04701 	    mov r1,#REM_IDX 
 527 037e 09F8010B 	    strb r0,[T2],#1 
 528 0382 09F8011B 	    strb r1,[T2],#1
 529 0386 08EB0300 	    add r0,T1,r3 
 530 038a 4946     	    mov r1,T2 
 531 038c 00B5FFF7 	    _CALL strcpy 
 531      FEFF5DF8 
 531      04EB
 532 0396 6368     	    ldr r3,[UPP,#COUNT]
 533 0398 1AE0     	    b token_exit
 534              	store_r0: 
 535 039a 09F8010B 	    strb r0,[T2],#1
 536 039e 17E0     	    b token_exit 
 537              	try_number:
 538 03a0 A3F10103 	    sub r3,#1
 539 03a4 00B500F0 	    _CALL parse_int  
 539      4BF85DF8 
 539      04EB
 540 03ae 04D0     	    beq 1f 
ARM GAS  tinyBasic.s 			page 22


 541 03b0 09F8010B 	    strb r0,[T2],#1 
 542 03b4 49F8041B 	    str r1,[T2],#4
 543 03b8 0AE0     	    b token_exit 
 544 03ba 00B500F0 	1:  _CALL parse_keyword 
 544      0EF95DF8 
 544      04EB
 545 03c4 4729     	    cmp r1,#REM_IDX 
 546 03c6 D6D0     	    beq tick
 547 03c8 09F8010B 	    strb r0,[T2],#1 
 548 03cc 09F8011B 	    strb r1,[T2],#1
 549              	token_exit:
 550 03d0 40BC     	    pop {r6}
 551 03d2 7047     	    _RET 
 552              	
 553              	/****************************
 554              	    is_special  
 555              	    check for non alphanum
 556              	    input:
 557              	      r0    character to scan 
 558              	    output:
 559              	      r0    character 
 560              	      r1    0 || index 
 561              	    use: 
 562              	      r1    scan index 
 563              	      r2    temp 
 564              	      r3    char_list 
 565              	*****************************/
 566              	    _FUNC is_special 
 567 03d4 0CB4     	    push {r2,r3}
 568 03d6 4FF00101 	    mov r1,#1
 569 03da DFF88438 	    ldr r3,=char_list 
 570 03de 5A5C     	1:  ldrb r2,[r3,r1]
 571 03e0 22B1     	    cbz r2,8f 
 572 03e2 8242     	    cmp r2,r0 
 573 03e4 04D0     	    beq 9f 
 574 03e6 01F10101 	    add r1,#1 
 575 03ea F8E7     	    b 1b
 576 03ec 81EA0101 	8:  eor r1,r1     
 577 03f0 0CBC     	9:  pop {r2,r3}
 578 03f2 7047     	    _RET 
 579              	
 580              	char_list:
 581 03f4 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 581      293A232D 
 581      2B2A2F25 
 581      3D3C3E5C 
 581      3F272200 
 582              	
 583              	tok_single:
 584 0408 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 584      070109
 585 040f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 585      2232
 586              	  
 587 0415 0000BF   	  .p2align 2
 588              	token_ofs:
 589 0418 0000     	  .hword  0 // not found
ARM GAS  tinyBasic.s 			page 23


 590              	  // TK_COMMA...TK_EQUAL , 12 
 591 041a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 591      01000100 
 592 0422 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 592      01000100 
 593 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 593      01000100 
 594              	  // '<','>'
 595 0432 05000800 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 596              	  // '\'
 597 0436 1D00     	  .hword  (bkslash-tok_idx0)/2
 598              	  // '?' 
 599 0438 2800     	  .hword  (prt_cmd-tok_idx0)/2 
 600              	  // "'"  
 601 043a 3B00     	  .hword  (tick-tok_idx0)/2 
 602              	  // '"' quote 
 603 043c 3100     	  .hword (quote-tok_idx0)/2
 604              	
 605 043e 00BF     	  .p2align 2
 606              	
 607              	/****************************
 608              	    parse_int 
 609              	    parse an integer from text
 610              	    if not valid integer 
 611              	    r1 return *buffer else 
 612              	    *buffer is incremented after integer 
 613              	  input:
 614              	    r0   *buffer 
 615              	  output:
 616              	    r0   TK_INTGR|TK_NONE
 617              	    r1   int|0   
 618              	  use:
 619              	    r0   char 
 620              	    r1   save r3 
 621              	    r2   int
 622              	    r6   base 
 623              	    r7   digit count 
 624              	    r3   tib index   
 625              	    T1   *tib 
 626              	    T2   *pad  
 627              	*****************************/
 628              	    _FUNC parse_int 
 629 0440 C0B4     	    push {r6,r7}
 630 0442 82EA0202 	    eor r2,r2 // int 
 631 0446 1946     	    mov r1,r3 
 632 0448 4FF00A06 	    mov r6,#10 // default base 
 633 044c 87EA0707 	    eor r7,r7 // digit count 
 634 0450 18F80300 	    ldrb r0,[T1,r3]
 635 0454 03F10103 	    add r3,#1 
 636 0458 2428     	    cmp r0,'$' 
 637 045a 02D1     	    bne 2f 
 638 045c 4FF01006 	    mov r6,#16 // hexadecimal number 
 639 0460 03E0     	    b 3f  
 640 0462 2628     	2:  cmp r0,#'&' 
 641 0464 05D1     	    bne 4f
 642 0466 4FF00206 	    mov r6,#2 //binary number  
 643 046a 18F80300 	3:  ldrb r0,[T1,r3]
ARM GAS  tinyBasic.s 			page 24


 644 046e 03F10103 	    add r3,#1
 645 0472 00B500F0 	4:  _CALL upper 
 645      5AF85DF8 
 645      04EB
 646 047c 4128     	    cmp r0,#'A'
 647 047e 00D4     	    bmi 5f
 648 0480 0738     	    subs r0,#7  
 649 0482 3038     	5:  subs r0,#'0' 
 650 0484 07D4     	    bmi 6f // not digit   
 651 0486 B042     	    cmp r0,r6 
 652 0488 05D5     	    bpl 6f // not digit 
 653 048a 06FB02F2 	    mul r2,r6 
 654 048e 0244     	    add r2,r0
 655 0490 07F10107 	    add r7,#1  
 656 0494 E9E7     	    b 3b
 657 0496 1FB1     	6:  cbz r7, 7f 
 658 0498 4FF00E00 	    mov r0,#TK_INTGR  
 659 049c 1146     	    mov r1,r2 
 660 049e 02E0     	    b 9f 
 661              	7: // not a number 
 662 04a0 0B46     	    mov r3,r1 // restore r3 
 663 04a2 80EA0000 	    eor r0,r0 // TK_NONE 
 664 04a6 0040     	9:  ands r0,r0 // to set zero flag 
 665 04a8 C0BC     	    pop {r6,r7}
 666 04aa 7047     	    _RET 
 667              	
 668              	/*********************************************
 669              	    parse_quote 
 670              	    parse quoted string 
 671              	    input: 
 672              	      r3 		tib index  
 673              	      T1    tib adr
 674              	      T2    insert point in pad  
 675              	    output:
 676              	      r0     token attribute 
 677              	      r1 		*str 
 678              	      r3     tib index updated    
 679              	      T2     updated 
 680              	      use:
 681              	*********************************************/
 682              	    _FUNC parse_quote
 683 04ac 4DF8049D 	    push {T2} 
 684 04b0 18F80300 	1:  ldrb r0,[T1,r3]
 685 04b4 03F10103 	    add r3,#1 
 686 04b8 2228     	    cmp r0,#'"'
 687 04ba 09D0     	    beq 9f 
 688 04bc 5C28     	    cmp r0,#'\\'
 689 04be 04D1     	    bne 2f 
 690 04c0 00B500F0 	    _CALL get_escaped_char 
 690      0DF85DF8 
 690      04EB
 691 04ca 09F8010B 	2:  strb r0,[T2],#1
 692 04ce EFE7     	    b 1b 
 693 04d0 80EA0000 	9:  eor  r0,r0
 694 04d4 09F8010B 	    strb r0,[T2],#1
 695 04d8 4FF00200 	    mov r0,#TK_QSTR
 696 04dc 02BC     	    pop {r1}
ARM GAS  tinyBasic.s 			page 25


 697 04de 7047     	    _RET 
 698              	
 699              	/**********************************************
 700              	    get_escaped_char 
 701              	    convert "\c" in quoted string 
 702              	    input:
 703              	      r0 
 704              	      r3   index 
 705              	      T1   tib 
 706              	    output:
 707              	      r0   replacement char
 708              	      r3   updated 
 709              	    use:
 710              	      r1   *table 
 711              	      r2   temp 
 712              	**********************************************/
 713              	    _FUNC get_escaped_char 
 714 04e0 06B4     	    push {r1,r2}
 715 04e2 18F80300 	    ldrb r0,[T1,r3]
 716 04e6 03F10103 	    add r3,#1
 717 04ea 2228     	    cmp r0,#'"' 
 718 04ec 0BD0     	    beq 9f 
 719 04ee DFF87417 	1:  ldr r1,=escaped 
 720 04f2 11F8012B 	2:  ldrb r2,[r1],#1
 721 04f6 12B1     	    cbz r2,6f 
 722 04f8 8242     	    cmp r2,r0 
 723 04fa 02D0     	    beq 7f 
 724 04fc F9E7     	    b 2b
 725 04fe A0F10702 	6:  sub r2,r0,#7     
 726 0502 02F10700 	7:  add r0,r2,#7
 727 0506 06BC     	9:  pop {r1,r2}   
 728 0508 7047     	    _RET
 729              	
 730 050a 6162746E 	escaped: .asciz "abtnvfr"
 730      76667200 
 731              	
 732              	/*********************************************
 733              	   skip character in TIB 
 734              	   input:
 735              	      r0    character to skip 
 736              	      r3    tib index 
 737              	      T1    tib adr
 738              	    output: 
 739              	      r3    updated
 740              	    use:
 741              	      r1     
 742              	**********************************************/   
 743 0512 00BF     	    _FUNC skip
 744 0514 02B4     	    push {r1} 
 745 0516 18F80310 	1:  ldrb r1,[T1,r3]
 746 051a 8142     	    cmp r1,r0
 747 051c 02D1     	    bne 2f
 748 051e 03F10103 	    add r3,#1 
 749 0522 F8E7     	    b 1b 
 750 0524 2360     	2:  str r3,[UPP,#IN_SAVED]
 751 0526 02BC     	    pop {r1}
 752 0528 7047     	    _RET
ARM GAS  tinyBasic.s 			page 26


 753              	
 754              	/********************************************
 755              	    upper
 756              	    convert character in upper case 
 757              	    input: 
 758              	      r0   character 
 759              	    output:
 760              	      r0   upper case character 
 761              	*********************************************/
 762 052a 00BF     	    _FUNC upper 
 763 052c 6128     	    cmp r0,#'a' 
 764 052e 03DB     	    blt 9f 
 765 0530 7A28     	    cmp r0,#'z' 
 766 0532 01DC     	    bgt 9f 
 767 0534 00F05F00 	    and r0,#0x5f 
 768 0538 7047     	9:  _RET 
 769              	
 770              	/***************************************
 771              	   is_digit 
 772              	   check if char is decimal digit.
 773              	   convert to decimal digit.
 774              	   input:
 775              	      r0    char 
 776              	   output:
 777              	      r0    if Z then converted digit 
 778              	      Z     0 true | 1 false  
 779              	***************************************/
 780 053a 00BF     	    _FUNC is_digit 
 781 053c 02B4     	    push {r1} 
 782 053e 81EA0101 	    eor r1,r1 
 783 0542 3038     	    subs r0,#'0' 
 784 0544 03DB     	    blt 9f
 785 0546 3A28     	    cmp r0,'9'+1
 786 0548 01D4     	    bmi 9f 
 787 054a 4FF0FF31 	    mov r1,#-1 
 788              	9:   
 789 054e 0940     	    ands r1,r1
 790 0550 02BC     	    pop {r1} 
 791 0552 7047     	    _RET 
 792              	
 793              	/***************************************
 794              	    is_hex 
 795              	    check for hexadecimal digit 
 796              	    convert to hex digit.
 797              	    input:
 798              	      r0    
 799              	    output:
 800              	      r0     if Z then converted digit 
 801              	      Z      0 true | 1 false         
 802              	***************************************/
 803              	    _FUNC is_hex 
 804 0554 02B4     	    push {r1}
 805 0556 4FF0FF31 	    mov r1,#-1 
 806 055a 4128     	    cmp r0,#'A' 
 807 055c 01D4     	    bmi 1f 
 808 055e A0F10700 	    sub r0,#7 
 809 0562 A0F13000 	1:  sub r0,#'0'
ARM GAS  tinyBasic.s 			page 27


 810 0566 01D4     	    bmi 2f 
 811 0568 1028     	    cmp r0,#16
 812 056a 01D4     	    bmi 9f 
 813 056c 81EA0101 	2:  eor r1,r1  
 814 0570 0940     	9:  ands r1,r1 
 815 0572 02BC     	    pop {r1}
 816 0574 7047     	    _RET 
 817              	
 818              	/***************************************
 819              	    is_bit 
 820              	    check if char is '0'|'1' 
 821              	    convert to binary digit. 
 822              	    input:
 823              	      r0    
 824              	    output:
 825              	      r0     if Z then converted digit 
 826              	      Z      0 true | 1 false         
 827              	***************************************/
 828 0576 00BF     	    _FUNC is_bit
 829 0578 02B4     	    push  {r1}
 830 057a 4FF0FF31 	    mov r1,#-1 
 831 057e A0F13000 	    sub r0,#'0' 
 832 0582 01D4     	    bmi 2f 
 833 0584 0229     	    cmp r1,#2
 834 0586 01D4     	    bmi 9f 
 835 0588 81EA0101 	2:  eor r1,r1 
 836 058c 0940     	9:  ands r1,r1 
 837 058e 02BC     	    pop {r1}
 838 0590 7047     	    _RET 
 839              	
 840              	/***************************************
 841              	    is_alpha 
 842              	    check if character is {A..Z} 
 843              	  input:
 844              	    r0   character 
 845              	  output: 
 846              	    r0    same character 
 847              	    Z    0 true | 1 false  
 848              	****************************************/
 849 0592 00BF     	    _FUNC is_alpha
 850 0594 02B4     	    push {r1} 
 851 0596 4FF0FF31 	    mov r1,#-1 
 852 059a 4128     	    cmp r0,#'A' 
 853 059c 01DB     	    blt 8f 
 854 059e 5B28     	    cmp r0,#'Z'+1 
 855 05a0 01D4     	    bmi 9f 
 856 05a2 81EA0101 	8:  eor r1,r1  
 857 05a6 0940     	9:  ands r1,r1 
 858 05a8 02BC     	    pop {r1}
 859 05aa 7047     	    _RET 
 860              	
 861              	/***************************************
 862              	    is_num 
 863              	    check if character is {0..9} 
 864              	  input:
 865              	    r0   character 
 866              	  output: 
ARM GAS  tinyBasic.s 			page 28


 867              	    r0    same character 
 868              	    Z    0 true | 1 false  
 869              	****************************************/
 870              	    _FUNC is_num 
 871 05ac 02B4     	    push {r1} 
 872 05ae 4FF0FF31 	    mov r1,#-1 
 873 05b2 3028     	    cmp r0,#'0' 
 874 05b4 01DB     	    blt 8f 
 875 05b6 3A28     	    cmp r0,#'9'+1 
 876 05b8 01D4     	    bmi 9f 
 877 05ba 81EA0101 	8:  eor r1,r1  
 878 05be 0940     	9:  ands r1,r1 
 879 05c0 02BC     	    pop {r1}
 880 05c2 7047     	    _RET 
 881              	
 882              	/*****************************************
 883              	    is_alnum 
 884              	    check if character is alphanumeric 
 885              	    input:
 886              	      r0 
 887              	    output:
 888              	      r0     same 
 889              	      Z      1 false | 0 true 
 890              	*****************************************/
 891              	    _FUNC is_alnum 
 892 05c4 00B5FFF7 	    _CALL is_alpha 
 892      E5FF5DF8 
 892      04EB
 893 05ce 04D0     	    beq 9f 
 894 05d0 00B5FFF7 	    _CALL is_num 
 894      EBFF5DF8 
 894      04EB
 895 05da 7047     	9:  _RET 
 896              	
 897              	
 898              	/*****************************************
 899              	    parse_keyword 
 900              	    parse work and ckeck if in dictionary 
 901              	    input:
 902              	      r0    first character 
 903              	      r3    tib index 
 904              	      t1    tib 
 905              	      t2    pad 
 906              	    output:
 907              	      r3    updated 
 908              	      t1    updated 
 909              	      t2    updated   
 910              	    use:
 911              	    
 912              	*****************************************/
 913              	    _FUNC parse_keyword 
 914 05dc 4DF8049D 	    push {T2}
 915 05e0 18F80300 	1:  ldrb r0,[T1,r3]
 916 05e4 03F10103 	    add r3,#1
 917 05e8 00B5FFF7 	    _CALL is_alnum
 917      EBFF5DF8 
 917      04EB
ARM GAS  tinyBasic.s 			page 29


 918 05f2 02D1     	    bne 2f 
 919 05f4 09F8010B 	    strb r0,[T2],#1
 920 05f8 F2E7     	    b 1b 
 921 05fa A3F10103 	2:  sub r3,#1
 922 05fe 80EA0000 	    eor r0,r0 
 923 0602 89F80000 	    strb r0,[T2] 
 924 0606 0098     	    ldr r0,[sp]
 925 0608 DFF85C16 	    ldr r1,=kword_dict  
 926 060c 00B500F0 	    _CALL search_dict 
 926      67F85DF8 
 926      04EB
 927 0616 00B9     	    cbnz r0,9f 
 928 0618 12E0     	    b syntax_error 
 929 061a 5DF8049B 	9:  pop {T2}
 930 061e 7047     	    _RET 
 931              	
 932              	
 933              	/*******************
 934              	    DECOMPILER 
 935              	*******************/
 936              	
 937              	/**********************************
 938              	    cmd_name 
 939              	    reverse dictionary search 
 940              	    from CMD_IDX to NAME 
 941              	  input:
 942              	    r0    CMD_IDX 
 943              	  output:
 944              	    r0    *NAME | 0 
 945              	  use:
 946              	    r1    dictionary link
 947              	    r2    tmp 
 948              	**********************************/
 949              	    _FUNC cmd_name
 950 0620 06B4     	    push {r1,r2}
 951 0622 DFF84416 	    ldr r1,=kword_dict  
 952 0626 0A78     	1:  ldrb r2,[r1]
 953 0628 3AB1     	    cbz r2,3f 
 954 062a 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 955 062e 9042     	    cmp r0,r2 
 956 0630 02D0     	    beq 2f 
 957 0632 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 958 0636 F6E7     	    b 1b
 959 0638 0A46     	2:  mov r2,r1
 960 063a 1046     	3:  mov r0,r2 
 961 063c 06BC     	    pop {r1,r2}
 962 063e 7047     	    _RET 
 963              	
 964              	
 965              	/**********************************
 966              	      BASIC commands 
 967              	**********************************/
 968              	
 969              	/*********************************
 970              	    syntax_error 
 971              	    display syntax error message and 
 972              	    abort program 
ARM GAS  tinyBasic.s 			page 30


 973              	  input:
 974              	    none  
 975              	  output: 
 976              	    none 
 977              	  use:
 978              	*********************************/
 979              	    _FUNC syntax_error 
 980 0640 4FF00200 	    mov r0,#ERR_SYNTAX
 981 0644 00E0     	    b tb_error 
 982              	
 983              	/*********************************
 984              	    tb_error 
 985              	    display BASIC error and 
 986              	    abort program. 
 987              	  input:
 988              	    r0    error code   
 989              	  output: 
 990              	    none 
 991              	  use:
 992              	    r1    temp 
 993              	*********************************/
 994 0646 00BF     	    _FUNC tb_error 
 995 0648 DFF82016 	    ldr r1,=err_msg 
 996 064c 4FEA8000 	    lsl r0,#2 
 997 0650 0858     	    ldr r0,[r1,r0]
 998 0652 00B5FFF7 	    _CALL uart_puts
 998      FEFF5DF8 
 998      04EB
 999 065c 206C     	    ldr r0,[UPP,#FLAGS]
 1000 065e 10F0200F 	    tst r0,#FCOMP
 1001 0662 00D1     	    bne compile_error
 1002              	interpret_error:
 1003              	    
 1004 0664 00E1     	    b warm_start 
 1005              	compile_error:
 1006 0666 A068     	    ldr r0,[UPP,#BASICPTR]
 1007 0668 00B5FFF7 	    _CALL uart_puts 
 1007      FEFF5DF8 
 1007      04EB
 1008 0672 2068     	    ldr r0,[UPP,#IN_SAVED]
 1009 0674 00B5FFF7 	    _CALL spaces 
 1009      FEFF5DF8 
 1009      04EB
 1010 067e 4FF05E00 	    mov r0,#'^' 
 1011 0682 00B5FFF7 	    _CALL uart_putc
 1011      FEFF5DF8 
 1011      04EB
 1012 068c 4FF00D00 	    mov r0,#CR 
 1013 0690 00B5FFF7 	    _CALL uart_putc   
 1013      FEFF5DF8 
 1013      04EB
 1014 069a E5E0     	    b  warm_start  
 1015              	    
 1016              	err_msg:
 1017 069c 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1017      00000000 
 1017      0D000000 
ARM GAS  tinyBasic.s 			page 31


 1017      1B000000 
 1017      34000000 
 1018 06b4 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1018      6F000000 
 1018      89000000 
 1018      9A000000 
 1018      AB000000 
 1019 06c8 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1019      EA000000 
 1019      FA000000 
 1019      0E010000 
 1019      21010000 
 1020              	
 1021              	    .section .rodata.tb_error 
 1022              	
 1023 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1023      72792066 
 1023      756C6C0A 
 1023      00
 1024 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1024      61782065 
 1024      72726F72 
 1024      0A00
 1025 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1025      206F7065 
 1025      72617469 
 1025      6F6E206F 
 1025      76657266 
 1026 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1026      73696F6E 
 1026      20627920 
 1026      300A00
 1027 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1027      6C696420 
 1027      6C696E65 
 1027      206E756D 
 1027      6265722E 
 1028 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1028      74696D65 
 1028      206F6E6C 
 1028      79207573 
 1028      6167652E 
 1029 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1029      616E6420 
 1029      6C696E65 
 1029      206F6E6C 
 1029      79207573 
 1030 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1030      69636174 
 1030      65206E61 
 1030      6D652E0A 
 1030      00
 1031 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1031      206E6F74 
 1031      20666F75 
 1031      6E642E0A 
 1031      00
ARM GAS  tinyBasic.s 			page 32


 1032 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1032      76616C75 
 1032      652E0A00 
 1033 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1033      20696E20 
 1033      65787465 
 1033      6E646564 
 1033      206D656D 
 1034 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1034      61746120 
 1034      666F756E 
 1034      642E0A00 
 1035 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1035      726F6772 
 1035      616D2069 
 1035      6E205241 
 1035      4D210A00 
 1036 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1036      20737973 
 1036      74656D20 
 1036      66756C6C 
 1036      2E0A00
 1037 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1037      65722066 
 1037      756C6C0A 
 1037      00
 1038              	
 1039 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1039      2074696D 
 1039      65206572 
 1039      726F722C 
 1039      2000
 1040 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1040      70696C65 
 1040      20657272 
 1040      6F722C20 
 1040      00
 1041 0151 6C617374 	tk_id: .asciz "last token id: "
 1041      20746F6B 
 1041      656E2069 
 1041      643A2000 
 1042              	
 1043              	
 1044              	    .section  .text , "ax", %progbits 
 1045              	
 1046              	/*********************************
 1047              	   BASIC: BTGL adr, mask   
 1048              	   toggle bits [adr]=[adr]^mask  
 1049              	   input:
 1050              	     r0    adr 
 1051              	     r1    mask 
 1052              	    output;
 1053              	      none 
 1054              	    use:
 1055              	      T1   temp
 1056              	      T2   temp  
 1057              	*******************************/     
ARM GAS  tinyBasic.s 			page 33


 1058              	    _FUNC BTGL 
 1059              	
 1060 06dc 7047     	    _RET 
 1061              	
 1062              	
 1063              	//---------------------------------
 1064              	// dictionary search 
 1065              	// input:
 1066              	//	 r0   target name
 1067              	//   r1		dictionary first name field address  
 1068              	// output:
 1069              	//  r0 		token attribute 
 1070              	//  r1		cmd_index if r0!=TK_NONE  
 1071              	// use:
 1072              	//  r2   length dictionary name 
 1073              	//---------------------------------
 1074 06de 00BF     	  _FUNC search_dict
 1075 06e0 04B4     	  push {r2}
 1076 06e2 03B4     	  push {r0,r1}
 1077              	1:
 1078 06e4 11F8010B 	  ldrb r0,[r1],#1 
 1079 06e8 0043     	  orrs r0,r0
 1080 06ea 10D0     	  beq 9f // null byte  -> end of dictinary 
 1081 06ec 0098     	  ldr r0,[sp]  
 1082 06ee 00B5FFF7 	  _CALL strcmp 
 1082      B2FC5DF8 
 1082      04EB
 1083 06f8 04D0     	  beq 2f 
 1084 06fa 0199     	  ldr r1,[sp,#4]
 1085 06fc 51F80C1C 	  ldr r1,[r1,#-12]
 1086 0700 0191     	  str r1,[sp,#4]
 1087 0702 EFE7     	  b 1b   
 1088              	2: // found
 1089 0704 0199     	  ldr r1,[sp,#4]
 1090 0706 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 1091 070a 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 1092 070e 02B0     	9: add sp,#8  // drop pushed r0,r1
 1093 0710 04BC     	   pop {r2}
 1094 0712 7047     	   _RET 
 1095              	
 1096              	/**************************
 1097              	    INTERPRETER 
 1098              	*************************/
 1099              	
 1100              	/*********************************
 1101              	   cold_start 
 1102              	   initialize BASIC interpreter 
 1103              	   never leave 
 1104              	   input:
 1105              	     none 
 1106              	   output:
 1107              	    none 
 1108              	*********************************/
 1109              	  .type cold_start, %function 
 1110              	  .global cold_start 
 1111              	cold_start: 
 1112              	//copy initialized system variables to ram 
ARM GAS  tinyBasic.s 			page 34


 1113 0714 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1113      C2F20004 
 1114 071c 0B48     	    ldr r0,src_addr 
 1115 071e DFF83010 	    ldr r1,dest_addr
 1116 0722 0968     	    ldr r1,[r1] 
 1117 0724 0C44     	    add UPP,r1 // system variables base address   
 1118 0726 2146     	    mov r1,UPP 
 1119 0728 4FF0D402 	    mov r2,#ulast-uzero
 1120 072c 00B5FFF7 	    _CALL cmove  
 1120      FEFF5DF8 
 1120      04EB
 1121 0736 00B500F0 	    _CALL prt_version
 1121      0CF85DF8 
 1121      04EB
 1122 0740 00B500F0 	    _CALL clear_basic  
 1122      5BF85DF8 
 1122      04EB
 1123 074a 8DE0     	    b warm_start    
 1124              	src_addr:
 1125 074c 00000000 	  .word uzero
 1126              	dest_addr:
 1127 0750 00000000 	  .word vectors_size
 1128              	
 1129              	/************************************
 1130              	    print firmware version 
 1131              	    input: 
 1132              	      none 
 1133              	    output:
 1134              	      none 
 1135              	    use:
 1136              	      r0 
 1137              	***********************************/
 1138              	    _FUNC prt_version 
 1139 0754 DFF81805 	    ldr r0,=version_msg 
 1140 0758 00B5FFF7 	    _CALL uart_puts
 1140      FEFF5DF8 
 1140      04EB
 1141 0762 9FF87800 	    ldrb r0,version 
 1142 0766 4FEA1010 	    lsr r0,#4 
 1143 076a 00F13000 	    add r0,#'0' 
 1144 076e 3A28     	    cmp r0,#'9'+1 
 1145 0770 01D4     	    bmi 1f 
 1146 0772 00F10700 	    add r0,#7 
 1147              	  1:
 1148 0776 00B5FFF7 	    _CALL uart_putc 
 1148      FEFF5DF8 
 1148      04EB
 1149 0780 4FF02E00 	    mov r0,#'. 
 1150 0784 00B5FFF7 	    _CALL uart_putc 
 1150      FEFF5DF8 
 1150      04EB
 1151 078e 9FF84C00 	    ldrb r0,version 
 1152 0792 00F00F00 	    and r0,#15 
 1153 0796 00F13000 	    add r0,'0' 
 1154 079a 3A28     	    cmp r0,#'9'+1 
 1155 079c 01D4     	    bmi 1f 
 1156 079e 00F10700 	    add r0,#7
ARM GAS  tinyBasic.s 			page 35


 1157              	  1: 
 1158 07a2 00B5FFF7 	    _CALL uart_putc 
 1158      FEFF5DF8 
 1158      04EB
 1159 07ac 4FF00D00 	    mov r0,#CR 
 1160 07b0 00B5FFF7 	    _CALL uart_putc 
 1160      FEFF5DF8 
 1160      04EB
 1161 07ba 7047     	    _RET  
 1162              	version_msg:
 1163 07bc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1163      65207069 
 1163      6C6C2074 
 1163      696E7920 
 1163      42415349 
 1164              	version:
 1165 07dc 10       	    .byte 0x10 
 1166 07dd 0000BF   	    .p2align 2 
 1167              	
 1168              	
 1169              	/*****************************
 1170              	    clear_vars 
 1171              	    initialize variables to 0
 1172              	  input:
 1173              	    none 
 1174              	  output:
 1175              	    none 
 1176              	  use:
 1177              	    r0,r1,r2 
 1178              	*****************************/
 1179              	    _FUNC clear_vars 
 1180 07e0 07B4     	    push {r0,r1,r2}
 1181 07e2 80EA0000 	    eor r0,r0 
 1182 07e6 04F16001 	    add r1,UPP,#VARS
 1183 07ea 4FF01A02 	    mov r2,#26
 1184 07ee 41F8040B 	1:  str r0,[r1],#4 
 1185 07f2 013A     	    subs r2,#1
 1186 07f4 FBD1     	    bne 1b  
 1187 07f6 07BC     	    pop {r0,r1,r2}
 1188 07f8 7047     	    _RET 
 1189              	
 1190              	/*****************************
 1191              	   clear_basic 
 1192              	   reset BASIC system variables 
 1193              	   and clear variables 
 1194              	*****************************/
 1195 07fa 00BF     	    _FUNC clear_basic
 1196 07fc 80EA0000 	  	eor r0,r0
 1197 0800 2064     	    str r0,[UPP,#FLAGS] 
 1198 0802 6060     	    str r0,[UPP,#COUNT]
 1199 0804 2060     	    str r0,[UPP,#IN_SAVED]
 1200 0806 A060     	    str r0,[UPP,#BASICPTR]
 1201 0808 E060     	    str r0,[UPP,#DATAPTR]
 1202 080a 2061     	    str r0,[UPP,#DATA]
 1203 080c 6061     	    str r0,[UPP,#DATALEN]
 1204 080e 04F1C800 	    add r0,UPP,#FREE_RAM
 1205 0812 2063     	    str r0,[UPP,#TXTBGN]
ARM GAS  tinyBasic.s 			page 36


 1206 0814 6063     	    str r0,[UPP,#TXTEND]
 1207 0816 00B5FFF7 	    _CALL clear_vars 
 1207      E2FF5DF8 
 1207      04EB
 1208 0820 7047     	    _RET  
 1209              	
 1210              	/***********************************
 1211              	   warm_init 
 1212              	   initialize interpreter context 
 1213              	  input:
 1214              	    none
 1215              	  output:
 1216              	    none 
 1217              	  use:
 1218              	    r0 
 1219              	***********************************/
 1220              	warm_init:
 1221              	// reset main stack 
 1222 0822 DFF82800 	    ldr r0,mstack
 1223 0826 8546     	    mov sp,r0 
 1224              	// reset data stack       
 1225 0828 DFF824C0 	    ldr DP,dstack 
 1226 082c 4FF0000A 	    mov IN,#0 // BASIC line index 
 1227 0830 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1228 0834 80EA0000 	    eor r0,r0 
 1229 0838 6060     	    str r0,[UPP,#COUNT]  
 1230 083a 2064     	    str r0,[UPP,#FLAGS]
 1231 083c A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1232 083e 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1233 0842 6064     	    str r0,[UPP,#TAB_WIDTH]
 1234 0844 4FF00A00 	    mov r0,#10 // default base decimal 
 1235 0848 A061     	    str r0,[UPP,#BASE]
 1236 084a 7047     	    _RET  
 1237              	
 1238 084c 00000000 	mstack: .word _mstack 
 1239 0850 00000000 	dstack: .word _dstack 
 1240 0854 00000000 	tib: .word _tib 
 1241 0858 00000000 	pad: .word _pad 
 1242 085c FCFFFFFF 	array: .word _pad - 4 
 1243 0860 52454144 	ready: .asciz "READY" 
 1243      5900
 1244              	
 1245              	/**********************************
 1246              	    warm_start 
 1247              	    start BASIC interpreter doesn't  
 1248              	    reset variables and code space 
 1249              	  input:
 1250              	    none 
 1251              	  output:
 1252              	    none 
 1253              	**********************************/
 1254 0866 00BF     	    _FUNC warm_start 
 1255              	// initialise parameters stack
 1256 0868 FFF7DBFF 	    bl warm_init
 1257 086c DFF80404 	    ldr r0,=ready 
 1258 0870 00B5FFF7 	    _CALL uart_puts 
 1258      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 37


 1258      04EB
 1259              	// fall in cmd_line 
 1260              	
 1261              	/**********************************
 1262              	   cmd_line 
 1263              	   shell command line 
 1264              	   input:
 1265              	      none 
 1266              	   output:
 1267              	      none 
 1268              	   use:
 1269              	
 1270              	***********************************/
 1271 087a 00BF     	    _FUNC cmd_line 
 1272 087c 4FF00D00 	    mov r0,#CR 
 1273 0880 00B5FFF7 	    _CALL uart_putc 
 1273      FEFF5DF8 
 1273      04EB
 1274 088a 5FF83800 	1:  ldr r0,tib
 1275 088e 4FF05001 	    mov r1,#TIB_SIZE 
 1276 0892 00B5FFF7 	    _CALL readln 
 1276      FEFF5DF8 
 1276      04EB
 1277 089c 0940     	    ands r1,r1 // empty line 
 1278 089e F4D0     	    beq 1b 
 1279 08a0 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1279      C3FC5DF8 
 1279      04EB
 1280 08aa EED0     	    beq 1b  // tokens stored in text area 
 1281              	// interpret tokenized line 
 1282              	interpreter:
 1283 08ac 6068     	   ldr r0,[UPP,#COUNT]
 1284 08ae 8245     	   cmp IN,r0  
 1285 08b0 0DD4     	   bmi interp_loop
 1286              	// end of line reached     
 1287              	next_line:
 1288 08b2 206C     	  ldr r0,[UPP,#FLAGS]
 1289 08b4 10F0010F 	  tst r0,#FRUN 
 1290 08b8 E0D0     	  beq cmd_line 
 1291 08ba 6068     	  ldr r0,[UPP,#COUNT]
 1292 08bc D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 1293 08c0 8344     	  add BPTR,r0  
 1294 08c2 606B     	  ldr r0,[UPP,#TXTEND]
 1295 08c4 8345     	  cmp BPTR,r0 
 1296 08c6 00D4     	  bmi 1f 
 1297 08c8 CEE7     	  b warm_start 
 1298              	1:
 1299 08ca 4FF0030A 	  mov IN,#3 
 1300              	interp_loop:
 1301 08ce 00B500F0 	  _CALL next_token 
 1301      18F85DF8 
 1301      04EB
 1302 08d8 0028     	  cmp r0,#TK_NONE 
 1303 08da EAD0     	  beq next_line 
 1304 08dc 0A28     	  cmp r0,#TK_CMD 
 1305 08de 04D1     	  bne 2f
 1306 08e0 E548     	  ldr r0,=fn_table
ARM GAS  tinyBasic.s 			page 38


 1307 08e2 50F82100 	  ldr r0,[r0,r1,lsl #2]
 1308 08e6 8047     	  blx r0
 1309 08e8 F1E7     	  b interp_loop   
 1310              	2: 
 1311 08ea 0428     	  cmp r0,#TK_VAR 
 1312 08ec 02D1     	  bne 3f 
 1313 08ee 00F0A5B8 	  b let_var 
 1314 08f2 ECE7     	  b interp_loop 
 1315              	3: 
 1316 08f4 0528     	  cmp r0,#TK_ARRAY 
 1317 08f6 02D1     	  bne 4f
 1318 08f8 00F0AAB8 	  b let_array 
 1319 08fc E7E7     	  b interp_loop
 1320              	4: 
 1321 08fe 0128     	  cmp r0,#TK_COLON
 1322 0900 E5D0     	  beq interp_loop
 1323 0902 9DE6     	  b syntax_error
 1324              	
 1325              	/*****************************
 1326              	  next_token 
 1327              	  extract next token from token list 
 1328              	  input:
 1329              	    none 
 1330              	  output:
 1331              	    r0    token attribute
 1332              	    r1    token value if there is one 
 1333              	  use:
 1334              	    T1    exit token type  
 1335              	****************************/
 1336              	    _FUNC next_token 
 1337 0904 4DF8048D 	    push {T1}
 1338 0908 88EA0808 	    eor T1,T1 // TK_NONE 
 1339 090c 6068     	    ldr r0,[UPP,#COUNT]
 1340 090e 8245     	    cmp IN,r0 
 1341 0910 00D4     	    bmi 0f 
 1342 0912 2AE0     	    b 9f  
 1343              	0: 
 1344 0914 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1345 0918 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1346 091c 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1347 0920 0AF1010A 	    add IN,#1  
 1348 0924 8046     	    mov T1,r0 
 1349 0926 00F03F00 	    and r0,#0x3f // limit mask 
 1350 092a D449     	    ldr r1,=tok_jmp 
 1351 092c D1E800F0 	    tbb [r1,r0]
 1352              	1: // pc reference point 
 1353 0930 1BE0     	    b 9f 
 1354              	2: // .byte param
 1355 0932 1BF80A10 	    ldrb r1,[BPTR,IN]
 1356 0936 0AF1010A 	    add IN,#1 
 1357 093a 16E0     	    b 9f 
 1358              	3: // .hword param 
 1359 093c 3BF80A10 	    ldrh r1,[BPTR,IN]
 1360 0940 0AF1020A 	    add IN,#2 
 1361 0944 11E0     	    b 9f 
 1362              	4: // .word param  
 1363 0946 5BF80A10 	    ldr r1,[BPTR,IN]
ARM GAS  tinyBasic.s 			page 39


 1364 094a 0AF1040A 	    add IN,#4
 1365 094e 0CE0     	    b 9f 
 1366              	5: // .asciz param 
 1367 0950 0BEB0A01 	    add r1,BPTR,IN 
 1368 0954 0846     	    mov r0,r1  
 1369 0956 00B5FFF7 	    _CALL strlen 
 1369      FEFF5DF8 
 1369      04EB
 1370 0960 8244     	    add IN,r0
 1371 0962 0AF1010A 	    add IN,#1
 1372 0966 00E0     	    b 9f  
 1373              	8: // syntax error 
 1374 0968 6AE6     	    b syntax_error 
 1375 096a 4046     	9:  mov r0,T1  
 1376 096c 5DF8048B 	    pop {T1}
 1377 0970 7047     	    _RET
 1378              	
 1379 0972 00BF     	  .p2align 2
 1380              	tok_jmp: // token id  tbb offset 
 1381 0974 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // TK_NONE, TK_COLON
 1382 0976 10010106 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2 // TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1383 097a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1384 097e 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1385 0982 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1386 0986 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_MULT,TK_DIV,TK_MOD 
 1387              	// the following are not used 
 1388 0989 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 
 1388      1C
 1389 098e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1389      1C1C1C1C 
 1390 0996 1D1D1D1C 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1390      1C1C1C1C 
 1391 099e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 1391      1C1C1C1C 
 1392 09a6 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1392      1C1C1C1C 
 1393 09ae 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1393      1C1C1C1C 
 1394 09b6 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1395              	
 1396 09ba 00BF     	  .p2align 2 
 1397              	
 1398              	/*********************************
 1399              	    expect 
 1400              	    check if next token is of 
 1401              	    expected type. If not 
 1402              	    call syntax_error  
 1403              	  input:
 1404              	      r0   token attribute
 1405              	  output:
 1406              	      r0  token attribute 
 1407              	      r1  token value
 1408              	  use:
 1409              	      T1   
 1410              	**********************************/
 1411              	    _FUNC expect 
 1412 09bc 4DF8048D 	    push {T1}
ARM GAS  tinyBasic.s 			page 40


 1413 09c0 8046     	    mov T1,r0 
 1414 09c2 00B5FFF7 	    _CALL next_token 
 1414      9EFF5DF8 
 1414      04EB
 1415 09cc 4045     	    cmp r0,T1  
 1416 09ce 7FF437AE 	    bne syntax_error 
 1417 09d2 5DF8048B 	    pop {T1}
 1418 09d6 7047     	    _RET 
 1419              	
 1420              	/***********************************
 1421              	    func_args 
 1422              	    get function arguments list 
 1423              	  input:
 1424              	    none 
 1425              	  output:
 1426              	    r0    arg. count 
 1427              	  use:
 1428              	
 1429              	************************************/
 1430              	    _FUNC func_args 
 1431 09d8 4FF00600 	    mov r0,#TK_LPAREN 
 1432 09dc 00B5FFF7 	    _CALL expect 
 1432      EDFF5DF8 
 1432      04EB
 1433 09e6 00B500F0 	    _CALL arg_list 
 1433      0CF85DF8 
 1433      04EB
 1434 09f0 01B4     	    push {r0}
 1435 09f2 4FF00700 	    mov r0,#TK_RPAREN 
 1436 09f6 00B5FFF7 	    _CALL expect 
 1436      E0FF5DF8 
 1436      04EB
 1437 0a00 01BC     	    pop {r0}
 1438 0a02 7047     	    _RET 
 1439              	
 1440              	/**********************************
 1441              	    arg_list 
 1442              	    get arguments list on dstack 
 1443              	  input:
 1444              	    none 
 1445              	  output:
 1446              	    r0    arg count
 1447              	  use:
 1448              	    T1    tmp count  
 1449              	***********************************/
 1450              	    _FUNC arg_list 
 1451 0a04 4DF8048D 	    push {T1}
 1452 0a08 00B500F0 	1:  _CALL relation 
 1452      BFF85DF8 
 1452      04EB
 1453 0a12 0028     	    cmp R0,#TK_NONE 
 1454 0a14 10D0     	    beq 9f 
 1455 0a16 0E28     	    cmp r0,#TK_INTGR
 1456 0a18 0ED1     	    bne 9f 
 1457 0a1a 4CF8041D 	    _PUSH r1 
 1458 0a1e 08F10108 	    add T1,#1 
 1459 0a22 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 41


 1459      6EFF5DF8 
 1459      04EB
 1460 0a2c 0828     	    cmp r0,#TK_COMMA 
 1461 0a2e EBD0     	    beq 1b 
 1462 0a30 D4F800A0 	    _UNGET_TOKEN 
 1462      D4F808B0 
 1463 0a38 4046     	9:  mov r0,T1 
 1464 0a3a 5DF8048B 	    pop {T1}
 1465 0a3e 7047     	    _RET 
 1466              	
 1467              	/***********************************
 1468              	 factor parser 
 1469              	 factor ::= ['+'|'-'|e]  var | @ |
 1470              				 integer | function |
 1471              				 '('relation')' 
 1472              	  input: 
 1473              	    none 
 1474              	  output:
 1475              	    r0   token attribute 
 1476              	    r1   token value 
 1477              	  use:
 1478              	    T1   sign 
 1479              	    T2   exit token attribute 
 1480              	***********************************/
 1481              	    _FUNC factor 
 1482 0a40 2DE90003 	    push {T1,T2}
 1483 0a44 89EA0909 	    eor T2,T2 // TK_NONE 
 1484 0a48 00B5FFF7 	    _CALL next_token 
 1484      5BFF5DF8 
 1484      04EB
 1485 0a52 4FF00108 	    mov T1,#1 // default sign +  
 1486 0a56 00F03000 	    and r0,#TK_GRP_MASK 
 1487 0a5a 1028     	    cmp r0,#TK_GRP_ADD
 1488 0a5c 06D1     	    bne 1f 
 1489 0a5e 4FF0FF38 	    mov T1,#-1 
 1490 0a62 00B5FFF7 	    _CALL next_token 
 1490      4EFF5DF8 
 1490      04EB
 1491 0a6c 0E28     	1:  cmp r0,#TK_INTGR 
 1492 0a6e 18D0     	    beq 8f 
 1493 0a70 0528     	    cmp r0,#TK_ARRAY 
 1494 0a72 05D1     	    bne 3f 
 1495 0a74 00B500F0 	    _CALL get_array_element
 1495      CBF85DF8 
 1495      04EB
 1496 0a7e 10E0     	    b 8f 
 1497 0a80 0428     	3:  cmp r0,#TK_VAR 
 1498 0a82 05D1     	    bne 4f 
 1499 0a84 00B500F0 	    _CALL get_var 
 1499      D7F85DF8 
 1499      04EB
 1500 0a8e 08E0     	    b 8f 
 1501 0a90 0B28     	4:  cmp r0,#TK_IFUNC 
 1502 0a92 01D0     	    beq 5f 
 1503 0a94 0C28     	    cmp r0,#TK_CFUNC 
 1504 0a96 04D1     	    bne 6f 
 1505 0a98 4FEA8101 	5:  lsl r1,#2 
ARM GAS  tinyBasic.s 			page 42


 1506 0a9c 7648     	    ldr r0,=fn_table
 1507 0a9e 4158     	    ldr r1,[r0,r1]
 1508 0aa0 8847     	    blx r1 
 1509              	6:  
 1510 0aa2 08FB01F1 	8:  mul r1,T1 
 1511 0aa6 4846     	    mov r0,T2 
 1512 0aa8 BDE80003 	    pop {T1,T2}   
 1513 0aac 7047     	    _RET 
 1514              	
 1515              	
 1516              	/*****************************************
 1517              	    term parser 
 1518              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1519              	    output:
 1520              	      r0  	token attribute 
 1521              	      r1		integer
 1522              	    use:
 1523              	      r2    first operand 
 1524              	      T1    operator 
 1525              	      T2    exit token attribute 
 1526              	******************************************/
 1527 0aae 00BF     	     _FUNC term 
 1528 0ab0 2DE90403 	    push {r2,T1,T2}
 1529 0ab4 4FF00009 	    mov T2,#TK_NONE 
 1530 0ab8 00B5FFF7 	    _CALL factor  
 1530      C1FF5DF8 
 1530      04EB
 1531 0ac2 0E28     	    cmp r0,#TK_INTGR
 1532 0ac4 26D1     	    bne 8f
 1533 0ac6 8146     	    mov T2,r0  // exit attribute 
 1534 0ac8 0A46     	    mov r2,r1 // first operand   
 1535 0aca 00B5FFF7 	    _CALL next_token
 1535      1AFF5DF8 
 1535      04EB
 1536 0ad4 8046     	    mov T1,r0   
 1537 0ad6 00F03000 	    and r0,#TK_GRP_MASK 
 1538 0ada 2028     	    cmp r0,#TK_GRP_MULT
 1539 0adc 1AD1     	    bne 8f  
 1540 0ade 00B5FFF7 	    _CALL factor  
 1540      AEFF5DF8 
 1540      04EB
 1541 0ae8 0E28     	    cmp r0,#TK_INTGR
 1542 0aea 7FF4A9AD 	    bne syntax_error 
 1543 0aee B8F1200F 	    cmp T1,#TK_MULT
 1544 0af2 02D1     	    bne 2f 
 1545              	multiplication:
 1546 0af4 01FB02F2 	    mul r2,r1
 1547 0af8 10E0     	    b 9f 
 1548 0afa B8F1210F 	2:  cmp T1,#TK_DIV 
 1549 0afe 02D1     	    bne modulo
 1550              	division:
 1551 0b00 92FBF1F2 	    sdiv r2,r2,r1
 1552 0b04 0AE0     	    b 9f  
 1553              	modulo:
 1554 0b06 1046     	    mov r0,r2 
 1555 0b08 92FBF1F2 	    sdiv r2,r2,r1 
 1556 0b0c 01FB02F2 	    mul  r2,r1 
ARM GAS  tinyBasic.s 			page 43


 1557 0b10 A0EB0202 	    sub  r2,r0,r2 
 1558 0b14 D4F800A0 	8:  _UNGET_TOKEN
 1558      D4F808B0 
 1559 0b1c 1146     	9:  mov r1,r2 
 1560 0b1e 4846     	    mov r0,T2 
 1561 0b20 BDE80403 	    pop {r2,T1,T2}
 1562 0b24 7047     	    _RET 
 1563              	
 1564              	/*****************************************
 1565              	    expression parser 
 1566              	    expression ::= term [['+'|'-'] term]*
 1567              	    result range {-32768..32767}
 1568              	    output:
 1569              	      r0    token attribute 
 1570              	      r1 	  integer
 1571              	    use:
 1572              	      r2  left operand 
 1573              	      T1  operator 
 1574              	      T2  exit token attribute
 1575              	******************************************/
 1576 0b26 00BF     	    _FUNC expression 
 1577 0b28 2DE90403 	    push {r2,t1,t2}
 1578 0b2c 4FF00009 	    mov T2,#TK_NONE
 1579 0b30 82EA0202 	    eor r2,r2 // zero 
 1580 0b34 00B5FFF7 	    _CALL term 
 1580      BBFF5DF8 
 1580      04EB
 1581 0b3e 0E28     	    cmp r0,#TK_INTGR  
 1582 0b40 1AD1     	    bne 8f 
 1583 0b42 0A46     	    mov r2,r1 // first operand   
 1584 0b44 00B5FFF7 	1:  _CALL next_token 
 1584      DDFE5DF8 
 1584      04EB
 1585 0b4e 8046     	    mov T1,r0 // token attribute 
 1586 0b50 00F03000 	    and r0,#TK_GRP_MASK 
 1587 0b54 1028     	    cmp r0,#TK_GRP_ADD 
 1588 0b56 0FD1     	    bne 8f 
 1589 0b58 00B5FFF7 	3:  _CALL term 
 1589      A9FF5DF8 
 1589      04EB
 1590 0b62 0E28     	    cmp r0,#TK_INTGR 
 1591 0b64 7FF46CAD 	    bne syntax_error 
 1592 0b68 B8F1100F 	    cmp T1,#TK_PLUS 
 1593 0b6c 02D0     	    beq 4f 
 1594 0b6e A2EB0101 	    sub r1,r2,r1 // N1-N2  
 1595 0b72 E7E7     	    b 1b 
 1596 0b74 1144     	4:  add r1,r2,r1 // N1+N2
 1597 0b76 E5E7     	    b 1b
 1598 0b78 D4F800A0 	8:  _UNGET_TOKEN 
 1598      D4F808B0 
 1599 0b80 4846     	9:  mov r0,T2 
 1600 0b82 1146     	    mov r1,r2 
 1601 0b84 BDE80403 	    pop {r2,t1,t2}
 1602 0b88 7047     	    _RET 
 1603              	
 1604              	
 1605              	/**********************************************
ARM GAS  tinyBasic.s 			page 44


 1606              	    relation parser 
 1607              	    rel ::= expr1 rel_op expr2
 1608              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1609              	    relation return  integer , zero is false 
 1610              	    output:
 1611              	        r0	TK_INTGR  
 1612              	        r1	integer 
 1613              	    use:
 1614              	        r2   first operand 
 1615              	        T1   relop   
 1616              	**********************************************/
 1617 0b8a 00BF     	    _FUNC relation 
 1618 0b8c 2DE90401 	    push {r2,T1}
 1619 0b90 00B5FFF7 	    _CALL expression 
 1619      C9FF5DF8 
 1619      04EB
 1620 0b9a 0E28     	    cmp r0,#TK_INTGR 
 1621 0b9c 7FF450AD 	    bne syntax_error 
 1622 0ba0 0A46     	    mov r2,r1  // first operand  
 1623 0ba2 00B5FFF7 	    _CALL next_token 
 1623      AEFE5DF8 
 1623      04EB
 1624 0bac 8046     	    mov T1,r0  // relop  
 1625 0bae 00F03000 	    and r0,#TK_GRP_MASK 
 1626 0bb2 3028     	    cmp r0,#TK_GRP_RELOP 
 1627 0bb4 1DD1     	    bne 8f  // single operand 
 1628 0bb6 00B5FFF7 	    _CALL expression 
 1628      B6FF5DF8 
 1628      04EB
 1629 0bc0 0E28     	    cmp r0,#TK_INTGR 
 1630 0bc2 7FF43DAD 	    bne syntax_error 
 1631 0bc6 8A42     	    cmp r2,r1 // compare operands  
 1632 0bc8 4FF0FF31 	    mov r1,#-1 
 1633 0bcc 2C4A     	    ldr r2,=relop_jmp
 1634 0bce 08F00708 	    and T1,#7 // {1..6}
 1635 0bd2 D2E808F0 	    tbb [r2,T1]    
 1636              	rel_idx0:
 1637              	rel_eq:
 1638 0bd6 11D0     	    beq 9f 
 1639 0bd8 08E0     	    b rel_false
 1640              	rel_lt: 
 1641 0bda 0FDB     	    blt 9f   
 1642 0bdc 06E0     	    b rel_false 
 1643              	rel_le:
 1644 0bde 0DDD     	    ble 9f  
 1645 0be0 04E0     	    b rel_false 
 1646              	rel_gt:
 1647 0be2 0BDC     	    bgt 9f  
 1648 0be4 02E0     	    b rel_false  
 1649              	rel_ge:
 1650 0be6 09DA     	    bge 9f  
 1651 0be8 00E0     	    b rel_false  
 1652              	rel_diff:
 1653 0bea 07D1     	    bne 9f 
 1654              	rel_false:    
 1655 0bec 81EA0101 	    eor r1,r1  // false
 1656 0bf0 04E0     	    b 9f  
ARM GAS  tinyBasic.s 			page 45


 1657 0bf2 D4F800A0 	8:  _UNGET_TOKEN 
 1657      D4F808B0 
 1658 0bfa 1146     	    mov r1,r2    
 1659 0bfc 4FF00E00 	9:  mov r0,#TK_INTGR
 1660 0c00 BDE80401 	    pop {r2,T1}
 1661 0c04 7047     	    _RET 
 1662              	
 1663              	
 1664              	relop_jmp: 
 1665 0c06 00       	  .byte 0 
 1666 0c07 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1667 0c08 00       	  .byte 0 // =
 1668 0c09 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1669 0c0a 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1670 0c0b 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1671 0c0c 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1672              	
 1673              	
 1674              	/***********************************
 1675              	    get_array_element 
 1676              	    return index of array element 
 1677              	  input:
 1678              	    r1   index  
 1679              	  output:
 1680              	    r0   TK_INTGR
 1681              	    r1   value  
 1682              	************************************/
 1683 0c0d 0000BF   	    _FUNC get_array_element 
 1684 0c10 D4F8CC00 	    ldr r0,[UPP,#ARRAY_ADR]
 1685 0c14 4FEA8101 	    lsl r1,#2 
 1686 0c18 A0EB0100 	    sub r0,r1 
 1687 0c1c 0168     	    ldr r1,[r0]
 1688 0c1e 4FF00E00 	    mov r0,#TK_INTGR 
 1689 0c22 7047     	    _RET 
 1690              	
 1691              	/***********************************
 1692              	    set_array_element 
 1693              	    set value of array element 
 1694              	  input:
 1695              	    r0   index 
 1696              	    r1   new value 
 1697              	  output:
 1698              	    none
 1699              	  use:
 1700              	    r2    array pointer 
 1701              	**********************************/
 1702              	    _FUNC set_array_element 
 1703 0c24 04B4     	    push {r2}
 1704 0c26 D4F8CC20 	    ldr r2,[UPP,#ARRAY_ADR]
 1705 0c2a 4FEA8000 	    lsl r0,#2 
 1706 0c2e A2EB0002 	    sub r2,r0 
 1707 0c32 1160     	    str r1,[r2]
 1708 0c34 04BC     	    pop {r2}
 1709 0c36 7047     	    _RET 
 1710              	
 1711              	/***********************************
 1712              	   get_var 
ARM GAS  tinyBasic.s 			page 46


 1713              	   get variable value 
 1714              	  input:
 1715              	     r1    variable index {0..25}
 1716              	  output:
 1717              	     r0    TK_INTGR
 1718              	     r1    value 
 1719              	**********************************/
 1720              	    _FUNC get_var 
 1721 0c38 206E     	    ldr r0,[UPP,#VARS]
 1722 0c3a 4FEA8101 	    lsl r1,#2 
 1723 0c3e 4158     	    ldr r1,[r0,r1]
 1724 0c40 4FF00E00 	    mov r0,#TK_INTGR
 1725 0c44 7047     	    _RET 
 1726              	
 1727              	/*********************************
 1728              	    set_var 
 1729              	    set variable value 
 1730              	  input:
 1731              	     r0    variable index {0..25}
 1732              	     r1    new value 
 1733              	  output:
 1734              	    none 
 1735              	  use:
 1736              	    r2   vars pointer 
 1737              	*********************************/
 1738 0c46 00BF     	    _FUNC set_var 
 1739 0c48 04B4     	    push {r2}
 1740 0c4a 226E     	    ldr r2,[UPP,#VARS]
 1741 0c4c 4FEA8000 	    lsl r0,#2
 1742 0c50 1150     	    str r1,[r2,r0]
 1743 0c52 04BC     	    pop {r2}
 1744 0c54 7047     	    _RET 
 1745              	
 1746              	/******************************
 1747              	    CONSTANTS data
 1748              	******************************/
 1749              	
 1750 0c56 0000     	  .section .rodata 
 1751              	
 1752              	// system variables initial value 
 1753              	uzero:
 1754 0000 00000000 	  .word 0 // IN
 1755 0004 00000000 	  .word 0 // IN_SAVED
 1756 0008 00000000 	  .word 0 // COUNT
 1757 000c 00000000 	  .word 0 // BASICPTR
 1758 0010 00000000 	  .word 0 // DATAPTR
 1759 0014 00000000 	  .word 0 // DATA
 1760 0018 00000000 	  .word 0 // DATALEN
 1761 001c 0A000000 	  .word 10 // BASE
 1762 0020 00000000 	  .word 0 // TICKS
 1763 0024 00000000 	  .word 0 // TIMER
 1764 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 1765 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 1766 0030 00000000 	  .word 0 // FFREE
 1767 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 1768 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 1769 003c 00000000 	  .word 0 //LOOP_DEPTH
ARM GAS  tinyBasic.s 			page 47


 1770 0040 00000000 	  .word 0 // ARRAY_SIZE
 1771 0044 00000000 	  .word 0 // FLAGS
 1772 0048 04000000 	  .word 4 // TAB_WIDTH
 1773 004c 00000000 	  .word 0 // RX_HEAD
 1774 0050 00000000 	  .word 0 // RX_TAIL
 1775 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1775      00000000 
 1775      00000000 
 1775      00000000 
 1776 0064 00000000 	  .space VARS_SIZE,0 // VARS
 1776      00000000 
 1776      00000000 
 1776      00000000 
 1776      00000000 
 1777 00cc FCFFFFFF 	  .word _pad - 4  // ARRAY_ADR 
 1778 00d0 00000000 	  .space 4, 0 // padding 
 1779              	ulast:
 1780              	
 1781              	  .section .rodata.dictionary 
 1782              	
 1783              	// keep alphabetic order for BASIC names from Z-A
 1784              	// this sort order is for for WORDS cmd output. 	
 1785              	
 1786              		.equ link, 0
 1787              	kword_end:
 1788 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1788      00000000 
 1788      00000000 
 1788      00000000 
 1789 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1789      64000000 
 1789      0A000000 
 1789      5854524D 
 1789      54000000 
 1790 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1790      65000000 
 1790      0A000000 
 1790      58524356 
 1790      00000000 
 1791 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1791      63000000 
 1791      0B000000 
 1791      584F5200 
 1792 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1792      62000000 
 1792      0A000000 
 1792      57524954 
 1792      45000000 
 1793 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1793      61000000 
 1793      0A000000 
 1793      574F5244 
 1793      53000000 
 1794 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1794      60000000 
 1794      0A000000 
 1794      57414954 
ARM GAS  tinyBasic.s 			page 48


 1794      00000000 
 1795 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1795      5F000000 
 1795      0B000000 
 1795      55535200 
 1796 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1796      5E000000 
 1796      0A000000 
 1796      554E5449 
 1796      4C000000 
 1797 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1797      5D000000 
 1797      0B000000 
 1797      55464C41 
 1797      53480000 
 1798 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1798      5C000000 
 1798      0B000000 
 1798      55424F55 
 1798      4E440000 
 1799 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1799      5B000000 
 1799      0A000000 
 1799      544F4E45 
 1799      00000000 
 1800 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1800      5A000000 
 1800      0A000000 
 1800      544F0000 
 1801 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1801      58000000 
 1801      0A000000 
 1801      54494D45 
 1801      52000000 
 1802 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1802      59000000 
 1802      0B000000 
 1802      54494D45 
 1802      4F555400 
 1803 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1803      57000000 
 1803      0B000000 
 1803      5449434B 
 1803      53000000 
 1804 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1804      56000000 
 1804      0A000000 
 1804      53544F50 
 1804      00000000 
 1805 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1805      55000000 
 1805      0A000000 
 1805      53544550 
 1805      00000000 
 1806 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1806      54000000 
 1806      0A000000 
ARM GAS  tinyBasic.s 			page 49


 1806      53504957 
 1806      52000000 
 1807 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1807      53000000 
 1807      0A000000 
 1807      53504953 
 1807      454C0000 
 1808 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1808      51000000 
 1808      0B000000 
 1808      53504952 
 1808      44000000 
 1809 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1809      52000000 
 1809      0A000000 
 1809      53504945 
 1809      4E000000 
 1810 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1810      50000000 
 1810      0A000000 
 1810      534C4545 
 1810      50000000 
 1811 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1811      4F000000 
 1811      0B000000 
 1811      53495A45 
 1811      00000000 
 1812 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1812      4E000000 
 1812      0A000000 
 1812      53484F57 
 1812      00000000 
 1813 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1813      4D000000 
 1813      0A000000 
 1813      53415645 
 1813      00000000 
 1814 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1814      4C000000 
 1814      0A000000 
 1814      52554E00 
 1815 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1815      4B000000 
 1815      0B000000 
 1815      52534849 
 1815      46540000 
 1816 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1816      4A000000 
 1816      0B000000 
 1816      524E4400 
 1817 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1817      49000000 
 1817      0A000000 
 1817      52455455 
 1817      524E0000 
 1818 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1818      48000000 
ARM GAS  tinyBasic.s 			page 50


 1818      0A000000 
 1818      52455354 
 1818      4F524500 
 1819 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1819      47000000 
 1819      0A000000 
 1819      52454D41 
 1819      524B0000 
 1820 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1820      46000000 
 1820      0A000000 
 1820      5245424F 
 1820      4F540000 
 1821 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1821      45000000 
 1821      0B000000 
 1821      52454144 
 1821      00000000 
 1822 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1822      44000000 
 1822      0B000000 
 1822      514B4559 
 1822      00000000 
 1823 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1823      43000000 
 1823      0B000000 
 1823      50525449 
 1823      00000000 
 1824 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1824      42000000 
 1824      0B000000 
 1824      50525448 
 1824      00000000 
 1825 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1825      41000000 
 1825      0B000000 
 1825      50525447 
 1825      00000000 
 1826 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1826      40000000 
 1826      0B000000 
 1826      50525446 
 1826      00000000 
 1827 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1827      3F000000 
 1827      0B000000 
 1827      50525445 
 1827      00000000 
 1828 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1828      3E000000 
 1828      0B000000 
 1828      50525444 
 1828      00000000 
 1829 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1829      3D000000 
 1829      0B000000 
 1829      50525443 
ARM GAS  tinyBasic.s 			page 51


 1829      00000000 
 1830 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1830      3C000000 
 1830      0B000000 
 1830      50525442 
 1830      00000000 
 1831 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1831      3B000000 
 1831      0B000000 
 1831      50525441 
 1831      00000000 
 1832 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1832      3A000000 
 1832      0A000000 
 1832      5052494E 
 1832      54000000 
 1833 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1833      39000000 
 1833      0B000000 
 1833      504F5554 
 1833      00000000 
 1834 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1834      38000000 
 1834      0A000000 
 1834      504F4B45 
 1834      00000000 
 1835 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1835      35000000 
 1835      0A000000 
 1835      504D4F44 
 1835      45000000 
 1836 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1836      37000000 
 1836      0B000000 
 1836      50494E50 
 1836      00000000 
 1837 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1837      36000000 
 1837      0B000000 
 1837      5045454B 
 1837      00000000 
 1838 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1838      34000000 
 1838      0A000000 
 1838      50415553 
 1838      45000000 
 1839 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1839      33000000 
 1839      0B000000 
 1839      50414400 
 1840 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1840      32000000 
 1840      0B000000 
 1840      4F520000 
 1841 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1841      31000000 
 1841      0B000000 
ARM GAS  tinyBasic.s 			page 52


 1841      4F445200 
 1842 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1842      30000000 
 1842      0B000000 
 1842      4E4F5400 
 1843 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1843      2E000000 
 1843      0A000000 
 1843      4E455854 
 1843      00000000 
 1844 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1844      2F000000 
 1844      0A000000 
 1844      4E455700 
 1845 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1845      2D000000 
 1845      0B000000 
 1845      4D554C44 
 1845      49560000 
 1846 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1846      2C000000 
 1846      0B000000 
 1846      4C534849 
 1846      46540000 
 1847 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1847      2B000000 
 1847      0B000000 
 1847      4C4F4700 
 1848 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1848      2A000000 
 1848      0A000000 
 1848      4C4F4144 
 1848      00000000 
 1849 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1849      29000000 
 1849      0A000000 
 1849      4C495354 
 1849      00000000 
 1850 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1850      28000000 
 1850      0A000000 
 1850      4C455400 
 1851 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1851      27000000 
 1851      0B000000 
 1851      4B455900 
 1852 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1852      26000000 
 1852      0A000000 
 1852      49574447 
 1852      52454600 
 1853 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1853      25000000 
 1853      0A000000 
 1853      49574447 
 1853      454E0000 
 1854 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
ARM GAS  tinyBasic.s 			page 53


 1854      24000000 
 1854      0B000000 
 1854      494E5645 
 1854      52540000 
 1855 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1855      23000000 
 1855      0A000000 
 1855      494E5055 
 1855      54000000 
 1856 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1856      22000000 
 1856      0A000000 
 1856      49460000 
 1857 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1857      21000000 
 1857      0B000000 
 1857      49445200 
 1858 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1858      20000000 
 1858      0A000000 
 1858      48455800 
 1859 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1859      1F000000 
 1859      0B000000 
 1859      4750494F 
 1859      00000000 
 1860 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1860      1E000000 
 1860      0A000000 
 1860      474F544F 
 1860      00000000 
 1861 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1861      1D000000 
 1861      0A000000 
 1861      474F5355 
 1861      42000000 
 1862 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1862      1C000000 
 1862      0A000000 
 1862      464F5247 
 1862      45540000 
 1863 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1863      1B000000 
 1863      0A000000 
 1863      464F5200 
 1864 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1864      1A000000 
 1864      0A000000 
 1864      46435055 
 1864      00000000 
 1865 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1865      18000000 
 1865      0A000000 
 1865      454E4400 
 1866 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1866      19000000 
 1866      0B000000 
ARM GAS  tinyBasic.s 			page 54


 1866      45455052 
 1866      4F4D0000 
 1867 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1867      17000000 
 1867      0A000000 
 1867      44575249 
 1867      54450000 
 1868 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1868      16000000 
 1868      0B000000 
 1868      44524541 
 1868      44000000 
 1869 0608 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1869      15000000 
 1869      0A000000 
 1869      444F0000 
 1870 0618 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1870      14000000 
 1870      0A000000 
 1870      44495200 
 1871 0628 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1871      13000000 
 1871      0A000000 
 1871      44454300 
 1872 0638 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1872      12000000 
 1872      0B000000 
 1872      44445200 
 1873 0648 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1873      11000000 
 1873      0A000000 
 1873      44415441 
 1873      4C4E0000 
 1874 065c 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 1874      10000000 
 1874      0A000000 
 1874      44415441 
 1874      00000000 
 1875 0670 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 1875      0F000000 
 1875      0B000000 
 1875      43524C00 
 1876 0680 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 1876      0E000000 
 1876      0B000000 
 1876      43524800 
 1877 0690 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 1877      0D000000 
 1877      0C000000 
 1877      43484152 
 1877      00000000 
 1878 06a4 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 1878      0C000000 
 1878      0A000000 
 1878      42594500 
 1879 06b4 B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 1879      0B000000 
ARM GAS  tinyBasic.s 			page 55


 1879      0A000000 
 1879      42544F47 
 1879      4C000000 
 1880 06c8 C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 1880      0A000000 
 1880      0B000000 
 1880      42544553 
 1880      54000000 
 1881 06dc D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 1881      09000000 
 1881      0A000000 
 1881      42534554 
 1881      00000000 
 1882 06f0 E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 1882      08000000 
 1882      0A000000 
 1882      42524553 
 1882      00000000 
 1883 0704 FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 1883      07000000 
 1883      0B000000 
 1883      42495400 
 1884 0714 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 1884      06000000 
 1884      0A000000 
 1884      41575500 
 1885 0724 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 1885      05000000 
 1885      0A000000 
 1885      4155544F 
 1885      52554E00 
 1886 0738 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 1886      04000000 
 1886      0B000000 
 1886      41534300 
 1887 0748 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 1887      03000000 
 1887      0B000000 
 1887      414E4400 
 1888 0758 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 1888      02000000 
 1888      0B000000 
 1888      41444352 
 1888      45414400 
 1889 076c 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 1889      01000000 
 1889      0A000000 
 1889      4144434F 
 1889      4E000000 
 1890              	first_link: 
 1891 0780 78070000 	  .word LINK 
 1892 0784 00000000 	  .word ABS_IDX 
 1893 0788 0B000000 	  .word TK_IFUNC
 1894              	kword_dict: // first name field 
 1895              	  .equ LINK,. 
 1896 078c 41425300 	  .asciz "ABS" 
 1897              	  .p2align 2 
ARM GAS  tinyBasic.s 			page 56


 1898              	
 1899              	    .section .rodata.fn_tabld 
 1900              	
 1901              	//comands and fonctions address table 	
 1902              	fn_table:
 1903 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 1903      00000000 
 1903      00000000 
 1903      00000000 
 1903      00000000 
 1904 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 1904      00000000 
 1904      00000000 
 1904      00000000 
 1904      00000000 
 1905 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 1905      00000000 
 1905      00000000 
 1905      00000000 
 1905      00000000 
 1906 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 1906      00000000 
 1906      00000000 
 1906      00000000 
 1906      00000000 
 1907 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 1907      00000000 
 1907      00000000 
 1907      00000000 
 1907      00000000 
 1908 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1909 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 1909      00000000 
 1909      00000000 
 1909      00000000 
 1909      00000000 
 1910 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1911 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 1911      00000000 
 1911      00000000 
 1911      00000000 
 1911      00000000 
 1912 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 1912      00000000 
 1912      00000000 
 1912      00000000 
 1912      00000000 
 1913 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 1913      00000000 
ARM GAS  tinyBasic.s 			page 57


 1913      00000000 
 1913      00000000 
 1913      00000000 
 1914 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 1914      00000000 
 1914      00000000 
 1914      00000000 
 1914      00000000 
 1915 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1916 0198 00000000 		.word 0 
 1917              	
 1918              	
 1919              	/**********************************
 1920              	    BASIC commands and functions 
 1921              	**********************************/
 1922              	
 1923              	    .section .text.basic , "ax", %progbits 
 1924              	
 1925              	
 1926              	//************ test code  *****************
 1927              	    _GBL_FUNC tbi_test 
 1928              	
 1929              	
 1930 0000 7047     	    _RET 
 1931              	
 1932              	//************ end test code **************
 1933              	
 1934              	
 1935              	/*******************************
 1936              	  BASIC:  ABS expr 
 1937              	  input:
 1938              	    none 
 1939              	  output:
 1940              	    r0    token type 
 1941              	    r1    abs(expr)
 1942              	  use:
 1943              	    none 
 1944              	******************************/
 1945 0002 00BF     	    _FUNC abs 
 1946 0004 00B5FFF7 	    _CALL arg_list
 1946      FEFF5DF8 
 1946      04EB
 1947 000e 0128     	    cmp r0,#1 
 1948 0010 01D0     	    beq 1f 
 1949 0012 FFF7FEBF 	    b syntax_error 
 1950 0016 5CF8041B 	1:  _POP r1 
 1951 001a 11F0004F 	    tst r1,#(1<<31)
 1952 001e 01D0     	    beq 9f
 1953 0020 C1F10001 	    rsb r1,#0 
 1954 0024 4FF00E00 	9:  mov r0,#TK_INTGR
 1955 0028 7047     	   _RET 
 1956              	
 1957 002a 00BF     	    _FUNC power_adc
ARM GAS  tinyBasic.s 			page 58


 1958 002c 7047     	    _RET
 1959              	
 1960 002e 00BF     	    _FUNC analog_read
 1961 0030 7047     	    _RET
 1962              	
 1963 0032 00BF     	    _FUNC bit_and
 1964 0034 7047     	    _RET
 1965              	
 1966 0036 00BF     	    _FUNC ascii
 1967 0038 7047     	    _RET
 1968              	
 1969 003a 00BF     	    _FUNC autorun
 1970 003c 7047     	    _RET
 1971              	
 1972 003e 00BF     	    _FUNC awu
 1973 0040 7047     	    _RET
 1974              	
 1975 0042 00BF     	    _FUNC bitmask
 1976 0044 7047     	    _RET 
 1977              	
 1978              	  
 1979              	  /*********************************
 1980              	   BASIC: BRES adr, mask   
 1981              	   reset bits [adr]= [adr] & ~mask  
 1982              	   input:
 1983              	     none 
 1984              	    output;
 1985              	      none 
 1986              	    use:
 1987              	      T1   temp
 1988              	      T2   temp 
 1989              	*******************************/     
 1990 0046 00BF     	  _FUNC bit_reset
 1991 0048 00B5FFF7 	    _CALL arg_list 
 1991      FEFF5DF8 
 1991      04EB
 1992 0052 0228     	    cmp r0,#2 
 1993 0054 01D0     	    beq 1f 
 1994 0056 FFF7FEBF 	    b syntax_error 
 1995 005a 5CF8041B 	1:  _POP r1 //mask 
 1996 005e 5CF8040B 	    _POP r0 //address 
 1997 0062 D0F80090 	    ldr T2,[r0] 
 1998 0066 81F0FF31 	    eor r1,#-1 // ~mask 
 1999 006a 01EA0901 	    and r1,T2
 2000 006e 0160     	    str r1,[r0]
 2001 0070 7047     	    _RET  
 2002              	
 2003              	
 2004              	/*********************************
 2005              	   BASIC: BSET adr, mask   
 2006              	   reset bits [adr]= [adr] & ~mask  
 2007              	   input:
 2008              	      none 
 2009              	    output;
 2010              	      none 
 2011              	    use:
 2012              	      T1   temp
ARM GAS  tinyBasic.s 			page 59


 2013              	      T2   temp  
 2014              	*******************************/     
 2015 0072 00BF     	    _FUNC bit_set
 2016 0074 00B5FFF7 	    _CALL arg_list 
 2016      FEFF5DF8 
 2016      04EB
 2017 007e 0228     	    cmp r0,#2 
 2018 0080 01D0     	    beq 1f 
 2019 0082 FFF7FEBF 	    b syntax_error 
 2020 0086 5CF8041B 	1:  _POP r1 //mask 
 2021 008a 5CF8040B 	    _POP r0 //address 
 2022 008e D0F80090 	    ldr T2,[r0] 
 2023 0092 41EA0901 	    orr r1,T2
 2024 0096 0160     	    str r1,[r0]
 2025 0098 7047     	    _RET 
 2026              	
 2027              	  /*********************************
 2028              	   BASIC: BTOGL adr, mask   
 2029              	   reset bits [adr]= [adr] & ~mask  
 2030              	   input:
 2031              	     r0    adr 
 2032              	     r1    mask 
 2033              	    output;
 2034              	      none 
 2035              	    use:
 2036              	      T1   temp
 2037              	      T2   temp  
 2038              	*******************************/     
 2039 009a 00BF     	  _FUNC bit_toggle
 2040 009c 00B5FFF7 	    _CALL arg_list 
 2040      FEFF5DF8 
 2040      04EB
 2041 00a6 0228     	    cmp r0,#2 
 2042 00a8 01D0     	    beq 1f 
 2043 00aa FFF7FEBF 	    b syntax_error 
 2044 00ae 5CF8041B 	1:  _POP r1 //mask 
 2045 00b2 5CF8040B 	    _POP r0 //address 
 2046 00b6 D0F80090 	    ldr T2,[r0] 
 2047 00ba 81EA0901 	    eor r1,T2
 2048 00be 0160     	    str r1,[r0]
 2049 00c0 7047     	    _RET  
 2050              	
 2051 00c2 00BF     	    _FUNC bit_test
 2052 00c4 7047     	    _RET 
 2053              	
 2054 00c6 00BF     	    _FUNC bye
 2055 00c8 7047     	    _RET 
 2056              	
 2057 00ca 00BF     	    _FUNC char
 2058 00cc 7047     	    _RET 
 2059              	
 2060 00ce 00BF     	    _FUNC const_cr2
 2061 00d0 7047     	    _RET  
 2062              	
 2063 00d2 00BF     	    _FUNC const_cr1
 2064 00d4 7047     	    _RET 
 2065              	
ARM GAS  tinyBasic.s 			page 60


 2066 00d6 00BF     	    _FUNC data
 2067 00d8 7047     	    _RET 
 2068              	
 2069 00da 00BF     	    _FUNC data_line
 2070 00dc 7047     	    _RET 
 2071              	
 2072 00de 00BF     	    _FUNC const_ddr
 2073 00e0 7047     	    _RET 
 2074              	
 2075 00e2 00BF     	    _FUNC dec_base
 2076 00e4 7047     	    _RET 
 2077              	
 2078 00e6 00BF     	    _FUNC directory
 2079 00e8 7047     	    _RET 
 2080              	
 2081 00ea 00BF     	    _FUNC do_loop
 2082 00ec 7047     	    _RET 
 2083              	
 2084 00ee 00BF     	    _FUNC digital_read
 2085 00f0 7047     	    _RET 
 2086              	
 2087 00f2 00BF     	    _FUNC digital_write
 2088 00f4 7047     	    _RET  
 2089              	
 2090 00f6 00BF     	    _FUNC cmd_end
 2091 00f8 7047     	    _RET 
 2092              	
 2093 00fa 00BF     	    _FUNC const_eeprom_base
 2094 00fc 7047     	    _RET 
 2095              	
 2096 00fe 00BF     	    _FUNC fcpu
 2097 0100 7047     	    _RET 
 2098              	
 2099 0102 00BF     	    _FUNC for
 2100 0104 7047     	    _RET 
 2101              	
 2102 0106 00BF     	    _FUNC forget
 2103 0108 7047     	    _RET 
 2104              	
 2105 010a 00BF     	    _FUNC gosub
 2106 010c 7047     	    _RET 
 2107              	
 2108 010e 00BF     	    _FUNC goto
 2109 0110 7047     	    _RET 
 2110              	
 2111 0112 00BF     	    _FUNC gpio
 2112 0114 7047     	    _RET  
 2113              	
 2114 0116 00BF     	    _FUNC hex_base
 2115 0118 7047     	    _RET 
 2116              	
 2117 011a 00BF     	    _FUNC const_idr
 2118 011c 7047     	    _RET 
 2119              	
 2120 011e 00BF     	    _FUNC if
 2121 0120 7047     	    _RET 
 2122              	
ARM GAS  tinyBasic.s 			page 61


 2123 0122 00BF     	    _FUNC input_var
 2124 0124 7047     	    _RET 
 2125              	
 2126 0126 00BF     	    _FUNC invert
 2127 0128 7047     	    _RET 
 2128              	
 2129 012a 00BF     	    _FUNC enable_iwdg
 2130 012c 7047     	    _RET 
 2131              	
 2132 012e 00BF     	    _FUNC refresh_iwdg
 2133 0130 7047     	    _RET 
 2134              	
 2135 0132 00BF     	    _FUNC key
 2136 0134 7047     	    _RET  
 2137              	
 2138              	/******************************
 2139              	  BASIC: [let] var=expr 
 2140              	         [let] @(expr)=expr
 2141              	  input:
 2142              	    none 
 2143              	  output:
 2144              	    none 
 2145              	  use:
 2146              	
 2147              	****************************/         
 2148 0136 00BF     	    _FUNC let
 2149 0138 00B5FFF7 	    _CALL next_token 
 2149      FEFF5DF8 
 2149      04EB
 2150 0142 0428     	    cmp r0,#TK_VAR
 2151 0144 03D0     	    beq let_var 
 2152 0146 0528     	    cmp r0,#TK_ARRAY 
 2153 0148 06D0     	    beq let_array 
 2154 014a FFF7FEBF 	    b syntax_error 
 2155              	let_var:
 2156 014e 00B5FFF7 	    _CALL get_array_element
 2156      FEFF5DF8 
 2156      04EB
 2157              	let_array: 
 2158 0158 4CF8040D 	    _PUSH r0 
 2159 015c 00B5FFF7 	    _CALL next_token 
 2159      FEFF5DF8 
 2159      04EB
 2160 0166 3228     	    cmp r0,#TK_EQUAL 
 2161 0168 01D0     	    beq 1f 
 2162 016a FFF7FEBF 	    b syntax_error 
 2163 016e 00B5FFF7 	1:  _CALL relation  
 2163      FEFF5DF8 
 2163      04EB
 2164 0178 0E28     	    cmp r0,#TK_INTGR
 2165 017a 01D0     	    beq 2f 
 2166 017c FFF7FEBF 	    b syntax_error 
 2167 0180 5CF8040B 	2:  _POP r0 
 2168 0184 0160     	    str r1,[r0]
 2169 0186 4FF00000 	    mov r0,#TK_NONE 
 2170 018a 7047     	    _RET  
 2171              	
ARM GAS  tinyBasic.s 			page 62


 2172              	    _FUNC list
 2173 018c 7047     	    _RET 
 2174              	
 2175 018e 00BF     	    _FUNC load
 2176 0190 7047     	    _RET 
 2177              	
 2178 0192 00BF     	    _FUNC log2
 2179 0194 7047     	    _RET 
 2180              	
 2181 0196 00BF     	    _FUNC lshift
 2182 0198 7047     	    _RET 
 2183              	
 2184 019a 00BF     	    _FUNC muldiv
 2185 019c 7047     	    _RET 
 2186              	
 2187 019e 00BF     	    _FUNC next
 2188 01a0 7047     	    _RET 
 2189              	
 2190 01a2 00BF     	    _FUNC new
 2191 01a4 7047     	    _RET  
 2192              	
 2193 01a6 00BF     	    _FUNC func_not
 2194 01a8 7047     	    _RET 
 2195              	
 2196 01aa 00BF     	    _FUNC const_odr
 2197 01ac 7047     	    _RET 
 2198              	
 2199 01ae 00BF     	    _FUNC bit_or
 2200 01b0 7047     	    _RET 
 2201              	
 2202 01b2 00BF     	    _FUNC pad_ref
 2203 01b4 7047     	    _RET 
 2204              	
 2205 01b6 00BF     	    _FUNC pause
 2206 01b8 7047     	    _RET 
 2207              	
 2208 01ba 00BF     	    _FUNC pin_mode
 2209 01bc 7047     	    _RET 
 2210              	
 2211 01be 00BF     	    _FUNC peek
 2212 01c0 7047     	    _RET 
 2213              	
 2214 01c2 00BF     	    _FUNC const_input
 2215 01c4 7047     	    _RET  
 2216              	
 2217 01c6 00BF     	    _FUNC poke
 2218 01c8 7047     	    _RET 
 2219              	
 2220 01ca 00BF     	    _FUNC const_output
 2221 01cc 7047     	    _RET 
 2222              	
 2223              	/****************************
 2224              	  BASIC: PRINT|? arg_list 
 2225              	  print list of arguments 
 2226              	****************************/
 2227 01ce 00BF     	    _FUNC print
 2228 01d0 88EA0808 	0:  eor T1,T1 // zero 
ARM GAS  tinyBasic.s 			page 63


 2229 01d4 00B5FFF7 	1:  _CALL next_token
 2229      FEFF5DF8 
 2229      04EB
 2230 01de 0128     	    cmp r0,#TK_COLON 
 2231 01e0 04DC     	    bgt 2f
 2232 01e2 D4F800A0 	    _UNGET_TOKEN 
 2232      D4F808B0 
 2233 01ea 39E0     	    b print_exit
 2234 01ec 0828     	2:  cmp r0,#TK_COMMA 
 2235 01ee 02D1     	    bne 3f 
 2236 01f0 4FF0FF38 	    mov T1,#-1 
 2237 01f4 34E0     	    b print_exit 
 2238 01f6 0228     	3:  cmp r0,#TK_QSTR 
 2239 01f8 06D1     	    bne 4f
 2240 01fa 0846     	    mov r0,r1 
 2241 01fc 00B5FFF7 	    _CALL uart_puts  
 2241      FEFF5DF8 
 2241      04EB
 2242 0206 E3E7     	    b 0b 
 2243 0208 0328     	4:  cmp r0,#TK_CHAR 
 2244 020a 06D1     	    bne 5f 
 2245 020c 0846     	    mov r0,r1 
 2246 020e 00B5FFF7 	    _CALL uart_putc 
 2246      FEFF5DF8 
 2246      04EB
 2247 0218 DAE7     	    b 0b 
 2248 021a 0928     	5:  cmp r0,#TK_SHARP
 2249 021c 09D1     	    bne 6f 
 2250 021e 00B5FFF7 	    _CALL next_token 
 2250      FEFF5DF8 
 2250      04EB
 2251 0228 0E28     	    cmp r0,#TK_INTGR 
 2252 022a 7FF4FEAF 	    bne syntax_error 
 2253 022e 6164     	    str r1,[UPP,#TAB_WIDTH]
 2254 0230 CEE7     	    b 0b 
 2255 0232 0E28     	6:  cmp r0,#TK_INTGR
 2256 0234 7FF4FEAF 	    bne syntax_error 
 2257 0238 D4F800A0 	    _UNGET_TOKEN 
 2257      D4F808B0 
 2258 0240 00B5FFF7 	    _CALL expression 
 2258      FEFF5DF8 
 2258      04EB
 2259 024a 0E28     	    cmp r0,#TK_INTGR 
 2260 024c 7FF4FEAF 	    bne syntax_error 
 2261 0250 0846     	    mov r0,r1 
 2262 0252 A169     	    ldr r1,[UPP,#BASE]
 2263 0254 00B5FFF7 	    _CALL print_int
 2263      FEFF5DF8 
 2263      04EB
 2264 025e B7E7     	    b 0b       
 2265              	  print_exit:
 2266 0260 18EA0808 	      ands T1,T1 
 2267 0264 06D1     	      bne 9f
 2268 0266 4FF00D00 	      mov r0,#CR 
 2269 026a 00B5FFF7 	      _CALL uart_putc 
 2269      FEFF5DF8 
 2269      04EB
ARM GAS  tinyBasic.s 			page 64


 2270 0274 7047     	  9:  _RET 
 2271              	
 2272 0276 00BF     	    _FUNC const_porta
 2273 0278 7047     	    _RET 
 2274              	
 2275 027a 00BF     	    _FUNC const_portb
 2276 027c 7047     	    _RET 
 2277              	
 2278 027e 00BF     	    _FUNC const_portc
 2279 0280 7047     	    _RET 
 2280              	
 2281 0282 00BF     	    _FUNC const_portd
 2282 0284 7047     	    _RET 
 2283              	
 2284 0286 00BF     	    _FUNC const_porte
 2285 0288 7047     	    _RET  
 2286              	
 2287 028a 00BF     	    _FUNC const_portf
 2288 028c 7047     	    _RET 
 2289              	
 2290 028e 00BF     	    _FUNC const_portg
 2291 0290 7047     	    _RET 
 2292              	
 2293 0292 00BF     	    _FUNC const_porth
 2294 0294 7047     	    _RET 
 2295              	
 2296 0296 00BF     	    _FUNC const_porti
 2297 0298 7047     	    _RET 
 2298              	
 2299 029a 00BF     	    _FUNC qkey
 2300 029c 7047     	    _RET 
 2301              	
 2302 029e 00BF     	    _FUNC read
 2303 02a0 7047     	    _RET 
 2304              	
 2305 02a2 00BF     	    _FUNC remark
 2306 02a4 7047     	    _RET  
 2307              	
 2308 02a6 00BF     	    _FUNC restore
 2309 02a8 7047     	    _RET 
 2310              	
 2311 02aa 00BF     	    _FUNC return
 2312 02ac 7047     	    _RET 
 2313              	
 2314 02ae 00BF     	    _FUNC  random
 2315 02b0 7047     	    _RET 
 2316              	
 2317 02b2 00BF     	    _FUNC rshift
 2318 02b4 7047     	    _RET 
 2319              	
 2320 02b6 00BF     	    _FUNC run
 2321 02b8 7047     	    _RET 
 2322              	
 2323 02ba 00BF     	    _FUNC save
 2324 02bc 7047     	    _RET 
 2325              	
 2326 02be 00BF     	    _FUNC show
ARM GAS  tinyBasic.s 			page 65


 2327 02c0 7047     	    _RET 
 2328              	
 2329 02c2 00BF     	    _FUNC size
 2330 02c4 7047     	    _RET  
 2331              	
 2332 02c6 00BF     	    _FUNC sleep
 2333 02c8 7047     	    _RET 
 2334              	
 2335 02ca 00BF     	    _FUNC spi_read
 2336 02cc 7047     	    _RET 
 2337              	
 2338 02ce 00BF     	    _FUNC spi_enable
 2339 02d0 7047     	    _RET 
 2340              	
 2341 02d2 00BF     	    _FUNC spi_select
 2342 02d4 7047     	    _RET 
 2343              	
 2344 02d6 00BF     	    _FUNC spi_write
 2345 02d8 7047     	    _RET 
 2346              	
 2347 02da 00BF     	    _FUNC step
 2348 02dc 7047     	    _RET 
 2349              	
 2350 02de 00BF     	    _FUNC stop
 2351 02e0 7047     	    _RET 
 2352              	
 2353 02e2 00BF     	    _FUNC get_ticks
 2354 02e4 7047     	    _RET  
 2355              	
 2356 02e6 00BF     	    _FUNC set_timer
 2357 02e8 7047     	    _RET 
 2358              	
 2359 02ea 00BF     	    _FUNC timeout
 2360 02ec 7047     	    _RET 
 2361              	
 2362 02ee 00BF     	    _FUNC to
 2363 02f0 7047     	    _RET 
 2364              	
 2365 02f2 00BF     	    _FUNC tone
 2366 02f4 7047     	    _RET 
 2367              	
 2368 02f6 00BF     	    _FUNC ubound
 2369 02f8 7047     	    _RET 
 2370              	
 2371 02fa 00BF     	    _FUNC uflash
 2372 02fc 7047     	    _RET 
 2373              	
 2374 02fe 00BF     	    _FUNC until
 2375 0300 7047     	    _RET 
 2376              	
 2377 0302 00BF     	    _FUNC usr
 2378 0304 7047     	    _RET  
 2379              	
 2380 0306 00BF     	    _FUNC wait
 2381 0308 7047     	    _RET 
 2382              	
 2383 030a 00BF     	    _FUNC words
ARM GAS  tinyBasic.s 			page 66


 2384 030c 7047     	    _RET 
 2385              	
 2386 030e 00BF     	    _FUNC write
 2387 0310 7047     	    _RET 
 2388              	
 2389 0312 00BF     	    _FUNC bit_xor
 2390 0314 7047     	    _RET 
 2391              	
 2392 0316 00BF     	    _FUNC transmit
 2393 0318 7047     	    _RET 
 2394              	
 2395 031a 00BF     	    _FUNC receive
 2396 031c 7047     	    _RET  
 2397              	
 2398              	
 2399              	/*************************************************
 2400              	   extra FLASH memory not used by Tiny BASIC
 2401              	   is used to save BASIC programs.
 2402              	************************************************/
 2403 031e 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2403      0080AFF3 
 2403      0080AFF3 
 2403      0080AFF3 
 2403      0080AFF3 
 2404              	  .section .fs
 2405              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 67


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 68


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 69


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 70


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 71


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:158    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:159    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:160    *ABS*:00000000000000cc ARRAY_ADR
      tbi_macros.inc:163    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:164    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:165    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:166    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:167    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:168    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:169    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:171    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:173    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:174    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
ARM GAS  tinyBasic.s 			page 72


       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
ARM GAS  tinyBasic.s 			page 73


       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:249    .text:0000000000000150 dump
         tinyBasic.s:273    .text:000000000000016c search_lineno
         tinyBasic.s:304    .text:000000000000018c delete_line
         tinyBasic.s:329    .text:00000000000001b8 create_gap
         tinyBasic.s:354    .text:00000000000001e0 insert_line
         tinyBasic.s:392    .text:000000000000022c compile
         tinyBasic.s:1241   .text:0000000000000858 pad
         tinyBasic.s:628    .text:0000000000000440 parse_int
         tinyBasic.s:994    .text:0000000000000648 tb_error
         tinyBasic.s:463    .text:00000000000002c0 comp_token
         tinyBasic.s:534    .text:000000000000039a store_r0
         tinyBasic.s:743    .text:0000000000000514 skip
         tinyBasic.s:762    .text:000000000000052c upper
         tinyBasic.s:566    .text:00000000000003d4 is_special
         tinyBasic.s:588    .text:0000000000000418 token_ofs
         tinyBasic.s:478    .text:0000000000000300 tok_idx0
         tinyBasic.s:537    .text:00000000000003a0 try_number
         tinyBasic.s:482    .text:0000000000000302 single
         tinyBasic.s:583    .text:0000000000000408 tok_single
         tinyBasic.s:486    .text:000000000000030a lt
         tinyBasic.s:489    .text:0000000000000310 gt
         tinyBasic.s:979    .text:0000000000000640 syntax_error
ARM GAS  tinyBasic.s 			page 74


         tinyBasic.s:549    .text:00000000000003d0 token_exit
         tinyBasic.s:505    .text:000000000000033a bkslash
         tinyBasic.s:512    .text:0000000000000350 prt_cmd
         tinyBasic.s:518    .text:0000000000000362 quote
         tinyBasic.s:682    .text:00000000000004ac parse_quote
         tinyBasic.s:523    .text:0000000000000376 tick
         tinyBasic.s:913    .text:00000000000005dc parse_keyword
         tinyBasic.s:580    .text:00000000000003f4 char_list
         tinyBasic.s:581    .text:00000000000003f4 $d
         tinyBasic.s:589    .text:0000000000000418 $d
         tinyBasic.s:605    .text:000000000000043e $t
         tinyBasic.s:713    .text:00000000000004e0 get_escaped_char
         tinyBasic.s:730    .text:000000000000050a escaped
         tinyBasic.s:730    .text:000000000000050a $d
         tinyBasic.s:743    .text:0000000000000512 $t
         tinyBasic.s:780    .text:000000000000053c is_digit
         tinyBasic.s:803    .text:0000000000000554 is_hex
         tinyBasic.s:828    .text:0000000000000578 is_bit
         tinyBasic.s:849    .text:0000000000000594 is_alpha
         tinyBasic.s:870    .text:00000000000005ac is_num
         tinyBasic.s:891    .text:00000000000005c4 is_alnum
         tinyBasic.s:1894   .rodata.dictionary:000000000000078c kword_dict
         tinyBasic.s:1074   .text:00000000000006e0 search_dict
         tinyBasic.s:949    .text:0000000000000620 cmd_name
         tinyBasic.s:1016   .text:000000000000069c err_msg
         tinyBasic.s:1005   .text:0000000000000666 compile_error
         tinyBasic.s:1002   .text:0000000000000664 interpret_error
         tinyBasic.s:1254   .text:0000000000000868 warm_start
         tinyBasic.s:1017   .text:000000000000069c $d
         tinyBasic.s:1023   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1024   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1025   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1026   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1027   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1028   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1029   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1030   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1031   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1032   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1033   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1034   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1035   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1036   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1037   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1039   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1040   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1041   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1058   .text:00000000000006dc $t
         tinyBasic.s:1058   .text:00000000000006dc BTGL
         tinyBasic.s:1111   .text:0000000000000714 cold_start
         tinyBasic.s:1124   .text:000000000000074c src_addr
         tinyBasic.s:1126   .text:0000000000000750 dest_addr
         tinyBasic.s:1779   .rodata:00000000000000d4 ulast
         tinyBasic.s:1753   .rodata:0000000000000000 uzero
         tinyBasic.s:1138   .text:0000000000000754 prt_version
         tinyBasic.s:1195   .text:00000000000007fc clear_basic
         tinyBasic.s:1125   .text:000000000000074c $d
ARM GAS  tinyBasic.s 			page 75


         tinyBasic.s:1138   .text:0000000000000754 $t
         tinyBasic.s:1162   .text:00000000000007bc version_msg
         tinyBasic.s:1164   .text:00000000000007dc version
         tinyBasic.s:1163   .text:00000000000007bc $d
         tinyBasic.s:1179   .text:00000000000007e0 clear_vars
         tinyBasic.s:1220   .text:0000000000000822 warm_init
         tinyBasic.s:1238   .text:000000000000084c mstack
         tinyBasic.s:1239   .text:0000000000000850 dstack
         tinyBasic.s:1238   .text:000000000000084c $d
         tinyBasic.s:1240   .text:0000000000000854 tib
         tinyBasic.s:1242   .text:000000000000085c array
         tinyBasic.s:1243   .text:0000000000000860 ready
         tinyBasic.s:1254   .text:0000000000000866 $t
         tinyBasic.s:1271   .text:000000000000087c cmd_line
         tinyBasic.s:1282   .text:00000000000008ac interpreter
         tinyBasic.s:1300   .text:00000000000008ce interp_loop
         tinyBasic.s:1287   .text:00000000000008b2 next_line
         tinyBasic.s:1336   .text:0000000000000904 next_token
         tinyBasic.s:1902   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:2155   .text.basic:000000000000014e let_var
         tinyBasic.s:2157   .text.basic:0000000000000158 let_array
         tinyBasic.s:1380   .text:0000000000000974 tok_jmp
         tinyBasic.s:1381   .text:0000000000000974 $d
         tinyBasic.s:1396   .text:00000000000009ba $t
         tinyBasic.s:1411   .text:00000000000009bc expect
         tinyBasic.s:1430   .text:00000000000009d8 func_args
         tinyBasic.s:1450   .text:0000000000000a04 arg_list
         tinyBasic.s:1617   .text:0000000000000b8c relation
         tinyBasic.s:1481   .text:0000000000000a40 factor
         tinyBasic.s:1683   .text:0000000000000c10 get_array_element
         tinyBasic.s:1720   .text:0000000000000c38 get_var
         tinyBasic.s:1527   .text:0000000000000ab0 term
         tinyBasic.s:1545   .text:0000000000000af4 multiplication
         tinyBasic.s:1553   .text:0000000000000b06 modulo
         tinyBasic.s:1550   .text:0000000000000b00 division
         tinyBasic.s:1576   .text:0000000000000b28 expression
         tinyBasic.s:1664   .text:0000000000000c06 relop_jmp
         tinyBasic.s:1636   .text:0000000000000bd6 rel_idx0
         tinyBasic.s:1637   .text:0000000000000bd6 rel_eq
         tinyBasic.s:1654   .text:0000000000000bec rel_false
         tinyBasic.s:1640   .text:0000000000000bda rel_lt
         tinyBasic.s:1643   .text:0000000000000bde rel_le
         tinyBasic.s:1646   .text:0000000000000be2 rel_gt
         tinyBasic.s:1649   .text:0000000000000be6 rel_ge
         tinyBasic.s:1652   .text:0000000000000bea rel_diff
         tinyBasic.s:1665   .text:0000000000000c06 $d
         tinyBasic.s:1702   .text:0000000000000c24 set_array_element
         tinyBasic.s:1738   .text:0000000000000c48 set_var
         tinyBasic.s:2405   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1775   .rodata:0000000000000054 $d
         tinyBasic.s:1786   *ABS*:0000000000000000 link
         tinyBasic.s:1787   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:1895   .rodata.dictionary:000000000000078c LINK
         tinyBasic.s:1788   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:1890   .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:1945   .text.basic:0000000000000004 abs
         tinyBasic.s:1957   .text.basic:000000000000002c power_adc
ARM GAS  tinyBasic.s 			page 76


         tinyBasic.s:1960   .text.basic:0000000000000030 analog_read
         tinyBasic.s:1963   .text.basic:0000000000000034 bit_and
         tinyBasic.s:1966   .text.basic:0000000000000038 ascii
         tinyBasic.s:1969   .text.basic:000000000000003c autorun
         tinyBasic.s:1972   .text.basic:0000000000000040 awu
         tinyBasic.s:1975   .text.basic:0000000000000044 bitmask
         tinyBasic.s:1990   .text.basic:0000000000000048 bit_reset
         tinyBasic.s:2015   .text.basic:0000000000000074 bit_set
         tinyBasic.s:2051   .text.basic:00000000000000c4 bit_test
         tinyBasic.s:2039   .text.basic:000000000000009c bit_toggle
         tinyBasic.s:2054   .text.basic:00000000000000c8 bye
         tinyBasic.s:2057   .text.basic:00000000000000cc char
         tinyBasic.s:2060   .text.basic:00000000000000d0 const_cr2
         tinyBasic.s:2063   .text.basic:00000000000000d4 const_cr1
         tinyBasic.s:2066   .text.basic:00000000000000d8 data
         tinyBasic.s:2069   .text.basic:00000000000000dc data_line
         tinyBasic.s:2072   .text.basic:00000000000000e0 const_ddr
         tinyBasic.s:2075   .text.basic:00000000000000e4 dec_base
         tinyBasic.s:2078   .text.basic:00000000000000e8 directory
         tinyBasic.s:2081   .text.basic:00000000000000ec do_loop
         tinyBasic.s:2084   .text.basic:00000000000000f0 digital_read
         tinyBasic.s:2087   .text.basic:00000000000000f4 digital_write
         tinyBasic.s:2090   .text.basic:00000000000000f8 cmd_end
         tinyBasic.s:2093   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2096   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2099   .text.basic:0000000000000104 for
         tinyBasic.s:2102   .text.basic:0000000000000108 forget
         tinyBasic.s:2105   .text.basic:000000000000010c gosub
         tinyBasic.s:2108   .text.basic:0000000000000110 goto
         tinyBasic.s:2111   .text.basic:0000000000000114 gpio
         tinyBasic.s:2114   .text.basic:0000000000000118 hex_base
         tinyBasic.s:2117   .text.basic:000000000000011c const_idr
         tinyBasic.s:2120   .text.basic:0000000000000120 if
         tinyBasic.s:2123   .text.basic:0000000000000124 input_var
         tinyBasic.s:2126   .text.basic:0000000000000128 invert
         tinyBasic.s:2129   .text.basic:000000000000012c enable_iwdg
         tinyBasic.s:2132   .text.basic:0000000000000130 refresh_iwdg
         tinyBasic.s:2135   .text.basic:0000000000000134 key
         tinyBasic.s:2148   .text.basic:0000000000000138 let
         tinyBasic.s:2172   .text.basic:000000000000018c list
         tinyBasic.s:2175   .text.basic:0000000000000190 load
         tinyBasic.s:2178   .text.basic:0000000000000194 log2
         tinyBasic.s:2181   .text.basic:0000000000000198 lshift
         tinyBasic.s:2184   .text.basic:000000000000019c muldiv
         tinyBasic.s:2187   .text.basic:00000000000001a0 next
         tinyBasic.s:2190   .text.basic:00000000000001a4 new
         tinyBasic.s:2193   .text.basic:00000000000001a8 func_not
         tinyBasic.s:2196   .text.basic:00000000000001ac const_odr
         tinyBasic.s:2199   .text.basic:00000000000001b0 bit_or
         tinyBasic.s:2202   .text.basic:00000000000001b4 pad_ref
         tinyBasic.s:2205   .text.basic:00000000000001b8 pause
         tinyBasic.s:2208   .text.basic:00000000000001bc pin_mode
         tinyBasic.s:2211   .text.basic:00000000000001c0 peek
         tinyBasic.s:2214   .text.basic:00000000000001c4 const_input
         tinyBasic.s:2217   .text.basic:00000000000001c8 poke
         tinyBasic.s:2220   .text.basic:00000000000001cc const_output
         tinyBasic.s:2227   .text.basic:00000000000001d0 print
ARM GAS  tinyBasic.s 			page 77


         tinyBasic.s:2272   .text.basic:0000000000000278 const_porta
         tinyBasic.s:2275   .text.basic:000000000000027c const_portb
         tinyBasic.s:2278   .text.basic:0000000000000280 const_portc
         tinyBasic.s:2281   .text.basic:0000000000000284 const_portd
         tinyBasic.s:2284   .text.basic:0000000000000288 const_porte
         tinyBasic.s:2287   .text.basic:000000000000028c const_portf
         tinyBasic.s:2290   .text.basic:0000000000000290 const_portg
         tinyBasic.s:2293   .text.basic:0000000000000294 const_porth
         tinyBasic.s:2296   .text.basic:0000000000000298 const_porti
         tinyBasic.s:2299   .text.basic:000000000000029c qkey
         tinyBasic.s:2302   .text.basic:00000000000002a0 read
         tinyBasic.s:2305   .text.basic:00000000000002a4 remark
         tinyBasic.s:2308   .text.basic:00000000000002a8 restore
         tinyBasic.s:2311   .text.basic:00000000000002ac return
         tinyBasic.s:2314   .text.basic:00000000000002b0 random
         tinyBasic.s:2317   .text.basic:00000000000002b4 rshift
         tinyBasic.s:2320   .text.basic:00000000000002b8 run
         tinyBasic.s:2323   .text.basic:00000000000002bc save
         tinyBasic.s:2326   .text.basic:00000000000002c0 show
         tinyBasic.s:2329   .text.basic:00000000000002c4 size
         tinyBasic.s:2332   .text.basic:00000000000002c8 sleep
         tinyBasic.s:2335   .text.basic:00000000000002cc spi_read
         tinyBasic.s:2338   .text.basic:00000000000002d0 spi_enable
         tinyBasic.s:2341   .text.basic:00000000000002d4 spi_select
         tinyBasic.s:2344   .text.basic:00000000000002d8 spi_write
         tinyBasic.s:2347   .text.basic:00000000000002dc step
         tinyBasic.s:2350   .text.basic:00000000000002e0 stop
         tinyBasic.s:2353   .text.basic:00000000000002e4 get_ticks
         tinyBasic.s:2356   .text.basic:00000000000002e8 set_timer
         tinyBasic.s:2359   .text.basic:00000000000002ec timeout
         tinyBasic.s:2362   .text.basic:00000000000002f0 to
         tinyBasic.s:2365   .text.basic:00000000000002f4 tone
         tinyBasic.s:2368   .text.basic:00000000000002f8 ubound
         tinyBasic.s:2371   .text.basic:00000000000002fc uflash
         tinyBasic.s:2374   .text.basic:0000000000000300 until
         tinyBasic.s:2377   .text.basic:0000000000000304 usr
         tinyBasic.s:2380   .text.basic:0000000000000308 wait
         tinyBasic.s:2383   .text.basic:000000000000030c words
         tinyBasic.s:2386   .text.basic:0000000000000310 write
         tinyBasic.s:2389   .text.basic:0000000000000314 bit_xor
         tinyBasic.s:2392   .text.basic:0000000000000318 transmit
         tinyBasic.s:2395   .text.basic:000000000000031c receive
         tinyBasic.s:1927   .text.basic:0000000000000000 tbi_test
         tinyBasic.s:1927   .text.basic:0000000000000000 $t
         tinyBasic.s:2265   .text.basic:0000000000000260 print_exit
         tinyBasic.s:1750   .text:0000000000000c56 $d
         tinyBasic.s:2405   .text:0000000000000c58 $d
         tinyBasic.s:587    .text:0000000000000415 $d
         tinyBasic.s:587    .text:0000000000000416 $t
         tinyBasic.s:1166   .text:00000000000007dd $d
         tinyBasic.s:1166   .text:00000000000007de $t
         tinyBasic.s:1683   .text:0000000000000c0d $d
         tinyBasic.s:1683   .text:0000000000000c0e $t

UNDEFINED SYMBOLS
uart_puts
print_int
ARM GAS  tinyBasic.s 			page 78


uart_putc
spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
