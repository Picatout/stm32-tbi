ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//   constantes related to Arduino 
  35              	//   API mapping 
  36              	//-------------------------------------
  37              	  .equ INP,0
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ OUTP,1 
  39              	
  40              	//--------------------------------------
  41              	//       token attribute
  42              	//--------------------------------------
  43              	// bits 4:5 identify token group 
  44              	// 0x0n -> miscelinous 
  45              	// 0x1n -> +|- operators 
  46              	// 0x2n -> *|/|% operators
  47              	// 0x3n -> relational operators 
  48              	  .equ TK_NONE,0       // not a token 
  49              	  .equ TK_COLON,1      // command separator ':' 
  50              	  .equ TK_QSTR,2     // quoted string  
  51              	  .equ TK_CHAR,3       // ASCII character 
  52              	  .equ TK_VAR,4      // variable index 
  53              	  .equ TK_ARRAY,5     // array variable '@' 
  54              	  .equ TK_LPAREN,6     // left parenthesis '('
  55              	  .equ TK_RPAREN,7     // right parenthesis ')'
  56              	  .equ TK_COMMA,8     // item separator ',' 
  57              	  .equ TK_SEMIC,9     // semi-colon  
  58              	  .equ TK_SHARP,0xa     // print colon width '#' 
  59              	  .equ TK_CMD,0xb      // BASIC command   
  60              	  .equ TK_IFUNC,0xc    // BASIC integer function
  61              	  .equ TK_CFUNC,0xd    // BASIC character function
  62              	  .equ TK_CONST,0xe    // BASIC constant 
  63              	  .equ TK_INTGR,0xf    // 32 bits integer 
  64              	  .equ TK_PLUS,0x10    // addition operator '+'
  65              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  66              	  .equ TK_MULT,0x20    // multiplication operator '*'
  67              	  .equ TK_DIV,0x21     // division operator '/'
  68              	  .equ TK_MOD,0x22     // modulo operator '%'
  69              	  .equ TK_LBL,0x40     // label token 
  70              	  
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  79              	  .equ TK_GE,0x33      // relation operator '>='
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<='
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	  .equ ERR_CANT_PROG,16
 111              	  
 112              	
 113              	//--------------------------------------
 114              	//   assembler flags 
 115              	//-------------------------------------
 116              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 117              	
 118              	.equ CELL_SIZE,4 
 119              	
 120              	
 121              	//-------------------------------
 122              	//  macros used to help debugging
 123              	//-------------------------------
 124              	  .equ DEBUG,0
 125              	
 126              	    UPP .req r4  // base address system variables 
 127              	    VADR .req r5  // address FOR loop variable 
 128              	    LIMIT .req r6   // LOOP limit 
 129              	    INCR  .req  r7  // LOOP increment 
 130              	    T1  .req r8     // temporary register 
 131              	    T2  .req r9     // temporary register 
 132              	    IN  .req r10    //  index in text line or token list 
 133              	    BPTR .req r11   //  buffer address or BASIC line address 
 134              	    DP   .req r12   //  parameter stack pointer 
 135              	
 136              	/***************************
 137              	  SYSTEM variables offset 
 138              	  from UPP  
 139              	***************************/ 
 140              	
 141              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 142              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 143              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 144              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 145              	  .equ DATA,DATAPTR+4 // index to next data item 
 146              	  .equ DATALEN, DATA+4 // length of data line 
 147              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 148              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 149              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 150              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 151              	  .equ FSPTR,SEED+4 //  pointer used by file system
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 153              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 154              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 155              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 156              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 157              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 158              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 159              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 160              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 161              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 162              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 163              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 164              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 165              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 166              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 167              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 168              	
 169              	/* flags used by BASIC interpreter */ 
 170              		.equ FRUN,(1<<0) // programm running
 171              		.equ FTRAP,(1<<1) // inside trap handler 
 172              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 173              		.equ FSTOP,(1<<3) // program stopped  
 174              		.equ FBREAK,(1<<4) // break point flag 
 175              		.equ FCOMP,(1<<5)  // compiling flags 
 176              		.equ FAUTORUN,(1<<6) // auto start program running 
 177              	
 178              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 179              	  
 180              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 181              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 182              	
 183              	/***********************************************
 184              	*       MACROS
 185              	***********************************************/
 186              		.macro _CALL fn /* low level routine call */ 
 187              	 	PUSH {LR}
 188              		BL \fn  
 189              	  POP {LR}
 190              		.endm
 191              		
 192              		.macro	_RET /* return from subroutine */
 193              		BX	LR
 194              		.endm
 195              	
 196              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 197              		MOV \REG, #\LITERAL&0xffff
 198              		MOVT \REG, #\LITERAL>>16
 199              		.endm
 200              	
 201              	// local function header 
 202              	  .macro _FUNC label 
 203              	  .p2align 2 
 204              	  .type \label, %function  
 205              	\label:
 206              	  .endm 
 207              	
 208              	// global function header 
ARM GAS  tinyBasic.s 			page 10


 209              	  .macro _GBL_FUNC label 
 210              	  .global \label 
 211              	  _FUNC \label 
 212              	  .endm 
 213              	
 214              	
 215              	/********************************
 216              	    dictionary structure
 217              	------------------------------
 218              	 format:
 219              	   link:    
 220              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 221              	   cmd_name: 31 characters max 
 222              	   cmd_index: 2 bytes 
 223              	**********************************/
 224              		.macro _dict_entry tok_type,name,cmd_idx 
 225              	  .word LINK 
 226              	  .word \cmd_idx 
 227              		.word \tok_type  	
 228              		.equ LINK,.
 229              		.asciz "\name"
 230              		.p2align 2 
 231              		.endm 
 232              	
 233              	  // pop parameter in register 
 234              	  .macro _POP  reg 
 235              	  ldmia  DP!,{\reg}
 236              	  .endm 
 237              	
 238              	  // push register on parameter stack 
 239              	  .macro _PUSH reg 
 240              	  stmdb DP!,{\reg}
 241              	  .endm 
 242              	
 243              	  // drop n parameters on dstack 
 244              	  .macro _DROP n
 245              	  mov r0,#4*\n
 246              	  add DP,R0 
 247              	  .endm 
 248              	
 249              	  // back to previous token in list 
 250              	  .macro _UNGET_TOKEN 
 251              	  ldr IN,[UPP,#IN_SAVED]
 252              	  ldr BPTR,[UPP,#BASICPTR] 
 253              	  .endm 
 254              	
 255              	 // create a text data 
 256              	 .macro _TEXT label,text
 257              	 \label: .asciz "\text"
 258              	 .p2align 2 
 259              	 .endm 
 260              	
 261              	// command line only 
 262              	  .macro _CLO 
 263              	  ldr r0,[UPP,#FLAGS]
 264              	  tst r0,#FRUN 
 265              	  beq 1f 
ARM GAS  tinyBasic.s 			page 11


 266              	  mov r0,#ERR_CMD_ONLY
 267              	  b tb_error
 268              	1: 
 269              	  .endm 
 270              	
 271              	// run time only 
 272              	  .macro _RTO 
 273              	  ldr r0,[UPP,#FLAGS]
 274              	  tst r0,#FRUN 
 275              	  bne 1f 
 276              	  mov r0,#ERR_CMD_ONLY
 277              	  b tb_error
 278              	1:
 279              	  .endm 
 280              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CONST_IDX,CHAR_IDX+1 //
  36              	    .equ DATA_IDX,CONST_IDX+1 // 
  37              	    .equ DATALN_IDX,DATA_IDX+1 // 
  38              	    .equ DEC_IDX,DATALN_IDX+1 // 
  39              	    .equ DIR_IDX,DEC_IDX+1 // 
  40              	    .equ DO_IDX,DIR_IDX+1 // 
  41              	    .equ DROP_IDX,DO_IDX+1
ARM GAS  tinyBasic.s 			page 12


  42              	    .equ DUMP_IDX, DROP_IDX+1 
  43              	    .equ END_IDX,DUMP_IDX+1 // 
  44              	    .equ ERASE_IDX,END_IDX+1 
  45              	    .equ FLASH_IDX,ERASE_IDX+1
  46              	    .equ FOR_IDX, FLASH_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  49              	    .equ GOTO_IDX, GOSUB_IDX+1
  50              	    .equ HEX_IDX, GOTO_IDX+1 // 
  51              	    .equ IF_IDX, HEX_IDX+1 // 
  52              	    .equ INP_IDX,IF_IDX+1
  53              	    .equ INPUT_IDX, INP_IDX+1 // 
  54              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  55              	    .equ KEY_IDX, INVERT_IDX+1 // 
  56              	    .equ LET_IDX, KEY_IDX+1 // 
  57              	    .equ LIST_IDX, LET_IDX+1 // 
  58              	    .equ LOAD_IDX, LIST_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOAD_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
  71              	    .equ PICK_IDX,PEEK32_IDX+1
  72              	    .equ POKE8_IDX, PICK_IDX+1 // 
  73              	    .equ POKE16_IDX,POKE8_IDX+1 
  74              	    .equ POKE32_IDX,POKE16_IDX+1
  75              	    .equ POP_IDX,POKE32_IDX+1
  76              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  77              	    .equ PUSH_IDX,PRT_IDX+1
  78              	    .equ QKEY_IDX, PUSH_IDX+1 // 
  79              	    .equ READ_IDX, QKEY_IDX+1 // 
  80              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  81              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  82              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  83              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  84              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  85              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  86              	    .equ SAVE_IDX, RUN_IDX+1 // 
  87              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  88              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  89              	    .equ SPC_IDX,SLEEP_IDX+1 //
  90              	    .equ STEP_IDX, SPC_IDX+1 // 
  91              	    .equ STOP_IDX, STEP_IDX+1 // 
  92              	    .equ STORE_IDX,STOP_IDX+1
  93              	    .equ TAB_IDX, STORE_IDX+1 //
  94              	    .equ THEN_IDX,TAB_IDX+1
  95              	    .equ TICKS_IDX, THEN_IDX+1 // 
  96              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  97              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  98              	    .equ TO_IDX, TMROUT_IDX+1 // 
ARM GAS  tinyBasic.s 			page 13


  99              	    .equ TRACE_IDX,TO_IDX+1
 100              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 101              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 102              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 103              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 104              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 105              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 106              	    .equ XOR_IDX, WRITE_IDX+1 //  
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
ARM GAS  tinyBasic.s 			page 14


  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
ARM GAS  tinyBasic.s 			page 15


 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
ARM GAS  tinyBasic.s 			page 16


 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
ARM GAS  tinyBasic.s 			page 17


 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
ARM GAS  tinyBasic.s 			page 18


 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 19


 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL expression 
 318      9DFF5DF8 
 318      04EB
 319 0256 0F28     	    cmp r0,#TK_INTGR 
 320 0258 0ED0     	    beq 2f 
 321 025a 00B500F0 	    _CALL next_token 
 321      28FE5DF8 
 321      04EB
 322 0264 4028     	    cmp r0,#TK_LBL 
 323 0266 40F02984 	    bne syntax_error 
 324 026a 00B500F0 	    _CALL search_label
 324      2AF85DF8 
 324      04EB
 325 0274 40B1     	    cbz r0,8f
 326 0276 0BE0     	    b 9f 
 327 0278 0846     	2:  mov r0,r1 
 328 027a 48B1     	    cbz r0,9f 
 329 027c 00B5FFF7 	    _CALL search_lineno 
 329      FEFF5DF8 
 329      04EB
 330 0286 19B1     	    cbz r1,9f 
 331 0288 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 332 028c 00F01ABC 	    b tb_error 
 333 0290 7047     	9:  _RET 
 334              	
 335              	
 336              	/***************************************
 337              	  search_const 
 338              	  search for constant 
 339              	  input:
 340              	    r0  constant label 
 341              	  output:
 342              	    r0  constant value  
 343              	  use:
 344              	    r1  temp 
 345              	    T1   *list 
 346              	    T2   BOUND 
 347              	***************************************/
 348 0292 00BF     	    _FUNC search_const
 349 0294 2DE90203 	    push {r1,T1,T2} 
 350 0298 D4F83480 	    ldr T1,[UPP,#TXTEND]
 351 029c D4F8D090 	    ldr T2,[UPP,#HERE] 
 352 02a0 C845     	1:  cmp T1,T2 
 353 02a2 0BD5     	    bpl 8f 
 354 02a4 58F8041B 	    ldr r1,[T1],#4
 355 02a8 8842     	    cmp r0,r1 
 356 02aa 02D0     	    beq 2f 
 357 02ac 08F10408 	    add T1,#4
 358 02b0 F6E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 20


 359              	2:  // found 
 360 02b2 D8F80000 	    ldr r0,[T1]
 361 02b6 BDE80203 	    pop {r1,T1,T2}
 362 02ba 7047     	    _RET
 363              	8:  // that constant doesn't exist 
 364 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 365 02c0 00F000BC 	    b tb_error      
 366              	
 367              	
 368              	/***************************************
 369              	    search_label 
 370              	    search target label 
 371              	    input:
 372              	      r1    target label 
 373              	    output:
 374              	      r0    address or 0 
 375              	    use:
 376              	      r2    line address link 
 377              	      r3    search limit 
 378              	****************************************/
 379              	    _FUNC search_label 
 380 02c4 0CB4     	    push {r2,r3}
 381 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 382 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 383 02ca 9A42     	1:  cmp r2,r3
 384 02cc 0AD0     	    beq 8f 
 385 02ce D078     	    ldrb r0,[r2,#3]
 386 02d0 4028     	    cmp  r0,#TK_LBL 
 387 02d2 02D0     	    beq 4f 
 388 02d4 9078     	2:  ldrb r0,[r2,#2]
 389 02d6 0244     	    add r2,r0 
 390 02d8 F7E7     	    b 1b 
 391              	4:  // compare label 
 392 02da 5068     	    ldr r0,[R2,#4]
 393 02dc 8142     	    cmp r1,r0 
 394 02de F9D1     	    bne 2b 
 395              	    // found label 
 396 02e0 1046     	    mov r0,r2 
 397 02e2 01E0     	    b 9f
 398 02e4 80EA0000 	8:  eor r0,r0 
 399 02e8 0CBC     	9:  pop {r2,r3}
 400 02ea 7047     	    _RET 
 401              	
 402              	
 403              	/***************************************
 404              	    search_lineno 
 405              	    localize BASIC line from its number 
 406              	    input:
 407              	      r0   line# 
 408              	    output: 
 409              	      r0   adr where found || adr new to be inserted 
 410              	      r1   0 found || !0 not found  
 411              	    use:
 412              	      r0   scan address 
 413              	      r1   temp   
 414              	      r2   address end of text
 415              	      r3   target line#
ARM GAS  tinyBasic.s 			page 21


 416              	****************************************/    
 417              	    _GBL_FUNC search_lineno
 418 02ec 0CB4     	    push {r2,r3} 
 419 02ee 0346     	    mov r3,r0 // target 
 420 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 421 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 422 02f4 9042     	1:  cmp r0,r2 
 423 02f6 05D0     	    beq  8f
 424 02f8 0188     	    ldrh r1,[r0]
 425 02fa C91A     	    subs r1,r3 
 426 02fc 04D5     	    bpl 9f 
 427 02fe 8178     	    ldrb r1,[r0,#2]
 428 0300 0844     	    add r0,r1
 429 0302 F7E7     	    b 1b 
 430 0304 4FF0FF31 	8:  mov r1,#-1 
 431 0308 0CBC     	9:  pop {r2,r3}
 432 030a 7047     	    _RET 
 433              	
 434              	
 435              	/********************************************
 436              	    delete_line 
 437              	    delete BASIC line at addr 
 438              	    input:
 439              	      r0    address line to delete 
 440              	    output:
 441              	      r0    same as input 
 442              	    use: 
 443              	      r1    dest adr
 444              	      r2    bytes to move 
 445              	      T1    length line to delete 
 446              	      T2    txtend 
 447              	********************************************/
 448              	    _FUNC delete_line 
 449 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
 450 0310 0146     	    mov r1,r0 // dest 
 451 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 452 0316 4044     	    add r0,T1  // src
 453 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 454 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 455 0320 00B5FFF7 	    _CALL cmove
 455      FEFF5DF8 
 455      04EB
 456 032a A9EB0809 	    sub T2,T1 // txtend-count 
 457 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 458 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 459 0336 7047     	    _RET 
 460              	
 461              	/******************************************
 462              	    create_gap 
 463              	    create a gap in text area to insert new line 
 464              	    input:
 465              	      r0    adr 
 466              	      r1    length 
 467              	    output:
 468              	      r0    adr 
 469              	    use:
 470              	      T1    length 
ARM GAS  tinyBasic.s 			page 22


 471              	      T2    txtend 
 472              	************************************************/
 473              	    _FUNC create_gap 
 474 0338 2DE90503 	    push {r0,r2,T1,T2}
 475 033c 8846     	    mov T1,R1
 476 033e 0144     	    add r1,r0  // dest 
 477 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 478 0344 A9EB0002 	    sub r2,T2,r0 
 479 0348 00B5FFF7 	    _CALL cmove
 479      FEFF5DF8 
 479      04EB
 480 0352 C144     	    add T2,T1 
 481 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 482 0358 BDE80503 	    pop {r0,r2,T1,T2}
 483 035c 7047     	    _RET 
 484              	
 485              	/************************************************
 486              	    insert_line 
 487              	    insert BASIC line in text area 
 488              	    first search if line with same number exist 
 489              	    replace if so. 
 490              	    input:
 491              	      r0    *buffer to insert 
 492              	    output:
 493              	      none 
 494              	    use: 
 495              	      T1     *buffer
 496              	      T2     temp  
 497              	************************************************/ 
 498 035e 00BF     	    _FUNC insert_line 
 499 0360 2DE90203 	    push {r1,T1,T2}
 500 0364 8046     	    mov T1,r0 
 501 0366 B8F80000 	    ldrh r0,[T1]
 502 036a 00B5FFF7 	    _CALL search_lineno 
 502      FEFF5DF8 
 502      04EB
 503 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 504              	// already exist 
 505 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 505      C8FF5DF8 
 505      04EB
 506 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 507 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 508 0388 0ED0     	    beq 9f
 509              	1: //insert new line 
 510 038a 98F80210 	    ldrb r1,[T1,#2]
 511 038e 00B5FFF7 	    _CALL create_gap 
 511      D2FF5DF8 
 511      04EB
 512 0398 0146     	    mov r1,r0
 513 039a 4046     	    mov r0,T1 
 514 039c 8278     	    ldrb r2,[r0,#2]
 515 039e 00B5FFF7 	    _CALL cmove 
 515      FEFF5DF8 
 515      04EB
 516 03a8 BDE80203 	9:  pop {r1,T1,T2}
 517 03ac 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 23


 518              	
 519              	/*********************************
 520              	    compile 
 521              	    tokenize source line save it 
 522              	    in pas buffer.
 523              	    compiled line format: 
 524              	      line_no  2 bytes {0...32767}
 525              	      count    1 byte  
 526              	      tokens   variable length 
 527              	  input:
 528              	     r0   *text buffer 
 529              	     r1   *text length   
 530              	  output:
 531              	    r0    0 stored | -1 immediate 
 532              	  use:
 533              	    r3    tib index   
 534              	    T1    tib
 535              	    T2    pad
 536              	***********************************/
 537 03ae 00BF     	    _FUNC compile
 538 03b0 8046     	    mov T1, r0  // source text buffer 
 539 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 540 03b4 DFF84C9A 	    ldr T2,pad // tokens buffer
 541 03b8 83EA0303 	    eor r3,r3 // source index  
 542 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 543 03be 40F02000 	    orr r0,#FCOMP
 544 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 545 03c4 80EA0000 	    eor r0,r0     
 546 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 547 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 548 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 549 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 550 03d6 00B500F0 	    _CALL parse_int 
 550      48F95DF8 
 550      04EB
 551 03e0 0AD0     	    beq 2f 
 552              	// this is a line number     
 553 03e2 0129     	    cmp r1,#1 
 554 03e4 02D5     	    bpl 1f 
 555 03e6 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 556 03ea 6BE3     	    b tb_error  
 557 03ec B1F5803F 	1:  cmp r1,#65536
 558 03f0 F9D5     	    bpl 0b 
 559              	    // write line # to pad 
 560 03f2 29F8031C 	    strh r1,[T2,#-3]
 561 03f6 2360     	    str r3,[UPP,#IN_SAVED]
 562              	2:  // check for pad full 
 563 03f8 C145     	    cmp T2,T1
 564 03fa 02DB     	    blt 3f 
 565 03fc 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 566 0400 60E3     	    b tb_error 
 567 0402 00B500F0 	3:  _CALL comp_token 
 567      28F85DF8 
 567      04EB
 568 040c 0028     	    cmp r0,#TK_NONE 
 569 040e 01D0     	    beq 4f 
 570 0410 2360     	    str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 24


 571 0412 F1E7     	    b 2b 
 572              	4: // compilation completed 
 573 0414 DFF8EC39 	    ldr r3,pad 
 574 0418 A9EB0300 	    sub r0,T2,r3 // line length 
 575 041c 9870     	    strb r0,[r3,#2]
 576 041e 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 577 0420 1888     	    ldrh r0,[r3] // line number 
 578 0422 70B1     	    cbz r0,8f  
 579              	// insert line in text buffer 
 580 0424 206C     	    ldr r0,[UPP,#FLAGS]
 581 0426 10F0080F 	    tst r0,#FSTOP
 582 042a 02D0     	    beq 7f 
 583 042c 4FF01000 	    mov r0,#ERR_CANT_PROG 
 584 0430 48E3     	    b tb_error 
 585 0432 1846     	7:  mov r0,r3 
 586 0434 00B5FFF7 	    _CALL insert_line 
 586      93FF5DF8 
 586      04EB
 587 043e 4040     	    eors r0,r0 
 588 0440 08E0     	    b 9f 
 589 0442 9B46     	8:  mov BPTR,r3 // *token_list 
 590 0444 4FF0030A 	    mov IN,#3
 591 0448 206C     	    ldr r0,[UPP,#FLAGS]
 592 044a A0F12000 	    sub r0,#FCOMP
 593 044e 2064     	    str r0,[UPP,#FLAGS]
 594 0450 5FF0FF30 	    movs r0,#-1 
 595 0454 7047     	9:  _RET 
 596              	
 597              	/*********************************************
 598              	    compile next token from source 
 599              	    input: 
 600              	      r3 		tib index  
 601              	      T1    tib adr
 602              	      T2    insert point in pad  
 603              	    output:
 604              	      r0     token attribute 
 605              	      r1 		token value
 606              	      r3     tib index updated    
 607              	      T2     updated 
 608              	      use:
 609              	**********************************************/
 610              	    .macro _case c, next  
 611              	    cmp r0,#\c 
 612              	    bne \next
 613              	    .endm 
 614              	
 615 0456 00BF     	    _FUNC comp_token 
 616 0458 40B4     	    push {r6}
 617 045a 18F80300 	    ldrb r0,[T1,r3]
 618 045e 0040     	    ands r0,r0 
 619 0460 7CD0     	    beq store_r0  // reached end of text  
 620 0462 4FF02000 	    mov r0,#SPACE 
 621 0466 00B500F0 	    _CALL skip  // skip spaces 
 621      50F95DF8 
 621      04EB
 622 0470 18F80300 	    ldrb r0,[T1,r3]
 623 0474 0040     	    ands r0,r0 
ARM GAS  tinyBasic.s 			page 25


 624 0476 71D0     	    beq store_r0  // reached end of text 
 625 0478 03F10103 	    add r3,#1
 626 047c 00B500F0 	    _CALL upper 
 626      51F95DF8 
 626      04EB
 627 0486 00B500F0 	    _CALL is_special
 627      88F85DF8 
 627      04EB
 628 0490 DFF82C6E 	    ldr r6,=token_ofs
 629 0494 D6E811F0 	    tbh [r6,r1] 
 630              	tok_idx0:     
 631              	//  not special char.  
 632 0498 63E0     	    b try_number 
 633              	// single char token with no value 
 634              	single: 
 635 049a DFF8286E 	    ldr r6,=tok_single
 636 049e 705C     	    ldrb r0,[r6,r1] 
 637 04a0 5CE0     	    b store_r0
 638              	label: 
 639 04a2 00B500F0 	    _CALL parse_label
 639      B4F85DF8 
 639      04EB
 640 04ac 00B9     	    cbnz r0,1f
 641 04ae 05E3     	    b syntax_error 
 642 04b0 09F8010B 	1:  strb r0,[T2],#1
 643 04b4 49F8041B 	    str r1,[T2],#4
 644 04b8 6DE0     	    b token_exit 
 645              	lt:
 646 04ba 4FF03400 	    mov r0,#TK_LT
 647 04be 18F80310 	    ldrb r1,[T1,r3]
 648 04c2 3E29     	    cmp r1,#'>' 
 649 04c4 06D0     	    beq 1f
 650 04c6 0AE0     	    b 2f 
 651              	gt:
 652 04c8 4FF03100 	    mov r0,#TK_GT 
 653 04cc 18F80310 	    ldrb r1,[T1,r3]
 654 04d0 3C29     	    cmp r1,#'<'
 655 04d2 04D1     	    bne 2f  
 656 04d4 03F10103 	1:  add r3,#1
 657 04d8 4FF03500 	    mov r0,#TK_NE  
 658 04dc 3EE0     	    b store_r0
 659 04de 3D29     	2:  cmp r1,#'=' 
 660 04e0 3CD1     	    bne store_r0  
 661 04e2 03F10103 	    add r3,#1
 662 04e6 00F10200 	    add r0,#2
 663 04ea 37E0     	    b store_r0       
 664              	bkslash:
 665 04ec 18F80310 	    ldrb r1,[T1,r3]
 666 04f0 03F10103 	    add r3,#1
 667 04f4 4FF00300 	    mov r0,#TK_CHAR 
 668 04f8 09F8010B 	    strb r0,[T2],#1
 669 04fc 09F8011B 	    strb r1,[T2],#1
 670 0500 49E0     	    b token_exit 
 671              	prt_cmd: 
 672 0502 4FF00B00 	    mov r0,#TK_CMD 
 673 0506 4FF03301 	    mov r1,#PRT_IDX
 674 050a 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 26


 675 050e 09F8011B 	    strb r1,[T2],#1
 676 0512 40E0     	    b token_exit 
 677              	quote:
 678 0514 4FF00200 	    mov r0,#TK_QSTR 
 679 0518 09F8010B 	    strb r0,[T2],#1
 680 051c 00B500F0 	    _CALL parse_quote
 680      C1F85DF8 
 680      04EB
 681 0526 36E0     	    b token_exit
 682              	tick: 
 683              	// copy comment in pad 
 684 0528 4FF00B00 	    mov r0,#TK_CMD 
 685 052c 4FF03701 	    mov r1,#REM_IDX 
 686 0530 09F8010B 	    strb r0,[T2],#1 
 687 0534 09F8011B 	    strb r1,[T2],#1
 688 0538 08EB0300 	    add r0,T1,r3 
 689 053c 4946     	    mov r1,T2 
 690 053e 00B5FFF7 	    _CALL strcpy 
 690      FEFF5DF8 
 690      04EB
 691 0548 00B5FFF7 	    _CALL strlen 
 691      FEFF5DF8 
 691      04EB
 692 0552 8144     	    add T2,r0
 693 0554 09F10109 	    add T2,#1
 694 0558 6368     	    ldr r3,[UPP,#COUNT]
 695 055a 1CE0     	    b token_exit
 696              	store_r0: 
 697 055c 09F8010B 	    strb r0,[T2],#1
 698 0560 19E0     	    b token_exit 
 699              	try_number:
 700 0562 A3F10103 	    sub r3,#1
 701 0566 00B500F0 	    _CALL parse_int  
 701      80F85DF8 
 701      04EB
 702 0570 04D0     	    beq 1f 
 703 0572 09F8010B 	    strb r0,[T2],#1 
 704 0576 49F8041B 	    str r1,[T2],#4
 705 057a 0CE0     	    b token_exit 
 706 057c 00B500F0 	1:  _CALL parse_keyword 
 706      2FF95DF8 
 706      04EB
 707 0586 0428     	    cmp r0,#TK_VAR 
 708 0588 01D0     	    beq 2f 
 709 058a 3729     	    cmp r1,#REM_IDX 
 710 058c CCD0     	    beq tick
 711 058e 09F8010B 	2:  strb r0,[T2],#1 
 712 0592 09F8011B 	    strb r1,[T2],#1
 713              	token_exit:
 714 0596 40BC     	    pop {r6}
 715 0598 7047     	    _RET 
 716              	
 717              	/****************************
 718              	    is_special  
 719              	    check for non alphanum
 720              	    input:
 721              	      r0    character to scan 
ARM GAS  tinyBasic.s 			page 27


 722              	    output:
 723              	      r0    character 
 724              	      r1    0 || index 
 725              	    use: 
 726              	      r1    scan index 
 727              	      r2    temp 
 728              	      r3    char_list 
 729              	*****************************/
 730 059a 00BF     	    _FUNC is_special 
 731 059c 0CB4     	    push {r2,r3}
 732 059e 4FF00101 	    mov r1,#1
 733 05a2 DFF8243D 	    ldr r3,=char_list 
 734 05a6 5A5C     	1:  ldrb r2,[r3,r1]
 735 05a8 22B1     	    cbz r2,8f 
 736 05aa 8242     	    cmp r2,r0 
 737 05ac 04D0     	    beq 9f 
 738 05ae 01F10101 	    add r1,#1 
 739 05b2 F8E7     	    b 1b
 740 05b4 81EA0101 	8:  eor r1,r1     
 741 05b8 0CBC     	9:  pop {r2,r3}
 742 05ba 7047     	    _RET 
 743              	
 744              	char_list:
 745 05bc 202C3B40 	  .asciz " ,;@():#-+*/%=!<>\\?'\""
 745      28293A23 
 745      2D2B2A2F 
 745      253D213C 
 745      3E5C3F27 
 746              	
 747              	tok_single:
 748 05d2 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 748      060701
 749 05d9 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL,TK_LBL  
 749      21223240 
 750              	  
 751 05e1 0000BF   	  .p2align 2
 752              	token_ofs:
 753 05e4 0000     	  .hword  0 // not found
 754              	  // TK_COMMA...TK_EQUAL , 13 
 755 05e6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 755      01000100 
 756 05ee 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 756      01000100 
 757 05f6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 757      01000100 
 758 05fe 01000500 	  .hword  (single-tok_idx0)/2,(label-tok_idx0)/2     
 759              	  // '<','>'
 760 0602 11001800 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 761              	  // '\'
 762 0606 2A00     	  .hword  (bkslash-tok_idx0)/2
 763              	  // '?' 
 764 0608 3500     	  .hword  (prt_cmd-tok_idx0)/2 
 765              	  // "'"  
 766 060a 4800     	  .hword  (tick-tok_idx0)/2 
 767              	  // '"' quote 
 768 060c 3E00     	  .hword (quote-tok_idx0)/2
 769              	
ARM GAS  tinyBasic.s 			page 28


 770 060e 00BF     	  .p2align 2
 771              	
 772              	/****************************
 773              	    parse_label 
 774              	    label form: ![A..Z]+
 775              	    maximum 6 letters
 776              	    input:
 777              	      *buffer 
 778              	    output:
 779              	      r0  TK_LBL 
 780              	      r1  compressed label
 781              	    use:
 782              	      r2   compressed value
 783              	      r3   updated 
 784              	      r5   letter count maxim 6   
 785              	****************************/
 786              	    _FUNC parse_label
 787 0610 24B4     	    push {r2,r5}
 788 0612 82EA0202 	    eor r2,r2
 789 0616 4FF00605 	    mov r5,#6 
 790 061a 18F80300 	1:  ldrb r0,[T1,r3]
 791 061e 00B500F0 	    _CALL is_letter 
 791      A8F85DF8 
 791      04EB
 792 0628 18D1     	    bne 8f // not letter 
 793 062a 00B500F0 	    _CALL upper 
 793      7AF85DF8 
 793      04EB
 794 0634 A0F14000 	    sub r0,#'@' 
 795 0638 4FEA4212 	    lsl r2,#5 
 796 063c 0244     	    add r2,r0 
 797 063e 03F10103 	    add r3,#1
 798 0642 013D     	    subs r5,#1 
 799 0644 E9D1     	    bne 1b
 800              	2: // skip letters   
 801 0646 18F80300 	    ldrb r0,[T1,r3]
 802 064a 00B500F0 	    _CALL is_letter 
 802      92F85DF8 
 802      04EB
 803 0654 02D1     	    bne 8f 
 804 0656 03F10103 	    add r3,#1 
 805 065a F4E7     	    b 2b       
 806 065c 80EA0000 	8:  eor r0,r0 
 807 0660 1146     	    mov r1,r2 
 808 0662 09B1     	    cbz r1,9f
 809 0664 4FF04000 	    mov r0,#TK_LBL 
 810 0668 24BC     	9:  pop {r2,r5}
 811 066a 7047     	    _RET 
 812              	
 813              	
 814              	/****************************
 815              	    parse_int 
 816              	    parse an integer from text
 817              	    if not valid integer 
 818              	    r1 return *buffer else 
 819              	    *buffer is incremented after integer 
 820              	  input:
ARM GAS  tinyBasic.s 			page 29


 821              	    r0   *buffer 
 822              	  output:
 823              	    r0   TK_INTGR|TK_NONE
 824              	    r1   int|0   
 825              	  use:
 826              	    r3   tib index updated     
 827              	*****************************/
 828              	    _FUNC parse_int 
 829 066c 4FF00A01 	    mov r1,#10 // default base 
 830 0670 18F80300 	    ldrb r0,[T1,r3]
 831 0674 2428     	    cmp r0,'$' 
 832 0676 02D1     	    bne 2f 
 833 0678 4FF01001 	    mov r1,#16 // hexadecimal number 
 834 067c 03E0     	    b 3f  
 835 067e 2628     	2:  cmp r0,#'&' 
 836 0680 03D1     	    bne 4f
 837 0682 4FF00201 	    mov r1,#2 //binary number  
 838 0686 03F10103 	3:  add r3,#1
 839 068a 03EB0800 	4:  add r0,r3,T1 
 840 068e 00B5FFF7 	    _CALL atoi 
 840      FEFF5DF8 
 840      04EB
 841 0698 10B1     	    cbz r0,9f
 842 069a 0344     	    add r3,r0
 843 069c 4FF00F00 	    mov r0,#TK_INTGR
 844 06a0 0040     	9:  ands r0,r0   
 845 06a2 7047     	    _RET 
 846              	
 847              	/*********************************************
 848              	    parse_quote 
 849              	    parse quoted string 
 850              	    input: 
 851              	      r3 		tib index  
 852              	      T1    tib adr
 853              	      T2    insert point in pad  
 854              	    output:
 855              	      r0     token attribute 
 856              	      r1 		*str 
 857              	      r3     tib index updated    
 858              	      T2     updated 
 859              	      use:
 860              	*********************************************/
 861              	    _FUNC parse_quote
 862 06a4 4DF8049D 	    push {T2} 
 863 06a8 18F80300 	1:  ldrb r0,[T1,r3]
 864 06ac 03F10103 	    add r3,#1 
 865 06b0 2228     	    cmp r0,#'"'
 866 06b2 09D0     	    beq 9f 
 867 06b4 5C28     	    cmp r0,#'\\'
 868 06b6 04D1     	    bne 2f 
 869 06b8 00B500F0 	    _CALL get_escaped_char 
 869      0DF85DF8 
 869      04EB
 870 06c2 09F8010B 	2:  strb r0,[T2],#1
 871 06c6 EFE7     	    b 1b 
 872 06c8 80EA0000 	9:  eor  r0,r0
 873 06cc 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 30


 874 06d0 4FF00200 	    mov r0,#TK_QSTR
 875 06d4 02BC     	    pop {r1}
 876 06d6 7047     	    _RET 
 877              	
 878              	/**********************************************
 879              	    get_escaped_char 
 880              	    convert "\c" in quoted string 
 881              	    input:
 882              	      r0 
 883              	      r3   index 
 884              	      T1   tib 
 885              	    output:
 886              	      r0   replacement char
 887              	      r3   updated 
 888              	    use:
 889              	      r1   *table 
 890              	      r2   temp 
 891              	**********************************************/
 892              	    _FUNC get_escaped_char 
 893 06d8 06B4     	    push {r1,r2}
 894 06da 18F80300 	    ldrb r0,[T1,r3]
 895 06de 03F10103 	    add r3,#1
 896 06e2 2228     	    cmp r0,#'"' 
 897 06e4 0BD0     	    beq 9f 
 898 06e6 DFF8E41B 	1:  ldr r1,=escaped 
 899 06ea 11F8012B 	2:  ldrb r2,[r1],#1
 900 06ee 12B1     	    cbz r2,6f 
 901 06f0 8242     	    cmp r2,r0 
 902 06f2 02D0     	    beq 7f 
 903 06f4 F9E7     	    b 2b
 904 06f6 A0F10702 	6:  sub r2,r0,#7     
 905 06fa 02F10700 	7:  add r0,r2,#7
 906 06fe 06BC     	9:  pop {r1,r2}   
 907 0700 7047     	    _RET
 908              	
 909 0702 6162746E 	escaped: .asciz "abtnvfr"
 909      76667200 
 910              	
 911              	/*********************************************
 912              	   skip character in TIB 
 913              	   input:
 914              	      r0    character to skip 
 915              	      r3    tib index 
 916              	      T1    tib adr
 917              	    output: 
 918              	      r3    updated
 919              	    use:
 920              	      r1     
 921              	**********************************************/   
 922 070a 00BF     	    _FUNC skip
 923 070c 02B4     	    push {r1} 
 924 070e 18F80310 	1:  ldrb r1,[T1,r3]
 925 0712 8142     	    cmp r1,r0
 926 0714 02D1     	    bne 2f
 927 0716 03F10103 	    add r3,#1 
 928 071a F8E7     	    b 1b 
 929 071c 2360     	2:  str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 31


 930 071e 02BC     	    pop {r1}
 931 0720 7047     	    _RET
 932              	
 933              	/********************************************
 934              	    upper
 935              	    convert character in upper case 
 936              	    input: 
 937              	      r0   character 
 938              	    output:
 939              	      r0   upper case character 
 940              	*********************************************/
 941 0722 00BF     	    _FUNC upper 
 942 0724 6128     	    cmp r0,#'a' 
 943 0726 03DB     	    blt 9f 
 944 0728 7A28     	    cmp r0,#'z' 
 945 072a 01DC     	    bgt 9f 
 946 072c 00F05F00 	    and r0,#0x5f 
 947 0730 7047     	9:  _RET 
 948              	
 949              	/***************************************
 950              	   is_digit 
 951              	   check if char is decimal digit.
 952              	   convert to decimal digit.
 953              	   input:
 954              	      r0    char 
 955              	   output:
 956              	      r0        if Z then converted digit else not changed
 957              	      Z flag    1 true | 0 false  
 958              	***************************************/
 959 0732 00BF     	    _GBL_FUNC is_digit 
 960 0734 02B4     	    push {r1} 
 961 0736 4FF0FF31 	    mov r1,#-1   
 962 073a 3028     	    cmp r0,#'0' 
 963 073c 05DB     	    blt 9f
 964 073e 3A28     	    cmp r0,'9'+1
 965 0740 03D5     	    bpl 9f 
 966 0742 81EA0101 	    eor r1,r1 
 967 0746 A0F13000 	    sub r0,#'0'  
 968              	9:   
 969 074a 0940     	    ands r1,r1
 970 074c 02BC     	    pop {r1} 
 971 074e 7047     	    _RET 
 972              	
 973              	/***************************************
 974              	    is_hex 
 975              	    check for hexadecimal digit 
 976              	    convert to hex digit.
 977              	    input:
 978              	      r0    
 979              	    output:
 980              	      r0         if Z then converted digit 
 981              	      Z  flag    1 true | 0 false         
 982              	***************************************/
 983              	    _FUNC is_hex 
 984 0750 02B4     	    push {r1}
 985 0752 80EA0000 	    eor r0,r0 
 986 0756 4128     	    cmp r0,#'A' 
ARM GAS  tinyBasic.s 			page 32


 987 0758 01D4     	    bmi 1f 
 988 075a A0F10700 	    sub r0,#7 
 989 075e A0F13000 	1:  sub r0,#'0'
 990 0762 01D4     	    bmi 2f 
 991 0764 1028     	    cmp r0,#16
 992 0766 01D4     	    bmi 9f 
 993 0768 6FEA0101 	2:  mvn r1,r1  
 994 076c 0940     	9:  ands r1,r1 
 995 076e 02BC     	    pop {r1}
 996 0770 7047     	    _RET 
 997              	
 998              	/***************************************
 999              	    is_letter 
 1000              	    check if character is {a..z,A..Z} 
 1001              	  input:
 1002              	    r0   character 
 1003              	  output: 
 1004              	    r0       same character 
 1005              	    Z flag   1 true | 0 false  
 1006              	****************************************/
 1007 0772 00BF     	    _FUNC is_letter
 1008 0774 02B4     	    push {r1} 
 1009 0776 81EA0101 	    eor r1,r1 
 1010 077a 4128     	    cmp r0,#'A' 
 1011 077c 05D4     	    bmi 8f 
 1012 077e 5B28     	    cmp r0,#'Z'+1 
 1013 0780 05D4     	    bmi 9f
 1014 0782 6128     	    cmp r0,#'a' 
 1015 0784 01D4     	    bmi 8f 
 1016 0786 7B28     	    cmp r0,#'z'+1
 1017 0788 01D4     	    bmi 9f  
 1018 078a 6FEA0101 	8:  mvn r1,r1  
 1019 078e 0940     	9:  ands r1,r1 
 1020 0790 02BC     	    pop {r1}
 1021 0792 7047     	    _RET 
 1022              	
 1023              	
 1024              	/******************************************
 1025              	    atoi 
 1026              	    convert ascii to integer 
 1027              	    input:
 1028              	      r0   *buffer 
 1029              	      r1   base 
 1030              	    output:
 1031              	      r0   0 no integer found 
 1032              	      r1   integer
 1033              	    use:
 1034              	      r2   base  
 1035              	      T1   *buffer 
 1036              	      T2   digit count  
 1037              	******************************************/
 1038              	    _GBL_FUNC atoi 
 1039 0794 2DE90403 	    push {r2,T1,T2}
 1040 0798 8046     	    mov T1,r0  // *buffer 
 1041 079a 0A46     	    mov r2,r1  // base  
 1042 079c 81EA0101 	    eor r1,r1  // converted integer 
 1043 07a0 89EA0909 	    eor T2,T2  // digit count 
ARM GAS  tinyBasic.s 			page 33


 1044 07a4 18F8010B 	1:  ldrb r0,[T1],#1
 1045 07a8 00B5FFF7 	    _CALL upper 
 1045      BBFF5DF8 
 1045      04EB
 1046 07b2 3028     	    cmp r0,#'0'
 1047 07b4 0FD4     	    bmi 8f
 1048 07b6 3A28     	    cmp r0,#'9'+1 
 1049 07b8 03D4     	    bmi 2f 
 1050 07ba 4128     	    cmp r0,#'A'
 1051 07bc 0BD4     	    bmi 8f 
 1052 07be A0F10700 	    sub r0,#7 
 1053 07c2 A0F13000 	2:  sub r0,#'0' 
 1054 07c6 9042     	    cmp r0,r2
 1055 07c8 05D5     	    bpl 8f  
 1056 07ca 02FB01F1 	    mul r1,r2 
 1057 07ce 0144     	    add r1,r0
 1058 07d0 09F10109 	    add T2,#1
 1059 07d4 E6E7     	    b 1b 
 1060 07d6 4846     	8:  mov r0,T2  
 1061 07d8 BDE80403 	    pop {r2,T1,T2}
 1062 07dc 7047     	    _RET 
 1063              	
 1064              	/*****************************************
 1065              	    parse_keyword 
 1066              	    parse work and ckeck if in dictionary 
 1067              	    input:
 1068              	      r0    first character 
 1069              	      r3    tib index 
 1070              	      t1    tib 
 1071              	      t2    pad 
 1072              	    output:
 1073              	      r3    updated 
 1074              	      t1    updated 
 1075              	      t2    updated   
 1076              	    use:
 1077              	    
 1078              	*****************************************/
 1079 07de 00BF     	    _FUNC parse_keyword 
 1080 07e0 4DF8049D 	    push {T2}
 1081 07e4 18F80300 	    ldrb r0,[T1,r3]
 1082 07e8 03F10103 	    add r3,#1
 1083 07ec 00B3     	    cbz r0,2f 
 1084 07ee 00B5FFF7 	    _CALL upper 
 1084      98FF5DF8 
 1084      04EB
 1085 07f8 00B5FFF7 	    _CALL is_letter 
 1085      BBFF5DF8 
 1085      04EB
 1086 0802 40F05B81 	    bne syntax_error 
 1087 0806 09F8010B 	    strb r0,[T2],#1
 1088 080a 18F80300 	1:  ldrb r0,[T1,r3]
 1089 080e 03F10103 	    add r3,#1 
 1090 0812 68B1     	    cbz r0,2f 
 1091 0814 00B5FFF7 	    _CALL upper 
 1091      85FF5DF8 
 1091      04EB
 1092 081e 00B5FFF7 	    _CALL is_letter 
ARM GAS  tinyBasic.s 			page 34


 1092      A8FF5DF8 
 1092      04EB
 1093 0828 02D1     	    bne 2f 
 1094 082a 09F8010B 	    strb r0,[T2],#1
 1095 082e ECE7     	    b 1b 
 1096 0830 A3F10103 	2:  sub r3,#1
 1097 0834 80EA0000 	    eor r0,r0
 1098 0838 89F80000 	    strb r0,[T2] 
 1099 083c 0098     	    ldr r0,[sp]
 1100 083e 4178     	    ldrb r1,[r0,#1] 
 1101 0840 29B9     	    cbnz r1,3f
 1102 0842 0178     	    ldrb r1,[r0]
 1103 0844 A1F14101 	    sub r1,#'A'
 1104 0848 4FF00400 	    mov r0,#TK_VAR
 1105 084c 08E0     	    b 9f 
 1106 084e DFF8801A 	3:  ldr r1,=kword_dict  
 1107 0852 00B500F0 	    _CALL search_dict 
 1107      F4F95DF8 
 1107      04EB
 1108 085c 00B9     	    cbnz r0,9f 
 1109 085e 2DE1     	    b syntax_error 
 1110 0860 5DF8049B 	9:  pop {T2}
 1111 0864 7047     	    _RET 
 1112              	
 1113              	
 1114              	/*******************
 1115              	    DECOMPILER 
 1116              	*******************/
 1117              	
 1118              	/********************************************
 1119              	    cmd_name 
 1120              	    search bytecode in dictionary and 
 1121              	    return its name 
 1122              	  input:
 1123              	    r0    keyword bytecode 
 1124              	  ouput:
 1125              	    r0    name string 
 1126              	  use:
 1127              	    T1    link 
 1128              	    T2    tmp 
 1129              	*********************************************/
 1130 0866 00BF     	    _FUNC cmd_name 
 1131 0868 2DE90003 	    push {T1,T2}
 1132 086c DFF8608A 	    ldr T1,=kword_dict 
 1133 0870 58F8089C 	1:  ldr T2,[T1,#-8]
 1134 0874 8145     	    cmp T2,r0 
 1135 0876 04D0     	    beq 2f 
 1136 0878 58F80C8C 	    ldr T1,[T1,#-12]
 1137 087c B8F1000F 	    cmp T1,#0
 1138 0880 F6D1     	    bne 1b  
 1139 0882 4046     	2:  mov r0,T1 
 1140 0884 BDE80003 	    pop {T1,T2}
 1141 0888 7047     	    _RET
 1142              	
 1143              	/*****************************
 1144              	  decompile_line 
 1145              	  detokenize BASIC line 
ARM GAS  tinyBasic.s 			page 35


 1146              	  input:
 1147              	    r0  *token list 
 1148              	    r1  *output buffer 
 1149              	  output:
 1150              	    r0  *output buffer (.asciz) 
 1151              	  use:
 1152              	    T1  *output buffer
 1153              	    BPTR  *token list
 1154              	    IN  offset in token list  
 1155              	******************************/
 1156 088a 00BF     	    _GBL_FUNC decompile_line
 1157 088c 2DE90E01 	    push {r1,r2,r3,T1} 
 1158 0890 8346     	    mov BPTR,r0 
 1159 0892 4FF0000A 	    mov IN,#0
 1160 0896 8846     	    mov T1,r1 
 1161 0898 3BF80A00 	    ldrh r0,[BPTR,IN]
 1162 089c 0AF1020A 	    add IN,#2 
 1163 08a0 4FF00A01 	    mov r1,#10 
 1164 08a4 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 08ae 4146     	    mov r1,T1
 1166 08b0 00B5FFF7 	    _CALL strcpy
 1166      FEFF5DF8 
 1166      04EB
 1167 08ba 4046     	    mov r0,T1 
 1168 08bc 00B5FFF7 	    _CALL strlen
 1168      FEFF5DF8 
 1168      04EB
 1169 08c6 8044     	    add T1,r0 
 1170 08c8 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1171 08cc 0AF1010A 	    add IN,#1 
 1172 08d0 6060     	    str r0,[UPP,#COUNT]
 1173              	decomp_loop:
 1174 08d2 00B500F0 	    _CALL next_token
 1174      ECFA5DF8 
 1174      04EB
 1175 08dc 0028     	    cmp r0,#TK_NONE 
 1176 08de 00F0B880 	    beq 9f  
 1177 08e2 0F28     	    cmp r0,#TK_INTGR 
 1178 08e4 15D1     	    bne 1f 
 1179 08e6 0846     	    mov r0,r1 
 1180 08e8 A169     	    ldr r1,[UPP,#BASE]
 1181 08ea 00B5FFF7 	    _CALL itoa
 1181      FEFF5DF8 
 1181      04EB
 1182 08f4 01B4     	    push {r0}
 1183 08f6 4146     	    mov r1,T1 
 1184 08f8 00B5FFF7 	    _CALL strcpy
 1184      FEFF5DF8 
 1184      04EB
 1185 0902 01BC     	    pop {r0} 
 1186 0904 00B5FFF7 	    _CALL strlen
 1186      FEFF5DF8 
 1186      04EB
 1187 090e 8044     	    add T1,r0 
 1188 0910 DFE7     	    b decomp_loop 
ARM GAS  tinyBasic.s 			page 36


 1189 0912 4028     	1:  cmp r0,#TK_LBL
 1190 0914 17D1     	    bne 1f
 1191 0916 4FF02100 	    mov r0,#'!'
 1192 091a 08F8010B 	    strb r0,[T1],#1 
 1193 091e 4FF01902 	    mov r2,#25
 1194 0922 4FF6FF73 	    mov r3,#0xffff 
 1195 0926 C3F6FF73 	    movt r3,#0x3fff 
 1196 092a 01EA0301 	0:  and r1,r3 
 1197 092e 4FEA5313 	    lsr r3,#5 
 1198 0932 31FA02F0 	    lsrs r0,r1,r2 
 1199 0936 03D0     	    beq 2f
 1200 0938 00F14000 	    add r0,#'@'
 1201 093c 08F8010B 	    strb r0,[T1],#1
 1202 0940 053A     	2:  subs r2,#5 
 1203 0942 F2DA     	    bge 0b 
 1204 0944 C5E7     	    b decomp_loop
 1205 0946 0428     	1:  cmp r0,#TK_VAR 
 1206 0948 04D1     	    bne 2f 
 1207 094a 01F14100 	    add r0,r1,'A'
 1208 094e 08F8010B 	    strb r0,[T1],#1 
 1209 0952 BEE7     	    b decomp_loop 
 1210 0954 0328     	2:  cmp r0,#TK_CHAR 
 1211 0956 0AD1     	    bne 3f 
 1212 0958 4FF05C00 	    mov r0,#'\\'
 1213 095c 08F8010B 	    strb r0,[T1],#1
 1214 0960 08F8011B 	    strb r1,[T1],#1
 1215 0964 4FF02000 	    mov r0,#SPACE 
 1216 0968 08F8010B 	    strb r0,[T1],#1
 1217 096c B1E7     	    b decomp_loop 
 1218 096e 0228     	3:  cmp r0,#TK_QSTR 
 1219 0970 17D1     	    bne 4f 
 1220 0972 4FF02200 	    mov r0,#'"'
 1221 0976 08F8010B 	    strb r0,[T1],#1 
 1222 097a 0846     	    mov r0,r1
 1223 097c 02B4     	    push {r1}
 1224 097e 4146     	    mov r1,T1  
 1225 0980 00B5FFF7 	    _CALL strcpy
 1225      FEFF5DF8 
 1225      04EB
 1226 098a 01BC     	    pop {r0}
 1227 098c 00B5FFF7 	    _CALL strlen 
 1227      FEFF5DF8 
 1227      04EB
 1228 0996 8044     	    add T1,r0 
 1229 0998 4FF02200 	    mov r0,#'"'
 1230 099c 08F8010B 	    strb r0,[T1],#1 
 1231 09a0 97E7     	    b decomp_loop
 1232 09a2 0B28     	4:  cmp r0,#TK_CMD
 1233 09a4 3DD4     	    bmi 5f 
 1234 09a6 0F28     	    cmp r0,#TK_INTGR 
 1235 09a8 3BD5     	    bpl 5f
 1236 09aa 4FF02000 	    mov r0,#SPACE 
 1237 09ae 08F8010B 	    strb r0,[T1],#1  
 1238 09b2 0846     	    mov r0,r1
 1239 09b4 3328     	    cmp r0,#PRT_IDX 
 1240 09b6 04D1     	    bne 1f  
 1241 09b8 4FF03F00 	    mov r0,#'?'
ARM GAS  tinyBasic.s 			page 37


 1242 09bc 08F8010B 	    strb r0,[T1],#1 
 1243 09c0 2AE0     	    b 3f 
 1244 09c2 3728     	1:  cmp r0,#REM_IDX
 1245 09c4 15D1     	    bne 1f
 1246 09c6 4FF02700 	    mov r0,#'\''
 1247 09ca 08F8010B 	    strb r0,[T1],#1 
 1248 09ce 0BEB0A00 	    add r0,BPTR,IN
 1249 09d2 4146     	    mov r1,T1   
 1250 09d4 00B5FFF7 	    _CALL strcpy
 1250      FEFF5DF8 
 1250      04EB
 1251 09de 4046     	    mov r0,T1 
 1252 09e0 00B5FFF7 	    _CALL strlen
 1252      FEFF5DF8 
 1252      04EB
 1253 09ea 8044     	    add T1,r0
 1254 09ec D4F804A0 	    ldr IN,[UPP,#COUNT]
 1255 09f0 2FE0     	    b 9f 
 1256 09f2 00B5FFF7 	1:  _CALL cmd_name
 1256      38FF5DF8 
 1256      04EB
 1257 09fc 01B4     	2:  push {r0}
 1258 09fe 4146     	    mov r1,T1 
 1259 0a00 00B5FFF7 	    _CALL strcpy 
 1259      FEFF5DF8 
 1259      04EB
 1260 0a0a 01BC     	    pop {r0}
 1261 0a0c 00B5FFF7 	    _CALL strlen 
 1261      FEFF5DF8 
 1261      04EB
 1262 0a16 8044     	    add T1,r0 
 1263 0a18 4FF02000 	3:  mov r0,#SPACE 
 1264 0a1c 08F8010B 	    strb r0,[T1],#1 
 1265 0a20 57E7     	    b decomp_loop
 1266 0a22 01B4     	5:  push {r0}
 1267 0a24 DFF8AC18 	    ldr r1,=single_char 
 1268 0a28 085C     	    ldrb r0,[r1,r0]
 1269 0a2a 02BC     	    pop {r1}
 1270 0a2c 10B1     	    cbz r0,6f 
 1271 0a2e 08F8010B 	    strb r0,[T1],#1 
 1272 0a32 4EE7     	    b decomp_loop
 1273 0a34 3329     	6:  cmp r1,#TK_GE 
 1274 0a36 02D1     	    bne 7f 
 1275 0a38 DFF89C08 	    ldr r0,=ge_str
 1276 0a3c DEE7     	    b 2b 
 1277 0a3e 3629     	7:  cmp r1,#TK_LE 
 1278 0a40 02D1     	    bne 8f
 1279 0a42 DFF89808 	    ldr r0,=le_str
 1280 0a46 D9E7     	    b 2b
 1281 0a48 3529     	8:  cmp r1,#TK_NE 
 1282 0a4a 02D1     	    bne 9f 
 1283 0a4c DFF89008 	    ldr r0,=ne_str 
 1284 0a50 D4E7     	    b 2b 
 1285 0a52 80EA0000 	9:  eor r0,r0 
 1286 0a56 88F80000 	    strb r0,[T1]
 1287 0a5a BDE80E01 	    pop {r1,r2,r3,T1}
 1288 0a5e 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 38


 1289 0a60 7047     	    _RET 
 1290              	
 1291 0a62 3E3D00   	ge_str: .asciz ">="
 1292 0a65 3C3D00   	le_str: .asciz "<="
 1293 0a68 3C3E00   	ne_str: .asciz "<>"
 1294              	
 1295              	single_char:
 1296 0a6b 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1296      00402829 
 1296      2C3B23
 1297 0a76 00000000 	  .space 5
 1297      00
 1298 0a7b 2B2D     	  .byte '+', '-'
 1299 0a7d 00000000 	  .space 14
 1299      00000000 
 1299      00000000 
 1299      0000
 1300 0a8b 2A2F25   	  .byte '*', '/', '%'
 1301 0a8e 00000000 	  .space 14
 1301      00000000 
 1301      00000000 
 1301      0000
 1302 0a9c 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1302      0000
 1303              	
 1304              	
 1305              	/**********************************
 1306              	  modulo 
 1307              	  compute r0 mod r1
 1308              	  input:
 1309              	    r0   dividend
 1310              	    r1   divisor 
 1311              	  output:
 1312              	    r0   TK_INTGR 
 1313              	    r1   r0 mod r1 
 1314              	*********************************/
 1315 0aa2 00BF     	    _GBL_FUNC modulo 
 1316 0aa4 01B4     	    push {r0}
 1317 0aa6 B0FBF1F0 	    udiv r0,r1 
 1318 0aaa 01FB00F0 	    mul  r0,r1 
 1319 0aae 02BC     	    pop {r1}
 1320 0ab0 A1EB0001 	    sub r1,r0
 1321 0ab4 4FF00F00 	    mov r0,#TK_INTGR
 1322 0ab8 7047     	    _RET 
 1323              	
 1324              	/**********************************
 1325              	      BASIC commands 
 1326              	**********************************/
 1327              	
 1328              	/*********************************
 1329              	    syntax_error 
 1330              	    display syntax error message and 
 1331              	    abort program 
 1332              	  input:
 1333              	    none  
 1334              	  output: 
 1335              	    none 
ARM GAS  tinyBasic.s 			page 39


 1336              	  use:
 1337              	*********************************/
 1338 0aba 00BF     	    _FUNC syntax_error 
 1339 0abc 4FF00200 	    mov r0,#ERR_SYNTAX
 1340 0ac0 00E0     	    b tb_error 
 1341              	
 1342              	/*********************************
 1343              	    tb_error 
 1344              	    display BASIC error and 
 1345              	    abort program. 
 1346              	  input:
 1347              	    r0    error code   
 1348              	  output: 
 1349              	    none 
 1350              	  use:
 1351              	    r1    temp 
 1352              	*********************************/
 1353 0ac2 00BF     	    _FUNC tb_error 
 1354 0ac4 216C     	    ldr r1,[UPP,#FLAGS]
 1355 0ac6 11F0200F 	    tst r1,#FCOMP
 1356 0aca 43D1     	    bne compile_error
 1357              	rt_error:
 1358 0acc 5246     	    mov r2,IN 
 1359 0ace 01B4     	    push {r0}
 1360 0ad0 DFF81008 	    ldr r0,=rt_error_msg 
 1361 0ad4 00B5FFF7 	    _CALL uart_puts 
 1361      FEFF5DF8 
 1361      04EB
 1362 0ade 01BC     	    pop {r0}
 1363 0ae0 DFF80418 	    ldr r1,=err_msg  
 1364 0ae4 4FEA8000 	    lsl r0,#2 
 1365 0ae8 0858     	    ldr r0,[r1,r0]
 1366 0aea 00B5FFF7 	    _CALL uart_puts
 1366      FEFF5DF8 
 1366      04EB
 1367              	// decompile and print faulty line      
 1368 0af4 5846     	    mov r0,BPTR
 1369 0af6 5246     	    mov r2,IN  
 1370 0af8 DFF80813 	    ldr r1,pad 
 1371 0afc 00B5FFF7 	    _CALL decompile_line
 1371      FEFF5DF8 
 1371      04EB
 1372 0b06 00B5FFF7 	    _CALL uart_puts 
 1372      FEFF5DF8 
 1372      04EB
 1373 0b10 00B5FFF7 	    _CALL cr 
 1373      FEFF5DF8 
 1373      04EB
 1374              	// print error offset on line      
 1375 0b1a DFF8D007 	    ldr r0,=token_at_msg 
 1376 0b1e 00B5FFF7 	    _CALL uart_puts 
 1376      FEFF5DF8 
 1376      04EB
 1377 0b28 1046     	    mov r0,r2 
 1378 0b2a 4FF01001 	    mov r1,#16 
 1379 0b2e 00B5FFF7 	    _CALL print_int
 1379      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 40


 1379      04EB
 1380 0b38 00B5FFF7 	    _CALL cr
 1380      FEFF5DF8 
 1380      04EB
 1381              	// dump tokenize line 
 1382 0b42 5846     	    mov r0,BPTR
 1383 0b44 8278     	    ldrb r2,[r0,#2]
 1384 0b46 00B500F0 	    _CALL dump01 
 1384      DBF95DF8 
 1384      04EB
 1385 0b50 FFF7FEBF 	    b warm_start 
 1386              	compile_error:
 1387 0b54 DFF89017 	    ldr r1,=err_msg 
 1388 0b58 4FEA8000 	    lsl r0,#2 
 1389 0b5c 0858     	    ldr r0,[r1,r0]
 1390 0b5e 00B5FFF7 	    _CALL uart_puts
 1390      FEFF5DF8 
 1390      04EB
 1391 0b68 A068     	    ldr r0,[UPP,#BASICPTR]
 1392 0b6a 00B5FFF7 	    _CALL uart_puts
 1392      FEFF5DF8 
 1392      04EB
 1393 0b74 00B5FFF7 	    _CALL cr
 1393      FEFF5DF8 
 1393      04EB
 1394 0b7e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1395 0b80 00B5FFF7 	    _CALL spaces 
 1395      FEFF5DF8 
 1395      04EB
 1396 0b8a 4FF05E00 	    mov r0,#'^' 
 1397 0b8e 00B5FFF7 	    _CALL uart_putc
 1397      FEFF5DF8 
 1397      04EB
 1398 0b98 00B5FFF7 	    _CALL cr
 1398      FEFF5DF8 
 1398      04EB
 1399 0ba2 FFF7FEBF 	    b  warm_start  
 1400              	    
 1401 0ba6 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1401      74696D65 
 1401      20657272 
 1401      6F723A20 
 1401      00
 1402 0bb7 746F6B65 	token_at_msg: .asciz "token offset: "
 1402      6E206F66 
 1402      66736574 
 1402      3A2000
 1403              	
 1404              	
 1405              	err_msg:
 1406 0bc6 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1406      00000000 
 1406      0D000000 
 1406      1B000000 
 1406      34000000 
 1407 0bde 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1407      6F000000 
ARM GAS  tinyBasic.s 			page 41


 1407      89000000 
 1407      9A000000 
 1407      AB000000 
 1408 0bf2 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1408      EA000000 
 1408      FA000000 
 1408      0E010000 
 1408      21010000 
 1409 0c06 2E010000 	   .word err_cant_prog 
 1410              	
 1411              	    .section .rodata.tb_error 
 1412              	
 1413 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1413      72792066 
 1413      756C6C0A 
 1413      00
 1414 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1414      61782065 
 1414      72726F72 
 1414      0A00
 1415 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1415      206F7065 
 1415      72617469 
 1415      6F6E206F 
 1415      76657266 
 1416 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1416      73696F6E 
 1416      20627920 
 1416      300A00
 1417 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1417      6C696420 
 1417      6C696E65 
 1417      206E756D 
 1417      6265722E 
 1418 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1418      74696D65 
 1418      206F6E6C 
 1418      79207573 
 1418      6167652E 
 1419 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1419      616E6420 
 1419      6C696E65 
 1419      206F6E6C 
 1419      79207573 
 1420 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1420      69636174 
 1420      65206E61 
 1420      6D652E0A 
 1420      00
 1421 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1421      206E6F74 
 1421      20666F75 
 1421      6E642E0A 
 1421      00
 1422 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1422      76616C75 
 1422      652E0A00 
ARM GAS  tinyBasic.s 			page 42


 1423 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1423      20696E20 
 1423      65787465 
 1423      6E646564 
 1423      206D656D 
 1424 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1424      61746120 
 1424      666F756E 
 1424      642E0A00 
 1425 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1425      726F6772 
 1425      616D2069 
 1425      6E205241 
 1425      4D210A00 
 1426 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1426      20737973 
 1426      74656D20 
 1426      66756C6C 
 1426      2E0A00
 1427 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1427      65722066 
 1427      756C6C0A 
 1427      00
 1428 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1428      74206D6F 
 1428      64696679 
 1428      2070726F 
 1428      6772616D 
 1429              	
 1430 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1430      2074696D 
 1430      65206572 
 1430      726F722C 
 1430      2000
 1431 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1431      70696C65 
 1431      20657272 
 1431      6F722C20 
 1431      00
 1432 018d 6C617374 	tk_id: .asciz "last token id: "
 1432      20746F6B 
 1432      656E2069 
 1432      643A2000 
 1433              	
 1434              	
 1435              	    .section  .text , "ax", %progbits 
 1436              	
 1437              	/*********************************
 1438              	   skip_line 
 1439              	   data and remark line are skipped
 1440              	   by the interpreter 
 1441              	***********************************/
 1442 0c0a 00BF     	    _FUNC skip_line 
 1443 0c0c D4F804A0 	    ldr IN,[UPP,#COUNT]
 1444 0c10 7047     	    _RET 
 1445              	
 1446              	
ARM GAS  tinyBasic.s 			page 43


 1447              	/*********************************
 1448              	   BASIC: BTGL adr, mask   
 1449              	   toggle bits [adr]=[adr]^mask  
 1450              	   input:
 1451              	     r0    adr 
 1452              	     r1    mask 
 1453              	    output;
 1454              	      none 
 1455              	    use:
 1456              	      T1   temp
 1457              	      T2   temp  
 1458              	*******************************/     
 1459 0c12 00BF     	    _FUNC BTGL 
 1460              	
 1461 0c14 7047     	    _RET 
 1462              	
 1463              	/***************************************
 1464              	   kword_cmp
 1465              	   compare keyword to dict entry
 1466              	  input:
 1467              	    r0  keyword 
 1468              	    r1  dict entry 
 1469              	    r2  character count 
 1470              	  output:
 1471              	    r0  0 not same | -1 same 
 1472              	  use:
 1473              	    r6   result  
 1474              	    T1   char 1
 1475              	    T2   char 2
 1476              	**************************************/   
 1477 0c16 00BF     	    _FUNC kword_cmp 
 1478 0c18 2DE94003 	    push {r6,T1,T2}
 1479 0c1c 4FF0FF36 	    mov r6,#-1 
 1480 0c20 4AB1     	1:  cbz r2,9f       
 1481 0c22 10F8018B 	    ldrb T1,[r0],#1
 1482 0c26 11F8019B 	    ldrb T2,[r1],#1
 1483 0c2a A2F10102 	    sub r2,#1
 1484 0c2e C845     	    cmp T1,T2
 1485 0c30 F6D0     	    beq 1b 
 1486 0c32 86EA0606 	    eor r6,r6  
 1487 0c36 3046     	9:  mov r0,r6
 1488 0c38 BDE84003 	    pop {r6,T1,T2}
 1489 0c3c 7047     	    _RET 
 1490              	
 1491              	/***********************************************
 1492              	    search_dict 
 1493              	    search keyword in dictionary
 1494              	   input:
 1495              	  	 r0   keyword 
 1496              	     r1		dictionary first name field address  
 1497              	   output:
 1498              	     r0 		token attribute 
 1499              	     r1		  cmd_index if r0!=TK_NONE  
 1500              	   use:
 1501              	     r3   length keyword 
 1502              	     T1   keyword
 1503              	     T2   link  
ARM GAS  tinyBasic.s 			page 44


 1504              	**********************************************/
 1505 0c3e 00BF     	  _FUNC search_dict
 1506 0c40 2DE90C03 	  push {r2,r3,T1,T2}
 1507 0c44 8046     	  mov T1,r0 
 1508 0c46 00B5FFF7 	  _CALL strlen 
 1508      FEFF5DF8 
 1508      04EB
 1509 0c50 0346     	  mov r3,r0  
 1510              	1:  
 1511 0c52 8946     	   mov T2,r1  // keep for linking   
 1512 0c54 0878     	   ldrb r0,[r1] 
 1513 0c56 78B1     	   cbz r0,9f // null byte, end of dictionary
 1514 0c58 4046     	   mov r0,T1
 1515 0c5a 1A46     	   mov r2,r3   
 1516 0c5c 00B5FFF7 	   _CALL kword_cmp  
 1516      DBFF5DF8 
 1516      04EB
 1517 0c66 18B9     	   cbnz r0,2f 
 1518 0c68 4946     	   mov r1,T2
 1519 0c6a 51F80C1C 	   ldr r1,[r1,#-12]
 1520 0c6e F0E7     	   b 1b   
 1521              	2: // found
 1522 0c70 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1523 0c74 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1524 0c78 BDE80C03 	9: pop {r2,r3,T1,T2}
 1525 0c7c 7047     	   _RET 
 1526              	
 1527              	
 1528              	/**************************
 1529              	    INTERPRETER 
 1530              	*************************/
 1531              	
 1532              	/*********************************
 1533              	   cold_start 
 1534              	   initialize BASIC interpreter 
 1535              	   never leave 
 1536              	   input:
 1537              	     none 
 1538              	   output:
 1539              	    none 
 1540              	*********************************/
 1541              	  .type cold_start, %function 
 1542              	  .global cold_start 
 1543              	cold_start: 
 1544 0c7e 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1544      C2F20004 
 1545 0c86 DFF85400 	    ldr r0,src_addr 
 1546 0c8a DFF85410 	    ldr r1,dest_addr
 1547 0c8e 0968     	    ldr r1,[r1] 
 1548 0c90 0C44     	    add UPP,r1 // system variables base address   
 1549              	// clear RAM
 1550 0c92 2046     	    mov r0,UPP  
 1551 0c94 DFF86811 	    ldr r1,tib 
 1552 0c98 82EA0202 	    eor r2,r2 
 1553 0c9c 40F8042B 	1:  str r2,[r0],#4 
 1554 0ca0 8842     	    cmp r0,r1 
 1555 0ca2 FBD4     	    bmi 1b 
ARM GAS  tinyBasic.s 			page 45


 1556              	//copy initialized system variables to ram 
 1557 0ca4 DFF83400 	    ldr r0,src_addr 
 1558 0ca8 2146     	    mov r1,UPP 
 1559 0caa DFF83820 	    ldr r2,sysvar_size
 1560 0cae 00B5FFF7 	    _CALL cmove
 1560      FEFF5DF8 
 1560      04EB
 1561 0cb8 00B500F0 	    _CALL prt_version
 1561      15F85DF8 
 1561      04EB
 1562 0cc2 00B500F0 	    _CALL clear_basic 
 1562      62F85DF8 
 1562      04EB
 1563 0ccc 00B5FFF7 	    _CALL search_free 
 1563      FEFF5DF8 
 1563      04EB
 1564 0cd6 E062     	    str r0,[UPP,#FSFREE] 
 1565 0cd8 FFF7FEBF 	    b warm_start    
 1566              	src_addr:
 1567 0cdc 00000000 	  .word uzero
 1568              	dest_addr:
 1569 0ce0 00000000 	  .word vectors_size
 1570 0ce4 D4000000 	sysvar_size: .word ulast-uzero 
 1571              	
 1572              	/************************************
 1573              	    print firmware version 
 1574              	    input: 
 1575              	      none 
 1576              	    output:
 1577              	      none 
 1578              	    use:
 1579              	      r0 
 1580              	***********************************/
 1581              	    _FUNC prt_version 
 1582 0ce8 DFF80406 	    ldr r0,=version_msg 
 1583 0cec 00B5FFF7 	    _CALL uart_puts
 1583      FEFF5DF8 
 1583      04EB
 1584 0cf6 9FF87400 	    ldrb r0,version 
 1585 0cfa 4FEA1010 	    lsr r0,#4 
 1586 0cfe 00F13000 	    add r0,#'0' 
 1587 0d02 3A28     	    cmp r0,#'9'+1 
 1588 0d04 01D4     	    bmi 1f 
 1589 0d06 00F10700 	    add r0,#7 
 1590              	  1:
 1591 0d0a 00B5FFF7 	    _CALL uart_putc 
 1591      FEFF5DF8 
 1591      04EB
 1592 0d14 4FF02E00 	    mov r0,#'. 
 1593 0d18 00B5FFF7 	    _CALL uart_putc 
 1593      FEFF5DF8 
 1593      04EB
 1594 0d22 9FF84800 	    ldrb r0,version 
 1595 0d26 00F00F00 	    and r0,#15 
 1596 0d2a 00F13000 	    add r0,'0' 
 1597 0d2e 3A28     	    cmp r0,#'9'+1 
 1598 0d30 01D4     	    bmi 1f 
ARM GAS  tinyBasic.s 			page 46


 1599 0d32 00F10700 	    add r0,#7
 1600              	  1: 
 1601 0d36 00B5FFF7 	    _CALL uart_putc 
 1601      FEFF5DF8 
 1601      04EB
 1602 0d40 00B5FFF7 	    _CALL cr
 1602      FEFF5DF8 
 1602      04EB
 1603 0d4a 7047     	    _RET  
 1604              	version_msg:
 1605 0d4c 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1605      65207069 
 1605      6C6C2074 
 1605      696E7920 
 1605      42415349 
 1606              	version:
 1607 0d6c 10       	    .byte 0x10 
 1608 0d6d 0000BF   	    .p2align 2 
 1609              	
 1610              	
 1611              	/*****************************
 1612              	    clear_vars 
 1613              	    initialize variables to 0
 1614              	  input:
 1615              	    none 
 1616              	  output:
 1617              	    none 
 1618              	  use:
 1619              	    r0,r1,r2 
 1620              	*****************************/
 1621              	    _FUNC clear_vars 
 1622 0d70 07B4     	    push {r0,r1,r2}
 1623 0d72 80EA0000 	    eor r0,r0 
 1624 0d76 04F16001 	    add r1,UPP,#VARS
 1625 0d7a 4FF01A02 	    mov r2,#26
 1626 0d7e 41F8040B 	1:  str r0,[r1],#4 
 1627 0d82 013A     	    subs r2,#1
 1628 0d84 FBD1     	    bne 1b  
 1629 0d86 07BC     	    pop {r0,r1,r2}
 1630 0d88 7047     	    _RET 
 1631              	
 1632              	/*****************************
 1633              	   clear_basic 
 1634              	   reset BASIC system variables 
 1635              	   and clear variables and RAM 
 1636              	*****************************/
 1637 0d8a 00BF     	    _FUNC clear_basic
 1638 0d8c 80EA0000 	  	eor r0,r0
 1639 0d90 2064     	    str r0,[UPP,#FLAGS] 
 1640 0d92 6060     	    str r0,[UPP,#COUNT]
 1641 0d94 2060     	    str r0,[UPP,#IN_SAVED]
 1642 0d96 A060     	    str r0,[UPP,#BASICPTR]
 1643 0d98 E060     	    str r0,[UPP,#DATAPTR]
 1644 0d9a 2061     	    str r0,[UPP,#DATA]
 1645 0d9c 6061     	    str r0,[UPP,#DATALEN]
 1646 0d9e 04F1D000 	    add r0,UPP,#BASIC_START 
 1647 0da2 00F11000 	    add r0,#16 
ARM GAS  tinyBasic.s 			page 47


 1648 0da6 6FF00F01 	    mvn r1,#15
 1649 0daa 00EA0100 	    and r0,r1 
 1650 0dae 2063     	    str r0,[UPP,#TXTBGN]
 1651 0db0 6063     	    str r0,[UPP,#TXTEND]
 1652 0db2 C4F8D000 	    str r0,[UPP,#HERE]
 1653 0db6 00B5FFF7 	    _CALL clear_vars
 1653      DAFF5DF8 
 1653      04EB
 1654 0dc0 206B     	    ldr r0,[UPP,#TXTBGN]
 1655 0dc2 DFF83C10 	    ldr r1,tib 
 1656 0dc6 82EA0202 	    eor r2,r2 
 1657 0dca 40F8042B 	1:  str r2,[r0],#4
 1658 0dce 8842     	    cmp r0,r1 
 1659 0dd0 FBD4     	    bmi 1b 
 1660 0dd2 7047     	    _RET  
 1661              	
 1662              	/***********************************
 1663              	   warm_init 
 1664              	   initialize interpreter context 
 1665              	  input:
 1666              	    none
 1667              	  output:
 1668              	    none 
 1669              	  use:
 1670              	    r0 
 1671              	***********************************/
 1672              	warm_init:
 1673              	// reset data stack       
 1674 0dd4 DFF824C0 	    ldr DP,dstack 
 1675 0dd8 4FF0000A 	    mov IN,#0 // BASIC line index 
 1676 0ddc 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1677 0de0 80EA0000 	    eor r0,r0 
 1678 0de4 6060     	    str r0,[UPP,#COUNT]  
 1679 0de6 2064     	    str r0,[UPP,#FLAGS]
 1680 0de8 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1681 0dea 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1682 0dee 6064     	    str r0,[UPP,#TAB_WIDTH]
 1683 0df0 4FF00A00 	    mov r0,#10 // default base decimal 
 1684 0df4 A061     	    str r0,[UPP,#BASE]
 1685 0df6 7047     	    _RET  
 1686              	
 1687 0df8 00000000 	mstack: .word _mstack 
 1688 0dfc 00000000 	dstack: .word _dstack 
 1689 0e00 00000000 	tib: .word _tib 
 1690 0e04 00000000 	pad: .word _pad 
 1691 0e08 FCFFFFFF 	array: .word _pad - 4 
 1692 0e0c 0A524541 	ready: .asciz "\nREADY" 
 1692      445900
 1693              	
 1694              	/**********************************
 1695              	    warm_start 
 1696              	    start BASIC interpreter doesn't  
 1697              	    reset variables and code space 
 1698              	  input:
 1699              	    none 
 1700              	  output:
 1701              	    none 
ARM GAS  tinyBasic.s 			page 48


 1702              	**********************************/
 1703 0e13 00       	    _GBL_FUNC warm_start 
 1704              	// initialise parameters stack
 1705 0e14 FFF7DEFF 	    bl warm_init
 1706              	// reset main stack 
 1707 0e18 5FF82400 	    ldr r0,mstack
 1708 0e1c 8546     	    mov sp,r0 
 1709 0e1e DFF8D404 	    ldr r0,=ready 
 1710 0e22 00B5FFF7 	    _CALL uart_puts 
 1710      FEFF5DF8 
 1710      04EB
 1711              	// fall in cmd_line 
 1712              	
 1713              	/**********************************
 1714              	   cmd_line 
 1715              	   shell command line 
 1716              	   input:
 1717              	      none 
 1718              	   output:
 1719              	      none 
 1720              	   use:
 1721              	
 1722              	***********************************/
 1723              	    _FUNC cmd_line 
 1724 0e2c 00B5FFF7 	    _CALL cr
 1724      FEFF5DF8 
 1724      04EB
 1725 0e36 80EA0000 	    eor r0,r0 
 1726 0e3a C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1727 0e3e 5FF84000 	1:  ldr r0,tib
 1728 0e42 4FF05001 	    mov r1,#TIB_SIZE 
 1729 0e46 00B5FFF7 	    _CALL readln 
 1729      FEFF5DF8 
 1729      04EB
 1730 0e50 0940     	    ands r1,r1 // empty line 
 1731 0e52 F4D0     	    beq 1b 
 1732 0e54 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1732      ABFA5DF8 
 1732      04EB
 1733 0e5e EED0     	    beq 1b  // tokens stored in text area 
 1734              	// interpret tokenized line 
 1735              	interpreter:
 1736 0e60 00B500F0 	  _CALL next_token 
 1736      25F85DF8 
 1736      04EB
 1737 0e6a 0028     	  cmp r0,#TK_NONE 
 1738 0e6c F8D0     	  beq interpreter    
 1739 0e6e 4028     	  cmp r0,#TK_LBL 
 1740 0e70 F6D0     	  beq interpreter 
 1741 0e72 0B28     	  cmp r0,#TK_CMD 
 1742 0e74 03D1     	  bne 2f
 1743 0e76 0846     	  mov r0,r1 
 1744 0e78 00F014F8 	  bl execute  
 1745 0e7c F0E7     	  b interpreter   
 1746              	2: 
 1747 0e7e 0428     	  cmp r0,#TK_VAR 
 1748 0e80 05D1     	  bne 3f 
ARM GAS  tinyBasic.s 			page 49


 1749 0e82 00B500F0 	  _CALL let_var 
 1749      7BFB5DF8 
 1749      04EB
 1750 0e8c E8E7     	  b interpreter 
 1751              	3: 
 1752 0e8e 0528     	  cmp r0,#TK_ARRAY 
 1753 0e90 05D1     	  bne 4f
 1754 0e92 00B500F0 	  _CALL let_array 
 1754      81FB5DF8 
 1754      04EB
 1755 0e9c E0E7     	  b interpreter
 1756              	4: 
 1757 0e9e 0128     	  cmp r0,#TK_COLON
 1758 0ea0 DED0     	  beq interpreter
 1759 0ea2 0BE6     	  b syntax_error
 1760              	
 1761              	/*****************************
 1762              	    execute 
 1763              	    execute a BASIC routine from 
 1764              	    its token value 
 1765              	  input:
 1766              	    r0  BASIC SUB|FUNC token  
 1767              	  output: 
 1768              	    depend on SUB|FUNc
 1769              	*****************************/
 1770              	    _FUNC execute 
 1771 0ea4 DFF85014 	    ldr r1,=fn_table 
 1772 0ea8 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1773 0eac 0047     	    bx r0 
 1774              	
 1775              	/*************************************
 1776              	  next_token 
 1777              	  extract next token from token list 
 1778              	  input:
 1779              	    none 
 1780              	  output:
 1781              	    r0    token attribute
 1782              	    r1    token value if there is one 
 1783              	  use:
 1784              	    T1    exit token type  
 1785              	****************************/
 1786 0eae 00BF     	    _FUNC next_token 
 1787 0eb0 4DF8048D 	    push {T1}
 1788 0eb4 88EA0808 	    eor T1,T1 // TK_NONE 
 1789 0eb8 6068     	    ldr r0,[UPP,#COUNT]
 1790 0eba 8245     	    cmp IN,r0 
 1791 0ebc 14D4     	    bmi 0f
 1792              	end_of_line:
 1793 0ebe BBF80010 	    ldrh r1,[BPTR] // line #
 1794 0ec2 09B9     	    cbnz r1, next_line  // command line
 1795 0ec4 FFF7FEBF 	    b warm_start
 1796              	next_line:
 1797 0ec8 8344     	    add BPTR,r0 // next line 
 1798 0eca 606B     	    ldr r0,[UPP,#TXTEND]
 1799 0ecc 8345     	    cmp BPTR,r0 
 1800 0ece 7FF5FEAF 	    bpl warm_start // end of program
 1801 0ed2 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
ARM GAS  tinyBasic.s 			page 50


 1802 0ed6 6060     	    str r0,[UPP,#COUNT] 
 1803 0ed8 4FF0030A 	    mov IN,#3
 1804 0edc 00B5FFF7 	    _CALL show_trace
 1804      85F95DF8 
 1804      04EB
 1805 0ee6 2AE0     	    b 9f  
 1806              	0: 
 1807 0ee8 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1808 0eec C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1809 0ef0 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1810 0ef4 0AF1010A 	    add IN,#1  
 1811 0ef8 8046     	    mov T1,r0 
 1812 0efa 00F07F00 	    and r0,#0x7f // limit mask 
 1813 0efe FF49     	    ldr r1,=tok_jmp 
 1814 0f00 D1E800F0 	    tbb [r1,r0]
 1815              	1: // pc reference point 
 1816 0f04 1BE0     	    b 9f 
 1817              	2: // .byte param
 1818 0f06 1BF80A10 	    ldrb r1,[BPTR,IN]
 1819 0f0a 0AF1010A 	    add IN,#1 
 1820 0f0e 16E0     	    b 9f 
 1821              	3: // .hword param 
 1822 0f10 3BF80A10 	    ldrh r1,[BPTR,IN]
 1823 0f14 0AF1020A 	    add IN,#2 
 1824 0f18 11E0     	    b 9f 
 1825              	4: // .word param  
 1826 0f1a 5BF80A10 	    ldr r1,[BPTR,IN]
 1827 0f1e 0AF1040A 	    add IN,#4
 1828 0f22 0CE0     	    b 9f 
 1829              	5: // .asciz param 
 1830 0f24 0BEB0A01 	    add r1,BPTR,IN 
 1831 0f28 0846     	    mov r0,r1  
 1832 0f2a 00B5FFF7 	    _CALL strlen 
 1832      FEFF5DF8 
 1832      04EB
 1833 0f34 8244     	    add IN,r0
 1834 0f36 0AF1010A 	    add IN,#1
 1835 0f3a 00E0     	    b 9f  
 1836              	8: // syntax error 
 1837 0f3c BEE5     	    b syntax_error 
 1838 0f3e 4046     	9:  mov r0,T1  
 1839 0f40 5DF8048B 	    pop {T1}
 1840 0f44 7047     	    _RET
 1841              	
 1842 0f46 00BF     	  .p2align 2
 1843              	tok_jmp: // token id  tbb offset 
 1844 0f48 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1845 0f4a 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1846 0f4e 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1846      1D
 1847 0f53 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1848 0f57 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1849 0f5a 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1849      1C
 1850 0f5f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1850      1C1C
 1851 0f65 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
ARM GAS  tinyBasic.s 			page 51


 1852 0f68 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1853 0f6b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1853      1C1C1C1C 
 1854 0f73 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1854      1C1C
 1855 0f79 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1855      1D1D
 1856 0f7f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1856      1C1C1C1C 
 1856      1C
 1857 0f88 0B       	  .byte (4b-1b)/2 //0x40 TK_LBL 
 1858              	
 1859 0f89 0000BF   	  .p2align 2 
 1860              	
 1861              	/*********************************
 1862              	    expect 
 1863              	    check if next token is of 
 1864              	    expected type. If not 
 1865              	    call syntax_error  
 1866              	  input:
 1867              	      r0   token attribute
 1868              	  output:
 1869              	      r0  token attribute 
 1870              	      r1  token value
 1871              	  use:
 1872              	      T1   
 1873              	**********************************/
 1874              	    _FUNC expect 
 1875 0f8c 4DF8048D 	    push {T1}
 1876 0f90 8046     	    mov T1,r0 
 1877 0f92 00B5FFF7 	    _CALL next_token 
 1877      8CFF5DF8 
 1877      04EB
 1878 0f9c 4045     	    cmp r0,T1  
 1879 0f9e 7FF48DAD 	    bne syntax_error 
 1880 0fa2 5DF8048B 	    pop {T1}
 1881 0fa6 7047     	    _RET 
 1882              	
 1883              	/***********************************
 1884              	    func_args 
 1885              	    get function arguments list 
 1886              	  input:
 1887              	    none 
 1888              	  output:
 1889              	    r0    arg. count 
 1890              	  use:
 1891              	
 1892              	************************************/
 1893              	    _FUNC func_args 
 1894 0fa8 4FF00600 	    mov r0,#TK_LPAREN 
 1895 0fac 00B5FFF7 	    _CALL expect 
 1895      EDFF5DF8 
 1895      04EB
 1896 0fb6 00B500F0 	    _CALL arg_list 
 1896      0CF85DF8 
 1896      04EB
 1897 0fc0 01B4     	    push {r0}
ARM GAS  tinyBasic.s 			page 52


 1898 0fc2 4FF00700 	    mov r0,#TK_RPAREN 
 1899 0fc6 00B5FFF7 	    _CALL expect 
 1899      E0FF5DF8 
 1899      04EB
 1900 0fd0 01BC     	    pop {r0}
 1901 0fd2 7047     	    _RET 
 1902              	
 1903              	/**********************************
 1904              	    arg_list 
 1905              	    get arguments list on dstack 
 1906              	  input:
 1907              	    none 
 1908              	  output:
 1909              	    r0    arg count
 1910              	  use:
 1911              	    T1    tmp count  
 1912              	***********************************/
 1913              	    _FUNC arg_list 
 1914 0fd4 4DF8048D 	    push {T1}
 1915 0fd8 88EA0808 	    eor T1,T1 
 1916 0fdc 00B500F0 	1:  _CALL expression 
 1916      D5F85DF8 
 1916      04EB
 1917 0fe6 0028     	    cmp R0,#TK_NONE 
 1918 0fe8 10D0     	    beq 9f 
 1919 0fea 0F28     	    cmp r0,#TK_INTGR
 1920 0fec 0ED1     	    bne 9f 
 1921 0fee 4CF8041D 	    _PUSH r1 
 1922 0ff2 08F10108 	    add T1,#1 
 1923 0ff6 00B5FFF7 	    _CALL next_token 
 1923      5AFF5DF8 
 1923      04EB
 1924 1000 0828     	    cmp r0,#TK_COMMA 
 1925 1002 EBD0     	    beq 1b 
 1926 1004 D4F800A0 	    _UNGET_TOKEN 
 1926      D4F808B0 
 1927 100c 4046     	9:  mov r0,T1 
 1928 100e 5DF8048B 	    pop {T1}
 1929 1012 7047     	    _RET 
 1930              	
 1931              	/***********************************
 1932              	 factor
 1933              	 arithmetick factor parser 
 1934              	 factor ::= ['+'|'-'|e]  var | @ |
 1935              				 integer | function |
 1936              				 '('expression')' 
 1937              	  input: 
 1938              	    none 
 1939              	  output:
 1940              	    r0   token attribute 
 1941              	    r1   token value 
 1942              	  use:
 1943              	    r2   temp 
 1944              	    T1   sign 
 1945              	    T2   exit token attribute 
 1946              	***********************************/
 1947              	    _FUNC factor 
ARM GAS  tinyBasic.s 			page 53


 1948 1014 2DE90403 	    push {r2,T1,T2}
 1949 1018 4FF00F09 	    mov T2,#TK_INTGR 
 1950 101c 4FF00108 	    mov T1,#1 // default sign +  
 1951 1020 00B5FFF7 	    _CALL next_token
 1951      45FF5DF8 
 1951      04EB
 1952 102a 0246     	    mov r2,r0 
 1953 102c 00F03000 	    and r0,#TK_GRP_MASK 
 1954 1030 1028     	    cmp r0,#TK_GRP_ADD
 1955 1032 1046     	    mov r0,r2
 1956 1034 08D1     	    bne 1f 
 1957 1036 1028     	    cmp r0,#TK_PLUS 
 1958 1038 01D0     	    beq 0f 
 1959 103a 4FF0FF38 	    mov T1,#-1 // minus sign 
 1960 103e 00B5FFF7 	0:  _CALL next_token
 1960      36FF5DF8 
 1960      04EB
 1961 1048 0F28     	1:  cmp r0,#TK_INTGR 
 1962 104a 59D0     	    beq 8f 
 1963 104c 0528     	    cmp r0,#TK_ARRAY 
 1964 104e 1ED1     	    bne 2f 
 1965 1050 4FF00600 	    mov r0,#TK_LPAREN 
 1966 1054 00B5FFF7 	    _CALL expect 
 1966      99FF5DF8 
 1966      04EB
 1967 105e 00B500F0 	    _CALL expression
 1967      94F85DF8 
 1967      04EB
 1968 1068 0F28     	    cmp r0,#TK_INTGR
 1969 106a 7FF427AD 	    bne syntax_error
 1970 106e 8146     	    mov T2,r0
 1971 1070 0A46     	    mov r2,r1  
 1972 1072 4FF00700 	    mov r0,#TK_RPAREN
 1973 1076 00B5FFF7 	    _CALL expect 
 1973      88FF5DF8 
 1973      04EB
 1974 1080 1046     	    mov r0,r2 
 1975 1082 00B500F0 	    _CALL get_array_element 
 1975      F8F85DF8 
 1975      04EB
 1976 108c 38E0     	    b 8f
 1977 108e 0628     	2:  cmp r0,#TK_LPAREN 
 1978 1090 12D1     	    bne 3f 
 1979 1092 00B500F0 	    _CALL expression 
 1979      7AF85DF8 
 1979      04EB
 1980 109c 0F28     	    cmp r0,#TK_INTGR 
 1981 109e 7FF40DAD 	    bne syntax_error
 1982 10a2 8146     	    mov T2,r0
 1983 10a4 0A46     	    mov r2,r1   
 1984 10a6 4FF00700 	    mov r0,#TK_RPAREN
 1985 10aa 00B5FFF7 	    _CALL expect 
 1985      6EFF5DF8 
 1985      04EB
 1986 10b4 1146     	    mov r1,r2 
 1987 10b6 23E0     	    b 8f       
 1988 10b8 0428     	3:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 54


 1989 10ba 06D1     	    bne 4f
 1990 10bc 0846     	    mov r0,r1  
 1991 10be 00B500F0 	    _CALL get_var 
 1991      EEF85DF8 
 1991      04EB
 1992 10c8 1AE0     	    b 8f 
 1993 10ca 0C28     	4:  cmp r0,#TK_IFUNC 
 1994 10cc 06D1     	    bne 6f 
 1995 10ce 0846     	5:  mov r0,r1  
 1996 10d0 00B5FFF7 	    _CALL execute
 1996      E7FE5DF8 
 1996      04EB
 1997 10da 11E0     	    b 8f 
 1998 10dc 4028     	6:  cmp r0,#TK_LBL
 1999 10de 08D1     	    bne 7f 
 2000 10e0 41F00040 	    orr r0,r1,#(1<<31) 
 2001 10e4 00B5FFF7 	    _CALL search_const
 2001      D5F85DF8 
 2001      04EB
 2002 10ee 0146     	    mov r1,r0 
 2003 10f0 06E0     	    b 8f 
 2004 10f2 D4F800A0 	7:  _UNGET_TOKEN      
 2004      D4F808B0 
 2005 10fa 4FF00000 	    mov r0,#TK_NONE
 2006 10fe 03E0     	    b 9f  
 2007 1100 08FB01F1 	8:  mul r1,T1 
 2008 1104 5FEA0900 	    movs r0,T2 
 2009 1108 BDE80403 	9:  pop {r2,T1,T2}   
 2010 110c 7047     	    _RET 
 2011              	
 2012              	
 2013              	/*****************************************
 2014              	    term 
 2015              	    term parser 
 2016              	    term ::= factor [['*'|'/'|'%'] factor]* 
 2017              	    output:
 2018              	      r0  	token attribute 
 2019              	      r1		integer
 2020              	    use:
 2021              	      r2    first operand 
 2022              	      r3    temp 
 2023              	      T1    operator 
 2024              	      T2    exit token attribute 
 2025              	******************************************/
 2026 110e 00BF     	     _FUNC term 
 2027 1110 2DE90C03 	    push {r2,r3,T1,T2}
 2028 1114 4FF00009 	    mov T2,#TK_NONE 
 2029 1118 00B5FFF7 	    _CALL factor
 2029      7BFF5DF8 
 2029      04EB
 2030 1122 60B3     	    cbz r0, 9f  // no factor   
 2031 1124 8146     	    mov T2,r0  // TK_INTGR 
 2032 1126 0A46     	    mov r2,r1 // first factor    
 2033 1128 00B5FFF7 	0:  _CALL next_token
 2033      C1FE5DF8 
 2033      04EB
 2034 1132 0346     	    mov r3,r0   
ARM GAS  tinyBasic.s 			page 55


 2035 1134 00F03000 	    and r0,#TK_GRP_MASK 
 2036 1138 2028     	    cmp r0,#TK_GRP_MULT
 2037 113a 04D0     	    beq 1f
 2038 113c D4F800A0 	    _UNGET_TOKEN
 2038      D4F808B0 
 2039 1144 1BE0     	    b 9f 
 2040 1146 9846     	1:  mov T1,r3 
 2041 1148 00B5FFF7 	    _CALL factor  
 2041      63FF5DF8 
 2041      04EB
 2042 1152 3FF4B3AC 	    beq syntax_error 
 2043 1156 B8F1200F 	    cmp T1,#TK_MULT
 2044 115a 02D1     	    bne 2f 
 2045              	// multiplication
 2046 115c 01FB02F2 	    mul r2,r1
 2047 1160 E2E7     	    b 0b  
 2048 1162 B8F1210F 	2:  cmp T1,#TK_DIV 
 2049 1166 02D1     	    bne 3f
 2050              	// division
 2051 1168 92FBF1F2 	    sdiv r2,r2,r1
 2052 116c DCE7     	    b 0b  
 2053              	3: // modulo
 2054 116e 1046     	    mov r0,r2 
 2055 1170 92FBF1F2 	    sdiv r2,r2,r1 
 2056 1174 01FB02F2 	    mul  r2,r1 
 2057 1178 A0EB0202 	    sub  r2,r0,r2
 2058 117c D4E7     	    b 0b  
 2059 117e 1146     	9:  mov r1,r2 
 2060 1180 5FEA0900 	    movs r0,T2 
 2061 1184 BDE80C03 	    pop {r2,r3,T1,T2}
 2062 1188 7047     	    _RET 
 2063              	
 2064              	/*****************************************
 2065              	    expression 
 2066              	    arithmetic expression parser 
 2067              	    expression ::= term [['+'|'-'] term]*
 2068              	    result range {-32768..32767}
 2069              	    output:
 2070              	      r0    TK_NONE || TK_INTGR 
 2071              	      r1 	  integer
 2072              	    use:
 2073              	      r2  left operand 
 2074              	      T1  operator 
 2075              	      T2  exit token attribute
 2076              	******************************************/
 2077 118a 00BF     	    _FUNC expression 
 2078 118c 2DE90403 	    push {r2,t1,t2}
 2079 1190 4FF00009 	    mov T2,#TK_NONE
 2080 1194 82EA0202 	    eor r2,r2 // zero 
 2081 1198 00B5FFF7 	    _CALL term 
 2081      B9FF5DF8 
 2081      04EB
 2082 11a2 21D0     	    beq 9f  // no term  
 2083 11a4 0A46     	    mov r2,r1 // first term
 2084 11a6 4FF00F09 	    mov T2,#TK_INTGR    
 2085 11aa 00B5FFF7 	1:  _CALL next_token 
 2085      80FE5DF8 
ARM GAS  tinyBasic.s 			page 56


 2085      04EB
 2086 11b4 8046     	    mov T1,r0 // token attribute 
 2087 11b6 00F03000 	    and r0,#TK_GRP_MASK 
 2088 11ba 1028     	    cmp r0,#TK_GRP_ADD 
 2089 11bc 04D0     	    beq 3f 
 2090 11be D4F800A0 	    _UNGET_TOKEN
 2090      D4F808B0 
 2091 11c6 0FE0     	    b 9f  
 2092 11c8 00B5FFF7 	3:  _CALL term 
 2092      A1FF5DF8 
 2092      04EB
 2093 11d2 0F28     	    cmp r0,#TK_INTGR 
 2094 11d4 7FF472AC 	    bne syntax_error 
 2095 11d8 B8F1100F 	    cmp T1,#TK_PLUS 
 2096 11dc 02D0     	    beq 4f 
 2097 11de A2EB0102 	    sub r2,r2,r1 // N1-N2  
 2098 11e2 E2E7     	    b 1b 
 2099 11e4 0A44     	4:  add r2,r2,r1 // N1+N2
 2100 11e6 E0E7     	    b 1b
 2101 11e8 4846     	9:  mov r0,T2 
 2102 11ea 1146     	    mov r1,r2 
 2103 11ec BDE80403 	    pop {r2,t1,t2}
 2104 11f0 7047     	    _RET 
 2105              	
 2106              	
 2107              	/**********************************************
 2108              	    relation parser 
 2109              	    rel ::= expr1 rel_op expr2
 2110              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2111              	    relation return  integer , zero is false 
 2112              	    output:
 2113              	        r0	TK_INTGR  
 2114              	        r1	integer 
 2115              	    use:
 2116              	        r2   first operand 
 2117              	        T1   relop   
 2118              	**********************************************/
 2119 11f2 00BF     	    _FUNC relation 
 2120 11f4 2DE90401 	    push {r2,T1}
 2121 11f8 00B5FFF7 	    _CALL expression 
 2121      C7FF5DF8 
 2121      04EB
 2122 1202 0F28     	    cmp r0,#TK_INTGR 
 2123 1204 7FF45AAC 	    bne syntax_error 
 2124 1208 0A46     	    mov r2,r1  // first operand  
 2125 120a 00B5FFF7 	    _CALL next_token 
 2125      50FE5DF8 
 2125      04EB
 2126 1214 8046     	    mov T1,r0  // relop  
 2127 1216 00F03000 	    and r0,#TK_GRP_MASK 
 2128 121a 3028     	    cmp r0,#TK_GRP_RELOP 
 2129 121c 1DD1     	    bne 8f  // single operand 
 2130 121e 00B5FFF7 	    _CALL expression 
 2130      B4FF5DF8 
 2130      04EB
 2131 1228 0F28     	    cmp r0,#TK_INTGR 
 2132 122a 7FF447AC 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 57


 2133 122e 8A42     	    cmp r2,r1 // compare operands  
 2134 1230 4FF0FF31 	    mov r1,#-1 
 2135 1234 324A     	    ldr r2,=relop_jmp
 2136 1236 08F00708 	    and T1,#7 // {1..6}
 2137 123a D2E808F0 	    tbb [r2,T1]    
 2138              	rel_idx0:
 2139              	rel_eq:
 2140 123e 11D0     	    beq 9f 
 2141 1240 08E0     	    b rel_false
 2142              	rel_lt: 
 2143 1242 0FDB     	    blt 9f   
 2144 1244 06E0     	    b rel_false 
 2145              	rel_le:
 2146 1246 0DDD     	    ble 9f  
 2147 1248 04E0     	    b rel_false 
 2148              	rel_gt:
 2149 124a 0BDC     	    bgt 9f  
 2150 124c 02E0     	    b rel_false  
 2151              	rel_ge:
 2152 124e 09DA     	    bge 9f  
 2153 1250 00E0     	    b rel_false  
 2154              	rel_diff:
 2155 1252 07D1     	    bne 9f 
 2156              	rel_false:    
 2157 1254 81EA0101 	    eor r1,r1  // false
 2158 1258 04E0     	    b 9f  
 2159 125a D4F800A0 	8:  _UNGET_TOKEN 
 2159      D4F808B0 
 2160 1262 1146     	    mov r1,r2    
 2161 1264 4FF00F00 	9:  mov r0,#TK_INTGR
 2162 1268 BDE80401 	    pop {r2,T1}
 2163 126c 7047     	    _RET 
 2164              	
 2165              	
 2166              	relop_jmp: 
 2167 126e 00       	  .byte 0 
 2168 126f 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2169 1270 00       	  .byte 0 // =
 2170 1271 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2171 1272 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2172 1273 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2173 1274 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2174              	
 2175              	
 2176              	/***********************************
 2177              	    get_array_element
 2178              	    return value of @(n)
 2179              	  input:
 2180              	    r0    indice 
 2181              	  output:
 2182              	    r0   TK_INTGR
 2183              	    r1   value  
 2184              	************************************/
 2185 1275 0000BF   	    _FUNC get_array_element 
 2186 1278 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2187 127c 4FEA8000 	    lsl r0,#2 
 2188 1280 C0EB0100 	    rsb r0,r1 
ARM GAS  tinyBasic.s 			page 58


 2189 1284 0168     	    ldr r1,[r0]
 2190 1286 4FF00F00 	    mov r0,#TK_INTGR 
 2191 128a 7047     	    _RET 
 2192              	
 2193              	
 2194              	/***********************************
 2195              	    set_array_element 
 2196              	    set value of array element 
 2197              	  input:
 2198              	    r0   index 
 2199              	    r1   new value 
 2200              	  output:
 2201              	    none
 2202              	  use:
 2203              	    r2    array pointer 
 2204              	**********************************/
 2205              	    _FUNC set_array_element 
 2206 128c 04B4     	    push {r2}
 2207 128e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2208 1292 4FEA8000 	    lsl r0,#2 
 2209 1296 A1EB0001 	    sub r1,r0 
 2210 129a 0960     	    str r1,[r1]
 2211 129c 04BC     	    pop {r2}
 2212 129e 7047     	    _RET 
 2213              	
 2214              	/***********************************
 2215              	   get_var 
 2216              	   get variable value 
 2217              	  input:
 2218              	     r0    variable index {0..25}
 2219              	  output:
 2220              	     r0    TK_INTGR
 2221              	     r1    value 
 2222              	**********************************/
 2223              	    _FUNC get_var 
 2224 12a0 04F16001 	    add r1,UPP,#VARS
 2225 12a4 4FEA8000 	    lsl r0,#2 
 2226 12a8 0958     	    ldr r1,[r1,r0]
 2227 12aa 4FF00F00 	    mov r0,#TK_INTGR
 2228 12ae 7047     	    _RET 
 2229              	
 2230              	/*********************************
 2231              	    set_var 
 2232              	    set variable value 
 2233              	  input:
 2234              	     r0    variable index {0..25}
 2235              	     r1    new value 
 2236              	  output:
 2237              	    none 
 2238              	  use:
 2239              	    r2   vars pointer 
 2240              	*********************************/
 2241              	    _FUNC set_var 
 2242 12b0 04B4     	    push {r2}
 2243 12b2 04F16002 	    add r2,UPP,#VARS
 2244 12b6 4FEA8000 	    lsl r0,#2
 2245 12ba 1150     	    str r1,[r2,r0]
ARM GAS  tinyBasic.s 			page 59


 2246 12bc 04BC     	    pop {r2}
 2247 12be 7047     	    _RET 
 2248              	
 2249              	/******************************
 2250              	    CONSTANTS data
 2251              	******************************/
 2252              	
 2253              	  .section .rodata 
 2254              	
 2255              	// system variables initial value 
 2256              	uzero:
 2257 0000 00000000 	  .word 0 // IN_SAVED
 2258 0004 00000000 	  .word 0 // COUNT
 2259 0008 00000000 	  .word 0 // BASICPTR
 2260 000c 00000000 	  .word 0 // DATAPTR
 2261 0010 00000000 	  .word 0 // DATA
 2262 0014 00000000 	  .word 0 // DATALEN
 2263 0018 0A000000 	  .word 10 // BASE
 2264 001c 00000000 	  .word 0 // TICKS
 2265 0020 00000000 	  .word 0 // TIMER
 2266 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2267 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2268 002c 00000000 	  .word 0 // FSFREE
 2269 0030 00000000 	  .word 0 // TXTBGN
 2270 0034 00000000 	  .word 0 // TXTEND
 2271 0038 00000000 	  .word 0 //LOOP_DEPTH
 2272 003c 00000000 	  .word 0 // ARRAY_SIZE
 2273 0040 00000000 	  .word 0 // FLAGS
 2274 0044 04000000 	  .word 4 // TAB_WIDTH
 2275 0048 00000000 	  .word 0 // RX_HEAD
 2276 004c 00000000 	  .word 0 // RX_TAIL
 2277 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2277      00000000 
 2277      00000000 
 2277      00000000 
 2278 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2279 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2280 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2281 00d0 00000000 	  .word 0 // HERE 
 2282              	ulast:
 2283              	
 2284              	  .section .rodata.dictionary 
 2285              	
 2286              	// keep alphabetic order for BASIC names from Z-A
 2287              	// this sort order is for for WORDS cmd output. 	
 2288              	  .type kword_end, %object
 2289              		.equ link, 0
 2290              	kword_end:
 2291 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2291      00000000 
 2291      00000000 
 2291      00000000 
 2292 0010 0C000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
ARM GAS  tinyBasic.s 			page 60


 2292      51000000 
 2292      0C000000 
 2292      584F5200 
 2293 0020 1C000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2293      4F000000 
 2293      0B000000 
 2293      574F5244 
 2293      53000000 
 2294 0034 2C000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2294      4E000000 
 2294      0B000000 
 2294      57414954 
 2294      00000000 
 2295 0048 40000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2295      4D000000 
 2295      0B000000 
 2295      554E5449 
 2295      4C000000 
 2296 005c 54000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2296      4C000000 
 2296      0C000000 
 2296      55464C41 
 2296      53480000 
 2297 0070 68000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2297      4B000000 
 2297      0C000000 
 2297      55424F55 
 2297      4E440000 
 2298 0084 7C000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2298      4A000000 
 2298      0B000000 
 2298      54524143 
 2298      45000000 
 2299 0098 90000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2299      49000000 
 2299      0B000000 
 2299      544F0000 
 2300 00a8 A4000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2300      47000000 
 2300      0B000000 
 2300      54494D45 
 2300      52000000 
 2301 00bc B4000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2301      48000000 
 2301      0C000000 
 2301      54494D45 
 2301      4F555400 
 2302 00d0 C8000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2302      46000000 
 2302      0C000000 
 2302      5449434B 
 2302      53000000 
 2303 00e4 DC000000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2303      45000000 
 2303      0B000000 
 2303      5448454E 
 2303      00000000 
ARM GAS  tinyBasic.s 			page 61


 2304 00f8 F0000000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2304      44000000 
 2304      0B000000 
 2304      54414200 
 2305 0108 04010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store 
 2305      43000000 
 2305      0B000000 
 2305      53544F52 
 2305      45000000 
 2306 011c 14010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2306      42000000 
 2306      0B000000 
 2306      53544F50 
 2306      00000000 
 2307 0130 28010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2307      41000000 
 2307      0B000000 
 2307      53544550 
 2307      00000000 
 2308 0144 3C010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2308      40000000 
 2308      0B000000 
 2308      53504300 
 2309 0154 50010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2309      3F000000 
 2309      0B000000 
 2309      534C4545 
 2309      50000000 
 2310 0168 60010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2310      3E000000 
 2310      0C000000 
 2310      53495A45 
 2310      00000000 
 2311 017c 74010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2311      3D000000 
 2311      0B000000 
 2311      53415645 
 2311      00000000 
 2312 0190 88010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2312      3C000000 
 2312      0B000000 
 2312      52554E00 
 2313 01a0 9C010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2313      3B000000 
 2313      0C000000 
 2313      52534849 
 2313      46540000 
 2314 01b4 AC010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2314      3A000000 
 2314      0C000000 
 2314      524E4400 
 2315 01c4 C0010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2315      39000000 
 2315      0B000000 
 2315      52455455 
 2315      524E0000 
 2316 01d8 D0010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
ARM GAS  tinyBasic.s 			page 62


 2316      38000000 
 2316      0B000000 
 2316      52455354 
 2316      4F524500 
 2317 01ec E4010000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2317      37000000 
 2317      0B000000 
 2317      52454D41 
 2317      524B0000 
 2318 0200 F8010000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2318      36000000 
 2318      0C000000 
 2318      52454144 
 2318      00000000 
 2319 0214 0C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2319      35000000 
 2319      0C000000 
 2319      514B4559 
 2319      00000000 
 2320 0228 20020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2320      34000000 
 2320      0B000000 
 2320      50555348 
 2320      00000000 
 2321 023c 34020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2321      33000000 
 2321      0B000000 
 2321      5052494E 
 2321      54000000 
 2322 0250 48020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2322      32000000 
 2322      0C000000 
 2322      504F5000 
 2323 0260 5C020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2323      2F000000 
 2323      0B000000 
 2323      504F4B45 
 2323      38000000 
 2324 0274 6C020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2324      31000000 
 2324      0B000000 
 2324      504F4B45 
 2324      33320000 
 2325 0288 80020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2325      30000000 
 2325      0B000000 
 2325      504F4B45 
 2325      31360000 
 2326 029c 94020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2326      2A000000 
 2326      0B000000 
 2326      504D4F44 
 2326      45000000 
 2327 02b0 A8020000 	  _dict_entry TK_IFUNC,PICK,PICK_IDX // pick 
 2327      2E000000 
 2327      0C000000 
 2327      5049434B 
ARM GAS  tinyBasic.s 			page 63


 2327      00000000 
 2328 02c4 BC020000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2328      2B000000 
 2328      0C000000 
 2328      5045454B 
 2328      38000000 
 2329 02d8 D0020000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2329      2D000000 
 2329      0C000000 
 2329      5045454B 
 2329      33320000 
 2330 02ec E4020000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2330      2C000000 
 2330      0C000000 
 2330      5045454B 
 2330      31360000 
 2331 0300 F8020000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2331      29000000 
 2331      0B000000 
 2331      50415553 
 2331      45000000 
 2332 0314 0C030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2332      28000000 
 2332      0C000000 
 2332      50414400 
 2333 0324 20030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2333      27000000 
 2333      0B000000 
 2333      4F555400 
 2334 0334 30030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2334      26000000 
 2334      0C000000 
 2334      4F520000 
 2335 0344 40030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2335      25000000 
 2335      0C000000 
 2335      4E4F5400 
 2336 0354 50030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2336      24000000 
 2336      0B000000 
 2336      4E455854 
 2336      00000000 
 2337 0368 60030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2337      23000000 
 2337      0B000000 
 2337      4E455700 
 2338 0378 74030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2338      22000000 
 2338      0C000000 
 2338      4C534849 
 2338      46540000 
 2339 038c 84030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2339      21000000 
 2339      0B000000 
 2339      4C4F4144 
 2339      00000000 
 2340 03a0 98030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
ARM GAS  tinyBasic.s 			page 64


 2340      20000000 
 2340      0B000000 
 2340      4C495354 
 2340      00000000 
 2341 03b4 AC030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2341      1F000000 
 2341      0B000000 
 2341      4C455400 
 2342 03c4 C0030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2342      1E000000 
 2342      0C000000 
 2342      4B455900 
 2343 03d4 D0030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2343      1D000000 
 2343      0C000000 
 2343      494E5645 
 2343      52540000 
 2344 03e8 E0030000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2344      1C000000 
 2344      0B000000 
 2344      494E5055 
 2344      54000000 
 2345 03fc F4030000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2345      1B000000 
 2345      0C000000 
 2345      494E5000 
 2346 040c 08040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2346      1A000000 
 2346      0B000000 
 2346      49460000 
 2347 041c 18040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2347      19000000 
 2347      0B000000 
 2347      48455800 
 2348 042c 28040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2348      18000000 
 2348      0B000000 
 2348      474F544F 
 2348      00000000 
 2349 0440 38040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2349      17000000 
 2349      0B000000 
 2349      474F5355 
 2349      42000000 
 2350 0454 4C040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2350      16000000 
 2350      0B000000 
 2350      464F5247 
 2350      45540000 
 2351 0468 60040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2351      15000000 
 2351      0B000000 
 2351      464F5200 
 2352 0478 74040000 	  _dict_entry TK_CMD,FLASH,FLASH_IDX // flash 
 2352      14000000 
 2352      0B000000 
 2352      464C4153 
ARM GAS  tinyBasic.s 			page 65


 2352      48000000 
 2353 048c 84040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2353      13000000 
 2353      0B000000 
 2353      45524153 
 2353      45000000 
 2354 04a0 98040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2354      12000000 
 2354      0B000000 
 2354      454E4400 
 2355 04b0 AC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2355      11000000 
 2355      0B000000 
 2355      44554D50 
 2355      00000000 
 2356 04c4 BC040000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2356      10000000 
 2356      0B000000 
 2356      44524F50 
 2356      00000000 
 2357 04d8 D0040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2357      0F000000 
 2357      0B000000 
 2357      444F0000 
 2358 04e8 E4040000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2358      0E000000 
 2358      0B000000 
 2358      44495200 
 2359 04f8 F4040000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2359      0D000000 
 2359      0B000000 
 2359      44454300 
 2360 0508 04050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2360      0C000000 
 2360      0B000000 
 2360      44415441 
 2360      4C4E0000 
 2361 051c 14050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2361      0B000000 
 2361      0B000000 
 2361      44415441 
 2361      00000000 
 2362 0530 28050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2362      0A000000 
 2362      0B000000 
 2362      434F4E53 
 2362      54000000 
 2363 0544 3C050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2363      09000000 
 2363      0D000000 
 2363      43484152 
 2363      00000000 
 2364 0558 50050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2364      08000000 
 2364      0B000000 
 2364      42544F47 
 2364      4C000000 
ARM GAS  tinyBasic.s 			page 66


 2365 056c 64050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2365      07000000 
 2365      0C000000 
 2365      42544553 
 2365      54000000 
 2366 0580 78050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2366      06000000 
 2366      0B000000 
 2366      42534554 
 2366      00000000 
 2367 0594 8C050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2367      05000000 
 2367      0B000000 
 2367      42524553 
 2367      00000000 
 2368 05a8 A0050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2368      04000000 
 2368      0C000000 
 2368      42495400 
 2369 05b8 B4050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2369      03000000 
 2369      0B000000 
 2369      41575500 
 2370 05c8 C4050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2370      02000000 
 2370      0C000000 
 2370      41534300 
 2371 05d8 D4050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2371      01000000 
 2371      0C000000 
 2371      414E4400 
 2372              	first_link: 
 2373 05e8 E4050000 	  .word LINK 
 2374 05ec 00000000 	  .word ABS_IDX 
 2375 05f0 0C000000 	  .word TK_IFUNC
 2376              	kword_dict: // first name field 
 2377              	  .equ LINK,. 
 2378 05f4 41425300 	  .asciz "ABS" 
 2379              	  .p2align 2 
 2380              	
 2381              	    .section .rodata.fn_tabld 
 2382              	
 2383              	//comands and fonctions address table
 2384              	  .type fn_table, %object
 2385              	fn_table:
 2386 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2386      00000000 
 2386      00000000 
 2386      00000000 
 2386      00000000 
 2387 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,const   
 2387      00000000 
 2387      00000000 
 2387      00000000 
 2387      00000000 
 2388 002c 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2388      00000000 
ARM GAS  tinyBasic.s 			page 67


 2388      00000000 
 2388      00000000 
 2388      00000000 
 2389 0048 00000000 		.word cmd_end,erase,flash,for,forget,gosub,goto 
 2389      00000000 
 2389      00000000 
 2389      00000000 
 2389      00000000 
 2390 0064 00000000 		.word hex_base,if,inp,input_var,invert,key
 2390      00000000 
 2390      00000000 
 2390      00000000 
 2390      00000000 
 2391 007c 00000000 		.word let,list,load,lshift,new,next
 2391      00000000 
 2391      00000000 
 2391      00000000 
 2391      00000000 
 2392 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2392      00000000 
 2392      00000000 
 2392      00000000 
 2392      00000000 
 2393 00b8 00000000 		.word pick,poke8,poke16,poke32,fn_pop,print,cmd_push 
 2393      00000000 
 2393      00000000 
 2393      00000000 
 2393      00000000 
 2394 00d4 00000000 		.word qkey,read,skip_line
 2394      00000000 
 2394      00000000 
 2395 00e0 00000000 		.word restore,return, random,rshift,run,save,size 
 2395      00000000 
 2395      00000000 
 2395      00000000 
 2395      00000000 
 2396 00fc 00000000 		.word sleep,spc,step,stop,store,tab
 2396      00000000 
 2396      00000000 
 2396      00000000 
 2396      00000000 
 2397 0114 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2397      00000000 
 2397      00000000 
 2397      00000000 
 2397      00000000 
 2398 0138 00000000 		.word wait,words,bit_xor
 2398      00000000 
 2398      00000000 
 2399 0144 00000000 		.word 0 
 2400              	
 2401              	
 2402              	/**********************************
 2403              	    BASIC commands and functions 
 2404              	**********************************/
 2405              	
 2406              	    .section .text.basic , "ax", %progbits 
ARM GAS  tinyBasic.s 			page 68


 2407              	
 2408              	
 2409              	/*******************************
 2410              	  BASIC:  ABS expr 
 2411              	  input:
 2412              	    none 
 2413              	  output:
 2414              	    r0    token type 
 2415              	    r1    abs(expr)
 2416              	  use:
 2417              	    none 
 2418              	******************************/
 2419              	    _FUNC abs 
 2420 0000 00B5FFF7 	    _CALL arg_list
 2420      FEFF5DF8 
 2420      04EB
 2421 000a 0128     	    cmp r0,#1 
 2422 000c 01D0     	    beq 1f 
 2423 000e FFF7FEBF 	    b syntax_error 
 2424 0012 5CF8041B 	1:  _POP r1 
 2425 0016 11F0004F 	    tst r1,#(1<<31)
 2426 001a 01D0     	    beq 9f
 2427 001c C1F10001 	    rsb r1,#0 
 2428 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2429 0024 7047     	   _RET 
 2430              	
 2431 0026 00BF     	    _FUNC power_adc
 2432 0028 7047     	    _RET
 2433              	
 2434 002a 00BF     	    _FUNC analog_read
 2435 002c 7047     	    _RET
 2436              	
 2437              	/************************************
 2438              	  BASIC: AND(expr1,expr2)
 2439              	  logical ANND bit to between expr1,expr2
 2440              	************************************/
 2441 002e 00BF     	    _FUNC bit_and
 2442 0030 00B5FFF7 	    _CALL func_args 
 2442      FEFF5DF8 
 2442      04EB
 2443 003a 0228     	    cmp r0,#2 
 2444 003c 7FF4FEAF 	    bne syntax_error 
 2445 0040 5CF8040B 	    _POP r0 
 2446 0044 5CF8041B 	    _POP r1 
 2447 0048 01EA0001 	    and r1,r0 
 2448 004c 4FF00F00 	    mov r0,#TK_INTGR
 2449 0050 7047     	    _RET
 2450              	
 2451              	/*******************************************
 2452              	  BASIC: ASC(string|char)
 2453              	  return ASCII code of char of first char 
 2454              	  of string 
 2455              	*******************************************/
 2456 0052 00BF     	    _FUNC ascii
 2457 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2458 0058 00B5FFF7 	    _CALL expect 
 2458      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 69


 2458      04EB
 2459 0062 00B5FFF7 	    _CALL next_token 
 2459      FEFF5DF8 
 2459      04EB
 2460 006c 0228     	    cmp r0,#TK_QSTR
 2461 006e 03D0     	    beq 2f 
 2462 0070 0328     	    cmp r0,#TK_CHAR 
 2463 0072 7FF4FEAF 	    bne syntax_error 
 2464 0076 00E0     	    b 9f 
 2465 0078 0978     	2:  ldrb r1,[r1]
 2466 007a 4CF8041D 	9:  _PUSH r1 
 2467 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2468 0082 00B5FFF7 	    _CALL expect 
 2468      FEFF5DF8 
 2468      04EB
 2469 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2470 0090 5CF8041B 	    _POP r1 
 2471 0094 7047     	    _RET
 2472              	
 2473 0096 00BF     	    _FUNC autorun
 2474 0098 7047     	    _RET
 2475              	
 2476              	/*******************************************
 2477              	  BASIC: AWU time_sleep  
 2478              	  enable LSI and IWDG and place MCU in 
 2479              	  deep sleep. IDWG wakeup MCU 
 2480              	******************************************/
 2481 009a 00BF     	    _FUNC awu
 2482 009c 00B5FFF7 	    _CALL arg_list
 2482      FEFF5DF8 
 2482      04EB
 2483 00a6 0128     	    cmp r0,#1 
 2484 00a8 7FF4FEAF 	    bne syntax_error 
 2485 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2485      C4F20201 
 2486 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2487              	// enable LSI 
 2488 00b6 80F00100 	    eor r0,#1
 2489 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2490              	// wait for LSIRDY 
 2491 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2492 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2493 00c2 FBD0     	    beq 1b 
 2494              	// configure IWDG
 2495              	// compute values for IWDG_PR and IWDG_RLR 
 2496 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2497 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2498 00cc 03FB02F2 	    mul r2,r3 
 2499 00d0 83EA0303 	    eor r3,r3
 2500 00d4 B2F5005F 	2:  cmp r2,#8192 
 2501 00d8 04D4     	    bmi 3f 
 2502 00da 4FEA5202 	    lsr r2,#1 
 2503 00de 03F10103 	    add r3,#1
 2504 00e2 F7E7     	    b 2b
 2505              	// initialize IWDG      
 2506 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2506      C4F20001 
ARM GAS  tinyBasic.s 			page 70


 2507 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2508 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2509 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2510 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2511 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2512 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2513 00fc 00F092BF 	    b sleep // place MCU in deep sleep
 2514 0100 7047     	    _RET
 2515              	
 2516              	/********************************************
 2517              	  BASIC: BIT(expr)
 2518              	  expr must be between 0..31 and is used 
 2519              	  to create 1 bit mask at that position
 2520              	*******************************************/
 2521 0102 00BF     	    _FUNC bitmask
 2522 0104 00B5FFF7 	    _CALL func_args
 2522      FEFF5DF8 
 2522      04EB
 2523 010e 0128     	    cmp r0,#1 
 2524 0110 7FF4FEAF 	    bne syntax_error 
 2525 0114 5CF8040B 	    _POP r0
 2526 0118 4FF00101 	    mov r1,#1
 2527 011c 01FA00F1 	    lsl r1,r0 
 2528 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2529 0124 7047     	    _RET 
 2530              	
 2531              	  
 2532              	  /*********************************
 2533              	   BASIC: BRES adr, mask   
 2534              	   reset bits [adr]= [adr] & ~mask  
 2535              	   input:
 2536              	     none 
 2537              	    output;
 2538              	      none 
 2539              	    use:
 2540              	      T1   temp
 2541              	      T2   temp 
 2542              	*******************************/     
 2543 0126 00BF     	  _FUNC bit_reset
 2544 0128 00B5FFF7 	    _CALL arg_list 
 2544      FEFF5DF8 
 2544      04EB
 2545 0132 0228     	    cmp r0,#2 
 2546 0134 01D0     	    beq 1f 
 2547 0136 FFF7FEBF 	    b syntax_error 
 2548 013a 5CF8041B 	1:  _POP r1 //mask 
 2549 013e 5CF8040B 	    _POP r0 //address 
 2550 0142 D0F80090 	    ldr T2,[r0] 
 2551 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2552 014a 01EA0901 	    and r1,T2
 2553 014e 0160     	    str r1,[r0]
 2554 0150 7047     	    _RET  
 2555              	
 2556              	
 2557              	/*********************************
 2558              	   BASIC: BSET adr, mask   
 2559              	   reset bits [adr]= [adr] & ~mask  
ARM GAS  tinyBasic.s 			page 71


 2560              	   input:
 2561              	      none 
 2562              	    output;
 2563              	      none 
 2564              	    use:
 2565              	      T1   temp
 2566              	      T2   temp  
 2567              	*******************************/     
 2568 0152 00BF     	    _FUNC bit_set
 2569 0154 00B5FFF7 	    _CALL arg_list 
 2569      FEFF5DF8 
 2569      04EB
 2570 015e 0228     	    cmp r0,#2 
 2571 0160 01D0     	    beq 1f 
 2572 0162 FFF7FEBF 	    b syntax_error 
 2573 0166 5CF8041B 	1:  _POP r1 //mask 
 2574 016a 5CF8040B 	    _POP r0 //address 
 2575 016e D0F80090 	    ldr T2,[r0] 
 2576 0172 41EA0901 	    orr r1,T2
 2577 0176 0160     	    str r1,[r0]
 2578 0178 7047     	    _RET 
 2579              	
 2580              	  /*********************************
 2581              	   BASIC: BTOGL adr, mask   
 2582              	   reset bits [adr]= [adr] & ~mask  
 2583              	   input:
 2584              	     r0    adr 
 2585              	     r1    mask 
 2586              	    output;
 2587              	      none 
 2588              	    use:
 2589              	      T1   temp
 2590              	      T2   temp  
 2591              	*******************************/     
 2592 017a 00BF     	  _FUNC bit_toggle
 2593 017c 00B5FFF7 	    _CALL arg_list 
 2593      FEFF5DF8 
 2593      04EB
 2594 0186 0228     	    cmp r0,#2 
 2595 0188 01D0     	    beq 1f 
 2596 018a FFF7FEBF 	    b syntax_error 
 2597 018e 5CF8041B 	1:  _POP r1 //mask 
 2598 0192 5CF8040B 	    _POP r0 //address 
 2599 0196 D0F80090 	    ldr T2,[r0] 
 2600 019a 81EA0901 	    eor r1,T2
 2601 019e 0160     	    str r1,[r0]
 2602 01a0 7047     	    _RET  
 2603              	
 2604              	/********************************
 2605              	  BASIC: BTEST(addr,bit)
 2606              	  return bit state at address
 2607              	********************************/
 2608 01a2 00BF     	    _FUNC bit_test
 2609 01a4 00B5FFF7 	    _CALL func_args
 2609      FEFF5DF8 
 2609      04EB
 2610 01ae 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 72


 2611 01b0 7FF4FEAF 	    bne syntax_error 
 2612 01b4 5CF8041B 	    _POP r1
 2613 01b8 4FF00100 	    mov r0,#1
 2614 01bc 01F01F01 	    and r1,#31  
 2615 01c0 21B1     	1:  cbz r1, 2f
 2616 01c2 4FEA4000 	    lsl r0,#1
 2617 01c6 A1F10101 	    sub r1,#1
 2618 01ca F9E7     	    b 1b 
 2619 01cc 5CF8041B 	2:  _POP r1
 2620 01d0 0968     	    ldr r1,[r1]
 2621 01d2 01EA0001 	    and r1,r0 
 2622 01d6 09B1     	    cbz r1,9f 
 2623 01d8 4FF00101 	    mov r1,#1
 2624 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2625 01e0 7047     	    _RET 
 2626              	
 2627              	/*********************************
 2628              	  BASIC: CHAR(expr)
 2629              	  convert expr in character 
 2630              	********************************/
 2631 01e2 00BF     	    _FUNC char
 2632 01e4 00B5FFF7 	    _CALL func_args
 2632      FEFF5DF8 
 2632      04EB
 2633 01ee 0128     	    cmp r0,#1
 2634 01f0 7FF4FEAF 	    bne syntax_error 
 2635 01f4 5CF8041B 	    _POP r1 
 2636 01f8 01F07F01 	    and r1,#127 
 2637 01fc 4FF00300 	    mov r0,#TK_CHAR
 2638 0200 7047     	    _RET 
 2639              	
 2640              	/**********************************
 2641              	  BASIC: CONST !label=expr [,!label=expr]
 2642              	  define constants constants are 
 2643              	  store at end of BASIC code.
 2644              	  use:
 2645              	    T1   *location 
 2646              	    T2   *bound 
 2647              	*********************************/
 2648 0202 00BF     	    _FUNC const
 2649 0204 206C10F0 	    _RTO 
 2649      010F03D1 
 2649      4FF00700 
 2649      FFF7FEBF 
 2650 0214 D4F8D080 	    ldr T1,[UPP,#HERE]
 2651 0218 DFF86897 	    ldr T2,pad_adr  
 2652 021c C845     	1:  cmp T1,T2 
 2653 021e 03D4     	    bmi 2f 
 2654 0220 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2655 0224 FFF7FEBF 	    b tb_error 
 2656 0228 00B5FFF7 	2:  _CALL next_token 
 2656      FEFF5DF8 
 2656      04EB
 2657 0232 4028     	    cmp r0,#TK_LBL 
 2658 0234 7FF4FEAF 	    bne syntax_error 
 2659 0238 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2660 023c 4CF8041D 	    _PUSH r1 
ARM GAS  tinyBasic.s 			page 73


 2661 0240 4FF03200 	    mov r0,#TK_EQUAL
 2662 0244 00B5FFF7 	    _CALL expect
 2662      FEFF5DF8 
 2662      04EB
 2663 024e 00B5FFF7 	    _CALL expression  
 2663      FEFF5DF8 
 2663      04EB
 2664 0258 0F28     	    cmp r0,#TK_INTGR
 2665 025a 7FF4FEAF 	    bne syntax_error
 2666 025e 5CF8040B 	    _POP r0 
 2667 0262 48F8040B 	    str r0,[T1],#4
 2668 0266 48F8041B 	    str r1,[T1],#4 
 2669 026a C4F8D080 	    str T1,[UPP,#HERE]
 2670 026e 00B5FFF7 	    _CALL next_token
 2670      FEFF5DF8 
 2670      04EB
 2671 0278 0828     	    cmp r0,#TK_COMMA 
 2672 027a CFD0     	    beq 1b 
 2673 027c D4F800A0 	    _UNGET_TOKEN
 2673      D4F808B0 
 2674              	9:  
 2675 0284 7047     	    _RET 
 2676              	
 2677              	
 2678              	/**************************
 2679              	  BASIC: DATALN expr 
 2680              	  set data pointer to line#
 2681              	  specified by expr. 
 2682              	  if line# not valid program 
 2683              	  end with error.
 2684              	  use:
 2685              	
 2686              	**************************/
 2687 0286 00BF     	    _FUNC data_line
 2688 0288 206C10F0 	    _RTO // run time only 
 2688      010F03D1 
 2688      4FF00700 
 2688      FFF7FEBF 
 2689 0298 00B5FFF7 	    _CALL expression 
 2689      FEFF5DF8 
 2689      04EB
 2690 02a2 0F28     	    cmp r0,#TK_INTGR
 2691 02a4 7FF4FEAF 	    bne syntax_error
 2692 02a8 0846     	    mov r0,r1 
 2693 02aa 00B5FFF7 	    _CALL search_lineno
 2693      FEFF5DF8 
 2693      04EB
 2694 02b4 0029     	    cmp r1,#0
 2695 02b6 03D0     	    beq 1f 
 2696 02b8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2697 02bc FFF7FEBF 	    b syntax_error 
 2698 02c0 C178     	1:  ldrb r1,[r0,#3]
 2699 02c2 0B29     	    cmp r1,#TK_CMD 
 2700 02c4 F8D1     	    bne 0b
 2701 02c6 0179     	    ldrb r1,[r0,#4]
 2702 02c8 0B29     	    cmp r1,#DATA_IDX 
 2703 02ca F5D1     	    bne 0b  
ARM GAS  tinyBasic.s 			page 74


 2704 02cc E060     	    str r0,[UPP,#DATAPTR]
 2705 02ce 8178     	    ldrb r1,[r0,#2]
 2706 02d0 6161     	    str r1,[UPP,#DATALEN]
 2707 02d2 4FF00501 	    mov r1,#5 // position of first data item  
 2708 02d6 2161     	    str r1,[UPP,#DATA]
 2709 02d8 7047     	    _RET 
 2710              	
 2711              	/*****************************
 2712              	  BASIC: READ 
 2713              	  read next data item 
 2714              	  the value can be assigned to
 2715              	  variable or used in expression
 2716              	*****************************/
 2717 02da 00BF     	    _FUNC read
 2718 02dc 206C10F0 	    _RTO
 2718      010F03D1 
 2718      4FF00700 
 2718      FFF7FEBF 
 2719 02ec 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2720 02ee E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2721 02f0 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2722 02f2 8242     	    cmp r2,r0
 2723 02f4 0ED0     	    beq seek_next
 2724 02f6 885C     	1:  ldrb r0,[r1,r2]
 2725 02f8 02F10102 	    add r2,#1
 2726 02fc 0028     	    cmp r0,#TK_NONE
 2727 02fe 09D0     	    beq seek_next
 2728 0300 0828     	    cmp r0,#TK_COMMA
 2729 0302 F8D0     	    beq 1b  
 2730 0304 0F28     	    cmp r0,#TK_INTGR 
 2731 0306 7FF4FEAF 	    bne syntax_error  
 2732 030a 8958     	    ldr r1,[r1,r2]
 2733 030c 02F10402 	    add r2,#4
 2734 0310 2261     	    str r2,[UPP,#DATA]
 2735 0312 12E0     	    b 9f  
 2736              	seek_next: // is next line data ?
 2737 0314 8878     	    ldrb r0,[R1,#2]
 2738 0316 0144     	    add r1,r0 
 2739 0318 C878     	    ldrb r0,[R1,#3]
 2740 031a 0B28     	    cmp r0,#TK_CMD
 2741 031c 09D1     	    bne 2f 
 2742 031e 0879     	    ldrb r0,[r1,#4]
 2743 0320 0B28     	    cmp r0,#DATA_IDX 
 2744 0322 06D1     	    bne 2f 
 2745 0324 E160     	    str r1,[UPP,#DATAPTR]
 2746 0326 8878     	    ldrb r0,[r1,#2]
 2747 0328 6061     	    str  r0,[UPP,#DATALEN]
 2748 032a 4FF00502 	    mov r2,#5 
 2749 032e 2261     	    str r2,[UPP,#DATA]
 2750 0330 E1E7     	    b 1b 
 2751 0332 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2752 0336 FFF7FEBF 	    b tb_error 
 2753 033a 7047     	9:  _RET 
 2754              	
 2755              	/********************************
 2756              	  BASIC: RESTORE 
 2757              	  seek first data line 
ARM GAS  tinyBasic.s 			page 75


 2758              	********************************/
 2759              	    _FUNC restore
 2760 033c 206C10F0 	    _RTO 
 2760      010F03D1 
 2760      4FF00700 
 2760      FFF7FEBF 
 2761 034c 216B     	    ldr r1,[UPP,#TXTBGN]
 2762 034e 606B     	1:  ldr r0,[UPP,#TXTEND]
 2763 0350 0FD0     	    beq no_data_line 
 2764 0352 0879     	    ldrb r0,[r1,#4]
 2765 0354 0B28     	    cmp r0,#DATA_IDX
 2766 0356 09D1     	    bne try_next_line
 2767 0358 C878     	    ldrb r0,[r1,#3]
 2768 035a 0B28     	    cmp r0,#TK_CMD
 2769 035c 06D1     	    bne try_next_line
 2770              	// this a the first data line 
 2771 035e E160     	    str r1,[UPP,#DATAPTR]
 2772 0360 8878     	    ldrb r0,[r1,#2]
 2773 0362 6061     	    str r0,[UPP,#DATALEN]
 2774 0364 4FF00500 	    mov r0,#5 
 2775 0368 2061     	    str r0,[UPP,#DATA]
 2776 036a 07E0     	    b 9f
 2777              	try_next_line:
 2778 036c 8878     	    ldrb r0,[r1,#2]
 2779 036e 0144     	    add r1,r0 
 2780 0370 EDE7     	    b 1b 
 2781              	no_data_line:
 2782 0372 80EA0000 	    eor r0,r0 
 2783 0376 E060     	    str r0,[UPP,#DATAPTR]
 2784 0378 2061     	    str r0,[UPP,#DATA]
 2785 037a 6061     	    str r0,[UPP,#DATALEN]
 2786 037c 7047     	9:  _RET 
 2787              	
 2788              	/***********************************
 2789              	  BASIC: DEC 
 2790              	  switch base to decimal 
 2791              	***********************************/
 2792 037e 00BF     	    _FUNC dec_base
 2793 0380 4FF00A00 	    mov r0,#10
 2794 0384 A061     	    str r0,[UPP,#BASE]
 2795 0386 7047     	    _RET 
 2796              	
 2797              	/***************************************
 2798              	  BASIC: DO 
 2799              	  initialize a DO..UNTIL loop 
 2800              	***************************************/
 2801              	    _FUNC do_loop
 2802 0388 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2803 038c 7047     	    _RET 
 2804              	
 2805              	
 2806              	/****************************************
 2807              	  BASIC: DUMP adr, count 
 2808              	    command line only  
 2809              	    print memory content in hexadecimal 
 2810              	    16 bytes per row 
 2811              	    ouput:
ARM GAS  tinyBasic.s 			page 76


 2812              	      none 
 2813              	    use:
 2814              	      r2   byte counter  
 2815              	****************************************/
 2816 038e 00BF     	    _FUNC dump 
 2817 0390 04B4     	    push {r2}
 2818 0392 226C     	    ldr r2,[UPP,#FLAGS]
 2819 0394 12F0010F 	    tst r2,#FRUN 
 2820 0398 03D0     	    beq 0f
 2821 039a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2822 039e FFF7FEBF 	    b tb_error  
 2823 03a2 00B5FFF7 	0:  _CALL arg_list 
 2823      FEFF5DF8 
 2823      04EB
 2824 03ac 0228     	    cmp r0,#2
 2825 03ae 7FF4FEAF 	    bne syntax_error 
 2826 03b2 5CF8042B 	    _POP r2   // count 
 2827 03b6 5CF8040B 	    _POP  r0  // adr 
 2828              	dump01:
 2829 03ba 00B500F0 	    _CALL print_dump_header 
 2829      0EF85DF8 
 2829      04EB
 2830 03c4 4FF01001 	1:  mov r1,#16
 2831 03c8 00B5FFF7 	    _CALL prt_row 
 2831      FEFF5DF8 
 2831      04EB
 2832 03d2 103A     	    subs r2,#16 
 2833 03d4 F6D5     	    bpl 1b 
 2834 03d6 04BC     	2:  pop {r2}
 2835 03d8 7047     	    _RET 
 2836              	
 2837              	/********************************
 2838              	   print_dump_header
 2839              	********************************/
 2840 03da 00BF     	    _FUNC print_dump_header
 2841 03dc 2DE90103 	    push {r0,T1,T2}
 2842 03e0 4FF00C00 	    mov r0,#12 
 2843 03e4 00B5FFF7 	    _CALL cursor_x 
 2843      FEFF5DF8 
 2843      04EB
 2844 03ee 4FF00000 	    mov r0,#0
 2845 03f2 4FF01009 	    mov T2,#16
 2846 03f6 8046     	1:  mov T1,r0 
 2847 03f8 00B5FFF7 	    _CALL print_hex 
 2847      FEFF5DF8 
 2847      04EB
 2848 0402 08F10100 	    add r0,T1,#1  
 2849 0406 4845     	    cmp r0,T2 
 2850 0408 F5D4     	    bmi 1b 
 2851 040a 00B5FFF7 	    _CALL cr
 2851      FEFF5DF8 
 2851      04EB
 2852 0414 4FF03D00 	    mov r0,#'='
 2853 0418 4FF04F08 	    mov T1,#79
 2854 041c 00B5FFF7 	2:  _CALL uart_putc
 2854      FEFF5DF8 
 2854      04EB
ARM GAS  tinyBasic.s 			page 77


 2855 0426 B8F10108 	    subs T1,#1 
 2856 042a F7D1     	    bne 2b     
 2857 042c 00B5FFF7 	    _CALL cr
 2857      FEFF5DF8 
 2857      04EB
 2858 0436 BDE80103 	    pop {r0,T1,T2}
 2859 043a 7047     	    _RET 
 2860              	
 2861              	
 2862              	/*******************************
 2863              	  BASIC: END 
 2864              	  exit program 
 2865              	******************************/ 
 2866              	    _FUNC cmd_end
 2867 043c FFF7FEBF 	    b warm_start 
 2868 0440 7047     	    _RET 
 2869              	
 2870              	/*******************************************
 2871              	  BASIC: FLASH adr, value 
 2872              	  write value to user space in flash memory 
 2873              	*********************************************/
 2874 0442 00BF     	    _FUNC flash 
 2875 0444 00B5FFF7 	    _CALL arg_list 
 2875      FEFF5DF8 
 2875      04EB
 2876 044e 0228     	    cmp r0,#2 
 2877 0450 7FF4FEAF 	    bne syntax_error 
 2878 0454 BCE80300 	    ldmia DP!,{r0,r1}
 2879 0458 DFF83020 	    ldr r2,user_space
 2880 045c 9142     	    cmp r1,r2 
 2881 045e 03D5     	    bpl 1f 
 2882 0460 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2883 0464 FFF7FEBF 	    b tb_error 
 2884 0468 02F58062 	1:  add r2,#1024 
 2885 046c 9142     	    cmp r1,r2 
 2886 046e F7D5     	    bpl 0b 
 2887 0470 00B5FFF7 	    _CALL flash_store 
 2887      FEFF5DF8 
 2887      04EB
 2888 047a 7047     	    _RET 
 2889              	
 2890              	/**************************************************
 2891              	  BASIC: ERASE 
 2892              	  erase user space page 
 2893              	*************************************************/
 2894              	    _FUNC erase 
 2895 047c DFF80C00 	    ldr r0,user_space 
 2896 0480 00B5FFF7 	    _CALL erase_page 
 2896      FEFF5DF8 
 2896      04EB
 2897 048a 7047     	    _RET 
 2898 048c 00000000 	user_space: .word user 
 2899              	
 2900              	
 2901              	/**************************************************
 2902              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2903              	  introdure FOR...NEXT loop 
ARM GAS  tinyBasic.s 			page 78


 2904              	**************************************************/
 2905              	    _FUNC for
 2906 0490 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2907 0494 4FF00107 	    mov INCR,#1
 2908 0498 00B5FFF7 	    _CALL next_token
 2908      FEFF5DF8 
 2908      04EB
 2909 04a2 0428     	    cmp r0,#TK_VAR
 2910 04a4 7FF4FEAF 	    bne syntax_error
 2911 04a8 02B4     	    push {r1} 
 2912 04aa 00B500F0 	    _CALL let_var 
 2912      25F95DF8 
 2912      04EB
 2913 04b4 20BC     	    pop {VADR}
 2914 04b6 4FEA8505 	    lsl VADR,#2
 2915 04ba 2544     	    add VADR,UPP 
 2916 04bc 05F16005 	    add VADR,#VARS 
 2917 04c0 7047     	    _RET 
 2918              	
 2919              	/***************************************
 2920              	  BASIC: TO expr 
 2921              	  set limit of FOR...NEXT loop 
 2922              	**************************************/
 2923 04c2 00BF     	    _FUNC to
 2924 04c4 00B5FFF7 	    _CALL expression 
 2924      FEFF5DF8 
 2924      04EB
 2925 04ce 0F28     	    cmp r0,#TK_INTGR
 2926 04d0 7FF4FEAF 	    bne syntax_error 
 2927 04d4 0E46     	    mov LIMIT,r1
 2928              	    // save loop back parameters 
 2929 04d6 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2930 04da 7047     	    _RET 
 2931              	
 2932              	/********************************************
 2933              	  BASIC: STEP expr 
 2934              	  set increment for FOR...NEXT loop 
 2935              	********************************************/
 2936              	    _FUNC step
 2937 04dc 00B5FFF7 	    _CALL expression 
 2937      FEFF5DF8 
 2937      04EB
 2938 04e6 0F28     	    cmp r0,#TK_INTGR
 2939 04e8 7FF4FEAF 	    bne syntax_error 
 2940 04ec 0F46     	    mov INCR,r1
 2941              	    // replace parameters left by TO
 2942 04ee 8CE8000C 	    stmia DP, {IN,BPTR}
 2943 04f2 7047     	    _RET 
 2944              	
 2945              	/********************************************
 2946              	  BASIC: NEXT var 
 2947              	  incrment FOR...NEXT loop variable
 2948              	  exit if variable cross LIMIT 
 2949              	********************************************/
 2950              	    _FUNC next
 2951 04f4 00B5FFF7 	    _CALL next_token 
 2951      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 79


 2951      04EB
 2952 04fe 0428     	    cmp r0,#TK_VAR 
 2953 0500 7FF4FEAF 	    bne syntax_error 
 2954 0504 4FEA8101 	    lsl r1,#2 
 2955 0508 2144     	    add r1,UPP 
 2956 050a 01F16001 	    add r1,#VARS 
 2957 050e A942     	    cmp r1,VADR
 2958 0510 7FF4FEAF 	    bne syntax_error 
 2959 0514 2868     	    ldr r0,[VADR]
 2960 0516 3844     	    add r0,INCR 
 2961 0518 2860     	    str r0,[VADR]
 2962 051a 002F     	    cmp INCR,#0
 2963 051c 02D4     	    bmi 2f
 2964 051e B042     	    cmp r0,LIMIT 
 2965 0520 02DC     	    bgt 8f  
 2966 0522 07E0     	    b 9f  
 2967 0524 B042     	2:  cmp r0,LIMIT 
 2968 0526 05DA     	    bge 9f  
 2969              	8: // exit for...next
 2970              	  //  drop branch parameters
 2971 0528 4FF00800 	    _DROP 2
 2971      8444
 2972              	  // restore outer loop parameters
 2973 052e BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2974 0532 7047     	    _RET 
 2975 0534 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2976 0538 9BF80200 	    ldrb r0,[BPTR,#2]
 2977 053c 6060     	    str r0,[UPP,#COUNT]
 2978 053e 00B5FFF7 	    _CALL show_trace 
 2978      FEFF5DF8 
 2978      04EB
 2979 0548 7047     	    _RET 
 2980              	
 2981              	
 2982              	/*********************************
 2983              	  BASIC: GOSUB expr 
 2984              	  call a subroutine at line# 
 2985              	*********************************/
 2986 054a 00BF     	    _FUNC gosub
 2987 054c 00B5FFF7 	    _CALL search_target 
 2987      FEFF5DF8 
 2987      04EB
 2988 0556 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2989              	target:
 2990 055a 8346     	    mov BPTR,r0 
 2991 055c 4FF0030A 	    mov IN,#3 
 2992 0560 9BF80200 	    ldrb r0,[BPTR,#2]
 2993 0564 6060     	    str r0,[UPP,#COUNT]
 2994 0566 00B5FFF7 	    _CALL show_trace 
 2994      FEFF5DF8 
 2994      04EB
 2995 0570 7047     	    _RET 
 2996              	
 2997              	/**********************************
 2998              	  BASIC: RETURN 
 2999              	  leave a subroutine 
 3000              	*********************************/
ARM GAS  tinyBasic.s 			page 80


 3001 0572 00BF     	    _FUNC return 
 3002 0574 BCE8000C 	    ldmia DP!,{IN,BPTR}
 3003 0578 9BF80200 	    ldrb r0,[BPTR,#2]
 3004 057c 6060     	    str r0,[UPP,#COUNT]
 3005 057e 00B5FFF7 	    _CALL show_trace 
 3005      FEFF5DF8 
 3005      04EB
 3006 0588 7047     	    _RET 
 3007              	
 3008              	/**********************************
 3009              	  BASIC: GOTO expr 
 3010              	  go to line # | label 
 3011              	**********************************/
 3012 058a 00BF     	    _FUNC goto
 3013 058c 00B5FFF7 	    _CALL search_target 
 3013      FEFF5DF8 
 3013      04EB
 3014 0596 E0E7     	    b target  
 3015              	
 3016              	
 3017              	/***************************************
 3018              	  BASIC: HEX 
 3019              	  set numeric base to hexadecimal 
 3020              	***************************************/
 3021              	    _FUNC hex_base
 3022 0598 4FF01000 	    mov r0,#16 
 3023 059c A061     	    str r0,[UPP,#BASE]
 3024 059e 7047     	    _RET 
 3025              	
 3026              	/**********************************************
 3027              	  BASIC: IF relation THEN statement
 3028              	  execute statement only if relation is true
 3029              	*********************************************/
 3030              	    _FUNC if
 3031 05a0 00B5FFF7 	    _CALL relation 
 3031      FEFF5DF8 
 3031      04EB
 3032 05aa 09B9     	    cbnz r1,9f 
 3033 05ac D4F804A0 	    ldr IN,[UPP,#COUNT]
 3034 05b0 7047     	9:  _RET 
 3035              	
 3036              	/*******************************************************
 3037              	  BASIC: THEN statement
 3038              	  statements following THEN are executed if relation is !=0
 3039              	  optional, retained for compatibility.
 3040              	******************************************************/
 3041 05b2 00BF     	    _FUNC then 
 3042              	// do nothing 
 3043 05b4 7047     	    _RET
 3044              	
 3045              	/****************************************
 3046              	  BASIC: INPUT [string]var [,[string]var]+
 3047              	  prompt user for variable value
 3048              	***************************************/
 3049 05b6 00BF     	     _FUNC input_var
 3050 05b8 2DE90401 	    push {r2,T1}
 3051 05bc 00B5FFF7 	1:  _CALL next_token 
ARM GAS  tinyBasic.s 			page 81


 3051      FEFF5DF8 
 3051      04EB
 3052 05c6 0228     	    cmp r0,#2
 3053 05c8 67D4     	    bmi 8f 
 3054 05ca 0228     	    cmp r0,#TK_QSTR 
 3055 05cc 12D1     	    bne 2f 
 3056 05ce 0846     	    mov r0,r1
 3057 05d0 DFF8D810 	    ldr r1,str_buffer
 3058 05d4 00B5FFF7 	    _CALL strcpy
 3058      FEFF5DF8 
 3058      04EB
 3059 05de 4FF00400 	    mov r0,#TK_VAR   
 3060 05e2 00B5FFF7 	    _CALL expect 
 3060      FEFF5DF8 
 3060      04EB
 3061 05ec 8846     	    mov T1,r1 
 3062 05ee DFF8BC00 	    ldr r0,str_buffer 
 3063 05f2 08E0     	    b 3f 
 3064 05f4 0428     	2:  cmp r0,#TK_VAR 
 3065 05f6 7FF4FEAF 	    bne syntax_error     
 3066 05fa 8846     	    mov T1,r1 
 3067 05fc 01F14100 	    add r0,r1,#'A' 
 3068 0600 2A49     	    ldr r1,str_buffer
 3069 0602 0880     	    strh r0,[r1]
 3070 0604 0846     	    mov r0,r1 
 3071 0606 00B5FFF7 	3:  _CALL uart_puts  
 3071      FEFF5DF8 
 3071      04EB
 3072 0610 4FF03D00 	    mov r0,#'='
 3073 0614 00B5FFF7 	    _CALL uart_putc
 3073      FEFF5DF8 
 3073      04EB
 3074 061e DFF88800 	    ldr r0,input_buffer
 3075 0622 4FF02201 	    mov r1,#34 
 3076 0626 00B5FFF7 	    _CALL readln
 3076      FEFF5DF8 
 3076      04EB
 3077 0630 31B3     	    cbz r1,6f
 3078 0632 0178     	    ldrb r1,[r0]
 3079 0634 01B4     	    push {r0}
 3080 0636 0846     	    mov r0,r1
 3081 0638 00B5FFF7 	    _CALL is_letter 
 3081      FEFF5DF8 
 3081      04EB
 3082 0642 01BC     	    pop {r0}
 3083 0644 02D1     	    bne 3f 
 3084 0646 01F05F01 	    and r1,#0x5f // uppercase  
 3085 064a 19E0     	    b 6f 
 3086 064c 2429     	3:  cmp r1,#'$'
 3087 064e 04D1     	    bne 3f 
 3088 0650 4FF01001 	    mov r1,#16
 3089 0654 00F10100 	    add r0,#1  
 3090 0658 08E0     	    b 5f 
 3091 065a 2629     	3:  cmp r1,#'&' 
 3092 065c 04D1     	    bne 4f 
 3093 065e 4FF00201 	    mov r1,#2
 3094 0662 00F10100 	    add r0,#1 
ARM GAS  tinyBasic.s 			page 82


 3095 0666 01E0     	    b 5f 
 3096 0668 4FF00A01 	4:  mov r1,#10 
 3097 066c 00B5FFF7 	5:  _CALL atoi 
 3097      FEFF5DF8 
 3097      04EB
 3098 0676 18B9     	    cbnz r0,6f
 3099 0678 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3100 067c FFF7FEBF 	    b tb_error
 3101 0680 4046     	6:  mov r0,T1 
 3102 0682 00B5FFF7 	    _CALL set_var
 3102      FEFF5DF8 
 3102      04EB
 3103 068c 00B5FFF7 	    _CALL next_token
 3103      FEFF5DF8 
 3103      04EB
 3104 0696 0828     	    cmp r0,#TK_COMMA 
 3105 0698 90D0     	    beq 1b 
 3106 069a D4F800A0 	8:  _UNGET_TOKEN          
 3106      D4F808B0 
 3107 06a2 BDE80401 	9:  pop {r2,T1}       
 3108 06a6 7047     	    _RET 
 3109 06a8 00000000 	input_buffer: .word _tib 
 3110 06ac 00000000 	str_buffer: .word _pad 
 3111              	
 3112              	
 3113              	/*****************************************
 3114              	  BASIC: INVERT(expr)
 3115              	  return 1's complement of expr
 3116              	****************************************/
 3117              	    _FUNC invert
 3118 06b0 00B5FFF7 	    _CALL func_args
 3118      FEFF5DF8 
 3118      04EB
 3119 06ba 0128     	    cmp r0,#1 
 3120 06bc 7FF4FEAF 	    bne syntax_error
 3121 06c0 5CF8041B 	    _POP r1  
 3122 06c4 6FEA0101 	    mvn r1,r1
 3123 06c8 4FF00F00 	    mov r0,#TK_INTGR
 3124 06cc 7047     	    _RET 
 3125              	
 3126              	/*************************************
 3127              	  BASIC: KEY 
 3128              	  wait for a character from console
 3129              	*************************************/
 3130 06ce 00BF     	    _FUNC key
 3131 06d0 00B5FFF7 	    _CALL uart_getc
 3131      FEFF5DF8 
 3131      04EB
 3132 06da 0146     	    mov r1,r0
 3133 06dc 4FF00300 	    mov r0,#TK_CHAR 
 3134 06e0 7047     	    _RET  
 3135              	
 3136              	/******************************
 3137              	  BASIC: [LET] var=expr 
 3138              	         [LET] @(expr)=expr
 3139              	  input:
 3140              	    none 
ARM GAS  tinyBasic.s 			page 83


 3141              	  output:
 3142              	    none 
 3143              	  use:
 3144              	
 3145              	****************************/         
 3146 06e2 00BF     	    _FUNC let
 3147 06e4 00B5FFF7 	    _CALL next_token 
 3147      FEFF5DF8 
 3147      04EB
 3148 06ee 0428     	    cmp r0,#TK_VAR
 3149 06f0 03D0     	    beq let_var 
 3150 06f2 0528     	    cmp r0,#TK_ARRAY 
 3151 06f4 07D0     	    beq let_array 
 3152 06f6 FFF7FEBF 	    b syntax_error 
 3153              	let_var:
 3154 06fa 4FEA8101 	    lsl r1,#2
 3155 06fe 04F16000 	    add r0,UPP,#VARS
 3156 0702 0844     	    add r0,r1
 3157 0704 1FE0     	    b 1f 
 3158              	let_array: 
 3159 0706 4FF00600 	    mov r0,#TK_LPAREN
 3160 070a 00B5FFF7 	    _CALL expect 
 3160      FEFF5DF8 
 3160      04EB
 3161 0714 00B5FFF7 	    _CALL expression
 3161      FEFF5DF8 
 3161      04EB
 3162 071e 0F28     	    cmp r0,#TK_INTGR 
 3163 0720 7FF4FEAF 	    bne syntax_error
 3164 0724 4CF8041D 	    _PUSH r1 
 3165 0728 4FF00700 	    mov r0,#TK_RPAREN
 3166 072c 00B5FFF7 	    _CALL expect 
 3166      FEFF5DF8 
 3166      04EB
 3167 0736 5CF8041B 	    _POP r1 
 3168 073a D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3169 073e 4FEA8101 	    lsl r1,#2 
 3170 0742 A0EB0100 	    sub r0,r1 
 3171 0746 4CF8040D 	1:  _PUSH r0 
 3172 074a 4FF03200 	    mov r0,#TK_EQUAL 
 3173 074e 00B5FFF7 	    _CALL expect 
 3173      FEFF5DF8 
 3173      04EB
 3174 0758 00B5FFF7 	    _CALL expression   
 3174      FEFF5DF8 
 3174      04EB
 3175 0762 0F28     	    cmp r0,#TK_INTGR
 3176 0764 7FF4FEAF 	    bne syntax_error   
 3177 0768 5CF8040B 	2:  _POP r0 
 3178 076c 0160     	    str r1,[r0]
 3179 076e 7047     	    _RET  
 3180              	
 3181              	/***************************************
 3182              	  BASIC: LIST [[first]-last]
 3183              	  use:
 3184              	    r2   first line# 
 3185              	    r3   last line#
ARM GAS  tinyBasic.s 			page 84


 3186              	    T1   *line 
 3187              	    T2   TXTEND 
 3188              	**************************************/  
 3189              	    _FUNC list
 3190 0770 206C10F0 	    _CLO
 3190      010F03D0 
 3190      4FF00700 
 3190      FFF7FEBF 
 3191 0780 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3192 0784 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3193 0788 B8F80020 	    ldrh r2,[T1]
 3194 078c 4FF6FF73 	    mov r3,#65535 
 3195 0790 00B5FFF7 	    _CALL next_token 
 3195      FEFF5DF8 
 3195      04EB
 3196 079a 10B3     	    cbz r0,6f 
 3197 079c 0F28     	    cmp r0,#TK_INTGR
 3198 079e 09D1     	    bne 1f 
 3199 07a0 0A46     	    mov r2,r1 // first line
 3200 07a2 00B5FFF7 	    _CALL next_token
 3200      FEFF5DF8 
 3200      04EB
 3201 07ac 0028     	    cmp r0,#TK_NONE 
 3202 07ae 01D1     	    bne 1f 
 3203 07b0 1346     	    mov r3,r2 
 3204 07b2 0CE0     	    b 4f 
 3205 07b4 1128     	1:  cmp r0,#TK_MINUS 
 3206 07b6 7FF4FEAF 	    bne syntax_error 
 3207 07ba 00B5FFF7 	    _CALL next_token 
 3207      FEFF5DF8 
 3207      04EB
 3208 07c4 18B1     	    cbz r0,4f 
 3209 07c6 0F28     	    cmp r0,#TK_INTGR
 3210 07c8 7FF4FEAF 	    bne syntax_error  
 3211 07cc 0B46     	    mov r3,r1 
 3212              	4:  // skip lines below r2 
 3213 07ce B8F80000 	    ldrh r0,[T1]
 3214 07d2 9042     	    cmp r0,r2 
 3215 07d4 05D5     	    bpl 6f 
 3216 07d6 98F80200 	    ldrb r0,[T1,#2]
 3217 07da 8044     	    add T1,r0
 3218 07dc C845     	    cmp T1,T2 
 3219 07de F6D4     	    bmi 4b
 3220 07e0 1AE0     	    b 9f 
 3221 07e2 C845     	6:  cmp T1,T2  
 3222 07e4 18D5     	    bpl 9f
 3223 07e6 4046     	    mov r0,T1   
 3224 07e8 DFF83010 	    ldr r1,out_buff 
 3225 07ec 00B5FFF7 	    _CALL decompile_line 
 3225      FEFF5DF8 
 3225      04EB
 3226 07f6 00B5FFF7 	    _CALL uart_puts 
 3226      FEFF5DF8 
 3226      04EB
 3227 0800 00B5FFF7 	    _CALL cr 
 3227      FEFF5DF8 
 3227      04EB
ARM GAS  tinyBasic.s 			page 85


 3228 080a 98F80200 	    ldrb r0,[T1,#2]
 3229 080e 8044     	    add T1,r0
 3230 0810 B8F80000 	    ldrh r0,[T1]
 3231 0814 9842     	    cmp r0,r3 
 3232 0816 E4DD     	    ble 6b 
 3233 0818 FFF7FEBF 	9:  b warm_start 
 3234 081c 00000000 	out_buff: .word _tib 
 3235              	
 3236              	/********************************
 3237              	  BASIC: LOG2(expr)
 3238              	  return log base 2 of expr 
 3239              	********************************/
 3240              	    _FUNC log2
 3241 0820 00B5FFF7 	    _CALL func_args
 3241      FEFF5DF8 
 3241      04EB
 3242 082a 0128     	    cmp r0,#1 
 3243 082c 7FF4FEAF 	    bne syntax_error
 3244 0830 5CF8040B 	    _POP r0 
 3245 0834 B0FA80F1 	    clz r1,r0 
 3246 0838 C1F11F01 	    rsb r1,#31
 3247 083c 4FF00F00 	9:  mov r0,#TK_INTGR
 3248 0840 7047     	    _RET 
 3249              	
 3250              	
 3251              	/****************************************
 3252              	  BASIC: LSHIFT(expr1,expr2)
 3253              	  shift right expr1 of expr2 bits 
 3254              	****************************************/
 3255 0842 00BF     	    _FUNC lshift
 3256 0844 00B5FFF7 	    _CALL func_args
 3256      FEFF5DF8 
 3256      04EB
 3257 084e 0228     	    cmp r0,#2
 3258 0850 7FF4FEAF 	    bne syntax_error 
 3259 0854 BCE80300 	    ldmia DP!,{r0,r1}
 3260 0858 01FA00F1 	    lsl r1,r0 
 3261 085c 4FF00F00 	    mov r0,#TK_INTGR
 3262 0860 7047     	    _RET 
 3263              	
 3264              	/***********************************
 3265              	  BASIC: NEW 
 3266              	  delete existing program in memory
 3267              	  and clear variables and RAM 
 3268              	***********************************/
 3269 0862 00BF     	    _FUNC new
 3270 0864 206C10F0 	    _CLO 
 3270      010F03D0 
 3270      4FF00700 
 3270      FFF7FEBF 
 3271 0874 00B5FFF7 	    _CALL clear_basic 
 3271      FEFF5DF8 
 3271      04EB
 3272 087e FFF7FEBF 	    b warm_start   
 3273              	
 3274              	/************************************
 3275              	  BASIC: NOT relation  
ARM GAS  tinyBasic.s 			page 86


 3276              	  invert logical value or relation
 3277              	************************************/
 3278 0882 00BF     	      _FUNC func_not
 3279 0884 00B5FFF7 	      _CALL relation 
 3279      FEFF5DF8 
 3279      04EB
 3280 088e 11B1     	      cbz r1,8f 
 3281 0890 81EA0101 	      eor r1,r1
 3282 0894 01E0     	      b 9f 
 3283 0896 4FF0FF31 	  8:  mov r1,#-1
 3284 089a 7047     	  9:  _RET 
 3285              	
 3286              	/******************************************
 3287              	  BASIC: OR(expr1,expr2)
 3288              	  binary OR between 2 expressions
 3289              	******************************************/
 3290              	    _FUNC bit_or
 3291 089c 00B5FFF7 	    _CALL func_args
 3291      FEFF5DF8 
 3291      04EB
 3292 08a6 0228     	    cmp r0,#2
 3293 08a8 7FF4FEAF 	    bne syntax_error
 3294 08ac 5CF8040B 	    _POP r0 
 3295 08b0 5CF8041B 	    _POP r1
 3296 08b4 41EA0001 	    orr r1,r0 
 3297 08b8 4FF00F00 	    mov r0,#TK_INTGR
 3298 08bc 7047     	    _RET 
 3299              	
 3300              	/****************************************
 3301              	  BASIC: INP(\c) 
 3302              	  read gpio_idr (16 bits value) 
 3303              	***************************************/
 3304 08be 00BF     	    _FUNC inp 
 3305 08c0 4FF00600 	    mov r0,#TK_LPAREN 
 3306 08c4 00B5FFF7 	    _CALL expect 
 3306      FEFF5DF8 
 3306      04EB
 3307 08ce 4FF00300 	    mov r0,#TK_CHAR 
 3308 08d2 00B5FFF7 	    _CALL expect
 3308      FEFF5DF8 
 3308      04EB
 3309 08dc 0846     	    mov r0,r1 
 3310 08de 00B5FFF7 	    _CALL upper 
 3310      FEFF5DF8 
 3310      04EB
 3311 08e8 0246     	    mov r2,r0 
 3312 08ea 4FF00700 	    mov r0,#TK_RPAREN
 3313 08ee 00B5FFF7 	    _CALL expect 
 3313      FEFF5DF8 
 3313      04EB
 3314 08f8 A2F14102 	    sub r2,#'A' 
 3315 08fc 4FF48061 	    mov r1,0x400 
 3316 0900 02FB01F1 	    mul r1,r2
 3317 0904 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3317      C4F20102 
 3318 090c 0A44     	    add r2,r1 
 3319 090e 1168     	    ldr r1,[r2]
ARM GAS  tinyBasic.s 			page 87


 3320 0910 4FF00F00 	    mov r0,#TK_INTGR
 3321 0914 7047     	    _RET 
 3322              	
 3323              	
 3324              	/****************************************
 3325              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3326              	  output to gpio_odr expr lower 16 bits
 3327              	***************************************/
 3328 0916 00BF     	    _FUNC out
 3329 0918 4FF00300 	1:  mov r0,#TK_CHAR 
 3330 091c 00B5FFF7 	    _CALL expect 
 3330      FEFF5DF8 
 3330      04EB
 3331 0926 0846     	    mov r0,r1
 3332 0928 00B5FFF7 	    _CALL upper
 3332      FEFF5DF8 
 3332      04EB
 3333 0932 0246     	    mov r2,r0 
 3334 0934 4FF00800 	    mov r0,#TK_COMMA 
 3335 0938 00B5FFF7 	    _CALL expect 
 3335      FEFF5DF8 
 3335      04EB
 3336 0942 00B5FFF7 	    _CALL expression 
 3336      FEFF5DF8 
 3336      04EB
 3337 094c A2F14102 	    sub r2,#'A'
 3338 0950 4FF48063 	    mov r3,#0x400 
 3339 0954 03FB02F2 	    mul r2,r3 
 3340 0958 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3340      C4F20103 
 3341 0960 1A44     	    add r2,r3
 3342 0962 1180     	    strh r1,[r2]
 3343 0964 00B5FFF7 	    _CALL next_token
 3343      FEFF5DF8 
 3343      04EB
 3344 096e 0828     	    cmp r0,#TK_COMMA
 3345 0970 D2D0     	    beq 1b 
 3346 0972 D4F800A0 	    _UNGET_TOKEN
 3346      D4F808B0 
 3347 097a 7047     	    _RET 
 3348              	
 3349              	/****************************************
 3350              	  BASIC: PAD 
 3351              	  return pad buffer address 
 3352              	****************************************/
 3353              	    _FUNC pad_ref
 3354 097c 0149     	    ldr r1,pad_adr  
 3355 097e 4FF00F00 	    mov r0,#TK_INTGR 
 3356 0982 7047     	    _RET 
 3357 0984 00000000 	pad_adr: .word _pad 
 3358              	
 3359              	/***********************
 3360              	  BASIC: PAUSE expr 
 3361              	  suspend execution for 
 3362              	  expr milliseconds 
 3363              	************************/
 3364              	    _FUNC pause
ARM GAS  tinyBasic.s 			page 88


 3365 0988 00B5FFF7 	    _CALL expression 
 3365      FEFF5DF8 
 3365      04EB
 3366 0992 0F28     	    cmp r0,#TK_INTGR 
 3367 0994 7FF4FEAF 	    bne syntax_error 
 3368 0998 E069     	    ldr r0,[UPP,#TICKS]
 3369 099a 0844     	    add r0,r1 
 3370 099c E169     	1:  ldr r1,[UPP,#TICKS]
 3371 099e 8842     	    cmp r0,r1 
 3372 09a0 FCD1     	    bne 1b     
 3373 09a2 7047     	    _RET 
 3374              	
 3375              	/***************************************************
 3376              	  BASIC: PMODE \c,pin,mode[,opt] 
 3377              	  configure a digital pin for input|output
 3378              	  paramters:
 3379              	    \c    port letter
 3380              	    pin   pin {0..15} 
 3381              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3382              	    for input mode:
 3383              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3384              	    for output mode:
 3385              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3386              	  use:
 3387              	    r2  opt
 3388              	    r3  mode 
 3389              	    T1  pin  
 3390              	    T2  port      
 3391              	***************************************************/
 3392              	      _FUNC pin_mode
 3393 09a4 4FF00300 	      mov r0,#TK_CHAR 
 3394 09a8 00B5FFF7 	      _CALL expect
 3394      FEFF5DF8 
 3394      04EB
 3395 09b2 0846     	      mov r0,r1 
 3396 09b4 00B5FFF7 	      _CALL upper 
 3396      FEFF5DF8 
 3396      04EB
 3397 09be A0F14109 	      sub T2,r0,#'A'
 3398 09c2 4FF00800 	      mov r0,#TK_COMMA
 3399 09c6 00B5FFF7 	      _CALL expect 
 3399      FEFF5DF8 
 3399      04EB
 3400 09d0 00B5FFF7 	      _CALL arg_list
 3400      FEFF5DF8 
 3400      04EB
 3401 09da 0228     	      cmp r0,#2 
 3402 09dc 3FF5FEAF 	      bmi syntax_error
 3403 09e0 0428     	      cmp r0,#4
 3404 09e2 01D4     	      bmi 1f 
 3405 09e4 FFF7FEBF 	      b syntax_error
 3406 09e8 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3407 09ec 0228     	      cmp r0,#2
 3408 09ee 02D0     	      beq 2f 
 3409              	// 3 parameters, pin,mode,opt  
 3410 09f0 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3411 09f4 01E0     	    b 4f  
ARM GAS  tinyBasic.s 			page 89


 3412              	2: // 2 parameters, pin,mode 
 3413 09f6 BCE80801 	    ldmia DP!,{r3,T1}
 3414 09fa 4FF48060 	4:  mov r0,#0x400 
 3415 09fe 00FB09F9 	    mul T2,r0 
 3416 0a02 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3416      C4F20100 
 3417 0a0a 8144     	    add T2,r0 // port base address 
 3418              	// if input mode set pull in ODR 
 3419 0a0c 83B9     	    cbnz r3,2f 
 3420 0a0e 022A     	    cmp r2,#2
 3421 0a10 0ED4     	    bmi 2f 
 3422 0a12 4FF00100 	    mov r0,#1 
 3423 0a16 4146     	    mov r1,T1 
 3424 0a18 032A     	    cmp r2,#3 
 3425 0a1a 01D0     	    beq 1f
 3426 0a1c 01F11001 	    add r1,#16 //reset bit 
 3427 0a20 00FA01F0 	1:  lsl r0,r1
 3428 0a24 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3429 0a28 032A     	    cmp r2,#3 
 3430 0a2a 01D4     	    bmi 2f 
 3431 0a2c A2F10102 	    sub r2,#1
 3432              	2: // set CNF|MODE bits GPIO_CRx 
 3433 0a30 B8F1080F 	    cmp T1,#8 
 3434 0a34 03D4     	    bmi 3f 
 3435 0a36 A8F10808 	    sub T1,#8 
 3436 0a3a 09F10409 	    add T2,#4 //CRH 
 3437 0a3e 4FF00F00 	3:  mov r0,#15   
 3438 0a42 4FEA8801 	    lsl r1,T1,#2 
 3439 0a46 00FA01F0 	    lsl r0,r1
 3440 0a4a 6FEA0000 	    mvn r0,r0 // bitmask 
 3441 0a4e D9F80010 	    ldr r1,[T2]
 3442 0a52 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3443              	// combine opt|mode     
 3444 0a56 4FEA8200 	    lsl r0,r2,#2 
 3445 0a5a 40EA0300 	    orr r0,r3 // OPT|MODE 
 3446 0a5e 4FEA8803 	    lsl r3,T1,#2 
 3447 0a62 00FA03F0 	    lsl r0,r3
 3448 0a66 41EA0001 	    orr r1,r0   
 3449 0a6a C9F80010 	    str r1,[T2] // mode and option set
 3450 0a6e 7047     	    _RET 
 3451              	
 3452              	
 3453              	/*****************************************
 3454              	  BASIC: PEEK8 (expr)  
 3455              	  return byte value at address 
 3456              	*****************************************/
 3457              	    _FUNC peek8
 3458 0a70 00B5FFF7 	    _CALL func_args  
 3458      FEFF5DF8 
 3458      04EB
 3459 0a7a 0128     	    cmp r0,#1
 3460 0a7c 3FF5FEAF 	    bmi syntax_error
 3461 0a80 5CF8041B 	    _POP r1 
 3462 0a84 0978     	    ldrb r1,[r1]
 3463 0a86 4FF00F00 	    mov r0,#TK_INTGR     
 3464 0a8a 7047     	    _RET 
 3465              	
ARM GAS  tinyBasic.s 			page 90


 3466              	/*****************************************
 3467              	  BASIC: PEEK16 (expr)  
 3468              	  return byte value at address 
 3469              	*****************************************/
 3470              	    _FUNC peek16
 3471 0a8c 00B5FFF7 	    _CALL func_args  
 3471      FEFF5DF8 
 3471      04EB
 3472 0a96 0128     	    cmp r0,#1
 3473 0a98 3FF5FEAF 	    bmi syntax_error
 3474 0a9c 5CF8041B 	    _POP r1 
 3475 0aa0 0988     	    ldrh r1,[r1]
 3476 0aa2 4FF00F00 	    mov r0,#TK_INTGR     
 3477 0aa6 7047     	    _RET 
 3478              	
 3479              	/*****************************************
 3480              	  BASIC: PEEK32 (expr)  
 3481              	  return byte value at address 
 3482              	*****************************************/
 3483              	    _FUNC peek32
 3484 0aa8 00B5FFF7 	    _CALL func_args  
 3484      FEFF5DF8 
 3484      04EB
 3485 0ab2 0128     	    cmp r0,#1
 3486 0ab4 3FF5FEAF 	    bmi syntax_error
 3487 0ab8 5CF8041B 	    _POP r1 
 3488 0abc 0968     	    ldr r1,[r1]
 3489 0abe 4FF00F00 	    mov r0,#TK_INTGR     
 3490 0ac2 7047     	    _RET 
 3491              	
 3492              	
 3493              	/**********************************
 3494              	  BASIC: POKE8 addr,byte
 3495              	  store byte at addr   
 3496              	**********************************/
 3497              	    _FUNC poke8
 3498 0ac4 00B5FFF7 	    _CALL arg_list
 3498      FEFF5DF8 
 3498      04EB
 3499 0ace 0228     	    cmp r0,#2 
 3500 0ad0 7FF4FEAF 	    bne syntax_error
 3501 0ad4 BCE80300 	    ldmia DP!,{r0,r1} 
 3502 0ad8 0870     	    strb r0,[r1]
 3503 0ada 7047     	    _RET 
 3504              	
 3505              	/**********************************
 3506              	  BASIC: POKE16 addr,hword
 3507              	  store hword at addr   
 3508              	**********************************/
 3509              	    _FUNC poke16
 3510 0adc 00B5FFF7 	    _CALL arg_list
 3510      FEFF5DF8 
 3510      04EB
 3511 0ae6 0228     	    cmp r0,#2 
 3512 0ae8 7FF4FEAF 	    bne syntax_error
 3513 0aec BCE80300 	    ldmia DP!,{r0,r1} 
 3514 0af0 0880     	    strh r0,[r1]
ARM GAS  tinyBasic.s 			page 91


 3515 0af2 7047     	    _RET 
 3516              	
 3517              	/**********************************
 3518              	  BASIC: POKE32 addr,word
 3519              	  store word at addr   
 3520              	**********************************/
 3521              	    _FUNC poke32
 3522 0af4 00B5FFF7 	    _CALL arg_list 
 3522      FEFF5DF8 
 3522      04EB
 3523 0afe 0228     	    cmp r0,#2 
 3524 0b00 7FF4FEAF 	    bne syntax_error
 3525 0b04 BCE80300 	    ldmia DP!,{r0,r1} 
 3526 0b08 0860     	    str r0,[r1]
 3527 0b0a 7047     	    _RET 
 3528              	
 3529              	
 3530              	
 3531              	/****************************
 3532              	  BASIC: PRINT|? arg_list 
 3533              	  print list of arguments 
 3534              	****************************/
 3535              	    _FUNC print
 3536 0b0c 88EA0808 	    eor T1,T1 
 3537 0b10 00B5FFF7 	0:  _CALL expression
 3537      FEFF5DF8 
 3537      04EB
 3538 0b1a 0F28     	    cmp r0,#TK_INTGR
 3539 0b1c 07D1     	    bne 1f 
 3540 0b1e 0846     	    mov r0,r1
 3541 0b20 A169     	    ldr r1,[UPP,#BASE]
 3542 0b22 00B5FFF7 	    _CALL print_int
 3542      FEFF5DF8 
 3542      04EB
 3543 0b2c 3EE0     	    b 8f  
 3544 0b2e 00B5FFF7 	1:  _CALL next_token
 3544      FEFF5DF8 
 3544      04EB
 3545 0b38 0128     	    cmp r0,#TK_COLON 
 3546 0b3a 00DC     	    bgt 2f
 3547 0b3c 4DE0     	    b unget_exit 
 3548 0b3e 0228     	2:  cmp r0,#TK_QSTR 
 3549 0b40 06D1     	    bne 3f
 3550 0b42 0846     	    mov r0,r1 
 3551 0b44 00B5FFF7 	    _CALL uart_puts  
 3551      FEFF5DF8 
 3551      04EB
 3552 0b4e 2DE0     	    b 8f 
 3553 0b50 0D28     	3:  cmp r0,#TK_CFUNC
 3554 0b52 05D1     	    bne 4f
 3555 0b54 0846     	    mov r0,r1
 3556 0b56 00B5FFF7 	    _CALL execute 
 3556      FEFF5DF8 
 3556      04EB
 3557 0b60 0328     	4:  cmp r0,#TK_CHAR 
 3558 0b62 06D1     	    bne 5f 
 3559 0b64 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 92


 3560 0b66 00B5FFF7 	    _CALL uart_putc 
 3560      FEFF5DF8 
 3560      04EB
 3561 0b70 1CE0     	    b 8f 
 3562 0b72 0A28     	5:  cmp r0,#TK_SHARP
 3563 0b74 09D1     	    bne 6f 
 3564 0b76 00B5FFF7 	   _CALL next_token
 3564      FEFF5DF8 
 3564      04EB
 3565 0b80 0F28     	    cmp r0,#TK_INTGR  
 3566 0b82 7FF4FEAF 	    bne syntax_error 
 3567 0b86 6164     	    str r1,[UPP,#TAB_WIDTH]
 3568 0b88 10E0     	    b 8f 
 3569 0b8a 0B28     	6:  cmp r0,#TK_CMD 
 3570 0b8c 25D1     	    bne unget_exit  
 3571 0b8e 4429     	    cmp r1,#TAB_IDX 
 3572 0b90 05D1     	    bne 6f
 3573 0b92 00B500F0 	    _CALL tab 
 3573      90FA5DF8 
 3573      04EB
 3574 0b9c 06E0     	    b 8f 
 3575 0b9e 4029     	6:  cmp r1,#SPC_IDX  
 3576 0ba0 1BD1     	    bne unget_exit
 3577 0ba2 00B500F0 	    _CALL spc   
 3577      4EFA5DF8 
 3577      04EB
 3578 0bac 88EA0808 	8:  eor T1,T1  
 3579 0bb0 00B5FFF7 	    _CALL next_token
 3579      FEFF5DF8 
 3579      04EB
 3580 0bba 90B1     	    cbz r0, print_exit  
 3581 0bbc 0828     	    cmp r0,#TK_COMMA 
 3582 0bbe 02D1     	    bne 8f 
 3583 0bc0 4FF0FF38 	    mov T1,#-1
 3584 0bc4 A4E7     	    b 0b
 3585 0bc6 0928     	8:  cmp r0,#TK_SEMIC 
 3586 0bc8 07D1     	    bne unget_exit 
 3587 0bca 00B5FFF7 	    _CALL tabulation 
 3587      FEFF5DF8 
 3587      04EB
 3588 0bd4 4FF0FF38 	    mov T1,#-1
 3589 0bd8 9AE7     	    b 0b
 3590              	unget_exit:         
 3591 0bda D4F800A0 	   _UNGET_TOKEN 
 3591      D4F808B0 
 3592              	print_exit:
 3593 0be2 18EA0808 	    ands T1,T1 
 3594 0be6 04D1     	    bne 9f
 3595 0be8 00B5FFF7 	    _CALL cr 
 3595      FEFF5DF8 
 3595      04EB
 3596 0bf2 7047     	9:  _RET 
 3597              	
 3598              	/**************************************
 3599              	  BASIC: QKEY
 3600              	  check if key pressed 
 3601              	**************************************/ 
ARM GAS  tinyBasic.s 			page 93


 3602              	    _FUNC qkey
 3603 0bf4 4FF00001 	    mov r1,#0
 3604 0bf8 00B5FFF7 	    _CALL uart_qkey
 3604      FEFF5DF8 
 3604      04EB
 3605 0c02 01D0     	    beq 9f 
 3606 0c04 4FF0FF31 	    mov r1,#-1 
 3607 0c08 4FF00F00 	9:  mov r0,#TK_INTGR
 3608 0c0c 7047     	    _RET 
 3609              	
 3610              	/******************************************
 3611              	  BASIC RANDOM(expr)
 3612              	  generate random number between 0..expr-1
 3613              	******************************************/
 3614 0c0e 00BF     	    _FUNC random
 3615 0c10 00B5FFF7 	    _CALL func_args 
 3615      FEFF5DF8 
 3615      04EB
 3616 0c1a 0128     	    cmp r0,#1
 3617 0c1c 7FF4FEAF 	    bne syntax_error 
 3618 0c20 606A     	    ldr r0,[UPP,#SEED]
 3619 0c22 4FEA4031 	    lsl r1,r0,#13
 3620 0c26 81EA0001 	    eor r1,r0
 3621 0c2a 4FEA5140 	    lsr r0,r1,#17
 3622 0c2e 81EA0001 	    eor r1,r0
 3623 0c32 4FEA4110 	    lsl r0,r1,#5
 3624 0c36 81EA0001 	    eor r1,r0
 3625 0c3a 6162     	    str r1,[UPP,#SEED]
 3626 0c3c 5CF8040B 	    _POP r0 
 3627 0c40 B1FBF0F2 	    udiv r2,r1,r0  
 3628 0c44 00FB02F2 	    mul r2,r0 
 3629 0c48 A1EB0201 	    sub r1,r2 
 3630 0c4c 4FF00F00 	    mov r0,#TK_INTGR
 3631 0c50 7047     	    _RET 
 3632              	
 3633              	/****************************************
 3634              	  BASIC: RSHIFT(expr1,expr2)
 3635              	  shift left expr1 de expr2 bits 
 3636              	****************************************/
 3637 0c52 00BF     	    _FUNC rshift
 3638 0c54 00B5FFF7 	    _CALL func_args
 3638      FEFF5DF8 
 3638      04EB
 3639 0c5e 0228     	    cmp r0,#2 
 3640 0c60 7FF4FEAF 	    bne syntax_error
 3641 0c64 BCE80300 	    ldmia DP!,{r0,r1}
 3642 0c68 21FA00F1 	    lsr r1,r0  
 3643 0c6c 4FF00F00 	    mov r0,#TK_INTGR
 3644 0c70 7047     	    _RET 
 3645              	
 3646              	/****************************
 3647              	  BASIC: RUN 
 3648              	  execute program in memory
 3649              	****************************/
 3650 0c72 00BF     	    _FUNC run
 3651 0c74 206C10F0 	    _CLO 
 3651      010F03D0 
ARM GAS  tinyBasic.s 			page 94


 3651      4FF00700 
 3651      FFF7FEBF 
 3652 0c84 206B     	    ldr r0,[UPP,#TXTBGN]
 3653 0c86 616B     	    ldr r1,[UPP,#TXTEND]
 3654 0c88 C4F8D010 	    str r1,[UPP,#HERE]
 3655 0c8c 8842     	    cmp r0,r1
 3656 0c8e 21D0     	    beq 9f
 3657 0c90 216C     	    ldr r1,[UPP,#FLAGS]
 3658 0c92 11F0080F 	    tst r1,#FSTOP
 3659 0c96 09D0     	    beq 1f
 3660 0c98 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3661 0c9c 6060     	    str r0,[UPP,#COUNT]
 3662 0c9e 206C     	    ldr r0,[UPP,#FLAGS]
 3663 0ca0 4FF00901 	    mov r1,#FRUN+FSTOP
 3664 0ca4 80EA0100 	    eor r0,r1
 3665 0ca8 2064     	    str r0,[UPP,#FLAGS] 
 3666 0caa 13E0     	    b 9f  
 3667 0cac 8178     	1:  ldrb r1,[r0,#2]
 3668 0cae 6160     	    str r1,[UPP,#COUNT]
 3669 0cb0 8346     	    mov BPTR,r0 
 3670 0cb2 4FF0030A 	    mov IN,#3
 3671 0cb6 606B     	    ldr r0,[UPP,#TXTEND]
 3672              	    // reset dataline pointers 
 3673 0cb8 80EA0000 	    eor r0,r0 
 3674 0cbc E060     	    str r0,[UPP,#DATAPTR]
 3675 0cbe 2061     	    str r0,[UPP,#DATA]
 3676 0cc0 6061     	    str r0,[UPP,#DATALEN] 
 3677 0cc2 206C     	    ldr r0,[UPP,#FLAGS]
 3678 0cc4 40F00100 	    orr r0,#FRUN 
 3679 0cc8 2064     	    str r0,[UPP,#FLAGS]
 3680 0cca 00B5FFF7 	    _CALL show_trace 
 3680      FEFF5DF8 
 3680      04EB
 3681 0cd4 7047     	9:  _RET 
 3682              	
 3683              	/**********************************
 3684              	        FILE SYSTEM 
 3685              	**********************************/
 3686              	
 3687              	/*********************************
 3688              	  search_free 
 3689              	  search first free PAGE in fs
 3690              	  a PAGE is free if first word is
 3691              	  -1
 3692              	  input:
 3693              	    none 
 3694              	  output:
 3695              	    r0    addr|0
 3696              	  use:
 3697              	*********************************/
 3698 0cd6 00BF     	    _FUNC search_free 
 3699 0cd8 06B4     	    push {r1,r2}
 3700 0cda DFF86410 	    ldr r1,fs_addr 
 3701 0cde 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3701      C0F60202 
 3702 0ce6 0868     	1:  ldr r0,[r1]
 3703 0ce8 B0F1FF3F 	    cmp r0,#-1
ARM GAS  tinyBasic.s 			page 95


 3704 0cec 03D0     	    beq 8f 
 3705 0cee 01F58061 	    add r1,#PAGE_SIZE
 3706 0cf2 9142     	    cmp r1,r2 
 3707 0cf4 F7D4     	    bmi 1b 
 3708 0cf6 0846     	8:  mov r0,r1 
 3709 0cf8 06BC     	    pop {r1,r2}   
 3710 0cfa 7047     	    _RET 
 3711              	
 3712              	/*********************************
 3713              	  search_file 
 3714              	  search for a file name 
 3715              	  in file system.
 3716              	  input: 
 3717              	    r0   .asciz target name
 3718              	  output:
 3719              	    r0    0 || address found 
 3720              	  use:
 3721              	   r0     temp 
 3722              	   r1     *file_name 
 3723              	   r2     *fs  
 3724              	   r3     target   
 3725              	**********************************/
 3726              	    _FUNC search_file 
 3727 0cfc 0EB4     	    push {r1,r2,r3}
 3728 0cfe DFF84020 	    ldr r2,fs_addr
 3729 0d02 0346     	    mov r3,r0  
 3730              	cmp_loop:
 3731 0d04 1068     	    ldr r0,[r2]
 3732 0d06 B0F1FF3F 	    cmp r0,#-1
 3733 0d0a 80EA0000 	    eor r0,r0
 3734 0d0e 15D0     	    beq 9f // reached end of fs 
 3735 0d10 1846     	1:  mov r0,r3
 3736 0d12 02F10201 	    add r1,r2,#2
 3737 0d16 00B5FFF7 	    _CALL strcmp
 3737      FEFF5DF8 
 3737      04EB
 3738 0d20 08B9     	    cbnz r0,2f
 3739 0d22 1046     	    mov r0,r2 
 3740 0d24 0AE0     	    b 9f   
 3741 0d26 1088     	2:  ldrh r0,[r2] // name length
 3742 0d28 0244     	    add r2,r0 
 3743 0d2a 1088     	    ldrh r0,[r2]
 3744 0d2c 1044     	    add r0,r2
 3745 0d2e 00B5FFF7 	    _CALL page_align 
 3745      FEFF5DF8 
 3745      04EB
 3746 0d38 0246     	    mov r2,r0   
 3747 0d3a E3E7     	    b cmp_loop 
 3748 0d3c 0EBC     	9:  pop {r1,r2,r3}
 3749 0d3e 7047     	    _RET 
 3750              	
 3751 0d40 00000000 	fs_addr: .word FILE_SYSTEM
 3752              	
 3753              	/*************************************
 3754              	  BASIC: DIR 
 3755              	  list files stored in fs 
 3756              	  use:
ARM GAS  tinyBasic.s 			page 96


 3757              	    r0  temp 
 3758              	    r1  temp
 3759              	    r2  file count
 3760              	    r3  data size
 3761              	    T1  *fs  
 3762              	*************************************/
 3763              	    _FUNC directory
 3764 0d44 206C10F0 	    _CLO 
 3764      010F03D0 
 3764      4FF00700 
 3764      FFF7FEBF 
 3765 0d54 82EA0202 	    eor r2,r2 
 3766 0d58 5FF81C80 	    ldr T1,fs_addr 
 3767 0d5c D8F80000 	1:  ldr r0,[T1] // name length 
 3768 0d60 B0F1FF3F 	    cmp r0,#-1
 3769 0d64 2AD0     	    beq no_more_file
 3770 0d66 00F00F03 	    and r3,r0,#15
 3771 0d6a 08F10200 	    add r0,T1,#2
 3772 0d6e 00B5FFF7 	    _CALL uart_puts 
 3772      FEFF5DF8 
 3772      04EB
 3773 0d78 4FF01000 	    mov r0,#16 
 3774 0d7c 00B5FFF7 	    _CALL cursor_x 
 3774      FEFF5DF8 
 3774      04EB
 3775 0d86 9844     	    add T1,r3 
 3776 0d88 B8F80030 	    ldrh r3,[T1]
 3777 0d8c 1846     	    mov r0,r3 
 3778 0d8e 4FF00A01 	    mov r1,#10 
 3779 0d92 00B5FFF7 	    _CALL print_int
 3779      FEFF5DF8 
 3779      04EB
 3780 0d9c 00B5FFF7 	    _CALL cr  
 3780      FEFF5DF8 
 3780      04EB
 3781 0da6 08EB0300 	    add r0,T1,r3 
 3782 0daa 00B5FFF7 	    _CALL page_align
 3782      FEFF5DF8 
 3782      04EB
 3783 0db4 8046     	    mov T1,r0 
 3784 0db6 02F10102 	    add r2,#1 
 3785 0dba CFE7     	    b 1b  
 3786              	no_more_file:
 3787 0dbc 00B5FFF7 	    _CALL cr
 3787      FEFF5DF8 
 3787      04EB
 3788 0dc6 4FF01000 	    mov r0,#16
 3789 0dca 00B5FFF7 	    _CALL cursor_x  
 3789      FEFF5DF8 
 3789      04EB
 3790 0dd4 1046     	    mov r0,r2 
 3791 0dd6 4FF00A01 	    mov r1,#10 
 3792 0dda 00B5FFF7 	    _CALL print_int 
 3792      FEFF5DF8 
 3792      04EB
 3793 0de4 DFF8D404 	    ldr r0,=fcount 
 3794 0de8 00B5FFF7 	    _CALL uart_puts 
ARM GAS  tinyBasic.s 			page 97


 3794      FEFF5DF8 
 3794      04EB
 3795 0df2 7047     	    _RET 
 3796 0df4 66696C65 	fcount:  .asciz "files\n"
 3796      730A00
 3797              	
 3798              	/*************************************
 3799              	  BASIC: FORGET ["name"]
 3800              	  delete file and all following 
 3801              	  if no name given delete all files 
 3802              	************************************/
 3803 0dfb 00       	    _FUNC forget
 3804 0dfc 2DE90802 	    push {r3,T2}
 3805 0e00 5FF8C490 	    ldr T2,fs_addr 
 3806 0e04 E36A     	    ldr r3,[UPP,#FSFREE]
 3807 0e06 00B5FFF7 	    _CALL next_token
 3807      FEFF5DF8 
 3807      04EB
 3808 0e10 38B1     	    cbz r0,1f // no name 
 3809 0e12 0846     	    mov r0,r1
 3810 0e14 00B5FFF7 	    _CALL search_file
 3810      71FF5DF8 
 3810      04EB
 3811 0e1e 58B1     	    cbz r0,9f 
 3812 0e20 8146     	    mov T2,r0 
 3813 0e22 9945     	1:  cmp T2,r3 
 3814 0e24 08D5     	    bpl 9f 
 3815 0e26 4846     	    mov r0,T2 
 3816 0e28 00B5FFF7 	    _CALL erase_page
 3816      FEFF5DF8 
 3816      04EB
 3817 0e32 09F58069 	    add T2,#PAGE_SIZE
 3818 0e36 F4E7     	    b 1b 
 3819 0e38 00B5FFF7 	9:  _CALL search_free
 3819      4DFF5DF8 
 3819      04EB
 3820 0e42 BDE80802 	    pop {r3,T2} 
 3821 0e46 7047     	    _RET 
 3822              	
 3823              	/**********************************
 3824              	  BASIC LOAD "name" 
 3825              	  load file in RAM for execution
 3826              	  use:
 3827              	    r0   temp
 3828              	    r1   src
 3829              	    r2   dest 
 3830              	    r3   count 
 3831              	**********************************/
 3832              	    _FUNC load
 3833 0e48 206C10F0 	    _CLO 
 3833      010F03D0 
 3833      4FF00700 
 3833      FFF7FEBF 
 3834 0e58 00B5FFF7 	    _CALL next_token 
 3834      FEFF5DF8 
 3834      04EB
 3835 0e62 0228     	    cmp r0,#TK_QSTR 
ARM GAS  tinyBasic.s 			page 98


 3836 0e64 7FF4FEAF 	    bne syntax_error 
 3837 0e68 0846     	    mov r0,r1 
 3838 0e6a 00B5FFF7 	    _CALL search_file 
 3838      46FF5DF8 
 3838      04EB
 3839 0e74 18B9     	    cbnz r0, 1f 
 3840 0e76 4FF00900 	    mov r0,#ERR_NOT_FILE
 3841 0e7a FFF7FEBF 	    b tb_error 
 3842 0e7e 0146     	1:  mov r1,r0 
 3843 0e80 0888     	    ldrh r0,[r1]
 3844 0e82 0144     	    add r1,r0 // data size field  
 3845 0e84 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3846 0e88 226B     	    ldr r2,[UPP,#TXTBGN]
 3847 0e8a 02EB0300 	    add r0,r2,r3  
 3848 0e8e 6063     	    str r0,[UPP,#TXTEND]
 3849 0e90 03F10103 	    add r3,#1
 3850 0e94 4FEA5303 	    lsr r3,#1
 3851              	2:  // load file data 
 3852 0e98 31F8020B 	    ldrh r0,[r1],#2
 3853 0e9c 22F8020B 	    strh r0,[r2],#2 
 3854 0ea0 013B     	    subs r3,#1 
 3855 0ea2 F9D1     	    bne 2b 
 3856              	// report file size 
 3857 0ea4 DFF81804 	    ldr r0,=fsize 
 3858 0ea8 00B5FFF7 	    _CALL uart_puts
 3858      FEFF5DF8 
 3858      04EB
 3859 0eb2 606B     	    ldr r0,[UPP,#TXTEND]
 3860 0eb4 236B     	    ldr r3,[UPP,#TXTBGN]
 3861 0eb6 A0EB0300 	    sub r0,r3 
 3862 0eba 4FF00A01 	    mov r1,#10 
 3863 0ebe 00B5FFF7 	    _CALL print_int 
 3863      FEFF5DF8 
 3863      04EB
 3864 0ec8 FE48     	    ldr r0,=data_bytes 
 3865 0eca 00B5FFF7 	    _CALL uart_puts      
 3865      FEFF5DF8 
 3865      04EB
 3866 0ed4 7047     	    _RET 
 3867              	
 3868              	
 3869              	/*********************************
 3870              	  BASIC: SAVE "name" 
 3871              	  save program in flash memory
 3872              	  file structure:
 3873              	    .hword name_length 
 3874              	    .asciz name
 3875              	    .palign 1  
 3876              	    .hword data_length 
 3877              	    .byte  file data (variable length)  
 3878              	  use:
 3879              	    r0  temp 
 3880              	    r1  temp
 3881              	    r2  *flash 
 3882              	    r3  *ram  
 3883              	    T1  temp   
 3884              	********************************/
ARM GAS  tinyBasic.s 			page 99


 3885 0ed6 00BF     	    _FUNC save
 3886 0ed8 206C10F0 	    _CLO 
 3886      010F03D0 
 3886      4FF00700 
 3886      FFF7FEBF 
 3887 0ee8 606B     	    ldr r0,[UPP,#TXTEND]
 3888 0eea 216B     	    ldr r1,[UPP,#TXTBGN]
 3889 0eec 8842     	    cmp r0,r1
 3890 0eee 03D1     	    bne 0f 
 3891 0ef0 4FF00D00 	    mov r0,#ERR_NO_PROG
 3892 0ef4 FFF7FEBF 	    b tb_error 
 3893 0ef8 00B5FFF7 	0:  _CALL next_token 
 3893      FEFF5DF8 
 3893      04EB
 3894 0f02 0228     	    cmp r0,#TK_QSTR
 3895 0f04 7FF4FEAF 	    bne syntax_error 
 3896              	// check for existing 
 3897 0f08 0B46     	    mov r3,r1 // save name 
 3898 0f0a 1846     	    mov r0,r3  
 3899 0f0c 00B5FFF7 	    _CALL search_file
 3899      F5FE5DF8 
 3899      04EB
 3900 0f16 18B1     	    cbz r0,new_file 
 3901 0f18 4FF00800 	    mov r0,#ERR_DUPLICATE
 3902 0f1c FFF7FEBF 	    b tb_error 
 3903              	new_file:
 3904 0f20 4FF00100 	    mov r0,#1 
 3905 0f24 00B5FFF7 	    _CALL unlock 
 3905      FEFF5DF8 
 3905      04EB
 3906 0f2e E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3907 0f30 1846     	    mov r0,r3 // *name 
 3908 0f32 00B5FFF7 	    _CALL strlen 
 3908      FEFF5DF8 
 3908      04EB
 3909 0f3c 00F10400 	    add r0,#4  
 3910 0f40 20F00100 	    and r0,#-2 //even size
 3911 0f44 A0F10208 	    sub T1,r0,#2  // name length counter   
 3912 0f48 1146     	1:  mov r1,r2  
 3913 0f4a 00B5FFF7 	    _CALL hword_write   
 3913      FEFF5DF8 
 3913      04EB
 3914 0f54 02F10202 	    add r2,#2  
 3915              	// write file name      
 3916 0f58 33F8020B 	2:  ldrh r0,[r3],#2 
 3917 0f5c 1146     	    mov r1,r2 
 3918 0f5e 00B5FFF7 	    _CALL hword_write
 3918      FEFF5DF8 
 3918      04EB
 3919 0f68 02F10202 	    add r2,#2
 3920 0f6c B8F10208 	    subs T1,#2
 3921 0f70 F2D1     	    bne 2b
 3922              	// write data size 
 3923 0f72 606B     	    ldr r0,[UPP,#TXTEND]
 3924 0f74 236B     	    ldr r3,[UPP,#TXTBGN]
 3925 0f76 A0EB0300 	    sub r0,r3
 3926 0f7a 8046     	    mov T1,r0
ARM GAS  tinyBasic.s 			page 100


 3927 0f7c 1146     	    mov r1,r2 
 3928 0f7e 00B5FFF7 	    _CALL hword_write
 3928      FEFF5DF8 
 3928      04EB
 3929 0f88 02F10202 	    add r2,#2 
 3930              	// write data 
 3931 0f8c 08F10108 	    add T1,#1 
 3932 0f90 4FEA5808 	    lsr T1,#1 // .hword to write 
 3933 0f94 33F8020B 	3:  ldrh r0,[r3],#2
 3934 0f98 1146     	    mov r1,r2
 3935 0f9a 00B5FFF7 	    _CALL hword_write 
 3935      FEFF5DF8 
 3935      04EB
 3936 0fa4 02F10202 	    add r2,#2 
 3937 0fa8 B8F10108 	    subs T1,#1 
 3938 0fac F2D1     	    bne 3b
 3939 0fae 4FF00000 	    mov r0,#0 
 3940 0fb2 00B5FFF7 	    _CALL unlock
 3940      FEFF5DF8 
 3940      04EB
 3941              	// update FSFREE     
 3942 0fbc 606B     	    ldr r0,[UPP,#TXTEND]
 3943 0fbe 216B     	    ldr r1,[UPP,#TXTBGN]
 3944 0fc0 A0EB0100 	    sub r0,r1 
 3945 0fc4 8046     	    mov T1,r0 
 3946 0fc6 E16A     	    ldr r1,[UPP,#FSFREE]
 3947 0fc8 0844     	    add r0,r1 
 3948 0fca 00B5FFF7 	    _CALL page_align
 3948      FEFF5DF8 
 3948      04EB
 3949 0fd4 E062     	    str r0,[UPP,#FSFREE]
 3950 0fd6 BA48     	    ldr r0,=fsize
 3951 0fd8 00B5FFF7 	    _CALL uart_puts
 3951      FEFF5DF8 
 3951      04EB
 3952 0fe2 4046     	    mov r0,T1 
 3953 0fe4 4FF00A01 	    mov r1,#10 
 3954 0fe8 00B5FFF7 	    _CALL print_int 
 3954      FEFF5DF8 
 3954      04EB
 3955 0ff2 B448     	    ldr r0,=data_bytes 
 3956 0ff4 00B5FFF7 	    _CALL uart_puts  
 3956      FEFF5DF8 
 3956      04EB
 3957 0ffe 7047     	    _RET 
 3958 1000 66696C65 	fsize: .asciz "file size: "
 3958      2073697A 
 3958      653A2000 
 3959 100c 62797465 	data_bytes: .asciz "bytes"
 3959      7300
 3960              	
 3961              	
 3962              	/*******************************
 3963              	  BASIC: SIZE 
 3964              	  return RAM free bytes 
 3965              	*******************************/
 3966 1012 00BF     	    _FUNC size
ARM GAS  tinyBasic.s 			page 101


 3967 1014 606B     	    ldr r0,[UPP,#TXTEND]
 3968 1016 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3969 101a A1EB0001 	    sub r1,R0
 3970 101e 4FF00F00 	    mov r0,#TK_INTGR
 3971 1022 7047     	    _RET  
 3972              	
 3973              	/*********************************
 3974              	  BASIC: SLEEP 
 3975              	  place MCU lowest power mode 
 3976              	  wait for external interrpt or
 3977              	  reset.
 3978              	*********************************/
 3979              	    _FUNC sleep
 3980 1024 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3980      CEF20000 
 3981 102c 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3982 1030 0160     	    str r1,[r0]
 3983 1032 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3983      C4F20000 
 3984 103a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3985 103e 0160     	    str r1,[r0]
 3986 1040 20BF     	    wfe 
 3987 1042 7047     	    _RET 
 3988              	
 3989              	/************************************
 3990              	  BASIC: SPC(expr)
 3991              	  mov cursor right expr spaces 
 3992              	***********************************/
 3993              	    _FUNC spc 
 3994 1044 00B5FFF7 	    _CALL func_args 
 3994      FEFF5DF8 
 3994      04EB
 3995 104e 0128     	    cmp r0,#1
 3996 1050 7FF4FEAF 	    bne syntax_error 
 3997 1054 5CF8040B 	    _POP r0 
 3998 1058 00B5FFF7 	    _CALL spaces 
 3998      FEFF5DF8 
 3998      04EB
 3999 1062 7047     	    _RET 
 4000              	
 4001              	    _FUNC spi_read
 4002 1064 7047     	    _RET 
 4003              	
 4004 1066 00BF     	    _FUNC spi_enable
 4005 1068 7047     	    _RET 
 4006              	
 4007 106a 00BF     	    _FUNC spi_select
 4008 106c 7047     	    _RET 
 4009              	
 4010 106e 00BF     	    _FUNC spi_write
 4011 1070 7047     	    _RET 
 4012              	
 4013              	/******************************
 4014              	  BASIC: STOP 
 4015              	  stop program executre but 
 4016              	  keep execution state for 
 4017              	  resume 
ARM GAS  tinyBasic.s 			page 102


 4018              	******************************/
 4019 1072 00BF     	    _FUNC stop
 4020 1074 206C10F0 	    _RTO 
 4020      010F03D1 
 4020      4FF00700 
 4020      FFF7FEBF 
 4021 1084 6068     	    ldr r0,[UPP,#COUNT]
 4022 1086 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4023 108a 206C     	    ldr r0,[UPP,#FLAGS]
 4024 108c 4FF00901 	    mov r1,#FRUN+FSTOP
 4025 1090 80EA0100 	    eor r0,r1
 4026 1094 2064     	    str r0,[UPP,#FLAGS]
 4027 1096 8AEA0A0A 	    eor IN,IN 
 4028 109a 8BEA0B0B 	    eor BPTR,BPTR 
 4029 109e C4F804A0 	    str IN,[UPP,#COUNT]
 4030 10a2 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4031 10a6 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4032 10aa 4FF4A040 	    _MOV32 r0,RAM_END
 4032      C2F20000 
 4033 10b2 8546     	    mov sp,r0
 4034 10b4 FFF7FEBF 	    b cmd_line 
 4035              	
 4036              	
 4037              	/**************************
 4038              	  BASIC: TAB(expr)
 4039              	  move cursor column expr 
 4040              	**************************/
 4041              	    _FUNC tab 
 4042 10b8 00B5FFF7 	    _CALL func_args  
 4042      FEFF5DF8 
 4042      04EB
 4043 10c2 0128     	    cmp r0,#1 
 4044 10c4 7FF4FEAF 	    bne syntax_error 
 4045 10c8 5CF8040B 	    _POP r0 
 4046 10cc 00B5FFF7 	    _CALL cursor_x 
 4046      FEFF5DF8 
 4046      04EB
 4047 10d6 7047     	    _RET 
 4048              	
 4049              	/**************************
 4050              	  BASIC: TICKS 
 4051              	  return msec counter
 4052              	**************************/  
 4053              	    _FUNC get_ticks
 4054 10d8 E169     	    ldr r1,[UPP,#TICKS]
 4055 10da 4FF00F00 	    mov r0,#TK_INTGR
 4056 10de 7047     	    _RET  
 4057              	
 4058              	/*************************
 4059              	  BASIC: TIMER expr 
 4060              	  set countdown timer 
 4061              	************************/
 4062              	    _FUNC set_timer
 4063 10e0 00B5FFF7 	    _CALL expression 
 4063      FEFF5DF8 
 4063      04EB
 4064 10ea 0F28     	    cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 103


 4065 10ec 7FF4FEAF 	    bne syntax_error 
 4066 10f0 2162     	    str r1,[UPP,#TIMER]
 4067 10f2 7047     	    _RET 
 4068              	
 4069              	/***************************
 4070              	  BASIC: TIMEOUT
 4071              	  check for timer expiration 
 4072              	  return -1 true || 0 false
 4073              	****************************/
 4074              	    _FUNC timeout
 4075 10f4 81EA0101 	    eor r1,r1 
 4076 10f8 206A     	    ldr r0,[UPP,#TIMER]
 4077 10fa 08B9     	    cbnz r0,9f 
 4078 10fc 6FEA0101 	    mvn r1,r1 
 4079 1100 4FF00F00 	9:  mov r0,#TK_INTGR    
 4080 1104 7047     	    _RET 
 4081              	
 4082              	/****************************************
 4083              	  BASIC:  TONE freq, duration 
 4084              	  play a tone with frequency freq and duration
 4085              	  in milliseconds
 4086              	***********************************************/
 4087 1106 00BF     	    _FUNC tone
 4088 1108 00B5FFF7 	    _CALL arg_list 
 4088      FEFF5DF8 
 4088      04EB
 4089 1112 0228     	    cmp r0,#2 
 4090 1114 7FF4FEAF 	    bne syntax_error
 4091 1118 BCE80003 	    ldmia DP!,{T1,T2}
 4092              	    
 4093 111c 7047     	    _RET 
 4094              	
 4095              	/****************************************
 4096              	  BASIC: TRACE n 
 4097              	  enable execution trace 
 4098              	  0   ddisable
 4099              	  1   show current line#
 4100              	  2  show line#+data_stack
 4101              	  3  show line#+data_stack+main_stack 
 4102              	***************************************/
 4103 111e 00BF     	    _FUNC trace 
 4104 1120 00B5FFF7 	    _CALL next_token 
 4104      FEFF5DF8 
 4104      04EB
 4105 112a 0F28     	    cmp r0,#TK_INTGR  
 4106 112c 7FF4FEAF 	    bne syntax_error 
 4107 1130 01F00301 	    and r1,#3 
 4108 1134 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4109 1138 7047     	    _RET 
 4110              	
 4111              	
 4112              	/***************************
 4113              	  BASIC: UBOUND 
 4114              	  return last indice of @
 4115              	  output:
 4116              	    r0  TK_INTGR 
 4117              	    r1  +int 
ARM GAS  tinyBasic.s 			page 104


 4118              	**************************/
 4119 113a 00BF     	    _FUNC ubound
 4120 113c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4121 1140 D4F8D000 	    ldr r0,[UPP,#HERE]
 4122 1144 A1EB0001 	    sub r1,r0 
 4123 1148 4FEA9101 	    lsr r1,#2
 4124 114c 4FF00F00 	    mov r0,#TK_INTGR 
 4125 1150 7047     	    _RET 
 4126              	
 4127              	/****************************
 4128              	  BASIC: UFLASH 
 4129              	  return user flash address
 4130              	*****************************/
 4131 1152 00BF     	    _FUNC uflash
 4132 1154 5C49     	    ldr r1,=user
 4133 1156 4FF00F00 	    mov r0,#TK_INTGR 
 4134 115a 7047     	    _RET 
 4135              	
 4136              	
 4137              	/************************************
 4138              	  BASIC: UNTIL relation 
 4139              	  close a DO..UNTIL loop 
 4140              	  loop until relation come true 
 4141              	************************************/
 4142              	    _FUNC until
 4143 115c 00B5FFF7 	    _CALL relation 
 4143      FEFF5DF8 
 4143      04EB
 4144 1166 11B1     	    cbz r1,9f
 4145 1168 0CF1080C 	    add DP,#8
 4146 116c 7047     	    _RET  
 4147 116e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4148 1172 9BF80200 	    ldrb r0,[BPTR,#2]
 4149 1176 6060     	    str r0,[UPP,#COUNT]
 4150 1178 7047     	    _RET 
 4151              	
 4152              	/*************************************
 4153              	  BASIC: WAIT addr,expr1[,expr2] 
 4154              	  wait until *addr&expr1 is not null 
 4155              	  or until (*addr&expr1)^expr2 is null 
 4156              	***************************************/
 4157 117a 00BF     	    _FUNC wait
 4158 117c 00B5FFF7 	    _CALL arg_list 
 4158      FEFF5DF8 
 4158      04EB
 4159 1186 0228     	    cmp r0,#2
 4160 1188 03D0     	    beq 2f 
 4161 118a 0328     	    cmp r0,#3
 4162 118c 07D0     	    beq 4f
 4163 118e FFF7FEBF 	    b syntax_error 
 4164 1192 BCE80300 	2:  ldmia DP!,{r0,r1}
 4165 1196 0A88     	3:  ldrh r2,[r1]
 4166 1198 0240     	    ands r2,r0 
 4167 119a FCD0     	    beq 3b 
 4168 119c 06E0     	    b 9f 
 4169 119e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4170 11a2 1388     	5:  ldrh r3,[r2]
ARM GAS  tinyBasic.s 			page 105


 4171 11a4 83EA0003 	    eor r3,r0
 4172 11a8 0B40     	    ands r3,r1 
 4173 11aa FAD0     	    beq 5b 
 4174 11ac 7047     	9:  _RET 
 4175              	
 4176              	/*********************************************
 4177              	  BASIC: WORDS 
 4178              	  print list of BASIC WORDS in dictionary 
 4179              	  use:
 4180              	    r0,r1,T1,T2  
 4181              	********************************************/
 4182 11ae 00BF     	    _FUNC words
 4183 11b0 206C10F0 	    _CLO 
 4183      010F03D0 
 4183      4FF00700 
 4183      FFF7FEBF 
 4184 11c0 DFF80881 	    ldr T1,=kword_dict
 4185 11c4 89EA0909 	    eor T2,T2 
 4186              	1:  
 4187 11c8 4046     	    mov r0,T1
 4188 11ca 00B5FFF7 	    _CALL strlen
 4188      FEFF5DF8 
 4188      04EB
 4189 11d4 E0B1     	    cbz r0,9f 
 4190 11d6 8144     	    add T2,r0 
 4191 11d8 B9F1500F 	    cmp T2,#80 
 4192 11dc 06D4     	    bmi 2f
 4193 11de 89EA0909 	    eor T2,T2  
 4194 11e2 00B5FFF7 	    _CALL cr 
 4194      FEFF5DF8 
 4194      04EB
 4195 11ec 4046     	2:  mov r0,T1 
 4196 11ee 00B5FFF7 	    _CALL uart_puts 
 4196      FEFF5DF8 
 4196      04EB
 4197 11f8 4FF02000 	    mov r0,#SPACE
 4198 11fc 09F10109 	    add T2,#1  
 4199 1200 00B5FFF7 	    _CALL uart_putc 
 4199      FEFF5DF8 
 4199      04EB
 4200 120a 58F80C8C 	    ldr T1,[T1,#-12]
 4201 120e DBE7     	    b 1b 
 4202 1210 7047     	9:  _RET 
 4203              	
 4204              	
 4205              	/**************************************
 4206              	  BASIC: XOR(expr1,expr2)
 4207              	  binary exclusive or between 2 expressions
 4208              	**************************************/
 4209 1212 00BF     	    _FUNC bit_xor
 4210 1214 00B5FFF7 	    _CALL func_args
 4210      FEFF5DF8 
 4210      04EB
 4211 121e 0228     	    cmp r0,#2
 4212 1220 7FF4FEAF 	    bne syntax_error
 4213 1224 5CF8040B 	    _POP r0
 4214 1228 5CF8041B 	    _POP r1 
ARM GAS  tinyBasic.s 			page 106


 4215 122c 81EA0001 	    eor r1,r0 
 4216 1230 4FF00F00 	    mov r0,#TK_INTGR
 4217 1234 7047     	    _RET 
 4218              	
 4219              	/**********************************
 4220              	     argument stack manipulation
 4221              	**********************************/
 4222              	
 4223              	/**********************************
 4224              	  BASIC PUSH expr[,expr] 
 4225              	  push integers on stack 
 4226              	*********************************/
 4227 1236 00BF     	    _FUNC cmd_push 
 4228 1238 00B5FFF7 	    _CALL arg_list
 4228      FEFF5DF8 
 4228      04EB
 4229 1242 7047     	    _RET 
 4230              	
 4231              	/********************************
 4232              	  BASIC: POP 
 4233              	  pop an integer out of stack 
 4234              	********************************/    
 4235              	    _FUNC fn_pop 
 4236 1244 5CF8041B 	    _POP r1 
 4237 1248 4FF00F00 	    mov r0,#TK_INTGR 
 4238 124c 7047     	    _RET 
 4239              	
 4240              	/*******************************
 4241              	  BASIC: DROP n 
 4242              	  discard n integer from stack
 4243              	*******************************/
 4244 124e 00BF     	    _FUNC drop 
 4245 1250 00B5FFF7 	    _CALL expression 
 4245      FEFF5DF8 
 4245      04EB
 4246 125a 0F28     	    cmp r0,#TK_INTGR 
 4247 125c 7FF4FEAF 	    bne syntax_error 
 4248 1260 4FF00400 	    mov r0,#4 
 4249 1264 01FB00F0 	    mul r0,r1 
 4250 1268 8444     	    add DP,r0 
 4251 126a 7047     	    _RET 
 4252              	
 4253              	/********************************
 4254              	  BASIC: pick(n) 
 4255              	  retreive nth element from stack 
 4256              	********************************/
 4257              	    _FUNC pick 
 4258 126c 00B5FFF7 	    _CALL func_args
 4258      FEFF5DF8 
 4258      04EB
 4259 1276 0128     	    cmp r0,#1 
 4260 1278 7FF4FEAF 	    bne syntax_error 
 4261 127c 5CF8040B 	    _POP r0
 4262 1280 4FF00401 	    mov r1,#4 
 4263 1284 01FB00F0 	    mul r0,r1 
 4264 1288 5CF80010 	    ldr r1,[DP,r0]
 4265 128c 4FF00F00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 107


 4266 1290 7047     	    _RET 
 4267              	
 4268              	/*************************************
 4269              	  BASIC: store value,n  
 4270              	  store value at nth position on stack
 4271              	**************************************/
 4272 1292 00BF     	    _FUNC store 
 4273 1294 00B5FFF7 	    _CALL arg_list 
 4273      FEFF5DF8 
 4273      04EB
 4274 129e 0228     	    cmp r0,#2 
 4275 12a0 7FF4FEAF 	    bne syntax_error 
 4276 12a4 5CF8040B 	    _POP r0 
 4277 12a8 4FF00401 	    mov r1,#4 
 4278 12ac 01FB00F0 	    mul r0,r1 
 4279 12b0 5CF8041B 	    _POP r1
 4280 12b4 4CF80010 	    str r1,[DP,r0]
 4281 12b8 7047     	    _RET 
 4282              	
 4283              	
 4284 12ba 0000     	  .section .rodata.user
 4285              	  .p2align 10 
 4286              	user:
 4287 0000 FFFFFFFF 	  .space 1024,255
 4287      FFFFFFFF 
 4287      FFFFFFFF 
 4287      FFFFFFFF 
 4287      FFFFFFFF 
 4288              	
 4289              	/*************************************************
 4290              	   extra FLASH memory not used by Tiny BASIC
 4291              	   is used to save BASIC programs.
 4292              	************************************************/
 4293              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4294              	  .section .rodata.fs
 4295              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 108


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 110


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 111


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 INP
      tbi_macros.inc:38     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:53     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:54     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:55     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:56     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:57     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:58     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:59     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:60     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:61     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:62     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:63     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:64     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:65     *ABS*:0000000000000011 TK_MINUS
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:66     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:67     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:68     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:69     *ABS*:0000000000000040 TK_LBL
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:116    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:118    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:124    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:141    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:142    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:143    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:144    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:145    *ABS*:0000000000000010 DATA
      tbi_macros.inc:146    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:147    *ABS*:0000000000000018 BASE
      tbi_macros.inc:148    *ABS*:000000000000001c TICKS
      tbi_macros.inc:149    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:150    *ABS*:0000000000000024 SEED
      tbi_macros.inc:151    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:152    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:153    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:154    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:155    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:156    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:157    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:158    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:159    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:160    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:161    *ABS*:0000000000000050 RX_QUEUE
ARM GAS  tinyBasic.s 			page 113


      tbi_macros.inc:162    *ABS*:0000000000000060 VARS
      tbi_macros.inc:163    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:164    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:165    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:166    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:167    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:170    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:171    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:172    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:173    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:174    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:175    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:176    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:178    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:180    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:181    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CONST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b DATA_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATALN_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DEC_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DIR_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DO_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DROP_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DUMP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 END_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 ERASE_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FLASH_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOSUB_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GOTO_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 HEX_IDX
       cmd_index.inc:51     *ABS*:000000000000001a IF_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INP_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INPUT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d INVERT_IDX
       cmd_index.inc:55     *ABS*:000000000000001e KEY_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LET_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LIST_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOAD_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
ARM GAS  tinyBasic.s 			page 114


       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PICK_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POP_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PRT_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PUSH_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 QKEY_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 READ_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 REM_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 REST_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RET_IDX
       cmd_index.inc:83     *ABS*:000000000000003a RND_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RSHIFT_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RUN_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SAVE_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SIZE_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SLEEP_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPC_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 STEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STOP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STORE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 TAB_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 THEN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TICKS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TIMER_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TMROUT_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TO_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TRACE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UBOUND_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UFLASH_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UNTIL_IDX
       cmd_index.inc:103    *ABS*:000000000000004e WAIT_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WORDS_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 XOR_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:2077   .text:000000000000118c expression
         tinyBasic.s:1786   .text:0000000000000eb0 next_token
         tinyBasic.s:1338   .text:0000000000000abc syntax_error
         tinyBasic.s:379    .text:00000000000002c4 search_label
         tinyBasic.s:417    .text:00000000000002ec search_lineno
         tinyBasic.s:1353   .text:0000000000000ac4 tb_error
         tinyBasic.s:348    .text:0000000000000294 search_const
         tinyBasic.s:448    .text:000000000000030c delete_line
         tinyBasic.s:473    .text:0000000000000338 create_gap
         tinyBasic.s:498    .text:0000000000000360 insert_line
         tinyBasic.s:537    .text:00000000000003b0 compile
         tinyBasic.s:1690   .text:0000000000000e04 pad
         tinyBasic.s:828    .text:000000000000066c parse_int
         tinyBasic.s:615    .text:0000000000000458 comp_token
         tinyBasic.s:696    .text:000000000000055c store_r0
         tinyBasic.s:922    .text:000000000000070c skip
         tinyBasic.s:941    .text:0000000000000724 upper
         tinyBasic.s:730    .text:000000000000059c is_special
         tinyBasic.s:752    .text:00000000000005e4 token_ofs
         tinyBasic.s:630    .text:0000000000000498 tok_idx0
         tinyBasic.s:699    .text:0000000000000562 try_number
         tinyBasic.s:634    .text:000000000000049a single
         tinyBasic.s:747    .text:00000000000005d2 tok_single
         tinyBasic.s:638    .text:00000000000004a2 label
         tinyBasic.s:786    .text:0000000000000610 parse_label
         tinyBasic.s:713    .text:0000000000000596 token_exit
         tinyBasic.s:645    .text:00000000000004ba lt
         tinyBasic.s:651    .text:00000000000004c8 gt
         tinyBasic.s:664    .text:00000000000004ec bkslash
         tinyBasic.s:671    .text:0000000000000502 prt_cmd
         tinyBasic.s:677    .text:0000000000000514 quote
         tinyBasic.s:861    .text:00000000000006a4 parse_quote
         tinyBasic.s:682    .text:0000000000000528 tick
         tinyBasic.s:1079   .text:00000000000007e0 parse_keyword
         tinyBasic.s:744    .text:00000000000005bc char_list
         tinyBasic.s:745    .text:00000000000005bc $d
         tinyBasic.s:753    .text:00000000000005e4 $d
         tinyBasic.s:770    .text:000000000000060e $t
         tinyBasic.s:1007   .text:0000000000000774 is_letter
         tinyBasic.s:1038   .text:0000000000000794 atoi
         tinyBasic.s:892    .text:00000000000006d8 get_escaped_char
         tinyBasic.s:909    .text:0000000000000702 escaped
         tinyBasic.s:909    .text:0000000000000702 $d
         tinyBasic.s:922    .text:000000000000070a $t
         tinyBasic.s:959    .text:0000000000000734 is_digit
         tinyBasic.s:983    .text:0000000000000750 is_hex
         tinyBasic.s:2376   .rodata.dictionary:00000000000005f4 kword_dict
         tinyBasic.s:1505   .text:0000000000000c40 search_dict
         tinyBasic.s:1130   .text:0000000000000868 cmd_name
         tinyBasic.s:1156   .text:000000000000088c decompile_line
         tinyBasic.s:1173   .text:00000000000008d2 decomp_loop
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1295   .text:0000000000000a6b single_char
         tinyBasic.s:1291   .text:0000000000000a62 ge_str
         tinyBasic.s:1292   .text:0000000000000a65 le_str
         tinyBasic.s:1293   .text:0000000000000a68 ne_str
         tinyBasic.s:1291   .text:0000000000000a62 $d
         tinyBasic.s:1315   .text:0000000000000aa4 modulo
         tinyBasic.s:1315   .text:0000000000000aa2 $t
         tinyBasic.s:1386   .text:0000000000000b54 compile_error
         tinyBasic.s:1357   .text:0000000000000acc rt_error
         tinyBasic.s:1401   .text:0000000000000ba6 rt_error_msg
         tinyBasic.s:1405   .text:0000000000000bc6 err_msg
         tinyBasic.s:1402   .text:0000000000000bb7 token_at_msg
         tinyBasic.s:2828   .text.basic:00000000000003ba dump01
         tinyBasic.s:1703   .text:0000000000000e14 warm_start
         tinyBasic.s:1401   .text:0000000000000ba6 $d
         tinyBasic.s:1413   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1414   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1415   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1416   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1417   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1418   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1419   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1420   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1421   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1422   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1423   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1424   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1425   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1426   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1427   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1428   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1430   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1431   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1432   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1442   .text:0000000000000c0a $t
         tinyBasic.s:1442   .text:0000000000000c0c skip_line
         tinyBasic.s:1459   .text:0000000000000c14 BTGL
         tinyBasic.s:1477   .text:0000000000000c18 kword_cmp
         tinyBasic.s:1543   .text:0000000000000c7e cold_start
         tinyBasic.s:1566   .text:0000000000000cdc src_addr
         tinyBasic.s:1568   .text:0000000000000ce0 dest_addr
         tinyBasic.s:1689   .text:0000000000000e00 tib
         tinyBasic.s:1570   .text:0000000000000ce4 sysvar_size
         tinyBasic.s:1581   .text:0000000000000ce8 prt_version
         tinyBasic.s:1637   .text:0000000000000d8c clear_basic
         tinyBasic.s:3698   .text.basic:0000000000000cd8 search_free
         tinyBasic.s:1567   .text:0000000000000cdc $d
         tinyBasic.s:2256   .rodata:0000000000000000 uzero
         tinyBasic.s:2282   .rodata:00000000000000d4 ulast
         tinyBasic.s:1581   .text:0000000000000ce8 $t
         tinyBasic.s:1604   .text:0000000000000d4c version_msg
         tinyBasic.s:1606   .text:0000000000000d6c version
         tinyBasic.s:1605   .text:0000000000000d4c $d
         tinyBasic.s:1621   .text:0000000000000d70 clear_vars
         tinyBasic.s:1672   .text:0000000000000dd4 warm_init
         tinyBasic.s:1688   .text:0000000000000dfc dstack
         tinyBasic.s:1687   .text:0000000000000df8 mstack
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:1687   .text:0000000000000df8 $d
         tinyBasic.s:1691   .text:0000000000000e08 array
         tinyBasic.s:1692   .text:0000000000000e0c ready
         tinyBasic.s:1723   .text:0000000000000e2c cmd_line
         tinyBasic.s:1735   .text:0000000000000e60 interpreter
         tinyBasic.s:1770   .text:0000000000000ea4 execute
         tinyBasic.s:3153   .text.basic:00000000000006fa let_var
         tinyBasic.s:3158   .text.basic:0000000000000706 let_array
         tinyBasic.s:2385   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1792   .text:0000000000000ebe end_of_line
         tinyBasic.s:1796   .text:0000000000000ec8 next_line
         tinyBasic.s:1843   .text:0000000000000f48 tok_jmp
         tinyBasic.s:1844   .text:0000000000000f48 $d
         tinyBasic.s:1874   .text:0000000000000f8c expect
         tinyBasic.s:1893   .text:0000000000000fa8 func_args
         tinyBasic.s:1913   .text:0000000000000fd4 arg_list
         tinyBasic.s:1947   .text:0000000000001014 factor
         tinyBasic.s:2185   .text:0000000000001278 get_array_element
         tinyBasic.s:2223   .text:00000000000012a0 get_var
         tinyBasic.s:2026   .text:0000000000001110 term
         tinyBasic.s:2119   .text:00000000000011f4 relation
         tinyBasic.s:2166   .text:000000000000126e relop_jmp
         tinyBasic.s:2138   .text:000000000000123e rel_idx0
         tinyBasic.s:2139   .text:000000000000123e rel_eq
         tinyBasic.s:2156   .text:0000000000001254 rel_false
         tinyBasic.s:2142   .text:0000000000001242 rel_lt
         tinyBasic.s:2145   .text:0000000000001246 rel_le
         tinyBasic.s:2148   .text:000000000000124a rel_gt
         tinyBasic.s:2151   .text:000000000000124e rel_ge
         tinyBasic.s:2154   .text:0000000000001252 rel_diff
         tinyBasic.s:2167   .text:000000000000126e $d
         tinyBasic.s:2205   .text:000000000000128c set_array_element
         tinyBasic.s:2241   .text:00000000000012b0 set_var
         tinyBasic.s:4295   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2277   .rodata:0000000000000050 $d
         tinyBasic.s:2290   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2289   *ABS*:0000000000000000 link
         tinyBasic.s:2377   .rodata.dictionary:00000000000005f4 LINK
         tinyBasic.s:2291   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2372   .rodata.dictionary:00000000000005e8 first_link
         tinyBasic.s:2419   .text.basic:0000000000000000 abs
         tinyBasic.s:2441   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2456   .text.basic:0000000000000054 ascii
         tinyBasic.s:2481   .text.basic:000000000000009c awu
         tinyBasic.s:2521   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2543   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2568   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2608   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2592   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2631   .text.basic:00000000000001e4 char
         tinyBasic.s:2648   .text.basic:0000000000000204 const
         tinyBasic.s:2687   .text.basic:0000000000000288 data_line
         tinyBasic.s:2792   .text.basic:0000000000000380 dec_base
         tinyBasic.s:3763   .text.basic:0000000000000d44 directory
         tinyBasic.s:2801   .text.basic:0000000000000388 do_loop
         tinyBasic.s:4244   .text.basic:0000000000001250 drop
         tinyBasic.s:2816   .text.basic:0000000000000390 dump
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:2866   .text.basic:000000000000043c cmd_end
         tinyBasic.s:2894   .text.basic:000000000000047c erase
         tinyBasic.s:2874   .text.basic:0000000000000444 flash
         tinyBasic.s:2905   .text.basic:0000000000000490 for
         tinyBasic.s:3803   .text.basic:0000000000000dfc forget
         tinyBasic.s:2986   .text.basic:000000000000054c gosub
         tinyBasic.s:3012   .text.basic:000000000000058c goto
         tinyBasic.s:3021   .text.basic:0000000000000598 hex_base
         tinyBasic.s:3030   .text.basic:00000000000005a0 if
         tinyBasic.s:3304   .text.basic:00000000000008c0 inp
         tinyBasic.s:3049   .text.basic:00000000000005b8 input_var
         tinyBasic.s:3117   .text.basic:00000000000006b0 invert
         tinyBasic.s:3130   .text.basic:00000000000006d0 key
         tinyBasic.s:3146   .text.basic:00000000000006e4 let
         tinyBasic.s:3189   .text.basic:0000000000000770 list
         tinyBasic.s:3832   .text.basic:0000000000000e48 load
         tinyBasic.s:3255   .text.basic:0000000000000844 lshift
         tinyBasic.s:3269   .text.basic:0000000000000864 new
         tinyBasic.s:2950   .text.basic:00000000000004f4 next
         tinyBasic.s:3278   .text.basic:0000000000000884 func_not
         tinyBasic.s:3290   .text.basic:000000000000089c bit_or
         tinyBasic.s:3328   .text.basic:0000000000000918 out
         tinyBasic.s:3353   .text.basic:000000000000097c pad_ref
         tinyBasic.s:3364   .text.basic:0000000000000988 pause
         tinyBasic.s:3392   .text.basic:00000000000009a4 pin_mode
         tinyBasic.s:3457   .text.basic:0000000000000a70 peek8
         tinyBasic.s:3470   .text.basic:0000000000000a8c peek16
         tinyBasic.s:3483   .text.basic:0000000000000aa8 peek32
         tinyBasic.s:4257   .text.basic:000000000000126c pick
         tinyBasic.s:3497   .text.basic:0000000000000ac4 poke8
         tinyBasic.s:3509   .text.basic:0000000000000adc poke16
         tinyBasic.s:3521   .text.basic:0000000000000af4 poke32
         tinyBasic.s:4235   .text.basic:0000000000001244 fn_pop
         tinyBasic.s:3535   .text.basic:0000000000000b0c print
         tinyBasic.s:4227   .text.basic:0000000000001238 cmd_push
         tinyBasic.s:3602   .text.basic:0000000000000bf4 qkey
         tinyBasic.s:2717   .text.basic:00000000000002dc read
         tinyBasic.s:2759   .text.basic:000000000000033c restore
         tinyBasic.s:3001   .text.basic:0000000000000574 return
         tinyBasic.s:3614   .text.basic:0000000000000c10 random
         tinyBasic.s:3637   .text.basic:0000000000000c54 rshift
         tinyBasic.s:3650   .text.basic:0000000000000c74 run
         tinyBasic.s:3885   .text.basic:0000000000000ed8 save
         tinyBasic.s:3966   .text.basic:0000000000001014 size
         tinyBasic.s:3979   .text.basic:0000000000001024 sleep
         tinyBasic.s:3993   .text.basic:0000000000001044 spc
         tinyBasic.s:2936   .text.basic:00000000000004dc step
         tinyBasic.s:4019   .text.basic:0000000000001074 stop
         tinyBasic.s:4272   .text.basic:0000000000001294 store
         tinyBasic.s:4041   .text.basic:00000000000010b8 tab
         tinyBasic.s:3041   .text.basic:00000000000005b4 then
         tinyBasic.s:4053   .text.basic:00000000000010d8 get_ticks
         tinyBasic.s:4062   .text.basic:00000000000010e0 set_timer
         tinyBasic.s:4074   .text.basic:00000000000010f4 timeout
         tinyBasic.s:2923   .text.basic:00000000000004c4 to
         tinyBasic.s:4103   .text.basic:0000000000001120 trace
         tinyBasic.s:4119   .text.basic:000000000000113c ubound
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:4131   .text.basic:0000000000001154 uflash
         tinyBasic.s:4142   .text.basic:000000000000115c until
         tinyBasic.s:4157   .text.basic:000000000000117c wait
         tinyBasic.s:4182   .text.basic:00000000000011b0 words
         tinyBasic.s:4209   .text.basic:0000000000001214 bit_xor
         tinyBasic.s:2419   .text.basic:0000000000000000 $t
         tinyBasic.s:2431   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2434   .text.basic:000000000000002c analog_read
         tinyBasic.s:2473   .text.basic:0000000000000098 autorun
         tinyBasic.s:3357   .text.basic:0000000000000984 pad_adr
         tinyBasic.s:2736   .text.basic:0000000000000314 seek_next
         tinyBasic.s:2781   .text.basic:0000000000000372 no_data_line
         tinyBasic.s:2777   .text.basic:000000000000036c try_next_line
         tinyBasic.s:2840   .text.basic:00000000000003dc print_dump_header
         tinyBasic.s:2898   .text.basic:000000000000048c user_space
         tinyBasic.s:2898   .text.basic:000000000000048c $d
         tinyBasic.s:4286   .rodata.user:0000000000000000 user
         tinyBasic.s:2905   .text.basic:0000000000000490 $t
         tinyBasic.s:2989   .text.basic:000000000000055a target
         tinyBasic.s:3110   .text.basic:00000000000006ac str_buffer
         tinyBasic.s:3109   .text.basic:00000000000006a8 input_buffer
         tinyBasic.s:3109   .text.basic:00000000000006a8 $d
         tinyBasic.s:3117   .text.basic:00000000000006b0 $t
         tinyBasic.s:3234   .text.basic:000000000000081c out_buff
         tinyBasic.s:3234   .text.basic:000000000000081c $d
         tinyBasic.s:3240   .text.basic:0000000000000820 $t
         tinyBasic.s:3240   .text.basic:0000000000000820 log2
         tinyBasic.s:3357   .text.basic:0000000000000984 $d
         tinyBasic.s:3364   .text.basic:0000000000000988 $t
         tinyBasic.s:3590   .text.basic:0000000000000bda unget_exit
         tinyBasic.s:3592   .text.basic:0000000000000be2 print_exit
         tinyBasic.s:3751   .text.basic:0000000000000d40 fs_addr
         tinyBasic.s:3726   .text.basic:0000000000000cfc search_file
         tinyBasic.s:3730   .text.basic:0000000000000d04 cmp_loop
         tinyBasic.s:3751   .text.basic:0000000000000d40 $d
         tinyBasic.s:3763   .text.basic:0000000000000d44 $t
         tinyBasic.s:3786   .text.basic:0000000000000dbc no_more_file
         tinyBasic.s:3796   .text.basic:0000000000000df4 fcount
         tinyBasic.s:3796   .text.basic:0000000000000df4 $d
         tinyBasic.s:3958   .text.basic:0000000000001000 fsize
         tinyBasic.s:3959   .text.basic:000000000000100c data_bytes
         tinyBasic.s:3903   .text.basic:0000000000000f20 new_file
         tinyBasic.s:3958   .text.basic:0000000000001000 $d
         tinyBasic.s:3966   .text.basic:0000000000001012 $t
         tinyBasic.s:4001   .text.basic:0000000000001064 spi_read
         tinyBasic.s:4004   .text.basic:0000000000001068 spi_enable
         tinyBasic.s:4007   .text.basic:000000000000106c spi_select
         tinyBasic.s:4010   .text.basic:0000000000001070 spi_write
         tinyBasic.s:4087   .text.basic:0000000000001108 tone
         tinyBasic.s:4285   .rodata.user:0000000000000000 $d
         tinyBasic.s:4284   .text.basic:00000000000012ba $d
         tinyBasic.s:4295   .text.basic:00000000000012bc $d
         tinyBasic.s:4295   .text:00000000000012c0 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
ARM GAS  tinyBasic.s 			page 120


         tinyBasic.s:751    .text:00000000000005e1 $d
         tinyBasic.s:751    .text:00000000000005e2 $t
         tinyBasic.s:1608   .text:0000000000000d6d $d
         tinyBasic.s:1608   .text:0000000000000d6e $t
         tinyBasic.s:1703   .text:0000000000000e13 $d
         tinyBasic.s:1703   .text:0000000000000e14 $t
         tinyBasic.s:1859   .text:0000000000000f89 $d
         tinyBasic.s:1859   .text:0000000000000f8a $t
         tinyBasic.s:2185   .text:0000000000001275 $d
         tinyBasic.s:2185   .text:0000000000001276 $t
         tinyBasic.s:3803   .text.basic:0000000000000dfb $d
         tinyBasic.s:3803   .text.basic:0000000000000dfc $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
flash_store
erase_page
uart_getc
tabulation
uart_qkey
page_align
unlock
hword_write
