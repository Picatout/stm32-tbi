ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  74              	  .equ TK_GE,0x33      // relation operator '>='
  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<='
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
ARM GAS  tinyBasic.s 			page 7


  85              	
  86              	//--------------------------------------
  87              	//   error codes 
  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	  .equ ARRAY_ADR,FREE_RAM+4 // array address at bottom of pad  
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  .macro _UNGET_TOKEN 
 236              	  ldr IN,[UPP,#IN_SAVED]
 237              	  ldr BPTR,[UPP,#BASICPTR] 
 238              	  .endm 
 239              	
 240              	 // create a text data 
 241              	 .macro _TEXT label,text
 242              	 \label: .asciz "\text"
 243              	 .p2align 2 
 244              	 .endm 
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
ARM GAS  tinyBasic.s 			page 10


  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
ARM GAS  tinyBasic.s 			page 11


  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
ARM GAS  tinyBasic.s 			page 12


 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 ???? 06B4     	    push {r1,r2}
  52 ???? 81EA0101 	    eor r1,r1  // strlen 
  53 ???? 10F8012B 	1:  ldrb r2,[r0],#1 
  54 ???? 12B1     	    cbz r2,9f  
  55 ???? 01F10101 	    add r1,#1 
  56 ???? F9E7     	    b 1b 
  57 ???? 0846     	9:  mov r0,r1 
  58 ???? 06BC     	    pop {r1,r2}
  59 ???? 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 ???? 08B4     	    push {r3} 
  76 ???? 1240     	    ands r2,r2
  77 ???? 10D0     	    beq 9f 
  78 ???? 8842     	    cmp r0,r1 
  79 ???? 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 ???? 10F8013B 	    ldrb r3,[r0],#1
  82 ???? 01F8013B 	    strb r3,[r1],#1
  83 ???? 013A     	    subs r2,#1
  84 ???? F9D1     	    bne move_from_low
  85 ???? 07E0     	    b 9f 
ARM GAS  tinyBasic.s 			page 13


  86              	move_from_end: // move from high address toward low 
  87 ???? 1044     	    add r0,r0,r2 
  88 ???? 1144     	    add r1,r1,r2     
  89 ???? 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 ???? 01F8013D 	    strb r3,[r1,#-1]!
  91 ???? 013A     	    subs r2,#1
  92 ???? F9D1     	    bne 1b 
  93 ???? 08BC     	9:  pop {r3}
  94 ???? 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 ???? 07B4     	    push {r0,r1,r2}
 110 ???? 10F8012B 	1:  ldrb r2,[r0],#1
 111 ???? 12B1     	    cbz  r2, 9f 
 112 ???? 01F8012B 	    strb r2,[r1],#1
 113 ???? F9E7     	    b 1b 
 114 ???? 0A70     	9:  strb r2,[r1] 
 115 ???? 07BC     	    pop {r0,r1,r2}
 116 ???? 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 ???? 8CB4     	    push {r2,r3,r7}
 135 ???? 0246     	    mov r2, r0
 136              	1:
 137 ???? 12F8013B 	    ldrb r3,[r2],#1  
 138 ???? 11F8017B 	    ldrb r7,[r1],#1
 139 ???? 13B1     	    cbz r3, 2f 
 140 ???? 0FB1     	    cbz r7, 2f 
 141 ???? D81B     	    subs r0,r3,r7 
 142 ???? F7D0     	    beq 1b
ARM GAS  tinyBasic.s 			page 14


 143 ???? A3EB0700 	2:  sub r0,r3,r7 
 144 ???? 8CBC     	    pop {r2,r3,r7}
 145 ???? 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 ???? 03B4     	    push {r0,r1}
 160 ???? 1248     	    ldr r0,tok_msg 
 161 ???? 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 ???? 01BC     	    pop {r0}
 163 ???? 4FF01001 	    mov r1,#16 
 164 ???? 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 ???? 4FF02000 	    mov r0,#SPACE 
 166 ???? 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 ???? 01BC     	    pop {r0}
 168 ???? 4FF01001 	    mov r1,#16 
 169 ???? 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 ???? 4FF00D00 	    mov r0,#CR 
 171 ???? 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 ???? 7047     	    _RET 
 173 ???? 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 ???? 0FB4     	    push {r0,r1,r2,r3}
ARM GAS  tinyBasic.s 			page 15


 189 ???? 0246     	    mov r2,r0
 190 ???? 0B46     	    mov r3,r1  
 191 ???? 4FF01001 	    mov r1,#16 
 192 ???? 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 ???? 4FF00300 	    mov r0,#3
 194 ???? 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 ???? 12F8010B 	1:  ldrb r0,[r2],#1 
 197 ???? 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 ???? 013B     	    subs r3,#1 
 199 ???? F6D1     	    bne 1b 
 200 ???? 4FF00200 	    mov r0,#2 
 201 ???? 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 ???? 03BC     	    pop {r0,r1}
 204 ???? 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 ???? 4FF00D00 	    mov r0,#CR 
 206 ???? 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 ???? 1046     	    mov r0,r2
 208 ???? 0CBC     	    pop {r2,r3}      
 209 ???? 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 ???? 00BF     	    _FUNC prt_chars 
 224 ???? 04B4     	    push {r2}
 225 ???? 0246     	    mov r2,r0
 226 ???? 12F8010B 	1:  ldrb r0,[r2],#1 
 227 ???? 2028     	    cmp r0,#SPACE 
 228 ???? 01D5     	    bpl 2f 
 229 ???? 4FF05F00 	    mov r0,#'_' 
 230 ???? 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 ???? 0139     	    subs r1,#1 
ARM GAS  tinyBasic.s 			page 16


 232 ???? F2D1     	    bne 1b 
 233 ???? 1046     	    mov r0,r2 
 234 ???? 04BC     	    pop {r2}
 235 ???? 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	    dump 
 239              	    print memory content in hexadecimal 
 240              	    16 bytes per row 
 241              	    input:
 242              	      r0  address 
 243              	      r1  count 
 244              	    ouput:
 245              	      none 
 246              	    use:
 247              	
 248              	****************************************/
 249              	    _FUNC dump 
 250 ???? 04B4     	    push {r2}
 251 ???? 0A46     	    mov r2,r1 
 252 ???? 4FF01001 	1:  mov r1,#16
 253 ???? 00B5FFF7 	    _CALL prt_row 
 253      B5FF5DF8 
 253      04EB
 254 ???? 103A     	    subs r2,#16 
 255 ???? F6D5     	    bpl 1b 
 256 ???? 04BC     	2:  pop {r2}
 257 ???? 7047     	    _RET 
 258              	
 259              	/***************************************
 260              	    search_lineno 
 261              	    localize BASIC line from its number 
 262              	    input:
 263              	      r0   line# 
 264              	    output: 
 265              	      r0   adr where found || adr new to be inserted 
 266              	      r1   0 found || !0 not found  
 267              	    use:
 268              	      r0   scan address 
 269              	      r1   temp   
 270              	      r2   address end of text
 271              	      r3   target line#
 272              	****************************************/    
 273 ???? 00BF     	    _FUNC search_lineno
 274 ???? 0CB4     	    push {r2,r3} 
 275 ???? 0346     	    mov r3,r0 // target 
 276 ???? 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 277 ???? 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 278 ???? 9042     	1:  cmp r0,r2 
 279 ???? 05D0     	    beq  8f
 280 ???? 0188     	    ldrh r1,[r0]
 281 ???? C91A     	    subs r1,r3 
 282 ???? 04D5     	    bpl 9f 
 283 ???? 8178     	    ldrb r1,[r0,#2]
 284 ???? 0844     	    add r0,r1
 285 ???? F7E7     	    b 1b 
 286 ???? 4FF0FF31 	8:  mov r1,#-1 
ARM GAS  tinyBasic.s 			page 17


 287 ???? 0CBC     	9:  pop {r2,r3}
 288 ???? 7047     	    _RET 
 289              	
 290              	
 291              	/********************************************
 292              	    delete_line 
 293              	    delete BASIC line at addr 
 294              	    input:
 295              	      r0    address 
 296              	    output:
 297              	      r0    address  
 298              	    use: 
 299              	      r1    dest adr
 300              	      r2    bytes to move 
 301              	      T1    length line to delete 
 302              	      T2    txtend 
 303              	********************************************/
 304              	    _FUNC delete_line 
 305 ???? 2DE90703 	    push {r0,r1,r2,T1,T2}
 306 ???? 0146     	    mov r1,r0 // dest 
 307 ???? 91F80280 	    ldrb T1,[r1,#2] // line length 
 308 ???? 4044     	    add r0,T1  // src
 309 ???? D4F83490 	    ldr T2,[UPP,#TXTEND]
 310 ???? A9EB0002 	    sub r2,T2,r0 // bytes to move 
 311 ???? 00B5FFF7 	    _CALL cmove
 311      FEFF5DF8 
 311      04EB
 312 ???? A9EB0809 	    sub T2,T1 // txtend-count 
 313 ???? C4F83480 	    str T1,[UPP,#TXTEND] 
 314 ???? BDE80703 	    pop {r0,r1,r2,T1,T2}
 315 ???? 7047     	    _RET 
 316              	
 317              	/******************************************
 318              	    create_gap 
 319              	    create a gap in text area to insert new line 
 320              	    input:
 321              	      r0    adr 
 322              	      r1    length 
 323              	    output:
 324              	      r0    adr 
 325              	    use:
 326              	      T1    length 
 327              	      T2    txtend 
 328              	************************************************/
 329              	    _FUNC create_gap 
 330 ???? 2DE90503 	    push {r0,r2,T1,T2}
 331 ???? 8846     	    mov T1,R1
 332 ???? 0144     	    add r1,r0  // dest 
 333 ???? D4F83490 	    ldr T2,[UPP,#TXTEND]
 334 ???? A9EB0002 	    sub r2,T2,r0 
 335 ???? 00B5FFF7 	    _CALL cmove
 335      FEFF5DF8 
 335      04EB
 336 ???? C144     	    add T2,T1 
 337 ???? C4F83490 	    str T2,[UPP,#TXTEND]
 338 ???? BDE80503 	    pop {r0,r2,T1,T2}
 339 ???? 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 18


 340              	
 341              	/************************************************
 342              	    insert_line 
 343              	    insert BASIC line in text area 
 344              	    first search if line with same number exist 
 345              	    replace if so. 
 346              	    input:
 347              	      r0    *buffer to insert 
 348              	    output:
 349              	      none 
 350              	    use: 
 351              	      T1     *buffer
 352              	      T2     temp  
 353              	************************************************/ 
 354 ???? 00BF     	    _FUNC insert_line 
 355 ???? 2DE90203 	    push {r1,T1,T2}
 356 ???? 8046     	    mov T1,r0 
 357 ???? B8F80000 	    ldrh r0,[T1]
 358 ???? 00B5FFF7 	    _CALL search_lineno 
 358      BEFF5DF8 
 358      04EB
 359 ???? 49B9     	    cbnz  r1, 1f // line# doesn't exist
 360              	// already exist 
 361 ???? 00B5FFF7 	    _CALL delete_line // delete old one 
 361      C8FF5DF8 
 361      04EB
 362 ???? 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 363 ???? B9F1030F 	    cmp T2,#3 
 364 ???? 0DD0     	    beq 9f
 365              	1: //insert new line 
 366 ???? 98F80210 	    ldrb r1,[T1,#2]
 367 ???? 00B5FFF7 	    _CALL create_gap 
 367      D2FF5DF8 
 367      04EB
 368 ???? 4146     	    mov r1,T1 
 369 ???? 8A78     	    ldrb r2,[r1,#2]
 370 ???? 00B5FFF7 	    _CALL cmove 
 370      FEFF5DF8 
 370      04EB
 371 ???? BDE80203 	9:  pop {r1,T1,T2}
 372 ???? 7047     	    _RET 
 373              	
 374              	/*********************************
 375              	    compile 
 376              	    tokenize source line save it 
 377              	    in pas buffer.
 378              	    compiled line format: 
 379              	      line_no  2 bytes {0...32767}
 380              	      count    1 byte  
 381              	      tokens   variable length 
 382              	  input:
 383              	    source text in tib  
 384              	  output:
 385              	    r0    0 stored | -1 immediate 
 386              	  use:
 387              	    r3    tib index   
 388              	    T1    tib
ARM GAS  tinyBasic.s 			page 19


 389              	    T2    pad
 390              	***********************************/
 391              	    _FUNC compile
 392 ???? 2DE90C03 	    push  {r2,r3,T1,T2}
 393 ???? DFF85887 	    ldr T1,tib 
 394 ???? DFF85897 	    ldr T2,pad 
 395 ???? 206C     	    ldr r0,[UPP,#FLAGS]
 396 ???? 40F02000 	    orr r0,#FCOMP
 397 ???? 2064     	    str r0,[UPP,#FLAGS]
 398 ???? 83EA0303 	    eor r3,r3     
 399 ???? A9F80030 	    strh r3,[T2]    // line no 
 400 ???? 89F80230 	    strb r3,[T2,#2] // length 
 401 ???? 00B500F0 	    _CALL comp_token 
 401      35F85DF8 
 401      04EB
 402 ???? 0F28     	    cmp r0,#TK_INTGR
 403 ???? 07D1     	    bne 1f 
 404 ???? 0129     	    cmp r1,#1 
 405 ???? 05D5     	    bpl 1f 
 406 ???? 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 407 ???? 2360     	    str r3,[UPP,#IN_SAVED]
 408 ???? C4F80880 	    str T1,[UPP,#BASICPTR]
 409 ???? FEE1     	    b tb_error  
 410 ???? 29F8031B 	1:  strh r1,[T2],#3 
 411 ???? C145     	2:  cmp T2,T1 
 412 ???? 02DB     	    blt 3f 
 413 ???? 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 414 ???? F7E1     	    b tb_error 
 415 ???? 00B500F0 	3:  _CALL comp_token 
 415      1FF85DF8 
 415      04EB
 416 ???? 0028     	    cmp r0,#TK_NONE 
 417 ???? F3D1     	    bne 2b 
 418              	// compilation completed 
 419 ???? DFF80837 	    ldr r3,pad 
 420 ???? A9EB0309 	    sub T2,r3 // line length 
 421 ???? 83F80290 	    strb T2,[r3,#2]
 422 ???? B3F80090 	    ldrh T2,[r3]
 423 ???? B9F1000F 	    cmp T2,#0 
 424 ???? 08D0     	    beq 8f 
 425              	// insert line in text buffer 
 426 ???? 1846     	    mov r0,r3 
 427 ???? 00B5FFF7 	    _CALL insert_line 
 427      9EFF5DF8 
 427      04EB
 428 ???? 80EA0000 	    eor r0,r0 
 429 ???? 02E0     	    b 9f 
 430 ???? A360     	8:  str r3,[UPP,#BASICPTR]
 431 ???? 4FF0FF30 	    mov r0,#-1 
 432 ???? BDE80C03 	9:  pop {r2,r3,T1,T2}
 433 ???? 7047     	    _RET 
 434              	
 435              	/*********************************************
 436              	    compile next token from source 
 437              	    input: 
 438              	      r3 		tib index  
 439              	      T1    tib adr
ARM GAS  tinyBasic.s 			page 20


 440              	      T2    insert point in pad  
 441              	    output:
 442              	      r0     token attribute 
 443              	      r1 		token value
 444              	      r3     tib index updated    
 445              	      T2     updated 
 446              	      use:
 447              	**********************************************/
 448              	    .macro _case c, next  
 449              	    cmp r0,#\c 
 450              	    bne \next
 451              	    .endm 
 452              	
 453 ???? 00BF     	    _FUNC comp_token 
 454 ???? 40B4     	    push {r6}
 455 ???? 18F80300 	    ldrb r0,[T1,r3]
 456 ???? 75D0     	    beq token_exit  
 457 ???? 4FF02000 	    mov r0,#SPACE 
 458 ???? 00B500F0 	    _CALL skip 
 458      31F95DF8 
 458      04EB
 459 ???? 18F80300 	    ldrb r0,[T1,r3]
 460 ???? 00B9     	    cbnz r0,1f 
 461 ???? 6AE0     	    b token_exit
 462 ???? 03F10103 	1:  add r3,#1 
 463 ???? 00B500F0 	    _CALL upper 
 463      2EF95DF8 
 463      04EB
 464 ???? 00B500F0 	    _CALL is_special
 464      D7F85DF8 
 464      04EB
 465 ???? DFF8EC68 	    ldr r6,=token_ofs
 466 ???? D6E811F0 	    tbh [r6,r1] 
 467              	tok_idx0:     
 468              	//  not in list 
 469 ???? 48E0     	    b try_other 
 470              	// single char token with no value 
 471              	single: 
 472 ???? 0846     	    mov r0,r1 
 473 ???? 57E0     	    b token_exit 
 474              	lt:
 475 ???? 4FF03401 	    mov r1,#TK_LT 
 476 ???? 18F80300 	    ldrb r0,[T1,r3]
 477 ???? 3E28     	    cmp r0,#'>'
 478 ???? 0BD1     	    bne 1f
 479 ???? 01F10101 	    add r1,#1 
 480 ???? 0CE0     	    b 2f 
 481              	gt: 
 482 ???? 4FF03101 	    mov r1,#TK_GT 
 483 ???? 18F80300 	    ldrb r0,[T1,r3]
 484 ???? 3C28     	    cmp r0,#'<'
 485 ???? 02D1     	    bne 1f  
 486 ???? 01F10101 	    add r1,#1 
 487 ???? 03E0     	    b 2f 
 488 ???? 3D28     	1:  cmp r0,#'=' 
 489 ???? 03D1     	    bne 3f   
 490 ???? 01F10201 	    add r1,#2
ARM GAS  tinyBasic.s 			page 21


 491 ???? 03F10103 	2:  add r3,#1 
 492 ???? 09F8011B 	3:  strb r1,[T2],#1
 493 ???? 3CE0     	    b token_exit 
 494              	bkslash:
 495 ???? 18F80310 	    ldrb r1,[T1,r3]
 496 ???? 03F10103 	    add r3,#1
 497 ???? 4FF00300 	    mov r0,#TK_CHAR 
 498 ???? 35E0     	    b token_exit 
 499              	prt_cmd: 
 500 ???? 4FF00B00 	    mov r0,#TK_CMD 
 501 ???? 4FF03A01 	    mov r1,#PRT_IDX 
 502 ???? 30E0     	    b token_exit 
 503              	quote:
 504 ???? 00B500F0 	   _CALL parse_quote
 504      B8F85DF8 
 504      04EB
 505 ???? 2AE0     	   b token_exit
 506              	tick: 
 507 ???? 4846     	   mov r0,T2 
 508 ???? 08EB0301 	   add r1,T1,r3 
 509 ???? 00B5FFF7 	   _CALL strlen 
 509      FEFF5DF8 
 509      04EB
 510 ???? 0246     	   mov r2,r0 
 511 ???? 4846     	   mov r0,T2 
 512 ???? 04B4     	   push {r2} 
 513 ???? 00B5FFF7 	   _CALL cmove 
 513      FEFF5DF8 
 513      04EB
 514 ???? 04BC     	   pop {r2}
 515 ???? 02F10102 	   add r2,#1
 516 ???? 1344     	   add r3,r2 
 517 ???? 9144     	   add T2,r2 
 518 ???? 4FF00B00 	   mov r0,#TK_CMD 
 519 ???? 4FF04701 	   mov r1,#REM_IDX 
 520 ???? 10E0     	   b token_exit  
 521              	try_other:
 522 ???? 08EB0300 	    add r0,T1,r3 
 523 ???? A0F10100 	    sub r0,#1 
 524 ???? 00B500F0 	    _CALL parse_int  
 524      46F85DF8 
 524      04EB
 525 ???? FFD0     	    beq 1f // not an int 
 526 ???? 00B500F0 	1:  _CALL parse_keyword 
 526      24F95DF8 
 526      04EB
 527 ???? 4729     	    cmp r1,#REM_IDX 
 528 ???? D4D0     	    beq tick  
 529              	token_exit:
 530 ???? 40BC     	  pop {r6}
 531 ???? 7047     	   _RET 
 532              	
 533              	
 534              	char_list:
 535 ???? 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 535      293A232D 
 535      2B2A2F25 
ARM GAS  tinyBasic.s 			page 22


 535      3D3C3E5C 
 535      3F272200 
 536              	
 537              	tok_single:
 538 ???? 00090607 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 538      08010A
 539 ???? 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 539      2232
 540              	  
 541              	token_ofs:
 542 ???? 00000000 	  .word  0 // not found
 543              	  // TK_COMMA...TK_EQUAL , 13 
 544 ???? 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 544      01000000 
 544      01000000 
 544      01000000 
 545 ???? 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 545      01000000 
 545      01000000 
 545      01000000 
 546 ???? 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 546      01000000 
 546      01000000 
 546      01000000 
 547 ???? 01000000 	  .word  (single-tok_idx0)/2 // TK_EQUAL 
 548              	  // '<'|'>'
 549 ???? 03000000 	  .word  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 549      0C000000 
 550              	  // '\'
 551 ???? 1E000000 	  .word  (bkslash-tok_idx0)/2
 552              	  // '?' 
 553 ???? 25000000 	  .word  (prt_cmd-tok_idx0)/2 
 554              	  // "'" tick 
 555 ???? 30000000 	  .word  (tick-tok_idx0)/2 
 556              	  // '"' quote 
 557 ???? 2A000000 	  .word (quote-tok_idx0)/2
 558              	
 559              	  
 560              	/****************************
 561              	    parse_int 
 562              	    parse an integer from text
 563              	    if not valid integer 
 564              	    r1 return *buffer else 
 565              	    *buffer is incremented after integer 
 566              	  input:
 567              	    r0   *buffer 
 568              	  output:
 569              	    r0   integer
 570              	    r1   *buffer+||0   
 571              	  use:
 572              	    r0   char 
 573              	    r2   int  
 574              	    T1   *buffer+
 575              	    T2   digit count 
 576              	*****************************/
 577 ???? 0000BF   	    _FUNC parse_int 
 578 ???? 2DE90403 	    push {r2,T1,T2}
ARM GAS  tinyBasic.s 			page 23


 579 ???? 8046     	    mov T1,r0 // *buffer 
 580 ???? 89EA0909 	    eor T2,T2 // digit count 
 581 ???? 82EA0202 	    eor r2,r2 // int 
 582 ???? 4FF00A01 	    mov r1,#10 // default base 
 583 ???? 18F8010B 	    ldrb r0,[T1],#1
 584 ???? 00B500F0 	    _CALL upper 
 584      7EF85DF8 
 584      04EB
 585 ???? 2428     	    cmp r0,'$' 
 586 ???? 02D1     	    bne 2f 
 587 ???? 4FF01001 	    mov r1,#16 // hexadecimal number 
 588 ???? 03E0     	    b 3f  
 589 ???? 2628     	2:  cmp r0,#'&' 
 590 ???? 03D1     	    bne 4f
 591 ???? 4FF00201 	    mov r1,#2 //binary number  
 592 ???? 18F8010B 	3:  ldrb r0,[T1],#1
 593 ???? 00B500F0 	4:  _CALL upper 
 593      6EF85DF8 
 593      04EB
 594 ???? 4128     	    cmp r0,#'A'
 595 ???? 00D4     	    bmi 5f
 596 ???? 0738     	    subs r0,#7  
 597 ???? 3038     	5:  subs r0,#'0' 
 598 ???? 09D4     	    bmi 6f // not digit   
 599 ???? 8842     	    cmp r0,r1 
 600 ???? 07D5     	    bpl 6f // not digit 
 601 ???? 01FB02F2 	    mul r2,r1 
 602 ???? 0244     	    add r2,r0
 603 ???? 09F10109 	    add T2,#1  
 604 ???? 18F8010B 	    ldrb r0,[T1],#1
 605 ???? EBE7     	    b 4b
 606 ???? 1046     	6:  mov r0,r2 
 607 ???? B8F10101 	    subs r1,T1,#1 
 608 ???? B9F1000F 	    cmp T2,#0
 609 ???? 00D1     	    bne 9f   
 610 ???? 4940     	    eors r1,r1
 611 ???? BDE80403 	9:  pop {r2,T1,T2}
 612 ???? 7047     	    _RET 
 613              	
 614              	
 615              	/****************************
 616              	    is_other 
 617              	    check for non alphanum
 618              	    input:
 619              	      r0    character to scan 
 620              	    output:
 621              	      r1    0 || index 
 622              	    use: 
 623              	      r2    scan index 
 624              	      r3    char_list 
 625              	*****************************/
 626 ???? 00BF     	    _FUNC is_special 
 627 ???? 0CB4     	    push {r2,r3}
 628 ???? 4FF00102 	    mov r2,#1
 629 ???? DFF84037 	    ldr r3,=char_list 
 630 ???? 995C     	1:  ldrb r1,[r3,r2]
 631 ???? 51B1     	    cbz r1,9f 
ARM GAS  tinyBasic.s 			page 24


 632 ???? 8842     	    cmp r0,r1 
 633 ???? 02D0     	    beq 8f 
 634 ???? 02F10102 	    add r2,#1 
 635 ???? F8E7     	    b 1b
 636 ???? 1146     	8:  mov r1,r2
 637 ???? 3C29     	    cmp r1,#'<'
 638 ???? 02D5     	    bpl 9f 
 639 ???? DFF82C27 	    ldr r2,=tok_single 
 640 ???? 5158     	    ldr r1,[r2,r1]
 641 ???? 0CBC     	9:  pop {r2,r3}
 642 ???? 7047     	    _RET 
 643              	
 644              	
 645              	/*********************************************
 646              	    parse_quote 
 647              	    parse quoted string 
 648              	    input: 
 649              	      r3 		tib index  
 650              	      T1    tib adr
 651              	      T2    insert point in pad  
 652              	    output:
 653              	      r0     token attribute 
 654              	      r1 		token value
 655              	      r3     tib index updated    
 656              	      T2     updated 
 657              	      use:
 658              	*********************************************/
 659              	    _FUNC parse_quote
 660 ???? 09F10109 	    add T2,#1
 661 ???? 4DF8049D 	    push {T2} 
 662 ???? 18F80300 	1:  ldrb r0,[T1,r3]
 663 ???? 03F10103 	    add r3,#1 
 664 ???? 2228     	    cmp r0,#'"'
 665 ???? 0AD0     	    beq 9f 
 666 ???? 5C28     	    cmp r0,#'\\'
 667 ???? 05D1     	    bne 2f 
 668 ???? 00B500F0 	    _CALL get_escaped_char 
 668      0DF85DF8 
 668      04EB
 669 ???? F1E7     	    b 1b 
 670 ???? 09F8010B 	2:  strb r0,[T2],#1
 671 ???? EEE7     	    b 1b 
 672 ???? 4FF00200 	9:  mov r0,#TK_QSTR
 673 ???? 02BC     	    pop {r1}
 674 ???? 01F8010C 	    strb r0,[r1,#-1]
 675 ???? 7047     	    _RET 
 676              	
 677              	/**********************************************
 678              	    get_escaped_char 
 679              	    convert "\c" in quoted string 
 680              	    input:
 681              	      r0 
 682              	      r3   index 
 683              	      T1   tib 
 684              	      T2   pad 
 685              	    output:
 686              	      r3   updated 
ARM GAS  tinyBasic.s 			page 25


 687              	      T1   updated 
 688              	      T2   updated 
 689              	**********************************************/
 690 ???? 00BF     	    _FUNC get_escaped_char 
 691 ???? 18F80300 	    ldrb r0,[T1,r3]
 692 ???? 03F10103 	    add r3,#1
 693 ???? 2228     	    cmp r0,#'"' 
 694 ???? 02D1     	    bne 1f 
 695 ???? 09F8010B 	    strb r0,[T2],#1
 696 ???? 0BE0     	    b 9f 
 697 ???? DFF8DC16 	1:  ldr r1,=escaped 
 698 ???? 11F8012B 	2:  ldrb r2,[r1],#1
 699 ???? 22B1     	    cbz r2,8f 
 700 ???? 8242     	    cmp r2,r0 
 701 ???? 00D0     	    beq 7f 
 702 ???? F9E7     	    b 2b
 703 ???? 02F10700 	7:  add r0,r2,#7
 704 ???? 09F8010B 	8:  strb r0,[T2],#1    
 705              	9:     
 706 ???? 7047     	    _RET
 707              	
 708 ???? 6162746E 	escaped: .asciz "abtnvfr"
 708      76667200 
 709              	
 710              	/*********************************************
 711              	   skip character in TIB 
 712              	   input:
 713              	      r0    character to skip 
 714              	      r3    tib index 
 715              	      T1    tib adr
 716              	    output: 
 717              	      r3    updated 
 718              	**********************************************/   
 719              	    _FUNC skip 
 720 ???? 18F80310 	1:  ldrb r1,[T1,r3]
 721 ???? 03F10103 	    add r3,#1
 722 ???? 8142     	    cmp r1,r0
 723 ???? F9D0     	    beq 1b 
 724 ???? 2360     	    str r3,[UPP,#IN_SAVED]
 725 ???? 7047     	    _RET
 726              	
 727              	/********************************************
 728              	    upper
 729              	    convert character in upper case 
 730              	    input: 
 731              	      r0   character 
 732              	    output:
 733              	      r0   upper case character 
 734              	*********************************************/
 735              	    _FUNC upper 
 736 ???? 6128     	    cmp r0,#'a' 
 737 ???? 03DB     	    blt 9f 
 738 ???? 7A28     	    cmp r0,#'z' 
 739 ???? 01DC     	    bgt 9f 
 740 ???? 00F05F00 	    and r0,#0x5f 
 741 ???? 7047     	9:  _RET 
 742              	
ARM GAS  tinyBasic.s 			page 26


 743              	/***************************************
 744              	   is_digit 
 745              	   check if char is decimal digit.
 746              	   convert to decimal digit.
 747              	   input:
 748              	      r0    char 
 749              	   output:
 750              	      r0    if Z then converted digit 
 751              	      Z     0 true | 1 false  
 752              	***************************************/
 753 ???? 00BF     	    _FUNC is_digit 
 754 ???? 02B4     	    push {r1} 
 755 ???? 81EA0101 	    eor r1,r1 
 756 ???? 3038     	    subs r0,#'0' 
 757 ???? 03DB     	    blt 9f
 758 ???? 3A28     	    cmp r0,'9'+1
 759 ???? 01D4     	    bmi 9f 
 760 ???? 4FF0FF31 	    mov r1,#-1 
 761              	9:   
 762 ???? 0940     	    ands r1,r1
 763 ???? 02BC     	    pop {r1} 
 764 ???? 7047     	    _RET 
 765              	
 766              	/***************************************
 767              	    is_hex 
 768              	    check for hexadecimal digit 
 769              	    convert to hex digit.
 770              	    input:
 771              	      r0    
 772              	    output:
 773              	      r0     if Z then converted digit 
 774              	      Z      0 true | 1 false         
 775              	***************************************/
 776              	    _FUNC is_hex 
 777 ???? 02B4     	    push {r1}
 778 ???? 4FF0FF31 	    mov r1,#-1 
 779 ???? 4128     	    cmp r0,#'A' 
 780 ???? 01D4     	    bmi 1f 
 781 ???? A0F10700 	    sub r0,#7 
 782 ???? A0F13000 	1:  sub r0,#'0'
 783 ???? 01D4     	    bmi 2f 
 784 ???? 1028     	    cmp r0,#16
 785 ???? 01D4     	    bmi 9f 
 786 ???? 81EA0101 	2:  eor r1,r1  
 787 ???? 0940     	9:  ands r1,r1 
 788 ???? 02BC     	    pop {r1}
 789 ???? 7047     	    _RET 
 790              	
 791              	/***************************************
 792              	    is_bit 
 793              	    check if char is '0'|'1' 
 794              	    convert to binary digit. 
 795              	    input:
 796              	      r0    
 797              	    output:
 798              	      r0     if Z then converted digit 
 799              	      Z      0 true | 1 false         
ARM GAS  tinyBasic.s 			page 27


 800              	***************************************/
 801 ???? 00BF     	    _FUNC is_bit
 802 ???? 02B4     	    push  {r1}
 803 ???? 4FF0FF31 	    mov r1,#-1 
 804 ???? A0F13000 	    sub r0,#'0' 
 805 ???? 01D4     	    bmi 2f 
 806 ???? 0229     	    cmp r1,#2
 807 ???? 01D4     	    bmi 9f 
 808 ???? 81EA0101 	2:  eor r1,r1 
 809 ???? 0940     	9:  ands r1,r1 
 810 ???? 02BC     	    pop {r1}
 811 ???? 7047     	    _RET 
 812              	
 813              	/***************************************
 814              	    is_alpha 
 815              	    check if character is {A..Z} 
 816              	  input:
 817              	    r0   character 
 818              	  output: 
 819              	    r0    same character 
 820              	    Z    0 true | 1 false  
 821              	****************************************/
 822 ???? 00BF     	    _FUNC is_alpha
 823 ???? 02B4     	    push {r1} 
 824 ???? 4FF0FF31 	    mov r1,#-1 
 825 ???? 4128     	    cmp r0,#'A' 
 826 ???? 01DB     	    blt 8f 
 827 ???? 5B28     	    cmp r0,#'Z'+1 
 828 ???? 01D4     	    bmi 9f 
 829 ???? 81EA0101 	8:  eor r1,r1  
 830 ???? 0940     	9:  ands r1,r1 
 831 ???? 02BC     	    pop {r1}
 832 ???? 7047     	    _RET 
 833              	
 834              	/***************************************
 835              	    is_num 
 836              	    check if character is {0..9} 
 837              	  input:
 838              	    r0   character 
 839              	  output: 
 840              	    r0    same character 
 841              	    Z    0 true | 1 false  
 842              	****************************************/
 843              	    _FUNC is_num 
 844 ???? 02B4     	    push {r1} 
 845 ???? 4FF0FF31 	    mov r1,#-1 
 846 ???? 3028     	    cmp r0,#'0' 
 847 ???? 01DB     	    blt 8f 
 848 ???? 3A28     	    cmp r0,#'9'+1 
 849 ???? 01D4     	    bmi 9f 
 850 ???? 81EA0101 	8:  eor r1,r1  
 851 ???? 0940     	9:  ands r1,r1 
 852 ???? 02BC     	    pop {r1}
 853 ???? 7047     	    _RET 
 854              	
 855              	/*****************************************
 856              	    is_alnum 
ARM GAS  tinyBasic.s 			page 28


 857              	    check if character is alphanumeric 
 858              	    input:
 859              	      r0 
 860              	    output:
 861              	      r0     same 
 862              	      Z      1 false | 0 true 
 863              	*****************************************/
 864              	    _FUNC is_alnum 
 865 ???? 00B5FFF7 	    _CALL is_alpha 
 865      E5FF5DF8 
 865      04EB
 866 ???? 04D0     	    beq 9f 
 867 ???? 00B5FFF7 	    _CALL is_num 
 867      EBFF5DF8 
 867      04EB
 868 ???? 7047     	9:  _RET 
 869              	
 870              	
 871              	/*****************************************
 872              	    parse_keyword 
 873              	    parse work and ckeck if in dictionary 
 874              	    input:
 875              	      r0    first character 
 876              	      r3    tib index 
 877              	      t1    tib 
 878              	      t2    pad 
 879              	    output:
 880              	      r3    updated 
 881              	      t1    updated 
 882              	      t2    updated   
 883              	    use:
 884              	    
 885              	*****************************************/
 886              	    _FUNC parse_keyword 
 887 ???? 4DF8049D 	    push {T2}
 888 ???? 09F8010B 	    strb r0,[T2],#1
 889 ???? 18F80300 	1:  ldrb r0,[T1,r3]
 890 ???? 03F10103 	    add r3,#1
 891 ???? 00B5FFF7 	    _CALL is_alnum
 891      E9FF5DF8 
 891      04EB
 892 ???? 02D1     	    bne 2f 
 893 ???? 09F8010B 	    strb r0,[T2],#1
 894 ???? F2E7     	    b 1b 
 895 ???? A3F10103 	2:  sub r3,#1
 896 ???? 80EA0000 	    eor r0,r0 
 897 ???? 89F80000 	    strb r0,[T2] 
 898 ???? 0098     	    ldr r0,[sp]
 899 ???? DFF8CC15 	    ldr r1,=kword_dict  
 900 ???? 00B500F0 	    _CALL search_dict 
 900      51F85DF8 
 900      04EB
 901 ???? 00B9     	    cbnz r0,9f 
 902 ???? 16E0     	    b syntax_error 
 903 ???? 5DF8049B 	9:  pop {T2}
 904 ???? 09F8010B 	    strb r0,[T2],#1
 905 ???? 09F8011B 	    strb r1,[T2],#1
ARM GAS  tinyBasic.s 			page 29


 906 ???? 7047     	    _RET 
 907              	
 908              	
 909              	/*******************
 910              	    DECOMPILER 
 911              	*******************/
 912              	
 913              	/**********************************
 914              	    cmd_name 
 915              	    reverse dictionary search 
 916              	    from CMD_IDX to NAME 
 917              	  input:
 918              	    r0    CMD_IDX 
 919              	  output:
 920              	    r0    *NAME | 0 
 921              	  use:
 922              	    r1    dictionary link
 923              	    r2    tmp 
 924              	**********************************/
 925              	    _FUNC cmd_name
 926 ???? 06B4     	    push {r1,r2}
 927 ???? DFF8AC15 	    ldr r1,=kword_dict  
 928 ???? 0A78     	1:  ldrb r2,[r1]
 929 ???? 3AB1     	    cbz r2,3f 
 930 ???? 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 931 ???? 9042     	    cmp r0,r2 
 932 ???? 02D0     	    beq 2f 
 933 ???? 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 934 ???? F6E7     	    b 1b
 935 ???? 0A46     	2:  mov r2,r1
 936 ???? 1046     	3:  mov r0,r2 
 937 ???? 06BC     	    pop {r1,r2}
 938 ???? 7047     	    _RET 
 939              	
 940              	
 941              	/**********************************
 942              	      BASIC commands 
 943              	**********************************/
 944              	
 945              	/*********************************
 946              	    syntax_error 
 947              	    display syntax error message and 
 948              	    abort program 
 949              	  input:
 950              	    none  
 951              	  output: 
 952              	    none 
 953              	  use:
 954              	*********************************/
 955              	    _FUNC syntax_error 
 956 ???? 4FF00200 	    mov r0,#ERR_SYNTAX
 957 ???? 00E0     	    b tb_error 
 958              	
 959              	/*********************************
 960              	    tb_error 
 961              	    display BASIC error and 
 962              	    abort program. 
ARM GAS  tinyBasic.s 			page 30


 963              	  input:
 964              	    r0    error code   
 965              	  output: 
 966              	    none 
 967              	  use:
 968              	    r1    temp 
 969              	*********************************/
 970 ???? 00BF     	    _FUNC tb_error 
 971 ???? DFF88815 	    ldr r1,=err_msg 
 972 ???? 4FEA8000 	    lsl r0,#2 
 973 ???? 0844     	    add r0,r1 
 974 ???? 0068     	    ldr r0,[r0]
 975 ???? 00B5FFF7 	    _CALL uart_puts
 975      FEFF5DF8 
 975      04EB
 976 ???? 3248     	    ldr r0,dstack_empty
 977 ???? 8546     	    mov sp,r0 
 978 ???? D7E0     	    b  warm_start  
 979 ???? 7047     	    _RET 
 980              	err_msg:
 981 ???? 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 981      00000000 
 981      0D000000 
 981      1B000000 
 981      34000000 
 982 ???? 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 982      6F000000 
 982      89000000 
 982      9A000000 
 982      AB000000 
 983 ???? B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 983      EA000000 
 983      FA000000 
 983      0E010000 
 983      21010000 
 984              	
 985              	    .section .rodata.tb_error 
 986              	
 987 ???? 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 987      72792066 
 987      756C6C0A 
 987      00
 988 ???? 73796E74 	err_syntax: .asciz "syntax error\n" 
 988      61782065 
 988      72726F72 
 988      0A00
 989 ???? 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 989      206F7065 
 989      72617469 
 989      6F6E206F 
 989      76657266 
 990 ???? 64697669 	err_div0: .asciz "division by 0\n" 
 990      73696F6E 
 990      20627920 
 990      300A00
 991 ???? 696E7661 	err_no_line: .asciz "invalid line number.\n"
 991      6C696420 
ARM GAS  tinyBasic.s 			page 31


 991      6C696E65 
 991      206E756D 
 991      6265722E 
 992 ???? 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 992      74696D65 
 992      206F6E6C 
 992      79207573 
 992      6167652E 
 993 ???? 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 993      616E6420 
 993      6C696E65 
 993      206F6E6C 
 993      79207573 
 994 ???? 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 994      69636174 
 994      65206E61 
 994      6D652E0A 
 994      00
 995 ???? 46696C65 	err_not_file: .asciz "File not found.\n"
 995      206E6F74 
 995      20666F75 
 995      6E642E0A 
 995      00
 996 ???? 62616420 	err_bad_value: .asciz "bad value.\n"
 996      76616C75 
 996      652E0A00 
 997 ???? 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 997      20696E20 
 997      65787465 
 997      6E646564 
 997      206D656D 
 998 ???? 4E6F2064 	err_no_data: .asciz "No data found.\n"
 998      61746120 
 998      666F756E 
 998      642E0A00 
 999 ???? 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 999      726F6772 
 999      616D2069 
 999      6E205241 
 999      4D210A00 
 1000 ???? 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1000      20737973 
 1000      74656D20 
 1000      66756C6C 
 1000      2E0A00
 1001 ???? 42756666 	err_buf_full: .asciz "Buffer full\n"
 1001      65722066 
 1001      756C6C0A 
 1001      00
 1002              	
 1003 ???? 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1003      2074696D 
 1003      65206572 
 1003      726F722C 
 1003      2000
 1004 ???? 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1004      70696C65 
ARM GAS  tinyBasic.s 			page 32


 1004      20657272 
 1004      6F722C20 
 1004      00
 1005 ???? 6C617374 	tk_id: .asciz "last token id: "
 1005      20746F6B 
 1005      656E2069 
 1005      643A2000 
 1006              	
 1007              	
 1008              	    .section  .text , "ax", %progbits 
 1009              	
 1010              	/*********************************
 1011              	   BASIC: BTGL adr, mask   
 1012              	   toggle bits [adr]=[adr]^mask  
 1013              	   input:
 1014              	     r0    adr 
 1015              	     r1    mask 
 1016              	    output;
 1017              	      none 
 1018              	    use:
 1019              	      T1   temp
 1020              	      T2   temp  
 1021              	*******************************/     
 1022 ???? 00BF     	    _FUNC BTGL 
 1023              	
 1024 ???? 7047     	    _RET 
 1025              	
 1026              	
 1027              	//---------------------------------
 1028              	// dictionary search 
 1029              	// input:
 1030              	//	 r0   target name
 1031              	//   r1		dictionary first name field address  
 1032              	// output:
 1033              	//  r0 		token attribute 
 1034              	//  r1		cmd_index if r0!=TK_NONE  
 1035              	// use:
 1036              	//  r2   length dictionary name 
 1037              	//---------------------------------
 1038 ???? 00BF     	  _FUNC search_dict
 1039 ???? 04B4     	  push {r2}
 1040 ???? 03B4     	  push {r0,r1}
 1041              	1:
 1042 ???? 11F8010B 	  ldrb r0,[r1],#1 
 1043 ???? 0043     	  orrs r0,r0
 1044 ???? 10D0     	  beq 9f // null byte  -> end of dictinary 
 1045 ???? 0098     	  ldr r0,[sp]  
 1046 ???? 00B5FFF7 	  _CALL strcmp 
 1046      BCFC5DF8 
 1046      04EB
 1047 ???? 04D0     	  beq 2f 
 1048 ???? 0199     	  ldr r1,[sp,#4]
 1049 ???? 51F80C1C 	  ldr r1,[r1,#-12]
 1050 ???? 0191     	  str r1,[sp,#4]
 1051 ???? EFE7     	  b 1b   
 1052              	2: // found
 1053 ???? 0199     	  ldr r1,[sp,#4]
ARM GAS  tinyBasic.s 			page 33


 1054 ???? 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 1055 ???? 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 1056 ???? 02B0     	9: add sp,#8  // drop pushed r0,r1
 1057 ???? 04BC     	   pop {r2}
 1058 ???? 7047     	   _RET 
 1059              	
 1060              	/**************************
 1061              	    INTERPRETER 
 1062              	*************************/
 1063              	
 1064              	/*********************************
 1065              	   cold_start 
 1066              	   initialize BASIC interpreter 
 1067              	   input:
 1068              	     none 
 1069              	   output:
 1070              	    none 
 1071              	   use:
 1072              	     r0,r1,r2,r3 
 1073              	*********************************/
 1074              	    _GBL_FUNC cold_start 
 1075 ???? 0FB4     	    push {r0,r1,r2,r3}
 1076              	// initialise parameters stack
 1077 ???? DFF844C0 	   ldr DP,dstack_empty     
 1078              	//copy system variables to ram 
 1079 ???? 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1079      C2F20004 
 1080 ???? 0C48     	    ldr r0,src_addr 
 1081 ???? 0C49     	    ldr r1,dest_addr
 1082 ???? 0968     	    ldr r1,[r1] 
 1083 ???? 0C44     	    add UPP,r1 // system variables base address   
 1084 ???? 2146     	    mov r1,UPP 
 1085 ???? 4FF0D402 	    mov r2,#ulast-uzero
 1086 ???? 00B5FFF7 	    _CALL cmove  
 1086      FEFF5DF8 
 1086      04EB
 1087 ???? 00B500F0 	    _CALL prt_version 
 1087      10F85DF8 
 1087      04EB
 1088 ???? 0FBC     	    pop {r0,r1,r2,r3}
 1089 ???? 7047     	    _RET
 1090 ???? 00B500F0 	    _CALL warm_init 
 1090      6BF85DF8 
 1090      04EB
 1091 ???? 7DE0     	    b cmd_line   
 1092              	src_addr:
 1093 ???? 00000000 	  .word uzero
 1094              	dest_addr:
 1095 ???? 00000000 	  .word vectors_size
 1096              	dstack_empty:
 1097 ???? 00000000 	   .word _dstack 
 1098              	
 1099              	/************************************
 1100              	    print firmware version 
 1101              	    input: 
 1102              	      none 
 1103              	    output:
ARM GAS  tinyBasic.s 			page 34


 1104              	      none 
 1105              	    use:
 1106              	      r0 
 1107              	***********************************/
 1108              	    _FUNC prt_version 
 1109 ???? DFF8A804 	    ldr r0,=version_msg 
 1110 ???? 00B5FFF7 	    _CALL uart_puts
 1110      FEFF5DF8 
 1110      04EB
 1111 ???? 9FF87800 	    ldrb r0,version 
 1112 ???? 4FEA1010 	    lsr r0,#4 
 1113 ???? 00F13000 	    add r0,#'0' 
 1114 ???? 3A28     	    cmp r0,#'9'+1 
 1115 ???? 01D4     	    bmi 1f 
 1116 ???? 00F10700 	    add r0,#7 
 1117              	  1:
 1118 ???? 00B5FFF7 	    _CALL uart_putc 
 1118      FEFF5DF8 
 1118      04EB
 1119 ???? 4FF02E00 	    mov r0,#'. 
 1120 ???? 00B5FFF7 	    _CALL uart_putc 
 1120      FEFF5DF8 
 1120      04EB
 1121 ???? 9FF84C00 	    ldrb r0,version 
 1122 ???? 00F00F00 	    and r0,#15 
 1123 ???? 00F13000 	    add r0,'0' 
 1124 ???? 3A28     	    cmp r0,#'9'+1 
 1125 ???? 01D4     	    bmi 1f 
 1126 ???? 00F10700 	    add r0,#7
 1127              	  1: 
 1128 ???? 00B5FFF7 	    _CALL uart_putc 
 1128      FEFF5DF8 
 1128      04EB
 1129 ???? 4FF00D00 	    mov r0,#CR 
 1130 ???? 00B5FFF7 	    _CALL uart_putc 
 1130      FEFF5DF8 
 1130      04EB
 1131 ???? 7047     	    _RET  
 1132              	version_msg:
 1133 ???? 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1133      65207069 
 1133      6C6C2074 
 1133      696E7920 
 1133      42415349 
 1134              	version:
 1135 ???? 10       	    .byte 0x10 
 1136 ???? 0000BF   	    .p2align 2 
 1137              	
 1138              	
 1139              	/*****************************
 1140              	    clear_vars 
 1141              	    initialize variables to 0
 1142              	  input:
 1143              	    none 
 1144              	  output:
 1145              	    none 
 1146              	  use:
ARM GAS  tinyBasic.s 			page 35


 1147              	    r0,r1,r2 
 1148              	*****************************/
 1149              	    _FUNC clear_vars 
 1150 ???? 07B4     	    push {r0,r1,r2}
 1151 ???? 80EA0000 	    eor r0,r0 
 1152 ???? 04F16001 	    add r1,UPP,#VARS
 1153 ???? 4FF01A02 	    mov r2,#26
 1154 ???? 41F8040B 	1:  str r0,[r1],#4 
 1155 ???? 013A     	    subs r2,#1
 1156 ???? FBD1     	    bne 1b  
 1157 ???? 07BC     	    pop {r0,r1,r2}
 1158 ???? 7047     	    _RET 
 1159              	
 1160              	/*****************************
 1161              	   clear_basic 
 1162              	   reset BASIC text pointers 
 1163              	   and clear variables 
 1164              	*****************************/
 1165 ???? 00BF     	    _FUNC clear_basic
 1166 ???? 80EA0000 	  	eor r0,r0 
 1167 ???? 6060     	    str r0,[UPP,#COUNT]
 1168 ???? 2060     	    str r0,[UPP,#IN_SAVED]
 1169 ???? 04F1C800 	    add r0,UPP,#FREE_RAM
 1170 ???? 2063     	    str r0,[UPP,#TXTBGN]
 1171 ???? 6063     	    str r0,[UPP,#TXTEND]
 1172 ???? 00B5FFF7 	    _CALL clear_vars 
 1172      E7FF5DF8 
 1172      04EB
 1173 ???? 7047     	    _RET  
 1174              	
 1175              	/***********************************
 1176              	   warm_init 
 1177              	   initialize interpreter context 
 1178              	  input:
 1179              	    none
 1180              	  output:
 1181              	    none 
 1182              	  use:
 1183              	    r0 
 1184              	***********************************/
 1185              	warm_init:
 1186 ???? 4FF0000A 		mov IN,#0 // BASIC line index 
 1187 ???? 4FF0000B 	  mov BPTR,#0 // BASIC line address 
 1188 ???? 80EA0000 	  eor r0,r0 
 1189 ???? A060     	  str r0,[UPP,#BASICPTR]
 1190 ???? 2060     	  str r0,[UPP,#IN_SAVED]
 1191 ???? 6060     	  str r0,[UPP,#COUNT]  
 1192 ???? 2064     		str r0,[UPP,#FLAGS]
 1193 ???? A063     	  str r0,[UPP,#LOOP_DEPTH] 
 1194 ???? 4FF00400 	  mov r0, #DEFAULT_TAB_WIDTH
 1195 ???? 6064     	  str r0,[UPP,#TAB_WIDTH]
 1196 ???? 4FF00A00 		mov r0,#10 // default base decimal 
 1197 ???? A061     		str r0,[UPP,#BASE]
 1198 ???? 7047     	  _RET  
 1199              	
 1200              	/**********************************
 1201              	    warm_start 
ARM GAS  tinyBasic.s 			page 36


 1202              	    start BASIC interpreter without 
 1203              	    reset variables and code space 
 1204              	  input:
 1205              	    none 
 1206              	  output:
 1207              	    none 
 1208              	  use:
 1209              	
 1210              	**********************************/
 1211              	    _FUNC warm_start 
 1212              	// initialise parameters stack
 1213 ???? 5FF8F0C0 	   ldr DP,dstack_empty     
 1214              	
 1215 ???? FCE7     	    b warm_start 
 1216              	
 1217              	
 1218              	/**********************************
 1219              	   cmd_line 
 1220              	   shell command line 
 1221              	   input:
 1222              	      none 
 1223              	   output:
 1224              	      none 
 1225              	   use:
 1226              	
 1227              	***********************************/
 1228 ???? 00BF     	    _FUNC cmd_line 
 1229 ???? 4FF00D00 	    mov r0,#CR 
 1230 ???? 00B5FFF7 	    _CALL uart_putc 
 1230      FEFF5DF8 
 1230      04EB
 1231 ???? 5048     	1:  ldr r0,tib
 1232 ???? 00B5FFF7 	    _CALL readln 
 1232      FEFF5DF8 
 1232      04EB
 1233 ???? 0040     	    ands r0,r0 // empty line 
 1234 ???? F7D0     	    beq 1b 
 1235 ???? 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1235      E6FC5DF8 
 1235      04EB
 1236 ???? 0040     	    ands r0,r0 
 1237 ???? F0D0     	    beq 1b  // tokens stored in text area 
 1238              	// interpret tokenized line 
 1239              	interpreter:
 1240 ???? 8AF0030A 	   eor IN,#3 
 1241 ???? D4F808B0 	   ldr BPTR,[UPP,#BASICPTR]
 1242 ???? 6068     	   ldr r0,[UPP,#COUNT]
 1243 ???? 8245     	   cmp IN,r0  
 1244 ???? 16D4     	   bmi interp_loop
 1245              	// end of line reached     
 1246              	next_line:
 1247 ???? 206C     	  ldr r0,[UPP,#FLAGS]
 1248 ???? 10F0020F 	  tst r0,#(1<<FRUN)
 1249 ???? DED0     	  beq cmd_line 
 1250 ???? D4F800A0 	  ldr IN,[UPP,#IN_SAVED]
 1251 ???? D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 1252 ???? 0AEB0B00 	  add r0,IN,BPTR  
ARM GAS  tinyBasic.s 			page 37


 1253 ???? 616B     	  ldr r1,[UPP,#TXTEND]
 1254 ???? 8842     	  cmp r0,r1 
 1255 ???? 05D4     	  bmi 1f 
 1256 ???? 00B5FFF7 	  _CALL warm_start 
 1256      CFFF5DF8 
 1256      04EB
 1257 ???? CFE7     	  b cmd_line
 1258              	1:
 1259 ???? 4FF0030A 	  mov IN,#3 
 1260 ???? C4F800A0 	  str IN,[UPP,#IN_SAVED] 
 1261              	interp_loop:
 1262 ???? 00B500F0 	  _CALL next_token 
 1262      19F85DF8 
 1262      04EB
 1263 ???? 0028     	  cmp r0,#TK_NONE 
 1264 ???? E1D0     	  beq next_line 
 1265 ???? 0B28     	  cmp r0,#TK_CMD 
 1266 ???? 04D1     	  bne 2f
 1267 ???? D148     	  ldr r0,=fn_table
 1268 ???? 50F82100 	  ldr r0,[r0,r1,lsl #2]
 1269 ???? 0047     	  bx r0
 1270 ???? F1E7     	  b interp_loop 
 1271              	2: 
 1272 ???? 0528     	  cmp r0,#TK_VAR 
 1273 ???? 02D1     	  bne 3f 
 1274 ???? 00F0A5B8 	  b let_var 
 1275 ???? ECE7     	  b interp_loop
 1276              	3: 
 1277 ???? 0628     	  cmp r0,#TK_ARRAY 
 1278 ???? 02D1     	  bne 4f
 1279 ???? 00F0AAB8 	  b let_array 
 1280 ???? E7E7     	  b interp_loop
 1281              	4: 
 1282 ???? 0128     	  cmp r0,#TK_COLON
 1283 ???? E5D0     	  beq interp_loop
 1284 ???? C2E6     	  b syntax_error
 1285              	
 1286              	/*****************************
 1287              	  next_token 
 1288              	  extract next token from token list 
 1289              	  input:
 1290              	    none 
 1291              	  output:
 1292              	    r0    token attribute
 1293              	    r1    token value if there is one 
 1294              	  use:
 1295              	    none 
 1296              	****************************/
 1297 ???? 00BF     	  _FUNC next_token 
 1298 ???? 6068     	  ldr r0,[UPP,#COUNT]
 1299 ???? 8245     	  cmp IN,r0 
 1300 ???? 02D4     	  bmi 0f 
 1301 ???? 80EA0000 	  eor r0,r0 
 1302 ???? 2AE0     	  b 9f  
 1303              	0: 
 1304 ???? C4F800A0 	  str IN,[UPP,#IN_SAVED]
 1305 ???? C4F808B0 	  str BPTR,[UPP,#BASICPTR]
ARM GAS  tinyBasic.s 			page 38


 1306 ???? 1BF80A00 	  ldrb r0,[BPTR,IN] // token attribute 
 1307 ???? 00F03F00 	  and r0,#0x3f // limit mask 
 1308 ???? 08F10108 	  add T1,#1
 1309 ???? C049     	  ldr r1,=tok_jmp 
 1310 ???? D1E800F0 	  tbb [r1,r0]
 1311              	1: // pc reference point 
 1312              	2: // .byte param
 1313 ???? 19F80810 	  ldrb r1,[T2,T1]
 1314 ???? 08F10108 	  add T1,#1 
 1315 ???? 18E0     	  b 9f 
 1316              	3: // .hword param 
 1317 ???? 39F80810 	  ldrh r1,[T2,T1]
 1318 ???? 08F10208 	  add T1,#2 
 1319 ???? 13E0     	  b 9f 
 1320              	4: // .word param  
 1321 ???? 59F80810 	  ldr r1,[T2,T1]
 1322 ???? 08F10408 	  add T1,#4
 1323 ???? 0EE0     	  b 9f 
 1324              	5: // .asciz param 
 1325 ???? 09EB0801 	  add r1,T2,T1
 1326 ???? 0846     	  mov r0,r1  
 1327 ???? 00B5FFF7 	  _CALL strlen 
 1327      FEFF5DF8 
 1327      04EB
 1328 ???? 8044     	  add T1,r0
 1329 ???? 08F10108 	  add T1,#1
 1330 ???? 4FF00200 	  mov r0,#TK_QSTR
 1331 ???? 00E0     	  b 9f  
 1332              	8: // syntax error 
 1333 ???? 90E6     	   b syntax_error 
 1334              	9:
 1335 ???? C4F80080 	   str T1,[UPP,#IN_SAVED]
 1336 ???? 7047     	  _RET
 1337              	
 1338              	  .p2align 2
 1339              	tok_jmp: // token id  tbb offset 
 1340 ???? 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2   // TK_NONE, TK_COLON
 1341 ???? 0F000005 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2 // TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1342 ???? 1E1E1E1E 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1343 ???? 00000000 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1344 ???? 0A1E1E   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_INTGR, TK_PLUS,TK_MINUS  
 1345 ???? 1D1D1D   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // TK_MULT,TK_DIV,TK_MOD 
 1346              	// the following are not used 
 1347 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 
 1347      1D
 1348 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1348      1D1D1D1D 
 1349 ???? 1E1E1E1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1349      1D1D1D1D 
 1350 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 1350      1D1D1D1D 
 1351 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1351      1D1D1D1D 
 1352 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1352      1D1D1D1D 
 1353 ???? 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1354              	
ARM GAS  tinyBasic.s 			page 39


 1355 ???? 0000BF   	  .p2align 2 
 1356              	
 1357 ???? 00000000 	tib: .word _tib 
 1358 ???? 00000000 	pad: .word _pad 
 1359              	
 1360              	/*********************************
 1361              	    expect 
 1362              	    check if next token is of 
 1363              	    expected type. If not 
 1364              	    call syntax_error  
 1365              	  input:
 1366              	      r0   token attribute
 1367              	  output:
 1368              	      r0  token attribute 
 1369              	      r1  token value
 1370              	  use:
 1371              	      T1   
 1372              	**********************************/
 1373              	    _FUNC expect 
 1374 ???? 4DF8048D 	    push {T1}
 1375 ???? 8046     	    mov T1,r0 
 1376 ???? 00B5FFF7 	    _CALL next_token 
 1376      9EFF5DF8 
 1376      04EB
 1377 ???? 4045     	    cmp r0,T1  
 1378 ???? 7FF45BAE 	    bne syntax_error 
 1379 ???? 5DF8048B 	    pop {T1}
 1380 ???? 7047     	    _RET 
 1381              	
 1382              	/***********************************
 1383              	    func_args 
 1384              	    get function arguments list 
 1385              	  input:
 1386              	    none 
 1387              	  output:
 1388              	    r0    arg. count 
 1389              	  use:
 1390              	
 1391              	************************************/
 1392              	    _FUNC func_args 
 1393 ???? 4FF00700 	    mov r0,#TK_LPAREN 
 1394 ???? 00B5FFF7 	    _CALL expect 
 1394      EDFF5DF8 
 1394      04EB
 1395 ???? 00B500F0 	    _CALL arg_list 
 1395      0CF85DF8 
 1395      04EB
 1396 ???? 01B4     	    push {r0}
 1397 ???? 4FF00800 	    mov r0,#TK_RPAREN 
 1398 ???? 00B5FFF7 	    _CALL expect 
 1398      E0FF5DF8 
 1398      04EB
 1399 ???? 01BC     	    pop {r0}
 1400 ???? 7047     	    _RET 
 1401              	
 1402              	/**********************************
 1403              	    arg_list 
ARM GAS  tinyBasic.s 			page 40


 1404              	    get arguments list on dstack 
 1405              	  input:
 1406              	    none 
 1407              	  output:
 1408              	    r0    arg count
 1409              	  use:
 1410              	    T1    tmp count  
 1411              	***********************************/
 1412              	    _FUNC arg_list 
 1413 ???? 4DF8048D 	    push {T1}
 1414 ???? 00B500F0 	1:  _CALL relation 
 1414      B1F85DF8 
 1414      04EB
 1415 ???? 0028     	    cmp R0,#TK_NONE 
 1416 ???? 10D0     	    beq 9f 
 1417 ???? 0F28     	    cmp r0,#TK_INTGR
 1418 ???? 0ED1     	    bne 9f 
 1419 ???? 4CF8041D 	    _PUSH r1 
 1420 ???? 08F10108 	    add T1,#1 
 1421 ???? 00B5FFF7 	    _CALL next_token 
 1421      6EFF5DF8 
 1421      04EB
 1422 ???? 0928     	    cmp r0,#TK_COMMA 
 1423 ???? EBD0     	    beq 1b 
 1424 ???? D4F800A0 	    _UNGET_TOKEN 
 1424      D4F808B0 
 1425 ???? 4046     	9:  mov r0,T1 
 1426 ???? 5DF8048B 	    pop {T1}
 1427 ???? 7047     	    _RET 
 1428              	
 1429              	/***********************************
 1430              	 factor parser 
 1431              	 factor ::= ['+'|'-'|e]  var | @ |
 1432              				 integer | function |
 1433              				 '('relation')' 
 1434              	  input: 
 1435              	    none 
 1436              	  output:
 1437              	    r0   token attribute 
 1438              	    r1   token value 
 1439              	  use:
 1440              	    r2   
 1441              	    T1   
 1442              	***********************************/
 1443              	    _FUNC factor 
 1444 ???? 2DE90401 	    push {r2,T1}
 1445 ???? 00B5FFF7 	    _CALL next_token 
 1445      5DFF5DF8 
 1445      04EB
 1446 ???? 4FF00108 	    mov T1,#1  
 1447 ???? 00F03000 	    and r0,#TK_GRP_MASK 
 1448 ???? 1028     	    cmp r0,#TK_GRP_ADD
 1449 ???? 06D1     	    bne 1f 
 1450 ???? 4FF0FF38 	    mov T1,#-1
 1451 ???? 00B5FFF7 	    _CALL next_token 
 1451      50FF5DF8 
 1451      04EB
ARM GAS  tinyBasic.s 			page 41


 1452 ???? 0F28     	1:  cmp r0,#TK_INTGR 
 1453 ???? 0DD0     	    beq 8f 
 1454 ???? 0628     	    cmp r0,#TK_ARRAY 
 1455 ???? 04D1     	    bne 3f 
 1456 ???? 00B500F0 	    _CALL get_array_element
 1456      BFF85DF8 
 1456      04EB
 1457              	
 1458 ???? 0528     	3:  cmp r0,#TK_VAR 
 1459 ???? FFD1     	    bne 4f 
 1460              	
 1461 ???? 0C28     	4:  cmp r0,#TK_IFUNC 
 1462 ???? FFD1     	    bne 5f 
 1463              	
 1464 ???? 0D28     	5:  cmp r0,#TK_CFUNC 
 1465 ???? 7FF4FEAF 	    bne 6f 
 1466              	
 1467 ???? 08FB01F1 	8:  mul r1,T1 
 1468 ???? BDE80401 	    pop {r2,T1}   
 1469 ???? 7047     	    _RET 
 1470              	
 1471              	/*****************************************
 1472              	    term parser 
 1473              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1474              	    output:
 1475              	      r0  	token attribute 
 1476              	      r1		integer
 1477              	    use:
 1478              	      r2    first operand 
 1479              	      T1    operator 
 1480              	      T2    exit token attribute 
 1481              	******************************************/
 1482 ???? 00BF     	     _FUNC term 
 1483 ???? 2DE90403 	    push {r2,T1,T2}
 1484 ???? 4FF00009 	    mov T2,#TK_NONE 
 1485 ???? 00B5FFF7 	    _CALL factor  
 1485      CFFF5DF8 
 1485      04EB
 1486 ???? 0F28     	    cmp r0,#TK_INTGR
 1487 ???? 26D1     	    bne 8f
 1488 ???? 8146     	    mov T2,r0  // exit attribute 
 1489 ???? 0A46     	    mov r2,r1 // first operand   
 1490 ???? 00B5FFF7 	    _CALL next_token
 1490      28FF5DF8 
 1490      04EB
 1491 ???? 8046     	    mov T1,r0   
 1492 ???? 00F03000 	    and r0,#TK_GRP_MASK 
 1493 ???? 2028     	    cmp r0,#TK_GRP_MULT
 1494 ???? 1AD1     	    bne 8f  
 1495 ???? 00B5FFF7 	    _CALL factor  
 1495      BCFF5DF8 
 1495      04EB
 1496 ???? 0F28     	    cmp r0,#TK_INTGR
 1497 ???? 7FF4DBAD 	    bne syntax_error 
 1498 ???? B8F1200F 	    cmp T1,#TK_MULT
 1499 ???? 02D1     	    bne 2f 
 1500              	multiplication:
ARM GAS  tinyBasic.s 			page 42


 1501 ???? 01FB02F2 	    mul r2,r1
 1502 ???? 10E0     	    b 9f 
 1503 ???? B8F1210F 	2:  cmp T1,#TK_DIV 
 1504 ???? 02D1     	    bne modulo
 1505              	division:
 1506 ???? 92FBF1F2 	    sdiv r2,r2,r1
 1507 ???? 0AE0     	    b 9f  
 1508              	modulo:
 1509 ???? 1046     	    mov r0,r2 
 1510 ???? 92FBF1F2 	    sdiv r2,r2,r1 
 1511 ???? 01FB02F2 	    mul  r2,r1 
 1512 ???? A0EB0202 	    sub  r2,r0,r2 
 1513 ???? D4F800A0 	8:  _UNGET_TOKEN
 1513      D4F808B0 
 1514 ???? 1146     	9:  mov r1,r2 
 1515 ???? 4846     	    mov r0,T2 
 1516 ???? BDE80403 	    pop {r2,T1,T2}
 1517 ???? 7047     	    _RET 
 1518              	
 1519              	/*****************************************
 1520              	    expression parser 
 1521              	    expression ::= term [['+'|'-'] term]*
 1522              	    result range {-32768..32767}
 1523              	    output:
 1524              	      r0    token attribute 
 1525              	      r1 	  integer
 1526              	    use:
 1527              	      r2  left operand 
 1528              	      T1  operator 
 1529              	      T2  exit token attribute
 1530              	******************************************/
 1531 ???? 00BF     	    _FUNC expression 
 1532 ???? 2DE90403 	    push {r2,t1,t2}
 1533 ???? 4FF00009 	    mov T2,#TK_NONE
 1534 ???? 82EA0202 	    eor r2,r2 // zero 
 1535 ???? 00B5FFF7 	    _CALL term 
 1535      BBFF5DF8 
 1535      04EB
 1536 ???? 0F28     	    cmp r0,#TK_INTGR  
 1537 ???? 1AD1     	    bne 8f 
 1538 ???? 0A46     	    mov r2,r1 // first operand   
 1539 ???? 00B5FFF7 	1:  _CALL next_token 
 1539      EBFE5DF8 
 1539      04EB
 1540 ???? 8046     	    mov T1,r0 // token attribute 
 1541 ???? 00F03000 	    and r0,#TK_GRP_MASK 
 1542 ???? 1028     	    cmp r0,#TK_GRP_ADD 
 1543 ???? 0FD1     	    bne 8f 
 1544 ???? 00B5FFF7 	3:  _CALL term 
 1544      A9FF5DF8 
 1544      04EB
 1545 ???? 0F28     	    cmp r0,#TK_INTGR 
 1546 ???? 7FF49EAD 	    bne syntax_error 
 1547 ???? B8F1100F 	    cmp T1,#TK_PLUS 
 1548 ???? 02D0     	    beq 4f 
 1549 ???? A2EB0101 	    sub r1,r2,r1 // N1-N2  
 1550 ???? E7E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 43


 1551 ???? 1144     	4:  add r1,r2,r1 // N1+N2
 1552 ???? E5E7     	    b 1b
 1553 ???? D4F800A0 	8:  _UNGET_TOKEN 
 1553      D4F808B0 
 1554 ???? 4846     	9:  mov r0,T2 
 1555 ???? 1146     	    mov r1,r2 
 1556 ???? BDE80403 	    pop {r2,t1,t2}
 1557 ???? 7047     	    _RET 
 1558              	
 1559              	
 1560              	/**********************************************
 1561              	    relation parser 
 1562              	    rel ::= expr1 rel_op expr2
 1563              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1564              	    relation return  integer , zero is false 
 1565              	    output:
 1566              	        r0	TK_INTGR  
 1567              	        r1	integer 
 1568              	    use:
 1569              	        r2   first operand 
 1570              	        T1   relop   
 1571              	**********************************************/
 1572 ???? 00BF     	    _FUNC relation 
 1573 ???? 2DE90401 	    push {r2,T1}
 1574 ???? 00B5FFF7 	    _CALL expression 
 1574      C9FF5DF8 
 1574      04EB
 1575 ???? 0F28     	    cmp r0,#TK_INTGR 
 1576 ???? 7FF482AD 	    bne syntax_error 
 1577 ???? 0A46     	    mov r2,r1  // first operand  
 1578 ???? 00B5FFF7 	    _CALL next_token 
 1578      BCFE5DF8 
 1578      04EB
 1579 ???? 8046     	    mov T1,r0  // relop  
 1580 ???? 00F03000 	    and r0,#TK_GRP_MASK 
 1581 ???? 3028     	    cmp r0,#TK_GRP_RELOP 
 1582 ???? 1DD1     	    bne 8f  // single operand 
 1583 ???? 00B5FFF7 	    _CALL expression 
 1583      B6FF5DF8 
 1583      04EB
 1584 ???? 0F28     	    cmp r0,#TK_INTGR 
 1585 ???? 7FF46FAD 	    bne syntax_error 
 1586 ???? 8A42     	    cmp r2,r1 // compare operands  
 1587 ???? 4FF0FF31 	    mov r1,#-1 
 1588 ???? 1E4A     	    ldr r2,=relop_jmp
 1589 ???? 08F00708 	    and T1,#7 // {1..6}
 1590 ???? D2E808F0 	    tbb [r2,T1]    
 1591              	rel_idx0:
 1592              	rel_eq:
 1593 ???? 11D0     	    beq 9f 
 1594 ???? 08E0     	    b rel_false
 1595              	rel_lt: 
 1596 ???? 0FDB     	    blt 9f   
 1597 ???? 06E0     	    b rel_false 
 1598              	rel_le:
 1599 ???? 0DDD     	    ble 9f  
 1600 ???? 04E0     	    b rel_false 
ARM GAS  tinyBasic.s 			page 44


 1601              	rel_gt:
 1602 ???? 0BDC     	    bgt 9f  
 1603 ???? 02E0     	    b rel_false  
 1604              	rel_ge:
 1605 ???? 09DA     	    bge 9f  
 1606 ???? 00E0     	    b rel_false  
 1607              	rel_diff:
 1608 ???? 07D1     	    bne 9f 
 1609              	rel_false:    
 1610 ???? 81EA0101 	    eor r1,r1  // false
 1611 ???? 04E0     	    b 9f  
 1612 ???? D4F800A0 	8:  _UNGET_TOKEN 
 1612      D4F808B0 
 1613 ???? 1146     	    mov r1,r2    
 1614 ???? 4FF00F00 	9:  mov r0,#TK_INTGR
 1615 ???? BDE80401 	    pop {r2,T1}
 1616 ???? 7047     	    _RET 
 1617              	
 1618              	
 1619              	relop_jmp: 
 1620 ???? 00       	  .byte 0 
 1621 ???? 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1622 ???? 00       	  .byte 0 // =
 1623 ???? 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1624 ???? 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1625 ???? 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1626 ???? 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1627              	
 1628              	
 1629              	/***********************************
 1630              	    get_array_element 
 1631              	    return index of array element 
 1632              	  input:
 1633              	    none 
 1634              	  output:
 1635              	    r0   address of element 
 1636              	  use:
 1637              	
 1638              	************************************/
 1639 ???? 0000BF   	    _FUNC get_array_element 
 1640 ???? D4F8CC00 	    ldr r0,[UPP,#ARRAY_ADR]
 1641 ???? 4FEA8101 	    lsl r1,#2 
 1642 ???? A0EB0100 	    sub r0,r1 
 1643 ???? 0168     	    ldr r1,[r0]
 1644 ???? 4FF00F00 	    mov r0,#TK_INTGR 
 1645 ???? 7047     	    _RET 
 1646              	
 1647              	/******************************
 1648              	    CONSTANTS data
 1649              	******************************/
 1650              	
 1651              	  .section .rodata 
 1652              	
 1653              	// system variables initial value 
 1654              	uzero:
 1655 ???? 00000000 	  .word 0 // IN
 1656 ???? 00000000 	  .word 0 // IN_SAVED
ARM GAS  tinyBasic.s 			page 45


 1657 ???? 00000000 	  .word 0 // COUNT
 1658 ???? 00000000 	  .word 0 // BASICPTR
 1659 ???? 00000000 	  .word 0 // DATAPTR
 1660 ???? 00000000 	  .word 0 // DATA
 1661 ???? 00000000 	  .word 0 // DATALEN
 1662 ???? 0A000000 	  .word 10 // BASE
 1663 ???? 00000000 	  .word 0 // TICKS
 1664 ???? 00000000 	  .word 0 // TIMER
 1665 ???? AA5555AA 	  .word 0xaa5555aa // SEED
 1666 ???? 00000000 	  .word FILE_SYSTEM // FSPTR
 1667 ???? 00000000 	  .word 0 // FFREE
 1668 ???? 00040020 	  .word RAM_ADR+1024 // TXTBGN
 1669 ???? 00040020 	  .word RAM_ADR+1024 // TXTEND
 1670 ???? 00000000 	  .word 0 //LOOP_DEPTH
 1671 ???? 00000000 	  .word 0 // ARRAY_SIZE
 1672 ???? 00000000 	  .word 0 // FLAGS
 1673 ???? 04000000 	  .word 4 // TAB_WIDTH
 1674 ???? 00000000 	  .word 0 // RX_HEAD
 1675 ???? 00000000 	  .word 0 // RX_TAIL
 1676 ???? 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1676      00000000 
 1676      00000000 
 1676      00000000 
 1677 ???? 00000000 	  .space VARS_SIZE,0 // VARS
 1677      00000000 
 1677      00000000 
 1677      00000000 
 1677      00000000 
 1678 ???? FCFFFFFF 	  .word _pad - 4  // ARRAY_ADR 
 1679 ???? 00000000 	  .space 4, 0 // padding 
 1680              	ulast:
 1681              	
 1682              	  .section .rodata.dictionary 
 1683              	
 1684              	// keep alphabetic order for BASIC names from Z-A
 1685              	// this sort order is for for WORDS cmd output. 	
 1686              	
 1687              		.equ link, 0
 1688              	kword_end:
 1689 ???? 0C000000 	  _dict_entry TK_NONE,"",0 
 1689      00000000 
 1689      00000000 
 1689      00000000 
 1690 ???? 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1690      64000000 
 1690      0B000000 
 1690      5854524D 
 1690      54000000 
 1691 ???? 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1691      65000000 
 1691      0B000000 
 1691      58524356 
 1691      00000000 
 1692 ???? 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1692      63000000 
 1692      0C000000 
 1692      584F5200 
ARM GAS  tinyBasic.s 			page 46


 1693 ???? 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1693      62000000 
 1693      0B000000 
 1693      57524954 
 1693      45000000 
 1694 ???? 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1694      61000000 
 1694      0B000000 
 1694      574F5244 
 1694      53000000 
 1695 ???? 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1695      60000000 
 1695      0B000000 
 1695      57414954 
 1695      00000000 
 1696 ???? 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1696      5F000000 
 1696      0C000000 
 1696      55535200 
 1697 ???? 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1697      5E000000 
 1697      0B000000 
 1697      554E5449 
 1697      4C000000 
 1698 ???? A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1698      5D000000 
 1698      0C000000 
 1698      55464C41 
 1698      53480000 
 1699 ???? B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1699      5C000000 
 1699      0C000000 
 1699      55424F55 
 1699      4E440000 
 1700 ???? C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1700      5B000000 
 1700      0B000000 
 1700      544F4E45 
 1700      00000000 
 1701 ???? DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1701      5A000000 
 1701      0B000000 
 1701      544F0000 
 1702 ???? F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1702      58000000 
 1702      0B000000 
 1702      54494D45 
 1702      52000000 
 1703 ???? 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1703      59000000 
 1703      0C000000 
 1703      54494D45 
 1703      4F555400 
 1704 ???? 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1704      57000000 
 1704      0C000000 
 1704      5449434B 
ARM GAS  tinyBasic.s 			page 47


 1704      53000000 
 1705 ???? 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1705      56000000 
 1705      0B000000 
 1705      53544F50 
 1705      00000000 
 1706 ???? 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1706      55000000 
 1706      0B000000 
 1706      53544550 
 1706      00000000 
 1707 ???? 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1707      54000000 
 1707      0B000000 
 1707      53504957 
 1707      52000000 
 1708 ???? 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1708      53000000 
 1708      0B000000 
 1708      53504953 
 1708      454C0000 
 1709 ???? 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1709      51000000 
 1709      0C000000 
 1709      53504952 
 1709      44000000 
 1710 ???? 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1710      52000000 
 1710      0B000000 
 1710      53504945 
 1710      4E000000 
 1711 ???? A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1711      50000000 
 1711      0B000000 
 1711      534C4545 
 1711      50000000 
 1712 ???? B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1712      4F000000 
 1712      0C000000 
 1712      53495A45 
 1712      00000000 
 1713 ???? C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1713      4E000000 
 1713      0B000000 
 1713      53484F57 
 1713      00000000 
 1714 ???? DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1714      4D000000 
 1714      0B000000 
 1714      53415645 
 1714      00000000 
 1715 ???? F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1715      4C000000 
 1715      0B000000 
 1715      52554E00 
 1716 ???? 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1716      4B000000 
ARM GAS  tinyBasic.s 			page 48


 1716      0C000000 
 1716      52534849 
 1716      46540000 
 1717 ???? 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1717      4A000000 
 1717      0C000000 
 1717      524E4400 
 1718 ???? 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1718      49000000 
 1718      0B000000 
 1718      52455455 
 1718      524E0000 
 1719 ???? 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1719      48000000 
 1719      0B000000 
 1719      52455354 
 1719      4F524500 
 1720 ???? 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1720      47000000 
 1720      0B000000 
 1720      52454D41 
 1720      524B0000 
 1721 ???? 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1721      46000000 
 1721      0B000000 
 1721      5245424F 
 1721      4F540000 
 1722 ???? 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1722      45000000 
 1722      0C000000 
 1722      52454144 
 1722      00000000 
 1723 ???? 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1723      44000000 
 1723      0C000000 
 1723      514B4559 
 1723      00000000 
 1724 ???? 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1724      43000000 
 1724      0C000000 
 1724      50525449 
 1724      00000000 
 1725 ???? B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1725      42000000 
 1725      0C000000 
 1725      50525448 
 1725      00000000 
 1726 ???? C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1726      41000000 
 1726      0C000000 
 1726      50525447 
 1726      00000000 
 1727 ???? D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1727      40000000 
 1727      0C000000 
 1727      50525446 
 1727      00000000 
ARM GAS  tinyBasic.s 			page 49


 1728 ???? EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1728      3F000000 
 1728      0C000000 
 1728      50525445 
 1728      00000000 
 1729 ???? 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1729      3E000000 
 1729      0C000000 
 1729      50525444 
 1729      00000000 
 1730 ???? 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1730      3D000000 
 1730      0C000000 
 1730      50525443 
 1730      00000000 
 1731 ???? 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1731      3C000000 
 1731      0C000000 
 1731      50525442 
 1731      00000000 
 1732 ???? 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1732      3B000000 
 1732      0C000000 
 1732      50525441 
 1732      00000000 
 1733 ???? 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1733      3A000000 
 1733      0B000000 
 1733      5052494E 
 1733      54000000 
 1734 ???? 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1734      39000000 
 1734      0C000000 
 1734      504F5554 
 1734      00000000 
 1735 ???? 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1735      38000000 
 1735      0B000000 
 1735      504F4B45 
 1735      00000000 
 1736 ???? 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1736      35000000 
 1736      0B000000 
 1736      504D4F44 
 1736      45000000 
 1737 ???? A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1737      37000000 
 1737      0C000000 
 1737      50494E50 
 1737      00000000 
 1738 ???? B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1738      36000000 
 1738      0C000000 
 1738      5045454B 
 1738      00000000 
 1739 ???? C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1739      34000000 
ARM GAS  tinyBasic.s 			page 50


 1739      0B000000 
 1739      50415553 
 1739      45000000 
 1740 ???? DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1740      33000000 
 1740      0C000000 
 1740      50414400 
 1741 ???? F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1741      32000000 
 1741      0C000000 
 1741      4F520000 
 1742 ???? 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1742      31000000 
 1742      0C000000 
 1742      4F445200 
 1743 ???? 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1743      30000000 
 1743      0C000000 
 1743      4E4F5400 
 1744 ???? 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1744      2E000000 
 1744      0B000000 
 1744      4E455854 
 1744      00000000 
 1745 ???? 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1745      2F000000 
 1745      0B000000 
 1745      4E455700 
 1746 ???? 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1746      2D000000 
 1746      0C000000 
 1746      4D554C44 
 1746      49560000 
 1747 ???? 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1747      2C000000 
 1747      0C000000 
 1747      4C534849 
 1747      46540000 
 1748 ???? 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1748      2B000000 
 1748      0C000000 
 1748      4C4F4700 
 1749 ???? 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1749      2A000000 
 1749      0B000000 
 1749      4C4F4144 
 1749      00000000 
 1750 ???? 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1750      29000000 
 1750      0B000000 
 1750      4C495354 
 1750      00000000 
 1751 ???? A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1751      28000000 
 1751      0B000000 
 1751      4C455400 
 1752 ???? B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
ARM GAS  tinyBasic.s 			page 51


 1752      27000000 
 1752      0C000000 
 1752      4B455900 
 1753 ???? C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1753      26000000 
 1753      0B000000 
 1753      49574447 
 1753      52454600 
 1754 ???? D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1754      25000000 
 1754      0B000000 
 1754      49574447 
 1754      454E0000 
 1755 ???? E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1755      24000000 
 1755      0C000000 
 1755      494E5645 
 1755      52540000 
 1756 ???? FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1756      23000000 
 1756      0B000000 
 1756      494E5055 
 1756      54000000 
 1757 ???? 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1757      22000000 
 1757      0B000000 
 1757      49460000 
 1758 ???? 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1758      21000000 
 1758      0C000000 
 1758      49445200 
 1759 ???? 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1759      20000000 
 1759      0B000000 
 1759      48455800 
 1760 ???? 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1760      1F000000 
 1760      0C000000 
 1760      4750494F 
 1760      00000000 
 1761 ???? 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1761      1E000000 
 1761      0B000000 
 1761      474F544F 
 1761      00000000 
 1762 ???? 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1762      1D000000 
 1762      0B000000 
 1762      474F5355 
 1762      42000000 
 1763 ???? 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1763      1C000000 
 1763      0B000000 
 1763      464F5247 
 1763      45540000 
 1764 ???? 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1764      1B000000 
ARM GAS  tinyBasic.s 			page 52


 1764      0B000000 
 1764      464F5200 
 1765 ???? A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1765      1A000000 
 1765      0B000000 
 1765      46435055 
 1765      00000000 
 1766 ???? B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1766      18000000 
 1766      0B000000 
 1766      454E4400 
 1767 ???? C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1767      19000000 
 1767      0C000000 
 1767      45455052 
 1767      4F4D0000 
 1768 ???? D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1768      17000000 
 1768      0B000000 
 1768      44575249 
 1768      54450000 
 1769 ???? EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1769      16000000 
 1769      0C000000 
 1769      44524541 
 1769      44000000 
 1770 ???? 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1770      15000000 
 1770      0B000000 
 1770      444F0000 
 1771 ???? 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1771      14000000 
 1771      0B000000 
 1771      44495200 
 1772 ???? 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1772      13000000 
 1772      0B000000 
 1772      44454300 
 1773 ???? 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1773      12000000 
 1773      0C000000 
 1773      44445200 
 1774 ???? 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1774      11000000 
 1774      0B000000 
 1774      44415441 
 1774      4C4E0000 
 1775 ???? 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 1775      10000000 
 1775      0B000000 
 1775      44415441 
 1775      00000000 
 1776 ???? 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 1776      0F000000 
 1776      0C000000 
 1776      43524C00 
 1777 ???? 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
ARM GAS  tinyBasic.s 			page 53


 1777      0E000000 
 1777      0C000000 
 1777      43524800 
 1778 ???? 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 1778      0D000000 
 1778      0D000000 
 1778      43484152 
 1778      00000000 
 1779 ???? 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 1779      0C000000 
 1779      0B000000 
 1779      42594500 
 1780 ???? B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 1780      0B000000 
 1780      0B000000 
 1780      42544F47 
 1780      4C000000 
 1781 ???? C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 1781      0A000000 
 1781      0C000000 
 1781      42544553 
 1781      54000000 
 1782 ???? D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 1782      09000000 
 1782      0B000000 
 1782      42534554 
 1782      00000000 
 1783 ???? E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 1783      08000000 
 1783      0B000000 
 1783      42524553 
 1783      00000000 
 1784 ???? FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 1784      07000000 
 1784      0C000000 
 1784      42495400 
 1785 ???? 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 1785      06000000 
 1785      0B000000 
 1785      41575500 
 1786 ???? 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 1786      05000000 
 1786      0B000000 
 1786      4155544F 
 1786      52554E00 
 1787 ???? 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 1787      04000000 
 1787      0C000000 
 1787      41534300 
 1788 ???? 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 1788      03000000 
 1788      0C000000 
 1788      414E4400 
 1789 ???? 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 1789      02000000 
 1789      0C000000 
 1789      41444352 
ARM GAS  tinyBasic.s 			page 54


 1789      45414400 
 1790 ???? 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 1790      01000000 
 1790      0B000000 
 1790      4144434F 
 1790      4E000000 
 1791              	first_link: 
 1792 ???? 78070000 	  .word LINK 
 1793 ???? 00000000 	  .word ABS_IDX 
 1794 ???? 0C000000 	  .word TK_IFUNC
 1795              	kword_dict: // first name field 
 1796              	  .equ LINK,. 
 1797 ???? 41425300 	  .asciz "ABS" 
 1798              	  .p2align 2 
 1799              	
 1800              	    .section .rodata.fn_tabld 
 1801              	
 1802              	//comands and fonctions address table 	
 1803              	fn_table:
 1804 ???? 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 1804      00000000 
 1804      00000000 
 1804      00000000 
 1804      00000000 
 1805 ???? 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 1805      00000000 
 1805      00000000 
 1805      00000000 
 1805      00000000 
 1806 ???? 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 1806      00000000 
 1806      00000000 
 1806      00000000 
 1806      00000000 
 1807 ???? 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 1807      00000000 
 1807      00000000 
 1807      00000000 
 1807      00000000 
 1808 ???? 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 1808      00000000 
 1808      00000000 
 1808      00000000 
 1808      00000000 
 1809 ???? 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 1809      00000000 
 1809      00000000 
 1809      00000000 
 1809      00000000 
 1810 ???? 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 1810      00000000 
 1810      00000000 
 1810      00000000 
 1810      00000000 
 1811 ???? 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 1811      00000000 
 1811      00000000 
ARM GAS  tinyBasic.s 			page 55


 1811      00000000 
 1811      00000000 
 1812 ???? 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 1812      00000000 
 1812      00000000 
 1812      00000000 
 1812      00000000 
 1813 ???? 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 1813      00000000 
 1813      00000000 
 1813      00000000 
 1813      00000000 
 1814 ???? 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 1814      00000000 
 1814      00000000 
 1814      00000000 
 1814      00000000 
 1815 ???? 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 1815      00000000 
 1815      00000000 
 1815      00000000 
 1815      00000000 
 1816 ???? 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1816      00000000 
 1817 ???? 00000000 		.word 0 
 1818              	
 1819              	
 1820              	/**********************************
 1821              	    BASIC commands and functions 
 1822              	**********************************/
 1823              	
 1824              	    .section .text.basic , "ax", %progbits 
 1825              	
 1826              	
 1827              	//************ test code  *****************
 1828              	    _GBL_FUNC tbi_test 
 1829              	
 1830              	
 1831 ???? 7047     	    _RET 
 1832              	
 1833              	//************ end test code **************
 1834              	
 1835              	
 1836              	/*******************************
 1837              	  BASIC:  ABS expr 
 1838              	  input:
 1839              	    none 
 1840              	  output:
 1841              	    r0    token type 
 1842              	    r1    abs(expr)
 1843              	  use:
 1844              	    none 
 1845              	******************************/
 1846 ???? 00BF     	    _FUNC abs 
ARM GAS  tinyBasic.s 			page 56


 1847 ???? 00B5FFF7 	    _CALL arg_list
 1847      FEFF5DF8 
 1847      04EB
 1848 ???? 0128     	    cmp r0,#1 
 1849 ???? 01D0     	    beq 1f 
 1850 ???? FFF7FEBF 	    b syntax_error 
 1851 ???? 5CF8041B 	1:  _POP r1 
 1852 ???? 11F0004F 	    tst r1,#(1<<31)
 1853 ???? 01D0     	    beq 9f
 1854 ???? C1F10001 	    rsb r1,#0 
 1855 ???? 4FF00F00 	9:  mov r0,#TK_INTGR
 1856 ???? 7047     	   _RET 
 1857              	
 1858 ???? 00BF     	    _FUNC power_adc
 1859 ???? 7047     	    _RET
 1860              	
 1861 ???? 00BF     	    _FUNC analog_read
 1862 ???? 7047     	    _RET
 1863              	
 1864 ???? 00BF     	    _FUNC bit_and
 1865 ???? 7047     	    _RET
 1866              	
 1867 ???? 00BF     	    _FUNC ascii
 1868 ???? 7047     	    _RET
 1869              	
 1870 ???? 00BF     	    _FUNC autorun
 1871 ???? 7047     	    _RET
 1872              	
 1873 ???? 00BF     	    _FUNC awu
 1874 ???? 7047     	    _RET
 1875              	
 1876 ???? 00BF     	    _FUNC bitmask
 1877 ???? 7047     	    _RET 
 1878              	
 1879              	  
 1880              	  /*********************************
 1881              	   BASIC: BRES adr, mask   
 1882              	   reset bits [adr]= [adr] & ~mask  
 1883              	   input:
 1884              	     none 
 1885              	    output;
 1886              	      none 
 1887              	    use:
 1888              	      T1   temp
 1889              	      T2   temp 
 1890              	*******************************/     
 1891 ???? 00BF     	  _FUNC bit_reset
 1892 ???? 00B5FFF7 	    _CALL arg_list 
 1892      FEFF5DF8 
 1892      04EB
 1893 ???? 0228     	    cmp r0,#2 
 1894 ???? 01D0     	    beq 1f 
 1895 ???? FFF7FEBF 	    b syntax_error 
 1896 ???? 5CF8041B 	1:  _POP r1 //mask 
 1897 ???? 5CF8040B 	    _POP r0 //address 
 1898 ???? D0F80090 	    ldr T2,[r0] 
 1899 ???? 81F0FF31 	    eor r1,#-1 // ~mask 
ARM GAS  tinyBasic.s 			page 57


 1900 ???? 01EA0901 	    and r1,T2
 1901 ???? 0160     	    str r1,[r0]
 1902 ???? 00F050BC 	    b interp_loop 
 1903              	
 1904              	
 1905              	/*********************************
 1906              	   BASIC: BSET adr, mask   
 1907              	   reset bits [adr]= [adr] & ~mask  
 1908              	   input:
 1909              	      none 
 1910              	    output;
 1911              	      none 
 1912              	    use:
 1913              	      T1   temp
 1914              	      T2   temp  
 1915              	*******************************/     
 1916              	    _FUNC bit_set
 1917 ???? 00B5FFF7 	    _CALL arg_list 
 1917      FEFF5DF8 
 1917      04EB
 1918 ???? 0228     	    cmp r0,#2 
 1919 ???? 01D0     	    beq 1f 
 1920 ???? FFF7FEBF 	    b syntax_error 
 1921 ???? 5CF8041B 	1:  _POP r1 //mask 
 1922 ???? 5CF8040B 	    _POP r0 //address 
 1923 ???? D0F80090 	    ldr T2,[r0] 
 1924 ???? 41EA0901 	    orr r1,T2
 1925 ???? 0160     	    str r1,[r0]
 1926 ???? 00F050BC 	    b interp_loop 
 1927              	
 1928              	  /*********************************
 1929              	   BASIC: BTOGL adr, mask   
 1930              	   reset bits [adr]= [adr] & ~mask  
 1931              	   input:
 1932              	     r0    adr 
 1933              	     r1    mask 
 1934              	    output;
 1935              	      none 
 1936              	    use:
 1937              	      T1   temp
 1938              	      T2   temp  
 1939              	*******************************/     
 1940              	  _FUNC bit_toggle
 1941 ???? 00B5FFF7 	    _CALL arg_list 
 1941      FEFF5DF8 
 1941      04EB
 1942 ???? 0228     	    cmp r0,#2 
 1943 ???? 01D0     	    beq 1f 
 1944 ???? FFF7FEBF 	    b syntax_error 
 1945 ???? 5CF8041B 	1:  _POP r1 //mask 
 1946 ???? 5CF8040B 	    _POP r0 //address 
 1947 ???? D0F80090 	    ldr T2,[r0] 
 1948 ???? 81EA0901 	    eor r1,T2
 1949 ???? 0160     	    str r1,[r0]
 1950 ???? 00F050BC 	    b interp_loop 
 1951              	
 1952              	    _FUNC bit_test
ARM GAS  tinyBasic.s 			page 58


 1953 ???? 00F050BC 	    b interp_loop
 1954              	
 1955              	    _FUNC bye
 1956 ???? 00F050BC 	    b interp_loop
 1957              	
 1958              	    _FUNC char
 1959 ???? 00F050BC 	    b interp_loop
 1960              	
 1961              	    _FUNC const_cr2
 1962 ???? 00F050BC 	    b interp_loop 
 1963              	
 1964              	    _FUNC const_cr1
 1965 ???? 00F050BC 	    b interp_loop
 1966              	
 1967              	    _FUNC data
 1968 ???? 00F050BC 	    b interp_loop
 1969              	
 1970              	    _FUNC data_line
 1971 ???? 00F050BC 	    b interp_loop
 1972              	
 1973              	    _FUNC const_ddr
 1974 ???? 00F050BC 	    b interp_loop
 1975              	
 1976              	    _FUNC dec_base
 1977 ???? 00F050BC 	    b interp_loop
 1978              	
 1979              	    _FUNC directory
 1980 ???? 00F050BC 	    b interp_loop
 1981              	
 1982              	    _FUNC do_loop
 1983 ???? 00F050BC 	    b interp_loop
 1984              	
 1985              	    _FUNC digital_read
 1986 ???? 00F050BC 	    b interp_loop
 1987              	
 1988              	    _FUNC digital_write
 1989 ???? 00F050BC 	    b interp_loop 
 1990              	
 1991              	    _FUNC cmd_end
 1992 ???? 00F050BC 	    b interp_loop
 1993              	
 1994              	    _FUNC const_eeprom_base
 1995 ???? 00F050BC 	    b interp_loop
 1996              	
 1997              	    _FUNC fcpu
 1998 ???? 00F050BC 	    b interp_loop
 1999              	
 2000              	    _FUNC for
 2001 ???? 00F050BC 	    b interp_loop
 2002              	
 2003              	    _FUNC forget
 2004 ???? 00F050BC 	    b interp_loop
 2005              	
 2006              	    _FUNC gosub
 2007 ???? 00F050BC 	    b interp_loop
 2008              	
 2009              	    _FUNC goto
ARM GAS  tinyBasic.s 			page 59


 2010 ???? 00F050BC 	    b interp_loop
 2011              	
 2012              	    _FUNC gpio
 2013 ???? 00F050BC 	    b interp_loop 
 2014              	
 2015              	    _FUNC hex_base
 2016 ???? 00F050BC 	    b interp_loop
 2017              	
 2018              	    _FUNC const_idr
 2019 ???? 00F050BC 	    b interp_loop
 2020              	
 2021              	    _FUNC if
 2022 ???? 00F050BC 	    b interp_loop
 2023              	
 2024              	    _FUNC input_var
 2025 ???? 00F050BC 	    b interp_loop
 2026              	
 2027              	    _FUNC invert
 2028 ???? 00F050BC 	    b interp_loop
 2029              	
 2030              	    _FUNC enable_iwdg
 2031 ???? 00F050BC 	    b interp_loop
 2032              	
 2033              	    _FUNC refresh_iwdg
 2034 ???? 00F050BC 	    b interp_loop
 2035              	
 2036              	    _FUNC key
 2037 ???? 00F050BC 	    b interp_loop 
 2038              	
 2039              	/******************************
 2040              	  BASIC: [let] var=expr 
 2041              	         [let] @(expr)=expr
 2042              	  input:
 2043              	    none 
 2044              	  output:
 2045              	    none 
 2046              	  use:
 2047              	
 2048              	****************************/         
 2049              	    _FUNC let
 2050 ???? 00B5FFF7 	    _CALL next_token 
 2050      FEFF5DF8 
 2050      04EB
 2051 ???? 0528     	    cmp r0,#TK_VAR
 2052 ???? 03D0     	    beq let_var 
 2053 ???? 0628     	    cmp r0,#TK_ARRAY 
 2054 ???? 06D0     	    beq let_array 
 2055 ???? FFF7FEBF 	    b syntax_error 
 2056              	let_var:
 2057 ???? 00B5FFF7 	    _CALL get_array_element
 2057      FEFF5DF8 
 2057      04EB
 2058              	let_array: 
 2059 ???? 4CF8040D 	    _PUSH r0 
 2060 ???? 00B5FFF7 	    _CALL next_token 
 2060      FEFF5DF8 
 2060      04EB
ARM GAS  tinyBasic.s 			page 60


 2061 ???? 3228     	    cmp r0,#TK_EQUAL 
 2062 ???? 01D0     	    beq 1f 
 2063 ???? FFF7FEBF 	    b syntax_error 
 2064 ???? 00B5FFF7 	1:  _CALL relation  
 2064      FEFF5DF8 
 2064      04EB
 2065 ???? 0F28     	    cmp r0,#TK_INTGR
 2066 ???? 01D0     	    beq 2f 
 2067 ???? FFF7FEBF 	    b syntax_error 
 2068 ???? 5CF8040B 	2:  _POP r0 
 2069 ???? 0160     	    str r1,[r0]
 2070 ???? 4FF00000 	    mov r0,#TK_NONE 
 2071 ???? 00F050BC 	    b interp_loop 
 2072              	
 2073 ???? 00BF     	    _FUNC list
 2074 ???? 00F050BC 	    b interp_loop
 2075              	
 2076              	    _FUNC load
 2077 ???? 00F050BC 	    b interp_loop
 2078              	
 2079              	    _FUNC log2
 2080 ???? 00F050BC 	    b interp_loop
 2081              	
 2082              	    _FUNC lshift
 2083 ???? 00F050BC 	    b interp_loop
 2084              	
 2085              	    _FUNC muldiv
 2086 ???? 00F050BC 	    b interp_loop
 2087              	
 2088              	    _FUNC next
 2089 ???? 00F050BC 	    b interp_loop
 2090              	
 2091              	    _FUNC new
 2092 ???? 00F050BC 	    b interp_loop 
 2093              	
 2094              	    _FUNC func_not
 2095 ???? 00F050BC 	    b interp_loop
 2096              	
 2097              	    _FUNC const_odr
 2098 ???? 00F050BC 	    b interp_loop
 2099              	
 2100              	    _FUNC bit_or
 2101 ???? 00F050BC 	    b interp_loop
 2102              	
 2103              	    _FUNC pad_ref
 2104 ???? 00F050BC 	    b interp_loop
 2105              	
 2106              	    _FUNC pause
 2107 ???? 00F050BC 	    b interp_loop
 2108              	
 2109              	    _FUNC pin_mode
 2110 ???? 00F050BC 	    b interp_loop
 2111              	
 2112              	    _FUNC peek
 2113 ???? 00F050BC 	    b interp_loop
 2114              	
 2115              	    _FUNC const_input
ARM GAS  tinyBasic.s 			page 61


 2116 ???? 00F050BC 	    b interp_loop 
 2117              	
 2118              	    _FUNC poke
 2119 ???? 00F050BC 	    b interp_loop
 2120              	
 2121              	    _FUNC const_output
 2122 ???? 00F050BC 	    b interp_loop
 2123              	
 2124              	    _FUNC print
 2125 ???? 00F050BC 	    b interp_loop
 2126              	
 2127              	    _FUNC const_porta
 2128 ???? 00F050BC 	    b interp_loop
 2129              	
 2130              	    _FUNC const_portb
 2131 ???? 00F050BC 	    b interp_loop
 2132              	
 2133              	    _FUNC const_portc
 2134 ???? 00F050BC 	    b interp_loop
 2135              	
 2136              	    _FUNC const_portd
 2137 ???? 00F050BC 	    b interp_loop
 2138              	
 2139              	    _FUNC const_porte
 2140 ???? 00F050BC 	    b interp_loop 
 2141              	
 2142              	    _FUNC const_portf
 2143 ???? 00F050BC 	    b interp_loop
 2144              	
 2145              	    _FUNC const_portg
 2146 ???? 00F050BC 	    b interp_loop
 2147              	
 2148              	    _FUNC const_porth
 2149 ???? 00F050BC 	    b interp_loop
 2150              	
 2151              	    _FUNC const_porti
 2152 ???? 00F050BC 	    b interp_loop
 2153              	
 2154              	    _FUNC qkey
 2155 ???? 00F050BC 	    b interp_loop
 2156              	
 2157              	    _FUNC read
 2158 ???? 00F050BC 	    b interp_loop
 2159              	
 2160              	    _FUNC remark
 2161 ???? 00F050BC 	    b interp_loop 
 2162              	
 2163              	    _FUNC restore
 2164 ???? 00F050BC 	    b interp_loop
 2165              	
 2166              	    _FUNC return
 2167 ???? 00F050BC 	    b interp_loop
 2168              	
 2169              	    _FUNC  random
 2170 ???? 00F050BC 	    b interp_loop
 2171              	
 2172              	    _FUNC rshift
ARM GAS  tinyBasic.s 			page 62


 2173 ???? 00F050BC 	    b interp_loop
 2174              	
 2175              	    _FUNC run
 2176 ???? 00F050BC 	    b interp_loop
 2177              	
 2178              	    _FUNC save
 2179 ???? 00F050BC 	    b interp_loop
 2180              	
 2181              	    _FUNC show
 2182 ???? 00F050BC 	    b interp_loop
 2183              	
 2184              	    _FUNC size
 2185 ???? 00F050BC 	    b interp_loop 
 2186              	
 2187              	    _FUNC sleep
 2188 ???? 00F050BC 	    b interp_loop
 2189              	
 2190              	    _FUNC spi_read
 2191 ???? 00F050BC 	    b interp_loop
 2192              	
 2193              	    _FUNC spi_enable
 2194 ???? 00F050BC 	    b interp_loop
 2195              	
 2196              	    _FUNC spi_select
 2197 ???? 00F050BC 	    b interp_loop
 2198              	
 2199              	    _FUNC spi_write
 2200 ???? 00F050BC 	    b interp_loop
 2201              	
 2202              	    _FUNC step
 2203 ???? 00F050BC 	    b interp_loop
 2204              	
 2205              	    _FUNC stop
 2206 ???? 00F050BC 	    b interp_loop
 2207              	
 2208              	    _FUNC get_ticks
 2209 ???? 00F050BC 	    b interp_loop 
 2210              	
 2211              	    _FUNC set_timer
 2212 ???? 00F050BC 	    b interp_loop
 2213              	
 2214              	    _FUNC timeout
 2215 ???? 00F050BC 	    b interp_loop
 2216              	
 2217              	    _FUNC to
 2218 ???? 00F050BC 	    b interp_loop
 2219              	
 2220              	    _FUNC tone
 2221 ???? 00F050BC 	    b interp_loop
 2222              	
 2223              	    _FUNC ubound
 2224 ???? 00F050BC 	    b interp_loop
 2225              	
 2226              	    _FUNC uflash
 2227 ???? 00F050BC 	    b interp_loop
 2228              	
 2229              	    _FUNC until
ARM GAS  tinyBasic.s 			page 63


 2230 ???? 00F050BC 	    b interp_loop
 2231              	
 2232              	    _FUNC usr
 2233 ???? 00F050BC 	    b interp_loop 
 2234              	
 2235              	    _FUNC wait
 2236 ???? 00F050BC 	    b interp_loop
 2237              	
 2238              	    _FUNC words
 2239 ???? 00F050BC 	    b interp_loop
 2240              	
 2241              	    _FUNC write
 2242 ???? 00F050BC 	    b interp_loop
 2243              	
 2244              	    _FUNC bit_xor
 2245 ???? 00F050BC 	    b interp_loop
 2246              	
 2247              	    _FUNC transmit
 2248 ???? 00F050BC 	    b interp_loop
 2249              	
 2250              	    _FUNC receive
 2251 ???? 00F050BC 	    b interp_loop 
 2252              	
 2253              	
 2254              	/*************************************************
 2255              	   extra FLASH memory not used by Tiny BASIC
 2256              	   is used to save BASIC programs.
 2257              	************************************************/
 2258 ???? 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2258      00000000 
 2258      00000000 
 2258      00000000 
 2258      00000000 
 2259              	  .section .fs
 2260              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 64


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 65


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 66


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 67


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 68


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:159    *ABS*:00000000000000cc ARRAY_ADR
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 69


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 70


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:249    .text:0000000000000150 dump
         tinyBasic.s:273    .text:000000000000016c search_lineno
         tinyBasic.s:304    .text:000000000000018c delete_line
         tinyBasic.s:329    .text:00000000000001b8 create_gap
         tinyBasic.s:354    .text:00000000000001e0 insert_line
         tinyBasic.s:391    .text:000000000000022c compile
         tinyBasic.s:1357   .text:000000000000098c tib
         tinyBasic.s:1358   .text:0000000000000990 pad
         tinyBasic.s:453    .text:00000000000002bc comp_token
         tinyBasic.s:970    .text:0000000000000668 tb_error
         tinyBasic.s:529    .text:00000000000003b0 token_exit
         tinyBasic.s:719    .text:0000000000000530 skip
         tinyBasic.s:735    .text:0000000000000540 upper
         tinyBasic.s:626    .text:000000000000049c is_special
         tinyBasic.s:541    .text:00000000000003d5 token_ofs
         tinyBasic.s:467    .text:00000000000002fa tok_idx0
         tinyBasic.s:521    .text:000000000000038e try_other
         tinyBasic.s:471    .text:00000000000002fc single
         tinyBasic.s:474    .text:0000000000000300 lt
         tinyBasic.s:481    .text:0000000000000312 gt
         tinyBasic.s:494    .text:0000000000000336 bkslash
         tinyBasic.s:499    .text:0000000000000344 prt_cmd
         tinyBasic.s:503    .text:000000000000034e quote
ARM GAS  tinyBasic.s 			page 71


         tinyBasic.s:659    .text:00000000000004c4 parse_quote
         tinyBasic.s:506    .text:000000000000035a tick
         tinyBasic.s:577    .text:0000000000000428 parse_int
         tinyBasic.s:886    .text:00000000000005f0 parse_keyword
         tinyBasic.s:534    .text:00000000000003b4 char_list
         tinyBasic.s:535    .text:00000000000003b4 $d
         tinyBasic.s:537    .text:00000000000003c8 tok_single
         tinyBasic.s:690    .text:00000000000004fc get_escaped_char
         tinyBasic.s:708    .text:0000000000000528 escaped
         tinyBasic.s:708    .text:0000000000000528 $d
         tinyBasic.s:719    .text:0000000000000530 $t
         tinyBasic.s:753    .text:0000000000000550 is_digit
         tinyBasic.s:776    .text:0000000000000568 is_hex
         tinyBasic.s:801    .text:000000000000058c is_bit
         tinyBasic.s:822    .text:00000000000005a8 is_alpha
         tinyBasic.s:843    .text:00000000000005c0 is_num
         tinyBasic.s:864    .text:00000000000005d8 is_alnum
         tinyBasic.s:1795   .rodata.dictionary:000000000000078c kword_dict
         tinyBasic.s:1038   .text:00000000000006cc search_dict
         tinyBasic.s:955    .text:0000000000000660 syntax_error
         tinyBasic.s:925    .text:0000000000000640 cmd_name
         tinyBasic.s:980    .text:0000000000000686 err_msg
         tinyBasic.s:1096   .text:0000000000000748 dstack_empty
         tinyBasic.s:1211   .text:0000000000000834 warm_start
         tinyBasic.s:981    .text:0000000000000686 $d
         tinyBasic.s:987    .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:988    .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:989    .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:990    .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:991    .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:992    .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:993    .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:994    .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:995    .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:996    .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:997    .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:998    .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:999    .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1000   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1001   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1003   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1004   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1005   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1022   .text:00000000000006c6 $t
         tinyBasic.s:1022   .text:00000000000006c8 BTGL
         tinyBasic.s:1074   .text:0000000000000700 cold_start
         tinyBasic.s:1092   .text:0000000000000740 src_addr
         tinyBasic.s:1094   .text:0000000000000744 dest_addr
         tinyBasic.s:1680   .rodata:00000000000000d4 ulast
         tinyBasic.s:1654   .rodata:0000000000000000 uzero
         tinyBasic.s:1108   .text:000000000000074c prt_version
         tinyBasic.s:1185   .text:0000000000000810 warm_init
         tinyBasic.s:1228   .text:000000000000083c cmd_line
         tinyBasic.s:1093   .text:0000000000000740 $d
         tinyBasic.s:1108   .text:000000000000074c $t
         tinyBasic.s:1132   .text:00000000000007b4 version_msg
         tinyBasic.s:1134   .text:00000000000007d4 version
ARM GAS  tinyBasic.s 			page 72


         tinyBasic.s:1133   .text:00000000000007b4 $d
         tinyBasic.s:1149   .text:00000000000007d8 clear_vars
         tinyBasic.s:1165   .text:00000000000007f4 clear_basic
         tinyBasic.s:1239   .text:0000000000000868 interpreter
         tinyBasic.s:1261   .text:00000000000008a4 interp_loop
         tinyBasic.s:1246   .text:0000000000000876 next_line
         tinyBasic.s:1297   .text:00000000000008dc next_token
         tinyBasic.s:1803   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:2056   .text.basic:000000000000014e let_var
         tinyBasic.s:2058   .text.basic:0000000000000158 let_array
         tinyBasic.s:1339   .text:0000000000000944 tok_jmp
         tinyBasic.s:1340   .text:0000000000000944 $d
         tinyBasic.s:1357   .text:000000000000098c $d
         tinyBasic.s:1373   .text:0000000000000994 $t
         tinyBasic.s:1373   .text:0000000000000994 expect
         tinyBasic.s:1392   .text:00000000000009b0 func_args
         tinyBasic.s:1412   .text:00000000000009dc arg_list
         tinyBasic.s:1572   .text:0000000000000b48 relation
         tinyBasic.s:1443   .text:0000000000000a18 factor
         tinyBasic.s:1639   .text:0000000000000bcc get_array_element
         tinyBasic.s:1482   .text:0000000000000a6c term
         tinyBasic.s:1500   .text:0000000000000ab0 multiplication
         tinyBasic.s:1508   .text:0000000000000ac2 modulo
         tinyBasic.s:1505   .text:0000000000000abc division
         tinyBasic.s:1531   .text:0000000000000ae4 expression
         tinyBasic.s:1619   .text:0000000000000bc2 relop_jmp
         tinyBasic.s:1591   .text:0000000000000b92 rel_idx0
         tinyBasic.s:1592   .text:0000000000000b92 rel_eq
         tinyBasic.s:1609   .text:0000000000000ba8 rel_false
         tinyBasic.s:1595   .text:0000000000000b96 rel_lt
         tinyBasic.s:1598   .text:0000000000000b9a rel_le
         tinyBasic.s:1601   .text:0000000000000b9e rel_gt
         tinyBasic.s:1604   .text:0000000000000ba2 rel_ge
         tinyBasic.s:1607   .text:0000000000000ba6 rel_diff
         tinyBasic.s:1620   .text:0000000000000bc2 $d
         tinyBasic.s:2260   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1676   .rodata:0000000000000054 $d
         tinyBasic.s:1687   *ABS*:0000000000000000 link
         tinyBasic.s:1688   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:1796   .rodata.dictionary:000000000000078c LINK
         tinyBasic.s:1689   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:1791   .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:1846   .text.basic:0000000000000004 abs
         tinyBasic.s:1858   .text.basic:000000000000002c power_adc
         tinyBasic.s:1861   .text.basic:0000000000000030 analog_read
         tinyBasic.s:1864   .text.basic:0000000000000034 bit_and
         tinyBasic.s:1867   .text.basic:0000000000000038 ascii
         tinyBasic.s:1870   .text.basic:000000000000003c autorun
         tinyBasic.s:1873   .text.basic:0000000000000040 awu
         tinyBasic.s:1876   .text.basic:0000000000000044 bitmask
         tinyBasic.s:1891   .text.basic:0000000000000048 bit_reset
         tinyBasic.s:1916   .text.basic:0000000000000074 bit_set
         tinyBasic.s:1952   .text.basic:00000000000000c4 bit_test
         tinyBasic.s:1940   .text.basic:000000000000009c bit_toggle
         tinyBasic.s:1955   .text.basic:00000000000000c8 bye
         tinyBasic.s:1958   .text.basic:00000000000000cc char
         tinyBasic.s:1961   .text.basic:00000000000000d0 const_cr2
ARM GAS  tinyBasic.s 			page 73


         tinyBasic.s:1964   .text.basic:00000000000000d4 const_cr1
         tinyBasic.s:1967   .text.basic:00000000000000d8 data
         tinyBasic.s:1970   .text.basic:00000000000000dc data_line
         tinyBasic.s:1973   .text.basic:00000000000000e0 const_ddr
         tinyBasic.s:1976   .text.basic:00000000000000e4 dec_base
         tinyBasic.s:1979   .text.basic:00000000000000e8 directory
         tinyBasic.s:1982   .text.basic:00000000000000ec do_loop
         tinyBasic.s:1985   .text.basic:00000000000000f0 digital_read
         tinyBasic.s:1988   .text.basic:00000000000000f4 digital_write
         tinyBasic.s:1991   .text.basic:00000000000000f8 cmd_end
         tinyBasic.s:1994   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:1997   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2000   .text.basic:0000000000000104 for
         tinyBasic.s:2003   .text.basic:0000000000000108 forget
         tinyBasic.s:2006   .text.basic:000000000000010c gosub
         tinyBasic.s:2009   .text.basic:0000000000000110 goto
         tinyBasic.s:2012   .text.basic:0000000000000114 gpio
         tinyBasic.s:2015   .text.basic:0000000000000118 hex_base
         tinyBasic.s:2018   .text.basic:000000000000011c const_idr
         tinyBasic.s:2021   .text.basic:0000000000000120 if
         tinyBasic.s:2024   .text.basic:0000000000000124 input_var
         tinyBasic.s:2027   .text.basic:0000000000000128 invert
         tinyBasic.s:2030   .text.basic:000000000000012c enable_iwdg
         tinyBasic.s:2033   .text.basic:0000000000000130 refresh_iwdg
         tinyBasic.s:2036   .text.basic:0000000000000134 key
         tinyBasic.s:2049   .text.basic:0000000000000138 let
         tinyBasic.s:2073   .text.basic:0000000000000190 list
         tinyBasic.s:2076   .text.basic:0000000000000194 load
         tinyBasic.s:2079   .text.basic:0000000000000198 log2
         tinyBasic.s:2082   .text.basic:000000000000019c lshift
         tinyBasic.s:2085   .text.basic:00000000000001a0 muldiv
         tinyBasic.s:2088   .text.basic:00000000000001a4 next
         tinyBasic.s:2091   .text.basic:00000000000001a8 new
         tinyBasic.s:2094   .text.basic:00000000000001ac func_not
         tinyBasic.s:2097   .text.basic:00000000000001b0 const_odr
         tinyBasic.s:2100   .text.basic:00000000000001b4 bit_or
         tinyBasic.s:2103   .text.basic:00000000000001b8 pad_ref
         tinyBasic.s:2106   .text.basic:00000000000001bc pause
         tinyBasic.s:2109   .text.basic:00000000000001c0 pin_mode
         tinyBasic.s:2112   .text.basic:00000000000001c4 peek
         tinyBasic.s:2115   .text.basic:00000000000001c8 const_input
         tinyBasic.s:2118   .text.basic:00000000000001cc poke
         tinyBasic.s:2121   .text.basic:00000000000001d0 const_output
         tinyBasic.s:2124   .text.basic:00000000000001d4 print
         tinyBasic.s:2127   .text.basic:00000000000001d8 const_porta
         tinyBasic.s:2130   .text.basic:00000000000001dc const_portb
         tinyBasic.s:2133   .text.basic:00000000000001e0 const_portc
         tinyBasic.s:2136   .text.basic:00000000000001e4 const_portd
         tinyBasic.s:2139   .text.basic:00000000000001e8 const_porte
         tinyBasic.s:2142   .text.basic:00000000000001ec const_portf
         tinyBasic.s:2145   .text.basic:00000000000001f0 const_portg
         tinyBasic.s:2148   .text.basic:00000000000001f4 const_porth
         tinyBasic.s:2151   .text.basic:00000000000001f8 const_porti
         tinyBasic.s:2154   .text.basic:00000000000001fc qkey
         tinyBasic.s:2157   .text.basic:0000000000000200 read
         tinyBasic.s:2160   .text.basic:0000000000000204 remark
         tinyBasic.s:2163   .text.basic:0000000000000208 restore
ARM GAS  tinyBasic.s 			page 74


         tinyBasic.s:2166   .text.basic:000000000000020c return
         tinyBasic.s:2169   .text.basic:0000000000000210 random
         tinyBasic.s:2172   .text.basic:0000000000000214 rshift
         tinyBasic.s:2175   .text.basic:0000000000000218 run
         tinyBasic.s:2178   .text.basic:000000000000021c save
         tinyBasic.s:2181   .text.basic:0000000000000220 show
         tinyBasic.s:2184   .text.basic:0000000000000224 size
         tinyBasic.s:2187   .text.basic:0000000000000228 sleep
         tinyBasic.s:2190   .text.basic:000000000000022c spi_read
         tinyBasic.s:2193   .text.basic:0000000000000230 spi_enable
         tinyBasic.s:2196   .text.basic:0000000000000234 spi_select
         tinyBasic.s:2199   .text.basic:0000000000000238 spi_write
         tinyBasic.s:2202   .text.basic:000000000000023c step
         tinyBasic.s:2205   .text.basic:0000000000000240 stop
         tinyBasic.s:2208   .text.basic:0000000000000244 get_ticks
         tinyBasic.s:2211   .text.basic:0000000000000248 set_timer
         tinyBasic.s:2214   .text.basic:000000000000024c timeout
         tinyBasic.s:2217   .text.basic:0000000000000250 to
         tinyBasic.s:2220   .text.basic:0000000000000254 tone
         tinyBasic.s:2223   .text.basic:0000000000000258 ubound
         tinyBasic.s:2226   .text.basic:000000000000025c uflash
         tinyBasic.s:2229   .text.basic:0000000000000260 until
         tinyBasic.s:2232   .text.basic:0000000000000264 usr
         tinyBasic.s:2235   .text.basic:0000000000000268 wait
         tinyBasic.s:2238   .text.basic:000000000000026c words
         tinyBasic.s:2241   .text.basic:0000000000000270 write
         tinyBasic.s:2244   .text.basic:0000000000000274 bit_xor
         tinyBasic.s:2247   .text.basic:0000000000000278 transmit
         tinyBasic.s:2250   .text.basic:000000000000027c receive
         tinyBasic.s:1828   .text.basic:0000000000000000 tbi_test
         tinyBasic.s:1828   .text.basic:0000000000000000 $t
         tinyBasic.s:2260   .text:0000000000000be0 $d
         tinyBasic.s:577    .text:0000000000000425 $d
         tinyBasic.s:577    .text:0000000000000426 $t
         tinyBasic.s:1136   .text:00000000000007d5 $d
         tinyBasic.s:1136   .text:00000000000007d6 $t
         tinyBasic.s:1355   .text:0000000000000989 $d
         tinyBasic.s:1355   .text:000000000000098a $t
         tinyBasic.s:1639   .text:0000000000000bc9 $d
         tinyBasic.s:1639   .text:0000000000000bca $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_dstack
readln
_tib
_pad
.L62
