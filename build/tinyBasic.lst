ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
 190              	
 191              	/*   ADC1 registers */
 192              	.equ ADC1_BASE_ADR, 0x40012400
 193              	.equ ADC_SR,0
 194              	.equ ADC_CR1,0X4
 195              	.equ ADC_CR2,0X8
 196              	.equ ADC_SMPR1,0XC
 197              	.equ ADC_SMPR2,0X10
 198              	.equ ADC_JOFR1,0X14
 199              	.equ ADC_JOFR2,0X18
 200              	.equ ADC_JOFR3,0X1C
 201              	.equ ADC_JOFR4,0X20
ARM GAS  tinyBasic.s 			page 5


 202              	.equ ADC_HTR,0X24
 203              	.equ ADC_LTR,0X28
 204              	.equ ADC_SQR1,0X2C
 205              	.equ ADC_SQR2,0X30
 206              	.equ ADC_SQR3,0X34
 207              	.equ ADC_JSQR,0X38
 208              	.equ ADC_JDR1,0X3C
 209              	.equ ADC_JDR2,0X40
 210              	.equ ADC_JDR3,0X44
 211              	.equ ADC_JDR4,0X48
 212              	.equ ADC_DR,0X4C
 213              	
 214              	/* timer registers */
 215              	.equ TIMER1_BASE_ADR,0X40012C00
 216              	.equ TIMER2_BASE_ADR,0x40000000
 217              	.equ TIMER3_BASE_ADR,0x40000400
 218              	.equ TIMER4_BASE_ADR,0x40000800
 219              	
 220              	.equ TIM_CR1,0
 221              	.equ TIM_CR2,4
 222              	.equ TIM_SMCR,8
 223              	.equ TIM_DIER,0xc
 224              	.equ TIM_SR,0X10
 225              	.equ TIM_EGR,0X14
 226              	.equ TIM_CCMR1,0X18
 227              	.equ TIM_CCMR2,0X1C
 228              	.equ TIM_CCER,0X20
 229              	.equ TIM_CNT,0X24
 230              	.equ TIM_PSC,0X28
 231              	.equ TIM_ARR,0X2C
 232              	.equ TIM_CCR1,0X34
 233              	.equ TIM_CCR2,0X38
 234              	.equ TIM_DCR,0X48
 235              	.equ TIM_DMAR,0X4C
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
ARM GAS  tinyBasic.s 			page 6


  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
ARM GAS  tinyBasic.s 			page 7


  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
ARM GAS  tinyBasic.s 			page 8


  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
ARM GAS  tinyBasic.s 			page 9


 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
ARM GAS  tinyBasic.s 			page 10


 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
ARM GAS  tinyBasic.s 			page 11


 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AWU_IDX,ASC_IDX+1 //
  31              	    .equ BIT_IDX,AWU_IDX+1 //
  32              	    .equ BRES_IDX,BIT_IDX+1 // 
  33              	    .equ BSET_IDX,BRES_IDX+1 // 
  34              	    .equ BTEST_IDX,BSET_IDX+1 // 
  35              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  36              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  37              	    .equ CLS_IDX,CHAR_IDX+1 //
  38              	    .equ CONST_IDX,CLS_IDX+1 //
  39              	    .equ DATA_IDX,CONST_IDX+1 // 
  40              	    .equ DEC_IDX,DATA_IDX+1 // 
  41              	    .equ DIR_IDX,DEC_IDX+1 // 
  42              	    .equ DO_IDX,DIR_IDX+1 // 
  43              	    .equ DROP_IDX,DO_IDX+1
  44              	    .equ DUMP_IDX, DROP_IDX+1 
  45              	    .equ END_IDX,DUMP_IDX+1 // 
  46              	    .equ ERASE_IDX,END_IDX+1 
  47              	    .equ FOR_IDX, ERASE_IDX+1 // 
  48              	    .equ FORGET_IDX, FOR_IDX+1 // 
  49              	    .equ FREE_IDX, FORGET_IDX+1 // 
  50              	    .equ GET_IDX,FREE_IDX+1
  51              	    .equ GOSUB_IDX, GET_IDX+1 // 
  52              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  53              	    .equ HEX_IDX, GOTO_IDX+1 // 
  54              	    .equ IF_IDX, HEX_IDX+1 // 
  55              	    .equ IN_IDX,IF_IDX+1
  56              	    .equ INPUT_IDX, IN_IDX+1 // 
  57              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  58              	    .equ KEY_IDX, INVERT_IDX+1 // 
  59              	    .equ LET_IDX, KEY_IDX+1 // 
  60              	    .equ LIST_IDX, LET_IDX+1 // 
  61              	    .equ LOAD_IDX, LIST_IDX+1 // 
  62              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  63              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  64              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  65              	    .equ NEXT_IDX, NEW_IDX+1 // 
  66              	    .equ NOT_IDX, NEXT_IDX+1 // 
  67              	    .equ OR_IDX, NOT_IDX+1 // 
  68              	    .equ OUT_IDX,OR_IDX+1
  69              	    .equ PAD_IDX, OUT_IDX+1 // 
  70              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  71              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  72              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  73              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  74              	    .equ PEEK32_IDX, PEEK16_IDX+1
  75              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  76              	    .equ POKE16_IDX,POKE8_IDX+1 
  77              	    .equ POKE32_IDX,POKE16_IDX+1
  78              	    .equ POP_IDX,POKE32_IDX+1
  79              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  80              	    .equ PUSH_IDX,PRT_IDX+1
  81              	    .equ PUT_IDX,PUSH_IDX+1
  82              	    .equ QKEY_IDX, PUT_IDX+1 // 
  83              	    .equ READ_IDX, QKEY_IDX+1 // 
  84              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  85              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
ARM GAS  tinyBasic.s 			page 13


  86              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  87              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  88              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  89              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  90              	    .equ SAVE_IDX, RUN_IDX+1 // 
  91              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  92              	    .equ SERVO_POS_IDX,SERVO_INIT_IDX+1
  93              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  94              	    .equ SPC_IDX,SLEEP_IDX+1 //
  95              	    .equ STEP_IDX, SPC_IDX+1 // 
  96              	    .equ STOP_IDX, STEP_IDX+1 // 
  97              	    .equ STORE_IDX,STOP_IDX+1
  98              	    .equ TAB_IDX, STORE_IDX+1 //
  99              	    .equ THEN_IDX,TAB_IDX+1
 100              	    .equ TICKS_IDX, THEN_IDX+1 // 
 101              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 102              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 103              	    .equ TO_IDX, TMROUT_IDX+1 // 
 104              	    .equ TRACE_IDX,TO_IDX+1
 105              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 106              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 107              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 108              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 109              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 110              	    .equ XOR_IDX, WORDS_IDX+1 //
 111              	    .equ XPOS_IDX,XOR_IDX+1 //
 112              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 113              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
ARM GAS  tinyBasic.s 			page 14


  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 15


 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
ARM GAS  tinyBasic.s 			page 16


 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 17


 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 18


 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
ARM GAS  tinyBasic.s 			page 19


 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      F9FD5DF8 
 318      04EB
 319 0256 1A28     	    cmp r0,TK_LABEL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      32F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      0DFF5DF8 
 325      04EB
 326 027a 1B28     	    cmp r0,#TK_INTGR 
 327 027c 40F0EC83 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 E4E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
ARM GAS  tinyBasic.s 			page 20


 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  TK_INTGR 
 344              	    r1  constant value  
 345              	  use:
 346              	    r2   *list 
 347              	    r3   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 0CB4     	    push {r2,r3} 
 351 029a 626B     	    ldr r2,[UPP,#TXTEND]
 352 029c D4F8D030 	    ldr r3,[UPP,#HERE] 
 353 02a0 9A42     	1:  cmp r2,r3 
 354 02a2 0BD5     	    bpl 8f 
 355 02a4 52F8041B 	    ldr r1,[r2],#4
 356 02a8 8842     	    cmp r0,r1 
 357 02aa 02D0     	    beq 2f 
 358 02ac 02F10402 	    add r2,#4
 359 02b0 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b2 1168     	    ldr r1,[r2]
 362 02b4 4FF01B00 	    mov r0,#TK_INTGR 
 363 02b8 0CBC     	    pop {r2,r3}
 364 02ba 7047     	    _RET
 365              	8:  // that constant doesn't exist 
 366 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 367 02c0 CEE3     	    b tb_error      
 368              	
 369              	
 370              	/***************************************
 371              	    search_label 
 372              	    search target label 
 373              	    input:
 374              	      r1    target label 
 375              	    output:
 376              	      r0    address or 0 
 377              	    use:
 378              	      r2    line address link 
 379              	      r3    search limit 
 380              	****************************************/
 381 02c2 00BF     	    _FUNC search_label 
 382 02c4 0CB4     	    push {r2,r3}
 383 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 384 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 385 02ca 9A42     	1:  cmp r2,r3
 386 02cc 0AD0     	    beq 8f 
 387 02ce D078     	    ldrb r0,[r2,#3]
 388 02d0 1A28     	    cmp  r0,#TK_LABEL 
 389 02d2 02D0     	    beq 4f 
 390 02d4 9078     	2:  ldrb r0,[r2,#2]
 391 02d6 0244     	    add r2,r0 
 392 02d8 F7E7     	    b 1b 
 393              	4:  // compare label 
 394 02da 5068     	    ldr r0,[R2,#4]
ARM GAS  tinyBasic.s 			page 21


 395 02dc 8142     	    cmp r1,r0 
 396 02de F9D1     	    bne 2b 
 397              	    // found label 
 398 02e0 1046     	    mov r0,r2 
 399 02e2 01E0     	    b 9f
 400 02e4 80EA0000 	8:  eor r0,r0 
 401 02e8 0CBC     	9:  pop {r2,r3}
 402 02ea 7047     	    _RET 
 403              	
 404              	
 405              	/***************************************
 406              	    search_lineno 
 407              	    localize BASIC line from its number 
 408              	    input:
 409              	      r0   line# 
 410              	    output: 
 411              	      r0   adr where found || adr new to be inserted 
 412              	      r1   0 found || !0 not found  
 413              	    use:
 414              	      r0   scan address 
 415              	      r1   temp   
 416              	      r2   address end of text
 417              	      r3   target line#
 418              	****************************************/    
 419              	    _GBL_FUNC search_lineno
 420 02ec 0CB4     	    push {r2,r3} 
 421 02ee 0346     	    mov r3,r0 // target 
 422 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 423 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 424 02f4 9042     	1:  cmp r0,r2 
 425 02f6 05D0     	    beq  8f
 426 02f8 0188     	    ldrh r1,[r0]
 427 02fa C91A     	    subs r1,r3 
 428 02fc 04D5     	    bpl 9f 
 429 02fe 8178     	    ldrb r1,[r0,#2]
 430 0300 0844     	    add r0,r1
 431 0302 F7E7     	    b 1b 
 432 0304 4FF0FF31 	8:  mov r1,#-1 
 433 0308 0CBC     	9:  pop {r2,r3}
 434 030a 7047     	    _RET 
 435              	
 436              	
 437              	/********************************************
 438              	    delete_line 
 439              	    delete BASIC line at addr 
 440              	    input:
 441              	      r0    address line to delete 
 442              	    output:
 443              	      r0    same as input 
 444              	    use: 
 445              	      r1    dest adr
 446              	      r2    bytes to move 
 447              	      T1    length line to delete 
 448              	      T2    txtend 
 449              	********************************************/
 450              	    _FUNC delete_line 
 451 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 22


 452 0310 0146     	    mov r1,r0 // dest 
 453 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 454 0316 4044     	    add r0,T1  // src
 455 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 456 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 457 0320 00B5FFF7 	    _CALL cmove
 457      FEFF5DF8 
 457      04EB
 458 032a A9EB0809 	    sub T2,T1 // txtend-count 
 459 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 460 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 461 0336 7047     	    _RET 
 462              	
 463              	/******************************************
 464              	    create_gap 
 465              	    create a gap in text area to insert new line 
 466              	    input:
 467              	      r0    adr 
 468              	      r1    length 
 469              	    output:
 470              	      r0    adr 
 471              	    use:
 472              	      T1    length 
 473              	      T2    txtend 
 474              	************************************************/
 475              	    _FUNC create_gap 
 476 0338 2DE90503 	    push {r0,r2,T1,T2}
 477 033c 8846     	    mov T1,R1
 478 033e 0144     	    add r1,r0  // dest 
 479 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 480 0344 A9EB0002 	    sub r2,T2,r0 
 481 0348 00B5FFF7 	    _CALL cmove
 481      FEFF5DF8 
 481      04EB
 482 0352 C144     	    add T2,T1 
 483 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 484 0358 BDE80503 	    pop {r0,r2,T1,T2}
 485 035c 7047     	    _RET 
 486              	
 487              	/************************************************
 488              	    insert_line 
 489              	    insert BASIC line in text area 
 490              	    first search if line with same number exist 
 491              	    replace if so. 
 492              	    input:
 493              	      r0    *buffer to insert 
 494              	    output:
 495              	      none 
 496              	    use: 
 497              	      T1     *buffer
 498              	      T2     temp  
 499              	************************************************/ 
 500 035e 00BF     	    _FUNC insert_line 
 501 0360 2DE90203 	    push {r1,T1,T2}
 502 0364 8046     	    mov T1,r0 
 503 0366 B8F80000 	    ldrh r0,[T1]
 504 036a 00B5FFF7 	    _CALL search_lineno 
ARM GAS  tinyBasic.s 			page 23


 504      FEFF5DF8 
 504      04EB
 505 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 506              	// already exist 
 507 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 507      C8FF5DF8 
 507      04EB
 508 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 509 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 510 0388 0ED0     	    beq 9f
 511              	1: //insert new line 
 512 038a 98F80210 	    ldrb r1,[T1,#2]
 513 038e 00B5FFF7 	    _CALL create_gap 
 513      D2FF5DF8 
 513      04EB
 514 0398 0146     	    mov r1,r0
 515 039a 4046     	    mov r0,T1 
 516 039c 8278     	    ldrb r2,[r0,#2]
 517 039e 00B5FFF7 	    _CALL cmove 
 517      FEFF5DF8 
 517      04EB
 518 03a8 BDE80203 	9:  pop {r1,T1,T2}
 519 03ac 7047     	    _RET 
 520              	
 521              	/*********************************
 522              	    compile 
 523              	    tokenize source line save it 
 524              	    in pas buffer.
 525              	    compiled line format: 
 526              	      line_no  2 bytes {0...32767}
 527              	      count    1 byte  
 528              	      tokens   variable length 
 529              	  input:
 530              	     r0   *text buffer 
 531              	     r1   *text length   
 532              	  output:
 533              	    r0    0 stored | -1 immediate 
 534              	  use:
 535              	    r3    tib index   
 536              	    T1    tib
 537              	    T2    pad
 538              	***********************************/
 539 03ae 00BF     	    _FUNC compile
 540 03b0 8046     	    mov T1, r0  // source text buffer 
 541 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 542 03b4 DFF8E899 	    ldr T2,pad // tokens buffer
 543 03b8 83EA0303 	    eor r3,r3 // source index  
 544 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 545 03be 40F02000 	    orr r0,#FCOMP
 546 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 547 03c4 80EA0000 	    eor r0,r0     
 548 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 549 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 550 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 551 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 552 03d6 00B500F0 	    _CALL parse_int 
 552      6EF95DF8 
ARM GAS  tinyBasic.s 			page 24


 552      04EB
 553 03e0 0AD0     	    beq 2f 
 554              	// this is a line number     
 555 03e2 0129     	    cmp r1,#1 
 556 03e4 02D5     	    bpl 1f 
 557 03e6 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 558 03ea 39E3     	    b tb_error  
 559 03ec B1F5803F 	1:  cmp r1,#65536
 560 03f0 F9D5     	    bpl 0b 
 561              	    // write line # to pad 
 562 03f2 29F8031C 	    strh r1,[T2,#-3]
 563 03f6 2360     	    str r3,[UPP,#IN_SAVED]
 564              	2:  // check for pad full 
 565 03f8 C145     	    cmp T2,T1
 566 03fa 02DB     	    blt 3f 
 567 03fc 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 568 0400 2EE3     	    b tb_error 
 569 0402 00B500F0 	3:  _CALL comp_token 
 569      28F85DF8 
 569      04EB
 570 040c 0028     	    cmp r0,#TK_NONE 
 571 040e 01D0     	    beq 4f 
 572 0410 2360     	    str r3,[UPP,#IN_SAVED]
 573 0412 F1E7     	    b 2b 
 574              	4: // compilation completed 
 575 0414 DFF88839 	    ldr r3,pad 
 576 0418 A9EB0300 	    sub r0,T2,r3 // line length 
 577 041c 9870     	    strb r0,[r3,#2]
 578 041e 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 579 0420 1888     	    ldrh r0,[r3] // line number 
 580 0422 70B1     	    cbz r0,8f  
 581              	// insert line in text buffer 
 582 0424 206C     	    ldr r0,[UPP,#FLAGS]
 583 0426 10F0080F 	    tst r0,#FSTOP
 584 042a 02D0     	    beq 7f 
 585 042c 4FF01000 	    mov r0,#ERR_CANT_PROG 
 586 0430 16E3     	    b tb_error 
 587 0432 1846     	7:  mov r0,r3 
 588 0434 00B5FFF7 	    _CALL insert_line 
 588      93FF5DF8 
 588      04EB
 589 043e 4040     	    eors r0,r0 
 590 0440 08E0     	    b 9f 
 591 0442 9B46     	8:  mov BPTR,r3 // *token_list 
 592 0444 4FF0030A 	    mov IN,#3
 593 0448 206C     	    ldr r0,[UPP,#FLAGS]
 594 044a A0F12000 	    sub r0,#FCOMP
 595 044e 2064     	    str r0,[UPP,#FLAGS]
 596 0450 5FF0FF30 	    movs r0,#-1 
 597 0454 7047     	9:  _RET 
 598              	
 599              	/*********************************************
 600              	    compile next token from source 
 601              	    input: 
 602              	      r3 		tib index  
 603              	      T1    tib adr
 604              	      T2    insert point in pad  
ARM GAS  tinyBasic.s 			page 25


 605              	    output:
 606              	      r0     token attribute 
 607              	      r1 		token value
 608              	      r3     tib index updated    
 609              	      T2     updated 
 610              	      use:
 611              	**********************************************/
 612 0456 00BF     	    _FUNC comp_token 
 613 0458 40B4     	    push {r6}
 614 045a 18F80300 	    ldrb r0,[T1,r3]
 615 045e 0040     	    ands r0,r0 
 616 0460 7DD0     	    beq store_r0  // reached end of text  
 617 0462 4FF02000 	    mov r0,#SPACE 
 618 0466 00B500F0 	    _CALL skip  // skip spaces 
 618      76F95DF8 
 618      04EB
 619 0470 18F80300 	    ldrb r0,[T1,r3]
 620 0474 0040     	    ands r0,r0 
 621 0476 72D0     	    beq store_r0  // reached end of text 
 622 0478 03F10103 	    add r3,#1
 623 047c 00B500F0 	    _CALL is_letter 
 623      9FF95DF8 
 623      04EB
 624 0486 0BD1     	    bne 1f
 625 0488 A3F10103 	    sub r3,#1 
 626 048c 00B500F0 	    _CALL comp_label // parse and compile label 
 626      AFF85DF8 
 626      04EB
 627 0496 1728     	    cmp r0,#TK_CMD 
 628 0498 71D1     	    bne token_exit 
 629 049a 3B29     	    cmp r1,#REM_IDX 
 630 049c 4DD0     	    beq tick2 
 631 049e 6EE0     	    b token_exit 
 632 04a0 00B500F0 	1:  _CALL is_special
 632      6FF85DF8 
 632      04EB
 633 04aa DFF8046D 	    ldr r6,=token_ofs
 634 04ae D6E811F0 	    tbh [r6,r1] 
 635              	tok_idx0:     
 636              	//  not special char.  
 637 04b2 57E0     	    b try_number 
 638              	// single char token with no value 
 639              	single: 
 640 04b4 DFF8FC6C 	    ldr r6,=tok_single
 641 04b8 705C     	    ldrb r0,[r6,r1] 
 642 04ba 50E0     	    b store_r0
 643              	lt:
 644 04bc 4FF00F00 	    mov r0,#TK_LT
 645 04c0 18F80310 	    ldrb r1,[T1,r3]
 646 04c4 3E29     	    cmp r1,#'>' 
 647 04c6 06D0     	    beq 1f
 648 04c8 0AE0     	    b 2f 
 649              	gt:
 650 04ca 4FF00E00 	    mov r0,#TK_GT 
 651 04ce 18F80310 	    ldrb r1,[T1,r3]
 652 04d2 3C29     	    cmp r1,#'<'
 653 04d4 04D1     	    bne 2f  
ARM GAS  tinyBasic.s 			page 26


 654 04d6 03F10103 	1:  add r3,#1
 655 04da 4FF01200 	    mov r0,#TK_NE  
 656 04de 3EE0     	    b store_r0
 657 04e0 3D29     	2:  cmp r1,#'=' 
 658 04e2 3CD1     	    bne store_r0  
 659 04e4 03F10103 	    add r3,#1
 660 04e8 00F10200 	    add r0,#2
 661 04ec 37E0     	    b store_r0       
 662              	bkslash:
 663 04ee 18F80310 	    ldrb r1,[T1,r3]
 664 04f2 03F10103 	    add r3,#1
 665 04f6 4FF01300 	    mov r0,#TK_CHAR 
 666 04fa 09F8010B 	    strb r0,[T2],#1
 667 04fe 09F8011B 	    strb r1,[T2],#1
 668 0502 3CE0     	    b token_exit 
 669              	prt_cmd: 
 670 0504 4FF01700 	    mov r0,#TK_CMD 
 671 0508 4FF03601 	    mov r1,#PRT_IDX
 672 050c 09F8010B 	    strb r0,[T2],#1
 673 0510 09F8011B 	    strb r1,[T2],#1
 674 0514 33E0     	    b token_exit 
 675              	quote:
 676 0516 4FF01C00 	    mov r0,#TK_QSTR 
 677 051a 09F8010B 	    strb r0,[T2],#1
 678 051e 00B500F0 	    _CALL parse_quote
 678      E6F85DF8 
 678      04EB
 679 0528 29E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 052a 4FF01700 	    mov r0,#TK_CMD 
 683 052e 4FF03B01 	    mov r1,#REM_IDX 
 684 0532 09F8010B 	    strb r0,[T2],#1 
 685 0536 09F8011B 	    strb r1,[T2],#1
 686              	tick2:
 687 053a 08EB0300 	    add r0,T1,r3 
 688 053e 4946     	    mov r1,T2 
 689 0540 00B5FFF7 	    _CALL strcpy 
 689      FEFF5DF8 
 689      04EB
 690 054a 00B5FFF7 	    _CALL strlen 
 690      FEFF5DF8 
 690      04EB
 691 0554 8144     	    add T2,r0
 692 0556 09F10109 	    add T2,#1
 693 055a 6368     	    ldr r3,[UPP,#COUNT]
 694 055c 0FE0     	    b token_exit
 695              	store_r0: 
 696 055e 09F8010B 	    strb r0,[T2],#1
 697 0562 0CE0     	    b token_exit 
 698              	try_number:
 699 0564 A3F10103 	    sub r3,#1
 700 0568 00B500F0 	    _CALL parse_int  
 700      A5F85DF8 
 700      04EB
 701 0572 00F07182 	    beq syntax_error  
 702 0576 09F8010B 	    strb r0,[T2],#1 
ARM GAS  tinyBasic.s 			page 27


 703 057a 49F8041B 	    str r1,[T2],#4
 704              	token_exit:
 705 057e 40BC     	    pop {r6}
 706 0580 7047     	    _RET 
 707              	
 708              	
 709              	/****************************
 710              	    is_special  
 711              	    check for non alphanum
 712              	    input:
 713              	      r0    character to scan 
 714              	    output:
 715              	      r0    character 
 716              	      r1    0 || index 
 717              	    use: 
 718              	      r1    scan index 
 719              	      r2    temp 
 720              	      r3    char_list 
 721              	*****************************/
 722 0582 00BF     	    _FUNC is_special 
 723 0584 0CB4     	    push {r2,r3}
 724 0586 4FF00101 	    mov r1,#1
 725 058a DFF82C3C 	    ldr r3,=char_list 
 726 058e 5A5C     	1:  ldrb r2,[r3,r1]
 727 0590 22B1     	    cbz r2,8f 
 728 0592 8242     	    cmp r2,r0 
 729 0594 04D0     	    beq 9f 
 730 0596 01F10101 	    add r1,#1 
 731 059a F8E7     	    b 1b
 732 059c 81EA0101 	8:  eor r1,r1     
 733 05a0 0CBC     	9:  pop {r2,r3}
 734 05a2 7047     	    _RET 
 735              	
 736              	char_list:
 737 05a4 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 737      28293A23 
 737      2D2B2A2F 
 737      253D3C3E 
 737      5C3F2722 
 738              	
 739              	tok_single:
 740 05b9 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 740      050601
 741 05c0 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 741      0A0B0D
 742              	
 743 05c7 00       	  .p2align 2
 744              	token_ofs:
 745 05c8 0000     	  .hword  0 // not found
 746              	  // TK_COMMA...TK_EQUAL , 13 
 747 05ca 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 749      01000100 
 750 05e2 0100     	  .hword  (single-tok_idx0)/2    
ARM GAS  tinyBasic.s 			page 28


 751              	  // '<','>'
 752 05e4 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 753              	  // '\'
 754 05e8 1E00     	  .hword  (bkslash-tok_idx0)/2
 755              	  // '?' 
 756 05ea 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 757              	  // "'"  
 758 05ec 3C00     	  .hword  (tick-tok_idx0)/2 
 759              	  // '"' quote 
 760 05ee 3200     	  .hword (quote-tok_idx0)/2
 761              	
 762              	  .p2align 2
 763              	
 764              	/****************************
 765              	    comp_label
 766              	    compile a label 
 767              	    it can be a target|keyword|
 768              	    variable| user constant  
 769              	    label form: [A..Z]+
 770              	    input:
 771              	      *buffer 
 772              	    output:
 773              	      r0  token type 
 774              	      r1  token value 
 775              	      T2  updated 
 776              	      R3  updated
 777              	    use:
 778              	****************************/
 779              	    _FUNC comp_label
 780 05f0 24B4     	    push {r2,r5}
 781 05f2 4DF8049D 	    push {T2}
 782 05f6 82EA0202 	    eor r2,r2
 783 05fa 4FF00605 	    mov r5,#6 
 784 05fe 18F80300 	0:  ldrb r0,[T1,r3]
 785 0602 5F28     	    cmp r0,#'_'
 786 0604 0AD0     	    beq 2f
 787 0606 00B500F0 	1:  _CALL is_letter 
 787      DAF85DF8 
 787      04EB
 788 0610 09D1     	    bne 3f // not letter 
 789 0612 00B500F0 	    _CALL upper 
 789      ACF85DF8 
 789      04EB
 790 061c 09F8010B 	2:  strb r0,[T2],#1
 791 0620 03F10103 	    add r3,#1
 792 0624 EBE7     	    b 0b 
 793 0626 80EA0000 	3:  eor r0,r0 
 794 062a 89F80000 	    strb r0,[T2]
 795              	// is this a variable ?
 796 062e 5DF8049B 	    pop {T2}
 797 0632 99F80100 	    ldrb r0,[T2,#1]
 798 0636 30B9     	    cbnz r0,3f // length >1 not variable 
 799 0638 99F80010 	    ldrb r1,[T2]
 800 063c A1F14101 	    sub r1,#'A' 
 801 0640 4FF01400 	    mov r0,#TK_VAR
 802 0644 1CE0     	    b 8f 
 803              	3:  // try keyword 
ARM GAS  tinyBasic.s 			page 29


 804 0646 4846     	    mov r0,T2 
 805 0648 DFF8701B 	    ldr r1,=kword_dict  
 806 064c 00B500F0 	    _CALL search_dict 
 806      C5FA5DF8 
 806      04EB
 807 0656 30B1     	    cbz r0,4f
 808 0658 1828     	    cmp r0,TK_SCONST  
 809 065a 11D1     	    bne 8f
 810              	    //system constant  
 811 065c 09F8010B 	    strb r0,[T2],#1
 812 0660 49F8041B 	    str r1,[T2],#4
 813 0664 10E0     	    b 9f 
 814              	4: // must be a label 
 815 0666 4846     	    mov r0,T2 
 816 0668 00B500F0 	    _CALL compress_label
 816      0FF85DF8 
 816      04EB
 817 0672 4FF01A00 	    mov r0,#TK_LABEL
 818 0676 09F8010B 	    strb r0,[T2],#1
 819 067a 49F8041B 	    str r1,[T2],#4
 820 067e 03E0     	    b 9f 
 821 0680 09F8010B 	8:  strb r0,[T2],#1
 822 0684 09F8011B 	    strb r1,[T2],#1          
 823 0688 24BC     	9:  pop {r2,r5}
 824 068a 7047     	    _RET 
 825              	
 826              	/********************************
 827              	    compress_label 
 828              	    compress label in integer 
 829              	    maximum 6 character, 
 830              	    ignore extras characters 
 831              	    input:
 832              	      r0  *label 
 833              	    output:
 834              	      r1   compressed label 
 835              	********************************/
 836              	    _FUNC compress_label
 837 068c 0CB4     	    push {r2,r3}
 838 068e 82EA0202 	    eor r2,r2 // compress value
 839 0692 4FF00603 	    mov r3,#6 // max characters 
 840 0696 10F8011B 	1:  ldrb r1,[r0],#1 
 841 069a 51B1     	    cbz r1,3f
 842 069c 5F29     	    cmp r1,#'_'
 843 069e 01D1     	    bne 2f 
 844 06a0 A1F10401 	    sub r1,#4  
 845 06a4 A1F14001 	2:  sub r1,#'@'
 846 06a8 4FEA4212 	    lsl r2,#5
 847 06ac 0A44     	    add r2,r1
 848 06ae 013B     	    subs r3,#1 
 849 06b0 F1D1     	    bne 1b 
 850 06b2 1146     	3:  mov r1,r2     
 851 06b4 0CBC     	    pop {r2,r3}
 852 06b6 7047     	    _RET 
 853              	
 854              	
 855              	/****************************
 856              	    parse_int 
ARM GAS  tinyBasic.s 			page 30


 857              	    parse an integer from text
 858              	    if not valid integer 
 859              	    r1 return *buffer else 
 860              	    *buffer is incremented after integer 
 861              	  input:
 862              	    r0   *buffer 
 863              	  output:
 864              	    r0   TK_INTGR|TK_NONE
 865              	    r1   int|0   
 866              	  use:
 867              	    r3   tib index updated     
 868              	*****************************/
 869              	    _FUNC parse_int 
 870 06b8 4FF00A01 	    mov r1,#10 // default base 
 871 06bc 18F80300 	    ldrb r0,[T1,r3]
 872 06c0 2428     	    cmp r0,'$' 
 873 06c2 02D1     	    bne 2f 
 874 06c4 4FF01001 	    mov r1,#16 // hexadecimal number 
 875 06c8 03E0     	    b 3f  
 876 06ca 2628     	2:  cmp r0,#'&' 
 877 06cc 03D1     	    bne 4f
 878 06ce 4FF00201 	    mov r1,#2 //binary number  
 879 06d2 03F10103 	3:  add r3,#1
 880 06d6 03EB0800 	4:  add r0,r3,T1 
 881 06da 00B5FFF7 	    _CALL atoi 
 881      FEFF5DF8 
 881      04EB
 882 06e4 10B1     	    cbz r0,9f
 883 06e6 0344     	    add r3,r0
 884 06e8 4FF01B00 	    mov r0,#TK_INTGR
 885 06ec 0040     	9:  ands r0,r0   
 886 06ee 7047     	    _RET 
 887              	
 888              	/*********************************************
 889              	    parse_quote 
 890              	    parse quoted string 
 891              	    input: 
 892              	      r3 		tib index  
 893              	      T1    tib adr
 894              	      T2    insert point in pad  
 895              	    output:
 896              	      r0     token attribute 
 897              	      r1 		*str 
 898              	      r3     tib index updated    
 899              	      T2     updated 
 900              	      use:
 901              	*********************************************/
 902              	    _FUNC parse_quote
 903 06f0 4DF8049D 	    push {T2} 
 904 06f4 18F80300 	1:  ldrb r0,[T1,r3]
 905 06f8 03F10103 	    add r3,#1 
 906 06fc 2228     	    cmp r0,#'"'
 907 06fe 09D0     	    beq 9f 
 908 0700 5C28     	    cmp r0,#'\\'
 909 0702 04D1     	    bne 2f 
 910 0704 00B500F0 	    _CALL get_escaped_char 
 910      0DF85DF8 
ARM GAS  tinyBasic.s 			page 31


 910      04EB
 911 070e 09F8010B 	2:  strb r0,[T2],#1
 912 0712 EFE7     	    b 1b 
 913 0714 80EA0000 	9:  eor  r0,r0
 914 0718 09F8010B 	    strb r0,[T2],#1
 915 071c 4FF01C00 	    mov r0,#TK_QSTR
 916 0720 02BC     	    pop {r1}
 917 0722 7047     	    _RET 
 918              	
 919              	/**********************************************
 920              	    get_escaped_char 
 921              	    convert "\c" in quoted string 
 922              	    input:
 923              	      r0 
 924              	      r3   index 
 925              	      T1   tib 
 926              	    output:
 927              	      r0   replacement char
 928              	      r3   updated 
 929              	    use:
 930              	      r1   *table 
 931              	      r2   temp 
 932              	**********************************************/
 933              	    _FUNC get_escaped_char 
 934 0724 06B4     	    push {r1,r2}
 935 0726 18F80300 	    ldrb r0,[T1,r3]
 936 072a 03F10103 	    add r3,#1
 937 072e 2228     	    cmp r0,#'"' 
 938 0730 0BD0     	    beq 9f 
 939 0732 DFF88C1A 	1:  ldr r1,=escaped 
 940 0736 11F8012B 	2:  ldrb r2,[r1],#1
 941 073a 12B1     	    cbz r2,6f 
 942 073c 8242     	    cmp r2,r0 
 943 073e 02D0     	    beq 7f 
 944 0740 F9E7     	    b 2b
 945 0742 A0F10702 	6:  sub r2,r0,#7     
 946 0746 02F10700 	7:  add r0,r2,#7
 947 074a 06BC     	9:  pop {r1,r2}   
 948 074c 7047     	    _RET
 949              	
 950 074e 6162746E 	escaped: .asciz "abtnvfr"
 950      76667200 
 951              	
 952              	/*********************************************
 953              	   skip character in TIB 
 954              	   input:
 955              	      r0    character to skip 
 956              	      r3    tib index 
 957              	      T1    tib adr
 958              	    output: 
 959              	      r3    updated
 960              	    use:
 961              	      r1     
 962              	**********************************************/   
 963 0756 00BF     	    _FUNC skip
 964 0758 02B4     	    push {r1} 
 965 075a 18F80310 	1:  ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 32


 966 075e 8142     	    cmp r1,r0
 967 0760 02D1     	    bne 2f
 968 0762 03F10103 	    add r3,#1 
 969 0766 F8E7     	    b 1b 
 970 0768 2360     	2:  str r3,[UPP,#IN_SAVED]
 971 076a 02BC     	    pop {r1}
 972 076c 7047     	    _RET
 973              	
 974              	/********************************************
 975              	    upper
 976              	    convert character in upper case 
 977              	    input: 
 978              	      r0   character 
 979              	    output:
 980              	      r0   upper case character 
 981              	*********************************************/
 982 076e 00BF     	    _FUNC upper 
 983 0770 6128     	    cmp r0,#'a' 
 984 0772 03DB     	    blt 9f 
 985 0774 7A28     	    cmp r0,#'z' 
 986 0776 01DC     	    bgt 9f 
 987 0778 00F05F00 	    and r0,#0x5f 
 988 077c 7047     	9:  _RET 
 989              	
 990              	/***************************************
 991              	   is_digit 
 992              	   check if char is decimal digit.
 993              	   convert to decimal digit.
 994              	   input:
 995              	      r0    char 
 996              	   output:
 997              	      r0        if Z then converted digit else not changed
 998              	      Z flag    1 true | 0 false  
 999              	***************************************/
 1000 077e 00BF     	    _GBL_FUNC is_digit 
 1001 0780 02B4     	    push {r1} 
 1002 0782 4FF0FF31 	    mov r1,#-1   
 1003 0786 3028     	    cmp r0,#'0' 
 1004 0788 05DB     	    blt 9f
 1005 078a 3A28     	    cmp r0,'9'+1
 1006 078c 03D5     	    bpl 9f 
 1007 078e 81EA0101 	    eor r1,r1 
 1008 0792 A0F13000 	    sub r0,#'0'  
 1009              	9:   
 1010 0796 0940     	    ands r1,r1
 1011 0798 02BC     	    pop {r1} 
 1012 079a 7047     	    _RET 
 1013              	
 1014              	/***************************************
 1015              	    is_hex 
 1016              	    check for hexadecimal digit 
 1017              	    convert to hex digit.
 1018              	    input:
 1019              	      r0    
 1020              	    output:
 1021              	      r0         if Z then converted digit 
 1022              	      Z  flag    1 true | 0 false         
ARM GAS  tinyBasic.s 			page 33


 1023              	***************************************/
 1024              	    _FUNC is_hex 
 1025 079c 02B4     	    push {r1}
 1026 079e 80EA0000 	    eor r0,r0 
 1027 07a2 4128     	    cmp r0,#'A' 
 1028 07a4 01D4     	    bmi 1f 
 1029 07a6 A0F10700 	    sub r0,#7 
 1030 07aa A0F13000 	1:  sub r0,#'0'
 1031 07ae 01D4     	    bmi 2f 
 1032 07b0 1028     	    cmp r0,#16
 1033 07b2 01D4     	    bmi 9f 
 1034 07b4 6FEA0101 	2:  mvn r1,r1  
 1035 07b8 0940     	9:  ands r1,r1 
 1036 07ba 02BC     	    pop {r1}
 1037 07bc 7047     	    _RET 
 1038              	
 1039              	/***************************************
 1040              	    is_letter 
 1041              	    check if character is {a..z,A..Z,_} 
 1042              	  input:
 1043              	    r0   character 
 1044              	  output: 
 1045              	    r0       same character 
 1046              	    Z flag   1 true | 0 false  
 1047              	****************************************/
 1048 07be 00BF     	    _FUNC is_letter
 1049 07c0 02B4     	    push {r1} 
 1050 07c2 81EA0101 	    eor r1,r1 
 1051 07c6 4128     	    cmp r0,#'A' 
 1052 07c8 05D4     	    bmi 8f 
 1053 07ca 5B28     	    cmp r0,#'Z'+1 
 1054 07cc 05D4     	    bmi 9f
 1055 07ce 6128     	    cmp r0,#'a' 
 1056 07d0 01D4     	    bmi 8f 
 1057 07d2 7B28     	    cmp r0,#'z'+1
 1058 07d4 01D4     	    bmi 9f  
 1059 07d6 6FEA0101 	8:  mvn r1,r1  
 1060 07da 0940     	9:  ands r1,r1 
 1061 07dc 02BC     	    pop {r1}
 1062 07de 7047     	    _RET 
 1063              	
 1064              	
 1065              	/******************************************
 1066              	    atoi 
 1067              	    convert ascii to integer 
 1068              	    input:
 1069              	      r0   *buffer 
 1070              	      r1   base 
 1071              	    output:
 1072              	      r0   0 no integer found 
 1073              	      r1   integer
 1074              	    use:
 1075              	      r2   base  
 1076              	      T1   *buffer 
 1077              	      T2   digit count  
 1078              	******************************************/
 1079              	    _GBL_FUNC atoi 
ARM GAS  tinyBasic.s 			page 34


 1080 07e0 2DE90403 	    push {r2,T1,T2}
 1081 07e4 8046     	    mov T1,r0  // *buffer 
 1082 07e6 0A46     	    mov r2,r1  // base  
 1083 07e8 81EA0101 	    eor r1,r1  // converted integer 
 1084 07ec 89EA0909 	    eor T2,T2  // digit count 
 1085 07f0 18F8010B 	1:  ldrb r0,[T1],#1
 1086 07f4 00B5FFF7 	    _CALL upper 
 1086      BBFF5DF8 
 1086      04EB
 1087 07fe 3028     	    cmp r0,#'0'
 1088 0800 0FD4     	    bmi 8f
 1089 0802 3A28     	    cmp r0,#'9'+1 
 1090 0804 03D4     	    bmi 2f 
 1091 0806 4128     	    cmp r0,#'A'
 1092 0808 0BD4     	    bmi 8f 
 1093 080a A0F10700 	    sub r0,#7 
 1094 080e A0F13000 	2:  sub r0,#'0' 
 1095 0812 9042     	    cmp r0,r2
 1096 0814 05D5     	    bpl 8f  
 1097 0816 02FB01F1 	    mul r1,r2 
 1098 081a 0144     	    add r1,r0
 1099 081c 09F10109 	    add T2,#1
 1100 0820 E6E7     	    b 1b 
 1101 0822 4846     	8:  mov r0,T2  
 1102 0824 BDE80403 	    pop {r2,T1,T2}
 1103 0828 7047     	    _RET 
 1104              	
 1105              	
 1106              	
 1107              	/*******************
 1108              	    DECOMPILER 
 1109              	*******************/
 1110              	
 1111              	/********************************************
 1112              	    cmd_name 
 1113              	    search bytecode in dictionary and 
 1114              	    return its name 
 1115              	  input:
 1116              	    r0    token type 
 1117              	    r1    keyword bytecode 
 1118              	  ouput:
 1119              	    r0    name string 
 1120              	  use:
 1121              	    T1    link 
 1122              	    T2    tmp 
 1123              	*********************************************/
 1124 082a 00BF     	    _FUNC cmd_name 
 1125 082c 2DE90003 	    push {T1,T2}
 1126 0830 DFF88889 	    ldr T1,=kword_dict 
 1127 0834 58F8049C 	1:  ldr T2,[T1,#-4]
 1128 0838 8145     	    cmp T2,r0 
 1129 083a 03D1     	    bne 3f 
 1130 083c 58F8089C 	    ldr T2,[T1,#-8]
 1131 0840 8945     	    cmp T2,r1 
 1132 0842 04D0     	    beq 2f 
 1133 0844 58F80C8C 	3:  ldr T1,[T1,#-12]
 1134 0848 B8F1000F 	    cmp T1,#0
ARM GAS  tinyBasic.s 			page 35


 1135 084c F2D1     	    bne 1b  
 1136 084e 4046     	2:  mov r0,T1 
 1137 0850 BDE80003 	    pop {T1,T2}
 1138 0854 7047     	    _RET
 1139              	
 1140              	/*****************************
 1141              	  decompile_line 
 1142              	  detokenize BASIC line 
 1143              	  input:
 1144              	    r0  *token list 
 1145              	    r1  *output buffer 
 1146              	  output:
 1147              	    r0  *output buffer (.asciz) 
 1148              	  use:
 1149              	    T1  *output buffer
 1150              	    BPTR  *token list
 1151              	    IN  offset in token list  
 1152              	******************************/
 1153 0856 00BF     	    _GBL_FUNC decompile_line
 1154 0858 2DE90E01 	    push {r1,r2,r3,T1} 
 1155 085c 8346     	    mov BPTR,r0 
 1156 085e 4FF0000A 	    mov IN,#0
 1157 0862 8846     	    mov T1,r1 
 1158 0864 3BF80A00 	    ldrh r0,[BPTR,IN]
 1159 0868 0AF1020A 	    add IN,#2 
 1160 086c 4FF00A01 	    mov r1,#10 
 1161 0870 00B5FFF7 	    _CALL itoa
 1161      FEFF5DF8 
 1161      04EB
 1162 087a 4146     	    mov r1,T1
 1163 087c 00B5FFF7 	    _CALL strcpy
 1163      FEFF5DF8 
 1163      04EB
 1164 0886 4046     	    mov r0,T1 
 1165 0888 00B5FFF7 	    _CALL strlen
 1165      FEFF5DF8 
 1165      04EB
 1166 0892 8044     	    add T1,r0 
 1167 0894 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1168 0898 0AF1010A 	    add IN,#1 
 1169 089c 6060     	    str r0,[UPP,#COUNT]
 1170              	decomp_loop:
 1171 089e 00B500F0 	    _CALL next_token
 1171      D0FA5DF8 
 1171      04EB
 1172 08a8 0028     	    cmp r0,#TK_NONE 
 1173 08aa 00F0AD80 	    beq 9f
 1174 08ae 1028     	    cmp r0,#TK_GE 
 1175 08b0 05D5     	    bpl 1f 
 1176 08b2 DFF81019 	    ldr r1,=single_char 
 1177 08b6 085C     	    ldrb r0,[r1,r0]
 1178 08b8 08F8010B 	    strb r0,[T1],#1 
 1179 08bc EFE7     	    b decomp_loop
 1180              	1: 
 1181 08be 1328     	    cmp r0,#TK_CHAR  
 1182 08c0 14D5     	    bpl 2f 
 1183 08c2 A0F11000 	    sub r0,#TK_GE
ARM GAS  tinyBasic.s 			page 36


 1184 08c6 4FEA8000 	    lsl r0,#2 
 1185 08ca DFF8FC18 	    ldr r1,=relop_str 
 1186 08ce 0858     	    ldr r0,[r1,r0]
 1187 08d0 4146     	    mov r1,T1 
 1188 08d2 00B5FFF7 	    _CALL strcpy 
 1188      FEFF5DF8 
 1188      04EB
 1189 08dc 4046     	    mov r0,T1 
 1190 08de 00B5FFF7 	    _CALL strlen 
 1190      FEFF5DF8 
 1190      04EB
 1191 08e8 8044     	    add T1,r0 
 1192 08ea D8E7     	    b decomp_loop
 1193 08ec 1328     	2:  cmp r0,#TK_CHAR 
 1194 08ee 06D1     	    bne 3f 
 1195 08f0 4FF05C00 	    mov r0,#'\\'
 1196 08f4 08F8010B 	    strb r0,[T1],#1
 1197 08f8 08F8011B 	    strb r1,[T1],#1
 1198              	//    mov r0,#SPACE 
 1199              	//    strb r0,[T1],#1
 1200 08fc CFE7     	    b decomp_loop 
 1201 08fe 1428     	3:  cmp r0,#TK_VAR 
 1202 0900 08D1     	    bne 4f 
 1203 0902 01F14100 	    add r0,r1,'A'
 1204 0906 08F8010B 	    strb r0,[T1],#1 
 1205 090a 4FF02000 	    mov r0,#SPACE 
 1206 090e 08F8010B 	    strb r0,[T1],#1
 1207 0912 C4E7     	    b decomp_loop 
 1208 0914 1A28     	4:  cmp r0,#TK_LABEL 
 1209 0916 2BD5     	    bpl 5f   
 1210 0918 03B4     	    push {r0,r1}
 1211              	//    mov r0,r1 
 1212 091a 00B5FFF7 	    _CALL cmd_name
 1212      86FF5DF8 
 1212      04EB
 1213 0924 4146     	    mov r1,T1 
 1214 0926 00B5FFF7 	    _CALL strcpy 
 1214      FEFF5DF8 
 1214      04EB
 1215 0930 4046     	    mov r0,T1 
 1216 0932 00B5FFF7 	    _CALL strlen 
 1216      FEFF5DF8 
 1216      04EB
 1217 093c 8044     	    add T1,r0
 1218 093e 03BC     	    pop {r0,r1}
 1219 0940 4FF02000 	    mov r0,#SPACE 
 1220 0944 08F8010B 	    strb r0,[T1],#1 
 1221 0948 3B29     	    cmp r1,#REM_IDX
 1222 094a A8D1     	    bne decomp_loop 
 1223 094c 0BEB0A00 	    add r0,BPTR,IN
 1224 0950 4146     	    mov r1,T1   
 1225 0952 00B5FFF7 	    _CALL strcpy
 1225      FEFF5DF8 
 1225      04EB
 1226 095c 4046     	    mov r0,T1 
 1227 095e 00B5FFF7 	    _CALL strlen
 1227      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 37


 1227      04EB
 1228 0968 8044     	    add T1,r0
 1229 096a D4F804A0 	    ldr IN,[UPP,#COUNT]
 1230 096e 4BE0     	    b 9f 
 1231 0970 1B28     	5:  cmp r0,#TK_INTGR
 1232 0972 14D1     	    bne 6f  
 1233 0974 0846     	    mov r0,r1 
 1234 0976 A169     	    ldr r1,[UPP,#BASE]
 1235 0978 00B5FFF7 	    _CALL itoa
 1235      FEFF5DF8 
 1235      04EB
 1236 0982 4146     	    mov r1,T1 
 1237 0984 00B5FFF7 	    _CALL strcpy
 1237      FEFF5DF8 
 1237      04EB
 1238 098e 4046     	    mov r0,T1 
 1239 0990 00B5FFF7 	    _CALL strlen
 1239      FEFF5DF8 
 1239      04EB
 1240 099a 8044     	    add T1,r0 
 1241 099c 7FE7     	    b decomp_loop 
 1242 099e 1A28     	6:  cmp r0,#TK_LABEL
 1243 09a0 1BD1     	    bne 7f
 1244 09a2 4FF01902 	    mov r2,#25
 1245 09a6 4FF6FF73 	    mov r3,#0xffff 
 1246 09aa C3F6FF73 	    movt r3,#0x3fff 
 1247 09ae 01EA0301 	0:  and r1,r3 
 1248 09b2 4FEA5313 	    lsr r3,#5 
 1249 09b6 31FA02F0 	    lsrs r0,r1,r2 
 1250 09ba 07D0     	    beq 2f
 1251 09bc 00F14000 	    add r0,#'@'
 1252 09c0 5B28     	    cmp r0,#'['
 1253 09c2 01D1     	    bne 1f
 1254 09c4 00F10400 	    add r0,#4 
 1255 09c8 08F8010B 	1:  strb r0,[T1],#1
 1256 09cc 053A     	2:  subs r2,#5 
 1257 09ce EEDA     	    bge 0b
 1258 09d0 4FF02000 	    mov r0,#SPACE 
 1259 09d4 08F8010B 	    strb r0,[T1],#1  
 1260 09d8 61E7     	    b decomp_loop
 1261 09da 4FF02200 	7:  mov r0,#'"'
 1262 09de 08F8010B 	    strb r0,[T1],#1 
 1263 09e2 0846     	    mov r0,r1
 1264 09e4 4146     	    mov r1,T1  
 1265 09e6 00B5FFF7 	    _CALL strcpy
 1265      FEFF5DF8 
 1265      04EB
 1266 09f0 4046     	    mov r0,T1 
 1267 09f2 00B5FFF7 	    _CALL strlen 
 1267      FEFF5DF8 
 1267      04EB
 1268 09fc 8044     	    add T1,r0 
 1269 09fe 4FF02200 	    mov r0,#'"'
 1270 0a02 08F8010B 	    strb r0,[T1],#1 
 1271 0a06 4AE7     	    b decomp_loop
 1272 0a08 80EA0000 	9:  eor r0,r0 
 1273 0a0c 88F80000 	    strb r0,[T1]
ARM GAS  tinyBasic.s 			page 38


 1274 0a10 BDE80E01 	    pop {r1,r2,r3,T1}
 1275 0a14 0846     	    mov r0,r1 
 1276 0a16 7047     	    _RET 
 1277              	
 1278 0a18 240A0000 	relop_str: .word ge_str,le_str,ne_str 
 1278      270A0000 
 1278      2A0A0000 
 1279 0a24 3E3D00   	ge_str: .asciz ">="
 1280 0a27 3C3D00   	le_str: .asciz "<="
 1281 0a2a 3C3E00   	ne_str: .asciz "<>"
 1282              	
 1283              	single_char:
 1284 0a2d 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1284      2328292B 
 1284      2D2A2F25 
 1285 0a39 403D3E3C 	  .byte '@','=', '>', '<' 
 1286              	
 1287              	
 1288              	
 1289              	
 1290              	/**********************************
 1291              	  modulo 
 1292              	  compute r0 mod r1
 1293              	  input:
 1294              	    r0   dividend
 1295              	    r1   divisor 
 1296              	  output:
 1297              	    r0   TK_INTGR 
 1298              	    r1   r0 mod r1 
 1299              	*********************************/
 1300 0a3d 0000BF   	    _GBL_FUNC modulo 
 1301 0a40 01B4     	    push {r0}
 1302 0a42 B0FBF1F0 	    udiv r0,r1 
 1303 0a46 01FB00F0 	    mul  r0,r1 
 1304 0a4a 02BC     	    pop {r1}
 1305 0a4c A1EB0001 	    sub r1,r0
 1306 0a50 4FF01B00 	    mov r0,#TK_INTGR
 1307 0a54 7047     	    _RET 
 1308              	
 1309              	/**********************************
 1310              	      BASIC commands 
 1311              	**********************************/
 1312              	
 1313              	/*********************************
 1314              	    syntax_error 
 1315              	    display syntax error message and 
 1316              	    abort program 
 1317              	  input:
 1318              	    none  
 1319              	  output: 
 1320              	    none 
 1321              	  use:
 1322              	*********************************/
 1323 0a56 00BF     	    _FUNC syntax_error 
 1324 0a58 4FF00200 	    mov r0,#ERR_SYNTAX
 1325 0a5c 00E0     	    b tb_error 
 1326              	
ARM GAS  tinyBasic.s 			page 39


 1327              	/*********************************
 1328              	    tb_error 
 1329              	    display BASIC error and 
 1330              	    abort program. 
 1331              	  input:
 1332              	    r0    error code   
 1333              	  output: 
 1334              	    none 
 1335              	  use:
 1336              	    r1    temp 
 1337              	*********************************/
 1338 0a5e 00BF     	    _FUNC tb_error 
 1339 0a60 216C     	    ldr r1,[UPP,#FLAGS]
 1340 0a62 11F0200F 	    tst r1,#FCOMP
 1341 0a66 43D1     	    bne compile_error
 1342              	rt_error:
 1343 0a68 5246     	    mov r2,IN 
 1344 0a6a 01B4     	    push {r0}
 1345 0a6c DFF85C07 	    ldr r0,=rt_error_msg 
 1346 0a70 00B5FFF7 	    _CALL uart_puts 
 1346      FEFF5DF8 
 1346      04EB
 1347 0a7a 01BC     	    pop {r0}
 1348 0a7c DFF85017 	    ldr r1,=err_msg  
 1349 0a80 4FEA8000 	    lsl r0,#2 
 1350 0a84 0858     	    ldr r0,[r1,r0]
 1351 0a86 00B5FFF7 	    _CALL uart_puts
 1351      FEFF5DF8 
 1351      04EB
 1352              	// decompile and print faulty line      
 1353 0a90 5846     	    mov r0,BPTR
 1354 0a92 5246     	    mov r2,IN  
 1355 0a94 DFF80813 	    ldr r1,pad 
 1356 0a98 00B5FFF7 	    _CALL decompile_line
 1356      FEFF5DF8 
 1356      04EB
 1357 0aa2 00B5FFF7 	    _CALL uart_puts 
 1357      FEFF5DF8 
 1357      04EB
 1358 0aac 00B5FFF7 	    _CALL cr 
 1358      FEFF5DF8 
 1358      04EB
 1359              	// print error offset on line      
 1360 0ab6 DFF81C07 	    ldr r0,=token_at_msg 
 1361 0aba 00B5FFF7 	    _CALL uart_puts 
 1361      FEFF5DF8 
 1361      04EB
 1362 0ac4 1046     	    mov r0,r2 
 1363 0ac6 4FF01001 	    mov r1,#16 
 1364 0aca 00B5FFF7 	    _CALL print_int
 1364      FEFF5DF8 
 1364      04EB
 1365 0ad4 00B5FFF7 	    _CALL cr
 1365      FEFF5DF8 
 1365      04EB
 1366              	// dump tokenize line 
 1367 0ade 5846     	    mov r0,BPTR
ARM GAS  tinyBasic.s 			page 40


 1368 0ae0 8278     	    ldrb r2,[r0,#2]
 1369 0ae2 00B500F0 	    _CALL dump01 
 1369      24FA5DF8 
 1369      04EB
 1370 0aec FFF7FEBF 	    b warm_start 
 1371              	compile_error:
 1372 0af0 DFF8DC16 	    ldr r1,=err_msg 
 1373 0af4 4FEA8000 	    lsl r0,#2 
 1374 0af8 0858     	    ldr r0,[r1,r0]
 1375 0afa 00B5FFF7 	    _CALL uart_puts
 1375      FEFF5DF8 
 1375      04EB
 1376 0b04 A068     	    ldr r0,[UPP,#BASICPTR]
 1377 0b06 00B5FFF7 	    _CALL uart_puts
 1377      FEFF5DF8 
 1377      04EB
 1378 0b10 00B5FFF7 	    _CALL cr
 1378      FEFF5DF8 
 1378      04EB
 1379 0b1a 2068     	    ldr r0,[UPP,#IN_SAVED]
 1380 0b1c 00B5FFF7 	    _CALL spaces 
 1380      FEFF5DF8 
 1380      04EB
 1381 0b26 4FF05E00 	    mov r0,#'^' 
 1382 0b2a 00B5FFF7 	    _CALL uart_putc
 1382      FEFF5DF8 
 1382      04EB
 1383 0b34 00B5FFF7 	    _CALL cr
 1383      FEFF5DF8 
 1383      04EB
 1384 0b3e FFF7FEBF 	    b  warm_start  
 1385              	    
 1386 0b42 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1386      74696D65 
 1386      20657272 
 1386      6F723A20 
 1386      00
 1387 0b53 746F6B65 	token_at_msg: .asciz "token offset: "
 1387      6E206F66 
 1387      66736574 
 1387      3A2000
 1388              	
 1389              	
 1390              	err_msg:
 1391 0b62 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1391      00000000 
 1391      0D000000 
 1391      1B000000 
 1391      34000000 
 1392 0b7a 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1392      6F000000 
 1392      89000000 
 1392      9A000000 
 1392      AB000000 
 1393 0b8e B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1393      EA000000 
 1393      FA000000 
ARM GAS  tinyBasic.s 			page 41


 1393      0E010000 
 1393      21010000 
 1394 0ba2 2E010000 	   .word err_cant_prog 
 1395              	
 1396              	    .section .rodata.tb_error 
 1397              	
 1398 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1398      72792066 
 1398      756C6C0A 
 1398      00
 1399 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1399      61782065 
 1399      72726F72 
 1399      0A00
 1400 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1400      206F7065 
 1400      72617469 
 1400      6F6E206F 
 1400      76657266 
 1401 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1401      73696F6E 
 1401      20627920 
 1401      300A00
 1402 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1402      6C696420 
 1402      6C696E65 
 1402      206E756D 
 1402      6265722E 
 1403 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1403      74696D65 
 1403      206F6E6C 
 1403      79207573 
 1403      6167652E 
 1404 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1404      616E6420 
 1404      6C696E65 
 1404      206F6E6C 
 1404      79207573 
 1405 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1405      69636174 
 1405      65206E61 
 1405      6D652E0A 
 1405      00
 1406 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1406      206E6F74 
 1406      20666F75 
 1406      6E642E0A 
 1406      00
 1407 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1407      76616C75 
 1407      652E0A00 
 1408 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1408      20696E20 
 1408      65787465 
 1408      6E646564 
 1408      206D656D 
 1409 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
ARM GAS  tinyBasic.s 			page 42


 1409      61746120 
 1409      666F756E 
 1409      642E0A00 
 1410 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1410      726F6772 
 1410      616D2069 
 1410      6E205241 
 1410      4D210A00 
 1411 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1411      20737973 
 1411      74656D20 
 1411      66756C6C 
 1411      2E0A00
 1412 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1412      65722066 
 1412      756C6C0A 
 1412      00
 1413 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1413      74206D6F 
 1413      64696679 
 1413      2070726F 
 1413      6772616D 
 1414              	
 1415 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1415      2074696D 
 1415      65206572 
 1415      726F722C 
 1415      2000
 1416 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1416      70696C65 
 1416      20657272 
 1416      6F722C20 
 1416      00
 1417 018d 6C617374 	tk_id: .asciz "last token id: "
 1417      20746F6B 
 1417      656E2069 
 1417      643A2000 
 1418              	
 1419              	
 1420              	    .section  .text , "ax", %progbits 
 1421              	
 1422              	/*********************************
 1423              	   skip_line 
 1424              	   data and remark line are skipped
 1425              	   by the interpreter 
 1426              	***********************************/
 1427 0ba6 00BF     	    _FUNC skip_line 
 1428 0ba8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1429 0bac 7047     	    _RET 
 1430              	
 1431              	
 1432              	/*********************************
 1433              	   BASIC: BTGL adr, mask   
 1434              	   toggle bits [adr]=[adr]^mask  
 1435              	   input:
 1436              	     r0    adr 
 1437              	     r1    mask 
ARM GAS  tinyBasic.s 			page 43


 1438              	    output;
 1439              	      none 
 1440              	    use:
 1441              	      T1   temp
 1442              	      T2   temp  
 1443              	*******************************/     
 1444 0bae 00BF     	    _FUNC BTGL 
 1445              	
 1446 0bb0 7047     	    _RET 
 1447              	
 1448              	/***************************************
 1449              	   kword_cmp
 1450              	   compare keyword to dict entry
 1451              	  input:
 1452              	    r0  keyword 
 1453              	    r1  dict entry 
 1454              	    r2  character count 
 1455              	  output:
 1456              	    r0  0 not same | -1 same 
 1457              	  use:
 1458              	    r6   result  
 1459              	    T1   char 1
 1460              	    T2   char 2
 1461              	**************************************/   
 1462 0bb2 00BF     	    _FUNC kword_cmp 
 1463 0bb4 2DE94003 	    push {r6,T1,T2}
 1464 0bb8 4FF0FF36 	    mov r6,#-1 
 1465 0bbc 4AB1     	1:  cbz r2,9f       
 1466 0bbe 10F8018B 	    ldrb T1,[r0],#1
 1467 0bc2 11F8019B 	    ldrb T2,[r1],#1
 1468 0bc6 A2F10102 	    sub r2,#1
 1469 0bca C845     	    cmp T1,T2
 1470 0bcc F6D0     	    beq 1b 
 1471 0bce 86EA0606 	    eor r6,r6  
 1472 0bd2 3046     	9:  mov r0,r6
 1473 0bd4 BDE84003 	    pop {r6,T1,T2}
 1474 0bd8 7047     	    _RET 
 1475              	
 1476              	/***********************************************
 1477              	    search_dict 
 1478              	    search keyword in dictionary
 1479              	   input:
 1480              	  	 r0   keyword 
 1481              	     r1		dictionary first name field address  
 1482              	   output:
 1483              	     r0 		token attribute 
 1484              	     r1		  cmd_index if r0!=TK_NONE  
 1485              	   use:
 1486              	     r3   length keyword 
 1487              	     T1   keyword
 1488              	     T2   link  
 1489              	**********************************************/
 1490 0bda 00BF     	  _FUNC search_dict
 1491 0bdc 2DE90C03 	  push {r2,r3,T1,T2}
 1492 0be0 8046     	  mov T1,r0 
 1493 0be2 00B5FFF7 	  _CALL strlen 
 1493      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 44


 1493      04EB
 1494 0bec 0346     	  mov r3,r0  
 1495              	1:  
 1496 0bee 8946     	   mov T2,r1  // keep for linking   
 1497 0bf0 0878     	   ldrb r0,[r1] 
 1498 0bf2 78B1     	   cbz r0,9f // null byte, end of dictionary
 1499 0bf4 4046     	   mov r0,T1
 1500 0bf6 1A46     	   mov r2,r3   
 1501 0bf8 00B5FFF7 	   _CALL kword_cmp  
 1501      DBFF5DF8 
 1501      04EB
 1502 0c02 18B9     	   cbnz r0,2f 
 1503 0c04 4946     	   mov r1,T2
 1504 0c06 51F80C1C 	   ldr r1,[r1,#-12]
 1505 0c0a F0E7     	   b 1b   
 1506              	2: // found
 1507 0c0c 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1508 0c10 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1509 0c14 BDE80C03 	9: pop {r2,r3,T1,T2}
 1510 0c18 7047     	   _RET 
 1511              	
 1512              	
 1513              	/**************************
 1514              	    INTERPRETER 
 1515              	*************************/
 1516              	
 1517              	/*********************************
 1518              	   cold_start 
 1519              	   initialize BASIC interpreter 
 1520              	   never leave 
 1521              	   input:
 1522              	     none 
 1523              	   output:
 1524              	    none 
 1525              	*********************************/
 1526              	  .type cold_start, %function 
 1527              	  .global cold_start 
 1528              	cold_start: 
 1529 0c1a 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1529      C2F20004 
 1530 0c22 DFF85400 	    ldr r0,src_addr 
 1531 0c26 DFF85410 	    ldr r1,dest_addr
 1532 0c2a 0968     	    ldr r1,[r1] 
 1533 0c2c 0C44     	    add UPP,r1 // system variables base address   
 1534              	// clear RAM
 1535 0c2e 2046     	    mov r0,UPP  
 1536 0c30 DFF86811 	    ldr r1,tib 
 1537 0c34 82EA0202 	    eor r2,r2 
 1538 0c38 40F8042B 	1:  str r2,[r0],#4 
 1539 0c3c 8842     	    cmp r0,r1 
 1540 0c3e FBD4     	    bmi 1b 
 1541              	//copy initialized system variables to ram 
 1542 0c40 DFF83400 	    ldr r0,src_addr 
 1543 0c44 2146     	    mov r1,UPP 
 1544 0c46 DFF83820 	    ldr r2,sysvar_size
 1545 0c4a 00B5FFF7 	    _CALL cmove
 1545      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 45


 1545      04EB
 1546 0c54 00B500F0 	    _CALL prt_version
 1546      15F85DF8 
 1546      04EB
 1547 0c5e 00B500F0 	    _CALL clear_basic 
 1547      62F85DF8 
 1547      04EB
 1548 0c68 00B5FFF7 	    _CALL search_free 
 1548      FEFF5DF8 
 1548      04EB
 1549 0c72 E062     	    str r0,[UPP,#FSFREE] 
 1550 0c74 FFF7FEBF 	    b warm_start    
 1551              	src_addr:
 1552 0c78 00000000 	  .word uzero
 1553              	dest_addr:
 1554 0c7c 00000000 	  .word vectors_size
 1555 0c80 D4000000 	sysvar_size: .word ulast-uzero 
 1556              	
 1557              	/************************************
 1558              	    print firmware version 
 1559              	    input: 
 1560              	      none 
 1561              	    output:
 1562              	      none 
 1563              	    use:
 1564              	      r0 
 1565              	***********************************/
 1566              	    _FUNC prt_version 
 1567 0c84 DFF85005 	    ldr r0,=version_msg 
 1568 0c88 00B5FFF7 	    _CALL uart_puts
 1568      FEFF5DF8 
 1568      04EB
 1569 0c92 9FF87400 	    ldrb r0,version 
 1570 0c96 4FEA1010 	    lsr r0,#4 
 1571 0c9a 00F13000 	    add r0,#'0' 
 1572 0c9e 3A28     	    cmp r0,#'9'+1 
 1573 0ca0 01D4     	    bmi 1f 
 1574 0ca2 00F10700 	    add r0,#7 
 1575              	  1:
 1576 0ca6 00B5FFF7 	    _CALL uart_putc 
 1576      FEFF5DF8 
 1576      04EB
 1577 0cb0 4FF02E00 	    mov r0,#'. 
 1578 0cb4 00B5FFF7 	    _CALL uart_putc 
 1578      FEFF5DF8 
 1578      04EB
 1579 0cbe 9FF84800 	    ldrb r0,version 
 1580 0cc2 00F00F00 	    and r0,#15 
 1581 0cc6 00F13000 	    add r0,'0' 
 1582 0cca 3A28     	    cmp r0,#'9'+1 
 1583 0ccc 01D4     	    bmi 1f 
 1584 0cce 00F10700 	    add r0,#7
 1585              	  1: 
 1586 0cd2 00B5FFF7 	    _CALL uart_putc 
 1586      FEFF5DF8 
 1586      04EB
 1587 0cdc 00B5FFF7 	    _CALL cr
ARM GAS  tinyBasic.s 			page 46


 1587      FEFF5DF8 
 1587      04EB
 1588 0ce6 7047     	    _RET  
 1589              	version_msg:
 1590 0ce8 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1590      65207069 
 1590      6C6C2074 
 1590      696E7920 
 1590      42415349 
 1591              	version:
 1592 0d08 10       	    .byte 0x10 
 1593 0d09 0000BF   	    .p2align 2 
 1594              	
 1595              	
 1596              	/*****************************
 1597              	    clear_vars 
 1598              	    initialize variables to 0
 1599              	  input:
 1600              	    none 
 1601              	  output:
 1602              	    none 
 1603              	  use:
 1604              	    r0,r1,r2 
 1605              	*****************************/
 1606              	    _FUNC clear_vars 
 1607 0d0c 07B4     	    push {r0,r1,r2}
 1608 0d0e 80EA0000 	    eor r0,r0 
 1609 0d12 04F16001 	    add r1,UPP,#VARS
 1610 0d16 4FF01A02 	    mov r2,#26
 1611 0d1a 41F8040B 	1:  str r0,[r1],#4 
 1612 0d1e 013A     	    subs r2,#1
 1613 0d20 FBD1     	    bne 1b  
 1614 0d22 07BC     	    pop {r0,r1,r2}
 1615 0d24 7047     	    _RET 
 1616              	
 1617              	/*****************************
 1618              	   clear_basic 
 1619              	   reset BASIC system variables 
 1620              	   and clear variables and RAM 
 1621              	*****************************/
 1622 0d26 00BF     	    _FUNC clear_basic
 1623 0d28 80EA0000 	  	eor r0,r0
 1624 0d2c 2064     	    str r0,[UPP,#FLAGS] 
 1625 0d2e 6060     	    str r0,[UPP,#COUNT]
 1626 0d30 2060     	    str r0,[UPP,#IN_SAVED]
 1627 0d32 A060     	    str r0,[UPP,#BASICPTR]
 1628 0d34 E060     	    str r0,[UPP,#DATAPTR]
 1629 0d36 2061     	    str r0,[UPP,#DATA]
 1630 0d38 6061     	    str r0,[UPP,#DATALEN]
 1631 0d3a 04F1D000 	    add r0,UPP,#BASIC_START 
 1632 0d3e 00F11000 	    add r0,#16 
 1633 0d42 6FF00F01 	    mvn r1,#15
 1634 0d46 00EA0100 	    and r0,r1 
 1635 0d4a 2063     	    str r0,[UPP,#TXTBGN]
 1636 0d4c 6063     	    str r0,[UPP,#TXTEND]
 1637 0d4e C4F8D000 	    str r0,[UPP,#HERE]
 1638 0d52 00B5FFF7 	    _CALL clear_vars
ARM GAS  tinyBasic.s 			page 47


 1638      DAFF5DF8 
 1638      04EB
 1639 0d5c 206B     	    ldr r0,[UPP,#TXTBGN]
 1640 0d5e DFF83C10 	    ldr r1,tib 
 1641 0d62 82EA0202 	    eor r2,r2 
 1642 0d66 40F8042B 	1:  str r2,[r0],#4
 1643 0d6a 8842     	    cmp r0,r1 
 1644 0d6c FBD4     	    bmi 1b 
 1645 0d6e 7047     	    _RET  
 1646              	
 1647              	/***********************************
 1648              	   warm_init 
 1649              	   initialize interpreter context 
 1650              	  input:
 1651              	    none
 1652              	  output:
 1653              	    none 
 1654              	  use:
 1655              	    r0 
 1656              	***********************************/
 1657              	warm_init:
 1658              	// reset data stack       
 1659 0d70 DFF824C0 	    ldr DP,dstack 
 1660 0d74 4FF0000A 	    mov IN,#0 // BASIC line index 
 1661 0d78 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1662 0d7c 80EA0000 	    eor r0,r0 
 1663 0d80 6060     	    str r0,[UPP,#COUNT]  
 1664 0d82 2064     	    str r0,[UPP,#FLAGS]
 1665 0d84 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1666 0d86 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1667 0d8a 6064     	    str r0,[UPP,#TAB_WIDTH]
 1668 0d8c 4FF00A00 	    mov r0,#10 // default base decimal 
 1669 0d90 A061     	    str r0,[UPP,#BASE]
 1670 0d92 7047     	    _RET  
 1671              	
 1672 0d94 00000000 	mstack: .word _mstack 
 1673 0d98 00000000 	dstack: .word _dstack 
 1674 0d9c 00000000 	tib: .word _tib 
 1675 0da0 00000000 	pad: .word _pad 
 1676 0da4 FCFFFFFF 	array: .word _pad - 4 
 1677 0da8 0A524541 	ready: .asciz "\nREADY" 
 1677      445900
 1678              	
 1679              	/**********************************
 1680              	    warm_start 
 1681              	    start BASIC interpreter doesn't  
 1682              	    reset variables and code space 
 1683              	  input:
 1684              	    none 
 1685              	  output:
 1686              	    none 
 1687              	**********************************/
 1688 0daf 00       	    _GBL_FUNC warm_start 
 1689              	// initialise parameters stack
 1690 0db0 FFF7DEFF 	    bl warm_init
 1691              	// reset main stack 
 1692 0db4 5FF82400 	    ldr r0,mstack
ARM GAS  tinyBasic.s 			page 48


 1693 0db8 8546     	    mov sp,r0 
 1694 0dba DFF82004 	    ldr r0,=ready 
 1695 0dbe 00B5FFF7 	    _CALL uart_puts 
 1695      FEFF5DF8 
 1695      04EB
 1696              	// fall in cmd_line 
 1697              	
 1698              	/**********************************
 1699              	   cmd_line 
 1700              	   shell command line 
 1701              	   input:
 1702              	      none 
 1703              	   output:
 1704              	      none 
 1705              	   use:
 1706              	
 1707              	***********************************/
 1708              	    _FUNC cmd_line 
 1709 0dc8 00B5FFF7 	    _CALL cr
 1709      FEFF5DF8 
 1709      04EB
 1710 0dd2 80EA0000 	    eor r0,r0 
 1711 0dd6 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1712 0dda 5FF84000 	1:  ldr r0,tib
 1713 0dde 4FF05001 	    mov r1,#TIB_SIZE 
 1714 0de2 00B5FFF7 	    _CALL readln 
 1714      FEFF5DF8 
 1714      04EB
 1715 0dec 0940     	    ands r1,r1 // empty line 
 1716 0dee F4D0     	    beq 1b 
 1717 0df0 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1717      DDFA5DF8 
 1717      04EB
 1718 0dfa EED0     	    beq 1b  // tokens stored in text area 
 1719              	// interpret tokenized line 
 1720              	interpreter:
 1721 0dfc 00B500F0 	  _CALL next_token 
 1721      21F85DF8 
 1721      04EB
 1722 0e06 0228     	  cmp r0,#2
 1723 0e08 F8D4     	  bmi interpreter    
 1724 0e0a 1A28     	  cmp r0,#TK_LABEL 
 1725 0e0c F6D0     	  beq interpreter 
 1726 0e0e 1728     	  cmp r0,#TK_CMD 
 1727 0e10 03D1     	  bne 2f
 1728 0e12 0846     	  mov r0,r1 
 1729 0e14 00F012F8 	  bl execute  
 1730 0e18 F0E7     	  b interpreter   
 1731              	2: 
 1732 0e1a 1428     	  cmp r0,#TK_VAR 
 1733 0e1c 05D1     	  bne 3f 
 1734 0e1e 00B500F0 	  _CALL let_var 
 1734      CDFB5DF8 
 1734      04EB
 1735 0e28 E8E7     	  b interpreter 
 1736              	3: 
 1737 0e2a 0C28     	  cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 49


 1738 0e2c 05D1     	  bne 4f
 1739 0e2e 00B500F0 	  _CALL let_array 
 1739      D3FB5DF8 
 1739      04EB
 1740 0e38 E0E7     	  b interpreter
 1741              	4: 
 1742 0e3a 0DE6     	  b syntax_error
 1743              	
 1744              	/*****************************
 1745              	    execute 
 1746              	    execute a BASIC routine from 
 1747              	    its token value 
 1748              	  input:
 1749              	    r0  BASIC SUB|FUNC token  
 1750              	  output: 
 1751              	    depend on SUB|FUNc
 1752              	*****************************/
 1753              	    _FUNC execute 
 1754 0e3c E849     	    ldr r1,=fn_table 
 1755 0e3e 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1756 0e42 0047     	    bx r0 
 1757              	
 1758              	/*************************************
 1759              	  next_token 
 1760              	  extract next token from token list 
 1761              	  input:
 1762              	    none 
 1763              	  output:
 1764              	    r0    token attribute
 1765              	    r1    token value if there is one 
 1766              	  use:
 1767              	    T1    exit token type  
 1768              	****************************/
 1769              	    _FUNC next_token 
 1770 0e44 6068     	    ldr r0,[UPP,#COUNT]
 1771 0e46 8245     	    cmp IN,r0 
 1772 0e48 11D4     	    bmi 0f
 1773              	// reached end of line skip to next one 
 1774 0e4a 8344     	    add BPTR,r0 // next line 
 1775 0e4c 606B     	    ldr r0,[UPP,#TXTEND]
 1776 0e4e 8345     	    cmp BPTR,r0 
 1777 0e50 7FF5FEAF 	    bpl warm_start // end of program
 1778 0e54 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1779 0e58 6060     	    str r0,[UPP,#COUNT] 
 1780 0e5a 4FF0030A 	    mov IN,#3
 1781 0e5e 00B5FFF7 	    _CALL show_trace
 1781      C4F95DF8 
 1781      04EB
 1782 0e68 80EA0000 	    eor r0,r0
 1783 0e6c 7047     	    _RET 
 1784              	0: 
 1785 0e6e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1786 0e72 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1787 0e76 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1788 0e7a 0AF1010A 	    add IN,#1  
 1789 0e7e 1328     	    cmp r0,#TK_CHAR 
 1790 0e80 1AD4     	    bmi 9f // these tokens have no value  
ARM GAS  tinyBasic.s 			page 50


 1791 0e82 1828     	    cmp r0,#TK_SCONST 
 1792 0e84 04D5     	    bpl 1f
 1793              	    // tokens with .byte value 
 1794 0e86 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1795 0e8a 0AF1010A 	    add IN,#1 
 1796 0e8e 7047     	    _RET  
 1797 0e90 1C28     	1:  cmp r0,#TK_QSTR 
 1798 0e92 0DD1     	    bne 2f 
 1799 0e94 0BEB0A01 	    add r1,BPTR,IN
 1800 0e98 0846     	    mov r0,r1 
 1801 0e9a 00B5FFF7 	    _CALL strlen 
 1801      FEFF5DF8 
 1801      04EB
 1802 0ea4 8244     	    add IN,r0 
 1803 0ea6 0AF1010A 	    add IN,#1
 1804 0eaa 4FF01C00 	    mov r0,#TK_QSTR 
 1805 0eae 7047     	    _RET  
 1806              	2:  // .word value 
 1807 0eb0 5BF80A10 	    ldr r1,[BPTR,IN] 
 1808 0eb4 0AF1040A 	    add IN,#4 
 1809 0eb8 7047     	9:  _RET
 1810              	
 1811              	
 1812              	/*********************************
 1813              	    expect 
 1814              	    check if next token is of 
 1815              	    expected type. If not 
 1816              	    call syntax_error  
 1817              	  input:
 1818              	      r0   token attribute
 1819              	  output:
 1820              	      r0  token attribute 
 1821              	      r1  token value
 1822              	  use:
 1823              	      T1   
 1824              	**********************************/
 1825 0eba 00BF     	    _FUNC expect 
 1826 0ebc 4DF8048D 	    push {T1}
 1827 0ec0 8046     	    mov T1,r0 
 1828 0ec2 00B5FFF7 	    _CALL next_token 
 1828      BEFF5DF8 
 1828      04EB
 1829 0ecc 4045     	    cmp r0,T1  
 1830 0ece 7FF4C3AD 	    bne syntax_error 
 1831 0ed2 5DF8048B 	    pop {T1}
 1832 0ed6 7047     	    _RET 
 1833              	
 1834              	/***********************************
 1835              	    func_args 
 1836              	    get function arguments list 
 1837              	  input:
 1838              	    none 
 1839              	  output:
 1840              	    r0    arg. count 
 1841              	  use:
 1842              	
 1843              	************************************/
ARM GAS  tinyBasic.s 			page 51


 1844              	    _FUNC func_args 
 1845 0ed8 4FF00500 	    mov r0,#TK_LPAREN 
 1846 0edc 00B5FFF7 	    _CALL expect 
 1846      EDFF5DF8 
 1846      04EB
 1847 0ee6 00B500F0 	    _CALL arg_list 
 1847      0CF85DF8 
 1847      04EB
 1848 0ef0 01B4     	    push {r0}
 1849 0ef2 4FF00600 	    mov r0,#TK_RPAREN 
 1850 0ef6 00B5FFF7 	    _CALL expect 
 1850      E0FF5DF8 
 1850      04EB
 1851 0f00 01BC     	    pop {r0}
 1852 0f02 7047     	    _RET 
 1853              	
 1854              	/**********************************
 1855              	    arg_list 
 1856              	    get arguments list on dstack 
 1857              	  input:
 1858              	    none 
 1859              	  output:
 1860              	    r0    arg count
 1861              	  use:
 1862              	    T1    tmp count  
 1863              	***********************************/
 1864              	    _FUNC arg_list 
 1865 0f04 4DF8048D 	    push {T1}
 1866 0f08 88EA0808 	    eor T1,T1 
 1867 0f0c 00B500F0 	1:  _CALL expression 
 1867      BFF85DF8 
 1867      04EB
 1868 0f16 1B28     	    cmp R0,#TK_INTGR  
 1869 0f18 0AD1     	    bne 2f
 1870 0f1a 4CF8041D 	    _PUSH r1 
 1871 0f1e 08F10108 	    add T1,#1 
 1872 0f22 00B5FFF7 	    _CALL next_token 
 1872      8EFF5DF8 
 1872      04EB
 1873 0f2c 0228     	    cmp r0,#TK_COMMA 
 1874 0f2e EDD0     	    beq 1b 
 1875 0f30 D4F800A0 	2:  _UNGET_TOKEN 
 1875      D4F808B0 
 1876 0f38 4046     	9:  mov r0,T1 
 1877 0f3a 5DF8048B 	    pop {T1}
 1878 0f3e 7047     	    _RET 
 1879              	
 1880              	
 1881              	/***********************************
 1882              	 factor
 1883              	 arithmetick factor parser 
 1884              	 factor ::= ['+'|'-'|e]  var | @ |
 1885              				 integer | function |
 1886              				 '('expression')' 
 1887              	  input: 
 1888              	    none 
 1889              	  output:
ARM GAS  tinyBasic.s 			page 52


 1890              	    r0   token attribute 
 1891              	    r1   token value 
 1892              	  use:
 1893              	    r2   temp 
 1894              	    r3   sign 
 1895              	***********************************/
 1896              	    _FUNC factor 
 1897 0f40 0CB4     	    push {r2,r3}
 1898 0f42 00B5FFF7 	    _CALL next_token
 1898      7EFF5DF8 
 1898      04EB
 1899 0f4c 4FF00103 	    mov r3,#1 // default sign +  
 1900 0f50 0828     	    cmp r0,#TK_MINUS  
 1901 0f52 06D1     	    bne 1f 
 1902 0f54 4FF0FF33 	    mov r3,#-1 // minus sign 
 1903 0f58 00B5FFF7 	0:  _CALL next_token
 1903      73FF5DF8 
 1903      04EB
 1904 0f62 1B28     	1:  cmp r0,#TK_INTGR 
 1905 0f64 55D0     	    beq 8f 
 1906 0f66 0C28     	    cmp r0,#TK_ARRAY 
 1907 0f68 1DD1     	    bne 2f 
 1908 0f6a 4FF00500 	    mov r0,#TK_LPAREN 
 1909 0f6e 00B5FFF7 	    _CALL expect 
 1909      A4FF5DF8 
 1909      04EB
 1910 0f78 00B500F0 	    _CALL expression
 1910      89F85DF8 
 1910      04EB
 1911 0f82 1B28     	    cmp r0,#TK_INTGR
 1912 0f84 7FF468AD 	    bne syntax_error
 1913 0f88 0A46     	    mov r2,r1  
 1914 0f8a 4FF00600 	    mov r0,#TK_RPAREN
 1915 0f8e 00B5FFF7 	    _CALL expect 
 1915      94FF5DF8 
 1915      04EB
 1916 0f98 1046     	    mov r0,r2 
 1917 0f9a 00B500F0 	    _CALL get_array_element 
 1917      E4F85DF8 
 1917      04EB
 1918 0fa4 35E0     	    b 8f
 1919 0fa6 0528     	2:  cmp r0,#TK_LPAREN 
 1920 0fa8 13D1     	    bne 3f 
 1921 0faa 00B500F0 	    _CALL expression 
 1921      70F85DF8 
 1921      04EB
 1922 0fb4 1B28     	    cmp r0,#TK_INTGR 
 1923 0fb6 7FF44FAD 	    bne syntax_error
 1924 0fba 0A46     	    mov r2,r1   
 1925 0fbc 4FF00600 	    mov r0,#TK_RPAREN
 1926 0fc0 00B5FFF7 	    _CALL expect 
 1926      7BFF5DF8 
 1926      04EB
 1927 0fca 1146     	    mov r1,r2 
 1928 0fcc 4FF01B00 	    mov r0,#TK_INTGR
 1929 0fd0 1FE0     	    b 8f       
 1930 0fd2 1428     	3:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 53


 1931 0fd4 06D1     	    bne 4f
 1932 0fd6 0846     	    mov r0,r1  
 1933 0fd8 00B500F0 	    _CALL get_var 
 1933      D9F85DF8 
 1933      04EB
 1934 0fe2 16E0     	    b 8f 
 1935 0fe4 1528     	4:  cmp r0,#TK_IFUNC 
 1936 0fe6 06D1     	    bne 6f 
 1937 0fe8 0846     	5:  mov r0,r1  
 1938 0fea 00B5FFF7 	    _CALL execute
 1938      26FF5DF8 
 1938      04EB
 1939 0ff4 0DE0     	    b 8f 
 1940 0ff6 1A28     	6:  cmp r0,#TK_LABEL
 1941 0ff8 07D1     	    bne 7f 
 1942 0ffa 41F00040 	    orr r0,r1,#(1<<31) 
 1943 0ffe 00B5FFF7 	    _CALL search_const
 1943      4AF95DF8 
 1943      04EB
 1944 1008 03E0     	    b 8f 
 1945 100a 1828     	7:  cmp r0,#TK_SCONST 
 1946 100c 03D1     	    bne 9f 
 1947 100e 4FF01B00 	    mov r0,#TK_INTGR
 1948 1012 03FB01F1 	8:  mul r1,r3 
 1949 1016 0CBC     	9:  pop {r2,r3}   
 1950 1018 7047     	    _RET 
 1951              	
 1952              	
 1953              	/*****************************************
 1954              	    term 
 1955              	    term parser 
 1956              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1957              	    output:
 1958              	      r0  	token attribute 
 1959              	      r1		integer
 1960              	    use:
 1961              	      r2    first factor 
 1962              	      r3    operator *|/|%
 1963              	******************************************/
 1964 101a 00BF     	    _FUNC term 
 1965 101c 00B5FFF7 	    _CALL factor
 1965      8FFF5DF8 
 1965      04EB
 1966 1026 1B28     	    cmp r0,#TK_INTGR
 1967 1028 00D0     	    beq 0f 
 1968 102a 7047     	    _RET // not a factor    
 1969 102c 0CB4     	0:  push {r2,r3}
 1970 102e 0A46     	    mov r2,r1 // first factor    
 1971 1030 00B5FFF7 	0:  _CALL next_token
 1971      07FF5DF8 
 1971      04EB
 1972 103a 0346     	    mov r3,r0  // operator 
 1973 103c 0928     	    cmp r0,TK_MULT
 1974 103e 01D4     	    bmi 1f 
 1975 1040 0C28     	    cmp r0,#TK_MOD+1
 1976 1042 06D4     	    bmi 2f
 1977 1044 D4F800A0 	1:  _UNGET_TOKEN
ARM GAS  tinyBasic.s 			page 54


 1977      D4F808B0 
 1978 104c 4FF01B00 	    mov r0,#TK_INTGR
 1979 1050 1AE0     	    b 9f 
 1980 1052 00B5FFF7 	2:  _CALL factor
 1980      74FF5DF8 
 1980      04EB
 1981 105c 1B28     	    cmp r0,#TK_INTGR
 1982 105e 7FF4FBAC 	    bne syntax_error 
 1983 1062 092B     	    cmp r3,#TK_MULT
 1984 1064 02D1     	    bne 3f 
 1985              	// multiplication
 1986 1066 01FB02F2 	    mul r2,r1
 1987 106a E1E7     	    b 0b  
 1988 106c B8F10A0F 	3:  cmp T1,#TK_DIV 
 1989 1070 02D1     	    bne 4f
 1990              	// division
 1991 1072 92FBF1F2 	    sdiv r2,r2,r1
 1992 1076 DBE7     	    b 0b  
 1993              	4: // modulo
 1994 1078 1046     	    mov r0,r2 
 1995 107a 92FBF1F2 	    sdiv r2,r2,r1 
 1996 107e 01FB02F2 	    mul  r2,r1 
 1997 1082 A0EB0202 	    sub  r2,r0,r2
 1998 1086 D3E7     	    b 0b  
 1999 1088 1146     	9:  mov r1,r2 
 2000 108a 0CBC     	    pop {r2,r3}
 2001 108c 7047     	    _RET 
 2002              	
 2003              	
 2004              	/*****************************************
 2005              	    expression 
 2006              	    arithmetic expression parser 
 2007              	    expression ::= term [['+'|'-'] term]*
 2008              	    result range {-32768..32767}
 2009              	    output:
 2010              	      r0    TK_NONE || TK_INTGR 
 2011              	      r1 	  integer
 2012              	    use:
 2013              	      r2  left term 
 2014              	      r3  operator +|-
 2015              	******************************************/
 2016 108e 00BF     	    _FUNC expression 
 2017 1090 00B5FFF7 	    _CALL term 
 2017      C3FF5DF8 
 2017      04EB
 2018 109a 1B28     	    cmp r0,#TK_INTGR 
 2019 109c 00D0     	    beq 0f 
 2020 109e 7047     	    _RET   
 2021 10a0 0CB4     	0:  push {r2,r3}
 2022 10a2 0A46     	    mov r2,r1 // first term
 2023 10a4 00B5FFF7 	1:  _CALL next_token 
 2023      CDFE5DF8 
 2023      04EB
 2024 10ae 0346     	    mov r3,r0 //  +|-
 2025 10b0 0728     	    cmp r0,#TK_PLUS 
 2026 10b2 08D0     	    beq 3f 
 2027 10b4 0828     	    cmp r0,#TK_MINUS  
ARM GAS  tinyBasic.s 			page 55


 2028 10b6 06D0     	    beq 3f
 2029 10b8 D4F800A0 	    _UNGET_TOKEN 
 2029      D4F808B0 
 2030 10c0 4FF01B00 	    mov r0,#TK_INTGR
 2031 10c4 0EE0     	    b 9f 
 2032 10c6 00B5FFF7 	3:  _CALL term 
 2032      A8FF5DF8 
 2032      04EB
 2033 10d0 1B28     	    cmp r0,#TK_INTGR 
 2034 10d2 7FF4C1AC 	    bne syntax_error 
 2035 10d6 072B     	    cmp r3,#TK_PLUS 
 2036 10d8 02D0     	    beq 4f 
 2037 10da A2EB0102 	    sub r2,r1 // term1-term2  
 2038 10de E1E7     	    b 1b 
 2039 10e0 0A44     	4:  add r2,r1 // term1+term2
 2040 10e2 DFE7     	    b 1b
 2041 10e4 1146     	9:  mov r1,r2 
 2042 10e6 0CBC     	    pop {r2,r3}
 2043 10e8 7047     	    _RET 
 2044              	
 2045              	
 2046              	/**********************************************
 2047              	    relation
 2048              	    rel ::= expr1 rel_op expr2
 2049              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2050              	    relation return  integer , zero is false 
 2051              	    output:
 2052              	        r0	TK_INTGR  
 2053              	        r1	integer 
 2054              	    use:
 2055              	        r2   first operand 
 2056              	        r3   relop   
 2057              	**********************************************/
 2058 10ea 00BF     	    _FUNC relation 
 2059 10ec 0CB4     	    push {r2,r3}
 2060 10ee 00B5FFF7 	    _CALL expression 
 2060      CEFF5DF8 
 2060      04EB
 2061 10f8 1B28     	    cmp r0,#TK_INTGR 
 2062 10fa 7FF4ADAC 	    bne syntax_error 
 2063 10fe 0A46     	    mov r2,r1  // first operand  
 2064 1100 00B5FFF7 	    _CALL next_token 
 2064      9FFE5DF8 
 2064      04EB
 2065 110a A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2066 110e 0D28     	    cmp r0,#TK_EQUAL 
 2067 1110 1DD4     	    bmi 8f 
 2068 1112 1328     	    cmp r0,#TK_NE+1
 2069 1114 1BD5     	    bpl 8f 
 2070 1116 00B5FFF7 	    _CALL expression 
 2070      BAFF5DF8 
 2070      04EB
 2071 1120 1B28     	    cmp r0,#TK_INTGR 
 2072 1122 7FF499AC 	    bne syntax_error 
 2073 1126 8A42     	    cmp r2,r1 // compare operands  
 2074 1128 4FF0FF31 	    mov r1,#-1 
 2075 112c 2D4A     	    ldr r2,=relop_jmp
ARM GAS  tinyBasic.s 			page 56


 2076 112e D2E803F0 	    tbb [r2,r3]    
 2077              	rel_idx0:
 2078              	rel_eq:
 2079 1132 11D0     	    beq 9f 
 2080 1134 08E0     	    b rel_false
 2081              	rel_gt:
 2082 1136 0FDC     	    bgt 9f  
 2083 1138 06E0     	    b rel_false  
 2084              	rel_ge:
 2085 113a 0DDA     	    bge 9f  
 2086 113c 04E0     	    b rel_false  
 2087              	rel_lt: 
 2088 113e 0BDB     	    blt 9f   
 2089 1140 02E0     	    b rel_false 
 2090              	rel_le:
 2091 1142 09DD     	    ble 9f  
 2092 1144 00E0     	    b rel_false 
 2093              	rel_ne:
 2094 1146 07D1     	    bne 9f 
 2095              	rel_false:    
 2096 1148 81EA0101 	    eor r1,r1  // false
 2097 114c 04E0     	    b 9f  
 2098 114e D4F800A0 	8:  _UNGET_TOKEN 
 2098      D4F808B0 
 2099 1156 1146     	    mov r1,r2    
 2100 1158 4FF01B00 	9:  mov r0,#TK_INTGR
 2101 115c 0CBC     	    pop {r2,r3}
 2102 115e 7047     	    _RET 
 2103              	
 2104              	
 2105              	relop_jmp: 
 2106 1160 00       	  .byte 0 // =  
 2107 1161 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2108 1162 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2109 1163 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2110 1164 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2111 1165 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2112              	
 2113              	
 2114              	/***********************************
 2115              	    get_array_element
 2116              	    return value of @(n)
 2117              	  input:
 2118              	    r0    indice 
 2119              	  output:
 2120              	    r0   TK_INTGR
 2121              	    r1   value  
 2122              	************************************/
 2123 1166 00BF     	    _FUNC get_array_element 
 2124 1168 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2125 116c 4FEA8000 	    lsl r0,#2 
 2126 1170 C0EB0100 	    rsb r0,r1 
 2127 1174 0168     	    ldr r1,[r0]
 2128 1176 4FF01B00 	    mov r0,#TK_INTGR 
 2129 117a 7047     	    _RET 
 2130              	
 2131              	
ARM GAS  tinyBasic.s 			page 57


 2132              	/***********************************
 2133              	    set_array_element 
 2134              	    set value of array element 
 2135              	  input:
 2136              	    r0   index 
 2137              	    r1   new value 
 2138              	  output:
 2139              	    none
 2140              	  use:
 2141              	    r2    array pointer 
 2142              	**********************************/
 2143              	    _FUNC set_array_element 
 2144 117c 04B4     	    push {r2}
 2145 117e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2146 1182 4FEA8000 	    lsl r0,#2 
 2147 1186 A1EB0001 	    sub r1,r0 
 2148 118a 0960     	    str r1,[r1]
 2149 118c 04BC     	    pop {r2}
 2150 118e 7047     	    _RET 
 2151              	
 2152              	/***********************************
 2153              	   get_var 
 2154              	   get variable value 
 2155              	  input:
 2156              	     r0    variable index {0..25}
 2157              	  output:
 2158              	     r0    TK_INTGR
 2159              	     r1    value 
 2160              	**********************************/
 2161              	    _FUNC get_var 
 2162 1190 04F16001 	    add r1,UPP,#VARS
 2163 1194 4FEA8000 	    lsl r0,#2 
 2164 1198 0958     	    ldr r1,[r1,r0]
 2165 119a 4FF01B00 	    mov r0,#TK_INTGR
 2166 119e 7047     	    _RET 
 2167              	
 2168              	/*********************************
 2169              	    set_var 
 2170              	    set variable value 
 2171              	  input:
 2172              	     r0    variable index {0..25}
 2173              	     r1    new value 
 2174              	  output:
 2175              	    none 
 2176              	  use:
 2177              	    r2   vars pointer 
 2178              	*********************************/
 2179              	    _FUNC set_var 
 2180 11a0 04B4     	    push {r2}
 2181 11a2 04F16002 	    add r2,UPP,#VARS
 2182 11a6 4FEA8000 	    lsl r0,#2
 2183 11aa 1150     	    str r1,[r2,r0]
 2184 11ac 04BC     	    pop {r2}
 2185 11ae 7047     	    _RET 
 2186              	
 2187              	/******************************
 2188              	    CONSTANTS data
ARM GAS  tinyBasic.s 			page 58


 2189              	******************************/
 2190              	
 2191              	  .section .rodata 
 2192              	
 2193              	// system variables initial value 
 2194              	uzero:
 2195 0000 00000000 	  .word 0 // IN_SAVED
 2196 0004 00000000 	  .word 0 // COUNT
 2197 0008 00000000 	  .word 0 // BASICPTR
 2198 000c 00000000 	  .word 0 // DATAPTR
 2199 0010 00000000 	  .word 0 // DATA
 2200 0014 00000000 	  .word 0 // DATALEN
 2201 0018 0A000000 	  .word 10 // BASE
 2202 001c 00000000 	  .word 0 // TICKS
 2203 0020 00000000 	  .word 0 // TIMER
 2204 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2205 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2206 002c 00000000 	  .word 0 // FSFREE
 2207 0030 00000000 	  .word 0 // TXTBGN
 2208 0034 00000000 	  .word 0 // TXTEND
 2209 0038 00000000 	  .word 0 //LOOP_DEPTH
 2210 003c 00000000 	  .word 0 // ARRAY_SIZE
 2211 0040 00000000 	  .word 0 // FLAGS
 2212 0044 04000000 	  .word 4 // TAB_WIDTH
 2213 0048 00000000 	  .word 0 // RX_HEAD
 2214 004c 00000000 	  .word 0 // RX_TAIL
 2215 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2217 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2218 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2219 00d0 00000000 	  .word 0 // HERE 
 2220              	ulast:
 2221              	
 2222              	  .section .rodata.dictionary 
 2223              	
 2224              	// keep alphabetic order for BASIC names from Z-A
 2225              	// this sort order is for for WORDS cmd output. 	
 2226              	  .type kword_end, %object
 2227              		.equ link, 0
 2228              	kword_end:
 2229 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2229      00000000 
 2229      00000000 
 2229      00000000 
 2230 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2230      57000000 
 2230      15000000 
 2230      59504F53 
 2230      00000000 
 2231 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
ARM GAS  tinyBasic.s 			page 59


 2231      56000000 
 2231      15000000 
 2231      58504F53 
 2231      00000000 
 2232 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2232      55000000 
 2232      15000000 
 2232      584F5200 
 2233 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2233      54000000 
 2233      17000000 
 2233      574F5244 
 2233      53000000 
 2234 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2234      53000000 
 2234      17000000 
 2234      57414954 
 2234      00000000 
 2235 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2235      52000000 
 2235      17000000 
 2235      554E5449 
 2235      4C000000 
 2236 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2236      51000000 
 2236      15000000 
 2236      55464C41 
 2236      53480000 
 2237 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2237      50000000 
 2237      15000000 
 2237      55424F55 
 2237      4E440000 
 2238 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2238      4F000000 
 2238      17000000 
 2238      54524143 
 2238      45000000 
 2239 00c0 B8000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2239      4E000000 
 2239      17000000 
 2239      544F0000 
 2240 00d0 CC000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2240      4C000000 
 2240      17000000 
 2240      54494D45 
 2240      52000000 
 2241 00e4 DC000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2241      4D000000 
 2241      15000000 
 2241      54494D45 
 2241      4F555400 
 2242 00f8 F0000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2242      4B000000 
 2242      15000000 
 2242      5449434B 
 2242      53000000 
ARM GAS  tinyBasic.s 			page 60


 2243 010c 04010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2243      4A000000 
 2243      17000000 
 2243      5448454E 
 2243      00000000 
 2244 0120 18010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2244      49000000 
 2244      17000000 
 2244      54414200 
 2245 0130 2C010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2245      48000000 
 2245      17000000 
 2245      53544F52 
 2245      45000000 
 2246 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2246      47000000 
 2246      17000000 
 2246      53544F50 
 2246      00000000 
 2247 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2247      46000000 
 2247      17000000 
 2247      53544550 
 2247      00000000 
 2248 016c 64010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2248      45000000 
 2248      17000000 
 2248      53504300 
 2249 017c 78010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2249      44000000 
 2249      17000000 
 2249      534C4545 
 2249      50000000 
 2250 0190 88010000 	  _dict_entry TK_SCONST,SERVO_D,0xd   
 2250      0D000000 
 2250      18000000 
 2250      53455256 
 2250      4F5F4400 
 2251 01a4 9C010000 	  _dict_entry TK_SCONST,SERVO_C,0xc 
 2251      0C000000 
 2251      18000000 
 2251      53455256 
 2251      4F5F4300 
 2252 01b8 B0010000 	  _dict_entry TK_SCONST,SERVO_B,0xb 
 2252      0B000000 
 2252      18000000 
 2252      53455256 
 2252      4F5F4200 
 2253 01cc C4010000 	  _dict_entry TK_SCONST,SERVO_A,0xa 
 2253      0A000000 
 2253      18000000 
 2253      53455256 
 2253      4F5F4100 
 2254 01e0 D8010000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2254      43000000 
 2254      17000000 
 2254      53455256 
ARM GAS  tinyBasic.s 			page 61


 2254      4F5F504F 
 2255 01f8 EC010000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2255      42000000 
 2255      17000000 
 2255      53455256 
 2255      4F5F494E 
 2256 0210 04020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2256      41000000 
 2256      17000000 
 2256      53415645 
 2256      00000000 
 2257 0224 1C020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2257      40000000 
 2257      17000000 
 2257      52554E00 
 2258 0234 30020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2258      3F000000 
 2258      15000000 
 2258      52534849 
 2258      46540000 
 2259 0248 40020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2259      3E000000 
 2259      15000000 
 2259      524E4400 
 2260 0258 54020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2260      3D000000 
 2260      17000000 
 2260      52455455 
 2260      524E0000 
 2261 026c 64020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2261      3C000000 
 2261      17000000 
 2261      52455354 
 2261      4F524500 
 2262 0280 78020000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2262      3B000000 
 2262      17000000 
 2262      52454D00 
 2263 0290 8C020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2263      3A000000 
 2263      15000000 
 2263      52454144 
 2263      00000000 
 2264 02a4 9C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2264      39000000 
 2264      15000000 
 2264      514B4559 
 2264      00000000 
 2265 02b8 B0020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2265      38000000 
 2265      17000000 
 2265      50555400 
 2266 02c8 C4020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2266      37000000 
 2266      17000000 
 2266      50555348 
 2266      00000000 
ARM GAS  tinyBasic.s 			page 62


 2267 02dc D4020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2267      36000000 
 2267      17000000 
 2267      5052494E 
 2267      54000000 
 2268 02f0 E8020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2268      35000000 
 2268      15000000 
 2268      504F5000 
 2269 0300 FC020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2269      34000000 
 2269      17000000 
 2269      504F4B45 
 2269      57000000 
 2270 0314 0C030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2270      33000000 
 2270      17000000 
 2270      504F4B45 
 2270      48000000 
 2271 0328 20030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2271      32000000 
 2271      17000000 
 2271      504F4B45 
 2271      42000000 
 2272 033c 34030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2272      2E000000 
 2272      17000000 
 2272      504D4F44 
 2272      45000000 
 2273 0350 48030000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2273      31000000 
 2273      15000000 
 2273      5045454B 
 2273      57000000 
 2274 0364 5C030000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2274      30000000 
 2274      15000000 
 2274      5045454B 
 2274      48000000 
 2275 0378 70030000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2275      2F000000 
 2275      15000000 
 2275      5045454B 
 2275      42000000 
 2276 038c 84030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2276      2D000000 
 2276      17000000 
 2276      50415553 
 2276      45000000 
 2277 03a0 98030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2277      2C000000 
 2277      15000000 
 2277      50414400 
 2278 03b0 AC030000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2278      01000000 
 2278      18000000 
 2278      4F555450 
ARM GAS  tinyBasic.s 			page 63


 2278      55545F50 
 2279 03c8 BC030000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2279      06000000 
 2279      18000000 
 2279      4F555450 
 2279      55545F4F 
 2280 03e0 D4030000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2280      0A000000 
 2280      18000000 
 2280      4F555450 
 2280      55545F41 
 2281 03f8 EC030000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2281      0E000000 
 2281      18000000 
 2281      4F555450 
 2281      55545F41 
 2282 0410 04040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2282      2B000000 
 2282      17000000 
 2282      4F555400 
 2283 0420 1C040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2283      2A000000 
 2283      15000000 
 2283      4F520000 
 2284 0430 2C040000 	  _dict_entry TK_SCONST,ON,1
 2284      01000000 
 2284      18000000 
 2284      4F4E0000 
 2285 0440 3C040000 	  _dict_entry TK_SCONST,OFF,0 
 2285      00000000 
 2285      18000000 
 2285      4F464600 
 2286 0450 4C040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2286      29000000 
 2286      15000000 
 2286      4E4F5400 
 2287 0460 5C040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2287      28000000 
 2287      17000000 
 2287      4E455854 
 2287      00000000 
 2288 0474 6C040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2288      27000000 
 2288      17000000 
 2288      4E455700 
 2289 0484 80040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2289      26000000 
 2289      15000000 
 2289      4C534849 
 2289      46540000 
 2290 0498 90040000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2290      25000000 
 2290      17000000 
 2290      4C4F4341 
 2290      54450000 
 2291 04ac A4040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2291      24000000 
ARM GAS  tinyBasic.s 			page 64


 2291      17000000 
 2291      4C4F4144 
 2291      00000000 
 2292 04c0 B8040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2292      23000000 
 2292      17000000 
 2292      4C495354 
 2292      00000000 
 2293 04d4 CC040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2293      22000000 
 2293      17000000 
 2293      4C455400 
 2294 04e4 E0040000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2294      21000000 
 2294      16000000 
 2294      4B455900 
 2295 04f4 F0040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2295      20000000 
 2295      15000000 
 2295      494E5645 
 2295      52540000 
 2296 0508 00050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2296      11000000 
 2296      18000000 
 2296      494E5055 
 2296      545F5055 
 2297 0520 14050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2297      10000000 
 2297      18000000 
 2297      494E5055 
 2297      545F5044 
 2298 0538 2C050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2298      04000000 
 2298      18000000 
 2298      494E5055 
 2298      545F464C 
 2299 0550 44050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2299      00000000 
 2299      18000000 
 2299      494E5055 
 2299      545F414E 
 2300 0568 5C050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2300      1F000000 
 2300      17000000 
 2300      494E5055 
 2300      54000000 
 2301 057c 74050000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2301      1E000000 
 2301      15000000 
 2301      494E0000 
 2302 058c 88050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2302      1D000000 
 2302      17000000 
 2302      49460000 
 2303 059c 98050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2303      1C000000 
 2303      17000000 
ARM GAS  tinyBasic.s 			page 65


 2303      48455800 
 2304 05ac A8050000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2304      00100140 
 2304      18000000 
 2304      4750494F 
 2304      43000000 
 2305 05c0 B8050000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2305      000C0140 
 2305      18000000 
 2305      4750494F 
 2305      42000000 
 2306 05d4 CC050000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2306      00080140 
 2306      18000000 
 2306      4750494F 
 2306      41000000 
 2307 05e8 E0050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2307      1B000000 
 2307      17000000 
 2307      474F544F 
 2307      00000000 
 2308 05fc F4050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2308      1A000000 
 2308      17000000 
 2308      474F5355 
 2308      42000000 
 2309 0610 08060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2309      19000000 
 2309      15000000 
 2309      47455400 
 2310 0620 1C060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2310      18000000 
 2310      15000000 
 2310      46524545 
 2310      00000000 
 2311 0634 2C060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2311      17000000 
 2311      17000000 
 2311      464F5247 
 2311      45540000 
 2312 0648 40060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2312      16000000 
 2312      17000000 
 2312      464F5200 
 2313 0658 54060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2313      15000000 
 2313      17000000 
 2313      45524153 
 2313      45000000 
 2314 066c 64060000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2314      14000000 
 2314      17000000 
 2314      454E4400 
 2315 067c 78060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2315      13000000 
 2315      17000000 
 2315      44554D50 
ARM GAS  tinyBasic.s 			page 66


 2315      00000000 
 2316 0690 88060000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2316      12000000 
 2316      17000000 
 2316      44524F50 
 2316      00000000 
 2317 06a4 9C060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2317      11000000 
 2317      17000000 
 2317      444F0000 
 2318 06b4 B0060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2318      10000000 
 2318      17000000 
 2318      44495200 
 2319 06c4 C0060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2319      0F000000 
 2319      17000000 
 2319      44454300 
 2320 06d4 D0060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2320      0E000000 
 2320      17000000 
 2320      44415441 
 2320      00000000 
 2321 06e8 E0060000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2321      0D000000 
 2321      17000000 
 2321      434F4E53 
 2321      54000000 
 2322 06fc F4060000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2322      0C000000 
 2322      17000000 
 2322      434C5300 
 2323 070c 08070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2323      0B000000 
 2323      16000000 
 2323      43484152 
 2323      00000000 
 2324 0720 18070000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2324      0A000000 
 2324      17000000 
 2324      42544F47 
 2324      4C000000 
 2325 0734 2C070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2325      09000000 
 2325      15000000 
 2325      42544553 
 2325      54000000 
 2326 0748 40070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2326      08000000 
 2326      17000000 
 2326      42534554 
 2326      00000000 
 2327 075c 54070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2327      07000000 
 2327      17000000 
 2327      42524553 
 2327      00000000 
ARM GAS  tinyBasic.s 			page 67


 2328 0770 68070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2328      06000000 
 2328      15000000 
 2328      42495400 
 2329 0780 7C070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2329      05000000 
 2329      17000000 
 2329      41575500 
 2330 0790 8C070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2330      04000000 
 2330      15000000 
 2330      41534300 
 2331 07a0 9C070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2331      03000000 
 2331      15000000 
 2331      414E4400 
 2332 07b0 AC070000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2332      02000000 
 2332      17000000 
 2332      41444300 
 2333 07c0 BC070000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2333      01000000 
 2333      15000000 
 2333      414E4100 
 2334              	first_link: 
 2335 07d0 CC070000 	  .word LINK 
 2336 07d4 00000000 	  .word ABS_IDX 
 2337 07d8 15000000 	  .word TK_IFUNC
 2338              	kword_dict: // first name field 
 2339              	  .equ LINK,. 
 2340 07dc 41425300 	  .asciz "ABS" 
 2341              	  .p2align 2 
 2342              	
 2343              	    .section .rodata.fn_tabld 
 2344              	
 2345              	//comands and fonctions address table
 2346              	  .type fn_table, %object
 2347              	fn_table:
 2348 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,awu,bitmask 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2349 001c 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2349      00000000 
 2349      00000000 
 2349      00000000 
 2349      00000000 
 2350 0038 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2351 0050 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2351      00000000 
 2351      00000000 
 2351      00000000 
ARM GAS  tinyBasic.s 			page 68


 2351      00000000 
 2352 0070 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2353 0088 00000000 		.word let,list,load,locate,lshift,new,next
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2354 00a4 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2355 00c8 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2356 00e4 00000000 		.word qkey,read,skip_line
 2356      00000000 
 2356      00000000 
 2357 00f0 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_pos 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2358 0110 00000000 		.word sleep,spc,step,stop,store,tab
 2358      00000000 
 2358      00000000 
 2358      00000000 
 2358      00000000 
 2359 0128 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2360 014c 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2361 0160 00000000 		.word 0 
 2362              	
 2363              	
 2364              	/**********************************
 2365              	    BASIC commands and functions 
 2366              	**********************************/
 2367              	
 2368              	    .section .text.basic , "ax", %progbits 
 2369              	
 2370              	
 2371              	/*******************************
 2372              	  BASIC:  ABS expr 
 2373              	  input:
ARM GAS  tinyBasic.s 			page 69


 2374              	    none 
 2375              	  output:
 2376              	    r0    token type 
 2377              	    r1    abs(expr)
 2378              	  use:
 2379              	    none 
 2380              	******************************/
 2381              	    _FUNC abs 
 2382 0000 00B5FFF7 	    _CALL arg_list
 2382      FEFF5DF8 
 2382      04EB
 2383 000a 0128     	    cmp r0,#1 
 2384 000c 01D0     	    beq 1f 
 2385 000e FFF7FEBF 	    b syntax_error 
 2386 0012 5CF8041B 	1:  _POP r1 
 2387 0016 11F0004F 	    tst r1,#(1<<31)
 2388 001a 01D0     	    beq 9f
 2389 001c C1F10001 	    rsb r1,#0 
 2390 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2391 0024 7047     	   _RET 
 2392              	
 2393 0026 00BF     	    _FUNC power_adc
 2394 0028 7047     	    _RET
 2395              	
 2396              	/*************************************
 2397              	  BASIC: ANA(pin)
 2398              	  read analog input 
 2399              	*************************************/
 2400 002a 00BF     	    _FUNC analog_read
 2401 002c 00B5FFF7 	    _CALL func_args
 2401      FEFF5DF8 
 2401      04EB
 2402 0036 0128     	    cmp r0,#1 
 2403 0038 7FF4FEAF 	    bne syntax_error 
 2404 003c 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2404      C4F20101 
 2405 0044 5CF8042B 	    _POP r2 // channel
 2406 0048 02F01F02 	    and r2,#31
 2407 004c 4A63     	    str r2,[r1,#ADC_SQR3]
 2408              	// start conversion 
 2409 004e 8868     	    ldr r0,[r1,#ADC_CR2]
 2410 0050 8860     	    str r0,[r1,#ADC_CR2]
 2411              	adc_loop:
 2412 0052 0868     	    ldr r0,[R1,#ADC_SR]
 2413 0054 10F0020F 	    tst r0,#2 // EOC bit test 
 2414 0058 FBD0     	    beq adc_loop
 2415 005a C96C     	    ldr r1,[r1,#ADC_DR]
 2416 005c 4FF01B00 	    mov r0,#TK_INTGR    
 2417 0060 7047     	    _RET
 2418              	
 2419              	/***********************************
 2420              	  BASIC: ADC ON|OFF
 2421              	  enable|disable analog digital converter 
 2422              	  freq -> of conversion
 2423              	*****************************************/
 2424 0062 00BF     	    _FUNC adc 
 2425 0064 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 70


 2425      FEFF5DF8 
 2425      04EB
 2426 006e 0128     	    cmp r0,#1 
 2427 0070 7FF4FEAF 	    bne syntax_error 
 2428 0074 5CF8041B 	    _POP r1 
 2429 0078 89B1     	1:  cbz r1,adc_off 
 2430              	adc_on:
 2431 007a 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2431      C4F20201 
 2432 0082 8869     	    ldr r0,[r1,RCC_APB2ENR]
 2433 0084 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2434 0088 8861     	    str r0,[r1,RCC_APB2ENR]
 2435 008a 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2435      C4F20101 
 2436 0092 4FF00100 	    _MOV32 r0,1+(1<<23)
 2436      C0F28100 
 2437 009a 8860     	    str r0,[r1,ADC_CR2]
 2438 009c 7047     	    _RET 
 2439              	adc_off:
 2440 009e 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2440      C4F20101 
 2441 00a6 80EA0000 	    eor r0,r0 
 2442 00aa 8860     	    str r0,[r1,ADC_CR2]
 2443 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2443      C4F20201 
 2444 00b4 8869     	    ldr r0,[r1,RCC_APB2ENR]
 2445 00b6 6FF00902 	    mvn r2,#9 
 2446 00ba 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2447 00be 8861     	    str r0,[r1,RCC_APB2ENR]
 2448 00c0 7047     	    _RET 
 2449              	
 2450              	
 2451              	/************************************
 2452              	  BASIC: AND(expr1,expr2)
 2453              	  logical ANND bit to between expr1,expr2
 2454              	************************************/
 2455 00c2 00BF     	    _FUNC bit_and
 2456 00c4 00B5FFF7 	    _CALL func_args 
 2456      FEFF5DF8 
 2456      04EB
 2457 00ce 0228     	    cmp r0,#2 
 2458 00d0 7FF4FEAF 	    bne syntax_error 
 2459 00d4 5CF8040B 	    _POP r0 
 2460 00d8 5CF8041B 	    _POP r1 
 2461 00dc 01EA0001 	    and r1,r0 
 2462 00e0 4FF01B00 	    mov r0,#TK_INTGR
 2463 00e4 7047     	    _RET
 2464              	
 2465              	/*******************************************
 2466              	  BASIC: ASC(string|char)
 2467              	  return ASCII code of char of first char 
 2468              	  of string 
 2469              	*******************************************/
 2470 00e6 00BF     	    _FUNC ascii
 2471 00e8 4FF00500 	    mov r0,#TK_LPAREN 
 2472 00ec 00B5FFF7 	    _CALL expect 
 2472      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 71


 2472      04EB
 2473 00f6 00B5FFF7 	    _CALL next_token 
 2473      FEFF5DF8 
 2473      04EB
 2474 0100 1C28     	    cmp r0,#TK_QSTR
 2475 0102 0AD0     	    beq 2f 
 2476 0104 1328     	    cmp r0,#TK_CHAR 
 2477 0106 00D1     	    bne 1f  
 2478 0108 08E0     	    b 9f
 2479 010a 1628     	1:  cmp r0,#TK_CFUNC 
 2480 010c 0846     	    mov r0,r1 
 2481 010e 00B5FFF7 	    _CALL execute
 2481      FEFF5DF8 
 2481      04EB
 2482 0118 00E0     	    b 9f      
 2483 011a 0978     	2:  ldrb r1,[r1]
 2484 011c 4CF8041D 	9:  _PUSH r1 
 2485 0120 4FF00600 	    mov r0,#TK_RPAREN 
 2486 0124 00B5FFF7 	    _CALL expect 
 2486      FEFF5DF8 
 2486      04EB
 2487 012e 4FF01B00 	    mov r0,#TK_INTGR 
 2488 0132 5CF8041B 	    _POP r1 
 2489 0136 7047     	    _RET
 2490              	
 2491              	    _FUNC autorun
 2492 0138 7047     	    _RET
 2493              	
 2494              	/*******************************************
 2495              	  BASIC: AWU time_sleep  
 2496              	  enable LSI and IWDG and place MCU in 
 2497              	  deep sleep. IDWG wakeup MCU 
 2498              	******************************************/
 2499 013a 00BF     	    _FUNC awu
 2500 013c 00B5FFF7 	    _CALL arg_list
 2500      FEFF5DF8 
 2500      04EB
 2501 0146 0128     	    cmp r0,#1 
 2502 0148 7FF4FEAF 	    bne syntax_error 
 2503 014c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2503      C4F20201 
 2504 0154 486A     	    ldr r0,[r1,#RCC_CSR]
 2505              	// enable LSI 
 2506 0156 80F00100 	    eor r0,#1
 2507 015a 4862     	    str r0,[r1,#RCC_CSR]
 2508              	// wait for LSIRDY 
 2509 015c 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2510 015e 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2511 0162 FBD0     	    beq 1b 
 2512              	// configure IWDG
 2513              	// compute values for IWDG_PR and IWDG_RLR 
 2514 0164 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2515 0168 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2516 016c 03FB02F2 	    mul r2,r3 
 2517 0170 83EA0303 	    eor r3,r3
 2518 0174 B2F5005F 	2:  cmp r2,#8192 
 2519 0178 04D4     	    bmi 3f 
ARM GAS  tinyBasic.s 			page 72


 2520 017a 4FEA5202 	    lsr r2,#1 
 2521 017e 03F10103 	    add r3,#1
 2522 0182 F7E7     	    b 2b
 2523              	// initialize IWDG      
 2524 0184 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2524      C4F20001 
 2525 018c 45F25550 	    mov r0,0x5555 // enable register writing
 2526 0190 0860     	    str r0,[r1,#IWDG_KR]
 2527 0192 4B60     	    str r3,[r1,#IWDG_PR]
 2528 0194 8A60     	    str r2,[r1,#IWDG_RLR]
 2529 0196 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2530 019a 0860     	    str r0,[r1,#IWDG_KR]
 2531 019c 00F0D4BF 	    b sleep // place MCU in deep sleep
 2532 01a0 7047     	    _RET
 2533              	
 2534              	/********************************************
 2535              	  BASIC: BIT(expr)
 2536              	  expr must be between 0..31 and is used 
 2537              	  to create 1 bit mask at that position
 2538              	*******************************************/
 2539 01a2 00BF     	    _FUNC bitmask
 2540 01a4 00B5FFF7 	    _CALL func_args
 2540      FEFF5DF8 
 2540      04EB
 2541 01ae 0128     	    cmp r0,#1 
 2542 01b0 7FF4FEAF 	    bne syntax_error 
 2543 01b4 5CF8040B 	    _POP r0
 2544 01b8 4FF00101 	    mov r1,#1
 2545 01bc 01FA00F1 	    lsl r1,r0 
 2546 01c0 4FF01B00 	9:  mov r0,#TK_INTGR
 2547 01c4 7047     	    _RET 
 2548              	
 2549              	  
 2550              	  /*********************************
 2551              	   BASIC: BRES adr, mask   
 2552              	   reset bits [adr]= [adr] & ~mask  
 2553              	   input:
 2554              	     none 
 2555              	    output;
 2556              	      none 
 2557              	    use:
 2558              	      T1   temp
 2559              	      T2   temp 
 2560              	*******************************/     
 2561 01c6 00BF     	  _FUNC bit_reset
 2562 01c8 00B5FFF7 	    _CALL arg_list 
 2562      FEFF5DF8 
 2562      04EB
 2563 01d2 0228     	    cmp r0,#2 
 2564 01d4 01D0     	    beq 1f 
 2565 01d6 FFF7FEBF 	    b syntax_error 
 2566 01da 5CF8041B 	1:  _POP r1 //mask 
 2567 01de 5CF8040B 	    _POP r0 //address 
 2568 01e2 D0F80090 	    ldr T2,[r0] 
 2569 01e6 81F0FF31 	    eor r1,#-1 // ~mask 
 2570 01ea 01EA0901 	    and r1,T2
 2571 01ee 0160     	    str r1,[r0]
ARM GAS  tinyBasic.s 			page 73


 2572 01f0 7047     	    _RET  
 2573              	
 2574              	
 2575              	/*********************************
 2576              	   BASIC: BSET adr, mask   
 2577              	   reset bits [adr]= [adr] & ~mask  
 2578              	   input:
 2579              	      none 
 2580              	    output;
 2581              	      none 
 2582              	    use:
 2583              	      T1   temp
 2584              	      T2   temp  
 2585              	*******************************/     
 2586 01f2 00BF     	    _FUNC bit_set
 2587 01f4 00B5FFF7 	    _CALL arg_list 
 2587      FEFF5DF8 
 2587      04EB
 2588 01fe 0228     	    cmp r0,#2 
 2589 0200 01D0     	    beq 1f 
 2590 0202 FFF7FEBF 	    b syntax_error 
 2591 0206 5CF8041B 	1:  _POP r1 //mask 
 2592 020a 5CF8040B 	    _POP r0 //address 
 2593 020e D0F80090 	    ldr T2,[r0] 
 2594 0212 41EA0901 	    orr r1,T2
 2595 0216 0160     	    str r1,[r0]
 2596 0218 7047     	    _RET 
 2597              	
 2598              	  /*********************************
 2599              	   BASIC: BTOGL adr, mask   
 2600              	   reset bits [adr]= [adr] & ~mask  
 2601              	   input:
 2602              	     r0    adr 
 2603              	     r1    mask 
 2604              	    output;
 2605              	      none 
 2606              	    use:
 2607              	      T1   temp
 2608              	      T2   temp  
 2609              	*******************************/     
 2610 021a 00BF     	  _FUNC bit_toggle
 2611 021c 00B5FFF7 	    _CALL arg_list 
 2611      FEFF5DF8 
 2611      04EB
 2612 0226 0228     	    cmp r0,#2 
 2613 0228 01D0     	    beq 1f 
 2614 022a FFF7FEBF 	    b syntax_error 
 2615 022e 5CF8041B 	1:  _POP r1 //mask 
 2616 0232 5CF8040B 	    _POP r0 //address 
 2617 0236 D0F80090 	    ldr T2,[r0] 
 2618 023a 81EA0901 	    eor r1,T2
 2619 023e 0160     	    str r1,[r0]
 2620 0240 7047     	    _RET  
 2621              	
 2622              	/********************************
 2623              	  BASIC: BTEST(addr,bit)
 2624              	  return bit state at address
ARM GAS  tinyBasic.s 			page 74


 2625              	********************************/
 2626 0242 00BF     	    _FUNC bit_test
 2627 0244 00B5FFF7 	    _CALL func_args
 2627      FEFF5DF8 
 2627      04EB
 2628 024e 0228     	    cmp r0,#2 
 2629 0250 7FF4FEAF 	    bne syntax_error 
 2630 0254 5CF8041B 	    _POP r1
 2631 0258 4FF00100 	    mov r0,#1
 2632 025c 01F01F01 	    and r1,#31  
 2633 0260 21B1     	1:  cbz r1, 2f
 2634 0262 4FEA4000 	    lsl r0,#1
 2635 0266 A1F10101 	    sub r1,#1
 2636 026a F9E7     	    b 1b 
 2637 026c 5CF8041B 	2:  _POP r1
 2638 0270 0968     	    ldr r1,[r1]
 2639 0272 01EA0001 	    and r1,r0 
 2640 0276 09B1     	    cbz r1,9f 
 2641 0278 4FF00101 	    mov r1,#1
 2642 027c 4FF01B00 	9:  mov r0,#TK_INTGR    
 2643 0280 7047     	    _RET 
 2644              	
 2645              	/********************************
 2646              	  BASIC: CLS 
 2647              	  clear terminal screen move cursor 
 2648              	  home 
 2649              	************************************/
 2650 0282 00BF     	    _FUNC cls 
 2651 0284 00B5FFF7 	    _CALL clear_screen
 2651      FEFF5DF8 
 2651      04EB
 2652 028e 7047     	    _RET 
 2653              	
 2654              	/*********************************
 2655              	  BASIC: CHAR(expr)
 2656              	  convert expr in character 
 2657              	********************************/
 2658              	    _FUNC char
 2659 0290 00B5FFF7 	    _CALL func_args
 2659      FEFF5DF8 
 2659      04EB
 2660 029a 0128     	    cmp r0,#1
 2661 029c 7FF4FEAF 	    bne syntax_error 
 2662 02a0 5CF8041B 	    _POP r1 
 2663 02a4 01F07F01 	    and r1,#127 
 2664 02a8 4FF01300 	    mov r0,#TK_CHAR
 2665 02ac 7047     	    _RET 
 2666              	
 2667              	/**********************************
 2668              	  BASIC: CONST label=expr [,!label=expr]
 2669              	  define constants constants are 
 2670              	  store at end of BASIC code.
 2671              	  use:
 2672              	    T1   *location 
 2673              	    T2   *bound 
 2674              	*********************************/
 2675 02ae 00BF     	    _FUNC const
ARM GAS  tinyBasic.s 			page 75


 2676 02b0 206C10F0 	    _RTO 
 2676      010F03D1 
 2676      4FF00700 
 2676      FFF7FEBF 
 2677 02c0 D4F8D080 	    ldr T1,[UPP,#HERE]
 2678 02c4 DFF8F896 	    ldr T2,pad_adr  
 2679 02c8 C845     	1:  cmp T1,T2 
 2680 02ca 03D4     	    bmi 2f 
 2681 02cc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2682 02d0 FFF7FEBF 	    b tb_error 
 2683 02d4 00B5FFF7 	2:  _CALL next_token 
 2683      FEFF5DF8 
 2683      04EB
 2684 02de 1A28     	    cmp r0,#TK_LABEL 
 2685 02e0 7FF4FEAF 	    bne syntax_error 
 2686 02e4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2687 02e8 4CF8041D 	    _PUSH r1 
 2688 02ec 4FF00D00 	    mov r0,#TK_EQUAL
 2689 02f0 00B5FFF7 	    _CALL expect
 2689      FEFF5DF8 
 2689      04EB
 2690 02fa 00B5FFF7 	    _CALL expression  
 2690      FEFF5DF8 
 2690      04EB
 2691 0304 1B28     	    cmp r0,#TK_INTGR
 2692 0306 7FF4FEAF 	    bne syntax_error
 2693 030a 5CF8040B 	    _POP r0 
 2694 030e 48F8040B 	    str r0,[T1],#4
 2695 0312 48F8041B 	    str r1,[T1],#4 
 2696 0316 C4F8D080 	    str T1,[UPP,#HERE]
 2697 031a 00B5FFF7 	    _CALL next_token
 2697      FEFF5DF8 
 2697      04EB
 2698 0324 0228     	    cmp r0,#TK_COMMA 
 2699 0326 CFD0     	    beq 1b 
 2700 0328 D4F800A0 	    _UNGET_TOKEN
 2700      D4F808B0 
 2701              	9:  
 2702 0330 7047     	    _RET 
 2703              	
 2704              	/*****************************
 2705              	  BASIC: READ 
 2706              	  read next data item 
 2707              	  the value can be assigned to
 2708              	  variable or used in expression
 2709              	*****************************/
 2710 0332 00BF     	    _FUNC read
 2711 0334 206C10F0 	    _RTO
 2711      010F03D1 
 2711      4FF00700 
 2711      FFF7FEBF 
 2712 0344 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2713 0346 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2714 0348 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2715 034a 8242     	    cmp r2,r0
 2716 034c 18D0     	    beq seek_next
 2717 034e 4FF00103 	1:  mov r3,#1 
ARM GAS  tinyBasic.s 			page 76


 2718 0352 885C     	    ldrb r0,[r1,r2]
 2719 0354 02F10102 	    add r2,#1
 2720 0358 0028     	    cmp r0,#TK_NONE
 2721 035a 11D0     	    beq seek_next
 2722 035c 0828     	    cmp r0,#TK_MINUS 
 2723 035e 05D1     	    bne 2f 
 2724 0360 4FF0FF33 	    mov r3,#-1
 2725 0364 885C     	    ldrb r0,[r1,r2]
 2726 0366 02F10102 	    add r2,#1
 2727 036a 01E0     	    b 3f  
 2728 036c 0228     	2:  cmp r0,#TK_COMMA
 2729 036e EED0     	    beq 1b  
 2730 0370 1B28     	3:  cmp r0,#TK_INTGR 
 2731 0372 7FF4FEAF 	    bne syntax_error  
 2732 0376 8958     	    ldr r1,[r1,r2]
 2733 0378 02F10402 	    add r2,#4
 2734 037c 2261     	    str r2,[UPP,#DATA]
 2735 037e 12E0     	    b 9f  
 2736              	seek_next: // is next line data ?
 2737 0380 8878     	    ldrb r0,[R1,#2]
 2738 0382 0144     	    add r1,r0 
 2739 0384 C878     	    ldrb r0,[R1,#3]
 2740 0386 1728     	    cmp r0,#TK_CMD
 2741 0388 09D1     	    bne 2f 
 2742 038a 0879     	    ldrb r0,[r1,#4]
 2743 038c 0E28     	    cmp r0,#DATA_IDX 
 2744 038e 06D1     	    bne 2f 
 2745 0390 E160     	    str r1,[UPP,#DATAPTR]
 2746 0392 8878     	    ldrb r0,[r1,#2]
 2747 0394 6061     	    str  r0,[UPP,#DATALEN]
 2748 0396 4FF00502 	    mov r2,#5 
 2749 039a 2261     	    str r2,[UPP,#DATA]
 2750 039c D7E7     	    b 1b 
 2751 039e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2752 03a2 FFF7FEBF 	    b tb_error 
 2753 03a6 7047     	9:  _RET 
 2754              	
 2755              	/********************************
 2756              	  BASIC: RESTORE [line#]
 2757              	  set data pointer to first data line 
 2758              	  or a specified line number 
 2759              	********************************/
 2760              	    _FUNC restore
 2761 03a8 206C10F0 	    _RTO 
 2761      010F03D1 
 2761      4FF00700 
 2761      FFF7FEBF 
 2762 03b8 00B5FFF7 	    _CALL next_token 
 2762      FEFF5DF8 
 2762      04EB
 2763 03c2 1B28     	    cmp r0,#TK_INTGR 
 2764 03c4 05D0     	    beq 0f 
 2765 03c6 D4F800A0 	    _UNGET_TOKEN
 2765      D4F808B0 
 2766 03ce 4FF00001 	    mov r1,#0 
 2767 03d2 40F61763 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2768 03d6 0A46     	    mov r2,r1 
ARM GAS  tinyBasic.s 			page 77


 2769 03d8 216B     	    ldr r1,[UPP,#TXTBGN]
 2770 03da D4F83480 	    ldr T1,[UPP,#TXTEND]
 2771 03de 4145     	1:  cmp r1,T1 
 2772 03e0 11D5     	    bpl no_data_line 
 2773 03e2 B1F80300 	    ldrh r0,[r1,#3]
 2774 03e6 9842     	    cmp r0,r3 
 2775 03e8 0AD1     	    bne try_next_line
 2776              	// this is a data line
 2777 03ea 12B1     	    cbz r2,2f 
 2778 03ec 0888     	    ldrh r0,[r1]
 2779 03ee 9042     	    cmp r0,r2 
 2780 03f0 06D1     	    bne try_next_line
 2781 03f2 E160     	2:  str r1,[UPP,#DATAPTR]
 2782 03f4 8878     	    ldrb r0,[r1,#2]
 2783 03f6 6061     	    str r0,[UPP,#DATALEN]
 2784 03f8 4FF00500 	    mov r0,#5 
 2785 03fc 2061     	    str r0,[UPP,#DATA]
 2786 03fe 07E0     	    b 9f
 2787              	try_next_line:
 2788 0400 8878     	    ldrb r0,[r1,#2]
 2789 0402 0144     	    add r1,r0 
 2790 0404 EBE7     	    b 1b 
 2791              	no_data_line:
 2792 0406 80EA0000 	    eor r0,r0 
 2793 040a E060     	    str r0,[UPP,#DATAPTR]
 2794 040c 2061     	    str r0,[UPP,#DATA]
 2795 040e 6061     	    str r0,[UPP,#DATALEN]
 2796 0410 7047     	9:  _RET 
 2797              	
 2798              	/***********************************
 2799              	  BASIC: DEC 
 2800              	  switch base to decimal 
 2801              	***********************************/
 2802 0412 00BF     	    _FUNC dec_base
 2803 0414 4FF00A00 	    mov r0,#10
 2804 0418 A061     	    str r0,[UPP,#BASE]
 2805 041a 7047     	    _RET 
 2806              	
 2807              	/***************************************
 2808              	  BASIC: DO 
 2809              	  initialize a DO..UNTIL loop 
 2810              	***************************************/
 2811              	    _FUNC do_loop
 2812 041c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2813 0420 7047     	    _RET 
 2814              	
 2815              	
 2816              	/****************************************
 2817              	  BASIC: DUMP adr, count 
 2818              	    command line only  
 2819              	    print memory content in hexadecimal 
 2820              	    16 bytes per row 
 2821              	    ouput:
 2822              	      none 
 2823              	    use:
 2824              	      r2   byte counter  
 2825              	****************************************/
ARM GAS  tinyBasic.s 			page 78


 2826 0422 00BF     	    _FUNC dump 
 2827 0424 206C10F0 	    _CLO 
 2827      010F03D0 
 2827      4FF00700 
 2827      FFF7FEBF 
 2828 0434 00B5FFF7 	    _CALL arg_list 
 2828      FEFF5DF8 
 2828      04EB
 2829 043e 0228     	    cmp r0,#2
 2830 0440 7FF4FEAF 	    bne syntax_error 
 2831 0444 5CF8042B 	    _POP r2   // count 
 2832 0448 5CF8040B 	    _POP  r0  // adr
 2833              	dump01:
 2834 044c 00B500F0 	    _CALL print_dump_header 
 2834      0DF85DF8 
 2834      04EB
 2835 0456 4FF01001 	1:  mov r1,#16
 2836 045a 00B5FFF7 	    _CALL prt_row 
 2836      FEFF5DF8 
 2836      04EB
 2837 0464 103A     	    subs r2,#16 
 2838 0466 F6D5     	    bpl 1b 
 2839 0468 7047     	    _RET 
 2840              	
 2841              	/********************************
 2842              	   print_dump_header
 2843              	********************************/
 2844 046a 00BF     	    _FUNC print_dump_header
 2845 046c 2DE90103 	    push {r0,T1,T2}
 2846 0470 4FF00C00 	    mov r0,#12 
 2847 0474 00B5FFF7 	    _CALL cursor_x 
 2847      FEFF5DF8 
 2847      04EB
 2848 047e 4FF00000 	    mov r0,#0
 2849 0482 4FF01009 	    mov T2,#16
 2850 0486 8046     	1:  mov T1,r0 
 2851 0488 00B5FFF7 	    _CALL print_hex 
 2851      FEFF5DF8 
 2851      04EB
 2852 0492 08F10100 	    add r0,T1,#1  
 2853 0496 4845     	    cmp r0,T2 
 2854 0498 F5D4     	    bmi 1b 
 2855 049a 00B5FFF7 	    _CALL cr
 2855      FEFF5DF8 
 2855      04EB
 2856 04a4 4FF03D00 	    mov r0,#'='
 2857 04a8 4FF04F08 	    mov T1,#79
 2858 04ac 00B5FFF7 	2:  _CALL uart_putc
 2858      FEFF5DF8 
 2858      04EB
 2859 04b6 B8F10108 	    subs T1,#1 
 2860 04ba F7D1     	    bne 2b     
 2861 04bc 00B5FFF7 	    _CALL cr
 2861      FEFF5DF8 
 2861      04EB
 2862 04c6 BDE80103 	    pop {r0,T1,T2}
 2863 04ca 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 79


 2864              	
 2865              	
 2866              	/*******************************
 2867              	  BASIC: END 
 2868              	  exit program 
 2869              	******************************/ 
 2870              	    _FUNC cmd_end
 2871 04cc FFF7FEBF 	    b warm_start 
 2872 04d0 7047     	    _RET 
 2873              	
 2874              	/*******************************************
 2875              	  BASIC: STORE adr, value 
 2876              	  write value to user space in flash memory 
 2877              	*********************************************/
 2878 04d2 00BF     	    _FUNC store 
 2879 04d4 00B5FFF7 	    _CALL arg_list 
 2879      FEFF5DF8 
 2879      04EB
 2880 04de 0228     	    cmp r0,#2 
 2881 04e0 7FF4FEAF 	    bne syntax_error 
 2882 04e4 BCE80300 	    ldmia DP!,{r0,r1}
 2883 04e8 DFF83020 	    ldr r2,user_space
 2884 04ec 9142     	    cmp r1,r2 
 2885 04ee 03D5     	    bpl 1f 
 2886 04f0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2887 04f4 FFF7FEBF 	    b tb_error 
 2888 04f8 02F58062 	1:  add r2,#1024 
 2889 04fc 9142     	    cmp r1,r2 
 2890 04fe F7D5     	    bpl 0b 
 2891 0500 00B5FFF7 	    _CALL flash_store 
 2891      FEFF5DF8 
 2891      04EB
 2892 050a 7047     	    _RET 
 2893              	
 2894              	/**************************************************
 2895              	  BASIC: ERASE 
 2896              	  erase user space page 
 2897              	*************************************************/
 2898              	    _FUNC erase 
 2899 050c DFF80C00 	    ldr r0,user_space 
 2900 0510 00B5FFF7 	    _CALL erase_page 
 2900      FEFF5DF8 
 2900      04EB
 2901 051a 7047     	    _RET 
 2902 051c 00000000 	user_space: .word user 
 2903              	
 2904              	
 2905              	/**************************************************
 2906              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2907              	  introdure FOR...NEXT loop 
 2908              	**************************************************/
 2909              	    _FUNC for
 2910 0520 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2911 0524 4FF00107 	    mov INCR,#1
 2912 0528 00B5FFF7 	    _CALL next_token
 2912      FEFF5DF8 
 2912      04EB
ARM GAS  tinyBasic.s 			page 80


 2913 0532 1428     	    cmp r0,#TK_VAR
 2914 0534 7FF4FEAF 	    bne syntax_error
 2915 0538 02B4     	    push {r1} 
 2916 053a 00B500F0 	    _CALL let_var 
 2916      2FF95DF8 
 2916      04EB
 2917 0544 20BC     	    pop {VADR}
 2918 0546 4FEA8505 	    lsl VADR,#2
 2919 054a 2544     	    add VADR,UPP 
 2920 054c 05F16005 	    add VADR,#VARS 
 2921 0550 7047     	    _RET 
 2922              	
 2923              	/***************************************
 2924              	  BASIC: TO expr 
 2925              	  set limit of FOR...NEXT loop 
 2926              	**************************************/
 2927 0552 00BF     	    _FUNC to
 2928 0554 00B5FFF7 	    _CALL expression 
 2928      FEFF5DF8 
 2928      04EB
 2929 055e 1B28     	    cmp r0,#TK_INTGR
 2930 0560 7FF4FEAF 	    bne syntax_error 
 2931 0564 0E46     	    mov LIMIT,r1
 2932              	    // save loop back parameters 
 2933 0566 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2934 056a 7047     	    _RET 
 2935              	
 2936              	/********************************************
 2937              	  BASIC: STEP expr 
 2938              	  set increment for FOR...NEXT loop 
 2939              	********************************************/
 2940              	    _FUNC step
 2941 056c 00B5FFF7 	    _CALL expression 
 2941      FEFF5DF8 
 2941      04EB
 2942 0576 1B28     	    cmp r0,#TK_INTGR
 2943 0578 7FF4FEAF 	    bne syntax_error 
 2944 057c 0F46     	    mov INCR,r1
 2945              	    // replace parameters left by TO
 2946 057e 8CE8000C 	    stmia DP, {IN,BPTR}
 2947 0582 7047     	    _RET 
 2948              	
 2949              	/********************************************
 2950              	  BASIC: NEXT var 
 2951              	  incrment FOR...NEXT loop variable
 2952              	  exit if variable cross LIMIT 
 2953              	********************************************/
 2954              	    _FUNC next
 2955 0584 00B5FFF7 	    _CALL next_token 
 2955      FEFF5DF8 
 2955      04EB
 2956 058e 1428     	    cmp r0,#TK_VAR 
 2957 0590 7FF4FEAF 	    bne syntax_error 
 2958 0594 4FEA8101 	    lsl r1,#2 
 2959 0598 2144     	    add r1,UPP 
 2960 059a 01F16001 	    add r1,#VARS 
 2961 059e A942     	    cmp r1,VADR
ARM GAS  tinyBasic.s 			page 81


 2962 05a0 7FF4FEAF 	    bne syntax_error 
 2963 05a4 2868     	    ldr r0,[VADR]
 2964 05a6 3844     	    add r0,INCR 
 2965 05a8 2860     	    str r0,[VADR]
 2966 05aa 002F     	    cmp INCR,#0
 2967 05ac 02D4     	    bmi 2f
 2968 05ae B042     	    cmp r0,LIMIT 
 2969 05b0 02DC     	    bgt 8f  
 2970 05b2 07E0     	    b 9f  
 2971 05b4 B042     	2:  cmp r0,LIMIT 
 2972 05b6 05DA     	    bge 9f  
 2973              	8: // exit for...next
 2974              	  //  drop branch parameters
 2975 05b8 4FF00800 	    _DROP 2
 2975      8444
 2976              	  // restore outer loop parameters
 2977 05be BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2978 05c2 7047     	    _RET 
 2979 05c4 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2980 05c8 9BF80200 	    ldrb r0,[BPTR,#2]
 2981 05cc 6060     	    str r0,[UPP,#COUNT]
 2982 05ce 00B5FFF7 	    _CALL show_trace 
 2982      FEFF5DF8 
 2982      04EB
 2983 05d8 7047     	    _RET 
 2984              	
 2985              	
 2986              	/*********************************
 2987              	  BASIC: GOSUB expr 
 2988              	  call a subroutine at line# 
 2989              	*********************************/
 2990 05da 00BF     	    _FUNC gosub
 2991 05dc 00B5FFF7 	    _CALL search_target 
 2991      FEFF5DF8 
 2991      04EB
 2992 05e6 2DE9000C 	    push {IN,BPTR}
 2993              	target:
 2994 05ea 8346     	    mov BPTR,r0 
 2995 05ec 4FF0030A 	    mov IN,#3 
 2996 05f0 9BF80200 	    ldrb r0,[BPTR,#2]
 2997 05f4 6060     	    str r0,[UPP,#COUNT]
 2998 05f6 00B5FFF7 	    _CALL show_trace 
 2998      FEFF5DF8 
 2998      04EB
 2999 0600 7047     	    _RET 
 3000              	
 3001              	/**********************************
 3002              	  BASIC: RETURN 
 3003              	  leave a subroutine 
 3004              	*********************************/
 3005 0602 00BF     	    _FUNC return 
 3006 0604 BDE8000C 	    pop {IN,BPTR}
 3007 0608 9BF80200 	    ldrb r0,[BPTR,#2]
 3008 060c 6060     	    str r0,[UPP,#COUNT]
 3009 060e 00B5FFF7 	    _CALL show_trace 
 3009      FEFF5DF8 
 3009      04EB
ARM GAS  tinyBasic.s 			page 82


 3010 0618 7047     	    _RET 
 3011              	
 3012              	/**********************************
 3013              	  BASIC: GOTO expr 
 3014              	  go to line # | label 
 3015              	**********************************/
 3016 061a 00BF     	    _FUNC goto
 3017 061c 00B5FFF7 	    _CALL search_target 
 3017      FEFF5DF8 
 3017      04EB
 3018 0626 E0E7     	    b target  
 3019              	
 3020              	/***************************************
 3021              	  BASIC: HEX 
 3022              	  set numeric base to hexadecimal 
 3023              	***************************************/
 3024              	    _FUNC hex_base
 3025 0628 4FF01000 	    mov r0,#16 
 3026 062c A061     	    str r0,[UPP,#BASE]
 3027 062e 7047     	    _RET 
 3028              	
 3029              	/**********************************************
 3030              	  BASIC: IF relation THEN statement
 3031              	  execute statement only if relation is true
 3032              	*********************************************/
 3033              	    _FUNC if
 3034 0630 00B5FFF7 	    _CALL relation 
 3034      FEFF5DF8 
 3034      04EB
 3035 063a 09B9     	    cbnz r1,9f 
 3036 063c D4F804A0 	    ldr IN,[UPP,#COUNT]
 3037 0640 7047     	9:  _RET 
 3038              	
 3039              	/*******************************************************
 3040              	  BASIC: THEN statement
 3041              	  statements following THEN are executed if relation is !=0
 3042              	  optional, retained for compatibility.
 3043              	******************************************************/
 3044 0642 00BF     	    _FUNC then 
 3045              	// do nothing 
 3046 0644 7047     	    _RET
 3047              	
 3048              	/****************************************
 3049              	  BASIC: INPUT [string]var [,[string]var]+
 3050              	  prompt user for variable value
 3051              	  use:
 3052              	    r2   
 3053              	    T1   variable indice 
 3054              	***************************************/
 3055 0646 00BF     	     _FUNC input_var
 3056 0648 2DE90401 	    push {r2,T1}
 3057 064c 00B5FFF7 	1:  _CALL next_token 
 3057      FEFF5DF8 
 3057      04EB
 3058 0656 0228     	    cmp r0,#2
 3059 0658 71D4     	    bmi 8f 
 3060 065a 1C28     	    cmp r0,#TK_QSTR 
ARM GAS  tinyBasic.s 			page 83


 3061 065c 11D1     	    bne 2f 
 3062 065e 0846     	    mov r0,r1
 3063 0660 DFF8EC10 	    ldr r1,str_buffer
 3064 0664 00B5FFF7 	    _CALL strcpy
 3064      FEFF5DF8 
 3064      04EB
 3065 066e 4FF01400 	    mov r0,#TK_VAR   
 3066 0672 00B5FFF7 	    _CALL expect 
 3066      FEFF5DF8 
 3066      04EB
 3067 067c 8846     	    mov T1,r1 
 3068 067e 3448     	    ldr r0,str_buffer 
 3069 0680 08E0     	    b 3f 
 3070 0682 1428     	2:  cmp r0,#TK_VAR 
 3071 0684 7FF4FEAF 	    bne syntax_error     
 3072 0688 8846     	    mov T1,r1 
 3073 068a 01F14100 	    add r0,r1,#'A' 
 3074 068e 3049     	    ldr r1,str_buffer
 3075 0690 0880     	    strh r0,[r1]
 3076 0692 0846     	    mov r0,r1 
 3077 0694 00B5FFF7 	3:  _CALL uart_puts  
 3077      FEFF5DF8 
 3077      04EB
 3078 069e 4FF03D00 	    mov r0,#'='
 3079 06a2 00B5FFF7 	    _CALL uart_putc
 3079      FEFF5DF8 
 3079      04EB
 3080 06ac DFF89C00 	    ldr r0,input_buffer
 3081 06b0 4FF02201 	    mov r1,#34 
 3082 06b4 00B5FFF7 	    _CALL readln
 3082      FEFF5DF8 
 3082      04EB
 3083 06be 79B3     	    cbz r1,6f
 3084 06c0 0178     	    ldrb r1,[r0]
 3085 06c2 01B4     	    push {r0}
 3086 06c4 0846     	    mov r0,r1
 3087 06c6 00B5FFF7 	    _CALL is_letter 
 3087      FEFF5DF8 
 3087      04EB
 3088 06d0 01BC     	    pop {r0}
 3089 06d2 02D1     	    bne 3f 
 3090 06d4 01F05F01 	    and r1,#0x5f // uppercase  
 3091 06d8 24E0     	    b 7f 
 3092 06da 4FF00102 	3:  mov r2,#1
 3093 06de 2D29     	    cmp r1,#'-'
 3094 06e0 04D1     	    bne 3f 
 3095 06e2 4FF0FF32 	    mov r2,#-1 
 3096 06e6 00F10100 	    add r0,#1 
 3097 06ea 0DE0     	    b 4f  
 3098 06ec 2429     	3:  cmp r1,#'$'
 3099 06ee 04D1     	    bne 3f 
 3100 06f0 4FF01001 	    mov r1,#16
 3101 06f4 00F10100 	    add r0,#1  
 3102 06f8 08E0     	    b 5f 
 3103 06fa 2629     	3:  cmp r1,#'&' 
 3104 06fc 04D1     	    bne 4f 
 3105 06fe 4FF00201 	    mov r1,#2
ARM GAS  tinyBasic.s 			page 84


 3106 0702 00F10100 	    add r0,#1 
 3107 0706 01E0     	    b 5f 
 3108 0708 4FF00A01 	4:  mov r1,#10 
 3109 070c 00B5FFF7 	5:  _CALL atoi 
 3109      FEFF5DF8 
 3109      04EB
 3110 0716 18B9     	    cbnz r0,6f
 3111 0718 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3112 071c FFF7FEBF 	    b tb_error
 3113 0720 02FB01F1 	6:  mul r1,r2 
 3114 0724 4046     	7:  mov r0,T1 
 3115 0726 00B5FFF7 	    _CALL set_var
 3115      FEFF5DF8 
 3115      04EB
 3116 0730 00B5FFF7 	    _CALL next_token
 3116      FEFF5DF8 
 3116      04EB
 3117 073a 0228     	    cmp r0,#TK_COMMA 
 3118 073c 86D0     	    beq 1b 
 3119 073e D4F800A0 	8:  _UNGET_TOKEN          
 3119      D4F808B0 
 3120 0746 BDE80401 	9:  pop {r2,T1}       
 3121 074a 7047     	    _RET 
 3122 074c 00000000 	input_buffer: .word _tib 
 3123 0750 00000000 	str_buffer: .word _pad 
 3124              	
 3125              	
 3126              	/*****************************************
 3127              	  BASIC: INVERT(expr)
 3128              	  return 1's complement of expr
 3129              	****************************************/
 3130              	    _FUNC invert
 3131 0754 00B5FFF7 	    _CALL func_args
 3131      FEFF5DF8 
 3131      04EB
 3132 075e 0128     	    cmp r0,#1 
 3133 0760 7FF4FEAF 	    bne syntax_error
 3134 0764 5CF8041B 	    _POP r1  
 3135 0768 6FEA0101 	    mvn r1,r1
 3136 076c 4FF01B00 	    mov r0,#TK_INTGR
 3137 0770 7047     	    _RET 
 3138              	
 3139              	/*************************************
 3140              	  BASIC: KEY 
 3141              	  wait for a character from console
 3142              	*************************************/
 3143 0772 00BF     	    _FUNC key
 3144 0774 00B5FFF7 	    _CALL uart_getc
 3144      FEFF5DF8 
 3144      04EB
 3145 077e 0146     	    mov r1,r0
 3146 0780 4FF01300 	    mov r0,#TK_CHAR 
 3147 0784 7047     	    _RET  
 3148              	
 3149              	/******************************
 3150              	  BASIC: [LET] var=expr 
 3151              	         [LET] @(expr)=expr
ARM GAS  tinyBasic.s 			page 85


 3152              	  input:
 3153              	    none 
 3154              	  output:
 3155              	    none 
 3156              	  use:
 3157              	
 3158              	****************************/         
 3159 0786 00BF     	    _FUNC let
 3160 0788 00B5FFF7 	    _CALL next_token 
 3160      FEFF5DF8 
 3160      04EB
 3161 0792 1428     	    cmp r0,#TK_VAR
 3162 0794 03D0     	    beq let_var 
 3163 0796 0C28     	    cmp r0,#TK_ARRAY 
 3164 0798 07D0     	    beq let_array 
 3165 079a FFF7FEBF 	    b syntax_error 
 3166              	let_var:
 3167 079e 4FEA8101 	    lsl r1,#2
 3168 07a2 04F16000 	    add r0,UPP,#VARS
 3169 07a6 0844     	    add r0,r1
 3170 07a8 1FE0     	    b 1f 
 3171              	let_array: 
 3172 07aa 4FF00500 	    mov r0,#TK_LPAREN
 3173 07ae 00B5FFF7 	    _CALL expect 
 3173      FEFF5DF8 
 3173      04EB
 3174 07b8 00B5FFF7 	    _CALL expression
 3174      FEFF5DF8 
 3174      04EB
 3175 07c2 1B28     	    cmp r0,#TK_INTGR 
 3176 07c4 7FF4FEAF 	    bne syntax_error
 3177 07c8 4CF8041D 	    _PUSH r1 
 3178 07cc 4FF00600 	    mov r0,#TK_RPAREN
 3179 07d0 00B5FFF7 	    _CALL expect 
 3179      FEFF5DF8 
 3179      04EB
 3180 07da 5CF8041B 	    _POP r1 
 3181 07de D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3182 07e2 4FEA8101 	    lsl r1,#2 
 3183 07e6 A0EB0100 	    sub r0,r1 
 3184 07ea 4CF8040D 	1:  _PUSH r0 
 3185 07ee 4FF00D00 	    mov r0,#TK_EQUAL 
 3186 07f2 00B5FFF7 	    _CALL expect 
 3186      FEFF5DF8 
 3186      04EB
 3187 07fc 00B5FFF7 	    _CALL expression   
 3187      FEFF5DF8 
 3187      04EB
 3188 0806 1B28     	    cmp r0,#TK_INTGR
 3189 0808 7FF4FEAF 	    bne syntax_error   
 3190 080c 5CF8040B 	2:  _POP r0 
 3191 0810 0160     	    str r1,[r0]
 3192 0812 7047     	    _RET  
 3193              	
 3194              	/***************************************
 3195              	  BASIC: LIST [[first]-last]
 3196              	  use:
ARM GAS  tinyBasic.s 			page 86


 3197              	    r2   first line# 
 3198              	    r3   last line#
 3199              	    T1   *line 
 3200              	    T2   TXTEND 
 3201              	**************************************/  
 3202              	    _FUNC list
 3203 0814 206C10F0 	    _CLO
 3203      010F03D0 
 3203      4FF00700 
 3203      FFF7FEBF 
 3204 0824 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3205 0828 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3206 082c B8F80020 	    ldrh r2,[T1]
 3207 0830 4FF6FF73 	    mov r3,#65535 
 3208 0834 00B5FFF7 	    _CALL next_token 
 3208      FEFF5DF8 
 3208      04EB
 3209 083e 10B3     	    cbz r0,6f 
 3210 0840 1B28     	    cmp r0,#TK_INTGR
 3211 0842 09D1     	    bne 1f 
 3212 0844 0A46     	    mov r2,r1 // first line
 3213 0846 00B5FFF7 	    _CALL next_token
 3213      FEFF5DF8 
 3213      04EB
 3214 0850 0028     	    cmp r0,#TK_NONE 
 3215 0852 01D1     	    bne 1f 
 3216 0854 1346     	    mov r3,r2 
 3217 0856 0CE0     	    b 4f 
 3218 0858 0828     	1:  cmp r0,#TK_MINUS 
 3219 085a 7FF4FEAF 	    bne syntax_error 
 3220 085e 00B5FFF7 	    _CALL next_token 
 3220      FEFF5DF8 
 3220      04EB
 3221 0868 18B1     	    cbz r0,4f 
 3222 086a 1B28     	    cmp r0,#TK_INTGR
 3223 086c 7FF4FEAF 	    bne syntax_error  
 3224 0870 0B46     	    mov r3,r1 
 3225              	4:  // skip lines below r2 
 3226 0872 B8F80000 	    ldrh r0,[T1]
 3227 0876 9042     	    cmp r0,r2 
 3228 0878 05D5     	    bpl 6f 
 3229 087a 98F80200 	    ldrb r0,[T1,#2]
 3230 087e 8044     	    add T1,r0
 3231 0880 C845     	    cmp T1,T2 
 3232 0882 F6D4     	    bmi 4b
 3233 0884 1AE0     	    b 9f 
 3234 0886 C845     	6:  cmp T1,T2  
 3235 0888 18D5     	    bpl 9f
 3236 088a 4046     	    mov r0,T1   
 3237 088c DFF83010 	    ldr r1,out_buff 
 3238 0890 00B5FFF7 	    _CALL decompile_line 
 3238      FEFF5DF8 
 3238      04EB
 3239 089a 00B5FFF7 	    _CALL uart_puts 
 3239      FEFF5DF8 
 3239      04EB
 3240 08a4 00B5FFF7 	    _CALL cr 
ARM GAS  tinyBasic.s 			page 87


 3240      FEFF5DF8 
 3240      04EB
 3241 08ae 98F80200 	    ldrb r0,[T1,#2]
 3242 08b2 8044     	    add T1,r0
 3243 08b4 B8F80000 	    ldrh r0,[T1]
 3244 08b8 9842     	    cmp r0,r3 
 3245 08ba E4DD     	    ble 6b 
 3246 08bc FFF7FEBF 	9:  b warm_start 
 3247 08c0 00000000 	out_buff: .word _tib 
 3248              	
 3249              	/********************************
 3250              	  BASIC: LOCATE line,col
 3251              	  return log base 2 of expr 
 3252              	********************************/
 3253              	    _FUNC locate
 3254 08c4 00B5FFF7 	    _CALL arg_list 
 3254      FEFF5DF8 
 3254      04EB
 3255 08ce 0228     	    cmp r0,#2 
 3256 08d0 7FF4FEAF 	    bne syntax_error
 3257 08d4 5CF8041B 	    _POP r1
 3258 08d8 5CF8040B 	    _POP r0  
 3259 08dc 00B5FFF7 	    _CALL set_curpos 
 3259      FEFF5DF8 
 3259      04EB
 3260 08e6 7047     	    _RET 
 3261              	
 3262              	
 3263              	/****************************************
 3264              	  BASIC: LSHIFT(expr1,expr2)
 3265              	  shift right expr1 of expr2 bits 
 3266              	****************************************/
 3267              	    _FUNC lshift
 3268 08e8 00B5FFF7 	    _CALL func_args
 3268      FEFF5DF8 
 3268      04EB
 3269 08f2 0228     	    cmp r0,#2
 3270 08f4 7FF4FEAF 	    bne syntax_error 
 3271 08f8 BCE80300 	    ldmia DP!,{r0,r1}
 3272 08fc 01FA00F1 	    lsl r1,r0 
 3273 0900 4FF01B00 	    mov r0,#TK_INTGR
 3274 0904 7047     	    _RET 
 3275              	
 3276              	/***********************************
 3277              	  BASIC: NEW 
 3278              	  delete existing program in memory
 3279              	  and clear variables and RAM 
 3280              	***********************************/
 3281 0906 00BF     	    _FUNC new
 3282 0908 206C10F0 	    _CLO 
 3282      010F03D0 
 3282      4FF00700 
 3282      FFF7FEBF 
 3283 0918 00B5FFF7 	    _CALL clear_basic 
 3283      FEFF5DF8 
 3283      04EB
 3284 0922 FFF7FEBF 	    b warm_start   
ARM GAS  tinyBasic.s 			page 88


 3285              	
 3286              	/************************************
 3287              	  BASIC: NOT relation  
 3288              	  invert logical value or relation
 3289              	************************************/
 3290 0926 00BF     	      _FUNC func_not
 3291 0928 00B5FFF7 	      _CALL relation 
 3291      FEFF5DF8 
 3291      04EB
 3292 0932 11B1     	      cbz r1,8f 
 3293 0934 81EA0101 	      eor r1,r1
 3294 0938 01E0     	      b 9f 
 3295 093a 4FF0FF31 	  8:  mov r1,#-1
 3296 093e 7047     	  9:  _RET 
 3297              	
 3298              	/******************************************
 3299              	  BASIC: OR(expr1,expr2)
 3300              	  binary OR between 2 expressions
 3301              	******************************************/
 3302              	    _FUNC bit_or
 3303 0940 00B5FFF7 	    _CALL func_args
 3303      FEFF5DF8 
 3303      04EB
 3304 094a 0228     	    cmp r0,#2
 3305 094c 7FF4FEAF 	    bne syntax_error
 3306 0950 5CF8040B 	    _POP r0 
 3307 0954 5CF8041B 	    _POP r1
 3308 0958 41EA0001 	    orr r1,r0 
 3309 095c 4FF01B00 	    mov r0,#TK_INTGR
 3310 0960 7047     	    _RET 
 3311              	
 3312              	/****************************************
 3313              	  BASIC: IN(gpio,pin) 
 3314              	  read gpio_idr selected pin  
 3315              	***************************************/
 3316 0962 00BF     	    _FUNC pin_input 
 3317 0964 00B5FFF7 	    _CALL func_args 
 3317      FEFF5DF8 
 3317      04EB
 3318 096e 0228     	    cmp r0,#2 
 3319 0970 7FF4FEAF 	    bne syntax_error  
 3320 0974 BCE80300 	    ldmia DP!,{r0,r1}
 3321 0978 4FF00802 	    mov r2,#GPIO_IDR 
 3322 097c 8A58     	    ldr r2,[r1,r2]
 3323 097e 00F00F00 	    and r0,#15 
 3324 0982 22FA00F2 	    lsr r2,r0 
 3325 0986 02F00101 	    and r1,r2,#1 
 3326 098a 4FF01B00 	    mov r0,#TK_INTGR
 3327 098e 7047     	    _RET 
 3328              	
 3329              	
 3330              	/****************************************
 3331              	  BASIC: OUT gpio,pin,value 
 3332              	   output to gpio_odr
 3333              	***************************************/
 3334              	    _FUNC out
 3335 0990 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 89


 3335      FEFF5DF8 
 3335      04EB
 3336 099a 0328     	    cmp r0,#3 
 3337 099c 7FF4FEAF 	    bne syntax_error 
 3338 09a0 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3339 09a4 08B9     	    cbnz r0,1f 
 3340 09a6 01F11001 	    add r1,#16 
 3341 09aa 4FF00100 	1:  mov r0,#1 
 3342 09ae 00FA01F0 	    lsl r0,r1 
 3343 09b2 1061     	    str r0,[r2,#GPIO_BSRR]    
 3344 09b4 7047     	    _RET 
 3345              	
 3346              	
 3347              	/****************************************
 3348              	  BASIC: PAD 
 3349              	  return pad buffer address 
 3350              	****************************************/
 3351 09b6 00BF     	    _FUNC pad_ref
 3352 09b8 0149     	    ldr r1,pad_adr  
 3353 09ba 4FF01B00 	    mov r0,#TK_INTGR 
 3354 09be 7047     	    _RET 
 3355 09c0 00000000 	pad_adr: .word _pad 
 3356              	
 3357              	/***********************
 3358              	  BASIC: PAUSE expr 
 3359              	  suspend execution for 
 3360              	  expr milliseconds 
 3361              	************************/
 3362              	    _FUNC pause
 3363 09c4 00B5FFF7 	    _CALL expression 
 3363      FEFF5DF8 
 3363      04EB
 3364 09ce 1B28     	    cmp r0,#TK_INTGR 
 3365 09d0 7FF4FEAF 	    bne syntax_error 
 3366 09d4 E069     	    ldr r0,[UPP,#TICKS]
 3367 09d6 0844     	    add r0,r1 
 3368 09d8 E169     	1:  ldr r1,[UPP,#TICKS]
 3369 09da 8842     	    cmp r0,r1 
 3370 09dc FCD1     	    bne 1b     
 3371 09de 7047     	    _RET 
 3372              	
 3373              	/***************************************************
 3374              	  BASIC: PMODE GPIOx,pin,mode
 3375              	  configure a digital pin for input|output
 3376              	  paramters:
 3377              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3378              	    pin      pin {0..15} 
 3379              	    mode 
 3380              	    for input mode:
 3381              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3382              	    for output mode:
 3383              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3384              	  use:
 3385              	    r0  tmp 
 3386              	    r1  mode  
 3387              	    r2  pin  
 3388              	    r3  gpio
ARM GAS  tinyBasic.s 			page 90


 3389              	    T1  mask
 3390              	***************************************************/
 3391              	    _FUNC pin_mode
 3392 09e0 00B5FFF7 	    _CALL arg_list
 3392      FEFF5DF8 
 3392      04EB
 3393 09ea 0328     	    cmp r0,#3 
 3394 09ec 7FF4FEAF 	    bne syntax_error 
 3395 09f0 BCE80E00 	    ldmia DP!,{r1,r2,r3} // mode,pin,gpio 
 3396 09f4 4FF00100 	    mov r0,#1
 3397 09f8 00FA02F0 	    lsl r0,r2 // pin mask in GPIO_ODR 
 3398 09fc 1029     	    cmp r1,#16 
 3399 09fe 06D4     	    bmi 1f 
 3400 0a00 5FEA7101 	    rors r1,#1
 3401 0a04 01F00F01 	    and r1,#15  
 3402 0a08 01D2     	    bcs 1f  
 3403 0a0a 4FEA0040 	    lsl r0,#16 // reset pin  
 3404 0a0e 1861     	1:  str r0,[r3,#GPIO_BSRR]
 3405 0a10 082A     	    cmp r2,#8 
 3406 0a12 03D4     	    bmi 2f 
 3407 0a14 03F10403 	    add r3,#4 // GPIO_CRH 
 3408 0a18 A2F10802 	    sub r2,#8 
 3409 0a1c 4FEA8202 	2:  lsl r2,#2 // pin*4  
 3410 0a20 1868     	    ldr r0,[r3] // actual CNF:MODE value in GPIO_CRx  
 3411 0a22 4FF00F08 	    mov T1,#15
 3412 0a26 08FA02F8 	    lsl T1,r2
 3413 0a2a 6FEA0808 	    mvn T1,T1 
 3414 0a2e 00EA0800 	    and r0,T1 //clear bit field  
 3415 0a32 01FA02F1 	    lsl r1,r2 
 3416 0a36 40EA0100 	    orr r0,r1 
 3417 0a3a 1860     	    str r0,[r3]
 3418 0a3c 7047     	    _RET 
 3419              	
 3420              	
 3421              	/*****************************************
 3422              	  BASIC: PEEKB (expr)  
 3423              	  return byte value at address 
 3424              	*****************************************/
 3425 0a3e 00BF     	    _FUNC peek8
 3426 0a40 00B5FFF7 	    _CALL func_args  
 3426      FEFF5DF8 
 3426      04EB
 3427 0a4a 0128     	    cmp r0,#1
 3428 0a4c 3FF5FEAF 	    bmi syntax_error
 3429 0a50 5CF8041B 	    _POP r1 
 3430 0a54 0978     	    ldrb r1,[r1]
 3431 0a56 4FF01B00 	    mov r0,#TK_INTGR     
 3432 0a5a 7047     	    _RET 
 3433              	
 3434              	/*****************************************
 3435              	  BASIC: PEEKH (expr)  
 3436              	  return byte value at address 
 3437              	*****************************************/
 3438              	    _FUNC peek16
 3439 0a5c 00B5FFF7 	    _CALL func_args  
 3439      FEFF5DF8 
 3439      04EB
ARM GAS  tinyBasic.s 			page 91


 3440 0a66 0128     	    cmp r0,#1
 3441 0a68 3FF5FEAF 	    bmi syntax_error
 3442 0a6c 5CF8041B 	    _POP r1 
 3443 0a70 0988     	    ldrh r1,[r1]
 3444 0a72 4FF01B00 	    mov r0,#TK_INTGR     
 3445 0a76 7047     	    _RET 
 3446              	
 3447              	/*****************************************
 3448              	  BASIC: PEEKW (expr)  
 3449              	  return byte value at address 
 3450              	*****************************************/
 3451              	    _FUNC peek32
 3452 0a78 00B5FFF7 	    _CALL func_args  
 3452      FEFF5DF8 
 3452      04EB
 3453 0a82 0128     	    cmp r0,#1
 3454 0a84 3FF5FEAF 	    bmi syntax_error
 3455 0a88 5CF8041B 	    _POP r1 
 3456 0a8c 0968     	    ldr r1,[r1]
 3457 0a8e 4FF01B00 	    mov r0,#TK_INTGR     
 3458 0a92 7047     	    _RET 
 3459              	
 3460              	
 3461              	/**********************************
 3462              	  BASIC: POKE8 addr,byte
 3463              	  store byte at addr   
 3464              	**********************************/
 3465              	    _FUNC poke8
 3466 0a94 00B5FFF7 	    _CALL arg_list
 3466      FEFF5DF8 
 3466      04EB
 3467 0a9e 0228     	    cmp r0,#2 
 3468 0aa0 7FF4FEAF 	    bne syntax_error
 3469 0aa4 BCE80300 	    ldmia DP!,{r0,r1} 
 3470 0aa8 0870     	    strb r0,[r1]
 3471 0aaa 7047     	    _RET 
 3472              	
 3473              	/**********************************
 3474              	  BASIC: POKE16 addr,hword
 3475              	  store hword at addr   
 3476              	**********************************/
 3477              	    _FUNC poke16
 3478 0aac 00B5FFF7 	    _CALL arg_list
 3478      FEFF5DF8 
 3478      04EB
 3479 0ab6 0228     	    cmp r0,#2 
 3480 0ab8 7FF4FEAF 	    bne syntax_error
 3481 0abc BCE80300 	    ldmia DP!,{r0,r1} 
 3482 0ac0 0880     	    strh r0,[r1]
 3483 0ac2 7047     	    _RET 
 3484              	
 3485              	/**********************************
 3486              	  BASIC: POKE32 addr,word
 3487              	  store word at addr   
 3488              	**********************************/
 3489              	    _FUNC poke32
 3490 0ac4 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 92


 3490      FEFF5DF8 
 3490      04EB
 3491 0ace 0228     	    cmp r0,#2 
 3492 0ad0 7FF4FEAF 	    bne syntax_error
 3493 0ad4 BCE80300 	    ldmia DP!,{r0,r1} 
 3494 0ad8 0860     	    str r0,[r1]
 3495 0ada 7047     	    _RET 
 3496              	
 3497              	
 3498              	
 3499              	/****************************
 3500              	  BASIC: PRINT|? arg_list 
 3501              	  print list of arguments 
 3502              	****************************/
 3503              	    _FUNC print
 3504 0adc 206C     	    ldr r0,[UPP,#FLAGS]
 3505 0ade 40F08000 	    orr r0,#FPRINT 
 3506 0ae2 2064     	    str r0,[UPP,#FLAGS]
 3507 0ae4 88EA0808 	    eor T1,T1 
 3508 0ae8 00B5FFF7 	0:  _CALL expression
 3508      FEFF5DF8 
 3508      04EB
 3509 0af2 1B28     	    cmp r0,#TK_INTGR
 3510 0af4 07D1     	    bne 1f 
 3511 0af6 0846     	    mov r0,r1
 3512 0af8 A169     	    ldr r1,[UPP,#BASE]
 3513 0afa 00B5FFF7 	    _CALL print_int
 3513      FEFF5DF8 
 3513      04EB
 3514 0b04 39E0     	    b 8f  
 3515 0b06 0128     	1:  cmp r0,#TK_COLON 
 3516 0b08 00DC     	    bgt 2f
 3517 0b0a 4DE0     	    b unget_exit 
 3518 0b0c 1C28     	2:  cmp r0,#TK_QSTR 
 3519 0b0e 06D1     	    bne 3f
 3520 0b10 0846     	    mov r0,r1 
 3521 0b12 00B5FFF7 	    _CALL uart_puts  
 3521      FEFF5DF8 
 3521      04EB
 3522 0b1c 2DE0     	    b 8f 
 3523 0b1e 1628     	3:  cmp r0,#TK_CFUNC
 3524 0b20 05D1     	    bne 4f
 3525 0b22 0846     	    mov r0,r1
 3526 0b24 00B5FFF7 	    _CALL execute 
 3526      FEFF5DF8 
 3526      04EB
 3527 0b2e 1328     	4:  cmp r0,#TK_CHAR 
 3528 0b30 06D1     	    bne 5f 
 3529 0b32 0846     	    mov r0,r1 
 3530 0b34 00B5FFF7 	    _CALL uart_putc 
 3530      FEFF5DF8 
 3530      04EB
 3531 0b3e 1CE0     	    b 8f 
 3532 0b40 0428     	5:  cmp r0,#TK_SHARP
 3533 0b42 09D1     	    bne 6f 
 3534 0b44 00B5FFF7 	   _CALL next_token
 3534      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 93


 3534      04EB
 3535 0b4e 1B28     	    cmp r0,#TK_INTGR  
 3536 0b50 7FF4FEAF 	    bne syntax_error 
 3537 0b54 6164     	    str r1,[UPP,#TAB_WIDTH]
 3538 0b56 10E0     	    b 8f 
 3539 0b58 1728     	6:  cmp r0,#TK_CMD 
 3540 0b5a 25D1     	    bne unget_exit  
 3541 0b5c 4929     	    cmp r1,#TAB_IDX 
 3542 0b5e 05D1     	    bne 6f
 3543 0b60 00B500F0 	    _CALL tab 
 3543      3FFB5DF8 
 3543      04EB
 3544 0b6a 06E0     	    b 8f 
 3545 0b6c 4529     	6:  cmp r1,#SPC_IDX  
 3546 0b6e 1BD1     	    bne unget_exit
 3547 0b70 00B500F0 	    _CALL spc   
 3547      F9FA5DF8 
 3547      04EB
 3548 0b7a 88EA0808 	8:  eor T1,T1  
 3549 0b7e 00B5FFF7 	    _CALL next_token
 3549      FEFF5DF8 
 3549      04EB
 3550 0b88 90B1     	    cbz r0, print_exit  
 3551 0b8a 0228     	    cmp r0,#TK_COMMA 
 3552 0b8c 02D1     	    bne 8f 
 3553 0b8e 4FF0FF38 	    mov T1,#-1
 3554 0b92 A9E7     	    b 0b
 3555 0b94 0328     	8:  cmp r0,#TK_SEMIC 
 3556 0b96 07D1     	    bne unget_exit 
 3557 0b98 00B5FFF7 	    _CALL tabulation 
 3557      FEFF5DF8 
 3557      04EB
 3558 0ba2 4FF0FF38 	    mov T1,#-1
 3559 0ba6 9FE7     	    b 0b
 3560              	unget_exit:         
 3561 0ba8 D4F800A0 	   _UNGET_TOKEN 
 3561      D4F808B0 
 3562              	print_exit:
 3563 0bb0 18EA0808 	    ands T1,T1 
 3564 0bb4 08D1     	    bne 9f
 3565 0bb6 00B5FFF7 	    _CALL cr
 3565      FEFF5DF8 
 3565      04EB
 3566 0bc0 206C     	    ldr r0,[UPP,#FLAGS]
 3567 0bc2 80F08000 	    eor r0,#FPRINT 
 3568 0bc6 2064     	    str r0,[UPP,#FLAGS] 
 3569 0bc8 7047     	9:  _RET 
 3570              	
 3571              	/**************************************
 3572              	  BASIC: QKEY
 3573              	  check if key pressed 
 3574              	**************************************/ 
 3575 0bca 00BF     	    _FUNC qkey
 3576 0bcc 4FF00001 	    mov r1,#0
 3577 0bd0 00B5FFF7 	    _CALL uart_qkey
 3577      FEFF5DF8 
 3577      04EB
ARM GAS  tinyBasic.s 			page 94


 3578 0bda 01D0     	    beq 9f 
 3579 0bdc 4FF0FF31 	    mov r1,#-1 
 3580 0be0 4FF01B00 	9:  mov r0,#TK_INTGR
 3581 0be4 7047     	    _RET 
 3582              	
 3583              	/******************************************
 3584              	  BASIC RANDOM(expr)
 3585              	  generate random number between 0..expr-1
 3586              	******************************************/
 3587 0be6 00BF     	    _FUNC random
 3588 0be8 00B5FFF7 	    _CALL func_args 
 3588      FEFF5DF8 
 3588      04EB
 3589 0bf2 0128     	    cmp r0,#1
 3590 0bf4 7FF4FEAF 	    bne syntax_error 
 3591 0bf8 606A     	    ldr r0,[UPP,#SEED]
 3592 0bfa 4FEA4031 	    lsl r1,r0,#13
 3593 0bfe 81EA0001 	    eor r1,r0
 3594 0c02 4FEA5140 	    lsr r0,r1,#17
 3595 0c06 81EA0001 	    eor r1,r0
 3596 0c0a 4FEA4110 	    lsl r0,r1,#5
 3597 0c0e 81EA0001 	    eor r1,r0
 3598 0c12 6162     	    str r1,[UPP,#SEED]
 3599 0c14 5CF8040B 	    _POP r0 
 3600 0c18 B1FBF0F2 	    udiv r2,r1,r0  
 3601 0c1c 00FB02F2 	    mul r2,r0 
 3602 0c20 A1EB0201 	    sub r1,r2 
 3603 0c24 4FF01B00 	    mov r0,#TK_INTGR
 3604 0c28 7047     	    _RET 
 3605              	
 3606              	/****************************************
 3607              	  BASIC: RSHIFT(expr1,expr2)
 3608              	  shift left expr1 de expr2 bits 
 3609              	****************************************/
 3610 0c2a 00BF     	    _FUNC rshift
 3611 0c2c 00B5FFF7 	    _CALL func_args
 3611      FEFF5DF8 
 3611      04EB
 3612 0c36 0228     	    cmp r0,#2 
 3613 0c38 7FF4FEAF 	    bne syntax_error
 3614 0c3c BCE80300 	    ldmia DP!,{r0,r1}
 3615 0c40 21FA00F1 	    lsr r1,r0  
 3616 0c44 4FF01B00 	    mov r0,#TK_INTGR
 3617 0c48 7047     	    _RET 
 3618              	
 3619              	/****************************
 3620              	  BASIC: RUN 
 3621              	  execute program in memory
 3622              	****************************/
 3623 0c4a 00BF     	    _FUNC run
 3624 0c4c 206C10F0 	    _CLO 
 3624      010F03D0 
 3624      4FF00700 
 3624      FFF7FEBF 
 3625 0c5c 206B     	    ldr r0,[UPP,#TXTBGN]
 3626 0c5e 616B     	    ldr r1,[UPP,#TXTEND]
 3627 0c60 C4F8D010 	    str r1,[UPP,#HERE]
ARM GAS  tinyBasic.s 			page 95


 3628 0c64 8842     	    cmp r0,r1
 3629 0c66 21D0     	    beq 9f
 3630 0c68 216C     	    ldr r1,[UPP,#FLAGS]
 3631 0c6a 11F0080F 	    tst r1,#FSTOP
 3632 0c6e 09D0     	    beq 1f
 3633 0c70 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3634 0c74 6060     	    str r0,[UPP,#COUNT]
 3635 0c76 206C     	    ldr r0,[UPP,#FLAGS]
 3636 0c78 4FF00901 	    mov r1,#FRUN+FSTOP
 3637 0c7c 80EA0100 	    eor r0,r1
 3638 0c80 2064     	    str r0,[UPP,#FLAGS] 
 3639 0c82 13E0     	    b 9f  
 3640 0c84 8178     	1:  ldrb r1,[r0,#2]
 3641 0c86 6160     	    str r1,[UPP,#COUNT]
 3642 0c88 8346     	    mov BPTR,r0 
 3643 0c8a 4FF0030A 	    mov IN,#3
 3644 0c8e 606B     	    ldr r0,[UPP,#TXTEND]
 3645              	    // reset dataline pointers 
 3646 0c90 80EA0000 	    eor r0,r0 
 3647 0c94 E060     	    str r0,[UPP,#DATAPTR]
 3648 0c96 2061     	    str r0,[UPP,#DATA]
 3649 0c98 6061     	    str r0,[UPP,#DATALEN] 
 3650 0c9a 206C     	    ldr r0,[UPP,#FLAGS]
 3651 0c9c 40F00100 	    orr r0,#FRUN 
 3652 0ca0 2064     	    str r0,[UPP,#FLAGS]
 3653 0ca2 00B5FFF7 	    _CALL show_trace 
 3653      FEFF5DF8 
 3653      04EB
 3654 0cac 7047     	9:  _RET 
 3655              	
 3656              	/**********************************
 3657              	        FILE SYSTEM 
 3658              	**********************************/
 3659              	
 3660              	/*********************************
 3661              	  search_free 
 3662              	  search first free PAGE in fs
 3663              	  a PAGE is free if first word is
 3664              	  -1
 3665              	  input:
 3666              	    none 
 3667              	  output:
 3668              	    r0    addr|0
 3669              	  use:
 3670              	*********************************/
 3671 0cae 00BF     	    _FUNC search_free 
 3672 0cb0 06B4     	    push {r1,r2}
 3673 0cb2 DFF86410 	    ldr r1,fs_addr 
 3674 0cb6 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3674      C0F60202 
 3675 0cbe 0868     	1:  ldr r0,[r1]
 3676 0cc0 B0F1FF3F 	    cmp r0,#-1
 3677 0cc4 03D0     	    beq 8f 
 3678 0cc6 01F58061 	    add r1,#PAGE_SIZE
 3679 0cca 9142     	    cmp r1,r2 
 3680 0ccc F7D4     	    bmi 1b 
 3681 0cce 0846     	8:  mov r0,r1 
ARM GAS  tinyBasic.s 			page 96


 3682 0cd0 06BC     	    pop {r1,r2}   
 3683 0cd2 7047     	    _RET 
 3684              	
 3685              	/*********************************
 3686              	  search_file 
 3687              	  search for a file name 
 3688              	  in file system.
 3689              	  input: 
 3690              	    r0   .asciz target name
 3691              	  output:
 3692              	    r0    0 || address found 
 3693              	  use:
 3694              	   r0     temp 
 3695              	   r1     *file_name 
 3696              	   r2     *fs  
 3697              	   r3     target   
 3698              	**********************************/
 3699              	    _FUNC search_file 
 3700 0cd4 0EB4     	    push {r1,r2,r3}
 3701 0cd6 DFF84020 	    ldr r2,fs_addr
 3702 0cda 0346     	    mov r3,r0  
 3703              	cmp_loop:
 3704 0cdc 1068     	    ldr r0,[r2]
 3705 0cde B0F1FF3F 	    cmp r0,#-1
 3706 0ce2 80EA0000 	    eor r0,r0
 3707 0ce6 15D0     	    beq 9f // reached end of fs 
 3708 0ce8 1846     	1:  mov r0,r3
 3709 0cea 02F10201 	    add r1,r2,#2
 3710 0cee 00B5FFF7 	    _CALL strcmp
 3710      FEFF5DF8 
 3710      04EB
 3711 0cf8 08B9     	    cbnz r0,2f
 3712 0cfa 1046     	    mov r0,r2 
 3713 0cfc 0AE0     	    b 9f   
 3714 0cfe 1088     	2:  ldrh r0,[r2] // name length
 3715 0d00 0244     	    add r2,r0 
 3716 0d02 1088     	    ldrh r0,[r2]
 3717 0d04 1044     	    add r0,r2
 3718 0d06 00B5FFF7 	    _CALL page_align 
 3718      FEFF5DF8 
 3718      04EB
 3719 0d10 0246     	    mov r2,r0   
 3720 0d12 E3E7     	    b cmp_loop 
 3721 0d14 0EBC     	9:  pop {r1,r2,r3}
 3722 0d16 7047     	    _RET 
 3723              	
 3724 0d18 00000000 	fs_addr: .word FILE_SYSTEM
 3725              	
 3726              	/*************************************
 3727              	  BASIC: DIR 
 3728              	  list files stored in fs 
 3729              	  use:
 3730              	    r0  temp 
 3731              	    r1  temp
 3732              	    r2  file count
 3733              	    r3  data size
 3734              	    T1  *fs  
ARM GAS  tinyBasic.s 			page 97


 3735              	*************************************/
 3736              	    _FUNC directory
 3737 0d1c 206C10F0 	    _CLO 
 3737      010F03D0 
 3737      4FF00700 
 3737      FFF7FEBF 
 3738 0d2c 82EA0202 	    eor r2,r2 
 3739 0d30 5FF81C80 	    ldr T1,fs_addr 
 3740 0d34 D8F80000 	1:  ldr r0,[T1] // name length 
 3741 0d38 B0F1FF3F 	    cmp r0,#-1
 3742 0d3c 2AD0     	    beq no_more_file
 3743 0d3e 00F00F03 	    and r3,r0,#15
 3744 0d42 08F10200 	    add r0,T1,#2
 3745 0d46 00B5FFF7 	    _CALL uart_puts 
 3745      FEFF5DF8 
 3745      04EB
 3746 0d50 4FF01000 	    mov r0,#16 
 3747 0d54 00B5FFF7 	    _CALL cursor_x 
 3747      FEFF5DF8 
 3747      04EB
 3748 0d5e 9844     	    add T1,r3 
 3749 0d60 B8F80030 	    ldrh r3,[T1]
 3750 0d64 1846     	    mov r0,r3 
 3751 0d66 4FF00A01 	    mov r1,#10 
 3752 0d6a 00B5FFF7 	    _CALL print_int
 3752      FEFF5DF8 
 3752      04EB
 3753 0d74 00B5FFF7 	    _CALL cr  
 3753      FEFF5DF8 
 3753      04EB
 3754 0d7e 08EB0300 	    add r0,T1,r3 
 3755 0d82 00B5FFF7 	    _CALL page_align
 3755      FEFF5DF8 
 3755      04EB
 3756 0d8c 8046     	    mov T1,r0 
 3757 0d8e 02F10102 	    add r2,#1 
 3758 0d92 CFE7     	    b 1b  
 3759              	no_more_file:
 3760 0d94 00B5FFF7 	    _CALL cr
 3760      FEFF5DF8 
 3760      04EB
 3761 0d9e 4FF01000 	    mov r0,#16
 3762 0da2 00B5FFF7 	    _CALL cursor_x  
 3762      FEFF5DF8 
 3762      04EB
 3763 0dac 1046     	    mov r0,r2 
 3764 0dae 4FF00A01 	    mov r1,#10 
 3765 0db2 00B5FFF7 	    _CALL print_int 
 3765      FEFF5DF8 
 3765      04EB
 3766 0dbc DFF89C06 	    ldr r0,=fcount 
 3767 0dc0 00B5FFF7 	    _CALL uart_puts 
 3767      FEFF5DF8 
 3767      04EB
 3768 0dca 7047     	    _RET 
 3769 0dcc 66696C65 	fcount:  .asciz "files\n"
 3769      730A00
ARM GAS  tinyBasic.s 			page 98


 3770              	
 3771              	/*************************************
 3772              	  BASIC: FORGET ["name"]
 3773              	  delete file and all following 
 3774              	  if no name given delete all files 
 3775              	************************************/
 3776 0dd3 00       	    _FUNC forget
 3777 0dd4 2DE90802 	    push {r3,T2}
 3778 0dd8 5FF8C490 	    ldr T2,fs_addr 
 3779 0ddc E36A     	    ldr r3,[UPP,#FSFREE]
 3780 0dde 00B5FFF7 	    _CALL next_token
 3780      FEFF5DF8 
 3780      04EB
 3781 0de8 38B1     	    cbz r0,1f // no name 
 3782 0dea 0846     	    mov r0,r1
 3783 0dec 00B5FFF7 	    _CALL search_file
 3783      71FF5DF8 
 3783      04EB
 3784 0df6 58B1     	    cbz r0,9f 
 3785 0df8 8146     	    mov T2,r0 
 3786 0dfa 9945     	1:  cmp T2,r3 
 3787 0dfc 08D5     	    bpl 9f 
 3788 0dfe 4846     	    mov r0,T2 
 3789 0e00 00B5FFF7 	    _CALL erase_page
 3789      FEFF5DF8 
 3789      04EB
 3790 0e0a 09F58069 	    add T2,#PAGE_SIZE
 3791 0e0e F4E7     	    b 1b 
 3792 0e10 00B5FFF7 	9:  _CALL search_free
 3792      4DFF5DF8 
 3792      04EB
 3793 0e1a BDE80802 	    pop {r3,T2} 
 3794 0e1e 7047     	    _RET 
 3795              	
 3796              	/**********************************
 3797              	  BASIC LOAD "name" 
 3798              	  load file in RAM for execution
 3799              	  use:
 3800              	    r0   temp
 3801              	    r1   src
 3802              	    r2   dest 
 3803              	    r3   count 
 3804              	**********************************/
 3805              	    _FUNC load
 3806 0e20 206C10F0 	    _CLO 
 3806      010F03D0 
 3806      4FF00700 
 3806      FFF7FEBF 
 3807 0e30 00B5FFF7 	    _CALL next_token 
 3807      FEFF5DF8 
 3807      04EB
 3808 0e3a 1C28     	    cmp r0,#TK_QSTR 
 3809 0e3c 7FF4FEAF 	    bne syntax_error 
 3810 0e40 0846     	    mov r0,r1 
 3811 0e42 00B5FFF7 	    _CALL search_file 
 3811      46FF5DF8 
 3811      04EB
ARM GAS  tinyBasic.s 			page 99


 3812 0e4c 18B9     	    cbnz r0, 1f 
 3813 0e4e 4FF00900 	    mov r0,#ERR_NOT_FILE
 3814 0e52 FFF7FEBF 	    b tb_error 
 3815 0e56 0146     	1:  mov r1,r0 
 3816 0e58 0888     	    ldrh r0,[r1]
 3817 0e5a 0144     	    add r1,r0 // data size field  
 3818 0e5c 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3819 0e60 226B     	    ldr r2,[UPP,#TXTBGN]
 3820 0e62 02EB0300 	    add r0,r2,r3  
 3821 0e66 6063     	    str r0,[UPP,#TXTEND]
 3822 0e68 03F10103 	    add r3,#1
 3823 0e6c 4FEA5303 	    lsr r3,#1
 3824              	2:  // load file data 
 3825 0e70 31F8020B 	    ldrh r0,[r1],#2
 3826 0e74 22F8020B 	    strh r0,[r2],#2 
 3827 0e78 013B     	    subs r3,#1 
 3828 0e7a F9D1     	    bne 2b 
 3829              	// report file size 
 3830 0e7c DFF8E005 	    ldr r0,=fsize 
 3831 0e80 00B5FFF7 	    _CALL uart_puts
 3831      FEFF5DF8 
 3831      04EB
 3832 0e8a 606B     	    ldr r0,[UPP,#TXTEND]
 3833 0e8c 236B     	    ldr r3,[UPP,#TXTBGN]
 3834 0e8e A0EB0300 	    sub r0,r3 
 3835 0e92 4FF00A01 	    mov r1,#10 
 3836 0e96 00B5FFF7 	    _CALL print_int 
 3836      FEFF5DF8 
 3836      04EB
 3837 0ea0 DFF8C005 	    ldr r0,=data_bytes 
 3838 0ea4 00B5FFF7 	    _CALL uart_puts      
 3838      FEFF5DF8 
 3838      04EB
 3839 0eae 7047     	    _RET 
 3840              	
 3841              	
 3842              	/*********************************
 3843              	  BASIC: SAVE "name" 
 3844              	  save program in flash memory
 3845              	  file structure:
 3846              	    .hword name_length 
 3847              	    .asciz name
 3848              	    .palign 1  
 3849              	    .hword data_length 
 3850              	    .byte  file data (variable length)  
 3851              	  use:
 3852              	    r0  temp 
 3853              	    r1  temp
 3854              	    r2  *flash 
 3855              	    r3  *ram  
 3856              	    T1  temp   
 3857              	********************************/
 3858              	    _FUNC save
 3859 0eb0 206C10F0 	    _CLO 
 3859      010F03D0 
 3859      4FF00700 
 3859      FFF7FEBF 
ARM GAS  tinyBasic.s 			page 100


 3860 0ec0 606B     	    ldr r0,[UPP,#TXTEND]
 3861 0ec2 216B     	    ldr r1,[UPP,#TXTBGN]
 3862 0ec4 8842     	    cmp r0,r1
 3863 0ec6 03D1     	    bne 0f 
 3864 0ec8 4FF00D00 	    mov r0,#ERR_NO_PROG
 3865 0ecc FFF7FEBF 	    b tb_error 
 3866 0ed0 00B5FFF7 	0:  _CALL next_token 
 3866      FEFF5DF8 
 3866      04EB
 3867 0eda 1C28     	    cmp r0,#TK_QSTR
 3868 0edc 7FF4FEAF 	    bne syntax_error 
 3869              	// check for existing 
 3870 0ee0 0B46     	    mov r3,r1 // save name 
 3871 0ee2 1846     	    mov r0,r3  
 3872 0ee4 00B5FFF7 	    _CALL search_file
 3872      F5FE5DF8 
 3872      04EB
 3873 0eee 18B1     	    cbz r0,new_file 
 3874 0ef0 4FF00800 	    mov r0,#ERR_DUPLICATE
 3875 0ef4 FFF7FEBF 	    b tb_error 
 3876              	new_file:
 3877 0ef8 4FF00100 	    mov r0,#1 
 3878 0efc 00B5FFF7 	    _CALL unlock 
 3878      FEFF5DF8 
 3878      04EB
 3879 0f06 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3880 0f08 1846     	    mov r0,r3 // *name 
 3881 0f0a 00B5FFF7 	    _CALL strlen 
 3881      FEFF5DF8 
 3881      04EB
 3882 0f14 00F10400 	    add r0,#4  
 3883 0f18 20F00100 	    and r0,#-2 //even size
 3884 0f1c A0F10208 	    sub T1,r0,#2  // name length counter   
 3885 0f20 1146     	1:  mov r1,r2  
 3886 0f22 00B5FFF7 	    _CALL hword_write   
 3886      FEFF5DF8 
 3886      04EB
 3887 0f2c 02F10202 	    add r2,#2  
 3888              	// write file name      
 3889 0f30 33F8020B 	2:  ldrh r0,[r3],#2 
 3890 0f34 1146     	    mov r1,r2 
 3891 0f36 00B5FFF7 	    _CALL hword_write
 3891      FEFF5DF8 
 3891      04EB
 3892 0f40 02F10202 	    add r2,#2
 3893 0f44 B8F10208 	    subs T1,#2
 3894 0f48 F2D1     	    bne 2b
 3895              	// write data size 
 3896 0f4a 606B     	    ldr r0,[UPP,#TXTEND]
 3897 0f4c 236B     	    ldr r3,[UPP,#TXTBGN]
 3898 0f4e A0EB0300 	    sub r0,r3
 3899 0f52 8046     	    mov T1,r0
 3900 0f54 1146     	    mov r1,r2 
 3901 0f56 00B5FFF7 	    _CALL hword_write
 3901      FEFF5DF8 
 3901      04EB
 3902 0f60 02F10202 	    add r2,#2 
ARM GAS  tinyBasic.s 			page 101


 3903              	// write data 
 3904 0f64 08F10108 	    add T1,#1 
 3905 0f68 4FEA5808 	    lsr T1,#1 // .hword to write 
 3906 0f6c 33F8020B 	3:  ldrh r0,[r3],#2
 3907 0f70 1146     	    mov r1,r2
 3908 0f72 00B5FFF7 	    _CALL hword_write 
 3908      FEFF5DF8 
 3908      04EB
 3909 0f7c 02F10202 	    add r2,#2 
 3910 0f80 B8F10108 	    subs T1,#1 
 3911 0f84 F2D1     	    bne 3b
 3912 0f86 4FF00000 	    mov r0,#0 
 3913 0f8a 00B5FFF7 	    _CALL unlock
 3913      FEFF5DF8 
 3913      04EB
 3914              	// update FSFREE     
 3915 0f94 606B     	    ldr r0,[UPP,#TXTEND]
 3916 0f96 216B     	    ldr r1,[UPP,#TXTBGN]
 3917 0f98 A0EB0100 	    sub r0,r1 
 3918 0f9c 8046     	    mov T1,r0 
 3919 0f9e E16A     	    ldr r1,[UPP,#FSFREE]
 3920 0fa0 0844     	    add r0,r1 
 3921 0fa2 00B5FFF7 	    _CALL page_align
 3921      FEFF5DF8 
 3921      04EB
 3922 0fac E062     	    str r0,[UPP,#FSFREE]
 3923 0fae DFF8B004 	    ldr r0,=fsize
 3924 0fb2 00B5FFF7 	    _CALL uart_puts
 3924      FEFF5DF8 
 3924      04EB
 3925 0fbc 4046     	    mov r0,T1 
 3926 0fbe 4FF00A01 	    mov r1,#10 
 3927 0fc2 00B5FFF7 	    _CALL print_int 
 3927      FEFF5DF8 
 3927      04EB
 3928 0fcc DFF89404 	    ldr r0,=data_bytes 
 3929 0fd0 00B5FFF7 	    _CALL uart_puts  
 3929      FEFF5DF8 
 3929      04EB
 3930 0fda 7047     	    _RET 
 3931 0fdc 66696C65 	fsize: .asciz "file size: "
 3931      2073697A 
 3931      653A2000 
 3932 0fe8 62797465 	data_bytes: .asciz "bytes"
 3932      7300
 3933              	
 3934              	
 3935              	/*******************************
 3936              	  BASIC: FREE 
 3937              	  return RAM free bytes 
 3938              	*******************************/
 3939 0fee 00BF     	    _FUNC free
 3940 0ff0 D4F8D000 	    ldr r0,[UPP,#HERE]
 3941 0ff4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3942 0ff8 A1EB0001 	    sub r1,r0
 3943 0ffc 4FF01B00 	    mov r0,#TK_INTGR
 3944 1000 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 102


 3945              	
 3946              	/*********************************
 3947              	  BASIC: SERVO_INIT SERVO_x 
 3948              	  initialize servo motor A,B,C or D
 3949              	  A -> PWM2/1 pin A15
 3950              	  B -> PWM2/2 pin B3 
 3951              	  C -> PWM3/1 pin B4 
 3952              	  D -> PWM3/2 pin B5
 3953              	************************************/
 3954 1002 00BF     	    _FUNC servo_init 
 3955 1004 00B5FFF7 	    _CALL expression 
 3955      FEFF5DF8 
 3955      04EB
 3956 100e 1B28     	    cmp r0,#TK_INTGR  
 3957 1010 7FF4FEAF 	    bne syntax_error 
 3958 1014 0A29     	    cmp r1,#0xa 
 3959 1016 03D5     	    bpl 1f 
 3960 1018 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 3961 101c FFF7FEBF 	    b tb_error 
 3962 1020 0E29     	1:  cmp r1,#0xe
 3963 1022 F9D5     	    bpl 0b 
 3964 1024 4FF48052 	    _MOV32 r2,RCC_BASE_ADR 
 3964      C4F20202 
 3965 102c D369     	    ldr r3,[r2,#RCC_APB1ENR]
 3966 102e 0C29     	    cmp r1,#0xc 
 3967 1030 11D5     	    bpl setup_pwm3 
 3968              	// setup pwm2 ch1|ch2
 3969 1032 43F00103 	    orr r3,#1
 3970 1036 D361     	    str r3,[r2,#RCC_APB1ENR]
 3971 1038 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 3971      C4F20102 
 3972 1040 5368     	    ldr r3,[r2,#AFIO_MAPR]
 3973 1042 4FF44070 	    mov r0,#(3<<8)
 3974 1046 43EA0003 	    orr r3,r0
 3975 104a 5360     	    str r3,[r2,#AFIO_MAPR]
 3976 104c 4FF00002 	    _MOV32 r2,TIMER2_BASE_ADR
 3976      C4F20002 
 3977 1054 14E0     	    b 2f 
 3978              	setup_pwm3: // ch1|ch2 
 3979 1056 43F00203 	    orr r3,#2
 3980 105a D361     	    str r3,[r2,#RCC_APB1ENR]
 3981 105c 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 3981      C4F20102 
 3982 1064 5368     	    ldr r3,[r2,#AFIO_MAPR]
 3983 1066 6FF44060 	    mvn r0,#3<<10 
 3984 106a 03EA0003 	    and r3,r0 
 3985 106e 4FF40060 	    mov r0,#2<<10
 3986 1072 43EA0003 	    orr r3,r0 
 3987 1076 5360     	    str r3,[r2,#AFIO_MAPR]
 3988 1078 4FF48062 	    _MOV32 r2,TIMER3_BASE_ADR
 3988      C4F20002 
 3989 1080 A1F10A01 	2:  sub r1,#0xa 
 3990 1084 0229     	    cmp r1,#2 
 3991 1086 01D4     	    bmi 3f 
 3992 1088 A1F10201 	    sub r1,#2
 3993              	3:  //set prescaler to 32
 3994 108c 4FF01F00 	    mov r0,#31 
ARM GAS  tinyBasic.s 			page 103


 3995 1090 1085     	    strh r0,[r2,#TIM_PSC]
 3996              	    // set autoreload to 45000
 3997 1092 4AF6C870 	    _MOV32 r0,45000
 3997      C0F20000 
 3998 109a 9085     	    strh r0,[r2,#TIM_ARR]
 3999              	    // set compare value for 1500Âµsec 
 4000 109c 40F62F50 	    mov r0,#3375
 4001 10a0 09B1     	    cbz r1,3f 
 4002 10a2 1087     	    strh r0,[r2,#TIM_CCR2]
 4003 10a4 00E0     	    b 4f 
 4004 10a6 9086     	3:  strh r0,[r2,#TIM_CCR1]
 4005              	    // set mode 
 4006 10a8 4FF06800 	4:  mov r0,#(0xd<<3)
 4007 10ac 4FF47F48 	    mov T1,#0xff00 
 4008 10b0 19B1     	    cbz r1,4f 
 4009 10b2 4FEA0020 	    lsl r0,#8
 4010 10b6 4FEA1828 	    lsr T1,#8  
 4011 10ba 138B     	4:  ldrh r3,[r2,#TIM_CCMR1]
 4012 10bc 03EA0803 	    and r3,T1 
 4013 10c0 43EA0003 	    orr r3,r0 
 4014 10c4 1383     	    strh r3,[r2,#TIM_CCMR1]
 4015              	    // enable OC output 
 4016 10c6 4FF00100 	    mov r0,#1 
 4017 10ca 09B1     	    cbz r1,5f 
 4018 10cc 4FEA0010 	    lsl r0,#4 
 4019 10d0 138C     	5:  ldrh r3,[r2,#TIM_CCER]
 4020 10d2 43EA0003 	    orr r3,r0 
 4021 10d6 1384     	    strh r3,[r2,#TIM_CCER]
 4022              	    // enable counter 
 4023 10d8 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4024 10dc 1388     	    ldrh r3,[r2,TIM_CR1]
 4025 10de 43EA0003 	    orr r3,r0
 4026 10e2 1380     	    strh r3,[r2,TIM_CR1]
 4027              	    // generate a reload event 
 4028 10e4 4FF00100 	    mov r0,#1 
 4029 10e8 9082     	    strh r0,[r2,TIM_EGR]
 4030 10ea 7047     	    _RET 
 4031              	
 4032              	
 4033              	/*********************************
 4034              	  BASIC: SERVO_POS SERVO_x,expr 
 4035              	  set servo position 
 4036              	*********************************/
 4037              	    _FUNC servo_pos 
 4038 10ec 00B5FFF7 	    _CALL arg_list 
 4038      FEFF5DF8 
 4038      04EB
 4039 10f6 0228     	    cmp r0,#2
 4040 10f8 7FF4FEAF 	    bne syntax_error 
 4041 10fc BCE80600 	    ldmia DP!,{r1,r2} // value, channel 
 4042 1100 A2F10A02 	    sub r2,#0xa 
 4043 1104 022A     	    cmp r2,#2 
 4044 1106 04D5     	    bpl 3f // timer 3 channels 
 4045              	// timer 2 channels 
 4046 1108 4FF00003 	    _MOV32 r3,TIMER2_BASE_ADR
 4046      C4F20003 
 4047 1110 05E0     	    b 4f 
ARM GAS  tinyBasic.s 			page 104


 4048 1112 4FF48063 	3:  _MOV32 r3,TIMER3_BASE_ADR
 4048      C4F20003 
 4049 111a A2F10202 	    sub r2,#2 
 4050 111e 4AF6C870 	4:  _MOV32 r0,45000
 4050      C0F20000 
 4051 1126 01FB00F0 	    mul r0,r1 
 4052 112a 44F62061 	    _MOV32 r1,20000
 4052      C0F20001 
 4053 1132 B0FBF1F0 	    udiv r0,r1 
 4054 1136 0AB1     	    cbz r2,6f 
 4055 1138 1887     	    strh r0,[r3,#TIM_CCR2]
 4056 113a 00E0     	    b 7f 
 4057 113c 9886     	6:  strh r0,[r3,#TIM_CCR1]
 4058 113e 4FF00600 	7:  mov r0,#6 
 4059 1142 9882     	    strh r0,[r3,#TIM_EGR]
 4060 1144 7047     	    _RET 
 4061              	
 4062              	
 4063              	/*********************************
 4064              	  BASIC: SLEEP 
 4065              	  place MCU lowest power mode 
 4066              	  wait for external interrpt or
 4067              	  reset.
 4068              	*********************************/
 4069 1146 00BF     	    _FUNC sleep
 4070 1148 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4070      CEF20000 
 4071 1150 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4072 1154 0160     	    str r1,[r0]
 4073 1156 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4073      C4F20000 
 4074 115e 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4075 1162 0160     	    str r1,[r0]
 4076 1164 20BF     	    wfe 
 4077 1166 7047     	    _RET 
 4078              	
 4079              	/************************************
 4080              	  BASIC: SPC(expr)
 4081              	  mov cursor right expr spaces 
 4082              	***********************************/
 4083              	    _FUNC spc 
 4084 1168 00B5FFF7 	    _CALL func_args 
 4084      FEFF5DF8 
 4084      04EB
 4085 1172 0128     	    cmp r0,#1
 4086 1174 7FF4FEAF 	    bne syntax_error 
 4087 1178 206C     	    ldr r0,[UPP,#FLAGS]
 4088 117a 10F0800F 	    tst r0,#FPRINT 
 4089 117e 5CF8040B 	    _POP r0 
 4090 1182 04D0     	    beq 9f 
 4091 1184 00B5FFF7 	    _CALL spaces 
 4091      FEFF5DF8 
 4091      04EB
 4092 118e 7047     	9:  _RET 
 4093              	
 4094              	    _FUNC spi_read
 4095 1190 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 105


 4096              	
 4097 1192 00BF     	    _FUNC spi_enable
 4098 1194 7047     	    _RET 
 4099              	
 4100 1196 00BF     	    _FUNC spi_select
 4101 1198 7047     	    _RET 
 4102              	
 4103 119a 00BF     	    _FUNC spi_write
 4104 119c 7047     	    _RET 
 4105              	
 4106              	/******************************
 4107              	  BASIC: STOP 
 4108              	  stop program executre but 
 4109              	  keep execution state for 
 4110              	  resume 
 4111              	******************************/
 4112 119e 00BF     	    _FUNC stop
 4113 11a0 206C10F0 	    _RTO 
 4113      010F03D1 
 4113      4FF00700 
 4113      FFF7FEBF 
 4114 11b0 6068     	    ldr r0,[UPP,#COUNT]
 4115 11b2 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4116 11b6 206C     	    ldr r0,[UPP,#FLAGS]
 4117 11b8 4FF00901 	    mov r1,#FRUN+FSTOP
 4118 11bc 80EA0100 	    eor r0,r1
 4119 11c0 2064     	    str r0,[UPP,#FLAGS]
 4120 11c2 8AEA0A0A 	    eor IN,IN 
 4121 11c6 8BEA0B0B 	    eor BPTR,BPTR 
 4122 11ca C4F804A0 	    str IN,[UPP,#COUNT]
 4123 11ce C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4124 11d2 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4125 11d6 4FF4A040 	    _MOV32 r0,RAM_END
 4125      C2F20000 
 4126 11de 8546     	    mov sp,r0
 4127 11e0 FFF7FEBF 	    b cmd_line 
 4128              	
 4129              	
 4130              	/**************************
 4131              	  BASIC: TAB(expr)
 4132              	  move cursor column expr 
 4133              	**************************/
 4134              	    _FUNC tab 
 4135 11e4 00B5FFF7 	    _CALL func_args  
 4135      FEFF5DF8 
 4135      04EB
 4136 11ee 0128     	    cmp r0,#1 
 4137 11f0 7FF4FEAF 	    bne syntax_error 
 4138 11f4 206C     	    ldr r0,[UPP,#FLAGS]
 4139 11f6 10F0800F 	    tst r0,#FPRINT
 4140 11fa 5CF8040B 	    _POP r0 
 4141 11fe 04D0     	    beq 9f 
 4142 1200 00B5FFF7 	    _CALL cursor_x 
 4142      FEFF5DF8 
 4142      04EB
 4143 120a 7047     	9:  _RET 
 4144              	
ARM GAS  tinyBasic.s 			page 106


 4145              	
 4146              	/**************************
 4147              	  BASIC: TICKS 
 4148              	  return msec counter
 4149              	**************************/  
 4150              	    _FUNC get_ticks
 4151 120c E169     	    ldr r1,[UPP,#TICKS]
 4152 120e 4FF01B00 	    mov r0,#TK_INTGR
 4153 1212 7047     	    _RET  
 4154              	
 4155              	/*************************
 4156              	  BASIC: TIMER expr 
 4157              	  set countdown timer 
 4158              	************************/
 4159              	    _FUNC set_timer
 4160 1214 00B5FFF7 	    _CALL expression 
 4160      FEFF5DF8 
 4160      04EB
 4161 121e 1B28     	    cmp r0,#TK_INTGR
 4162 1220 7FF4FEAF 	    bne syntax_error 
 4163 1224 2162     	    str r1,[UPP,#TIMER]
 4164 1226 7047     	    _RET 
 4165              	
 4166              	/***************************
 4167              	  BASIC: TIMEOUT
 4168              	  check for timer expiration 
 4169              	  return -1 true || 0 false
 4170              	****************************/
 4171              	    _FUNC timeout
 4172 1228 81EA0101 	    eor r1,r1 
 4173 122c 206A     	    ldr r0,[UPP,#TIMER]
 4174 122e 08B9     	    cbnz r0,9f 
 4175 1230 6FEA0101 	    mvn r1,r1 
 4176 1234 4FF01B00 	9:  mov r0,#TK_INTGR    
 4177 1238 7047     	    _RET 
 4178              	
 4179              	/****************************************
 4180              	  BASIC:  TONE freq, duration 
 4181              	  play a tone with frequency freq and duration
 4182              	  in milliseconds
 4183              	***********************************************/
 4184 123a 00BF     	    _FUNC tone
 4185 123c 00B5FFF7 	    _CALL arg_list 
 4185      FEFF5DF8 
 4185      04EB
 4186 1246 0228     	    cmp r0,#2 
 4187 1248 7FF4FEAF 	    bne syntax_error
 4188 124c BCE80003 	    ldmia DP!,{T1,T2}
 4189              	    
 4190 1250 7047     	    _RET 
 4191              	
 4192              	/****************************************
 4193              	  BASIC: TRACE n 
 4194              	  enable execution trace 
 4195              	  0   ddisable
 4196              	  1   show current line#
 4197              	  2  show line#+data_stack
ARM GAS  tinyBasic.s 			page 107


 4198              	  3  show line#+data_stack+main_stack 
 4199              	***************************************/
 4200 1252 00BF     	    _FUNC trace 
 4201 1254 00B5FFF7 	    _CALL next_token 
 4201      FEFF5DF8 
 4201      04EB
 4202 125e 1B28     	    cmp r0,#TK_INTGR  
 4203 1260 7FF4FEAF 	    bne syntax_error 
 4204 1264 01F00301 	    and r1,#3 
 4205 1268 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4206 126c 7047     	    _RET 
 4207              	
 4208              	
 4209              	/***************************
 4210              	  BASIC: UBOUND 
 4211              	  return last indice of @
 4212              	  output:
 4213              	    r0  TK_INTGR 
 4214              	    r1  +int 
 4215              	**************************/
 4216 126e 00BF     	    _FUNC ubound
 4217 1270 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4218 1274 D4F8D000 	    ldr r0,[UPP,#HERE]
 4219 1278 A1EB0001 	    sub r1,r0 
 4220 127c 4FEA9101 	    lsr r1,#2
 4221 1280 4FF01B00 	    mov r0,#TK_INTGR 
 4222 1284 7047     	    _RET 
 4223              	
 4224              	/****************************
 4225              	  BASIC: UFLASH 
 4226              	  return user flash address
 4227              	*****************************/
 4228 1286 00BF     	    _FUNC uflash
 4229 1288 7749     	    ldr r1,=user
 4230 128a 4FF01B00 	    mov r0,#TK_INTGR 
 4231 128e 7047     	    _RET 
 4232              	
 4233              	
 4234              	/************************************
 4235              	  BASIC: UNTIL relation 
 4236              	  close a DO..UNTIL loop 
 4237              	  loop until relation come true 
 4238              	************************************/
 4239              	    _FUNC until
 4240 1290 00B5FFF7 	    _CALL relation 
 4240      FEFF5DF8 
 4240      04EB
 4241 129a 11B1     	    cbz r1,9f
 4242 129c 0CF1080C 	    add DP,#8
 4243 12a0 7047     	    _RET  
 4244 12a2 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4245 12a6 9BF80200 	    ldrb r0,[BPTR,#2]
 4246 12aa 6060     	    str r0,[UPP,#COUNT]
 4247 12ac 7047     	    _RET 
 4248              	
 4249              	/*************************************
 4250              	  BASIC: WAIT addr,expr1[,expr2] 
ARM GAS  tinyBasic.s 			page 108


 4251              	  wait until *addr&expr1 is not null 
 4252              	  or until (*addr&expr1)^expr2 is null 
 4253              	***************************************/
 4254 12ae 00BF     	    _FUNC wait
 4255 12b0 00B5FFF7 	    _CALL arg_list 
 4255      FEFF5DF8 
 4255      04EB
 4256 12ba 0228     	    cmp r0,#2
 4257 12bc 03D0     	    beq 2f 
 4258 12be 0328     	    cmp r0,#3
 4259 12c0 07D0     	    beq 4f
 4260 12c2 FFF7FEBF 	    b syntax_error 
 4261 12c6 BCE80300 	2:  ldmia DP!,{r0,r1}
 4262 12ca 0A88     	3:  ldrh r2,[r1]
 4263 12cc 0240     	    ands r2,r0 
 4264 12ce FCD0     	    beq 3b 
 4265 12d0 06E0     	    b 9f 
 4266 12d2 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4267 12d6 1388     	5:  ldrh r3,[r2]
 4268 12d8 83EA0003 	    eor r3,r0
 4269 12dc 0B40     	    ands r3,r1 
 4270 12de FAD0     	    beq 5b 
 4271 12e0 7047     	9:  _RET 
 4272              	
 4273              	/*********************************************
 4274              	  BASIC: WORDS 
 4275              	  print list of BASIC WORDS in dictionary 
 4276              	  use:
 4277              	    r0,r1,r2,T1,T2  
 4278              	********************************************/
 4279 12e2 00BF     	    _FUNC words
 4280 12e4 206C10F0 	    _CLO 
 4280      010F03D0 
 4280      4FF00700 
 4280      FFF7FEBF 
 4281 12f4 DFF87481 	    ldr T1,=kword_dict
 4282 12f8 89EA0909 	    eor T2,T2
 4283 12fc 82EA0202 	    eor r2,r2  
 4284              	1:  
 4285 1300 4046     	    mov r0,T1
 4286 1302 00B5FFF7 	    _CALL strlen
 4286      FEFF5DF8 
 4286      04EB
 4287 130c F0B1     	    cbz r0,4f 
 4288 130e 8144     	    add T2,r0 
 4289 1310 B9F1500F 	    cmp T2,#80 
 4290 1314 06D4     	    bmi 2f
 4291 1316 89EA0909 	    eor T2,T2  
 4292 131a 00B5FFF7 	    _CALL cr 
 4292      FEFF5DF8 
 4292      04EB
 4293 1324 4046     	2:  mov r0,T1 
 4294 1326 00B5FFF7 	    _CALL uart_puts 
 4294      FEFF5DF8 
 4294      04EB
 4295 1330 4FF02000 	    mov r0,#SPACE
 4296 1334 09F10109 	    add T2,#1  
ARM GAS  tinyBasic.s 			page 109


 4297 1338 00B5FFF7 	    _CALL uart_putc
 4297      FEFF5DF8 
 4297      04EB
 4298 1342 02F10102 	    add r2,#1 
 4299 1346 58F80C8C 	    ldr T1,[T1,#-12]
 4300 134a D9E7     	    b 1b 
 4301 134c 19EA0909 	4:  ands T2,T2
 4302 1350 04D0     	    beq 5f 
 4303 1352 00B5FFF7 	    _CALL cr 
 4303      FEFF5DF8 
 4303      04EB
 4304 135c 1046     	5:  mov r0,r2 
 4305 135e 4FF00A01 	    mov r1,#10
 4306 1362 00B5FFF7 	    _CALL print_int 
 4306      FEFF5DF8 
 4306      04EB
 4307 136c 4048     	    ldr r0,=dict_words
 4308 136e 00B5FFF7 	    _CALL uart_puts  
 4308      FEFF5DF8 
 4308      04EB
 4309 1378 7047     	9:  _RET 
 4310              	
 4311 137a 776F7264 	dict_words: .asciz "words in dictionary" 
 4311      7320696E 
 4311      20646963 
 4311      74696F6E 
 4311      61727900 
 4312              	
 4313              	
 4314              	/**************************************
 4315              	  BASIC: XOR(expr1,expr2)
 4316              	  binary exclusive or between 2 expressions
 4317              	**************************************/
 4318 138e 00BF     	    _FUNC bit_xor
 4319 1390 00B5FFF7 	    _CALL func_args
 4319      FEFF5DF8 
 4319      04EB
 4320 139a 0228     	    cmp r0,#2
 4321 139c 7FF4FEAF 	    bne syntax_error
 4322 13a0 5CF8040B 	    _POP r0
 4323 13a4 5CF8041B 	    _POP r1 
 4324 13a8 81EA0001 	    eor r1,r0 
 4325 13ac 4FF01B00 	    mov r0,#TK_INTGR
 4326 13b0 7047     	    _RET 
 4327              	
 4328              	/***************************************
 4329              	    BASIC: XPOS 
 4330              	    report cursor column on terminal 
 4331              	***************************************/
 4332 13b2 00BF     	    _FUNC xpos 
 4333 13b4 00B5FFF7 	    _CALL get_curpos
 4333      FEFF5DF8 
 4333      04EB
 4334 13be 4FF01B00 	    mov r0,#TK_INTGR
 4335 13c2 7047     	    _RET 
 4336              	
 4337              	/***********************************
ARM GAS  tinyBasic.s 			page 110


 4338              	    BASIC: YPOS 
 4339              	    report cursor line on terminal 
 4340              	***********************************/
 4341              	    _FUNC ypos 
 4342 13c4 00B5FFF7 	    _CALL get_curpos 
 4342      FEFF5DF8 
 4342      04EB
 4343 13ce 0146     	    mov r1,r0 
 4344 13d0 4FF01B00 	    mov r0,#TK_INTGR
 4345 13d4 7047     	    _RET 
 4346              	
 4347              	
 4348              	/**********************************
 4349              	     argument stack manipulation
 4350              	**********************************/
 4351              	
 4352              	/**********************************
 4353              	  BASIC PUSH expr[,expr] 
 4354              	  push integers on stack 
 4355              	*********************************/
 4356 13d6 00BF     	    _FUNC cmd_push 
 4357 13d8 00B5FFF7 	    _CALL arg_list
 4357      FEFF5DF8 
 4357      04EB
 4358 13e2 7047     	    _RET 
 4359              	
 4360              	/********************************
 4361              	  BASIC: POP 
 4362              	  pop an integer out of stack 
 4363              	********************************/    
 4364              	    _FUNC fn_pop 
 4365 13e4 5CF8041B 	    _POP r1 
 4366 13e8 4FF01B00 	    mov r0,#TK_INTGR 
 4367 13ec 7047     	    _RET 
 4368              	
 4369              	/*******************************
 4370              	  BASIC: DROP n 
 4371              	  discard n integer from stack
 4372              	*******************************/
 4373 13ee 00BF     	    _FUNC drop 
 4374 13f0 00B5FFF7 	    _CALL expression 
 4374      FEFF5DF8 
 4374      04EB
 4375 13fa 1B28     	    cmp r0,#TK_INTGR 
 4376 13fc 7FF4FEAF 	    bne syntax_error 
 4377 1400 4FF00400 	    mov r0,#4 
 4378 1404 01FB00F0 	    mul r0,r1 
 4379 1408 8444     	    add DP,r0 
 4380 140a 7047     	    _RET 
 4381              	
 4382              	/********************************
 4383              	  BASIC: GET(expr) 
 4384              	  retreive nth element from stack 
 4385              	********************************/
 4386              	    _FUNC get 
 4387 140c 00B5FFF7 	    _CALL func_args
 4387      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 111


 4387      04EB
 4388 1416 0128     	    cmp r0,#1 
 4389 1418 7FF4FEAF 	    bne syntax_error 
 4390 141c 5CF8040B 	    _POP r0
 4391 1420 4FF00401 	    mov r1,#4 
 4392 1424 01FB00F0 	    mul r0,r1 
 4393 1428 5CF80010 	    ldr r1,[DP,r0]
 4394 142c 4FF01B00 	    mov r0,#TK_INTGR
 4395 1430 7047     	    _RET 
 4396              	
 4397              	/*************************************
 4398              	  BASIC: PUT value,n  
 4399              	  store value at nth position on stack
 4400              	**************************************/
 4401 1432 00BF     	    _FUNC put
 4402 1434 00B5FFF7 	    _CALL arg_list 
 4402      FEFF5DF8 
 4402      04EB
 4403 143e 0228     	    cmp r0,#2 
 4404 1440 7FF4FEAF 	    bne syntax_error 
 4405 1444 5CF8040B 	    _POP r0 
 4406 1448 4FF00401 	    mov r1,#4 
 4407 144c 01FB00F0 	    mul r0,r1 
 4408 1450 5CF8041B 	    _POP r1
 4409 1454 4CF80010 	    str r1,[DP,r0]
 4410 1458 7047     	    _RET 
 4411              	
 4412              	
 4413 145a 0000     	  .section .rodata.user
 4414              	  .p2align 10 
 4415              	user:
 4416 0000 FFFFFFFF 	  .space 1024,255
 4416      FFFFFFFF 
 4416      FFFFFFFF 
 4416      FFFFFFFF 
 4416      FFFFFFFF 
 4417              	
 4418              	/*************************************************
 4419              	   extra FLASH memory not used by Tiny BASIC
 4420              	   is used to save BASIC programs.
 4421              	************************************************/
 4422              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4423              	  .section .rodata.fs
 4424              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 112


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 113


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 114


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:192    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:193    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:194    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:195    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:196    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:197    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:198    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:199    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:200    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:201    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:202    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:203    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:204    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:205    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:206    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:207    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:208    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:209    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:210    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:211    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:212    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:215    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:216    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:217    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:218    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:220    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:221    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:222    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:223    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:224    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:225    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:226    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:227    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:228    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:229    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:230    *ABS*:0000000000000028 TIM_PSC
ARM GAS  tinyBasic.s 			page 115


       stm32f103.inc:231    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:232    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:233    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:234    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:235    *ABS*:000000000000004c TIM_DMAR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
ARM GAS  tinyBasic.s 			page 116


           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
ARM GAS  tinyBasic.s 			page 117


      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AWU_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BIT_IDX
ARM GAS  tinyBasic.s 			page 118


       cmd_index.inc:32     *ABS*:0000000000000007 BRES_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BSET_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BTEST_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTOGL_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CHAR_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CLS_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CONST_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATA_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DEC_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DIR_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DO_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DROP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DUMP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 END_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 ERASE_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FOR_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FORGET_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FREE_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GET_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOSUB_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOTO_IDX
       cmd_index.inc:53     *ABS*:000000000000001c HEX_IDX
       cmd_index.inc:54     *ABS*:000000000000001d IF_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IN_IDX
       cmd_index.inc:56     *ABS*:000000000000001f INPUT_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INVERT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 KEY_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LET_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LIST_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LOAD_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOCATE_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LSHIFT_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NEW_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEXT_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NOT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a OR_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OUT_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PAD_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAUSE_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PMODE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE8_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE16_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE32_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POP_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PRT_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PUSH_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUT_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 QKEY_IDX
       cmd_index.inc:83     *ABS*:000000000000003a READ_IDX
       cmd_index.inc:84     *ABS*:000000000000003b REM_IDX
       cmd_index.inc:85     *ABS*:000000000000003c REST_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RET_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RND_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RSHIFT_IDX
ARM GAS  tinyBasic.s 			page 119


       cmd_index.inc:89     *ABS*:0000000000000040 RUN_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SAVE_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SERVO_INIT_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SERVO_POS_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SLEEP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SPC_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 STEP_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 STOP_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 STORE_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TAB_IDX
       cmd_index.inc:99     *ABS*:000000000000004a THEN_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TICKS_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TIMER_IDX
       cmd_index.inc:102    *ABS*:000000000000004d TMROUT_IDX
       cmd_index.inc:103    *ABS*:000000000000004e TO_IDX
       cmd_index.inc:104    *ABS*:000000000000004f TRACE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 UBOUND_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 UFLASH_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 UNTIL_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 WAIT_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 WORDS_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 XOR_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 XPOS_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1769   .text:0000000000000e44 next_token
         tinyBasic.s:381    .text:00000000000002c4 search_label
         tinyBasic.s:2016   .text:0000000000001090 expression
         tinyBasic.s:1323   .text:0000000000000a58 syntax_error
         tinyBasic.s:419    .text:00000000000002ec search_lineno
         tinyBasic.s:1338   .text:0000000000000a60 tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:450    .text:000000000000030c delete_line
         tinyBasic.s:475    .text:0000000000000338 create_gap
         tinyBasic.s:500    .text:0000000000000360 insert_line
         tinyBasic.s:539    .text:00000000000003b0 compile
ARM GAS  tinyBasic.s 			page 120


         tinyBasic.s:1675   .text:0000000000000da0 pad
         tinyBasic.s:869    .text:00000000000006b8 parse_int
         tinyBasic.s:612    .text:0000000000000458 comp_token
         tinyBasic.s:695    .text:000000000000055e store_r0
         tinyBasic.s:963    .text:0000000000000758 skip
         tinyBasic.s:1048   .text:00000000000007c0 is_letter
         tinyBasic.s:779    .text:00000000000005f0 comp_label
         tinyBasic.s:704    .text:000000000000057e token_exit
         tinyBasic.s:686    .text:000000000000053a tick2
         tinyBasic.s:722    .text:0000000000000584 is_special
         tinyBasic.s:744    .text:00000000000005c8 token_ofs
         tinyBasic.s:635    .text:00000000000004b2 tok_idx0
         tinyBasic.s:698    .text:0000000000000564 try_number
         tinyBasic.s:639    .text:00000000000004b4 single
         tinyBasic.s:739    .text:00000000000005b9 tok_single
         tinyBasic.s:643    .text:00000000000004bc lt
         tinyBasic.s:649    .text:00000000000004ca gt
         tinyBasic.s:662    .text:00000000000004ee bkslash
         tinyBasic.s:669    .text:0000000000000504 prt_cmd
         tinyBasic.s:675    .text:0000000000000516 quote
         tinyBasic.s:902    .text:00000000000006f0 parse_quote
         tinyBasic.s:680    .text:000000000000052a tick
         tinyBasic.s:736    .text:00000000000005a4 char_list
         tinyBasic.s:737    .text:00000000000005a4 $d
         tinyBasic.s:745    .text:00000000000005c8 $d
         tinyBasic.s:762    .text:00000000000005f0 $t
         tinyBasic.s:982    .text:0000000000000770 upper
         tinyBasic.s:2338   .rodata.dictionary:00000000000007dc kword_dict
         tinyBasic.s:1490   .text:0000000000000bdc search_dict
         tinyBasic.s:836    .text:000000000000068c compress_label
         tinyBasic.s:1079   .text:00000000000007e0 atoi
         tinyBasic.s:933    .text:0000000000000724 get_escaped_char
         tinyBasic.s:950    .text:000000000000074e escaped
         tinyBasic.s:950    .text:000000000000074e $d
         tinyBasic.s:963    .text:0000000000000756 $t
         tinyBasic.s:1000   .text:0000000000000780 is_digit
         tinyBasic.s:1024   .text:000000000000079c is_hex
         tinyBasic.s:1124   .text:000000000000082c cmd_name
         tinyBasic.s:1153   .text:0000000000000858 decompile_line
         tinyBasic.s:1170   .text:000000000000089e decomp_loop
         tinyBasic.s:1283   .text:0000000000000a2d single_char
         tinyBasic.s:1278   .text:0000000000000a18 relop_str
         tinyBasic.s:1278   .text:0000000000000a18 $d
         tinyBasic.s:1279   .text:0000000000000a24 ge_str
         tinyBasic.s:1280   .text:0000000000000a27 le_str
         tinyBasic.s:1281   .text:0000000000000a2a ne_str
         tinyBasic.s:1300   .text:0000000000000a40 modulo
         tinyBasic.s:1371   .text:0000000000000af0 compile_error
         tinyBasic.s:1342   .text:0000000000000a68 rt_error
         tinyBasic.s:1386   .text:0000000000000b42 rt_error_msg
         tinyBasic.s:1390   .text:0000000000000b62 err_msg
         tinyBasic.s:1387   .text:0000000000000b53 token_at_msg
         tinyBasic.s:2833   .text.basic:000000000000044c dump01
         tinyBasic.s:1688   .text:0000000000000db0 warm_start
         tinyBasic.s:1386   .text:0000000000000b42 $d
         tinyBasic.s:1398   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1399   .rodata.tb_error:000000000000000d err_syntax
ARM GAS  tinyBasic.s 			page 121


         tinyBasic.s:1400   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1401   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1402   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1403   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1404   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1405   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1406   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1407   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1408   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1409   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1410   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1411   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1412   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1413   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1415   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1416   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1417   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1427   .text:0000000000000ba6 $t
         tinyBasic.s:1427   .text:0000000000000ba8 skip_line
         tinyBasic.s:1444   .text:0000000000000bb0 BTGL
         tinyBasic.s:1462   .text:0000000000000bb4 kword_cmp
         tinyBasic.s:1528   .text:0000000000000c1a cold_start
         tinyBasic.s:1551   .text:0000000000000c78 src_addr
         tinyBasic.s:1553   .text:0000000000000c7c dest_addr
         tinyBasic.s:1674   .text:0000000000000d9c tib
         tinyBasic.s:1555   .text:0000000000000c80 sysvar_size
         tinyBasic.s:1566   .text:0000000000000c84 prt_version
         tinyBasic.s:1622   .text:0000000000000d28 clear_basic
         tinyBasic.s:3671   .text.basic:0000000000000cb0 search_free
         tinyBasic.s:1552   .text:0000000000000c78 $d
         tinyBasic.s:2194   .rodata:0000000000000000 uzero
         tinyBasic.s:2220   .rodata:00000000000000d4 ulast
         tinyBasic.s:1566   .text:0000000000000c84 $t
         tinyBasic.s:1589   .text:0000000000000ce8 version_msg
         tinyBasic.s:1591   .text:0000000000000d08 version
         tinyBasic.s:1590   .text:0000000000000ce8 $d
         tinyBasic.s:1606   .text:0000000000000d0c clear_vars
         tinyBasic.s:1657   .text:0000000000000d70 warm_init
         tinyBasic.s:1673   .text:0000000000000d98 dstack
         tinyBasic.s:1672   .text:0000000000000d94 mstack
         tinyBasic.s:1672   .text:0000000000000d94 $d
         tinyBasic.s:1676   .text:0000000000000da4 array
         tinyBasic.s:1677   .text:0000000000000da8 ready
         tinyBasic.s:1708   .text:0000000000000dc8 cmd_line
         tinyBasic.s:1720   .text:0000000000000dfc interpreter
         tinyBasic.s:1753   .text:0000000000000e3c execute
         tinyBasic.s:3166   .text.basic:000000000000079e let_var
         tinyBasic.s:3171   .text.basic:00000000000007aa let_array
         tinyBasic.s:2347   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1825   .text:0000000000000ebc expect
         tinyBasic.s:1844   .text:0000000000000ed8 func_args
         tinyBasic.s:1864   .text:0000000000000f04 arg_list
         tinyBasic.s:1896   .text:0000000000000f40 factor
         tinyBasic.s:2123   .text:0000000000001168 get_array_element
         tinyBasic.s:2161   .text:0000000000001190 get_var
         tinyBasic.s:1964   .text:000000000000101c term
         tinyBasic.s:2058   .text:00000000000010ec relation
ARM GAS  tinyBasic.s 			page 122


         tinyBasic.s:2105   .text:0000000000001160 relop_jmp
         tinyBasic.s:2077   .text:0000000000001132 rel_idx0
         tinyBasic.s:2078   .text:0000000000001132 rel_eq
         tinyBasic.s:2095   .text:0000000000001148 rel_false
         tinyBasic.s:2081   .text:0000000000001136 rel_gt
         tinyBasic.s:2084   .text:000000000000113a rel_ge
         tinyBasic.s:2087   .text:000000000000113e rel_lt
         tinyBasic.s:2090   .text:0000000000001142 rel_le
         tinyBasic.s:2093   .text:0000000000001146 rel_ne
         tinyBasic.s:2106   .text:0000000000001160 $d
         tinyBasic.s:2123   .text:0000000000001166 $t
         tinyBasic.s:2143   .text:000000000000117c set_array_element
         tinyBasic.s:2179   .text:00000000000011a0 set_var
         tinyBasic.s:4424   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2215   .rodata:0000000000000050 $d
         tinyBasic.s:2228   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2227   *ABS*:0000000000000000 link
         tinyBasic.s:2339   .rodata.dictionary:00000000000007dc LINK
         tinyBasic.s:2229   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2334   .rodata.dictionary:00000000000007d0 first_link
         tinyBasic.s:2381   .text.basic:0000000000000000 abs
         tinyBasic.s:2400   .text.basic:000000000000002c analog_read
         tinyBasic.s:2424   .text.basic:0000000000000064 adc
         tinyBasic.s:2455   .text.basic:00000000000000c4 bit_and
         tinyBasic.s:2470   .text.basic:00000000000000e8 ascii
         tinyBasic.s:2499   .text.basic:000000000000013c awu
         tinyBasic.s:2539   .text.basic:00000000000001a4 bitmask
         tinyBasic.s:2561   .text.basic:00000000000001c8 bit_reset
         tinyBasic.s:2586   .text.basic:00000000000001f4 bit_set
         tinyBasic.s:2626   .text.basic:0000000000000244 bit_test
         tinyBasic.s:2610   .text.basic:000000000000021c bit_toggle
         tinyBasic.s:2658   .text.basic:0000000000000290 char
         tinyBasic.s:2650   .text.basic:0000000000000284 cls
         tinyBasic.s:2675   .text.basic:00000000000002b0 const
         tinyBasic.s:2802   .text.basic:0000000000000414 dec_base
         tinyBasic.s:3736   .text.basic:0000000000000d1c directory
         tinyBasic.s:2811   .text.basic:000000000000041c do_loop
         tinyBasic.s:4373   .text.basic:00000000000013f0 drop
         tinyBasic.s:2826   .text.basic:0000000000000424 dump
         tinyBasic.s:2870   .text.basic:00000000000004cc cmd_end
         tinyBasic.s:2898   .text.basic:000000000000050c erase
         tinyBasic.s:2909   .text.basic:0000000000000520 for
         tinyBasic.s:3776   .text.basic:0000000000000dd4 forget
         tinyBasic.s:3939   .text.basic:0000000000000ff0 free
         tinyBasic.s:4386   .text.basic:000000000000140c get
         tinyBasic.s:2990   .text.basic:00000000000005dc gosub
         tinyBasic.s:3016   .text.basic:000000000000061c goto
         tinyBasic.s:3024   .text.basic:0000000000000628 hex_base
         tinyBasic.s:3033   .text.basic:0000000000000630 if
         tinyBasic.s:3316   .text.basic:0000000000000964 pin_input
         tinyBasic.s:3055   .text.basic:0000000000000648 input_var
         tinyBasic.s:3130   .text.basic:0000000000000754 invert
         tinyBasic.s:3143   .text.basic:0000000000000774 key
         tinyBasic.s:3159   .text.basic:0000000000000788 let
         tinyBasic.s:3202   .text.basic:0000000000000814 list
         tinyBasic.s:3805   .text.basic:0000000000000e20 load
         tinyBasic.s:3253   .text.basic:00000000000008c4 locate
ARM GAS  tinyBasic.s 			page 123


         tinyBasic.s:3267   .text.basic:00000000000008e8 lshift
         tinyBasic.s:3281   .text.basic:0000000000000908 new
         tinyBasic.s:2954   .text.basic:0000000000000584 next
         tinyBasic.s:3290   .text.basic:0000000000000928 func_not
         tinyBasic.s:3302   .text.basic:0000000000000940 bit_or
         tinyBasic.s:3334   .text.basic:0000000000000990 out
         tinyBasic.s:3351   .text.basic:00000000000009b8 pad_ref
         tinyBasic.s:3362   .text.basic:00000000000009c4 pause
         tinyBasic.s:3391   .text.basic:00000000000009e0 pin_mode
         tinyBasic.s:3425   .text.basic:0000000000000a40 peek8
         tinyBasic.s:3438   .text.basic:0000000000000a5c peek16
         tinyBasic.s:3451   .text.basic:0000000000000a78 peek32
         tinyBasic.s:3465   .text.basic:0000000000000a94 poke8
         tinyBasic.s:3477   .text.basic:0000000000000aac poke16
         tinyBasic.s:3489   .text.basic:0000000000000ac4 poke32
         tinyBasic.s:4364   .text.basic:00000000000013e4 fn_pop
         tinyBasic.s:3503   .text.basic:0000000000000adc print
         tinyBasic.s:4356   .text.basic:00000000000013d8 cmd_push
         tinyBasic.s:4401   .text.basic:0000000000001434 put
         tinyBasic.s:3575   .text.basic:0000000000000bcc qkey
         tinyBasic.s:2710   .text.basic:0000000000000334 read
         tinyBasic.s:2760   .text.basic:00000000000003a8 restore
         tinyBasic.s:3005   .text.basic:0000000000000604 return
         tinyBasic.s:3587   .text.basic:0000000000000be8 random
         tinyBasic.s:3610   .text.basic:0000000000000c2c rshift
         tinyBasic.s:3623   .text.basic:0000000000000c4c run
         tinyBasic.s:3858   .text.basic:0000000000000eb0 save
         tinyBasic.s:3954   .text.basic:0000000000001004 servo_init
         tinyBasic.s:4037   .text.basic:00000000000010ec servo_pos
         tinyBasic.s:4069   .text.basic:0000000000001148 sleep
         tinyBasic.s:4083   .text.basic:0000000000001168 spc
         tinyBasic.s:2940   .text.basic:000000000000056c step
         tinyBasic.s:4112   .text.basic:00000000000011a0 stop
         tinyBasic.s:2878   .text.basic:00000000000004d4 store
         tinyBasic.s:4134   .text.basic:00000000000011e4 tab
         tinyBasic.s:3044   .text.basic:0000000000000644 then
         tinyBasic.s:4150   .text.basic:000000000000120c get_ticks
         tinyBasic.s:4159   .text.basic:0000000000001214 set_timer
         tinyBasic.s:4171   .text.basic:0000000000001228 timeout
         tinyBasic.s:2927   .text.basic:0000000000000554 to
         tinyBasic.s:4200   .text.basic:0000000000001254 trace
         tinyBasic.s:4216   .text.basic:0000000000001270 ubound
         tinyBasic.s:4228   .text.basic:0000000000001288 uflash
         tinyBasic.s:4239   .text.basic:0000000000001290 until
         tinyBasic.s:4254   .text.basic:00000000000012b0 wait
         tinyBasic.s:4279   .text.basic:00000000000012e4 words
         tinyBasic.s:4318   .text.basic:0000000000001390 bit_xor
         tinyBasic.s:4332   .text.basic:00000000000013b4 xpos
         tinyBasic.s:4341   .text.basic:00000000000013c4 ypos
         tinyBasic.s:2381   .text.basic:0000000000000000 $t
         tinyBasic.s:2393   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2411   .text.basic:0000000000000052 adc_loop
         tinyBasic.s:2439   .text.basic:000000000000009e adc_off
         tinyBasic.s:2430   .text.basic:000000000000007a adc_on
         tinyBasic.s:2491   .text.basic:0000000000000138 autorun
         tinyBasic.s:3355   .text.basic:00000000000009c0 pad_adr
         tinyBasic.s:2736   .text.basic:0000000000000380 seek_next
ARM GAS  tinyBasic.s 			page 124


         tinyBasic.s:2791   .text.basic:0000000000000406 no_data_line
         tinyBasic.s:2787   .text.basic:0000000000000400 try_next_line
         tinyBasic.s:2844   .text.basic:000000000000046c print_dump_header
         tinyBasic.s:2902   .text.basic:000000000000051c user_space
         tinyBasic.s:2902   .text.basic:000000000000051c $d
         tinyBasic.s:4415   .rodata.user:0000000000000000 user
         tinyBasic.s:2909   .text.basic:0000000000000520 $t
         tinyBasic.s:2993   .text.basic:00000000000005ea target
         tinyBasic.s:3123   .text.basic:0000000000000750 str_buffer
         tinyBasic.s:3122   .text.basic:000000000000074c input_buffer
         tinyBasic.s:3122   .text.basic:000000000000074c $d
         tinyBasic.s:3130   .text.basic:0000000000000754 $t
         tinyBasic.s:3247   .text.basic:00000000000008c0 out_buff
         tinyBasic.s:3247   .text.basic:00000000000008c0 $d
         tinyBasic.s:3253   .text.basic:00000000000008c4 $t
         tinyBasic.s:3355   .text.basic:00000000000009c0 $d
         tinyBasic.s:3362   .text.basic:00000000000009c4 $t
         tinyBasic.s:3560   .text.basic:0000000000000ba8 unget_exit
         tinyBasic.s:3562   .text.basic:0000000000000bb0 print_exit
         tinyBasic.s:3724   .text.basic:0000000000000d18 fs_addr
         tinyBasic.s:3699   .text.basic:0000000000000cd4 search_file
         tinyBasic.s:3703   .text.basic:0000000000000cdc cmp_loop
         tinyBasic.s:3724   .text.basic:0000000000000d18 $d
         tinyBasic.s:3736   .text.basic:0000000000000d1c $t
         tinyBasic.s:3759   .text.basic:0000000000000d94 no_more_file
         tinyBasic.s:3769   .text.basic:0000000000000dcc fcount
         tinyBasic.s:3769   .text.basic:0000000000000dcc $d
         tinyBasic.s:3931   .text.basic:0000000000000fdc fsize
         tinyBasic.s:3932   .text.basic:0000000000000fe8 data_bytes
         tinyBasic.s:3876   .text.basic:0000000000000ef8 new_file
         tinyBasic.s:3931   .text.basic:0000000000000fdc $d
         tinyBasic.s:3939   .text.basic:0000000000000fee $t
         tinyBasic.s:3978   .text.basic:0000000000001056 setup_pwm3
         tinyBasic.s:4094   .text.basic:0000000000001190 spi_read
         tinyBasic.s:4097   .text.basic:0000000000001194 spi_enable
         tinyBasic.s:4100   .text.basic:0000000000001198 spi_select
         tinyBasic.s:4103   .text.basic:000000000000119c spi_write
         tinyBasic.s:4184   .text.basic:000000000000123c tone
         tinyBasic.s:4311   .text.basic:000000000000137a dict_words
         tinyBasic.s:4311   .text.basic:000000000000137a $d
         tinyBasic.s:4318   .text.basic:000000000000138e $t
         tinyBasic.s:4414   .rodata.user:0000000000000000 $d
         tinyBasic.s:4413   .text.basic:000000000000145a $d
         tinyBasic.s:4424   .text.basic:000000000000145c $d
         tinyBasic.s:4424   .text:00000000000011b0 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:743    .text:00000000000005c7 $d
         tinyBasic.s:1300   .text:0000000000000a3d $d
         tinyBasic.s:1300   .text:0000000000000a3e $t
         tinyBasic.s:1593   .text:0000000000000d09 $d
         tinyBasic.s:1593   .text:0000000000000d0a $t
         tinyBasic.s:1688   .text:0000000000000daf $d
         tinyBasic.s:1688   .text:0000000000000db0 $t
         tinyBasic.s:3776   .text.basic:0000000000000dd3 $d
ARM GAS  tinyBasic.s 			page 125


         tinyBasic.s:3776   .text.basic:0000000000000dd4 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
get_curpos
