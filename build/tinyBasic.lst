ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  74              	  .equ TK_GE,0x33      // relation operator '>='
  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<='
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
ARM GAS  tinyBasic.s 			page 7


  85              	
  86              	//--------------------------------------
  87              	//   error codes 
  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	  .equ ARRAY_ADR,FREE_RAM+4 // array address at bottom of pad  
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  .macro _UNGET_TOKEN 
 236              	  ldr IN,[UPP,#IN_SAVED]
 237              	  ldr BPTR,[UPP,#BASICPTR] 
 238              	  .endm 
 239              	
 240              	 // create a text data 
 241              	 .macro _TEXT label,text
 242              	 \label: .asciz "\text"
 243              	 .p2align 2 
 244              	 .endm 
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
ARM GAS  tinyBasic.s 			page 10


  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
ARM GAS  tinyBasic.s 			page 11


  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
ARM GAS  tinyBasic.s 			page 12


 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
ARM GAS  tinyBasic.s 			page 13


  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
ARM GAS  tinyBasic.s 			page 14


 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
ARM GAS  tinyBasic.s 			page 15


 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
ARM GAS  tinyBasic.s 			page 16


 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	    dump 
 239              	    print memory content in hexadecimal 
 240              	    16 bytes per row 
 241              	    input:
 242              	      r0  address 
 243              	      r1  count 
 244              	    ouput:
 245              	      none 
 246              	    use:
 247              	
 248              	****************************************/
 249              	    _FUNC dump 
 250 0150 04B4     	    push {r2}
 251 0152 0A46     	    mov r2,r1 
 252 0154 4FF01001 	1:  mov r1,#16
 253 0158 00B5FFF7 	    _CALL prt_row 
 253      B5FF5DF8 
 253      04EB
 254 0162 103A     	    subs r2,#16 
 255 0164 F6D5     	    bpl 1b 
 256 0166 04BC     	2:  pop {r2}
 257 0168 7047     	    _RET 
 258              	
 259              	/***************************************
 260              	    search_lineno 
 261              	    localize BASIC line from its number 
 262              	    input:
 263              	      r0   line# 
 264              	    output: 
 265              	      r0   adr where found || adr new to be inserted 
 266              	      r1   0 found || !0 not found  
 267              	    use:
 268              	      r0   scan address 
 269              	      r1   temp   
 270              	      r2   address end of text
 271              	      r3   target line#
 272              	****************************************/    
 273 016a 00BF     	    _FUNC search_lineno
 274 016c 0CB4     	    push {r2,r3} 
 275 016e 0346     	    mov r3,r0 // target 
 276 0170 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 277 0172 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 278 0174 9042     	1:  cmp r0,r2 
 279 0176 05D0     	    beq  8f
 280 0178 0188     	    ldrh r1,[r0]
 281 017a C91A     	    subs r1,r3 
 282 017c 04D5     	    bpl 9f 
 283 017e 8178     	    ldrb r1,[r0,#2]
 284 0180 0844     	    add r0,r1
 285 0182 F7E7     	    b 1b 
 286 0184 4FF0FF31 	8:  mov r1,#-1 
ARM GAS  tinyBasic.s 			page 17


 287 0188 0CBC     	9:  pop {r2,r3}
 288 018a 7047     	    _RET 
 289              	
 290              	
 291              	/********************************************
 292              	    delete_line 
 293              	    delete BASIC line at addr 
 294              	    input:
 295              	      r0    address 
 296              	    output:
 297              	      r0    address  
 298              	    use: 
 299              	      r1    dest adr
 300              	      r2    bytes to move 
 301              	      T1    length line to delete 
 302              	      T2    txtend 
 303              	********************************************/
 304              	    _FUNC delete_line 
 305 018c 2DE90703 	    push {r0,r1,r2,T1,T2}
 306 0190 0146     	    mov r1,r0 // dest 
 307 0192 91F80280 	    ldrb T1,[r1,#2] // line length 
 308 0196 4044     	    add r0,T1  // src
 309 0198 D4F83490 	    ldr T2,[UPP,#TXTEND]
 310 019c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 311 01a0 00B5FFF7 	    _CALL cmove
 311      FEFF5DF8 
 311      04EB
 312 01aa A9EB0809 	    sub T2,T1 // txtend-count 
 313 01ae C4F83480 	    str T1,[UPP,#TXTEND] 
 314 01b2 BDE80703 	    pop {r0,r1,r2,T1,T2}
 315 01b6 7047     	    _RET 
 316              	
 317              	/******************************************
 318              	    create_gap 
 319              	    create a gap in text area to insert new line 
 320              	    input:
 321              	      r0    adr 
 322              	      r1    length 
 323              	    output:
 324              	      r0    adr 
 325              	    use:
 326              	      T1    length 
 327              	      T2    txtend 
 328              	************************************************/
 329              	    _FUNC create_gap 
 330 01b8 2DE90503 	    push {r0,r2,T1,T2}
 331 01bc 8846     	    mov T1,R1
 332 01be 0144     	    add r1,r0  // dest 
 333 01c0 D4F83490 	    ldr T2,[UPP,#TXTEND]
 334 01c4 A9EB0002 	    sub r2,T2,r0 
 335 01c8 00B5FFF7 	    _CALL cmove
 335      FEFF5DF8 
 335      04EB
 336 01d2 C144     	    add T2,T1 
 337 01d4 C4F83490 	    str T2,[UPP,#TXTEND]
 338 01d8 BDE80503 	    pop {r0,r2,T1,T2}
 339 01dc 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 18


 340              	
 341              	/************************************************
 342              	    insert_line 
 343              	    insert BASIC line in text area 
 344              	    first search if line with same number exist 
 345              	    replace if so. 
 346              	    input:
 347              	      r0    *buffer to insert 
 348              	    output:
 349              	      none 
 350              	    use: 
 351              	      T1     *buffer
 352              	      T2     temp  
 353              	************************************************/ 
 354 01de 00BF     	    _FUNC insert_line 
 355 01e0 2DE90203 	    push {r1,T1,T2}
 356 01e4 8046     	    mov T1,r0 
 357 01e6 B8F80000 	    ldrh r0,[T1]
 358 01ea 00B5FFF7 	    _CALL search_lineno 
 358      BEFF5DF8 
 358      04EB
 359 01f4 49B9     	    cbnz  r1, 1f // line# doesn't exist
 360              	// already exist 
 361 01f6 00B5FFF7 	    _CALL delete_line // delete old one 
 361      C8FF5DF8 
 361      04EB
 362 0200 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 363 0204 B9F1030F 	    cmp T2,#3 
 364 0208 0DD0     	    beq 9f
 365              	1: //insert new line 
 366 020a 98F80210 	    ldrb r1,[T1,#2]
 367 020e 00B5FFF7 	    _CALL create_gap 
 367      D2FF5DF8 
 367      04EB
 368 0218 4146     	    mov r1,T1 
 369 021a 8A78     	    ldrb r2,[r1,#2]
 370 021c 00B5FFF7 	    _CALL cmove 
 370      FEFF5DF8 
 370      04EB
 371 0226 BDE80203 	9:  pop {r1,T1,T2}
 372 022a 7047     	    _RET 
 373              	
 374              	/*********************************
 375              	    compile 
 376              	    tokenize source line save it 
 377              	    in pas buffer.
 378              	    compiled line format: 
 379              	      line_no  2 bytes {0...32767}
 380              	      count    1 byte  
 381              	      tokens   variable length 
 382              	  input:
 383              	     r0   *text buffer 
 384              	     r1   *text length   
 385              	  output:
 386              	    r0    0 stored | -1 immediate 
 387              	  use:
 388              	    r3    tib index   
ARM GAS  tinyBasic.s 			page 19


 389              	    T1    tib
 390              	    T2    pad
 391              	***********************************/
 392              	    _FUNC compile
 393 022c 8046     	    mov T1, r0  // source text buffer 
 394 022e 6160     	    str r1,[UPP,#COUNT] // save line length 
 395 0230 DFF8F095 	    ldr T2,pad // tokens buffer
 396 0234 83EA0303 	    eor r3,r3 // source index  
 397 0238 206C     	    ldr r0,[UPP,#FLAGS]
 398 023a 40F02000 	    orr r0,#FCOMP
 399 023e 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 400 0240 80EA0000 	    eor r0,r0     
 401 0244 29F8020B 	    strh r0,[T2],#2   // line no 
 402 0248 09F8010B 	    strb r0,[T2],#1 // length 
 403 024c 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 404 024e C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 405 0252 00B500F0 	    _CALL parse_int 
 405      DAF85DF8 
 405      04EB
 406 025c 07D0     	    beq 2f 
 407              	// this is a line number     
 408 025e 0129     	    cmp r1,#1 
 409 0260 02D5     	    bpl 1f 
 410 0262 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 411 0266 DDE1     	    b tb_error  
 412              	1:  // write line # to pad 
 413 0268 29F8031C 	    strh r1,[T2,#-3]
 414 026c 2360     	    str r3,[UPP,#IN_SAVED]
 415              	2:  // check for pad full 
 416 026e C145     	    cmp T2,T1
 417 0270 02DB     	    blt 3f 
 418 0272 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 419 0276 D5E1     	    b tb_error 
 420 0278 00B500F0 	3:  _CALL comp_token 
 420      1DF85DF8 
 420      04EB
 421 0282 0028     	    cmp r0,#TK_NONE 
 422 0284 01D0     	    beq 4f 
 423 0286 2360     	    str r3,[UPP,#IN_SAVED]
 424 0288 F1E7     	    b 2b 
 425              	4: // compilation completed 
 426 028a DFF89835 	    ldr r3,pad 
 427 028e A9EB0300 	    sub r0,T2,r3 // line length 
 428 0292 9870     	    strb r0,[r3,#2]
 429 0294 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 430 0296 1888     	    ldrh r0,[r3] // line number 
 431 0298 40B1     	    cbz r0,8f  
 432 029a 07D0     	    beq 8f 
 433              	// insert line in text buffer 
 434 029c 1846     	    mov r0,r3 
 435 029e 00B5FFF7 	    _CALL insert_line 
 435      9EFF5DF8 
 435      04EB
 436 02a8 4040     	    eors r0,r0 
 437 02aa 04E0     	    b 9f 
 438 02ac 9B46     	8:  mov BPTR,r3 // *token_list 
 439 02ae 4FF0030A 	    mov IN,#3 
ARM GAS  tinyBasic.s 			page 20


 440 02b2 4FF0FF30 	    mov r0,#-1 
 441 02b6 7047     	9:  _RET 
 442              	
 443              	/*********************************************
 444              	    compile next token from source 
 445              	    input: 
 446              	      r3 		tib index  
 447              	      T1    tib adr
 448              	      T2    insert point in pad  
 449              	    output:
 450              	      r0     token attribute 
 451              	      r1 		token value
 452              	      r3     tib index updated    
 453              	      T2     updated 
 454              	      use:
 455              	**********************************************/
 456              	    .macro _case c, next  
 457              	    cmp r0,#\c 
 458              	    bne \next
 459              	    .endm 
 460              	
 461              	    _FUNC comp_token 
 462 02b8 40B4     	    push {r6}
 463 02ba 18F80300 	    ldrb r0,[T1,r3]
 464 02be 0040     	    ands r0,r0 
 465 02c0 57D0     	    beq store_r0  // reached end of text  
 466 02c2 4FF02000 	    mov r0,#SPACE 
 467 02c6 00B500F0 	    _CALL skip  // skip spaces 
 467      12F95DF8 
 467      04EB
 468 02d0 18F80300 	    ldrb r0,[T1,r3]
 469 02d4 0040     	    ands r0,r0 
 470 02d6 4CD0     	    beq store_r0  // reached end of text 
 471 02d8 03F10103 	    add r3,#1 
 472 02dc 00B500F0 	    _CALL upper 
 472      0FF95DF8 
 472      04EB
 473 02e6 00B500F0 	    _CALL is_special
 473      5CF85DF8 
 473      04EB
 474 02f0 DFF83069 	    ldr r6,=token_ofs
 475 02f4 D6E811F0 	    tbh [r6,r1] 
 476              	tok_idx0:     
 477              	//  not special char.  
 478 02f8 3EE0     	    b try_number 
 479              	// single char token with no value 
 480              	single: 
 481 02fa DFF82C69 	    ldr r6,=tok_single
 482 02fe 705C     	    ldrb r0,[r6,r1] 
 483 0300 37E0     	    b store_r0  
 484              	lt:
 485 0302 4FF03400 	    mov r0,#TK_LT
 486 0306 01E0     	    b 1f 
 487              	gt:
 488 0308 4FF03100 	    mov r0,#TK_GT 
 489              	1: // check next char for '<'||'>'||'='
 490 030c 18F80310 	    ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 21


 491 0310 3C29     	    cmp r1,#'<'
 492 0312 00F08381 	    beq syntax_error 
 493 0316 3E29     	    cmp r1,#'>'
 494 0318 04D1     	    bne 2f
 495 031a 03F10103 	    add r3,#1
 496 031e 00F10100 	    add r0,#1 
 497 0322 26E0     	    b store_r0
 498 0324 3D29     	2:  cmp r1,#'=' 
 499 0326 3BD1     	    bne token_exit  
 500 0328 03F10103 	    add r3,#1
 501 032c 00F10200 	    add r0,#2
 502 0330 1FE0     	    b store_r0       
 503              	bkslash:
 504 0332 18F80310 	    ldrb r1,[T1,r3]
 505 0336 03F10103 	    add r3,#1
 506 033a 4FF00300 	    mov r0,#TK_CHAR 
 507 033e 2FE0     	    b token_exit 
 508              	prt_cmd: 
 509 0340 4FF00B00 	    mov r0,#TK_CMD 
 510 0344 4FF03A01 	    mov r1,#PRT_IDX 
 511 0348 2AE0     	    b token_exit 
 512              	quote:
 513 034a 00B500F0 	    _CALL parse_quote
 513      9AF85DF8 
 513      04EB
 514 0354 24E0     	    b token_exit
 515              	tick: 
 516              	// copy comment in pad 
 517 0356 08EB0300 	    add r0,T1,r3 
 518 035a 4946     	    mov r1,T2 
 519 035c 00B5FFF7 	    _CALL strcpy 
 519      FEFF5DF8 
 519      04EB
 520 0366 6368     	    ldr r3,[UPP,#COUNT]
 521 0368 4FF00B00 	    mov r0,#TK_CMD 
 522 036c 4FF04701 	    mov r1,#REM_IDX 
 523 0370 16E0     	    b token_exit
 524              	store_r0: 
 525 0372 09F8010B 	    strb r0,[T2],#1
 526 0376 13E0     	    b token_exit 
 527              	try_number:
 528 0378 A3F10103 	    sub r3,#1
 529 037c 00B500F0 	    _CALL parse_int  
 529      45F85DF8 
 529      04EB
 530 0386 04D0     	    beq 1f 
 531 0388 08F8010B 	    strb r0,[T1],#1 
 532 038c 48F8041B 	    str r1,[T1],#4
 533 0390 06E0     	    b token_exit 
 534 0392 00B500F0 	1:  _CALL parse_keyword 
 534      0CF95DF8 
 534      04EB
 535 039c 4729     	    cmp r1,#REM_IDX 
 536 039e DAD0     	    beq tick  
 537              	token_exit:
 538 03a0 40BC     	    pop {r6}
 539 03a2 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 22


 540              	
 541              	/****************************
 542              	    is_special  
 543              	    check for non alphanum
 544              	    input:
 545              	      r0    character to scan 
 546              	    output:
 547              	      r0    character 
 548              	      r1    0 || index 
 549              	    use: 
 550              	      r2    scan index 
 551              	      r3    char_list 
 552              	*****************************/
 553              	    _FUNC is_special 
 554 03a4 0CB4     	    push {r2,r3}
 555 03a6 4FF00102 	    mov r2,#1
 556 03aa DFF88038 	    ldr r3,=char_list 
 557 03ae 995C     	1:  ldrb r1,[r3,r2]
 558 03b0 21B1     	    cbz r1,9f 
 559 03b2 8842     	    cmp r0,r1 
 560 03b4 02D0     	    beq 9f 
 561 03b6 02F10102 	    add r2,#1 
 562 03ba F8E7     	    b 1b
 563 03bc 0CBC     	9:  pop {r2,r3}
 564 03be 7047     	    _RET 
 565              	
 566              	char_list:
 567 03c0 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 567      293A232D 
 567      2B2A2F25 
 567      3D3C3E5C 
 567      3F272200 
 568              	
 569              	tok_single:
 570 03d4 00090607 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 570      08010A
 571 03db 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 571      2232
 572              	
 573              	token_ofs:
 574 03e1 0000     	  .hword  0 // not found
 575              	  // TK_COMMA...TK_EQUAL , 13 
 576 03e3 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 576      01000100 
 577 03eb 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 577      01000100 
 578 03f3 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 578      01000100 
 579 03fb 0100     	  .hword  (single-tok_idx0)/2 // TK_EQUAL 
 580              	  // '<','>'
 581 03fd 05000800 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 582              	  // '\'
 583 0401 1D00     	  .hword  (bkslash-tok_idx0)/2
 584              	  // '?' 
 585 0403 2400     	  .hword  (prt_cmd-tok_idx0)/2 
 586              	  // "'"  
 587 0405 2F00     	  .hword  (tick-tok_idx0)/2 
ARM GAS  tinyBasic.s 			page 23


 588              	  // '"' quote 
 589 0407 2900     	  .hword (quote-tok_idx0)/2
 590              	
 591              	  
 592              	/****************************
 593              	    parse_int 
 594              	    parse an integer from text
 595              	    if not valid integer 
 596              	    r1 return *buffer else 
 597              	    *buffer is incremented after integer 
 598              	  input:
 599              	    r0   *buffer 
 600              	  output:
 601              	    r0   TK_INTGR|TK_NONE
 602              	    r1   int|0   
 603              	  use:
 604              	    r0   char 
 605              	    r1   save r3 
 606              	    r2   int
 607              	    r6   base 
 608              	    r7   digit count 
 609              	    r3   tib index   
 610              	    T1   *tib 
 611              	    T2   *pad  
 612              	*****************************/
 613 0409 0000BF   	    _FUNC parse_int 
 614 040c C0B4     	    push {r6,r7}
 615 040e 82EA0202 	    eor r2,r2 // int 
 616 0412 1946     	    mov r1,r3 
 617 0414 4FF00A06 	    mov r6,#10 // default base 
 618 0418 87EA0707 	    eor r7,r7 // digit count 
 619 041c 18F80300 	    ldrb r0,[T1,r3]
 620 0420 03F10103 	    add r3,#1 
 621 0424 00B500F0 	    _CALL upper 
 621      6BF85DF8 
 621      04EB
 622 042e 2428     	    cmp r0,'$' 
 623 0430 02D1     	    bne 2f 
 624 0432 4FF01006 	    mov r6,#16 // hexadecimal number 
 625 0436 03E0     	    b 3f  
 626 0438 2628     	2:  cmp r0,#'&' 
 627 043a 05D1     	    bne 4f
 628 043c 4FF00206 	    mov r6,#2 //binary number  
 629 0440 18F80300 	3:  ldrb r0,[T1,r3]
 630 0444 03F10103 	    add r3,#1
 631 0448 00B500F0 	4:  _CALL upper 
 631      59F85DF8 
 631      04EB
 632 0452 4128     	    cmp r0,#'A'
 633 0454 00D4     	    bmi 5f
 634 0456 0738     	    subs r0,#7  
 635 0458 3038     	5:  subs r0,#'0' 
 636 045a 07D4     	    bmi 6f // not digit   
 637 045c B042     	    cmp r0,r6 
 638 045e 05D5     	    bpl 6f // not digit 
 639 0460 06FB02F2 	    mul r2,r6 
 640 0464 0244     	    add r2,r0
ARM GAS  tinyBasic.s 			page 24


 641 0466 07F10107 	    add r7,#1  
 642 046a E9E7     	    b 3b
 643 046c 1FB1     	6:  cbz r7, 7f 
 644 046e 4FF00F00 	    mov r0,#TK_INTGR  
 645 0472 1146     	    mov r1,r2 
 646 0474 02E0     	    b 9f 
 647              	7: // not a number 
 648 0476 0B46     	    mov r3,r1 // restore r3 
 649 0478 80EA0000 	    eor r0,r0 // TK_NONE 
 650 047c 0040     	9:  ands r0,r0 // to set zero flag 
 651 047e C0BC     	    pop {r6,r7}
 652 0480 7047     	    _RET 
 653              	
 654              	/*********************************************
 655              	    parse_quote 
 656              	    parse quoted string 
 657              	    input: 
 658              	      r3 		tib index  
 659              	      T1    tib adr
 660              	      T2    insert point in pad  
 661              	    output:
 662              	      r0     token attribute 
 663              	      r1 		token value
 664              	      r3     tib index updated    
 665              	      T2     updated 
 666              	      use:
 667              	*********************************************/
 668 0482 00BF     	    _FUNC parse_quote
 669 0484 09F10109 	    add T2,#1
 670 0488 4DF8049D 	    push {T2} 
 671 048c 18F80300 	1:  ldrb r0,[T1,r3]
 672 0490 03F10103 	    add r3,#1 
 673 0494 2228     	    cmp r0,#'"'
 674 0496 0AD0     	    beq 9f 
 675 0498 5C28     	    cmp r0,#'\\'
 676 049a 05D1     	    bne 2f 
 677 049c 00B500F0 	    _CALL get_escaped_char 
 677      0DF85DF8 
 677      04EB
 678 04a6 F1E7     	    b 1b 
 679 04a8 09F8010B 	2:  strb r0,[T2],#1
 680 04ac EEE7     	    b 1b 
 681 04ae 4FF00200 	9:  mov r0,#TK_QSTR
 682 04b2 02BC     	    pop {r1}
 683 04b4 01F8010C 	    strb r0,[r1,#-1]
 684 04b8 7047     	    _RET 
 685              	
 686              	/**********************************************
 687              	    get_escaped_char 
 688              	    convert "\c" in quoted string 
 689              	    input:
 690              	      r0 
 691              	      r3   index 
 692              	      T1   tib 
 693              	      T2   pad 
 694              	    output:
 695              	      r3   updated 
ARM GAS  tinyBasic.s 			page 25


 696              	      T1   updated 
 697              	      T2   updated 
 698              	**********************************************/
 699 04ba 00BF     	    _FUNC get_escaped_char 
 700 04bc 18F80300 	    ldrb r0,[T1,r3]
 701 04c0 03F10103 	    add r3,#1
 702 04c4 2228     	    cmp r0,#'"' 
 703 04c6 02D1     	    bne 1f 
 704 04c8 09F8010B 	    strb r0,[T2],#1
 705 04cc 0BE0     	    b 9f 
 706 04ce DFF86017 	1:  ldr r1,=escaped 
 707 04d2 11F8012B 	2:  ldrb r2,[r1],#1
 708 04d6 22B1     	    cbz r2,8f 
 709 04d8 8242     	    cmp r2,r0 
 710 04da 00D0     	    beq 7f 
 711 04dc F9E7     	    b 2b
 712 04de 02F10700 	7:  add r0,r2,#7
 713 04e2 09F8010B 	8:  strb r0,[T2],#1    
 714              	9:     
 715 04e6 7047     	    _RET
 716              	
 717 04e8 6162746E 	escaped: .asciz "abtnvfr"
 717      76667200 
 718              	
 719              	/*********************************************
 720              	   skip character in TIB 
 721              	   input:
 722              	      r0    character to skip 
 723              	      r3    tib index 
 724              	      T1    tib adr
 725              	    output: 
 726              	      r3    updated 
 727              	**********************************************/   
 728              	    _FUNC skip 
 729 04f0 18F80310 	1:  ldrb r1,[T1,r3]
 730 04f4 03F10103 	    add r3,#1
 731 04f8 8142     	    cmp r1,r0
 732 04fa F9D0     	    beq 1b 
 733 04fc 2360     	    str r3,[UPP,#IN_SAVED]
 734 04fe 7047     	    _RET
 735              	
 736              	/********************************************
 737              	    upper
 738              	    convert character in upper case 
 739              	    input: 
 740              	      r0   character 
 741              	    output:
 742              	      r0   upper case character 
 743              	*********************************************/
 744              	    _FUNC upper 
 745 0500 6128     	    cmp r0,#'a' 
 746 0502 03DB     	    blt 9f 
 747 0504 7A28     	    cmp r0,#'z' 
 748 0506 01DC     	    bgt 9f 
 749 0508 00F05F00 	    and r0,#0x5f 
 750 050c 7047     	9:  _RET 
 751              	
ARM GAS  tinyBasic.s 			page 26


 752              	/***************************************
 753              	   is_digit 
 754              	   check if char is decimal digit.
 755              	   convert to decimal digit.
 756              	   input:
 757              	      r0    char 
 758              	   output:
 759              	      r0    if Z then converted digit 
 760              	      Z     0 true | 1 false  
 761              	***************************************/
 762 050e 00BF     	    _FUNC is_digit 
 763 0510 02B4     	    push {r1} 
 764 0512 81EA0101 	    eor r1,r1 
 765 0516 3038     	    subs r0,#'0' 
 766 0518 03DB     	    blt 9f
 767 051a 3A28     	    cmp r0,'9'+1
 768 051c 01D4     	    bmi 9f 
 769 051e 4FF0FF31 	    mov r1,#-1 
 770              	9:   
 771 0522 0940     	    ands r1,r1
 772 0524 02BC     	    pop {r1} 
 773 0526 7047     	    _RET 
 774              	
 775              	/***************************************
 776              	    is_hex 
 777              	    check for hexadecimal digit 
 778              	    convert to hex digit.
 779              	    input:
 780              	      r0    
 781              	    output:
 782              	      r0     if Z then converted digit 
 783              	      Z      0 true | 1 false         
 784              	***************************************/
 785              	    _FUNC is_hex 
 786 0528 02B4     	    push {r1}
 787 052a 4FF0FF31 	    mov r1,#-1 
 788 052e 4128     	    cmp r0,#'A' 
 789 0530 01D4     	    bmi 1f 
 790 0532 A0F10700 	    sub r0,#7 
 791 0536 A0F13000 	1:  sub r0,#'0'
 792 053a 01D4     	    bmi 2f 
 793 053c 1028     	    cmp r0,#16
 794 053e 01D4     	    bmi 9f 
 795 0540 81EA0101 	2:  eor r1,r1  
 796 0544 0940     	9:  ands r1,r1 
 797 0546 02BC     	    pop {r1}
 798 0548 7047     	    _RET 
 799              	
 800              	/***************************************
 801              	    is_bit 
 802              	    check if char is '0'|'1' 
 803              	    convert to binary digit. 
 804              	    input:
 805              	      r0    
 806              	    output:
 807              	      r0     if Z then converted digit 
 808              	      Z      0 true | 1 false         
ARM GAS  tinyBasic.s 			page 27


 809              	***************************************/
 810 054a 00BF     	    _FUNC is_bit
 811 054c 02B4     	    push  {r1}
 812 054e 4FF0FF31 	    mov r1,#-1 
 813 0552 A0F13000 	    sub r0,#'0' 
 814 0556 01D4     	    bmi 2f 
 815 0558 0229     	    cmp r1,#2
 816 055a 01D4     	    bmi 9f 
 817 055c 81EA0101 	2:  eor r1,r1 
 818 0560 0940     	9:  ands r1,r1 
 819 0562 02BC     	    pop {r1}
 820 0564 7047     	    _RET 
 821              	
 822              	/***************************************
 823              	    is_alpha 
 824              	    check if character is {A..Z} 
 825              	  input:
 826              	    r0   character 
 827              	  output: 
 828              	    r0    same character 
 829              	    Z    0 true | 1 false  
 830              	****************************************/
 831 0566 00BF     	    _FUNC is_alpha
 832 0568 02B4     	    push {r1} 
 833 056a 4FF0FF31 	    mov r1,#-1 
 834 056e 4128     	    cmp r0,#'A' 
 835 0570 01DB     	    blt 8f 
 836 0572 5B28     	    cmp r0,#'Z'+1 
 837 0574 01D4     	    bmi 9f 
 838 0576 81EA0101 	8:  eor r1,r1  
 839 057a 0940     	9:  ands r1,r1 
 840 057c 02BC     	    pop {r1}
 841 057e 7047     	    _RET 
 842              	
 843              	/***************************************
 844              	    is_num 
 845              	    check if character is {0..9} 
 846              	  input:
 847              	    r0   character 
 848              	  output: 
 849              	    r0    same character 
 850              	    Z    0 true | 1 false  
 851              	****************************************/
 852              	    _FUNC is_num 
 853 0580 02B4     	    push {r1} 
 854 0582 4FF0FF31 	    mov r1,#-1 
 855 0586 3028     	    cmp r0,#'0' 
 856 0588 01DB     	    blt 8f 
 857 058a 3A28     	    cmp r0,#'9'+1 
 858 058c 01D4     	    bmi 9f 
 859 058e 81EA0101 	8:  eor r1,r1  
 860 0592 0940     	9:  ands r1,r1 
 861 0594 02BC     	    pop {r1}
 862 0596 7047     	    _RET 
 863              	
 864              	/*****************************************
 865              	    is_alnum 
ARM GAS  tinyBasic.s 			page 28


 866              	    check if character is alphanumeric 
 867              	    input:
 868              	      r0 
 869              	    output:
 870              	      r0     same 
 871              	      Z      1 false | 0 true 
 872              	*****************************************/
 873              	    _FUNC is_alnum 
 874 0598 00B5FFF7 	    _CALL is_alpha 
 874      E5FF5DF8 
 874      04EB
 875 05a2 04D0     	    beq 9f 
 876 05a4 00B5FFF7 	    _CALL is_num 
 876      EBFF5DF8 
 876      04EB
 877 05ae 7047     	9:  _RET 
 878              	
 879              	
 880              	/*****************************************
 881              	    parse_keyword 
 882              	    parse work and ckeck if in dictionary 
 883              	    input:
 884              	      r0    first character 
 885              	      r3    tib index 
 886              	      t1    tib 
 887              	      t2    pad 
 888              	    output:
 889              	      r3    updated 
 890              	      t1    updated 
 891              	      t2    updated   
 892              	    use:
 893              	    
 894              	*****************************************/
 895              	    _FUNC parse_keyword 
 896 05b0 4DF8049D 	    push {T2}
 897 05b4 18F80300 	1:  ldrb r0,[T1,r3]
 898 05b8 03F10103 	    add r3,#1
 899 05bc 00B5FFF7 	    _CALL is_alnum
 899      EBFF5DF8 
 899      04EB
 900 05c6 02D1     	    bne 2f 
 901 05c8 09F8010B 	    strb r0,[T2],#1
 902 05cc F2E7     	    b 1b 
 903 05ce A3F10103 	2:  sub r3,#1
 904 05d2 80EA0000 	    eor r0,r0 
 905 05d6 89F80000 	    strb r0,[T2] 
 906 05da 0098     	    ldr r0,[sp]
 907 05dc DFF85416 	    ldr r1,=kword_dict  
 908 05e0 00B500F0 	    _CALL search_dict 
 908      63F85DF8 
 908      04EB
 909 05ea 00B9     	    cbnz r0,9f 
 910 05ec 16E0     	    b syntax_error 
 911 05ee 5DF8049B 	9:  pop {T2}
 912 05f2 09F8010B 	    strb r0,[T2],#1
 913 05f6 09F8011B 	    strb r1,[T2],#1
 914 05fa 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 29


 915              	
 916              	
 917              	/*******************
 918              	    DECOMPILER 
 919              	*******************/
 920              	
 921              	/**********************************
 922              	    cmd_name 
 923              	    reverse dictionary search 
 924              	    from CMD_IDX to NAME 
 925              	  input:
 926              	    r0    CMD_IDX 
 927              	  output:
 928              	    r0    *NAME | 0 
 929              	  use:
 930              	    r1    dictionary link
 931              	    r2    tmp 
 932              	**********************************/
 933              	    _FUNC cmd_name
 934 05fc 06B4     	    push {r1,r2}
 935 05fe DFF83416 	    ldr r1,=kword_dict  
 936 0602 0A78     	1:  ldrb r2,[r1]
 937 0604 3AB1     	    cbz r2,3f 
 938 0606 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 939 060a 9042     	    cmp r0,r2 
 940 060c 02D0     	    beq 2f 
 941 060e 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 942 0612 F6E7     	    b 1b
 943 0614 0A46     	2:  mov r2,r1
 944 0616 1046     	3:  mov r0,r2 
 945 0618 06BC     	    pop {r1,r2}
 946 061a 7047     	    _RET 
 947              	
 948              	
 949              	/**********************************
 950              	      BASIC commands 
 951              	**********************************/
 952              	
 953              	/*********************************
 954              	    syntax_error 
 955              	    display syntax error message and 
 956              	    abort program 
 957              	  input:
 958              	    none  
 959              	  output: 
 960              	    none 
 961              	  use:
 962              	*********************************/
 963              	    _FUNC syntax_error 
 964 061c 4FF00200 	    mov r0,#ERR_SYNTAX
 965 0620 00E0     	    b tb_error 
 966              	
 967              	/*********************************
 968              	    tb_error 
 969              	    display BASIC error and 
 970              	    abort program. 
 971              	  input:
ARM GAS  tinyBasic.s 			page 30


 972              	    r0    error code   
 973              	  output: 
 974              	    none 
 975              	  use:
 976              	    r1    temp 
 977              	*********************************/
 978 0622 00BF     	    _FUNC tb_error 
 979 0624 DFF81016 	    ldr r1,=err_msg 
 980 0628 4FEA8000 	    lsl r0,#2 
 981 062c 0858     	    ldr r0,[r1,r0]
 982 062e 00B5FFF7 	    _CALL uart_puts
 982      FEFF5DF8 
 982      04EB
 983 0638 206C     	    ldr r0,[UPP,#FLAGS]
 984 063a 10F0200F 	    tst r0,#FCOMP
 985 063e FFD0     	    beq compile_error
 986              	interpret_error:
 987              	
 988              	
 989              	compile_error:
 990 0640 A068     	    ldr r0,[UPP,#BASICPTR]
 991 0642 00B5FFF7 	    _CALL uart_puts 
 991      FEFF5DF8 
 991      04EB
 992 064c 2068     	    ldr r0,[UPP,#IN_SAVED]
 993 064e 00B5FFF7 	    _CALL spaces 
 993      FEFF5DF8 
 993      04EB
 994 0658 4FF05E00 	    mov r0,#'^' 
 995 065c 00B5FFF7 	    _CALL uart_putc  
 995      FEFF5DF8 
 995      04EB
 996 0666 E5E0     	    b  warm_start  
 997              	    
 998              	err_msg:
 999 0668 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 999      00000000 
 999      0D000000 
 999      1B000000 
 999      34000000 
 1000 0680 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1000      6F000000 
 1000      89000000 
 1000      9A000000 
 1000      AB000000 
 1001 0694 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1001      EA000000 
 1001      FA000000 
 1001      0E010000 
 1001      21010000 
 1002              	
 1003              	    .section .rodata.tb_error 
 1004              	
 1005 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1005      72792066 
 1005      756C6C0A 
 1005      00
ARM GAS  tinyBasic.s 			page 31


 1006 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1006      61782065 
 1006      72726F72 
 1006      0A00
 1007 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1007      206F7065 
 1007      72617469 
 1007      6F6E206F 
 1007      76657266 
 1008 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1008      73696F6E 
 1008      20627920 
 1008      300A00
 1009 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1009      6C696420 
 1009      6C696E65 
 1009      206E756D 
 1009      6265722E 
 1010 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1010      74696D65 
 1010      206F6E6C 
 1010      79207573 
 1010      6167652E 
 1011 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1011      616E6420 
 1011      6C696E65 
 1011      206F6E6C 
 1011      79207573 
 1012 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1012      69636174 
 1012      65206E61 
 1012      6D652E0A 
 1012      00
 1013 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1013      206E6F74 
 1013      20666F75 
 1013      6E642E0A 
 1013      00
 1014 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1014      76616C75 
 1014      652E0A00 
 1015 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1015      20696E20 
 1015      65787465 
 1015      6E646564 
 1015      206D656D 
 1016 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1016      61746120 
 1016      666F756E 
 1016      642E0A00 
 1017 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1017      726F6772 
 1017      616D2069 
 1017      6E205241 
 1017      4D210A00 
 1018 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1018      20737973 
ARM GAS  tinyBasic.s 			page 32


 1018      74656D20 
 1018      66756C6C 
 1018      2E0A00
 1019 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1019      65722066 
 1019      756C6C0A 
 1019      00
 1020              	
 1021 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1021      2074696D 
 1021      65206572 
 1021      726F722C 
 1021      2000
 1022 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1022      70696C65 
 1022      20657272 
 1022      6F722C20 
 1022      00
 1023 0151 6C617374 	tk_id: .asciz "last token id: "
 1023      20746F6B 
 1023      656E2069 
 1023      643A2000 
 1024              	
 1025              	
 1026              	    .section  .text , "ax", %progbits 
 1027              	
 1028              	/*********************************
 1029              	   BASIC: BTGL adr, mask   
 1030              	   toggle bits [adr]=[adr]^mask  
 1031              	   input:
 1032              	     r0    adr 
 1033              	     r1    mask 
 1034              	    output;
 1035              	      none 
 1036              	    use:
 1037              	      T1   temp
 1038              	      T2   temp  
 1039              	*******************************/     
 1040              	    _FUNC BTGL 
 1041              	
 1042 06a8 7047     	    _RET 
 1043              	
 1044              	
 1045              	//---------------------------------
 1046              	// dictionary search 
 1047              	// input:
 1048              	//	 r0   target name
 1049              	//   r1		dictionary first name field address  
 1050              	// output:
 1051              	//  r0 		token attribute 
 1052              	//  r1		cmd_index if r0!=TK_NONE  
 1053              	// use:
 1054              	//  r2   length dictionary name 
 1055              	//---------------------------------
 1056 06aa 00BF     	  _FUNC search_dict
 1057 06ac 04B4     	  push {r2}
 1058 06ae 03B4     	  push {r0,r1}
ARM GAS  tinyBasic.s 			page 33


 1059              	1:
 1060 06b0 11F8010B 	  ldrb r0,[r1],#1 
 1061 06b4 0043     	  orrs r0,r0
 1062 06b6 10D0     	  beq 9f // null byte  -> end of dictinary 
 1063 06b8 0098     	  ldr r0,[sp]  
 1064 06ba 00B5FFF7 	  _CALL strcmp 
 1064      CCFC5DF8 
 1064      04EB
 1065 06c4 04D0     	  beq 2f 
 1066 06c6 0199     	  ldr r1,[sp,#4]
 1067 06c8 51F80C1C 	  ldr r1,[r1,#-12]
 1068 06cc 0191     	  str r1,[sp,#4]
 1069 06ce EFE7     	  b 1b   
 1070              	2: // found
 1071 06d0 0199     	  ldr r1,[sp,#4]
 1072 06d2 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 1073 06d6 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 1074 06da 02B0     	9: add sp,#8  // drop pushed r0,r1
 1075 06dc 04BC     	   pop {r2}
 1076 06de 7047     	   _RET 
 1077              	
 1078              	/**************************
 1079              	    INTERPRETER 
 1080              	*************************/
 1081              	
 1082              	/*********************************
 1083              	   cold_start 
 1084              	   initialize BASIC interpreter 
 1085              	   never leave 
 1086              	   input:
 1087              	     none 
 1088              	   output:
 1089              	    none 
 1090              	*********************************/
 1091              	  .type cold_start, %function 
 1092              	  .global cold_start 
 1093              	cold_start: 
 1094              	//copy initialized system variables to ram 
 1095 06e0 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1095      C2F20004 
 1096 06e8 0B48     	    ldr r0,src_addr 
 1097 06ea DFF83010 	    ldr r1,dest_addr
 1098 06ee 0968     	    ldr r1,[r1] 
 1099 06f0 0C44     	    add UPP,r1 // system variables base address   
 1100 06f2 2146     	    mov r1,UPP 
 1101 06f4 4FF0D402 	    mov r2,#ulast-uzero
 1102 06f8 00B5FFF7 	    _CALL cmove  
 1102      FEFF5DF8 
 1102      04EB
 1103 0702 00B500F0 	    _CALL prt_version
 1103      0CF85DF8 
 1103      04EB
 1104 070c 00B500F0 	    _CALL clear_basic  
 1104      5BF85DF8 
 1104      04EB
 1105 0716 8DE0     	    b warm_start    
 1106              	src_addr:
ARM GAS  tinyBasic.s 			page 34


 1107 0718 00000000 	  .word uzero
 1108              	dest_addr:
 1109 071c 00000000 	  .word vectors_size
 1110              	
 1111              	/************************************
 1112              	    print firmware version 
 1113              	    input: 
 1114              	      none 
 1115              	    output:
 1116              	      none 
 1117              	    use:
 1118              	      r0 
 1119              	***********************************/
 1120              	    _FUNC prt_version 
 1121 0720 DFF81805 	    ldr r0,=version_msg 
 1122 0724 00B5FFF7 	    _CALL uart_puts
 1122      FEFF5DF8 
 1122      04EB
 1123 072e 9FF87800 	    ldrb r0,version 
 1124 0732 4FEA1010 	    lsr r0,#4 
 1125 0736 00F13000 	    add r0,#'0' 
 1126 073a 3A28     	    cmp r0,#'9'+1 
 1127 073c 01D4     	    bmi 1f 
 1128 073e 00F10700 	    add r0,#7 
 1129              	  1:
 1130 0742 00B5FFF7 	    _CALL uart_putc 
 1130      FEFF5DF8 
 1130      04EB
 1131 074c 4FF02E00 	    mov r0,#'. 
 1132 0750 00B5FFF7 	    _CALL uart_putc 
 1132      FEFF5DF8 
 1132      04EB
 1133 075a 9FF84C00 	    ldrb r0,version 
 1134 075e 00F00F00 	    and r0,#15 
 1135 0762 00F13000 	    add r0,'0' 
 1136 0766 3A28     	    cmp r0,#'9'+1 
 1137 0768 01D4     	    bmi 1f 
 1138 076a 00F10700 	    add r0,#7
 1139              	  1: 
 1140 076e 00B5FFF7 	    _CALL uart_putc 
 1140      FEFF5DF8 
 1140      04EB
 1141 0778 4FF00D00 	    mov r0,#CR 
 1142 077c 00B5FFF7 	    _CALL uart_putc 
 1142      FEFF5DF8 
 1142      04EB
 1143 0786 7047     	    _RET  
 1144              	version_msg:
 1145 0788 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1145      65207069 
 1145      6C6C2074 
 1145      696E7920 
 1145      42415349 
 1146              	version:
 1147 07a8 10       	    .byte 0x10 
 1148 07a9 0000BF   	    .p2align 2 
 1149              	
ARM GAS  tinyBasic.s 			page 35


 1150              	
 1151              	/*****************************
 1152              	    clear_vars 
 1153              	    initialize variables to 0
 1154              	  input:
 1155              	    none 
 1156              	  output:
 1157              	    none 
 1158              	  use:
 1159              	    r0,r1,r2 
 1160              	*****************************/
 1161              	    _FUNC clear_vars 
 1162 07ac 07B4     	    push {r0,r1,r2}
 1163 07ae 80EA0000 	    eor r0,r0 
 1164 07b2 04F16001 	    add r1,UPP,#VARS
 1165 07b6 4FF01A02 	    mov r2,#26
 1166 07ba 41F8040B 	1:  str r0,[r1],#4 
 1167 07be 013A     	    subs r2,#1
 1168 07c0 FBD1     	    bne 1b  
 1169 07c2 07BC     	    pop {r0,r1,r2}
 1170 07c4 7047     	    _RET 
 1171              	
 1172              	/*****************************
 1173              	   clear_basic 
 1174              	   reset BASIC system variables 
 1175              	   and clear variables 
 1176              	*****************************/
 1177 07c6 00BF     	    _FUNC clear_basic
 1178 07c8 80EA0000 	  	eor r0,r0
 1179 07cc 2064     	    str r0,[UPP,#FLAGS] 
 1180 07ce 6060     	    str r0,[UPP,#COUNT]
 1181 07d0 2060     	    str r0,[UPP,#IN_SAVED]
 1182 07d2 A060     	    str r0,[UPP,#BASICPTR]
 1183 07d4 E060     	    str r0,[UPP,#DATAPTR]
 1184 07d6 2061     	    str r0,[UPP,#DATA]
 1185 07d8 6061     	    str r0,[UPP,#DATALEN]
 1186 07da 04F1C800 	    add r0,UPP,#FREE_RAM
 1187 07de 2063     	    str r0,[UPP,#TXTBGN]
 1188 07e0 6063     	    str r0,[UPP,#TXTEND]
 1189 07e2 00B5FFF7 	    _CALL clear_vars 
 1189      E2FF5DF8 
 1189      04EB
 1190 07ec 7047     	    _RET  
 1191              	
 1192              	/***********************************
 1193              	   warm_init 
 1194              	   initialize interpreter context 
 1195              	  input:
 1196              	    none
 1197              	  output:
 1198              	    none 
 1199              	  use:
 1200              	    r0 
 1201              	***********************************/
 1202              	warm_init:
 1203              	// reset main stack 
 1204 07ee DFF82800 	    ldr r0,mstack
ARM GAS  tinyBasic.s 			page 36


 1205 07f2 8546     	    mov sp,r0 
 1206              	// reset data stack       
 1207 07f4 DFF824C0 	    ldr DP,dstack 
 1208 07f8 4FF0000A 	    mov IN,#0 // BASIC line index 
 1209 07fc 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1210 0800 80EA0000 	    eor r0,r0 
 1211 0804 6060     	    str r0,[UPP,#COUNT]  
 1212 0806 2064     	    str r0,[UPP,#FLAGS]
 1213 0808 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1214 080a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1215 080e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1216 0810 4FF00A00 	    mov r0,#10 // default base decimal 
 1217 0814 A061     	    str r0,[UPP,#BASE]
 1218 0816 7047     	    _RET  
 1219              	
 1220 0818 00000000 	mstack: .word _mstack 
 1221 081c 00000000 	dstack: .word _dstack 
 1222 0820 00000000 	tib: .word _tib 
 1223 0824 00000000 	pad: .word _pad 
 1224 0828 FCFFFFFF 	array: .word _pad - 4 
 1225 082c 52454144 	ready: .asciz "READY" 
 1225      5900
 1226              	
 1227              	/**********************************
 1228              	    warm_start 
 1229              	    start BASIC interpreter doesn't  
 1230              	    reset variables and code space 
 1231              	  input:
 1232              	    none 
 1233              	  output:
 1234              	    none 
 1235              	**********************************/
 1236 0832 00BF     	    _FUNC warm_start 
 1237              	// initialise parameters stack
 1238 0834 FFF7DBFF 	    bl warm_init
 1239 0838 DFF80404 	    ldr r0,=ready 
 1240 083c 00B5FFF7 	    _CALL uart_puts 
 1240      FEFF5DF8 
 1240      04EB
 1241              	// fall in cmd_line 
 1242              	
 1243              	/**********************************
 1244              	   cmd_line 
 1245              	   shell command line 
 1246              	   input:
 1247              	      none 
 1248              	   output:
 1249              	      none 
 1250              	   use:
 1251              	
 1252              	***********************************/
 1253 0846 00BF     	    _FUNC cmd_line 
 1254 0848 4FF00D00 	    mov r0,#CR 
 1255 084c 00B5FFF7 	    _CALL uart_putc 
 1255      FEFF5DF8 
 1255      04EB
 1256 0856 5FF83800 	1:  ldr r0,tib
ARM GAS  tinyBasic.s 			page 37


 1257 085a 4FF05001 	    mov r1,#TIB_SIZE 
 1258 085e 00B5FFF7 	    _CALL readln 
 1258      FEFF5DF8 
 1258      04EB
 1259 0868 0940     	    ands r1,r1 // empty line 
 1260 086a F4D0     	    beq 1b 
 1261 086c 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1261      DDFC5DF8 
 1261      04EB
 1262 0876 EED0     	    beq 1b  // tokens stored in text area 
 1263              	// interpret tokenized line 
 1264              	interpreter:
 1265 0878 6068     	   ldr r0,[UPP,#COUNT]
 1266 087a 8245     	   cmp IN,r0  
 1267 087c 0DD4     	   bmi interp_loop
 1268              	// end of line reached     
 1269              	next_line:
 1270 087e 206C     	  ldr r0,[UPP,#FLAGS]
 1271 0880 10F0010F 	  tst r0,#FRUN 
 1272 0884 E0D0     	  beq cmd_line 
 1273 0886 6068     	  ldr r0,[UPP,#COUNT]
 1274 0888 D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 1275 088c 8344     	  add BPTR,r0  
 1276 088e 606B     	  ldr r0,[UPP,#TXTEND]
 1277 0890 8345     	  cmp BPTR,r0 
 1278 0892 00D4     	  bmi 1f 
 1279 0894 CEE7     	  b warm_start 
 1280              	1:
 1281 0896 4FF0030A 	  mov IN,#3 
 1282              	interp_loop:
 1283 089a 00B500F0 	  _CALL next_token 
 1283      18F85DF8 
 1283      04EB
 1284 08a4 0028     	  cmp r0,#TK_NONE 
 1285 08a6 EAD0     	  beq next_line 
 1286 08a8 0B28     	  cmp r0,#TK_CMD 
 1287 08aa 04D1     	  bne 2f
 1288 08ac E548     	  ldr r0,=fn_table
 1289 08ae 50F82100 	  ldr r0,[r0,r1,lsl #2]
 1290 08b2 8047     	  blx r0
 1291 08b4 F1E7     	  b interp_loop   
 1292              	2: 
 1293 08b6 0528     	  cmp r0,#TK_VAR 
 1294 08b8 02D1     	  bne 3f 
 1295 08ba 00F0A5B8 	  b let_var 
 1296 08be ECE7     	  b interp_loop 
 1297              	3: 
 1298 08c0 0628     	  cmp r0,#TK_ARRAY 
 1299 08c2 02D1     	  bne 4f
 1300 08c4 00F0AAB8 	  b let_array 
 1301 08c8 E7E7     	  b interp_loop
 1302              	4: 
 1303 08ca 0128     	  cmp r0,#TK_COLON
 1304 08cc E5D0     	  beq interp_loop
 1305 08ce A5E6     	  b syntax_error
 1306              	
 1307              	/*****************************
ARM GAS  tinyBasic.s 			page 38


 1308              	  next_token 
 1309              	  extract next token from token list 
 1310              	  input:
 1311              	    none 
 1312              	  output:
 1313              	    r0    token attribute
 1314              	    r1    token value if there is one 
 1315              	  use:
 1316              	    T1    exit token type  
 1317              	****************************/
 1318              	    _FUNC next_token 
 1319 08d0 4DF8048D 	    push {T1}
 1320 08d4 88EA0808 	    eor T1,T1 // TK_NONE 
 1321 08d8 6068     	    ldr r0,[UPP,#COUNT]
 1322 08da 8245     	    cmp IN,r0 
 1323 08dc 00D4     	    bmi 0f 
 1324 08de 2AE0     	    b 9f  
 1325              	0: 
 1326 08e0 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1327 08e4 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1328 08e8 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1329 08ec 0AF1010A 	    add IN,#1  
 1330 08f0 8046     	    mov T1,r0 
 1331 08f2 00F03F00 	    and r0,#0x3f // limit mask 
 1332 08f6 D449     	    ldr r1,=tok_jmp 
 1333 08f8 D1E800F0 	    tbb [r1,r0]
 1334              	1: // pc reference point 
 1335 08fc 1BE0     	    b 9f 
 1336              	2: // .byte param
 1337 08fe 1BF80A10 	    ldrb r1,[BPTR,IN]
 1338 0902 0AF1010A 	    add IN,#1 
 1339 0906 16E0     	    b 9f 
 1340              	3: // .hword param 
 1341 0908 3BF80A10 	    ldrh r1,[BPTR,IN]
 1342 090c 0AF1020A 	    add IN,#2 
 1343 0910 11E0     	    b 9f 
 1344              	4: // .word param  
 1345 0912 5BF80A10 	    ldr r1,[BPTR,IN]
 1346 0916 0AF1040A 	    add IN,#4
 1347 091a 0CE0     	    b 9f 
 1348              	5: // .asciz param 
 1349 091c 0BEB0A01 	    add r1,BPTR,IN 
 1350 0920 0846     	    mov r0,r1  
 1351 0922 00B5FFF7 	    _CALL strlen 
 1351      FEFF5DF8 
 1351      04EB
 1352 092c 8244     	    add IN,r0
 1353 092e 0AF1010A 	    add IN,#1
 1354 0932 00E0     	    b 9f  
 1355              	8: // syntax error 
 1356 0934 72E6     	    b syntax_error 
 1357 0936 4046     	9:  mov r0,T1  
 1358 0938 5DF8048B 	    pop {T1}
 1359 093c 7047     	    _RET
 1360              	
 1361 093e 00BF     	  .p2align 2
 1362              	tok_jmp: // token id  tbb offset 
ARM GAS  tinyBasic.s 			page 39


 1363 0940 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // TK_NONE, TK_COLON
 1364 0942 10010106 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2 // TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1365 0946 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1366 094a 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1367 094e 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_INTGR, TK_PLUS,TK_MINUS  
 1368 0951 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // TK_MULT,TK_DIV,TK_MOD 
 1369              	// the following are not used 
 1370 0954 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 
 1370      1C
 1371 0959 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1371      1C1C1C1C 
 1372 0961 1D1D1D1C 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1372      1C1C1C1C 
 1373 0969 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 1373      1C1C1C1C 
 1374 0971 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1374      1C1C1C1C 
 1375 0979 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1375      1C1C1C1C 
 1376 0981 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1377              	
 1378 0985 0000BF   	  .p2align 2 
 1379              	
 1380              	/*********************************
 1381              	    expect 
 1382              	    check if next token is of 
 1383              	    expected type. If not 
 1384              	    call syntax_error  
 1385              	  input:
 1386              	      r0   token attribute
 1387              	  output:
 1388              	      r0  token attribute 
 1389              	      r1  token value
 1390              	  use:
 1391              	      T1   
 1392              	**********************************/
 1393              	    _FUNC expect 
 1394 0988 4DF8048D 	    push {T1}
 1395 098c 8046     	    mov T1,r0 
 1396 098e 00B5FFF7 	    _CALL next_token 
 1396      9EFF5DF8 
 1396      04EB
 1397 0998 4045     	    cmp r0,T1  
 1398 099a 7FF43FAE 	    bne syntax_error 
 1399 099e 5DF8048B 	    pop {T1}
 1400 09a2 7047     	    _RET 
 1401              	
 1402              	/***********************************
 1403              	    func_args 
 1404              	    get function arguments list 
 1405              	  input:
 1406              	    none 
 1407              	  output:
 1408              	    r0    arg. count 
 1409              	  use:
 1410              	
 1411              	************************************/
ARM GAS  tinyBasic.s 			page 40


 1412              	    _FUNC func_args 
 1413 09a4 4FF00700 	    mov r0,#TK_LPAREN 
 1414 09a8 00B5FFF7 	    _CALL expect 
 1414      EDFF5DF8 
 1414      04EB
 1415 09b2 00B500F0 	    _CALL arg_list 
 1415      0CF85DF8 
 1415      04EB
 1416 09bc 01B4     	    push {r0}
 1417 09be 4FF00800 	    mov r0,#TK_RPAREN 
 1418 09c2 00B5FFF7 	    _CALL expect 
 1418      E0FF5DF8 
 1418      04EB
 1419 09cc 01BC     	    pop {r0}
 1420 09ce 7047     	    _RET 
 1421              	
 1422              	/**********************************
 1423              	    arg_list 
 1424              	    get arguments list on dstack 
 1425              	  input:
 1426              	    none 
 1427              	  output:
 1428              	    r0    arg count
 1429              	  use:
 1430              	    T1    tmp count  
 1431              	***********************************/
 1432              	    _FUNC arg_list 
 1433 09d0 4DF8048D 	    push {T1}
 1434 09d4 00B500F0 	1:  _CALL relation 
 1434      BFF85DF8 
 1434      04EB
 1435 09de 0028     	    cmp R0,#TK_NONE 
 1436 09e0 10D0     	    beq 9f 
 1437 09e2 0F28     	    cmp r0,#TK_INTGR
 1438 09e4 0ED1     	    bne 9f 
 1439 09e6 4CF8041D 	    _PUSH r1 
 1440 09ea 08F10108 	    add T1,#1 
 1441 09ee 00B5FFF7 	    _CALL next_token 
 1441      6EFF5DF8 
 1441      04EB
 1442 09f8 0928     	    cmp r0,#TK_COMMA 
 1443 09fa EBD0     	    beq 1b 
 1444 09fc D4F800A0 	    _UNGET_TOKEN 
 1444      D4F808B0 
 1445 0a04 4046     	9:  mov r0,T1 
 1446 0a06 5DF8048B 	    pop {T1}
 1447 0a0a 7047     	    _RET 
 1448              	
 1449              	/***********************************
 1450              	 factor parser 
 1451              	 factor ::= ['+'|'-'|e]  var | @ |
 1452              				 integer | function |
 1453              				 '('relation')' 
 1454              	  input: 
 1455              	    none 
 1456              	  output:
 1457              	    r0   token attribute 
ARM GAS  tinyBasic.s 			page 41


 1458              	    r1   token value 
 1459              	  use:
 1460              	    T1   sign 
 1461              	    T2   exit token attribute 
 1462              	***********************************/
 1463              	    _FUNC factor 
 1464 0a0c 2DE90003 	    push {T1,T2}
 1465 0a10 89EA0909 	    eor T2,T2 // TK_NONE 
 1466 0a14 00B5FFF7 	    _CALL next_token 
 1466      5BFF5DF8 
 1466      04EB
 1467 0a1e 4FF00108 	    mov T1,#1 // default sign +  
 1468 0a22 00F03000 	    and r0,#TK_GRP_MASK 
 1469 0a26 1028     	    cmp r0,#TK_GRP_ADD
 1470 0a28 06D1     	    bne 1f 
 1471 0a2a 4FF0FF38 	    mov T1,#-1 
 1472 0a2e 00B5FFF7 	    _CALL next_token 
 1472      4EFF5DF8 
 1472      04EB
 1473 0a38 0F28     	1:  cmp r0,#TK_INTGR 
 1474 0a3a 18D0     	    beq 8f 
 1475 0a3c 0628     	    cmp r0,#TK_ARRAY 
 1476 0a3e 05D1     	    bne 3f 
 1477 0a40 00B500F0 	    _CALL get_array_element
 1477      CBF85DF8 
 1477      04EB
 1478 0a4a 10E0     	    b 8f 
 1479 0a4c 0528     	3:  cmp r0,#TK_VAR 
 1480 0a4e 05D1     	    bne 4f 
 1481 0a50 00B500F0 	    _CALL get_var 
 1481      D7F85DF8 
 1481      04EB
 1482 0a5a 08E0     	    b 8f 
 1483 0a5c 0C28     	4:  cmp r0,#TK_IFUNC 
 1484 0a5e 01D0     	    beq 5f 
 1485 0a60 0D28     	    cmp r0,#TK_CFUNC 
 1486 0a62 04D1     	    bne 6f 
 1487 0a64 4FEA8101 	5:  lsl r1,#2 
 1488 0a68 7648     	    ldr r0,=fn_table
 1489 0a6a 4158     	    ldr r1,[r0,r1]
 1490 0a6c 8847     	    blx r1 
 1491              	6:  
 1492 0a6e 08FB01F1 	8:  mul r1,T1 
 1493 0a72 4846     	    mov r0,T2 
 1494 0a74 BDE80003 	    pop {T1,T2}   
 1495 0a78 7047     	    _RET 
 1496              	
 1497              	
 1498              	/*****************************************
 1499              	    term parser 
 1500              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1501              	    output:
 1502              	      r0  	token attribute 
 1503              	      r1		integer
 1504              	    use:
 1505              	      r2    first operand 
 1506              	      T1    operator 
ARM GAS  tinyBasic.s 			page 42


 1507              	      T2    exit token attribute 
 1508              	******************************************/
 1509 0a7a 00BF     	     _FUNC term 
 1510 0a7c 2DE90403 	    push {r2,T1,T2}
 1511 0a80 4FF00009 	    mov T2,#TK_NONE 
 1512 0a84 00B5FFF7 	    _CALL factor  
 1512      C1FF5DF8 
 1512      04EB
 1513 0a8e 0F28     	    cmp r0,#TK_INTGR
 1514 0a90 26D1     	    bne 8f
 1515 0a92 8146     	    mov T2,r0  // exit attribute 
 1516 0a94 0A46     	    mov r2,r1 // first operand   
 1517 0a96 00B5FFF7 	    _CALL next_token
 1517      1AFF5DF8 
 1517      04EB
 1518 0aa0 8046     	    mov T1,r0   
 1519 0aa2 00F03000 	    and r0,#TK_GRP_MASK 
 1520 0aa6 2028     	    cmp r0,#TK_GRP_MULT
 1521 0aa8 1AD1     	    bne 8f  
 1522 0aaa 00B5FFF7 	    _CALL factor  
 1522      AEFF5DF8 
 1522      04EB
 1523 0ab4 0F28     	    cmp r0,#TK_INTGR
 1524 0ab6 7FF4B1AD 	    bne syntax_error 
 1525 0aba B8F1200F 	    cmp T1,#TK_MULT
 1526 0abe 02D1     	    bne 2f 
 1527              	multiplication:
 1528 0ac0 01FB02F2 	    mul r2,r1
 1529 0ac4 10E0     	    b 9f 
 1530 0ac6 B8F1210F 	2:  cmp T1,#TK_DIV 
 1531 0aca 02D1     	    bne modulo
 1532              	division:
 1533 0acc 92FBF1F2 	    sdiv r2,r2,r1
 1534 0ad0 0AE0     	    b 9f  
 1535              	modulo:
 1536 0ad2 1046     	    mov r0,r2 
 1537 0ad4 92FBF1F2 	    sdiv r2,r2,r1 
 1538 0ad8 01FB02F2 	    mul  r2,r1 
 1539 0adc A0EB0202 	    sub  r2,r0,r2 
 1540 0ae0 D4F800A0 	8:  _UNGET_TOKEN
 1540      D4F808B0 
 1541 0ae8 1146     	9:  mov r1,r2 
 1542 0aea 4846     	    mov r0,T2 
 1543 0aec BDE80403 	    pop {r2,T1,T2}
 1544 0af0 7047     	    _RET 
 1545              	
 1546              	/*****************************************
 1547              	    expression parser 
 1548              	    expression ::= term [['+'|'-'] term]*
 1549              	    result range {-32768..32767}
 1550              	    output:
 1551              	      r0    token attribute 
 1552              	      r1 	  integer
 1553              	    use:
 1554              	      r2  left operand 
 1555              	      T1  operator 
 1556              	      T2  exit token attribute
ARM GAS  tinyBasic.s 			page 43


 1557              	******************************************/
 1558 0af2 00BF     	    _FUNC expression 
 1559 0af4 2DE90403 	    push {r2,t1,t2}
 1560 0af8 4FF00009 	    mov T2,#TK_NONE
 1561 0afc 82EA0202 	    eor r2,r2 // zero 
 1562 0b00 00B5FFF7 	    _CALL term 
 1562      BBFF5DF8 
 1562      04EB
 1563 0b0a 0F28     	    cmp r0,#TK_INTGR  
 1564 0b0c 1AD1     	    bne 8f 
 1565 0b0e 0A46     	    mov r2,r1 // first operand   
 1566 0b10 00B5FFF7 	1:  _CALL next_token 
 1566      DDFE5DF8 
 1566      04EB
 1567 0b1a 8046     	    mov T1,r0 // token attribute 
 1568 0b1c 00F03000 	    and r0,#TK_GRP_MASK 
 1569 0b20 1028     	    cmp r0,#TK_GRP_ADD 
 1570 0b22 0FD1     	    bne 8f 
 1571 0b24 00B5FFF7 	3:  _CALL term 
 1571      A9FF5DF8 
 1571      04EB
 1572 0b2e 0F28     	    cmp r0,#TK_INTGR 
 1573 0b30 7FF474AD 	    bne syntax_error 
 1574 0b34 B8F1100F 	    cmp T1,#TK_PLUS 
 1575 0b38 02D0     	    beq 4f 
 1576 0b3a A2EB0101 	    sub r1,r2,r1 // N1-N2  
 1577 0b3e E7E7     	    b 1b 
 1578 0b40 1144     	4:  add r1,r2,r1 // N1+N2
 1579 0b42 E5E7     	    b 1b
 1580 0b44 D4F800A0 	8:  _UNGET_TOKEN 
 1580      D4F808B0 
 1581 0b4c 4846     	9:  mov r0,T2 
 1582 0b4e 1146     	    mov r1,r2 
 1583 0b50 BDE80403 	    pop {r2,t1,t2}
 1584 0b54 7047     	    _RET 
 1585              	
 1586              	
 1587              	/**********************************************
 1588              	    relation parser 
 1589              	    rel ::= expr1 rel_op expr2
 1590              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1591              	    relation return  integer , zero is false 
 1592              	    output:
 1593              	        r0	TK_INTGR  
 1594              	        r1	integer 
 1595              	    use:
 1596              	        r2   first operand 
 1597              	        T1   relop   
 1598              	**********************************************/
 1599 0b56 00BF     	    _FUNC relation 
 1600 0b58 2DE90401 	    push {r2,T1}
 1601 0b5c 00B5FFF7 	    _CALL expression 
 1601      C9FF5DF8 
 1601      04EB
 1602 0b66 0F28     	    cmp r0,#TK_INTGR 
 1603 0b68 7FF458AD 	    bne syntax_error 
 1604 0b6c 0A46     	    mov r2,r1  // first operand  
ARM GAS  tinyBasic.s 			page 44


 1605 0b6e 00B5FFF7 	    _CALL next_token 
 1605      AEFE5DF8 
 1605      04EB
 1606 0b78 8046     	    mov T1,r0  // relop  
 1607 0b7a 00F03000 	    and r0,#TK_GRP_MASK 
 1608 0b7e 3028     	    cmp r0,#TK_GRP_RELOP 
 1609 0b80 1DD1     	    bne 8f  // single operand 
 1610 0b82 00B5FFF7 	    _CALL expression 
 1610      B6FF5DF8 
 1610      04EB
 1611 0b8c 0F28     	    cmp r0,#TK_INTGR 
 1612 0b8e 7FF445AD 	    bne syntax_error 
 1613 0b92 8A42     	    cmp r2,r1 // compare operands  
 1614 0b94 4FF0FF31 	    mov r1,#-1 
 1615 0b98 2C4A     	    ldr r2,=relop_jmp
 1616 0b9a 08F00708 	    and T1,#7 // {1..6}
 1617 0b9e D2E808F0 	    tbb [r2,T1]    
 1618              	rel_idx0:
 1619              	rel_eq:
 1620 0ba2 11D0     	    beq 9f 
 1621 0ba4 08E0     	    b rel_false
 1622              	rel_lt: 
 1623 0ba6 0FDB     	    blt 9f   
 1624 0ba8 06E0     	    b rel_false 
 1625              	rel_le:
 1626 0baa 0DDD     	    ble 9f  
 1627 0bac 04E0     	    b rel_false 
 1628              	rel_gt:
 1629 0bae 0BDC     	    bgt 9f  
 1630 0bb0 02E0     	    b rel_false  
 1631              	rel_ge:
 1632 0bb2 09DA     	    bge 9f  
 1633 0bb4 00E0     	    b rel_false  
 1634              	rel_diff:
 1635 0bb6 07D1     	    bne 9f 
 1636              	rel_false:    
 1637 0bb8 81EA0101 	    eor r1,r1  // false
 1638 0bbc 04E0     	    b 9f  
 1639 0bbe D4F800A0 	8:  _UNGET_TOKEN 
 1639      D4F808B0 
 1640 0bc6 1146     	    mov r1,r2    
 1641 0bc8 4FF00F00 	9:  mov r0,#TK_INTGR
 1642 0bcc BDE80401 	    pop {r2,T1}
 1643 0bd0 7047     	    _RET 
 1644              	
 1645              	
 1646              	relop_jmp: 
 1647 0bd2 00       	  .byte 0 
 1648 0bd3 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1649 0bd4 00       	  .byte 0 // =
 1650 0bd5 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1651 0bd6 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1652 0bd7 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1653 0bd8 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1654              	
 1655              	
 1656              	/***********************************
ARM GAS  tinyBasic.s 			page 45


 1657              	    get_array_element 
 1658              	    return index of array element 
 1659              	  input:
 1660              	    r1   index  
 1661              	  output:
 1662              	    r0   TK_INTGR
 1663              	    r1   value  
 1664              	************************************/
 1665 0bd9 0000BF   	    _FUNC get_array_element 
 1666 0bdc D4F8CC00 	    ldr r0,[UPP,#ARRAY_ADR]
 1667 0be0 4FEA8101 	    lsl r1,#2 
 1668 0be4 A0EB0100 	    sub r0,r1 
 1669 0be8 0168     	    ldr r1,[r0]
 1670 0bea 4FF00F00 	    mov r0,#TK_INTGR 
 1671 0bee 7047     	    _RET 
 1672              	
 1673              	/***********************************
 1674              	    set_array_element 
 1675              	    set value of array element 
 1676              	  input:
 1677              	    r0   index 
 1678              	    r1   new value 
 1679              	  output:
 1680              	    none
 1681              	  use:
 1682              	    r2    array pointer 
 1683              	**********************************/
 1684              	    _FUNC set_array_element 
 1685 0bf0 04B4     	    push {r2}
 1686 0bf2 D4F8CC20 	    ldr r2,[UPP,#ARRAY_ADR]
 1687 0bf6 4FEA8000 	    lsl r0,#2 
 1688 0bfa A2EB0002 	    sub r2,r0 
 1689 0bfe 1160     	    str r1,[r2]
 1690 0c00 04BC     	    pop {r2}
 1691 0c02 7047     	    _RET 
 1692              	
 1693              	/***********************************
 1694              	   get_var 
 1695              	   get variable value 
 1696              	  input:
 1697              	     r1    variable index {0..25}
 1698              	  output:
 1699              	     r0    TK_INTGR
 1700              	     r1    value 
 1701              	**********************************/
 1702              	    _FUNC get_var 
 1703 0c04 206E     	    ldr r0,[UPP,#VARS]
 1704 0c06 4FEA8101 	    lsl r1,#2 
 1705 0c0a 4158     	    ldr r1,[r0,r1]
 1706 0c0c 4FF00F00 	    mov r0,#TK_INTGR
 1707 0c10 7047     	    _RET 
 1708              	
 1709              	/*********************************
 1710              	    set_var 
 1711              	    set variable value 
 1712              	  input:
 1713              	     r0    variable index {0..25}
ARM GAS  tinyBasic.s 			page 46


 1714              	     r1    new value 
 1715              	  output:
 1716              	    none 
 1717              	  use:
 1718              	    r2   vars pointer 
 1719              	*********************************/
 1720 0c12 00BF     	    _FUNC set_var 
 1721 0c14 04B4     	    push {r2}
 1722 0c16 226E     	    ldr r2,[UPP,#VARS]
 1723 0c18 4FEA8000 	    lsl r0,#2
 1724 0c1c 1150     	    str r1,[r2,r0]
 1725 0c1e 04BC     	    pop {r2}
 1726 0c20 7047     	    _RET 
 1727              	
 1728              	/******************************
 1729              	    CONSTANTS data
 1730              	******************************/
 1731              	
 1732 0c22 0000     	  .section .rodata 
 1733              	
 1734              	// system variables initial value 
 1735              	uzero:
 1736 0000 00000000 	  .word 0 // IN
 1737 0004 00000000 	  .word 0 // IN_SAVED
 1738 0008 00000000 	  .word 0 // COUNT
 1739 000c 00000000 	  .word 0 // BASICPTR
 1740 0010 00000000 	  .word 0 // DATAPTR
 1741 0014 00000000 	  .word 0 // DATA
 1742 0018 00000000 	  .word 0 // DATALEN
 1743 001c 0A000000 	  .word 10 // BASE
 1744 0020 00000000 	  .word 0 // TICKS
 1745 0024 00000000 	  .word 0 // TIMER
 1746 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 1747 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 1748 0030 00000000 	  .word 0 // FFREE
 1749 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 1750 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 1751 003c 00000000 	  .word 0 //LOOP_DEPTH
 1752 0040 00000000 	  .word 0 // ARRAY_SIZE
 1753 0044 00000000 	  .word 0 // FLAGS
 1754 0048 04000000 	  .word 4 // TAB_WIDTH
 1755 004c 00000000 	  .word 0 // RX_HEAD
 1756 0050 00000000 	  .word 0 // RX_TAIL
 1757 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1757      00000000 
 1757      00000000 
 1757      00000000 
 1758 0064 00000000 	  .space VARS_SIZE,0 // VARS
 1758      00000000 
 1758      00000000 
 1758      00000000 
 1758      00000000 
 1759 00cc FCFFFFFF 	  .word _pad - 4  // ARRAY_ADR 
 1760 00d0 00000000 	  .space 4, 0 // padding 
 1761              	ulast:
 1762              	
 1763              	  .section .rodata.dictionary 
ARM GAS  tinyBasic.s 			page 47


 1764              	
 1765              	// keep alphabetic order for BASIC names from Z-A
 1766              	// this sort order is for for WORDS cmd output. 	
 1767              	
 1768              		.equ link, 0
 1769              	kword_end:
 1770 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1770      00000000 
 1770      00000000 
 1770      00000000 
 1771 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1771      64000000 
 1771      0B000000 
 1771      5854524D 
 1771      54000000 
 1772 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1772      65000000 
 1772      0B000000 
 1772      58524356 
 1772      00000000 
 1773 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1773      63000000 
 1773      0C000000 
 1773      584F5200 
 1774 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1774      62000000 
 1774      0B000000 
 1774      57524954 
 1774      45000000 
 1775 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1775      61000000 
 1775      0B000000 
 1775      574F5244 
 1775      53000000 
 1776 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1776      60000000 
 1776      0B000000 
 1776      57414954 
 1776      00000000 
 1777 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1777      5F000000 
 1777      0C000000 
 1777      55535200 
 1778 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1778      5E000000 
 1778      0B000000 
 1778      554E5449 
 1778      4C000000 
 1779 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1779      5D000000 
 1779      0C000000 
 1779      55464C41 
 1779      53480000 
 1780 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1780      5C000000 
 1780      0C000000 
 1780      55424F55 
ARM GAS  tinyBasic.s 			page 48


 1780      4E440000 
 1781 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1781      5B000000 
 1781      0B000000 
 1781      544F4E45 
 1781      00000000 
 1782 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1782      5A000000 
 1782      0B000000 
 1782      544F0000 
 1783 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1783      58000000 
 1783      0B000000 
 1783      54494D45 
 1783      52000000 
 1784 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1784      59000000 
 1784      0C000000 
 1784      54494D45 
 1784      4F555400 
 1785 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1785      57000000 
 1785      0C000000 
 1785      5449434B 
 1785      53000000 
 1786 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1786      56000000 
 1786      0B000000 
 1786      53544F50 
 1786      00000000 
 1787 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1787      55000000 
 1787      0B000000 
 1787      53544550 
 1787      00000000 
 1788 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1788      54000000 
 1788      0B000000 
 1788      53504957 
 1788      52000000 
 1789 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1789      53000000 
 1789      0B000000 
 1789      53504953 
 1789      454C0000 
 1790 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1790      51000000 
 1790      0C000000 
 1790      53504952 
 1790      44000000 
 1791 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1791      52000000 
 1791      0B000000 
 1791      53504945 
 1791      4E000000 
 1792 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1792      50000000 
ARM GAS  tinyBasic.s 			page 49


 1792      0B000000 
 1792      534C4545 
 1792      50000000 
 1793 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1793      4F000000 
 1793      0C000000 
 1793      53495A45 
 1793      00000000 
 1794 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1794      4E000000 
 1794      0B000000 
 1794      53484F57 
 1794      00000000 
 1795 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1795      4D000000 
 1795      0B000000 
 1795      53415645 
 1795      00000000 
 1796 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1796      4C000000 
 1796      0B000000 
 1796      52554E00 
 1797 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1797      4B000000 
 1797      0C000000 
 1797      52534849 
 1797      46540000 
 1798 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1798      4A000000 
 1798      0C000000 
 1798      524E4400 
 1799 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1799      49000000 
 1799      0B000000 
 1799      52455455 
 1799      524E0000 
 1800 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1800      48000000 
 1800      0B000000 
 1800      52455354 
 1800      4F524500 
 1801 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1801      47000000 
 1801      0B000000 
 1801      52454D41 
 1801      524B0000 
 1802 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1802      46000000 
 1802      0B000000 
 1802      5245424F 
 1802      4F540000 
 1803 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1803      45000000 
 1803      0C000000 
 1803      52454144 
 1803      00000000 
 1804 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
ARM GAS  tinyBasic.s 			page 50


 1804      44000000 
 1804      0C000000 
 1804      514B4559 
 1804      00000000 
 1805 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1805      43000000 
 1805      0C000000 
 1805      50525449 
 1805      00000000 
 1806 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1806      42000000 
 1806      0C000000 
 1806      50525448 
 1806      00000000 
 1807 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1807      41000000 
 1807      0C000000 
 1807      50525447 
 1807      00000000 
 1808 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1808      40000000 
 1808      0C000000 
 1808      50525446 
 1808      00000000 
 1809 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1809      3F000000 
 1809      0C000000 
 1809      50525445 
 1809      00000000 
 1810 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1810      3E000000 
 1810      0C000000 
 1810      50525444 
 1810      00000000 
 1811 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1811      3D000000 
 1811      0C000000 
 1811      50525443 
 1811      00000000 
 1812 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1812      3C000000 
 1812      0C000000 
 1812      50525442 
 1812      00000000 
 1813 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1813      3B000000 
 1813      0C000000 
 1813      50525441 
 1813      00000000 
 1814 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1814      3A000000 
 1814      0B000000 
 1814      5052494E 
 1814      54000000 
 1815 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1815      39000000 
 1815      0C000000 
ARM GAS  tinyBasic.s 			page 51


 1815      504F5554 
 1815      00000000 
 1816 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1816      38000000 
 1816      0B000000 
 1816      504F4B45 
 1816      00000000 
 1817 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1817      35000000 
 1817      0B000000 
 1817      504D4F44 
 1817      45000000 
 1818 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1818      37000000 
 1818      0C000000 
 1818      50494E50 
 1818      00000000 
 1819 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1819      36000000 
 1819      0C000000 
 1819      5045454B 
 1819      00000000 
 1820 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1820      34000000 
 1820      0B000000 
 1820      50415553 
 1820      45000000 
 1821 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1821      33000000 
 1821      0C000000 
 1821      50414400 
 1822 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1822      32000000 
 1822      0C000000 
 1822      4F520000 
 1823 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1823      31000000 
 1823      0C000000 
 1823      4F445200 
 1824 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1824      30000000 
 1824      0C000000 
 1824      4E4F5400 
 1825 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1825      2E000000 
 1825      0B000000 
 1825      4E455854 
 1825      00000000 
 1826 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1826      2F000000 
 1826      0B000000 
 1826      4E455700 
 1827 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1827      2D000000 
 1827      0C000000 
 1827      4D554C44 
 1827      49560000 
ARM GAS  tinyBasic.s 			page 52


 1828 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1828      2C000000 
 1828      0C000000 
 1828      4C534849 
 1828      46540000 
 1829 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1829      2B000000 
 1829      0C000000 
 1829      4C4F4700 
 1830 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1830      2A000000 
 1830      0B000000 
 1830      4C4F4144 
 1830      00000000 
 1831 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1831      29000000 
 1831      0B000000 
 1831      4C495354 
 1831      00000000 
 1832 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1832      28000000 
 1832      0B000000 
 1832      4C455400 
 1833 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1833      27000000 
 1833      0C000000 
 1833      4B455900 
 1834 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1834      26000000 
 1834      0B000000 
 1834      49574447 
 1834      52454600 
 1835 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1835      25000000 
 1835      0B000000 
 1835      49574447 
 1835      454E0000 
 1836 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1836      24000000 
 1836      0C000000 
 1836      494E5645 
 1836      52540000 
 1837 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1837      23000000 
 1837      0B000000 
 1837      494E5055 
 1837      54000000 
 1838 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1838      22000000 
 1838      0B000000 
 1838      49460000 
 1839 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1839      21000000 
 1839      0C000000 
 1839      49445200 
 1840 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1840      20000000 
ARM GAS  tinyBasic.s 			page 53


 1840      0B000000 
 1840      48455800 
 1841 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1841      1F000000 
 1841      0C000000 
 1841      4750494F 
 1841      00000000 
 1842 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1842      1E000000 
 1842      0B000000 
 1842      474F544F 
 1842      00000000 
 1843 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1843      1D000000 
 1843      0B000000 
 1843      474F5355 
 1843      42000000 
 1844 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1844      1C000000 
 1844      0B000000 
 1844      464F5247 
 1844      45540000 
 1845 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1845      1B000000 
 1845      0B000000 
 1845      464F5200 
 1846 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1846      1A000000 
 1846      0B000000 
 1846      46435055 
 1846      00000000 
 1847 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1847      18000000 
 1847      0B000000 
 1847      454E4400 
 1848 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1848      19000000 
 1848      0C000000 
 1848      45455052 
 1848      4F4D0000 
 1849 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1849      17000000 
 1849      0B000000 
 1849      44575249 
 1849      54450000 
 1850 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1850      16000000 
 1850      0C000000 
 1850      44524541 
 1850      44000000 
 1851 0608 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1851      15000000 
 1851      0B000000 
 1851      444F0000 
 1852 0618 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1852      14000000 
 1852      0B000000 
ARM GAS  tinyBasic.s 			page 54


 1852      44495200 
 1853 0628 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1853      13000000 
 1853      0B000000 
 1853      44454300 
 1854 0638 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1854      12000000 
 1854      0C000000 
 1854      44445200 
 1855 0648 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1855      11000000 
 1855      0B000000 
 1855      44415441 
 1855      4C4E0000 
 1856 065c 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 1856      10000000 
 1856      0B000000 
 1856      44415441 
 1856      00000000 
 1857 0670 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 1857      0F000000 
 1857      0C000000 
 1857      43524C00 
 1858 0680 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 1858      0E000000 
 1858      0C000000 
 1858      43524800 
 1859 0690 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 1859      0D000000 
 1859      0D000000 
 1859      43484152 
 1859      00000000 
 1860 06a4 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 1860      0C000000 
 1860      0B000000 
 1860      42594500 
 1861 06b4 B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 1861      0B000000 
 1861      0B000000 
 1861      42544F47 
 1861      4C000000 
 1862 06c8 C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 1862      0A000000 
 1862      0C000000 
 1862      42544553 
 1862      54000000 
 1863 06dc D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 1863      09000000 
 1863      0B000000 
 1863      42534554 
 1863      00000000 
 1864 06f0 E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 1864      08000000 
 1864      0B000000 
 1864      42524553 
 1864      00000000 
 1865 0704 FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
ARM GAS  tinyBasic.s 			page 55


 1865      07000000 
 1865      0C000000 
 1865      42495400 
 1866 0714 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 1866      06000000 
 1866      0B000000 
 1866      41575500 
 1867 0724 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 1867      05000000 
 1867      0B000000 
 1867      4155544F 
 1867      52554E00 
 1868 0738 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 1868      04000000 
 1868      0C000000 
 1868      41534300 
 1869 0748 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 1869      03000000 
 1869      0C000000 
 1869      414E4400 
 1870 0758 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 1870      02000000 
 1870      0C000000 
 1870      41444352 
 1870      45414400 
 1871 076c 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 1871      01000000 
 1871      0B000000 
 1871      4144434F 
 1871      4E000000 
 1872              	first_link: 
 1873 0780 78070000 	  .word LINK 
 1874 0784 00000000 	  .word ABS_IDX 
 1875 0788 0C000000 	  .word TK_IFUNC
 1876              	kword_dict: // first name field 
 1877              	  .equ LINK,. 
 1878 078c 41425300 	  .asciz "ABS" 
 1879              	  .p2align 2 
 1880              	
 1881              	    .section .rodata.fn_tabld 
 1882              	
 1883              	//comands and fonctions address table 	
 1884              	fn_table:
 1885 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 1885      00000000 
 1885      00000000 
 1885      00000000 
 1885      00000000 
 1886 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 1886      00000000 
 1886      00000000 
 1886      00000000 
 1886      00000000 
 1887 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 1887      00000000 
 1887      00000000 
 1887      00000000 
ARM GAS  tinyBasic.s 			page 56


 1887      00000000 
 1888 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 1888      00000000 
 1888      00000000 
 1888      00000000 
 1888      00000000 
 1889 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 1889      00000000 
 1889      00000000 
 1889      00000000 
 1889      00000000 
 1890 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 1890      00000000 
 1890      00000000 
 1890      00000000 
 1890      00000000 
 1891 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 1891      00000000 
 1891      00000000 
 1891      00000000 
 1891      00000000 
 1892 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1892      00000000 
 1893 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 1893      00000000 
 1893      00000000 
 1893      00000000 
 1893      00000000 
 1894 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 1894      00000000 
 1894      00000000 
 1894      00000000 
 1894      00000000 
 1895 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1896 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 1896      00000000 
 1896      00000000 
 1896      00000000 
 1896      00000000 
 1897 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 1897      00000000 
 1897      00000000 
 1897      00000000 
 1897      00000000 
 1898 0198 00000000 		.word 0 
 1899              	
 1900              	
 1901              	/**********************************
 1902              	    BASIC commands and functions 
 1903              	**********************************/
ARM GAS  tinyBasic.s 			page 57


 1904              	
 1905              	    .section .text.basic , "ax", %progbits 
 1906              	
 1907              	
 1908              	//************ test code  *****************
 1909              	    _GBL_FUNC tbi_test 
 1910              	
 1911              	
 1912 0000 7047     	    _RET 
 1913              	
 1914              	//************ end test code **************
 1915              	
 1916              	
 1917              	/*******************************
 1918              	  BASIC:  ABS expr 
 1919              	  input:
 1920              	    none 
 1921              	  output:
 1922              	    r0    token type 
 1923              	    r1    abs(expr)
 1924              	  use:
 1925              	    none 
 1926              	******************************/
 1927 0002 00BF     	    _FUNC abs 
 1928 0004 00B5FFF7 	    _CALL arg_list
 1928      FEFF5DF8 
 1928      04EB
 1929 000e 0128     	    cmp r0,#1 
 1930 0010 01D0     	    beq 1f 
 1931 0012 FFF7FEBF 	    b syntax_error 
 1932 0016 5CF8041B 	1:  _POP r1 
 1933 001a 11F0004F 	    tst r1,#(1<<31)
 1934 001e 01D0     	    beq 9f
 1935 0020 C1F10001 	    rsb r1,#0 
 1936 0024 4FF00F00 	9:  mov r0,#TK_INTGR
 1937 0028 7047     	   _RET 
 1938              	
 1939 002a 00BF     	    _FUNC power_adc
 1940 002c 7047     	    _RET
 1941              	
 1942 002e 00BF     	    _FUNC analog_read
 1943 0030 7047     	    _RET
 1944              	
 1945 0032 00BF     	    _FUNC bit_and
 1946 0034 7047     	    _RET
 1947              	
 1948 0036 00BF     	    _FUNC ascii
 1949 0038 7047     	    _RET
 1950              	
 1951 003a 00BF     	    _FUNC autorun
 1952 003c 7047     	    _RET
 1953              	
 1954 003e 00BF     	    _FUNC awu
 1955 0040 7047     	    _RET
 1956              	
 1957 0042 00BF     	    _FUNC bitmask
 1958 0044 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 58


 1959              	
 1960              	  
 1961              	  /*********************************
 1962              	   BASIC: BRES adr, mask   
 1963              	   reset bits [adr]= [adr] & ~mask  
 1964              	   input:
 1965              	     none 
 1966              	    output;
 1967              	      none 
 1968              	    use:
 1969              	      T1   temp
 1970              	      T2   temp 
 1971              	*******************************/     
 1972 0046 00BF     	  _FUNC bit_reset
 1973 0048 00B5FFF7 	    _CALL arg_list 
 1973      FEFF5DF8 
 1973      04EB
 1974 0052 0228     	    cmp r0,#2 
 1975 0054 01D0     	    beq 1f 
 1976 0056 FFF7FEBF 	    b syntax_error 
 1977 005a 5CF8041B 	1:  _POP r1 //mask 
 1978 005e 5CF8040B 	    _POP r0 //address 
 1979 0062 D0F80090 	    ldr T2,[r0] 
 1980 0066 81F0FF31 	    eor r1,#-1 // ~mask 
 1981 006a 01EA0901 	    and r1,T2
 1982 006e 0160     	    str r1,[r0]
 1983 0070 7047     	    _RET  
 1984              	
 1985              	
 1986              	/*********************************
 1987              	   BASIC: BSET adr, mask   
 1988              	   reset bits [adr]= [adr] & ~mask  
 1989              	   input:
 1990              	      none 
 1991              	    output;
 1992              	      none 
 1993              	    use:
 1994              	      T1   temp
 1995              	      T2   temp  
 1996              	*******************************/     
 1997 0072 00BF     	    _FUNC bit_set
 1998 0074 00B5FFF7 	    _CALL arg_list 
 1998      FEFF5DF8 
 1998      04EB
 1999 007e 0228     	    cmp r0,#2 
 2000 0080 01D0     	    beq 1f 
 2001 0082 FFF7FEBF 	    b syntax_error 
 2002 0086 5CF8041B 	1:  _POP r1 //mask 
 2003 008a 5CF8040B 	    _POP r0 //address 
 2004 008e D0F80090 	    ldr T2,[r0] 
 2005 0092 41EA0901 	    orr r1,T2
 2006 0096 0160     	    str r1,[r0]
 2007 0098 7047     	    _RET 
 2008              	
 2009              	  /*********************************
 2010              	   BASIC: BTOGL adr, mask   
 2011              	   reset bits [adr]= [adr] & ~mask  
ARM GAS  tinyBasic.s 			page 59


 2012              	   input:
 2013              	     r0    adr 
 2014              	     r1    mask 
 2015              	    output;
 2016              	      none 
 2017              	    use:
 2018              	      T1   temp
 2019              	      T2   temp  
 2020              	*******************************/     
 2021 009a 00BF     	  _FUNC bit_toggle
 2022 009c 00B5FFF7 	    _CALL arg_list 
 2022      FEFF5DF8 
 2022      04EB
 2023 00a6 0228     	    cmp r0,#2 
 2024 00a8 01D0     	    beq 1f 
 2025 00aa FFF7FEBF 	    b syntax_error 
 2026 00ae 5CF8041B 	1:  _POP r1 //mask 
 2027 00b2 5CF8040B 	    _POP r0 //address 
 2028 00b6 D0F80090 	    ldr T2,[r0] 
 2029 00ba 81EA0901 	    eor r1,T2
 2030 00be 0160     	    str r1,[r0]
 2031 00c0 7047     	    _RET  
 2032              	
 2033 00c2 00BF     	    _FUNC bit_test
 2034 00c4 7047     	    _RET 
 2035              	
 2036 00c6 00BF     	    _FUNC bye
 2037 00c8 7047     	    _RET 
 2038              	
 2039 00ca 00BF     	    _FUNC char
 2040 00cc 7047     	    _RET 
 2041              	
 2042 00ce 00BF     	    _FUNC const_cr2
 2043 00d0 7047     	    _RET  
 2044              	
 2045 00d2 00BF     	    _FUNC const_cr1
 2046 00d4 7047     	    _RET 
 2047              	
 2048 00d6 00BF     	    _FUNC data
 2049 00d8 7047     	    _RET 
 2050              	
 2051 00da 00BF     	    _FUNC data_line
 2052 00dc 7047     	    _RET 
 2053              	
 2054 00de 00BF     	    _FUNC const_ddr
 2055 00e0 7047     	    _RET 
 2056              	
 2057 00e2 00BF     	    _FUNC dec_base
 2058 00e4 7047     	    _RET 
 2059              	
 2060 00e6 00BF     	    _FUNC directory
 2061 00e8 7047     	    _RET 
 2062              	
 2063 00ea 00BF     	    _FUNC do_loop
 2064 00ec 7047     	    _RET 
 2065              	
 2066 00ee 00BF     	    _FUNC digital_read
ARM GAS  tinyBasic.s 			page 60


 2067 00f0 7047     	    _RET 
 2068              	
 2069 00f2 00BF     	    _FUNC digital_write
 2070 00f4 7047     	    _RET  
 2071              	
 2072 00f6 00BF     	    _FUNC cmd_end
 2073 00f8 7047     	    _RET 
 2074              	
 2075 00fa 00BF     	    _FUNC const_eeprom_base
 2076 00fc 7047     	    _RET 
 2077              	
 2078 00fe 00BF     	    _FUNC fcpu
 2079 0100 7047     	    _RET 
 2080              	
 2081 0102 00BF     	    _FUNC for
 2082 0104 7047     	    _RET 
 2083              	
 2084 0106 00BF     	    _FUNC forget
 2085 0108 7047     	    _RET 
 2086              	
 2087 010a 00BF     	    _FUNC gosub
 2088 010c 7047     	    _RET 
 2089              	
 2090 010e 00BF     	    _FUNC goto
 2091 0110 7047     	    _RET 
 2092              	
 2093 0112 00BF     	    _FUNC gpio
 2094 0114 7047     	    _RET  
 2095              	
 2096 0116 00BF     	    _FUNC hex_base
 2097 0118 7047     	    _RET 
 2098              	
 2099 011a 00BF     	    _FUNC const_idr
 2100 011c 7047     	    _RET 
 2101              	
 2102 011e 00BF     	    _FUNC if
 2103 0120 7047     	    _RET 
 2104              	
 2105 0122 00BF     	    _FUNC input_var
 2106 0124 7047     	    _RET 
 2107              	
 2108 0126 00BF     	    _FUNC invert
 2109 0128 7047     	    _RET 
 2110              	
 2111 012a 00BF     	    _FUNC enable_iwdg
 2112 012c 7047     	    _RET 
 2113              	
 2114 012e 00BF     	    _FUNC refresh_iwdg
 2115 0130 7047     	    _RET 
 2116              	
 2117 0132 00BF     	    _FUNC key
 2118 0134 7047     	    _RET  
 2119              	
 2120              	/******************************
 2121              	  BASIC: [let] var=expr 
 2122              	         [let] @(expr)=expr
 2123              	  input:
ARM GAS  tinyBasic.s 			page 61


 2124              	    none 
 2125              	  output:
 2126              	    none 
 2127              	  use:
 2128              	
 2129              	****************************/         
 2130 0136 00BF     	    _FUNC let
 2131 0138 00B5FFF7 	    _CALL next_token 
 2131      FEFF5DF8 
 2131      04EB
 2132 0142 0528     	    cmp r0,#TK_VAR
 2133 0144 03D0     	    beq let_var 
 2134 0146 0628     	    cmp r0,#TK_ARRAY 
 2135 0148 06D0     	    beq let_array 
 2136 014a FFF7FEBF 	    b syntax_error 
 2137              	let_var:
 2138 014e 00B5FFF7 	    _CALL get_array_element
 2138      FEFF5DF8 
 2138      04EB
 2139              	let_array: 
 2140 0158 4CF8040D 	    _PUSH r0 
 2141 015c 00B5FFF7 	    _CALL next_token 
 2141      FEFF5DF8 
 2141      04EB
 2142 0166 3228     	    cmp r0,#TK_EQUAL 
 2143 0168 01D0     	    beq 1f 
 2144 016a FFF7FEBF 	    b syntax_error 
 2145 016e 00B5FFF7 	1:  _CALL relation  
 2145      FEFF5DF8 
 2145      04EB
 2146 0178 0F28     	    cmp r0,#TK_INTGR
 2147 017a 01D0     	    beq 2f 
 2148 017c FFF7FEBF 	    b syntax_error 
 2149 0180 5CF8040B 	2:  _POP r0 
 2150 0184 0160     	    str r1,[r0]
 2151 0186 4FF00000 	    mov r0,#TK_NONE 
 2152 018a 7047     	    _RET  
 2153              	
 2154              	    _FUNC list
 2155 018c 7047     	    _RET 
 2156              	
 2157 018e 00BF     	    _FUNC load
 2158 0190 7047     	    _RET 
 2159              	
 2160 0192 00BF     	    _FUNC log2
 2161 0194 7047     	    _RET 
 2162              	
 2163 0196 00BF     	    _FUNC lshift
 2164 0198 7047     	    _RET 
 2165              	
 2166 019a 00BF     	    _FUNC muldiv
 2167 019c 7047     	    _RET 
 2168              	
 2169 019e 00BF     	    _FUNC next
 2170 01a0 7047     	    _RET 
 2171              	
 2172 01a2 00BF     	    _FUNC new
ARM GAS  tinyBasic.s 			page 62


 2173 01a4 7047     	    _RET  
 2174              	
 2175 01a6 00BF     	    _FUNC func_not
 2176 01a8 7047     	    _RET 
 2177              	
 2178 01aa 00BF     	    _FUNC const_odr
 2179 01ac 7047     	    _RET 
 2180              	
 2181 01ae 00BF     	    _FUNC bit_or
 2182 01b0 7047     	    _RET 
 2183              	
 2184 01b2 00BF     	    _FUNC pad_ref
 2185 01b4 7047     	    _RET 
 2186              	
 2187 01b6 00BF     	    _FUNC pause
 2188 01b8 7047     	    _RET 
 2189              	
 2190 01ba 00BF     	    _FUNC pin_mode
 2191 01bc 7047     	    _RET 
 2192              	
 2193 01be 00BF     	    _FUNC peek
 2194 01c0 7047     	    _RET 
 2195              	
 2196 01c2 00BF     	    _FUNC const_input
 2197 01c4 7047     	    _RET  
 2198              	
 2199 01c6 00BF     	    _FUNC poke
 2200 01c8 7047     	    _RET 
 2201              	
 2202 01ca 00BF     	    _FUNC const_output
 2203 01cc 7047     	    _RET 
 2204              	
 2205 01ce 00BF     	    _FUNC print
 2206 01d0 7047     	    _RET 
 2207              	
 2208 01d2 00BF     	    _FUNC const_porta
 2209 01d4 7047     	    _RET 
 2210              	
 2211 01d6 00BF     	    _FUNC const_portb
 2212 01d8 7047     	    _RET 
 2213              	
 2214 01da 00BF     	    _FUNC const_portc
 2215 01dc 7047     	    _RET 
 2216              	
 2217 01de 00BF     	    _FUNC const_portd
 2218 01e0 7047     	    _RET 
 2219              	
 2220 01e2 00BF     	    _FUNC const_porte
 2221 01e4 7047     	    _RET  
 2222              	
 2223 01e6 00BF     	    _FUNC const_portf
 2224 01e8 7047     	    _RET 
 2225              	
 2226 01ea 00BF     	    _FUNC const_portg
 2227 01ec 7047     	    _RET 
 2228              	
 2229 01ee 00BF     	    _FUNC const_porth
ARM GAS  tinyBasic.s 			page 63


 2230 01f0 7047     	    _RET 
 2231              	
 2232 01f2 00BF     	    _FUNC const_porti
 2233 01f4 7047     	    _RET 
 2234              	
 2235 01f6 00BF     	    _FUNC qkey
 2236 01f8 7047     	    _RET 
 2237              	
 2238 01fa 00BF     	    _FUNC read
 2239 01fc 7047     	    _RET 
 2240              	
 2241 01fe 00BF     	    _FUNC remark
 2242 0200 7047     	    _RET  
 2243              	
 2244 0202 00BF     	    _FUNC restore
 2245 0204 7047     	    _RET 
 2246              	
 2247 0206 00BF     	    _FUNC return
 2248 0208 7047     	    _RET 
 2249              	
 2250 020a 00BF     	    _FUNC  random
 2251 020c 7047     	    _RET 
 2252              	
 2253 020e 00BF     	    _FUNC rshift
 2254 0210 7047     	    _RET 
 2255              	
 2256 0212 00BF     	    _FUNC run
 2257 0214 7047     	    _RET 
 2258              	
 2259 0216 00BF     	    _FUNC save
 2260 0218 7047     	    _RET 
 2261              	
 2262 021a 00BF     	    _FUNC show
 2263 021c 7047     	    _RET 
 2264              	
 2265 021e 00BF     	    _FUNC size
 2266 0220 7047     	    _RET  
 2267              	
 2268 0222 00BF     	    _FUNC sleep
 2269 0224 7047     	    _RET 
 2270              	
 2271 0226 00BF     	    _FUNC spi_read
 2272 0228 7047     	    _RET 
 2273              	
 2274 022a 00BF     	    _FUNC spi_enable
 2275 022c 7047     	    _RET 
 2276              	
 2277 022e 00BF     	    _FUNC spi_select
 2278 0230 7047     	    _RET 
 2279              	
 2280 0232 00BF     	    _FUNC spi_write
 2281 0234 7047     	    _RET 
 2282              	
 2283 0236 00BF     	    _FUNC step
 2284 0238 7047     	    _RET 
 2285              	
 2286 023a 00BF     	    _FUNC stop
ARM GAS  tinyBasic.s 			page 64


 2287 023c 7047     	    _RET 
 2288              	
 2289 023e 00BF     	    _FUNC get_ticks
 2290 0240 7047     	    _RET  
 2291              	
 2292 0242 00BF     	    _FUNC set_timer
 2293 0244 7047     	    _RET 
 2294              	
 2295 0246 00BF     	    _FUNC timeout
 2296 0248 7047     	    _RET 
 2297              	
 2298 024a 00BF     	    _FUNC to
 2299 024c 7047     	    _RET 
 2300              	
 2301 024e 00BF     	    _FUNC tone
 2302 0250 7047     	    _RET 
 2303              	
 2304 0252 00BF     	    _FUNC ubound
 2305 0254 7047     	    _RET 
 2306              	
 2307 0256 00BF     	    _FUNC uflash
 2308 0258 7047     	    _RET 
 2309              	
 2310 025a 00BF     	    _FUNC until
 2311 025c 7047     	    _RET 
 2312              	
 2313 025e 00BF     	    _FUNC usr
 2314 0260 7047     	    _RET  
 2315              	
 2316 0262 00BF     	    _FUNC wait
 2317 0264 7047     	    _RET 
 2318              	
 2319 0266 00BF     	    _FUNC words
 2320 0268 7047     	    _RET 
 2321              	
 2322 026a 00BF     	    _FUNC write
 2323 026c 7047     	    _RET 
 2324              	
 2325 026e 00BF     	    _FUNC bit_xor
 2326 0270 7047     	    _RET 
 2327              	
 2328 0272 00BF     	    _FUNC transmit
 2329 0274 7047     	    _RET 
 2330              	
 2331 0276 00BF     	    _FUNC receive
 2332 0278 7047     	    _RET  
 2333              	
 2334              	
 2335              	/*************************************************
 2336              	   extra FLASH memory not used by Tiny BASIC
 2337              	   is used to save BASIC programs.
 2338              	************************************************/
 2339 027a 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2339      00800000 
 2339      00000000 
 2339      00000000 
 2339      00000000 
ARM GAS  tinyBasic.s 			page 65


 2340              	  .section .fs
 2341              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 66


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 67


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 68


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 69


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 70


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:159    *ABS*:00000000000000cc ARRAY_ADR
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 71


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 72


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:249    .text:0000000000000150 dump
         tinyBasic.s:273    .text:000000000000016c search_lineno
         tinyBasic.s:304    .text:000000000000018c delete_line
         tinyBasic.s:329    .text:00000000000001b8 create_gap
         tinyBasic.s:354    .text:00000000000001e0 insert_line
         tinyBasic.s:392    .text:000000000000022c compile
         tinyBasic.s:1223   .text:0000000000000824 pad
         tinyBasic.s:613    .text:000000000000040c parse_int
         tinyBasic.s:978    .text:0000000000000624 tb_error
         tinyBasic.s:461    .text:00000000000002b8 comp_token
         tinyBasic.s:524    .text:0000000000000372 store_r0
         tinyBasic.s:728    .text:00000000000004f0 skip
         tinyBasic.s:744    .text:0000000000000500 upper
         tinyBasic.s:553    .text:00000000000003a4 is_special
         tinyBasic.s:573    .text:00000000000003e1 token_ofs
         tinyBasic.s:476    .text:00000000000002f8 tok_idx0
         tinyBasic.s:527    .text:0000000000000378 try_number
         tinyBasic.s:480    .text:00000000000002fa single
         tinyBasic.s:569    .text:00000000000003d4 tok_single
         tinyBasic.s:484    .text:0000000000000302 lt
         tinyBasic.s:487    .text:0000000000000308 gt
         tinyBasic.s:963    .text:000000000000061c syntax_error
         tinyBasic.s:537    .text:00000000000003a0 token_exit
ARM GAS  tinyBasic.s 			page 73


         tinyBasic.s:503    .text:0000000000000332 bkslash
         tinyBasic.s:508    .text:0000000000000340 prt_cmd
         tinyBasic.s:512    .text:000000000000034a quote
         tinyBasic.s:668    .text:0000000000000484 parse_quote
         tinyBasic.s:515    .text:0000000000000356 tick
         tinyBasic.s:895    .text:00000000000005b0 parse_keyword
         tinyBasic.s:566    .text:00000000000003c0 char_list
         tinyBasic.s:567    .text:00000000000003c0 $d
         tinyBasic.s:699    .text:00000000000004bc get_escaped_char
         tinyBasic.s:717    .text:00000000000004e8 escaped
         tinyBasic.s:717    .text:00000000000004e8 $d
         tinyBasic.s:728    .text:00000000000004f0 $t
         tinyBasic.s:762    .text:0000000000000510 is_digit
         tinyBasic.s:785    .text:0000000000000528 is_hex
         tinyBasic.s:810    .text:000000000000054c is_bit
         tinyBasic.s:831    .text:0000000000000568 is_alpha
         tinyBasic.s:852    .text:0000000000000580 is_num
         tinyBasic.s:873    .text:0000000000000598 is_alnum
         tinyBasic.s:1876   .rodata.dictionary:000000000000078c kword_dict
         tinyBasic.s:1056   .text:00000000000006ac search_dict
         tinyBasic.s:933    .text:00000000000005fc cmd_name
         tinyBasic.s:998    .text:0000000000000668 err_msg
         tinyBasic.s:989    .text:0000000000000640 compile_error
         tinyBasic.s:986    .text:0000000000000640 interpret_error
         tinyBasic.s:1236   .text:0000000000000834 warm_start
         tinyBasic.s:999    .text:0000000000000668 $d
         tinyBasic.s:1005   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1006   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1007   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1008   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1009   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1010   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1011   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1012   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1013   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1014   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1015   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1016   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1017   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1018   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1019   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1021   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1022   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1023   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1040   .text:00000000000006a8 $t
         tinyBasic.s:1040   .text:00000000000006a8 BTGL
         tinyBasic.s:1093   .text:00000000000006e0 cold_start
         tinyBasic.s:1106   .text:0000000000000718 src_addr
         tinyBasic.s:1108   .text:000000000000071c dest_addr
         tinyBasic.s:1761   .rodata:00000000000000d4 ulast
         tinyBasic.s:1735   .rodata:0000000000000000 uzero
         tinyBasic.s:1120   .text:0000000000000720 prt_version
         tinyBasic.s:1177   .text:00000000000007c8 clear_basic
         tinyBasic.s:1107   .text:0000000000000718 $d
         tinyBasic.s:1120   .text:0000000000000720 $t
         tinyBasic.s:1144   .text:0000000000000788 version_msg
         tinyBasic.s:1146   .text:00000000000007a8 version
ARM GAS  tinyBasic.s 			page 74


         tinyBasic.s:1145   .text:0000000000000788 $d
         tinyBasic.s:1161   .text:00000000000007ac clear_vars
         tinyBasic.s:1202   .text:00000000000007ee warm_init
         tinyBasic.s:1220   .text:0000000000000818 mstack
         tinyBasic.s:1221   .text:000000000000081c dstack
         tinyBasic.s:1220   .text:0000000000000818 $d
         tinyBasic.s:1222   .text:0000000000000820 tib
         tinyBasic.s:1224   .text:0000000000000828 array
         tinyBasic.s:1225   .text:000000000000082c ready
         tinyBasic.s:1236   .text:0000000000000832 $t
         tinyBasic.s:1253   .text:0000000000000848 cmd_line
         tinyBasic.s:1264   .text:0000000000000878 interpreter
         tinyBasic.s:1282   .text:000000000000089a interp_loop
         tinyBasic.s:1269   .text:000000000000087e next_line
         tinyBasic.s:1318   .text:00000000000008d0 next_token
         tinyBasic.s:1884   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:2137   .text.basic:000000000000014e let_var
         tinyBasic.s:2139   .text.basic:0000000000000158 let_array
         tinyBasic.s:1362   .text:0000000000000940 tok_jmp
         tinyBasic.s:1363   .text:0000000000000940 $d
         tinyBasic.s:1393   .text:0000000000000988 expect
         tinyBasic.s:1412   .text:00000000000009a4 func_args
         tinyBasic.s:1432   .text:00000000000009d0 arg_list
         tinyBasic.s:1599   .text:0000000000000b58 relation
         tinyBasic.s:1463   .text:0000000000000a0c factor
         tinyBasic.s:1665   .text:0000000000000bdc get_array_element
         tinyBasic.s:1702   .text:0000000000000c04 get_var
         tinyBasic.s:1509   .text:0000000000000a7c term
         tinyBasic.s:1527   .text:0000000000000ac0 multiplication
         tinyBasic.s:1535   .text:0000000000000ad2 modulo
         tinyBasic.s:1532   .text:0000000000000acc division
         tinyBasic.s:1558   .text:0000000000000af4 expression
         tinyBasic.s:1646   .text:0000000000000bd2 relop_jmp
         tinyBasic.s:1618   .text:0000000000000ba2 rel_idx0
         tinyBasic.s:1619   .text:0000000000000ba2 rel_eq
         tinyBasic.s:1636   .text:0000000000000bb8 rel_false
         tinyBasic.s:1622   .text:0000000000000ba6 rel_lt
         tinyBasic.s:1625   .text:0000000000000baa rel_le
         tinyBasic.s:1628   .text:0000000000000bae rel_gt
         tinyBasic.s:1631   .text:0000000000000bb2 rel_ge
         tinyBasic.s:1634   .text:0000000000000bb6 rel_diff
         tinyBasic.s:1647   .text:0000000000000bd2 $d
         tinyBasic.s:1684   .text:0000000000000bf0 set_array_element
         tinyBasic.s:1720   .text:0000000000000c14 set_var
         tinyBasic.s:2341   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1757   .rodata:0000000000000054 $d
         tinyBasic.s:1768   *ABS*:0000000000000000 link
         tinyBasic.s:1769   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:1877   .rodata.dictionary:000000000000078c LINK
         tinyBasic.s:1770   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:1872   .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:1927   .text.basic:0000000000000004 abs
         tinyBasic.s:1939   .text.basic:000000000000002c power_adc
         tinyBasic.s:1942   .text.basic:0000000000000030 analog_read
         tinyBasic.s:1945   .text.basic:0000000000000034 bit_and
         tinyBasic.s:1948   .text.basic:0000000000000038 ascii
         tinyBasic.s:1951   .text.basic:000000000000003c autorun
ARM GAS  tinyBasic.s 			page 75


         tinyBasic.s:1954   .text.basic:0000000000000040 awu
         tinyBasic.s:1957   .text.basic:0000000000000044 bitmask
         tinyBasic.s:1972   .text.basic:0000000000000048 bit_reset
         tinyBasic.s:1997   .text.basic:0000000000000074 bit_set
         tinyBasic.s:2033   .text.basic:00000000000000c4 bit_test
         tinyBasic.s:2021   .text.basic:000000000000009c bit_toggle
         tinyBasic.s:2036   .text.basic:00000000000000c8 bye
         tinyBasic.s:2039   .text.basic:00000000000000cc char
         tinyBasic.s:2042   .text.basic:00000000000000d0 const_cr2
         tinyBasic.s:2045   .text.basic:00000000000000d4 const_cr1
         tinyBasic.s:2048   .text.basic:00000000000000d8 data
         tinyBasic.s:2051   .text.basic:00000000000000dc data_line
         tinyBasic.s:2054   .text.basic:00000000000000e0 const_ddr
         tinyBasic.s:2057   .text.basic:00000000000000e4 dec_base
         tinyBasic.s:2060   .text.basic:00000000000000e8 directory
         tinyBasic.s:2063   .text.basic:00000000000000ec do_loop
         tinyBasic.s:2066   .text.basic:00000000000000f0 digital_read
         tinyBasic.s:2069   .text.basic:00000000000000f4 digital_write
         tinyBasic.s:2072   .text.basic:00000000000000f8 cmd_end
         tinyBasic.s:2075   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2078   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2081   .text.basic:0000000000000104 for
         tinyBasic.s:2084   .text.basic:0000000000000108 forget
         tinyBasic.s:2087   .text.basic:000000000000010c gosub
         tinyBasic.s:2090   .text.basic:0000000000000110 goto
         tinyBasic.s:2093   .text.basic:0000000000000114 gpio
         tinyBasic.s:2096   .text.basic:0000000000000118 hex_base
         tinyBasic.s:2099   .text.basic:000000000000011c const_idr
         tinyBasic.s:2102   .text.basic:0000000000000120 if
         tinyBasic.s:2105   .text.basic:0000000000000124 input_var
         tinyBasic.s:2108   .text.basic:0000000000000128 invert
         tinyBasic.s:2111   .text.basic:000000000000012c enable_iwdg
         tinyBasic.s:2114   .text.basic:0000000000000130 refresh_iwdg
         tinyBasic.s:2117   .text.basic:0000000000000134 key
         tinyBasic.s:2130   .text.basic:0000000000000138 let
         tinyBasic.s:2154   .text.basic:000000000000018c list
         tinyBasic.s:2157   .text.basic:0000000000000190 load
         tinyBasic.s:2160   .text.basic:0000000000000194 log2
         tinyBasic.s:2163   .text.basic:0000000000000198 lshift
         tinyBasic.s:2166   .text.basic:000000000000019c muldiv
         tinyBasic.s:2169   .text.basic:00000000000001a0 next
         tinyBasic.s:2172   .text.basic:00000000000001a4 new
         tinyBasic.s:2175   .text.basic:00000000000001a8 func_not
         tinyBasic.s:2178   .text.basic:00000000000001ac const_odr
         tinyBasic.s:2181   .text.basic:00000000000001b0 bit_or
         tinyBasic.s:2184   .text.basic:00000000000001b4 pad_ref
         tinyBasic.s:2187   .text.basic:00000000000001b8 pause
         tinyBasic.s:2190   .text.basic:00000000000001bc pin_mode
         tinyBasic.s:2193   .text.basic:00000000000001c0 peek
         tinyBasic.s:2196   .text.basic:00000000000001c4 const_input
         tinyBasic.s:2199   .text.basic:00000000000001c8 poke
         tinyBasic.s:2202   .text.basic:00000000000001cc const_output
         tinyBasic.s:2205   .text.basic:00000000000001d0 print
         tinyBasic.s:2208   .text.basic:00000000000001d4 const_porta
         tinyBasic.s:2211   .text.basic:00000000000001d8 const_portb
         tinyBasic.s:2214   .text.basic:00000000000001dc const_portc
         tinyBasic.s:2217   .text.basic:00000000000001e0 const_portd
ARM GAS  tinyBasic.s 			page 76


         tinyBasic.s:2220   .text.basic:00000000000001e4 const_porte
         tinyBasic.s:2223   .text.basic:00000000000001e8 const_portf
         tinyBasic.s:2226   .text.basic:00000000000001ec const_portg
         tinyBasic.s:2229   .text.basic:00000000000001f0 const_porth
         tinyBasic.s:2232   .text.basic:00000000000001f4 const_porti
         tinyBasic.s:2235   .text.basic:00000000000001f8 qkey
         tinyBasic.s:2238   .text.basic:00000000000001fc read
         tinyBasic.s:2241   .text.basic:0000000000000200 remark
         tinyBasic.s:2244   .text.basic:0000000000000204 restore
         tinyBasic.s:2247   .text.basic:0000000000000208 return
         tinyBasic.s:2250   .text.basic:000000000000020c random
         tinyBasic.s:2253   .text.basic:0000000000000210 rshift
         tinyBasic.s:2256   .text.basic:0000000000000214 run
         tinyBasic.s:2259   .text.basic:0000000000000218 save
         tinyBasic.s:2262   .text.basic:000000000000021c show
         tinyBasic.s:2265   .text.basic:0000000000000220 size
         tinyBasic.s:2268   .text.basic:0000000000000224 sleep
         tinyBasic.s:2271   .text.basic:0000000000000228 spi_read
         tinyBasic.s:2274   .text.basic:000000000000022c spi_enable
         tinyBasic.s:2277   .text.basic:0000000000000230 spi_select
         tinyBasic.s:2280   .text.basic:0000000000000234 spi_write
         tinyBasic.s:2283   .text.basic:0000000000000238 step
         tinyBasic.s:2286   .text.basic:000000000000023c stop
         tinyBasic.s:2289   .text.basic:0000000000000240 get_ticks
         tinyBasic.s:2292   .text.basic:0000000000000244 set_timer
         tinyBasic.s:2295   .text.basic:0000000000000248 timeout
         tinyBasic.s:2298   .text.basic:000000000000024c to
         tinyBasic.s:2301   .text.basic:0000000000000250 tone
         tinyBasic.s:2304   .text.basic:0000000000000254 ubound
         tinyBasic.s:2307   .text.basic:0000000000000258 uflash
         tinyBasic.s:2310   .text.basic:000000000000025c until
         tinyBasic.s:2313   .text.basic:0000000000000260 usr
         tinyBasic.s:2316   .text.basic:0000000000000264 wait
         tinyBasic.s:2319   .text.basic:0000000000000268 words
         tinyBasic.s:2322   .text.basic:000000000000026c write
         tinyBasic.s:2325   .text.basic:0000000000000270 bit_xor
         tinyBasic.s:2328   .text.basic:0000000000000274 transmit
         tinyBasic.s:2331   .text.basic:0000000000000278 receive
         tinyBasic.s:1909   .text.basic:0000000000000000 tbi_test
         tinyBasic.s:1909   .text.basic:0000000000000000 $t
         tinyBasic.s:1732   .text:0000000000000c22 $d
         tinyBasic.s:2341   .text:0000000000000c24 $d
         tinyBasic.s:613    .text:0000000000000409 $d
         tinyBasic.s:613    .text:000000000000040a $t
         tinyBasic.s:1148   .text:00000000000007a9 $d
         tinyBasic.s:1148   .text:00000000000007aa $t
         tinyBasic.s:1378   .text:0000000000000985 $d
         tinyBasic.s:1378   .text:0000000000000986 $t
         tinyBasic.s:1665   .text:0000000000000bd9 $d
         tinyBasic.s:1665   .text:0000000000000bda $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
ARM GAS  tinyBasic.s 			page 77


vectors_size
_mstack
_dstack
_tib
_pad
readln
