ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
ARM GAS  tinyBasic.s 			page 8


  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
ARM GAS  tinyBasic.s 			page 9


 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
ARM GAS  tinyBasic.s 			page 10


 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
ARM GAS  tinyBasic.s 			page 11


  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CLS_IDX,CHAR_IDX+1 //
  36              	    .equ CONST_IDX,CLS_IDX+1 //
  37              	    .equ DATA_IDX,CONST_IDX+1 // 
  38              	    .equ DATALN_IDX,DATA_IDX+1 // 
  39              	    .equ DEC_IDX,DATALN_IDX+1 // 
  40              	    .equ DIR_IDX,DEC_IDX+1 // 
  41              	    .equ DO_IDX,DIR_IDX+1 // 
  42              	    .equ DROP_IDX,DO_IDX+1
  43              	    .equ DUMP_IDX, DROP_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ ERASE_IDX,END_IDX+1 
  46              	    .equ FOR_IDX, ERASE_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ FREE_IDX, FORGET_IDX+1 // 
  49              	    .equ GET_IDX,FREE_IDX+1
  50              	    .equ GOSUB_IDX, GET_IDX+1 // 
  51              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  52              	    .equ HEX_IDX, GOTO_IDX+1 // 
  53              	    .equ IF_IDX, HEX_IDX+1 // 
  54              	    .equ IN_IDX,IF_IDX+1
  55              	    .equ INPUT_IDX, IN_IDX+1 // 
  56              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  57              	    .equ KEY_IDX, INVERT_IDX+1 // 
  58              	    .equ LET_IDX, KEY_IDX+1 // 
  59              	    .equ LIST_IDX, LET_IDX+1 // 
  60              	    .equ LOAD_IDX, LIST_IDX+1 // 
  61              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  62              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  63              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  64              	    .equ NEXT_IDX, NEW_IDX+1 // 
  65              	    .equ NOT_IDX, NEXT_IDX+1 // 
  66              	    .equ OR_IDX, NOT_IDX+1 // 
  67              	    .equ OUT_IDX,OR_IDX+1
  68              	    .equ PAD_IDX, OUT_IDX+1 // 
  69              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  70              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  71              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  72              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  73              	    .equ PEEK32_IDX, PEEK16_IDX+1
  74              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  75              	    .equ POKE16_IDX,POKE8_IDX+1 
  76              	    .equ POKE32_IDX,POKE16_IDX+1
  77              	    .equ POP_IDX,POKE32_IDX+1
  78              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  79              	    .equ PUSH_IDX,PRT_IDX+1
  80              	    .equ PUT_IDX,PUSH_IDX+1
  81              	    .equ QKEY_IDX, PUT_IDX+1 // 
  82              	    .equ READ_IDX, QKEY_IDX+1 // 
  83              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  84              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  85              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  86              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  87              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  88              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  89              	    .equ SAVE_IDX, RUN_IDX+1 // 
  90              	    .equ SLEEP_IDX, SAVE_IDX+1 // 
  91              	    .equ SPC_IDX,SLEEP_IDX+1 //
  92              	    .equ STEP_IDX, SPC_IDX+1 // 
  93              	    .equ STOP_IDX, STEP_IDX+1 // 
  94              	    .equ STORE_IDX,STOP_IDX+1
  95              	    .equ TAB_IDX, STORE_IDX+1 //
  96              	    .equ THEN_IDX,TAB_IDX+1
  97              	    .equ TICKS_IDX, THEN_IDX+1 // 
  98              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  99              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 100              	    .equ TO_IDX, TMROUT_IDX+1 // 
 101              	    .equ TRACE_IDX,TO_IDX+1
 102              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 103              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 104              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 105              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 106              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 107              	    .equ XOR_IDX, WORDS_IDX+1 //
 108              	    .equ XPOS_IDX,XOR_IDX+1 //
 109              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 110              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
ARM GAS  tinyBasic.s 			page 13


  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
ARM GAS  tinyBasic.s 			page 14


 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
ARM GAS  tinyBasic.s 			page 15


 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
ARM GAS  tinyBasic.s 			page 16


 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
ARM GAS  tinyBasic.s 			page 17


 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
ARM GAS  tinyBasic.s 			page 18


 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      E7FD5DF8 
 318      04EB
 319 0256 1A28     	    cmp r0,TK_LABEL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      32F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      FBFE5DF8 
 325      04EB
 326 027a 1B28     	    cmp r0,#TK_INTGR 
 327 027c 40F0DA83 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 19


 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 D2E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  TK_INTGR 
 344              	    r1  constant value  
 345              	  use:
 346              	    r2   *list 
 347              	    r3   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 0CB4     	    push {r2,r3} 
 351 029a 626B     	    ldr r2,[UPP,#TXTEND]
 352 029c D4F8D030 	    ldr r3,[UPP,#HERE] 
 353 02a0 9A42     	1:  cmp r2,r3 
 354 02a2 0BD5     	    bpl 8f 
 355 02a4 52F8041B 	    ldr r1,[r2],#4
 356 02a8 8842     	    cmp r0,r1 
 357 02aa 02D0     	    beq 2f 
 358 02ac 02F10402 	    add r2,#4
 359 02b0 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b2 1168     	    ldr r1,[r2]
 362 02b4 4FF01B00 	    mov r0,#TK_INTGR 
 363 02b8 0CBC     	    pop {r2,r3}
 364 02ba 7047     	    _RET
 365              	8:  // that constant doesn't exist 
 366 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 367 02c0 BCE3     	    b tb_error      
 368              	
 369              	
 370              	/***************************************
 371              	    search_label 
 372              	    search target label 
 373              	    input:
 374              	      r1    target label 
 375              	    output:
 376              	      r0    address or 0 
 377              	    use:
 378              	      r2    line address link 
 379              	      r3    search limit 
 380              	****************************************/
 381 02c2 00BF     	    _FUNC search_label 
 382 02c4 0CB4     	    push {r2,r3}
 383 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 384 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 385 02ca 9A42     	1:  cmp r2,r3
 386 02cc 0AD0     	    beq 8f 
ARM GAS  tinyBasic.s 			page 20


 387 02ce D078     	    ldrb r0,[r2,#3]
 388 02d0 1A28     	    cmp  r0,#TK_LABEL 
 389 02d2 02D0     	    beq 4f 
 390 02d4 9078     	2:  ldrb r0,[r2,#2]
 391 02d6 0244     	    add r2,r0 
 392 02d8 F7E7     	    b 1b 
 393              	4:  // compare label 
 394 02da 5068     	    ldr r0,[R2,#4]
 395 02dc 8142     	    cmp r1,r0 
 396 02de F9D1     	    bne 2b 
 397              	    // found label 
 398 02e0 1046     	    mov r0,r2 
 399 02e2 01E0     	    b 9f
 400 02e4 80EA0000 	8:  eor r0,r0 
 401 02e8 0CBC     	9:  pop {r2,r3}
 402 02ea 7047     	    _RET 
 403              	
 404              	
 405              	/***************************************
 406              	    search_lineno 
 407              	    localize BASIC line from its number 
 408              	    input:
 409              	      r0   line# 
 410              	    output: 
 411              	      r0   adr where found || adr new to be inserted 
 412              	      r1   0 found || !0 not found  
 413              	    use:
 414              	      r0   scan address 
 415              	      r1   temp   
 416              	      r2   address end of text
 417              	      r3   target line#
 418              	****************************************/    
 419              	    _GBL_FUNC search_lineno
 420 02ec 0CB4     	    push {r2,r3} 
 421 02ee 0346     	    mov r3,r0 // target 
 422 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 423 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 424 02f4 9042     	1:  cmp r0,r2 
 425 02f6 05D0     	    beq  8f
 426 02f8 0188     	    ldrh r1,[r0]
 427 02fa C91A     	    subs r1,r3 
 428 02fc 04D5     	    bpl 9f 
 429 02fe 8178     	    ldrb r1,[r0,#2]
 430 0300 0844     	    add r0,r1
 431 0302 F7E7     	    b 1b 
 432 0304 4FF0FF31 	8:  mov r1,#-1 
 433 0308 0CBC     	9:  pop {r2,r3}
 434 030a 7047     	    _RET 
 435              	
 436              	
 437              	/********************************************
 438              	    delete_line 
 439              	    delete BASIC line at addr 
 440              	    input:
 441              	      r0    address line to delete 
 442              	    output:
 443              	      r0    same as input 
ARM GAS  tinyBasic.s 			page 21


 444              	    use: 
 445              	      r1    dest adr
 446              	      r2    bytes to move 
 447              	      T1    length line to delete 
 448              	      T2    txtend 
 449              	********************************************/
 450              	    _FUNC delete_line 
 451 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
 452 0310 0146     	    mov r1,r0 // dest 
 453 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 454 0316 4044     	    add r0,T1  // src
 455 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 456 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 457 0320 00B5FFF7 	    _CALL cmove
 457      FEFF5DF8 
 457      04EB
 458 032a A9EB0809 	    sub T2,T1 // txtend-count 
 459 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 460 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 461 0336 7047     	    _RET 
 462              	
 463              	/******************************************
 464              	    create_gap 
 465              	    create a gap in text area to insert new line 
 466              	    input:
 467              	      r0    adr 
 468              	      r1    length 
 469              	    output:
 470              	      r0    adr 
 471              	    use:
 472              	      T1    length 
 473              	      T2    txtend 
 474              	************************************************/
 475              	    _FUNC create_gap 
 476 0338 2DE90503 	    push {r0,r2,T1,T2}
 477 033c 8846     	    mov T1,R1
 478 033e 0144     	    add r1,r0  // dest 
 479 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 480 0344 A9EB0002 	    sub r2,T2,r0 
 481 0348 00B5FFF7 	    _CALL cmove
 481      FEFF5DF8 
 481      04EB
 482 0352 C144     	    add T2,T1 
 483 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 484 0358 BDE80503 	    pop {r0,r2,T1,T2}
 485 035c 7047     	    _RET 
 486              	
 487              	/************************************************
 488              	    insert_line 
 489              	    insert BASIC line in text area 
 490              	    first search if line with same number exist 
 491              	    replace if so. 
 492              	    input:
 493              	      r0    *buffer to insert 
 494              	    output:
 495              	      none 
 496              	    use: 
ARM GAS  tinyBasic.s 			page 22


 497              	      T1     *buffer
 498              	      T2     temp  
 499              	************************************************/ 
 500 035e 00BF     	    _FUNC insert_line 
 501 0360 2DE90203 	    push {r1,T1,T2}
 502 0364 8046     	    mov T1,r0 
 503 0366 B8F80000 	    ldrh r0,[T1]
 504 036a 00B5FFF7 	    _CALL search_lineno 
 504      FEFF5DF8 
 504      04EB
 505 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 506              	// already exist 
 507 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 507      C8FF5DF8 
 507      04EB
 508 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 509 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 510 0388 0ED0     	    beq 9f
 511              	1: //insert new line 
 512 038a 98F80210 	    ldrb r1,[T1,#2]
 513 038e 00B5FFF7 	    _CALL create_gap 
 513      D2FF5DF8 
 513      04EB
 514 0398 0146     	    mov r1,r0
 515 039a 4046     	    mov r0,T1 
 516 039c 8278     	    ldrb r2,[r0,#2]
 517 039e 00B5FFF7 	    _CALL cmove 
 517      FEFF5DF8 
 517      04EB
 518 03a8 BDE80203 	9:  pop {r1,T1,T2}
 519 03ac 7047     	    _RET 
 520              	
 521              	/*********************************
 522              	    compile 
 523              	    tokenize source line save it 
 524              	    in pas buffer.
 525              	    compiled line format: 
 526              	      line_no  2 bytes {0...32767}
 527              	      count    1 byte  
 528              	      tokens   variable length 
 529              	  input:
 530              	     r0   *text buffer 
 531              	     r1   *text length   
 532              	  output:
 533              	    r0    0 stored | -1 immediate 
 534              	  use:
 535              	    r3    tib index   
 536              	    T1    tib
 537              	    T2    pad
 538              	***********************************/
 539 03ae 00BF     	    _FUNC compile
 540 03b0 8046     	    mov T1, r0  // source text buffer 
 541 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 542 03b4 DFF8C499 	    ldr T2,pad // tokens buffer
 543 03b8 83EA0303 	    eor r3,r3 // source index  
 544 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 545 03be 40F02000 	    orr r0,#FCOMP
ARM GAS  tinyBasic.s 			page 23


 546 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 547 03c4 80EA0000 	    eor r0,r0     
 548 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 549 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 550 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 551 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 552 03d6 00B500F0 	    _CALL parse_int 
 552      68F95DF8 
 552      04EB
 553 03e0 0AD0     	    beq 2f 
 554              	// this is a line number     
 555 03e2 0129     	    cmp r1,#1 
 556 03e4 02D5     	    bpl 1f 
 557 03e6 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 558 03ea 27E3     	    b tb_error  
 559 03ec B1F5803F 	1:  cmp r1,#65536
 560 03f0 F9D5     	    bpl 0b 
 561              	    // write line # to pad 
 562 03f2 29F8031C 	    strh r1,[T2,#-3]
 563 03f6 2360     	    str r3,[UPP,#IN_SAVED]
 564              	2:  // check for pad full 
 565 03f8 C145     	    cmp T2,T1
 566 03fa 02DB     	    blt 3f 
 567 03fc 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 568 0400 1CE3     	    b tb_error 
 569 0402 00B500F0 	3:  _CALL comp_token 
 569      28F85DF8 
 569      04EB
 570 040c 0028     	    cmp r0,#TK_NONE 
 571 040e 01D0     	    beq 4f 
 572 0410 2360     	    str r3,[UPP,#IN_SAVED]
 573 0412 F1E7     	    b 2b 
 574              	4: // compilation completed 
 575 0414 DFF86439 	    ldr r3,pad 
 576 0418 A9EB0300 	    sub r0,T2,r3 // line length 
 577 041c 9870     	    strb r0,[r3,#2]
 578 041e 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 579 0420 1888     	    ldrh r0,[r3] // line number 
 580 0422 70B1     	    cbz r0,8f  
 581              	// insert line in text buffer 
 582 0424 206C     	    ldr r0,[UPP,#FLAGS]
 583 0426 10F0080F 	    tst r0,#FSTOP
 584 042a 02D0     	    beq 7f 
 585 042c 4FF01000 	    mov r0,#ERR_CANT_PROG 
 586 0430 04E3     	    b tb_error 
 587 0432 1846     	7:  mov r0,r3 
 588 0434 00B5FFF7 	    _CALL insert_line 
 588      93FF5DF8 
 588      04EB
 589 043e 4040     	    eors r0,r0 
 590 0440 08E0     	    b 9f 
 591 0442 9B46     	8:  mov BPTR,r3 // *token_list 
 592 0444 4FF0030A 	    mov IN,#3
 593 0448 206C     	    ldr r0,[UPP,#FLAGS]
 594 044a A0F12000 	    sub r0,#FCOMP
 595 044e 2064     	    str r0,[UPP,#FLAGS]
 596 0450 5FF0FF30 	    movs r0,#-1 
ARM GAS  tinyBasic.s 			page 24


 597 0454 7047     	9:  _RET 
 598              	
 599              	/*********************************************
 600              	    compile next token from source 
 601              	    input: 
 602              	      r3 		tib index  
 603              	      T1    tib adr
 604              	      T2    insert point in pad  
 605              	    output:
 606              	      r0     token attribute 
 607              	      r1 		token value
 608              	      r3     tib index updated    
 609              	      T2     updated 
 610              	      use:
 611              	**********************************************/
 612 0456 00BF     	    _FUNC comp_token 
 613 0458 40B4     	    push {r6}
 614 045a 18F80300 	    ldrb r0,[T1,r3]
 615 045e 0040     	    ands r0,r0 
 616 0460 7DD0     	    beq store_r0  // reached end of text  
 617 0462 4FF02000 	    mov r0,#SPACE 
 618 0466 00B500F0 	    _CALL skip  // skip spaces 
 618      70F95DF8 
 618      04EB
 619 0470 18F80300 	    ldrb r0,[T1,r3]
 620 0474 0040     	    ands r0,r0 
 621 0476 72D0     	    beq store_r0  // reached end of text 
 622 0478 03F10103 	    add r3,#1
 623 047c 00B500F0 	    _CALL is_letter 
 623      99F95DF8 
 623      04EB
 624 0486 0BD1     	    bne 1f
 625 0488 A3F10103 	    sub r3,#1 
 626 048c 00B500F0 	    _CALL comp_label // parse and compile label 
 626      AFF85DF8 
 626      04EB
 627 0496 1728     	    cmp r0,#TK_CMD 
 628 0498 71D1     	    bne token_exit 
 629 049a 3A29     	    cmp r1,#REM_IDX 
 630 049c 4DD0     	    beq tick2 
 631 049e 6EE0     	    b token_exit 
 632 04a0 00B500F0 	1:  _CALL is_special
 632      6FF85DF8 
 632      04EB
 633 04aa DFF8E06C 	    ldr r6,=token_ofs
 634 04ae D6E811F0 	    tbh [r6,r1] 
 635              	tok_idx0:     
 636              	//  not special char.  
 637 04b2 57E0     	    b try_number 
 638              	// single char token with no value 
 639              	single: 
 640 04b4 DFF8D86C 	    ldr r6,=tok_single
 641 04b8 705C     	    ldrb r0,[r6,r1] 
 642 04ba 50E0     	    b store_r0
 643              	lt:
 644 04bc 4FF00F00 	    mov r0,#TK_LT
 645 04c0 18F80310 	    ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 25


 646 04c4 3E29     	    cmp r1,#'>' 
 647 04c6 06D0     	    beq 1f
 648 04c8 0AE0     	    b 2f 
 649              	gt:
 650 04ca 4FF00E00 	    mov r0,#TK_GT 
 651 04ce 18F80310 	    ldrb r1,[T1,r3]
 652 04d2 3C29     	    cmp r1,#'<'
 653 04d4 04D1     	    bne 2f  
 654 04d6 03F10103 	1:  add r3,#1
 655 04da 4FF01200 	    mov r0,#TK_NE  
 656 04de 3EE0     	    b store_r0
 657 04e0 3D29     	2:  cmp r1,#'=' 
 658 04e2 3CD1     	    bne store_r0  
 659 04e4 03F10103 	    add r3,#1
 660 04e8 00F10200 	    add r0,#2
 661 04ec 37E0     	    b store_r0       
 662              	bkslash:
 663 04ee 18F80310 	    ldrb r1,[T1,r3]
 664 04f2 03F10103 	    add r3,#1
 665 04f6 4FF01300 	    mov r0,#TK_CHAR 
 666 04fa 09F8010B 	    strb r0,[T2],#1
 667 04fe 09F8011B 	    strb r1,[T2],#1
 668 0502 3CE0     	    b token_exit 
 669              	prt_cmd: 
 670 0504 4FF01700 	    mov r0,#TK_CMD 
 671 0508 4FF03501 	    mov r1,#PRT_IDX
 672 050c 09F8010B 	    strb r0,[T2],#1
 673 0510 09F8011B 	    strb r1,[T2],#1
 674 0514 33E0     	    b token_exit 
 675              	quote:
 676 0516 4FF01C00 	    mov r0,#TK_QSTR 
 677 051a 09F8010B 	    strb r0,[T2],#1
 678 051e 00B500F0 	    _CALL parse_quote
 678      E0F85DF8 
 678      04EB
 679 0528 29E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 052a 4FF01700 	    mov r0,#TK_CMD 
 683 052e 4FF03A01 	    mov r1,#REM_IDX 
 684 0532 09F8010B 	    strb r0,[T2],#1 
 685 0536 09F8011B 	    strb r1,[T2],#1
 686              	tick2:
 687 053a 08EB0300 	    add r0,T1,r3 
 688 053e 4946     	    mov r1,T2 
 689 0540 00B5FFF7 	    _CALL strcpy 
 689      FEFF5DF8 
 689      04EB
 690 054a 00B5FFF7 	    _CALL strlen 
 690      FEFF5DF8 
 690      04EB
 691 0554 8144     	    add T2,r0
 692 0556 09F10109 	    add T2,#1
 693 055a 6368     	    ldr r3,[UPP,#COUNT]
 694 055c 0FE0     	    b token_exit
 695              	store_r0: 
 696 055e 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 26


 697 0562 0CE0     	    b token_exit 
 698              	try_number:
 699 0564 A3F10103 	    sub r3,#1
 700 0568 00B500F0 	    _CALL parse_int  
 700      9FF85DF8 
 700      04EB
 701 0572 00F05F82 	    beq syntax_error  
 702 0576 09F8010B 	    strb r0,[T2],#1 
 703 057a 49F8041B 	    str r1,[T2],#4
 704              	token_exit:
 705 057e 40BC     	    pop {r6}
 706 0580 7047     	    _RET 
 707              	
 708              	
 709              	/****************************
 710              	    is_special  
 711              	    check for non alphanum
 712              	    input:
 713              	      r0    character to scan 
 714              	    output:
 715              	      r0    character 
 716              	      r1    0 || index 
 717              	    use: 
 718              	      r1    scan index 
 719              	      r2    temp 
 720              	      r3    char_list 
 721              	*****************************/
 722 0582 00BF     	    _FUNC is_special 
 723 0584 0CB4     	    push {r2,r3}
 724 0586 4FF00101 	    mov r1,#1
 725 058a DFF8083C 	    ldr r3,=char_list 
 726 058e 5A5C     	1:  ldrb r2,[r3,r1]
 727 0590 22B1     	    cbz r2,8f 
 728 0592 8242     	    cmp r2,r0 
 729 0594 04D0     	    beq 9f 
 730 0596 01F10101 	    add r1,#1 
 731 059a F8E7     	    b 1b
 732 059c 81EA0101 	8:  eor r1,r1     
 733 05a0 0CBC     	9:  pop {r2,r3}
 734 05a2 7047     	    _RET 
 735              	
 736              	char_list:
 737 05a4 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 737      28293A23 
 737      2D2B2A2F 
 737      253D3C3E 
 737      5C3F2722 
 738              	
 739              	tok_single:
 740 05b9 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 740      050601
 741 05c0 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 741      0A0B0D
 742              	
 743 05c7 00       	  .p2align 2
 744              	token_ofs:
 745 05c8 0000     	  .hword  0 // not found
ARM GAS  tinyBasic.s 			page 27


 746              	  // TK_COMMA...TK_EQUAL , 13 
 747 05ca 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 749      01000100 
 750 05e2 0100     	  .hword  (single-tok_idx0)/2    
 751              	  // '<','>'
 752 05e4 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 753              	  // '\'
 754 05e8 1E00     	  .hword  (bkslash-tok_idx0)/2
 755              	  // '?' 
 756 05ea 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 757              	  // "'"  
 758 05ec 3C00     	  .hword  (tick-tok_idx0)/2 
 759              	  // '"' quote 
 760 05ee 3200     	  .hword (quote-tok_idx0)/2
 761              	
 762              	  .p2align 2
 763              	
 764              	/****************************
 765              	    comp_label
 766              	    compile a label 
 767              	    it can be a target|keyword|
 768              	    variable| user constant  
 769              	    label form: [A..Z]+
 770              	    input:
 771              	      *buffer 
 772              	    output:
 773              	      r0  token type 
 774              	      r1  token value 
 775              	      T2  updated 
 776              	      R3  updated
 777              	    use:
 778              	****************************/
 779              	    _FUNC comp_label
 780 05f0 24B4     	    push {r2,r5}
 781 05f2 4DF8049D 	    push {T2}
 782 05f6 82EA0202 	    eor r2,r2
 783 05fa 4FF00605 	    mov r5,#6 
 784 05fe 18F80300 	1:  ldrb r0,[T1,r3]
 785 0602 00B500F0 	    _CALL is_letter 
 785      D6F85DF8 
 785      04EB
 786 060c 09D1     	    bne 2f // not letter 
 787 060e 00B500F0 	    _CALL upper 
 787      A8F85DF8 
 787      04EB
 788 0618 09F8010B 	    strb r0,[T2],#1
 789 061c 03F10103 	    add r3,#1
 790 0620 EDE7     	    b 1b 
 791 0622 80EA0000 	2:  eor r0,r0 
 792 0626 89F80000 	    strb r0,[T2]
 793              	// is this a variable ?
 794 062a 5DF8049B 	    pop {T2}
 795 062e 99F80100 	    ldrb r0,[T2,#1]
ARM GAS  tinyBasic.s 			page 28


 796 0632 30B9     	    cbnz r0,3f // length >1 not variable 
 797 0634 99F80010 	    ldrb r1,[T2]
 798 0638 A1F14101 	    sub r1,#'A' 
 799 063c 4FF01400 	    mov r0,#TK_VAR
 800 0640 1CE0     	    b 8f 
 801              	3:  // try keyword 
 802 0642 4846     	    mov r0,T2 
 803 0644 DFF8501B 	    ldr r1,=kword_dict  
 804 0648 00B500F0 	    _CALL search_dict 
 804      B5FA5DF8 
 804      04EB
 805 0652 30B1     	    cbz r0,4f
 806 0654 1828     	    cmp r0,TK_SCONST  
 807 0656 11D1     	    bne 8f
 808              	    //system constant  
 809 0658 09F8010B 	    strb r0,[T2],#1
 810 065c 49F8041B 	    str r1,[T2],#4
 811 0660 10E0     	    b 9f 
 812              	4: // must be a label 
 813 0662 4846     	    mov r0,T2 
 814 0664 00B500F0 	    _CALL compress_label
 814      0FF85DF8 
 814      04EB
 815 066e 4FF01A00 	    mov r0,#TK_LABEL
 816 0672 09F8010B 	    strb r0,[T2],#1
 817 0676 49F8041B 	    str r1,[T2],#4
 818 067a 03E0     	    b 9f 
 819 067c 09F8010B 	8:  strb r0,[T2],#1
 820 0680 09F8011B 	    strb r1,[T2],#1          
 821 0684 24BC     	9:  pop {r2,r5}
 822 0686 7047     	    _RET 
 823              	
 824              	/********************************
 825              	    compress_label 
 826              	    compress label in integer 
 827              	    maximum 6 character, 
 828              	    ignore extras characters 
 829              	    input:
 830              	      r0  *label 
 831              	    output:
 832              	      r1   compressed label 
 833              	********************************/
 834              	    _FUNC compress_label
 835 0688 0CB4     	    push {r2,r3}
 836 068a 82EA0202 	    eor r2,r2 // compress value
 837 068e 4FF00603 	    mov r3,#6 // max characters 
 838 0692 10F8011B 	1:  ldrb r1,[r0],#1 
 839 0696 31B1     	    cbz r1,2f 
 840 0698 A1F14001 	    sub r1,#'@'
 841 069c 4FEA4212 	    lsl r2,#5
 842 06a0 0A44     	    add r2,r1
 843 06a2 013B     	    subs r3,#1 
 844 06a4 F5D1     	    bne 1b 
 845 06a6 1146     	2:  mov r1,r2     
 846 06a8 0CBC     	    pop {r2,r3}
 847 06aa 7047     	    _RET 
 848              	
ARM GAS  tinyBasic.s 			page 29


 849              	
 850              	/****************************
 851              	    parse_int 
 852              	    parse an integer from text
 853              	    if not valid integer 
 854              	    r1 return *buffer else 
 855              	    *buffer is incremented after integer 
 856              	  input:
 857              	    r0   *buffer 
 858              	  output:
 859              	    r0   TK_INTGR|TK_NONE
 860              	    r1   int|0   
 861              	  use:
 862              	    r3   tib index updated     
 863              	*****************************/
 864              	    _FUNC parse_int 
 865 06ac 4FF00A01 	    mov r1,#10 // default base 
 866 06b0 18F80300 	    ldrb r0,[T1,r3]
 867 06b4 2428     	    cmp r0,'$' 
 868 06b6 02D1     	    bne 2f 
 869 06b8 4FF01001 	    mov r1,#16 // hexadecimal number 
 870 06bc 03E0     	    b 3f  
 871 06be 2628     	2:  cmp r0,#'&' 
 872 06c0 03D1     	    bne 4f
 873 06c2 4FF00201 	    mov r1,#2 //binary number  
 874 06c6 03F10103 	3:  add r3,#1
 875 06ca 03EB0800 	4:  add r0,r3,T1 
 876 06ce 00B5FFF7 	    _CALL atoi 
 876      FEFF5DF8 
 876      04EB
 877 06d8 10B1     	    cbz r0,9f
 878 06da 0344     	    add r3,r0
 879 06dc 4FF01B00 	    mov r0,#TK_INTGR
 880 06e0 0040     	9:  ands r0,r0   
 881 06e2 7047     	    _RET 
 882              	
 883              	/*********************************************
 884              	    parse_quote 
 885              	    parse quoted string 
 886              	    input: 
 887              	      r3 		tib index  
 888              	      T1    tib adr
 889              	      T2    insert point in pad  
 890              	    output:
 891              	      r0     token attribute 
 892              	      r1 		*str 
 893              	      r3     tib index updated    
 894              	      T2     updated 
 895              	      use:
 896              	*********************************************/
 897              	    _FUNC parse_quote
 898 06e4 4DF8049D 	    push {T2} 
 899 06e8 18F80300 	1:  ldrb r0,[T1,r3]
 900 06ec 03F10103 	    add r3,#1 
 901 06f0 2228     	    cmp r0,#'"'
 902 06f2 09D0     	    beq 9f 
 903 06f4 5C28     	    cmp r0,#'\\'
ARM GAS  tinyBasic.s 			page 30


 904 06f6 04D1     	    bne 2f 
 905 06f8 00B500F0 	    _CALL get_escaped_char 
 905      0DF85DF8 
 905      04EB
 906 0702 09F8010B 	2:  strb r0,[T2],#1
 907 0706 EFE7     	    b 1b 
 908 0708 80EA0000 	9:  eor  r0,r0
 909 070c 09F8010B 	    strb r0,[T2],#1
 910 0710 4FF01C00 	    mov r0,#TK_QSTR
 911 0714 02BC     	    pop {r1}
 912 0716 7047     	    _RET 
 913              	
 914              	/**********************************************
 915              	    get_escaped_char 
 916              	    convert "\c" in quoted string 
 917              	    input:
 918              	      r0 
 919              	      r3   index 
 920              	      T1   tib 
 921              	    output:
 922              	      r0   replacement char
 923              	      r3   updated 
 924              	    use:
 925              	      r1   *table 
 926              	      r2   temp 
 927              	**********************************************/
 928              	    _FUNC get_escaped_char 
 929 0718 06B4     	    push {r1,r2}
 930 071a 18F80300 	    ldrb r0,[T1,r3]
 931 071e 03F10103 	    add r3,#1
 932 0722 2228     	    cmp r0,#'"' 
 933 0724 0BD0     	    beq 9f 
 934 0726 DFF8741A 	1:  ldr r1,=escaped 
 935 072a 11F8012B 	2:  ldrb r2,[r1],#1
 936 072e 12B1     	    cbz r2,6f 
 937 0730 8242     	    cmp r2,r0 
 938 0732 02D0     	    beq 7f 
 939 0734 F9E7     	    b 2b
 940 0736 A0F10702 	6:  sub r2,r0,#7     
 941 073a 02F10700 	7:  add r0,r2,#7
 942 073e 06BC     	9:  pop {r1,r2}   
 943 0740 7047     	    _RET
 944              	
 945 0742 6162746E 	escaped: .asciz "abtnvfr"
 945      76667200 
 946              	
 947              	/*********************************************
 948              	   skip character in TIB 
 949              	   input:
 950              	      r0    character to skip 
 951              	      r3    tib index 
 952              	      T1    tib adr
 953              	    output: 
 954              	      r3    updated
 955              	    use:
 956              	      r1     
 957              	**********************************************/   
ARM GAS  tinyBasic.s 			page 31


 958 074a 00BF     	    _FUNC skip
 959 074c 02B4     	    push {r1} 
 960 074e 18F80310 	1:  ldrb r1,[T1,r3]
 961 0752 8142     	    cmp r1,r0
 962 0754 02D1     	    bne 2f
 963 0756 03F10103 	    add r3,#1 
 964 075a F8E7     	    b 1b 
 965 075c 2360     	2:  str r3,[UPP,#IN_SAVED]
 966 075e 02BC     	    pop {r1}
 967 0760 7047     	    _RET
 968              	
 969              	/********************************************
 970              	    upper
 971              	    convert character in upper case 
 972              	    input: 
 973              	      r0   character 
 974              	    output:
 975              	      r0   upper case character 
 976              	*********************************************/
 977 0762 00BF     	    _FUNC upper 
 978 0764 6128     	    cmp r0,#'a' 
 979 0766 03DB     	    blt 9f 
 980 0768 7A28     	    cmp r0,#'z' 
 981 076a 01DC     	    bgt 9f 
 982 076c 00F05F00 	    and r0,#0x5f 
 983 0770 7047     	9:  _RET 
 984              	
 985              	/***************************************
 986              	   is_digit 
 987              	   check if char is decimal digit.
 988              	   convert to decimal digit.
 989              	   input:
 990              	      r0    char 
 991              	   output:
 992              	      r0        if Z then converted digit else not changed
 993              	      Z flag    1 true | 0 false  
 994              	***************************************/
 995 0772 00BF     	    _GBL_FUNC is_digit 
 996 0774 02B4     	    push {r1} 
 997 0776 4FF0FF31 	    mov r1,#-1   
 998 077a 3028     	    cmp r0,#'0' 
 999 077c 05DB     	    blt 9f
 1000 077e 3A28     	    cmp r0,'9'+1
 1001 0780 03D5     	    bpl 9f 
 1002 0782 81EA0101 	    eor r1,r1 
 1003 0786 A0F13000 	    sub r0,#'0'  
 1004              	9:   
 1005 078a 0940     	    ands r1,r1
 1006 078c 02BC     	    pop {r1} 
 1007 078e 7047     	    _RET 
 1008              	
 1009              	/***************************************
 1010              	    is_hex 
 1011              	    check for hexadecimal digit 
 1012              	    convert to hex digit.
 1013              	    input:
 1014              	      r0    
ARM GAS  tinyBasic.s 			page 32


 1015              	    output:
 1016              	      r0         if Z then converted digit 
 1017              	      Z  flag    1 true | 0 false         
 1018              	***************************************/
 1019              	    _FUNC is_hex 
 1020 0790 02B4     	    push {r1}
 1021 0792 80EA0000 	    eor r0,r0 
 1022 0796 4128     	    cmp r0,#'A' 
 1023 0798 01D4     	    bmi 1f 
 1024 079a A0F10700 	    sub r0,#7 
 1025 079e A0F13000 	1:  sub r0,#'0'
 1026 07a2 01D4     	    bmi 2f 
 1027 07a4 1028     	    cmp r0,#16
 1028 07a6 01D4     	    bmi 9f 
 1029 07a8 6FEA0101 	2:  mvn r1,r1  
 1030 07ac 0940     	9:  ands r1,r1 
 1031 07ae 02BC     	    pop {r1}
 1032 07b0 7047     	    _RET 
 1033              	
 1034              	/***************************************
 1035              	    is_letter 
 1036              	    check if character is {a..z,A..Z} 
 1037              	  input:
 1038              	    r0   character 
 1039              	  output: 
 1040              	    r0       same character 
 1041              	    Z flag   1 true | 0 false  
 1042              	****************************************/
 1043 07b2 00BF     	    _FUNC is_letter
 1044 07b4 02B4     	    push {r1} 
 1045 07b6 81EA0101 	    eor r1,r1 
 1046 07ba 4128     	    cmp r0,#'A' 
 1047 07bc 05D4     	    bmi 8f 
 1048 07be 5B28     	    cmp r0,#'Z'+1 
 1049 07c0 05D4     	    bmi 9f
 1050 07c2 6128     	    cmp r0,#'a' 
 1051 07c4 01D4     	    bmi 8f 
 1052 07c6 7B28     	    cmp r0,#'z'+1
 1053 07c8 01D4     	    bmi 9f  
 1054 07ca 6FEA0101 	8:  mvn r1,r1  
 1055 07ce 0940     	9:  ands r1,r1 
 1056 07d0 02BC     	    pop {r1}
 1057 07d2 7047     	    _RET 
 1058              	
 1059              	
 1060              	/******************************************
 1061              	    atoi 
 1062              	    convert ascii to integer 
 1063              	    input:
 1064              	      r0   *buffer 
 1065              	      r1   base 
 1066              	    output:
 1067              	      r0   0 no integer found 
 1068              	      r1   integer
 1069              	    use:
 1070              	      r2   base  
 1071              	      T1   *buffer 
ARM GAS  tinyBasic.s 			page 33


 1072              	      T2   digit count  
 1073              	******************************************/
 1074              	    _GBL_FUNC atoi 
 1075 07d4 2DE90403 	    push {r2,T1,T2}
 1076 07d8 8046     	    mov T1,r0  // *buffer 
 1077 07da 0A46     	    mov r2,r1  // base  
 1078 07dc 81EA0101 	    eor r1,r1  // converted integer 
 1079 07e0 89EA0909 	    eor T2,T2  // digit count 
 1080 07e4 18F8010B 	1:  ldrb r0,[T1],#1
 1081 07e8 00B5FFF7 	    _CALL upper 
 1081      BBFF5DF8 
 1081      04EB
 1082 07f2 3028     	    cmp r0,#'0'
 1083 07f4 0FD4     	    bmi 8f
 1084 07f6 3A28     	    cmp r0,#'9'+1 
 1085 07f8 03D4     	    bmi 2f 
 1086 07fa 4128     	    cmp r0,#'A'
 1087 07fc 0BD4     	    bmi 8f 
 1088 07fe A0F10700 	    sub r0,#7 
 1089 0802 A0F13000 	2:  sub r0,#'0' 
 1090 0806 9042     	    cmp r0,r2
 1091 0808 05D5     	    bpl 8f  
 1092 080a 02FB01F1 	    mul r1,r2 
 1093 080e 0144     	    add r1,r0
 1094 0810 09F10109 	    add T2,#1
 1095 0814 E6E7     	    b 1b 
 1096 0816 4846     	8:  mov r0,T2  
 1097 0818 BDE80403 	    pop {r2,T1,T2}
 1098 081c 7047     	    _RET 
 1099              	
 1100              	
 1101              	
 1102              	/*******************
 1103              	    DECOMPILER 
 1104              	*******************/
 1105              	
 1106              	/********************************************
 1107              	    cmd_name 
 1108              	    search bytecode in dictionary and 
 1109              	    return its name 
 1110              	  input:
 1111              	    r0    keyword bytecode 
 1112              	  ouput:
 1113              	    r0    name string 
 1114              	  use:
 1115              	    T1    link 
 1116              	    T2    tmp 
 1117              	*********************************************/
 1118 081e 00BF     	    _FUNC cmd_name 
 1119 0820 2DE90003 	    push {T1,T2}
 1120 0824 DFF87089 	    ldr T1,=kword_dict 
 1121 0828 58F8089C 	1:  ldr T2,[T1,#-8]
 1122 082c 8145     	    cmp T2,r0 
 1123 082e 04D0     	    beq 2f 
 1124 0830 58F80C8C 	    ldr T1,[T1,#-12]
 1125 0834 B8F1000F 	    cmp T1,#0
 1126 0838 F6D1     	    bne 1b  
ARM GAS  tinyBasic.s 			page 34


 1127 083a 4046     	2:  mov r0,T1 
 1128 083c BDE80003 	    pop {T1,T2}
 1129 0840 7047     	    _RET
 1130              	
 1131              	/*****************************
 1132              	  decompile_line 
 1133              	  detokenize BASIC line 
 1134              	  input:
 1135              	    r0  *token list 
 1136              	    r1  *output buffer 
 1137              	  output:
 1138              	    r0  *output buffer (.asciz) 
 1139              	  use:
 1140              	    T1  *output buffer
 1141              	    BPTR  *token list
 1142              	    IN  offset in token list  
 1143              	******************************/
 1144 0842 00BF     	    _GBL_FUNC decompile_line
 1145 0844 2DE90E01 	    push {r1,r2,r3,T1} 
 1146 0848 8346     	    mov BPTR,r0 
 1147 084a 4FF0000A 	    mov IN,#0
 1148 084e 8846     	    mov T1,r1 
 1149 0850 3BF80A00 	    ldrh r0,[BPTR,IN]
 1150 0854 0AF1020A 	    add IN,#2 
 1151 0858 4FF00A01 	    mov r1,#10 
 1152 085c 00B5FFF7 	    _CALL itoa
 1152      FEFF5DF8 
 1152      04EB
 1153 0866 4146     	    mov r1,T1
 1154 0868 00B5FFF7 	    _CALL strcpy
 1154      FEFF5DF8 
 1154      04EB
 1155 0872 4046     	    mov r0,T1 
 1156 0874 00B5FFF7 	    _CALL strlen
 1156      FEFF5DF8 
 1156      04EB
 1157 087e 8044     	    add T1,r0 
 1158 0880 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1159 0884 0AF1010A 	    add IN,#1 
 1160 0888 6060     	    str r0,[UPP,#COUNT]
 1161              	decomp_loop:
 1162 088a 00B500F0 	    _CALL next_token
 1162      C8FA5DF8 
 1162      04EB
 1163 0894 0028     	    cmp r0,#TK_NONE 
 1164 0896 00F0A680 	    beq 9f
 1165 089a 1028     	    cmp r0,#TK_GE 
 1166 089c 05D5     	    bpl 1f 
 1167 089e DFF80019 	    ldr r1,=single_char 
 1168 08a2 085C     	    ldrb r0,[r1,r0]
 1169 08a4 08F8010B 	    strb r0,[T1],#1 
 1170 08a8 EFE7     	    b decomp_loop
 1171              	1: 
 1172 08aa 1328     	    cmp r0,#TK_CHAR  
 1173 08ac 14D5     	    bpl 2f 
 1174 08ae A0F11000 	    sub r0,#TK_GE
 1175 08b2 4FEA8000 	    lsl r0,#2 
ARM GAS  tinyBasic.s 			page 35


 1176 08b6 DFF8EC18 	    ldr r1,=relop_str 
 1177 08ba 0858     	    ldr r0,[r1,r0]
 1178 08bc 4146     	    mov r1,T1 
 1179 08be 00B5FFF7 	    _CALL strcpy 
 1179      FEFF5DF8 
 1179      04EB
 1180 08c8 4046     	    mov r0,T1 
 1181 08ca 00B5FFF7 	    _CALL strlen 
 1181      FEFF5DF8 
 1181      04EB
 1182 08d4 8044     	    add T1,r0 
 1183 08d6 D8E7     	    b decomp_loop
 1184 08d8 1328     	2:  cmp r0,#TK_CHAR 
 1185 08da 06D1     	    bne 3f 
 1186 08dc 4FF05C00 	    mov r0,#'\\'
 1187 08e0 08F8010B 	    strb r0,[T1],#1
 1188 08e4 08F8011B 	    strb r1,[T1],#1
 1189              	//    mov r0,#SPACE 
 1190              	//    strb r0,[T1],#1
 1191 08e8 CFE7     	    b decomp_loop 
 1192 08ea 1428     	3:  cmp r0,#TK_VAR 
 1193 08ec 08D1     	    bne 4f 
 1194 08ee 01F14100 	    add r0,r1,'A'
 1195 08f2 08F8010B 	    strb r0,[T1],#1 
 1196 08f6 4FF02000 	    mov r0,#SPACE 
 1197 08fa 08F8010B 	    strb r0,[T1],#1
 1198 08fe C4E7     	    b decomp_loop 
 1199 0900 1A28     	4:  cmp r0,#TK_LABEL 
 1200 0902 2CD5     	    bpl 5f   
 1201 0904 03B4     	    push {r0,r1}
 1202 0906 0846     	    mov r0,r1 
 1203 0908 00B5FFF7 	    _CALL cmd_name
 1203      89FF5DF8 
 1203      04EB
 1204 0912 4146     	    mov r1,T1 
 1205 0914 00B5FFF7 	    _CALL strcpy 
 1205      FEFF5DF8 
 1205      04EB
 1206 091e 4046     	    mov r0,T1 
 1207 0920 00B5FFF7 	    _CALL strlen 
 1207      FEFF5DF8 
 1207      04EB
 1208 092a 8044     	    add T1,r0
 1209 092c 03BC     	    pop {r0,r1}
 1210 092e 4FF02000 	    mov r0,#SPACE 
 1211 0932 08F8010B 	    strb r0,[T1],#1 
 1212 0936 3A29     	    cmp r1,#REM_IDX
 1213 0938 A7D1     	    bne decomp_loop 
 1214 093a 0BEB0A00 	    add r0,BPTR,IN
 1215 093e 4146     	    mov r1,T1   
 1216 0940 00B5FFF7 	    _CALL strcpy
 1216      FEFF5DF8 
 1216      04EB
 1217 094a 4046     	    mov r0,T1 
 1218 094c 00B5FFF7 	    _CALL strlen
 1218      FEFF5DF8 
 1218      04EB
ARM GAS  tinyBasic.s 			page 36


 1219 0956 8044     	    add T1,r0
 1220 0958 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1221 095c 43E0     	    b 9f 
 1222 095e 1B28     	5:  cmp r0,#TK_INTGR
 1223 0960 14D1     	    bne 6f  
 1224 0962 0846     	    mov r0,r1 
 1225 0964 A169     	    ldr r1,[UPP,#BASE]
 1226 0966 00B5FFF7 	    _CALL itoa
 1226      FEFF5DF8 
 1226      04EB
 1227 0970 4146     	    mov r1,T1 
 1228 0972 00B5FFF7 	    _CALL strcpy
 1228      FEFF5DF8 
 1228      04EB
 1229 097c 4046     	    mov r0,T1 
 1230 097e 00B5FFF7 	    _CALL strlen
 1230      FEFF5DF8 
 1230      04EB
 1231 0988 8044     	    add T1,r0 
 1232 098a 7EE7     	    b decomp_loop 
 1233 098c 1A28     	6:  cmp r0,#TK_LABEL
 1234 098e 13D1     	    bne 7f
 1235 0990 4FF01902 	    mov r2,#25
 1236 0994 4FF6FF73 	    mov r3,#0xffff 
 1237 0998 C3F6FF73 	    movt r3,#0x3fff 
 1238 099c 01EA0301 	0:  and r1,r3 
 1239 09a0 4FEA5313 	    lsr r3,#5 
 1240 09a4 31FA02F0 	    lsrs r0,r1,r2 
 1241 09a8 03D0     	    beq 2f
 1242 09aa 00F14000 	    add r0,#'@'
 1243 09ae 08F8010B 	    strb r0,[T1],#1
 1244 09b2 053A     	2:  subs r2,#5 
 1245 09b4 F2DA     	    bge 0b 
 1246 09b6 68E7     	    b decomp_loop
 1247 09b8 4FF02200 	7:  mov r0,#'"'
 1248 09bc 08F8010B 	    strb r0,[T1],#1 
 1249 09c0 0846     	    mov r0,r1
 1250 09c2 4146     	    mov r1,T1  
 1251 09c4 00B5FFF7 	    _CALL strcpy
 1251      FEFF5DF8 
 1251      04EB
 1252 09ce 4046     	    mov r0,T1 
 1253 09d0 00B5FFF7 	    _CALL strlen 
 1253      FEFF5DF8 
 1253      04EB
 1254 09da 8044     	    add T1,r0 
 1255 09dc 4FF02200 	    mov r0,#'"'
 1256 09e0 08F8010B 	    strb r0,[T1],#1 
 1257 09e4 51E7     	    b decomp_loop
 1258 09e6 80EA0000 	9:  eor r0,r0 
 1259 09ea 88F80000 	    strb r0,[T1]
 1260 09ee BDE80E01 	    pop {r1,r2,r3,T1}
 1261 09f2 0846     	    mov r0,r1 
 1262 09f4 7047     	    _RET 
 1263              	
 1264 09f6 020A0000 	relop_str: .word ge_str,le_str,ne_str 
 1264      050A0000 
ARM GAS  tinyBasic.s 			page 37


 1264      080A0000 
 1265 0a02 3E3D00   	ge_str: .asciz ">="
 1266 0a05 3C3D00   	le_str: .asciz "<="
 1267 0a08 3C3E00   	ne_str: .asciz "<>"
 1268              	
 1269              	single_char:
 1270 0a0b 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1270      2328292B 
 1270      2D2A2F25 
 1271 0a17 403D3E3C 	  .byte '@','=', '>', '<' 
 1272              	
 1273              	
 1274              	
 1275              	
 1276              	/**********************************
 1277              	  modulo 
 1278              	  compute r0 mod r1
 1279              	  input:
 1280              	    r0   dividend
 1281              	    r1   divisor 
 1282              	  output:
 1283              	    r0   TK_INTGR 
 1284              	    r1   r0 mod r1 
 1285              	*********************************/
 1286 0a1b 00       	    _GBL_FUNC modulo 
 1287 0a1c 01B4     	    push {r0}
 1288 0a1e B0FBF1F0 	    udiv r0,r1 
 1289 0a22 01FB00F0 	    mul  r0,r1 
 1290 0a26 02BC     	    pop {r1}
 1291 0a28 A1EB0001 	    sub r1,r0
 1292 0a2c 4FF01B00 	    mov r0,#TK_INTGR
 1293 0a30 7047     	    _RET 
 1294              	
 1295              	/**********************************
 1296              	      BASIC commands 
 1297              	**********************************/
 1298              	
 1299              	/*********************************
 1300              	    syntax_error 
 1301              	    display syntax error message and 
 1302              	    abort program 
 1303              	  input:
 1304              	    none  
 1305              	  output: 
 1306              	    none 
 1307              	  use:
 1308              	*********************************/
 1309 0a32 00BF     	    _FUNC syntax_error 
 1310 0a34 4FF00200 	    mov r0,#ERR_SYNTAX
 1311 0a38 00E0     	    b tb_error 
 1312              	
 1313              	/*********************************
 1314              	    tb_error 
 1315              	    display BASIC error and 
 1316              	    abort program. 
 1317              	  input:
 1318              	    r0    error code   
ARM GAS  tinyBasic.s 			page 38


 1319              	  output: 
 1320              	    none 
 1321              	  use:
 1322              	    r1    temp 
 1323              	*********************************/
 1324 0a3a 00BF     	    _FUNC tb_error 
 1325 0a3c 216C     	    ldr r1,[UPP,#FLAGS]
 1326 0a3e 11F0200F 	    tst r1,#FCOMP
 1327 0a42 43D1     	    bne compile_error
 1328              	rt_error:
 1329 0a44 5246     	    mov r2,IN 
 1330 0a46 01B4     	    push {r0}
 1331 0a48 DFF85C07 	    ldr r0,=rt_error_msg 
 1332 0a4c 00B5FFF7 	    _CALL uart_puts 
 1332      FEFF5DF8 
 1332      04EB
 1333 0a56 01BC     	    pop {r0}
 1334 0a58 DFF85017 	    ldr r1,=err_msg  
 1335 0a5c 4FEA8000 	    lsl r0,#2 
 1336 0a60 0858     	    ldr r0,[r1,r0]
 1337 0a62 00B5FFF7 	    _CALL uart_puts
 1337      FEFF5DF8 
 1337      04EB
 1338              	// decompile and print faulty line      
 1339 0a6c 5846     	    mov r0,BPTR
 1340 0a6e 5246     	    mov r2,IN  
 1341 0a70 DFF80813 	    ldr r1,pad 
 1342 0a74 00B5FFF7 	    _CALL decompile_line
 1342      FEFF5DF8 
 1342      04EB
 1343 0a7e 00B5FFF7 	    _CALL uart_puts 
 1343      FEFF5DF8 
 1343      04EB
 1344 0a88 00B5FFF7 	    _CALL cr 
 1344      FEFF5DF8 
 1344      04EB
 1345              	// print error offset on line      
 1346 0a92 DFF81C07 	    ldr r0,=token_at_msg 
 1347 0a96 00B5FFF7 	    _CALL uart_puts 
 1347      FEFF5DF8 
 1347      04EB
 1348 0aa0 1046     	    mov r0,r2 
 1349 0aa2 4FF01001 	    mov r1,#16 
 1350 0aa6 00B5FFF7 	    _CALL print_int
 1350      FEFF5DF8 
 1350      04EB
 1351 0ab0 00B5FFF7 	    _CALL cr
 1351      FEFF5DF8 
 1351      04EB
 1352              	// dump tokenize line 
 1353 0aba 5846     	    mov r0,BPTR
 1354 0abc 8278     	    ldrb r2,[r0,#2]
 1355 0abe 00B500F0 	    _CALL dump01 
 1355      E0F95DF8 
 1355      04EB
 1356 0ac8 FFF7FEBF 	    b warm_start 
 1357              	compile_error:
ARM GAS  tinyBasic.s 			page 39


 1358 0acc DFF8DC16 	    ldr r1,=err_msg 
 1359 0ad0 4FEA8000 	    lsl r0,#2 
 1360 0ad4 0858     	    ldr r0,[r1,r0]
 1361 0ad6 00B5FFF7 	    _CALL uart_puts
 1361      FEFF5DF8 
 1361      04EB
 1362 0ae0 A068     	    ldr r0,[UPP,#BASICPTR]
 1363 0ae2 00B5FFF7 	    _CALL uart_puts
 1363      FEFF5DF8 
 1363      04EB
 1364 0aec 00B5FFF7 	    _CALL cr
 1364      FEFF5DF8 
 1364      04EB
 1365 0af6 2068     	    ldr r0,[UPP,#IN_SAVED]
 1366 0af8 00B5FFF7 	    _CALL spaces 
 1366      FEFF5DF8 
 1366      04EB
 1367 0b02 4FF05E00 	    mov r0,#'^' 
 1368 0b06 00B5FFF7 	    _CALL uart_putc
 1368      FEFF5DF8 
 1368      04EB
 1369 0b10 00B5FFF7 	    _CALL cr
 1369      FEFF5DF8 
 1369      04EB
 1370 0b1a FFF7FEBF 	    b  warm_start  
 1371              	    
 1372 0b1e 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1372      74696D65 
 1372      20657272 
 1372      6F723A20 
 1372      00
 1373 0b2f 746F6B65 	token_at_msg: .asciz "token offset: "
 1373      6E206F66 
 1373      66736574 
 1373      3A2000
 1374              	
 1375              	
 1376              	err_msg:
 1377 0b3e 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1377      00000000 
 1377      0D000000 
 1377      1B000000 
 1377      34000000 
 1378 0b56 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1378      6F000000 
 1378      89000000 
 1378      9A000000 
 1378      AB000000 
 1379 0b6a B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1379      EA000000 
 1379      FA000000 
 1379      0E010000 
 1379      21010000 
 1380 0b7e 2E010000 	   .word err_cant_prog 
 1381              	
 1382              	    .section .rodata.tb_error 
 1383              	
ARM GAS  tinyBasic.s 			page 40


 1384 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1384      72792066 
 1384      756C6C0A 
 1384      00
 1385 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1385      61782065 
 1385      72726F72 
 1385      0A00
 1386 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1386      206F7065 
 1386      72617469 
 1386      6F6E206F 
 1386      76657266 
 1387 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1387      73696F6E 
 1387      20627920 
 1387      300A00
 1388 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1388      6C696420 
 1388      6C696E65 
 1388      206E756D 
 1388      6265722E 
 1389 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1389      74696D65 
 1389      206F6E6C 
 1389      79207573 
 1389      6167652E 
 1390 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1390      616E6420 
 1390      6C696E65 
 1390      206F6E6C 
 1390      79207573 
 1391 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1391      69636174 
 1391      65206E61 
 1391      6D652E0A 
 1391      00
 1392 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1392      206E6F74 
 1392      20666F75 
 1392      6E642E0A 
 1392      00
 1393 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1393      76616C75 
 1393      652E0A00 
 1394 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1394      20696E20 
 1394      65787465 
 1394      6E646564 
 1394      206D656D 
 1395 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1395      61746120 
 1395      666F756E 
 1395      642E0A00 
 1396 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1396      726F6772 
 1396      616D2069 
ARM GAS  tinyBasic.s 			page 41


 1396      6E205241 
 1396      4D210A00 
 1397 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1397      20737973 
 1397      74656D20 
 1397      66756C6C 
 1397      2E0A00
 1398 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1398      65722066 
 1398      756C6C0A 
 1398      00
 1399 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1399      74206D6F 
 1399      64696679 
 1399      2070726F 
 1399      6772616D 
 1400              	
 1401 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1401      2074696D 
 1401      65206572 
 1401      726F722C 
 1401      2000
 1402 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1402      70696C65 
 1402      20657272 
 1402      6F722C20 
 1402      00
 1403 018d 6C617374 	tk_id: .asciz "last token id: "
 1403      20746F6B 
 1403      656E2069 
 1403      643A2000 
 1404              	
 1405              	
 1406              	    .section  .text , "ax", %progbits 
 1407              	
 1408              	/*********************************
 1409              	   skip_line 
 1410              	   data and remark line are skipped
 1411              	   by the interpreter 
 1412              	***********************************/
 1413 0b82 00BF     	    _FUNC skip_line 
 1414 0b84 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1415 0b88 7047     	    _RET 
 1416              	
 1417              	
 1418              	/*********************************
 1419              	   BASIC: BTGL adr, mask   
 1420              	   toggle bits [adr]=[adr]^mask  
 1421              	   input:
 1422              	     r0    adr 
 1423              	     r1    mask 
 1424              	    output;
 1425              	      none 
 1426              	    use:
 1427              	      T1   temp
 1428              	      T2   temp  
 1429              	*******************************/     
ARM GAS  tinyBasic.s 			page 42


 1430 0b8a 00BF     	    _FUNC BTGL 
 1431              	
 1432 0b8c 7047     	    _RET 
 1433              	
 1434              	/***************************************
 1435              	   kword_cmp
 1436              	   compare keyword to dict entry
 1437              	  input:
 1438              	    r0  keyword 
 1439              	    r1  dict entry 
 1440              	    r2  character count 
 1441              	  output:
 1442              	    r0  0 not same | -1 same 
 1443              	  use:
 1444              	    r6   result  
 1445              	    T1   char 1
 1446              	    T2   char 2
 1447              	**************************************/   
 1448 0b8e 00BF     	    _FUNC kword_cmp 
 1449 0b90 2DE94003 	    push {r6,T1,T2}
 1450 0b94 4FF0FF36 	    mov r6,#-1 
 1451 0b98 4AB1     	1:  cbz r2,9f       
 1452 0b9a 10F8018B 	    ldrb T1,[r0],#1
 1453 0b9e 11F8019B 	    ldrb T2,[r1],#1
 1454 0ba2 A2F10102 	    sub r2,#1
 1455 0ba6 C845     	    cmp T1,T2
 1456 0ba8 F6D0     	    beq 1b 
 1457 0baa 86EA0606 	    eor r6,r6  
 1458 0bae 3046     	9:  mov r0,r6
 1459 0bb0 BDE84003 	    pop {r6,T1,T2}
 1460 0bb4 7047     	    _RET 
 1461              	
 1462              	/***********************************************
 1463              	    search_dict 
 1464              	    search keyword in dictionary
 1465              	   input:
 1466              	  	 r0   keyword 
 1467              	     r1		dictionary first name field address  
 1468              	   output:
 1469              	     r0 		token attribute 
 1470              	     r1		  cmd_index if r0!=TK_NONE  
 1471              	   use:
 1472              	     r3   length keyword 
 1473              	     T1   keyword
 1474              	     T2   link  
 1475              	**********************************************/
 1476 0bb6 00BF     	  _FUNC search_dict
 1477 0bb8 2DE90C03 	  push {r2,r3,T1,T2}
 1478 0bbc 8046     	  mov T1,r0 
 1479 0bbe 00B5FFF7 	  _CALL strlen 
 1479      FEFF5DF8 
 1479      04EB
 1480 0bc8 0346     	  mov r3,r0  
 1481              	1:  
 1482 0bca 8946     	   mov T2,r1  // keep for linking   
 1483 0bcc 0878     	   ldrb r0,[r1] 
 1484 0bce 78B1     	   cbz r0,9f // null byte, end of dictionary
ARM GAS  tinyBasic.s 			page 43


 1485 0bd0 4046     	   mov r0,T1
 1486 0bd2 1A46     	   mov r2,r3   
 1487 0bd4 00B5FFF7 	   _CALL kword_cmp  
 1487      DBFF5DF8 
 1487      04EB
 1488 0bde 18B9     	   cbnz r0,2f 
 1489 0be0 4946     	   mov r1,T2
 1490 0be2 51F80C1C 	   ldr r1,[r1,#-12]
 1491 0be6 F0E7     	   b 1b   
 1492              	2: // found
 1493 0be8 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1494 0bec 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1495 0bf0 BDE80C03 	9: pop {r2,r3,T1,T2}
 1496 0bf4 7047     	   _RET 
 1497              	
 1498              	
 1499              	/**************************
 1500              	    INTERPRETER 
 1501              	*************************/
 1502              	
 1503              	/*********************************
 1504              	   cold_start 
 1505              	   initialize BASIC interpreter 
 1506              	   never leave 
 1507              	   input:
 1508              	     none 
 1509              	   output:
 1510              	    none 
 1511              	*********************************/
 1512              	  .type cold_start, %function 
 1513              	  .global cold_start 
 1514              	cold_start: 
 1515 0bf6 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1515      C2F20004 
 1516 0bfe DFF85400 	    ldr r0,src_addr 
 1517 0c02 DFF85410 	    ldr r1,dest_addr
 1518 0c06 0968     	    ldr r1,[r1] 
 1519 0c08 0C44     	    add UPP,r1 // system variables base address   
 1520              	// clear RAM
 1521 0c0a 2046     	    mov r0,UPP  
 1522 0c0c DFF86811 	    ldr r1,tib 
 1523 0c10 82EA0202 	    eor r2,r2 
 1524 0c14 40F8042B 	1:  str r2,[r0],#4 
 1525 0c18 8842     	    cmp r0,r1 
 1526 0c1a FBD4     	    bmi 1b 
 1527              	//copy initialized system variables to ram 
 1528 0c1c DFF83400 	    ldr r0,src_addr 
 1529 0c20 2146     	    mov r1,UPP 
 1530 0c22 DFF83820 	    ldr r2,sysvar_size
 1531 0c26 00B5FFF7 	    _CALL cmove
 1531      FEFF5DF8 
 1531      04EB
 1532 0c30 00B500F0 	    _CALL prt_version
 1532      15F85DF8 
 1532      04EB
 1533 0c3a 00B500F0 	    _CALL clear_basic 
 1533      62F85DF8 
ARM GAS  tinyBasic.s 			page 44


 1533      04EB
 1534 0c44 00B5FFF7 	    _CALL search_free 
 1534      FEFF5DF8 
 1534      04EB
 1535 0c4e E062     	    str r0,[UPP,#FSFREE] 
 1536 0c50 FFF7FEBF 	    b warm_start    
 1537              	src_addr:
 1538 0c54 00000000 	  .word uzero
 1539              	dest_addr:
 1540 0c58 00000000 	  .word vectors_size
 1541 0c5c D4000000 	sysvar_size: .word ulast-uzero 
 1542              	
 1543              	/************************************
 1544              	    print firmware version 
 1545              	    input: 
 1546              	      none 
 1547              	    output:
 1548              	      none 
 1549              	    use:
 1550              	      r0 
 1551              	***********************************/
 1552              	    _FUNC prt_version 
 1553 0c60 DFF85005 	    ldr r0,=version_msg 
 1554 0c64 00B5FFF7 	    _CALL uart_puts
 1554      FEFF5DF8 
 1554      04EB
 1555 0c6e 9FF87400 	    ldrb r0,version 
 1556 0c72 4FEA1010 	    lsr r0,#4 
 1557 0c76 00F13000 	    add r0,#'0' 
 1558 0c7a 3A28     	    cmp r0,#'9'+1 
 1559 0c7c 01D4     	    bmi 1f 
 1560 0c7e 00F10700 	    add r0,#7 
 1561              	  1:
 1562 0c82 00B5FFF7 	    _CALL uart_putc 
 1562      FEFF5DF8 
 1562      04EB
 1563 0c8c 4FF02E00 	    mov r0,#'. 
 1564 0c90 00B5FFF7 	    _CALL uart_putc 
 1564      FEFF5DF8 
 1564      04EB
 1565 0c9a 9FF84800 	    ldrb r0,version 
 1566 0c9e 00F00F00 	    and r0,#15 
 1567 0ca2 00F13000 	    add r0,'0' 
 1568 0ca6 3A28     	    cmp r0,#'9'+1 
 1569 0ca8 01D4     	    bmi 1f 
 1570 0caa 00F10700 	    add r0,#7
 1571              	  1: 
 1572 0cae 00B5FFF7 	    _CALL uart_putc 
 1572      FEFF5DF8 
 1572      04EB
 1573 0cb8 00B5FFF7 	    _CALL cr
 1573      FEFF5DF8 
 1573      04EB
 1574 0cc2 7047     	    _RET  
 1575              	version_msg:
 1576 0cc4 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1576      65207069 
ARM GAS  tinyBasic.s 			page 45


 1576      6C6C2074 
 1576      696E7920 
 1576      42415349 
 1577              	version:
 1578 0ce4 10       	    .byte 0x10 
 1579 0ce5 0000BF   	    .p2align 2 
 1580              	
 1581              	
 1582              	/*****************************
 1583              	    clear_vars 
 1584              	    initialize variables to 0
 1585              	  input:
 1586              	    none 
 1587              	  output:
 1588              	    none 
 1589              	  use:
 1590              	    r0,r1,r2 
 1591              	*****************************/
 1592              	    _FUNC clear_vars 
 1593 0ce8 07B4     	    push {r0,r1,r2}
 1594 0cea 80EA0000 	    eor r0,r0 
 1595 0cee 04F16001 	    add r1,UPP,#VARS
 1596 0cf2 4FF01A02 	    mov r2,#26
 1597 0cf6 41F8040B 	1:  str r0,[r1],#4 
 1598 0cfa 013A     	    subs r2,#1
 1599 0cfc FBD1     	    bne 1b  
 1600 0cfe 07BC     	    pop {r0,r1,r2}
 1601 0d00 7047     	    _RET 
 1602              	
 1603              	/*****************************
 1604              	   clear_basic 
 1605              	   reset BASIC system variables 
 1606              	   and clear variables and RAM 
 1607              	*****************************/
 1608 0d02 00BF     	    _FUNC clear_basic
 1609 0d04 80EA0000 	  	eor r0,r0
 1610 0d08 2064     	    str r0,[UPP,#FLAGS] 
 1611 0d0a 6060     	    str r0,[UPP,#COUNT]
 1612 0d0c 2060     	    str r0,[UPP,#IN_SAVED]
 1613 0d0e A060     	    str r0,[UPP,#BASICPTR]
 1614 0d10 E060     	    str r0,[UPP,#DATAPTR]
 1615 0d12 2061     	    str r0,[UPP,#DATA]
 1616 0d14 6061     	    str r0,[UPP,#DATALEN]
 1617 0d16 04F1D000 	    add r0,UPP,#BASIC_START 
 1618 0d1a 00F11000 	    add r0,#16 
 1619 0d1e 6FF00F01 	    mvn r1,#15
 1620 0d22 00EA0100 	    and r0,r1 
 1621 0d26 2063     	    str r0,[UPP,#TXTBGN]
 1622 0d28 6063     	    str r0,[UPP,#TXTEND]
 1623 0d2a C4F8D000 	    str r0,[UPP,#HERE]
 1624 0d2e 00B5FFF7 	    _CALL clear_vars
 1624      DAFF5DF8 
 1624      04EB
 1625 0d38 206B     	    ldr r0,[UPP,#TXTBGN]
 1626 0d3a DFF83C10 	    ldr r1,tib 
 1627 0d3e 82EA0202 	    eor r2,r2 
 1628 0d42 40F8042B 	1:  str r2,[r0],#4
ARM GAS  tinyBasic.s 			page 46


 1629 0d46 8842     	    cmp r0,r1 
 1630 0d48 FBD4     	    bmi 1b 
 1631 0d4a 7047     	    _RET  
 1632              	
 1633              	/***********************************
 1634              	   warm_init 
 1635              	   initialize interpreter context 
 1636              	  input:
 1637              	    none
 1638              	  output:
 1639              	    none 
 1640              	  use:
 1641              	    r0 
 1642              	***********************************/
 1643              	warm_init:
 1644              	// reset data stack       
 1645 0d4c DFF824C0 	    ldr DP,dstack 
 1646 0d50 4FF0000A 	    mov IN,#0 // BASIC line index 
 1647 0d54 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1648 0d58 80EA0000 	    eor r0,r0 
 1649 0d5c 6060     	    str r0,[UPP,#COUNT]  
 1650 0d5e 2064     	    str r0,[UPP,#FLAGS]
 1651 0d60 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1652 0d62 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1653 0d66 6064     	    str r0,[UPP,#TAB_WIDTH]
 1654 0d68 4FF00A00 	    mov r0,#10 // default base decimal 
 1655 0d6c A061     	    str r0,[UPP,#BASE]
 1656 0d6e 7047     	    _RET  
 1657              	
 1658 0d70 00000000 	mstack: .word _mstack 
 1659 0d74 00000000 	dstack: .word _dstack 
 1660 0d78 00000000 	tib: .word _tib 
 1661 0d7c 00000000 	pad: .word _pad 
 1662 0d80 FCFFFFFF 	array: .word _pad - 4 
 1663 0d84 0A524541 	ready: .asciz "\nREADY" 
 1663      445900
 1664              	
 1665              	/**********************************
 1666              	    warm_start 
 1667              	    start BASIC interpreter doesn't  
 1668              	    reset variables and code space 
 1669              	  input:
 1670              	    none 
 1671              	  output:
 1672              	    none 
 1673              	**********************************/
 1674 0d8b 00       	    _GBL_FUNC warm_start 
 1675              	// initialise parameters stack
 1676 0d8c FFF7DEFF 	    bl warm_init
 1677              	// reset main stack 
 1678 0d90 5FF82400 	    ldr r0,mstack
 1679 0d94 8546     	    mov sp,r0 
 1680 0d96 DFF82004 	    ldr r0,=ready 
 1681 0d9a 00B5FFF7 	    _CALL uart_puts 
 1681      FEFF5DF8 
 1681      04EB
 1682              	// fall in cmd_line 
ARM GAS  tinyBasic.s 			page 47


 1683              	
 1684              	/**********************************
 1685              	   cmd_line 
 1686              	   shell command line 
 1687              	   input:
 1688              	      none 
 1689              	   output:
 1690              	      none 
 1691              	   use:
 1692              	
 1693              	***********************************/
 1694              	    _FUNC cmd_line 
 1695 0da4 00B5FFF7 	    _CALL cr
 1695      FEFF5DF8 
 1695      04EB
 1696 0dae 80EA0000 	    eor r0,r0 
 1697 0db2 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1698 0db6 5FF84000 	1:  ldr r0,tib
 1699 0dba 4FF05001 	    mov r1,#TIB_SIZE 
 1700 0dbe 00B5FFF7 	    _CALL readln 
 1700      FEFF5DF8 
 1700      04EB
 1701 0dc8 0940     	    ands r1,r1 // empty line 
 1702 0dca F4D0     	    beq 1b 
 1703 0dcc 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1703      EFFA5DF8 
 1703      04EB
 1704 0dd6 EED0     	    beq 1b  // tokens stored in text area 
 1705              	// interpret tokenized line 
 1706              	interpreter:
 1707 0dd8 00B500F0 	  _CALL next_token 
 1707      21F85DF8 
 1707      04EB
 1708 0de2 0228     	  cmp r0,#2
 1709 0de4 F8D4     	  bmi interpreter    
 1710 0de6 1A28     	  cmp r0,#TK_LABEL 
 1711 0de8 F6D0     	  beq interpreter 
 1712 0dea 1728     	  cmp r0,#TK_CMD 
 1713 0dec 03D1     	  bne 2f
 1714 0dee 0846     	  mov r0,r1 
 1715 0df0 00F012F8 	  bl execute  
 1716 0df4 F0E7     	  b interpreter   
 1717              	2: 
 1718 0df6 1428     	  cmp r0,#TK_VAR 
 1719 0df8 05D1     	  bne 3f 
 1720 0dfa 00B500F0 	  _CALL let_var 
 1720      7FFB5DF8 
 1720      04EB
 1721 0e04 E8E7     	  b interpreter 
 1722              	3: 
 1723 0e06 0C28     	  cmp r0,#TK_ARRAY 
 1724 0e08 05D1     	  bne 4f
 1725 0e0a 00B500F0 	  _CALL let_array 
 1725      85FB5DF8 
 1725      04EB
 1726 0e14 E0E7     	  b interpreter
 1727              	4: 
ARM GAS  tinyBasic.s 			page 48


 1728 0e16 0DE6     	  b syntax_error
 1729              	
 1730              	/*****************************
 1731              	    execute 
 1732              	    execute a BASIC routine from 
 1733              	    its token value 
 1734              	  input:
 1735              	    r0  BASIC SUB|FUNC token  
 1736              	  output: 
 1737              	    depend on SUB|FUNc
 1738              	*****************************/
 1739              	    _FUNC execute 
 1740 0e18 E849     	    ldr r1,=fn_table 
 1741 0e1a 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1742 0e1e 0047     	    bx r0 
 1743              	
 1744              	/*************************************
 1745              	  next_token 
 1746              	  extract next token from token list 
 1747              	  input:
 1748              	    none 
 1749              	  output:
 1750              	    r0    token attribute
 1751              	    r1    token value if there is one 
 1752              	  use:
 1753              	    T1    exit token type  
 1754              	****************************/
 1755              	    _FUNC next_token 
 1756 0e20 6068     	    ldr r0,[UPP,#COUNT]
 1757 0e22 8245     	    cmp IN,r0 
 1758 0e24 11D4     	    bmi 0f
 1759              	// reached end of line skip to next one 
 1760 0e26 8344     	    add BPTR,r0 // next line 
 1761 0e28 606B     	    ldr r0,[UPP,#TXTEND]
 1762 0e2a 8345     	    cmp BPTR,r0 
 1763 0e2c 7FF5FEAF 	    bpl warm_start // end of program
 1764 0e30 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1765 0e34 6060     	    str r0,[UPP,#COUNT] 
 1766 0e36 4FF0030A 	    mov IN,#3
 1767 0e3a 00B5FFF7 	    _CALL show_trace
 1767      D6F95DF8 
 1767      04EB
 1768 0e44 80EA0000 	    eor r0,r0
 1769 0e48 7047     	    _RET 
 1770              	0: 
 1771 0e4a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1772 0e4e C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1773 0e52 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1774 0e56 0AF1010A 	    add IN,#1  
 1775 0e5a 1328     	    cmp r0,#TK_CHAR 
 1776 0e5c 1AD4     	    bmi 9f // these tokens have no value  
 1777 0e5e 1828     	    cmp r0,#TK_SCONST 
 1778 0e60 04D5     	    bpl 1f
 1779              	    // tokens with .byte value 
 1780 0e62 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1781 0e66 0AF1010A 	    add IN,#1 
 1782 0e6a 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 49


 1783 0e6c 1C28     	1:  cmp r0,#TK_QSTR 
 1784 0e6e 0DD1     	    bne 2f 
 1785 0e70 0BEB0A01 	    add r1,BPTR,IN
 1786 0e74 0846     	    mov r0,r1 
 1787 0e76 00B5FFF7 	    _CALL strlen 
 1787      FEFF5DF8 
 1787      04EB
 1788 0e80 8244     	    add IN,r0 
 1789 0e82 0AF1010A 	    add IN,#1
 1790 0e86 4FF01C00 	    mov r0,#TK_QSTR 
 1791 0e8a 7047     	    _RET  
 1792              	2:  // .word value 
 1793 0e8c 5BF80A10 	    ldr r1,[BPTR,IN] 
 1794 0e90 0AF1040A 	    add IN,#4 
 1795 0e94 7047     	9:  _RET
 1796              	
 1797              	
 1798              	/*********************************
 1799              	    expect 
 1800              	    check if next token is of 
 1801              	    expected type. If not 
 1802              	    call syntax_error  
 1803              	  input:
 1804              	      r0   token attribute
 1805              	  output:
 1806              	      r0  token attribute 
 1807              	      r1  token value
 1808              	  use:
 1809              	      T1   
 1810              	**********************************/
 1811 0e96 00BF     	    _FUNC expect 
 1812 0e98 4DF8048D 	    push {T1}
 1813 0e9c 8046     	    mov T1,r0 
 1814 0e9e 00B5FFF7 	    _CALL next_token 
 1814      BEFF5DF8 
 1814      04EB
 1815 0ea8 4045     	    cmp r0,T1  
 1816 0eaa 7FF4C3AD 	    bne syntax_error 
 1817 0eae 5DF8048B 	    pop {T1}
 1818 0eb2 7047     	    _RET 
 1819              	
 1820              	/***********************************
 1821              	    func_args 
 1822              	    get function arguments list 
 1823              	  input:
 1824              	    none 
 1825              	  output:
 1826              	    r0    arg. count 
 1827              	  use:
 1828              	
 1829              	************************************/
 1830              	    _FUNC func_args 
 1831 0eb4 4FF00500 	    mov r0,#TK_LPAREN 
 1832 0eb8 00B5FFF7 	    _CALL expect 
 1832      EDFF5DF8 
 1832      04EB
 1833 0ec2 00B500F0 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 50


 1833      0CF85DF8 
 1833      04EB
 1834 0ecc 01B4     	    push {r0}
 1835 0ece 4FF00600 	    mov r0,#TK_RPAREN 
 1836 0ed2 00B5FFF7 	    _CALL expect 
 1836      E0FF5DF8 
 1836      04EB
 1837 0edc 01BC     	    pop {r0}
 1838 0ede 7047     	    _RET 
 1839              	
 1840              	/**********************************
 1841              	    arg_list 
 1842              	    get arguments list on dstack 
 1843              	  input:
 1844              	    none 
 1845              	  output:
 1846              	    r0    arg count
 1847              	  use:
 1848              	    T1    tmp count  
 1849              	***********************************/
 1850              	    _FUNC arg_list 
 1851 0ee0 4DF8048D 	    push {T1}
 1852 0ee4 88EA0808 	    eor T1,T1 
 1853 0ee8 00B500F0 	1:  _CALL expression 
 1853      BFF85DF8 
 1853      04EB
 1854 0ef2 1B28     	    cmp R0,#TK_INTGR  
 1855 0ef4 0AD1     	    bne 2f
 1856 0ef6 4CF8041D 	    _PUSH r1 
 1857 0efa 08F10108 	    add T1,#1 
 1858 0efe 00B5FFF7 	    _CALL next_token 
 1858      8EFF5DF8 
 1858      04EB
 1859 0f08 0228     	    cmp r0,#TK_COMMA 
 1860 0f0a EDD0     	    beq 1b 
 1861 0f0c D4F800A0 	2:  _UNGET_TOKEN 
 1861      D4F808B0 
 1862 0f14 4046     	9:  mov r0,T1 
 1863 0f16 5DF8048B 	    pop {T1}
 1864 0f1a 7047     	    _RET 
 1865              	
 1866              	
 1867              	/***********************************
 1868              	 factor
 1869              	 arithmetick factor parser 
 1870              	 factor ::= ['+'|'-'|e]  var | @ |
 1871              				 integer | function |
 1872              				 '('expression')' 
 1873              	  input: 
 1874              	    none 
 1875              	  output:
 1876              	    r0   token attribute 
 1877              	    r1   token value 
 1878              	  use:
 1879              	    r2   temp 
 1880              	    r3   sign 
 1881              	***********************************/
ARM GAS  tinyBasic.s 			page 51


 1882              	    _FUNC factor 
 1883 0f1c 0CB4     	    push {r2,r3}
 1884 0f1e 00B5FFF7 	    _CALL next_token
 1884      7EFF5DF8 
 1884      04EB
 1885 0f28 4FF00103 	    mov r3,#1 // default sign +  
 1886 0f2c 0828     	    cmp r0,#TK_MINUS  
 1887 0f2e 06D1     	    bne 1f 
 1888 0f30 4FF0FF33 	    mov r3,#-1 // minus sign 
 1889 0f34 00B5FFF7 	0:  _CALL next_token
 1889      73FF5DF8 
 1889      04EB
 1890 0f3e 1B28     	1:  cmp r0,#TK_INTGR 
 1891 0f40 55D0     	    beq 8f 
 1892 0f42 0C28     	    cmp r0,#TK_ARRAY 
 1893 0f44 1DD1     	    bne 2f 
 1894 0f46 4FF00500 	    mov r0,#TK_LPAREN 
 1895 0f4a 00B5FFF7 	    _CALL expect 
 1895      A4FF5DF8 
 1895      04EB
 1896 0f54 00B500F0 	    _CALL expression
 1896      89F85DF8 
 1896      04EB
 1897 0f5e 1B28     	    cmp r0,#TK_INTGR
 1898 0f60 7FF468AD 	    bne syntax_error
 1899 0f64 0A46     	    mov r2,r1  
 1900 0f66 4FF00600 	    mov r0,#TK_RPAREN
 1901 0f6a 00B5FFF7 	    _CALL expect 
 1901      94FF5DF8 
 1901      04EB
 1902 0f74 1046     	    mov r0,r2 
 1903 0f76 00B500F0 	    _CALL get_array_element 
 1903      E4F85DF8 
 1903      04EB
 1904 0f80 35E0     	    b 8f
 1905 0f82 0528     	2:  cmp r0,#TK_LPAREN 
 1906 0f84 13D1     	    bne 3f 
 1907 0f86 00B500F0 	    _CALL expression 
 1907      70F85DF8 
 1907      04EB
 1908 0f90 1B28     	    cmp r0,#TK_INTGR 
 1909 0f92 7FF44FAD 	    bne syntax_error
 1910 0f96 0A46     	    mov r2,r1   
 1911 0f98 4FF00600 	    mov r0,#TK_RPAREN
 1912 0f9c 00B5FFF7 	    _CALL expect 
 1912      7BFF5DF8 
 1912      04EB
 1913 0fa6 1146     	    mov r1,r2 
 1914 0fa8 4FF01B00 	    mov r0,#TK_INTGR
 1915 0fac 1FE0     	    b 8f       
 1916 0fae 1428     	3:  cmp r0,#TK_VAR 
 1917 0fb0 06D1     	    bne 4f
 1918 0fb2 0846     	    mov r0,r1  
 1919 0fb4 00B500F0 	    _CALL get_var 
 1919      D9F85DF8 
 1919      04EB
 1920 0fbe 16E0     	    b 8f 
ARM GAS  tinyBasic.s 			page 52


 1921 0fc0 1528     	4:  cmp r0,#TK_IFUNC 
 1922 0fc2 06D1     	    bne 6f 
 1923 0fc4 0846     	5:  mov r0,r1  
 1924 0fc6 00B5FFF7 	    _CALL execute
 1924      26FF5DF8 
 1924      04EB
 1925 0fd0 0DE0     	    b 8f 
 1926 0fd2 1A28     	6:  cmp r0,#TK_LABEL
 1927 0fd4 07D1     	    bne 7f 
 1928 0fd6 41F00040 	    orr r0,r1,#(1<<31) 
 1929 0fda 00B5FFF7 	    _CALL search_const
 1929      5CF95DF8 
 1929      04EB
 1930 0fe4 03E0     	    b 8f 
 1931 0fe6 1828     	7:  cmp r0,#TK_SCONST 
 1932 0fe8 03D1     	    bne 9f 
 1933 0fea 4FF01B00 	    mov r0,#TK_INTGR
 1934 0fee 03FB01F1 	8:  mul r1,r3 
 1935 0ff2 0CBC     	9:  pop {r2,r3}   
 1936 0ff4 7047     	    _RET 
 1937              	
 1938              	
 1939              	/*****************************************
 1940              	    term 
 1941              	    term parser 
 1942              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1943              	    output:
 1944              	      r0  	token attribute 
 1945              	      r1		integer
 1946              	    use:
 1947              	      r2    first factor 
 1948              	      r3    operator *|/|%
 1949              	******************************************/
 1950 0ff6 00BF     	    _FUNC term 
 1951 0ff8 00B5FFF7 	    _CALL factor
 1951      8FFF5DF8 
 1951      04EB
 1952 1002 1B28     	    cmp r0,#TK_INTGR
 1953 1004 00D0     	    beq 0f 
 1954 1006 7047     	    _RET // not a factor    
 1955 1008 0CB4     	0:  push {r2,r3}
 1956 100a 0A46     	    mov r2,r1 // first factor    
 1957 100c 00B5FFF7 	0:  _CALL next_token
 1957      07FF5DF8 
 1957      04EB
 1958 1016 0346     	    mov r3,r0  // operator 
 1959 1018 0928     	    cmp r0,TK_MULT
 1960 101a 01D4     	    bmi 1f 
 1961 101c 0C28     	    cmp r0,#TK_MOD+1
 1962 101e 06D4     	    bmi 2f
 1963 1020 D4F800A0 	1:  _UNGET_TOKEN
 1963      D4F808B0 
 1964 1028 4FF01B00 	    mov r0,#TK_INTGR
 1965 102c 1AE0     	    b 9f 
 1966 102e 00B5FFF7 	2:  _CALL factor
 1966      74FF5DF8 
 1966      04EB
ARM GAS  tinyBasic.s 			page 53


 1967 1038 1B28     	    cmp r0,#TK_INTGR
 1968 103a 7FF4FBAC 	    bne syntax_error 
 1969 103e 092B     	    cmp r3,#TK_MULT
 1970 1040 02D1     	    bne 3f 
 1971              	// multiplication
 1972 1042 01FB02F2 	    mul r2,r1
 1973 1046 E1E7     	    b 0b  
 1974 1048 B8F10A0F 	3:  cmp T1,#TK_DIV 
 1975 104c 02D1     	    bne 4f
 1976              	// division
 1977 104e 92FBF1F2 	    sdiv r2,r2,r1
 1978 1052 DBE7     	    b 0b  
 1979              	4: // modulo
 1980 1054 1046     	    mov r0,r2 
 1981 1056 92FBF1F2 	    sdiv r2,r2,r1 
 1982 105a 01FB02F2 	    mul  r2,r1 
 1983 105e A0EB0202 	    sub  r2,r0,r2
 1984 1062 D3E7     	    b 0b  
 1985 1064 1146     	9:  mov r1,r2 
 1986 1066 0CBC     	    pop {r2,r3}
 1987 1068 7047     	    _RET 
 1988              	
 1989              	
 1990              	/*****************************************
 1991              	    expression 
 1992              	    arithmetic expression parser 
 1993              	    expression ::= term [['+'|'-'] term]*
 1994              	    result range {-32768..32767}
 1995              	    output:
 1996              	      r0    TK_NONE || TK_INTGR 
 1997              	      r1 	  integer
 1998              	    use:
 1999              	      r2  left term 
 2000              	      r3  operator +|-
 2001              	******************************************/
 2002 106a 00BF     	    _FUNC expression 
 2003 106c 00B5FFF7 	    _CALL term 
 2003      C3FF5DF8 
 2003      04EB
 2004 1076 1B28     	    cmp r0,#TK_INTGR 
 2005 1078 00D0     	    beq 0f 
 2006 107a 7047     	    _RET   
 2007 107c 0CB4     	0:  push {r2,r3}
 2008 107e 0A46     	    mov r2,r1 // first term
 2009 1080 00B5FFF7 	1:  _CALL next_token 
 2009      CDFE5DF8 
 2009      04EB
 2010 108a 0346     	    mov r3,r0 //  +|-
 2011 108c 0728     	    cmp r0,#TK_PLUS 
 2012 108e 08D0     	    beq 3f 
 2013 1090 0828     	    cmp r0,#TK_MINUS  
 2014 1092 06D0     	    beq 3f
 2015 1094 D4F800A0 	    _UNGET_TOKEN 
 2015      D4F808B0 
 2016 109c 4FF01B00 	    mov r0,#TK_INTGR
 2017 10a0 0EE0     	    b 9f 
 2018 10a2 00B5FFF7 	3:  _CALL term 
ARM GAS  tinyBasic.s 			page 54


 2018      A8FF5DF8 
 2018      04EB
 2019 10ac 1B28     	    cmp r0,#TK_INTGR 
 2020 10ae 7FF4C1AC 	    bne syntax_error 
 2021 10b2 072B     	    cmp r3,#TK_PLUS 
 2022 10b4 02D0     	    beq 4f 
 2023 10b6 A2EB0102 	    sub r2,r1 // term1-term2  
 2024 10ba E1E7     	    b 1b 
 2025 10bc 0A44     	4:  add r2,r1 // term1+term2
 2026 10be DFE7     	    b 1b
 2027 10c0 1146     	9:  mov r1,r2 
 2028 10c2 0CBC     	    pop {r2,r3}
 2029 10c4 7047     	    _RET 
 2030              	
 2031              	
 2032              	/**********************************************
 2033              	    relation parser 
 2034              	    rel ::= expr1 rel_op expr2
 2035              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2036              	    relation return  integer , zero is false 
 2037              	    output:
 2038              	        r0	TK_INTGR  
 2039              	        r1	integer 
 2040              	    use:
 2041              	        r2   first operand 
 2042              	        r3   relop   
 2043              	**********************************************/
 2044 10c6 00BF     	    _FUNC relation 
 2045 10c8 0CB4     	    push {r2,r3}
 2046 10ca 00B5FFF7 	    _CALL expression 
 2046      CEFF5DF8 
 2046      04EB
 2047 10d4 1B28     	    cmp r0,#TK_INTGR 
 2048 10d6 7FF4ADAC 	    bne syntax_error 
 2049 10da 0A46     	    mov r2,r1  // first operand  
 2050 10dc 00B5FFF7 	    _CALL next_token 
 2050      9FFE5DF8 
 2050      04EB
 2051 10e6 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2052 10ea 0D28     	    cmp r0,#TK_EQUAL 
 2053 10ec 1DD4     	    bmi 8f 
 2054 10ee 1328     	    cmp r0,#TK_CHAR 
 2055 10f0 1BD5     	    bpl 8f 
 2056 10f2 00B5FFF7 	    _CALL expression 
 2056      BAFF5DF8 
 2056      04EB
 2057 10fc 1B28     	    cmp r0,#TK_INTGR 
 2058 10fe 7FF499AC 	    bne syntax_error 
 2059 1102 8A42     	    cmp r2,r1 // compare operands  
 2060 1104 4FF0FF31 	    mov r1,#-1 
 2061 1108 2D4A     	    ldr r2,=relop_jmp
 2062 110a D2E803F0 	    tbb [r2,r3]    
 2063              	rel_idx0:
 2064              	rel_eq:
 2065 110e 11D0     	    beq 9f 
 2066 1110 08E0     	    b rel_false
 2067              	rel_gt:
ARM GAS  tinyBasic.s 			page 55


 2068 1112 0FDC     	    bgt 9f  
 2069 1114 06E0     	    b rel_false  
 2070              	rel_ge:
 2071 1116 0DDA     	    bge 9f  
 2072 1118 04E0     	    b rel_false  
 2073              	rel_lt: 
 2074 111a 0BDB     	    blt 9f   
 2075 111c 02E0     	    b rel_false 
 2076              	rel_le:
 2077 111e 09DD     	    ble 9f  
 2078 1120 00E0     	    b rel_false 
 2079              	rel_ne:
 2080 1122 07D1     	    bne 9f 
 2081              	rel_false:    
 2082 1124 81EA0101 	    eor r1,r1  // false
 2083 1128 04E0     	    b 9f  
 2084 112a D4F800A0 	8:  _UNGET_TOKEN 
 2084      D4F808B0 
 2085 1132 1146     	    mov r1,r2    
 2086 1134 4FF01B00 	9:  mov r0,#TK_INTGR
 2087 1138 0CBC     	    pop {r2,r3}
 2088 113a 7047     	    _RET 
 2089              	
 2090              	
 2091              	relop_jmp: 
 2092 113c 00       	  .byte 0 // =  
 2093 113d 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2094 113e 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2095 113f 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2096 1140 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2097 1141 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2098              	
 2099              	
 2100              	/***********************************
 2101              	    get_array_element
 2102              	    return value of @(n)
 2103              	  input:
 2104              	    r0    indice 
 2105              	  output:
 2106              	    r0   TK_INTGR
 2107              	    r1   value  
 2108              	************************************/
 2109 1142 00BF     	    _FUNC get_array_element 
 2110 1144 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2111 1148 4FEA8000 	    lsl r0,#2 
 2112 114c C0EB0100 	    rsb r0,r1 
 2113 1150 0168     	    ldr r1,[r0]
 2114 1152 4FF01B00 	    mov r0,#TK_INTGR 
 2115 1156 7047     	    _RET 
 2116              	
 2117              	
 2118              	/***********************************
 2119              	    set_array_element 
 2120              	    set value of array element 
 2121              	  input:
 2122              	    r0   index 
 2123              	    r1   new value 
ARM GAS  tinyBasic.s 			page 56


 2124              	  output:
 2125              	    none
 2126              	  use:
 2127              	    r2    array pointer 
 2128              	**********************************/
 2129              	    _FUNC set_array_element 
 2130 1158 04B4     	    push {r2}
 2131 115a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2132 115e 4FEA8000 	    lsl r0,#2 
 2133 1162 A1EB0001 	    sub r1,r0 
 2134 1166 0960     	    str r1,[r1]
 2135 1168 04BC     	    pop {r2}
 2136 116a 7047     	    _RET 
 2137              	
 2138              	/***********************************
 2139              	   get_var 
 2140              	   get variable value 
 2141              	  input:
 2142              	     r0    variable index {0..25}
 2143              	  output:
 2144              	     r0    TK_INTGR
 2145              	     r1    value 
 2146              	**********************************/
 2147              	    _FUNC get_var 
 2148 116c 04F16001 	    add r1,UPP,#VARS
 2149 1170 4FEA8000 	    lsl r0,#2 
 2150 1174 0958     	    ldr r1,[r1,r0]
 2151 1176 4FF01B00 	    mov r0,#TK_INTGR
 2152 117a 7047     	    _RET 
 2153              	
 2154              	/*********************************
 2155              	    set_var 
 2156              	    set variable value 
 2157              	  input:
 2158              	     r0    variable index {0..25}
 2159              	     r1    new value 
 2160              	  output:
 2161              	    none 
 2162              	  use:
 2163              	    r2   vars pointer 
 2164              	*********************************/
 2165              	    _FUNC set_var 
 2166 117c 04B4     	    push {r2}
 2167 117e 04F16002 	    add r2,UPP,#VARS
 2168 1182 4FEA8000 	    lsl r0,#2
 2169 1186 1150     	    str r1,[r2,r0]
 2170 1188 04BC     	    pop {r2}
 2171 118a 7047     	    _RET 
 2172              	
 2173              	/******************************
 2174              	    CONSTANTS data
 2175              	******************************/
 2176              	
 2177              	  .section .rodata 
 2178              	
 2179              	// system variables initial value 
 2180              	uzero:
ARM GAS  tinyBasic.s 			page 57


 2181 0000 00000000 	  .word 0 // IN_SAVED
 2182 0004 00000000 	  .word 0 // COUNT
 2183 0008 00000000 	  .word 0 // BASICPTR
 2184 000c 00000000 	  .word 0 // DATAPTR
 2185 0010 00000000 	  .word 0 // DATA
 2186 0014 00000000 	  .word 0 // DATALEN
 2187 0018 0A000000 	  .word 10 // BASE
 2188 001c 00000000 	  .word 0 // TICKS
 2189 0020 00000000 	  .word 0 // TIMER
 2190 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2191 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2192 002c 00000000 	  .word 0 // FSFREE
 2193 0030 00000000 	  .word 0 // TXTBGN
 2194 0034 00000000 	  .word 0 // TXTEND
 2195 0038 00000000 	  .word 0 //LOOP_DEPTH
 2196 003c 00000000 	  .word 0 // ARRAY_SIZE
 2197 0040 00000000 	  .word 0 // FLAGS
 2198 0044 04000000 	  .word 4 // TAB_WIDTH
 2199 0048 00000000 	  .word 0 // RX_HEAD
 2200 004c 00000000 	  .word 0 // RX_TAIL
 2201 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2201      00000000 
 2201      00000000 
 2201      00000000 
 2202 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2204 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2205 00d0 00000000 	  .word 0 // HERE 
 2206              	ulast:
 2207              	
 2208              	  .section .rodata.dictionary 
 2209              	
 2210              	// keep alphabetic order for BASIC names from Z-A
 2211              	// this sort order is for for WORDS cmd output. 	
 2212              	  .type kword_end, %object
 2213              		.equ link, 0
 2214              	kword_end:
 2215 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2216      54000000 
 2216      15000000 
 2216      59504F53 
 2216      00000000 
 2217 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2217      53000000 
 2217      15000000 
 2217      58504F53 
 2217      00000000 
 2218 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2218      52000000 
ARM GAS  tinyBasic.s 			page 58


 2218      15000000 
 2218      584F5200 
 2219 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2219      51000000 
 2219      17000000 
 2219      574F5244 
 2219      53000000 
 2220 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2220      50000000 
 2220      17000000 
 2220      57414954 
 2220      00000000 
 2221 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2221      4F000000 
 2221      17000000 
 2221      554E5449 
 2221      4C000000 
 2222 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2222      4E000000 
 2222      15000000 
 2222      55464C41 
 2222      53480000 
 2223 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2223      4D000000 
 2223      15000000 
 2223      55424F55 
 2223      4E440000 
 2224 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2224      4C000000 
 2224      17000000 
 2224      54524143 
 2224      45000000 
 2225 00c0 B8000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2225      4B000000 
 2225      17000000 
 2225      544F0000 
 2226 00d0 CC000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2226      49000000 
 2226      17000000 
 2226      54494D45 
 2226      52000000 
 2227 00e4 DC000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2227      4A000000 
 2227      15000000 
 2227      54494D45 
 2227      4F555400 
 2228 00f8 F0000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2228      48000000 
 2228      15000000 
 2228      5449434B 
 2228      53000000 
 2229 010c 04010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2229      47000000 
 2229      17000000 
 2229      5448454E 
 2229      00000000 
 2230 0120 18010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
ARM GAS  tinyBasic.s 			page 59


 2230      46000000 
 2230      17000000 
 2230      54414200 
 2231 0130 2C010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2231      45000000 
 2231      17000000 
 2231      53544F52 
 2231      45000000 
 2232 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2232      44000000 
 2232      17000000 
 2232      53544F50 
 2232      00000000 
 2233 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2233      43000000 
 2233      17000000 
 2233      53544550 
 2233      00000000 
 2234 016c 64010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2234      42000000 
 2234      17000000 
 2234      53504300 
 2235 017c 78010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2235      41000000 
 2235      17000000 
 2235      534C4545 
 2235      50000000 
 2236 0190 88010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2236      40000000 
 2236      17000000 
 2236      53415645 
 2236      00000000 
 2237 01a4 9C010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2237      3F000000 
 2237      17000000 
 2237      52554E00 
 2238 01b4 B0010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2238      3E000000 
 2238      15000000 
 2238      52534849 
 2238      46540000 
 2239 01c8 C0010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2239      3D000000 
 2239      15000000 
 2239      524E4400 
 2240 01d8 D4010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2240      3C000000 
 2240      17000000 
 2240      52455455 
 2240      524E0000 
 2241 01ec E4010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2241      3B000000 
 2241      17000000 
 2241      52455354 
 2241      4F524500 
 2242 0200 F8010000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2242      3A000000 
ARM GAS  tinyBasic.s 			page 60


 2242      17000000 
 2242      52454D00 
 2243 0210 0C020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2243      39000000 
 2243      15000000 
 2243      52454144 
 2243      00000000 
 2244 0224 1C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2244      38000000 
 2244      15000000 
 2244      514B4559 
 2244      00000000 
 2245 0238 30020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2245      37000000 
 2245      17000000 
 2245      50555400 
 2246 0248 44020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2246      36000000 
 2246      17000000 
 2246      50555348 
 2246      00000000 
 2247 025c 54020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2247      35000000 
 2247      17000000 
 2247      5052494E 
 2247      54000000 
 2248 0270 68020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2248      34000000 
 2248      15000000 
 2248      504F5000 
 2249 0280 7C020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2249      33000000 
 2249      17000000 
 2249      504F4B45 
 2249      57000000 
 2250 0294 8C020000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2250      32000000 
 2250      17000000 
 2250      504F4B45 
 2250      48000000 
 2251 02a8 A0020000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2251      31000000 
 2251      17000000 
 2251      504F4B45 
 2251      42000000 
 2252 02bc B4020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2252      2D000000 
 2252      17000000 
 2252      504D4F44 
 2252      45000000 
 2253 02d0 C8020000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2253      30000000 
 2253      15000000 
 2253      5045454B 
 2253      57000000 
 2254 02e4 DC020000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2254      2F000000 
ARM GAS  tinyBasic.s 			page 61


 2254      15000000 
 2254      5045454B 
 2254      48000000 
 2255 02f8 F0020000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2255      2E000000 
 2255      15000000 
 2255      5045454B 
 2255      42000000 
 2256 030c 04030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2256      2C000000 
 2256      17000000 
 2256      50415553 
 2256      45000000 
 2257 0320 18030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2257      2B000000 
 2257      15000000 
 2257      50414400 
 2258 0330 2C030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2258      2A000000 
 2258      17000000 
 2258      4F555400 
 2259 0340 3C030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2259      29000000 
 2259      15000000 
 2259      4F520000 
 2260 0350 4C030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2260      28000000 
 2260      15000000 
 2260      4E4F5400 
 2261 0360 5C030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2261      27000000 
 2261      17000000 
 2261      4E455854 
 2261      00000000 
 2262 0374 6C030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2262      26000000 
 2262      17000000 
 2262      4E455700 
 2263 0384 80030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2263      25000000 
 2263      15000000 
 2263      4C534849 
 2263      46540000 
 2264 0398 90030000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2264      24000000 
 2264      17000000 
 2264      4C4F4341 
 2264      54450000 
 2265 03ac A4030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2265      23000000 
 2265      17000000 
 2265      4C4F4144 
 2265      00000000 
 2266 03c0 B8030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2266      22000000 
 2266      17000000 
 2266      4C495354 
ARM GAS  tinyBasic.s 			page 62


 2266      00000000 
 2267 03d4 CC030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2267      21000000 
 2267      17000000 
 2267      4C455400 
 2268 03e4 E0030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2268      20000000 
 2268      15000000 
 2268      4B455900 
 2269 03f4 F0030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2269      1F000000 
 2269      15000000 
 2269      494E5645 
 2269      52540000 
 2270 0408 00040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2270      1E000000 
 2270      17000000 
 2270      494E5055 
 2270      54000000 
 2271 041c 14040000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2271      1D000000 
 2271      15000000 
 2271      494E0000 
 2272 042c 28040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2272      1C000000 
 2272      17000000 
 2272      49460000 
 2273 043c 38040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2273      1B000000 
 2273      17000000 
 2273      48455800 
 2274 044c 48040000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2274      00100140 
 2274      18000000 
 2274      4750494F 
 2274      43000000 
 2275 0460 58040000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2275      000C0140 
 2275      18000000 
 2275      4750494F 
 2275      42000000 
 2276 0474 6C040000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2276      00080140 
 2276      18000000 
 2276      4750494F 
 2276      41000000 
 2277 0488 80040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2277      1A000000 
 2277      17000000 
 2277      474F544F 
 2277      00000000 
 2278 049c 94040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2278      19000000 
 2278      17000000 
 2278      474F5355 
 2278      42000000 
 2279 04b0 A8040000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
ARM GAS  tinyBasic.s 			page 63


 2279      18000000 
 2279      15000000 
 2279      47455400 
 2280 04c0 BC040000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2280      17000000 
 2280      15000000 
 2280      46524545 
 2280      00000000 
 2281 04d4 CC040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2281      16000000 
 2281      17000000 
 2281      464F5247 
 2281      45540000 
 2282 04e8 E0040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2282      15000000 
 2282      17000000 
 2282      464F5200 
 2283 04f8 F4040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2283      14000000 
 2283      17000000 
 2283      45524153 
 2283      45000000 
 2284 050c 04050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2284      13000000 
 2284      17000000 
 2284      454E4400 
 2285 051c 18050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2285      12000000 
 2285      17000000 
 2285      44554D50 
 2285      00000000 
 2286 0530 28050000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2286      11000000 
 2286      17000000 
 2286      44524F50 
 2286      00000000 
 2287 0544 3C050000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2287      10000000 
 2287      17000000 
 2287      444F0000 
 2288 0554 50050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2288      0F000000 
 2288      17000000 
 2288      44495200 
 2289 0564 60050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2289      0E000000 
 2289      17000000 
 2289      44454300 
 2290 0574 70050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2290      0D000000 
 2290      17000000 
 2290      44415441 
 2290      4C4E0000 
 2291 0588 80050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2291      0C000000 
 2291      17000000 
 2291      44415441 
ARM GAS  tinyBasic.s 			page 64


 2291      00000000 
 2292 059c 94050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2292      0B000000 
 2292      17000000 
 2292      434F4E53 
 2292      54000000 
 2293 05b0 A8050000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2293      0A000000 
 2293      17000000 
 2293      434C5300 
 2294 05c0 BC050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2294      09000000 
 2294      16000000 
 2294      43484152 
 2294      00000000 
 2295 05d4 CC050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2295      08000000 
 2295      17000000 
 2295      42544F47 
 2295      4C000000 
 2296 05e8 E0050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2296      07000000 
 2296      15000000 
 2296      42544553 
 2296      54000000 
 2297 05fc F4050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2297      06000000 
 2297      17000000 
 2297      42534554 
 2297      00000000 
 2298 0610 08060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2298      05000000 
 2298      17000000 
 2298      42524553 
 2298      00000000 
 2299 0624 1C060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2299      04000000 
 2299      15000000 
 2299      42495400 
 2300 0634 30060000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2300      03000000 
 2300      17000000 
 2300      41575500 
 2301 0644 40060000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2301      02000000 
 2301      15000000 
 2301      41534300 
 2302 0654 50060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2302      01000000 
 2302      15000000 
 2302      414E4400 
 2303              	first_link: 
 2304 0664 60060000 	  .word LINK 
 2305 0668 00000000 	  .word ABS_IDX 
 2306 066c 15000000 	  .word TK_IFUNC
 2307              	kword_dict: // first name field 
 2308              	  .equ LINK,. 
ARM GAS  tinyBasic.s 			page 65


 2309 0670 41425300 	  .asciz "ABS" 
 2310              	  .p2align 2 
 2311              	
 2312              	    .section .rodata.fn_tabld 
 2313              	
 2314              	//comands and fonctions address table
 2315              	  .type fn_table, %object
 2316              	fn_table:
 2317 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2317      00000000 
 2317      00000000 
 2317      00000000 
 2317      00000000 
 2318 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2318      00000000 
 2318      00000000 
 2318      00000000 
 2318      00000000 
 2319 0030 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2320 004c 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2320      00000000 
 2320      00000000 
 2320      00000000 
 2320      00000000 
 2321 006c 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2321      00000000 
 2321      00000000 
 2321      00000000 
 2321      00000000 
 2322 0084 00000000 		.word let,list,load,locate,lshift,new,next
 2322      00000000 
 2322      00000000 
 2322      00000000 
 2322      00000000 
 2323 00a0 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2323      00000000 
 2323      00000000 
 2323      00000000 
 2323      00000000 
 2324 00c4 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2324      00000000 
 2324      00000000 
 2324      00000000 
 2324      00000000 
 2325 00e0 00000000 		.word qkey,read,skip_line
 2325      00000000 
 2325      00000000 
 2326 00ec 00000000 		.word restore,return, random,rshift,run,save
 2326      00000000 
 2326      00000000 
 2326      00000000 
 2326      00000000 
 2327 0104 00000000 		.word sleep,spc,step,stop,store,tab
ARM GAS  tinyBasic.s 			page 66


 2327      00000000 
 2327      00000000 
 2327      00000000 
 2327      00000000 
 2328 011c 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2328      00000000 
 2328      00000000 
 2328      00000000 
 2328      00000000 
 2329 0140 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2329      00000000 
 2329      00000000 
 2329      00000000 
 2329      00000000 
 2330 0154 00000000 		.word 0 
 2331              	
 2332              	
 2333              	/**********************************
 2334              	    BASIC commands and functions 
 2335              	**********************************/
 2336              	
 2337              	    .section .text.basic , "ax", %progbits 
 2338              	
 2339              	
 2340              	/*******************************
 2341              	  BASIC:  ABS expr 
 2342              	  input:
 2343              	    none 
 2344              	  output:
 2345              	    r0    token type 
 2346              	    r1    abs(expr)
 2347              	  use:
 2348              	    none 
 2349              	******************************/
 2350              	    _FUNC abs 
 2351 0000 00B5FFF7 	    _CALL arg_list
 2351      FEFF5DF8 
 2351      04EB
 2352 000a 0128     	    cmp r0,#1 
 2353 000c 01D0     	    beq 1f 
 2354 000e FFF7FEBF 	    b syntax_error 
 2355 0012 5CF8041B 	1:  _POP r1 
 2356 0016 11F0004F 	    tst r1,#(1<<31)
 2357 001a 01D0     	    beq 9f
 2358 001c C1F10001 	    rsb r1,#0 
 2359 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2360 0024 7047     	   _RET 
 2361              	
 2362 0026 00BF     	    _FUNC power_adc
 2363 0028 7047     	    _RET
 2364              	
 2365 002a 00BF     	    _FUNC analog_read
 2366 002c 7047     	    _RET
 2367              	
 2368              	/************************************
 2369              	  BASIC: AND(expr1,expr2)
 2370              	  logical ANND bit to between expr1,expr2
ARM GAS  tinyBasic.s 			page 67


 2371              	************************************/
 2372 002e 00BF     	    _FUNC bit_and
 2373 0030 00B5FFF7 	    _CALL func_args 
 2373      FEFF5DF8 
 2373      04EB
 2374 003a 0228     	    cmp r0,#2 
 2375 003c 7FF4FEAF 	    bne syntax_error 
 2376 0040 5CF8040B 	    _POP r0 
 2377 0044 5CF8041B 	    _POP r1 
 2378 0048 01EA0001 	    and r1,r0 
 2379 004c 4FF01B00 	    mov r0,#TK_INTGR
 2380 0050 7047     	    _RET
 2381              	
 2382              	/*******************************************
 2383              	  BASIC: ASC(string|char)
 2384              	  return ASCII code of char of first char 
 2385              	  of string 
 2386              	*******************************************/
 2387 0052 00BF     	    _FUNC ascii
 2388 0054 4FF00500 	    mov r0,#TK_LPAREN 
 2389 0058 00B5FFF7 	    _CALL expect 
 2389      FEFF5DF8 
 2389      04EB
 2390 0062 00B5FFF7 	    _CALL next_token 
 2390      FEFF5DF8 
 2390      04EB
 2391 006c 1C28     	    cmp r0,#TK_QSTR
 2392 006e 03D0     	    beq 2f 
 2393 0070 1328     	    cmp r0,#TK_CHAR 
 2394 0072 7FF4FEAF 	    bne syntax_error 
 2395 0076 00E0     	    b 9f 
 2396 0078 0978     	2:  ldrb r1,[r1]
 2397 007a 4CF8041D 	9:  _PUSH r1 
 2398 007e 4FF00600 	    mov r0,#TK_RPAREN 
 2399 0082 00B5FFF7 	    _CALL expect 
 2399      FEFF5DF8 
 2399      04EB
 2400 008c 4FF01B00 	    mov r0,#TK_INTGR 
 2401 0090 5CF8041B 	    _POP r1 
 2402 0094 7047     	    _RET
 2403              	
 2404 0096 00BF     	    _FUNC autorun
 2405 0098 7047     	    _RET
 2406              	
 2407              	/*******************************************
 2408              	  BASIC: AWU time_sleep  
 2409              	  enable LSI and IWDG and place MCU in 
 2410              	  deep sleep. IDWG wakeup MCU 
 2411              	******************************************/
 2412 009a 00BF     	    _FUNC awu
 2413 009c 00B5FFF7 	    _CALL arg_list
 2413      FEFF5DF8 
 2413      04EB
 2414 00a6 0128     	    cmp r0,#1 
 2415 00a8 7FF4FEAF 	    bne syntax_error 
 2416 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2416      C4F20201 
ARM GAS  tinyBasic.s 			page 68


 2417 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2418              	// enable LSI 
 2419 00b6 80F00100 	    eor r0,#1
 2420 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2421              	// wait for LSIRDY 
 2422 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2423 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2424 00c2 FBD0     	    beq 1b 
 2425              	// configure IWDG
 2426              	// compute values for IWDG_PR and IWDG_RLR 
 2427 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2428 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2429 00cc 03FB02F2 	    mul r2,r3 
 2430 00d0 83EA0303 	    eor r3,r3
 2431 00d4 B2F5005F 	2:  cmp r2,#8192 
 2432 00d8 04D4     	    bmi 3f 
 2433 00da 4FEA5202 	    lsr r2,#1 
 2434 00de 03F10103 	    add r3,#1
 2435 00e2 F7E7     	    b 2b
 2436              	// initialize IWDG      
 2437 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2437      C4F20001 
 2438 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2439 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2440 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2441 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2442 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2443 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2444 00fc 00F06ABF 	    b sleep // place MCU in deep sleep
 2445 0100 7047     	    _RET
 2446              	
 2447              	/********************************************
 2448              	  BASIC: BIT(expr)
 2449              	  expr must be between 0..31 and is used 
 2450              	  to create 1 bit mask at that position
 2451              	*******************************************/
 2452 0102 00BF     	    _FUNC bitmask
 2453 0104 00B5FFF7 	    _CALL func_args
 2453      FEFF5DF8 
 2453      04EB
 2454 010e 0128     	    cmp r0,#1 
 2455 0110 7FF4FEAF 	    bne syntax_error 
 2456 0114 5CF8040B 	    _POP r0
 2457 0118 4FF00101 	    mov r1,#1
 2458 011c 01FA00F1 	    lsl r1,r0 
 2459 0120 4FF01B00 	9:  mov r0,#TK_INTGR
 2460 0124 7047     	    _RET 
 2461              	
 2462              	  
 2463              	  /*********************************
 2464              	   BASIC: BRES adr, mask   
 2465              	   reset bits [adr]= [adr] & ~mask  
 2466              	   input:
 2467              	     none 
 2468              	    output;
 2469              	      none 
 2470              	    use:
ARM GAS  tinyBasic.s 			page 69


 2471              	      T1   temp
 2472              	      T2   temp 
 2473              	*******************************/     
 2474 0126 00BF     	  _FUNC bit_reset
 2475 0128 00B5FFF7 	    _CALL arg_list 
 2475      FEFF5DF8 
 2475      04EB
 2476 0132 0228     	    cmp r0,#2 
 2477 0134 01D0     	    beq 1f 
 2478 0136 FFF7FEBF 	    b syntax_error 
 2479 013a 5CF8041B 	1:  _POP r1 //mask 
 2480 013e 5CF8040B 	    _POP r0 //address 
 2481 0142 D0F80090 	    ldr T2,[r0] 
 2482 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2483 014a 01EA0901 	    and r1,T2
 2484 014e 0160     	    str r1,[r0]
 2485 0150 7047     	    _RET  
 2486              	
 2487              	
 2488              	/*********************************
 2489              	   BASIC: BSET adr, mask   
 2490              	   reset bits [adr]= [adr] & ~mask  
 2491              	   input:
 2492              	      none 
 2493              	    output;
 2494              	      none 
 2495              	    use:
 2496              	      T1   temp
 2497              	      T2   temp  
 2498              	*******************************/     
 2499 0152 00BF     	    _FUNC bit_set
 2500 0154 00B5FFF7 	    _CALL arg_list 
 2500      FEFF5DF8 
 2500      04EB
 2501 015e 0228     	    cmp r0,#2 
 2502 0160 01D0     	    beq 1f 
 2503 0162 FFF7FEBF 	    b syntax_error 
 2504 0166 5CF8041B 	1:  _POP r1 //mask 
 2505 016a 5CF8040B 	    _POP r0 //address 
 2506 016e D0F80090 	    ldr T2,[r0] 
 2507 0172 41EA0901 	    orr r1,T2
 2508 0176 0160     	    str r1,[r0]
 2509 0178 7047     	    _RET 
 2510              	
 2511              	  /*********************************
 2512              	   BASIC: BTOGL adr, mask   
 2513              	   reset bits [adr]= [adr] & ~mask  
 2514              	   input:
 2515              	     r0    adr 
 2516              	     r1    mask 
 2517              	    output;
 2518              	      none 
 2519              	    use:
 2520              	      T1   temp
 2521              	      T2   temp  
 2522              	*******************************/     
 2523 017a 00BF     	  _FUNC bit_toggle
ARM GAS  tinyBasic.s 			page 70


 2524 017c 00B5FFF7 	    _CALL arg_list 
 2524      FEFF5DF8 
 2524      04EB
 2525 0186 0228     	    cmp r0,#2 
 2526 0188 01D0     	    beq 1f 
 2527 018a FFF7FEBF 	    b syntax_error 
 2528 018e 5CF8041B 	1:  _POP r1 //mask 
 2529 0192 5CF8040B 	    _POP r0 //address 
 2530 0196 D0F80090 	    ldr T2,[r0] 
 2531 019a 81EA0901 	    eor r1,T2
 2532 019e 0160     	    str r1,[r0]
 2533 01a0 7047     	    _RET  
 2534              	
 2535              	/********************************
 2536              	  BASIC: BTEST(addr,bit)
 2537              	  return bit state at address
 2538              	********************************/
 2539 01a2 00BF     	    _FUNC bit_test
 2540 01a4 00B5FFF7 	    _CALL func_args
 2540      FEFF5DF8 
 2540      04EB
 2541 01ae 0228     	    cmp r0,#2 
 2542 01b0 7FF4FEAF 	    bne syntax_error 
 2543 01b4 5CF8041B 	    _POP r1
 2544 01b8 4FF00100 	    mov r0,#1
 2545 01bc 01F01F01 	    and r1,#31  
 2546 01c0 21B1     	1:  cbz r1, 2f
 2547 01c2 4FEA4000 	    lsl r0,#1
 2548 01c6 A1F10101 	    sub r1,#1
 2549 01ca F9E7     	    b 1b 
 2550 01cc 5CF8041B 	2:  _POP r1
 2551 01d0 0968     	    ldr r1,[r1]
 2552 01d2 01EA0001 	    and r1,r0 
 2553 01d6 09B1     	    cbz r1,9f 
 2554 01d8 4FF00101 	    mov r1,#1
 2555 01dc 4FF01B00 	9:  mov r0,#TK_INTGR    
 2556 01e0 7047     	    _RET 
 2557              	
 2558              	/********************************
 2559              	  BASIC: CLS 
 2560              	  clear terminal screen move cursor 
 2561              	  home 
 2562              	************************************/
 2563 01e2 00BF     	    _FUNC cls 
 2564 01e4 00B5FFF7 	    _CALL clear_screen
 2564      FEFF5DF8 
 2564      04EB
 2565 01ee 7047     	    _RET 
 2566              	
 2567              	/*********************************
 2568              	  BASIC: CHAR(expr)
 2569              	  convert expr in character 
 2570              	********************************/
 2571              	    _FUNC char
 2572 01f0 00B5FFF7 	    _CALL func_args
 2572      FEFF5DF8 
 2572      04EB
ARM GAS  tinyBasic.s 			page 71


 2573 01fa 0128     	    cmp r0,#1
 2574 01fc 7FF4FEAF 	    bne syntax_error 
 2575 0200 5CF8041B 	    _POP r1 
 2576 0204 01F07F01 	    and r1,#127 
 2577 0208 4FF01300 	    mov r0,#TK_CHAR
 2578 020c 7047     	    _RET 
 2579              	
 2580              	/**********************************
 2581              	  BASIC: CONST label=expr [,!label=expr]
 2582              	  define constants constants are 
 2583              	  store at end of BASIC code.
 2584              	  use:
 2585              	    T1   *location 
 2586              	    T2   *bound 
 2587              	*********************************/
 2588 020e 00BF     	    _FUNC const
 2589 0210 206C10F0 	    _RTO 
 2589      010F03D1 
 2589      4FF00700 
 2589      FFF7FEBF 
 2590 0220 D4F8D080 	    ldr T1,[UPP,#HERE]
 2591 0224 DFF80097 	    ldr T2,pad_adr  
 2592 0228 C845     	1:  cmp T1,T2 
 2593 022a 03D4     	    bmi 2f 
 2594 022c 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2595 0230 FFF7FEBF 	    b tb_error 
 2596 0234 00B5FFF7 	2:  _CALL next_token 
 2596      FEFF5DF8 
 2596      04EB
 2597 023e 1A28     	    cmp r0,#TK_LABEL 
 2598 0240 7FF4FEAF 	    bne syntax_error 
 2599 0244 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2600 0248 4CF8041D 	    _PUSH r1 
 2601 024c 4FF00D00 	    mov r0,#TK_EQUAL
 2602 0250 00B5FFF7 	    _CALL expect
 2602      FEFF5DF8 
 2602      04EB
 2603 025a 00B5FFF7 	    _CALL expression  
 2603      FEFF5DF8 
 2603      04EB
 2604 0264 1B28     	    cmp r0,#TK_INTGR
 2605 0266 7FF4FEAF 	    bne syntax_error
 2606 026a 5CF8040B 	    _POP r0 
 2607 026e 48F8040B 	    str r0,[T1],#4
 2608 0272 48F8041B 	    str r1,[T1],#4 
 2609 0276 C4F8D080 	    str T1,[UPP,#HERE]
 2610 027a 00B5FFF7 	    _CALL next_token
 2610      FEFF5DF8 
 2610      04EB
 2611 0284 0228     	    cmp r0,#TK_COMMA 
 2612 0286 CFD0     	    beq 1b 
 2613 0288 D4F800A0 	    _UNGET_TOKEN
 2613      D4F808B0 
 2614              	9:  
 2615 0290 7047     	    _RET 
 2616              	
 2617              	
ARM GAS  tinyBasic.s 			page 72


 2618              	/**************************
 2619              	  BASIC: DATALN expr 
 2620              	  set data pointer to line#
 2621              	  specified by expr. 
 2622              	  if line# not valid program 
 2623              	  end with error.
 2624              	  use:
 2625              	
 2626              	**************************/
 2627 0292 00BF     	    _FUNC data_line
 2628 0294 206C10F0 	    _RTO // run time only 
 2628      010F03D1 
 2628      4FF00700 
 2628      FFF7FEBF 
 2629 02a4 00B5FFF7 	    _CALL expression 
 2629      FEFF5DF8 
 2629      04EB
 2630 02ae 1B28     	    cmp r0,#TK_INTGR
 2631 02b0 7FF4FEAF 	    bne syntax_error
 2632 02b4 0846     	    mov r0,r1 
 2633 02b6 00B5FFF7 	    _CALL search_lineno
 2633      FEFF5DF8 
 2633      04EB
 2634 02c0 0029     	    cmp r1,#0
 2635 02c2 03D0     	    beq 1f 
 2636 02c4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2637 02c8 FFF7FEBF 	    b syntax_error 
 2638 02cc C178     	1:  ldrb r1,[r0,#3]
 2639 02ce 1729     	    cmp r1,#TK_CMD 
 2640 02d0 F8D1     	    bne 0b
 2641 02d2 0179     	    ldrb r1,[r0,#4]
 2642 02d4 0C29     	    cmp r1,#DATA_IDX 
 2643 02d6 F5D1     	    bne 0b  
 2644 02d8 E060     	    str r0,[UPP,#DATAPTR]
 2645 02da 8178     	    ldrb r1,[r0,#2]
 2646 02dc 6161     	    str r1,[UPP,#DATALEN]
 2647 02de 4FF00501 	    mov r1,#5 // position of first data item  
 2648 02e2 2161     	    str r1,[UPP,#DATA]
 2649 02e4 7047     	    _RET 
 2650              	
 2651              	/*****************************
 2652              	  BASIC: READ 
 2653              	  read next data item 
 2654              	  the value can be assigned to
 2655              	  variable or used in expression
 2656              	*****************************/
 2657 02e6 00BF     	    _FUNC read
 2658 02e8 206C10F0 	    _RTO
 2658      010F03D1 
 2658      4FF00700 
 2658      FFF7FEBF 
 2659 02f8 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2660 02fa E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2661 02fc 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2662 02fe 8242     	    cmp r2,r0
 2663 0300 0ED0     	    beq seek_next
 2664 0302 885C     	1:  ldrb r0,[r1,r2]
ARM GAS  tinyBasic.s 			page 73


 2665 0304 02F10102 	    add r2,#1
 2666 0308 0028     	    cmp r0,#TK_NONE
 2667 030a 09D0     	    beq seek_next
 2668 030c 0228     	    cmp r0,#TK_COMMA
 2669 030e F8D0     	    beq 1b  
 2670 0310 1B28     	    cmp r0,#TK_INTGR 
 2671 0312 7FF4FEAF 	    bne syntax_error  
 2672 0316 8958     	    ldr r1,[r1,r2]
 2673 0318 02F10402 	    add r2,#4
 2674 031c 2261     	    str r2,[UPP,#DATA]
 2675 031e 12E0     	    b 9f  
 2676              	seek_next: // is next line data ?
 2677 0320 8878     	    ldrb r0,[R1,#2]
 2678 0322 0144     	    add r1,r0 
 2679 0324 C878     	    ldrb r0,[R1,#3]
 2680 0326 1728     	    cmp r0,#TK_CMD
 2681 0328 09D1     	    bne 2f 
 2682 032a 0879     	    ldrb r0,[r1,#4]
 2683 032c 0C28     	    cmp r0,#DATA_IDX 
 2684 032e 06D1     	    bne 2f 
 2685 0330 E160     	    str r1,[UPP,#DATAPTR]
 2686 0332 8878     	    ldrb r0,[r1,#2]
 2687 0334 6061     	    str  r0,[UPP,#DATALEN]
 2688 0336 4FF00502 	    mov r2,#5 
 2689 033a 2261     	    str r2,[UPP,#DATA]
 2690 033c E1E7     	    b 1b 
 2691 033e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2692 0342 FFF7FEBF 	    b tb_error 
 2693 0346 7047     	9:  _RET 
 2694              	
 2695              	/********************************
 2696              	  BASIC: RESTORE 
 2697              	  seek first data line 
 2698              	********************************/
 2699              	    _FUNC restore
 2700 0348 206C10F0 	    _RTO 
 2700      010F03D1 
 2700      4FF00700 
 2700      FFF7FEBF 
 2701 0358 216B     	    ldr r1,[UPP,#TXTBGN]
 2702 035a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2703 035c 0FD0     	    beq no_data_line 
 2704 035e 0879     	    ldrb r0,[r1,#4]
 2705 0360 0C28     	    cmp r0,#DATA_IDX
 2706 0362 09D1     	    bne try_next_line
 2707 0364 C878     	    ldrb r0,[r1,#3]
 2708 0366 1728     	    cmp r0,#TK_CMD
 2709 0368 06D1     	    bne try_next_line
 2710              	// this a the first data line 
 2711 036a E160     	    str r1,[UPP,#DATAPTR]
 2712 036c 8878     	    ldrb r0,[r1,#2]
 2713 036e 6061     	    str r0,[UPP,#DATALEN]
 2714 0370 4FF00500 	    mov r0,#5 
 2715 0374 2061     	    str r0,[UPP,#DATA]
 2716 0376 07E0     	    b 9f
 2717              	try_next_line:
 2718 0378 8878     	    ldrb r0,[r1,#2]
ARM GAS  tinyBasic.s 			page 74


 2719 037a 0144     	    add r1,r0 
 2720 037c EDE7     	    b 1b 
 2721              	no_data_line:
 2722 037e 80EA0000 	    eor r0,r0 
 2723 0382 E060     	    str r0,[UPP,#DATAPTR]
 2724 0384 2061     	    str r0,[UPP,#DATA]
 2725 0386 6061     	    str r0,[UPP,#DATALEN]
 2726 0388 7047     	9:  _RET 
 2727              	
 2728              	/***********************************
 2729              	  BASIC: DEC 
 2730              	  switch base to decimal 
 2731              	***********************************/
 2732 038a 00BF     	    _FUNC dec_base
 2733 038c 4FF00A00 	    mov r0,#10
 2734 0390 A061     	    str r0,[UPP,#BASE]
 2735 0392 7047     	    _RET 
 2736              	
 2737              	/***************************************
 2738              	  BASIC: DO 
 2739              	  initialize a DO..UNTIL loop 
 2740              	***************************************/
 2741              	    _FUNC do_loop
 2742 0394 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2743 0398 7047     	    _RET 
 2744              	
 2745              	
 2746              	/****************************************
 2747              	  BASIC: DUMP adr, count 
 2748              	    command line only  
 2749              	    print memory content in hexadecimal 
 2750              	    16 bytes per row 
 2751              	    ouput:
 2752              	      none 
 2753              	    use:
 2754              	      r2   byte counter  
 2755              	****************************************/
 2756 039a 00BF     	    _FUNC dump 
 2757 039c 206C10F0 	    _CLO 
 2757      010F03D0 
 2757      4FF00700 
 2757      FFF7FEBF 
 2758 03ac 00B5FFF7 	    _CALL arg_list 
 2758      FEFF5DF8 
 2758      04EB
 2759 03b6 0228     	    cmp r0,#2
 2760 03b8 7FF4FEAF 	    bne syntax_error 
 2761 03bc 5CF8042B 	    _POP r2   // count 
 2762 03c0 5CF8040B 	    _POP  r0  // adr
 2763              	dump01:
 2764 03c4 00B500F0 	    _CALL print_dump_header 
 2764      0DF85DF8 
 2764      04EB
 2765 03ce 4FF01001 	1:  mov r1,#16
 2766 03d2 00B5FFF7 	    _CALL prt_row 
 2766      FEFF5DF8 
 2766      04EB
ARM GAS  tinyBasic.s 			page 75


 2767 03dc 103A     	    subs r2,#16 
 2768 03de F6D5     	    bpl 1b 
 2769 03e0 7047     	    _RET 
 2770              	
 2771              	/********************************
 2772              	   print_dump_header
 2773              	********************************/
 2774 03e2 00BF     	    _FUNC print_dump_header
 2775 03e4 2DE90103 	    push {r0,T1,T2}
 2776 03e8 4FF00C00 	    mov r0,#12 
 2777 03ec 00B5FFF7 	    _CALL cursor_x 
 2777      FEFF5DF8 
 2777      04EB
 2778 03f6 4FF00000 	    mov r0,#0
 2779 03fa 4FF01009 	    mov T2,#16
 2780 03fe 8046     	1:  mov T1,r0 
 2781 0400 00B5FFF7 	    _CALL print_hex 
 2781      FEFF5DF8 
 2781      04EB
 2782 040a 08F10100 	    add r0,T1,#1  
 2783 040e 4845     	    cmp r0,T2 
 2784 0410 F5D4     	    bmi 1b 
 2785 0412 00B5FFF7 	    _CALL cr
 2785      FEFF5DF8 
 2785      04EB
 2786 041c 4FF03D00 	    mov r0,#'='
 2787 0420 4FF04F08 	    mov T1,#79
 2788 0424 00B5FFF7 	2:  _CALL uart_putc
 2788      FEFF5DF8 
 2788      04EB
 2789 042e B8F10108 	    subs T1,#1 
 2790 0432 F7D1     	    bne 2b     
 2791 0434 00B5FFF7 	    _CALL cr
 2791      FEFF5DF8 
 2791      04EB
 2792 043e BDE80103 	    pop {r0,T1,T2}
 2793 0442 7047     	    _RET 
 2794              	
 2795              	
 2796              	/*******************************
 2797              	  BASIC: END 
 2798              	  exit program 
 2799              	******************************/ 
 2800              	    _FUNC cmd_end
 2801 0444 FFF7FEBF 	    b warm_start 
 2802 0448 7047     	    _RET 
 2803              	
 2804              	/*******************************************
 2805              	  BASIC: STORE adr, value 
 2806              	  write value to user space in flash memory 
 2807              	*********************************************/
 2808 044a 00BF     	    _FUNC store 
 2809 044c 00B5FFF7 	    _CALL arg_list 
 2809      FEFF5DF8 
 2809      04EB
 2810 0456 0228     	    cmp r0,#2 
 2811 0458 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 76


 2812 045c BCE80300 	    ldmia DP!,{r0,r1}
 2813 0460 DFF83020 	    ldr r2,user_space
 2814 0464 9142     	    cmp r1,r2 
 2815 0466 03D5     	    bpl 1f 
 2816 0468 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2817 046c FFF7FEBF 	    b tb_error 
 2818 0470 02F58062 	1:  add r2,#1024 
 2819 0474 9142     	    cmp r1,r2 
 2820 0476 F7D5     	    bpl 0b 
 2821 0478 00B5FFF7 	    _CALL flash_store 
 2821      FEFF5DF8 
 2821      04EB
 2822 0482 7047     	    _RET 
 2823              	
 2824              	/**************************************************
 2825              	  BASIC: ERASE 
 2826              	  erase user space page 
 2827              	*************************************************/
 2828              	    _FUNC erase 
 2829 0484 DFF80C00 	    ldr r0,user_space 
 2830 0488 00B5FFF7 	    _CALL erase_page 
 2830      FEFF5DF8 
 2830      04EB
 2831 0492 7047     	    _RET 
 2832 0494 00000000 	user_space: .word user 
 2833              	
 2834              	
 2835              	/**************************************************
 2836              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2837              	  introdure FOR...NEXT loop 
 2838              	**************************************************/
 2839              	    _FUNC for
 2840 0498 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2841 049c 4FF00107 	    mov INCR,#1
 2842 04a0 00B5FFF7 	    _CALL next_token
 2842      FEFF5DF8 
 2842      04EB
 2843 04aa 1428     	    cmp r0,#TK_VAR
 2844 04ac 7FF4FEAF 	    bne syntax_error
 2845 04b0 02B4     	    push {r1} 
 2846 04b2 00B500F0 	    _CALL let_var 
 2846      25F95DF8 
 2846      04EB
 2847 04bc 20BC     	    pop {VADR}
 2848 04be 4FEA8505 	    lsl VADR,#2
 2849 04c2 2544     	    add VADR,UPP 
 2850 04c4 05F16005 	    add VADR,#VARS 
 2851 04c8 7047     	    _RET 
 2852              	
 2853              	/***************************************
 2854              	  BASIC: TO expr 
 2855              	  set limit of FOR...NEXT loop 
 2856              	**************************************/
 2857 04ca 00BF     	    _FUNC to
 2858 04cc 00B5FFF7 	    _CALL expression 
 2858      FEFF5DF8 
 2858      04EB
ARM GAS  tinyBasic.s 			page 77


 2859 04d6 1B28     	    cmp r0,#TK_INTGR
 2860 04d8 7FF4FEAF 	    bne syntax_error 
 2861 04dc 0E46     	    mov LIMIT,r1
 2862              	    // save loop back parameters 
 2863 04de 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2864 04e2 7047     	    _RET 
 2865              	
 2866              	/********************************************
 2867              	  BASIC: STEP expr 
 2868              	  set increment for FOR...NEXT loop 
 2869              	********************************************/
 2870              	    _FUNC step
 2871 04e4 00B5FFF7 	    _CALL expression 
 2871      FEFF5DF8 
 2871      04EB
 2872 04ee 1B28     	    cmp r0,#TK_INTGR
 2873 04f0 7FF4FEAF 	    bne syntax_error 
 2874 04f4 0F46     	    mov INCR,r1
 2875              	    // replace parameters left by TO
 2876 04f6 8CE8000C 	    stmia DP, {IN,BPTR}
 2877 04fa 7047     	    _RET 
 2878              	
 2879              	/********************************************
 2880              	  BASIC: NEXT var 
 2881              	  incrment FOR...NEXT loop variable
 2882              	  exit if variable cross LIMIT 
 2883              	********************************************/
 2884              	    _FUNC next
 2885 04fc 00B5FFF7 	    _CALL next_token 
 2885      FEFF5DF8 
 2885      04EB
 2886 0506 1428     	    cmp r0,#TK_VAR 
 2887 0508 7FF4FEAF 	    bne syntax_error 
 2888 050c 4FEA8101 	    lsl r1,#2 
 2889 0510 2144     	    add r1,UPP 
 2890 0512 01F16001 	    add r1,#VARS 
 2891 0516 A942     	    cmp r1,VADR
 2892 0518 7FF4FEAF 	    bne syntax_error 
 2893 051c 2868     	    ldr r0,[VADR]
 2894 051e 3844     	    add r0,INCR 
 2895 0520 2860     	    str r0,[VADR]
 2896 0522 002F     	    cmp INCR,#0
 2897 0524 02D4     	    bmi 2f
 2898 0526 B042     	    cmp r0,LIMIT 
 2899 0528 02DC     	    bgt 8f  
 2900 052a 07E0     	    b 9f  
 2901 052c B042     	2:  cmp r0,LIMIT 
 2902 052e 05DA     	    bge 9f  
 2903              	8: // exit for...next
 2904              	  //  drop branch parameters
 2905 0530 4FF00800 	    _DROP 2
 2905      8444
 2906              	  // restore outer loop parameters
 2907 0536 BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2908 053a 7047     	    _RET 
 2909 053c 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2910 0540 9BF80200 	    ldrb r0,[BPTR,#2]
ARM GAS  tinyBasic.s 			page 78


 2911 0544 6060     	    str r0,[UPP,#COUNT]
 2912 0546 00B5FFF7 	    _CALL show_trace 
 2912      FEFF5DF8 
 2912      04EB
 2913 0550 7047     	    _RET 
 2914              	
 2915              	
 2916              	/*********************************
 2917              	  BASIC: GOSUB expr 
 2918              	  call a subroutine at line# 
 2919              	*********************************/
 2920 0552 00BF     	    _FUNC gosub
 2921 0554 00B5FFF7 	    _CALL search_target 
 2921      FEFF5DF8 
 2921      04EB
 2922 055e 2DE9000C 	    push {IN,BPTR}
 2923              	target:
 2924 0562 8346     	    mov BPTR,r0 
 2925 0564 4FF0030A 	    mov IN,#3 
 2926 0568 9BF80200 	    ldrb r0,[BPTR,#2]
 2927 056c 6060     	    str r0,[UPP,#COUNT]
 2928 056e 00B5FFF7 	    _CALL show_trace 
 2928      FEFF5DF8 
 2928      04EB
 2929 0578 7047     	    _RET 
 2930              	
 2931              	/**********************************
 2932              	  BASIC: RETURN 
 2933              	  leave a subroutine 
 2934              	*********************************/
 2935 057a 00BF     	    _FUNC return 
 2936 057c BDE8000C 	    pop {IN,BPTR}
 2937 0580 9BF80200 	    ldrb r0,[BPTR,#2]
 2938 0584 6060     	    str r0,[UPP,#COUNT]
 2939 0586 00B5FFF7 	    _CALL show_trace 
 2939      FEFF5DF8 
 2939      04EB
 2940 0590 7047     	    _RET 
 2941              	
 2942              	/**********************************
 2943              	  BASIC: GOTO expr 
 2944              	  go to line # | label 
 2945              	**********************************/
 2946 0592 00BF     	    _FUNC goto
 2947 0594 00B5FFF7 	    _CALL search_target 
 2947      FEFF5DF8 
 2947      04EB
 2948 059e E0E7     	    b target  
 2949              	
 2950              	/***************************************
 2951              	  BASIC: HEX 
 2952              	  set numeric base to hexadecimal 
 2953              	***************************************/
 2954              	    _FUNC hex_base
 2955 05a0 4FF01000 	    mov r0,#16 
 2956 05a4 A061     	    str r0,[UPP,#BASE]
 2957 05a6 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 79


 2958              	
 2959              	/**********************************************
 2960              	  BASIC: IF relation THEN statement
 2961              	  execute statement only if relation is true
 2962              	*********************************************/
 2963              	    _FUNC if
 2964 05a8 00B5FFF7 	    _CALL relation 
 2964      FEFF5DF8 
 2964      04EB
 2965 05b2 09B9     	    cbnz r1,9f 
 2966 05b4 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2967 05b8 7047     	9:  _RET 
 2968              	
 2969              	/*******************************************************
 2970              	  BASIC: THEN statement
 2971              	  statements following THEN are executed if relation is !=0
 2972              	  optional, retained for compatibility.
 2973              	******************************************************/
 2974 05ba 00BF     	    _FUNC then 
 2975              	// do nothing 
 2976 05bc 7047     	    _RET
 2977              	
 2978              	/****************************************
 2979              	  BASIC: INPUT [string]var [,[string]var]+
 2980              	  prompt user for variable value
 2981              	***************************************/
 2982 05be 00BF     	     _FUNC input_var
 2983 05c0 2DE90401 	    push {r2,T1}
 2984 05c4 00B5FFF7 	1:  _CALL next_token 
 2984      FEFF5DF8 
 2984      04EB
 2985 05ce 0228     	    cmp r0,#2
 2986 05d0 67D4     	    bmi 8f 
 2987 05d2 1C28     	    cmp r0,#TK_QSTR 
 2988 05d4 12D1     	    bne 2f 
 2989 05d6 0846     	    mov r0,r1
 2990 05d8 DFF8D810 	    ldr r1,str_buffer
 2991 05dc 00B5FFF7 	    _CALL strcpy
 2991      FEFF5DF8 
 2991      04EB
 2992 05e6 4FF01400 	    mov r0,#TK_VAR   
 2993 05ea 00B5FFF7 	    _CALL expect 
 2993      FEFF5DF8 
 2993      04EB
 2994 05f4 8846     	    mov T1,r1 
 2995 05f6 DFF8BC00 	    ldr r0,str_buffer 
 2996 05fa 08E0     	    b 3f 
 2997 05fc 1428     	2:  cmp r0,#TK_VAR 
 2998 05fe 7FF4FEAF 	    bne syntax_error     
 2999 0602 8846     	    mov T1,r1 
 3000 0604 01F14100 	    add r0,r1,#'A' 
 3001 0608 2A49     	    ldr r1,str_buffer
 3002 060a 0880     	    strh r0,[r1]
 3003 060c 0846     	    mov r0,r1 
 3004 060e 00B5FFF7 	3:  _CALL uart_puts  
 3004      FEFF5DF8 
 3004      04EB
ARM GAS  tinyBasic.s 			page 80


 3005 0618 4FF03D00 	    mov r0,#'='
 3006 061c 00B5FFF7 	    _CALL uart_putc
 3006      FEFF5DF8 
 3006      04EB
 3007 0626 DFF88800 	    ldr r0,input_buffer
 3008 062a 4FF02201 	    mov r1,#34 
 3009 062e 00B5FFF7 	    _CALL readln
 3009      FEFF5DF8 
 3009      04EB
 3010 0638 31B3     	    cbz r1,6f
 3011 063a 0178     	    ldrb r1,[r0]
 3012 063c 01B4     	    push {r0}
 3013 063e 0846     	    mov r0,r1
 3014 0640 00B5FFF7 	    _CALL is_letter 
 3014      FEFF5DF8 
 3014      04EB
 3015 064a 01BC     	    pop {r0}
 3016 064c 02D1     	    bne 3f 
 3017 064e 01F05F01 	    and r1,#0x5f // uppercase  
 3018 0652 19E0     	    b 6f 
 3019 0654 2429     	3:  cmp r1,#'$'
 3020 0656 04D1     	    bne 3f 
 3021 0658 4FF01001 	    mov r1,#16
 3022 065c 00F10100 	    add r0,#1  
 3023 0660 08E0     	    b 5f 
 3024 0662 2629     	3:  cmp r1,#'&' 
 3025 0664 04D1     	    bne 4f 
 3026 0666 4FF00201 	    mov r1,#2
 3027 066a 00F10100 	    add r0,#1 
 3028 066e 01E0     	    b 5f 
 3029 0670 4FF00A01 	4:  mov r1,#10 
 3030 0674 00B5FFF7 	5:  _CALL atoi 
 3030      FEFF5DF8 
 3030      04EB
 3031 067e 18B9     	    cbnz r0,6f
 3032 0680 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3033 0684 FFF7FEBF 	    b tb_error
 3034 0688 4046     	6:  mov r0,T1 
 3035 068a 00B5FFF7 	    _CALL set_var
 3035      FEFF5DF8 
 3035      04EB
 3036 0694 00B5FFF7 	    _CALL next_token
 3036      FEFF5DF8 
 3036      04EB
 3037 069e 0228     	    cmp r0,#TK_COMMA 
 3038 06a0 90D0     	    beq 1b 
 3039 06a2 D4F800A0 	8:  _UNGET_TOKEN          
 3039      D4F808B0 
 3040 06aa BDE80401 	9:  pop {r2,T1}       
 3041 06ae 7047     	    _RET 
 3042 06b0 00000000 	input_buffer: .word _tib 
 3043 06b4 00000000 	str_buffer: .word _pad 
 3044              	
 3045              	
 3046              	/*****************************************
 3047              	  BASIC: INVERT(expr)
 3048              	  return 1's complement of expr
ARM GAS  tinyBasic.s 			page 81


 3049              	****************************************/
 3050              	    _FUNC invert
 3051 06b8 00B5FFF7 	    _CALL func_args
 3051      FEFF5DF8 
 3051      04EB
 3052 06c2 0128     	    cmp r0,#1 
 3053 06c4 7FF4FEAF 	    bne syntax_error
 3054 06c8 5CF8041B 	    _POP r1  
 3055 06cc 6FEA0101 	    mvn r1,r1
 3056 06d0 4FF01B00 	    mov r0,#TK_INTGR
 3057 06d4 7047     	    _RET 
 3058              	
 3059              	/*************************************
 3060              	  BASIC: KEY 
 3061              	  wait for a character from console
 3062              	*************************************/
 3063 06d6 00BF     	    _FUNC key
 3064 06d8 00B5FFF7 	    _CALL uart_getc
 3064      FEFF5DF8 
 3064      04EB
 3065 06e2 0146     	    mov r1,r0
 3066 06e4 4FF01300 	    mov r0,#TK_CHAR 
 3067 06e8 7047     	    _RET  
 3068              	
 3069              	/******************************
 3070              	  BASIC: [LET] var=expr 
 3071              	         [LET] @(expr)=expr
 3072              	  input:
 3073              	    none 
 3074              	  output:
 3075              	    none 
 3076              	  use:
 3077              	
 3078              	****************************/         
 3079 06ea 00BF     	    _FUNC let
 3080 06ec 00B5FFF7 	    _CALL next_token 
 3080      FEFF5DF8 
 3080      04EB
 3081 06f6 1428     	    cmp r0,#TK_VAR
 3082 06f8 03D0     	    beq let_var 
 3083 06fa 0C28     	    cmp r0,#TK_ARRAY 
 3084 06fc 07D0     	    beq let_array 
 3085 06fe FFF7FEBF 	    b syntax_error 
 3086              	let_var:
 3087 0702 4FEA8101 	    lsl r1,#2
 3088 0706 04F16000 	    add r0,UPP,#VARS
 3089 070a 0844     	    add r0,r1
 3090 070c 1FE0     	    b 1f 
 3091              	let_array: 
 3092 070e 4FF00500 	    mov r0,#TK_LPAREN
 3093 0712 00B5FFF7 	    _CALL expect 
 3093      FEFF5DF8 
 3093      04EB
 3094 071c 00B5FFF7 	    _CALL expression
 3094      FEFF5DF8 
 3094      04EB
 3095 0726 1B28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 82


 3096 0728 7FF4FEAF 	    bne syntax_error
 3097 072c 4CF8041D 	    _PUSH r1 
 3098 0730 4FF00600 	    mov r0,#TK_RPAREN
 3099 0734 00B5FFF7 	    _CALL expect 
 3099      FEFF5DF8 
 3099      04EB
 3100 073e 5CF8041B 	    _POP r1 
 3101 0742 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3102 0746 4FEA8101 	    lsl r1,#2 
 3103 074a A0EB0100 	    sub r0,r1 
 3104 074e 4CF8040D 	1:  _PUSH r0 
 3105 0752 4FF00D00 	    mov r0,#TK_EQUAL 
 3106 0756 00B5FFF7 	    _CALL expect 
 3106      FEFF5DF8 
 3106      04EB
 3107 0760 00B5FFF7 	    _CALL expression   
 3107      FEFF5DF8 
 3107      04EB
 3108 076a 1B28     	    cmp r0,#TK_INTGR
 3109 076c 7FF4FEAF 	    bne syntax_error   
 3110 0770 5CF8040B 	2:  _POP r0 
 3111 0774 0160     	    str r1,[r0]
 3112 0776 7047     	    _RET  
 3113              	
 3114              	/***************************************
 3115              	  BASIC: LIST [[first]-last]
 3116              	  use:
 3117              	    r2   first line# 
 3118              	    r3   last line#
 3119              	    T1   *line 
 3120              	    T2   TXTEND 
 3121              	**************************************/  
 3122              	    _FUNC list
 3123 0778 206C10F0 	    _CLO
 3123      010F03D0 
 3123      4FF00700 
 3123      FFF7FEBF 
 3124 0788 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3125 078c D4F83490 	    ldr T2,[UPP,#TXTEND]
 3126 0790 B8F80020 	    ldrh r2,[T1]
 3127 0794 4FF6FF73 	    mov r3,#65535 
 3128 0798 00B5FFF7 	    _CALL next_token 
 3128      FEFF5DF8 
 3128      04EB
 3129 07a2 10B3     	    cbz r0,6f 
 3130 07a4 1B28     	    cmp r0,#TK_INTGR
 3131 07a6 09D1     	    bne 1f 
 3132 07a8 0A46     	    mov r2,r1 // first line
 3133 07aa 00B5FFF7 	    _CALL next_token
 3133      FEFF5DF8 
 3133      04EB
 3134 07b4 0028     	    cmp r0,#TK_NONE 
 3135 07b6 01D1     	    bne 1f 
 3136 07b8 1346     	    mov r3,r2 
 3137 07ba 0CE0     	    b 4f 
 3138 07bc 0828     	1:  cmp r0,#TK_MINUS 
 3139 07be 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 83


 3140 07c2 00B5FFF7 	    _CALL next_token 
 3140      FEFF5DF8 
 3140      04EB
 3141 07cc 18B1     	    cbz r0,4f 
 3142 07ce 1B28     	    cmp r0,#TK_INTGR
 3143 07d0 7FF4FEAF 	    bne syntax_error  
 3144 07d4 0B46     	    mov r3,r1 
 3145              	4:  // skip lines below r2 
 3146 07d6 B8F80000 	    ldrh r0,[T1]
 3147 07da 9042     	    cmp r0,r2 
 3148 07dc 05D5     	    bpl 6f 
 3149 07de 98F80200 	    ldrb r0,[T1,#2]
 3150 07e2 8044     	    add T1,r0
 3151 07e4 C845     	    cmp T1,T2 
 3152 07e6 F6D4     	    bmi 4b
 3153 07e8 1AE0     	    b 9f 
 3154 07ea C845     	6:  cmp T1,T2  
 3155 07ec 18D5     	    bpl 9f
 3156 07ee 4046     	    mov r0,T1   
 3157 07f0 DFF83010 	    ldr r1,out_buff 
 3158 07f4 00B5FFF7 	    _CALL decompile_line 
 3158      FEFF5DF8 
 3158      04EB
 3159 07fe 00B5FFF7 	    _CALL uart_puts 
 3159      FEFF5DF8 
 3159      04EB
 3160 0808 00B5FFF7 	    _CALL cr 
 3160      FEFF5DF8 
 3160      04EB
 3161 0812 98F80200 	    ldrb r0,[T1,#2]
 3162 0816 8044     	    add T1,r0
 3163 0818 B8F80000 	    ldrh r0,[T1]
 3164 081c 9842     	    cmp r0,r3 
 3165 081e E4DD     	    ble 6b 
 3166 0820 FFF7FEBF 	9:  b warm_start 
 3167 0824 00000000 	out_buff: .word _tib 
 3168              	
 3169              	/********************************
 3170              	  BASIC: LOCATE line,col
 3171              	  return log base 2 of expr 
 3172              	********************************/
 3173              	    _FUNC locate
 3174 0828 00B5FFF7 	    _CALL arg_list 
 3174      FEFF5DF8 
 3174      04EB
 3175 0832 0228     	    cmp r0,#2 
 3176 0834 7FF4FEAF 	    bne syntax_error
 3177 0838 5CF8041B 	    _POP r1
 3178 083c 5CF8040B 	    _POP r0  
 3179 0840 00B5FFF7 	    _CALL set_curpos 
 3179      FEFF5DF8 
 3179      04EB
 3180 084a 7047     	    _RET 
 3181              	
 3182              	
 3183              	/****************************************
 3184              	  BASIC: LSHIFT(expr1,expr2)
ARM GAS  tinyBasic.s 			page 84


 3185              	  shift right expr1 of expr2 bits 
 3186              	****************************************/
 3187              	    _FUNC lshift
 3188 084c 00B5FFF7 	    _CALL func_args
 3188      FEFF5DF8 
 3188      04EB
 3189 0856 0228     	    cmp r0,#2
 3190 0858 7FF4FEAF 	    bne syntax_error 
 3191 085c BCE80300 	    ldmia DP!,{r0,r1}
 3192 0860 01FA00F1 	    lsl r1,r0 
 3193 0864 4FF01B00 	    mov r0,#TK_INTGR
 3194 0868 7047     	    _RET 
 3195              	
 3196              	/***********************************
 3197              	  BASIC: NEW 
 3198              	  delete existing program in memory
 3199              	  and clear variables and RAM 
 3200              	***********************************/
 3201 086a 00BF     	    _FUNC new
 3202 086c 206C10F0 	    _CLO 
 3202      010F03D0 
 3202      4FF00700 
 3202      FFF7FEBF 
 3203 087c 00B5FFF7 	    _CALL clear_basic 
 3203      FEFF5DF8 
 3203      04EB
 3204 0886 FFF7FEBF 	    b warm_start   
 3205              	
 3206              	/************************************
 3207              	  BASIC: NOT relation  
 3208              	  invert logical value or relation
 3209              	************************************/
 3210 088a 00BF     	      _FUNC func_not
 3211 088c 00B5FFF7 	      _CALL relation 
 3211      FEFF5DF8 
 3211      04EB
 3212 0896 11B1     	      cbz r1,8f 
 3213 0898 81EA0101 	      eor r1,r1
 3214 089c 01E0     	      b 9f 
 3215 089e 4FF0FF31 	  8:  mov r1,#-1
 3216 08a2 7047     	  9:  _RET 
 3217              	
 3218              	/******************************************
 3219              	  BASIC: OR(expr1,expr2)
 3220              	  binary OR between 2 expressions
 3221              	******************************************/
 3222              	    _FUNC bit_or
 3223 08a4 00B5FFF7 	    _CALL func_args
 3223      FEFF5DF8 
 3223      04EB
 3224 08ae 0228     	    cmp r0,#2
 3225 08b0 7FF4FEAF 	    bne syntax_error
 3226 08b4 5CF8040B 	    _POP r0 
 3227 08b8 5CF8041B 	    _POP r1
 3228 08bc 41EA0001 	    orr r1,r0 
 3229 08c0 4FF01B00 	    mov r0,#TK_INTGR
 3230 08c4 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 85


 3231              	
 3232              	/****************************************
 3233              	  BASIC: IN(gpio,pin) 
 3234              	  read gpio_idr selected pin  
 3235              	***************************************/
 3236 08c6 00BF     	    _FUNC pin_input 
 3237 08c8 00B5FFF7 	    _CALL func_args 
 3237      FEFF5DF8 
 3237      04EB
 3238 08d2 0228     	    cmp r0,#2 
 3239 08d4 7FF4FEAF 	    bne syntax_error  
 3240 08d8 BCE80300 	    ldmia DP!,{r0,r1}
 3241 08dc 4FF00802 	    mov r2,#GPIO_IDR 
 3242 08e0 8A58     	    ldr r2,[r1,r2]
 3243 08e2 00F00F00 	    and r0,#15 
 3244 08e6 22FA00F2 	    lsr r2,r0 
 3245 08ea 02F00101 	    and r1,r2,#1 
 3246 08ee 4FF01B00 	    mov r0,#TK_INTGR
 3247 08f2 7047     	    _RET 
 3248              	
 3249              	
 3250              	/****************************************
 3251              	  BASIC: OUT gpio,pin,value 
 3252              	   output to gpio_odr
 3253              	***************************************/
 3254              	    _FUNC out
 3255 08f4 00B5FFF7 	    _CALL arg_list 
 3255      FEFF5DF8 
 3255      04EB
 3256 08fe 0328     	    cmp r0,#3 
 3257 0900 7FF4FEAF 	    bne syntax_error 
 3258 0904 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3259 0908 4FF01003 	    mov r3,#GPIO_BSRR
 3260 090c 08B9     	    cbnz r0,1f 
 3261 090e 01F11001 	    add r1,#16 
 3262 0912 4FF00100 	1:  mov r0,#1 
 3263 0916 00FA01F0 	    lsl r0,r1 
 3264 091a D050     	    str r0,[r2,r3]    
 3265 091c 7047     	    _RET 
 3266              	
 3267              	
 3268              	/****************************************
 3269              	  BASIC: PAD 
 3270              	  return pad buffer address 
 3271              	****************************************/
 3272 091e 00BF     	    _FUNC pad_ref
 3273 0920 0149     	    ldr r1,pad_adr  
 3274 0922 4FF01B00 	    mov r0,#TK_INTGR 
 3275 0926 7047     	    _RET 
 3276 0928 00000000 	pad_adr: .word _pad 
 3277              	
 3278              	/***********************
 3279              	  BASIC: PAUSE expr 
 3280              	  suspend execution for 
 3281              	  expr milliseconds 
 3282              	************************/
 3283              	    _FUNC pause
ARM GAS  tinyBasic.s 			page 86


 3284 092c 00B5FFF7 	    _CALL expression 
 3284      FEFF5DF8 
 3284      04EB
 3285 0936 1B28     	    cmp r0,#TK_INTGR 
 3286 0938 7FF4FEAF 	    bne syntax_error 
 3287 093c E069     	    ldr r0,[UPP,#TICKS]
 3288 093e 0844     	    add r0,r1 
 3289 0940 E169     	1:  ldr r1,[UPP,#TICKS]
 3290 0942 8842     	    cmp r0,r1 
 3291 0944 FCD1     	    bne 1b     
 3292 0946 7047     	    _RET 
 3293              	
 3294              	/***************************************************
 3295              	  BASIC: PMODE \c,pin,mode[,opt] 
 3296              	  configure a digital pin for input|output
 3297              	  paramters:
 3298              	    \c    port letter
 3299              	    pin   pin {0..15} 
 3300              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3301              	    for input mode:
 3302              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3303              	    for output mode:
 3304              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3305              	  use:
 3306              	    r2  opt
 3307              	    r3  mode 
 3308              	    T1  pin  
 3309              	    T2  port      
 3310              	***************************************************/
 3311              	      _FUNC pin_mode
 3312 0948 4FF01300 	      mov r0,#TK_CHAR 
 3313 094c 00B5FFF7 	      _CALL expect
 3313      FEFF5DF8 
 3313      04EB
 3314 0956 0846     	      mov r0,r1 
 3315 0958 00B5FFF7 	      _CALL upper 
 3315      FEFF5DF8 
 3315      04EB
 3316 0962 A0F14109 	      sub T2,r0,#'A'
 3317 0966 4FF00200 	      mov r0,#TK_COMMA
 3318 096a 00B5FFF7 	      _CALL expect 
 3318      FEFF5DF8 
 3318      04EB
 3319 0974 00B5FFF7 	      _CALL arg_list
 3319      FEFF5DF8 
 3319      04EB
 3320 097e 0228     	      cmp r0,#2 
 3321 0980 3FF5FEAF 	      bmi syntax_error
 3322 0984 0428     	      cmp r0,#4
 3323 0986 01D4     	      bmi 1f 
 3324 0988 FFF7FEBF 	      b syntax_error
 3325 098c 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3326 0990 0228     	      cmp r0,#2
 3327 0992 02D0     	      beq 2f 
 3328              	// 3 parameters, pin,mode,opt  
 3329 0994 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3330 0998 01E0     	    b 4f  
ARM GAS  tinyBasic.s 			page 87


 3331              	2: // 2 parameters, pin,mode 
 3332 099a BCE80801 	    ldmia DP!,{r3,T1}
 3333 099e 4FF48060 	4:  mov r0,#0x400 
 3334 09a2 00FB09F9 	    mul T2,r0 
 3335 09a6 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3335      C4F20100 
 3336 09ae 8144     	    add T2,r0 // port base address 
 3337              	// if input mode set pull in ODR 
 3338 09b0 83B9     	    cbnz r3,2f 
 3339 09b2 022A     	    cmp r2,#2
 3340 09b4 0ED4     	    bmi 2f 
 3341 09b6 4FF00100 	    mov r0,#1 
 3342 09ba 4146     	    mov r1,T1 
 3343 09bc 032A     	    cmp r2,#3 
 3344 09be 01D0     	    beq 1f
 3345 09c0 01F11001 	    add r1,#16 //reset bit 
 3346 09c4 00FA01F0 	1:  lsl r0,r1
 3347 09c8 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3348 09cc 032A     	    cmp r2,#3 
 3349 09ce 01D4     	    bmi 2f 
 3350 09d0 A2F10102 	    sub r2,#1
 3351              	2: // set CNF|MODE bits GPIO_CRx 
 3352 09d4 B8F1080F 	    cmp T1,#8 
 3353 09d8 03D4     	    bmi 3f 
 3354 09da A8F10808 	    sub T1,#8 
 3355 09de 09F10409 	    add T2,#4 //CRH 
 3356 09e2 4FF00F00 	3:  mov r0,#15   
 3357 09e6 4FEA8801 	    lsl r1,T1,#2 
 3358 09ea 00FA01F0 	    lsl r0,r1
 3359 09ee 6FEA0000 	    mvn r0,r0 // bitmask 
 3360 09f2 D9F80010 	    ldr r1,[T2]
 3361 09f6 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3362              	// combine opt|mode     
 3363 09fa 4FEA8200 	    lsl r0,r2,#2 
 3364 09fe 40EA0300 	    orr r0,r3 // OPT|MODE 
 3365 0a02 4FEA8803 	    lsl r3,T1,#2 
 3366 0a06 00FA03F0 	    lsl r0,r3
 3367 0a0a 41EA0001 	    orr r1,r0   
 3368 0a0e C9F80010 	    str r1,[T2] // mode and option set
 3369 0a12 7047     	    _RET 
 3370              	
 3371              	
 3372              	/*****************************************
 3373              	  BASIC: PEEK8 (expr)  
 3374              	  return byte value at address 
 3375              	*****************************************/
 3376              	    _FUNC peek8
 3377 0a14 00B5FFF7 	    _CALL func_args  
 3377      FEFF5DF8 
 3377      04EB
 3378 0a1e 0128     	    cmp r0,#1
 3379 0a20 3FF5FEAF 	    bmi syntax_error
 3380 0a24 5CF8041B 	    _POP r1 
 3381 0a28 0978     	    ldrb r1,[r1]
 3382 0a2a 4FF01B00 	    mov r0,#TK_INTGR     
 3383 0a2e 7047     	    _RET 
 3384              	
ARM GAS  tinyBasic.s 			page 88


 3385              	/*****************************************
 3386              	  BASIC: PEEK16 (expr)  
 3387              	  return byte value at address 
 3388              	*****************************************/
 3389              	    _FUNC peek16
 3390 0a30 00B5FFF7 	    _CALL func_args  
 3390      FEFF5DF8 
 3390      04EB
 3391 0a3a 0128     	    cmp r0,#1
 3392 0a3c 3FF5FEAF 	    bmi syntax_error
 3393 0a40 5CF8041B 	    _POP r1 
 3394 0a44 0988     	    ldrh r1,[r1]
 3395 0a46 4FF01B00 	    mov r0,#TK_INTGR     
 3396 0a4a 7047     	    _RET 
 3397              	
 3398              	/*****************************************
 3399              	  BASIC: PEEK32 (expr)  
 3400              	  return byte value at address 
 3401              	*****************************************/
 3402              	    _FUNC peek32
 3403 0a4c 00B5FFF7 	    _CALL func_args  
 3403      FEFF5DF8 
 3403      04EB
 3404 0a56 0128     	    cmp r0,#1
 3405 0a58 3FF5FEAF 	    bmi syntax_error
 3406 0a5c 5CF8041B 	    _POP r1 
 3407 0a60 0968     	    ldr r1,[r1]
 3408 0a62 4FF01B00 	    mov r0,#TK_INTGR     
 3409 0a66 7047     	    _RET 
 3410              	
 3411              	
 3412              	/**********************************
 3413              	  BASIC: POKE8 addr,byte
 3414              	  store byte at addr   
 3415              	**********************************/
 3416              	    _FUNC poke8
 3417 0a68 00B5FFF7 	    _CALL arg_list
 3417      FEFF5DF8 
 3417      04EB
 3418 0a72 0228     	    cmp r0,#2 
 3419 0a74 7FF4FEAF 	    bne syntax_error
 3420 0a78 BCE80300 	    ldmia DP!,{r0,r1} 
 3421 0a7c 0870     	    strb r0,[r1]
 3422 0a7e 7047     	    _RET 
 3423              	
 3424              	/**********************************
 3425              	  BASIC: POKE16 addr,hword
 3426              	  store hword at addr   
 3427              	**********************************/
 3428              	    _FUNC poke16
 3429 0a80 00B5FFF7 	    _CALL arg_list
 3429      FEFF5DF8 
 3429      04EB
 3430 0a8a 0228     	    cmp r0,#2 
 3431 0a8c 7FF4FEAF 	    bne syntax_error
 3432 0a90 BCE80300 	    ldmia DP!,{r0,r1} 
 3433 0a94 0880     	    strh r0,[r1]
ARM GAS  tinyBasic.s 			page 89


 3434 0a96 7047     	    _RET 
 3435              	
 3436              	/**********************************
 3437              	  BASIC: POKE32 addr,word
 3438              	  store word at addr   
 3439              	**********************************/
 3440              	    _FUNC poke32
 3441 0a98 00B5FFF7 	    _CALL arg_list 
 3441      FEFF5DF8 
 3441      04EB
 3442 0aa2 0228     	    cmp r0,#2 
 3443 0aa4 7FF4FEAF 	    bne syntax_error
 3444 0aa8 BCE80300 	    ldmia DP!,{r0,r1} 
 3445 0aac 0860     	    str r0,[r1]
 3446 0aae 7047     	    _RET 
 3447              	
 3448              	
 3449              	
 3450              	/****************************
 3451              	  BASIC: PRINT|? arg_list 
 3452              	  print list of arguments 
 3453              	****************************/
 3454              	    _FUNC print
 3455 0ab0 206C     	    ldr r0,[UPP,#FLAGS]
 3456 0ab2 40F08000 	    orr r0,#FPRINT 
 3457 0ab6 2064     	    str r0,[UPP,#FLAGS]
 3458 0ab8 88EA0808 	    eor T1,T1 
 3459 0abc 00B5FFF7 	0:  _CALL expression
 3459      FEFF5DF8 
 3459      04EB
 3460 0ac6 1B28     	    cmp r0,#TK_INTGR
 3461 0ac8 07D1     	    bne 1f 
 3462 0aca 0846     	    mov r0,r1
 3463 0acc A169     	    ldr r1,[UPP,#BASE]
 3464 0ace 00B5FFF7 	    _CALL print_int
 3464      FEFF5DF8 
 3464      04EB
 3465 0ad8 39E0     	    b 8f  
 3466 0ada 0128     	1:  cmp r0,#TK_COLON 
 3467 0adc 00DC     	    bgt 2f
 3468 0ade 4DE0     	    b unget_exit 
 3469 0ae0 1C28     	2:  cmp r0,#TK_QSTR 
 3470 0ae2 06D1     	    bne 3f
 3471 0ae4 0846     	    mov r0,r1 
 3472 0ae6 00B5FFF7 	    _CALL uart_puts  
 3472      FEFF5DF8 
 3472      04EB
 3473 0af0 2DE0     	    b 8f 
 3474 0af2 1628     	3:  cmp r0,#TK_CFUNC
 3475 0af4 05D1     	    bne 4f
 3476 0af6 0846     	    mov r0,r1
 3477 0af8 00B5FFF7 	    _CALL execute 
 3477      FEFF5DF8 
 3477      04EB
 3478 0b02 1328     	4:  cmp r0,#TK_CHAR 
 3479 0b04 06D1     	    bne 5f 
 3480 0b06 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 90


 3481 0b08 00B5FFF7 	    _CALL uart_putc 
 3481      FEFF5DF8 
 3481      04EB
 3482 0b12 1CE0     	    b 8f 
 3483 0b14 0428     	5:  cmp r0,#TK_SHARP
 3484 0b16 09D1     	    bne 6f 
 3485 0b18 00B5FFF7 	   _CALL next_token
 3485      FEFF5DF8 
 3485      04EB
 3486 0b22 1B28     	    cmp r0,#TK_INTGR  
 3487 0b24 7FF4FEAF 	    bne syntax_error 
 3488 0b28 6164     	    str r1,[UPP,#TAB_WIDTH]
 3489 0b2a 10E0     	    b 8f 
 3490 0b2c 1728     	6:  cmp r0,#TK_CMD 
 3491 0b2e 25D1     	    bne unget_exit  
 3492 0b30 4629     	    cmp r1,#TAB_IDX 
 3493 0b32 05D1     	    bne 6f
 3494 0b34 00B500F0 	    _CALL tab 
 3494      9BFA5DF8 
 3494      04EB
 3495 0b3e 06E0     	    b 8f 
 3496 0b40 4229     	6:  cmp r1,#SPC_IDX  
 3497 0b42 1BD1     	    bne unget_exit
 3498 0b44 00B500F0 	    _CALL spc   
 3498      55FA5DF8 
 3498      04EB
 3499 0b4e 88EA0808 	8:  eor T1,T1  
 3500 0b52 00B5FFF7 	    _CALL next_token
 3500      FEFF5DF8 
 3500      04EB
 3501 0b5c 90B1     	    cbz r0, print_exit  
 3502 0b5e 0228     	    cmp r0,#TK_COMMA 
 3503 0b60 02D1     	    bne 8f 
 3504 0b62 4FF0FF38 	    mov T1,#-1
 3505 0b66 A9E7     	    b 0b
 3506 0b68 0328     	8:  cmp r0,#TK_SEMIC 
 3507 0b6a 07D1     	    bne unget_exit 
 3508 0b6c 00B5FFF7 	    _CALL tabulation 
 3508      FEFF5DF8 
 3508      04EB
 3509 0b76 4FF0FF38 	    mov T1,#-1
 3510 0b7a 9FE7     	    b 0b
 3511              	unget_exit:         
 3512 0b7c D4F800A0 	   _UNGET_TOKEN 
 3512      D4F808B0 
 3513              	print_exit:
 3514 0b84 18EA0808 	    ands T1,T1 
 3515 0b88 08D1     	    bne 9f
 3516 0b8a 00B5FFF7 	    _CALL cr
 3516      FEFF5DF8 
 3516      04EB
 3517 0b94 206C     	    ldr r0,[UPP,#FLAGS]
 3518 0b96 80F08000 	    eor r0,#FPRINT 
 3519 0b9a 2064     	    str r0,[UPP,#FLAGS] 
 3520 0b9c 7047     	9:  _RET 
 3521              	
 3522              	/**************************************
ARM GAS  tinyBasic.s 			page 91


 3523              	  BASIC: QKEY
 3524              	  check if key pressed 
 3525              	**************************************/ 
 3526 0b9e 00BF     	    _FUNC qkey
 3527 0ba0 4FF00001 	    mov r1,#0
 3528 0ba4 00B5FFF7 	    _CALL uart_qkey
 3528      FEFF5DF8 
 3528      04EB
 3529 0bae 01D0     	    beq 9f 
 3530 0bb0 4FF0FF31 	    mov r1,#-1 
 3531 0bb4 4FF01B00 	9:  mov r0,#TK_INTGR
 3532 0bb8 7047     	    _RET 
 3533              	
 3534              	/******************************************
 3535              	  BASIC RANDOM(expr)
 3536              	  generate random number between 0..expr-1
 3537              	******************************************/
 3538 0bba 00BF     	    _FUNC random
 3539 0bbc 00B5FFF7 	    _CALL func_args 
 3539      FEFF5DF8 
 3539      04EB
 3540 0bc6 0128     	    cmp r0,#1
 3541 0bc8 7FF4FEAF 	    bne syntax_error 
 3542 0bcc 606A     	    ldr r0,[UPP,#SEED]
 3543 0bce 4FEA4031 	    lsl r1,r0,#13
 3544 0bd2 81EA0001 	    eor r1,r0
 3545 0bd6 4FEA5140 	    lsr r0,r1,#17
 3546 0bda 81EA0001 	    eor r1,r0
 3547 0bde 4FEA4110 	    lsl r0,r1,#5
 3548 0be2 81EA0001 	    eor r1,r0
 3549 0be6 6162     	    str r1,[UPP,#SEED]
 3550 0be8 5CF8040B 	    _POP r0 
 3551 0bec B1FBF0F2 	    udiv r2,r1,r0  
 3552 0bf0 00FB02F2 	    mul r2,r0 
 3553 0bf4 A1EB0201 	    sub r1,r2 
 3554 0bf8 4FF01B00 	    mov r0,#TK_INTGR
 3555 0bfc 7047     	    _RET 
 3556              	
 3557              	/****************************************
 3558              	  BASIC: RSHIFT(expr1,expr2)
 3559              	  shift left expr1 de expr2 bits 
 3560              	****************************************/
 3561 0bfe 00BF     	    _FUNC rshift
 3562 0c00 00B5FFF7 	    _CALL func_args
 3562      FEFF5DF8 
 3562      04EB
 3563 0c0a 0228     	    cmp r0,#2 
 3564 0c0c 7FF4FEAF 	    bne syntax_error
 3565 0c10 BCE80300 	    ldmia DP!,{r0,r1}
 3566 0c14 21FA00F1 	    lsr r1,r0  
 3567 0c18 4FF01B00 	    mov r0,#TK_INTGR
 3568 0c1c 7047     	    _RET 
 3569              	
 3570              	/****************************
 3571              	  BASIC: RUN 
 3572              	  execute program in memory
 3573              	****************************/
ARM GAS  tinyBasic.s 			page 92


 3574 0c1e 00BF     	    _FUNC run
 3575 0c20 206C10F0 	    _CLO 
 3575      010F03D0 
 3575      4FF00700 
 3575      FFF7FEBF 
 3576 0c30 206B     	    ldr r0,[UPP,#TXTBGN]
 3577 0c32 616B     	    ldr r1,[UPP,#TXTEND]
 3578 0c34 C4F8D010 	    str r1,[UPP,#HERE]
 3579 0c38 8842     	    cmp r0,r1
 3580 0c3a 21D0     	    beq 9f
 3581 0c3c 216C     	    ldr r1,[UPP,#FLAGS]
 3582 0c3e 11F0080F 	    tst r1,#FSTOP
 3583 0c42 09D0     	    beq 1f
 3584 0c44 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3585 0c48 6060     	    str r0,[UPP,#COUNT]
 3586 0c4a 206C     	    ldr r0,[UPP,#FLAGS]
 3587 0c4c 4FF00901 	    mov r1,#FRUN+FSTOP
 3588 0c50 80EA0100 	    eor r0,r1
 3589 0c54 2064     	    str r0,[UPP,#FLAGS] 
 3590 0c56 13E0     	    b 9f  
 3591 0c58 8178     	1:  ldrb r1,[r0,#2]
 3592 0c5a 6160     	    str r1,[UPP,#COUNT]
 3593 0c5c 8346     	    mov BPTR,r0 
 3594 0c5e 4FF0030A 	    mov IN,#3
 3595 0c62 606B     	    ldr r0,[UPP,#TXTEND]
 3596              	    // reset dataline pointers 
 3597 0c64 80EA0000 	    eor r0,r0 
 3598 0c68 E060     	    str r0,[UPP,#DATAPTR]
 3599 0c6a 2061     	    str r0,[UPP,#DATA]
 3600 0c6c 6061     	    str r0,[UPP,#DATALEN] 
 3601 0c6e 206C     	    ldr r0,[UPP,#FLAGS]
 3602 0c70 40F00100 	    orr r0,#FRUN 
 3603 0c74 2064     	    str r0,[UPP,#FLAGS]
 3604 0c76 00B5FFF7 	    _CALL show_trace 
 3604      FEFF5DF8 
 3604      04EB
 3605 0c80 7047     	9:  _RET 
 3606              	
 3607              	/**********************************
 3608              	        FILE SYSTEM 
 3609              	**********************************/
 3610              	
 3611              	/*********************************
 3612              	  search_free 
 3613              	  search first free PAGE in fs
 3614              	  a PAGE is free if first word is
 3615              	  -1
 3616              	  input:
 3617              	    none 
 3618              	  output:
 3619              	    r0    addr|0
 3620              	  use:
 3621              	*********************************/
 3622 0c82 00BF     	    _FUNC search_free 
 3623 0c84 06B4     	    push {r1,r2}
 3624 0c86 DFF86410 	    ldr r1,fs_addr 
 3625 0c8a 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
ARM GAS  tinyBasic.s 			page 93


 3625      C0F60202 
 3626 0c92 0868     	1:  ldr r0,[r1]
 3627 0c94 B0F1FF3F 	    cmp r0,#-1
 3628 0c98 03D0     	    beq 8f 
 3629 0c9a 01F58061 	    add r1,#PAGE_SIZE
 3630 0c9e 9142     	    cmp r1,r2 
 3631 0ca0 F7D4     	    bmi 1b 
 3632 0ca2 0846     	8:  mov r0,r1 
 3633 0ca4 06BC     	    pop {r1,r2}   
 3634 0ca6 7047     	    _RET 
 3635              	
 3636              	/*********************************
 3637              	  search_file 
 3638              	  search for a file name 
 3639              	  in file system.
 3640              	  input: 
 3641              	    r0   .asciz target name
 3642              	  output:
 3643              	    r0    0 || address found 
 3644              	  use:
 3645              	   r0     temp 
 3646              	   r1     *file_name 
 3647              	   r2     *fs  
 3648              	   r3     target   
 3649              	**********************************/
 3650              	    _FUNC search_file 
 3651 0ca8 0EB4     	    push {r1,r2,r3}
 3652 0caa DFF84020 	    ldr r2,fs_addr
 3653 0cae 0346     	    mov r3,r0  
 3654              	cmp_loop:
 3655 0cb0 1068     	    ldr r0,[r2]
 3656 0cb2 B0F1FF3F 	    cmp r0,#-1
 3657 0cb6 80EA0000 	    eor r0,r0
 3658 0cba 15D0     	    beq 9f // reached end of fs 
 3659 0cbc 1846     	1:  mov r0,r3
 3660 0cbe 02F10201 	    add r1,r2,#2
 3661 0cc2 00B5FFF7 	    _CALL strcmp
 3661      FEFF5DF8 
 3661      04EB
 3662 0ccc 08B9     	    cbnz r0,2f
 3663 0cce 1046     	    mov r0,r2 
 3664 0cd0 0AE0     	    b 9f   
 3665 0cd2 1088     	2:  ldrh r0,[r2] // name length
 3666 0cd4 0244     	    add r2,r0 
 3667 0cd6 1088     	    ldrh r0,[r2]
 3668 0cd8 1044     	    add r0,r2
 3669 0cda 00B5FFF7 	    _CALL page_align 
 3669      FEFF5DF8 
 3669      04EB
 3670 0ce4 0246     	    mov r2,r0   
 3671 0ce6 E3E7     	    b cmp_loop 
 3672 0ce8 0EBC     	9:  pop {r1,r2,r3}
 3673 0cea 7047     	    _RET 
 3674              	
 3675 0cec 00000000 	fs_addr: .word FILE_SYSTEM
 3676              	
 3677              	/*************************************
ARM GAS  tinyBasic.s 			page 94


 3678              	  BASIC: DIR 
 3679              	  list files stored in fs 
 3680              	  use:
 3681              	    r0  temp 
 3682              	    r1  temp
 3683              	    r2  file count
 3684              	    r3  data size
 3685              	    T1  *fs  
 3686              	*************************************/
 3687              	    _FUNC directory
 3688 0cf0 206C10F0 	    _CLO 
 3688      010F03D0 
 3688      4FF00700 
 3688      FFF7FEBF 
 3689 0d00 82EA0202 	    eor r2,r2 
 3690 0d04 5FF81C80 	    ldr T1,fs_addr 
 3691 0d08 D8F80000 	1:  ldr r0,[T1] // name length 
 3692 0d0c B0F1FF3F 	    cmp r0,#-1
 3693 0d10 2AD0     	    beq no_more_file
 3694 0d12 00F00F03 	    and r3,r0,#15
 3695 0d16 08F10200 	    add r0,T1,#2
 3696 0d1a 00B5FFF7 	    _CALL uart_puts 
 3696      FEFF5DF8 
 3696      04EB
 3697 0d24 4FF01000 	    mov r0,#16 
 3698 0d28 00B5FFF7 	    _CALL cursor_x 
 3698      FEFF5DF8 
 3698      04EB
 3699 0d32 9844     	    add T1,r3 
 3700 0d34 B8F80030 	    ldrh r3,[T1]
 3701 0d38 1846     	    mov r0,r3 
 3702 0d3a 4FF00A01 	    mov r1,#10 
 3703 0d3e 00B5FFF7 	    _CALL print_int
 3703      FEFF5DF8 
 3703      04EB
 3704 0d48 00B5FFF7 	    _CALL cr  
 3704      FEFF5DF8 
 3704      04EB
 3705 0d52 08EB0300 	    add r0,T1,r3 
 3706 0d56 00B5FFF7 	    _CALL page_align
 3706      FEFF5DF8 
 3706      04EB
 3707 0d60 8046     	    mov T1,r0 
 3708 0d62 02F10102 	    add r2,#1 
 3709 0d66 CFE7     	    b 1b  
 3710              	no_more_file:
 3711 0d68 00B5FFF7 	    _CALL cr
 3711      FEFF5DF8 
 3711      04EB
 3712 0d72 4FF01000 	    mov r0,#16
 3713 0d76 00B5FFF7 	    _CALL cursor_x  
 3713      FEFF5DF8 
 3713      04EB
 3714 0d80 1046     	    mov r0,r2 
 3715 0d82 4FF00A01 	    mov r1,#10 
 3716 0d86 00B5FFF7 	    _CALL print_int 
 3716      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 95


 3716      04EB
 3717 0d90 DFF85405 	    ldr r0,=fcount 
 3718 0d94 00B5FFF7 	    _CALL uart_puts 
 3718      FEFF5DF8 
 3718      04EB
 3719 0d9e 7047     	    _RET 
 3720 0da0 66696C65 	fcount:  .asciz "files\n"
 3720      730A00
 3721              	
 3722              	/*************************************
 3723              	  BASIC: FORGET ["name"]
 3724              	  delete file and all following 
 3725              	  if no name given delete all files 
 3726              	************************************/
 3727 0da7 00       	    _FUNC forget
 3728 0da8 2DE90802 	    push {r3,T2}
 3729 0dac 5FF8C490 	    ldr T2,fs_addr 
 3730 0db0 E36A     	    ldr r3,[UPP,#FSFREE]
 3731 0db2 00B5FFF7 	    _CALL next_token
 3731      FEFF5DF8 
 3731      04EB
 3732 0dbc 38B1     	    cbz r0,1f // no name 
 3733 0dbe 0846     	    mov r0,r1
 3734 0dc0 00B5FFF7 	    _CALL search_file
 3734      71FF5DF8 
 3734      04EB
 3735 0dca 58B1     	    cbz r0,9f 
 3736 0dcc 8146     	    mov T2,r0 
 3737 0dce 9945     	1:  cmp T2,r3 
 3738 0dd0 08D5     	    bpl 9f 
 3739 0dd2 4846     	    mov r0,T2 
 3740 0dd4 00B5FFF7 	    _CALL erase_page
 3740      FEFF5DF8 
 3740      04EB
 3741 0dde 09F58069 	    add T2,#PAGE_SIZE
 3742 0de2 F4E7     	    b 1b 
 3743 0de4 00B5FFF7 	9:  _CALL search_free
 3743      4DFF5DF8 
 3743      04EB
 3744 0dee BDE80802 	    pop {r3,T2} 
 3745 0df2 7047     	    _RET 
 3746              	
 3747              	/**********************************
 3748              	  BASIC LOAD "name" 
 3749              	  load file in RAM for execution
 3750              	  use:
 3751              	    r0   temp
 3752              	    r1   src
 3753              	    r2   dest 
 3754              	    r3   count 
 3755              	**********************************/
 3756              	    _FUNC load
 3757 0df4 206C10F0 	    _CLO 
 3757      010F03D0 
 3757      4FF00700 
 3757      FFF7FEBF 
 3758 0e04 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 96


 3758      FEFF5DF8 
 3758      04EB
 3759 0e0e 1C28     	    cmp r0,#TK_QSTR 
 3760 0e10 7FF4FEAF 	    bne syntax_error 
 3761 0e14 0846     	    mov r0,r1 
 3762 0e16 00B5FFF7 	    _CALL search_file 
 3762      46FF5DF8 
 3762      04EB
 3763 0e20 18B9     	    cbnz r0, 1f 
 3764 0e22 4FF00900 	    mov r0,#ERR_NOT_FILE
 3765 0e26 FFF7FEBF 	    b tb_error 
 3766 0e2a 0146     	1:  mov r1,r0 
 3767 0e2c 0888     	    ldrh r0,[r1]
 3768 0e2e 0144     	    add r1,r0 // data size field  
 3769 0e30 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3770 0e34 226B     	    ldr r2,[UPP,#TXTBGN]
 3771 0e36 02EB0300 	    add r0,r2,r3  
 3772 0e3a 6063     	    str r0,[UPP,#TXTEND]
 3773 0e3c 03F10103 	    add r3,#1
 3774 0e40 4FEA5303 	    lsr r3,#1
 3775              	2:  // load file data 
 3776 0e44 31F8020B 	    ldrh r0,[r1],#2
 3777 0e48 22F8020B 	    strh r0,[r2],#2 
 3778 0e4c 013B     	    subs r3,#1 
 3779 0e4e F9D1     	    bne 2b 
 3780              	// report file size 
 3781 0e50 DFF89804 	    ldr r0,=fsize 
 3782 0e54 00B5FFF7 	    _CALL uart_puts
 3782      FEFF5DF8 
 3782      04EB
 3783 0e5e 606B     	    ldr r0,[UPP,#TXTEND]
 3784 0e60 236B     	    ldr r3,[UPP,#TXTBGN]
 3785 0e62 A0EB0300 	    sub r0,r3 
 3786 0e66 4FF00A01 	    mov r1,#10 
 3787 0e6a 00B5FFF7 	    _CALL print_int 
 3787      FEFF5DF8 
 3787      04EB
 3788 0e74 DFF87804 	    ldr r0,=data_bytes 
 3789 0e78 00B5FFF7 	    _CALL uart_puts      
 3789      FEFF5DF8 
 3789      04EB
 3790 0e82 7047     	    _RET 
 3791              	
 3792              	
 3793              	/*********************************
 3794              	  BASIC: SAVE "name" 
 3795              	  save program in flash memory
 3796              	  file structure:
 3797              	    .hword name_length 
 3798              	    .asciz name
 3799              	    .palign 1  
 3800              	    .hword data_length 
 3801              	    .byte  file data (variable length)  
 3802              	  use:
 3803              	    r0  temp 
 3804              	    r1  temp
 3805              	    r2  *flash 
ARM GAS  tinyBasic.s 			page 97


 3806              	    r3  *ram  
 3807              	    T1  temp   
 3808              	********************************/
 3809              	    _FUNC save
 3810 0e84 206C10F0 	    _CLO 
 3810      010F03D0 
 3810      4FF00700 
 3810      FFF7FEBF 
 3811 0e94 606B     	    ldr r0,[UPP,#TXTEND]
 3812 0e96 216B     	    ldr r1,[UPP,#TXTBGN]
 3813 0e98 8842     	    cmp r0,r1
 3814 0e9a 03D1     	    bne 0f 
 3815 0e9c 4FF00D00 	    mov r0,#ERR_NO_PROG
 3816 0ea0 FFF7FEBF 	    b tb_error 
 3817 0ea4 00B5FFF7 	0:  _CALL next_token 
 3817      FEFF5DF8 
 3817      04EB
 3818 0eae 1C28     	    cmp r0,#TK_QSTR
 3819 0eb0 7FF4FEAF 	    bne syntax_error 
 3820              	// check for existing 
 3821 0eb4 0B46     	    mov r3,r1 // save name 
 3822 0eb6 1846     	    mov r0,r3  
 3823 0eb8 00B5FFF7 	    _CALL search_file
 3823      F5FE5DF8 
 3823      04EB
 3824 0ec2 18B1     	    cbz r0,new_file 
 3825 0ec4 4FF00800 	    mov r0,#ERR_DUPLICATE
 3826 0ec8 FFF7FEBF 	    b tb_error 
 3827              	new_file:
 3828 0ecc 4FF00100 	    mov r0,#1 
 3829 0ed0 00B5FFF7 	    _CALL unlock 
 3829      FEFF5DF8 
 3829      04EB
 3830 0eda E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3831 0edc 1846     	    mov r0,r3 // *name 
 3832 0ede 00B5FFF7 	    _CALL strlen 
 3832      FEFF5DF8 
 3832      04EB
 3833 0ee8 00F10400 	    add r0,#4  
 3834 0eec 20F00100 	    and r0,#-2 //even size
 3835 0ef0 A0F10208 	    sub T1,r0,#2  // name length counter   
 3836 0ef4 1146     	1:  mov r1,r2  
 3837 0ef6 00B5FFF7 	    _CALL hword_write   
 3837      FEFF5DF8 
 3837      04EB
 3838 0f00 02F10202 	    add r2,#2  
 3839              	// write file name      
 3840 0f04 33F8020B 	2:  ldrh r0,[r3],#2 
 3841 0f08 1146     	    mov r1,r2 
 3842 0f0a 00B5FFF7 	    _CALL hword_write
 3842      FEFF5DF8 
 3842      04EB
 3843 0f14 02F10202 	    add r2,#2
 3844 0f18 B8F10208 	    subs T1,#2
 3845 0f1c F2D1     	    bne 2b
 3846              	// write data size 
 3847 0f1e 606B     	    ldr r0,[UPP,#TXTEND]
ARM GAS  tinyBasic.s 			page 98


 3848 0f20 236B     	    ldr r3,[UPP,#TXTBGN]
 3849 0f22 A0EB0300 	    sub r0,r3
 3850 0f26 8046     	    mov T1,r0
 3851 0f28 1146     	    mov r1,r2 
 3852 0f2a 00B5FFF7 	    _CALL hword_write
 3852      FEFF5DF8 
 3852      04EB
 3853 0f34 02F10202 	    add r2,#2 
 3854              	// write data 
 3855 0f38 08F10108 	    add T1,#1 
 3856 0f3c 4FEA5808 	    lsr T1,#1 // .hword to write 
 3857 0f40 33F8020B 	3:  ldrh r0,[r3],#2
 3858 0f44 1146     	    mov r1,r2
 3859 0f46 00B5FFF7 	    _CALL hword_write 
 3859      FEFF5DF8 
 3859      04EB
 3860 0f50 02F10202 	    add r2,#2 
 3861 0f54 B8F10108 	    subs T1,#1 
 3862 0f58 F2D1     	    bne 3b
 3863 0f5a 4FF00000 	    mov r0,#0 
 3864 0f5e 00B5FFF7 	    _CALL unlock
 3864      FEFF5DF8 
 3864      04EB
 3865              	// update FSFREE     
 3866 0f68 606B     	    ldr r0,[UPP,#TXTEND]
 3867 0f6a 216B     	    ldr r1,[UPP,#TXTBGN]
 3868 0f6c A0EB0100 	    sub r0,r1 
 3869 0f70 8046     	    mov T1,r0 
 3870 0f72 E16A     	    ldr r1,[UPP,#FSFREE]
 3871 0f74 0844     	    add r0,r1 
 3872 0f76 00B5FFF7 	    _CALL page_align
 3872      FEFF5DF8 
 3872      04EB
 3873 0f80 E062     	    str r0,[UPP,#FSFREE]
 3874 0f82 DA48     	    ldr r0,=fsize
 3875 0f84 00B5FFF7 	    _CALL uart_puts
 3875      FEFF5DF8 
 3875      04EB
 3876 0f8e 4046     	    mov r0,T1 
 3877 0f90 4FF00A01 	    mov r1,#10 
 3878 0f94 00B5FFF7 	    _CALL print_int 
 3878      FEFF5DF8 
 3878      04EB
 3879 0f9e D448     	    ldr r0,=data_bytes 
 3880 0fa0 00B5FFF7 	    _CALL uart_puts  
 3880      FEFF5DF8 
 3880      04EB
 3881 0faa 7047     	    _RET 
 3882 0fac 66696C65 	fsize: .asciz "file size: "
 3882      2073697A 
 3882      653A2000 
 3883 0fb8 62797465 	data_bytes: .asciz "bytes"
 3883      7300
 3884              	
 3885              	
 3886              	/*******************************
 3887              	  BASIC: FREE 
ARM GAS  tinyBasic.s 			page 99


 3888              	  return RAM free bytes 
 3889              	*******************************/
 3890 0fbe 00BF     	    _FUNC free
 3891 0fc0 D4F8D000 	    ldr r0,[UPP,#HERE]
 3892 0fc4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3893 0fc8 A1EB0001 	    sub r1,r0
 3894 0fcc 4FF01B00 	    mov r0,#TK_INTGR
 3895 0fd0 7047     	    _RET  
 3896              	
 3897              	/*********************************
 3898              	  BASIC: SLEEP 
 3899              	  place MCU lowest power mode 
 3900              	  wait for external interrpt or
 3901              	  reset.
 3902              	*********************************/
 3903 0fd2 00BF     	    _FUNC sleep
 3904 0fd4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3904      CEF20000 
 3905 0fdc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3906 0fe0 0160     	    str r1,[r0]
 3907 0fe2 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3907      C4F20000 
 3908 0fea 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3909 0fee 0160     	    str r1,[r0]
 3910 0ff0 20BF     	    wfe 
 3911 0ff2 7047     	    _RET 
 3912              	
 3913              	/************************************
 3914              	  BASIC: SPC(expr)
 3915              	  mov cursor right expr spaces 
 3916              	***********************************/
 3917              	    _FUNC spc 
 3918 0ff4 00B5FFF7 	    _CALL func_args 
 3918      FEFF5DF8 
 3918      04EB
 3919 0ffe 0128     	    cmp r0,#1
 3920 1000 7FF4FEAF 	    bne syntax_error 
 3921 1004 206C     	    ldr r0,[UPP,#FLAGS]
 3922 1006 10F0800F 	    tst r0,#FPRINT 
 3923 100a 5CF8040B 	    _POP r0 
 3924 100e 04D0     	    beq 9f 
 3925 1010 00B5FFF7 	    _CALL spaces 
 3925      FEFF5DF8 
 3925      04EB
 3926 101a 7047     	9:  _RET 
 3927              	
 3928              	    _FUNC spi_read
 3929 101c 7047     	    _RET 
 3930              	
 3931 101e 00BF     	    _FUNC spi_enable
 3932 1020 7047     	    _RET 
 3933              	
 3934 1022 00BF     	    _FUNC spi_select
 3935 1024 7047     	    _RET 
 3936              	
 3937 1026 00BF     	    _FUNC spi_write
 3938 1028 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 100


 3939              	
 3940              	/******************************
 3941              	  BASIC: STOP 
 3942              	  stop program executre but 
 3943              	  keep execution state for 
 3944              	  resume 
 3945              	******************************/
 3946 102a 00BF     	    _FUNC stop
 3947 102c 206C10F0 	    _RTO 
 3947      010F03D1 
 3947      4FF00700 
 3947      FFF7FEBF 
 3948 103c 6068     	    ldr r0,[UPP,#COUNT]
 3949 103e 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3950 1042 206C     	    ldr r0,[UPP,#FLAGS]
 3951 1044 4FF00901 	    mov r1,#FRUN+FSTOP
 3952 1048 80EA0100 	    eor r0,r1
 3953 104c 2064     	    str r0,[UPP,#FLAGS]
 3954 104e 8AEA0A0A 	    eor IN,IN 
 3955 1052 8BEA0B0B 	    eor BPTR,BPTR 
 3956 1056 C4F804A0 	    str IN,[UPP,#COUNT]
 3957 105a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3958 105e C4F808A0 	    str IN,[UPP,#BASICPTR]
 3959 1062 4FF4A040 	    _MOV32 r0,RAM_END
 3959      C2F20000 
 3960 106a 8546     	    mov sp,r0
 3961 106c FFF7FEBF 	    b cmd_line 
 3962              	
 3963              	
 3964              	/**************************
 3965              	  BASIC: TAB(expr)
 3966              	  move cursor column expr 
 3967              	**************************/
 3968              	    _FUNC tab 
 3969 1070 00B5FFF7 	    _CALL func_args  
 3969      FEFF5DF8 
 3969      04EB
 3970 107a 0128     	    cmp r0,#1 
 3971 107c 7FF4FEAF 	    bne syntax_error 
 3972 1080 206C     	    ldr r0,[UPP,#FLAGS]
 3973 1082 10F0800F 	    tst r0,#FPRINT
 3974 1086 5CF8040B 	    _POP r0 
 3975 108a 04D0     	    beq 9f 
 3976 108c 00B5FFF7 	    _CALL cursor_x 
 3976      FEFF5DF8 
 3976      04EB
 3977 1096 7047     	9:  _RET 
 3978              	
 3979              	
 3980              	/**************************
 3981              	  BASIC: TICKS 
 3982              	  return msec counter
 3983              	**************************/  
 3984              	    _FUNC get_ticks
 3985 1098 E169     	    ldr r1,[UPP,#TICKS]
 3986 109a 4FF01B00 	    mov r0,#TK_INTGR
 3987 109e 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 101


 3988              	
 3989              	/*************************
 3990              	  BASIC: TIMER expr 
 3991              	  set countdown timer 
 3992              	************************/
 3993              	    _FUNC set_timer
 3994 10a0 00B5FFF7 	    _CALL expression 
 3994      FEFF5DF8 
 3994      04EB
 3995 10aa 1B28     	    cmp r0,#TK_INTGR
 3996 10ac 7FF4FEAF 	    bne syntax_error 
 3997 10b0 2162     	    str r1,[UPP,#TIMER]
 3998 10b2 7047     	    _RET 
 3999              	
 4000              	/***************************
 4001              	  BASIC: TIMEOUT
 4002              	  check for timer expiration 
 4003              	  return -1 true || 0 false
 4004              	****************************/
 4005              	    _FUNC timeout
 4006 10b4 81EA0101 	    eor r1,r1 
 4007 10b8 206A     	    ldr r0,[UPP,#TIMER]
 4008 10ba 08B9     	    cbnz r0,9f 
 4009 10bc 6FEA0101 	    mvn r1,r1 
 4010 10c0 4FF01B00 	9:  mov r0,#TK_INTGR    
 4011 10c4 7047     	    _RET 
 4012              	
 4013              	/****************************************
 4014              	  BASIC:  TONE freq, duration 
 4015              	  play a tone with frequency freq and duration
 4016              	  in milliseconds
 4017              	***********************************************/
 4018 10c6 00BF     	    _FUNC tone
 4019 10c8 00B5FFF7 	    _CALL arg_list 
 4019      FEFF5DF8 
 4019      04EB
 4020 10d2 0228     	    cmp r0,#2 
 4021 10d4 7FF4FEAF 	    bne syntax_error
 4022 10d8 BCE80003 	    ldmia DP!,{T1,T2}
 4023              	    
 4024 10dc 7047     	    _RET 
 4025              	
 4026              	/****************************************
 4027              	  BASIC: TRACE n 
 4028              	  enable execution trace 
 4029              	  0   ddisable
 4030              	  1   show current line#
 4031              	  2  show line#+data_stack
 4032              	  3  show line#+data_stack+main_stack 
 4033              	***************************************/
 4034 10de 00BF     	    _FUNC trace 
 4035 10e0 00B5FFF7 	    _CALL next_token 
 4035      FEFF5DF8 
 4035      04EB
 4036 10ea 1B28     	    cmp r0,#TK_INTGR  
 4037 10ec 7FF4FEAF 	    bne syntax_error 
 4038 10f0 01F00301 	    and r1,#3 
ARM GAS  tinyBasic.s 			page 102


 4039 10f4 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4040 10f8 7047     	    _RET 
 4041              	
 4042              	
 4043              	/***************************
 4044              	  BASIC: UBOUND 
 4045              	  return last indice of @
 4046              	  output:
 4047              	    r0  TK_INTGR 
 4048              	    r1  +int 
 4049              	**************************/
 4050 10fa 00BF     	    _FUNC ubound
 4051 10fc D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4052 1100 D4F8D000 	    ldr r0,[UPP,#HERE]
 4053 1104 A1EB0001 	    sub r1,r0 
 4054 1108 4FEA9101 	    lsr r1,#2
 4055 110c 4FF01B00 	    mov r0,#TK_INTGR 
 4056 1110 7047     	    _RET 
 4057              	
 4058              	/****************************
 4059              	  BASIC: UFLASH 
 4060              	  return user flash address
 4061              	*****************************/
 4062 1112 00BF     	    _FUNC uflash
 4063 1114 7749     	    ldr r1,=user
 4064 1116 4FF01B00 	    mov r0,#TK_INTGR 
 4065 111a 7047     	    _RET 
 4066              	
 4067              	
 4068              	/************************************
 4069              	  BASIC: UNTIL relation 
 4070              	  close a DO..UNTIL loop 
 4071              	  loop until relation come true 
 4072              	************************************/
 4073              	    _FUNC until
 4074 111c 00B5FFF7 	    _CALL relation 
 4074      FEFF5DF8 
 4074      04EB
 4075 1126 11B1     	    cbz r1,9f
 4076 1128 0CF1080C 	    add DP,#8
 4077 112c 7047     	    _RET  
 4078 112e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4079 1132 9BF80200 	    ldrb r0,[BPTR,#2]
 4080 1136 6060     	    str r0,[UPP,#COUNT]
 4081 1138 7047     	    _RET 
 4082              	
 4083              	/*************************************
 4084              	  BASIC: WAIT addr,expr1[,expr2] 
 4085              	  wait until *addr&expr1 is not null 
 4086              	  or until (*addr&expr1)^expr2 is null 
 4087              	***************************************/
 4088 113a 00BF     	    _FUNC wait
 4089 113c 00B5FFF7 	    _CALL arg_list 
 4089      FEFF5DF8 
 4089      04EB
 4090 1146 0228     	    cmp r0,#2
 4091 1148 03D0     	    beq 2f 
ARM GAS  tinyBasic.s 			page 103


 4092 114a 0328     	    cmp r0,#3
 4093 114c 07D0     	    beq 4f
 4094 114e FFF7FEBF 	    b syntax_error 
 4095 1152 BCE80300 	2:  ldmia DP!,{r0,r1}
 4096 1156 0A88     	3:  ldrh r2,[r1]
 4097 1158 0240     	    ands r2,r0 
 4098 115a FCD0     	    beq 3b 
 4099 115c 06E0     	    b 9f 
 4100 115e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4101 1162 1388     	5:  ldrh r3,[r2]
 4102 1164 83EA0003 	    eor r3,r0
 4103 1168 0B40     	    ands r3,r1 
 4104 116a FAD0     	    beq 5b 
 4105 116c 7047     	9:  _RET 
 4106              	
 4107              	/*********************************************
 4108              	  BASIC: WORDS 
 4109              	  print list of BASIC WORDS in dictionary 
 4110              	  use:
 4111              	    r0,r1,r2,T1,T2  
 4112              	********************************************/
 4113 116e 00BF     	    _FUNC words
 4114 1170 206C10F0 	    _CLO 
 4114      010F03D0 
 4114      4FF00700 
 4114      FFF7FEBF 
 4115 1180 DFF87481 	    ldr T1,=kword_dict
 4116 1184 89EA0909 	    eor T2,T2
 4117 1188 82EA0202 	    eor r2,r2  
 4118              	1:  
 4119 118c 4046     	    mov r0,T1
 4120 118e 00B5FFF7 	    _CALL strlen
 4120      FEFF5DF8 
 4120      04EB
 4121 1198 F0B1     	    cbz r0,4f 
 4122 119a 8144     	    add T2,r0 
 4123 119c B9F1500F 	    cmp T2,#80 
 4124 11a0 06D4     	    bmi 2f
 4125 11a2 89EA0909 	    eor T2,T2  
 4126 11a6 00B5FFF7 	    _CALL cr 
 4126      FEFF5DF8 
 4126      04EB
 4127 11b0 4046     	2:  mov r0,T1 
 4128 11b2 00B5FFF7 	    _CALL uart_puts 
 4128      FEFF5DF8 
 4128      04EB
 4129 11bc 4FF02000 	    mov r0,#SPACE
 4130 11c0 09F10109 	    add T2,#1  
 4131 11c4 00B5FFF7 	    _CALL uart_putc
 4131      FEFF5DF8 
 4131      04EB
 4132 11ce 02F10102 	    add r2,#1 
 4133 11d2 58F80C8C 	    ldr T1,[T1,#-12]
 4134 11d6 D9E7     	    b 1b 
 4135 11d8 19EA0909 	4:  ands T2,T2
 4136 11dc 04D0     	    beq 5f 
 4137 11de 00B5FFF7 	    _CALL cr 
ARM GAS  tinyBasic.s 			page 104


 4137      FEFF5DF8 
 4137      04EB
 4138 11e8 1046     	5:  mov r0,r2 
 4139 11ea 4FF00A01 	    mov r1,#10
 4140 11ee 00B5FFF7 	    _CALL print_int 
 4140      FEFF5DF8 
 4140      04EB
 4141 11f8 4048     	    ldr r0,=dict_words
 4142 11fa 00B5FFF7 	    _CALL uart_puts  
 4142      FEFF5DF8 
 4142      04EB
 4143 1204 7047     	9:  _RET 
 4144              	
 4145 1206 776F7264 	dict_words: .asciz "words in dictionary" 
 4145      7320696E 
 4145      20646963 
 4145      74696F6E 
 4145      61727900 
 4146              	
 4147              	
 4148              	/**************************************
 4149              	  BASIC: XOR(expr1,expr2)
 4150              	  binary exclusive or between 2 expressions
 4151              	**************************************/
 4152 121a 00BF     	    _FUNC bit_xor
 4153 121c 00B5FFF7 	    _CALL func_args
 4153      FEFF5DF8 
 4153      04EB
 4154 1226 0228     	    cmp r0,#2
 4155 1228 7FF4FEAF 	    bne syntax_error
 4156 122c 5CF8040B 	    _POP r0
 4157 1230 5CF8041B 	    _POP r1 
 4158 1234 81EA0001 	    eor r1,r0 
 4159 1238 4FF01B00 	    mov r0,#TK_INTGR
 4160 123c 7047     	    _RET 
 4161              	
 4162              	/***************************************
 4163              	    BASIC: XPOS 
 4164              	    report cursor column on terminal 
 4165              	***************************************/
 4166 123e 00BF     	    _FUNC xpos 
 4167 1240 00B5FFF7 	    _CALL get_curpos
 4167      FEFF5DF8 
 4167      04EB
 4168 124a 4FF01B00 	    mov r0,#TK_INTGR
 4169 124e 7047     	    _RET 
 4170              	
 4171              	/***********************************
 4172              	    BASIC: YPOS 
 4173              	    report cursor line on terminal 
 4174              	***********************************/
 4175              	    _FUNC ypos 
 4176 1250 00B5FFF7 	    _CALL get_curpos 
 4176      FEFF5DF8 
 4176      04EB
 4177 125a 0146     	    mov r1,r0 
 4178 125c 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 105


 4179 1260 7047     	    _RET 
 4180              	
 4181              	
 4182              	/**********************************
 4183              	     argument stack manipulation
 4184              	**********************************/
 4185              	
 4186              	/**********************************
 4187              	  BASIC PUSH expr[,expr] 
 4188              	  push integers on stack 
 4189              	*********************************/
 4190 1262 00BF     	    _FUNC cmd_push 
 4191 1264 00B5FFF7 	    _CALL arg_list
 4191      FEFF5DF8 
 4191      04EB
 4192 126e 7047     	    _RET 
 4193              	
 4194              	/********************************
 4195              	  BASIC: POP 
 4196              	  pop an integer out of stack 
 4197              	********************************/    
 4198              	    _FUNC fn_pop 
 4199 1270 5CF8041B 	    _POP r1 
 4200 1274 4FF01B00 	    mov r0,#TK_INTGR 
 4201 1278 7047     	    _RET 
 4202              	
 4203              	/*******************************
 4204              	  BASIC: DROP n 
 4205              	  discard n integer from stack
 4206              	*******************************/
 4207 127a 00BF     	    _FUNC drop 
 4208 127c 00B5FFF7 	    _CALL expression 
 4208      FEFF5DF8 
 4208      04EB
 4209 1286 1B28     	    cmp r0,#TK_INTGR 
 4210 1288 7FF4FEAF 	    bne syntax_error 
 4211 128c 4FF00400 	    mov r0,#4 
 4212 1290 01FB00F0 	    mul r0,r1 
 4213 1294 8444     	    add DP,r0 
 4214 1296 7047     	    _RET 
 4215              	
 4216              	/********************************
 4217              	  BASIC: GET(expr) 
 4218              	  retreive nth element from stack 
 4219              	********************************/
 4220              	    _FUNC get 
 4221 1298 00B5FFF7 	    _CALL func_args
 4221      FEFF5DF8 
 4221      04EB
 4222 12a2 0128     	    cmp r0,#1 
 4223 12a4 7FF4FEAF 	    bne syntax_error 
 4224 12a8 5CF8040B 	    _POP r0
 4225 12ac 4FF00401 	    mov r1,#4 
 4226 12b0 01FB00F0 	    mul r0,r1 
 4227 12b4 5CF80010 	    ldr r1,[DP,r0]
 4228 12b8 4FF01B00 	    mov r0,#TK_INTGR
 4229 12bc 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 106


 4230              	
 4231              	/*************************************
 4232              	  BASIC: PUT value,n  
 4233              	  store value at nth position on stack
 4234              	**************************************/
 4235 12be 00BF     	    _FUNC put
 4236 12c0 00B5FFF7 	    _CALL arg_list 
 4236      FEFF5DF8 
 4236      04EB
 4237 12ca 0228     	    cmp r0,#2 
 4238 12cc 7FF4FEAF 	    bne syntax_error 
 4239 12d0 5CF8040B 	    _POP r0 
 4240 12d4 4FF00401 	    mov r1,#4 
 4241 12d8 01FB00F0 	    mul r0,r1 
 4242 12dc 5CF8041B 	    _POP r1
 4243 12e0 4CF80010 	    str r1,[DP,r0]
 4244 12e4 7047     	    _RET 
 4245              	
 4246              	
 4247 12e6 0000     	  .section .rodata.user
 4248              	  .p2align 10 
 4249              	user:
 4250 0000 FFFFFFFF 	  .space 1024,255
 4250      FFFFFFFF 
 4250      FFFFFFFF 
 4250      FFFFFFFF 
 4250      FFFFFFFF 
 4251              	
 4252              	/*************************************************
 4253              	   extra FLASH memory not used by Tiny BASIC
 4254              	   is used to save BASIC programs.
 4255              	************************************************/
 4256              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4257              	  .section .rodata.fs
 4258              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 107


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 108


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 110


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
ARM GAS  tinyBasic.s 			page 111


      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CLS_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CONST_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATA_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATALN_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DEC_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DIR_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DO_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DROP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 ERASE_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FREE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GOSUB_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOTO_IDX
       cmd_index.inc:52     *ABS*:000000000000001b HEX_IDX
       cmd_index.inc:53     *ABS*:000000000000001c IF_IDX
       cmd_index.inc:54     *ABS*:000000000000001d IN_IDX
       cmd_index.inc:55     *ABS*:000000000000001e INPUT_IDX
       cmd_index.inc:56     *ABS*:000000000000001f INVERT_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 KEY_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LET_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LIST_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LOAD_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LOCATE_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LSHIFT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NEW_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NEXT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NOT_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 OR_IDX
       cmd_index.inc:67     *ABS*:000000000000002a OUT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PAD_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PAUSE_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PMODE_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK16_IDX
ARM GAS  tinyBasic.s 			page 113


       cmd_index.inc:73     *ABS*:0000000000000030 PEEK32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE8_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE16_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE32_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POP_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PRT_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PUSH_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PUT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 QKEY_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 READ_IDX
       cmd_index.inc:83     *ABS*:000000000000003a REM_IDX
       cmd_index.inc:84     *ABS*:000000000000003b REST_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RET_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RND_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RSHIFT_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RUN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SAVE_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SLEEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SPC_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STEP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STOP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 STORE_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TAB_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 THEN_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TICKS_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TIMER_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TMROUT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TO_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TRACE_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UBOUND_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UFLASH_IDX
       cmd_index.inc:104    *ABS*:000000000000004f UNTIL_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WAIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WORDS_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XOR_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XPOS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
ARM GAS  tinyBasic.s 			page 114


         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1755   .text:0000000000000e20 next_token
         tinyBasic.s:381    .text:00000000000002c4 search_label
         tinyBasic.s:2002   .text:000000000000106c expression
         tinyBasic.s:1309   .text:0000000000000a34 syntax_error
         tinyBasic.s:419    .text:00000000000002ec search_lineno
         tinyBasic.s:1324   .text:0000000000000a3c tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:450    .text:000000000000030c delete_line
         tinyBasic.s:475    .text:0000000000000338 create_gap
         tinyBasic.s:500    .text:0000000000000360 insert_line
         tinyBasic.s:539    .text:00000000000003b0 compile
         tinyBasic.s:1661   .text:0000000000000d7c pad
         tinyBasic.s:864    .text:00000000000006ac parse_int
         tinyBasic.s:612    .text:0000000000000458 comp_token
         tinyBasic.s:695    .text:000000000000055e store_r0
         tinyBasic.s:958    .text:000000000000074c skip
         tinyBasic.s:1043   .text:00000000000007b4 is_letter
         tinyBasic.s:779    .text:00000000000005f0 comp_label
         tinyBasic.s:704    .text:000000000000057e token_exit
         tinyBasic.s:686    .text:000000000000053a tick2
         tinyBasic.s:722    .text:0000000000000584 is_special
         tinyBasic.s:744    .text:00000000000005c8 token_ofs
         tinyBasic.s:635    .text:00000000000004b2 tok_idx0
         tinyBasic.s:698    .text:0000000000000564 try_number
         tinyBasic.s:639    .text:00000000000004b4 single
         tinyBasic.s:739    .text:00000000000005b9 tok_single
         tinyBasic.s:643    .text:00000000000004bc lt
         tinyBasic.s:649    .text:00000000000004ca gt
         tinyBasic.s:662    .text:00000000000004ee bkslash
         tinyBasic.s:669    .text:0000000000000504 prt_cmd
         tinyBasic.s:675    .text:0000000000000516 quote
         tinyBasic.s:897    .text:00000000000006e4 parse_quote
         tinyBasic.s:680    .text:000000000000052a tick
         tinyBasic.s:736    .text:00000000000005a4 char_list
         tinyBasic.s:737    .text:00000000000005a4 $d
         tinyBasic.s:745    .text:00000000000005c8 $d
         tinyBasic.s:762    .text:00000000000005f0 $t
         tinyBasic.s:977    .text:0000000000000764 upper
         tinyBasic.s:2307   .rodata.dictionary:0000000000000670 kword_dict
         tinyBasic.s:1476   .text:0000000000000bb8 search_dict
         tinyBasic.s:834    .text:0000000000000688 compress_label
         tinyBasic.s:1074   .text:00000000000007d4 atoi
         tinyBasic.s:928    .text:0000000000000718 get_escaped_char
         tinyBasic.s:945    .text:0000000000000742 escaped
         tinyBasic.s:945    .text:0000000000000742 $d
         tinyBasic.s:958    .text:000000000000074a $t
         tinyBasic.s:995    .text:0000000000000774 is_digit
         tinyBasic.s:1019   .text:0000000000000790 is_hex
         tinyBasic.s:1118   .text:0000000000000820 cmd_name
         tinyBasic.s:1144   .text:0000000000000844 decompile_line
         tinyBasic.s:1161   .text:000000000000088a decomp_loop
         tinyBasic.s:1269   .text:0000000000000a0b single_char
         tinyBasic.s:1264   .text:00000000000009f6 relop_str
         tinyBasic.s:1264   .text:00000000000009f6 $d
         tinyBasic.s:1265   .text:0000000000000a02 ge_str
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:1266   .text:0000000000000a05 le_str
         tinyBasic.s:1267   .text:0000000000000a08 ne_str
         tinyBasic.s:1286   .text:0000000000000a1c modulo
         tinyBasic.s:1357   .text:0000000000000acc compile_error
         tinyBasic.s:1328   .text:0000000000000a44 rt_error
         tinyBasic.s:1372   .text:0000000000000b1e rt_error_msg
         tinyBasic.s:1376   .text:0000000000000b3e err_msg
         tinyBasic.s:1373   .text:0000000000000b2f token_at_msg
         tinyBasic.s:2763   .text.basic:00000000000003c4 dump01
         tinyBasic.s:1674   .text:0000000000000d8c warm_start
         tinyBasic.s:1372   .text:0000000000000b1e $d
         tinyBasic.s:1384   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1385   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1386   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1387   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1388   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1389   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1390   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1391   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1392   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1393   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1394   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1395   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1396   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1397   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1398   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1399   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1401   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1402   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1403   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1413   .text:0000000000000b82 $t
         tinyBasic.s:1413   .text:0000000000000b84 skip_line
         tinyBasic.s:1430   .text:0000000000000b8c BTGL
         tinyBasic.s:1448   .text:0000000000000b90 kword_cmp
         tinyBasic.s:1514   .text:0000000000000bf6 cold_start
         tinyBasic.s:1537   .text:0000000000000c54 src_addr
         tinyBasic.s:1539   .text:0000000000000c58 dest_addr
         tinyBasic.s:1660   .text:0000000000000d78 tib
         tinyBasic.s:1541   .text:0000000000000c5c sysvar_size
         tinyBasic.s:1552   .text:0000000000000c60 prt_version
         tinyBasic.s:1608   .text:0000000000000d04 clear_basic
         tinyBasic.s:3622   .text.basic:0000000000000c84 search_free
         tinyBasic.s:1538   .text:0000000000000c54 $d
         tinyBasic.s:2180   .rodata:0000000000000000 uzero
         tinyBasic.s:2206   .rodata:00000000000000d4 ulast
         tinyBasic.s:1552   .text:0000000000000c60 $t
         tinyBasic.s:1575   .text:0000000000000cc4 version_msg
         tinyBasic.s:1577   .text:0000000000000ce4 version
         tinyBasic.s:1576   .text:0000000000000cc4 $d
         tinyBasic.s:1592   .text:0000000000000ce8 clear_vars
         tinyBasic.s:1643   .text:0000000000000d4c warm_init
         tinyBasic.s:1659   .text:0000000000000d74 dstack
         tinyBasic.s:1658   .text:0000000000000d70 mstack
         tinyBasic.s:1658   .text:0000000000000d70 $d
         tinyBasic.s:1662   .text:0000000000000d80 array
         tinyBasic.s:1663   .text:0000000000000d84 ready
         tinyBasic.s:1694   .text:0000000000000da4 cmd_line
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1706   .text:0000000000000dd8 interpreter
         tinyBasic.s:1739   .text:0000000000000e18 execute
         tinyBasic.s:3086   .text.basic:0000000000000702 let_var
         tinyBasic.s:3091   .text.basic:000000000000070e let_array
         tinyBasic.s:2316   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1811   .text:0000000000000e98 expect
         tinyBasic.s:1830   .text:0000000000000eb4 func_args
         tinyBasic.s:1850   .text:0000000000000ee0 arg_list
         tinyBasic.s:1882   .text:0000000000000f1c factor
         tinyBasic.s:2109   .text:0000000000001144 get_array_element
         tinyBasic.s:2147   .text:000000000000116c get_var
         tinyBasic.s:1950   .text:0000000000000ff8 term
         tinyBasic.s:2044   .text:00000000000010c8 relation
         tinyBasic.s:2091   .text:000000000000113c relop_jmp
         tinyBasic.s:2063   .text:000000000000110e rel_idx0
         tinyBasic.s:2064   .text:000000000000110e rel_eq
         tinyBasic.s:2081   .text:0000000000001124 rel_false
         tinyBasic.s:2067   .text:0000000000001112 rel_gt
         tinyBasic.s:2070   .text:0000000000001116 rel_ge
         tinyBasic.s:2073   .text:000000000000111a rel_lt
         tinyBasic.s:2076   .text:000000000000111e rel_le
         tinyBasic.s:2079   .text:0000000000001122 rel_ne
         tinyBasic.s:2092   .text:000000000000113c $d
         tinyBasic.s:2109   .text:0000000000001142 $t
         tinyBasic.s:2129   .text:0000000000001158 set_array_element
         tinyBasic.s:2165   .text:000000000000117c set_var
         tinyBasic.s:4258   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2201   .rodata:0000000000000050 $d
         tinyBasic.s:2214   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2213   *ABS*:0000000000000000 link
         tinyBasic.s:2308   .rodata.dictionary:0000000000000670 LINK
         tinyBasic.s:2215   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2303   .rodata.dictionary:0000000000000664 first_link
         tinyBasic.s:2350   .text.basic:0000000000000000 abs
         tinyBasic.s:2372   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2387   .text.basic:0000000000000054 ascii
         tinyBasic.s:2412   .text.basic:000000000000009c awu
         tinyBasic.s:2452   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2474   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2499   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2539   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2523   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2571   .text.basic:00000000000001f0 char
         tinyBasic.s:2563   .text.basic:00000000000001e4 cls
         tinyBasic.s:2588   .text.basic:0000000000000210 const
         tinyBasic.s:2627   .text.basic:0000000000000294 data_line
         tinyBasic.s:2732   .text.basic:000000000000038c dec_base
         tinyBasic.s:3687   .text.basic:0000000000000cf0 directory
         tinyBasic.s:2741   .text.basic:0000000000000394 do_loop
         tinyBasic.s:4207   .text.basic:000000000000127c drop
         tinyBasic.s:2756   .text.basic:000000000000039c dump
         tinyBasic.s:2800   .text.basic:0000000000000444 cmd_end
         tinyBasic.s:2828   .text.basic:0000000000000484 erase
         tinyBasic.s:2839   .text.basic:0000000000000498 for
         tinyBasic.s:3727   .text.basic:0000000000000da8 forget
         tinyBasic.s:3890   .text.basic:0000000000000fc0 free
         tinyBasic.s:4220   .text.basic:0000000000001298 get
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:2920   .text.basic:0000000000000554 gosub
         tinyBasic.s:2946   .text.basic:0000000000000594 goto
         tinyBasic.s:2954   .text.basic:00000000000005a0 hex_base
         tinyBasic.s:2963   .text.basic:00000000000005a8 if
         tinyBasic.s:3236   .text.basic:00000000000008c8 pin_input
         tinyBasic.s:2982   .text.basic:00000000000005c0 input_var
         tinyBasic.s:3050   .text.basic:00000000000006b8 invert
         tinyBasic.s:3063   .text.basic:00000000000006d8 key
         tinyBasic.s:3079   .text.basic:00000000000006ec let
         tinyBasic.s:3122   .text.basic:0000000000000778 list
         tinyBasic.s:3756   .text.basic:0000000000000df4 load
         tinyBasic.s:3173   .text.basic:0000000000000828 locate
         tinyBasic.s:3187   .text.basic:000000000000084c lshift
         tinyBasic.s:3201   .text.basic:000000000000086c new
         tinyBasic.s:2884   .text.basic:00000000000004fc next
         tinyBasic.s:3210   .text.basic:000000000000088c func_not
         tinyBasic.s:3222   .text.basic:00000000000008a4 bit_or
         tinyBasic.s:3254   .text.basic:00000000000008f4 out
         tinyBasic.s:3272   .text.basic:0000000000000920 pad_ref
         tinyBasic.s:3283   .text.basic:000000000000092c pause
         tinyBasic.s:3311   .text.basic:0000000000000948 pin_mode
         tinyBasic.s:3376   .text.basic:0000000000000a14 peek8
         tinyBasic.s:3389   .text.basic:0000000000000a30 peek16
         tinyBasic.s:3402   .text.basic:0000000000000a4c peek32
         tinyBasic.s:3416   .text.basic:0000000000000a68 poke8
         tinyBasic.s:3428   .text.basic:0000000000000a80 poke16
         tinyBasic.s:3440   .text.basic:0000000000000a98 poke32
         tinyBasic.s:4198   .text.basic:0000000000001270 fn_pop
         tinyBasic.s:3454   .text.basic:0000000000000ab0 print
         tinyBasic.s:4190   .text.basic:0000000000001264 cmd_push
         tinyBasic.s:4235   .text.basic:00000000000012c0 put
         tinyBasic.s:3526   .text.basic:0000000000000ba0 qkey
         tinyBasic.s:2657   .text.basic:00000000000002e8 read
         tinyBasic.s:2699   .text.basic:0000000000000348 restore
         tinyBasic.s:2935   .text.basic:000000000000057c return
         tinyBasic.s:3538   .text.basic:0000000000000bbc random
         tinyBasic.s:3561   .text.basic:0000000000000c00 rshift
         tinyBasic.s:3574   .text.basic:0000000000000c20 run
         tinyBasic.s:3809   .text.basic:0000000000000e84 save
         tinyBasic.s:3903   .text.basic:0000000000000fd4 sleep
         tinyBasic.s:3917   .text.basic:0000000000000ff4 spc
         tinyBasic.s:2870   .text.basic:00000000000004e4 step
         tinyBasic.s:3946   .text.basic:000000000000102c stop
         tinyBasic.s:2808   .text.basic:000000000000044c store
         tinyBasic.s:3968   .text.basic:0000000000001070 tab
         tinyBasic.s:2974   .text.basic:00000000000005bc then
         tinyBasic.s:3984   .text.basic:0000000000001098 get_ticks
         tinyBasic.s:3993   .text.basic:00000000000010a0 set_timer
         tinyBasic.s:4005   .text.basic:00000000000010b4 timeout
         tinyBasic.s:2857   .text.basic:00000000000004cc to
         tinyBasic.s:4034   .text.basic:00000000000010e0 trace
         tinyBasic.s:4050   .text.basic:00000000000010fc ubound
         tinyBasic.s:4062   .text.basic:0000000000001114 uflash
         tinyBasic.s:4073   .text.basic:000000000000111c until
         tinyBasic.s:4088   .text.basic:000000000000113c wait
         tinyBasic.s:4113   .text.basic:0000000000001170 words
         tinyBasic.s:4152   .text.basic:000000000000121c bit_xor
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:4166   .text.basic:0000000000001240 xpos
         tinyBasic.s:4175   .text.basic:0000000000001250 ypos
         tinyBasic.s:2350   .text.basic:0000000000000000 $t
         tinyBasic.s:2362   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2365   .text.basic:000000000000002c analog_read
         tinyBasic.s:2404   .text.basic:0000000000000098 autorun
         tinyBasic.s:3276   .text.basic:0000000000000928 pad_adr
         tinyBasic.s:2676   .text.basic:0000000000000320 seek_next
         tinyBasic.s:2721   .text.basic:000000000000037e no_data_line
         tinyBasic.s:2717   .text.basic:0000000000000378 try_next_line
         tinyBasic.s:2774   .text.basic:00000000000003e4 print_dump_header
         tinyBasic.s:2832   .text.basic:0000000000000494 user_space
         tinyBasic.s:2832   .text.basic:0000000000000494 $d
         tinyBasic.s:4249   .rodata.user:0000000000000000 user
         tinyBasic.s:2839   .text.basic:0000000000000498 $t
         tinyBasic.s:2923   .text.basic:0000000000000562 target
         tinyBasic.s:3043   .text.basic:00000000000006b4 str_buffer
         tinyBasic.s:3042   .text.basic:00000000000006b0 input_buffer
         tinyBasic.s:3042   .text.basic:00000000000006b0 $d
         tinyBasic.s:3050   .text.basic:00000000000006b8 $t
         tinyBasic.s:3167   .text.basic:0000000000000824 out_buff
         tinyBasic.s:3167   .text.basic:0000000000000824 $d
         tinyBasic.s:3173   .text.basic:0000000000000828 $t
         tinyBasic.s:3276   .text.basic:0000000000000928 $d
         tinyBasic.s:3283   .text.basic:000000000000092c $t
         tinyBasic.s:3511   .text.basic:0000000000000b7c unget_exit
         tinyBasic.s:3513   .text.basic:0000000000000b84 print_exit
         tinyBasic.s:3675   .text.basic:0000000000000cec fs_addr
         tinyBasic.s:3650   .text.basic:0000000000000ca8 search_file
         tinyBasic.s:3654   .text.basic:0000000000000cb0 cmp_loop
         tinyBasic.s:3675   .text.basic:0000000000000cec $d
         tinyBasic.s:3687   .text.basic:0000000000000cf0 $t
         tinyBasic.s:3710   .text.basic:0000000000000d68 no_more_file
         tinyBasic.s:3720   .text.basic:0000000000000da0 fcount
         tinyBasic.s:3720   .text.basic:0000000000000da0 $d
         tinyBasic.s:3882   .text.basic:0000000000000fac fsize
         tinyBasic.s:3883   .text.basic:0000000000000fb8 data_bytes
         tinyBasic.s:3827   .text.basic:0000000000000ecc new_file
         tinyBasic.s:3882   .text.basic:0000000000000fac $d
         tinyBasic.s:3890   .text.basic:0000000000000fbe $t
         tinyBasic.s:3928   .text.basic:000000000000101c spi_read
         tinyBasic.s:3931   .text.basic:0000000000001020 spi_enable
         tinyBasic.s:3934   .text.basic:0000000000001024 spi_select
         tinyBasic.s:3937   .text.basic:0000000000001028 spi_write
         tinyBasic.s:4018   .text.basic:00000000000010c8 tone
         tinyBasic.s:4145   .text.basic:0000000000001206 dict_words
         tinyBasic.s:4145   .text.basic:0000000000001206 $d
         tinyBasic.s:4152   .text.basic:000000000000121a $t
         tinyBasic.s:4248   .rodata.user:0000000000000000 $d
         tinyBasic.s:4247   .text.basic:00000000000012e6 $d
         tinyBasic.s:4258   .text.basic:00000000000012e8 $d
         tinyBasic.s:4258   .text:000000000000118c $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:743    .text:00000000000005c7 $d
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:1286   .text:0000000000000a1b $d
         tinyBasic.s:1286   .text:0000000000000a1c $t
         tinyBasic.s:1579   .text:0000000000000ce5 $d
         tinyBasic.s:1579   .text:0000000000000ce6 $t
         tinyBasic.s:1674   .text:0000000000000d8b $d
         tinyBasic.s:1674   .text:0000000000000d8c $t
         tinyBasic.s:3727   .text.basic:0000000000000da7 $d
         tinyBasic.s:3727   .text.basic:0000000000000da8 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
get_curpos
