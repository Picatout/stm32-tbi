ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//   constantes related to Arduino 
  35              	//   API mapping 
  36              	//-------------------------------------
  37              	  .equ INP,0
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ OUTP,1 
  39              	
  40              	//--------------------------------------
  41              	//       token attribute
  42              	//--------------------------------------
  43              	// bits 4:5 identify token group 
  44              	// 0x0n -> miscelinous 
  45              	// 0x1n -> +|- operators 
  46              	// 0x2n -> *|/|% operators
  47              	// 0x3n -> relational operators 
  48              	  .equ TK_NONE,0       // not a token 
  49              	  .equ TK_COLON,1      // command separator ':' 
  50              	  .equ TK_QSTR,2     // quoted string  
  51              	  .equ TK_CHAR,3       // ASCII character 
  52              	  .equ TK_VAR,4      // variable index 
  53              	  .equ TK_ARRAY,5     // array variable '@' 
  54              	  .equ TK_LPAREN,6     // left parenthesis '('
  55              	  .equ TK_RPAREN,7     // right parenthesis ')'
  56              	  .equ TK_COMMA,8     // item separator ',' 
  57              	  .equ TK_SEMIC,9     // semi-colon  
  58              	  .equ TK_SHARP,0xa     // print colon width '#' 
  59              	  .equ TK_CMD,0xb      // BASIC command   
  60              	  .equ TK_IFUNC,0xc    // BASIC integer function
  61              	  .equ TK_CFUNC,0xd    // BASIC character function
  62              	  .equ TK_CONST,0xe    // BASIC constant 
  63              	  .equ TK_INTGR,0xf    // 32 bits integer 
  64              	  .equ TK_PLUS,0x10    // addition operator '+'
  65              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  66              	  .equ TK_MULT,0x20    // multiplication operator '*'
  67              	  .equ TK_DIV,0x21     // division operator '/'
  68              	  .equ TK_MOD,0x22     // modulo operator '%'
  69              	  .equ TK_LBL,0x40     // label token 
  70              	  
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  79              	  .equ TK_GE,0x33      // relation operator '>='
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<='
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	  .equ ERR_CANT_PROG,16
 111              	  
 112              	
 113              	//--------------------------------------
 114              	//   assembler flags 
 115              	//-------------------------------------
 116              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 117              	
 118              	.equ CELL_SIZE,4 
 119              	
 120              	
 121              	//-------------------------------
 122              	//  macros used to help debugging
 123              	//-------------------------------
 124              	  .equ DEBUG,0
 125              	
 126              	    UPP .req r4  // base address system variables 
 127              	    VADR .req r5  // address FOR loop variable 
 128              	    LIMIT .req r6   // LOOP limit 
 129              	    INCR  .req  r7  // LOOP increment 
 130              	    T1  .req r8     // temporary register 
 131              	    T2  .req r9     // temporary register 
 132              	    IN  .req r10    //  index in text line or token list 
 133              	    BPTR .req r11   //  buffer address or BASIC line address 
 134              	    DP   .req r12   //  parameter stack pointer 
 135              	
 136              	/***************************
 137              	  SYSTEM variables offset 
 138              	  from UPP  
 139              	***************************/ 
 140              	
 141              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 142              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 143              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 144              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 145              	  .equ DATA,DATAPTR+4 // index to next data item 
 146              	  .equ DATALEN, DATA+4 // length of data line 
 147              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 148              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 149              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 150              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 151              	  .equ FSPTR,SEED+4 //  pointer used by file system
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 153              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 154              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 155              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 156              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 157              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 158              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 159              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 160              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 161              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 162              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 163              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 164              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 165              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 166              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 167              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 168              	
 169              	/* flags used by BASIC interpreter */ 
 170              		.equ FRUN,(1<<0) // programm running
 171              		.equ FTRAP,(1<<1) // inside trap handler 
 172              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 173              		.equ FSTOP,(1<<3) // program stopped  
 174              		.equ FBREAK,(1<<4) // break point flag 
 175              		.equ FCOMP,(1<<5)  // compiling flags 
 176              		.equ FAUTORUN,(1<<6) // auto start program running 
 177              	
 178              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 179              	  
 180              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 181              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 182              	
 183              	/***********************************************
 184              	*       MACROS
 185              	***********************************************/
 186              		.macro _CALL fn /* low level routine call */ 
 187              	 	PUSH {LR}
 188              		BL \fn  
 189              	  POP {LR}
 190              		.endm
 191              		
 192              		.macro	_RET /* return from subroutine */
 193              		BX	LR
 194              		.endm
 195              	
 196              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 197              		MOV \REG, #\LITERAL&0xffff
 198              		MOVT \REG, #\LITERAL>>16
 199              		.endm
 200              	
 201              	// local function header 
 202              	  .macro _FUNC label 
 203              	  .p2align 2 
 204              	  .type \label, %function  
 205              	\label:
 206              	  .endm 
 207              	
 208              	// global function header 
ARM GAS  tinyBasic.s 			page 10


 209              	  .macro _GBL_FUNC label 
 210              	  .global \label 
 211              	  _FUNC \label 
 212              	  .endm 
 213              	
 214              	
 215              	/********************************
 216              	    dictionary structure
 217              	------------------------------
 218              	 format:
 219              	   link:    
 220              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 221              	   cmd_name: 31 characters max 
 222              	   cmd_index: 2 bytes 
 223              	**********************************/
 224              		.macro _dict_entry tok_type,name,cmd_idx 
 225              	  .word LINK 
 226              	  .word \cmd_idx 
 227              		.word \tok_type  	
 228              		.equ LINK,.
 229              		.asciz "\name"
 230              		.p2align 2 
 231              		.endm 
 232              	
 233              	  // pop parameter in register 
 234              	  .macro _POP  reg 
 235              	  ldmia  DP!,{\reg}
 236              	  .endm 
 237              	
 238              	  // push register on parameter stack 
 239              	  .macro _PUSH reg 
 240              	  stmdb DP!,{\reg}
 241              	  .endm 
 242              	
 243              	  // drop n parameters on dstack 
 244              	  .macro _DROP n
 245              	  mov r0,#4*\n
 246              	  add DP,R0 
 247              	  .endm 
 248              	
 249              	  // back to previous token in list 
 250              	  .macro _UNGET_TOKEN 
 251              	  ldr IN,[UPP,#IN_SAVED]
 252              	  ldr BPTR,[UPP,#BASICPTR] 
 253              	  .endm 
 254              	
 255              	 // create a text data 
 256              	 .macro _TEXT label,text
 257              	 \label: .asciz "\text"
 258              	 .p2align 2 
 259              	 .endm 
 260              	
 261              	// command line only 
 262              	  .macro _CLO 
 263              	  ldr r0,[UPP,#FLAGS]
 264              	  tst r0,#FRUN 
 265              	  beq 1f 
ARM GAS  tinyBasic.s 			page 11


 266              	  mov r0,#ERR_CMD_ONLY
 267              	  b tb_error
 268              	1: 
 269              	  .endm 
 270              	
 271              	// run time only 
 272              	  .macro _RTO 
 273              	  ldr r0,[UPP,#FLAGS]
 274              	  tst r0,#FRUN 
 275              	  bne 1f 
 276              	  mov r0,#ERR_CMD_ONLY
 277              	  b tb_error
 278              	1:
 279              	  .endm 
 280              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CONST_IDX,CHAR_IDX+1 //
  36              	    .equ DATA_IDX,CONST_IDX+1 // 
  37              	    .equ DATALN_IDX,DATA_IDX+1 // 
  38              	    .equ DEC_IDX,DATALN_IDX+1 // 
  39              	    .equ DIR_IDX,DEC_IDX+1 // 
  40              	    .equ DO_IDX,DIR_IDX+1 // 
  41              	    .equ DROP_IDX,DO_IDX+1
ARM GAS  tinyBasic.s 			page 12


  42              	    .equ DUMP_IDX, DROP_IDX+1 
  43              	    .equ END_IDX,DUMP_IDX+1 // 
  44              	    .equ ERASE_IDX,END_IDX+1 
  45              	    .equ FLASH_IDX,ERASE_IDX+1
  46              	    .equ FOR_IDX, FLASH_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  49              	    .equ GOTO_IDX, GOSUB_IDX+1
  50              	    .equ HEX_IDX, GOTO_IDX+1 // 
  51              	    .equ IF_IDX, HEX_IDX+1 // 
  52              	    .equ INP_IDX,IF_IDX+1
  53              	    .equ INPUT_IDX, INP_IDX+1 // 
  54              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  55              	    .equ KEY_IDX, INVERT_IDX+1 // 
  56              	    .equ LET_IDX, KEY_IDX+1 // 
  57              	    .equ LIST_IDX, LET_IDX+1 // 
  58              	    .equ LOAD_IDX, LIST_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOAD_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
  71              	    .equ PICK_IDX,PEEK32_IDX+1
  72              	    .equ POKE8_IDX, PICK_IDX+1 // 
  73              	    .equ POKE16_IDX,POKE8_IDX+1 
  74              	    .equ POKE32_IDX,POKE16_IDX+1
  75              	    .equ POP_IDX,POKE32_IDX+1
  76              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  77              	    .equ PUSH_IDX,PRT_IDX+1
  78              	    .equ QKEY_IDX, PUSH_IDX+1 // 
  79              	    .equ READ_IDX, QKEY_IDX+1 // 
  80              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  81              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  82              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  83              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  84              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  85              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  86              	    .equ SAVE_IDX, RUN_IDX+1 // 
  87              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  88              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  89              	    .equ SPC_IDX,SLEEP_IDX+1 //
  90              	    .equ STEP_IDX, SPC_IDX+1 // 
  91              	    .equ STOP_IDX, STEP_IDX+1 // 
  92              	    .equ STORE_IDX,STOP_IDX+1
  93              	    .equ TAB_IDX, STORE_IDX+1 //
  94              	    .equ THEN_IDX,TAB_IDX+1
  95              	    .equ TICKS_IDX, THEN_IDX+1 // 
  96              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  97              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  98              	    .equ TO_IDX, TMROUT_IDX+1 // 
ARM GAS  tinyBasic.s 			page 13


  99              	    .equ TRACE_IDX,TO_IDX+1
 100              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 101              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 102              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 103              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 104              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 105              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 106              	    .equ XOR_IDX, WRITE_IDX+1 //  
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
ARM GAS  tinyBasic.s 			page 14


  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
ARM GAS  tinyBasic.s 			page 15


 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
ARM GAS  tinyBasic.s 			page 16


 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
ARM GAS  tinyBasic.s 			page 17


 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
ARM GAS  tinyBasic.s 			page 18


 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 19


 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      03FE5DF8 
 318      04EB
 319 0256 4028     	    cmp r0,TK_LBL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      34F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      5FFF5DF8 
 325      04EB
 326 027a 0F28     	    cmp r0,#TK_INTGR 
 327 027c 40F0F283 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 EAE3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  constant value  
 344              	  use:
 345              	    r1  temp 
 346              	    T1   *list 
 347              	    T2   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 2DE90203 	    push {r1,T1,T2} 
 351 029c D4F83480 	    ldr T1,[UPP,#TXTEND]
 352 02a0 D4F8D090 	    ldr T2,[UPP,#HERE] 
 353 02a4 C845     	1:  cmp T1,T2 
 354 02a6 0BD5     	    bpl 8f 
 355 02a8 58F8041B 	    ldr r1,[T1],#4
 356 02ac 8842     	    cmp r0,r1 
 357 02ae 02D0     	    beq 2f 
ARM GAS  tinyBasic.s 			page 20


 358 02b0 08F10408 	    add T1,#4
 359 02b4 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b6 D8F80000 	    ldr r0,[T1]
 362 02ba BDE80203 	    pop {r1,T1,T2}
 363 02be 7047     	    _RET
 364              	8:  // that constant doesn't exist 
 365 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 366 02c4 D2E3     	    b tb_error      
 367              	
 368              	
 369              	/***************************************
 370              	    search_label 
 371              	    search target label 
 372              	    input:
 373              	      r1    target label 
 374              	    output:
 375              	      r0    address or 0 
 376              	    use:
 377              	      r2    line address link 
 378              	      r3    search limit 
 379              	****************************************/
 380 02c6 00BF     	    _FUNC search_label 
 381 02c8 0CB4     	    push {r2,r3}
 382 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 383 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 384 02ce 9A42     	1:  cmp r2,r3
 385 02d0 0AD0     	    beq 8f 
 386 02d2 D078     	    ldrb r0,[r2,#3]
 387 02d4 4028     	    cmp  r0,#TK_LBL 
 388 02d6 02D0     	    beq 4f 
 389 02d8 9078     	2:  ldrb r0,[r2,#2]
 390 02da 0244     	    add r2,r0 
 391 02dc F7E7     	    b 1b 
 392              	4:  // compare label 
 393 02de 5068     	    ldr r0,[R2,#4]
 394 02e0 8142     	    cmp r1,r0 
 395 02e2 F9D1     	    bne 2b 
 396              	    // found label 
 397 02e4 1046     	    mov r0,r2 
 398 02e6 01E0     	    b 9f
 399 02e8 80EA0000 	8:  eor r0,r0 
 400 02ec 0CBC     	9:  pop {r2,r3}
 401 02ee 7047     	    _RET 
 402              	
 403              	
 404              	/***************************************
 405              	    search_lineno 
 406              	    localize BASIC line from its number 
 407              	    input:
 408              	      r0   line# 
 409              	    output: 
 410              	      r0   adr where found || adr new to be inserted 
 411              	      r1   0 found || !0 not found  
 412              	    use:
 413              	      r0   scan address 
 414              	      r1   temp   
ARM GAS  tinyBasic.s 			page 21


 415              	      r2   address end of text
 416              	      r3   target line#
 417              	****************************************/    
 418              	    _GBL_FUNC search_lineno
 419 02f0 0CB4     	    push {r2,r3} 
 420 02f2 0346     	    mov r3,r0 // target 
 421 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 422 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 423 02f8 9042     	1:  cmp r0,r2 
 424 02fa 05D0     	    beq  8f
 425 02fc 0188     	    ldrh r1,[r0]
 426 02fe C91A     	    subs r1,r3 
 427 0300 04D5     	    bpl 9f 
 428 0302 8178     	    ldrb r1,[r0,#2]
 429 0304 0844     	    add r0,r1
 430 0306 F7E7     	    b 1b 
 431 0308 4FF0FF31 	8:  mov r1,#-1 
 432 030c 0CBC     	9:  pop {r2,r3}
 433 030e 7047     	    _RET 
 434              	
 435              	
 436              	/********************************************
 437              	    delete_line 
 438              	    delete BASIC line at addr 
 439              	    input:
 440              	      r0    address line to delete 
 441              	    output:
 442              	      r0    same as input 
 443              	    use: 
 444              	      r1    dest adr
 445              	      r2    bytes to move 
 446              	      T1    length line to delete 
 447              	      T2    txtend 
 448              	********************************************/
 449              	    _FUNC delete_line 
 450 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 451 0314 0146     	    mov r1,r0 // dest 
 452 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 453 031a 4044     	    add r0,T1  // src
 454 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 455 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 456 0324 00B5FFF7 	    _CALL cmove
 456      FEFF5DF8 
 456      04EB
 457 032e A9EB0809 	    sub T2,T1 // txtend-count 
 458 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 459 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 460 033a 7047     	    _RET 
 461              	
 462              	/******************************************
 463              	    create_gap 
 464              	    create a gap in text area to insert new line 
 465              	    input:
 466              	      r0    adr 
 467              	      r1    length 
 468              	    output:
 469              	      r0    adr 
ARM GAS  tinyBasic.s 			page 22


 470              	    use:
 471              	      T1    length 
 472              	      T2    txtend 
 473              	************************************************/
 474              	    _FUNC create_gap 
 475 033c 2DE90503 	    push {r0,r2,T1,T2}
 476 0340 8846     	    mov T1,R1
 477 0342 0144     	    add r1,r0  // dest 
 478 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 479 0348 A9EB0002 	    sub r2,T2,r0 
 480 034c 00B5FFF7 	    _CALL cmove
 480      FEFF5DF8 
 480      04EB
 481 0356 C144     	    add T2,T1 
 482 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 483 035c BDE80503 	    pop {r0,r2,T1,T2}
 484 0360 7047     	    _RET 
 485              	
 486              	/************************************************
 487              	    insert_line 
 488              	    insert BASIC line in text area 
 489              	    first search if line with same number exist 
 490              	    replace if so. 
 491              	    input:
 492              	      r0    *buffer to insert 
 493              	    output:
 494              	      none 
 495              	    use: 
 496              	      T1     *buffer
 497              	      T2     temp  
 498              	************************************************/ 
 499 0362 00BF     	    _FUNC insert_line 
 500 0364 2DE90203 	    push {r1,T1,T2}
 501 0368 8046     	    mov T1,r0 
 502 036a B8F80000 	    ldrh r0,[T1]
 503 036e 00B5FFF7 	    _CALL search_lineno 
 503      FEFF5DF8 
 503      04EB
 504 0378 49B9     	    cbnz  r1, 1f // line# doesn't exist
 505              	// already exist 
 506 037a 00B5FFF7 	    _CALL delete_line // delete old one 
 506      C8FF5DF8 
 506      04EB
 507 0384 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 508 0388 B9F1040F 	    cmp T2,#4 // empty line length==4  
 509 038c 0ED0     	    beq 9f
 510              	1: //insert new line 
 511 038e 98F80210 	    ldrb r1,[T1,#2]
 512 0392 00B5FFF7 	    _CALL create_gap 
 512      D2FF5DF8 
 512      04EB
 513 039c 0146     	    mov r1,r0
 514 039e 4046     	    mov r0,T1 
 515 03a0 8278     	    ldrb r2,[r0,#2]
 516 03a2 00B5FFF7 	    _CALL cmove 
 516      FEFF5DF8 
 516      04EB
ARM GAS  tinyBasic.s 			page 23


 517 03ac BDE80203 	9:  pop {r1,T1,T2}
 518 03b0 7047     	    _RET 
 519              	
 520              	/*********************************
 521              	    compile 
 522              	    tokenize source line save it 
 523              	    in pas buffer.
 524              	    compiled line format: 
 525              	      line_no  2 bytes {0...32767}
 526              	      count    1 byte  
 527              	      tokens   variable length 
 528              	  input:
 529              	     r0   *text buffer 
 530              	     r1   *text length   
 531              	  output:
 532              	    r0    0 stored | -1 immediate 
 533              	  use:
 534              	    r3    tib index   
 535              	    T1    tib
 536              	    T2    pad
 537              	***********************************/
 538 03b2 00BF     	    _FUNC compile
 539 03b4 8046     	    mov T1, r0  // source text buffer 
 540 03b6 6160     	    str r1,[UPP,#COUNT] // save line length 
 541 03b8 DFF8F099 	    ldr T2,pad // tokens buffer
 542 03bc 83EA0303 	    eor r3,r3 // source index  
 543 03c0 206C     	    ldr r0,[UPP,#FLAGS]
 544 03c2 40F02000 	    orr r0,#FCOMP
 545 03c6 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 546 03c8 80EA0000 	    eor r0,r0     
 547 03cc 29F8020B 	    strh r0,[T2],#2   // line no 
 548 03d0 09F8010B 	    strb r0,[T2],#1 // length 
 549 03d4 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 550 03d6 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 551 03da 00B500F0 	    _CALL parse_int 
 551      62F95DF8 
 551      04EB
 552 03e4 0AD0     	    beq 2f 
 553              	// this is a line number     
 554 03e6 0129     	    cmp r1,#1 
 555 03e8 02D5     	    bpl 1f 
 556 03ea 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 557 03ee 3DE3     	    b tb_error  
 558 03f0 B1F5803F 	1:  cmp r1,#65536
 559 03f4 F9D5     	    bpl 0b 
 560              	    // write line # to pad 
 561 03f6 29F8031C 	    strh r1,[T2,#-3]
 562 03fa 2360     	    str r3,[UPP,#IN_SAVED]
 563              	2:  // check for pad full 
 564 03fc C145     	    cmp T2,T1
 565 03fe 02DB     	    blt 3f 
 566 0400 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 567 0404 32E3     	    b tb_error 
 568 0406 00B500F0 	3:  _CALL comp_token 
 568      28F85DF8 
 568      04EB
 569 0410 0028     	    cmp r0,#TK_NONE 
ARM GAS  tinyBasic.s 			page 24


 570 0412 01D0     	    beq 4f 
 571 0414 2360     	    str r3,[UPP,#IN_SAVED]
 572 0416 F1E7     	    b 2b 
 573              	4: // compilation completed 
 574 0418 DFF89039 	    ldr r3,pad 
 575 041c A9EB0300 	    sub r0,T2,r3 // line length 
 576 0420 9870     	    strb r0,[r3,#2]
 577 0422 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 578 0424 1888     	    ldrh r0,[r3] // line number 
 579 0426 70B1     	    cbz r0,8f  
 580              	// insert line in text buffer 
 581 0428 206C     	    ldr r0,[UPP,#FLAGS]
 582 042a 10F0080F 	    tst r0,#FSTOP
 583 042e 02D0     	    beq 7f 
 584 0430 4FF01000 	    mov r0,#ERR_CANT_PROG 
 585 0434 1AE3     	    b tb_error 
 586 0436 1846     	7:  mov r0,r3 
 587 0438 00B5FFF7 	    _CALL insert_line 
 587      93FF5DF8 
 587      04EB
 588 0442 4040     	    eors r0,r0 
 589 0444 08E0     	    b 9f 
 590 0446 9B46     	8:  mov BPTR,r3 // *token_list 
 591 0448 4FF0030A 	    mov IN,#3
 592 044c 206C     	    ldr r0,[UPP,#FLAGS]
 593 044e A0F12000 	    sub r0,#FCOMP
 594 0452 2064     	    str r0,[UPP,#FLAGS]
 595 0454 5FF0FF30 	    movs r0,#-1 
 596 0458 7047     	9:  _RET 
 597              	
 598              	/*********************************************
 599              	    compile next token from source 
 600              	    input: 
 601              	      r3 		tib index  
 602              	      T1    tib adr
 603              	      T2    insert point in pad  
 604              	    output:
 605              	      r0     token attribute 
 606              	      r1 		token value
 607              	      r3     tib index updated    
 608              	      T2     updated 
 609              	      use:
 610              	**********************************************/
 611              	    .macro _case c, next  
 612              	    cmp r0,#\c 
 613              	    bne \next
 614              	    .endm 
 615              	
 616 045a 00BF     	    _FUNC comp_token 
 617 045c 40B4     	    push {r6}
 618 045e 18F80300 	    ldrb r0,[T1,r3]
 619 0462 0040     	    ands r0,r0 
 620 0464 00F08780 	    beq store_r0  // reached end of text  
 621 0468 4FF02000 	    mov r0,#SPACE 
 622 046c 00B500F0 	    _CALL skip  // skip spaces 
 622      69F95DF8 
 622      04EB
ARM GAS  tinyBasic.s 			page 25


 623 0476 18F80300 	    ldrb r0,[T1,r3]
 624 047a 0040     	    ands r0,r0 
 625 047c 7BD0     	    beq store_r0  // reached end of text 
 626 047e 03F10103 	    add r3,#1
 627 0482 00B500F0 	    _CALL is_letter 
 627      92F95DF8 
 627      04EB
 628 048c 14D1     	    bne 1f
 629 048e A3F10103 	    sub r3,#1 
 630 0492 00B500F0 	    _CALL parse_label
 630      B8F85DF8 
 630      04EB
 631 049c 0B28     	    cmp r0,#TK_CMD
 632 049e 01D1     	    bne 0f 
 633 04a0 3729     	    cmp r1,#REM_IDX 
 634 04a2 4ED0     	    beq tick  
 635 04a4 09F8010B 	0:  strb r0,[T2],#1
 636 04a8 4028     	    cmp r0,#TK_LBL 
 637 04aa 02D0     	    beq 0f 
 638 04ac 09F8011B 	    strb r1,[T2],#1
 639 04b0 71E0     	    b token_exit 
 640 04b2 49F8041B 	0:  str r1,[T2],#4
 641 04b6 6EE0     	    b token_exit 
 642 04b8 00B500F0 	1:  _CALL is_special
 642      6FF85DF8 
 642      04EB
 643 04c2 DFF8A46D 	    ldr r6,=token_ofs
 644 04c6 D6E811F0 	    tbh [r6,r1] 
 645              	tok_idx0:     
 646              	//  not special char.  
 647 04ca 57E0     	    b try_number 
 648              	// single char token with no value 
 649              	single: 
 650 04cc DFF89C6D 	    ldr r6,=tok_single
 651 04d0 705C     	    ldrb r0,[r6,r1] 
 652 04d2 50E0     	    b store_r0
 653              	lt:
 654 04d4 4FF03400 	    mov r0,#TK_LT
 655 04d8 18F80310 	    ldrb r1,[T1,r3]
 656 04dc 3E29     	    cmp r1,#'>' 
 657 04de 06D0     	    beq 1f
 658 04e0 0AE0     	    b 2f 
 659              	gt:
 660 04e2 4FF03100 	    mov r0,#TK_GT 
 661 04e6 18F80310 	    ldrb r1,[T1,r3]
 662 04ea 3C29     	    cmp r1,#'<'
 663 04ec 04D1     	    bne 2f  
 664 04ee 03F10103 	1:  add r3,#1
 665 04f2 4FF03500 	    mov r0,#TK_NE  
 666 04f6 3EE0     	    b store_r0
 667 04f8 3D29     	2:  cmp r1,#'=' 
 668 04fa 3CD1     	    bne store_r0  
 669 04fc 03F10103 	    add r3,#1
 670 0500 00F10200 	    add r0,#2
 671 0504 37E0     	    b store_r0       
 672              	bkslash:
 673 0506 18F80310 	    ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 26


 674 050a 03F10103 	    add r3,#1
 675 050e 4FF00300 	    mov r0,#TK_CHAR 
 676 0512 09F8010B 	    strb r0,[T2],#1
 677 0516 09F8011B 	    strb r1,[T2],#1
 678 051a 3CE0     	    b token_exit 
 679              	prt_cmd: 
 680 051c 4FF00B00 	    mov r0,#TK_CMD 
 681 0520 4FF03301 	    mov r1,#PRT_IDX
 682 0524 09F8010B 	    strb r0,[T2],#1
 683 0528 09F8011B 	    strb r1,[T2],#1
 684 052c 33E0     	    b token_exit 
 685              	quote:
 686 052e 4FF00200 	    mov r0,#TK_QSTR 
 687 0532 09F8010B 	    strb r0,[T2],#1
 688 0536 00B500F0 	    _CALL parse_quote
 688      D0F85DF8 
 688      04EB
 689 0540 29E0     	    b token_exit
 690              	tick: 
 691              	// copy comment in pad 
 692 0542 4FF00B00 	    mov r0,#TK_CMD 
 693 0546 4FF03701 	    mov r1,#REM_IDX 
 694 054a 09F8010B 	    strb r0,[T2],#1 
 695 054e 09F8011B 	    strb r1,[T2],#1
 696 0552 08EB0300 	    add r0,T1,r3 
 697 0556 4946     	    mov r1,T2 
 698 0558 00B5FFF7 	    _CALL strcpy 
 698      FEFF5DF8 
 698      04EB
 699 0562 00B5FFF7 	    _CALL strlen 
 699      FEFF5DF8 
 699      04EB
 700 056c 8144     	    add T2,r0
 701 056e 09F10109 	    add T2,#1
 702 0572 6368     	    ldr r3,[UPP,#COUNT]
 703 0574 0FE0     	    b token_exit
 704              	store_r0: 
 705 0576 09F8010B 	    strb r0,[T2],#1
 706 057a 0CE0     	    b token_exit 
 707              	try_number:
 708 057c A3F10103 	    sub r3,#1
 709 0580 00B500F0 	    _CALL parse_int  
 709      8FF85DF8 
 709      04EB
 710 058a 00F06B82 	    beq syntax_error  
 711 058e 09F8010B 	    strb r0,[T2],#1 
 712 0592 49F8041B 	    str r1,[T2],#4
 713              	token_exit:
 714 0596 40BC     	    pop {r6}
 715 0598 7047     	    _RET 
 716              	
 717              	
 718              	/****************************
 719              	    is_special  
 720              	    check for non alphanum
 721              	    input:
 722              	      r0    character to scan 
ARM GAS  tinyBasic.s 			page 27


 723              	    output:
 724              	      r0    character 
 725              	      r1    0 || index 
 726              	    use: 
 727              	      r1    scan index 
 728              	      r2    temp 
 729              	      r3    char_list 
 730              	*****************************/
 731 059a 00BF     	    _FUNC is_special 
 732 059c 0CB4     	    push {r2,r3}
 733 059e 4FF00101 	    mov r1,#1
 734 05a2 DFF8CC3C 	    ldr r3,=char_list 
 735 05a6 5A5C     	1:  ldrb r2,[r3,r1]
 736 05a8 22B1     	    cbz r2,8f 
 737 05aa 8242     	    cmp r2,r0 
 738 05ac 04D0     	    beq 9f 
 739 05ae 01F10101 	    add r1,#1 
 740 05b2 F8E7     	    b 1b
 741 05b4 81EA0101 	8:  eor r1,r1     
 742 05b8 0CBC     	9:  pop {r2,r3}
 743 05ba 7047     	    _RET 
 744              	
 745              	char_list:
 746 05bc 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 746      28293A23 
 746      2D2B2A2F 
 746      253D3C3E 
 746      5C3F2722 
 747              	
 748              	tok_single:
 749 05d1 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 749      060701
 750 05d8 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 750      212232
 751              	  
 752 05df 00       	  .p2align 2
 753              	token_ofs:
 754 05e0 0000     	  .hword  0 // not found
 755              	  // TK_COMMA...TK_EQUAL , 13 
 756 05e2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 756      01000100 
 757 05ea 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 757      01000100 
 758 05f2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 758      01000100 
 759 05fa 0100     	  .hword  (single-tok_idx0)/2    
 760              	  // '<','>'
 761 05fc 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 762              	  // '\'
 763 0600 1E00     	  .hword  (bkslash-tok_idx0)/2
 764              	  // '?' 
 765 0602 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 766              	  // "'"  
 767 0604 3C00     	  .hword  (tick-tok_idx0)/2 
 768              	  // '"' quote 
 769 0606 3200     	  .hword (quote-tok_idx0)/2
 770              	
ARM GAS  tinyBasic.s 			page 28


 771              	  .p2align 2
 772              	
 773              	/****************************
 774              	    parse_label 
 775              	    label form: [A..Z]+
 776              	    can be a keyword, a target
 777              	    or constant name. 
 778              	    input:
 779              	      *buffer 
 780              	    output:
 781              	      T2  *label 
 782              	      R3  updated
 783              	    use:
 784              	****************************/
 785              	    _FUNC parse_label
 786 0608 24B4     	    push {r2,r5}
 787 060a 4DF8049D 	    push {T2}
 788 060e 82EA0202 	    eor r2,r2
 789 0612 4FF00605 	    mov r5,#6 
 790 0616 18F80300 	1:  ldrb r0,[T1,r3]
 791 061a 00B500F0 	    _CALL is_letter 
 791      C6F85DF8 
 791      04EB
 792 0624 09D1     	    bne 2f // not letter 
 793 0626 00B500F0 	    _CALL upper 
 793      98F85DF8 
 793      04EB
 794 0630 09F8010B 	    strb r0,[T2],#1
 795 0634 03F10103 	    add r3,#1
 796 0638 EDE7     	    b 1b 
 797 063a 80EA0000 	2:  eor r0,r0 
 798 063e 89F80000 	    strb r0,[T2]
 799              	// is this a variable ?
 800 0642 5DF8049B 	    pop {T2}
 801 0646 99F80100 	    ldrb r0,[T2,#1]
 802 064a 30B9     	    cbnz r0,3f // length >1 not variable 
 803 064c 99F80010 	    ldrb r1,[T2]
 804 0650 A1F14101 	    sub r1,#'A' 
 805 0654 4FF00400 	    mov r0,#TK_VAR
 806 0658 10E0     	    b 9f 
 807              	3:  // try keyword 
 808 065a 4846     	    mov r0,T2 
 809 065c DFF8141C 	    ldr r1,=kword_dict  
 810 0660 00B500F0 	    _CALL search_dict 
 810      C1FA5DF8 
 810      04EB
 811 066a 38B9     	    cbnz r0,9f 
 812              	// must be a label 
 813 066c 4846     	    mov r0,T2 
 814 066e 00B500F0 	    _CALL compress_label
 814      06F85DF8 
 814      04EB
 815 0678 4FF04000 	    mov r0,#TK_LBL      
 816 067c 24BC     	9:  pop {r2,r5}
 817 067e 7047     	    _RET 
 818              	
 819              	/********************************
ARM GAS  tinyBasic.s 			page 29


 820              	    compress_label 
 821              	    compress label in integer 
 822              	    maximum 6 character, 
 823              	    ignore extras characters 
 824              	    input:
 825              	      r0  *label 
 826              	    output:
 827              	      r1   compressed label 
 828              	********************************/
 829              	    _FUNC compress_label
 830 0680 0CB4     	    push {r2,r3}
 831 0682 82EA0202 	    eor r2,r2 // compress value
 832 0686 4FF00603 	    mov r3,#6 // max characters 
 833 068a 10F8011B 	1:  ldrb r1,[r0],#1 
 834 068e 31B1     	    cbz r1,2f 
 835 0690 A1F14001 	    sub r1,#'@'
 836 0694 4FEA4212 	    lsl r2,#5
 837 0698 0A44     	    add r2,r1
 838 069a 013B     	    subs r3,#1 
 839 069c F5D1     	    bne 1b 
 840 069e 1146     	2:  mov r1,r2     
 841 06a0 0CBC     	    pop {r2,r3}
 842 06a2 7047     	    _RET 
 843              	
 844              	
 845              	/****************************
 846              	    parse_int 
 847              	    parse an integer from text
 848              	    if not valid integer 
 849              	    r1 return *buffer else 
 850              	    *buffer is incremented after integer 
 851              	  input:
 852              	    r0   *buffer 
 853              	  output:
 854              	    r0   TK_INTGR|TK_NONE
 855              	    r1   int|0   
 856              	  use:
 857              	    r3   tib index updated     
 858              	*****************************/
 859              	    _FUNC parse_int 
 860 06a4 4FF00A01 	    mov r1,#10 // default base 
 861 06a8 18F80300 	    ldrb r0,[T1,r3]
 862 06ac 2428     	    cmp r0,'$' 
 863 06ae 02D1     	    bne 2f 
 864 06b0 4FF01001 	    mov r1,#16 // hexadecimal number 
 865 06b4 03E0     	    b 3f  
 866 06b6 2628     	2:  cmp r0,#'&' 
 867 06b8 03D1     	    bne 4f
 868 06ba 4FF00201 	    mov r1,#2 //binary number  
 869 06be 03F10103 	3:  add r3,#1
 870 06c2 03EB0800 	4:  add r0,r3,T1 
 871 06c6 00B5FFF7 	    _CALL atoi 
 871      FEFF5DF8 
 871      04EB
 872 06d0 10B1     	    cbz r0,9f
 873 06d2 0344     	    add r3,r0
 874 06d4 4FF00F00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 30


 875 06d8 0040     	9:  ands r0,r0   
 876 06da 7047     	    _RET 
 877              	
 878              	/*********************************************
 879              	    parse_quote 
 880              	    parse quoted string 
 881              	    input: 
 882              	      r3 		tib index  
 883              	      T1    tib adr
 884              	      T2    insert point in pad  
 885              	    output:
 886              	      r0     token attribute 
 887              	      r1 		*str 
 888              	      r3     tib index updated    
 889              	      T2     updated 
 890              	      use:
 891              	*********************************************/
 892              	    _FUNC parse_quote
 893 06dc 4DF8049D 	    push {T2} 
 894 06e0 18F80300 	1:  ldrb r0,[T1,r3]
 895 06e4 03F10103 	    add r3,#1 
 896 06e8 2228     	    cmp r0,#'"'
 897 06ea 09D0     	    beq 9f 
 898 06ec 5C28     	    cmp r0,#'\\'
 899 06ee 04D1     	    bne 2f 
 900 06f0 00B500F0 	    _CALL get_escaped_char 
 900      0DF85DF8 
 900      04EB
 901 06fa 09F8010B 	2:  strb r0,[T2],#1
 902 06fe EFE7     	    b 1b 
 903 0700 80EA0000 	9:  eor  r0,r0
 904 0704 09F8010B 	    strb r0,[T2],#1
 905 0708 4FF00200 	    mov r0,#TK_QSTR
 906 070c 02BC     	    pop {r1}
 907 070e 7047     	    _RET 
 908              	
 909              	/**********************************************
 910              	    get_escaped_char 
 911              	    convert "\c" in quoted string 
 912              	    input:
 913              	      r0 
 914              	      r3   index 
 915              	      T1   tib 
 916              	    output:
 917              	      r0   replacement char
 918              	      r3   updated 
 919              	    use:
 920              	      r1   *table 
 921              	      r2   temp 
 922              	**********************************************/
 923              	    _FUNC get_escaped_char 
 924 0710 06B4     	    push {r1,r2}
 925 0712 18F80300 	    ldrb r0,[T1,r3]
 926 0716 03F10103 	    add r3,#1
 927 071a 2228     	    cmp r0,#'"' 
 928 071c 0BD0     	    beq 9f 
 929 071e DFF8581B 	1:  ldr r1,=escaped 
ARM GAS  tinyBasic.s 			page 31


 930 0722 11F8012B 	2:  ldrb r2,[r1],#1
 931 0726 12B1     	    cbz r2,6f 
 932 0728 8242     	    cmp r2,r0 
 933 072a 02D0     	    beq 7f 
 934 072c F9E7     	    b 2b
 935 072e A0F10702 	6:  sub r2,r0,#7     
 936 0732 02F10700 	7:  add r0,r2,#7
 937 0736 06BC     	9:  pop {r1,r2}   
 938 0738 7047     	    _RET
 939              	
 940 073a 6162746E 	escaped: .asciz "abtnvfr"
 940      76667200 
 941              	
 942              	/*********************************************
 943              	   skip character in TIB 
 944              	   input:
 945              	      r0    character to skip 
 946              	      r3    tib index 
 947              	      T1    tib adr
 948              	    output: 
 949              	      r3    updated
 950              	    use:
 951              	      r1     
 952              	**********************************************/   
 953 0742 00BF     	    _FUNC skip
 954 0744 02B4     	    push {r1} 
 955 0746 18F80310 	1:  ldrb r1,[T1,r3]
 956 074a 8142     	    cmp r1,r0
 957 074c 02D1     	    bne 2f
 958 074e 03F10103 	    add r3,#1 
 959 0752 F8E7     	    b 1b 
 960 0754 2360     	2:  str r3,[UPP,#IN_SAVED]
 961 0756 02BC     	    pop {r1}
 962 0758 7047     	    _RET
 963              	
 964              	/********************************************
 965              	    upper
 966              	    convert character in upper case 
 967              	    input: 
 968              	      r0   character 
 969              	    output:
 970              	      r0   upper case character 
 971              	*********************************************/
 972 075a 00BF     	    _FUNC upper 
 973 075c 6128     	    cmp r0,#'a' 
 974 075e 03DB     	    blt 9f 
 975 0760 7A28     	    cmp r0,#'z' 
 976 0762 01DC     	    bgt 9f 
 977 0764 00F05F00 	    and r0,#0x5f 
 978 0768 7047     	9:  _RET 
 979              	
 980              	/***************************************
 981              	   is_digit 
 982              	   check if char is decimal digit.
 983              	   convert to decimal digit.
 984              	   input:
 985              	      r0    char 
ARM GAS  tinyBasic.s 			page 32


 986              	   output:
 987              	      r0        if Z then converted digit else not changed
 988              	      Z flag    1 true | 0 false  
 989              	***************************************/
 990 076a 00BF     	    _GBL_FUNC is_digit 
 991 076c 02B4     	    push {r1} 
 992 076e 4FF0FF31 	    mov r1,#-1   
 993 0772 3028     	    cmp r0,#'0' 
 994 0774 05DB     	    blt 9f
 995 0776 3A28     	    cmp r0,'9'+1
 996 0778 03D5     	    bpl 9f 
 997 077a 81EA0101 	    eor r1,r1 
 998 077e A0F13000 	    sub r0,#'0'  
 999              	9:   
 1000 0782 0940     	    ands r1,r1
 1001 0784 02BC     	    pop {r1} 
 1002 0786 7047     	    _RET 
 1003              	
 1004              	/***************************************
 1005              	    is_hex 
 1006              	    check for hexadecimal digit 
 1007              	    convert to hex digit.
 1008              	    input:
 1009              	      r0    
 1010              	    output:
 1011              	      r0         if Z then converted digit 
 1012              	      Z  flag    1 true | 0 false         
 1013              	***************************************/
 1014              	    _FUNC is_hex 
 1015 0788 02B4     	    push {r1}
 1016 078a 80EA0000 	    eor r0,r0 
 1017 078e 4128     	    cmp r0,#'A' 
 1018 0790 01D4     	    bmi 1f 
 1019 0792 A0F10700 	    sub r0,#7 
 1020 0796 A0F13000 	1:  sub r0,#'0'
 1021 079a 01D4     	    bmi 2f 
 1022 079c 1028     	    cmp r0,#16
 1023 079e 01D4     	    bmi 9f 
 1024 07a0 6FEA0101 	2:  mvn r1,r1  
 1025 07a4 0940     	9:  ands r1,r1 
 1026 07a6 02BC     	    pop {r1}
 1027 07a8 7047     	    _RET 
 1028              	
 1029              	/***************************************
 1030              	    is_letter 
 1031              	    check if character is {a..z,A..Z} 
 1032              	  input:
 1033              	    r0   character 
 1034              	  output: 
 1035              	    r0       same character 
 1036              	    Z flag   1 true | 0 false  
 1037              	****************************************/
 1038 07aa 00BF     	    _FUNC is_letter
 1039 07ac 02B4     	    push {r1} 
 1040 07ae 81EA0101 	    eor r1,r1 
 1041 07b2 4128     	    cmp r0,#'A' 
 1042 07b4 05D4     	    bmi 8f 
ARM GAS  tinyBasic.s 			page 33


 1043 07b6 5B28     	    cmp r0,#'Z'+1 
 1044 07b8 05D4     	    bmi 9f
 1045 07ba 6128     	    cmp r0,#'a' 
 1046 07bc 01D4     	    bmi 8f 
 1047 07be 7B28     	    cmp r0,#'z'+1
 1048 07c0 01D4     	    bmi 9f  
 1049 07c2 6FEA0101 	8:  mvn r1,r1  
 1050 07c6 0940     	9:  ands r1,r1 
 1051 07c8 02BC     	    pop {r1}
 1052 07ca 7047     	    _RET 
 1053              	
 1054              	
 1055              	/******************************************
 1056              	    atoi 
 1057              	    convert ascii to integer 
 1058              	    input:
 1059              	      r0   *buffer 
 1060              	      r1   base 
 1061              	    output:
 1062              	      r0   0 no integer found 
 1063              	      r1   integer
 1064              	    use:
 1065              	      r2   base  
 1066              	      T1   *buffer 
 1067              	      T2   digit count  
 1068              	******************************************/
 1069              	    _GBL_FUNC atoi 
 1070 07cc 2DE90403 	    push {r2,T1,T2}
 1071 07d0 8046     	    mov T1,r0  // *buffer 
 1072 07d2 0A46     	    mov r2,r1  // base  
 1073 07d4 81EA0101 	    eor r1,r1  // converted integer 
 1074 07d8 89EA0909 	    eor T2,T2  // digit count 
 1075 07dc 18F8010B 	1:  ldrb r0,[T1],#1
 1076 07e0 00B5FFF7 	    _CALL upper 
 1076      BBFF5DF8 
 1076      04EB
 1077 07ea 3028     	    cmp r0,#'0'
 1078 07ec 0FD4     	    bmi 8f
 1079 07ee 3A28     	    cmp r0,#'9'+1 
 1080 07f0 03D4     	    bmi 2f 
 1081 07f2 4128     	    cmp r0,#'A'
 1082 07f4 0BD4     	    bmi 8f 
 1083 07f6 A0F10700 	    sub r0,#7 
 1084 07fa A0F13000 	2:  sub r0,#'0' 
 1085 07fe 9042     	    cmp r0,r2
 1086 0800 05D5     	    bpl 8f  
 1087 0802 02FB01F1 	    mul r1,r2 
 1088 0806 0144     	    add r1,r0
 1089 0808 09F10109 	    add T2,#1
 1090 080c E6E7     	    b 1b 
 1091 080e 4846     	8:  mov r0,T2  
 1092 0810 BDE80403 	    pop {r2,T1,T2}
 1093 0814 7047     	    _RET 
 1094              	
 1095              	
 1096              	
 1097              	/*******************
ARM GAS  tinyBasic.s 			page 34


 1098              	    DECOMPILER 
 1099              	*******************/
 1100              	
 1101              	/********************************************
 1102              	    cmd_name 
 1103              	    search bytecode in dictionary and 
 1104              	    return its name 
 1105              	  input:
 1106              	    r0    keyword bytecode 
 1107              	  ouput:
 1108              	    r0    name string 
 1109              	  use:
 1110              	    T1    link 
 1111              	    T2    tmp 
 1112              	*********************************************/
 1113 0816 00BF     	    _FUNC cmd_name 
 1114 0818 2DE90003 	    push {T1,T2}
 1115 081c DFF8548A 	    ldr T1,=kword_dict 
 1116 0820 58F8089C 	1:  ldr T2,[T1,#-8]
 1117 0824 8145     	    cmp T2,r0 
 1118 0826 04D0     	    beq 2f 
 1119 0828 58F80C8C 	    ldr T1,[T1,#-12]
 1120 082c B8F1000F 	    cmp T1,#0
 1121 0830 F6D1     	    bne 1b  
 1122 0832 4046     	2:  mov r0,T1 
 1123 0834 BDE80003 	    pop {T1,T2}
 1124 0838 7047     	    _RET
 1125              	
 1126              	/*****************************
 1127              	  decompile_line 
 1128              	  detokenize BASIC line 
 1129              	  input:
 1130              	    r0  *token list 
 1131              	    r1  *output buffer 
 1132              	  output:
 1133              	    r0  *output buffer (.asciz) 
 1134              	  use:
 1135              	    T1  *output buffer
 1136              	    BPTR  *token list
 1137              	    IN  offset in token list  
 1138              	******************************/
 1139 083a 00BF     	    _GBL_FUNC decompile_line
 1140 083c 2DE90E01 	    push {r1,r2,r3,T1} 
 1141 0840 8346     	    mov BPTR,r0 
 1142 0842 4FF0000A 	    mov IN,#0
 1143 0846 8846     	    mov T1,r1 
 1144 0848 3BF80A00 	    ldrh r0,[BPTR,IN]
 1145 084c 0AF1020A 	    add IN,#2 
 1146 0850 4FF00A01 	    mov r1,#10 
 1147 0854 00B5FFF7 	    _CALL itoa
 1147      FEFF5DF8 
 1147      04EB
 1148 085e 4146     	    mov r1,T1
 1149 0860 00B5FFF7 	    _CALL strcpy
 1149      FEFF5DF8 
 1149      04EB
 1150 086a 4046     	    mov r0,T1 
ARM GAS  tinyBasic.s 			page 35


 1151 086c 00B5FFF7 	    _CALL strlen
 1151      FEFF5DF8 
 1151      04EB
 1152 0876 8044     	    add T1,r0 
 1153 0878 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1154 087c 0AF1010A 	    add IN,#1 
 1155 0880 6060     	    str r0,[UPP,#COUNT]
 1156              	decomp_loop:
 1157 0882 00B500F0 	    _CALL next_token
 1157      E8FA5DF8 
 1157      04EB
 1158 088c 0028     	    cmp r0,#TK_NONE 
 1159 088e 00F0B480 	    beq 9f  
 1160 0892 0F28     	    cmp r0,#TK_INTGR 
 1161 0894 15D1     	    bne 1f 
 1162 0896 0846     	    mov r0,r1 
 1163 0898 A169     	    ldr r1,[UPP,#BASE]
 1164 089a 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 08a4 01B4     	    push {r0}
 1166 08a6 4146     	    mov r1,T1 
 1167 08a8 00B5FFF7 	    _CALL strcpy
 1167      FEFF5DF8 
 1167      04EB
 1168 08b2 01BC     	    pop {r0} 
 1169 08b4 00B5FFF7 	    _CALL strlen
 1169      FEFF5DF8 
 1169      04EB
 1170 08be 8044     	    add T1,r0 
 1171 08c0 DFE7     	    b decomp_loop 
 1172 08c2 4028     	1:  cmp r0,#TK_LBL
 1173 08c4 13D1     	    bne 1f
 1174 08c6 4FF01902 	    mov r2,#25
 1175 08ca 4FF6FF73 	    mov r3,#0xffff 
 1176 08ce C3F6FF73 	    movt r3,#0x3fff 
 1177 08d2 01EA0301 	0:  and r1,r3 
 1178 08d6 4FEA5313 	    lsr r3,#5 
 1179 08da 31FA02F0 	    lsrs r0,r1,r2 
 1180 08de 03D0     	    beq 2f
 1181 08e0 00F14000 	    add r0,#'@'
 1182 08e4 08F8010B 	    strb r0,[T1],#1
 1183 08e8 053A     	2:  subs r2,#5 
 1184 08ea F2DA     	    bge 0b 
 1185 08ec C9E7     	    b decomp_loop
 1186 08ee 0428     	1:  cmp r0,#TK_VAR 
 1187 08f0 04D1     	    bne 2f 
 1188 08f2 01F14100 	    add r0,r1,'A'
 1189 08f6 08F8010B 	    strb r0,[T1],#1 
 1190 08fa C2E7     	    b decomp_loop 
 1191 08fc 0328     	2:  cmp r0,#TK_CHAR 
 1192 08fe 0AD1     	    bne 3f 
 1193 0900 4FF05C00 	    mov r0,#'\\'
 1194 0904 08F8010B 	    strb r0,[T1],#1
 1195 0908 08F8011B 	    strb r1,[T1],#1
 1196 090c 4FF02000 	    mov r0,#SPACE 
 1197 0910 08F8010B 	    strb r0,[T1],#1
ARM GAS  tinyBasic.s 			page 36


 1198 0914 B5E7     	    b decomp_loop 
 1199 0916 0228     	3:  cmp r0,#TK_QSTR 
 1200 0918 17D1     	    bne 4f 
 1201 091a 4FF02200 	    mov r0,#'"'
 1202 091e 08F8010B 	    strb r0,[T1],#1 
 1203 0922 0846     	    mov r0,r1
 1204 0924 02B4     	    push {r1}
 1205 0926 4146     	    mov r1,T1  
 1206 0928 00B5FFF7 	    _CALL strcpy
 1206      FEFF5DF8 
 1206      04EB
 1207 0932 01BC     	    pop {r0}
 1208 0934 00B5FFF7 	    _CALL strlen 
 1208      FEFF5DF8 
 1208      04EB
 1209 093e 8044     	    add T1,r0 
 1210 0940 4FF02200 	    mov r0,#'"'
 1211 0944 08F8010B 	    strb r0,[T1],#1 
 1212 0948 9BE7     	    b decomp_loop
 1213 094a 0B28     	4:  cmp r0,#TK_CMD
 1214 094c 3DD4     	    bmi 5f 
 1215 094e 0F28     	    cmp r0,#TK_INTGR 
 1216 0950 3BD5     	    bpl 5f
 1217 0952 4FF02000 	    mov r0,#SPACE 
 1218 0956 08F8010B 	    strb r0,[T1],#1  
 1219 095a 0846     	    mov r0,r1
 1220 095c 3328     	    cmp r0,#PRT_IDX 
 1221 095e 04D1     	    bne 1f  
 1222 0960 4FF03F00 	    mov r0,#'?'
 1223 0964 08F8010B 	    strb r0,[T1],#1 
 1224 0968 2AE0     	    b 3f 
 1225 096a 3728     	1:  cmp r0,#REM_IDX
 1226 096c 15D1     	    bne 1f
 1227 096e 4FF02700 	    mov r0,#'\''
 1228 0972 08F8010B 	    strb r0,[T1],#1 
 1229 0976 0BEB0A00 	    add r0,BPTR,IN
 1230 097a 4146     	    mov r1,T1   
 1231 097c 00B5FFF7 	    _CALL strcpy
 1231      FEFF5DF8 
 1231      04EB
 1232 0986 4046     	    mov r0,T1 
 1233 0988 00B5FFF7 	    _CALL strlen
 1233      FEFF5DF8 
 1233      04EB
 1234 0992 8044     	    add T1,r0
 1235 0994 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1236 0998 2FE0     	    b 9f 
 1237 099a 00B5FFF7 	1:  _CALL cmd_name
 1237      3CFF5DF8 
 1237      04EB
 1238 09a4 01B4     	2:  push {r0}
 1239 09a6 4146     	    mov r1,T1 
 1240 09a8 00B5FFF7 	    _CALL strcpy 
 1240      FEFF5DF8 
 1240      04EB
 1241 09b2 01BC     	    pop {r0}
 1242 09b4 00B5FFF7 	    _CALL strlen 
ARM GAS  tinyBasic.s 			page 37


 1242      FEFF5DF8 
 1242      04EB
 1243 09be 8044     	    add T1,r0 
 1244 09c0 4FF02000 	3:  mov r0,#SPACE 
 1245 09c4 08F8010B 	    strb r0,[T1],#1 
 1246 09c8 5BE7     	    b decomp_loop
 1247 09ca 01B4     	5:  push {r0}
 1248 09cc DFF8AC18 	    ldr r1,=single_char 
 1249 09d0 085C     	    ldrb r0,[r1,r0]
 1250 09d2 02BC     	    pop {r1}
 1251 09d4 10B1     	    cbz r0,6f 
 1252 09d6 08F8010B 	    strb r0,[T1],#1 
 1253 09da 52E7     	    b decomp_loop
 1254 09dc 3329     	6:  cmp r1,#TK_GE 
 1255 09de 02D1     	    bne 7f 
 1256 09e0 DFF89C08 	    ldr r0,=ge_str
 1257 09e4 DEE7     	    b 2b 
 1258 09e6 3629     	7:  cmp r1,#TK_LE 
 1259 09e8 02D1     	    bne 8f
 1260 09ea DFF89808 	    ldr r0,=le_str
 1261 09ee D9E7     	    b 2b
 1262 09f0 3529     	8:  cmp r1,#TK_NE 
 1263 09f2 02D1     	    bne 9f 
 1264 09f4 DFF89008 	    ldr r0,=ne_str 
 1265 09f8 D4E7     	    b 2b 
 1266 09fa 80EA0000 	9:  eor r0,r0 
 1267 09fe 88F80000 	    strb r0,[T1]
 1268 0a02 BDE80E01 	    pop {r1,r2,r3,T1}
 1269 0a06 0846     	    mov r0,r1 
 1270 0a08 7047     	    _RET 
 1271              	
 1272 0a0a 3E3D00   	ge_str: .asciz ">="
 1273 0a0d 3C3D00   	le_str: .asciz "<="
 1274 0a10 3C3E00   	ne_str: .asciz "<>"
 1275              	
 1276              	single_char:
 1277 0a13 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1277      00402829 
 1277      2C3B23
 1278 0a1e 00000000 	  .space 5
 1278      00
 1279 0a23 2B2D     	  .byte '+', '-'
 1280 0a25 00000000 	  .space 14
 1280      00000000 
 1280      00000000 
 1280      0000
 1281 0a33 2A2F25   	  .byte '*', '/', '%'
 1282 0a36 00000000 	  .space 14
 1282      00000000 
 1282      00000000 
 1282      0000
 1283 0a44 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1283      0000
 1284              	
 1285              	
 1286              	/**********************************
 1287              	  modulo 
ARM GAS  tinyBasic.s 			page 38


 1288              	  compute r0 mod r1
 1289              	  input:
 1290              	    r0   dividend
 1291              	    r1   divisor 
 1292              	  output:
 1293              	    r0   TK_INTGR 
 1294              	    r1   r0 mod r1 
 1295              	*********************************/
 1296 0a4a 00BF     	    _GBL_FUNC modulo 
 1297 0a4c 01B4     	    push {r0}
 1298 0a4e B0FBF1F0 	    udiv r0,r1 
 1299 0a52 01FB00F0 	    mul  r0,r1 
 1300 0a56 02BC     	    pop {r1}
 1301 0a58 A1EB0001 	    sub r1,r0
 1302 0a5c 4FF00F00 	    mov r0,#TK_INTGR
 1303 0a60 7047     	    _RET 
 1304              	
 1305              	/**********************************
 1306              	      BASIC commands 
 1307              	**********************************/
 1308              	
 1309              	/*********************************
 1310              	    syntax_error 
 1311              	    display syntax error message and 
 1312              	    abort program 
 1313              	  input:
 1314              	    none  
 1315              	  output: 
 1316              	    none 
 1317              	  use:
 1318              	*********************************/
 1319 0a62 00BF     	    _FUNC syntax_error 
 1320 0a64 4FF00200 	    mov r0,#ERR_SYNTAX
 1321 0a68 00E0     	    b tb_error 
 1322              	
 1323              	/*********************************
 1324              	    tb_error 
 1325              	    display BASIC error and 
 1326              	    abort program. 
 1327              	  input:
 1328              	    r0    error code   
 1329              	  output: 
 1330              	    none 
 1331              	  use:
 1332              	    r1    temp 
 1333              	*********************************/
 1334 0a6a 00BF     	    _FUNC tb_error 
 1335 0a6c 216C     	    ldr r1,[UPP,#FLAGS]
 1336 0a6e 11F0200F 	    tst r1,#FCOMP
 1337 0a72 43D1     	    bne compile_error
 1338              	rt_error:
 1339 0a74 5246     	    mov r2,IN 
 1340 0a76 01B4     	    push {r0}
 1341 0a78 DFF81008 	    ldr r0,=rt_error_msg 
 1342 0a7c 00B5FFF7 	    _CALL uart_puts 
 1342      FEFF5DF8 
 1342      04EB
ARM GAS  tinyBasic.s 			page 39


 1343 0a86 01BC     	    pop {r0}
 1344 0a88 DFF80418 	    ldr r1,=err_msg  
 1345 0a8c 4FEA8000 	    lsl r0,#2 
 1346 0a90 0858     	    ldr r0,[r1,r0]
 1347 0a92 00B5FFF7 	    _CALL uart_puts
 1347      FEFF5DF8 
 1347      04EB
 1348              	// decompile and print faulty line      
 1349 0a9c 5846     	    mov r0,BPTR
 1350 0a9e 5246     	    mov r2,IN  
 1351 0aa0 DFF80813 	    ldr r1,pad 
 1352 0aa4 00B5FFF7 	    _CALL decompile_line
 1352      FEFF5DF8 
 1352      04EB
 1353 0aae 00B5FFF7 	    _CALL uart_puts 
 1353      FEFF5DF8 
 1353      04EB
 1354 0ab8 00B5FFF7 	    _CALL cr 
 1354      FEFF5DF8 
 1354      04EB
 1355              	// print error offset on line      
 1356 0ac2 DFF8D007 	    ldr r0,=token_at_msg 
 1357 0ac6 00B5FFF7 	    _CALL uart_puts 
 1357      FEFF5DF8 
 1357      04EB
 1358 0ad0 1046     	    mov r0,r2 
 1359 0ad2 4FF01001 	    mov r1,#16 
 1360 0ad6 00B5FFF7 	    _CALL print_int
 1360      FEFF5DF8 
 1360      04EB
 1361 0ae0 00B5FFF7 	    _CALL cr
 1361      FEFF5DF8 
 1361      04EB
 1362              	// dump tokenize line 
 1363 0aea 5846     	    mov r0,BPTR
 1364 0aec 8278     	    ldrb r2,[r0,#2]
 1365 0aee 00B500F0 	    _CALL dump01 
 1365      DBF95DF8 
 1365      04EB
 1366 0af8 FFF7FEBF 	    b warm_start 
 1367              	compile_error:
 1368 0afc DFF89017 	    ldr r1,=err_msg 
 1369 0b00 4FEA8000 	    lsl r0,#2 
 1370 0b04 0858     	    ldr r0,[r1,r0]
 1371 0b06 00B5FFF7 	    _CALL uart_puts
 1371      FEFF5DF8 
 1371      04EB
 1372 0b10 A068     	    ldr r0,[UPP,#BASICPTR]
 1373 0b12 00B5FFF7 	    _CALL uart_puts
 1373      FEFF5DF8 
 1373      04EB
 1374 0b1c 00B5FFF7 	    _CALL cr
 1374      FEFF5DF8 
 1374      04EB
 1375 0b26 2068     	    ldr r0,[UPP,#IN_SAVED]
 1376 0b28 00B5FFF7 	    _CALL spaces 
 1376      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 40


 1376      04EB
 1377 0b32 4FF05E00 	    mov r0,#'^' 
 1378 0b36 00B5FFF7 	    _CALL uart_putc
 1378      FEFF5DF8 
 1378      04EB
 1379 0b40 00B5FFF7 	    _CALL cr
 1379      FEFF5DF8 
 1379      04EB
 1380 0b4a FFF7FEBF 	    b  warm_start  
 1381              	    
 1382 0b4e 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1382      74696D65 
 1382      20657272 
 1382      6F723A20 
 1382      00
 1383 0b5f 746F6B65 	token_at_msg: .asciz "token offset: "
 1383      6E206F66 
 1383      66736574 
 1383      3A2000
 1384              	
 1385              	
 1386              	err_msg:
 1387 0b6e 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1387      00000000 
 1387      0D000000 
 1387      1B000000 
 1387      34000000 
 1388 0b86 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1388      6F000000 
 1388      89000000 
 1388      9A000000 
 1388      AB000000 
 1389 0b9a B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1389      EA000000 
 1389      FA000000 
 1389      0E010000 
 1389      21010000 
 1390 0bae 2E010000 	   .word err_cant_prog 
 1391              	
 1392              	    .section .rodata.tb_error 
 1393              	
 1394 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1394      72792066 
 1394      756C6C0A 
 1394      00
 1395 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1395      61782065 
 1395      72726F72 
 1395      0A00
 1396 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1396      206F7065 
 1396      72617469 
 1396      6F6E206F 
 1396      76657266 
 1397 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1397      73696F6E 
 1397      20627920 
ARM GAS  tinyBasic.s 			page 41


 1397      300A00
 1398 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1398      6C696420 
 1398      6C696E65 
 1398      206E756D 
 1398      6265722E 
 1399 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1399      74696D65 
 1399      206F6E6C 
 1399      79207573 
 1399      6167652E 
 1400 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1400      616E6420 
 1400      6C696E65 
 1400      206F6E6C 
 1400      79207573 
 1401 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1401      69636174 
 1401      65206E61 
 1401      6D652E0A 
 1401      00
 1402 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1402      206E6F74 
 1402      20666F75 
 1402      6E642E0A 
 1402      00
 1403 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1403      76616C75 
 1403      652E0A00 
 1404 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1404      20696E20 
 1404      65787465 
 1404      6E646564 
 1404      206D656D 
 1405 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1405      61746120 
 1405      666F756E 
 1405      642E0A00 
 1406 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1406      726F6772 
 1406      616D2069 
 1406      6E205241 
 1406      4D210A00 
 1407 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1407      20737973 
 1407      74656D20 
 1407      66756C6C 
 1407      2E0A00
 1408 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1408      65722066 
 1408      756C6C0A 
 1408      00
 1409 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1409      74206D6F 
 1409      64696679 
 1409      2070726F 
 1409      6772616D 
ARM GAS  tinyBasic.s 			page 42


 1410              	
 1411 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1411      2074696D 
 1411      65206572 
 1411      726F722C 
 1411      2000
 1412 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1412      70696C65 
 1412      20657272 
 1412      6F722C20 
 1412      00
 1413 018d 6C617374 	tk_id: .asciz "last token id: "
 1413      20746F6B 
 1413      656E2069 
 1413      643A2000 
 1414              	
 1415              	
 1416              	    .section  .text , "ax", %progbits 
 1417              	
 1418              	/*********************************
 1419              	   skip_line 
 1420              	   data and remark line are skipped
 1421              	   by the interpreter 
 1422              	***********************************/
 1423 0bb2 00BF     	    _FUNC skip_line 
 1424 0bb4 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1425 0bb8 7047     	    _RET 
 1426              	
 1427              	
 1428              	/*********************************
 1429              	   BASIC: BTGL adr, mask   
 1430              	   toggle bits [adr]=[adr]^mask  
 1431              	   input:
 1432              	     r0    adr 
 1433              	     r1    mask 
 1434              	    output;
 1435              	      none 
 1436              	    use:
 1437              	      T1   temp
 1438              	      T2   temp  
 1439              	*******************************/     
 1440 0bba 00BF     	    _FUNC BTGL 
 1441              	
 1442 0bbc 7047     	    _RET 
 1443              	
 1444              	/***************************************
 1445              	   kword_cmp
 1446              	   compare keyword to dict entry
 1447              	  input:
 1448              	    r0  keyword 
 1449              	    r1  dict entry 
 1450              	    r2  character count 
 1451              	  output:
 1452              	    r0  0 not same | -1 same 
 1453              	  use:
 1454              	    r6   result  
 1455              	    T1   char 1
ARM GAS  tinyBasic.s 			page 43


 1456              	    T2   char 2
 1457              	**************************************/   
 1458 0bbe 00BF     	    _FUNC kword_cmp 
 1459 0bc0 2DE94003 	    push {r6,T1,T2}
 1460 0bc4 4FF0FF36 	    mov r6,#-1 
 1461 0bc8 4AB1     	1:  cbz r2,9f       
 1462 0bca 10F8018B 	    ldrb T1,[r0],#1
 1463 0bce 11F8019B 	    ldrb T2,[r1],#1
 1464 0bd2 A2F10102 	    sub r2,#1
 1465 0bd6 C845     	    cmp T1,T2
 1466 0bd8 F6D0     	    beq 1b 
 1467 0bda 86EA0606 	    eor r6,r6  
 1468 0bde 3046     	9:  mov r0,r6
 1469 0be0 BDE84003 	    pop {r6,T1,T2}
 1470 0be4 7047     	    _RET 
 1471              	
 1472              	/***********************************************
 1473              	    search_dict 
 1474              	    search keyword in dictionary
 1475              	   input:
 1476              	  	 r0   keyword 
 1477              	     r1		dictionary first name field address  
 1478              	   output:
 1479              	     r0 		token attribute 
 1480              	     r1		  cmd_index if r0!=TK_NONE  
 1481              	   use:
 1482              	     r3   length keyword 
 1483              	     T1   keyword
 1484              	     T2   link  
 1485              	**********************************************/
 1486 0be6 00BF     	  _FUNC search_dict
 1487 0be8 2DE90C03 	  push {r2,r3,T1,T2}
 1488 0bec 8046     	  mov T1,r0 
 1489 0bee 00B5FFF7 	  _CALL strlen 
 1489      FEFF5DF8 
 1489      04EB
 1490 0bf8 0346     	  mov r3,r0  
 1491              	1:  
 1492 0bfa 8946     	   mov T2,r1  // keep for linking   
 1493 0bfc 0878     	   ldrb r0,[r1] 
 1494 0bfe 78B1     	   cbz r0,9f // null byte, end of dictionary
 1495 0c00 4046     	   mov r0,T1
 1496 0c02 1A46     	   mov r2,r3   
 1497 0c04 00B5FFF7 	   _CALL kword_cmp  
 1497      DBFF5DF8 
 1497      04EB
 1498 0c0e 18B9     	   cbnz r0,2f 
 1499 0c10 4946     	   mov r1,T2
 1500 0c12 51F80C1C 	   ldr r1,[r1,#-12]
 1501 0c16 F0E7     	   b 1b   
 1502              	2: // found
 1503 0c18 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1504 0c1c 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1505 0c20 BDE80C03 	9: pop {r2,r3,T1,T2}
 1506 0c24 7047     	   _RET 
 1507              	
 1508              	
ARM GAS  tinyBasic.s 			page 44


 1509              	/**************************
 1510              	    INTERPRETER 
 1511              	*************************/
 1512              	
 1513              	/*********************************
 1514              	   cold_start 
 1515              	   initialize BASIC interpreter 
 1516              	   never leave 
 1517              	   input:
 1518              	     none 
 1519              	   output:
 1520              	    none 
 1521              	*********************************/
 1522              	  .type cold_start, %function 
 1523              	  .global cold_start 
 1524              	cold_start: 
 1525 0c26 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1525      C2F20004 
 1526 0c2e DFF85400 	    ldr r0,src_addr 
 1527 0c32 DFF85410 	    ldr r1,dest_addr
 1528 0c36 0968     	    ldr r1,[r1] 
 1529 0c38 0C44     	    add UPP,r1 // system variables base address   
 1530              	// clear RAM
 1531 0c3a 2046     	    mov r0,UPP  
 1532 0c3c DFF86811 	    ldr r1,tib 
 1533 0c40 82EA0202 	    eor r2,r2 
 1534 0c44 40F8042B 	1:  str r2,[r0],#4 
 1535 0c48 8842     	    cmp r0,r1 
 1536 0c4a FBD4     	    bmi 1b 
 1537              	//copy initialized system variables to ram 
 1538 0c4c DFF83400 	    ldr r0,src_addr 
 1539 0c50 2146     	    mov r1,UPP 
 1540 0c52 DFF83820 	    ldr r2,sysvar_size
 1541 0c56 00B5FFF7 	    _CALL cmove
 1541      FEFF5DF8 
 1541      04EB
 1542 0c60 00B500F0 	    _CALL prt_version
 1542      15F85DF8 
 1542      04EB
 1543 0c6a 00B500F0 	    _CALL clear_basic 
 1543      62F85DF8 
 1543      04EB
 1544 0c74 00B5FFF7 	    _CALL search_free 
 1544      FEFF5DF8 
 1544      04EB
 1545 0c7e E062     	    str r0,[UPP,#FSFREE] 
 1546 0c80 FFF7FEBF 	    b warm_start    
 1547              	src_addr:
 1548 0c84 00000000 	  .word uzero
 1549              	dest_addr:
 1550 0c88 00000000 	  .word vectors_size
 1551 0c8c D4000000 	sysvar_size: .word ulast-uzero 
 1552              	
 1553              	/************************************
 1554              	    print firmware version 
 1555              	    input: 
 1556              	      none 
ARM GAS  tinyBasic.s 			page 45


 1557              	    output:
 1558              	      none 
 1559              	    use:
 1560              	      r0 
 1561              	***********************************/
 1562              	    _FUNC prt_version 
 1563 0c90 DFF80406 	    ldr r0,=version_msg 
 1564 0c94 00B5FFF7 	    _CALL uart_puts
 1564      FEFF5DF8 
 1564      04EB
 1565 0c9e 9FF87400 	    ldrb r0,version 
 1566 0ca2 4FEA1010 	    lsr r0,#4 
 1567 0ca6 00F13000 	    add r0,#'0' 
 1568 0caa 3A28     	    cmp r0,#'9'+1 
 1569 0cac 01D4     	    bmi 1f 
 1570 0cae 00F10700 	    add r0,#7 
 1571              	  1:
 1572 0cb2 00B5FFF7 	    _CALL uart_putc 
 1572      FEFF5DF8 
 1572      04EB
 1573 0cbc 4FF02E00 	    mov r0,#'. 
 1574 0cc0 00B5FFF7 	    _CALL uart_putc 
 1574      FEFF5DF8 
 1574      04EB
 1575 0cca 9FF84800 	    ldrb r0,version 
 1576 0cce 00F00F00 	    and r0,#15 
 1577 0cd2 00F13000 	    add r0,'0' 
 1578 0cd6 3A28     	    cmp r0,#'9'+1 
 1579 0cd8 01D4     	    bmi 1f 
 1580 0cda 00F10700 	    add r0,#7
 1581              	  1: 
 1582 0cde 00B5FFF7 	    _CALL uart_putc 
 1582      FEFF5DF8 
 1582      04EB
 1583 0ce8 00B5FFF7 	    _CALL cr
 1583      FEFF5DF8 
 1583      04EB
 1584 0cf2 7047     	    _RET  
 1585              	version_msg:
 1586 0cf4 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1586      65207069 
 1586      6C6C2074 
 1586      696E7920 
 1586      42415349 
 1587              	version:
 1588 0d14 10       	    .byte 0x10 
 1589 0d15 0000BF   	    .p2align 2 
 1590              	
 1591              	
 1592              	/*****************************
 1593              	    clear_vars 
 1594              	    initialize variables to 0
 1595              	  input:
 1596              	    none 
 1597              	  output:
 1598              	    none 
 1599              	  use:
ARM GAS  tinyBasic.s 			page 46


 1600              	    r0,r1,r2 
 1601              	*****************************/
 1602              	    _FUNC clear_vars 
 1603 0d18 07B4     	    push {r0,r1,r2}
 1604 0d1a 80EA0000 	    eor r0,r0 
 1605 0d1e 04F16001 	    add r1,UPP,#VARS
 1606 0d22 4FF01A02 	    mov r2,#26
 1607 0d26 41F8040B 	1:  str r0,[r1],#4 
 1608 0d2a 013A     	    subs r2,#1
 1609 0d2c FBD1     	    bne 1b  
 1610 0d2e 07BC     	    pop {r0,r1,r2}
 1611 0d30 7047     	    _RET 
 1612              	
 1613              	/*****************************
 1614              	   clear_basic 
 1615              	   reset BASIC system variables 
 1616              	   and clear variables and RAM 
 1617              	*****************************/
 1618 0d32 00BF     	    _FUNC clear_basic
 1619 0d34 80EA0000 	  	eor r0,r0
 1620 0d38 2064     	    str r0,[UPP,#FLAGS] 
 1621 0d3a 6060     	    str r0,[UPP,#COUNT]
 1622 0d3c 2060     	    str r0,[UPP,#IN_SAVED]
 1623 0d3e A060     	    str r0,[UPP,#BASICPTR]
 1624 0d40 E060     	    str r0,[UPP,#DATAPTR]
 1625 0d42 2061     	    str r0,[UPP,#DATA]
 1626 0d44 6061     	    str r0,[UPP,#DATALEN]
 1627 0d46 04F1D000 	    add r0,UPP,#BASIC_START 
 1628 0d4a 00F11000 	    add r0,#16 
 1629 0d4e 6FF00F01 	    mvn r1,#15
 1630 0d52 00EA0100 	    and r0,r1 
 1631 0d56 2063     	    str r0,[UPP,#TXTBGN]
 1632 0d58 6063     	    str r0,[UPP,#TXTEND]
 1633 0d5a C4F8D000 	    str r0,[UPP,#HERE]
 1634 0d5e 00B5FFF7 	    _CALL clear_vars
 1634      DAFF5DF8 
 1634      04EB
 1635 0d68 206B     	    ldr r0,[UPP,#TXTBGN]
 1636 0d6a DFF83C10 	    ldr r1,tib 
 1637 0d6e 82EA0202 	    eor r2,r2 
 1638 0d72 40F8042B 	1:  str r2,[r0],#4
 1639 0d76 8842     	    cmp r0,r1 
 1640 0d78 FBD4     	    bmi 1b 
 1641 0d7a 7047     	    _RET  
 1642              	
 1643              	/***********************************
 1644              	   warm_init 
 1645              	   initialize interpreter context 
 1646              	  input:
 1647              	    none
 1648              	  output:
 1649              	    none 
 1650              	  use:
 1651              	    r0 
 1652              	***********************************/
 1653              	warm_init:
 1654              	// reset data stack       
ARM GAS  tinyBasic.s 			page 47


 1655 0d7c DFF824C0 	    ldr DP,dstack 
 1656 0d80 4FF0000A 	    mov IN,#0 // BASIC line index 
 1657 0d84 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1658 0d88 80EA0000 	    eor r0,r0 
 1659 0d8c 6060     	    str r0,[UPP,#COUNT]  
 1660 0d8e 2064     	    str r0,[UPP,#FLAGS]
 1661 0d90 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1662 0d92 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1663 0d96 6064     	    str r0,[UPP,#TAB_WIDTH]
 1664 0d98 4FF00A00 	    mov r0,#10 // default base decimal 
 1665 0d9c A061     	    str r0,[UPP,#BASE]
 1666 0d9e 7047     	    _RET  
 1667              	
 1668 0da0 00000000 	mstack: .word _mstack 
 1669 0da4 00000000 	dstack: .word _dstack 
 1670 0da8 00000000 	tib: .word _tib 
 1671 0dac 00000000 	pad: .word _pad 
 1672 0db0 FCFFFFFF 	array: .word _pad - 4 
 1673 0db4 0A524541 	ready: .asciz "\nREADY" 
 1673      445900
 1674              	
 1675              	/**********************************
 1676              	    warm_start 
 1677              	    start BASIC interpreter doesn't  
 1678              	    reset variables and code space 
 1679              	  input:
 1680              	    none 
 1681              	  output:
 1682              	    none 
 1683              	**********************************/
 1684 0dbb 00       	    _GBL_FUNC warm_start 
 1685              	// initialise parameters stack
 1686 0dbc FFF7DEFF 	    bl warm_init
 1687              	// reset main stack 
 1688 0dc0 5FF82400 	    ldr r0,mstack
 1689 0dc4 8546     	    mov sp,r0 
 1690 0dc6 DFF8D404 	    ldr r0,=ready 
 1691 0dca 00B5FFF7 	    _CALL uart_puts 
 1691      FEFF5DF8 
 1691      04EB
 1692              	// fall in cmd_line 
 1693              	
 1694              	/**********************************
 1695              	   cmd_line 
 1696              	   shell command line 
 1697              	   input:
 1698              	      none 
 1699              	   output:
 1700              	      none 
 1701              	   use:
 1702              	
 1703              	***********************************/
 1704              	    _FUNC cmd_line 
 1705 0dd4 00B5FFF7 	    _CALL cr
 1705      FEFF5DF8 
 1705      04EB
 1706 0dde 80EA0000 	    eor r0,r0 
ARM GAS  tinyBasic.s 			page 48


 1707 0de2 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1708 0de6 5FF84000 	1:  ldr r0,tib
 1709 0dea 4FF05001 	    mov r1,#TIB_SIZE 
 1710 0dee 00B5FFF7 	    _CALL readln 
 1710      FEFF5DF8 
 1710      04EB
 1711 0df8 0940     	    ands r1,r1 // empty line 
 1712 0dfa F4D0     	    beq 1b 
 1713 0dfc 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1713      D9FA5DF8 
 1713      04EB
 1714 0e06 EED0     	    beq 1b  // tokens stored in text area 
 1715              	// interpret tokenized line 
 1716              	interpreter:
 1717 0e08 00B500F0 	  _CALL next_token 
 1717      25F85DF8 
 1717      04EB
 1718 0e12 0028     	  cmp r0,#TK_NONE 
 1719 0e14 F8D0     	  beq interpreter    
 1720 0e16 4028     	  cmp r0,#TK_LBL 
 1721 0e18 F6D0     	  beq interpreter 
 1722 0e1a 0B28     	  cmp r0,#TK_CMD 
 1723 0e1c 03D1     	  bne 2f
 1724 0e1e 0846     	  mov r0,r1 
 1725 0e20 00F014F8 	  bl execute  
 1726 0e24 F0E7     	  b interpreter   
 1727              	2: 
 1728 0e26 0428     	  cmp r0,#TK_VAR 
 1729 0e28 05D1     	  bne 3f 
 1730 0e2a 00B500F0 	  _CALL let_var 
 1730      7BFB5DF8 
 1730      04EB
 1731 0e34 E8E7     	  b interpreter 
 1732              	3: 
 1733 0e36 0528     	  cmp r0,#TK_ARRAY 
 1734 0e38 05D1     	  bne 4f
 1735 0e3a 00B500F0 	  _CALL let_array 
 1735      81FB5DF8 
 1735      04EB
 1736 0e44 E0E7     	  b interpreter
 1737              	4: 
 1738 0e46 0128     	  cmp r0,#TK_COLON
 1739 0e48 DED0     	  beq interpreter
 1740 0e4a 0BE6     	  b syntax_error
 1741              	
 1742              	/*****************************
 1743              	    execute 
 1744              	    execute a BASIC routine from 
 1745              	    its token value 
 1746              	  input:
 1747              	    r0  BASIC SUB|FUNC token  
 1748              	  output: 
 1749              	    depend on SUB|FUNc
 1750              	*****************************/
 1751              	    _FUNC execute 
 1752 0e4c DFF85014 	    ldr r1,=fn_table 
 1753 0e50 51F82000 	    ldr r0,[r1,r0,lsl #2]
ARM GAS  tinyBasic.s 			page 49


 1754 0e54 0047     	    bx r0 
 1755              	
 1756              	/*************************************
 1757              	  next_token 
 1758              	  extract next token from token list 
 1759              	  input:
 1760              	    none 
 1761              	  output:
 1762              	    r0    token attribute
 1763              	    r1    token value if there is one 
 1764              	  use:
 1765              	    T1    exit token type  
 1766              	****************************/
 1767 0e56 00BF     	    _FUNC next_token 
 1768 0e58 4DF8048D 	    push {T1}
 1769 0e5c 88EA0808 	    eor T1,T1 // TK_NONE 
 1770 0e60 6068     	    ldr r0,[UPP,#COUNT]
 1771 0e62 8245     	    cmp IN,r0 
 1772 0e64 14D4     	    bmi 0f
 1773              	end_of_line:
 1774 0e66 BBF80010 	    ldrh r1,[BPTR] // line #
 1775 0e6a 09B9     	    cbnz r1, next_line  // command line
 1776 0e6c FFF7FEBF 	    b warm_start
 1777              	next_line:
 1778 0e70 8344     	    add BPTR,r0 // next line 
 1779 0e72 606B     	    ldr r0,[UPP,#TXTEND]
 1780 0e74 8345     	    cmp BPTR,r0 
 1781 0e76 7FF5FEAF 	    bpl warm_start // end of program
 1782 0e7a 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1783 0e7e 6060     	    str r0,[UPP,#COUNT] 
 1784 0e80 4FF0030A 	    mov IN,#3
 1785 0e84 00B5FFF7 	    _CALL show_trace
 1785      B1F95DF8 
 1785      04EB
 1786 0e8e 2AE0     	    b 9f  
 1787              	0: 
 1788 0e90 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1789 0e94 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1790 0e98 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1791 0e9c 0AF1010A 	    add IN,#1  
 1792 0ea0 8046     	    mov T1,r0 
 1793 0ea2 00F07F00 	    and r0,#0x7f // limit mask 
 1794 0ea6 FF49     	    ldr r1,=tok_jmp 
 1795 0ea8 D1E800F0 	    tbb [r1,r0]
 1796              	1: // pc reference point 
 1797 0eac 1BE0     	    b 9f 
 1798              	2: // .byte param
 1799 0eae 1BF80A10 	    ldrb r1,[BPTR,IN]
 1800 0eb2 0AF1010A 	    add IN,#1 
 1801 0eb6 16E0     	    b 9f 
 1802              	3: // .hword param 
 1803 0eb8 3BF80A10 	    ldrh r1,[BPTR,IN]
 1804 0ebc 0AF1020A 	    add IN,#2 
 1805 0ec0 11E0     	    b 9f 
 1806              	4: // .word param  
 1807 0ec2 5BF80A10 	    ldr r1,[BPTR,IN]
 1808 0ec6 0AF1040A 	    add IN,#4
ARM GAS  tinyBasic.s 			page 50


 1809 0eca 0CE0     	    b 9f 
 1810              	5: // .asciz param 
 1811 0ecc 0BEB0A01 	    add r1,BPTR,IN 
 1812 0ed0 0846     	    mov r0,r1  
 1813 0ed2 00B5FFF7 	    _CALL strlen 
 1813      FEFF5DF8 
 1813      04EB
 1814 0edc 8244     	    add IN,r0
 1815 0ede 0AF1010A 	    add IN,#1
 1816 0ee2 00E0     	    b 9f  
 1817              	8: // syntax error 
 1818 0ee4 BEE5     	    b syntax_error 
 1819 0ee6 4046     	9:  mov r0,T1  
 1820 0ee8 5DF8048B 	    pop {T1}
 1821 0eec 7047     	    _RET
 1822              	
 1823 0eee 00BF     	  .p2align 2
 1824              	tok_jmp: // token id  tbb offset 
 1825 0ef0 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1826 0ef2 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1827 0ef6 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1827      1D
 1828 0efb 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1829 0eff 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1830 0f02 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1830      1C
 1831 0f07 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1831      1C1C
 1832 0f0d 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1833 0f10 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1834 0f13 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1834      1C1C1C1C 
 1835 0f1b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1835      1C1C
 1836 0f21 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1836      1D1D
 1837 0f27 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1837      1C1C1C1C 
 1837      1C
 1838 0f30 0B       	  .byte (4b-1b)/2 //0x40 TK_LBL 
 1839              	
 1840 0f31 0000BF   	  .p2align 2 
 1841              	
 1842              	/*********************************
 1843              	    expect 
 1844              	    check if next token is of 
 1845              	    expected type. If not 
 1846              	    call syntax_error  
 1847              	  input:
 1848              	      r0   token attribute
 1849              	  output:
 1850              	      r0  token attribute 
 1851              	      r1  token value
 1852              	  use:
 1853              	      T1   
 1854              	**********************************/
 1855              	    _FUNC expect 
ARM GAS  tinyBasic.s 			page 51


 1856 0f34 4DF8048D 	    push {T1}
 1857 0f38 8046     	    mov T1,r0 
 1858 0f3a 00B5FFF7 	    _CALL next_token 
 1858      8CFF5DF8 
 1858      04EB
 1859 0f44 4045     	    cmp r0,T1  
 1860 0f46 7FF48DAD 	    bne syntax_error 
 1861 0f4a 5DF8048B 	    pop {T1}
 1862 0f4e 7047     	    _RET 
 1863              	
 1864              	/***********************************
 1865              	    func_args 
 1866              	    get function arguments list 
 1867              	  input:
 1868              	    none 
 1869              	  output:
 1870              	    r0    arg. count 
 1871              	  use:
 1872              	
 1873              	************************************/
 1874              	    _FUNC func_args 
 1875 0f50 4FF00600 	    mov r0,#TK_LPAREN 
 1876 0f54 00B5FFF7 	    _CALL expect 
 1876      EDFF5DF8 
 1876      04EB
 1877 0f5e 00B500F0 	    _CALL arg_list 
 1877      0CF85DF8 
 1877      04EB
 1878 0f68 01B4     	    push {r0}
 1879 0f6a 4FF00700 	    mov r0,#TK_RPAREN 
 1880 0f6e 00B5FFF7 	    _CALL expect 
 1880      E0FF5DF8 
 1880      04EB
 1881 0f78 01BC     	    pop {r0}
 1882 0f7a 7047     	    _RET 
 1883              	
 1884              	/**********************************
 1885              	    arg_list 
 1886              	    get arguments list on dstack 
 1887              	  input:
 1888              	    none 
 1889              	  output:
 1890              	    r0    arg count
 1891              	  use:
 1892              	    T1    tmp count  
 1893              	***********************************/
 1894              	    _FUNC arg_list 
 1895 0f7c 4DF8048D 	    push {T1}
 1896 0f80 88EA0808 	    eor T1,T1 
 1897 0f84 00B500F0 	1:  _CALL expression 
 1897      D5F85DF8 
 1897      04EB
 1898 0f8e 0028     	    cmp R0,#TK_NONE 
 1899 0f90 10D0     	    beq 9f 
 1900 0f92 0F28     	    cmp r0,#TK_INTGR
 1901 0f94 0ED1     	    bne 9f 
 1902 0f96 4CF8041D 	    _PUSH r1 
ARM GAS  tinyBasic.s 			page 52


 1903 0f9a 08F10108 	    add T1,#1 
 1904 0f9e 00B5FFF7 	    _CALL next_token 
 1904      5AFF5DF8 
 1904      04EB
 1905 0fa8 0828     	    cmp r0,#TK_COMMA 
 1906 0faa EBD0     	    beq 1b 
 1907 0fac D4F800A0 	    _UNGET_TOKEN 
 1907      D4F808B0 
 1908 0fb4 4046     	9:  mov r0,T1 
 1909 0fb6 5DF8048B 	    pop {T1}
 1910 0fba 7047     	    _RET 
 1911              	
 1912              	/***********************************
 1913              	 factor
 1914              	 arithmetick factor parser 
 1915              	 factor ::= ['+'|'-'|e]  var | @ |
 1916              				 integer | function |
 1917              				 '('expression')' 
 1918              	  input: 
 1919              	    none 
 1920              	  output:
 1921              	    r0   token attribute 
 1922              	    r1   token value 
 1923              	  use:
 1924              	    r2   temp 
 1925              	    T1   sign 
 1926              	    T2   exit token attribute 
 1927              	***********************************/
 1928              	    _FUNC factor 
 1929 0fbc 2DE90403 	    push {r2,T1,T2}
 1930 0fc0 4FF00F09 	    mov T2,#TK_INTGR 
 1931 0fc4 4FF00108 	    mov T1,#1 // default sign +  
 1932 0fc8 00B5FFF7 	    _CALL next_token
 1932      45FF5DF8 
 1932      04EB
 1933 0fd2 0246     	    mov r2,r0 
 1934 0fd4 00F03000 	    and r0,#TK_GRP_MASK 
 1935 0fd8 1028     	    cmp r0,#TK_GRP_ADD
 1936 0fda 1046     	    mov r0,r2
 1937 0fdc 08D1     	    bne 1f 
 1938 0fde 1028     	    cmp r0,#TK_PLUS 
 1939 0fe0 01D0     	    beq 0f 
 1940 0fe2 4FF0FF38 	    mov T1,#-1 // minus sign 
 1941 0fe6 00B5FFF7 	0:  _CALL next_token
 1941      36FF5DF8 
 1941      04EB
 1942 0ff0 0F28     	1:  cmp r0,#TK_INTGR 
 1943 0ff2 59D0     	    beq 8f 
 1944 0ff4 0528     	    cmp r0,#TK_ARRAY 
 1945 0ff6 1ED1     	    bne 2f 
 1946 0ff8 4FF00600 	    mov r0,#TK_LPAREN 
 1947 0ffc 00B5FFF7 	    _CALL expect 
 1947      99FF5DF8 
 1947      04EB
 1948 1006 00B500F0 	    _CALL expression
 1948      94F85DF8 
 1948      04EB
ARM GAS  tinyBasic.s 			page 53


 1949 1010 0F28     	    cmp r0,#TK_INTGR
 1950 1012 7FF427AD 	    bne syntax_error
 1951 1016 8146     	    mov T2,r0
 1952 1018 0A46     	    mov r2,r1  
 1953 101a 4FF00700 	    mov r0,#TK_RPAREN
 1954 101e 00B5FFF7 	    _CALL expect 
 1954      88FF5DF8 
 1954      04EB
 1955 1028 1046     	    mov r0,r2 
 1956 102a 00B500F0 	    _CALL get_array_element 
 1956      F8F85DF8 
 1956      04EB
 1957 1034 38E0     	    b 8f
 1958 1036 0628     	2:  cmp r0,#TK_LPAREN 
 1959 1038 12D1     	    bne 3f 
 1960 103a 00B500F0 	    _CALL expression 
 1960      7AF85DF8 
 1960      04EB
 1961 1044 0F28     	    cmp r0,#TK_INTGR 
 1962 1046 7FF40DAD 	    bne syntax_error
 1963 104a 8146     	    mov T2,r0
 1964 104c 0A46     	    mov r2,r1   
 1965 104e 4FF00700 	    mov r0,#TK_RPAREN
 1966 1052 00B5FFF7 	    _CALL expect 
 1966      6EFF5DF8 
 1966      04EB
 1967 105c 1146     	    mov r1,r2 
 1968 105e 23E0     	    b 8f       
 1969 1060 0428     	3:  cmp r0,#TK_VAR 
 1970 1062 06D1     	    bne 4f
 1971 1064 0846     	    mov r0,r1  
 1972 1066 00B500F0 	    _CALL get_var 
 1972      EEF85DF8 
 1972      04EB
 1973 1070 1AE0     	    b 8f 
 1974 1072 0C28     	4:  cmp r0,#TK_IFUNC 
 1975 1074 06D1     	    bne 6f 
 1976 1076 0846     	5:  mov r0,r1  
 1977 1078 00B5FFF7 	    _CALL execute
 1977      E7FE5DF8 
 1977      04EB
 1978 1082 11E0     	    b 8f 
 1979 1084 4028     	6:  cmp r0,#TK_LBL
 1980 1086 08D1     	    bne 7f 
 1981 1088 41F00040 	    orr r0,r1,#(1<<31) 
 1982 108c 00B5FFF7 	    _CALL search_const
 1982      03F95DF8 
 1982      04EB
 1983 1096 0146     	    mov r1,r0 
 1984 1098 06E0     	    b 8f 
 1985 109a D4F800A0 	7:  _UNGET_TOKEN      
 1985      D4F808B0 
 1986 10a2 4FF00000 	    mov r0,#TK_NONE
 1987 10a6 03E0     	    b 9f  
 1988 10a8 08FB01F1 	8:  mul r1,T1 
 1989 10ac 5FEA0900 	    movs r0,T2 
 1990 10b0 BDE80403 	9:  pop {r2,T1,T2}   
ARM GAS  tinyBasic.s 			page 54


 1991 10b4 7047     	    _RET 
 1992              	
 1993              	
 1994              	/*****************************************
 1995              	    term 
 1996              	    term parser 
 1997              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1998              	    output:
 1999              	      r0  	token attribute 
 2000              	      r1		integer
 2001              	    use:
 2002              	      r2    first operand 
 2003              	      r3    temp 
 2004              	      T1    operator 
 2005              	      T2    exit token attribute 
 2006              	******************************************/
 2007 10b6 00BF     	     _FUNC term 
 2008 10b8 2DE90C03 	    push {r2,r3,T1,T2}
 2009 10bc 4FF00009 	    mov T2,#TK_NONE 
 2010 10c0 00B5FFF7 	    _CALL factor
 2010      7BFF5DF8 
 2010      04EB
 2011 10ca 60B3     	    cbz r0, 9f  // no factor   
 2012 10cc 8146     	    mov T2,r0  // TK_INTGR 
 2013 10ce 0A46     	    mov r2,r1 // first factor    
 2014 10d0 00B5FFF7 	0:  _CALL next_token
 2014      C1FE5DF8 
 2014      04EB
 2015 10da 0346     	    mov r3,r0   
 2016 10dc 00F03000 	    and r0,#TK_GRP_MASK 
 2017 10e0 2028     	    cmp r0,#TK_GRP_MULT
 2018 10e2 04D0     	    beq 1f
 2019 10e4 D4F800A0 	    _UNGET_TOKEN
 2019      D4F808B0 
 2020 10ec 1BE0     	    b 9f 
 2021 10ee 9846     	1:  mov T1,r3 
 2022 10f0 00B5FFF7 	    _CALL factor  
 2022      63FF5DF8 
 2022      04EB
 2023 10fa 3FF4B3AC 	    beq syntax_error 
 2024 10fe B8F1200F 	    cmp T1,#TK_MULT
 2025 1102 02D1     	    bne 2f 
 2026              	// multiplication
 2027 1104 01FB02F2 	    mul r2,r1
 2028 1108 E2E7     	    b 0b  
 2029 110a B8F1210F 	2:  cmp T1,#TK_DIV 
 2030 110e 02D1     	    bne 3f
 2031              	// division
 2032 1110 92FBF1F2 	    sdiv r2,r2,r1
 2033 1114 DCE7     	    b 0b  
 2034              	3: // modulo
 2035 1116 1046     	    mov r0,r2 
 2036 1118 92FBF1F2 	    sdiv r2,r2,r1 
 2037 111c 01FB02F2 	    mul  r2,r1 
 2038 1120 A0EB0202 	    sub  r2,r0,r2
 2039 1124 D4E7     	    b 0b  
 2040 1126 1146     	9:  mov r1,r2 
ARM GAS  tinyBasic.s 			page 55


 2041 1128 5FEA0900 	    movs r0,T2 
 2042 112c BDE80C03 	    pop {r2,r3,T1,T2}
 2043 1130 7047     	    _RET 
 2044              	
 2045              	/*****************************************
 2046              	    expression 
 2047              	    arithmetic expression parser 
 2048              	    expression ::= term [['+'|'-'] term]*
 2049              	    result range {-32768..32767}
 2050              	    output:
 2051              	      r0    TK_NONE || TK_INTGR 
 2052              	      r1 	  integer
 2053              	    use:
 2054              	      r2  left operand 
 2055              	      T1  operator 
 2056              	      T2  exit token attribute
 2057              	******************************************/
 2058 1132 00BF     	    _FUNC expression 
 2059 1134 2DE90403 	    push {r2,t1,t2}
 2060 1138 4FF00009 	    mov T2,#TK_NONE
 2061 113c 82EA0202 	    eor r2,r2 // zero 
 2062 1140 00B5FFF7 	    _CALL term 
 2062      B9FF5DF8 
 2062      04EB
 2063 114a 21D0     	    beq 9f  // no term  
 2064 114c 0A46     	    mov r2,r1 // first term
 2065 114e 4FF00F09 	    mov T2,#TK_INTGR    
 2066 1152 00B5FFF7 	1:  _CALL next_token 
 2066      80FE5DF8 
 2066      04EB
 2067 115c 8046     	    mov T1,r0 // token attribute 
 2068 115e 00F03000 	    and r0,#TK_GRP_MASK 
 2069 1162 1028     	    cmp r0,#TK_GRP_ADD 
 2070 1164 04D0     	    beq 3f 
 2071 1166 D4F800A0 	    _UNGET_TOKEN
 2071      D4F808B0 
 2072 116e 0FE0     	    b 9f  
 2073 1170 00B5FFF7 	3:  _CALL term 
 2073      A1FF5DF8 
 2073      04EB
 2074 117a 0F28     	    cmp r0,#TK_INTGR 
 2075 117c 7FF472AC 	    bne syntax_error 
 2076 1180 B8F1100F 	    cmp T1,#TK_PLUS 
 2077 1184 02D0     	    beq 4f 
 2078 1186 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 2079 118a E2E7     	    b 1b 
 2080 118c 0A44     	4:  add r2,r2,r1 // N1+N2
 2081 118e E0E7     	    b 1b
 2082 1190 4846     	9:  mov r0,T2 
 2083 1192 1146     	    mov r1,r2 
 2084 1194 BDE80403 	    pop {r2,t1,t2}
 2085 1198 7047     	    _RET 
 2086              	
 2087              	
 2088              	/**********************************************
 2089              	    relation parser 
 2090              	    rel ::= expr1 rel_op expr2
ARM GAS  tinyBasic.s 			page 56


 2091              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2092              	    relation return  integer , zero is false 
 2093              	    output:
 2094              	        r0	TK_INTGR  
 2095              	        r1	integer 
 2096              	    use:
 2097              	        r2   first operand 
 2098              	        T1   relop   
 2099              	**********************************************/
 2100 119a 00BF     	    _FUNC relation 
 2101 119c 2DE90401 	    push {r2,T1}
 2102 11a0 00B5FFF7 	    _CALL expression 
 2102      C7FF5DF8 
 2102      04EB
 2103 11aa 0F28     	    cmp r0,#TK_INTGR 
 2104 11ac 7FF45AAC 	    bne syntax_error 
 2105 11b0 0A46     	    mov r2,r1  // first operand  
 2106 11b2 00B5FFF7 	    _CALL next_token 
 2106      50FE5DF8 
 2106      04EB
 2107 11bc 8046     	    mov T1,r0  // relop  
 2108 11be 00F03000 	    and r0,#TK_GRP_MASK 
 2109 11c2 3028     	    cmp r0,#TK_GRP_RELOP 
 2110 11c4 1DD1     	    bne 8f  // single operand 
 2111 11c6 00B5FFF7 	    _CALL expression 
 2111      B4FF5DF8 
 2111      04EB
 2112 11d0 0F28     	    cmp r0,#TK_INTGR 
 2113 11d2 7FF447AC 	    bne syntax_error 
 2114 11d6 8A42     	    cmp r2,r1 // compare operands  
 2115 11d8 4FF0FF31 	    mov r1,#-1 
 2116 11dc 324A     	    ldr r2,=relop_jmp
 2117 11de 08F00708 	    and T1,#7 // {1..6}
 2118 11e2 D2E808F0 	    tbb [r2,T1]    
 2119              	rel_idx0:
 2120              	rel_eq:
 2121 11e6 11D0     	    beq 9f 
 2122 11e8 08E0     	    b rel_false
 2123              	rel_lt: 
 2124 11ea 0FDB     	    blt 9f   
 2125 11ec 06E0     	    b rel_false 
 2126              	rel_le:
 2127 11ee 0DDD     	    ble 9f  
 2128 11f0 04E0     	    b rel_false 
 2129              	rel_gt:
 2130 11f2 0BDC     	    bgt 9f  
 2131 11f4 02E0     	    b rel_false  
 2132              	rel_ge:
 2133 11f6 09DA     	    bge 9f  
 2134 11f8 00E0     	    b rel_false  
 2135              	rel_diff:
 2136 11fa 07D1     	    bne 9f 
 2137              	rel_false:    
 2138 11fc 81EA0101 	    eor r1,r1  // false
 2139 1200 04E0     	    b 9f  
 2140 1202 D4F800A0 	8:  _UNGET_TOKEN 
 2140      D4F808B0 
ARM GAS  tinyBasic.s 			page 57


 2141 120a 1146     	    mov r1,r2    
 2142 120c 4FF00F00 	9:  mov r0,#TK_INTGR
 2143 1210 BDE80401 	    pop {r2,T1}
 2144 1214 7047     	    _RET 
 2145              	
 2146              	
 2147              	relop_jmp: 
 2148 1216 00       	  .byte 0 
 2149 1217 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2150 1218 00       	  .byte 0 // =
 2151 1219 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2152 121a 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2153 121b 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2154 121c 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2155              	
 2156              	
 2157              	/***********************************
 2158              	    get_array_element
 2159              	    return value of @(n)
 2160              	  input:
 2161              	    r0    indice 
 2162              	  output:
 2163              	    r0   TK_INTGR
 2164              	    r1   value  
 2165              	************************************/
 2166 121d 0000BF   	    _FUNC get_array_element 
 2167 1220 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2168 1224 4FEA8000 	    lsl r0,#2 
 2169 1228 C0EB0100 	    rsb r0,r1 
 2170 122c 0168     	    ldr r1,[r0]
 2171 122e 4FF00F00 	    mov r0,#TK_INTGR 
 2172 1232 7047     	    _RET 
 2173              	
 2174              	
 2175              	/***********************************
 2176              	    set_array_element 
 2177              	    set value of array element 
 2178              	  input:
 2179              	    r0   index 
 2180              	    r1   new value 
 2181              	  output:
 2182              	    none
 2183              	  use:
 2184              	    r2    array pointer 
 2185              	**********************************/
 2186              	    _FUNC set_array_element 
 2187 1234 04B4     	    push {r2}
 2188 1236 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2189 123a 4FEA8000 	    lsl r0,#2 
 2190 123e A1EB0001 	    sub r1,r0 
 2191 1242 0960     	    str r1,[r1]
 2192 1244 04BC     	    pop {r2}
 2193 1246 7047     	    _RET 
 2194              	
 2195              	/***********************************
 2196              	   get_var 
 2197              	   get variable value 
ARM GAS  tinyBasic.s 			page 58


 2198              	  input:
 2199              	     r0    variable index {0..25}
 2200              	  output:
 2201              	     r0    TK_INTGR
 2202              	     r1    value 
 2203              	**********************************/
 2204              	    _FUNC get_var 
 2205 1248 04F16001 	    add r1,UPP,#VARS
 2206 124c 4FEA8000 	    lsl r0,#2 
 2207 1250 0958     	    ldr r1,[r1,r0]
 2208 1252 4FF00F00 	    mov r0,#TK_INTGR
 2209 1256 7047     	    _RET 
 2210              	
 2211              	/*********************************
 2212              	    set_var 
 2213              	    set variable value 
 2214              	  input:
 2215              	     r0    variable index {0..25}
 2216              	     r1    new value 
 2217              	  output:
 2218              	    none 
 2219              	  use:
 2220              	    r2   vars pointer 
 2221              	*********************************/
 2222              	    _FUNC set_var 
 2223 1258 04B4     	    push {r2}
 2224 125a 04F16002 	    add r2,UPP,#VARS
 2225 125e 4FEA8000 	    lsl r0,#2
 2226 1262 1150     	    str r1,[r2,r0]
 2227 1264 04BC     	    pop {r2}
 2228 1266 7047     	    _RET 
 2229              	
 2230              	/******************************
 2231              	    CONSTANTS data
 2232              	******************************/
 2233              	
 2234              	  .section .rodata 
 2235              	
 2236              	// system variables initial value 
 2237              	uzero:
 2238 0000 00000000 	  .word 0 // IN_SAVED
 2239 0004 00000000 	  .word 0 // COUNT
 2240 0008 00000000 	  .word 0 // BASICPTR
 2241 000c 00000000 	  .word 0 // DATAPTR
 2242 0010 00000000 	  .word 0 // DATA
 2243 0014 00000000 	  .word 0 // DATALEN
 2244 0018 0A000000 	  .word 10 // BASE
 2245 001c 00000000 	  .word 0 // TICKS
 2246 0020 00000000 	  .word 0 // TIMER
 2247 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2248 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2249 002c 00000000 	  .word 0 // FSFREE
 2250 0030 00000000 	  .word 0 // TXTBGN
 2251 0034 00000000 	  .word 0 // TXTEND
 2252 0038 00000000 	  .word 0 //LOOP_DEPTH
 2253 003c 00000000 	  .word 0 // ARRAY_SIZE
 2254 0040 00000000 	  .word 0 // FLAGS
ARM GAS  tinyBasic.s 			page 59


 2255 0044 04000000 	  .word 4 // TAB_WIDTH
 2256 0048 00000000 	  .word 0 // RX_HEAD
 2257 004c 00000000 	  .word 0 // RX_TAIL
 2258 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2258      00000000 
 2258      00000000 
 2258      00000000 
 2259 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2259      00000000 
 2259      00000000 
 2259      00000000 
 2259      00000000 
 2260 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2261 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2262 00d0 00000000 	  .word 0 // HERE 
 2263              	ulast:
 2264              	
 2265              	  .section .rodata.dictionary 
 2266              	
 2267              	// keep alphabetic order for BASIC names from Z-A
 2268              	// this sort order is for for WORDS cmd output. 	
 2269              	  .type kword_end, %object
 2270              		.equ link, 0
 2271              	kword_end:
 2272 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2272      00000000 
 2272      00000000 
 2272      00000000 
 2273 0010 0C000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2273      51000000 
 2273      0C000000 
 2273      584F5200 
 2274 0020 1C000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2274      4F000000 
 2274      0B000000 
 2274      574F5244 
 2274      53000000 
 2275 0034 2C000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2275      4E000000 
 2275      0B000000 
 2275      57414954 
 2275      00000000 
 2276 0048 40000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2276      4D000000 
 2276      0B000000 
 2276      554E5449 
 2276      4C000000 
 2277 005c 54000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2277      4C000000 
 2277      0C000000 
 2277      55464C41 
 2277      53480000 
 2278 0070 68000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2278      4B000000 
 2278      0C000000 
 2278      55424F55 
 2278      4E440000 
ARM GAS  tinyBasic.s 			page 60


 2279 0084 7C000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2279      4A000000 
 2279      0B000000 
 2279      54524143 
 2279      45000000 
 2280 0098 90000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2280      49000000 
 2280      0B000000 
 2280      544F0000 
 2281 00a8 A4000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2281      47000000 
 2281      0B000000 
 2281      54494D45 
 2281      52000000 
 2282 00bc B4000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2282      48000000 
 2282      0C000000 
 2282      54494D45 
 2282      4F555400 
 2283 00d0 C8000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2283      46000000 
 2283      0C000000 
 2283      5449434B 
 2283      53000000 
 2284 00e4 DC000000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2284      45000000 
 2284      0B000000 
 2284      5448454E 
 2284      00000000 
 2285 00f8 F0000000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2285      44000000 
 2285      0B000000 
 2285      54414200 
 2286 0108 04010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store 
 2286      43000000 
 2286      0B000000 
 2286      53544F52 
 2286      45000000 
 2287 011c 14010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2287      42000000 
 2287      0B000000 
 2287      53544F50 
 2287      00000000 
 2288 0130 28010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2288      41000000 
 2288      0B000000 
 2288      53544550 
 2288      00000000 
 2289 0144 3C010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2289      40000000 
 2289      0B000000 
 2289      53504300 
 2290 0154 50010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2290      3F000000 
 2290      0B000000 
 2290      534C4545 
 2290      50000000 
ARM GAS  tinyBasic.s 			page 61


 2291 0168 60010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2291      3E000000 
 2291      0C000000 
 2291      53495A45 
 2291      00000000 
 2292 017c 74010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2292      3D000000 
 2292      0B000000 
 2292      53415645 
 2292      00000000 
 2293 0190 88010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2293      3C000000 
 2293      0B000000 
 2293      52554E00 
 2294 01a0 9C010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2294      3B000000 
 2294      0C000000 
 2294      52534849 
 2294      46540000 
 2295 01b4 AC010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2295      3A000000 
 2295      0C000000 
 2295      524E4400 
 2296 01c4 C0010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2296      39000000 
 2296      0B000000 
 2296      52455455 
 2296      524E0000 
 2297 01d8 D0010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2297      38000000 
 2297      0B000000 
 2297      52455354 
 2297      4F524500 
 2298 01ec E4010000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2298      37000000 
 2298      0B000000 
 2298      52454D41 
 2298      524B0000 
 2299 0200 F8010000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2299      36000000 
 2299      0C000000 
 2299      52454144 
 2299      00000000 
 2300 0214 0C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2300      35000000 
 2300      0C000000 
 2300      514B4559 
 2300      00000000 
 2301 0228 20020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2301      34000000 
 2301      0B000000 
 2301      50555348 
 2301      00000000 
 2302 023c 34020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2302      33000000 
 2302      0B000000 
 2302      5052494E 
ARM GAS  tinyBasic.s 			page 62


 2302      54000000 
 2303 0250 48020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2303      32000000 
 2303      0C000000 
 2303      504F5000 
 2304 0260 5C020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2304      2F000000 
 2304      0B000000 
 2304      504F4B45 
 2304      38000000 
 2305 0274 6C020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2305      31000000 
 2305      0B000000 
 2305      504F4B45 
 2305      33320000 
 2306 0288 80020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2306      30000000 
 2306      0B000000 
 2306      504F4B45 
 2306      31360000 
 2307 029c 94020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2307      2A000000 
 2307      0B000000 
 2307      504D4F44 
 2307      45000000 
 2308 02b0 A8020000 	  _dict_entry TK_IFUNC,PICK,PICK_IDX // pick 
 2308      2E000000 
 2308      0C000000 
 2308      5049434B 
 2308      00000000 
 2309 02c4 BC020000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2309      2B000000 
 2309      0C000000 
 2309      5045454B 
 2309      38000000 
 2310 02d8 D0020000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2310      2D000000 
 2310      0C000000 
 2310      5045454B 
 2310      33320000 
 2311 02ec E4020000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2311      2C000000 
 2311      0C000000 
 2311      5045454B 
 2311      31360000 
 2312 0300 F8020000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2312      29000000 
 2312      0B000000 
 2312      50415553 
 2312      45000000 
 2313 0314 0C030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2313      28000000 
 2313      0C000000 
 2313      50414400 
 2314 0324 20030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2314      27000000 
 2314      0B000000 
ARM GAS  tinyBasic.s 			page 63


 2314      4F555400 
 2315 0334 30030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2315      26000000 
 2315      0C000000 
 2315      4F520000 
 2316 0344 40030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2316      25000000 
 2316      0C000000 
 2316      4E4F5400 
 2317 0354 50030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2317      24000000 
 2317      0B000000 
 2317      4E455854 
 2317      00000000 
 2318 0368 60030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2318      23000000 
 2318      0B000000 
 2318      4E455700 
 2319 0378 74030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2319      22000000 
 2319      0C000000 
 2319      4C534849 
 2319      46540000 
 2320 038c 84030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2320      21000000 
 2320      0B000000 
 2320      4C4F4144 
 2320      00000000 
 2321 03a0 98030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2321      20000000 
 2321      0B000000 
 2321      4C495354 
 2321      00000000 
 2322 03b4 AC030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2322      1F000000 
 2322      0B000000 
 2322      4C455400 
 2323 03c4 C0030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2323      1E000000 
 2323      0C000000 
 2323      4B455900 
 2324 03d4 D0030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2324      1D000000 
 2324      0C000000 
 2324      494E5645 
 2324      52540000 
 2325 03e8 E0030000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2325      1C000000 
 2325      0B000000 
 2325      494E5055 
 2325      54000000 
 2326 03fc F4030000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2326      1B000000 
 2326      0C000000 
 2326      494E5000 
 2327 040c 08040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2327      1A000000 
ARM GAS  tinyBasic.s 			page 64


 2327      0B000000 
 2327      49460000 
 2328 041c 18040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2328      19000000 
 2328      0B000000 
 2328      48455800 
 2329 042c 28040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2329      18000000 
 2329      0B000000 
 2329      474F544F 
 2329      00000000 
 2330 0440 38040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2330      17000000 
 2330      0B000000 
 2330      474F5355 
 2330      42000000 
 2331 0454 4C040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2331      16000000 
 2331      0B000000 
 2331      464F5247 
 2331      45540000 
 2332 0468 60040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2332      15000000 
 2332      0B000000 
 2332      464F5200 
 2333 0478 74040000 	  _dict_entry TK_CMD,FLASH,FLASH_IDX // flash 
 2333      14000000 
 2333      0B000000 
 2333      464C4153 
 2333      48000000 
 2334 048c 84040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2334      13000000 
 2334      0B000000 
 2334      45524153 
 2334      45000000 
 2335 04a0 98040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2335      12000000 
 2335      0B000000 
 2335      454E4400 
 2336 04b0 AC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2336      11000000 
 2336      0B000000 
 2336      44554D50 
 2336      00000000 
 2337 04c4 BC040000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2337      10000000 
 2337      0B000000 
 2337      44524F50 
 2337      00000000 
 2338 04d8 D0040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2338      0F000000 
 2338      0B000000 
 2338      444F0000 
 2339 04e8 E4040000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2339      0E000000 
 2339      0B000000 
 2339      44495200 
ARM GAS  tinyBasic.s 			page 65


 2340 04f8 F4040000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2340      0D000000 
 2340      0B000000 
 2340      44454300 
 2341 0508 04050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2341      0C000000 
 2341      0B000000 
 2341      44415441 
 2341      4C4E0000 
 2342 051c 14050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2342      0B000000 
 2342      0B000000 
 2342      44415441 
 2342      00000000 
 2343 0530 28050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2343      0A000000 
 2343      0B000000 
 2343      434F4E53 
 2343      54000000 
 2344 0544 3C050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2344      09000000 
 2344      0D000000 
 2344      43484152 
 2344      00000000 
 2345 0558 50050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2345      08000000 
 2345      0B000000 
 2345      42544F47 
 2345      4C000000 
 2346 056c 64050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2346      07000000 
 2346      0C000000 
 2346      42544553 
 2346      54000000 
 2347 0580 78050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2347      06000000 
 2347      0B000000 
 2347      42534554 
 2347      00000000 
 2348 0594 8C050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2348      05000000 
 2348      0B000000 
 2348      42524553 
 2348      00000000 
 2349 05a8 A0050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2349      04000000 
 2349      0C000000 
 2349      42495400 
 2350 05b8 B4050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2350      03000000 
 2350      0B000000 
 2350      41575500 
 2351 05c8 C4050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2351      02000000 
 2351      0C000000 
 2351      41534300 
 2352 05d8 D4050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
ARM GAS  tinyBasic.s 			page 66


 2352      01000000 
 2352      0C000000 
 2352      414E4400 
 2353              	first_link: 
 2354 05e8 E4050000 	  .word LINK 
 2355 05ec 00000000 	  .word ABS_IDX 
 2356 05f0 0C000000 	  .word TK_IFUNC
 2357              	kword_dict: // first name field 
 2358              	  .equ LINK,. 
 2359 05f4 41425300 	  .asciz "ABS" 
 2360              	  .p2align 2 
 2361              	
 2362              	    .section .rodata.fn_tabld 
 2363              	
 2364              	//comands and fonctions address table
 2365              	  .type fn_table, %object
 2366              	fn_table:
 2367 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2368 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,const   
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2369 002c 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370 0048 00000000 		.word cmd_end,erase,flash,for,forget,gosub,goto 
 2370      00000000 
 2370      00000000 
 2370      00000000 
 2370      00000000 
 2371 0064 00000000 		.word hex_base,if,inp,input_var,invert,key
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2372 007c 00000000 		.word let,list,load,lshift,new,next
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2373 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2374 00b8 00000000 		.word pick,poke8,poke16,poke32,fn_pop,print,cmd_push 
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2374      00000000 
ARM GAS  tinyBasic.s 			page 67


 2375 00d4 00000000 		.word qkey,read,skip_line
 2375      00000000 
 2375      00000000 
 2376 00e0 00000000 		.word restore,return, random,rshift,run,save,size 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2377 00fc 00000000 		.word sleep,spc,step,stop,store,tab
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2378 0114 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2378      00000000 
 2378      00000000 
 2378      00000000 
 2378      00000000 
 2379 0138 00000000 		.word wait,words,bit_xor
 2379      00000000 
 2379      00000000 
 2380 0144 00000000 		.word 0 
 2381              	
 2382              	
 2383              	/**********************************
 2384              	    BASIC commands and functions 
 2385              	**********************************/
 2386              	
 2387              	    .section .text.basic , "ax", %progbits 
 2388              	
 2389              	
 2390              	/*******************************
 2391              	  BASIC:  ABS expr 
 2392              	  input:
 2393              	    none 
 2394              	  output:
 2395              	    r0    token type 
 2396              	    r1    abs(expr)
 2397              	  use:
 2398              	    none 
 2399              	******************************/
 2400              	    _FUNC abs 
 2401 0000 00B5FFF7 	    _CALL arg_list
 2401      FEFF5DF8 
 2401      04EB
 2402 000a 0128     	    cmp r0,#1 
 2403 000c 01D0     	    beq 1f 
 2404 000e FFF7FEBF 	    b syntax_error 
 2405 0012 5CF8041B 	1:  _POP r1 
 2406 0016 11F0004F 	    tst r1,#(1<<31)
 2407 001a 01D0     	    beq 9f
 2408 001c C1F10001 	    rsb r1,#0 
 2409 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2410 0024 7047     	   _RET 
 2411              	
 2412 0026 00BF     	    _FUNC power_adc
 2413 0028 7047     	    _RET
ARM GAS  tinyBasic.s 			page 68


 2414              	
 2415 002a 00BF     	    _FUNC analog_read
 2416 002c 7047     	    _RET
 2417              	
 2418              	/************************************
 2419              	  BASIC: AND(expr1,expr2)
 2420              	  logical ANND bit to between expr1,expr2
 2421              	************************************/
 2422 002e 00BF     	    _FUNC bit_and
 2423 0030 00B5FFF7 	    _CALL func_args 
 2423      FEFF5DF8 
 2423      04EB
 2424 003a 0228     	    cmp r0,#2 
 2425 003c 7FF4FEAF 	    bne syntax_error 
 2426 0040 5CF8040B 	    _POP r0 
 2427 0044 5CF8041B 	    _POP r1 
 2428 0048 01EA0001 	    and r1,r0 
 2429 004c 4FF00F00 	    mov r0,#TK_INTGR
 2430 0050 7047     	    _RET
 2431              	
 2432              	/*******************************************
 2433              	  BASIC: ASC(string|char)
 2434              	  return ASCII code of char of first char 
 2435              	  of string 
 2436              	*******************************************/
 2437 0052 00BF     	    _FUNC ascii
 2438 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2439 0058 00B5FFF7 	    _CALL expect 
 2439      FEFF5DF8 
 2439      04EB
 2440 0062 00B5FFF7 	    _CALL next_token 
 2440      FEFF5DF8 
 2440      04EB
 2441 006c 0228     	    cmp r0,#TK_QSTR
 2442 006e 03D0     	    beq 2f 
 2443 0070 0328     	    cmp r0,#TK_CHAR 
 2444 0072 7FF4FEAF 	    bne syntax_error 
 2445 0076 00E0     	    b 9f 
 2446 0078 0978     	2:  ldrb r1,[r1]
 2447 007a 4CF8041D 	9:  _PUSH r1 
 2448 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2449 0082 00B5FFF7 	    _CALL expect 
 2449      FEFF5DF8 
 2449      04EB
 2450 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2451 0090 5CF8041B 	    _POP r1 
 2452 0094 7047     	    _RET
 2453              	
 2454 0096 00BF     	    _FUNC autorun
 2455 0098 7047     	    _RET
 2456              	
 2457              	/*******************************************
 2458              	  BASIC: AWU time_sleep  
 2459              	  enable LSI and IWDG and place MCU in 
 2460              	  deep sleep. IDWG wakeup MCU 
 2461              	******************************************/
 2462 009a 00BF     	    _FUNC awu
ARM GAS  tinyBasic.s 			page 69


 2463 009c 00B5FFF7 	    _CALL arg_list
 2463      FEFF5DF8 
 2463      04EB
 2464 00a6 0128     	    cmp r0,#1 
 2465 00a8 7FF4FEAF 	    bne syntax_error 
 2466 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2466      C4F20201 
 2467 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2468              	// enable LSI 
 2469 00b6 80F00100 	    eor r0,#1
 2470 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2471              	// wait for LSIRDY 
 2472 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2473 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2474 00c2 FBD0     	    beq 1b 
 2475              	// configure IWDG
 2476              	// compute values for IWDG_PR and IWDG_RLR 
 2477 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2478 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2479 00cc 03FB02F2 	    mul r2,r3 
 2480 00d0 83EA0303 	    eor r3,r3
 2481 00d4 B2F5005F 	2:  cmp r2,#8192 
 2482 00d8 04D4     	    bmi 3f 
 2483 00da 4FEA5202 	    lsr r2,#1 
 2484 00de 03F10103 	    add r3,#1
 2485 00e2 F7E7     	    b 2b
 2486              	// initialize IWDG      
 2487 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2487      C4F20001 
 2488 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2489 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2490 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2491 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2492 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2493 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2494 00fc 00F092BF 	    b sleep // place MCU in deep sleep
 2495 0100 7047     	    _RET
 2496              	
 2497              	/********************************************
 2498              	  BASIC: BIT(expr)
 2499              	  expr must be between 0..31 and is used 
 2500              	  to create 1 bit mask at that position
 2501              	*******************************************/
 2502 0102 00BF     	    _FUNC bitmask
 2503 0104 00B5FFF7 	    _CALL func_args
 2503      FEFF5DF8 
 2503      04EB
 2504 010e 0128     	    cmp r0,#1 
 2505 0110 7FF4FEAF 	    bne syntax_error 
 2506 0114 5CF8040B 	    _POP r0
 2507 0118 4FF00101 	    mov r1,#1
 2508 011c 01FA00F1 	    lsl r1,r0 
 2509 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2510 0124 7047     	    _RET 
 2511              	
 2512              	  
 2513              	  /*********************************
ARM GAS  tinyBasic.s 			page 70


 2514              	   BASIC: BRES adr, mask   
 2515              	   reset bits [adr]= [adr] & ~mask  
 2516              	   input:
 2517              	     none 
 2518              	    output;
 2519              	      none 
 2520              	    use:
 2521              	      T1   temp
 2522              	      T2   temp 
 2523              	*******************************/     
 2524 0126 00BF     	  _FUNC bit_reset
 2525 0128 00B5FFF7 	    _CALL arg_list 
 2525      FEFF5DF8 
 2525      04EB
 2526 0132 0228     	    cmp r0,#2 
 2527 0134 01D0     	    beq 1f 
 2528 0136 FFF7FEBF 	    b syntax_error 
 2529 013a 5CF8041B 	1:  _POP r1 //mask 
 2530 013e 5CF8040B 	    _POP r0 //address 
 2531 0142 D0F80090 	    ldr T2,[r0] 
 2532 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2533 014a 01EA0901 	    and r1,T2
 2534 014e 0160     	    str r1,[r0]
 2535 0150 7047     	    _RET  
 2536              	
 2537              	
 2538              	/*********************************
 2539              	   BASIC: BSET adr, mask   
 2540              	   reset bits [adr]= [adr] & ~mask  
 2541              	   input:
 2542              	      none 
 2543              	    output;
 2544              	      none 
 2545              	    use:
 2546              	      T1   temp
 2547              	      T2   temp  
 2548              	*******************************/     
 2549 0152 00BF     	    _FUNC bit_set
 2550 0154 00B5FFF7 	    _CALL arg_list 
 2550      FEFF5DF8 
 2550      04EB
 2551 015e 0228     	    cmp r0,#2 
 2552 0160 01D0     	    beq 1f 
 2553 0162 FFF7FEBF 	    b syntax_error 
 2554 0166 5CF8041B 	1:  _POP r1 //mask 
 2555 016a 5CF8040B 	    _POP r0 //address 
 2556 016e D0F80090 	    ldr T2,[r0] 
 2557 0172 41EA0901 	    orr r1,T2
 2558 0176 0160     	    str r1,[r0]
 2559 0178 7047     	    _RET 
 2560              	
 2561              	  /*********************************
 2562              	   BASIC: BTOGL adr, mask   
 2563              	   reset bits [adr]= [adr] & ~mask  
 2564              	   input:
 2565              	     r0    adr 
 2566              	     r1    mask 
ARM GAS  tinyBasic.s 			page 71


 2567              	    output;
 2568              	      none 
 2569              	    use:
 2570              	      T1   temp
 2571              	      T2   temp  
 2572              	*******************************/     
 2573 017a 00BF     	  _FUNC bit_toggle
 2574 017c 00B5FFF7 	    _CALL arg_list 
 2574      FEFF5DF8 
 2574      04EB
 2575 0186 0228     	    cmp r0,#2 
 2576 0188 01D0     	    beq 1f 
 2577 018a FFF7FEBF 	    b syntax_error 
 2578 018e 5CF8041B 	1:  _POP r1 //mask 
 2579 0192 5CF8040B 	    _POP r0 //address 
 2580 0196 D0F80090 	    ldr T2,[r0] 
 2581 019a 81EA0901 	    eor r1,T2
 2582 019e 0160     	    str r1,[r0]
 2583 01a0 7047     	    _RET  
 2584              	
 2585              	/********************************
 2586              	  BASIC: BTEST(addr,bit)
 2587              	  return bit state at address
 2588              	********************************/
 2589 01a2 00BF     	    _FUNC bit_test
 2590 01a4 00B5FFF7 	    _CALL func_args
 2590      FEFF5DF8 
 2590      04EB
 2591 01ae 0228     	    cmp r0,#2 
 2592 01b0 7FF4FEAF 	    bne syntax_error 
 2593 01b4 5CF8041B 	    _POP r1
 2594 01b8 4FF00100 	    mov r0,#1
 2595 01bc 01F01F01 	    and r1,#31  
 2596 01c0 21B1     	1:  cbz r1, 2f
 2597 01c2 4FEA4000 	    lsl r0,#1
 2598 01c6 A1F10101 	    sub r1,#1
 2599 01ca F9E7     	    b 1b 
 2600 01cc 5CF8041B 	2:  _POP r1
 2601 01d0 0968     	    ldr r1,[r1]
 2602 01d2 01EA0001 	    and r1,r0 
 2603 01d6 09B1     	    cbz r1,9f 
 2604 01d8 4FF00101 	    mov r1,#1
 2605 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2606 01e0 7047     	    _RET 
 2607              	
 2608              	/*********************************
 2609              	  BASIC: CHAR(expr)
 2610              	  convert expr in character 
 2611              	********************************/
 2612 01e2 00BF     	    _FUNC char
 2613 01e4 00B5FFF7 	    _CALL func_args
 2613      FEFF5DF8 
 2613      04EB
 2614 01ee 0128     	    cmp r0,#1
 2615 01f0 7FF4FEAF 	    bne syntax_error 
 2616 01f4 5CF8041B 	    _POP r1 
 2617 01f8 01F07F01 	    and r1,#127 
ARM GAS  tinyBasic.s 			page 72


 2618 01fc 4FF00300 	    mov r0,#TK_CHAR
 2619 0200 7047     	    _RET 
 2620              	
 2621              	/**********************************
 2622              	  BASIC: CONST !label=expr [,!label=expr]
 2623              	  define constants constants are 
 2624              	  store at end of BASIC code.
 2625              	  use:
 2626              	    T1   *location 
 2627              	    T2   *bound 
 2628              	*********************************/
 2629 0202 00BF     	    _FUNC const
 2630 0204 206C10F0 	    _RTO 
 2630      010F03D1 
 2630      4FF00700 
 2630      FFF7FEBF 
 2631 0214 D4F8D080 	    ldr T1,[UPP,#HERE]
 2632 0218 DFF86897 	    ldr T2,pad_adr  
 2633 021c C845     	1:  cmp T1,T2 
 2634 021e 03D4     	    bmi 2f 
 2635 0220 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2636 0224 FFF7FEBF 	    b tb_error 
 2637 0228 00B5FFF7 	2:  _CALL next_token 
 2637      FEFF5DF8 
 2637      04EB
 2638 0232 4028     	    cmp r0,#TK_LBL 
 2639 0234 7FF4FEAF 	    bne syntax_error 
 2640 0238 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2641 023c 4CF8041D 	    _PUSH r1 
 2642 0240 4FF03200 	    mov r0,#TK_EQUAL
 2643 0244 00B5FFF7 	    _CALL expect
 2643      FEFF5DF8 
 2643      04EB
 2644 024e 00B5FFF7 	    _CALL expression  
 2644      FEFF5DF8 
 2644      04EB
 2645 0258 0F28     	    cmp r0,#TK_INTGR
 2646 025a 7FF4FEAF 	    bne syntax_error
 2647 025e 5CF8040B 	    _POP r0 
 2648 0262 48F8040B 	    str r0,[T1],#4
 2649 0266 48F8041B 	    str r1,[T1],#4 
 2650 026a C4F8D080 	    str T1,[UPP,#HERE]
 2651 026e 00B5FFF7 	    _CALL next_token
 2651      FEFF5DF8 
 2651      04EB
 2652 0278 0828     	    cmp r0,#TK_COMMA 
 2653 027a CFD0     	    beq 1b 
 2654 027c D4F800A0 	    _UNGET_TOKEN
 2654      D4F808B0 
 2655              	9:  
 2656 0284 7047     	    _RET 
 2657              	
 2658              	
 2659              	/**************************
 2660              	  BASIC: DATALN expr 
 2661              	  set data pointer to line#
 2662              	  specified by expr. 
ARM GAS  tinyBasic.s 			page 73


 2663              	  if line# not valid program 
 2664              	  end with error.
 2665              	  use:
 2666              	
 2667              	**************************/
 2668 0286 00BF     	    _FUNC data_line
 2669 0288 206C10F0 	    _RTO // run time only 
 2669      010F03D1 
 2669      4FF00700 
 2669      FFF7FEBF 
 2670 0298 00B5FFF7 	    _CALL expression 
 2670      FEFF5DF8 
 2670      04EB
 2671 02a2 0F28     	    cmp r0,#TK_INTGR
 2672 02a4 7FF4FEAF 	    bne syntax_error
 2673 02a8 0846     	    mov r0,r1 
 2674 02aa 00B5FFF7 	    _CALL search_lineno
 2674      FEFF5DF8 
 2674      04EB
 2675 02b4 0029     	    cmp r1,#0
 2676 02b6 03D0     	    beq 1f 
 2677 02b8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2678 02bc FFF7FEBF 	    b syntax_error 
 2679 02c0 C178     	1:  ldrb r1,[r0,#3]
 2680 02c2 0B29     	    cmp r1,#TK_CMD 
 2681 02c4 F8D1     	    bne 0b
 2682 02c6 0179     	    ldrb r1,[r0,#4]
 2683 02c8 0B29     	    cmp r1,#DATA_IDX 
 2684 02ca F5D1     	    bne 0b  
 2685 02cc E060     	    str r0,[UPP,#DATAPTR]
 2686 02ce 8178     	    ldrb r1,[r0,#2]
 2687 02d0 6161     	    str r1,[UPP,#DATALEN]
 2688 02d2 4FF00501 	    mov r1,#5 // position of first data item  
 2689 02d6 2161     	    str r1,[UPP,#DATA]
 2690 02d8 7047     	    _RET 
 2691              	
 2692              	/*****************************
 2693              	  BASIC: READ 
 2694              	  read next data item 
 2695              	  the value can be assigned to
 2696              	  variable or used in expression
 2697              	*****************************/
 2698 02da 00BF     	    _FUNC read
 2699 02dc 206C10F0 	    _RTO
 2699      010F03D1 
 2699      4FF00700 
 2699      FFF7FEBF 
 2700 02ec 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2701 02ee E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2702 02f0 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2703 02f2 8242     	    cmp r2,r0
 2704 02f4 0ED0     	    beq seek_next
 2705 02f6 885C     	1:  ldrb r0,[r1,r2]
 2706 02f8 02F10102 	    add r2,#1
 2707 02fc 0028     	    cmp r0,#TK_NONE
 2708 02fe 09D0     	    beq seek_next
 2709 0300 0828     	    cmp r0,#TK_COMMA
ARM GAS  tinyBasic.s 			page 74


 2710 0302 F8D0     	    beq 1b  
 2711 0304 0F28     	    cmp r0,#TK_INTGR 
 2712 0306 7FF4FEAF 	    bne syntax_error  
 2713 030a 8958     	    ldr r1,[r1,r2]
 2714 030c 02F10402 	    add r2,#4
 2715 0310 2261     	    str r2,[UPP,#DATA]
 2716 0312 12E0     	    b 9f  
 2717              	seek_next: // is next line data ?
 2718 0314 8878     	    ldrb r0,[R1,#2]
 2719 0316 0144     	    add r1,r0 
 2720 0318 C878     	    ldrb r0,[R1,#3]
 2721 031a 0B28     	    cmp r0,#TK_CMD
 2722 031c 09D1     	    bne 2f 
 2723 031e 0879     	    ldrb r0,[r1,#4]
 2724 0320 0B28     	    cmp r0,#DATA_IDX 
 2725 0322 06D1     	    bne 2f 
 2726 0324 E160     	    str r1,[UPP,#DATAPTR]
 2727 0326 8878     	    ldrb r0,[r1,#2]
 2728 0328 6061     	    str  r0,[UPP,#DATALEN]
 2729 032a 4FF00502 	    mov r2,#5 
 2730 032e 2261     	    str r2,[UPP,#DATA]
 2731 0330 E1E7     	    b 1b 
 2732 0332 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2733 0336 FFF7FEBF 	    b tb_error 
 2734 033a 7047     	9:  _RET 
 2735              	
 2736              	/********************************
 2737              	  BASIC: RESTORE 
 2738              	  seek first data line 
 2739              	********************************/
 2740              	    _FUNC restore
 2741 033c 206C10F0 	    _RTO 
 2741      010F03D1 
 2741      4FF00700 
 2741      FFF7FEBF 
 2742 034c 216B     	    ldr r1,[UPP,#TXTBGN]
 2743 034e 606B     	1:  ldr r0,[UPP,#TXTEND]
 2744 0350 0FD0     	    beq no_data_line 
 2745 0352 0879     	    ldrb r0,[r1,#4]
 2746 0354 0B28     	    cmp r0,#DATA_IDX
 2747 0356 09D1     	    bne try_next_line
 2748 0358 C878     	    ldrb r0,[r1,#3]
 2749 035a 0B28     	    cmp r0,#TK_CMD
 2750 035c 06D1     	    bne try_next_line
 2751              	// this a the first data line 
 2752 035e E160     	    str r1,[UPP,#DATAPTR]
 2753 0360 8878     	    ldrb r0,[r1,#2]
 2754 0362 6061     	    str r0,[UPP,#DATALEN]
 2755 0364 4FF00500 	    mov r0,#5 
 2756 0368 2061     	    str r0,[UPP,#DATA]
 2757 036a 07E0     	    b 9f
 2758              	try_next_line:
 2759 036c 8878     	    ldrb r0,[r1,#2]
 2760 036e 0144     	    add r1,r0 
 2761 0370 EDE7     	    b 1b 
 2762              	no_data_line:
 2763 0372 80EA0000 	    eor r0,r0 
ARM GAS  tinyBasic.s 			page 75


 2764 0376 E060     	    str r0,[UPP,#DATAPTR]
 2765 0378 2061     	    str r0,[UPP,#DATA]
 2766 037a 6061     	    str r0,[UPP,#DATALEN]
 2767 037c 7047     	9:  _RET 
 2768              	
 2769              	/***********************************
 2770              	  BASIC: DEC 
 2771              	  switch base to decimal 
 2772              	***********************************/
 2773 037e 00BF     	    _FUNC dec_base
 2774 0380 4FF00A00 	    mov r0,#10
 2775 0384 A061     	    str r0,[UPP,#BASE]
 2776 0386 7047     	    _RET 
 2777              	
 2778              	/***************************************
 2779              	  BASIC: DO 
 2780              	  initialize a DO..UNTIL loop 
 2781              	***************************************/
 2782              	    _FUNC do_loop
 2783 0388 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2784 038c 7047     	    _RET 
 2785              	
 2786              	
 2787              	/****************************************
 2788              	  BASIC: DUMP adr, count 
 2789              	    command line only  
 2790              	    print memory content in hexadecimal 
 2791              	    16 bytes per row 
 2792              	    ouput:
 2793              	      none 
 2794              	    use:
 2795              	      r2   byte counter  
 2796              	****************************************/
 2797 038e 00BF     	    _FUNC dump 
 2798 0390 04B4     	    push {r2}
 2799 0392 226C     	    ldr r2,[UPP,#FLAGS]
 2800 0394 12F0010F 	    tst r2,#FRUN 
 2801 0398 03D0     	    beq 0f
 2802 039a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2803 039e FFF7FEBF 	    b tb_error  
 2804 03a2 00B5FFF7 	0:  _CALL arg_list 
 2804      FEFF5DF8 
 2804      04EB
 2805 03ac 0228     	    cmp r0,#2
 2806 03ae 7FF4FEAF 	    bne syntax_error 
 2807 03b2 5CF8042B 	    _POP r2   // count 
 2808 03b6 5CF8040B 	    _POP  r0  // adr 
 2809              	dump01:
 2810 03ba 00B500F0 	    _CALL print_dump_header 
 2810      0EF85DF8 
 2810      04EB
 2811 03c4 4FF01001 	1:  mov r1,#16
 2812 03c8 00B5FFF7 	    _CALL prt_row 
 2812      FEFF5DF8 
 2812      04EB
 2813 03d2 103A     	    subs r2,#16 
 2814 03d4 F6D5     	    bpl 1b 
ARM GAS  tinyBasic.s 			page 76


 2815 03d6 04BC     	2:  pop {r2}
 2816 03d8 7047     	    _RET 
 2817              	
 2818              	/********************************
 2819              	   print_dump_header
 2820              	********************************/
 2821 03da 00BF     	    _FUNC print_dump_header
 2822 03dc 2DE90103 	    push {r0,T1,T2}
 2823 03e0 4FF00C00 	    mov r0,#12 
 2824 03e4 00B5FFF7 	    _CALL cursor_x 
 2824      FEFF5DF8 
 2824      04EB
 2825 03ee 4FF00000 	    mov r0,#0
 2826 03f2 4FF01009 	    mov T2,#16
 2827 03f6 8046     	1:  mov T1,r0 
 2828 03f8 00B5FFF7 	    _CALL print_hex 
 2828      FEFF5DF8 
 2828      04EB
 2829 0402 08F10100 	    add r0,T1,#1  
 2830 0406 4845     	    cmp r0,T2 
 2831 0408 F5D4     	    bmi 1b 
 2832 040a 00B5FFF7 	    _CALL cr
 2832      FEFF5DF8 
 2832      04EB
 2833 0414 4FF03D00 	    mov r0,#'='
 2834 0418 4FF04F08 	    mov T1,#79
 2835 041c 00B5FFF7 	2:  _CALL uart_putc
 2835      FEFF5DF8 
 2835      04EB
 2836 0426 B8F10108 	    subs T1,#1 
 2837 042a F7D1     	    bne 2b     
 2838 042c 00B5FFF7 	    _CALL cr
 2838      FEFF5DF8 
 2838      04EB
 2839 0436 BDE80103 	    pop {r0,T1,T2}
 2840 043a 7047     	    _RET 
 2841              	
 2842              	
 2843              	/*******************************
 2844              	  BASIC: END 
 2845              	  exit program 
 2846              	******************************/ 
 2847              	    _FUNC cmd_end
 2848 043c FFF7FEBF 	    b warm_start 
 2849 0440 7047     	    _RET 
 2850              	
 2851              	/*******************************************
 2852              	  BASIC: FLASH adr, value 
 2853              	  write value to user space in flash memory 
 2854              	*********************************************/
 2855 0442 00BF     	    _FUNC flash 
 2856 0444 00B5FFF7 	    _CALL arg_list 
 2856      FEFF5DF8 
 2856      04EB
 2857 044e 0228     	    cmp r0,#2 
 2858 0450 7FF4FEAF 	    bne syntax_error 
 2859 0454 BCE80300 	    ldmia DP!,{r0,r1}
ARM GAS  tinyBasic.s 			page 77


 2860 0458 DFF83020 	    ldr r2,user_space
 2861 045c 9142     	    cmp r1,r2 
 2862 045e 03D5     	    bpl 1f 
 2863 0460 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2864 0464 FFF7FEBF 	    b tb_error 
 2865 0468 02F58062 	1:  add r2,#1024 
 2866 046c 9142     	    cmp r1,r2 
 2867 046e F7D5     	    bpl 0b 
 2868 0470 00B5FFF7 	    _CALL flash_store 
 2868      FEFF5DF8 
 2868      04EB
 2869 047a 7047     	    _RET 
 2870              	
 2871              	/**************************************************
 2872              	  BASIC: ERASE 
 2873              	  erase user space page 
 2874              	*************************************************/
 2875              	    _FUNC erase 
 2876 047c DFF80C00 	    ldr r0,user_space 
 2877 0480 00B5FFF7 	    _CALL erase_page 
 2877      FEFF5DF8 
 2877      04EB
 2878 048a 7047     	    _RET 
 2879 048c 00000000 	user_space: .word user 
 2880              	
 2881              	
 2882              	/**************************************************
 2883              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2884              	  introdure FOR...NEXT loop 
 2885              	**************************************************/
 2886              	    _FUNC for
 2887 0490 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2888 0494 4FF00107 	    mov INCR,#1
 2889 0498 00B5FFF7 	    _CALL next_token
 2889      FEFF5DF8 
 2889      04EB
 2890 04a2 0428     	    cmp r0,#TK_VAR
 2891 04a4 7FF4FEAF 	    bne syntax_error
 2892 04a8 02B4     	    push {r1} 
 2893 04aa 00B500F0 	    _CALL let_var 
 2893      25F95DF8 
 2893      04EB
 2894 04b4 20BC     	    pop {VADR}
 2895 04b6 4FEA8505 	    lsl VADR,#2
 2896 04ba 2544     	    add VADR,UPP 
 2897 04bc 05F16005 	    add VADR,#VARS 
 2898 04c0 7047     	    _RET 
 2899              	
 2900              	/***************************************
 2901              	  BASIC: TO expr 
 2902              	  set limit of FOR...NEXT loop 
 2903              	**************************************/
 2904 04c2 00BF     	    _FUNC to
 2905 04c4 00B5FFF7 	    _CALL expression 
 2905      FEFF5DF8 
 2905      04EB
 2906 04ce 0F28     	    cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 78


 2907 04d0 7FF4FEAF 	    bne syntax_error 
 2908 04d4 0E46     	    mov LIMIT,r1
 2909              	    // save loop back parameters 
 2910 04d6 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2911 04da 7047     	    _RET 
 2912              	
 2913              	/********************************************
 2914              	  BASIC: STEP expr 
 2915              	  set increment for FOR...NEXT loop 
 2916              	********************************************/
 2917              	    _FUNC step
 2918 04dc 00B5FFF7 	    _CALL expression 
 2918      FEFF5DF8 
 2918      04EB
 2919 04e6 0F28     	    cmp r0,#TK_INTGR
 2920 04e8 7FF4FEAF 	    bne syntax_error 
 2921 04ec 0F46     	    mov INCR,r1
 2922              	    // replace parameters left by TO
 2923 04ee 8CE8000C 	    stmia DP, {IN,BPTR}
 2924 04f2 7047     	    _RET 
 2925              	
 2926              	/********************************************
 2927              	  BASIC: NEXT var 
 2928              	  incrment FOR...NEXT loop variable
 2929              	  exit if variable cross LIMIT 
 2930              	********************************************/
 2931              	    _FUNC next
 2932 04f4 00B5FFF7 	    _CALL next_token 
 2932      FEFF5DF8 
 2932      04EB
 2933 04fe 0428     	    cmp r0,#TK_VAR 
 2934 0500 7FF4FEAF 	    bne syntax_error 
 2935 0504 4FEA8101 	    lsl r1,#2 
 2936 0508 2144     	    add r1,UPP 
 2937 050a 01F16001 	    add r1,#VARS 
 2938 050e A942     	    cmp r1,VADR
 2939 0510 7FF4FEAF 	    bne syntax_error 
 2940 0514 2868     	    ldr r0,[VADR]
 2941 0516 3844     	    add r0,INCR 
 2942 0518 2860     	    str r0,[VADR]
 2943 051a 002F     	    cmp INCR,#0
 2944 051c 02D4     	    bmi 2f
 2945 051e B042     	    cmp r0,LIMIT 
 2946 0520 02DC     	    bgt 8f  
 2947 0522 07E0     	    b 9f  
 2948 0524 B042     	2:  cmp r0,LIMIT 
 2949 0526 05DA     	    bge 9f  
 2950              	8: // exit for...next
 2951              	  //  drop branch parameters
 2952 0528 4FF00800 	    _DROP 2
 2952      8444
 2953              	  // restore outer loop parameters
 2954 052e BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2955 0532 7047     	    _RET 
 2956 0534 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2957 0538 9BF80200 	    ldrb r0,[BPTR,#2]
 2958 053c 6060     	    str r0,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 79


 2959 053e 00B5FFF7 	    _CALL show_trace 
 2959      FEFF5DF8 
 2959      04EB
 2960 0548 7047     	    _RET 
 2961              	
 2962              	
 2963              	/*********************************
 2964              	  BASIC: GOSUB expr 
 2965              	  call a subroutine at line# 
 2966              	*********************************/
 2967 054a 00BF     	    _FUNC gosub
 2968 054c 00B5FFF7 	    _CALL search_target 
 2968      FEFF5DF8 
 2968      04EB
 2969 0556 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2970              	target:
 2971 055a 8346     	    mov BPTR,r0 
 2972 055c 4FF0030A 	    mov IN,#3 
 2973 0560 9BF80200 	    ldrb r0,[BPTR,#2]
 2974 0564 6060     	    str r0,[UPP,#COUNT]
 2975 0566 00B5FFF7 	    _CALL show_trace 
 2975      FEFF5DF8 
 2975      04EB
 2976 0570 7047     	    _RET 
 2977              	
 2978              	/**********************************
 2979              	  BASIC: RETURN 
 2980              	  leave a subroutine 
 2981              	*********************************/
 2982 0572 00BF     	    _FUNC return 
 2983 0574 BCE8000C 	    ldmia DP!,{IN,BPTR}
 2984 0578 9BF80200 	    ldrb r0,[BPTR,#2]
 2985 057c 6060     	    str r0,[UPP,#COUNT]
 2986 057e 00B5FFF7 	    _CALL show_trace 
 2986      FEFF5DF8 
 2986      04EB
 2987 0588 7047     	    _RET 
 2988              	
 2989              	/**********************************
 2990              	  BASIC: GOTO expr 
 2991              	  go to line # | label 
 2992              	**********************************/
 2993 058a 00BF     	    _FUNC goto
 2994 058c 00B5FFF7 	    _CALL search_target 
 2994      FEFF5DF8 
 2994      04EB
 2995 0596 E0E7     	    b target  
 2996              	
 2997              	
 2998              	/***************************************
 2999              	  BASIC: HEX 
 3000              	  set numeric base to hexadecimal 
 3001              	***************************************/
 3002              	    _FUNC hex_base
 3003 0598 4FF01000 	    mov r0,#16 
 3004 059c A061     	    str r0,[UPP,#BASE]
 3005 059e 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 80


 3006              	
 3007              	/**********************************************
 3008              	  BASIC: IF relation THEN statement
 3009              	  execute statement only if relation is true
 3010              	*********************************************/
 3011              	    _FUNC if
 3012 05a0 00B5FFF7 	    _CALL relation 
 3012      FEFF5DF8 
 3012      04EB
 3013 05aa 09B9     	    cbnz r1,9f 
 3014 05ac D4F804A0 	    ldr IN,[UPP,#COUNT]
 3015 05b0 7047     	9:  _RET 
 3016              	
 3017              	/*******************************************************
 3018              	  BASIC: THEN statement
 3019              	  statements following THEN are executed if relation is !=0
 3020              	  optional, retained for compatibility.
 3021              	******************************************************/
 3022 05b2 00BF     	    _FUNC then 
 3023              	// do nothing 
 3024 05b4 7047     	    _RET
 3025              	
 3026              	/****************************************
 3027              	  BASIC: INPUT [string]var [,[string]var]+
 3028              	  prompt user for variable value
 3029              	***************************************/
 3030 05b6 00BF     	     _FUNC input_var
 3031 05b8 2DE90401 	    push {r2,T1}
 3032 05bc 00B5FFF7 	1:  _CALL next_token 
 3032      FEFF5DF8 
 3032      04EB
 3033 05c6 0228     	    cmp r0,#2
 3034 05c8 67D4     	    bmi 8f 
 3035 05ca 0228     	    cmp r0,#TK_QSTR 
 3036 05cc 12D1     	    bne 2f 
 3037 05ce 0846     	    mov r0,r1
 3038 05d0 DFF8D810 	    ldr r1,str_buffer
 3039 05d4 00B5FFF7 	    _CALL strcpy
 3039      FEFF5DF8 
 3039      04EB
 3040 05de 4FF00400 	    mov r0,#TK_VAR   
 3041 05e2 00B5FFF7 	    _CALL expect 
 3041      FEFF5DF8 
 3041      04EB
 3042 05ec 8846     	    mov T1,r1 
 3043 05ee DFF8BC00 	    ldr r0,str_buffer 
 3044 05f2 08E0     	    b 3f 
 3045 05f4 0428     	2:  cmp r0,#TK_VAR 
 3046 05f6 7FF4FEAF 	    bne syntax_error     
 3047 05fa 8846     	    mov T1,r1 
 3048 05fc 01F14100 	    add r0,r1,#'A' 
 3049 0600 2A49     	    ldr r1,str_buffer
 3050 0602 0880     	    strh r0,[r1]
 3051 0604 0846     	    mov r0,r1 
 3052 0606 00B5FFF7 	3:  _CALL uart_puts  
 3052      FEFF5DF8 
 3052      04EB
ARM GAS  tinyBasic.s 			page 81


 3053 0610 4FF03D00 	    mov r0,#'='
 3054 0614 00B5FFF7 	    _CALL uart_putc
 3054      FEFF5DF8 
 3054      04EB
 3055 061e DFF88800 	    ldr r0,input_buffer
 3056 0622 4FF02201 	    mov r1,#34 
 3057 0626 00B5FFF7 	    _CALL readln
 3057      FEFF5DF8 
 3057      04EB
 3058 0630 31B3     	    cbz r1,6f
 3059 0632 0178     	    ldrb r1,[r0]
 3060 0634 01B4     	    push {r0}
 3061 0636 0846     	    mov r0,r1
 3062 0638 00B5FFF7 	    _CALL is_letter 
 3062      FEFF5DF8 
 3062      04EB
 3063 0642 01BC     	    pop {r0}
 3064 0644 02D1     	    bne 3f 
 3065 0646 01F05F01 	    and r1,#0x5f // uppercase  
 3066 064a 19E0     	    b 6f 
 3067 064c 2429     	3:  cmp r1,#'$'
 3068 064e 04D1     	    bne 3f 
 3069 0650 4FF01001 	    mov r1,#16
 3070 0654 00F10100 	    add r0,#1  
 3071 0658 08E0     	    b 5f 
 3072 065a 2629     	3:  cmp r1,#'&' 
 3073 065c 04D1     	    bne 4f 
 3074 065e 4FF00201 	    mov r1,#2
 3075 0662 00F10100 	    add r0,#1 
 3076 0666 01E0     	    b 5f 
 3077 0668 4FF00A01 	4:  mov r1,#10 
 3078 066c 00B5FFF7 	5:  _CALL atoi 
 3078      FEFF5DF8 
 3078      04EB
 3079 0676 18B9     	    cbnz r0,6f
 3080 0678 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3081 067c FFF7FEBF 	    b tb_error
 3082 0680 4046     	6:  mov r0,T1 
 3083 0682 00B5FFF7 	    _CALL set_var
 3083      FEFF5DF8 
 3083      04EB
 3084 068c 00B5FFF7 	    _CALL next_token
 3084      FEFF5DF8 
 3084      04EB
 3085 0696 0828     	    cmp r0,#TK_COMMA 
 3086 0698 90D0     	    beq 1b 
 3087 069a D4F800A0 	8:  _UNGET_TOKEN          
 3087      D4F808B0 
 3088 06a2 BDE80401 	9:  pop {r2,T1}       
 3089 06a6 7047     	    _RET 
 3090 06a8 00000000 	input_buffer: .word _tib 
 3091 06ac 00000000 	str_buffer: .word _pad 
 3092              	
 3093              	
 3094              	/*****************************************
 3095              	  BASIC: INVERT(expr)
 3096              	  return 1's complement of expr
ARM GAS  tinyBasic.s 			page 82


 3097              	****************************************/
 3098              	    _FUNC invert
 3099 06b0 00B5FFF7 	    _CALL func_args
 3099      FEFF5DF8 
 3099      04EB
 3100 06ba 0128     	    cmp r0,#1 
 3101 06bc 7FF4FEAF 	    bne syntax_error
 3102 06c0 5CF8041B 	    _POP r1  
 3103 06c4 6FEA0101 	    mvn r1,r1
 3104 06c8 4FF00F00 	    mov r0,#TK_INTGR
 3105 06cc 7047     	    _RET 
 3106              	
 3107              	/*************************************
 3108              	  BASIC: KEY 
 3109              	  wait for a character from console
 3110              	*************************************/
 3111 06ce 00BF     	    _FUNC key
 3112 06d0 00B5FFF7 	    _CALL uart_getc
 3112      FEFF5DF8 
 3112      04EB
 3113 06da 0146     	    mov r1,r0
 3114 06dc 4FF00300 	    mov r0,#TK_CHAR 
 3115 06e0 7047     	    _RET  
 3116              	
 3117              	/******************************
 3118              	  BASIC: [LET] var=expr 
 3119              	         [LET] @(expr)=expr
 3120              	  input:
 3121              	    none 
 3122              	  output:
 3123              	    none 
 3124              	  use:
 3125              	
 3126              	****************************/         
 3127 06e2 00BF     	    _FUNC let
 3128 06e4 00B5FFF7 	    _CALL next_token 
 3128      FEFF5DF8 
 3128      04EB
 3129 06ee 0428     	    cmp r0,#TK_VAR
 3130 06f0 03D0     	    beq let_var 
 3131 06f2 0528     	    cmp r0,#TK_ARRAY 
 3132 06f4 07D0     	    beq let_array 
 3133 06f6 FFF7FEBF 	    b syntax_error 
 3134              	let_var:
 3135 06fa 4FEA8101 	    lsl r1,#2
 3136 06fe 04F16000 	    add r0,UPP,#VARS
 3137 0702 0844     	    add r0,r1
 3138 0704 1FE0     	    b 1f 
 3139              	let_array: 
 3140 0706 4FF00600 	    mov r0,#TK_LPAREN
 3141 070a 00B5FFF7 	    _CALL expect 
 3141      FEFF5DF8 
 3141      04EB
 3142 0714 00B5FFF7 	    _CALL expression
 3142      FEFF5DF8 
 3142      04EB
 3143 071e 0F28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 83


 3144 0720 7FF4FEAF 	    bne syntax_error
 3145 0724 4CF8041D 	    _PUSH r1 
 3146 0728 4FF00700 	    mov r0,#TK_RPAREN
 3147 072c 00B5FFF7 	    _CALL expect 
 3147      FEFF5DF8 
 3147      04EB
 3148 0736 5CF8041B 	    _POP r1 
 3149 073a D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3150 073e 4FEA8101 	    lsl r1,#2 
 3151 0742 A0EB0100 	    sub r0,r1 
 3152 0746 4CF8040D 	1:  _PUSH r0 
 3153 074a 4FF03200 	    mov r0,#TK_EQUAL 
 3154 074e 00B5FFF7 	    _CALL expect 
 3154      FEFF5DF8 
 3154      04EB
 3155 0758 00B5FFF7 	    _CALL expression   
 3155      FEFF5DF8 
 3155      04EB
 3156 0762 0F28     	    cmp r0,#TK_INTGR
 3157 0764 7FF4FEAF 	    bne syntax_error   
 3158 0768 5CF8040B 	2:  _POP r0 
 3159 076c 0160     	    str r1,[r0]
 3160 076e 7047     	    _RET  
 3161              	
 3162              	/***************************************
 3163              	  BASIC: LIST [[first]-last]
 3164              	  use:
 3165              	    r2   first line# 
 3166              	    r3   last line#
 3167              	    T1   *line 
 3168              	    T2   TXTEND 
 3169              	**************************************/  
 3170              	    _FUNC list
 3171 0770 206C10F0 	    _CLO
 3171      010F03D0 
 3171      4FF00700 
 3171      FFF7FEBF 
 3172 0780 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3173 0784 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3174 0788 B8F80020 	    ldrh r2,[T1]
 3175 078c 4FF6FF73 	    mov r3,#65535 
 3176 0790 00B5FFF7 	    _CALL next_token 
 3176      FEFF5DF8 
 3176      04EB
 3177 079a 10B3     	    cbz r0,6f 
 3178 079c 0F28     	    cmp r0,#TK_INTGR
 3179 079e 09D1     	    bne 1f 
 3180 07a0 0A46     	    mov r2,r1 // first line
 3181 07a2 00B5FFF7 	    _CALL next_token
 3181      FEFF5DF8 
 3181      04EB
 3182 07ac 0028     	    cmp r0,#TK_NONE 
 3183 07ae 01D1     	    bne 1f 
 3184 07b0 1346     	    mov r3,r2 
 3185 07b2 0CE0     	    b 4f 
 3186 07b4 1128     	1:  cmp r0,#TK_MINUS 
 3187 07b6 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 84


 3188 07ba 00B5FFF7 	    _CALL next_token 
 3188      FEFF5DF8 
 3188      04EB
 3189 07c4 18B1     	    cbz r0,4f 
 3190 07c6 0F28     	    cmp r0,#TK_INTGR
 3191 07c8 7FF4FEAF 	    bne syntax_error  
 3192 07cc 0B46     	    mov r3,r1 
 3193              	4:  // skip lines below r2 
 3194 07ce B8F80000 	    ldrh r0,[T1]
 3195 07d2 9042     	    cmp r0,r2 
 3196 07d4 05D5     	    bpl 6f 
 3197 07d6 98F80200 	    ldrb r0,[T1,#2]
 3198 07da 8044     	    add T1,r0
 3199 07dc C845     	    cmp T1,T2 
 3200 07de F6D4     	    bmi 4b
 3201 07e0 1AE0     	    b 9f 
 3202 07e2 C845     	6:  cmp T1,T2  
 3203 07e4 18D5     	    bpl 9f
 3204 07e6 4046     	    mov r0,T1   
 3205 07e8 DFF83010 	    ldr r1,out_buff 
 3206 07ec 00B5FFF7 	    _CALL decompile_line 
 3206      FEFF5DF8 
 3206      04EB
 3207 07f6 00B5FFF7 	    _CALL uart_puts 
 3207      FEFF5DF8 
 3207      04EB
 3208 0800 00B5FFF7 	    _CALL cr 
 3208      FEFF5DF8 
 3208      04EB
 3209 080a 98F80200 	    ldrb r0,[T1,#2]
 3210 080e 8044     	    add T1,r0
 3211 0810 B8F80000 	    ldrh r0,[T1]
 3212 0814 9842     	    cmp r0,r3 
 3213 0816 E4DD     	    ble 6b 
 3214 0818 FFF7FEBF 	9:  b warm_start 
 3215 081c 00000000 	out_buff: .word _tib 
 3216              	
 3217              	/********************************
 3218              	  BASIC: LOG2(expr)
 3219              	  return log base 2 of expr 
 3220              	********************************/
 3221              	    _FUNC log2
 3222 0820 00B5FFF7 	    _CALL func_args
 3222      FEFF5DF8 
 3222      04EB
 3223 082a 0128     	    cmp r0,#1 
 3224 082c 7FF4FEAF 	    bne syntax_error
 3225 0830 5CF8040B 	    _POP r0 
 3226 0834 B0FA80F1 	    clz r1,r0 
 3227 0838 C1F11F01 	    rsb r1,#31
 3228 083c 4FF00F00 	9:  mov r0,#TK_INTGR
 3229 0840 7047     	    _RET 
 3230              	
 3231              	
 3232              	/****************************************
 3233              	  BASIC: LSHIFT(expr1,expr2)
 3234              	  shift right expr1 of expr2 bits 
ARM GAS  tinyBasic.s 			page 85


 3235              	****************************************/
 3236 0842 00BF     	    _FUNC lshift
 3237 0844 00B5FFF7 	    _CALL func_args
 3237      FEFF5DF8 
 3237      04EB
 3238 084e 0228     	    cmp r0,#2
 3239 0850 7FF4FEAF 	    bne syntax_error 
 3240 0854 BCE80300 	    ldmia DP!,{r0,r1}
 3241 0858 01FA00F1 	    lsl r1,r0 
 3242 085c 4FF00F00 	    mov r0,#TK_INTGR
 3243 0860 7047     	    _RET 
 3244              	
 3245              	/***********************************
 3246              	  BASIC: NEW 
 3247              	  delete existing program in memory
 3248              	  and clear variables and RAM 
 3249              	***********************************/
 3250 0862 00BF     	    _FUNC new
 3251 0864 206C10F0 	    _CLO 
 3251      010F03D0 
 3251      4FF00700 
 3251      FFF7FEBF 
 3252 0874 00B5FFF7 	    _CALL clear_basic 
 3252      FEFF5DF8 
 3252      04EB
 3253 087e FFF7FEBF 	    b warm_start   
 3254              	
 3255              	/************************************
 3256              	  BASIC: NOT relation  
 3257              	  invert logical value or relation
 3258              	************************************/
 3259 0882 00BF     	      _FUNC func_not
 3260 0884 00B5FFF7 	      _CALL relation 
 3260      FEFF5DF8 
 3260      04EB
 3261 088e 11B1     	      cbz r1,8f 
 3262 0890 81EA0101 	      eor r1,r1
 3263 0894 01E0     	      b 9f 
 3264 0896 4FF0FF31 	  8:  mov r1,#-1
 3265 089a 7047     	  9:  _RET 
 3266              	
 3267              	/******************************************
 3268              	  BASIC: OR(expr1,expr2)
 3269              	  binary OR between 2 expressions
 3270              	******************************************/
 3271              	    _FUNC bit_or
 3272 089c 00B5FFF7 	    _CALL func_args
 3272      FEFF5DF8 
 3272      04EB
 3273 08a6 0228     	    cmp r0,#2
 3274 08a8 7FF4FEAF 	    bne syntax_error
 3275 08ac 5CF8040B 	    _POP r0 
 3276 08b0 5CF8041B 	    _POP r1
 3277 08b4 41EA0001 	    orr r1,r0 
 3278 08b8 4FF00F00 	    mov r0,#TK_INTGR
 3279 08bc 7047     	    _RET 
 3280              	
ARM GAS  tinyBasic.s 			page 86


 3281              	/****************************************
 3282              	  BASIC: INP(\c) 
 3283              	  read gpio_idr (16 bits value) 
 3284              	***************************************/
 3285 08be 00BF     	    _FUNC inp 
 3286 08c0 4FF00600 	    mov r0,#TK_LPAREN 
 3287 08c4 00B5FFF7 	    _CALL expect 
 3287      FEFF5DF8 
 3287      04EB
 3288 08ce 4FF00300 	    mov r0,#TK_CHAR 
 3289 08d2 00B5FFF7 	    _CALL expect
 3289      FEFF5DF8 
 3289      04EB
 3290 08dc 0846     	    mov r0,r1 
 3291 08de 00B5FFF7 	    _CALL upper 
 3291      FEFF5DF8 
 3291      04EB
 3292 08e8 0246     	    mov r2,r0 
 3293 08ea 4FF00700 	    mov r0,#TK_RPAREN
 3294 08ee 00B5FFF7 	    _CALL expect 
 3294      FEFF5DF8 
 3294      04EB
 3295 08f8 A2F14102 	    sub r2,#'A' 
 3296 08fc 4FF48061 	    mov r1,0x400 
 3297 0900 02FB01F1 	    mul r1,r2
 3298 0904 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3298      C4F20102 
 3299 090c 0A44     	    add r2,r1 
 3300 090e 1168     	    ldr r1,[r2]
 3301 0910 4FF00F00 	    mov r0,#TK_INTGR
 3302 0914 7047     	    _RET 
 3303              	
 3304              	
 3305              	/****************************************
 3306              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3307              	  output to gpio_odr expr lower 16 bits
 3308              	***************************************/
 3309 0916 00BF     	    _FUNC out
 3310 0918 4FF00300 	1:  mov r0,#TK_CHAR 
 3311 091c 00B5FFF7 	    _CALL expect 
 3311      FEFF5DF8 
 3311      04EB
 3312 0926 0846     	    mov r0,r1
 3313 0928 00B5FFF7 	    _CALL upper
 3313      FEFF5DF8 
 3313      04EB
 3314 0932 0246     	    mov r2,r0 
 3315 0934 4FF00800 	    mov r0,#TK_COMMA 
 3316 0938 00B5FFF7 	    _CALL expect 
 3316      FEFF5DF8 
 3316      04EB
 3317 0942 00B5FFF7 	    _CALL expression 
 3317      FEFF5DF8 
 3317      04EB
 3318 094c A2F14102 	    sub r2,#'A'
 3319 0950 4FF48063 	    mov r3,#0x400 
 3320 0954 03FB02F2 	    mul r2,r3 
ARM GAS  tinyBasic.s 			page 87


 3321 0958 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3321      C4F20103 
 3322 0960 1A44     	    add r2,r3
 3323 0962 1180     	    strh r1,[r2]
 3324 0964 00B5FFF7 	    _CALL next_token
 3324      FEFF5DF8 
 3324      04EB
 3325 096e 0828     	    cmp r0,#TK_COMMA
 3326 0970 D2D0     	    beq 1b 
 3327 0972 D4F800A0 	    _UNGET_TOKEN
 3327      D4F808B0 
 3328 097a 7047     	    _RET 
 3329              	
 3330              	/****************************************
 3331              	  BASIC: PAD 
 3332              	  return pad buffer address 
 3333              	****************************************/
 3334              	    _FUNC pad_ref
 3335 097c 0149     	    ldr r1,pad_adr  
 3336 097e 4FF00F00 	    mov r0,#TK_INTGR 
 3337 0982 7047     	    _RET 
 3338 0984 00000000 	pad_adr: .word _pad 
 3339              	
 3340              	/***********************
 3341              	  BASIC: PAUSE expr 
 3342              	  suspend execution for 
 3343              	  expr milliseconds 
 3344              	************************/
 3345              	    _FUNC pause
 3346 0988 00B5FFF7 	    _CALL expression 
 3346      FEFF5DF8 
 3346      04EB
 3347 0992 0F28     	    cmp r0,#TK_INTGR 
 3348 0994 7FF4FEAF 	    bne syntax_error 
 3349 0998 E069     	    ldr r0,[UPP,#TICKS]
 3350 099a 0844     	    add r0,r1 
 3351 099c E169     	1:  ldr r1,[UPP,#TICKS]
 3352 099e 8842     	    cmp r0,r1 
 3353 09a0 FCD1     	    bne 1b     
 3354 09a2 7047     	    _RET 
 3355              	
 3356              	/***************************************************
 3357              	  BASIC: PMODE \c,pin,mode[,opt] 
 3358              	  configure a digital pin for input|output
 3359              	  paramters:
 3360              	    \c    port letter
 3361              	    pin   pin {0..15} 
 3362              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3363              	    for input mode:
 3364              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3365              	    for output mode:
 3366              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3367              	  use:
 3368              	    r2  opt
 3369              	    r3  mode 
 3370              	    T1  pin  
 3371              	    T2  port      
ARM GAS  tinyBasic.s 			page 88


 3372              	***************************************************/
 3373              	      _FUNC pin_mode
 3374 09a4 4FF00300 	      mov r0,#TK_CHAR 
 3375 09a8 00B5FFF7 	      _CALL expect
 3375      FEFF5DF8 
 3375      04EB
 3376 09b2 0846     	      mov r0,r1 
 3377 09b4 00B5FFF7 	      _CALL upper 
 3377      FEFF5DF8 
 3377      04EB
 3378 09be A0F14109 	      sub T2,r0,#'A'
 3379 09c2 4FF00800 	      mov r0,#TK_COMMA
 3380 09c6 00B5FFF7 	      _CALL expect 
 3380      FEFF5DF8 
 3380      04EB
 3381 09d0 00B5FFF7 	      _CALL arg_list
 3381      FEFF5DF8 
 3381      04EB
 3382 09da 0228     	      cmp r0,#2 
 3383 09dc 3FF5FEAF 	      bmi syntax_error
 3384 09e0 0428     	      cmp r0,#4
 3385 09e2 01D4     	      bmi 1f 
 3386 09e4 FFF7FEBF 	      b syntax_error
 3387 09e8 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3388 09ec 0228     	      cmp r0,#2
 3389 09ee 02D0     	      beq 2f 
 3390              	// 3 parameters, pin,mode,opt  
 3391 09f0 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3392 09f4 01E0     	    b 4f  
 3393              	2: // 2 parameters, pin,mode 
 3394 09f6 BCE80801 	    ldmia DP!,{r3,T1}
 3395 09fa 4FF48060 	4:  mov r0,#0x400 
 3396 09fe 00FB09F9 	    mul T2,r0 
 3397 0a02 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3397      C4F20100 
 3398 0a0a 8144     	    add T2,r0 // port base address 
 3399              	// if input mode set pull in ODR 
 3400 0a0c 83B9     	    cbnz r3,2f 
 3401 0a0e 022A     	    cmp r2,#2
 3402 0a10 0ED4     	    bmi 2f 
 3403 0a12 4FF00100 	    mov r0,#1 
 3404 0a16 4146     	    mov r1,T1 
 3405 0a18 032A     	    cmp r2,#3 
 3406 0a1a 01D0     	    beq 1f
 3407 0a1c 01F11001 	    add r1,#16 //reset bit 
 3408 0a20 00FA01F0 	1:  lsl r0,r1
 3409 0a24 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3410 0a28 032A     	    cmp r2,#3 
 3411 0a2a 01D4     	    bmi 2f 
 3412 0a2c A2F10102 	    sub r2,#1
 3413              	2: // set CNF|MODE bits GPIO_CRx 
 3414 0a30 B8F1080F 	    cmp T1,#8 
 3415 0a34 03D4     	    bmi 3f 
 3416 0a36 A8F10808 	    sub T1,#8 
 3417 0a3a 09F10409 	    add T2,#4 //CRH 
 3418 0a3e 4FF00F00 	3:  mov r0,#15   
 3419 0a42 4FEA8801 	    lsl r1,T1,#2 
ARM GAS  tinyBasic.s 			page 89


 3420 0a46 00FA01F0 	    lsl r0,r1
 3421 0a4a 6FEA0000 	    mvn r0,r0 // bitmask 
 3422 0a4e D9F80010 	    ldr r1,[T2]
 3423 0a52 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3424              	// combine opt|mode     
 3425 0a56 4FEA8200 	    lsl r0,r2,#2 
 3426 0a5a 40EA0300 	    orr r0,r3 // OPT|MODE 
 3427 0a5e 4FEA8803 	    lsl r3,T1,#2 
 3428 0a62 00FA03F0 	    lsl r0,r3
 3429 0a66 41EA0001 	    orr r1,r0   
 3430 0a6a C9F80010 	    str r1,[T2] // mode and option set
 3431 0a6e 7047     	    _RET 
 3432              	
 3433              	
 3434              	/*****************************************
 3435              	  BASIC: PEEK8 (expr)  
 3436              	  return byte value at address 
 3437              	*****************************************/
 3438              	    _FUNC peek8
 3439 0a70 00B5FFF7 	    _CALL func_args  
 3439      FEFF5DF8 
 3439      04EB
 3440 0a7a 0128     	    cmp r0,#1
 3441 0a7c 3FF5FEAF 	    bmi syntax_error
 3442 0a80 5CF8041B 	    _POP r1 
 3443 0a84 0978     	    ldrb r1,[r1]
 3444 0a86 4FF00F00 	    mov r0,#TK_INTGR     
 3445 0a8a 7047     	    _RET 
 3446              	
 3447              	/*****************************************
 3448              	  BASIC: PEEK16 (expr)  
 3449              	  return byte value at address 
 3450              	*****************************************/
 3451              	    _FUNC peek16
 3452 0a8c 00B5FFF7 	    _CALL func_args  
 3452      FEFF5DF8 
 3452      04EB
 3453 0a96 0128     	    cmp r0,#1
 3454 0a98 3FF5FEAF 	    bmi syntax_error
 3455 0a9c 5CF8041B 	    _POP r1 
 3456 0aa0 0988     	    ldrh r1,[r1]
 3457 0aa2 4FF00F00 	    mov r0,#TK_INTGR     
 3458 0aa6 7047     	    _RET 
 3459              	
 3460              	/*****************************************
 3461              	  BASIC: PEEK32 (expr)  
 3462              	  return byte value at address 
 3463              	*****************************************/
 3464              	    _FUNC peek32
 3465 0aa8 00B5FFF7 	    _CALL func_args  
 3465      FEFF5DF8 
 3465      04EB
 3466 0ab2 0128     	    cmp r0,#1
 3467 0ab4 3FF5FEAF 	    bmi syntax_error
 3468 0ab8 5CF8041B 	    _POP r1 
 3469 0abc 0968     	    ldr r1,[r1]
 3470 0abe 4FF00F00 	    mov r0,#TK_INTGR     
ARM GAS  tinyBasic.s 			page 90


 3471 0ac2 7047     	    _RET 
 3472              	
 3473              	
 3474              	/**********************************
 3475              	  BASIC: POKE8 addr,byte
 3476              	  store byte at addr   
 3477              	**********************************/
 3478              	    _FUNC poke8
 3479 0ac4 00B5FFF7 	    _CALL arg_list
 3479      FEFF5DF8 
 3479      04EB
 3480 0ace 0228     	    cmp r0,#2 
 3481 0ad0 7FF4FEAF 	    bne syntax_error
 3482 0ad4 BCE80300 	    ldmia DP!,{r0,r1} 
 3483 0ad8 0870     	    strb r0,[r1]
 3484 0ada 7047     	    _RET 
 3485              	
 3486              	/**********************************
 3487              	  BASIC: POKE16 addr,hword
 3488              	  store hword at addr   
 3489              	**********************************/
 3490              	    _FUNC poke16
 3491 0adc 00B5FFF7 	    _CALL arg_list
 3491      FEFF5DF8 
 3491      04EB
 3492 0ae6 0228     	    cmp r0,#2 
 3493 0ae8 7FF4FEAF 	    bne syntax_error
 3494 0aec BCE80300 	    ldmia DP!,{r0,r1} 
 3495 0af0 0880     	    strh r0,[r1]
 3496 0af2 7047     	    _RET 
 3497              	
 3498              	/**********************************
 3499              	  BASIC: POKE32 addr,word
 3500              	  store word at addr   
 3501              	**********************************/
 3502              	    _FUNC poke32
 3503 0af4 00B5FFF7 	    _CALL arg_list 
 3503      FEFF5DF8 
 3503      04EB
 3504 0afe 0228     	    cmp r0,#2 
 3505 0b00 7FF4FEAF 	    bne syntax_error
 3506 0b04 BCE80300 	    ldmia DP!,{r0,r1} 
 3507 0b08 0860     	    str r0,[r1]
 3508 0b0a 7047     	    _RET 
 3509              	
 3510              	
 3511              	
 3512              	/****************************
 3513              	  BASIC: PRINT|? arg_list 
 3514              	  print list of arguments 
 3515              	****************************/
 3516              	    _FUNC print
 3517 0b0c 88EA0808 	    eor T1,T1 
 3518 0b10 00B5FFF7 	0:  _CALL expression
 3518      FEFF5DF8 
 3518      04EB
 3519 0b1a 0F28     	    cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 91


 3520 0b1c 07D1     	    bne 1f 
 3521 0b1e 0846     	    mov r0,r1
 3522 0b20 A169     	    ldr r1,[UPP,#BASE]
 3523 0b22 00B5FFF7 	    _CALL print_int
 3523      FEFF5DF8 
 3523      04EB
 3524 0b2c 3EE0     	    b 8f  
 3525 0b2e 00B5FFF7 	1:  _CALL next_token
 3525      FEFF5DF8 
 3525      04EB
 3526 0b38 0128     	    cmp r0,#TK_COLON 
 3527 0b3a 00DC     	    bgt 2f
 3528 0b3c 4DE0     	    b unget_exit 
 3529 0b3e 0228     	2:  cmp r0,#TK_QSTR 
 3530 0b40 06D1     	    bne 3f
 3531 0b42 0846     	    mov r0,r1 
 3532 0b44 00B5FFF7 	    _CALL uart_puts  
 3532      FEFF5DF8 
 3532      04EB
 3533 0b4e 2DE0     	    b 8f 
 3534 0b50 0D28     	3:  cmp r0,#TK_CFUNC
 3535 0b52 05D1     	    bne 4f
 3536 0b54 0846     	    mov r0,r1
 3537 0b56 00B5FFF7 	    _CALL execute 
 3537      FEFF5DF8 
 3537      04EB
 3538 0b60 0328     	4:  cmp r0,#TK_CHAR 
 3539 0b62 06D1     	    bne 5f 
 3540 0b64 0846     	    mov r0,r1 
 3541 0b66 00B5FFF7 	    _CALL uart_putc 
 3541      FEFF5DF8 
 3541      04EB
 3542 0b70 1CE0     	    b 8f 
 3543 0b72 0A28     	5:  cmp r0,#TK_SHARP
 3544 0b74 09D1     	    bne 6f 
 3545 0b76 00B5FFF7 	   _CALL next_token
 3545      FEFF5DF8 
 3545      04EB
 3546 0b80 0F28     	    cmp r0,#TK_INTGR  
 3547 0b82 7FF4FEAF 	    bne syntax_error 
 3548 0b86 6164     	    str r1,[UPP,#TAB_WIDTH]
 3549 0b88 10E0     	    b 8f 
 3550 0b8a 0B28     	6:  cmp r0,#TK_CMD 
 3551 0b8c 25D1     	    bne unget_exit  
 3552 0b8e 4429     	    cmp r1,#TAB_IDX 
 3553 0b90 05D1     	    bne 6f
 3554 0b92 00B500F0 	    _CALL tab 
 3554      90FA5DF8 
 3554      04EB
 3555 0b9c 06E0     	    b 8f 
 3556 0b9e 4029     	6:  cmp r1,#SPC_IDX  
 3557 0ba0 1BD1     	    bne unget_exit
 3558 0ba2 00B500F0 	    _CALL spc   
 3558      4EFA5DF8 
 3558      04EB
 3559 0bac 88EA0808 	8:  eor T1,T1  
 3560 0bb0 00B5FFF7 	    _CALL next_token
ARM GAS  tinyBasic.s 			page 92


 3560      FEFF5DF8 
 3560      04EB
 3561 0bba 90B1     	    cbz r0, print_exit  
 3562 0bbc 0828     	    cmp r0,#TK_COMMA 
 3563 0bbe 02D1     	    bne 8f 
 3564 0bc0 4FF0FF38 	    mov T1,#-1
 3565 0bc4 A4E7     	    b 0b
 3566 0bc6 0928     	8:  cmp r0,#TK_SEMIC 
 3567 0bc8 07D1     	    bne unget_exit 
 3568 0bca 00B5FFF7 	    _CALL tabulation 
 3568      FEFF5DF8 
 3568      04EB
 3569 0bd4 4FF0FF38 	    mov T1,#-1
 3570 0bd8 9AE7     	    b 0b
 3571              	unget_exit:         
 3572 0bda D4F800A0 	   _UNGET_TOKEN 
 3572      D4F808B0 
 3573              	print_exit:
 3574 0be2 18EA0808 	    ands T1,T1 
 3575 0be6 04D1     	    bne 9f
 3576 0be8 00B5FFF7 	    _CALL cr 
 3576      FEFF5DF8 
 3576      04EB
 3577 0bf2 7047     	9:  _RET 
 3578              	
 3579              	/**************************************
 3580              	  BASIC: QKEY
 3581              	  check if key pressed 
 3582              	**************************************/ 
 3583              	    _FUNC qkey
 3584 0bf4 4FF00001 	    mov r1,#0
 3585 0bf8 00B5FFF7 	    _CALL uart_qkey
 3585      FEFF5DF8 
 3585      04EB
 3586 0c02 01D0     	    beq 9f 
 3587 0c04 4FF0FF31 	    mov r1,#-1 
 3588 0c08 4FF00F00 	9:  mov r0,#TK_INTGR
 3589 0c0c 7047     	    _RET 
 3590              	
 3591              	/******************************************
 3592              	  BASIC RANDOM(expr)
 3593              	  generate random number between 0..expr-1
 3594              	******************************************/
 3595 0c0e 00BF     	    _FUNC random
 3596 0c10 00B5FFF7 	    _CALL func_args 
 3596      FEFF5DF8 
 3596      04EB
 3597 0c1a 0128     	    cmp r0,#1
 3598 0c1c 7FF4FEAF 	    bne syntax_error 
 3599 0c20 606A     	    ldr r0,[UPP,#SEED]
 3600 0c22 4FEA4031 	    lsl r1,r0,#13
 3601 0c26 81EA0001 	    eor r1,r0
 3602 0c2a 4FEA5140 	    lsr r0,r1,#17
 3603 0c2e 81EA0001 	    eor r1,r0
 3604 0c32 4FEA4110 	    lsl r0,r1,#5
 3605 0c36 81EA0001 	    eor r1,r0
 3606 0c3a 6162     	    str r1,[UPP,#SEED]
ARM GAS  tinyBasic.s 			page 93


 3607 0c3c 5CF8040B 	    _POP r0 
 3608 0c40 B1FBF0F2 	    udiv r2,r1,r0  
 3609 0c44 00FB02F2 	    mul r2,r0 
 3610 0c48 A1EB0201 	    sub r1,r2 
 3611 0c4c 4FF00F00 	    mov r0,#TK_INTGR
 3612 0c50 7047     	    _RET 
 3613              	
 3614              	/****************************************
 3615              	  BASIC: RSHIFT(expr1,expr2)
 3616              	  shift left expr1 de expr2 bits 
 3617              	****************************************/
 3618 0c52 00BF     	    _FUNC rshift
 3619 0c54 00B5FFF7 	    _CALL func_args
 3619      FEFF5DF8 
 3619      04EB
 3620 0c5e 0228     	    cmp r0,#2 
 3621 0c60 7FF4FEAF 	    bne syntax_error
 3622 0c64 BCE80300 	    ldmia DP!,{r0,r1}
 3623 0c68 21FA00F1 	    lsr r1,r0  
 3624 0c6c 4FF00F00 	    mov r0,#TK_INTGR
 3625 0c70 7047     	    _RET 
 3626              	
 3627              	/****************************
 3628              	  BASIC: RUN 
 3629              	  execute program in memory
 3630              	****************************/
 3631 0c72 00BF     	    _FUNC run
 3632 0c74 206C10F0 	    _CLO 
 3632      010F03D0 
 3632      4FF00700 
 3632      FFF7FEBF 
 3633 0c84 206B     	    ldr r0,[UPP,#TXTBGN]
 3634 0c86 616B     	    ldr r1,[UPP,#TXTEND]
 3635 0c88 C4F8D010 	    str r1,[UPP,#HERE]
 3636 0c8c 8842     	    cmp r0,r1
 3637 0c8e 21D0     	    beq 9f
 3638 0c90 216C     	    ldr r1,[UPP,#FLAGS]
 3639 0c92 11F0080F 	    tst r1,#FSTOP
 3640 0c96 09D0     	    beq 1f
 3641 0c98 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3642 0c9c 6060     	    str r0,[UPP,#COUNT]
 3643 0c9e 206C     	    ldr r0,[UPP,#FLAGS]
 3644 0ca0 4FF00901 	    mov r1,#FRUN+FSTOP
 3645 0ca4 80EA0100 	    eor r0,r1
 3646 0ca8 2064     	    str r0,[UPP,#FLAGS] 
 3647 0caa 13E0     	    b 9f  
 3648 0cac 8178     	1:  ldrb r1,[r0,#2]
 3649 0cae 6160     	    str r1,[UPP,#COUNT]
 3650 0cb0 8346     	    mov BPTR,r0 
 3651 0cb2 4FF0030A 	    mov IN,#3
 3652 0cb6 606B     	    ldr r0,[UPP,#TXTEND]
 3653              	    // reset dataline pointers 
 3654 0cb8 80EA0000 	    eor r0,r0 
 3655 0cbc E060     	    str r0,[UPP,#DATAPTR]
 3656 0cbe 2061     	    str r0,[UPP,#DATA]
 3657 0cc0 6061     	    str r0,[UPP,#DATALEN] 
 3658 0cc2 206C     	    ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 94


 3659 0cc4 40F00100 	    orr r0,#FRUN 
 3660 0cc8 2064     	    str r0,[UPP,#FLAGS]
 3661 0cca 00B5FFF7 	    _CALL show_trace 
 3661      FEFF5DF8 
 3661      04EB
 3662 0cd4 7047     	9:  _RET 
 3663              	
 3664              	/**********************************
 3665              	        FILE SYSTEM 
 3666              	**********************************/
 3667              	
 3668              	/*********************************
 3669              	  search_free 
 3670              	  search first free PAGE in fs
 3671              	  a PAGE is free if first word is
 3672              	  -1
 3673              	  input:
 3674              	    none 
 3675              	  output:
 3676              	    r0    addr|0
 3677              	  use:
 3678              	*********************************/
 3679 0cd6 00BF     	    _FUNC search_free 
 3680 0cd8 06B4     	    push {r1,r2}
 3681 0cda DFF86410 	    ldr r1,fs_addr 
 3682 0cde 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3682      C0F60202 
 3683 0ce6 0868     	1:  ldr r0,[r1]
 3684 0ce8 B0F1FF3F 	    cmp r0,#-1
 3685 0cec 03D0     	    beq 8f 
 3686 0cee 01F58061 	    add r1,#PAGE_SIZE
 3687 0cf2 9142     	    cmp r1,r2 
 3688 0cf4 F7D4     	    bmi 1b 
 3689 0cf6 0846     	8:  mov r0,r1 
 3690 0cf8 06BC     	    pop {r1,r2}   
 3691 0cfa 7047     	    _RET 
 3692              	
 3693              	/*********************************
 3694              	  search_file 
 3695              	  search for a file name 
 3696              	  in file system.
 3697              	  input: 
 3698              	    r0   .asciz target name
 3699              	  output:
 3700              	    r0    0 || address found 
 3701              	  use:
 3702              	   r0     temp 
 3703              	   r1     *file_name 
 3704              	   r2     *fs  
 3705              	   r3     target   
 3706              	**********************************/
 3707              	    _FUNC search_file 
 3708 0cfc 0EB4     	    push {r1,r2,r3}
 3709 0cfe DFF84020 	    ldr r2,fs_addr
 3710 0d02 0346     	    mov r3,r0  
 3711              	cmp_loop:
 3712 0d04 1068     	    ldr r0,[r2]
ARM GAS  tinyBasic.s 			page 95


 3713 0d06 B0F1FF3F 	    cmp r0,#-1
 3714 0d0a 80EA0000 	    eor r0,r0
 3715 0d0e 15D0     	    beq 9f // reached end of fs 
 3716 0d10 1846     	1:  mov r0,r3
 3717 0d12 02F10201 	    add r1,r2,#2
 3718 0d16 00B5FFF7 	    _CALL strcmp
 3718      FEFF5DF8 
 3718      04EB
 3719 0d20 08B9     	    cbnz r0,2f
 3720 0d22 1046     	    mov r0,r2 
 3721 0d24 0AE0     	    b 9f   
 3722 0d26 1088     	2:  ldrh r0,[r2] // name length
 3723 0d28 0244     	    add r2,r0 
 3724 0d2a 1088     	    ldrh r0,[r2]
 3725 0d2c 1044     	    add r0,r2
 3726 0d2e 00B5FFF7 	    _CALL page_align 
 3726      FEFF5DF8 
 3726      04EB
 3727 0d38 0246     	    mov r2,r0   
 3728 0d3a E3E7     	    b cmp_loop 
 3729 0d3c 0EBC     	9:  pop {r1,r2,r3}
 3730 0d3e 7047     	    _RET 
 3731              	
 3732 0d40 00000000 	fs_addr: .word FILE_SYSTEM
 3733              	
 3734              	/*************************************
 3735              	  BASIC: DIR 
 3736              	  list files stored in fs 
 3737              	  use:
 3738              	    r0  temp 
 3739              	    r1  temp
 3740              	    r2  file count
 3741              	    r3  data size
 3742              	    T1  *fs  
 3743              	*************************************/
 3744              	    _FUNC directory
 3745 0d44 206C10F0 	    _CLO 
 3745      010F03D0 
 3745      4FF00700 
 3745      FFF7FEBF 
 3746 0d54 82EA0202 	    eor r2,r2 
 3747 0d58 5FF81C80 	    ldr T1,fs_addr 
 3748 0d5c D8F80000 	1:  ldr r0,[T1] // name length 
 3749 0d60 B0F1FF3F 	    cmp r0,#-1
 3750 0d64 2AD0     	    beq no_more_file
 3751 0d66 00F00F03 	    and r3,r0,#15
 3752 0d6a 08F10200 	    add r0,T1,#2
 3753 0d6e 00B5FFF7 	    _CALL uart_puts 
 3753      FEFF5DF8 
 3753      04EB
 3754 0d78 4FF01000 	    mov r0,#16 
 3755 0d7c 00B5FFF7 	    _CALL cursor_x 
 3755      FEFF5DF8 
 3755      04EB
 3756 0d86 9844     	    add T1,r3 
 3757 0d88 B8F80030 	    ldrh r3,[T1]
 3758 0d8c 1846     	    mov r0,r3 
ARM GAS  tinyBasic.s 			page 96


 3759 0d8e 4FF00A01 	    mov r1,#10 
 3760 0d92 00B5FFF7 	    _CALL print_int
 3760      FEFF5DF8 
 3760      04EB
 3761 0d9c 00B5FFF7 	    _CALL cr  
 3761      FEFF5DF8 
 3761      04EB
 3762 0da6 08EB0300 	    add r0,T1,r3 
 3763 0daa 00B5FFF7 	    _CALL page_align
 3763      FEFF5DF8 
 3763      04EB
 3764 0db4 8046     	    mov T1,r0 
 3765 0db6 02F10102 	    add r2,#1 
 3766 0dba CFE7     	    b 1b  
 3767              	no_more_file:
 3768 0dbc 00B5FFF7 	    _CALL cr
 3768      FEFF5DF8 
 3768      04EB
 3769 0dc6 4FF01000 	    mov r0,#16
 3770 0dca 00B5FFF7 	    _CALL cursor_x  
 3770      FEFF5DF8 
 3770      04EB
 3771 0dd4 1046     	    mov r0,r2 
 3772 0dd6 4FF00A01 	    mov r1,#10 
 3773 0dda 00B5FFF7 	    _CALL print_int 
 3773      FEFF5DF8 
 3773      04EB
 3774 0de4 DFF8D404 	    ldr r0,=fcount 
 3775 0de8 00B5FFF7 	    _CALL uart_puts 
 3775      FEFF5DF8 
 3775      04EB
 3776 0df2 7047     	    _RET 
 3777 0df4 66696C65 	fcount:  .asciz "files\n"
 3777      730A00
 3778              	
 3779              	/*************************************
 3780              	  BASIC: FORGET ["name"]
 3781              	  delete file and all following 
 3782              	  if no name given delete all files 
 3783              	************************************/
 3784 0dfb 00       	    _FUNC forget
 3785 0dfc 2DE90802 	    push {r3,T2}
 3786 0e00 5FF8C490 	    ldr T2,fs_addr 
 3787 0e04 E36A     	    ldr r3,[UPP,#FSFREE]
 3788 0e06 00B5FFF7 	    _CALL next_token
 3788      FEFF5DF8 
 3788      04EB
 3789 0e10 38B1     	    cbz r0,1f // no name 
 3790 0e12 0846     	    mov r0,r1
 3791 0e14 00B5FFF7 	    _CALL search_file
 3791      71FF5DF8 
 3791      04EB
 3792 0e1e 58B1     	    cbz r0,9f 
 3793 0e20 8146     	    mov T2,r0 
 3794 0e22 9945     	1:  cmp T2,r3 
 3795 0e24 08D5     	    bpl 9f 
 3796 0e26 4846     	    mov r0,T2 
ARM GAS  tinyBasic.s 			page 97


 3797 0e28 00B5FFF7 	    _CALL erase_page
 3797      FEFF5DF8 
 3797      04EB
 3798 0e32 09F58069 	    add T2,#PAGE_SIZE
 3799 0e36 F4E7     	    b 1b 
 3800 0e38 00B5FFF7 	9:  _CALL search_free
 3800      4DFF5DF8 
 3800      04EB
 3801 0e42 BDE80802 	    pop {r3,T2} 
 3802 0e46 7047     	    _RET 
 3803              	
 3804              	/**********************************
 3805              	  BASIC LOAD "name" 
 3806              	  load file in RAM for execution
 3807              	  use:
 3808              	    r0   temp
 3809              	    r1   src
 3810              	    r2   dest 
 3811              	    r3   count 
 3812              	**********************************/
 3813              	    _FUNC load
 3814 0e48 206C10F0 	    _CLO 
 3814      010F03D0 
 3814      4FF00700 
 3814      FFF7FEBF 
 3815 0e58 00B5FFF7 	    _CALL next_token 
 3815      FEFF5DF8 
 3815      04EB
 3816 0e62 0228     	    cmp r0,#TK_QSTR 
 3817 0e64 7FF4FEAF 	    bne syntax_error 
 3818 0e68 0846     	    mov r0,r1 
 3819 0e6a 00B5FFF7 	    _CALL search_file 
 3819      46FF5DF8 
 3819      04EB
 3820 0e74 18B9     	    cbnz r0, 1f 
 3821 0e76 4FF00900 	    mov r0,#ERR_NOT_FILE
 3822 0e7a FFF7FEBF 	    b tb_error 
 3823 0e7e 0146     	1:  mov r1,r0 
 3824 0e80 0888     	    ldrh r0,[r1]
 3825 0e82 0144     	    add r1,r0 // data size field  
 3826 0e84 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3827 0e88 226B     	    ldr r2,[UPP,#TXTBGN]
 3828 0e8a 02EB0300 	    add r0,r2,r3  
 3829 0e8e 6063     	    str r0,[UPP,#TXTEND]
 3830 0e90 03F10103 	    add r3,#1
 3831 0e94 4FEA5303 	    lsr r3,#1
 3832              	2:  // load file data 
 3833 0e98 31F8020B 	    ldrh r0,[r1],#2
 3834 0e9c 22F8020B 	    strh r0,[r2],#2 
 3835 0ea0 013B     	    subs r3,#1 
 3836 0ea2 F9D1     	    bne 2b 
 3837              	// report file size 
 3838 0ea4 DFF81804 	    ldr r0,=fsize 
 3839 0ea8 00B5FFF7 	    _CALL uart_puts
 3839      FEFF5DF8 
 3839      04EB
 3840 0eb2 606B     	    ldr r0,[UPP,#TXTEND]
ARM GAS  tinyBasic.s 			page 98


 3841 0eb4 236B     	    ldr r3,[UPP,#TXTBGN]
 3842 0eb6 A0EB0300 	    sub r0,r3 
 3843 0eba 4FF00A01 	    mov r1,#10 
 3844 0ebe 00B5FFF7 	    _CALL print_int 
 3844      FEFF5DF8 
 3844      04EB
 3845 0ec8 FE48     	    ldr r0,=data_bytes 
 3846 0eca 00B5FFF7 	    _CALL uart_puts      
 3846      FEFF5DF8 
 3846      04EB
 3847 0ed4 7047     	    _RET 
 3848              	
 3849              	
 3850              	/*********************************
 3851              	  BASIC: SAVE "name" 
 3852              	  save program in flash memory
 3853              	  file structure:
 3854              	    .hword name_length 
 3855              	    .asciz name
 3856              	    .palign 1  
 3857              	    .hword data_length 
 3858              	    .byte  file data (variable length)  
 3859              	  use:
 3860              	    r0  temp 
 3861              	    r1  temp
 3862              	    r2  *flash 
 3863              	    r3  *ram  
 3864              	    T1  temp   
 3865              	********************************/
 3866 0ed6 00BF     	    _FUNC save
 3867 0ed8 206C10F0 	    _CLO 
 3867      010F03D0 
 3867      4FF00700 
 3867      FFF7FEBF 
 3868 0ee8 606B     	    ldr r0,[UPP,#TXTEND]
 3869 0eea 216B     	    ldr r1,[UPP,#TXTBGN]
 3870 0eec 8842     	    cmp r0,r1
 3871 0eee 03D1     	    bne 0f 
 3872 0ef0 4FF00D00 	    mov r0,#ERR_NO_PROG
 3873 0ef4 FFF7FEBF 	    b tb_error 
 3874 0ef8 00B5FFF7 	0:  _CALL next_token 
 3874      FEFF5DF8 
 3874      04EB
 3875 0f02 0228     	    cmp r0,#TK_QSTR
 3876 0f04 7FF4FEAF 	    bne syntax_error 
 3877              	// check for existing 
 3878 0f08 0B46     	    mov r3,r1 // save name 
 3879 0f0a 1846     	    mov r0,r3  
 3880 0f0c 00B5FFF7 	    _CALL search_file
 3880      F5FE5DF8 
 3880      04EB
 3881 0f16 18B1     	    cbz r0,new_file 
 3882 0f18 4FF00800 	    mov r0,#ERR_DUPLICATE
 3883 0f1c FFF7FEBF 	    b tb_error 
 3884              	new_file:
 3885 0f20 4FF00100 	    mov r0,#1 
 3886 0f24 00B5FFF7 	    _CALL unlock 
ARM GAS  tinyBasic.s 			page 99


 3886      FEFF5DF8 
 3886      04EB
 3887 0f2e E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3888 0f30 1846     	    mov r0,r3 // *name 
 3889 0f32 00B5FFF7 	    _CALL strlen 
 3889      FEFF5DF8 
 3889      04EB
 3890 0f3c 00F10400 	    add r0,#4  
 3891 0f40 20F00100 	    and r0,#-2 //even size
 3892 0f44 A0F10208 	    sub T1,r0,#2  // name length counter   
 3893 0f48 1146     	1:  mov r1,r2  
 3894 0f4a 00B5FFF7 	    _CALL hword_write   
 3894      FEFF5DF8 
 3894      04EB
 3895 0f54 02F10202 	    add r2,#2  
 3896              	// write file name      
 3897 0f58 33F8020B 	2:  ldrh r0,[r3],#2 
 3898 0f5c 1146     	    mov r1,r2 
 3899 0f5e 00B5FFF7 	    _CALL hword_write
 3899      FEFF5DF8 
 3899      04EB
 3900 0f68 02F10202 	    add r2,#2
 3901 0f6c B8F10208 	    subs T1,#2
 3902 0f70 F2D1     	    bne 2b
 3903              	// write data size 
 3904 0f72 606B     	    ldr r0,[UPP,#TXTEND]
 3905 0f74 236B     	    ldr r3,[UPP,#TXTBGN]
 3906 0f76 A0EB0300 	    sub r0,r3
 3907 0f7a 8046     	    mov T1,r0
 3908 0f7c 1146     	    mov r1,r2 
 3909 0f7e 00B5FFF7 	    _CALL hword_write
 3909      FEFF5DF8 
 3909      04EB
 3910 0f88 02F10202 	    add r2,#2 
 3911              	// write data 
 3912 0f8c 08F10108 	    add T1,#1 
 3913 0f90 4FEA5808 	    lsr T1,#1 // .hword to write 
 3914 0f94 33F8020B 	3:  ldrh r0,[r3],#2
 3915 0f98 1146     	    mov r1,r2
 3916 0f9a 00B5FFF7 	    _CALL hword_write 
 3916      FEFF5DF8 
 3916      04EB
 3917 0fa4 02F10202 	    add r2,#2 
 3918 0fa8 B8F10108 	    subs T1,#1 
 3919 0fac F2D1     	    bne 3b
 3920 0fae 4FF00000 	    mov r0,#0 
 3921 0fb2 00B5FFF7 	    _CALL unlock
 3921      FEFF5DF8 
 3921      04EB
 3922              	// update FSFREE     
 3923 0fbc 606B     	    ldr r0,[UPP,#TXTEND]
 3924 0fbe 216B     	    ldr r1,[UPP,#TXTBGN]
 3925 0fc0 A0EB0100 	    sub r0,r1 
 3926 0fc4 8046     	    mov T1,r0 
 3927 0fc6 E16A     	    ldr r1,[UPP,#FSFREE]
 3928 0fc8 0844     	    add r0,r1 
 3929 0fca 00B5FFF7 	    _CALL page_align
ARM GAS  tinyBasic.s 			page 100


 3929      FEFF5DF8 
 3929      04EB
 3930 0fd4 E062     	    str r0,[UPP,#FSFREE]
 3931 0fd6 BA48     	    ldr r0,=fsize
 3932 0fd8 00B5FFF7 	    _CALL uart_puts
 3932      FEFF5DF8 
 3932      04EB
 3933 0fe2 4046     	    mov r0,T1 
 3934 0fe4 4FF00A01 	    mov r1,#10 
 3935 0fe8 00B5FFF7 	    _CALL print_int 
 3935      FEFF5DF8 
 3935      04EB
 3936 0ff2 B448     	    ldr r0,=data_bytes 
 3937 0ff4 00B5FFF7 	    _CALL uart_puts  
 3937      FEFF5DF8 
 3937      04EB
 3938 0ffe 7047     	    _RET 
 3939 1000 66696C65 	fsize: .asciz "file size: "
 3939      2073697A 
 3939      653A2000 
 3940 100c 62797465 	data_bytes: .asciz "bytes"
 3940      7300
 3941              	
 3942              	
 3943              	/*******************************
 3944              	  BASIC: SIZE 
 3945              	  return RAM free bytes 
 3946              	*******************************/
 3947 1012 00BF     	    _FUNC size
 3948 1014 606B     	    ldr r0,[UPP,#TXTEND]
 3949 1016 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3950 101a A1EB0001 	    sub r1,R0
 3951 101e 4FF00F00 	    mov r0,#TK_INTGR
 3952 1022 7047     	    _RET  
 3953              	
 3954              	/*********************************
 3955              	  BASIC: SLEEP 
 3956              	  place MCU lowest power mode 
 3957              	  wait for external interrpt or
 3958              	  reset.
 3959              	*********************************/
 3960              	    _FUNC sleep
 3961 1024 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3961      CEF20000 
 3962 102c 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3963 1030 0160     	    str r1,[r0]
 3964 1032 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3964      C4F20000 
 3965 103a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3966 103e 0160     	    str r1,[r0]
 3967 1040 20BF     	    wfe 
 3968 1042 7047     	    _RET 
 3969              	
 3970              	/************************************
 3971              	  BASIC: SPC(expr)
 3972              	  mov cursor right expr spaces 
 3973              	***********************************/
ARM GAS  tinyBasic.s 			page 101


 3974              	    _FUNC spc 
 3975 1044 00B5FFF7 	    _CALL func_args 
 3975      FEFF5DF8 
 3975      04EB
 3976 104e 0128     	    cmp r0,#1
 3977 1050 7FF4FEAF 	    bne syntax_error 
 3978 1054 5CF8040B 	    _POP r0 
 3979 1058 00B5FFF7 	    _CALL spaces 
 3979      FEFF5DF8 
 3979      04EB
 3980 1062 7047     	    _RET 
 3981              	
 3982              	    _FUNC spi_read
 3983 1064 7047     	    _RET 
 3984              	
 3985 1066 00BF     	    _FUNC spi_enable
 3986 1068 7047     	    _RET 
 3987              	
 3988 106a 00BF     	    _FUNC spi_select
 3989 106c 7047     	    _RET 
 3990              	
 3991 106e 00BF     	    _FUNC spi_write
 3992 1070 7047     	    _RET 
 3993              	
 3994              	/******************************
 3995              	  BASIC: STOP 
 3996              	  stop program executre but 
 3997              	  keep execution state for 
 3998              	  resume 
 3999              	******************************/
 4000 1072 00BF     	    _FUNC stop
 4001 1074 206C10F0 	    _RTO 
 4001      010F03D1 
 4001      4FF00700 
 4001      FFF7FEBF 
 4002 1084 6068     	    ldr r0,[UPP,#COUNT]
 4003 1086 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4004 108a 206C     	    ldr r0,[UPP,#FLAGS]
 4005 108c 4FF00901 	    mov r1,#FRUN+FSTOP
 4006 1090 80EA0100 	    eor r0,r1
 4007 1094 2064     	    str r0,[UPP,#FLAGS]
 4008 1096 8AEA0A0A 	    eor IN,IN 
 4009 109a 8BEA0B0B 	    eor BPTR,BPTR 
 4010 109e C4F804A0 	    str IN,[UPP,#COUNT]
 4011 10a2 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4012 10a6 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4013 10aa 4FF4A040 	    _MOV32 r0,RAM_END
 4013      C2F20000 
 4014 10b2 8546     	    mov sp,r0
 4015 10b4 FFF7FEBF 	    b cmd_line 
 4016              	
 4017              	
 4018              	/**************************
 4019              	  BASIC: TAB(expr)
 4020              	  move cursor column expr 
 4021              	**************************/
 4022              	    _FUNC tab 
ARM GAS  tinyBasic.s 			page 102


 4023 10b8 00B5FFF7 	    _CALL func_args  
 4023      FEFF5DF8 
 4023      04EB
 4024 10c2 0128     	    cmp r0,#1 
 4025 10c4 7FF4FEAF 	    bne syntax_error 
 4026 10c8 5CF8040B 	    _POP r0 
 4027 10cc 00B5FFF7 	    _CALL cursor_x 
 4027      FEFF5DF8 
 4027      04EB
 4028 10d6 7047     	    _RET 
 4029              	
 4030              	/**************************
 4031              	  BASIC: TICKS 
 4032              	  return msec counter
 4033              	**************************/  
 4034              	    _FUNC get_ticks
 4035 10d8 E169     	    ldr r1,[UPP,#TICKS]
 4036 10da 4FF00F00 	    mov r0,#TK_INTGR
 4037 10de 7047     	    _RET  
 4038              	
 4039              	/*************************
 4040              	  BASIC: TIMER expr 
 4041              	  set countdown timer 
 4042              	************************/
 4043              	    _FUNC set_timer
 4044 10e0 00B5FFF7 	    _CALL expression 
 4044      FEFF5DF8 
 4044      04EB
 4045 10ea 0F28     	    cmp r0,#TK_INTGR
 4046 10ec 7FF4FEAF 	    bne syntax_error 
 4047 10f0 2162     	    str r1,[UPP,#TIMER]
 4048 10f2 7047     	    _RET 
 4049              	
 4050              	/***************************
 4051              	  BASIC: TIMEOUT
 4052              	  check for timer expiration 
 4053              	  return -1 true || 0 false
 4054              	****************************/
 4055              	    _FUNC timeout
 4056 10f4 81EA0101 	    eor r1,r1 
 4057 10f8 206A     	    ldr r0,[UPP,#TIMER]
 4058 10fa 08B9     	    cbnz r0,9f 
 4059 10fc 6FEA0101 	    mvn r1,r1 
 4060 1100 4FF00F00 	9:  mov r0,#TK_INTGR    
 4061 1104 7047     	    _RET 
 4062              	
 4063              	/****************************************
 4064              	  BASIC:  TONE freq, duration 
 4065              	  play a tone with frequency freq and duration
 4066              	  in milliseconds
 4067              	***********************************************/
 4068 1106 00BF     	    _FUNC tone
 4069 1108 00B5FFF7 	    _CALL arg_list 
 4069      FEFF5DF8 
 4069      04EB
 4070 1112 0228     	    cmp r0,#2 
 4071 1114 7FF4FEAF 	    bne syntax_error
ARM GAS  tinyBasic.s 			page 103


 4072 1118 BCE80003 	    ldmia DP!,{T1,T2}
 4073              	    
 4074 111c 7047     	    _RET 
 4075              	
 4076              	/****************************************
 4077              	  BASIC: TRACE n 
 4078              	  enable execution trace 
 4079              	  0   ddisable
 4080              	  1   show current line#
 4081              	  2  show line#+data_stack
 4082              	  3  show line#+data_stack+main_stack 
 4083              	***************************************/
 4084 111e 00BF     	    _FUNC trace 
 4085 1120 00B5FFF7 	    _CALL next_token 
 4085      FEFF5DF8 
 4085      04EB
 4086 112a 0F28     	    cmp r0,#TK_INTGR  
 4087 112c 7FF4FEAF 	    bne syntax_error 
 4088 1130 01F00301 	    and r1,#3 
 4089 1134 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4090 1138 7047     	    _RET 
 4091              	
 4092              	
 4093              	/***************************
 4094              	  BASIC: UBOUND 
 4095              	  return last indice of @
 4096              	  output:
 4097              	    r0  TK_INTGR 
 4098              	    r1  +int 
 4099              	**************************/
 4100 113a 00BF     	    _FUNC ubound
 4101 113c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4102 1140 D4F8D000 	    ldr r0,[UPP,#HERE]
 4103 1144 A1EB0001 	    sub r1,r0 
 4104 1148 4FEA9101 	    lsr r1,#2
 4105 114c 4FF00F00 	    mov r0,#TK_INTGR 
 4106 1150 7047     	    _RET 
 4107              	
 4108              	/****************************
 4109              	  BASIC: UFLASH 
 4110              	  return user flash address
 4111              	*****************************/
 4112 1152 00BF     	    _FUNC uflash
 4113 1154 5C49     	    ldr r1,=user
 4114 1156 4FF00F00 	    mov r0,#TK_INTGR 
 4115 115a 7047     	    _RET 
 4116              	
 4117              	
 4118              	/************************************
 4119              	  BASIC: UNTIL relation 
 4120              	  close a DO..UNTIL loop 
 4121              	  loop until relation come true 
 4122              	************************************/
 4123              	    _FUNC until
 4124 115c 00B5FFF7 	    _CALL relation 
 4124      FEFF5DF8 
 4124      04EB
ARM GAS  tinyBasic.s 			page 104


 4125 1166 11B1     	    cbz r1,9f
 4126 1168 0CF1080C 	    add DP,#8
 4127 116c 7047     	    _RET  
 4128 116e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4129 1172 9BF80200 	    ldrb r0,[BPTR,#2]
 4130 1176 6060     	    str r0,[UPP,#COUNT]
 4131 1178 7047     	    _RET 
 4132              	
 4133              	/*************************************
 4134              	  BASIC: WAIT addr,expr1[,expr2] 
 4135              	  wait until *addr&expr1 is not null 
 4136              	  or until (*addr&expr1)^expr2 is null 
 4137              	***************************************/
 4138 117a 00BF     	    _FUNC wait
 4139 117c 00B5FFF7 	    _CALL arg_list 
 4139      FEFF5DF8 
 4139      04EB
 4140 1186 0228     	    cmp r0,#2
 4141 1188 03D0     	    beq 2f 
 4142 118a 0328     	    cmp r0,#3
 4143 118c 07D0     	    beq 4f
 4144 118e FFF7FEBF 	    b syntax_error 
 4145 1192 BCE80300 	2:  ldmia DP!,{r0,r1}
 4146 1196 0A88     	3:  ldrh r2,[r1]
 4147 1198 0240     	    ands r2,r0 
 4148 119a FCD0     	    beq 3b 
 4149 119c 06E0     	    b 9f 
 4150 119e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4151 11a2 1388     	5:  ldrh r3,[r2]
 4152 11a4 83EA0003 	    eor r3,r0
 4153 11a8 0B40     	    ands r3,r1 
 4154 11aa FAD0     	    beq 5b 
 4155 11ac 7047     	9:  _RET 
 4156              	
 4157              	/*********************************************
 4158              	  BASIC: WORDS 
 4159              	  print list of BASIC WORDS in dictionary 
 4160              	  use:
 4161              	    r0,r1,T1,T2  
 4162              	********************************************/
 4163 11ae 00BF     	    _FUNC words
 4164 11b0 206C10F0 	    _CLO 
 4164      010F03D0 
 4164      4FF00700 
 4164      FFF7FEBF 
 4165 11c0 DFF80881 	    ldr T1,=kword_dict
 4166 11c4 89EA0909 	    eor T2,T2 
 4167              	1:  
 4168 11c8 4046     	    mov r0,T1
 4169 11ca 00B5FFF7 	    _CALL strlen
 4169      FEFF5DF8 
 4169      04EB
 4170 11d4 E0B1     	    cbz r0,9f 
 4171 11d6 8144     	    add T2,r0 
 4172 11d8 B9F1500F 	    cmp T2,#80 
 4173 11dc 06D4     	    bmi 2f
 4174 11de 89EA0909 	    eor T2,T2  
ARM GAS  tinyBasic.s 			page 105


 4175 11e2 00B5FFF7 	    _CALL cr 
 4175      FEFF5DF8 
 4175      04EB
 4176 11ec 4046     	2:  mov r0,T1 
 4177 11ee 00B5FFF7 	    _CALL uart_puts 
 4177      FEFF5DF8 
 4177      04EB
 4178 11f8 4FF02000 	    mov r0,#SPACE
 4179 11fc 09F10109 	    add T2,#1  
 4180 1200 00B5FFF7 	    _CALL uart_putc 
 4180      FEFF5DF8 
 4180      04EB
 4181 120a 58F80C8C 	    ldr T1,[T1,#-12]
 4182 120e DBE7     	    b 1b 
 4183 1210 7047     	9:  _RET 
 4184              	
 4185              	
 4186              	/**************************************
 4187              	  BASIC: XOR(expr1,expr2)
 4188              	  binary exclusive or between 2 expressions
 4189              	**************************************/
 4190 1212 00BF     	    _FUNC bit_xor
 4191 1214 00B5FFF7 	    _CALL func_args
 4191      FEFF5DF8 
 4191      04EB
 4192 121e 0228     	    cmp r0,#2
 4193 1220 7FF4FEAF 	    bne syntax_error
 4194 1224 5CF8040B 	    _POP r0
 4195 1228 5CF8041B 	    _POP r1 
 4196 122c 81EA0001 	    eor r1,r0 
 4197 1230 4FF00F00 	    mov r0,#TK_INTGR
 4198 1234 7047     	    _RET 
 4199              	
 4200              	/**********************************
 4201              	     argument stack manipulation
 4202              	**********************************/
 4203              	
 4204              	/**********************************
 4205              	  BASIC PUSH expr[,expr] 
 4206              	  push integers on stack 
 4207              	*********************************/
 4208 1236 00BF     	    _FUNC cmd_push 
 4209 1238 00B5FFF7 	    _CALL arg_list
 4209      FEFF5DF8 
 4209      04EB
 4210 1242 7047     	    _RET 
 4211              	
 4212              	/********************************
 4213              	  BASIC: POP 
 4214              	  pop an integer out of stack 
 4215              	********************************/    
 4216              	    _FUNC fn_pop 
 4217 1244 5CF8041B 	    _POP r1 
 4218 1248 4FF00F00 	    mov r0,#TK_INTGR 
 4219 124c 7047     	    _RET 
 4220              	
 4221              	/*******************************
ARM GAS  tinyBasic.s 			page 106


 4222              	  BASIC: DROP n 
 4223              	  discard n integer from stack
 4224              	*******************************/
 4225 124e 00BF     	    _FUNC drop 
 4226 1250 00B5FFF7 	    _CALL expression 
 4226      FEFF5DF8 
 4226      04EB
 4227 125a 0F28     	    cmp r0,#TK_INTGR 
 4228 125c 7FF4FEAF 	    bne syntax_error 
 4229 1260 4FF00400 	    mov r0,#4 
 4230 1264 01FB00F0 	    mul r0,r1 
 4231 1268 8444     	    add DP,r0 
 4232 126a 7047     	    _RET 
 4233              	
 4234              	/********************************
 4235              	  BASIC: pick(n) 
 4236              	  retreive nth element from stack 
 4237              	********************************/
 4238              	    _FUNC pick 
 4239 126c 00B5FFF7 	    _CALL func_args
 4239      FEFF5DF8 
 4239      04EB
 4240 1276 0128     	    cmp r0,#1 
 4241 1278 7FF4FEAF 	    bne syntax_error 
 4242 127c 5CF8040B 	    _POP r0
 4243 1280 4FF00401 	    mov r1,#4 
 4244 1284 01FB00F0 	    mul r0,r1 
 4245 1288 5CF80010 	    ldr r1,[DP,r0]
 4246 128c 4FF00F00 	    mov r0,#TK_INTGR
 4247 1290 7047     	    _RET 
 4248              	
 4249              	/*************************************
 4250              	  BASIC: store value,n  
 4251              	  store value at nth position on stack
 4252              	**************************************/
 4253 1292 00BF     	    _FUNC store 
 4254 1294 00B5FFF7 	    _CALL arg_list 
 4254      FEFF5DF8 
 4254      04EB
 4255 129e 0228     	    cmp r0,#2 
 4256 12a0 7FF4FEAF 	    bne syntax_error 
 4257 12a4 5CF8040B 	    _POP r0 
 4258 12a8 4FF00401 	    mov r1,#4 
 4259 12ac 01FB00F0 	    mul r0,r1 
 4260 12b0 5CF8041B 	    _POP r1
 4261 12b4 4CF80010 	    str r1,[DP,r0]
 4262 12b8 7047     	    _RET 
 4263              	
 4264              	
 4265 12ba 0000     	  .section .rodata.user
 4266              	  .p2align 10 
 4267              	user:
 4268 0000 FFFFFFFF 	  .space 1024,255
 4268      FFFFFFFF 
 4268      FFFFFFFF 
 4268      FFFFFFFF 
 4268      FFFFFFFF 
ARM GAS  tinyBasic.s 			page 107


 4269              	
 4270              	/*************************************************
 4271              	   extra FLASH memory not used by Tiny BASIC
 4272              	   is used to save BASIC programs.
 4273              	************************************************/
 4274              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4275              	  .section .rodata.fs
 4276              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 108


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 110


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 111


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 INP
      tbi_macros.inc:38     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:53     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:54     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:55     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:56     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:57     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:58     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:59     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:60     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:61     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:62     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:63     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:64     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:65     *ABS*:0000000000000011 TK_MINUS
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:66     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:67     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:68     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:69     *ABS*:0000000000000040 TK_LBL
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:116    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:118    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:124    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:141    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:142    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:143    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:144    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:145    *ABS*:0000000000000010 DATA
      tbi_macros.inc:146    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:147    *ABS*:0000000000000018 BASE
      tbi_macros.inc:148    *ABS*:000000000000001c TICKS
      tbi_macros.inc:149    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:150    *ABS*:0000000000000024 SEED
      tbi_macros.inc:151    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:152    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:153    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:154    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:155    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:156    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:157    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:158    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:159    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:160    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:161    *ABS*:0000000000000050 RX_QUEUE
ARM GAS  tinyBasic.s 			page 113


      tbi_macros.inc:162    *ABS*:0000000000000060 VARS
      tbi_macros.inc:163    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:164    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:165    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:166    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:167    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:170    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:171    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:172    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:173    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:174    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:175    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:176    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:178    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:180    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:181    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CONST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b DATA_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATALN_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DEC_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DIR_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DO_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DROP_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DUMP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 END_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 ERASE_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FLASH_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOSUB_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GOTO_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 HEX_IDX
       cmd_index.inc:51     *ABS*:000000000000001a IF_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INP_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INPUT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d INVERT_IDX
       cmd_index.inc:55     *ABS*:000000000000001e KEY_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LET_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LIST_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOAD_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
ARM GAS  tinyBasic.s 			page 114


       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PICK_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POP_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PRT_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PUSH_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 QKEY_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 READ_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 REM_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 REST_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RET_IDX
       cmd_index.inc:83     *ABS*:000000000000003a RND_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RSHIFT_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RUN_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SAVE_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SIZE_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SLEEP_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPC_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 STEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STOP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STORE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 TAB_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 THEN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TICKS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TIMER_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TMROUT_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TO_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TRACE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UBOUND_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UFLASH_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UNTIL_IDX
       cmd_index.inc:103    *ABS*:000000000000004e WAIT_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WORDS_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 XOR_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1767   .text:0000000000000e58 next_token
         tinyBasic.s:380    .text:00000000000002c8 search_label
         tinyBasic.s:2058   .text:0000000000001134 expression
         tinyBasic.s:1319   .text:0000000000000a64 syntax_error
         tinyBasic.s:418    .text:00000000000002f0 search_lineno
         tinyBasic.s:1334   .text:0000000000000a6c tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:449    .text:0000000000000310 delete_line
         tinyBasic.s:474    .text:000000000000033c create_gap
         tinyBasic.s:499    .text:0000000000000364 insert_line
         tinyBasic.s:538    .text:00000000000003b4 compile
         tinyBasic.s:1671   .text:0000000000000dac pad
         tinyBasic.s:859    .text:00000000000006a4 parse_int
         tinyBasic.s:616    .text:000000000000045c comp_token
         tinyBasic.s:704    .text:0000000000000576 store_r0
         tinyBasic.s:953    .text:0000000000000744 skip
         tinyBasic.s:1038   .text:00000000000007ac is_letter
         tinyBasic.s:785    .text:0000000000000608 parse_label
         tinyBasic.s:690    .text:0000000000000542 tick
         tinyBasic.s:713    .text:0000000000000596 token_exit
         tinyBasic.s:731    .text:000000000000059c is_special
         tinyBasic.s:753    .text:00000000000005e0 token_ofs
         tinyBasic.s:645    .text:00000000000004ca tok_idx0
         tinyBasic.s:707    .text:000000000000057c try_number
         tinyBasic.s:649    .text:00000000000004cc single
         tinyBasic.s:748    .text:00000000000005d1 tok_single
         tinyBasic.s:653    .text:00000000000004d4 lt
         tinyBasic.s:659    .text:00000000000004e2 gt
         tinyBasic.s:672    .text:0000000000000506 bkslash
         tinyBasic.s:679    .text:000000000000051c prt_cmd
         tinyBasic.s:685    .text:000000000000052e quote
         tinyBasic.s:892    .text:00000000000006dc parse_quote
         tinyBasic.s:745    .text:00000000000005bc char_list
         tinyBasic.s:746    .text:00000000000005bc $d
         tinyBasic.s:754    .text:00000000000005e0 $d
         tinyBasic.s:771    .text:0000000000000608 $t
         tinyBasic.s:972    .text:000000000000075c upper
         tinyBasic.s:2357   .rodata.dictionary:00000000000005f4 kword_dict
         tinyBasic.s:1486   .text:0000000000000be8 search_dict
         tinyBasic.s:829    .text:0000000000000680 compress_label
         tinyBasic.s:1069   .text:00000000000007cc atoi
         tinyBasic.s:923    .text:0000000000000710 get_escaped_char
         tinyBasic.s:940    .text:000000000000073a escaped
         tinyBasic.s:940    .text:000000000000073a $d
         tinyBasic.s:953    .text:0000000000000742 $t
         tinyBasic.s:990    .text:000000000000076c is_digit
         tinyBasic.s:1014   .text:0000000000000788 is_hex
         tinyBasic.s:1113   .text:0000000000000818 cmd_name
         tinyBasic.s:1139   .text:000000000000083c decompile_line
         tinyBasic.s:1156   .text:0000000000000882 decomp_loop
         tinyBasic.s:1276   .text:0000000000000a13 single_char
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1272   .text:0000000000000a0a ge_str
         tinyBasic.s:1273   .text:0000000000000a0d le_str
         tinyBasic.s:1274   .text:0000000000000a10 ne_str
         tinyBasic.s:1272   .text:0000000000000a0a $d
         tinyBasic.s:1296   .text:0000000000000a4c modulo
         tinyBasic.s:1296   .text:0000000000000a4a $t
         tinyBasic.s:1367   .text:0000000000000afc compile_error
         tinyBasic.s:1338   .text:0000000000000a74 rt_error
         tinyBasic.s:1382   .text:0000000000000b4e rt_error_msg
         tinyBasic.s:1386   .text:0000000000000b6e err_msg
         tinyBasic.s:1383   .text:0000000000000b5f token_at_msg
         tinyBasic.s:2809   .text.basic:00000000000003ba dump01
         tinyBasic.s:1684   .text:0000000000000dbc warm_start
         tinyBasic.s:1382   .text:0000000000000b4e $d
         tinyBasic.s:1394   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1395   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1396   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1397   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1398   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1399   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1400   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1401   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1402   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1403   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1404   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1405   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1406   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1407   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1408   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1409   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1411   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1412   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1413   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1423   .text:0000000000000bb2 $t
         tinyBasic.s:1423   .text:0000000000000bb4 skip_line
         tinyBasic.s:1440   .text:0000000000000bbc BTGL
         tinyBasic.s:1458   .text:0000000000000bc0 kword_cmp
         tinyBasic.s:1524   .text:0000000000000c26 cold_start
         tinyBasic.s:1547   .text:0000000000000c84 src_addr
         tinyBasic.s:1549   .text:0000000000000c88 dest_addr
         tinyBasic.s:1670   .text:0000000000000da8 tib
         tinyBasic.s:1551   .text:0000000000000c8c sysvar_size
         tinyBasic.s:1562   .text:0000000000000c90 prt_version
         tinyBasic.s:1618   .text:0000000000000d34 clear_basic
         tinyBasic.s:3679   .text.basic:0000000000000cd8 search_free
         tinyBasic.s:1548   .text:0000000000000c84 $d
         tinyBasic.s:2237   .rodata:0000000000000000 uzero
         tinyBasic.s:2263   .rodata:00000000000000d4 ulast
         tinyBasic.s:1562   .text:0000000000000c90 $t
         tinyBasic.s:1585   .text:0000000000000cf4 version_msg
         tinyBasic.s:1587   .text:0000000000000d14 version
         tinyBasic.s:1586   .text:0000000000000cf4 $d
         tinyBasic.s:1602   .text:0000000000000d18 clear_vars
         tinyBasic.s:1653   .text:0000000000000d7c warm_init
         tinyBasic.s:1669   .text:0000000000000da4 dstack
         tinyBasic.s:1668   .text:0000000000000da0 mstack
         tinyBasic.s:1668   .text:0000000000000da0 $d
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:1672   .text:0000000000000db0 array
         tinyBasic.s:1673   .text:0000000000000db4 ready
         tinyBasic.s:1704   .text:0000000000000dd4 cmd_line
         tinyBasic.s:1716   .text:0000000000000e08 interpreter
         tinyBasic.s:1751   .text:0000000000000e4c execute
         tinyBasic.s:3134   .text.basic:00000000000006fa let_var
         tinyBasic.s:3139   .text.basic:0000000000000706 let_array
         tinyBasic.s:2366   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1773   .text:0000000000000e66 end_of_line
         tinyBasic.s:1777   .text:0000000000000e70 next_line
         tinyBasic.s:1824   .text:0000000000000ef0 tok_jmp
         tinyBasic.s:1825   .text:0000000000000ef0 $d
         tinyBasic.s:1855   .text:0000000000000f34 expect
         tinyBasic.s:1874   .text:0000000000000f50 func_args
         tinyBasic.s:1894   .text:0000000000000f7c arg_list
         tinyBasic.s:1928   .text:0000000000000fbc factor
         tinyBasic.s:2166   .text:0000000000001220 get_array_element
         tinyBasic.s:2204   .text:0000000000001248 get_var
         tinyBasic.s:2007   .text:00000000000010b8 term
         tinyBasic.s:2100   .text:000000000000119c relation
         tinyBasic.s:2147   .text:0000000000001216 relop_jmp
         tinyBasic.s:2119   .text:00000000000011e6 rel_idx0
         tinyBasic.s:2120   .text:00000000000011e6 rel_eq
         tinyBasic.s:2137   .text:00000000000011fc rel_false
         tinyBasic.s:2123   .text:00000000000011ea rel_lt
         tinyBasic.s:2126   .text:00000000000011ee rel_le
         tinyBasic.s:2129   .text:00000000000011f2 rel_gt
         tinyBasic.s:2132   .text:00000000000011f6 rel_ge
         tinyBasic.s:2135   .text:00000000000011fa rel_diff
         tinyBasic.s:2148   .text:0000000000001216 $d
         tinyBasic.s:2186   .text:0000000000001234 set_array_element
         tinyBasic.s:2222   .text:0000000000001258 set_var
         tinyBasic.s:4276   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2258   .rodata:0000000000000050 $d
         tinyBasic.s:2271   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2270   *ABS*:0000000000000000 link
         tinyBasic.s:2358   .rodata.dictionary:00000000000005f4 LINK
         tinyBasic.s:2272   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2353   .rodata.dictionary:00000000000005e8 first_link
         tinyBasic.s:2400   .text.basic:0000000000000000 abs
         tinyBasic.s:2422   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2437   .text.basic:0000000000000054 ascii
         tinyBasic.s:2462   .text.basic:000000000000009c awu
         tinyBasic.s:2502   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2524   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2549   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2589   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2573   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2612   .text.basic:00000000000001e4 char
         tinyBasic.s:2629   .text.basic:0000000000000204 const
         tinyBasic.s:2668   .text.basic:0000000000000288 data_line
         tinyBasic.s:2773   .text.basic:0000000000000380 dec_base
         tinyBasic.s:3744   .text.basic:0000000000000d44 directory
         tinyBasic.s:2782   .text.basic:0000000000000388 do_loop
         tinyBasic.s:4225   .text.basic:0000000000001250 drop
         tinyBasic.s:2797   .text.basic:0000000000000390 dump
         tinyBasic.s:2847   .text.basic:000000000000043c cmd_end
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:2875   .text.basic:000000000000047c erase
         tinyBasic.s:2855   .text.basic:0000000000000444 flash
         tinyBasic.s:2886   .text.basic:0000000000000490 for
         tinyBasic.s:3784   .text.basic:0000000000000dfc forget
         tinyBasic.s:2967   .text.basic:000000000000054c gosub
         tinyBasic.s:2993   .text.basic:000000000000058c goto
         tinyBasic.s:3002   .text.basic:0000000000000598 hex_base
         tinyBasic.s:3011   .text.basic:00000000000005a0 if
         tinyBasic.s:3285   .text.basic:00000000000008c0 inp
         tinyBasic.s:3030   .text.basic:00000000000005b8 input_var
         tinyBasic.s:3098   .text.basic:00000000000006b0 invert
         tinyBasic.s:3111   .text.basic:00000000000006d0 key
         tinyBasic.s:3127   .text.basic:00000000000006e4 let
         tinyBasic.s:3170   .text.basic:0000000000000770 list
         tinyBasic.s:3813   .text.basic:0000000000000e48 load
         tinyBasic.s:3236   .text.basic:0000000000000844 lshift
         tinyBasic.s:3250   .text.basic:0000000000000864 new
         tinyBasic.s:2931   .text.basic:00000000000004f4 next
         tinyBasic.s:3259   .text.basic:0000000000000884 func_not
         tinyBasic.s:3271   .text.basic:000000000000089c bit_or
         tinyBasic.s:3309   .text.basic:0000000000000918 out
         tinyBasic.s:3334   .text.basic:000000000000097c pad_ref
         tinyBasic.s:3345   .text.basic:0000000000000988 pause
         tinyBasic.s:3373   .text.basic:00000000000009a4 pin_mode
         tinyBasic.s:3438   .text.basic:0000000000000a70 peek8
         tinyBasic.s:3451   .text.basic:0000000000000a8c peek16
         tinyBasic.s:3464   .text.basic:0000000000000aa8 peek32
         tinyBasic.s:4238   .text.basic:000000000000126c pick
         tinyBasic.s:3478   .text.basic:0000000000000ac4 poke8
         tinyBasic.s:3490   .text.basic:0000000000000adc poke16
         tinyBasic.s:3502   .text.basic:0000000000000af4 poke32
         tinyBasic.s:4216   .text.basic:0000000000001244 fn_pop
         tinyBasic.s:3516   .text.basic:0000000000000b0c print
         tinyBasic.s:4208   .text.basic:0000000000001238 cmd_push
         tinyBasic.s:3583   .text.basic:0000000000000bf4 qkey
         tinyBasic.s:2698   .text.basic:00000000000002dc read
         tinyBasic.s:2740   .text.basic:000000000000033c restore
         tinyBasic.s:2982   .text.basic:0000000000000574 return
         tinyBasic.s:3595   .text.basic:0000000000000c10 random
         tinyBasic.s:3618   .text.basic:0000000000000c54 rshift
         tinyBasic.s:3631   .text.basic:0000000000000c74 run
         tinyBasic.s:3866   .text.basic:0000000000000ed8 save
         tinyBasic.s:3947   .text.basic:0000000000001014 size
         tinyBasic.s:3960   .text.basic:0000000000001024 sleep
         tinyBasic.s:3974   .text.basic:0000000000001044 spc
         tinyBasic.s:2917   .text.basic:00000000000004dc step
         tinyBasic.s:4000   .text.basic:0000000000001074 stop
         tinyBasic.s:4253   .text.basic:0000000000001294 store
         tinyBasic.s:4022   .text.basic:00000000000010b8 tab
         tinyBasic.s:3022   .text.basic:00000000000005b4 then
         tinyBasic.s:4034   .text.basic:00000000000010d8 get_ticks
         tinyBasic.s:4043   .text.basic:00000000000010e0 set_timer
         tinyBasic.s:4055   .text.basic:00000000000010f4 timeout
         tinyBasic.s:2904   .text.basic:00000000000004c4 to
         tinyBasic.s:4084   .text.basic:0000000000001120 trace
         tinyBasic.s:4100   .text.basic:000000000000113c ubound
         tinyBasic.s:4112   .text.basic:0000000000001154 uflash
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:4123   .text.basic:000000000000115c until
         tinyBasic.s:4138   .text.basic:000000000000117c wait
         tinyBasic.s:4163   .text.basic:00000000000011b0 words
         tinyBasic.s:4190   .text.basic:0000000000001214 bit_xor
         tinyBasic.s:2400   .text.basic:0000000000000000 $t
         tinyBasic.s:2412   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2415   .text.basic:000000000000002c analog_read
         tinyBasic.s:2454   .text.basic:0000000000000098 autorun
         tinyBasic.s:3338   .text.basic:0000000000000984 pad_adr
         tinyBasic.s:2717   .text.basic:0000000000000314 seek_next
         tinyBasic.s:2762   .text.basic:0000000000000372 no_data_line
         tinyBasic.s:2758   .text.basic:000000000000036c try_next_line
         tinyBasic.s:2821   .text.basic:00000000000003dc print_dump_header
         tinyBasic.s:2879   .text.basic:000000000000048c user_space
         tinyBasic.s:2879   .text.basic:000000000000048c $d
         tinyBasic.s:4267   .rodata.user:0000000000000000 user
         tinyBasic.s:2886   .text.basic:0000000000000490 $t
         tinyBasic.s:2970   .text.basic:000000000000055a target
         tinyBasic.s:3091   .text.basic:00000000000006ac str_buffer
         tinyBasic.s:3090   .text.basic:00000000000006a8 input_buffer
         tinyBasic.s:3090   .text.basic:00000000000006a8 $d
         tinyBasic.s:3098   .text.basic:00000000000006b0 $t
         tinyBasic.s:3215   .text.basic:000000000000081c out_buff
         tinyBasic.s:3215   .text.basic:000000000000081c $d
         tinyBasic.s:3221   .text.basic:0000000000000820 $t
         tinyBasic.s:3221   .text.basic:0000000000000820 log2
         tinyBasic.s:3338   .text.basic:0000000000000984 $d
         tinyBasic.s:3345   .text.basic:0000000000000988 $t
         tinyBasic.s:3571   .text.basic:0000000000000bda unget_exit
         tinyBasic.s:3573   .text.basic:0000000000000be2 print_exit
         tinyBasic.s:3732   .text.basic:0000000000000d40 fs_addr
         tinyBasic.s:3707   .text.basic:0000000000000cfc search_file
         tinyBasic.s:3711   .text.basic:0000000000000d04 cmp_loop
         tinyBasic.s:3732   .text.basic:0000000000000d40 $d
         tinyBasic.s:3744   .text.basic:0000000000000d44 $t
         tinyBasic.s:3767   .text.basic:0000000000000dbc no_more_file
         tinyBasic.s:3777   .text.basic:0000000000000df4 fcount
         tinyBasic.s:3777   .text.basic:0000000000000df4 $d
         tinyBasic.s:3939   .text.basic:0000000000001000 fsize
         tinyBasic.s:3940   .text.basic:000000000000100c data_bytes
         tinyBasic.s:3884   .text.basic:0000000000000f20 new_file
         tinyBasic.s:3939   .text.basic:0000000000001000 $d
         tinyBasic.s:3947   .text.basic:0000000000001012 $t
         tinyBasic.s:3982   .text.basic:0000000000001064 spi_read
         tinyBasic.s:3985   .text.basic:0000000000001068 spi_enable
         tinyBasic.s:3988   .text.basic:000000000000106c spi_select
         tinyBasic.s:3991   .text.basic:0000000000001070 spi_write
         tinyBasic.s:4068   .text.basic:0000000000001108 tone
         tinyBasic.s:4266   .rodata.user:0000000000000000 $d
         tinyBasic.s:4265   .text.basic:00000000000012ba $d
         tinyBasic.s:4276   .text.basic:00000000000012bc $d
         tinyBasic.s:4276   .text:0000000000001268 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:752    .text:00000000000005df $d
ARM GAS  tinyBasic.s 			page 120


         tinyBasic.s:1589   .text:0000000000000d15 $d
         tinyBasic.s:1589   .text:0000000000000d16 $t
         tinyBasic.s:1684   .text:0000000000000dbb $d
         tinyBasic.s:1684   .text:0000000000000dbc $t
         tinyBasic.s:1840   .text:0000000000000f31 $d
         tinyBasic.s:1840   .text:0000000000000f32 $t
         tinyBasic.s:2166   .text:000000000000121d $d
         tinyBasic.s:2166   .text:000000000000121e $t
         tinyBasic.s:3784   .text.basic:0000000000000dfb $d
         tinyBasic.s:3784   .text.basic:0000000000000dfc $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
flash_store
erase_page
uart_getc
tabulation
uart_qkey
page_align
unlock
hword_write
