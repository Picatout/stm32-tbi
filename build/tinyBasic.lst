ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* GPIO input|output CNF|MODE values */
  86              	   //output CNF field 
  87              	   .equ GPIO_O_PP,0 
ARM GAS  tinyBasic.s 			page 3


  88              	   .equ GPIO_O_OD,(1<<2)
  89              	   .equ GPIO_O_AFPP,(2<<2) 
  90              	   .equ GPIO_O_AFOD,(3<<2)
  91              	  // output MODE field 
  92              	   .equ S2MHZ,2 
  93              	   .equ S10MHZ,1 
  94              	   .equ S50MHZ,3
  95              	   .equ OSPEED,S10MHZ      
  96              	   .equ OUTPUT_PP,GPIO_O_PP+OSPEED
  97              	   .equ OUTPUT_OD,GPIO_O_OD+OSPEED
  98              	   .equ OUTPUT_AFPP,GPIO_O_AFPP+OSPEED 
  99              	   .equ OUTPUT_AFOD,GPIO_AFOD+OSPEED 
 100              	  // input ODR 
 101              	   .equ PULLDOWN,0
 102              	   .equ PULLUP,1
 103              	  // input CNF field 
 104              	   .equ ANALOG,0
 105              	   .equ FLOATING,(1<<2) 
 106              	   .equ PULL_RESISTOR,(2<<2)  
 107              	   .equ INPUT_ANA,ANALOG 
 108              	   .equ INPUT_FLOAT,FLOATING 
 109              	   .equ INPUT_PD,(PULL_RESISTOR<<1)+PULLDOWN 
 110              	   .equ INPUT_PU,(PULL_RESISTOR<<1)+PULLUP    
 111              	
 112              	   /* AFIO base address */
 113              	   .equ AFIO_BASE_ADR, 0x40010000
 114              	   
 115              	   /* AFIO registers offset */
 116              	   .equ AFIO_EVCR,0
 117              	   .equ AFIO_MAPR,4
 118              	   .equ AFIO_EXTICR1,8
 119              	   .equ AFIO_EXTICR2,12 
 120              	   .equ AFIO_EXTICR3,16
 121              	   .equ AFIO_EXTICR4,20
 122              	   .equ AFIO_MAPR2,28
 123              	   
 124              	    /* USART1 registers */
 125              	    .equ USART1_BASE_ADR, 0x40013800
 126              	    .equ USART2_BASE_ADR, 0x40004400
 127              	    .equ USART3_BASE_ADR, 0x40004800
 128              	
 129              	    /* USARTx registers offset */
 130              	    .equ USART_SR, 0
 131              	    .equ USART_DR,4
 132              	    .equ USART_BRR,8
 133              	    .equ USART_CR1,12
 134              	    .equ USART_CR2,16
 135              	    .equ USART_CR3,20
 136              	    .equ USART_GTPR,24
 137              	
 138              	   /* systick */
 139              	    .equ STK_BASE_ADR, 0xE000E010
 140              	    /* registers offset */
 141              	    .equ STK_CTL, 0
 142              	    .equ STK_LOAD, 4
 143              	    .equ STK_VAL, 8
 144              	    .equ STK_CALIB, 12
ARM GAS  tinyBasic.s 			page 4


 145              	
 146              	   /* system control block */
 147              	   .equ SCB_BASE_ADR, 0xE000ED00
 148              	   /* registers offset */
 149              	   .equ SCB_CPUID, 0
 150              	   .equ SCB_ICSR, 4 
 151              	   .equ SCB_VTOR, 8
 152              	   .equ SCB_AIRCR, 12
 153              	   .equ SCB_SCR, 16
 154              	   .equ SCB_CCR, 20
 155              	   .equ SCB_SHPR1,24
 156              	   .equ SCB_SHPR2,28
 157              	   .equ SCB_SHPR3,32
 158              	   .equ SCB_SHCRS,36
 159              	   .equ SCB_CFSR,40
 160              	   .equ SCB_HFSR,44
 161              	   .equ SCB_MMAR,52
 162              	   .equ SCB_BFAR,56
 163              	   // key to to write in SCB_AIRCR 
 164              	   .equ SCB_VECTKEY,0x5fa 
 165              	
 166              	   /* NVIC block */
 167              	   .equ NVIC_BASE_ADR, 0xE000E100
 168              	   .equ NVIC_ISER0, 0
 169              	   .equ NVIC_ISER1, 4
 170              	   .equ NVIC_ISER2, 8
 171              	   .equ NVIC_ICER0, 0x80
 172              	   .equ NVIC_ICER1, 0x84 
 173              	   .equ NVIC_ICER2, 0x88 
 174              	   .equ NVIC_ISPR0, 0x100
 175              	   .equ NVIC_ISPR1, 0x104
 176              	   .equ NVIC_ISPR2, 0x108 
 177              	   .equ NVIC_ICPR0, 0x180
 178              	   .equ NVIC_ICPR1, 0x184
 179              	   .equ NVIC_ICPR2, 0x188
 180              	   .equ NVIC_IABR0, 0x200
 181              	   .equ NVIC_IABR1, 0x204
 182              	   .equ NVIC_IABR2, 0x208
 183              	   .equ NVIC_IPR_BASE, 0x300 
 184              	
 185              	/* IRQ number */
 186              	   .equ IRQ_WWDG,0
 187              	   .equ IRQ_PVD,1
 188              	   .equ IRQ_TAMPER,2
 189              	   .equ IRQ_RTC,3
 190              	   .equ IRQ_FLASH,4
 191              	   .equ IRQ_RCC,5
 192              	   .equ IRQ_EXTI0,6
 193              	   .equ IRQ_EXIT1,7
 194              	   .equ IRQ_EXTI2,8
 195              	   .equ IRQ_EXIT3,9
 196              	   .equ IRQ_EXIT4,10
 197              	   .equ IRQ_DMA1CH1,11
 198              	   .equ IRQ_DMA1CH2,12
 199              	   .equ IRQ_DAM1CH3,13
 200              	   .equ IRQ_DMA1CH4,14
 201              	   .equ IRQ_DMA1CH5,15
ARM GAS  tinyBasic.s 			page 5


 202              	   .equ IRQ_DMA1CH6,16
 203              	   .equ IRQ_DMA1CH7,17
 204              	   .equ IRQ_ADC1_2,18   
 205              	   .equ IRQ_USB_HP_CAN_TX,19
 206              	   .equ IRQ_USB_LP_CAN_RX0,20
 207              	   .equ IRQ_CAN_RX1,21
 208              	   .equ IRQ_CAN_SCE,22
 209              	   .equ IRQ_EXTI9_5,23
 210              	   .equ IRQ_TIM1_BRK,24
 211              	   .equ IRQ_TIM1_UP,25
 212              	   .equ IRQ_TIM1_TRG_COM,26
 213              	   .equ IRQ_TIM1_CC,27
 214              	   .equ IRQ_TIM2,28
 215              	   .equ IRQ_TIM3,29
 216              	   .equ IRQ_TIM4,30
 217              	   .equ IRQ_I2C1_EV,31
 218              	   .equ IRQ_I2C1_ER,32
 219              	   .equ IRQ_I2C2_EV,33
 220              	   .equ IRQ_I2C2_ER,34
 221              	   .equ IRQ_SPI1,35
 222              	   .equ IRQ_SPI2,36
 223              	   .equ IRQ_USART1,37
 224              	   .equ IRQ_USART2,38
 225              	   .equ IRQ_USART3,39
 226              	   .equ IRQ_EXTI15_10,40
 227              	   .equ IRQ_RTCALARM,41
 228              	   .equ IRQ_USB_WKUP,42
 229              	   .equ IRQ_TIM8_BRK,43
 230              	   .equ IRQ_TIM8_UP,44
 231              	   .equ IRQ_TIM8_TRG_COM,45
 232              	   .equ IRQ_TIM8_CC,46
 233              	   .equ IRQ_ADC3,47
 234              	   .equ IRQ_FSMC,48
 235              	   .equ IRQ_SDIO,49            
 236              	   .equ IRQ_TIM5,50
 237              	   .equ IRQ_SPI3,51
 238              	   .equ IRQ_UART4,52
 239              	   .equ IRQ_UART5,53
 240              	   .equ IRQ_TIM6,54
 241              	   .equ IRQ_TIM7,55
 242              	   .equ IRQ_DMA2CH1,56
 243              	   .equ IRQ_DMA2CH2,57
 244              	   .equ IRQ_DMA2CH3,58
 245              	   .equ IRQ_DMA2CH4_5,59
 246              	
 247              	
 248              	/* EXTI registers map */
 249              	   .equ EXTI_BASE_ADR, 0x40010400
 250              	   .equ EXTI_IMR,0
 251              	   .equ EXTI_EMR,4
 252              	   .equ EXTI_RTSR,8
 253              	   .equ EXTI_FTSR,12
 254              	   .equ EXTI_SWIER,16
 255              	   .equ EXTI_PR,20
 256              	   
 257              	
 258              	/* system control register */
ARM GAS  tinyBasic.s 			page 6


 259              	.equ SCR_BASE_ADR,0xE000ED10
 260              	.equ SCR_SLEEPONEXIT,(1<<1)
 261              	.equ SCR_SLEEPDEEP,(1<<2)
 262              	.equ SCR_SEVONPEND,(1<<4)
 263              	
 264              	/* power control register */
 265              	.equ PWR_CR_ADR,0x40007000
 266              	.equ PWR_CR_LPDS,(1<<0)
 267              	.equ PWR_CR_PDDS,(1<<1)
 268              	.equ PWR_CR_CWUF,(1<<2)
 269              	.equ PWR_CR_CSBF,(1<<3)
 270              	.equ PWR_CR_PVDE,(1<<4)
 271              	.equ PWR_CR_PLS,(1<<5)
 272              	.equ PWR_CR_DBP,(1<<8)
 273              	
 274              	/* power control and statut register */
 275              	.equ PWR_CSR_ADR,0x40007004 
 276              	.equ PWR_CSR_WUF,(1<<0)
 277              	.equ PWR_CSR_SBF,(1<<1)
 278              	.equ PWR_CSR_PVDO,(1<<2)
 279              	.equ PWR_CSR_EWUP,(1<<8)
 280              	
 281              	/* Window watchdog (WWDG) */
 282              	.equ WWDG_BASE_ADR,0x40002C00
 283              	.equ WWDG_CR,0
 284              	.equ WWDG_CFR,4
 285              	.equ WWDG_SR,8
 286              	
 287              	/* Independent watchdog (IWDG) */
 288              	.equ IWDG_BASE_ADR,0x40003000
 289              	.equ IWDG_KR,0 
 290              	.equ IWDG_PR,4
 291              	.equ IWDG_RLR,8
 292              	.equ IWDG_SR,12
 293              	
 294              	/*   ADC1 registers */
 295              	.equ ADC1_BASE_ADR, 0x40012400
 296              	.equ ADC_SR,0
 297              	.equ ADC_CR1,0X4
 298              	.equ ADC_CR2,0X8
 299              	.equ ADC_SMPR1,0XC
 300              	.equ ADC_SMPR2,0X10
 301              	.equ ADC_JOFR1,0X14
 302              	.equ ADC_JOFR2,0X18
 303              	.equ ADC_JOFR3,0X1C
 304              	.equ ADC_JOFR4,0X20
 305              	.equ ADC_HTR,0X24
 306              	.equ ADC_LTR,0X28
 307              	.equ ADC_SQR1,0X2C
 308              	.equ ADC_SQR2,0X30
 309              	.equ ADC_SQR3,0X34
 310              	.equ ADC_JSQR,0X38
 311              	.equ ADC_JDR1,0X3C
 312              	.equ ADC_JDR2,0X40
 313              	.equ ADC_JDR3,0X44
 314              	.equ ADC_JDR4,0X48
 315              	.equ ADC_DR,0X4C
ARM GAS  tinyBasic.s 			page 7


 316              	
 317              	/* timer registers */
 318              	.equ TIMER1_BASE_ADR,0X40012C00
 319              	.equ TIMER2_BASE_ADR,0x40000000
 320              	.equ TIMER3_BASE_ADR,0x40000400
 321              	.equ TIMER4_BASE_ADR,0x40000800
 322              	
 323              	.equ TIM_CR1,0
 324              	.equ TIM_CR2,4
 325              	.equ TIM_SMCR,8
 326              	.equ TIM_DIER,0xc
 327              	.equ TIM_SR,0X10
 328              	.equ TIM_EGR,0X14
 329              	.equ TIM_CCMR1,0X18
 330              	.equ TIM_CCMR2,0X1C
 331              	.equ TIM_CCER,0X20
 332              	.equ TIM_CNT,0X24
 333              	.equ TIM_PSC,0X28
 334              	.equ TIM_ARR,0X2C
 335              	.equ TIM_CCR1,0X34
 336              	.equ TIM_CCR2,0X38
 337              	.equ TIM_DCR,0X48
 338              	.equ TIM_DMAR,0X4C
 339              	
 340              	/* SPI registers */
 341              	.equ SPI1_BASE_ADR, 0x40013000
 342              	.equ SPI2_BASE_ADR, 0x40003800
 343              	
 344              	.equ SPI_CR1, 0
 345              	.equ SPI_CR2, 4
 346              	.equ SPI_SR,  8
 347              	.equ SPI_DR,  12
 348              	.equ SPI_CRCPR, 16
 349              	.equ SPI_RXCRCR, 20
 350              	.equ SPI_TXCRCR, 24
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
ARM GAS  tinyBasic.s 			page 8


  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
ARM GAS  tinyBasic.s 			page 9


  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
ARM GAS  tinyBasic.s 			page 10


  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
ARM GAS  tinyBasic.s 			page 11


 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ U2_RX_QUEUE,RX_QUEUE+RX_QUEUE_SIZE
 137              	  .equ U2_COUNT,U2_RX_QUEUE+4 
 138              	  .equ U3_RX_QUEUE,U2_COUNT+4
 139              	  .equ U3_COUNT,U3_RX_QUEUE+4 
 140              	  .equ VARS,U3_COUNT+4 // BASIC variables 
 141              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 142              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 143              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 144              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 145              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 146              	
 147              	/* flags used by BASIC interpreter */ 
 148              		.equ FRUN,(1<<0) // programm running
 149              		.equ FTRAP,(1<<1) // inside trap handler 
 150              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 151              		.equ FSTOP,(1<<3) // program stopped  
 152              		.equ FBREAK,(1<<4) // break point flag 
 153              		.equ FCOMP,(1<<5)  // compiling flags 
 154              		.equ FAUTORUN,(1<<6) // auto start program running 
 155              	  .equ FPRINT,(1<<7) // inside print command 
 156              	
 157              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 158              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 159              	
 160              	/***********************************************
 161              	*       MACROS
ARM GAS  tinyBasic.s 			page 12


 162              	***********************************************/
 163              		.macro _CALL fn /* low level routine call */ 
 164              	 	PUSH {LR}
 165              		BL \fn  
 166              	  POP {LR}
 167              		.endm
 168              		
 169              		.macro	_RET /* return from subroutine */
 170              		BX	LR
 171              		.endm
 172              	
 173              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 174              		MOV \REG, #\LITERAL&0xffff
 175              		MOVT \REG, #\LITERAL>>16
 176              		.endm
 177              	
 178              	// local function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	*********************************/
 195              		.macro _dict_entry tok_type,name,cmd_idx 
 196              	  .word LINK 
 197              	  .word \cmd_idx 
 198              		.word \tok_type  	
 199              		.equ LINK,.
 200              		.asciz "\name"
 201              		.p2align 2 
 202              		.endm 
 203              	
 204              	  // pop parameter in register 
 205              	  .macro _POP  reg 
 206              	  ldmia  DP!,{\reg}
 207              	  .endm 
 208              	
 209              	  // push register on parameter stack 
 210              	  .macro _PUSH reg 
 211              	  stmdb DP!,{\reg}
 212              	  .endm 
 213              	
 214              	  // drop n parameters on dstack 
 215              	  .macro _DROP n
 216              	  mov r0,#4*\n
 217              	  add DP,R0 
 218              	  .endm 
ARM GAS  tinyBasic.s 			page 13


 219              	
 220              	  // back to previous token in list 
 221              	  .macro _UNGET_TOKEN 
 222              	  ldr IN,[UPP,#IN_SAVED]
 223              	  ldr BPTR,[UPP,#BASICPTR] 
 224              	  .endm 
 225              	
 226              	 // create a text data 
 227              	 .macro _TEXT label,text
 228              	 \label: .asciz "\text"
 229              	 .p2align 2 
 230              	 .endm 
 231              	
 232              	// command line only 
 233              	  .macro _CLO 
 234              	  ldr r0,[UPP,#FLAGS]
 235              	  tst r0,#FRUN 
 236              	  beq 1f 
 237              	  mov r0,#ERR_CMD_ONLY
 238              	  b tb_error
 239              	1: 
 240              	  .endm 
 241              	
 242              	// run time only 
 243              	  .macro _RTO 
 244              	  ldr r0,[UPP,#FLAGS]
 245              	  tst r0,#FRUN 
 246              	  bne 1f 
 247              	  mov r0,#ERR_CMD_ONLY
 248              	  b tb_error
 249              	1:
 250              	  .endm 
 251              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
ARM GAS  tinyBasic.s 			page 14


  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DSTACK_IDX,DROP_IDX+1 //
  46              	    .equ DUMP_IDX, DSTACK_IDX+1 
  47              	    .equ END_IDX,DUMP_IDX+1 // 
  48              	    .equ ERASE_IDX,END_IDX+1 
  49              	    .equ FOR_IDX, ERASE_IDX+1 // 
  50              	    .equ FORGET_IDX, FOR_IDX+1 // 
  51              	    .equ FREE_IDX, FORGET_IDX+1 // 
  52              	    .equ GET_IDX,FREE_IDX+1
  53              	    .equ GOSUB_IDX, GET_IDX+1 // 
  54              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  55              	    .equ HEX_IDX, GOTO_IDX+1 // 
  56              	    .equ IF_IDX, HEX_IDX+1 // 
  57              	    .equ IN_IDX,IF_IDX+1
  58              	    .equ INPUT_IDX, IN_IDX+1 // 
  59              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  60              	    .equ KEY_IDX, INVERT_IDX+1 // 
  61              	    .equ ISR_INIT_IDX,KEY_IDX+1 //
  62              	    .equ IRET_IDX,ISR_INIT_IDX+1 // 
  63              	    .equ LET_IDX, IRET_IDX+1 // 
  64              	    .equ LIST_IDX, LET_IDX+1 // 
  65              	    .equ LOAD_IDX, LIST_IDX+1 // 
  66              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  67              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  68              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  69              	    .equ NEXT_IDX, NEW_IDX+1 // 
  70              	    .equ NOT_IDX, NEXT_IDX+1 // 
  71              	    .equ OR_IDX, NOT_IDX+1 // 
  72              	    .equ OUT_IDX,OR_IDX+1
  73              	    .equ PAD_IDX, OUT_IDX+1 // 
  74              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  75              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  76              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  77              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  78              	    .equ PEEK32_IDX, PEEK16_IDX+1
  79              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  80              	    .equ POKE16_IDX,POKE8_IDX+1 
ARM GAS  tinyBasic.s 			page 15


  81              	    .equ POKE32_IDX,POKE16_IDX+1
  82              	    .equ POP_IDX,POKE32_IDX+1
  83              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  84              	    .equ PUSH_IDX,PRT_IDX+1
  85              	    .equ PUT_IDX,PUSH_IDX+1
  86              	    .equ QKEY_IDX, PUT_IDX+1 // 
  87              	    .equ RANDOMIZE_IDX,QKEY_IDX+1 //
  88              	    .equ READ_IDX, RANDOMIZE_IDX+1 // 
  89              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  90              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  91              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  92              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  93              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  94              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  95              	    .equ SAVE_IDX, RUN_IDX+1 // 
  96              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  97              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  98              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  99              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
 100              	    .equ SPC_IDX,SLEEP_IDX+1 //
 101              	    .equ SPI_DSEL_IDX,SPC_IDX+1 // 
 102              	    .equ SPI_INIT_IDX,SPI_DSEL_IDX+1 //
 103              	    .equ SPI_READ_IDX,SPI_INIT_IDX+1 //
 104              	    .equ SPI_SELECT_IDX,SPI_READ_IDX+1 //
 105              	    .equ SPI_WRITE_IDX,SPI_SELECT_IDX+1 //
 106              	    .equ STEP_IDX, SPI_WRITE_IDX+1 // 
 107              	    .equ STOP_IDX, STEP_IDX+1 // 
 108              	    .equ STORE_IDX,STOP_IDX+1
 109              	    .equ TAB_IDX, STORE_IDX+1 //
 110              	    .equ THEN_IDX,TAB_IDX+1
 111              	    .equ TICKS_IDX, THEN_IDX+1 // 
 112              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 113              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 114              	    .equ TO_IDX, TMROUT_IDX+1 // 
 115              	    .equ TONE_IDX,TO_IDX+1
 116              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 117              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 118              	    .equ UART_GETC_IDX,TRACE_IDX+1 // 
 119              	    .equ UART_INIT_IDX,UART_GETC_IDX+1//
 120              	    .equ UART_PUTC_IDX,UART_INIT_IDX+1//
 121              	    .equ UBOUND_IDX, UART_PUTC_IDX+1 //
 122              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 123              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 124              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 125              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 126              	    .equ XOR_IDX, WORDS_IDX+1 //
 127              	    .equ XPOS_IDX,XOR_IDX+1 //
 128              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 129              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
ARM GAS  tinyBasic.s 			page 16


  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
ARM GAS  tinyBasic.s 			page 17


  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
ARM GAS  tinyBasic.s 			page 18


 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
ARM GAS  tinyBasic.s 			page 19


 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  BASIC: DSTACK 
 224              	  show data stack 
 225              	************************************/
 226 0146 00BF     	    _FUNC show_data_stack 
 227 0148 2DE90303 	    push {r0,r1,T1,T2}
 228 014c 0E48     	    ldr r0,data_stack 
 229 014e 00B5FFF7 	    _CALL uart_puts 
 229      FEFF5DF8 
 229      04EB
 230 0158 E046     	    mov T1,DP 
 231 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 231      C2F20009 
 232 0162 C145     	1:  cmp T2,T1 
 233 0164 08D0     	    beq 9f 
 234 0166 59F8040D 	    ldmdb T2!,{r0} 
 235 016a A169     	    ldr r1,[UPP,#BASE] 
 236 016c 00B5FFF7 	    _CALL print_int 
ARM GAS  tinyBasic.s 			page 20


 236      FEFF5DF8 
 236      04EB
 237 0176 F4E7     	    b 1b 
 238 0178 00B5FFF7 	9:  _CALL cr 
 238      FEFF5DF8 
 238      04EB
 239 0182 BDE80303 	    pop {r0,r1,T1,T2}
 240 0186 7047     	    _RET 
 241              	data_stack:
 242 0188 8C010000 	  .word .+4 
 243 018c 64737461 	  .asciz "dstack: "
 243      636B3A20 
 243      00
 244              	
 245              	/************************************
 246              	  show main stack 
 247              	***********************************/
 248 0195 0000BF   	    _FUNC show_main_stack
 249 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 250 019c DFF83C00 	    ldr r0,main_stack 
 251 01a0 00B5FFF7 	    _CALL uart_puts 
 251      FEFF5DF8 
 251      04EB
 252 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 252      C2F20009 
 253 01b2 0DF10408 	    add T1,sp,#4
 254 01b6 C145     	1:  cmp T2,T1
 255 01b8 08D0     	    beq 9f 
 256 01ba 59F8040D 	    ldmdb T2!,{r0} 
 257 01be A169     	    ldr r1,[UPP,#BASE]
 258 01c0 00B5FFF7 	    _CALL print_int
 258      FEFF5DF8 
 258      04EB
 259 01ca F4E7     	    b 1b
 260 01cc 00B5FFF7 	9:  _CALL cr 
 260      FEFF5DF8 
 260      04EB
 261 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 262 01da 7047     	    _RET  
 263              	main_stack:
 264 01dc E0010000 	   .word .+4 
 265 01e0 72737461 	   .asciz "rstack: " 
 265      636B3A20 
 265      00
 266              	
 267              	/************************************
 268              	    show execution trace 
 269              	************************************/
 270 01e9 0000BF   	    _FUNC show_trace
 271 01ec 04B4     	    push {r2}
 272 01ee D4F8DC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 273 01f2 BAB1     	    cbz r2,9f  
 274 01f4 00B5FFF7 	    _CALL cr 
 274      FEFF5DF8 
 274      04EB
 275 01fe 00B5FFF7 	    _CALL show_line_nbr
 275      90FF5DF8 
ARM GAS  tinyBasic.s 			page 21


 275      04EB
 276 0208 022A     	    cmp r2,#2 
 277 020a 0BD4     	    bmi 9f 
 278 020c 00B5FFF7 	    _CALL show_data_stack 
 278      9BFF5DF8 
 278      04EB
 279 0216 032A     	    cmp r2,#3 
 280 0218 04D4     	    bmi 9f 
 281 021a 00B5FFF7 	    _CALL show_main_stack 
 281      BCFF5DF8 
 281      04EB
 282 0224 04BC     	9:  pop {r2}
 283 0226 7047     	    _RET 
 284              	
 285              	
 286              	/************************************
 287              	    prt_chars 
 288              	    print n ascii character starting 
 289              	    at address 
 290              	    input: 
 291              	      r0    address 
 292              	      r1    count 
 293              	    output:
 294              	      r0    address + count
 295              	    use:
 296              	      r2    address 
 297              	***********************************/
 298              	    _FUNC prt_chars 
 299 0228 04B4     	    push {r2}
 300 022a 0246     	    mov r2,r0
 301 022c 12F8010B 	0:  ldrb r0,[r2],#1 
 302 0230 2028     	    cmp r0,#SPACE 
 303 0232 01D4     	    bmi 1f 
 304 0234 7F28     	    cmp r0,#127 
 305 0236 01D4     	    bmi 2f 
 306 0238 4FF05F00 	1:  mov r0,#'_' 
 307 023c 00B5FFF7 	2:  _CALL uart_putc
 307      FEFF5DF8 
 307      04EB
 308 0246 0139     	    subs r1,#1 
 309 0248 F0D1     	    bne 0b 
 310 024a 1046     	    mov r0,r2 
 311 024c 04BC     	    pop {r2}
 312 024e 7047     	    _RET 
 313              	
 314              	
 315              	/*********************************
 316              	    search_target 
 317              	    search for goto, gosub target
 318              	    target is line number | label  
 319              	*********************************/
 320              	    _FUNC search_target
 321 0250 00B500F0 	    _CALL next_token 
 321      F7FD5DF8 
 321      04EB
 322 025a 1A28     	    cmp r0,TK_LABEL 
 323 025c 06D1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 22


 324 025e 00B500F0 	    _CALL search_label
 324      32F85DF8 
 324      04EB
 325 0268 A0B1     	    cbz r0,8f  
 326 026a 16E0     	    b 9f 
 327 026c D4F800A0 	2:  _UNGET_TOKEN
 327      D4F808B0 
 328 0274 00B500F0 	    _CALL expression 
 328      0FFF5DF8 
 328      04EB
 329 027e 1B28     	    cmp r0,#TK_INTGR 
 330 0280 40F0EE83 	    bne syntax_error 
 331 0284 48B1     	    cbz r0,9f 
 332 0286 0846     	    mov r0,r1 
 333 0288 00B5FFF7 	    _CALL search_lineno 
 333      FEFF5DF8 
 333      04EB
 334 0292 11B1     	    cbz r1,9f 
 335 0294 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 336 0298 E6E3     	    b tb_error 
 337 029a 7047     	9:  _RET 
 338              	
 339              	
 340              	/***************************************
 341              	  search_const 
 342              	  search for constant 
 343              	  input:
 344              	    r0  constant label 
 345              	  output:
 346              	    r0  TK_INTGR 
 347              	    r1  constant value  
 348              	  use:
 349              	    r2   *list 
 350              	    r3   BOUND 
 351              	***************************************/
 352              	    _FUNC search_const
 353 029c 0CB4     	    push {r2,r3} 
 354 029e 626B     	    ldr r2,[UPP,#TXTEND]
 355 02a0 D4F8E030 	    ldr r3,[UPP,#HERE] 
 356 02a4 9A42     	1:  cmp r2,r3 
 357 02a6 0BD5     	    bpl 8f 
 358 02a8 52F8041B 	    ldr r1,[r2],#4
 359 02ac 8842     	    cmp r0,r1 
 360 02ae 02D0     	    beq 2f 
 361 02b0 02F10402 	    add r2,#4
 362 02b4 F6E7     	    b 1b 
 363              	2:  // found 
 364 02b6 1168     	    ldr r1,[r2]
 365 02b8 4FF01B00 	    mov r0,#TK_INTGR 
 366 02bc 0CBC     	    pop {r2,r3}
 367 02be 7047     	    _RET
 368              	8:  // that constant doesn't exist 
 369 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 370 02c4 D0E3     	    b tb_error      
 371              	
 372              	
 373              	/***************************************
ARM GAS  tinyBasic.s 			page 23


 374              	    search_label 
 375              	    search target label 
 376              	    input:
 377              	      r1    target label 
 378              	    output:
 379              	      r0    address or 0 
 380              	    use:
 381              	      r2    line address link 
 382              	      r3    search limit 
 383              	****************************************/
 384 02c6 00BF     	    _FUNC search_label 
 385 02c8 0CB4     	    push {r2,r3}
 386 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 387 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 388 02ce 9A42     	1:  cmp r2,r3
 389 02d0 0AD0     	    beq 8f 
 390 02d2 D078     	    ldrb r0,[r2,#3]
 391 02d4 1A28     	    cmp  r0,#TK_LABEL 
 392 02d6 02D0     	    beq 4f 
 393 02d8 9078     	2:  ldrb r0,[r2,#2]
 394 02da 0244     	    add r2,r0 
 395 02dc F7E7     	    b 1b 
 396              	4:  // compare label 
 397 02de 5068     	    ldr r0,[R2,#4]
 398 02e0 8142     	    cmp r1,r0 
 399 02e2 F9D1     	    bne 2b 
 400              	    // found label 
 401 02e4 1046     	    mov r0,r2 
 402 02e6 01E0     	    b 9f
 403 02e8 80EA0000 	8:  eor r0,r0 
 404 02ec 0CBC     	9:  pop {r2,r3}
 405 02ee 7047     	    _RET 
 406              	
 407              	
 408              	/***************************************
 409              	    search_lineno 
 410              	    localize BASIC line from its number 
 411              	    input:
 412              	      r0   line# 
 413              	    output: 
 414              	      r0   adr where found || adr new to be inserted 
 415              	      r1   0 found || !0 not found  
 416              	    use:
 417              	      r0   scan address 
 418              	      r1   temp   
 419              	      r2   address end of text
 420              	      r3   target line#
 421              	****************************************/    
 422              	    _GBL_FUNC search_lineno
 423 02f0 0CB4     	    push {r2,r3} 
 424 02f2 0346     	    mov r3,r0 // target 
 425 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 426 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 427 02f8 9042     	1:  cmp r0,r2 
 428 02fa 05D0     	    beq  8f
 429 02fc 0188     	    ldrh r1,[r0]
 430 02fe C91A     	    subs r1,r3 
ARM GAS  tinyBasic.s 			page 24


 431 0300 04D5     	    bpl 9f 
 432 0302 8178     	    ldrb r1,[r0,#2]
 433 0304 0844     	    add r0,r1
 434 0306 F7E7     	    b 1b 
 435 0308 4FF0FF31 	8:  mov r1,#-1 
 436 030c 0CBC     	9:  pop {r2,r3}
 437 030e 7047     	    _RET 
 438              	
 439              	
 440              	/********************************************
 441              	    delete_line 
 442              	    delete BASIC line at addr 
 443              	    input:
 444              	      r0    address line to delete 
 445              	    output:
 446              	      r0    same as input 
 447              	    use: 
 448              	      r1    dest adr
 449              	      r2    bytes to move 
 450              	      T1    length line to delete 
 451              	      T2    txtend 
 452              	********************************************/
 453              	    _FUNC delete_line 
 454 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 455 0314 0146     	    mov r1,r0 // dest 
 456 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 457 031a 4044     	    add r0,T1  // src
 458 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 459 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 460 0324 00B5FFF7 	    _CALL cmove
 460      FEFF5DF8 
 460      04EB
 461 032e A9EB0809 	    sub T2,T1 // txtend-count 
 462 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 463 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 464 033a 7047     	    _RET 
 465              	
 466              	/******************************************
 467              	    create_gap 
 468              	    create a gap in text area to insert new line 
 469              	    input:
 470              	      r0    adr 
 471              	      r1    length 
 472              	    output:
 473              	      r0    adr 
 474              	    use:
 475              	      T1    length 
 476              	      T2    txtend 
 477              	************************************************/
 478              	    _FUNC create_gap 
 479 033c 2DE90503 	    push {r0,r2,T1,T2}
 480 0340 8846     	    mov T1,R1
 481 0342 0144     	    add r1,r0  // dest 
 482 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 483 0348 A9EB0002 	    sub r2,T2,r0 
 484 034c 00B5FFF7 	    _CALL cmove
 484      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 25


 484      04EB
 485 0356 C144     	    add T2,T1 
 486 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 487 035c C4F8E090 	    str T2,[upp,#HERE]
 488 0360 BDE80503 	    pop {r0,r2,T1,T2}
 489 0364 7047     	    _RET 
 490              	
 491              	/************************************************
 492              	    insert_line 
 493              	    insert BASIC line in text area 
 494              	    first search if line with same number exist 
 495              	    replace if so. 
 496              	    input:
 497              	      r0    *buffer to insert 
 498              	    output:
 499              	      none 
 500              	    use: 
 501              	      T1     *buffer
 502              	      T2     temp  
 503              	************************************************/ 
 504 0366 00BF     	    _FUNC insert_line 
 505 0368 2DE90203 	    push {r1,T1,T2}
 506 036c 8046     	    mov T1,r0 
 507 036e B8F80000 	    ldrh r0,[T1]
 508 0372 00B5FFF7 	    _CALL search_lineno 
 508      FEFF5DF8 
 508      04EB
 509 037c 49B9     	    cbnz  r1, 1f // line# doesn't exist
 510              	// already exist 
 511 037e 00B5FFF7 	    _CALL delete_line // delete old one 
 511      C6FF5DF8 
 511      04EB
 512 0388 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 513 038c B9F1040F 	    cmp T2,#4 // empty line length==4  
 514 0390 0ED0     	    beq 9f
 515              	1: //insert new line 
 516 0392 98F80210 	    ldrb r1,[T1,#2]
 517 0396 00B5FFF7 	    _CALL create_gap 
 517      D0FF5DF8 
 517      04EB
 518 03a0 0146     	    mov r1,r0
 519 03a2 4046     	    mov r0,T1 
 520 03a4 8278     	    ldrb r2,[r0,#2]
 521 03a6 00B5FFF7 	    _CALL cmove 
 521      FEFF5DF8 
 521      04EB
 522 03b0 BDE80203 	9:  pop {r1,T1,T2}
 523 03b4 7047     	    _RET 
 524              	
 525              	/*********************************
 526              	    compile 
 527              	    tokenize source line save it 
 528              	    in pas buffer.
 529              	    compiled line format: 
 530              	      line_no  2 bytes {0...32767}
 531              	      count    1 byte  
 532              	      tokens   variable length 
ARM GAS  tinyBasic.s 			page 26


 533              	  input:
 534              	     r0   *text buffer 
 535              	     r1   *text length   
 536              	  output:
 537              	    r0    0 stored | -1 immediate 
 538              	  use:
 539              	    r3    tib index   
 540              	    T1    tib
 541              	    T2    pad
 542              	***********************************/
 543 03b6 00BF     	    _FUNC compile
 544 03b8 8046     	    mov T1, r0  // source text buffer 
 545 03ba 6160     	    str r1,[UPP,#COUNT] // save line length 
 546 03bc DFF8D499 	    ldr T2,pad // tokens buffer
 547 03c0 83EA0303 	    eor r3,r3 // source index  
 548 03c4 206C     	    ldr r0,[UPP,#FLAGS]
 549 03c6 40F02000 	    orr r0,#FCOMP
 550 03ca 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 551 03cc 80EA0000 	    eor r0,r0     
 552 03d0 29F8020B 	    strh r0,[T2],#2   // line no 
 553 03d4 09F8010B 	    strb r0,[T2],#1 // length 
 554 03d8 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 555 03da C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 556 03de 00B500F0 	    _CALL parse_int 
 556      6EF95DF8 
 556      04EB
 557 03e8 0AD0     	    beq 2f 
 558              	// this is a line number     
 559 03ea 0129     	    cmp r1,#1 
 560 03ec 02D5     	    bpl 1f 
 561 03ee 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 562 03f2 39E3     	    b tb_error  
 563 03f4 B1F5803F 	1:  cmp r1,#65536
 564 03f8 F9D5     	    bpl 0b 
 565              	    // write line # to pad 
 566 03fa 29F8031C 	    strh r1,[T2,#-3]
 567 03fe 2360     	    str r3,[UPP,#IN_SAVED]
 568              	2:  // check for pad full 
 569 0400 C145     	    cmp T2,T1
 570 0402 02DB     	    blt 3f 
 571 0404 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 572 0408 2EE3     	    b tb_error 
 573 040a 00B500F0 	3:  _CALL comp_token 
 573      28F85DF8 
 573      04EB
 574 0414 0028     	    cmp r0,#TK_NONE 
 575 0416 01D0     	    beq 4f 
 576 0418 2360     	    str r3,[UPP,#IN_SAVED]
 577 041a F1E7     	    b 2b 
 578              	4: // compilation completed 
 579 041c DFF87439 	    ldr r3,pad 
 580 0420 A9EB0300 	    sub r0,T2,r3 // line length 
 581 0424 9870     	    strb r0,[r3,#2]
 582 0426 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 583 0428 1888     	    ldrh r0,[r3] // line number 
 584 042a 70B1     	    cbz r0,8f  
 585              	// insert line in text buffer 
ARM GAS  tinyBasic.s 			page 27


 586 042c 206C     	    ldr r0,[UPP,#FLAGS]
 587 042e 10F0080F 	    tst r0,#FSTOP
 588 0432 02D0     	    beq 7f 
 589 0434 4FF01000 	    mov r0,#ERR_CANT_PROG 
 590 0438 16E3     	    b tb_error 
 591 043a 1846     	7:  mov r0,r3 
 592 043c 00B5FFF7 	    _CALL insert_line 
 592      93FF5DF8 
 592      04EB
 593 0446 4040     	    eors r0,r0 
 594 0448 08E0     	    b 9f 
 595 044a 9B46     	8:  mov BPTR,r3 // *token_list 
 596 044c 4FF0030A 	    mov IN,#3
 597 0450 206C     	    ldr r0,[UPP,#FLAGS]
 598 0452 A0F12000 	    sub r0,#FCOMP
 599 0456 2064     	    str r0,[UPP,#FLAGS]
 600 0458 5FF0FF30 	    movs r0,#-1 
 601 045c 7047     	9:  _RET 
 602              	
 603              	/*********************************************
 604              	    compile next token from source 
 605              	    input: 
 606              	      r3 		tib index  
 607              	      T1    tib adr
 608              	      T2    insert point in pad  
 609              	    output:
 610              	      r0     token attribute 
 611              	      r1 		token value
 612              	      r3     tib index updated    
 613              	      T2     updated 
 614              	      use:
 615              	**********************************************/
 616 045e 00BF     	    _FUNC comp_token 
 617 0460 40B4     	    push {r6}
 618 0462 18F80300 	    ldrb r0,[T1,r3]
 619 0466 0040     	    ands r0,r0 
 620 0468 7DD0     	    beq store_r0  // reached end of text  
 621 046a 4FF02000 	    mov r0,#SPACE 
 622 046e 00B500F0 	    _CALL skip  // skip spaces 
 622      76F95DF8 
 622      04EB
 623 0478 18F80300 	    ldrb r0,[T1,r3]
 624 047c 0040     	    ands r0,r0 
 625 047e 72D0     	    beq store_r0  // reached end of text 
 626 0480 03F10103 	    add r3,#1
 627 0484 00B500F0 	    _CALL is_letter 
 627      9FF95DF8 
 627      04EB
 628 048e 0BD1     	    bne 1f
 629 0490 A3F10103 	    sub r3,#1 
 630 0494 00B500F0 	    _CALL comp_label // parse and compile label 
 630      AFF85DF8 
 630      04EB
 631 049e 1728     	    cmp r0,#TK_CMD 
 632 04a0 71D1     	    bne token_exit 
 633 04a2 4029     	    cmp r1,#REM_IDX 
 634 04a4 4DD0     	    beq tick2 
ARM GAS  tinyBasic.s 			page 28


 635 04a6 6EE0     	    b token_exit 
 636 04a8 00B500F0 	1:  _CALL is_special
 636      6FF85DF8 
 636      04EB
 637 04b2 DFF8046D 	    ldr r6,=token_ofs
 638 04b6 D6E811F0 	    tbh [r6,r1] 
 639              	tok_idx0:     
 640              	//  not special char.  
 641 04ba 57E0     	    b try_number 
 642              	// single char token with no value 
 643              	single: 
 644 04bc DFF8FC6C 	    ldr r6,=tok_single
 645 04c0 705C     	    ldrb r0,[r6,r1] 
 646 04c2 50E0     	    b store_r0
 647              	lt:
 648 04c4 4FF00F00 	    mov r0,#TK_LT
 649 04c8 18F80310 	    ldrb r1,[T1,r3]
 650 04cc 3E29     	    cmp r1,#'>' 
 651 04ce 06D0     	    beq 1f
 652 04d0 0AE0     	    b 2f 
 653              	gt:
 654 04d2 4FF00E00 	    mov r0,#TK_GT 
 655 04d6 18F80310 	    ldrb r1,[T1,r3]
 656 04da 3C29     	    cmp r1,#'<'
 657 04dc 04D1     	    bne 2f  
 658 04de 03F10103 	1:  add r3,#1
 659 04e2 4FF01200 	    mov r0,#TK_NE  
 660 04e6 3EE0     	    b store_r0
 661 04e8 3D29     	2:  cmp r1,#'=' 
 662 04ea 3CD1     	    bne store_r0  
 663 04ec 03F10103 	    add r3,#1
 664 04f0 00F10200 	    add r0,#2
 665 04f4 37E0     	    b store_r0       
 666              	bkslash:
 667 04f6 18F80310 	    ldrb r1,[T1,r3]
 668 04fa 03F10103 	    add r3,#1
 669 04fe 4FF01300 	    mov r0,#TK_CHAR 
 670 0502 09F8010B 	    strb r0,[T2],#1
 671 0506 09F8011B 	    strb r1,[T2],#1
 672 050a 3CE0     	    b token_exit 
 673              	prt_cmd: 
 674 050c 4FF01700 	    mov r0,#TK_CMD 
 675 0510 4FF03A01 	    mov r1,#PRT_IDX
 676 0514 09F8010B 	    strb r0,[T2],#1
 677 0518 09F8011B 	    strb r1,[T2],#1
 678 051c 33E0     	    b token_exit 
 679              	quote:
 680 051e 4FF01C00 	    mov r0,#TK_QSTR 
 681 0522 09F8010B 	    strb r0,[T2],#1
 682 0526 00B500F0 	    _CALL parse_quote
 682      E6F85DF8 
 682      04EB
 683 0530 29E0     	    b token_exit
 684              	tick: 
 685              	// copy comment in pad 
 686 0532 4FF01700 	    mov r0,#TK_CMD 
 687 0536 4FF04001 	    mov r1,#REM_IDX 
ARM GAS  tinyBasic.s 			page 29


 688 053a 09F8010B 	    strb r0,[T2],#1 
 689 053e 09F8011B 	    strb r1,[T2],#1
 690              	tick2:
 691 0542 08EB0300 	    add r0,T1,r3 
 692 0546 4946     	    mov r1,T2 
 693 0548 00B5FFF7 	    _CALL strcpy 
 693      FEFF5DF8 
 693      04EB
 694 0552 00B5FFF7 	    _CALL strlen 
 694      FEFF5DF8 
 694      04EB
 695 055c 8144     	    add T2,r0
 696 055e 09F10109 	    add T2,#1
 697 0562 6368     	    ldr r3,[UPP,#COUNT]
 698 0564 0FE0     	    b token_exit
 699              	store_r0: 
 700 0566 09F8010B 	    strb r0,[T2],#1
 701 056a 0CE0     	    b token_exit 
 702              	try_number:
 703 056c A3F10103 	    sub r3,#1
 704 0570 00B500F0 	    _CALL parse_int  
 704      A5F85DF8 
 704      04EB
 705 057a 00F07182 	    beq syntax_error  
 706 057e 09F8010B 	    strb r0,[T2],#1 
 707 0582 49F8041B 	    str r1,[T2],#4
 708              	token_exit:
 709 0586 40BC     	    pop {r6}
 710 0588 7047     	    _RET 
 711              	
 712              	
 713              	/****************************
 714              	    is_special  
 715              	    check for non alphanum
 716              	    input:
 717              	      r0    character to scan 
 718              	    output:
 719              	      r0    character 
 720              	      r1    0 || index 
 721              	    use: 
 722              	      r1    scan index 
 723              	      r2    temp 
 724              	      r3    char_list 
 725              	*****************************/
 726 058a 00BF     	    _FUNC is_special 
 727 058c 0CB4     	    push {r2,r3}
 728 058e 4FF00101 	    mov r1,#1
 729 0592 DFF82C3C 	    ldr r3,=char_list 
 730 0596 5A5C     	1:  ldrb r2,[r3,r1]
 731 0598 22B1     	    cbz r2,8f 
 732 059a 8242     	    cmp r2,r0 
 733 059c 04D0     	    beq 9f 
 734 059e 01F10101 	    add r1,#1 
 735 05a2 F8E7     	    b 1b
 736 05a4 81EA0101 	8:  eor r1,r1     
 737 05a8 0CBC     	9:  pop {r2,r3}
 738 05aa 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 30


 739              	
 740              	char_list:
 741 05ac 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 741      28293A23 
 741      2D2B2A2F 
 741      253D3C3E 
 741      5C3F2722 
 742              	
 743              	tok_single:
 744 05c1 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 744      050601
 745 05c8 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 745      0A0B0D
 746              	
 747 05cf 00       	  .p2align 2
 748              	token_ofs:
 749 05d0 0000     	  .hword  0 // not found
 750              	  // TK_COMMA...TK_EQUAL , 13 
 751 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 751      01000100 
 752 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 752      01000100 
 753 05e2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 753      01000100 
 754 05ea 0100     	  .hword  (single-tok_idx0)/2    
 755              	  // '<','>'
 756 05ec 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 757              	  // '\'
 758 05f0 1E00     	  .hword  (bkslash-tok_idx0)/2
 759              	  // '?' 
 760 05f2 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 761              	  // "'"  
 762 05f4 3C00     	  .hword  (tick-tok_idx0)/2 
 763              	  // '"' quote 
 764 05f6 3200     	  .hword (quote-tok_idx0)/2
 765              	
 766              	  .p2align 2
 767              	
 768              	/****************************
 769              	    comp_label
 770              	    compile a label 
 771              	    it can be a target|keyword|
 772              	    variable| user constant  
 773              	    label form: [A..Z]+
 774              	    input:
 775              	      *buffer 
 776              	    output:
 777              	      r0  token type 
 778              	      r1  token value 
 779              	      T2  updated 
 780              	      R3  updated
 781              	    use:
 782              	****************************/
 783              	    _FUNC comp_label
 784 05f8 24B4     	    push {r2,r5}
 785 05fa 4DF8049D 	    push {T2}
 786 05fe 82EA0202 	    eor r2,r2
ARM GAS  tinyBasic.s 			page 31


 787 0602 4FF00605 	    mov r5,#6 
 788 0606 18F80300 	0:  ldrb r0,[T1,r3]
 789 060a 5F28     	    cmp r0,#'_'
 790 060c 0AD0     	    beq 2f
 791 060e 00B500F0 	1:  _CALL is_letter 
 791      DAF85DF8 
 791      04EB
 792 0618 09D1     	    bne 3f // not letter 
 793 061a 00B500F0 	    _CALL upper 
 793      ACF85DF8 
 793      04EB
 794 0624 09F8010B 	2:  strb r0,[T2],#1
 795 0628 03F10103 	    add r3,#1
 796 062c EBE7     	    b 0b 
 797 062e 80EA0000 	3:  eor r0,r0 
 798 0632 89F80000 	    strb r0,[T2]
 799              	// is this a variable ?
 800 0636 5DF8049B 	    pop {T2}
 801 063a 99F80100 	    ldrb r0,[T2,#1]
 802 063e 30B9     	    cbnz r0,3f // length >1 not variable 
 803 0640 99F80010 	    ldrb r1,[T2]
 804 0644 A1F14101 	    sub r1,#'A' 
 805 0648 4FF01400 	    mov r0,#TK_VAR
 806 064c 1CE0     	    b 8f 
 807              	3:  // try keyword 
 808 064e 4846     	    mov r0,T2 
 809 0650 DFF8701B 	    ldr r1,=kword_dict  
 810 0654 00B500F0 	    _CALL search_dict 
 810      C5FA5DF8 
 810      04EB
 811 065e 30B1     	    cbz r0,4f
 812 0660 1828     	    cmp r0,TK_SCONST  
 813 0662 11D1     	    bne 8f
 814              	    //system constant  
 815 0664 09F8010B 	    strb r0,[T2],#1
 816 0668 49F8041B 	    str r1,[T2],#4
 817 066c 10E0     	    b 9f 
 818              	4: // must be a label 
 819 066e 4846     	    mov r0,T2 
 820 0670 00B500F0 	    _CALL compress_label
 820      0FF85DF8 
 820      04EB
 821 067a 4FF01A00 	    mov r0,#TK_LABEL
 822 067e 09F8010B 	    strb r0,[T2],#1
 823 0682 49F8041B 	    str r1,[T2],#4
 824 0686 03E0     	    b 9f 
 825 0688 09F8010B 	8:  strb r0,[T2],#1
 826 068c 09F8011B 	    strb r1,[T2],#1          
 827 0690 24BC     	9:  pop {r2,r5}
 828 0692 7047     	    _RET 
 829              	
 830              	/********************************
 831              	    compress_label 
 832              	    compress label in integer 
 833              	    maximum 6 character, 
 834              	    ignore extras characters 
 835              	    input:
ARM GAS  tinyBasic.s 			page 32


 836              	      r0  *label 
 837              	    output:
 838              	      r1   compressed label 
 839              	********************************/
 840              	    _FUNC compress_label
 841 0694 0CB4     	    push {r2,r3}
 842 0696 82EA0202 	    eor r2,r2 // compress value
 843 069a 4FF00603 	    mov r3,#6 // max characters 
 844 069e 10F8011B 	1:  ldrb r1,[r0],#1 
 845 06a2 51B1     	    cbz r1,3f
 846 06a4 5F29     	    cmp r1,#'_'
 847 06a6 01D1     	    bne 2f 
 848 06a8 A1F10401 	    sub r1,#4  
 849 06ac A1F14001 	2:  sub r1,#'@'
 850 06b0 4FEA4212 	    lsl r2,#5
 851 06b4 0A44     	    add r2,r1
 852 06b6 013B     	    subs r3,#1 
 853 06b8 F1D1     	    bne 1b 
 854 06ba 1146     	3:  mov r1,r2     
 855 06bc 0CBC     	    pop {r2,r3}
 856 06be 7047     	    _RET 
 857              	
 858              	
 859              	/****************************
 860              	    parse_int 
 861              	    parse an integer from text
 862              	    if not valid integer 
 863              	    r1 return *buffer else 
 864              	    *buffer is incremented after integer 
 865              	  input:
 866              	    r0   *buffer 
 867              	  output:
 868              	    r0   TK_INTGR|TK_NONE
 869              	    r1   int|0   
 870              	  use:
 871              	    r3   tib index updated     
 872              	*****************************/
 873              	    _FUNC parse_int 
 874 06c0 4FF00A01 	    mov r1,#10 // default base 
 875 06c4 18F80300 	    ldrb r0,[T1,r3]
 876 06c8 2428     	    cmp r0,'$' 
 877 06ca 02D1     	    bne 2f 
 878 06cc 4FF01001 	    mov r1,#16 // hexadecimal number 
 879 06d0 03E0     	    b 3f  
 880 06d2 2628     	2:  cmp r0,#'&' 
 881 06d4 03D1     	    bne 4f
 882 06d6 4FF00201 	    mov r1,#2 //binary number  
 883 06da 03F10103 	3:  add r3,#1
 884 06de 03EB0800 	4:  add r0,r3,T1 
 885 06e2 00B5FFF7 	    _CALL atoi 
 885      FEFF5DF8 
 885      04EB
 886 06ec 10B1     	    cbz r0,9f
 887 06ee 0344     	    add r3,r0
 888 06f0 4FF01B00 	    mov r0,#TK_INTGR
 889 06f4 0040     	9:  ands r0,r0   
 890 06f6 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 33


 891              	
 892              	/*********************************************
 893              	    parse_quote 
 894              	    parse quoted string 
 895              	    input: 
 896              	      r3 		tib index  
 897              	      T1    tib adr
 898              	      T2    insert point in pad  
 899              	    output:
 900              	      r0     token attribute 
 901              	      r1 		*str 
 902              	      r3     tib index updated    
 903              	      T2     updated 
 904              	      use:
 905              	*********************************************/
 906              	    _FUNC parse_quote
 907 06f8 4DF8049D 	    push {T2} 
 908 06fc 18F80300 	1:  ldrb r0,[T1,r3]
 909 0700 03F10103 	    add r3,#1 
 910 0704 2228     	    cmp r0,#'"'
 911 0706 09D0     	    beq 9f 
 912 0708 5C28     	    cmp r0,#'\\'
 913 070a 04D1     	    bne 2f 
 914 070c 00B500F0 	    _CALL get_escaped_char 
 914      0DF85DF8 
 914      04EB
 915 0716 09F8010B 	2:  strb r0,[T2],#1
 916 071a EFE7     	    b 1b 
 917 071c 80EA0000 	9:  eor  r0,r0
 918 0720 09F8010B 	    strb r0,[T2],#1
 919 0724 4FF01C00 	    mov r0,#TK_QSTR
 920 0728 02BC     	    pop {r1}
 921 072a 7047     	    _RET 
 922              	
 923              	/**********************************************
 924              	    get_escaped_char 
 925              	    convert "\c" in quoted string 
 926              	    input:
 927              	      r0 
 928              	      r3   index 
 929              	      T1   tib 
 930              	    output:
 931              	      r0   replacement char
 932              	      r3   updated 
 933              	    use:
 934              	      r1   *table 
 935              	      r2   temp 
 936              	**********************************************/
 937              	    _FUNC get_escaped_char 
 938 072c 06B4     	    push {r1,r2}
 939 072e 18F80300 	    ldrb r0,[T1,r3]
 940 0732 03F10103 	    add r3,#1
 941 0736 2228     	    cmp r0,#'"' 
 942 0738 0BD0     	    beq 9f 
 943 073a DFF88C1A 	1:  ldr r1,=escaped 
 944 073e 11F8012B 	2:  ldrb r2,[r1],#1
 945 0742 12B1     	    cbz r2,6f 
ARM GAS  tinyBasic.s 			page 34


 946 0744 8242     	    cmp r2,r0 
 947 0746 02D0     	    beq 7f 
 948 0748 F9E7     	    b 2b
 949 074a A0F10702 	6:  sub r2,r0,#7     
 950 074e 02F10700 	7:  add r0,r2,#7
 951 0752 06BC     	9:  pop {r1,r2}   
 952 0754 7047     	    _RET
 953              	
 954 0756 6162746E 	escaped: .asciz "abtnvfr"
 954      76667200 
 955              	
 956              	/*********************************************
 957              	   skip character in TIB 
 958              	   input:
 959              	      r0    character to skip 
 960              	      r3    tib index 
 961              	      T1    tib adr
 962              	    output: 
 963              	      r3    updated
 964              	    use:
 965              	      r1     
 966              	**********************************************/   
 967 075e 00BF     	    _FUNC skip
 968 0760 02B4     	    push {r1} 
 969 0762 18F80310 	1:  ldrb r1,[T1,r3]
 970 0766 8142     	    cmp r1,r0
 971 0768 02D1     	    bne 2f
 972 076a 03F10103 	    add r3,#1 
 973 076e F8E7     	    b 1b 
 974 0770 2360     	2:  str r3,[UPP,#IN_SAVED]
 975 0772 02BC     	    pop {r1}
 976 0774 7047     	    _RET
 977              	
 978              	/********************************************
 979              	    upper
 980              	    convert character in upper case 
 981              	    input: 
 982              	      r0   character 
 983              	    output:
 984              	      r0   upper case character 
 985              	*********************************************/
 986 0776 00BF     	    _FUNC upper 
 987 0778 6128     	    cmp r0,#'a' 
 988 077a 03DB     	    blt 9f 
 989 077c 7A28     	    cmp r0,#'z' 
 990 077e 01DC     	    bgt 9f 
 991 0780 00F05F00 	    and r0,#0x5f 
 992 0784 7047     	9:  _RET 
 993              	
 994              	/***************************************
 995              	   is_digit 
 996              	   check if char is decimal digit.
 997              	   convert to decimal digit.
 998              	   input:
 999              	      r0    char 
 1000              	   output:
 1001              	      r0        if Z then converted digit else not changed
ARM GAS  tinyBasic.s 			page 35


 1002              	      Z flag    1 true | 0 false  
 1003              	***************************************/
 1004 0786 00BF     	    _GBL_FUNC is_digit 
 1005 0788 02B4     	    push {r1} 
 1006 078a 4FF0FF31 	    mov r1,#-1   
 1007 078e 3028     	    cmp r0,#'0' 
 1008 0790 05DB     	    blt 9f
 1009 0792 3A28     	    cmp r0,'9'+1
 1010 0794 03D5     	    bpl 9f 
 1011 0796 81EA0101 	    eor r1,r1 
 1012 079a A0F13000 	    sub r0,#'0'  
 1013              	9:   
 1014 079e 0940     	    ands r1,r1
 1015 07a0 02BC     	    pop {r1} 
 1016 07a2 7047     	    _RET 
 1017              	
 1018              	/***************************************
 1019              	    is_hex 
 1020              	    check for hexadecimal digit 
 1021              	    convert to hex digit.
 1022              	    input:
 1023              	      r0    
 1024              	    output:
 1025              	      r0         if Z then converted digit 
 1026              	      Z  flag    1 true | 0 false         
 1027              	***************************************/
 1028              	    _FUNC is_hex 
 1029 07a4 02B4     	    push {r1}
 1030 07a6 80EA0000 	    eor r0,r0 
 1031 07aa 4128     	    cmp r0,#'A' 
 1032 07ac 01D4     	    bmi 1f 
 1033 07ae A0F10700 	    sub r0,#7 
 1034 07b2 A0F13000 	1:  sub r0,#'0'
 1035 07b6 01D4     	    bmi 2f 
 1036 07b8 1028     	    cmp r0,#16
 1037 07ba 01D4     	    bmi 9f 
 1038 07bc 6FEA0101 	2:  mvn r1,r1  
 1039 07c0 0940     	9:  ands r1,r1 
 1040 07c2 02BC     	    pop {r1}
 1041 07c4 7047     	    _RET 
 1042              	
 1043              	/***************************************
 1044              	    is_letter 
 1045              	    check if character is {a..z,A..Z,_} 
 1046              	  input:
 1047              	    r0   character 
 1048              	  output: 
 1049              	    r0       same character 
 1050              	    Z flag   1 true | 0 false  
 1051              	****************************************/
 1052 07c6 00BF     	    _FUNC is_letter
 1053 07c8 02B4     	    push {r1} 
 1054 07ca 81EA0101 	    eor r1,r1 
 1055 07ce 4128     	    cmp r0,#'A' 
 1056 07d0 05D4     	    bmi 8f 
 1057 07d2 5B28     	    cmp r0,#'Z'+1 
 1058 07d4 05D4     	    bmi 9f
ARM GAS  tinyBasic.s 			page 36


 1059 07d6 6128     	    cmp r0,#'a' 
 1060 07d8 01D4     	    bmi 8f 
 1061 07da 7B28     	    cmp r0,#'z'+1
 1062 07dc 01D4     	    bmi 9f  
 1063 07de 6FEA0101 	8:  mvn r1,r1  
 1064 07e2 0940     	9:  ands r1,r1 
 1065 07e4 02BC     	    pop {r1}
 1066 07e6 7047     	    _RET 
 1067              	
 1068              	
 1069              	/******************************************
 1070              	    atoi 
 1071              	    convert ascii to integer 
 1072              	    input:
 1073              	      r0   *buffer 
 1074              	      r1   base 
 1075              	    output:
 1076              	      r0   0 no integer found 
 1077              	      r1   integer
 1078              	    use:
 1079              	      r2   base  
 1080              	      T1   *buffer 
 1081              	      T2   digit count  
 1082              	******************************************/
 1083              	    _GBL_FUNC atoi 
 1084 07e8 2DE90403 	    push {r2,T1,T2}
 1085 07ec 8046     	    mov T1,r0  // *buffer 
 1086 07ee 0A46     	    mov r2,r1  // base  
 1087 07f0 81EA0101 	    eor r1,r1  // converted integer 
 1088 07f4 89EA0909 	    eor T2,T2  // digit count 
 1089 07f8 18F8010B 	1:  ldrb r0,[T1],#1
 1090 07fc 00B5FFF7 	    _CALL upper 
 1090      BBFF5DF8 
 1090      04EB
 1091 0806 3028     	    cmp r0,#'0'
 1092 0808 0FD4     	    bmi 8f
 1093 080a 3A28     	    cmp r0,#'9'+1 
 1094 080c 03D4     	    bmi 2f 
 1095 080e 4128     	    cmp r0,#'A'
 1096 0810 0BD4     	    bmi 8f 
 1097 0812 A0F10700 	    sub r0,#7 
 1098 0816 A0F13000 	2:  sub r0,#'0' 
 1099 081a 9042     	    cmp r0,r2
 1100 081c 05D5     	    bpl 8f  
 1101 081e 02FB01F1 	    mul r1,r2 
 1102 0822 0144     	    add r1,r0
 1103 0824 09F10109 	    add T2,#1
 1104 0828 E6E7     	    b 1b 
 1105 082a 4846     	8:  mov r0,T2  
 1106 082c BDE80403 	    pop {r2,T1,T2}
 1107 0830 7047     	    _RET 
 1108              	
 1109              	
 1110              	
 1111              	/*******************
 1112              	    DECOMPILER 
 1113              	*******************/
ARM GAS  tinyBasic.s 			page 37


 1114              	
 1115              	/********************************************
 1116              	    cmd_name 
 1117              	    search bytecode in dictionary and 
 1118              	    return its name 
 1119              	  input:
 1120              	    r0    token type 
 1121              	    r1    keyword bytecode 
 1122              	  ouput:
 1123              	    r0    name string 
 1124              	  use:
 1125              	    T1    link 
 1126              	    T2    tmp 
 1127              	*********************************************/
 1128 0832 00BF     	    _FUNC cmd_name 
 1129 0834 2DE90003 	    push {T1,T2}
 1130 0838 DFF88889 	    ldr T1,=kword_dict 
 1131 083c 58F8049C 	1:  ldr T2,[T1,#-4]
 1132 0840 8145     	    cmp T2,r0 
 1133 0842 03D1     	    bne 3f 
 1134 0844 58F8089C 	    ldr T2,[T1,#-8]
 1135 0848 8945     	    cmp T2,r1 
 1136 084a 04D0     	    beq 2f 
 1137 084c 58F80C8C 	3:  ldr T1,[T1,#-12]
 1138 0850 B8F1000F 	    cmp T1,#0
 1139 0854 F2D1     	    bne 1b  
 1140 0856 4046     	2:  mov r0,T1 
 1141 0858 BDE80003 	    pop {T1,T2}
 1142 085c 7047     	    _RET
 1143              	
 1144              	/*****************************
 1145              	  decompile_line 
 1146              	  detokenize BASIC line 
 1147              	  input:
 1148              	    r0  *token list 
 1149              	    r1  *output buffer 
 1150              	  output:
 1151              	    r0  *output buffer (.asciz) 
 1152              	  use:
 1153              	    T1  *output buffer
 1154              	    BPTR  *token list
 1155              	    IN  offset in token list  
 1156              	******************************/
 1157 085e 00BF     	    _GBL_FUNC decompile_line
 1158 0860 2DE90E01 	    push {r1,r2,r3,T1} 
 1159 0864 8346     	    mov BPTR,r0 
 1160 0866 4FF0000A 	    mov IN,#0
 1161 086a 8846     	    mov T1,r1 
 1162 086c 3BF80A00 	    ldrh r0,[BPTR,IN]
 1163 0870 0AF1020A 	    add IN,#2 
 1164 0874 4FF00A01 	    mov r1,#10 
 1165 0878 00B5FFF7 	    _CALL itoa
 1165      FEFF5DF8 
 1165      04EB
 1166 0882 4146     	    mov r1,T1
 1167 0884 00B5FFF7 	    _CALL strcpy
 1167      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 38


 1167      04EB
 1168 088e 4046     	    mov r0,T1 
 1169 0890 00B5FFF7 	    _CALL strlen
 1169      FEFF5DF8 
 1169      04EB
 1170 089a 8044     	    add T1,r0 
 1171 089c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1172 08a0 0AF1010A 	    add IN,#1 
 1173 08a4 6060     	    str r0,[UPP,#COUNT]
 1174              	decomp_loop:
 1175 08a6 00B500F0 	    _CALL next_token
 1175      CCFA5DF8 
 1175      04EB
 1176 08b0 0028     	    cmp r0,#TK_NONE 
 1177 08b2 00F0AD80 	    beq 9f
 1178 08b6 1028     	    cmp r0,#TK_GE 
 1179 08b8 05D5     	    bpl 1f 
 1180 08ba DFF81019 	    ldr r1,=single_char 
 1181 08be 085C     	    ldrb r0,[r1,r0]
 1182 08c0 08F8010B 	    strb r0,[T1],#1 
 1183 08c4 EFE7     	    b decomp_loop
 1184              	1: 
 1185 08c6 1328     	    cmp r0,#TK_CHAR  
 1186 08c8 14D5     	    bpl 2f 
 1187 08ca A0F11000 	    sub r0,#TK_GE
 1188 08ce 4FEA8000 	    lsl r0,#2 
 1189 08d2 DFF8FC18 	    ldr r1,=relop_str 
 1190 08d6 0858     	    ldr r0,[r1,r0]
 1191 08d8 4146     	    mov r1,T1 
 1192 08da 00B5FFF7 	    _CALL strcpy 
 1192      FEFF5DF8 
 1192      04EB
 1193 08e4 4046     	    mov r0,T1 
 1194 08e6 00B5FFF7 	    _CALL strlen 
 1194      FEFF5DF8 
 1194      04EB
 1195 08f0 8044     	    add T1,r0 
 1196 08f2 D8E7     	    b decomp_loop
 1197 08f4 1328     	2:  cmp r0,#TK_CHAR 
 1198 08f6 06D1     	    bne 3f 
 1199 08f8 4FF05C00 	    mov r0,#'\\'
 1200 08fc 08F8010B 	    strb r0,[T1],#1
 1201 0900 08F8011B 	    strb r1,[T1],#1
 1202              	//    mov r0,#SPACE 
 1203              	//    strb r0,[T1],#1
 1204 0904 CFE7     	    b decomp_loop 
 1205 0906 1428     	3:  cmp r0,#TK_VAR 
 1206 0908 08D1     	    bne 4f 
 1207 090a 01F14100 	    add r0,r1,'A'
 1208 090e 08F8010B 	    strb r0,[T1],#1 
 1209 0912 4FF02000 	    mov r0,#SPACE 
 1210 0916 08F8010B 	    strb r0,[T1],#1
 1211 091a C4E7     	    b decomp_loop 
 1212 091c 1A28     	4:  cmp r0,#TK_LABEL 
 1213 091e 2BD5     	    bpl 5f   
 1214 0920 03B4     	    push {r0,r1}
 1215              	//    mov r0,r1 
ARM GAS  tinyBasic.s 			page 39


 1216 0922 00B5FFF7 	    _CALL cmd_name
 1216      86FF5DF8 
 1216      04EB
 1217 092c 4146     	    mov r1,T1 
 1218 092e 00B5FFF7 	    _CALL strcpy 
 1218      FEFF5DF8 
 1218      04EB
 1219 0938 4046     	    mov r0,T1 
 1220 093a 00B5FFF7 	    _CALL strlen 
 1220      FEFF5DF8 
 1220      04EB
 1221 0944 8044     	    add T1,r0
 1222 0946 03BC     	    pop {r0,r1}
 1223 0948 4FF02000 	    mov r0,#SPACE 
 1224 094c 08F8010B 	    strb r0,[T1],#1 
 1225 0950 4029     	    cmp r1,#REM_IDX
 1226 0952 A8D1     	    bne decomp_loop 
 1227 0954 0BEB0A00 	    add r0,BPTR,IN
 1228 0958 4146     	    mov r1,T1   
 1229 095a 00B5FFF7 	    _CALL strcpy
 1229      FEFF5DF8 
 1229      04EB
 1230 0964 4046     	    mov r0,T1 
 1231 0966 00B5FFF7 	    _CALL strlen
 1231      FEFF5DF8 
 1231      04EB
 1232 0970 8044     	    add T1,r0
 1233 0972 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1234 0976 4BE0     	    b 9f 
 1235 0978 1B28     	5:  cmp r0,#TK_INTGR
 1236 097a 14D1     	    bne 6f  
 1237 097c 0846     	    mov r0,r1 
 1238 097e A169     	    ldr r1,[UPP,#BASE]
 1239 0980 00B5FFF7 	    _CALL itoa
 1239      FEFF5DF8 
 1239      04EB
 1240 098a 4146     	    mov r1,T1 
 1241 098c 00B5FFF7 	    _CALL strcpy
 1241      FEFF5DF8 
 1241      04EB
 1242 0996 4046     	    mov r0,T1 
 1243 0998 00B5FFF7 	    _CALL strlen
 1243      FEFF5DF8 
 1243      04EB
 1244 09a2 8044     	    add T1,r0 
 1245 09a4 7FE7     	    b decomp_loop 
 1246 09a6 1A28     	6:  cmp r0,#TK_LABEL
 1247 09a8 1BD1     	    bne 7f
 1248 09aa 4FF01902 	    mov r2,#25
 1249 09ae 4FF6FF73 	    mov r3,#0xffff 
 1250 09b2 C3F6FF73 	    movt r3,#0x3fff 
 1251 09b6 01EA0301 	0:  and r1,r3 
 1252 09ba 4FEA5313 	    lsr r3,#5 
 1253 09be 31FA02F0 	    lsrs r0,r1,r2 
 1254 09c2 07D0     	    beq 2f
 1255 09c4 00F14000 	    add r0,#'@'
 1256 09c8 5B28     	    cmp r0,#'['
ARM GAS  tinyBasic.s 			page 40


 1257 09ca 01D1     	    bne 1f
 1258 09cc 00F10400 	    add r0,#4 
 1259 09d0 08F8010B 	1:  strb r0,[T1],#1
 1260 09d4 053A     	2:  subs r2,#5 
 1261 09d6 EEDA     	    bge 0b
 1262 09d8 4FF02000 	    mov r0,#SPACE 
 1263 09dc 08F8010B 	    strb r0,[T1],#1  
 1264 09e0 61E7     	    b decomp_loop
 1265 09e2 4FF02200 	7:  mov r0,#'"'
 1266 09e6 08F8010B 	    strb r0,[T1],#1 
 1267 09ea 0846     	    mov r0,r1
 1268 09ec 4146     	    mov r1,T1  
 1269 09ee 00B5FFF7 	    _CALL strcpy
 1269      FEFF5DF8 
 1269      04EB
 1270 09f8 4046     	    mov r0,T1 
 1271 09fa 00B5FFF7 	    _CALL strlen 
 1271      FEFF5DF8 
 1271      04EB
 1272 0a04 8044     	    add T1,r0 
 1273 0a06 4FF02200 	    mov r0,#'"'
 1274 0a0a 08F8010B 	    strb r0,[T1],#1 
 1275 0a0e 4AE7     	    b decomp_loop
 1276 0a10 80EA0000 	9:  eor r0,r0 
 1277 0a14 88F80000 	    strb r0,[T1]
 1278 0a18 BDE80E01 	    pop {r1,r2,r3,T1}
 1279 0a1c 0846     	    mov r0,r1 
 1280 0a1e 7047     	    _RET 
 1281              	
 1282 0a20 2C0A0000 	relop_str: .word ge_str,le_str,ne_str 
 1282      2F0A0000 
 1282      320A0000 
 1283 0a2c 3E3D00   	ge_str: .asciz ">="
 1284 0a2f 3C3D00   	le_str: .asciz "<="
 1285 0a32 3C3E00   	ne_str: .asciz "<>"
 1286              	
 1287              	single_char:
 1288 0a35 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1288      2328292B 
 1288      2D2A2F25 
 1289 0a41 403D3E3C 	  .byte '@','=', '>', '<' 
 1290              	
 1291              	
 1292              	
 1293              	
 1294              	/**********************************
 1295              	  modulo 
 1296              	  compute r0 mod r1
 1297              	  input:
 1298              	    r0   dividend
 1299              	    r1   divisor 
 1300              	  output:
 1301              	    r0   TK_INTGR 
 1302              	    r1   r0 mod r1 
 1303              	*********************************/
 1304 0a45 0000BF   	    _GBL_FUNC modulo 
 1305 0a48 01B4     	    push {r0}
ARM GAS  tinyBasic.s 			page 41


 1306 0a4a B0FBF1F0 	    udiv r0,r1 
 1307 0a4e 01FB00F0 	    mul  r0,r1 
 1308 0a52 02BC     	    pop {r1}
 1309 0a54 A1EB0001 	    sub r1,r0
 1310 0a58 4FF01B00 	    mov r0,#TK_INTGR
 1311 0a5c 7047     	    _RET 
 1312              	
 1313              	/**********************************
 1314              	      BASIC commands 
 1315              	**********************************/
 1316              	
 1317              	/*********************************
 1318              	    syntax_error 
 1319              	    display syntax error message and 
 1320              	    abort program 
 1321              	  input:
 1322              	    none  
 1323              	  output: 
 1324              	    none 
 1325              	  use:
 1326              	*********************************/
 1327 0a5e 00BF     	    _FUNC syntax_error 
 1328 0a60 4FF00200 	    mov r0,#ERR_SYNTAX
 1329 0a64 00E0     	    b tb_error 
 1330              	
 1331              	/*********************************
 1332              	    tb_error 
 1333              	    display BASIC error and 
 1334              	    abort program. 
 1335              	  input:
 1336              	    r0    error code   
 1337              	  output: 
 1338              	    none 
 1339              	  use:
 1340              	    r1    temp 
 1341              	*********************************/
 1342 0a66 00BF     	    _FUNC tb_error 
 1343 0a68 216C     	    ldr r1,[UPP,#FLAGS]
 1344 0a6a 11F0200F 	    tst r1,#FCOMP
 1345 0a6e 43D1     	    bne compile_error
 1346              	rt_error:
 1347 0a70 5246     	    mov r2,IN 
 1348 0a72 01B4     	    push {r0}
 1349 0a74 DFF85C07 	    ldr r0,=rt_error_msg 
 1350 0a78 00B5FFF7 	    _CALL uart_puts 
 1350      FEFF5DF8 
 1350      04EB
 1351 0a82 01BC     	    pop {r0}
 1352 0a84 DFF85017 	    ldr r1,=err_msg  
 1353 0a88 4FEA8000 	    lsl r0,#2 
 1354 0a8c 0858     	    ldr r0,[r1,r0]
 1355 0a8e 00B5FFF7 	    _CALL uart_puts
 1355      FEFF5DF8 
 1355      04EB
 1356              	// decompile and print faulty line      
 1357 0a98 5846     	    mov r0,BPTR
 1358 0a9a 5246     	    mov r2,IN  
ARM GAS  tinyBasic.s 			page 42


 1359 0a9c DFF8F412 	    ldr r1,pad 
 1360 0aa0 00B5FFF7 	    _CALL decompile_line
 1360      FEFF5DF8 
 1360      04EB
 1361 0aaa 00B5FFF7 	    _CALL uart_puts 
 1361      FEFF5DF8 
 1361      04EB
 1362 0ab4 00B5FFF7 	    _CALL cr 
 1362      FEFF5DF8 
 1362      04EB
 1363              	// print error offset on line      
 1364 0abe DFF81C07 	    ldr r0,=token_at_msg 
 1365 0ac2 00B5FFF7 	    _CALL uart_puts 
 1365      FEFF5DF8 
 1365      04EB
 1366 0acc 1046     	    mov r0,r2 
 1367 0ace 4FF01001 	    mov r1,#16 
 1368 0ad2 00B5FFF7 	    _CALL print_int
 1368      FEFF5DF8 
 1368      04EB
 1369 0adc 00B5FFF7 	    _CALL cr
 1369      FEFF5DF8 
 1369      04EB
 1370              	// dump tokenize line 
 1371 0ae6 5846     	    mov r0,BPTR
 1372 0ae8 8278     	    ldrb r2,[r0,#2]
 1373 0aea 00B500F0 	    _CALL dump01 
 1373      1BFA5DF8 
 1373      04EB
 1374 0af4 FFF7FEBF 	    b warm_start 
 1375              	compile_error:
 1376 0af8 DFF8DC16 	    ldr r1,=err_msg 
 1377 0afc 4FEA8000 	    lsl r0,#2 
 1378 0b00 0858     	    ldr r0,[r1,r0]
 1379 0b02 00B5FFF7 	    _CALL uart_puts
 1379      FEFF5DF8 
 1379      04EB
 1380 0b0c A068     	    ldr r0,[UPP,#BASICPTR]
 1381 0b0e 00B5FFF7 	    _CALL uart_puts
 1381      FEFF5DF8 
 1381      04EB
 1382 0b18 00B5FFF7 	    _CALL cr
 1382      FEFF5DF8 
 1382      04EB
 1383 0b22 2068     	    ldr r0,[UPP,#IN_SAVED]
 1384 0b24 00B5FFF7 	    _CALL spaces 
 1384      FEFF5DF8 
 1384      04EB
 1385 0b2e 4FF05E00 	    mov r0,#'^' 
 1386 0b32 00B5FFF7 	    _CALL uart_putc
 1386      FEFF5DF8 
 1386      04EB
 1387 0b3c 00B5FFF7 	    _CALL cr
 1387      FEFF5DF8 
 1387      04EB
 1388 0b46 FFF7FEBF 	    b  warm_start  
 1389              	    
ARM GAS  tinyBasic.s 			page 43


 1390 0b4a 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1390      74696D65 
 1390      20657272 
 1390      6F723A20 
 1390      00
 1391 0b5b 746F6B65 	token_at_msg: .asciz "token offset: "
 1391      6E206F66 
 1391      66736574 
 1391      3A2000
 1392              	
 1393              	
 1394              	err_msg:
 1395 0b6a 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1395      00000000 
 1395      0D000000 
 1395      1B000000 
 1395      34000000 
 1396 0b82 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1396      6F000000 
 1396      89000000 
 1396      9A000000 
 1396      AB000000 
 1397 0b96 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1397      EA000000 
 1397      FA000000 
 1397      0E010000 
 1397      21010000 
 1398 0baa 2E010000 	   .word err_cant_prog 
 1399              	
 1400              	    .section .rodata.tb_error 
 1401              	
 1402 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1402      72792066 
 1402      756C6C0A 
 1402      00
 1403 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1403      61782065 
 1403      72726F72 
 1403      0A00
 1404 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1404      206F7065 
 1404      72617469 
 1404      6F6E206F 
 1404      76657266 
 1405 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1405      73696F6E 
 1405      20627920 
 1405      300A00
 1406 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1406      6C696420 
 1406      6C696E65 
 1406      206E756D 
 1406      6265722E 
 1407 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1407      74696D65 
 1407      206F6E6C 
 1407      79207573 
ARM GAS  tinyBasic.s 			page 44


 1407      6167652E 
 1408 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1408      616E6420 
 1408      6C696E65 
 1408      206F6E6C 
 1408      79207573 
 1409 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1409      69636174 
 1409      65206E61 
 1409      6D652E0A 
 1409      00
 1410 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1410      206E6F74 
 1410      20666F75 
 1410      6E642E0A 
 1410      00
 1411 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1411      76616C75 
 1411      652E0A00 
 1412 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1412      20696E20 
 1412      65787465 
 1412      6E646564 
 1412      206D656D 
 1413 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1413      61746120 
 1413      666F756E 
 1413      642E0A00 
 1414 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1414      726F6772 
 1414      616D2069 
 1414      6E205241 
 1414      4D210A00 
 1415 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1415      20737973 
 1415      74656D20 
 1415      66756C6C 
 1415      2E0A00
 1416 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1416      65722066 
 1416      756C6C0A 
 1416      00
 1417 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1417      74206D6F 
 1417      64696679 
 1417      2070726F 
 1417      6772616D 
 1418              	
 1419 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1419      2074696D 
 1419      65206572 
 1419      726F722C 
 1419      2000
 1420 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1420      70696C65 
 1420      20657272 
 1420      6F722C20 
ARM GAS  tinyBasic.s 			page 45


 1420      00
 1421 018d 6C617374 	tk_id: .asciz "last token id: "
 1421      20746F6B 
 1421      656E2069 
 1421      643A2000 
 1422              	
 1423              	
 1424              	    .section  .text , "ax", %progbits 
 1425              	
 1426              	/*********************************
 1427              	   skip_line 
 1428              	   data and remark line are skipped
 1429              	   by the interpreter 
 1430              	***********************************/
 1431 0bae 00BF     	    _FUNC skip_line 
 1432 0bb0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1433 0bb4 7047     	    _RET 
 1434              	
 1435              	
 1436              	/*********************************
 1437              	   BASIC: BTGL adr, mask   
 1438              	   toggle bits [adr]=[adr]^mask  
 1439              	   input:
 1440              	     r0    adr 
 1441              	     r1    mask 
 1442              	    output;
 1443              	      none 
 1444              	    use:
 1445              	      T1   temp
 1446              	      T2   temp  
 1447              	*******************************/     
 1448 0bb6 00BF     	    _FUNC BTGL 
 1449              	
 1450 0bb8 7047     	    _RET 
 1451              	
 1452              	/***************************************
 1453              	   kword_cmp
 1454              	   compare keyword to dict entry
 1455              	  input:
 1456              	    r0  keyword 
 1457              	    r1  dict entry 
 1458              	    r2  character count 
 1459              	  output:
 1460              	    r0  0 not same | -1 same 
 1461              	  use:
 1462              	    r6   result  
 1463              	    T1   char 1
 1464              	    T2   char 2
 1465              	**************************************/   
 1466 0bba 00BF     	    _FUNC kword_cmp 
 1467 0bbc 2DE94003 	    push {r6,T1,T2}
 1468 0bc0 4FF0FF36 	    mov r6,#-1 
 1469 0bc4 4AB1     	1:  cbz r2,9f       
 1470 0bc6 10F8018B 	    ldrb T1,[r0],#1
 1471 0bca 11F8019B 	    ldrb T2,[r1],#1
 1472 0bce A2F10102 	    sub r2,#1
 1473 0bd2 C845     	    cmp T1,T2
ARM GAS  tinyBasic.s 			page 46


 1474 0bd4 F6D0     	    beq 1b 
 1475 0bd6 86EA0606 	    eor r6,r6  
 1476 0bda 3046     	9:  mov r0,r6
 1477 0bdc BDE84003 	    pop {r6,T1,T2}
 1478 0be0 7047     	    _RET 
 1479              	
 1480              	/***********************************************
 1481              	    search_dict 
 1482              	    search keyword in dictionary
 1483              	   input:
 1484              	  	 r0   keyword 
 1485              	     r1		dictionary first name field address  
 1486              	   output:
 1487              	     r0 		token attribute 
 1488              	     r1		  cmd_index if r0!=TK_NONE  
 1489              	   use:
 1490              	     r3   length keyword 
 1491              	     T1   keyword
 1492              	     T2   link  
 1493              	**********************************************/
 1494 0be2 00BF     	  _FUNC search_dict
 1495 0be4 2DE90C03 	  push {r2,r3,T1,T2}
 1496 0be8 8046     	  mov T1,r0 
 1497 0bea 00B5FFF7 	  _CALL strlen 
 1497      FEFF5DF8 
 1497      04EB
 1498 0bf4 0346     	  mov r3,r0  
 1499              	1:  
 1500 0bf6 8946     	   mov T2,r1  // keep for linking   
 1501 0bf8 0878     	   ldrb r0,[r1] 
 1502 0bfa 78B1     	   cbz r0,9f // null byte, end of dictionary
 1503 0bfc 4046     	   mov r0,T1
 1504 0bfe 1A46     	   mov r2,r3   
 1505 0c00 00B5FFF7 	   _CALL kword_cmp  
 1505      DBFF5DF8 
 1505      04EB
 1506 0c0a 18B9     	   cbnz r0,2f 
 1507 0c0c 4946     	   mov r1,T2
 1508 0c0e 51F80C1C 	   ldr r1,[r1,#-12]
 1509 0c12 F0E7     	   b 1b   
 1510              	2: // found
 1511 0c14 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1512 0c18 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1513 0c1c BDE80C03 	9: pop {r2,r3,T1,T2}
 1514 0c20 7047     	   _RET 
 1515              	
 1516              	
 1517              	/**************************
 1518              	    INTERPRETER 
 1519              	*************************/
 1520              	
 1521              	/*********************************
 1522              	   cold_start 
 1523              	   initialize BASIC interpreter 
 1524              	   never leave 
 1525              	   input:
 1526              	     none 
ARM GAS  tinyBasic.s 			page 47


 1527              	   output:
 1528              	    none 
 1529              	*********************************/
 1530              	  .type cold_start, %function 
 1531              	  .global cold_start 
 1532              	cold_start: 
 1533 0c22 4FF0F004 	    _MOV32 UPP,(RAM_ADR+60*4) 
 1533      C2F20004 
 1534 0c2a DFF84000 	    ldr r0,src_addr 
 1535 0c2e DFF84010 	    ldr r1,dest_addr
 1536              	//copy initialized system variables to ram 
 1537 0c32 104A     	    ldr r2,sysvar_size
 1538 0c34 00B5FFF7 	    _CALL cmove
 1538      FEFF5DF8 
 1538      04EB
 1539 0c3e 00B500F0 	    _CALL prt_version
 1539      1AF85DF8 
 1539      04EB
 1540 0c48 00B500F0 	    _CALL clear_basic 
 1540      67F85DF8 
 1540      04EB
 1541 0c52 00B5FFF7 	    _CALL search_free 
 1541      FEFF5DF8 
 1541      04EB
 1542 0c5c E062     	    str r0,[UPP,#FSFREE]
 1543 0c5e 00B5FFF7 	    _CALL exec_autorun  
 1543      FEFF5DF8 
 1543      04EB
 1544 0c68 FFF7FEBF 	    b warm_start    
 1545              	src_addr:
 1546 0c6c 00000000 	  .word uzero
 1547              	dest_addr:
 1548 0c70 00000020 	  .word RAM_ADR 
 1549 0c74 D4010000 	sysvar_size: .word ulast-uzero 
 1550              	
 1551              	/************************************
 1552              	    print firmware version 
 1553              	    input: 
 1554              	      none 
 1555              	    output:
 1556              	      none 
 1557              	    use:
 1558              	      r0 
 1559              	***********************************/
 1560              	    _FUNC prt_version 
 1561 0c78 DFF86405 	    ldr r0,=version_msg 
 1562 0c7c 00B5FFF7 	    _CALL uart_puts
 1562      FEFF5DF8 
 1562      04EB
 1563 0c86 9FF87400 	    ldrb r0,version 
 1564 0c8a 4FEA1010 	    lsr r0,#4 
 1565 0c8e 00F13000 	    add r0,#'0' 
 1566 0c92 3A28     	    cmp r0,#'9'+1 
 1567 0c94 01D4     	    bmi 1f 
 1568 0c96 00F10700 	    add r0,#7 
 1569              	  1:
 1570 0c9a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 48


 1570      FEFF5DF8 
 1570      04EB
 1571 0ca4 4FF02E00 	    mov r0,#'. 
 1572 0ca8 00B5FFF7 	    _CALL uart_putc 
 1572      FEFF5DF8 
 1572      04EB
 1573 0cb2 9FF84800 	    ldrb r0,version 
 1574 0cb6 00F00F00 	    and r0,#15 
 1575 0cba 00F13000 	    add r0,'0' 
 1576 0cbe 3A28     	    cmp r0,#'9'+1 
 1577 0cc0 01D4     	    bmi 1f 
 1578 0cc2 00F10700 	    add r0,#7
 1579              	  1: 
 1580 0cc6 00B5FFF7 	    _CALL uart_putc 
 1580      FEFF5DF8 
 1580      04EB
 1581 0cd0 00B5FFF7 	    _CALL cr
 1581      FEFF5DF8 
 1581      04EB
 1582 0cda 7047     	    _RET  
 1583              	version_msg:
 1584 0cdc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1584      65207069 
 1584      6C6C2074 
 1584      696E7920 
 1584      42415349 
 1585              	version:
 1586 0cfc 10       	    .byte 0x10 
 1587 0cfd 0000BF   	    .p2align 2 
 1588              	
 1589              	
 1590              	/*****************************
 1591              	    clear_vars 
 1592              	    initialize variables to 0
 1593              	  input:
 1594              	    none 
 1595              	  output:
 1596              	    none 
 1597              	  use:
 1598              	    r0,r1,r2 
 1599              	*****************************/
 1600              	    _FUNC clear_vars 
 1601 0d00 07B4     	    push {r0,r1,r2}
 1602 0d02 80EA0000 	    eor r0,r0 
 1603 0d06 04F17001 	    add r1,UPP,#VARS
 1604 0d0a 4FF01A02 	    mov r2,#26
 1605 0d0e 41F8040B 	1:  str r0,[r1],#4 
 1606 0d12 013A     	    subs r2,#1
 1607 0d14 FBD1     	    bne 1b  
 1608 0d16 07BC     	    pop {r0,r1,r2}
 1609 0d18 7047     	    _RET 
 1610              	
 1611              	/*****************************
 1612              	   clear_basic 
 1613              	   reset BASIC system variables 
 1614              	   and clear variables and RAM 
 1615              	*****************************/
ARM GAS  tinyBasic.s 			page 49


 1616 0d1a 00BF     	    _FUNC clear_basic
 1617 0d1c 80EA0000 	  	eor r0,r0
 1618 0d20 2064     	    str r0,[UPP,#FLAGS] 
 1619 0d22 6060     	    str r0,[UPP,#COUNT]
 1620 0d24 2060     	    str r0,[UPP,#IN_SAVED]
 1621 0d26 A060     	    str r0,[UPP,#BASICPTR]
 1622 0d28 E060     	    str r0,[UPP,#DATAPTR]
 1623 0d2a 2061     	    str r0,[UPP,#DATA]
 1624 0d2c 6061     	    str r0,[UPP,#DATALEN]
 1625 0d2e 04F1E000 	    add r0,UPP,#BASIC_START 
 1626 0d32 00F11000 	    add r0,#16 
 1627 0d36 6FF00F01 	    mvn r1,#15
 1628 0d3a 00EA0100 	    and r0,r1 
 1629 0d3e 2063     	    str r0,[UPP,#TXTBGN]
 1630 0d40 6063     	    str r0,[UPP,#TXTEND]
 1631 0d42 C4F8E000 	    str r0,[UPP,#HERE]
 1632 0d46 00B5FFF7 	    _CALL clear_vars
 1632      DAFF5DF8 
 1632      04EB
 1633 0d50 206B     	    ldr r0,[UPP,#TXTBGN]
 1634 0d52 DFF83C10 	    ldr r1,tib 
 1635 0d56 82EA0202 	    eor r2,r2 
 1636 0d5a 40F8042B 	1:  str r2,[r0],#4
 1637 0d5e 8842     	    cmp r0,r1 
 1638 0d60 FBD4     	    bmi 1b 
 1639 0d62 7047     	    _RET  
 1640              	
 1641              	/***********************************
 1642              	   warm_init 
 1643              	   initialize interpreter context 
 1644              	  input:
 1645              	    none
 1646              	  output:
 1647              	    none 
 1648              	  use:
 1649              	    r0 
 1650              	***********************************/
 1651              	warm_init:
 1652              	// reset data stack       
 1653 0d64 DFF824C0 	    ldr DP,dstack 
 1654 0d68 4FF0000A 	    mov IN,#0 // BASIC line index 
 1655 0d6c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1656 0d70 80EA0000 	    eor r0,r0 
 1657 0d74 6060     	    str r0,[UPP,#COUNT]  
 1658 0d76 2064     	    str r0,[UPP,#FLAGS]
 1659 0d78 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1660 0d7a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1661 0d7e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1662 0d80 4FF00A00 	    mov r0,#10 // default base decimal 
 1663 0d84 A061     	    str r0,[UPP,#BASE]
 1664 0d86 7047     	    _RET  
 1665              	
 1666 0d88 00000000 	mstack: .word _mstack 
 1667 0d8c 00000000 	dstack: .word _dstack 
 1668 0d90 00000000 	tib: .word _tib 
 1669 0d94 00000000 	pad: .word _pad 
 1670 0d98 FCFFFFFF 	array: .word _pad - 4 
ARM GAS  tinyBasic.s 			page 50


 1671 0d9c 0A524541 	ready: .asciz "\nREADY" 
 1671      445900
 1672              	
 1673              	/**********************************
 1674              	    warm_start 
 1675              	    start BASIC interpreter doesn't  
 1676              	    reset variables and code space 
 1677              	  input:
 1678              	    none 
 1679              	  output:
 1680              	    none 
 1681              	**********************************/
 1682 0da3 00       	    _GBL_FUNC warm_start 
 1683              	// initialise parameters stack
 1684 0da4 FFF7DEFF 	    bl warm_init
 1685              	// reset main stack 
 1686 0da8 5FF82400 	    ldr r0,mstack
 1687 0dac 8546     	    mov sp,r0 
 1688 0dae DFF83404 	    ldr r0,=ready 
 1689 0db2 00B5FFF7 	    _CALL uart_puts 
 1689      FEFF5DF8 
 1689      04EB
 1690              	// fall in cmd_line 
 1691              	
 1692              	/**********************************
 1693              	   cmd_line 
 1694              	   shell command line 
 1695              	   input:
 1696              	      none 
 1697              	   output:
 1698              	      none 
 1699              	   use:
 1700              	
 1701              	***********************************/
 1702              	    _FUNC cmd_line 
 1703 0dbc 00B5FFF7 	    _CALL cr
 1703      FEFF5DF8 
 1703      04EB
 1704 0dc6 80EA0000 	    eor r0,r0 
 1705 0dca C4F8DC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1706 0dce 5FF84000 	1:  ldr r0,tib
 1707 0dd2 4FF05001 	    mov r1,#TIB_SIZE 
 1708 0dd6 00B5FFF7 	    _CALL readln 
 1708      FEFF5DF8 
 1708      04EB
 1709 0de0 0940     	    ands r1,r1 // empty line 
 1710 0de2 F4D0     	    beq 1b 
 1711 0de4 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1711      E7FA5DF8 
 1711      04EB
 1712 0dee EED0     	    beq 1b  // tokens stored in text area 
 1713              	// interpret tokenized line 
 1714              	    .global interpreter 
 1715              	    .type interpreter, %function 
 1716              	interpreter:
 1717 0df0 00B500F0 	  _CALL next_token 
 1717      27F85DF8 
ARM GAS  tinyBasic.s 			page 51


 1717      04EB
 1718 0dfa 0228     	  cmp r0,#2
 1719 0dfc 3FF5FEAF 	  bmi interpreter    
 1720 0e00 1A28     	  cmp r0,#TK_LABEL 
 1721 0e02 3FF4FEAF 	  beq interpreter 
 1722 0e06 1728     	  cmp r0,#TK_CMD 
 1723 0e08 04D1     	  bne 2f
 1724 0e0a 0846     	  mov r0,r1 
 1725 0e0c 00F016F8 	  bl execute  
 1726 0e10 FFF7FEBF 	  b interpreter   
 1727              	2: 
 1728 0e14 1428     	  cmp r0,#TK_VAR 
 1729 0e16 06D1     	  bne 3f 
 1730 0e18 00B500F0 	  _CALL let_var 
 1730      EBFB5DF8 
 1730      04EB
 1731 0e22 FFF7FEBF 	  b interpreter 
 1732              	3: 
 1733 0e26 0C28     	  cmp r0,#TK_ARRAY 
 1734 0e28 06D1     	  bne 4f
 1735 0e2a 00B500F0 	  _CALL let_array 
 1735      F1FB5DF8 
 1735      04EB
 1736 0e34 FFF7FEBF 	  b interpreter
 1737              	4: 
 1738 0e38 12E6     	  b syntax_error
 1739              	
 1740              	/*****************************
 1741              	    execute 
 1742              	    execute a BASIC routine from 
 1743              	    its token value 
 1744              	  input:
 1745              	    r0  BASIC SUB|FUNC token  
 1746              	  output: 
 1747              	    depend on SUB|FUNc
 1748              	*****************************/
 1749 0e3a 00BF     	    _FUNC execute 
 1750 0e3c EA49     	    ldr r1,=fn_table 
 1751 0e3e 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1752 0e42 0047     	    bx r0 
 1753              	
 1754              	/*************************************
 1755              	  next_token 
 1756              	  extract next token from token list 
 1757              	  input:
 1758              	    none 
 1759              	  output:
 1760              	    r0    token attribute
 1761              	    r1    token value if there is one 
 1762              	  use:
 1763              	    T1    exit token type  
 1764              	****************************/
 1765              	    _FUNC next_token 
 1766 0e44 6068     	    ldr r0,[UPP,#COUNT]
 1767 0e46 8245     	    cmp IN,r0 
 1768 0e48 11D4     	    bmi 0f
 1769              	// reached end of line skip to next one 
ARM GAS  tinyBasic.s 			page 52


 1770 0e4a 8344     	    add BPTR,r0 // next line 
 1771 0e4c 606B     	    ldr r0,[UPP,#TXTEND]
 1772 0e4e 8345     	    cmp BPTR,r0 
 1773 0e50 7FF5FEAF 	    bpl warm_start // end of program
 1774 0e54 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1775 0e58 6060     	    str r0,[UPP,#COUNT] 
 1776 0e5a 4FF0030A 	    mov IN,#3
 1777 0e5e 00B5FFF7 	    _CALL show_trace
 1777      C4F95DF8 
 1777      04EB
 1778 0e68 80EA0000 	    eor r0,r0
 1779 0e6c 7047     	    _RET 
 1780              	0: 
 1781 0e6e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1782 0e72 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1783 0e76 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1784 0e7a 0AF1010A 	    add IN,#1  
 1785 0e7e 1328     	    cmp r0,#TK_CHAR 
 1786 0e80 1AD4     	    bmi 9f // these tokens have no value  
 1787 0e82 1828     	    cmp r0,#TK_SCONST 
 1788 0e84 04D5     	    bpl 1f
 1789              	    // tokens with .byte value 
 1790 0e86 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1791 0e8a 0AF1010A 	    add IN,#1 
 1792 0e8e 7047     	    _RET  
 1793 0e90 1C28     	1:  cmp r0,#TK_QSTR 
 1794 0e92 0DD1     	    bne 2f 
 1795 0e94 0BEB0A01 	    add r1,BPTR,IN
 1796 0e98 0846     	    mov r0,r1 
 1797 0e9a 00B5FFF7 	    _CALL strlen 
 1797      FEFF5DF8 
 1797      04EB
 1798 0ea4 8244     	    add IN,r0 
 1799 0ea6 0AF1010A 	    add IN,#1
 1800 0eaa 4FF01C00 	    mov r0,#TK_QSTR 
 1801 0eae 7047     	    _RET  
 1802              	2:  // .word value 
 1803 0eb0 5BF80A10 	    ldr r1,[BPTR,IN] 
 1804 0eb4 0AF1040A 	    add IN,#4 
 1805 0eb8 7047     	9:  _RET
 1806              	
 1807              	
 1808              	/*********************************
 1809              	    expect 
 1810              	    check if next token is of 
 1811              	    expected type. If not 
 1812              	    call syntax_error  
 1813              	  input:
 1814              	      r0   token attribute
 1815              	  output:
 1816              	      r0  token attribute 
 1817              	      r1  token value
 1818              	  use:
 1819              	      T1   
 1820              	**********************************/
 1821 0eba 00BF     	    _FUNC expect 
 1822 0ebc 4DF8048D 	    push {T1}
ARM GAS  tinyBasic.s 			page 53


 1823 0ec0 8046     	    mov T1,r0 
 1824 0ec2 00B5FFF7 	    _CALL next_token 
 1824      BEFF5DF8 
 1824      04EB
 1825 0ecc 4045     	    cmp r0,T1  
 1826 0ece 7FF4C7AD 	    bne syntax_error 
 1827 0ed2 5DF8048B 	    pop {T1}
 1828 0ed6 7047     	    _RET 
 1829              	
 1830              	/***********************************
 1831              	    func_args 
 1832              	    get function arguments list 
 1833              	  input:
 1834              	    r0    required arguments count  
 1835              	  output:
 1836              	    r0    arg. count 
 1837              	  use:
 1838              	
 1839              	************************************/
 1840              	    _FUNC func_args 
 1841 0ed8 0346     	    mov r3,r0 
 1842 0eda 4FF00500 	    mov r0,#TK_LPAREN 
 1843 0ede 00B5FFF7 	    _CALL expect
 1843      ECFF5DF8 
 1843      04EB
 1844 0ee8 1846     	    mov r0,r3  
 1845 0eea 00B500F0 	    _CALL arg_list 
 1845      0CF85DF8 
 1845      04EB
 1846 0ef4 01B4     	    push {r0}
 1847 0ef6 4FF00600 	    mov r0,#TK_RPAREN 
 1848 0efa 00B5FFF7 	    _CALL expect 
 1848      DEFF5DF8 
 1848      04EB
 1849 0f04 01BC     	    pop {r0}
 1850 0f06 7047     	    _RET 
 1851              	
 1852              	/**********************************
 1853              	    arg_list 
 1854              	    get arguments list on dstack 
 1855              	  input:
 1856              	    r0  required arguments count  
 1857              	  output:
 1858              	    r0    arg count
 1859              	  use:
 1860              	    T1    tmp count  
 1861              	***********************************/
 1862              	    _FUNC arg_list 
 1863 0f08 4DF8048D 	    push {T1}
 1864 0f0c 88EA0808 	    eor T1,T1
 1865 0f10 0346     	    mov r3,r0 // required count  
 1866 0f12 00B500F0 	1:  _CALL expression 
 1866      C0F85DF8 
 1866      04EB
 1867 0f1c 1B28     	    cmp R0,#TK_INTGR  
 1868 0f1e 0AD1     	    bne 2f
 1869 0f20 4CF8041D 	    _PUSH r1 
ARM GAS  tinyBasic.s 			page 54


 1870 0f24 08F10108 	    add T1,#1 
 1871 0f28 00B5FFF7 	    _CALL next_token 
 1871      8BFF5DF8 
 1871      04EB
 1872 0f32 0228     	    cmp r0,#TK_COMMA 
 1873 0f34 EDD0     	    beq 1b 
 1874 0f36 D4F800A0 	2:  _UNGET_TOKEN 
 1874      D4F808B0 
 1875 0f3e 4046     	9:  mov r0,T1
 1876 0f40 9842     	    cmp r0,r3 
 1877 0f42 3FF58DAD 	    bmi syntax_error 
 1878 0f46 5DF8048B 	    pop {T1}
 1879 0f4a 7047     	    _RET 
 1880              	
 1881              	
 1882              	/***********************************
 1883              	 factor
 1884              	 arithmetick factor parser 
 1885              	 factor ::= ['+'|'-'|e]  var | @ |
 1886              				 integer | function |
 1887              				 '('expression')' 
 1888              	  input: 
 1889              	    none
 1890              	  output:
 1891              	    r0   token attribute 
 1892              	    r1   token value 
 1893              	  use:
 1894              	    r2   temp 
 1895              	    r3   sign 
 1896              	***********************************/
 1897              	    _FUNC factor 
 1898 0f4c 0CB4     	    push {r2,r3}
 1899 0f4e 00B5FFF7 	    _CALL next_token
 1899      78FF5DF8 
 1899      04EB
 1900 0f58 4FF00103 	    mov r3,#1 // default sign +  
 1901 0f5c 0828     	    cmp r0,#TK_MINUS  
 1902 0f5e 06D1     	    bne 1f 
 1903 0f60 4FF0FF33 	    mov r3,#-1 // minus sign 
 1904 0f64 00B5FFF7 	0:  _CALL next_token
 1904      6DFF5DF8 
 1904      04EB
 1905 0f6e 1B28     	1:  cmp r0,#TK_INTGR 
 1906 0f70 55D0     	    beq 8f 
 1907 0f72 0C28     	    cmp r0,#TK_ARRAY 
 1908 0f74 1DD1     	    bne 2f 
 1909 0f76 4FF00500 	    mov r0,#TK_LPAREN 
 1910 0f7a 00B5FFF7 	    _CALL expect 
 1910      9EFF5DF8 
 1910      04EB
 1911 0f84 00B500F0 	    _CALL expression
 1911      87F85DF8 
 1911      04EB
 1912 0f8e 1B28     	    cmp r0,#TK_INTGR
 1913 0f90 7FF466AD 	    bne syntax_error
 1914 0f94 0A46     	    mov r2,r1  
 1915 0f96 4FF00600 	    mov r0,#TK_RPAREN
ARM GAS  tinyBasic.s 			page 55


 1916 0f9a 00B5FFF7 	    _CALL expect 
 1916      8EFF5DF8 
 1916      04EB
 1917 0fa4 1046     	    mov r0,r2 
 1918 0fa6 00B500F0 	    _CALL get_array_element 
 1918      E2F85DF8 
 1918      04EB
 1919 0fb0 35E0     	    b 8f
 1920 0fb2 0528     	2:  cmp r0,#TK_LPAREN 
 1921 0fb4 13D1     	    bne 3f 
 1922 0fb6 00B500F0 	    _CALL expression 
 1922      6EF85DF8 
 1922      04EB
 1923 0fc0 1B28     	    cmp r0,#TK_INTGR 
 1924 0fc2 7FF44DAD 	    bne syntax_error
 1925 0fc6 0A46     	    mov r2,r1   
 1926 0fc8 4FF00600 	    mov r0,#TK_RPAREN
 1927 0fcc 00B5FFF7 	    _CALL expect 
 1927      75FF5DF8 
 1927      04EB
 1928 0fd6 1146     	    mov r1,r2 
 1929 0fd8 4FF01B00 	    mov r0,#TK_INTGR
 1930 0fdc 1FE0     	    b 8f       
 1931 0fde 1428     	3:  cmp r0,#TK_VAR 
 1932 0fe0 06D1     	    bne 4f
 1933 0fe2 0846     	    mov r0,r1  
 1934 0fe4 00B500F0 	    _CALL get_var 
 1934      D7F85DF8 
 1934      04EB
 1935 0fee 16E0     	    b 8f 
 1936 0ff0 1528     	4:  cmp r0,#TK_IFUNC 
 1937 0ff2 06D1     	    bne 6f 
 1938 0ff4 0846     	5:  mov r0,r1  
 1939 0ff6 00B5FFF7 	    _CALL execute
 1939      20FF5DF8 
 1939      04EB
 1940 1000 0DE0     	    b 8f 
 1941 1002 1A28     	6:  cmp r0,#TK_LABEL
 1942 1004 07D1     	    bne 7f 
 1943 1006 41F00040 	    orr r0,r1,#(1<<31) 
 1944 100a 00B5FFF7 	    _CALL search_const
 1944      46F95DF8 
 1944      04EB
 1945 1014 03E0     	    b 8f 
 1946 1016 1828     	7:  cmp r0,#TK_SCONST 
 1947 1018 03D1     	    bne 9f 
 1948 101a 4FF01B00 	    mov r0,#TK_INTGR
 1949 101e 03FB01F1 	8:  mul r1,r3 
 1950 1022 0CBC     	9:  pop {r2,r3}   
 1951 1024 7047     	    _RET 
 1952              	
 1953              	
 1954              	/*****************************************
 1955              	    term 
 1956              	    term parser 
 1957              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1958              	    output:
ARM GAS  tinyBasic.s 			page 56


 1959              	      r0  	token attribute 
 1960              	      r1		integer
 1961              	    use:
 1962              	      r2    first factor 
 1963              	      r3    operator *|/|%
 1964              	******************************************/
 1965 1026 00BF     	    _FUNC term 
 1966 1028 00B5FFF7 	    _CALL factor
 1966      8FFF5DF8 
 1966      04EB
 1967 1032 1B28     	    cmp r0,#TK_INTGR
 1968 1034 00D0     	    beq 0f 
 1969 1036 7047     	    _RET // not a factor    
 1970 1038 0CB4     	0:  push {r2,r3}
 1971 103a 0A46     	    mov r2,r1 // first factor    
 1972 103c 00B5FFF7 	0:  _CALL next_token
 1972      01FF5DF8 
 1972      04EB
 1973 1046 0346     	    mov r3,r0  // operator 
 1974 1048 0928     	    cmp r0,TK_MULT
 1975 104a 01D4     	    bmi 1f 
 1976 104c 0C28     	    cmp r0,#TK_MOD+1
 1977 104e 06D4     	    bmi 2f
 1978 1050 D4F800A0 	1:  _UNGET_TOKEN
 1978      D4F808B0 
 1979 1058 4FF01B00 	    mov r0,#TK_INTGR
 1980 105c 19E0     	    b 9f 
 1981 105e 00B5FFF7 	2:  _CALL factor
 1981      74FF5DF8 
 1981      04EB
 1982 1068 1B28     	    cmp r0,#TK_INTGR
 1983 106a 7FF4F9AC 	    bne syntax_error 
 1984 106e 092B     	    cmp r3,#TK_MULT
 1985 1070 02D1     	    bne 3f 
 1986              	// multiplication
 1987 1072 01FB02F2 	    mul r2,r1
 1988 1076 E1E7     	    b 0b  
 1989 1078 0A2B     	3:  cmp r3,#TK_DIV 
 1990 107a 02D1     	    bne 4f
 1991              	// division
 1992 107c 92FBF1F2 	    sdiv r2,r2,r1
 1993 1080 DCE7     	    b 0b  
 1994              	4: // modulo
 1995 1082 1046     	    mov r0,r2 
 1996 1084 92FBF1F2 	    sdiv r2,r2,r1 
 1997 1088 01FB02F2 	    mul  r2,r1 
 1998 108c A0EB0202 	    sub  r2,r0,r2
 1999 1090 D4E7     	    b 0b  
 2000 1092 1146     	9:  mov r1,r2 
 2001 1094 0CBC     	    pop {r2,r3}
 2002 1096 7047     	    _RET 
 2003              	
 2004              	/*****************************************
 2005              	    expression 
 2006              	    arithmetic expression parser 
 2007              	    expression ::= term [['+'|'-'] term]*
 2008              	    result range {-32768..32767}
ARM GAS  tinyBasic.s 			page 57


 2009              	    output:
 2010              	      r0    TK_NONE || TK_INTGR 
 2011              	      r1 	  integer
 2012              	    use:
 2013              	      r2  left term 
 2014              	      r3  operator +|-
 2015              	******************************************/
 2016              	    _FUNC expression 
 2017 1098 00B5FFF7 	    _CALL term 
 2017      C5FF5DF8 
 2017      04EB
 2018 10a2 1B28     	    cmp r0,#TK_INTGR 
 2019 10a4 00D0     	    beq 0f 
 2020 10a6 7047     	    _RET   
 2021 10a8 0CB4     	0:  push {r2,r3}
 2022 10aa 0A46     	    mov r2,r1 // first term
 2023 10ac 00B5FFF7 	1:  _CALL next_token 
 2023      C9FE5DF8 
 2023      04EB
 2024 10b6 0346     	    mov r3,r0 //  +|-
 2025 10b8 0728     	    cmp r0,#TK_PLUS 
 2026 10ba 08D0     	    beq 3f 
 2027 10bc 0828     	    cmp r0,#TK_MINUS  
 2028 10be 06D0     	    beq 3f
 2029 10c0 D4F800A0 	    _UNGET_TOKEN 
 2029      D4F808B0 
 2030 10c8 4FF01B00 	    mov r0,#TK_INTGR
 2031 10cc 0EE0     	    b 9f 
 2032 10ce 00B5FFF7 	3:  _CALL term 
 2032      AAFF5DF8 
 2032      04EB
 2033 10d8 1B28     	    cmp r0,#TK_INTGR 
 2034 10da 7FF4C1AC 	    bne syntax_error 
 2035 10de 072B     	    cmp r3,#TK_PLUS 
 2036 10e0 02D0     	    beq 4f 
 2037 10e2 A2EB0102 	    sub r2,r1 // term1-term2  
 2038 10e6 E1E7     	    b 1b 
 2039 10e8 0A44     	4:  add r2,r1 // term1+term2
 2040 10ea DFE7     	    b 1b
 2041 10ec 1146     	9:  mov r1,r2 
 2042 10ee 0CBC     	    pop {r2,r3}
 2043 10f0 7047     	    _RET 
 2044              	
 2045              	
 2046              	/**********************************************
 2047              	    relation
 2048              	    rel ::= expr1 rel_op expr2
 2049              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2050              	    relation return  integer , zero is false 
 2051              	    output:
 2052              	        r0	TK_INTGR  
 2053              	        r1	integer 
 2054              	    use:
 2055              	        r2   first operand 
 2056              	        r3   relop   
 2057              	**********************************************/
 2058 10f2 00BF     	    _FUNC relation 
ARM GAS  tinyBasic.s 			page 58


 2059 10f4 0CB4     	    push {r2,r3}
 2060 10f6 00B5FFF7 	    _CALL expression 
 2060      CEFF5DF8 
 2060      04EB
 2061 1100 1B28     	    cmp r0,#TK_INTGR 
 2062 1102 7FF4ADAC 	    bne syntax_error 
 2063 1106 0A46     	    mov r2,r1  // first operand  
 2064 1108 00B5FFF7 	    _CALL next_token 
 2064      9BFE5DF8 
 2064      04EB
 2065 1112 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2066 1116 0D28     	    cmp r0,#TK_EQUAL 
 2067 1118 1DD4     	    bmi 8f 
 2068 111a 1328     	    cmp r0,#TK_NE+1
 2069 111c 1BD5     	    bpl 8f 
 2070 111e 00B5FFF7 	    _CALL expression 
 2070      BAFF5DF8 
 2070      04EB
 2071 1128 1B28     	    cmp r0,#TK_INTGR 
 2072 112a 7FF499AC 	    bne syntax_error 
 2073 112e 8A42     	    cmp r2,r1 // compare operands  
 2074 1130 4FF0FF31 	    mov r1,#-1 
 2075 1134 2D4A     	    ldr r2,=relop_jmp
 2076 1136 D2E803F0 	    tbb [r2,r3]    
 2077              	rel_idx0:
 2078              	rel_eq:
 2079 113a 11D0     	    beq 9f 
 2080 113c 08E0     	    b rel_false
 2081              	rel_gt:
 2082 113e 0FDC     	    bgt 9f  
 2083 1140 06E0     	    b rel_false  
 2084              	rel_ge:
 2085 1142 0DDA     	    bge 9f  
 2086 1144 04E0     	    b rel_false  
 2087              	rel_lt: 
 2088 1146 0BDB     	    blt 9f   
 2089 1148 02E0     	    b rel_false 
 2090              	rel_le:
 2091 114a 09DD     	    ble 9f  
 2092 114c 00E0     	    b rel_false 
 2093              	rel_ne:
 2094 114e 07D1     	    bne 9f 
 2095              	rel_false:    
 2096 1150 81EA0101 	    eor r1,r1  // false
 2097 1154 04E0     	    b 9f  
 2098 1156 D4F800A0 	8:  _UNGET_TOKEN 
 2098      D4F808B0 
 2099 115e 1146     	    mov r1,r2    
 2100 1160 4FF01B00 	9:  mov r0,#TK_INTGR
 2101 1164 0CBC     	    pop {r2,r3}
 2102 1166 7047     	    _RET 
 2103              	
 2104              	
 2105              	relop_jmp: 
 2106 1168 00       	  .byte 0 // =  
 2107 1169 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2108 116a 06       	  .byte (rel_lt-rel_idx0)/2 // <
ARM GAS  tinyBasic.s 			page 59


 2109 116b 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2110 116c 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2111 116d 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2112              	
 2113              	
 2114              	/***********************************
 2115              	    get_array_element
 2116              	    return value of @(n)
 2117              	  input:
 2118              	    r0    indice 
 2119              	  output:
 2120              	    r0   TK_INTGR
 2121              	    r1   value  
 2122              	************************************/
 2123 116e 00BF     	    _FUNC get_array_element 
 2124 1170 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 2125 1174 4FEA8000 	    lsl r0,#2 
 2126 1178 C0EB0100 	    rsb r0,r1 
 2127 117c 0168     	    ldr r1,[r0]
 2128 117e 4FF01B00 	    mov r0,#TK_INTGR 
 2129 1182 7047     	    _RET 
 2130              	
 2131              	
 2132              	/***********************************
 2133              	    set_array_element 
 2134              	    set value of array element 
 2135              	  input:
 2136              	    r0   index 
 2137              	    r1   new value 
 2138              	  output:
 2139              	    none
 2140              	  use:
 2141              	    r2    array pointer 
 2142              	**********************************/
 2143              	    _FUNC set_array_element 
 2144 1184 04B4     	    push {r2}
 2145 1186 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 2146 118a 4FEA8000 	    lsl r0,#2 
 2147 118e A1EB0001 	    sub r1,r0 
 2148 1192 0960     	    str r1,[r1]
 2149 1194 04BC     	    pop {r2}
 2150 1196 7047     	    _RET 
 2151              	
 2152              	/***********************************
 2153              	   get_var 
 2154              	   get variable value 
 2155              	  input:
 2156              	     r0    variable index {0..25}
 2157              	  output:
 2158              	     r0    TK_INTGR
 2159              	     r1    value 
 2160              	**********************************/
 2161              	    _FUNC get_var 
 2162 1198 04F17001 	    add r1,UPP,#VARS
 2163 119c 4FEA8000 	    lsl r0,#2 
 2164 11a0 0958     	    ldr r1,[r1,r0]
 2165 11a2 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 60


 2166 11a6 7047     	    _RET 
 2167              	
 2168              	/*********************************
 2169              	    set_var 
 2170              	    set variable value 
 2171              	  input:
 2172              	     r0    variable index {0..25}
 2173              	     r1    new value 
 2174              	  output:
 2175              	    none 
 2176              	  use:
 2177              	    r2   vars pointer 
 2178              	*********************************/
 2179              	    _FUNC set_var 
 2180 11a8 04B4     	    push {r2}
 2181 11aa 04F17002 	    add r2,UPP,#VARS
 2182 11ae 4FEA8000 	    lsl r0,#2
 2183 11b2 1150     	    str r1,[r2,r0]
 2184 11b4 04BC     	    pop {r2}
 2185 11b6 7047     	    _RET 
 2186              	
 2187              	/******************************
 2188              	    CONSTANTS data
 2189              	******************************/
 2190              	
 2191              	  .section .rodata 
 2192              	
 2193              	// system variables initial value 
 2194              	uzero:
 2195 0000 00000000 	  .space 60*4, 0  // IRQ BASIC vectors 
 2195      00000000 
 2195      00000000 
 2195      00000000 
 2195      00000000 
 2196 00f0 00000000 	  .word 0 // IN_SAVED
 2197 00f4 00000000 	  .word 0 // COUNT
 2198 00f8 00000000 	  .word 0 // BASICPTR
 2199 00fc 00000000 	  .word 0 // DATAPTR
 2200 0100 00000000 	  .word 0 // DATA
 2201 0104 00000000 	  .word 0 // DATALEN
 2202 0108 0A000000 	  .word 10 // BASE
 2203 010c 00000000 	  .word 0 // TICKS
 2204 0110 00000000 	  .word 0 // TIMER
 2205 0114 AA5555AA 	  .word 0xaa5555aa // SEED
 2206 0118 00000000 	  .word FILE_SYSTEM // FSPTR
 2207 011c 00000000 	  .word 0 // FSFREE
 2208 0120 00000000 	  .word 0 // TXTBGN
 2209 0124 00000000 	  .word 0 // TXTEND
 2210 0128 00000000 	  .word 0 //LOOP_DEPTH
 2211 012c 00000000 	  .word 0 // ARRAY_SIZE
 2212 0130 00000000 	  .word 0 // FLAGS
 2213 0134 04000000 	  .word 4 // TAB_WIDTH
 2214 0138 00000000 	  .word 0 // RX_HEAD
 2215 013c 00000000 	  .word 0 // RX_TAIL
 2216 0140 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2216      00000000 
 2216      00000000 
ARM GAS  tinyBasic.s 			page 61


 2216      00000000 
 2217 0150 00000000 	  .word 0 // U2_RX_QUEUE 
 2218 0154 00000000 	  .word 0 // U2_COUNT 
 2219 0158 00000000 	  .word 0 // U3_RX_QUEUE
 2220 015c 00000000 	  .word 0 // U3_COUNT  
 2221 0160 00000000 	  .space VARS_SIZE,0 // VARS
 2221      00000000 
 2221      00000000 
 2221      00000000 
 2221      00000000 
 2222 01c8 00000000 	  .word _pad  // ARRAY_ADR 
 2223 01cc 00000000 	  .word 0 // TRACE_LEVEL 
 2224 01d0 00000000 	  .word 0 // HERE 
 2225              	ulast:
 2226              	
 2227              	  .section .rodata.dictionary 
 2228              	
 2229              	// keep alphabetic order for BASIC names from Z-A
 2230              	// this sort order is for for WORDS cmd output. 	
 2231              	  .type kword_end, %object
 2232              		.equ link, 0
 2233              	kword_end:
 2234 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2234      00000000 
 2234      00000000 
 2234      00000000 
 2235 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2235      67000000 
 2235      15000000 
 2235      59504F53 
 2235      00000000 
 2236 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2236      66000000 
 2236      15000000 
 2236      58504F53 
 2236      00000000 
 2237 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2237      65000000 
 2237      15000000 
 2237      584F5200 
 2238 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2238      64000000 
 2238      17000000 
 2238      574F5244 
 2238      53000000 
 2239 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2239      63000000 
 2239      17000000 
 2239      57414954 
 2239      00000000 
 2240 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2240      62000000 
 2240      17000000 
 2240      554E5449 
 2240      4C000000 
 2241 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2241      61000000 
ARM GAS  tinyBasic.s 			page 62


 2241      15000000 
 2241      55464C41 
 2241      53480000 
 2242 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2242      60000000 
 2242      15000000 
 2242      55424F55 
 2242      4E440000 
 2243 00ac A4000000 	  _dict_entry TK_CMD,UART_PUTC,UART_PUTC_IDX // ser_putc 
 2243      5F000000 
 2243      17000000 
 2243      55415254 
 2243      5F505554 
 2244 00c4 B8000000 	  _dict_entry TK_CMD,UART_INIT,UART_INIT_IDX // ser_init
 2244      5E000000 
 2244      17000000 
 2244      55415254 
 2244      5F494E49 
 2245 00dc D0000000 	  _dict_entry TK_IFUNC,UART_GETC,UART_GETC_IDX //ser_getc
 2245      5D000000 
 2245      15000000 
 2245      55415254 
 2245      5F474554 
 2246 00f4 E8000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2246      5C000000 
 2246      17000000 
 2246      54524143 
 2246      45000000 
 2247 0108 00010000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2247      5B000000 
 2247      17000000 
 2247      544F4E45 
 2247      5F494E49 
 2248 0120 14010000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2248      5A000000 
 2248      17000000 
 2248      544F4E45 
 2248      00000000 
 2249 0134 2C010000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2249      59000000 
 2249      17000000 
 2249      544F0000 
 2250 0144 40010000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2250      57000000 
 2250      17000000 
 2250      54494D45 
 2250      52000000 
 2251 0158 50010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2251      58000000 
 2251      15000000 
 2251      54494D45 
 2251      4F555400 
 2252 016c 64010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2252      56000000 
 2252      15000000 
 2252      5449434B 
 2252      53000000 
ARM GAS  tinyBasic.s 			page 63


 2253 0180 78010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2253      55000000 
 2253      17000000 
 2253      5448454E 
 2253      00000000 
 2254 0194 8C010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2254      54000000 
 2254      17000000 
 2254      54414200 
 2255 01a4 A0010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2255      53000000 
 2255      17000000 
 2255      53544F52 
 2255      45000000 
 2256 01b8 B0010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2256      52000000 
 2256      17000000 
 2256      53544F50 
 2256      00000000 
 2257 01cc C4010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2257      51000000 
 2257      17000000 
 2257      53544550 
 2257      00000000 
 2258 01e0 D8010000 	  _dict_entry TK_CMD,SPI_WRITE,SPI_WRITE_IDX // spi_write 
 2258      50000000 
 2258      17000000 
 2258      5350495F 
 2258      57524954 
 2259 01f8 EC010000 	  _dict_entry TK_CMD,SPI_SEL,SPI_SELECT_IDX // spi_select
 2259      4F000000 
 2259      17000000 
 2259      5350495F 
 2259      53454C00 
 2260 020c 04020000 	  _dict_entry TK_IFUNC,SPI_READ,SPI_READ_IDX // spi_read
 2260      4E000000 
 2260      15000000 
 2260      5350495F 
 2260      52454144 
 2261 0224 18020000 	  _dict_entry TK_CMD,SPI_INIT,SPI_INIT_IDX // spi_init 
 2261      4D000000 
 2261      17000000 
 2261      5350495F 
 2261      494E4954 
 2262 023c 30020000 	  _dict_entry TK_CMD,SPI_DSEL,SPI_DSEL_IDX // spi_deselect 
 2262      4C000000 
 2262      17000000 
 2262      5350495F 
 2262      4453454C 
 2263 0254 48020000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2263      4B000000 
 2263      17000000 
 2263      53504300 
 2264 0264 60020000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2264      4A000000 
 2264      17000000 
 2264      534C4545 
ARM GAS  tinyBasic.s 			page 64


 2264      50000000 
 2265 0278 70020000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2265      49000000 
 2265      17000000 
 2265      53455256 
 2265      4F5F504F 
 2266 0290 84020000 	  _dict_entry TK_CMD,SERVO_OFF,SERVO_OFF_IDX, // servo_off 
 2266      48000000 
 2266      17000000 
 2266      53455256 
 2266      4F5F4F46 
 2267 02a8 9C020000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2267      47000000 
 2267      17000000 
 2267      53455256 
 2267      4F5F494E 
 2268 02c0 B4020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2268      46000000 
 2268      17000000 
 2268      53415645 
 2268      00000000 
 2269 02d4 CC020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2269      45000000 
 2269      17000000 
 2269      52554E00 
 2270 02e4 E0020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2270      44000000 
 2270      15000000 
 2270      52534849 
 2270      46540000 
 2271 02f8 F0020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2271      43000000 
 2271      15000000 
 2271      524E4400 
 2272 0308 04030000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2272      42000000 
 2272      17000000 
 2272      52455455 
 2272      524E0000 
 2273 031c 14030000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2273      41000000 
 2273      17000000 
 2273      52455354 
 2273      4F524500 
 2274 0330 28030000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2274      40000000 
 2274      17000000 
 2274      52454D00 
 2275 0340 3C030000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2275      3F000000 
 2275      15000000 
 2275      52454144 
 2275      00000000 
 2276 0354 4C030000 	  _dict_entry TK_CMD,RANDOMIZE,RANDOMIZE_IDX // randomize 
 2276      3E000000 
 2276      17000000 
 2276      52414E44 
ARM GAS  tinyBasic.s 			page 65


 2276      4F4D495A 
 2277 036c 60030000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2277      3D000000 
 2277      15000000 
 2277      514B4559 
 2277      00000000 
 2278 0380 78030000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2278      3C000000 
 2278      17000000 
 2278      50555400 
 2279 0390 8C030000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2279      3B000000 
 2279      17000000 
 2279      50555348 
 2279      00000000 
 2280 03a4 9C030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2280      3A000000 
 2280      17000000 
 2280      5052494E 
 2280      54000000 
 2281 03b8 B0030000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2281      39000000 
 2281      15000000 
 2281      504F5000 
 2282 03c8 C4030000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2282      38000000 
 2282      17000000 
 2282      504F4B45 
 2282      57000000 
 2283 03dc D4030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2283      37000000 
 2283      17000000 
 2283      504F4B45 
 2283      48000000 
 2284 03f0 E8030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2284      36000000 
 2284      17000000 
 2284      504F4B45 
 2284      42000000 
 2285 0404 FC030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2285      32000000 
 2285      17000000 
 2285      504D4F44 
 2285      45000000 
 2286 0418 10040000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2286      35000000 
 2286      15000000 
 2286      5045454B 
 2286      57000000 
 2287 042c 24040000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2287      34000000 
 2287      15000000 
 2287      5045454B 
 2287      48000000 
 2288 0440 38040000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2288      33000000 
 2288      15000000 
ARM GAS  tinyBasic.s 			page 66


 2288      5045454B 
 2288      42000000 
 2289 0454 4C040000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2289      31000000 
 2289      17000000 
 2289      50415553 
 2289      45000000 
 2290 0468 60040000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2290      30000000 
 2290      15000000 
 2290      50414400 
 2291 0478 74040000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2291      01000000 
 2291      18000000 
 2291      4F555450 
 2291      55545F50 
 2292 0490 84040000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2292      06000000 
 2292      18000000 
 2292      4F555450 
 2292      55545F4F 
 2293 04a8 9C040000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2293      0A000000 
 2293      18000000 
 2293      4F555450 
 2293      55545F41 
 2294 04c0 B4040000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2294      0E000000 
 2294      18000000 
 2294      4F555450 
 2294      55545F41 
 2295 04d8 CC040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2295      2F000000 
 2295      17000000 
 2295      4F555400 
 2296 04e8 E4040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2296      2E000000 
 2296      15000000 
 2296      4F520000 
 2297 04f8 F4040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2297      2D000000 
 2297      15000000 
 2297      4E4F5400 
 2298 0508 04050000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2298      2C000000 
 2298      17000000 
 2298      4E455854 
 2298      00000000 
 2299 051c 14050000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2299      2B000000 
 2299      17000000 
 2299      4E455700 
 2300 052c 28050000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2300      2A000000 
 2300      15000000 
 2300      4C534849 
 2300      46540000 
ARM GAS  tinyBasic.s 			page 67


 2301 0540 38050000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2301      29000000 
 2301      17000000 
 2301      4C4F4341 
 2301      54450000 
 2302 0554 4C050000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2302      28000000 
 2302      17000000 
 2302      4C4F4144 
 2302      00000000 
 2303 0568 60050000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2303      27000000 
 2303      17000000 
 2303      4C495354 
 2303      00000000 
 2304 057c 74050000 	  _dict_entry TK_CMD,LET,LET_IDX //let
 2304      26000000 
 2304      17000000 
 2304      4C455400 
 2305 058c 88050000 	  _dict_entry TK_CMD,IRET,IRET_IDX // isr_exit 
 2305      25000000 
 2305      17000000 
 2305      49524554 
 2305      00000000 
 2306 05a0 98050000 	  _dict_entry TK_CMD,ISR_INIT,ISR_INIT_IDX // isr_init 
 2306      24000000 
 2306      17000000 
 2306      4953525F 
 2306      494E4954 
 2307 05b8 AC050000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2307      23000000 
 2307      16000000 
 2307      4B455900 
 2308 05c8 C4050000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2308      22000000 
 2308      15000000 
 2308      494E5645 
 2308      52540000 
 2309 05dc D4050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2309      11000000 
 2309      18000000 
 2309      494E5055 
 2309      545F5055 
 2310 05f4 E8050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2310      10000000 
 2310      18000000 
 2310      494E5055 
 2310      545F5044 
 2311 060c 00060000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2311      04000000 
 2311      18000000 
 2311      494E5055 
 2311      545F464C 
 2312 0624 18060000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2312      00000000 
 2312      18000000 
 2312      494E5055 
ARM GAS  tinyBasic.s 			page 68


 2312      545F414E 
 2313 063c 30060000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2313      21000000 
 2313      17000000 
 2313      494E5055 
 2313      54000000 
 2314 0650 48060000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2314      20000000 
 2314      15000000 
 2314      494E0000 
 2315 0660 5C060000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2315      1F000000 
 2315      17000000 
 2315      49460000 
 2316 0670 6C060000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2316      1E000000 
 2316      17000000 
 2316      48455800 
 2317 0680 7C060000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2317      00100140 
 2317      18000000 
 2317      4750494F 
 2317      43000000 
 2318 0694 8C060000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2318      000C0140 
 2318      18000000 
 2318      4750494F 
 2318      42000000 
 2319 06a8 A0060000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2319      00080140 
 2319      18000000 
 2319      4750494F 
 2319      41000000 
 2320 06bc B4060000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2320      1D000000 
 2320      17000000 
 2320      474F544F 
 2320      00000000 
 2321 06d0 C8060000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2321      1C000000 
 2321      17000000 
 2321      474F5355 
 2321      42000000 
 2322 06e4 DC060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2322      1B000000 
 2322      15000000 
 2322      47455400 
 2323 06f4 F0060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2323      1A000000 
 2323      15000000 
 2323      46524545 
 2323      00000000 
 2324 0708 00070000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2324      19000000 
 2324      17000000 
 2324      464F5247 
 2324      45540000 
ARM GAS  tinyBasic.s 			page 69


 2325 071c 14070000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2325      18000000 
 2325      17000000 
 2325      464F5200 
 2326 072c 28070000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2326      17000000 
 2326      17000000 
 2326      45524153 
 2326      45000000 
 2327 0740 38070000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2327      16000000 
 2327      17000000 
 2327      454E4400 
 2328 0750 4C070000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2328      15000000 
 2328      17000000 
 2328      44554D50 
 2328      00000000 
 2329 0764 5C070000 	  _dict_entry TK_CMD,DSTACK,DSTACK_IDX // show_data_stack 
 2329      14000000 
 2329      17000000 
 2329      44535441 
 2329      434B0000 
 2330 0778 70070000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2330      13000000 
 2330      17000000 
 2330      44524F50 
 2330      00000000 
 2331 078c 84070000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2331      12000000 
 2331      17000000 
 2331      444F0000 
 2332 079c 98070000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2332      11000000 
 2332      17000000 
 2332      44495200 
 2333 07ac A8070000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2333      10000000 
 2333      17000000 
 2333      44454300 
 2334 07bc B8070000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2334      0F000000 
 2334      17000000 
 2334      44415441 
 2334      00000000 
 2335 07d0 C8070000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2335      0E000000 
 2335      17000000 
 2335      434F4E53 
 2335      54000000 
 2336 07e4 DC070000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2336      0D000000 
 2336      17000000 
 2336      434C5300 
 2337 07f4 F0070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2337      0C000000 
 2337      16000000 
ARM GAS  tinyBasic.s 			page 70


 2337      43484152 
 2337      00000000 
 2338 0808 00080000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2338      0B000000 
 2338      17000000 
 2338      42544F47 
 2338      4C000000 
 2339 081c 14080000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2339      0A000000 
 2339      15000000 
 2339      42544553 
 2339      54000000 
 2340 0830 28080000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2340      09000000 
 2340      17000000 
 2340      42534554 
 2340      00000000 
 2341 0844 3C080000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2341      08000000 
 2341      17000000 
 2341      42524553 
 2341      00000000 
 2342 0858 50080000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2342      07000000 
 2342      15000000 
 2342      42495400 
 2343 0868 64080000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2343      06000000 
 2343      17000000 
 2343      41575500 
 2344 0878 74080000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX // autorun 
 2344      05000000 
 2344      17000000 
 2344      4155544F 
 2344      52554E00 
 2345 088c 84080000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2345      04000000 
 2345      15000000 
 2345      41534300 
 2346 089c 98080000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2346      03000000 
 2346      15000000 
 2346      414E4400 
 2347 08ac A8080000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2347      02000000 
 2347      17000000 
 2347      41444300 
 2348 08bc B8080000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2348      01000000 
 2348      15000000 
 2348      414E4100 
 2349              	first_link: 
 2350 08cc C8080000 	  .word LINK 
 2351 08d0 00000000 	  .word ABS_IDX 
 2352 08d4 15000000 	  .word TK_IFUNC
 2353              	kword_dict: // first name field 
 2354              	  .equ LINK,. 
ARM GAS  tinyBasic.s 			page 71


 2355 08d8 41425300 	  .asciz "ABS" 
 2356              	  .p2align 2 
 2357              	
 2358              	    .section .rodata.fn_tabld 
 2359              	
 2360              	//comands and fonctions address table
 2361              	  .type fn_table, %object
 2362              	fn_table:
 2363 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,autorun,awu,bitmask 
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2364 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2365 003c 00000000 		.word skip_line,dec_base,directory,do_loop,drop,show_data_stack,dump
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2366 0058 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2367 0078 00000000 		.word hex_base,if,pin_input,input_var,invert,key,isr_init,isr_exit 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2368 0098 00000000 		.word let,list,load,locate,lshift,new,next
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2369 00b4 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370 00d8 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2370      00000000 
 2370      00000000 
 2370      00000000 
 2370      00000000 
 2371 00f4 00000000 		.word qkey,randomize,read,skip_line
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2372 0104 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_off,servo_pos 
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2372      00000000 
ARM GAS  tinyBasic.s 			page 72


 2373 0128 00000000 		.word sleep,spc,spi_deselect,spi_init,spi_read,spi_select,spi_write,step,stop,store,tab
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2374 0154 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2375 0174 00000000 	  .word ser_getc,ser_init,ser_putc,ubound,uflash,until
 2375      00000000 
 2375      00000000 
 2375      00000000 
 2375      00000000 
 2376 018c 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2377 01a0 00000000 		.word 0 
 2378              	
 2379              	
 2380              	/**********************************
 2381              	    BASIC commands and functions 
 2382              	**********************************/
 2383              	
 2384              	    .section .text.basic , "ax", %progbits 
 2385              	
 2386              	
 2387              	/*******************************
 2388              	  BASIC:  ABS expr 
 2389              	  input:
 2390              	    none 
 2391              	  output:
 2392              	    r0    token type 
 2393              	    r1    abs(expr)
 2394              	  use:
 2395              	    none 
 2396              	******************************/
 2397              	    _FUNC abs 
 2398 0000 4FF00100 	    mov r0,#1
 2399 0004 00B5FFF7 	    _CALL arg_list
 2399      FEFF5DF8 
 2399      04EB
 2400 000e 5CF8041B 	    _POP r1 
 2401 0012 11F0004F 	    tst r1,#(1<<31)
 2402 0016 01D0     	    beq 9f
 2403 0018 C1F10001 	    rsb r1,#0 
 2404 001c 4FF01B00 	9:  mov r0,#TK_INTGR
 2405 0020 7047     	   _RET 
 2406              	
 2407              	/*************************************
 2408              	  BASIC: ANA(pin)
 2409              	  read analog input 
 2410              	*************************************/
 2411 0022 00BF     	    _FUNC analog_read
ARM GAS  tinyBasic.s 			page 73


 2412 0024 4FF00100 	    mov r0,#1
 2413 0028 00B5FFF7 	    _CALL func_args
 2413      FEFF5DF8 
 2413      04EB
 2414 0032 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2414      C4F20101 
 2415 003a 5CF8042B 	    _POP r2 // channel
 2416 003e 02F01F02 	    and r2,#31
 2417 0042 4A63     	    str r2,[r1,#ADC_SQR3]
 2418              	// start conversion 
 2419 0044 8868     	    ldr r0,[r1,#ADC_CR2]
 2420 0046 8860     	    str r0,[r1,#ADC_CR2]
 2421              	adc_loop:
 2422 0048 0868     	    ldr r0,[R1,#ADC_SR]
 2423 004a 10F0020F 	    tst r0,#2 // EOC bit test 
 2424 004e FBD0     	    beq adc_loop
 2425 0050 C96C     	    ldr r1,[r1,#ADC_DR]
 2426 0052 4FF01B00 	    mov r0,#TK_INTGR    
 2427 0056 7047     	    _RET
 2428              	
 2429              	/***********************************
 2430              	  BASIC: ADC 1|0
 2431              	  enable|disable analog digital converter 
 2432              	  freq -> of conversion
 2433              	*****************************************/
 2434              	    _FUNC adc 
 2435 0058 4FF00100 	    mov r0,#1
 2436 005c 00B5FFF7 	    _CALL arg_list 
 2436      FEFF5DF8 
 2436      04EB
 2437 0066 5CF8041B 	    _POP r1 
 2438 006a E9B1     	1:  cbz r1,adc_off 
 2439              	adc_on:
 2440 006c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2440      C4F20201 
 2441 0074 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2442 0076 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2443 007a 8861     	    str r0,[r1,#RCC_APB2ENR]
 2444 007c 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2444      C4F20101 
 2445 0084 4FF00100 	    _MOV32 r0,1+(1<<23)
 2445      C0F28100 
 2446 008c 8860     	    str r0,[r1,#ADC_CR2]
 2447 008e 42F21070 	    mov r0,#10000
 2448 0092 0138     	1:  subs r0,#1
 2449 0094 FDD1     	    bne 1b 
 2450              	    // calibration
 2451 0096 8868     	    ldr r0,[r1,#ADC_CR2]  
 2452 0098 40F00400 	    orr r0,#(1<<2) // CAL bit 
 2453 009c 8860     	    str r0,[r1,#ADC_CR2]
 2454 009e 8868     	1:  ldr r0,[r1,#ADC_CR2]
 2455 00a0 10F0040F 	    tst r0,#(1<<2)
 2456 00a4 FBD1     	    bne 1b     
 2457 00a6 7047     	    _RET 
 2458              	adc_off:
 2459 00a8 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2459      C4F20101 
ARM GAS  tinyBasic.s 			page 74


 2460 00b0 80EA0000 	    eor r0,r0 
 2461 00b4 8860     	    str r0,[r1,#ADC_CR2]
 2462 00b6 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2462      C4F20201 
 2463 00be 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2464 00c0 6FF00902 	    mvn r2,#9 
 2465 00c4 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2466 00c8 8861     	    str r0,[r1,#RCC_APB2ENR]
 2467 00ca 7047     	    _RET 
 2468              	
 2469              	
 2470              	/************************************
 2471              	  BASIC: AND(expr1,expr2)
 2472              	  logical ANND bit to between expr1,expr2
 2473              	************************************/
 2474              	    _FUNC bit_and
 2475 00cc 4FF00200 	    mov r0,#2 
 2476 00d0 00B5FFF7 	    _CALL func_args 
 2476      FEFF5DF8 
 2476      04EB
 2477 00da 5CF8040B 	    _POP r0 
 2478 00de 5CF8041B 	    _POP r1 
 2479 00e2 01EA0001 	    and r1,r0 
 2480 00e6 4FF01B00 	    mov r0,#TK_INTGR
 2481 00ea 7047     	    _RET
 2482              	
 2483              	/*******************************************
 2484              	  BASIC: ASC(string|char)
 2485              	  return ASCII code of char of first char 
 2486              	  of string 
 2487              	*******************************************/
 2488              	    _FUNC ascii
 2489 00ec 4FF00500 	    mov r0,#TK_LPAREN 
 2490 00f0 00B5FFF7 	    _CALL expect 
 2490      FEFF5DF8 
 2490      04EB
 2491 00fa 00B5FFF7 	    _CALL next_token 
 2491      FEFF5DF8 
 2491      04EB
 2492 0104 1C28     	    cmp r0,#TK_QSTR
 2493 0106 0AD0     	    beq 2f 
 2494 0108 1328     	    cmp r0,#TK_CHAR 
 2495 010a 00D1     	    bne 1f  
 2496 010c 08E0     	    b 9f
 2497 010e 1628     	1:  cmp r0,#TK_CFUNC 
 2498 0110 0846     	    mov r0,r1 
 2499 0112 00B5FFF7 	    _CALL execute
 2499      FEFF5DF8 
 2499      04EB
 2500 011c 00E0     	    b 9f      
 2501 011e 0978     	2:  ldrb r1,[r1]
 2502 0120 4CF8041D 	9:  _PUSH r1 
 2503 0124 4FF00600 	    mov r0,#TK_RPAREN 
 2504 0128 00B5FFF7 	    _CALL expect 
 2504      FEFF5DF8 
 2504      04EB
 2505 0132 4FF01B00 	    mov r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 75


 2506 0136 5CF8041B 	    _POP r1 
 2507 013a 7047     	    _RET
 2508              	
 2509              	/*******************************************
 2510              	  BASIC: AWU time_sleep  
 2511              	  enable LSI and IWDG and place MCU in 
 2512              	  deep sleep. IDWG wakeup MCU 
 2513              	******************************************/
 2514              	    _FUNC awu
 2515 013c 4FF00100 	    mov r0,#1
 2516 0140 00B5FFF7 	    _CALL arg_list
 2516      FEFF5DF8 
 2516      04EB
 2517 014a 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2517      C4F20201 
 2518 0152 486A     	    ldr r0,[r1,#RCC_CSR]
 2519              	// enable LSI 
 2520 0154 80F00100 	    eor r0,#1
 2521 0158 4862     	    str r0,[r1,#RCC_CSR]
 2522              	// wait for LSIRDY 
 2523 015a 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2524 015c 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2525 0160 FBD0     	    beq 1b 
 2526              	// configure IWDG
 2527              	// compute values for IWDG_PR and IWDG_RLR 
 2528 0162 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2529 0166 4FF00A03 	    mov r3,#10
 2530 016a 03FB02F2 	    mul r2,r3 // milliseconds adjustment
 2531 016e 4FF6FF73 	    _MOV32 r3,0x3ffff 
 2531      C0F20303 
 2532 0176 02EA0302 	    and r2,r3 // r2 limit=0x3ffff
 2533 017a 83EA0303 	    eor r3,r3
 2534 017e B2F5805F 	2:  cmp r2,#4096 
 2535 0182 04D4     	    bmi 3f 
 2536 0184 4FEA5202 	    lsr r2,#1 
 2537 0188 03F10103 	    add r3,#1
 2538 018c F7E7     	    b 2b
 2539              	// initialize IWDG      
 2540 018e 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2540      C4F20001 
 2541 0196 45F25550 	    mov r0,0x5555 // enable register writing
 2542 019a 0860     	    str r0,[r1,#IWDG_KR]
 2543 019c 4B60     	    str r3,[r1,#IWDG_PR]
 2544 019e 8A60     	    str r2,[r1,#IWDG_RLR]
 2545 01a0 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2546 01a4 0860     	    str r0,[r1,#IWDG_KR]
 2547 01a6 01F013B9 	    b sleep // place MCU in deep sleep
 2548 01aa 7047     	    _RET
 2549              	
 2550              	/********************************************
 2551              	  BASIC: BIT(expr)
 2552              	  expr must be between 0..31 and is used 
 2553              	  to create 1 bit mask at that position
 2554              	*******************************************/
 2555              	    _FUNC bitmask
 2556 01ac 4FF00100 	    mov r0,#1
 2557 01b0 00B5FFF7 	    _CALL func_args
ARM GAS  tinyBasic.s 			page 76


 2557      FEFF5DF8 
 2557      04EB
 2558 01ba 5CF8040B 	    _POP r0
 2559 01be 4FF00101 	    mov r1,#1
 2560 01c2 01FA00F1 	    lsl r1,r0 
 2561 01c6 4FF01B00 	9:  mov r0,#TK_INTGR
 2562 01ca 7047     	    _RET 
 2563              	
 2564              	  
 2565              	  /*********************************
 2566              	   BASIC: BRES adr, mask   
 2567              	   reset bits [adr]= [adr] & ~mask  
 2568              	   input:
 2569              	     none 
 2570              	    output;
 2571              	      none 
 2572              	    use:
 2573              	      T1   temp
 2574              	      T2   temp 
 2575              	*******************************/     
 2576              	    _FUNC bit_reset
 2577 01cc 4FF00200 	    mov r0,#2
 2578 01d0 00B5FFF7 	    _CALL arg_list 
 2578      FEFF5DF8 
 2578      04EB
 2579 01da 5CF8041B 	    _POP r1 //mask 
 2580 01de 5CF8040B 	    _POP r0 //address 
 2581 01e2 D0F80090 	    ldr T2,[r0] 
 2582 01e6 81F0FF31 	    eor r1,#-1 // ~mask 
 2583 01ea 01EA0901 	    and r1,T2
 2584 01ee 0160     	    str r1,[r0]
 2585 01f0 7047     	    _RET  
 2586              	
 2587              	
 2588              	/*********************************
 2589              	   BASIC: BSET adr, mask   
 2590              	   set bits [adr]= [adr] | mask  
 2591              	   input:
 2592              	      none 
 2593              	    output;
 2594              	      none 
 2595              	    use:
 2596              	      T1   temp
 2597              	      T2   temp  
 2598              	*******************************/     
 2599 01f2 00BF     	    _FUNC bit_set
 2600 01f4 4FF00200 	    mov r0,#2
 2601 01f8 00B5FFF7 	    _CALL arg_list 
 2601      FEFF5DF8 
 2601      04EB
 2602 0202 5CF8041B 	    _POP r1 //mask 
 2603 0206 5CF8040B 	    _POP r0 //address 
 2604 020a D0F80090 	    ldr T2,[r0] 
 2605 020e 41EA0901 	    orr r1,T2
 2606 0212 0160     	    str r1,[r0]
 2607 0214 7047     	    _RET 
 2608              	
ARM GAS  tinyBasic.s 			page 77


 2609              	  /*********************************
 2610              	   BASIC: BTOGL adr, mask   
 2611              	   reset bits [adr]= [adr] & ~mask  
 2612              	   input:
 2613              	     r0    adr 
 2614              	     r1    mask 
 2615              	    output;
 2616              	      none 
 2617              	    use:
 2618              	      T1   temp
 2619              	      T2   temp  
 2620              	*******************************/     
 2621 0216 00BF     	    _FUNC bit_toggle
 2622 0218 4FF00200 	    mov r0,#2
 2623 021c 00B5FFF7 	    _CALL arg_list 
 2623      FEFF5DF8 
 2623      04EB
 2624 0226 5CF8041B 	    _POP r1 //mask 
 2625 022a 5CF8040B 	    _POP r0 //address 
 2626 022e D0F80090 	    ldr T2,[r0] 
 2627 0232 81EA0901 	    eor r1,T2
 2628 0236 0160     	    str r1,[r0]
 2629 0238 7047     	    _RET  
 2630              	
 2631              	/********************************
 2632              	  BASIC: BTEST(addr,bit)
 2633              	  return bit state at address
 2634              	********************************/
 2635 023a 00BF     	    _FUNC bit_test
 2636 023c 4FF00200 	    mov r0,#2 
 2637 0240 00B5FFF7 	    _CALL func_args
 2637      FEFF5DF8 
 2637      04EB
 2638 024a 5CF8041B 	    _POP r1
 2639 024e 4FF00100 	    mov r0,#1
 2640 0252 01F01F01 	    and r1,#31  
 2641 0256 21B1     	1:  cbz r1, 2f
 2642 0258 4FEA4000 	    lsl r0,#1
 2643 025c A1F10101 	    sub r1,#1
 2644 0260 F9E7     	    b 1b 
 2645 0262 5CF8041B 	2:  _POP r1
 2646 0266 0968     	    ldr r1,[r1]
 2647 0268 01EA0001 	    and r1,r0 
 2648 026c 09B1     	    cbz r1,9f 
 2649 026e 4FF00101 	    mov r1,#1
 2650 0272 4FF01B00 	9:  mov r0,#TK_INTGR    
 2651 0276 7047     	    _RET 
 2652              	
 2653              	/********************************
 2654              	  BASIC: CLS 
 2655              	  clear terminal screen move cursor 
 2656              	  home 
 2657              	************************************/
 2658              	    _FUNC cls 
 2659 0278 00B5FFF7 	    _CALL clear_screen
 2659      FEFF5DF8 
 2659      04EB
ARM GAS  tinyBasic.s 			page 78


 2660 0282 7047     	    _RET 
 2661              	
 2662              	/*********************************
 2663              	  BASIC: CHAR(expr)
 2664              	  convert expr in character 
 2665              	********************************/
 2666              	    _FUNC char
 2667 0284 4FF00100 	    mov r0,#1
 2668 0288 00B5FFF7 	    _CALL func_args
 2668      FEFF5DF8 
 2668      04EB
 2669 0292 5CF8041B 	    _POP r1 
 2670 0296 01F07F01 	    and r1,#127 
 2671 029a 4FF01300 	    mov r0,#TK_CHAR
 2672 029e 7047     	    _RET 
 2673              	
 2674              	/**********************************
 2675              	  BASIC: CONST label=expr [,!label=expr]
 2676              	  define constants constants are 
 2677              	  store at end of BASIC code.
 2678              	  use:
 2679              	    T1   *location 
 2680              	    T2   *bound 
 2681              	*********************************/
 2682              	    _FUNC const
 2683 02a0 206C10F0 	    _RTO 
 2683      010F03D1 
 2683      4FF00700 
 2683      FFF7FEBF 
 2684 02b0 D4F8E080 	    ldr T1,[UPP,#HERE]
 2685 02b4 DFF83897 	    ldr T2,pad_adr  
 2686 02b8 C845     	1:  cmp T1,T2 
 2687 02ba 03D4     	    bmi 2f 
 2688 02bc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2689 02c0 FFF7FEBF 	    b tb_error 
 2690 02c4 00B5FFF7 	2:  _CALL next_token 
 2690      FEFF5DF8 
 2690      04EB
 2691 02ce 1A28     	    cmp r0,#TK_LABEL 
 2692 02d0 7FF4FEAF 	    bne syntax_error 
 2693 02d4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2694 02d8 4CF8041D 	    _PUSH r1 
 2695 02dc 4FF00D00 	    mov r0,#TK_EQUAL
 2696 02e0 00B5FFF7 	    _CALL expect
 2696      FEFF5DF8 
 2696      04EB
 2697 02ea 00B5FFF7 	    _CALL expression  
 2697      FEFF5DF8 
 2697      04EB
 2698 02f4 1B28     	    cmp r0,#TK_INTGR
 2699 02f6 7FF4FEAF 	    bne syntax_error
 2700 02fa 5CF8040B 	    _POP r0 
 2701 02fe 48F8040B 	    str r0,[T1],#4
 2702 0302 48F8041B 	    str r1,[T1],#4 
 2703 0306 C4F8E080 	    str T1,[UPP,#HERE]
 2704 030a 00B5FFF7 	    _CALL next_token
 2704      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 79


 2704      04EB
 2705 0314 0228     	    cmp r0,#TK_COMMA 
 2706 0316 CFD0     	    beq 1b 
 2707 0318 D4F800A0 	    _UNGET_TOKEN
 2707      D4F808B0 
 2708              	9:  
 2709 0320 7047     	    _RET 
 2710              	
 2711              	/*****************************
 2712              	  BASIC: READ 
 2713              	  read next data item 
 2714              	  the value can be assigned to
 2715              	  variable or used in expression
 2716              	*****************************/
 2717 0322 00BF     	    _FUNC read
 2718 0324 206C10F0 	    _RTO
 2718      010F03D1 
 2718      4FF00700 
 2718      FFF7FEBF 
 2719 0334 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2720 0336 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2721 0338 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2722 033a 8242     	    cmp r2,r0
 2723 033c 18D0     	    beq seek_next
 2724 033e 4FF00103 	1:  mov r3,#1 
 2725 0342 885C     	    ldrb r0,[r1,r2]
 2726 0344 02F10102 	    add r2,#1
 2727 0348 0028     	    cmp r0,#TK_NONE
 2728 034a 11D0     	    beq seek_next
 2729 034c 0828     	    cmp r0,#TK_MINUS 
 2730 034e 05D1     	    bne 2f 
 2731 0350 4FF0FF33 	    mov r3,#-1
 2732 0354 885C     	    ldrb r0,[r1,r2]
 2733 0356 02F10102 	    add r2,#1
 2734 035a 01E0     	    b 3f  
 2735 035c 0228     	2:  cmp r0,#TK_COMMA
 2736 035e EED0     	    beq 1b  
 2737 0360 1B28     	3:  cmp r0,#TK_INTGR 
 2738 0362 7FF4FEAF 	    bne syntax_error  
 2739 0366 8958     	    ldr r1,[r1,r2]
 2740 0368 02F10402 	    add r2,#4
 2741 036c 2261     	    str r2,[UPP,#DATA]
 2742 036e 12E0     	    b 9f  
 2743              	seek_next: // is next line data ?
 2744 0370 8878     	    ldrb r0,[R1,#2]
 2745 0372 0144     	    add r1,r0 
 2746 0374 C878     	    ldrb r0,[R1,#3]
 2747 0376 1728     	    cmp r0,#TK_CMD
 2748 0378 09D1     	    bne 2f 
 2749 037a 0879     	    ldrb r0,[r1,#4]
 2750 037c 0F28     	    cmp r0,#DATA_IDX 
 2751 037e 06D1     	    bne 2f 
 2752 0380 E160     	    str r1,[UPP,#DATAPTR]
 2753 0382 8878     	    ldrb r0,[r1,#2]
 2754 0384 6061     	    str  r0,[UPP,#DATALEN]
 2755 0386 4FF00502 	    mov r2,#5 
 2756 038a 2261     	    str r2,[UPP,#DATA]
ARM GAS  tinyBasic.s 			page 80


 2757 038c D7E7     	    b 1b 
 2758 038e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2759 0392 FFF7FEBF 	    b tb_error 
 2760 0396 7047     	9:  _RET 
 2761              	
 2762              	/********************************
 2763              	  BASIC: RESTORE [line#]
 2764              	  set data pointer to first data line 
 2765              	  or a specified line number 
 2766              	********************************/
 2767              	    _FUNC restore
 2768 0398 206C10F0 	    _RTO 
 2768      010F03D1 
 2768      4FF00700 
 2768      FFF7FEBF 
 2769 03a8 00B5FFF7 	    _CALL next_token 
 2769      FEFF5DF8 
 2769      04EB
 2770 03b2 1B28     	    cmp r0,#TK_INTGR 
 2771 03b4 05D0     	    beq 0f 
 2772 03b6 D4F800A0 	    _UNGET_TOKEN
 2772      D4F808B0 
 2773 03be 4FF00001 	    mov r1,#0 
 2774 03c2 40F61773 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2775 03c6 0A46     	    mov r2,r1 
 2776 03c8 216B     	    ldr r1,[UPP,#TXTBGN]
 2777 03ca D4F83480 	    ldr T1,[UPP,#TXTEND]
 2778 03ce 4145     	1:  cmp r1,T1 
 2779 03d0 11D5     	    bpl no_data_line 
 2780 03d2 B1F80300 	    ldrh r0,[r1,#3]
 2781 03d6 9842     	    cmp r0,r3 
 2782 03d8 0AD1     	    bne try_next_line
 2783              	// this is a data line
 2784 03da 12B1     	    cbz r2,2f 
 2785 03dc 0888     	    ldrh r0,[r1]
 2786 03de 9042     	    cmp r0,r2 
 2787 03e0 06D1     	    bne try_next_line
 2788 03e2 E160     	2:  str r1,[UPP,#DATAPTR]
 2789 03e4 8878     	    ldrb r0,[r1,#2]
 2790 03e6 6061     	    str r0,[UPP,#DATALEN]
 2791 03e8 4FF00500 	    mov r0,#5 
 2792 03ec 2061     	    str r0,[UPP,#DATA]
 2793 03ee 07E0     	    b 9f
 2794              	try_next_line:
 2795 03f0 8878     	    ldrb r0,[r1,#2]
 2796 03f2 0144     	    add r1,r0 
 2797 03f4 EBE7     	    b 1b 
 2798              	no_data_line:
 2799 03f6 80EA0000 	    eor r0,r0 
 2800 03fa E060     	    str r0,[UPP,#DATAPTR]
 2801 03fc 2061     	    str r0,[UPP,#DATA]
 2802 03fe 6061     	    str r0,[UPP,#DATALEN]
 2803 0400 7047     	9:  _RET 
 2804              	
 2805              	/***********************************
 2806              	  BASIC: DEC 
 2807              	  switch base to decimal 
ARM GAS  tinyBasic.s 			page 81


 2808              	***********************************/
 2809 0402 00BF     	    _FUNC dec_base
 2810 0404 4FF00A00 	    mov r0,#10
 2811 0408 A061     	    str r0,[UPP,#BASE]
 2812 040a 7047     	    _RET 
 2813              	
 2814              	/***************************************
 2815              	  BASIC: DO 
 2816              	  initialize a DO..UNTIL loop 
 2817              	***************************************/
 2818              	    _FUNC do_loop
 2819 040c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2820 0410 7047     	    _RET 
 2821              	
 2822              	
 2823              	/****************************************
 2824              	  BASIC: DUMP adr, count 
 2825              	    command line only  
 2826              	    print memory content in hexadecimal 
 2827              	    16 bytes per row 
 2828              	    ouput:
 2829              	      none 
 2830              	    use:
 2831              	      r2   byte counter  
 2832              	****************************************/
 2833 0412 00BF     	    _FUNC dump 
 2834 0414 206C10F0 	    _CLO 
 2834      010F03D0 
 2834      4FF00700 
 2834      FFF7FEBF 
 2835 0424 4FF00200 	    mov r0,#2
 2836 0428 00B5FFF7 	    _CALL arg_list 
 2836      FEFF5DF8 
 2836      04EB
 2837 0432 5CF8042B 	    _POP r2   // count 
 2838 0436 5CF8040B 	    _POP  r0  // adr
 2839              	dump01:
 2840 043a 00B500F0 	    _CALL print_dump_header 
 2840      0CF85DF8 
 2840      04EB
 2841 0444 4FF01001 	1:  mov r1,#16
 2842 0448 00B5FFF7 	    _CALL prt_row 
 2842      FEFF5DF8 
 2842      04EB
 2843 0452 103A     	    subs r2,#16 
 2844 0454 F6D5     	    bpl 1b 
 2845 0456 7047     	    _RET 
 2846              	
 2847              	/********************************
 2848              	   print_dump_header
 2849              	********************************/
 2850              	    _FUNC print_dump_header
 2851 0458 2DE90103 	    push {r0,T1,T2}
 2852 045c 4FF00C00 	    mov r0,#12 
 2853 0460 00B5FFF7 	    _CALL cursor_x 
 2853      FEFF5DF8 
 2853      04EB
ARM GAS  tinyBasic.s 			page 82


 2854 046a 4FF00000 	    mov r0,#0
 2855 046e 4FF01009 	    mov T2,#16
 2856 0472 8046     	1:  mov T1,r0 
 2857 0474 00B5FFF7 	    _CALL print_hex 
 2857      FEFF5DF8 
 2857      04EB
 2858 047e 08F10100 	    add r0,T1,#1  
 2859 0482 4845     	    cmp r0,T2 
 2860 0484 F5D4     	    bmi 1b 
 2861 0486 00B5FFF7 	    _CALL cr
 2861      FEFF5DF8 
 2861      04EB
 2862 0490 4FF03D00 	    mov r0,#'='
 2863 0494 4FF04F08 	    mov T1,#79
 2864 0498 00B5FFF7 	2:  _CALL uart_putc
 2864      FEFF5DF8 
 2864      04EB
 2865 04a2 B8F10108 	    subs T1,#1 
 2866 04a6 F7D1     	    bne 2b     
 2867 04a8 00B5FFF7 	    _CALL cr
 2867      FEFF5DF8 
 2867      04EB
 2868 04b2 BDE80103 	    pop {r0,T1,T2}
 2869 04b6 7047     	    _RET 
 2870              	
 2871              	
 2872              	/*******************************
 2873              	  BASIC: END 
 2874              	  exit program 
 2875              	******************************/ 
 2876              	    _FUNC cmd_end
 2877 04b8 FFF7FEBF 	    b warm_start 
 2878 04bc 7047     	    _RET 
 2879              	
 2880              	/*******************************************
 2881              	  BASIC: STORE adr, value 
 2882              	  write value to user space in flash memory 
 2883              	*********************************************/
 2884 04be 00BF     	    _FUNC store 
 2885 04c0 4FF00200 	    mov r0,#2
 2886 04c4 00B5FFF7 	    _CALL arg_list 
 2886      FEFF5DF8 
 2886      04EB
 2887 04ce BCE80300 	    ldmia DP!,{r0,r1}
 2888 04d2 DFF83420 	    ldr r2,user_space
 2889 04d6 9142     	    cmp r1,r2 
 2890 04d8 03D5     	    bpl 1f 
 2891 04da 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2892 04de FFF7FEBF 	    b tb_error 
 2893 04e2 02F58062 	1:  add r2,#1024 
 2894 04e6 9142     	    cmp r1,r2 
 2895 04e8 F7D5     	    bpl 0b 
 2896 04ea 00B5FFF7 	    _CALL flash_store 
 2896      FEFF5DF8 
 2896      04EB
 2897 04f4 7047     	    _RET 
 2898              	
ARM GAS  tinyBasic.s 			page 83


 2899              	/**************************************************
 2900              	  BASIC: ERASE 
 2901              	  erase user space page 
 2902              	*************************************************/
 2903 04f6 00BF     	    _FUNC erase 
 2904 04f8 DFF80C00 	    ldr r0,user_space 
 2905 04fc 00B5FFF7 	    _CALL erase_page 
 2905      FEFF5DF8 
 2905      04EB
 2906 0506 7047     	    _RET 
 2907 0508 00000000 	user_space: .word user 
 2908              	
 2909              	
 2910              	/**************************************************
 2911              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2912              	  introdure FOR...NEXT loop 
 2913              	**************************************************/
 2914              	    _FUNC for
 2915 050c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2916 0510 4FF00107 	    mov INCR,#1
 2917 0514 00B5FFF7 	    _CALL next_token
 2917      FEFF5DF8 
 2917      04EB
 2918 051e 1428     	    cmp r0,#TK_VAR
 2919 0520 7FF4FEAF 	    bne syntax_error
 2920 0524 02B4     	    push {r1} 
 2921 0526 00B500F0 	    _CALL let_var 
 2921      57F95DF8 
 2921      04EB
 2922 0530 20BC     	    pop {VADR}
 2923 0532 4FEA8505 	    lsl VADR,#2
 2924 0536 2544     	    add VADR,UPP 
 2925 0538 05F17005 	    add VADR,#VARS 
 2926 053c 7047     	    _RET 
 2927              	
 2928              	/***************************************
 2929              	  BASIC: TO expr 
 2930              	  set limit of FOR...NEXT loop 
 2931              	**************************************/
 2932 053e 00BF     	    _FUNC to
 2933 0540 00B5FFF7 	    _CALL expression 
 2933      FEFF5DF8 
 2933      04EB
 2934 054a 1B28     	    cmp r0,#TK_INTGR
 2935 054c 7FF4FEAF 	    bne syntax_error 
 2936 0550 0E46     	    mov LIMIT,r1
 2937              	    // save loop back parameters 
 2938 0552 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2939 0556 7047     	    _RET 
 2940              	
 2941              	/********************************************
 2942              	  BASIC: STEP expr 
 2943              	  set increment for FOR...NEXT loop 
 2944              	********************************************/
 2945              	    _FUNC step
 2946 0558 00B5FFF7 	    _CALL expression 
 2946      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 84


 2946      04EB
 2947 0562 1B28     	    cmp r0,#TK_INTGR
 2948 0564 7FF4FEAF 	    bne syntax_error 
 2949 0568 0F46     	    mov INCR,r1
 2950              	    // replace parameters left by TO
 2951 056a 8CE8000C 	    stmia DP, {IN,BPTR}
 2952 056e 7047     	    _RET 
 2953              	
 2954              	/********************************************
 2955              	  BASIC: NEXT var 
 2956              	  incrment FOR...NEXT loop variable
 2957              	  exit if variable cross LIMIT 
 2958              	********************************************/
 2959              	    _FUNC next
 2960 0570 00B5FFF7 	    _CALL next_token 
 2960      FEFF5DF8 
 2960      04EB
 2961 057a 1428     	    cmp r0,#TK_VAR 
 2962 057c 7FF4FEAF 	    bne syntax_error 
 2963 0580 4FEA8101 	    lsl r1,#2 
 2964 0584 2144     	    add r1,UPP 
 2965 0586 01F17001 	    add r1,#VARS 
 2966 058a A942     	    cmp r1,VADR
 2967 058c 7FF4FEAF 	    bne syntax_error 
 2968 0590 2868     	    ldr r0,[VADR]
 2969 0592 3844     	    add r0,INCR 
 2970 0594 2860     	    str r0,[VADR]
 2971 0596 002F     	    cmp INCR,#0
 2972 0598 02D4     	    bmi 2f
 2973 059a B042     	    cmp r0,LIMIT 
 2974 059c 02DC     	    bgt 8f  
 2975 059e 07E0     	    b 9f  
 2976 05a0 B042     	2:  cmp r0,LIMIT 
 2977 05a2 05DA     	    bge 9f  
 2978              	8: // exit for...next
 2979              	  //  drop branch parameters
 2980 05a4 4FF00800 	    _DROP 2
 2980      8444
 2981              	  // restore outer loop parameters
 2982 05aa BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2983 05ae 7047     	    _RET 
 2984 05b0 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2985 05b4 9BF80200 	    ldrb r0,[BPTR,#2]
 2986 05b8 6060     	    str r0,[UPP,#COUNT]
 2987 05ba 00B5FFF7 	    _CALL show_trace 
 2987      FEFF5DF8 
 2987      04EB
 2988 05c4 7047     	    _RET 
 2989              	
 2990              	
 2991              	/*********************************
 2992              	  BASIC: GOSUB expr 
 2993              	  call a subroutine at line# 
 2994              	*********************************/
 2995 05c6 00BF     	    _FUNC gosub
 2996 05c8 00B5FFF7 	    _CALL search_target 
 2996      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 85


 2996      04EB
 2997 05d2 2DE9000C 	    push {IN,BPTR}
 2998              	target:
 2999 05d6 8346     	    mov BPTR,r0 
 3000 05d8 4FF0030A 	    mov IN,#3 
 3001 05dc 9BF80200 	    ldrb r0,[BPTR,#2]
 3002 05e0 6060     	    str r0,[UPP,#COUNT]
 3003 05e2 00B5FFF7 	    _CALL show_trace 
 3003      FEFF5DF8 
 3003      04EB
 3004 05ec 7047     	    _RET 
 3005              	
 3006              	/**********************************
 3007              	  BASIC: RETURN 
 3008              	  leave a subroutine 
 3009              	*********************************/
 3010 05ee 00BF     	    _FUNC return 
 3011 05f0 BDE8000C 	    pop {IN,BPTR}
 3012 05f4 9BF80200 	    ldrb r0,[BPTR,#2]
 3013 05f8 6060     	    str r0,[UPP,#COUNT]
 3014 05fa 00B5FFF7 	    _CALL show_trace 
 3014      FEFF5DF8 
 3014      04EB
 3015 0604 7047     	    _RET 
 3016              	
 3017              	/**********************************
 3018              	  BASIC: GOTO expr 
 3019              	  go to line # | label 
 3020              	**********************************/
 3021 0606 00BF     	    _FUNC goto
 3022 0608 00B5FFF7 	    _CALL search_target 
 3022      FEFF5DF8 
 3022      04EB
 3023 0612 E0E7     	    b target  
 3024              	
 3025              	/***************************************
 3026              	  BASIC: HEX 
 3027              	  set numeric base to hexadecimal 
 3028              	***************************************/
 3029              	    _FUNC hex_base
 3030 0614 4FF01000 	    mov r0,#16 
 3031 0618 A061     	    str r0,[UPP,#BASE]
 3032 061a 7047     	    _RET 
 3033              	
 3034              	/**********************************************
 3035              	  BASIC: IF relation THEN statement
 3036              	  execute statement only if relation is true
 3037              	*********************************************/
 3038              	    _FUNC if
 3039 061c 00B5FFF7 	    _CALL relation 
 3039      FEFF5DF8 
 3039      04EB
 3040 0626 09B9     	    cbnz r1,9f 
 3041 0628 D4F804A0 	    ldr IN,[UPP,#COUNT]
 3042 062c 7047     	9:  _RET 
 3043              	
 3044              	/*******************************************************
ARM GAS  tinyBasic.s 			page 86


 3045              	  BASIC: THEN statement
 3046              	  statements following THEN are executed if relation is !=0
 3047              	  optional, retained for compatibility.
 3048              	******************************************************/
 3049 062e 00BF     	    _FUNC then 
 3050              	// do nothing 
 3051 0630 7047     	    _RET
 3052              	
 3053              	/****************************************
 3054              	  BASIC: INPUT [string]var [,[string]var]+
 3055              	  prompt user for variable value
 3056              	  use:
 3057              	    r2   
 3058              	    T1   variable indice 
 3059              	***************************************/
 3060 0632 00BF     	     _FUNC input_var
 3061              	//    push {r2,T1}
 3062 0634 00B5FFF7 	1:  _CALL next_token 
 3062      FEFF5DF8 
 3062      04EB
 3063 063e 0228     	    cmp r0,#2
 3064 0640 71D4     	    bmi 8f 
 3065 0642 1C28     	    cmp r0,#TK_QSTR 
 3066 0644 11D1     	    bne 2f 
 3067 0646 0846     	    mov r0,r1
 3068 0648 DFF8E810 	    ldr r1,str_buffer
 3069 064c 00B5FFF7 	    _CALL strcpy
 3069      FEFF5DF8 
 3069      04EB
 3070 0656 4FF01400 	    mov r0,#TK_VAR   
 3071 065a 00B5FFF7 	    _CALL expect 
 3071      FEFF5DF8 
 3071      04EB
 3072 0664 8846     	    mov T1,r1 
 3073 0666 3348     	    ldr r0,str_buffer 
 3074 0668 08E0     	    b 3f 
 3075 066a 1428     	2:  cmp r0,#TK_VAR 
 3076 066c 7FF4FEAF 	    bne syntax_error     
 3077 0670 8846     	    mov T1,r1 
 3078 0672 01F14100 	    add r0,r1,#'A' 
 3079 0676 2F49     	    ldr r1,str_buffer
 3080 0678 0880     	    strh r0,[r1]
 3081 067a 0846     	    mov r0,r1 
 3082 067c 00B5FFF7 	3:  _CALL uart_puts  
 3082      FEFF5DF8 
 3082      04EB
 3083 0686 4FF03D00 	    mov r0,#'='
 3084 068a 00B5FFF7 	    _CALL uart_putc
 3084      FEFF5DF8 
 3084      04EB
 3085 0694 DFF89800 	    ldr r0,input_buffer
 3086 0698 4FF02201 	    mov r1,#34 
 3087 069c 00B5FFF7 	    _CALL readln
 3087      FEFF5DF8 
 3087      04EB
 3088 06a6 79B3     	    cbz r1,6f
 3089 06a8 0178     	    ldrb r1,[r0]
ARM GAS  tinyBasic.s 			page 87


 3090 06aa 01B4     	    push {r0}
 3091 06ac 0846     	    mov r0,r1
 3092 06ae 00B5FFF7 	    _CALL is_letter 
 3092      FEFF5DF8 
 3092      04EB
 3093 06b8 01BC     	    pop {r0}
 3094 06ba 02D1     	    bne 3f 
 3095 06bc 01F05F01 	    and r1,#0x5f // uppercase  
 3096 06c0 24E0     	    b 7f 
 3097 06c2 4FF00102 	3:  mov r2,#1
 3098 06c6 2D29     	    cmp r1,#'-'
 3099 06c8 04D1     	    bne 3f 
 3100 06ca 4FF0FF32 	    mov r2,#-1 
 3101 06ce 00F10100 	    add r0,#1 
 3102 06d2 0DE0     	    b 4f  
 3103 06d4 2429     	3:  cmp r1,#'$'
 3104 06d6 04D1     	    bne 3f 
 3105 06d8 4FF01001 	    mov r1,#16
 3106 06dc 00F10100 	    add r0,#1  
 3107 06e0 08E0     	    b 5f 
 3108 06e2 2629     	3:  cmp r1,#'&' 
 3109 06e4 04D1     	    bne 4f 
 3110 06e6 4FF00201 	    mov r1,#2
 3111 06ea 00F10100 	    add r0,#1 
 3112 06ee 01E0     	    b 5f 
 3113 06f0 4FF00A01 	4:  mov r1,#10 
 3114 06f4 00B5FFF7 	5:  _CALL atoi 
 3114      FEFF5DF8 
 3114      04EB
 3115 06fe 18B9     	    cbnz r0,6f
 3116 0700 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3117 0704 FFF7FEBF 	    b tb_error
 3118 0708 02FB01F1 	6:  mul r1,r2 
 3119 070c 4046     	7:  mov r0,T1 
 3120 070e 00B5FFF7 	    _CALL set_var
 3120      FEFF5DF8 
 3120      04EB
 3121 0718 00B5FFF7 	    _CALL next_token
 3121      FEFF5DF8 
 3121      04EB
 3122 0722 0228     	    cmp r0,#TK_COMMA 
 3123 0724 86D0     	    beq 1b 
 3124 0726 D4F800A0 	8:  _UNGET_TOKEN          
 3124      D4F808B0 
 3125              	9:  // pop {r2,T1}       
 3126 072e 7047     	    _RET 
 3127 0730 00000000 	input_buffer: .word _tib 
 3128 0734 00000000 	str_buffer: .word _pad 
 3129              	
 3130              	
 3131              	/*****************************************
 3132              	  BASIC: INVERT(expr)
 3133              	  return 1's complement of expr
 3134              	****************************************/
 3135              	    _FUNC invert
 3136 0738 4FF00100 	    mov r0,#1
 3137 073c 00B5FFF7 	    _CALL func_args
ARM GAS  tinyBasic.s 			page 88


 3137      FEFF5DF8 
 3137      04EB
 3138 0746 5CF8041B 	    _POP r1  
 3139 074a 6FEA0101 	    mvn r1,r1
 3140 074e 4FF01B00 	    mov r0,#TK_INTGR
 3141 0752 7047     	    _RET 
 3142              	
 3143              	/*************************************
 3144              	  BASIC: KEY 
 3145              	  wait for a character from console
 3146              	*************************************/
 3147              	    _FUNC key
 3148 0754 00B5FFF7 	    _CALL uart_getc
 3148      FEFF5DF8 
 3148      04EB
 3149 075e 0146     	    mov r1,r0
 3150 0760 4FF01300 	    mov r0,#TK_CHAR 
 3151 0764 7047     	    _RET  
 3152              	
 3153              	/*************************************
 3154              	  BASIC: ISR_INIT vector, line# 
 3155              	  initialize an interrupt vector 
 3156              	*************************************/
 3157 0766 00BF     	    _FUNC isr_init
 3158 0768 4FF00200 	    mov r0,#2 
 3159 076c 00B5FFF7 	    _CALL arg_list
 3159      FEFF5DF8 
 3159      04EB
 3160 0776 5CF8040B 	    _POP r0 // line# 
 3161 077a 00B5FFF7 	    _CALL search_lineno
 3161      FEFF5DF8 
 3161      04EB
 3162 0784 19B1     	    cbz r1, 1f 
 3163 0786 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 3164 078a FFF7FEBF 	    b tb_error 
 3165 078e DCF80010 	1:  ldr r1,[DP] // vector 
 3166 0792 3C29     	    cmp r1,#60 
 3167 0794 F7D5     	    bpl 0b // bad vector 
 3168 0796 4FEA8101 	    lsl r1,#2 
 3169 079a 4FF00002 	    _MOV32 r2,RAM_ADR 
 3169      C2F20002 
 3170 07a2 5050     	    str r0,[r2,r1]
 3171 07a4 5CF8040B 	    _POP r0 
 3172 07a8 00B5FFF7 	    _CALL nvic_enable_irq
 3172      FEFF5DF8 
 3172      04EB
 3173 07b2 7047     	    _RET 
 3174              	
 3175              	/*************************************
 3176              	  BASIC: IRET 
 3177              	  exit interrupt routine 
 3178              	*************************************/
 3179              	    _FUNC isr_exit  
 3180 07b4 5DF804EB 	    pop {lr}
 3181 07b8 BDE8000C 	    pop {IN,BPTR}
 3182 07bc 9BF80200 	    ldrb r0,[BPTR,#2]
 3183 07c0 6060     	    str r0,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 89


 3184 07c2 7047     	    _RET 
 3185              	
 3186              	
 3187              	/******************************
 3188              	  BASIC: [LET] var=expr 
 3189              	         [LET] @(expr)=expr
 3190              	  input:
 3191              	    none 
 3192              	  output:
 3193              	    none 
 3194              	  use:
 3195              	
 3196              	****************************/         
 3197              	    _FUNC let
 3198 07c4 00B5FFF7 	    _CALL next_token 
 3198      FEFF5DF8 
 3198      04EB
 3199 07ce 1428     	    cmp r0,#TK_VAR
 3200 07d0 03D0     	    beq let_var 
 3201 07d2 0C28     	    cmp r0,#TK_ARRAY 
 3202 07d4 07D0     	    beq let_array 
 3203 07d6 FFF7FEBF 	    b syntax_error 
 3204              	let_var:
 3205 07da 4FEA8101 	    lsl r1,#2
 3206 07de 04F17000 	    add r0,UPP,#VARS
 3207 07e2 0844     	    add r0,r1
 3208 07e4 1FE0     	    b 1f 
 3209              	let_array: 
 3210 07e6 4FF00500 	    mov r0,#TK_LPAREN
 3211 07ea 00B5FFF7 	    _CALL expect 
 3211      FEFF5DF8 
 3211      04EB
 3212 07f4 00B5FFF7 	    _CALL expression
 3212      FEFF5DF8 
 3212      04EB
 3213 07fe 1B28     	    cmp r0,#TK_INTGR 
 3214 0800 7FF4FEAF 	    bne syntax_error
 3215 0804 4CF8041D 	    _PUSH r1 
 3216 0808 4FF00600 	    mov r0,#TK_RPAREN
 3217 080c 00B5FFF7 	    _CALL expect 
 3217      FEFF5DF8 
 3217      04EB
 3218 0816 5CF8041B 	    _POP r1 
 3219 081a D4F8D800 	    ldr r0,[UPP,#ARRAY_ADR]
 3220 081e 4FEA8101 	    lsl r1,#2 
 3221 0822 A0EB0100 	    sub r0,r1 
 3222 0826 4CF8040D 	1:  _PUSH r0 
 3223 082a 4FF00D00 	    mov r0,#TK_EQUAL 
 3224 082e 00B5FFF7 	    _CALL expect 
 3224      FEFF5DF8 
 3224      04EB
 3225 0838 00B5FFF7 	    _CALL expression   
 3225      FEFF5DF8 
 3225      04EB
 3226 0842 1B28     	    cmp r0,#TK_INTGR
 3227 0844 7FF4FEAF 	    bne syntax_error   
 3228 0848 5CF8040B 	2:  _POP r0 
ARM GAS  tinyBasic.s 			page 90


 3229 084c 0160     	    str r1,[r0]
 3230 084e 7047     	    _RET  
 3231              	
 3232              	/***************************************
 3233              	  BASIC: LIST [[first]-last]
 3234              	  use:
 3235              	    r2   first line# 
 3236              	    r3   last line#
 3237              	    T1   *line 
 3238              	    T2   TXTEND 
 3239              	**************************************/  
 3240              	    _FUNC list
 3241 0850 206C10F0 	    _CLO
 3241      010F03D0 
 3241      4FF00700 
 3241      FFF7FEBF 
 3242 0860 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3243 0864 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3244 0868 B8F80020 	    ldrh r2,[T1]
 3245 086c 4FF6FF73 	    mov r3,#65535 
 3246 0870 00B5FFF7 	    _CALL next_token 
 3246      FEFF5DF8 
 3246      04EB
 3247 087a 10B3     	    cbz r0,6f 
 3248 087c 1B28     	    cmp r0,#TK_INTGR
 3249 087e 09D1     	    bne 1f 
 3250 0880 0A46     	    mov r2,r1 // first line
 3251 0882 00B5FFF7 	    _CALL next_token
 3251      FEFF5DF8 
 3251      04EB
 3252 088c 0028     	    cmp r0,#TK_NONE 
 3253 088e 01D1     	    bne 1f 
 3254 0890 1346     	    mov r3,r2 
 3255 0892 0CE0     	    b 4f 
 3256 0894 0828     	1:  cmp r0,#TK_MINUS 
 3257 0896 7FF4FEAF 	    bne syntax_error 
 3258 089a 00B5FFF7 	    _CALL next_token 
 3258      FEFF5DF8 
 3258      04EB
 3259 08a4 18B1     	    cbz r0,4f 
 3260 08a6 1B28     	    cmp r0,#TK_INTGR
 3261 08a8 7FF4FEAF 	    bne syntax_error  
 3262 08ac 0B46     	    mov r3,r1 
 3263              	4:  // skip lines below r2 
 3264 08ae B8F80000 	    ldrh r0,[T1]
 3265 08b2 9042     	    cmp r0,r2 
 3266 08b4 05D5     	    bpl 6f 
 3267 08b6 98F80200 	    ldrb r0,[T1,#2]
 3268 08ba 8044     	    add T1,r0
 3269 08bc C845     	    cmp T1,T2 
 3270 08be F6D4     	    bmi 4b
 3271 08c0 1AE0     	    b 9f 
 3272 08c2 C845     	6:  cmp T1,T2  
 3273 08c4 18D5     	    bpl 9f
 3274 08c6 4046     	    mov r0,T1   
 3275 08c8 DFF83010 	    ldr r1,out_buff 
 3276 08cc 00B5FFF7 	    _CALL decompile_line 
ARM GAS  tinyBasic.s 			page 91


 3276      FEFF5DF8 
 3276      04EB
 3277 08d6 00B5FFF7 	    _CALL uart_puts 
 3277      FEFF5DF8 
 3277      04EB
 3278 08e0 00B5FFF7 	    _CALL cr 
 3278      FEFF5DF8 
 3278      04EB
 3279 08ea 98F80200 	    ldrb r0,[T1,#2]
 3280 08ee 8044     	    add T1,r0
 3281 08f0 B8F80000 	    ldrh r0,[T1]
 3282 08f4 9842     	    cmp r0,r3 
 3283 08f6 E4DD     	    ble 6b 
 3284 08f8 FFF7FEBF 	9:  b warm_start 
 3285 08fc 00000000 	out_buff: .word _tib 
 3286              	
 3287              	/********************************
 3288              	  BASIC: LOCATE line,col
 3289              	  return log base 2 of expr 
 3290              	********************************/
 3291              	    _FUNC locate
 3292 0900 4FF00200 	    mov r0,#2
 3293 0904 00B5FFF7 	    _CALL arg_list 
 3293      FEFF5DF8 
 3293      04EB
 3294 090e 5CF8041B 	    _POP r1
 3295 0912 5CF8040B 	    _POP r0  
 3296 0916 00B5FFF7 	    _CALL set_curpos 
 3296      FEFF5DF8 
 3296      04EB
 3297 0920 7047     	    _RET 
 3298              	
 3299              	
 3300              	/****************************************
 3301              	  BASIC: LSHIFT(expr1,expr2)
 3302              	  shift right expr1 of expr2 bits 
 3303              	****************************************/
 3304 0922 00BF     	    _FUNC lshift
 3305 0924 4FF00200 	    mov r0,#2
 3306 0928 00B5FFF7 	    _CALL func_args
 3306      FEFF5DF8 
 3306      04EB
 3307 0932 BCE80300 	    ldmia DP!,{r0,r1}
 3308 0936 01FA00F1 	    lsl r1,r0 
 3309 093a 4FF01B00 	    mov r0,#TK_INTGR
 3310 093e 7047     	    _RET 
 3311              	
 3312              	/***********************************
 3313              	  BASIC: NEW 
 3314              	  delete existing program in memory
 3315              	  and clear variables and RAM 
 3316              	***********************************/
 3317              	    _FUNC new
 3318 0940 206C10F0 	    _CLO 
 3318      010F03D0 
 3318      4FF00700 
 3318      FFF7FEBF 
ARM GAS  tinyBasic.s 			page 92


 3319 0950 00B5FFF7 	    _CALL clear_basic 
 3319      FEFF5DF8 
 3319      04EB
 3320 095a FFF7FEBF 	    b warm_start   
 3321              	
 3322              	/************************************
 3323              	  BASIC: NOT relation  
 3324              	  invert logical value or relation
 3325              	************************************/
 3326 095e 00BF     	      _FUNC func_not
 3327 0960 00B5FFF7 	      _CALL relation 
 3327      FEFF5DF8 
 3327      04EB
 3328 096a 11B1     	      cbz r1,8f 
 3329 096c 81EA0101 	      eor r1,r1
 3330 0970 01E0     	      b 9f 
 3331 0972 4FF0FF31 	  8:  mov r1,#-1
 3332 0976 7047     	  9:  _RET 
 3333              	
 3334              	/******************************************
 3335              	  BASIC: OR(expr1,expr2)
 3336              	  binary OR between 2 expressions
 3337              	******************************************/
 3338              	    _FUNC bit_or
 3339 0978 4FF00200 	    mov r0,#2
 3340 097c 00B5FFF7 	    _CALL func_args
 3340      FEFF5DF8 
 3340      04EB
 3341 0986 5CF8040B 	    _POP r0 
 3342 098a 5CF8041B 	    _POP r1
 3343 098e 41EA0001 	    orr r1,r0 
 3344 0992 4FF01B00 	    mov r0,#TK_INTGR
 3345 0996 7047     	    _RET 
 3346              	
 3347              	/****************************************
 3348              	  BASIC: IN(gpio,pin) 
 3349              	  read gpio_idr selected pin  
 3350              	***************************************/
 3351              	    _FUNC pin_input 
 3352 0998 4FF00200 	    mov r0,#2
 3353 099c 00B5FFF7 	    _CALL func_args 
 3353      FEFF5DF8 
 3353      04EB
 3354 09a6 BCE80300 	    ldmia DP!,{r0,r1}
 3355 09aa 4FF00802 	    mov r2,#GPIO_IDR 
 3356 09ae 8A58     	    ldr r2,[r1,r2]
 3357 09b0 00F00F00 	    and r0,#15 
 3358 09b4 22FA00F2 	    lsr r2,r0 
 3359 09b8 02F00101 	    and r1,r2,#1 
 3360 09bc 4FF01B00 	    mov r0,#TK_INTGR
 3361 09c0 7047     	    _RET 
 3362              	
 3363              	
 3364              	/****************************************
 3365              	  BASIC: OUT gpio,pin,value 
 3366              	   output to gpio_odr
 3367              	***************************************/
ARM GAS  tinyBasic.s 			page 93


 3368 09c2 00BF     	    _FUNC out
 3369 09c4 4FF00300 	    mov r0,#3
 3370 09c8 00B5FFF7 	    _CALL arg_list 
 3370      FEFF5DF8 
 3370      04EB
 3371 09d2 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3372 09d6 08B9     	    cbnz r0,1f 
 3373 09d8 01F11001 	    add r1,#16 
 3374 09dc 4FF00100 	1:  mov r0,#1 
 3375 09e0 00FA01F0 	    lsl r0,r1 
 3376 09e4 1061     	    str r0,[r2,#GPIO_BSRR]    
 3377 09e6 7047     	    _RET 
 3378              	
 3379              	
 3380              	/****************************************
 3381              	  BASIC: PAD 
 3382              	  return pad buffer address 
 3383              	****************************************/
 3384              	    _FUNC pad_ref
 3385 09e8 0149     	    ldr r1,pad_adr  
 3386 09ea 4FF01B00 	    mov r0,#TK_INTGR 
 3387 09ee 7047     	    _RET 
 3388 09f0 00000000 	pad_adr: .word _pad 
 3389              	
 3390              	/***********************
 3391              	  BASIC: PAUSE expr 
 3392              	  suspend execution for 
 3393              	  expr milliseconds 
 3394              	************************/
 3395              	    _FUNC pause
 3396 09f4 00B5FFF7 	    _CALL expression 
 3396      FEFF5DF8 
 3396      04EB
 3397 09fe 1B28     	    cmp r0,#TK_INTGR 
 3398 0a00 7FF4FEAF 	    bne syntax_error 
 3399 0a04 E069     	    ldr r0,[UPP,#TICKS]
 3400 0a06 0844     	    add r0,r1 
 3401 0a08 E169     	1:  ldr r1,[UPP,#TICKS]
 3402 0a0a 8842     	    cmp r0,r1 
 3403 0a0c FCD1     	    bne 1b     
 3404 0a0e 7047     	    _RET 
 3405              	
 3406              	/***************************************************
 3407              	  BASIC: PMODE GPIOx,pin,mode
 3408              	  configure a digital pin for input|output
 3409              	  paramters:
 3410              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3411              	    pin      pin {0..15} 
 3412              	    mode 
 3413              	    for input mode:
 3414              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3415              	    for output mode:
 3416              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3417              	***************************************************/
 3418              	    _FUNC pin_mode
 3419 0a10 4FF00300 	    mov r0,#3
 3420 0a14 00B5FFF7 	    _CALL arg_list
ARM GAS  tinyBasic.s 			page 94


 3420      FEFF5DF8 
 3420      04EB
 3421 0a1e 5CF8042B 	    _POP r2 // mode 
 3422 0a22 5CF8041B 	    _POP r1 // pin 
 3423 0a26 5CF8040B 	    _POP r0 // gpio 
 3424 0a2a 00B500F0 	    _CALL gpio_config 
 3424      04F85DF8 
 3424      04EB
 3425 0a34 7047     	    _RET 
 3426              	
 3427              	/**********************************
 3428              	  gpio_config 
 3429              	  Configure gpio mode 
 3430              	  input:
 3431              	    r0   GPIOx 
 3432              	    r1   pin 
 3433              	    r2   mode 
 3434              	  output:
 3435              	    none 
 3436              	  use:
 3437              	    r3,T1 
 3438              	**********************************/
 3439 0a36 00BF     	    _FUNC gpio_config
 3440 0a38 2DE90801 	    push {r3,T1}
 3441 0a3c 8046     	    mov T1,r0 
 3442 0a3e 80EA0000 	    eor r0,r0 
 3443 0a42 102A     	    cmp r2,#16
 3444 0a44 06D4     	    bmi 0f
 3445 0a46 5FEA7202 	    rors r2,#1  
 3446 0a4a 02F00F02 	    and r2,#15
 3447 0a4e 01D3     	    bcc 0f 
 3448 0a50 4FF00100 	    mov r0,#1
 3449 0a54 00FA01F0 	0:  lsl r0,r1
 3450 0a58 A8F81000 	    strh r0,[T1,#GPIO_BSRR]
 3451 0a5c 0829     	1:  cmp r1,#8
 3452 0a5e 03D4     	    bmi 2f 
 3453 0a60 08F10408 	    add T1,#4 // CRH
 3454 0a64 A1F10801 	    sub r1,#8 
 3455              	2:  
 3456 0a68 4FEA8101 	    lsl r1,#2 
 3457 0a6c 4FF00F00 	    mov r0,#15
 3458 0a70 00FA01F0 	    lsl r0,r1
 3459 0a74 6FEA0000 	    mvn r0,r0 
 3460 0a78 D8F80030 	    ldr r3,[T1]
 3461 0a7c 03EA0003 	    and r3,r0 
 3462 0a80 02FA01F2 	    lsl r2,r1
 3463 0a84 43EA0203 	    orr r3,r2 
 3464 0a88 C8F80030 	    str r3,[T1]
 3465 0a8c BDE80801 	    pop {r3,T1}
 3466 0a90 7047     	    _RET 
 3467              	
 3468              	
 3469              	/*****************************************
 3470              	  BASIC: PEEKB (expr)  
 3471              	  return byte value at address 
 3472              	*****************************************/
 3473 0a92 00BF     	    _FUNC peek8
ARM GAS  tinyBasic.s 			page 95


 3474 0a94 4FF00100 	    mov r0,#1
 3475 0a98 00B5FFF7 	    _CALL func_args  
 3475      FEFF5DF8 
 3475      04EB
 3476 0aa2 5CF8041B 	    _POP r1 
 3477 0aa6 0978     	    ldrb r1,[r1]
 3478 0aa8 4FF01B00 	    mov r0,#TK_INTGR     
 3479 0aac 7047     	    _RET 
 3480              	
 3481              	/*****************************************
 3482              	  BASIC: PEEKH (expr)  
 3483              	  return byte value at address 
 3484              	*****************************************/
 3485 0aae 00BF     	    _FUNC peek16
 3486 0ab0 4FF00100 	    mov r0,#1
 3487 0ab4 00B5FFF7 	    _CALL func_args  
 3487      FEFF5DF8 
 3487      04EB
 3488 0abe 5CF8041B 	    _POP r1 
 3489 0ac2 0988     	    ldrh r1,[r1]
 3490 0ac4 4FF01B00 	    mov r0,#TK_INTGR     
 3491 0ac8 7047     	    _RET 
 3492              	
 3493              	/*****************************************
 3494              	  BASIC: PEEKW (expr)  
 3495              	  return byte value at address 
 3496              	*****************************************/
 3497 0aca 00BF     	    _FUNC peek32
 3498 0acc 4FF00100 	    mov r0,#1
 3499 0ad0 00B5FFF7 	    _CALL func_args  
 3499      FEFF5DF8 
 3499      04EB
 3500 0ada 5CF8041B 	    _POP r1 
 3501 0ade 0968     	    ldr r1,[r1]
 3502 0ae0 4FF01B00 	    mov r0,#TK_INTGR     
 3503 0ae4 7047     	    _RET 
 3504              	
 3505              	
 3506              	/**********************************
 3507              	  BASIC: POKE8 addr,byte
 3508              	  store byte at addr   
 3509              	**********************************/
 3510 0ae6 00BF     	    _FUNC poke8
 3511 0ae8 4FF00200 	    mov r0,#2
 3512 0aec 00B5FFF7 	    _CALL arg_list
 3512      FEFF5DF8 
 3512      04EB
 3513 0af6 BCE80300 	    ldmia DP!,{r0,r1} 
 3514 0afa 0870     	    strb r0,[r1]
 3515 0afc 7047     	    _RET 
 3516              	
 3517              	/**********************************
 3518              	  BASIC: POKE16 addr,hword
 3519              	  store hword at addr   
 3520              	**********************************/
 3521 0afe 00BF     	    _FUNC poke16
 3522 0b00 4FF00200 	    mov r0,#2
ARM GAS  tinyBasic.s 			page 96


 3523 0b04 00B5FFF7 	    _CALL arg_list
 3523      FEFF5DF8 
 3523      04EB
 3524 0b0e BCE80300 	    ldmia DP!,{r0,r1} 
 3525 0b12 0880     	    strh r0,[r1]
 3526 0b14 7047     	    _RET 
 3527              	
 3528              	/**********************************
 3529              	  BASIC: POKE32 addr,word
 3530              	  store word at addr   
 3531              	**********************************/
 3532 0b16 00BF     	    _FUNC poke32
 3533 0b18 4FF00200 	    mov r0,#2
 3534 0b1c 00B5FFF7 	    _CALL arg_list 
 3534      FEFF5DF8 
 3534      04EB
 3535 0b26 BCE80300 	    ldmia DP!,{r0,r1} 
 3536 0b2a 0860     	    str r0,[r1]
 3537 0b2c 7047     	    _RET 
 3538              	
 3539              	
 3540              	
 3541              	/****************************
 3542              	  BASIC: PRINT|? arg_list 
 3543              	  print list of arguments 
 3544              	****************************/
 3545 0b2e 00BF     	    _FUNC print
 3546 0b30 206C     	    ldr r0,[UPP,#FLAGS]
 3547 0b32 40F08000 	    orr r0,#FPRINT 
 3548 0b36 2064     	    str r0,[UPP,#FLAGS]
 3549 0b38 88EA0808 	    eor T1,T1 
 3550 0b3c 00B5FFF7 	0:  _CALL expression
 3550      FEFF5DF8 
 3550      04EB
 3551 0b46 1B28     	    cmp r0,#TK_INTGR
 3552 0b48 07D1     	    bne 1f 
 3553 0b4a 0846     	    mov r0,r1
 3554 0b4c A169     	    ldr r1,[UPP,#BASE]
 3555 0b4e 00B5FFF7 	    _CALL print_int
 3555      FEFF5DF8 
 3555      04EB
 3556 0b58 39E0     	    b 8f  
 3557 0b5a 0128     	1:  cmp r0,#TK_COLON 
 3558 0b5c 00DC     	    bgt 2f
 3559 0b5e 4DE0     	    b unget_exit 
 3560 0b60 1C28     	2:  cmp r0,#TK_QSTR 
 3561 0b62 06D1     	    bne 3f
 3562 0b64 0846     	    mov r0,r1 
 3563 0b66 00B5FFF7 	    _CALL uart_puts  
 3563      FEFF5DF8 
 3563      04EB
 3564 0b70 2DE0     	    b 8f 
 3565 0b72 1628     	3:  cmp r0,#TK_CFUNC
 3566 0b74 05D1     	    bne 4f
 3567 0b76 0846     	    mov r0,r1
 3568 0b78 00B5FFF7 	    _CALL execute 
 3568      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 97


 3568      04EB
 3569 0b82 1328     	4:  cmp r0,#TK_CHAR 
 3570 0b84 06D1     	    bne 5f 
 3571 0b86 0846     	    mov r0,r1 
 3572 0b88 00B5FFF7 	    _CALL uart_putc 
 3572      FEFF5DF8 
 3572      04EB
 3573 0b92 1CE0     	    b 8f 
 3574 0b94 0428     	5:  cmp r0,#TK_SHARP
 3575 0b96 09D1     	    bne 6f 
 3576 0b98 00B5FFF7 	   _CALL next_token
 3576      FEFF5DF8 
 3576      04EB
 3577 0ba2 1B28     	    cmp r0,#TK_INTGR  
 3578 0ba4 7FF4FEAF 	    bne syntax_error 
 3579 0ba8 6164     	    str r1,[UPP,#TAB_WIDTH]
 3580 0baa 10E0     	    b 8f 
 3581 0bac 1728     	6:  cmp r0,#TK_CMD 
 3582 0bae 25D1     	    bne unget_exit  
 3583 0bb0 5429     	    cmp r1,#TAB_IDX 
 3584 0bb2 05D1     	    bne 6f
 3585 0bb4 00B500F0 	    _CALL tab 
 3585      53FD5DF8 
 3585      04EB
 3586 0bbe 06E0     	    b 8f 
 3587 0bc0 4B29     	6:  cmp r1,#SPC_IDX  
 3588 0bc2 1BD1     	    bne unget_exit
 3589 0bc4 00B500F0 	    _CALL spc   
 3589      13FC5DF8 
 3589      04EB
 3590 0bce 88EA0808 	8:  eor T1,T1  
 3591 0bd2 00B5FFF7 	    _CALL next_token
 3591      FEFF5DF8 
 3591      04EB
 3592 0bdc 90B1     	    cbz r0, print_exit  
 3593 0bde 0228     	    cmp r0,#TK_COMMA 
 3594 0be0 02D1     	    bne 8f 
 3595 0be2 4FF0FF38 	    mov T1,#-1
 3596 0be6 A9E7     	    b 0b
 3597 0be8 0328     	8:  cmp r0,#TK_SEMIC 
 3598 0bea 07D1     	    bne unget_exit 
 3599 0bec 00B5FFF7 	    _CALL tabulation 
 3599      FEFF5DF8 
 3599      04EB
 3600 0bf6 4FF0FF38 	    mov T1,#-1
 3601 0bfa 9FE7     	    b 0b
 3602              	unget_exit:         
 3603 0bfc D4F800A0 	   _UNGET_TOKEN 
 3603      D4F808B0 
 3604              	print_exit:
 3605 0c04 18EA0808 	    ands T1,T1 
 3606 0c08 08D1     	    bne 9f
 3607 0c0a 00B5FFF7 	    _CALL cr
 3607      FEFF5DF8 
 3607      04EB
 3608 0c14 206C     	    ldr r0,[UPP,#FLAGS]
 3609 0c16 80F08000 	    eor r0,#FPRINT 
ARM GAS  tinyBasic.s 			page 98


 3610 0c1a 2064     	    str r0,[UPP,#FLAGS] 
 3611 0c1c 7047     	9:  _RET 
 3612              	
 3613              	/**************************************
 3614              	  BASIC: QKEY
 3615              	  check if key pressed 
 3616              	**************************************/ 
 3617 0c1e 00BF     	    _FUNC qkey
 3618 0c20 4FF00001 	    mov r1,#0
 3619 0c24 00B5FFF7 	    _CALL uart_qkey
 3619      FEFF5DF8 
 3619      04EB
 3620 0c2e 01D0     	    beq 9f 
 3621 0c30 4FF0FF31 	    mov r1,#-1 
 3622 0c34 4FF01B00 	9:  mov r0,#TK_INTGR
 3623 0c38 7047     	    _RET 
 3624              	
 3625              	/******************************************
 3626              	  BASIC: RANDOMIZE 
 3627              	  Copy TICKS to SEED 
 3628              	******************************************/
 3629 0c3a 00BF     	    _FUNC randomize
 3630 0c3c E069     	    ldr r0,[UPP,#TICKS]
 3631 0c3e 6062     	    str r0,[UPP,#SEED]
 3632 0c40 7047     	    _RET 
 3633              	
 3634              	/******************************************
 3635              	  BASIC RND(expr)
 3636              	  generate random number between 0..expr-1
 3637              	******************************************/
 3638 0c42 00BF     	    _FUNC random
 3639 0c44 4FF00100 	    mov r0,#1
 3640 0c48 00B5FFF7 	    _CALL func_args 
 3640      FEFF5DF8 
 3640      04EB
 3641 0c52 11F0004F 	    tst r1,#(1<<31)
 3642 0c56 03D0     	    beq 1f 
 3643 0c58 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 3644 0c5c FFF7FEBF 	    b tb_error 
 3645 0c60 606A     	1:  ldr r0,[UPP,#SEED]
 3646 0c62 4FEA4031 	    lsl r1,r0,#13
 3647 0c66 81EA0001 	    eor r1,r0
 3648 0c6a 4FEA5140 	    lsr r0,r1,#17
 3649 0c6e 81EA0001 	    eor r1,r0
 3650 0c72 4FEA4110 	    lsl r0,r1,#5
 3651 0c76 81EA0001 	    eor r1,r0
 3652 0c7a 6162     	    str r1,[UPP,#SEED]
 3653 0c7c 5CF8040B 	    _POP r0 
 3654 0c80 B1FBF0F2 	    udiv r2,r1,r0  
 3655 0c84 00FB02F2 	    mul r2,r0 
 3656 0c88 A1EB0201 	    sub r1,r2 
 3657 0c8c 4FF01B00 	    mov r0,#TK_INTGR
 3658 0c90 7047     	    _RET 
 3659              	
 3660              	/****************************************
 3661              	  BASIC: RSHIFT(expr1,expr2)
 3662              	  shift left expr1 de expr2 bits 
ARM GAS  tinyBasic.s 			page 99


 3663              	****************************************/
 3664 0c92 00BF     	    _FUNC rshift
 3665 0c94 4FF00200 	    mov r0,#2
 3666 0c98 00B5FFF7 	    _CALL func_args
 3666      FEFF5DF8 
 3666      04EB
 3667 0ca2 BCE80300 	    ldmia DP!,{r0,r1}
 3668 0ca6 21FA00F1 	    lsr r1,r0  
 3669 0caa 4FF01B00 	    mov r0,#TK_INTGR
 3670 0cae 7047     	    _RET 
 3671              	
 3672              	/****************************
 3673              	  BASIC: RUN 
 3674              	  execute program in memory
 3675              	****************************/
 3676              	    _FUNC run
 3677 0cb0 206C10F0 	    _CLO 
 3677      010F03D0 
 3677      4FF00700 
 3677      FFF7FEBF 
 3678 0cc0 206B     	    ldr r0,[UPP,#TXTBGN]
 3679 0cc2 616B     	    ldr r1,[UPP,#TXTEND]
 3680 0cc4 C4F8E010 	    str r1,[UPP,#HERE]
 3681 0cc8 8842     	    cmp r0,r1
 3682 0cca 21D0     	    beq 9f
 3683 0ccc 216C     	    ldr r1,[UPP,#FLAGS]
 3684 0cce 11F0080F 	    tst r1,#FSTOP
 3685 0cd2 09D0     	    beq 1f
 3686 0cd4 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3687 0cd8 6060     	    str r0,[UPP,#COUNT]
 3688 0cda 206C     	    ldr r0,[UPP,#FLAGS]
 3689 0cdc 4FF00901 	    mov r1,#FRUN+FSTOP
 3690 0ce0 80EA0100 	    eor r0,r1
 3691 0ce4 2064     	    str r0,[UPP,#FLAGS] 
 3692 0ce6 13E0     	    b 9f  
 3693 0ce8 8178     	1:  ldrb r1,[r0,#2]
 3694 0cea 6160     	    str r1,[UPP,#COUNT]
 3695 0cec 8346     	    mov BPTR,r0 
 3696 0cee 4FF0030A 	    mov IN,#3
 3697 0cf2 606B     	    ldr r0,[UPP,#TXTEND]
 3698              	    // reset dataline pointers 
 3699 0cf4 80EA0000 	    eor r0,r0 
 3700 0cf8 E060     	    str r0,[UPP,#DATAPTR]
 3701 0cfa 2061     	    str r0,[UPP,#DATA]
 3702 0cfc 6061     	    str r0,[UPP,#DATALEN] 
 3703 0cfe 206C     	    ldr r0,[UPP,#FLAGS]
 3704 0d00 40F00100 	    orr r0,#FRUN 
 3705 0d04 2064     	    str r0,[UPP,#FLAGS]
 3706 0d06 00B5FFF7 	    _CALL show_trace 
 3706      FEFF5DF8 
 3706      04EB
 3707 0d10 7047     	9:  _RET 
 3708              	
 3709              	/**********************************
 3710              	        FILE SYSTEM 
 3711              	**********************************/
 3712              	
ARM GAS  tinyBasic.s 			page 100


 3713              	/*********************************
 3714              	  search_free 
 3715              	  search first free PAGE in fs
 3716              	  a PAGE is free if first word is
 3717              	  -1
 3718              	  input:
 3719              	    none 
 3720              	  output:
 3721              	    r0    addr|0
 3722              	  use:
 3723              	*********************************/
 3724 0d12 00BF     	    _FUNC search_free 
 3725 0d14 06B4     	    push {r1,r2}
 3726 0d16 DFF86410 	    ldr r1,fs_addr 
 3727 0d1a 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3727      C0F60202 
 3728 0d22 0868     	1:  ldr r0,[r1]
 3729 0d24 B0F1FF3F 	    cmp r0,#-1
 3730 0d28 03D0     	    beq 8f 
 3731 0d2a 01F58061 	    add r1,#PAGE_SIZE
 3732 0d2e 9142     	    cmp r1,r2 
 3733 0d30 F7D4     	    bmi 1b 
 3734 0d32 0846     	8:  mov r0,r1 
 3735 0d34 06BC     	    pop {r1,r2}   
 3736 0d36 7047     	    _RET 
 3737              	
 3738              	/*********************************
 3739              	  search_file 
 3740              	  search for a file name 
 3741              	  in file system.
 3742              	  input: 
 3743              	    r0   .asciz target name
 3744              	  output:
 3745              	    r0    0 || address found 
 3746              	  use:
 3747              	   r0     temp 
 3748              	   r1     *file_name 
 3749              	   r2     *fs  
 3750              	   r3     target   
 3751              	**********************************/
 3752              	    _FUNC search_file 
 3753 0d38 0EB4     	    push {r1,r2,r3}
 3754 0d3a DFF84020 	    ldr r2,fs_addr
 3755 0d3e 0346     	    mov r3,r0  
 3756              	cmp_loop:
 3757 0d40 1068     	    ldr r0,[r2]
 3758 0d42 B0F1FF3F 	    cmp r0,#-1
 3759 0d46 80EA0000 	    eor r0,r0
 3760 0d4a 15D0     	    beq 9f // reached end of fs 
 3761 0d4c 1846     	1:  mov r0,r3
 3762 0d4e 02F10201 	    add r1,r2,#2
 3763 0d52 00B5FFF7 	    _CALL strcmp
 3763      FEFF5DF8 
 3763      04EB
 3764 0d5c 08B9     	    cbnz r0,2f
 3765 0d5e 1046     	    mov r0,r2 
 3766 0d60 0AE0     	    b 9f   
ARM GAS  tinyBasic.s 			page 101


 3767 0d62 1088     	2:  ldrh r0,[r2] // name length
 3768 0d64 0244     	    add r2,r0 
 3769 0d66 1088     	    ldrh r0,[r2]
 3770 0d68 1044     	    add r0,r2
 3771 0d6a 00B5FFF7 	    _CALL page_align 
 3771      FEFF5DF8 
 3771      04EB
 3772 0d74 0246     	    mov r2,r0   
 3773 0d76 E3E7     	    b cmp_loop 
 3774 0d78 0EBC     	9:  pop {r1,r2,r3}
 3775 0d7a 7047     	    _RET 
 3776              	
 3777 0d7c 00000000 	fs_addr: .word FILE_SYSTEM
 3778              	
 3779              	/*************************************
 3780              	  BASIC: DIR 
 3781              	  list files stored in fs 
 3782              	  use:
 3783              	    r0  temp 
 3784              	    r1  temp
 3785              	    r2  file count
 3786              	    r3  data size
 3787              	    T1  *fs  
 3788              	*************************************/
 3789              	    _FUNC directory
 3790 0d80 206C10F0 	    _CLO 
 3790      010F03D0 
 3790      4FF00700 
 3790      FFF7FEBF 
 3791 0d90 82EA0202 	    eor r2,r2 
 3792 0d94 5FF81C80 	    ldr T1,fs_addr 
 3793 0d98 D8F80000 	1:  ldr r0,[T1] // name length 
 3794 0d9c B0F1FF3F 	    cmp r0,#-1
 3795 0da0 2AD0     	    beq no_more_file
 3796 0da2 00F00F03 	    and r3,r0,#15
 3797 0da6 08F10200 	    add r0,T1,#2
 3798 0daa 00B5FFF7 	    _CALL uart_puts 
 3798      FEFF5DF8 
 3798      04EB
 3799 0db4 4FF01000 	    mov r0,#16 
 3800 0db8 00B5FFF7 	    _CALL cursor_x 
 3800      FEFF5DF8 
 3800      04EB
 3801 0dc2 9844     	    add T1,r3 
 3802 0dc4 B8F80030 	    ldrh r3,[T1]
 3803 0dc8 1846     	    mov r0,r3 
 3804 0dca 4FF00A01 	    mov r1,#10 
 3805 0dce 00B5FFF7 	    _CALL print_int
 3805      FEFF5DF8 
 3805      04EB
 3806 0dd8 00B5FFF7 	    _CALL cr  
 3806      FEFF5DF8 
 3806      04EB
 3807 0de2 08EB0300 	    add r0,T1,r3 
 3808 0de6 00B5FFF7 	    _CALL page_align
 3808      FEFF5DF8 
 3808      04EB
ARM GAS  tinyBasic.s 			page 102


 3809 0df0 8046     	    mov T1,r0 
 3810 0df2 02F10102 	    add r2,#1 
 3811 0df6 CFE7     	    b 1b  
 3812              	no_more_file:
 3813 0df8 00B5FFF7 	    _CALL cr
 3813      FEFF5DF8 
 3813      04EB
 3814 0e02 4FF01000 	    mov r0,#16
 3815 0e06 00B5FFF7 	    _CALL cursor_x  
 3815      FEFF5DF8 
 3815      04EB
 3816 0e10 1046     	    mov r0,r2 
 3817 0e12 4FF00A01 	    mov r1,#10 
 3818 0e16 00B5FFF7 	    _CALL print_int 
 3818      FEFF5DF8 
 3818      04EB
 3819 0e20 DFF8BC0C 	    ldr r0,=fcount 
 3820 0e24 00B5FFF7 	    _CALL uart_puts 
 3820      FEFF5DF8 
 3820      04EB
 3821 0e2e 7047     	    _RET 
 3822 0e30 66696C65 	fcount:  .asciz "files\n"
 3822      730A00
 3823              	
 3824              	/*************************************
 3825              	  BASIC: FORGET ["name"]
 3826              	  delete file and all following 
 3827              	  if no name given delete all files 
 3828              	************************************/
 3829 0e37 00       	    _FUNC forget
 3830 0e38 2DE90802 	    push {r3,T2}
 3831 0e3c 5FF8C490 	    ldr T2,fs_addr 
 3832 0e40 E36A     	    ldr r3,[UPP,#FSFREE]
 3833 0e42 00B5FFF7 	    _CALL next_token
 3833      FEFF5DF8 
 3833      04EB
 3834 0e4c 38B1     	    cbz r0,1f // no name 
 3835 0e4e 0846     	    mov r0,r1
 3836 0e50 00B5FFF7 	    _CALL search_file
 3836      71FF5DF8 
 3836      04EB
 3837 0e5a 58B1     	    cbz r0,9f 
 3838 0e5c 8146     	    mov T2,r0 
 3839 0e5e 9945     	1:  cmp T2,r3 
 3840 0e60 08D5     	    bpl 9f 
 3841 0e62 4846     	    mov r0,T2 
 3842 0e64 00B5FFF7 	    _CALL erase_page
 3842      FEFF5DF8 
 3842      04EB
 3843 0e6e 09F58069 	    add T2,#PAGE_SIZE
 3844 0e72 F4E7     	    b 1b 
 3845 0e74 00B5FFF7 	9:  _CALL search_free
 3845      4DFF5DF8 
 3845      04EB
 3846 0e7e BDE80802 	    pop {r3,T2} 
 3847 0e82 7047     	    _RET
 3848              	
ARM GAS  tinyBasic.s 			page 103


 3849              	/**********************************
 3850              	  BASIC LOAD "name" 
 3851              	  load file in RAM for execution
 3852              	  use:
 3853              	    r0   temp
 3854              	    r1   src
 3855              	    r2   dest 
 3856              	    r3   count 
 3857              	**********************************/
 3858              	    _FUNC load
 3859 0e84 206C10F0 	    _CLO 
 3859      010F03D0 
 3859      4FF00700 
 3859      FFF7FEBF 
 3860 0e94 00B5FFF7 	    _CALL next_token 
 3860      FEFF5DF8 
 3860      04EB
 3861 0e9e 1C28     	    cmp r0,#TK_QSTR 
 3862 0ea0 7FF4FEAF 	    bne syntax_error 
 3863 0ea4 0846     	    mov r0,r1 
 3864              	load_autorun:     
 3865 0ea6 00B5FFF7 	    _CALL search_file 
 3865      46FF5DF8 
 3865      04EB
 3866 0eb0 18B9     	    cbnz r0, 1f 
 3867 0eb2 4FF00900 	    mov r0,#ERR_NOT_FILE
 3868 0eb6 FFF7FEBF 	    b tb_error 
 3869 0eba 0146     	1:  mov r1,r0 
 3870 0ebc 0888     	    ldrh r0,[r1]
 3871 0ebe 0144     	    add r1,r0 // data size field  
 3872 0ec0 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3873 0ec4 226B     	    ldr r2,[UPP,#TXTBGN]
 3874 0ec6 02EB0300 	    add r0,r2,r3  
 3875 0eca 6063     	    str r0,[UPP,#TXTEND]
 3876 0ecc C4F8E000 	    str r0,[UPP,#HERE]
 3877 0ed0 03F10103 	    add r3,#1
 3878 0ed4 4FEA5303 	    lsr r3,#1
 3879              	2:  // load file data 
 3880 0ed8 31F8020B 	    ldrh r0,[r1],#2
 3881 0edc 22F8020B 	    strh r0,[r2],#2 
 3882 0ee0 013B     	    subs r3,#1 
 3883 0ee2 F9D1     	    bne 2b 
 3884              	// report file size 
 3885 0ee4 DFF8FC0B 	    ldr r0,=fsize 
 3886 0ee8 00B5FFF7 	    _CALL uart_puts
 3886      FEFF5DF8 
 3886      04EB
 3887 0ef2 606B     	    ldr r0,[UPP,#TXTEND]
 3888 0ef4 236B     	    ldr r3,[UPP,#TXTBGN]
 3889 0ef6 A0EB0300 	    sub r0,r3 
 3890 0efa 4FF00A01 	    mov r1,#10 
 3891 0efe 00B5FFF7 	    _CALL print_int 
 3891      FEFF5DF8 
 3891      04EB
 3892 0f08 DFF8DC0B 	    ldr r0,=data_bytes 
 3893 0f0c 00B5FFF7 	    _CALL uart_puts      
 3893      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 104


 3893      04EB
 3894 0f16 7047     	    _RET 
 3895              	
 3896              	
 3897              	/*********************************
 3898              	  BASIC: SAVE "name" 
 3899              	  save program in flash memory
 3900              	  file structure:
 3901              	    .hword name_length 
 3902              	    .asciz name
 3903              	    .palign 1  
 3904              	    .hword data_length 
 3905              	    .byte  file data (variable length)  
 3906              	  use:
 3907              	    r0  temp 
 3908              	    r1  temp
 3909              	    r2  *flash 
 3910              	    r3  *ram  
 3911              	    T1  temp   
 3912              	********************************/
 3913              	    _FUNC save
 3914 0f18 206C10F0 	    _CLO 
 3914      010F03D0 
 3914      4FF00700 
 3914      FFF7FEBF 
 3915 0f28 606B     	    ldr r0,[UPP,#TXTEND]
 3916 0f2a 216B     	    ldr r1,[UPP,#TXTBGN]
 3917 0f2c 8842     	    cmp r0,r1
 3918 0f2e 03D1     	    bne 0f 
 3919 0f30 4FF00D00 	    mov r0,#ERR_NO_PROG
 3920 0f34 FFF7FEBF 	    b tb_error 
 3921 0f38 00B5FFF7 	0:  _CALL next_token 
 3921      FEFF5DF8 
 3921      04EB
 3922 0f42 1C28     	    cmp r0,#TK_QSTR
 3923 0f44 7FF4FEAF 	    bne syntax_error 
 3924              	// check for existing 
 3925 0f48 0B46     	    mov r3,r1 // save name 
 3926 0f4a 1846     	    mov r0,r3  
 3927 0f4c 00B5FFF7 	    _CALL search_file
 3927      F3FE5DF8 
 3927      04EB
 3928 0f56 18B1     	    cbz r0,new_file 
 3929 0f58 4FF00800 	    mov r0,#ERR_DUPLICATE
 3930 0f5c FFF7FEBF 	    b tb_error 
 3931              	new_file:
 3932 0f60 4FF00100 	    mov r0,#1 
 3933 0f64 00B5FFF7 	    _CALL unlock 
 3933      FEFF5DF8 
 3933      04EB
 3934 0f6e E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3935 0f70 1846     	    mov r0,r3 // *name 
 3936 0f72 00B5FFF7 	    _CALL strlen 
 3936      FEFF5DF8 
 3936      04EB
 3937 0f7c 00F10400 	    add r0,#4  
 3938 0f80 20F00100 	    and r0,#-2 //even size
ARM GAS  tinyBasic.s 			page 105


 3939 0f84 A0F10208 	    sub T1,r0,#2  // name length counter   
 3940 0f88 1146     	1:  mov r1,r2  
 3941 0f8a 00B5FFF7 	    _CALL hword_write   
 3941      FEFF5DF8 
 3941      04EB
 3942 0f94 02F10202 	    add r2,#2  
 3943              	// write file name      
 3944 0f98 33F8020B 	2:  ldrh r0,[r3],#2 
 3945 0f9c 1146     	    mov r1,r2 
 3946 0f9e 00B5FFF7 	    _CALL hword_write
 3946      FEFF5DF8 
 3946      04EB
 3947 0fa8 02F10202 	    add r2,#2
 3948 0fac B8F10208 	    subs T1,#2
 3949 0fb0 F2D1     	    bne 2b
 3950              	// write data size 
 3951 0fb2 606B     	    ldr r0,[UPP,#TXTEND]
 3952 0fb4 236B     	    ldr r3,[UPP,#TXTBGN]
 3953 0fb6 A0EB0300 	    sub r0,r3
 3954 0fba 8046     	    mov T1,r0
 3955 0fbc 1146     	    mov r1,r2 
 3956 0fbe 00B5FFF7 	    _CALL hword_write
 3956      FEFF5DF8 
 3956      04EB
 3957 0fc8 02F10202 	    add r2,#2 
 3958              	// write data 
 3959 0fcc 08F10108 	    add T1,#1 
 3960 0fd0 4FEA5808 	    lsr T1,#1 // .hword to write 
 3961 0fd4 33F8020B 	3:  ldrh r0,[r3],#2
 3962 0fd8 1146     	    mov r1,r2
 3963 0fda 00B5FFF7 	    _CALL hword_write 
 3963      FEFF5DF8 
 3963      04EB
 3964 0fe4 02F10202 	    add r2,#2 
 3965 0fe8 B8F10108 	    subs T1,#1 
 3966 0fec F2D1     	    bne 3b
 3967 0fee 4FF00000 	    mov r0,#0 
 3968 0ff2 00B5FFF7 	    _CALL unlock
 3968      FEFF5DF8 
 3968      04EB
 3969              	// update FSFREE     
 3970 0ffc 606B     	    ldr r0,[UPP,#TXTEND]
 3971 0ffe 216B     	    ldr r1,[UPP,#TXTBGN]
 3972 1000 A0EB0100 	    sub r0,r1 
 3973 1004 8046     	    mov T1,r0 
 3974 1006 E16A     	    ldr r1,[UPP,#FSFREE]
 3975 1008 0844     	    add r0,r1 
 3976 100a 00B5FFF7 	    _CALL page_align
 3976      FEFF5DF8 
 3976      04EB
 3977 1014 E062     	    str r0,[UPP,#FSFREE]
 3978 1016 DFF8CC0A 	    ldr r0,=fsize
 3979 101a 00B5FFF7 	    _CALL uart_puts
 3979      FEFF5DF8 
 3979      04EB
 3980 1024 4046     	    mov r0,T1 
 3981 1026 4FF00A01 	    mov r1,#10 
ARM GAS  tinyBasic.s 			page 106


 3982 102a 00B5FFF7 	    _CALL print_int 
 3982      FEFF5DF8 
 3982      04EB
 3983 1034 DFF8B00A 	    ldr r0,=data_bytes 
 3984 1038 00B5FFF7 	    _CALL uart_puts  
 3984      FEFF5DF8 
 3984      04EB
 3985 1042 7047     	    _RET 
 3986 1044 66696C65 	fsize: .asciz "file size: "
 3986      2073697A 
 3986      653A2000 
 3987 1050 62797465 	data_bytes: .asciz "bytes\n"
 3987      730A00
 3988              	
 3989              	
 3990              	/******************************
 3991              	  BASIC: AUTORUN ["name"]
 3992              	  set a file name to 
 3993              	  execute at boot up or if no 
 3994              	  argument cancel autorun file.
 3995              	  use:
 3996              	    T1 *ram buffer 
 3997              	*********************************/
 3998 1057 00       	    _FUNC autorun
 3999              	    // copy user page in RAM
 4000 1058 D4F83480 	    ldr T1,[UPP,#TXTEND]
 4001 105c 4FF00300 	    mov r0,#3
 4002 1060 8044     	    add T1,r0 
 4003 1062 6FEA0000 	    mvn r0,r0 
 4004 1066 08EA0008 	    and T1,r0 
 4005 106a 5FF87C06 	    ldr r0,pad_adr  
 4006 106e A0EB0800 	    sub r0,T1 
 4007 1072 B0F5806F 	    cmp r0,#PAGE_SIZE 
 4008 1076 03D5     	    bpl 1f 
 4009 1078 4FF00100 	    mov r0,#ERR_MEM_FULL 
 4010 107c FFF7FEBF 	    b tb_error 
 4011 1080 DFF8680A 	1:  ldr r0,=user
 4012 1084 4146     	    mov r1,T1 
 4013 1086 4FF48062 	    mov r2,#PAGE_SIZE 
 4014 108a 00B5FFF7 	    _CALL cmove 
 4014      FEFF5DF8 
 4014      04EB
 4015              	    // erase page 
 4016 1094 DFF8540A 	    ldr r0,=user 
 4017 1098 00B5FFF7 	    _CALL erase_page
 4017      FEFF5DF8 
 4017      04EB
 4018              	    // check file name argument 
 4019 10a2 00B5FFF7 	    _CALL next_token 
 4019      FEFF5DF8 
 4019      04EB
 4020 10ac 1C28     	    cmp r0,#TK_QSTR 
 4021 10ae 0DD0     	    beq 2f 
 4022 10b0 D4F800A0 	    _UNGET_TOKEN
 4022      D4F808B0 
 4023              	    // erase first 16 byte of page
 4024              	    // this cancel any existing autorun 
ARM GAS  tinyBasic.s 			page 107


 4025 10b8 4FF0FF30 	    mov r0,#-1
 4026 10bc 4246     	    mov r2,T1
 4027 10be 4FF01001 	    mov r1,#16 
 4028 10c2 42F8040B 	1:  str r0,[r2],#4
 4029 10c6 0439     	    subs r1,#4
 4030 10c8 FBD1     	    bne 1b 
 4031 10ca 0BE0     	    b write_back 
 4032 10cc 4246     	2:  mov r2,T1
 4033 10ce DFF82600 	    ldr r0,arun_sign 
 4034 10d2 42F8040B 	    str r0,[r2],#4
 4035 10d6 0846     	    mov r0,r1 
 4036 10d8 1146     	    mov r1,r2 
 4037 10da 00B5FFF7 	    _CALL strcpy 
 4037      FEFF5DF8 
 4037      04EB
 4038              	write_back:
 4039 10e4 4046     	    mov r0,T1
 4040 10e6 DFF8041A 	    ldr r1,=user 
 4041 10ea 00B5FFF7 	    _CALL write_page
 4041      FEFF5DF8 
 4041      04EB
 4042 10f4 7047     	    _RET 
 4043 10f6 4152554E 	arun_sign: .ascii "ARUN" 
 4044              	
 4045              	/******************************
 4046              	    exec_autorun 
 4047              	    check for autorun file.
 4048              	    load and execute it.
 4049              	*****************************/
 4050 10fa 00BF     	    _FUNC exec_autorun
 4051 10fc DFF8EC29 	    ldr r2,=user 
 4052 1100 5FF80E10 	    ldr r1,arun_sign 
 4053 1104 1068     	    ldr r0,[r2]
 4054 1106 8842     	    cmp r0,r1 
 4055 1108 0DD1     	    bne 9f 
 4056 110a 02F10400 	    add r0,r2,#4
 4057 110e 00B5FFF7 	    _CALL load_autorun 
 4057      C9FE5DF8 
 4057      04EB
 4058 1118 00B5FFF7 	    _CALL run
 4058      C9FD5DF8 
 4058      04EB
 4059 1122 FFF7FEBF 	    b interpreter  
 4060 1126 7047     	9:  _RET 
 4061              	
 4062              	/*******************************
 4063              	  BASIC: FREE 
 4064              	  return RAM free bytes 
 4065              	*******************************/
 4066              	    _FUNC free
 4067 1128 D4F8E000 	    ldr r0,[UPP,#HERE]
 4068 112c D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 4069 1130 A1EB0001 	    sub r1,r0
 4070 1134 4FF01B00 	    mov r0,#TK_INTGR
 4071 1138 7047     	    _RET  
 4072              	
 4073              	/*********************************
ARM GAS  tinyBasic.s 			page 108


 4074              	  BASIC: SERVO_INIT n 
 4075              	  initialize servo motor 1,2,3,4
 4076              	  1 -> PWM2/1 pin A15
 4077              	  2 -> PWM2/2 pin B3 
 4078              	  3 -> PWM3/1 pin B4 
 4079              	  4 -> PWM3/2 pin B5
 4080              	  5 -> PMW4/3 pin B8
 4081              	  6 -> PWM4/4 pin B9
 4082              	  TIMER parameters are for Fclk=72Mhz 
 4083              	  period=20msec 
 4084              	  default pos = 1500ÂµSec 
 4085              	************************************/
 4086 113a 00BF     	    _FUNC servo_init 
 4087 113c 00B5FFF7 	    _CALL expression 
 4087      FEFF5DF8 
 4087      04EB
 4088 1146 1B28     	    cmp r0,#TK_INTGR  
 4089 1148 7FF4FEAF 	    bne syntax_error 
 4090 114c 0129     	    cmp r1,#1 
 4091 114e 03D5     	    bpl 1f 
 4092 1150 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4093 1154 FFF7FEBF 	    b tb_error 
 4094 1158 0729     	1:  cmp r1,#7
 4095 115a F9D5     	    bpl 0b
 4096 115c A1F10103 	    sub r3,r1,#1
 4097              	1:  // configure port pin
 4098 1160 DFF88C29 	    ldr r2,=servo_param
 4099 1164 4FEA0311 	    lsl r1,r3,#4
 4100 1168 0A44     	    add r2,r1  
 4101 116a 52F8040B 	    ldr r0,[r2],#4 //GPIOx_BASE_ADR
 4102 116e 1168     	    ldr r1,[r2]  // pin 
 4103 1170 4FF00E02 	    mov r2,#0xe // OUTPUT_AFOD  
 4104 1174 00B5FFF7 	    _CALL gpio_config 
 4104      5FFC5DF8 
 4104      04EB
 4105 117e DFF87009 	    ldr r0,=servo_param 
 4106 1182 4FEA0311 	    lsl r1,r3,#4
 4107 1186 01F10801 	    add r1,#8
 4108 118a 0844     	    add r0,r1 
 4109 118c 50F8043B 	    ldr r3,[r0],#4
 4110 1190 0268     	    ldr r2,[r0]
 4111 1192 4FF02000 	    mov r0,#32
 4112 1196 4AF6C871 	    mov r1,#45000
 4113 119a 0CB4     	    push {r2,r3}
 4114 119c 00B500F0 	    _CALL pwm_config
 4114      5DF85DF8 
 4114      04EB
 4115 11a6 06BC     	    pop {r1,r2}   
 4116              	    // remap TIMER2|3 pin 
 4117 11a8 4FF00003 	    _MOV32 r3,AFIO_BASE_ADR
 4117      C4F20103 
 4118 11b0 4FF00000 	    _MOV32 r0,TIMER2_BASE_ADR
 4118      C4F20000 
 4119 11b8 8242     	    cmp r2,r0 
 4120 11ba 04D0     	    beq remap_t2
 4121 11bc 00F58060 	    add r0,#0x400
 4122 11c0 8242     	    cmp r2,r0  
ARM GAS  tinyBasic.s 			page 109


 4123 11c2 07D0     	    beq remap_t3 
 4124 11c4 12E0     	    b no_remap 
 4125              	remap_t2:
 4126 11c6 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4127 11c8 4FF44078 	    mov T1,#0x300 
 4128 11cc 40EA0800 	    orr r0,T1 
 4129 11d0 5860     	    str r0,[r3,#AFIO_MAPR]
 4130 11d2 0BE0     	    b no_remap 
 4131              	remap_t3: 
 4132 11d4 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4133 11d6 4FF44068 	    mov T1,0xc00 
 4134 11da 6FEA0808 	    mvn T1,T1 
 4135 11de 00EA0800 	    and r0,T1 
 4136 11e2 4FF40068 	    mov T1,#0x800
 4137 11e6 40EA0800 	    orr r0,T1 
 4138 11ea 5860     	    str r0,[r3,#AFIO_MAPR]
 4139              	no_remap:
 4140 11ec 40F62F50 	     mov r0,#3375 
 4141 11f0 00B500F0 	    _CALL pwm_dc
 4141      7DF85DF8 
 4141      04EB
 4142 11fa 7047     	    _RET 
 4143              	
 4144 11fc 00080140 	servo_param: .word GPIOA_BASE_ADR,15,TIMER2_BASE_ADR,1
 4144      0F000000 
 4144      00000040 
 4144      01000000 
 4145 120c 000C0140 	            .word GPIOB_BASE_ADR,3,TIMER2_BASE_ADR,2
 4145      03000000 
 4145      00000040 
 4145      02000000 
 4146 121c 000C0140 	            .word GPIOB_BASE_ADR,4,TIMER3_BASE_ADR,1
 4146      04000000 
 4146      00040040 
 4146      01000000 
 4147 122c 000C0140 	            .word GPIOB_BASE_ADR,5,TIMER3_BASE_ADR,2
 4147      05000000 
 4147      00040040 
 4147      02000000 
 4148 123c 000C0140 	            .word GPIOB_BASE_ADR,8,TIMER4_BASE_ADR,3
 4148      08000000 
 4148      00080040 
 4148      03000000 
 4149 124c 000C0140 	            .word GPIOB_BASE_ADR,9,TIMER4_BASE_ADR,4
 4149      09000000 
 4149      00080040 
 4149      04000000 
 4150              	
 4151              	/*********************************
 4152              	    pwm_config 
 4153              	    configure timer for pwm mode 6
 4154              	    Fck_int=72Mhz 
 4155              	    input:
 4156              	      r0   PSC
 4157              	      r1   ARR
 4158              	      r2   channel  
 4159              	      r3   TIMER_BASE_ADR 
ARM GAS  tinyBasic.s 			page 110


 4160              	    output:
 4161              	      none 
 4162              	    use:
 4163              	      T1,T2 
 4164              	*********************************/
 4165              	    _FUNC pwm_config
 4166 125c 2DE90003 	    push {T1,T2}
 4167 1260 1885     	    strh r0,[r3,#TIM_PSC]
 4168 1262 9985     	    strh r1,[r3,#TIM_ARR]
 4169 1264 80EA0000 	    eor r0,r0 // 0% duty cycle
 4170 1268 4FF03408 	    mov T1,#TIM_CCR1
 4171 126c 1146     	    mov r1,r2 
 4172 126e 0139     	1:  subs r1,r1,#1
 4173 1270 02D0     	    beq 2f 
 4174 1272 08F10408 	    add T1,#4
 4175 1276 FAE7     	    b 1b   
 4176 1278 23F80800 	2:  strh r0,[r3,T1] // duty cycle = 0.
 4177              	    // set counter mode 
 4178 127c 4FF47F40 	    mov r0,#0xff00 // mask to clear mode field
 4179 1280 4FF06808 	    mov T1,#0x68 // PWM mode 6, preload enabled  
 4180 1284 12F0010F 	    tst r2,#1 // odd channel?
 4181 1288 03D1     	    bne 1f 
 4182 128a 4FEA1020 	    lsr r0,#8  // shift mask for even channel
 4183 128e 4FEA0828 	    lsl T1,#8  // shift mode for even channel 
 4184 1292 4FF01809 	1:  mov  T2,#TIM_CCMR1  //channel 1,2
 4185 1296 032A     	    cmp r2,#3
 4186 1298 01D4     	    bmi 2f 
 4187 129a 4FF01C09 	    mov T2,#TIM_CCMR2 // channel 3,4
 4188 129e 33F80910 	2:  ldrh r1,[r3,T2]
 4189 12a2 01EA0001 	    and r1,r0 // clear bit field
 4190 12a6 41EA0801 	    orr r1,T1 // set mode
 4191 12aa 23F80910 	    strh r1,[r3,T2]
 4192              	    // enable OC output 
 4193 12ae 4FF00100 	    mov r0,#1 
 4194 12b2 4FF00F08 	    mov T1,#15 
 4195 12b6 1146     	    mov r1,r2  
 4196 12b8 0139     	2:  subs r1,r1,#1 
 4197 12ba 04D0     	    beq 3f 
 4198 12bc 4FEA0010 	    lsl r0,#4
 4199 12c0 4FEA0818 	    lsl T1,#4
 4200 12c4 F8E7     	    b 2b
 4201 12c6 6FEA0808 	3:  mvn T1,T1 
 4202 12ca 198C     	    ldrh r1,[r3,#TIM_CCER]
 4203 12cc 01EA0801 	    and r1,T1 // clear bit field 
 4204 12d0 41EA0001 	    orr r1,r0 // set bit fiel new value 
 4205 12d4 1984     	    strh r1,[r3,#TIM_CCER]
 4206              	    // enable counter 
 4207 12d6 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4208 12da 1988     	    ldrh r1,[r3,TIM_CR1]
 4209 12dc 41EA0001 	    orr r1,r0
 4210 12e0 1980     	    strh r1,[r3,TIM_CR1]
 4211              	    // generate a reload event 
 4212 12e2 4FF00100 	    mov r0,#1 
 4213 12e6 9882     	    strh r0,[r3,TIM_EGR]
 4214 12e8 BDE80003 	    pop {T1,T2}
 4215 12ec 7047     	    _RET 
 4216              	
ARM GAS  tinyBasic.s 			page 111


 4217              	/*********************************
 4218              	    pwm_dc 
 4219              	    set pwm duty cycle 
 4220              	    input:
 4221              	      r0   CCR value, i.e duty cycle 
 4222              	      r1   channel 
 4223              	      r2   TIMER_BASE_ADDR 
 4224              	    use:
 4225              	
 4226              	************************************/
 4227 12ee 00BF     	    _FUNC pwm_dc 
 4228 12f0 2DE90003 	    push {T1,T2}
 4229 12f4 8946     	    mov T2,r1 
 4230 12f6 4FF03408 	    mov T1,#TIM_CCR1 
 4231 12fa 0139     	0:  subs r1,#1
 4232 12fc 02D0     	    beq 1f 
 4233 12fe 08F10408 	    add T1,#4
 4234 1302 FAE7     	    b 0b
 4235 1304 22F80800 	1:  strh r0,[r2,T1]
 4236              	    // trigger an update even 
 4237 1308 4FF00200 	    mov r0,#2
 4238 130c B9F10109 	1:  subs T2,#1 
 4239 1310 02D0     	    beq 2f 
 4240 1312 4FEA4000 	    lsl r0,#1
 4241 1316 F9E7     	    b 1b 
 4242 1318 9082     	2:  strh r0,[r2,#TIM_EGR]
 4243 131a BDE80003 	    pop {T1,T2}
 4244 131e 7047     	    _RET 
 4245              	
 4246              	/*********************************
 4247              	  BASIC: SERVO_OFF channel 
 4248              	  disable servo-motor channel
 4249              	*********************************/
 4250              	    _FUNC servo_off 
 4251 1320 00B5FFF7 	    _CALL expression 
 4251      FEFF5DF8 
 4251      04EB
 4252 132a 1B28     	    cmp r0,#TK_INTGR
 4253 132c 7FF4FEAF 	    bne syntax_error
 4254 1330 0129     	    cmp r1,#1
 4255 1332 03D5     	    bpl 1f 
 4256 1334 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4257 1338 FFF7FEBF 	    b tb_error 
 4258 133c 0729     	1:  cmp r1,#7
 4259 133e F9D5     	    bpl 0b 
 4260 1340 A1F10101 	    sub r1,#1 // channel {0..5}
 4261 1344 4FEA0111 	    lsl r1,#4 // channel*16
 4262 1348 DFF8A437 	    ldr r3,=servo_param 
 4263 134c 0B44     	    add r3,r1 
 4264              	    // reconfigure GPIO 
 4265 134e 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4266 1352 53F8041B 	    ldr r1,[r3],#4 // GPIO pin 
 4267 1356 4FF01002 	    mov r2,#16 // INPUT_PD mode 
 4268 135a 00B5FFF7 	    _CALL gpio_config
 4268      6CFB5DF8 
 4268      04EB
 4269 1364 53F8040B 	    ldr r0,[r3],#4 // TIMER_BASE_ADDR
ARM GAS  tinyBasic.s 			page 112


 4270 1368 1968     	    ldr r1,[r3] // oc channel 
 4271 136a A1F10101 	    sub r1,#1 
 4272 136e 4FEA0111 	    lsl r1,#4 
 4273 1372 4FF00F02 	    mov r2,#0xf 
 4274 1376 02FA01F2 	    lsl r2,r1 
 4275 137a 6FEA0202 	    mvn r2,r2 
 4276 137e 018C     	    ldrh r1,[r0,#TIM_CCER]
 4277 1380 01EA0201 	    and r1,r2 
 4278 1384 0184     	    strh r1,[r0,#TIM_CCER]
 4279 1386 7047     	    _RET 
 4280              	
 4281              	
 4282              	/*********************************
 4283              	  BASIC: SERVO_POS channel,value  
 4284              	  set servo position 
 4285              	*********************************/
 4286              	    _FUNC servo_pos 
 4287 1388 4FF00200 	    mov r0,#2
 4288 138c 00B5FFF7 	    _CALL arg_list 
 4288      FEFF5DF8 
 4288      04EB
 4289 1396 DCF80410 	    ldr r1,[DP,#4] // servo channel 
 4290 139a 0729     	    cmp r1,#7
 4291 139c 03D4     	    bmi 1f 
 4292 139e 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 4293 13a2 FFF7FEBF 	    b tb_error 
 4294 13a6 DFF84837 	1:  ldr r3,=servo_param 
 4295 13aa 0139     	    subs r1,#1
 4296 13ac 4FEA0111 	    lsl r1,#4
 4297 13b0 01F10801 	    add r1,#8
 4298 13b4 0B44     	    add r3,r1   
 4299 13b6 53F8042B 	2:  ldr r2,[r3],#4 // TIMER_BASE_ADR
 4300 13ba 1968     	    ldr r1,[r3] // oc channel 
 4301 13bc 5CF8040B 	    _POP r0 // set value 
 4302 13c0 0CF1040C 	    add DP,#4 // drop servo channel 
 4303 13c4 00B5FFF7 	    _CALL pwm_dc 
 4303      93FF5DF8 
 4303      04EB
 4304 13ce 7047     	    _RET 
 4305              	
 4306              	
 4307              	/*********************************
 4308              	  BASIC: SLEEP 
 4309              	  place MCU lowest power mode 
 4310              	  wait for external interrpt or
 4311              	  reset.
 4312              	*********************************/
 4313              	    _FUNC sleep
 4314 13d0 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4314      CEF20000 
 4315 13d8 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4316 13dc 0160     	    str r1,[r0]
 4317 13de 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4317      C4F20000 
 4318 13e6 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4319 13ea 0160     	    str r1,[r0]
 4320 13ec 20BF     	    wfe 
ARM GAS  tinyBasic.s 			page 113


 4321 13ee 7047     	    _RET 
 4322              	
 4323              	/************************************
 4324              	  BASIC: SPC(expr)
 4325              	  mov cursor right expr spaces 
 4326              	***********************************/
 4327              	    _FUNC spc 
 4328 13f0 4FF00100 	    mov r0,#1
 4329 13f4 00B5FFF7 	    _CALL func_args 
 4329      FEFF5DF8 
 4329      04EB
 4330 13fe 206C     	    ldr r0,[UPP,#FLAGS]
 4331 1400 10F0800F 	    tst r0,#FPRINT 
 4332 1404 5CF8040B 	    _POP r0 
 4333 1408 04D0     	    beq 9f 
 4334 140a 00B5FFF7 	    _CALL spaces 
 4334      FEFF5DF8 
 4334      04EB
 4335 1414 7047     	9:  _RET 
 4336              	
 4337              	/**********************************
 4338              	  BASIC: SPI_DSEL channel 
 4339              	  deselect SPI channel 
 4340              	**********************************/
 4341 1416 00BF     	    _FUNC spi_deselect 
 4342 1418 00B5FFF7 	    _CALL expression 
 4342      FEFF5DF8 
 4342      04EB
 4343 1422 1B28     	    cmp r0,#TK_INTGR
 4344 1424 7FF4FEAF 	    bne syntax_error 
 4345 1428 DFF8C836 	    ldr r3,=spi_param 
 4346 142c A1F10101 	    sub r1,#1
 4347 1430 4FF01802 	    mov r2,#24
 4348 1434 02FB01F1 	    mul r1,r2
 4349 1438 0B44     	    add r3,r1
 4350 143a 1A46     	    mov r2,r3 
 4351 143c 1B68     	    ldr r3,[R3]
 4352 143e 1888     	    ldrh r0,[r3]
 4353              	    // clear SPI_CR1_SPE bit 
 4354 1440 6FF04001 	    mvn r1,#(1<<6) // SPE 
 4355 1444 00EA0100 	    and r0,r1
 4356 1448 1880     	    strh r0,[R3]
 4357              	    // set NSS output high 
 4358 144a 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR
 4359 144c 9168     	    ldr r1,[r2,#8] // NSS pin 
 4360 144e 4FF00100 	    mov r0,#1 
 4361 1452 00FA01F0 	    lsl r0,r1 
 4362 1456 1861     	    str r0,[R3,#GPIO_BSRR] 
 4363 1458 7047     	    _RET 
 4364              	
 4365              	/**********************************
 4366              	  BASIC: SPI_INIT  channel,BR 
 4367              	  enable SPI channel 1|2
 4368              	*********************************/
 4369 145a 00BF     	    _FUNC spi_init 
 4370 145c 4FF00200 	    mov r0,#2
 4371 1460 00B5FFF7 	    _CALL arg_list
ARM GAS  tinyBasic.s 			page 114


 4371      FEFF5DF8 
 4371      04EB
 4372              	    // enable peripheral clock 
 4373 146a BCE80003 	    ldmia DP!,{T1,T2} // T1=BR, T2=channel 
 4374 146e 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 4374      C4F20201 
 4375 1476 4FF01800 	    mov r0,#RCC_APB2ENR
 4376 147a 4FF48053 	    mov r3,#(1<<12) // SPI1EN bit 12 
 4377 147e B9F1010F 	    cmp T2,#1
 4378 1482 03D0     	    beq 1f 
 4379 1484 00F10400 	    add r0,#4 //RCC_APB1ENR
 4380 1488 4FEA8303 	    lsl r3,#2 // SPI2EN bit 14 
 4381 148c 0A58     	1:  ldr r2,[r1,r0]
 4382 148e 42EA0302 	    orr r2,r3 
 4383 1492 0A50     	    str r2,[r1,r0]
 4384              	    // spi config 
 4385 1494 DFF85C36 	    ldr r3,=spi_param 
 4386 1498 A9F10101 	    sub r1,T2,#1 
 4387 149c 4FF01802 	    mov r2,#24
 4388 14a0 02FB01F1 	    mul r1,r2
 4389 14a4 0B44     	    add r3,r1 
 4390 14a6 53F8041B 	    ldr r1,[r3],#4
 4391              	    // SPI_CR2
 4392 14aa 4FF00400 	    mov r0,#(1<<2)
 4393 14ae 8880     	    strh r0,[r1,#SPI_CR2] // SSOE
 4394              	    // SPI_CR1 as MSTR  
 4395 14b0 4FEAC808 	    lsl T1,#3
 4396 14b4 40EA0800 	    orr r0,T1 
 4397 14b8 0880     	    strh r0,[r1,#SPI_CR1] 
 4398              	    // configure GPIO pins  
 4399 14ba 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4400 14be 8046     	    mov T1,r0 
 4401 14c0 53F8041B 	    ldr r1,[r3],#4 // NSS pin 
 4402 14c4 8946     	    mov T2,r1 
 4403 14c6 4FF00102 	    mov r2,#OUTPUT_PP 
 4404 14ca 00B5FFF7 	    _CALL gpio_config //NSS  
 4404      B4FA5DF8 
 4404      04EB
 4405              	    // set NSS high 
 4406 14d4 4046     	    mov r0,T1 
 4407 14d6 4946     	    mov r1,T2 
 4408 14d8 4FF00102 	    mov r2,#1 
 4409 14dc 02FA01F2 	    lsl r2,r1 
 4410 14e0 0261     	    str r2,[r0,#GPIO_BSRR]
 4411 14e2 4046     	    mov r0,T1 
 4412 14e4 53F8041B 	    ldr r1,[r3],#4 
 4413 14e8 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4414 14ec 00B5FFF7 	    _CALL gpio_config  // SCK
 4414      A3FA5DF8 
 4414      04EB
 4415 14f6 4046     	    mov r0,T1
 4416 14f8 53F8041B 	    ldr r1,[r3],#4 
 4417 14fc 4FF00402 	    mov r2,#INPUT_FLOAT
 4418 1500 00B5FFF7 	    _CALL gpio_config  //MISO 
 4418      99FA5DF8 
 4418      04EB
 4419 150a 4046     	    mov r0,T1 
ARM GAS  tinyBasic.s 			page 115


 4420 150c 1968     	    ldr r1,[R3] 
 4421 150e 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4422 1512 00B5FFF7 	    _CALL gpio_config // MOSI 
 4422      90FA5DF8 
 4422      04EB
 4423 151c 7047     	    _RET 
 4424              	
 4425              	
 4426              	spi_param: 
 4427 151e 00300140 	  .word SPI1_BASE_ADR,GPIOA_BASE_ADR,4,5,6,7   // GPIO pins order NSS,SCK,MISO,MOSI
 4427      00080140 
 4427      04000000 
 4427      05000000 
 4427      06000000 
 4428 1536 00380040 	  .word SPI2_BASE_ADR,GPIOB_BASE_ADR,12,13,14,15 // GPIO pins order NSS,SCK,MISO,MOSI
 4428      000C0140 
 4428      0C000000 
 4428      0D000000 
 4428      0E000000 
 4429              	
 4430              	/***************************************
 4431              	  BASIC: SPI_READ (channel) 
 4432              	  read 1 byte from channel 
 4433              	  use:
 4434              	**************************************/
 4435 154e 00BF     	    _FUNC spi_read
 4436 1550 0CB4     	    push {r2,r3}
 4437 1552 4FF00100 	    mov r0,#1
 4438 1556 00B5FFF7 	    _CALL func_args 
 4438      FEFF5DF8 
 4438      04EB
 4439 1560 5CF8041B 	    _POP r1 
 4440 1564 A1F10101 	    sub r1,#1
 4441 1568 4FF01802 	    mov r2,#24
 4442 156c 02FB01F1 	    mul r1,r2 
 4443 1570 DFF88035 	    ldr r3,=spi_param 
 4444 1574 0B44     	    add r3,r1 
 4445 1576 1B68     	    ldr r3,[R3]
 4446 1578 80EA0000 	    eor r0,r0 
 4447 157c 9881     	    strh r0,[r3,#SPI_DR]
 4448 157e 9868     	0:  ldr r0,[r3,#SPI_SR]
 4449 1580 10F0010F 	    tst r0,#1
 4450 1584 FBD0     	    beq 0b
 4451 1586 9989     	    ldrh r1,[r3,#SPI_DR]
 4452 1588 01F0FF01 	    and r1,#255 
 4453 158c 4FF01B00 	    mov r0,#TK_INTGR  
 4454 1590 0CBC     	    pop {r2,r3}
 4455 1592 7047     	    _RET 
 4456              	
 4457              	/********************************
 4458              	  BASIC: SPI_SELECT channel 
 4459              	  activate channel 
 4460              	  use:
 4461              	*******************************/
 4462              	    _FUNC spi_select
 4463 1594 00B5FFF7 	    _CALL expression 
 4463      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 116


 4463      04EB
 4464 159e 1B28     	    cmp r0,#TK_INTGR
 4465 15a0 7FF4FEAF 	    bne syntax_error
 4466 15a4 DFF84C35 	    ldr r3,=spi_param 
 4467 15a8 A1F10101 	    sub r1,#1 
 4468 15ac 4FF01802 	    mov r2,#24
 4469 15b0 02FB01F1 	    mul r1,r2 
 4470 15b4 0B44     	    add r3,r1 
 4471 15b6 1A46     	    mov r2,r3 
 4472 15b8 1B68     	    ldr r3,[R3]
 4473              	    // set SPI_CR1_SPE bit 
 4474 15ba 1868     	    ldr r0,[R3,#SPI_CR1]
 4475 15bc 4FF04001 	    mov r1,#(1<<6) // SPE 
 4476 15c0 40EA0100 	    orr r0,r1 
 4477 15c4 1860     	    str r0,[r3,#SPI_CR1] 
 4478              	    // set NSS low  
 4479 15c6 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR 
 4480 15c8 9168     	    ldr r1,[r2,#8] // GPIO PIN 
 4481 15ca 4FF48030 	    mov r0,#(1<<16) 
 4482 15ce 00FA01F0 	    lsl r0,r1 
 4483 15d2 1861     	    str r0,[R3,#GPIO_BSRR]
 4484 15d4 7047     	    _RET 
 4485              	
 4486              	/*******************************
 4487              	  BASIC: SPI_WRITE channel,count,*buffer 
 4488              	  write bytes to spi channel 
 4489              	  use:
 4490              	********************************/
 4491 15d6 00BF     	    _FUNC spi_write
 4492 15d8 4FF00300 	    mov r0,#3
 4493 15dc 00B5FFF7 	    _CALL arg_list 
 4493      FEFF5DF8 
 4493      04EB
 4494 15e6 BCE80E00 	    ldmia DP!,{r1,r2,r3} // *buffer, count, channel 
 4495 15ea A3F10100 	    sub r0,r3,#1 
 4496 15ee 4FF01803 	    mov r3,#24
 4497 15f2 03FB00F0 	    mul r0,r3  
 4498 15f6 DFF8FC34 	    ldr r3,=spi_param 
 4499 15fa 0344     	    add r3,r0 
 4500 15fc 1B68     	    ldr r3,[r3] //SPI_BASE_ADR 
 4501 15fe 11F8010B 	1:  ldrb r0,[r1],#1
 4502 1602 9881     	    strh r0,[r3,#SPI_DR]
 4503 1604 1889     	2:  ldrh r0,[r3,#SPI_SR]
 4504 1606 10F0020F 	    tst r0,#2
 4505 160a FBD0     	    beq 2b 
 4506 160c 013A     	    subs r2,#1 
 4507 160e F6D1     	    bne 1b 
 4508              	    // wait BSY=0 completed 
 4509 1610 1889     	3:  ldrh r0,[r3,#SPI_SR]
 4510 1612 10F0800F 	    tst r0,#(1<<7)
 4511 1616 FBD1     	    bne 3b 
 4512 1618 D868     	    ldr r0,[r3,#SPI_DR]    
 4513 161a 7047     	    _RET 
 4514              	
 4515              	/******************************
 4516              	  BASIC: STOP 
 4517              	  stop program executre but 
ARM GAS  tinyBasic.s 			page 117


 4518              	  keep execution state for 
 4519              	  resume 
 4520              	******************************/
 4521              	    _FUNC stop
 4522 161c 206C10F0 	    _RTO 
 4522      010F03D1 
 4522      4FF00700 
 4522      FFF7FEBF 
 4523 162c 6068     	    ldr r0,[UPP,#COUNT]
 4524 162e 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4525 1632 206C     	    ldr r0,[UPP,#FLAGS]
 4526 1634 4FF00901 	    mov r1,#FRUN+FSTOP
 4527 1638 80EA0100 	    eor r0,r1
 4528 163c 2064     	    str r0,[UPP,#FLAGS]
 4529 163e 8AEA0A0A 	    eor IN,IN 
 4530 1642 8BEA0B0B 	    eor BPTR,BPTR 
 4531 1646 C4F804A0 	    str IN,[UPP,#COUNT]
 4532 164a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4533 164e C4F808A0 	    str IN,[UPP,#BASICPTR]
 4534 1652 4FF4A040 	    _MOV32 r0,RAM_END
 4534      C2F20000 
 4535 165a 8546     	    mov sp,r0
 4536 165c FFF7FEBF 	    b cmd_line 
 4537              	
 4538              	
 4539              	/**************************
 4540              	  BASIC: TAB(expr)
 4541              	  move cursor column expr 
 4542              	**************************/
 4543              	    _FUNC tab 
 4544 1660 4FF00100 	    mov r0,#1
 4545 1664 00B5FFF7 	    _CALL func_args  
 4545      FEFF5DF8 
 4545      04EB
 4546 166e 206C     	    ldr r0,[UPP,#FLAGS]
 4547 1670 10F0800F 	    tst r0,#FPRINT
 4548 1674 5CF8040B 	    _POP r0 
 4549 1678 04D0     	    beq 9f 
 4550 167a 00B5FFF7 	    _CALL cursor_x 
 4550      FEFF5DF8 
 4550      04EB
 4551 1684 7047     	9:  _RET 
 4552              	
 4553              	
 4554              	/**************************
 4555              	  BASIC: TICKS 
 4556              	  return msec counter
 4557              	**************************/  
 4558 1686 00BF     	    _FUNC get_ticks
 4559 1688 E169     	    ldr r1,[UPP,#TICKS]
 4560 168a 4FF01B00 	    mov r0,#TK_INTGR
 4561 168e 7047     	    _RET  
 4562              	
 4563              	/*************************
 4564              	  BASIC: TIMER expr 
 4565              	  set countdown timer 
 4566              	************************/
ARM GAS  tinyBasic.s 			page 118


 4567              	    _FUNC set_timer
 4568 1690 00B5FFF7 	    _CALL expression 
 4568      FEFF5DF8 
 4568      04EB
 4569 169a 1B28     	    cmp r0,#TK_INTGR
 4570 169c 7FF4FEAF 	    bne syntax_error 
 4571 16a0 2162     	    str r1,[UPP,#TIMER]
 4572 16a2 7047     	    _RET 
 4573              	
 4574              	/***************************
 4575              	  BASIC: TIMEOUT
 4576              	  check for timer expiration 
 4577              	  return -1 true || 0 false
 4578              	****************************/
 4579              	    _FUNC timeout
 4580 16a4 81EA0101 	    eor r1,r1 
 4581 16a8 206A     	    ldr r0,[UPP,#TIMER]
 4582 16aa 08B9     	    cbnz r0,9f 
 4583 16ac 6FEA0101 	    mvn r1,r1 
 4584 16b0 4FF01B00 	9:  mov r0,#TK_INTGR    
 4585 16b4 7047     	    _RET 
 4586              	
 4587              	/****************************************
 4588              	  BASIC:  TONE freq, duration 
 4589              	  play a tone with frequency freq and duration
 4590              	  in milliseconds
 4591              	***********************************************/
 4592 16b6 00BF     	    _FUNC tone
 4593 16b8 4FF00200 	    mov r0,#2
 4594 16bc 00B5FFF7 	    _CALL arg_list 
 4594      FEFF5DF8 
 4594      04EB
 4595 16c6 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4595      C4F20002 
 4596 16ce DCF80400 	    ldr r0,[DP,#4] // freq
 4597 16d2 4AF62021 	    _MOV32 r1,4500000
 4597      C0F24401 
 4598 16da B1FBF0F1 	    udiv r1,r0 
 4599 16de 9185     	    strh r1,[r2,#TIM_ARR]
 4600 16e0 4FEA5101 	    lsr r1,#1 
 4601 16e4 9186     	    strh r1,[r2,#TIM_CCR1]
 4602 16e6 4FF00100 	    mov r0,#1
 4603 16ea 1084     	    strh r0,[r2,#TIM_CCER]
 4604 16ec 1080     	    strh r0,[r2,#TIM_CR1]
 4605 16ee 908A     	    ldrh r0,[r2,#TIM_EGR]
 4606 16f0 40F00200 	    orr r0,#2 
 4607 16f4 9082     	    strh r0,[r2,#TIM_EGR] 
 4608 16f6 BCE80300 	    ldmia DP!,{r0,r1}
 4609              	    // pause duration  
 4610 16fa E169     	    ldr r1,[UPP,#TICKS]
 4611 16fc 0844     	    add r0,r1 
 4612 16fe E169     	1:  ldr r1,[UPP,#TICKS]
 4613 1700 8142     	    cmp r1,r0 
 4614 1702 FCD4     	    bmi 1b 
 4615              	    // stop tone 
 4616 1704 1088     	    ldrh r0,[R2,#TIM_CR1]
 4617 1706 80F00100 	    eor r0,#1 
ARM GAS  tinyBasic.s 			page 119


 4618 170a 1080     	    strh r0,[R2,#TIM_CR1]     
 4619 170c 7047     	    _RET 
 4620              	
 4621              	/************************************
 4622              	  BASIC: TONE_INIT 
 4623              	  initialize tone_generator
 4624              	  output on GPIOB:6 
 4625              	************************************/
 4626 170e 00BF     	    _FUNC tone_init 
 4627              	    // configure pin 
 4628 1710 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4628      C4F20100 
 4629 1718 4FF00601 	    mov r1,#6 // gpio pin 
 4630 171c 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4631 1720 00B5FFF7 	    _CALL gpio_config
 4631      89F95DF8 
 4631      04EB
 4632              	    // configure TIMER4 in PWM mode 
 4633 172a 4FF00F00 	    mov r0,#15 //PSC 
 4634 172e 4FF6FF71 	    mov r1,#65535 // ARR 
 4635 1732 4FF00102 	    mov r2,#1 // channel
 4636 1736 4FF40063 	    _MOV32 r3,TIMER4_BASE_ADR
 4636      C4F20003 
 4637 173e 9846     	    mov T1,r3
 4638 1740 00B5FFF7 	    _CALL pwm_config  
 4638      8BFD5DF8 
 4638      04EB
 4639              	    // tone off 
 4640 174a B8F80000 	    ldrh r0,[T1,#TIM_CR1]
 4641 174e 80F00100 	    eor r0,#1 
 4642 1752 A8F80000 	    strh r0,[T1,#TIM_CR1]     
 4643 1756 7047     	    _RET 
 4644              	
 4645              	
 4646              	/****************************************
 4647              	  BASIC: TRACE n 
 4648              	  enable execution trace 
 4649              	  0   ddisable
 4650              	  1   show current line#
 4651              	  2  show line#+data_stack
 4652              	  3  show line#+data_stack+main_stack 
 4653              	***************************************/
 4654              	    _FUNC trace 
 4655 1758 00B5FFF7 	    _CALL next_token 
 4655      FEFF5DF8 
 4655      04EB
 4656 1762 1B28     	    cmp r0,#TK_INTGR  
 4657 1764 7FF4FEAF 	    bne syntax_error 
 4658 1768 01F00301 	    and r1,#3 
 4659 176c C4F8DC10 	    str r1,[UPP,#TRACE_LEVEL]
 4660 1770 7047     	    _RET 
 4661              	
 4662              	
 4663              	/***************************
 4664              	  BASIC: UBOUND 
 4665              	  return last indice of @
 4666              	  output:
ARM GAS  tinyBasic.s 			page 120


 4667              	    r0  TK_INTGR 
 4668              	    r1  +int 
 4669              	**************************/
 4670 1772 00BF     	    _FUNC ubound
 4671 1774 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 4672 1778 D4F8E000 	    ldr r0,[UPP,#HERE]
 4673 177c A1EB0001 	    sub r1,r0 
 4674 1780 4FEA9101 	    lsr r1,#2
 4675 1784 4FF01B00 	    mov r0,#TK_INTGR 
 4676 1788 7047     	    _RET 
 4677              	
 4678              	/****************************
 4679              	  BASIC: UART_GETC(channel)
 4680              	  read a byte from uart 
 4681              	****************************/
 4682 178a 00BF     	    _FUNC ser_getc
 4683 178c 2DE90C01 	    push {r2,r3,T1}
 4684 1790 4FF00100 	    mov r0,#1 
 4685 1794 00B5FFF7 	    _CALL func_args
 4685      FEFF5DF8 
 4685      04EB
 4686 179e 5CF8040B 	    _POP r0 
 4687 17a2 4FF48848 	    _MOV32 T1,USART2_BASE_ADR 
 4687      C4F20008 
 4688 17aa 4FF06001 	    mov r1,#U2_RX_QUEUE 
 4689 17ae 4FF06402 	    mov r2,#U2_COUNT 
 4690 17b2 0228     	    cmp r0,#2 
 4691 17b4 05D0     	    beq 1f 
 4692 17b6 01F10801 	    add r1,#8  // U3_RX_QUEUE
 4693 17ba 02F10802 	    add r2,#8  // U3_COUNT  
 4694 17be 08F58068 	    add T1,#0x400 // USART3_BASE_ADR 
 4695 17c2 A058     	1:  ldr r0,[UPP,r2] // Ux_COUNT , wait for char 
 4696 17c4 0028     	    cmp r0,#0
 4697 17c6 FCD0     	    beq 1b   
 4698              	    // disable USART interrupt 
 4699 17c8 D8F80C30 	    ldr r3,[T1,#USART_CR1]
 4700 17cc 6FF02000 	    mvn r0,#1<<5
 4701 17d0 03EA0003 	    and r3,r0 
 4702 17d4 C8F80C30 	    str r3,[T1,#USART_CR1]
 4703              	    // decrement RX COUNT 
 4704 17d8 A058     	    ldr r0,[UPP,r2]
 4705 17da A0F10100 	    sub r0,#1 
 4706 17de A050     	    str r0,[UPP,r2]    
 4707              	    // extract char from queue 
 4708 17e0 6358     	    ldr r3,[UPP,r1] //queue 
 4709 17e2 03F0FF00 	    and r0,r3,#255
 4710 17e6 4FEA1323 	    lsr r3,#8 
 4711 17ea 6350     	    str r3,[UPP,r1]
 4712              	    // enable interrupt 
 4713 17ec D8F80C30 	    ldr r3,[T1,#USART_CR1]
 4714 17f0 43F02003 	    orr r3,#(1<<5)
 4715 17f4 C8F80C30 	    str r3,[T1,#USART_CR1]
 4716 17f8 0146     	    mov r1,r0 
 4717 17fa 4FF01B00 	    mov r0,#TK_INTGR 
 4718 17fe BDE80C01 	    pop {r2,r3,T1}
 4719 1802 7047     	    _RET 
 4720              	
ARM GAS  tinyBasic.s 			page 121


 4721              	
 4722              	/********************************
 4723              	  BASIC: UART_INIT channel,baud 
 4724              	  channel {2,3}
 4725              	  use:
 4726              	    T1 channel 
 4727              	    T2 *parameters 
 4728              	********************************/
 4729              	    _FUNC ser_init 
 4730 1804 4FF00200 	    mov r0,#2 
 4731 1808 00B5FFF7 	    _CALL arg_list 
 4731      FEFF5DF8 
 4731      04EB
 4732 1812 BCE80003 	    ldmia DP!,{T1,T2} // T1=BAUD,T2=channel 
 4733              	    // enable IRQ in NVIC_ISERxx 
 4734 1816 4FF02600 	    mov r0,#IRQ_USART2 
 4735 181a B9F1020F 	    cmp T2,#2 
 4736 181e 01D0     	    beq 1f 
 4737 1820 4FF02700 	    mov r0,#IRQ_USART3  
 4738 1824 00B5FFF7 	1:  _CALL nvic_enable_irq 
 4738      FEFF5DF8 
 4738      04EB
 4739 182e A9F10209 	    sub T2,#2 
 4740 1832 4B46     	    mov r3,T2 // 0|1
 4741 1834 4FEA0919 	    lsl T2,#4
 4742 1838 AF48     	    ldr r0,=uart_param 
 4743 183a 8144     	    add T2,r0  // parameters address 
 4744              	    // gpio config 
 4745 183c D9F80400 	    ldr r0,[T2,#4] //GPIO_BASE_ADR
 4746 1840 D9F80810 	    ldr r1,[T2,#8] // tx pin 
 4747 1844 4FF00902 	    mov r2,#OUTPUT_AFPP //pin mode
 4748 1848 00B5FFF7 	    _CALL gpio_config 
 4748      F5F85DF8 
 4748      04EB
 4749 1852 D9F80400 	    ldr r0,[T2,#4] // GPIO_BASE_ADR
 4750 1856 D9F80C10 	    LDR R1,[T2,#12] // rx pin 
 4751 185a 4FF01102 	    mov r2,#INPUT_PU // mode 
 4752 185e 00B5FFF7 	    _CALL gpio_config 
 4752      EAF85DF8 
 4752      04EB
 4753              	    // config usart no flow control 1 stop, no parity 
 4754              	    // first enable clock 
 4755 1868 4FF40030 	    mov r0,#(1<<17) // USART2EN in APB1ENR 
 4756 186c 0BB1     	    cbz r3,1f
 4757 186e 4FEA4000 	    lsl r0,#1 // USART3EN in APB1ENR 
 4758 1872 4FF48052 	1:  _MOV32 r2,RCC_BASE_ADR 
 4758      C4F20202 
 4759 187a D169     	    ldr r1,[r2,#RCC_APB1ENR]
 4760 187c 41EA0001 	    orr r1,r0 
 4761 1880 D161     	    str r1,[r2,#RCC_APB1ENR]
 4762 1882 D9F80020 	    ldr r2,[T2] // USART_BASE_ADR 
 4763              	    // baud rate 
 4764 1886 4046     	    mov r0,T1 
 4765 1888 1146     	    mov r1,r2 
 4766 188a 00B500F0 	    _CALL uart_baud 
 4766      06F85DF8 
 4766      04EB
ARM GAS  tinyBasic.s 			page 122


 4767              	    // enable usart 
 4768 1894 42F22C00 	    mov r0,#(1<<2)+(1<<3)+(1<<5)+(1<<13) //RE+TE+RXNEIE+UE
 4769 1898 D060     	    str r0,[r2,#USART_CR1]
 4770 189a 7047     	    _RET 
 4771              	
 4772              	/*************************************
 4773              	   uart_baud
 4774              	   set USART baud rate for USART2|3
 4775              	   input:
 4776              	      r0  baud 
 4777              	      r1  usart_base_adr 
 4778              	*************************************/
 4779              	    _FUNC uart_baud
 4780 189c 0CB4     	    push {r2,r3} 
 4781 189e 0346     	    mov r3,r0 // baud rate
 4782              	    // compute divisor values 
 4783 18a0 45F21050 	    _MOV32 r0,2250000 // Fpck/16 
 4783      C0F22200 
 4784 18a8 0246     	    mov r2,r0   // keep a copy 
 4785 18aa B0FBF3F0 	    udiv r0,r3  // Fck/baud_rate 
 4786 18ae 4FEA0010 	    lsl r0,#4 // divisor mantissa bits [15:4] 
 4787 18b2 8860     	    str r0,[r1,#USART_BRR]
 4788 18b4 4FEA1010 	    lsr r0,#4 
 4789 18b8 03FB00F0 	    mul r0,r3 
 4790 18bc A2EB0002 	    sub r2,r0 // division remainder  
 4791 18c0 4FEA0212 	    lsl r2,#4 // R*16 
 4792 18c4 B2FBF3F2 	    udiv r2,r3 // fraction=R*16/baud_rate 
 4793 18c8 8868     	    ldr r0,[r1,#USART_BRR] 
 4794 18ca 40EA0200 	    orr r0,r2 // mantissa[15:4],fraction[3:0] 
 4795 18ce 8860     	    str r0,[r1,#USART_BRR]
 4796 18d0 0CBC     	    pop {r2,r3} 
 4797 18d2 7047     	    _RET 
 4798              	
 4799              	
 4800              	uart_param: // USART_BASE_ADR,GPIO_BASE_ADR,tx_pin,rx_pin
 4801 18d4 00440040 	    .word USART2_BASE_ADR,GPIOA_BASE_ADR,2,3 //USART2 
 4801      00080140 
 4801      02000000 
 4801      03000000 
 4802 18e4 00480040 	    .word USART3_BASE_ADR,GPIOB_BASE_ADR,10,11 //USART3
 4802      000C0140 
 4802      0A000000 
 4802      0B000000 
 4803              	
 4804              	
 4805              	/********************************
 4806              	  BASIC: UART_PUTC channel,char 
 4807              	********************************/
 4808              	    _FUNC ser_putc 
 4809 18f4 4FF00200 	    mov r0,#2
 4810 18f8 00B5FFF7 	    _CALL arg_list
 4810      FEFF5DF8 
 4810      04EB
 4811 1902 BCE80600 	    ldmia DP!,{r1,r2}
 4812 1906 A2F10202 	    sub r2,#2 
 4813 190a 4FEA0212 	    lsl r2,#4 
 4814 190e 7A48     	    ldr r0,=uart_param 
ARM GAS  tinyBasic.s 			page 123


 4815 1910 0244     	    add r2,r0 
 4816 1912 1268     	    ldr r2,[r2]
 4817 1914 1068     	1:  ldr r0,[r2,#USART_SR]
 4818 1916 10F0800F 	    tst r0,#(1<<7) // TXE
 4819 191a FBD0     	    beq 1b
 4820 191c 5160     	    str r1,[r2,#USART_DR]     
 4821 191e 7047     	    _RET 
 4822              	
 4823              	
 4824              	/****************************
 4825              	  BASIC: UFLASH 
 4826              	  return user flash address
 4827              	*****************************/
 4828              	    _FUNC uflash
 4829 1920 7249     	    ldr r1,=user
 4830 1922 4FF01B00 	    mov r0,#TK_INTGR 
 4831 1926 7047     	    _RET 
 4832              	
 4833              	
 4834              	/************************************
 4835              	  BASIC: UNTIL relation 
 4836              	  close a DO..UNTIL loop 
 4837              	  loop until relation come true 
 4838              	************************************/
 4839              	    _FUNC until
 4840 1928 00B5FFF7 	    _CALL relation 
 4840      FEFF5DF8 
 4840      04EB
 4841 1932 11B1     	    cbz r1,9f
 4842 1934 0CF1080C 	    add DP,#8
 4843 1938 7047     	    _RET  
 4844 193a 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4845 193e 9BF80200 	    ldrb r0,[BPTR,#2]
 4846 1942 6060     	    str r0,[UPP,#COUNT]
 4847 1944 7047     	    _RET 
 4848              	
 4849              	/*************************************
 4850              	  BASIC: WAIT addr,expr1[,expr2] 
 4851              	  wait until *addr&expr1 is not null 
 4852              	  or until (*addr&expr1)^expr2 is null 
 4853              	***************************************/
 4854 1946 00BF     	    _FUNC wait
 4855 1948 4FF00200 	    mov r0,#2
 4856 194c 00B5FFF7 	    _CALL arg_list 
 4856      FEFF5DF8 
 4856      04EB
 4857 1956 0228     	    cmp r0,#2
 4858 1958 01D0     	    beq 2f 
 4859 195a 0328     	    cmp r0,#3
 4860 195c 05D0     	    beq 4f
 4861 195e BCE80300 	2:  ldmia DP!,{r0,r1}
 4862 1962 0A88     	3:  ldrh r2,[r1]
 4863 1964 0240     	    ands r2,r0 
 4864 1966 FCD0     	    beq 3b 
 4865 1968 06E0     	    b 9f 
 4866 196a BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4867 196e 1388     	5:  ldrh r3,[r2]
ARM GAS  tinyBasic.s 			page 124


 4868 1970 83EA0003 	    eor r3,r0
 4869 1974 0B40     	    ands r3,r1 
 4870 1976 FAD0     	    beq 5b 
 4871 1978 7047     	9:  _RET 
 4872              	
 4873              	/*********************************************
 4874              	  BASIC: WORDS 
 4875              	  print list of BASIC WORDS in dictionary 
 4876              	  use:
 4877              	    r0,r1 temp
 4878              	    r2  words counter 
 4879              	    T1  name field pointer 
 4880              	    T2  cursor column counter 
 4881              	********************************************/
 4882 197a 00BF     	    _FUNC words
 4883 197c 206C10F0 	    _CLO 
 4883      010F03D0 
 4883      4FF00700 
 4883      FFF7FEBF 
 4884 198c DFF86C81 	    ldr T1,=kword_dict
 4885 1990 89EA0909 	    eor T2,T2
 4886 1994 82EA0202 	    eor r2,r2  
 4887              	1:  
 4888 1998 4046     	    mov r0,T1
 4889 199a 00B5FFF7 	    _CALL strlen
 4889      FEFF5DF8 
 4889      04EB
 4890 19a4 F0B1     	    cbz r0,4f 
 4891 19a6 8144     	    add T2,r0 
 4892 19a8 B9F1460F 	    cmp T2,#70 
 4893 19ac 06D4     	    bmi 2f
 4894 19ae 89EA0909 	    eor T2,T2  
 4895 19b2 00B5FFF7 	    _CALL cr 
 4895      FEFF5DF8 
 4895      04EB
 4896 19bc 4046     	2:  mov r0,T1 
 4897 19be 00B5FFF7 	    _CALL uart_puts 
 4897      FEFF5DF8 
 4897      04EB
 4898 19c8 4FF02000 	    mov r0,#SPACE
 4899 19cc 09F10109 	    add T2,#1  
 4900 19d0 00B5FFF7 	    _CALL uart_putc
 4900      FEFF5DF8 
 4900      04EB
 4901 19da 02F10102 	    add r2,#1 
 4902 19de 58F80C8C 	    ldr T1,[T1,#-12] // follow link
 4903 19e2 D9E7     	    b 1b 
 4904 19e4 19EA0909 	4:  ands T2,T2
 4905 19e8 04D0     	    beq 5f 
 4906 19ea 00B5FFF7 	    _CALL cr 
 4906      FEFF5DF8 
 4906      04EB
 4907              	5:  // print words count 
 4908 19f4 1046     	    mov r0,r2 
 4909 19f6 4FF00A01 	    mov r1,#10
 4910 19fa 00B5FFF7 	    _CALL print_int 
 4910      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 125


 4910      04EB
 4911 1a04 3E48     	    ldr r0,=dict_words
 4912 1a06 00B5FFF7 	    _CALL uart_puts  
 4912      FEFF5DF8 
 4912      04EB
 4913 1a10 7047     	9:  _RET 
 4914              	
 4915 1a12 776F7264 	dict_words: .asciz "words in dictionary" 
 4915      7320696E 
 4915      20646963 
 4915      74696F6E 
 4915      61727900 
 4916              	
 4917              	
 4918              	/**************************************
 4919              	  BASIC: XOR(expr1,expr2)
 4920              	  binary exclusive or between 2 expressions
 4921              	**************************************/
 4922 1a26 00BF     	    _FUNC bit_xor
 4923 1a28 4FF00200 	    mov r0,#2
 4924 1a2c 00B5FFF7 	    _CALL func_args
 4924      FEFF5DF8 
 4924      04EB
 4925 1a36 5CF8040B 	    _POP r0
 4926 1a3a 5CF8041B 	    _POP r1 
 4927 1a3e 81EA0001 	    eor r1,r0 
 4928 1a42 4FF01B00 	    mov r0,#TK_INTGR
 4929 1a46 7047     	    _RET 
 4930              	
 4931              	/***************************************
 4932              	    BASIC: XPOS 
 4933              	    report cursor column on terminal 
 4934              	***************************************/
 4935              	    _FUNC xpos 
 4936 1a48 00B5FFF7 	    _CALL get_curpos
 4936      FEFF5DF8 
 4936      04EB
 4937 1a52 4FF01B00 	    mov r0,#TK_INTGR
 4938 1a56 7047     	    _RET 
 4939              	
 4940              	/***********************************
 4941              	    BASIC: YPOS 
 4942              	    report cursor line on terminal 
 4943              	***********************************/
 4944              	    _FUNC ypos 
 4945 1a58 00B5FFF7 	    _CALL get_curpos 
 4945      FEFF5DF8 
 4945      04EB
 4946 1a62 0146     	    mov r1,r0 
 4947 1a64 4FF01B00 	    mov r0,#TK_INTGR
 4948 1a68 7047     	    _RET 
 4949              	
 4950              	
 4951              	/**********************************
 4952              	     argument stack manipulation
 4953              	**********************************/
 4954              	
ARM GAS  tinyBasic.s 			page 126


 4955              	/**********************************
 4956              	  BASIC PUSH expr[,expr] 
 4957              	  push integers on stack 
 4958              	*********************************/
 4959 1a6a 00BF     	    _FUNC cmd_push
 4960 1a6c 4FF00100 	    mov r0,#1
 4961 1a70 00B5FFF7 	    _CALL arg_list
 4961      FEFF5DF8 
 4961      04EB
 4962 1a7a 7047     	    _RET 
 4963              	
 4964              	/********************************
 4965              	  BASIC: POP 
 4966              	  pop an integer out of stack 
 4967              	********************************/    
 4968              	    _FUNC fn_pop 
 4969 1a7c 5CF8041B 	    _POP r1 
 4970 1a80 4FF01B00 	    mov r0,#TK_INTGR 
 4971 1a84 7047     	    _RET 
 4972              	
 4973              	/*******************************
 4974              	  BASIC: DROP n 
 4975              	  discard n integer from stack
 4976              	*******************************/
 4977 1a86 00BF     	    _FUNC drop 
 4978 1a88 00B5FFF7 	    _CALL expression 
 4978      FEFF5DF8 
 4978      04EB
 4979 1a92 1B28     	    cmp r0,#TK_INTGR 
 4980 1a94 7FF4FEAF 	    bne syntax_error 
 4981 1a98 4FF00400 	    mov r0,#4 
 4982 1a9c 01FB00F0 	    mul r0,r1 
 4983 1aa0 8444     	    add DP,r0 
 4984 1aa2 7047     	    _RET 
 4985              	
 4986              	/********************************
 4987              	  BASIC: GET(expr) 
 4988              	  retreive nth element from stack 
 4989              	********************************/
 4990              	    _FUNC get 
 4991 1aa4 4FF00100 	    mov r0,#1
 4992 1aa8 00B5FFF7 	    _CALL func_args
 4992      FEFF5DF8 
 4992      04EB
 4993 1ab2 5CF8040B 	    _POP r0
 4994 1ab6 4FEA8000 	    lsl r0,#2 
 4995 1aba 5CF80010 	    ldr r1,[DP,r0]
 4996 1abe 4FF01B00 	    mov r0,#TK_INTGR
 4997 1ac2 7047     	    _RET 
 4998              	
 4999              	/*************************************
 5000              	  BASIC: PUT slot,value  
 5001              	  store value at nth position on stack
 5002              	**************************************/
 5003              	    _FUNC put
 5004 1ac4 4FF00200 	    mov r0,#2
 5005 1ac8 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 127


 5005      FEFF5DF8 
 5005      04EB
 5006 1ad2 BCE80300 	    ldmia DP!,{r0,r1} // value,slot 
 5007 1ad6 4FEA8101 	    lsl r1,#2 
 5008 1ada 4CF80100 	    str r0,[DP,r1]
 5009 1ade 7047     	    _RET 
 5010              	
 5011              	
 5012              	  .section .rodata.user
 5013              	  .p2align 10 
 5014              	user:
 5015 0000 FFFFFFFF 	  .space 1024,255
 5015      FFFFFFFF 
 5015      FFFFFFFF 
 5015      FFFFFFFF 
 5015      FFFFFFFF 
 5016              	
 5017              	/*************************************************
 5018              	   extra FLASH memory not used by Tiny BASIC
 5019              	   is used to save BASIC programs.
 5020              	************************************************/
 5021              	  .p2align 10  // align to 1KB, smallest erasable segment 
 5022              	  .section .rodata.fs
 5023              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 128


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:87     *ABS*:0000000000000000 GPIO_O_PP
       stm32f103.inc:88     *ABS*:0000000000000004 GPIO_O_OD
ARM GAS  tinyBasic.s 			page 129


       stm32f103.inc:89     *ABS*:0000000000000008 GPIO_O_AFPP
       stm32f103.inc:90     *ABS*:000000000000000c GPIO_O_AFOD
       stm32f103.inc:92     *ABS*:0000000000000002 S2MHZ
       stm32f103.inc:93     *ABS*:0000000000000001 S10MHZ
       stm32f103.inc:94     *ABS*:0000000000000003 S50MHZ
       stm32f103.inc:95     *ABS*:0000000000000001 OSPEED
       stm32f103.inc:96     *ABS*:0000000000000001 OUTPUT_PP
       stm32f103.inc:97     *ABS*:0000000000000005 OUTPUT_OD
       stm32f103.inc:98     *ABS*:0000000000000009 OUTPUT_AFPP
       stm32f103.inc:101    *ABS*:0000000000000000 PULLDOWN
       stm32f103.inc:102    *ABS*:0000000000000001 PULLUP
       stm32f103.inc:104    *ABS*:0000000000000000 ANALOG
       stm32f103.inc:105    *ABS*:0000000000000004 FLOATING
       stm32f103.inc:106    *ABS*:0000000000000008 PULL_RESISTOR
       stm32f103.inc:107    *ABS*:0000000000000000 INPUT_ANA
       stm32f103.inc:108    *ABS*:0000000000000004 INPUT_FLOAT
       stm32f103.inc:109    *ABS*:0000000000000010 INPUT_PD
       stm32f103.inc:110    *ABS*:0000000000000011 INPUT_PU
       stm32f103.inc:113    *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:116    *ABS*:0000000000000000 AFIO_EVCR
       stm32f103.inc:117    *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:118    *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:119    *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:120    *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:121    *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:122    *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:125    *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:126    *ABS*:0000000040004400 USART2_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000040004800 USART3_BASE_ADR
       stm32f103.inc:130    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:131    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:132    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:133    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:134    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:135    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:136    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:139    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:141    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:142    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:143    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:144    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:147    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:149    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:150    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:151    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:152    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:153    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:154    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:155    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:156    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:157    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:158    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:159    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:160    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:161    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:162    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:164    *ABS*:00000000000005fa SCB_VECTKEY
ARM GAS  tinyBasic.s 			page 130


       stm32f103.inc:167    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:168    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:169    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:170    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:171    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:172    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:173    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:174    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:175    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:176    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:177    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:178    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:179    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:180    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:181    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:182    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:183    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:186    *ABS*:0000000000000000 IRQ_WWDG
       stm32f103.inc:187    *ABS*:0000000000000001 IRQ_PVD
       stm32f103.inc:188    *ABS*:0000000000000002 IRQ_TAMPER
       stm32f103.inc:189    *ABS*:0000000000000003 IRQ_RTC
       stm32f103.inc:190    *ABS*:0000000000000004 IRQ_FLASH
       stm32f103.inc:191    *ABS*:0000000000000005 IRQ_RCC
       stm32f103.inc:192    *ABS*:0000000000000006 IRQ_EXTI0
       stm32f103.inc:193    *ABS*:0000000000000007 IRQ_EXIT1
       stm32f103.inc:194    *ABS*:0000000000000008 IRQ_EXTI2
       stm32f103.inc:195    *ABS*:0000000000000009 IRQ_EXIT3
       stm32f103.inc:196    *ABS*:000000000000000a IRQ_EXIT4
       stm32f103.inc:197    *ABS*:000000000000000b IRQ_DMA1CH1
       stm32f103.inc:198    *ABS*:000000000000000c IRQ_DMA1CH2
       stm32f103.inc:199    *ABS*:000000000000000d IRQ_DAM1CH3
       stm32f103.inc:200    *ABS*:000000000000000e IRQ_DMA1CH4
       stm32f103.inc:201    *ABS*:000000000000000f IRQ_DMA1CH5
       stm32f103.inc:202    *ABS*:0000000000000010 IRQ_DMA1CH6
       stm32f103.inc:203    *ABS*:0000000000000011 IRQ_DMA1CH7
       stm32f103.inc:204    *ABS*:0000000000000012 IRQ_ADC1_2
       stm32f103.inc:205    *ABS*:0000000000000013 IRQ_USB_HP_CAN_TX
       stm32f103.inc:206    *ABS*:0000000000000014 IRQ_USB_LP_CAN_RX0
       stm32f103.inc:207    *ABS*:0000000000000015 IRQ_CAN_RX1
       stm32f103.inc:208    *ABS*:0000000000000016 IRQ_CAN_SCE
       stm32f103.inc:209    *ABS*:0000000000000017 IRQ_EXTI9_5
       stm32f103.inc:210    *ABS*:0000000000000018 IRQ_TIM1_BRK
       stm32f103.inc:211    *ABS*:0000000000000019 IRQ_TIM1_UP
       stm32f103.inc:212    *ABS*:000000000000001a IRQ_TIM1_TRG_COM
       stm32f103.inc:213    *ABS*:000000000000001b IRQ_TIM1_CC
       stm32f103.inc:214    *ABS*:000000000000001c IRQ_TIM2
       stm32f103.inc:215    *ABS*:000000000000001d IRQ_TIM3
       stm32f103.inc:216    *ABS*:000000000000001e IRQ_TIM4
       stm32f103.inc:217    *ABS*:000000000000001f IRQ_I2C1_EV
       stm32f103.inc:218    *ABS*:0000000000000020 IRQ_I2C1_ER
       stm32f103.inc:219    *ABS*:0000000000000021 IRQ_I2C2_EV
       stm32f103.inc:220    *ABS*:0000000000000022 IRQ_I2C2_ER
       stm32f103.inc:221    *ABS*:0000000000000023 IRQ_SPI1
       stm32f103.inc:222    *ABS*:0000000000000024 IRQ_SPI2
       stm32f103.inc:223    *ABS*:0000000000000025 IRQ_USART1
       stm32f103.inc:224    *ABS*:0000000000000026 IRQ_USART2
       stm32f103.inc:225    *ABS*:0000000000000027 IRQ_USART3
ARM GAS  tinyBasic.s 			page 131


       stm32f103.inc:226    *ABS*:0000000000000028 IRQ_EXTI15_10
       stm32f103.inc:227    *ABS*:0000000000000029 IRQ_RTCALARM
       stm32f103.inc:228    *ABS*:000000000000002a IRQ_USB_WKUP
       stm32f103.inc:229    *ABS*:000000000000002b IRQ_TIM8_BRK
       stm32f103.inc:230    *ABS*:000000000000002c IRQ_TIM8_UP
       stm32f103.inc:231    *ABS*:000000000000002d IRQ_TIM8_TRG_COM
       stm32f103.inc:232    *ABS*:000000000000002e IRQ_TIM8_CC
       stm32f103.inc:233    *ABS*:000000000000002f IRQ_ADC3
       stm32f103.inc:234    *ABS*:0000000000000030 IRQ_FSMC
       stm32f103.inc:235    *ABS*:0000000000000031 IRQ_SDIO
       stm32f103.inc:236    *ABS*:0000000000000032 IRQ_TIM5
       stm32f103.inc:237    *ABS*:0000000000000033 IRQ_SPI3
       stm32f103.inc:238    *ABS*:0000000000000034 IRQ_UART4
       stm32f103.inc:239    *ABS*:0000000000000035 IRQ_UART5
       stm32f103.inc:240    *ABS*:0000000000000036 IRQ_TIM6
       stm32f103.inc:241    *ABS*:0000000000000037 IRQ_TIM7
       stm32f103.inc:242    *ABS*:0000000000000038 IRQ_DMA2CH1
       stm32f103.inc:243    *ABS*:0000000000000039 IRQ_DMA2CH2
       stm32f103.inc:244    *ABS*:000000000000003a IRQ_DMA2CH3
       stm32f103.inc:245    *ABS*:000000000000003b IRQ_DMA2CH4_5
       stm32f103.inc:249    *ABS*:0000000040010400 EXTI_BASE_ADR
       stm32f103.inc:250    *ABS*:0000000000000000 EXTI_IMR
       stm32f103.inc:251    *ABS*:0000000000000004 EXTI_EMR
       stm32f103.inc:252    *ABS*:0000000000000008 EXTI_RTSR
       stm32f103.inc:253    *ABS*:000000000000000c EXTI_FTSR
       stm32f103.inc:254    *ABS*:0000000000000010 EXTI_SWIER
       stm32f103.inc:255    *ABS*:0000000000000014 EXTI_PR
       stm32f103.inc:259    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:260    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:261    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:262    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:265    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:266    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:267    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:268    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:269    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:270    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:271    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:272    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:275    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:276    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:277    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:278    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:279    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:282    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:283    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:284    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:285    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:288    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:289    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:290    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:291    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:292    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:295    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:296    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:297    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:298    *ABS*:0000000000000008 ADC_CR2
ARM GAS  tinyBasic.s 			page 132


       stm32f103.inc:299    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:300    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:301    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:302    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:303    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:304    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:305    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:306    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:307    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:308    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:309    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:310    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:311    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:312    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:313    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:314    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:315    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:318    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:319    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:320    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:321    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:323    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:324    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:325    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:326    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:327    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:328    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:329    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:330    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:331    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:332    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:333    *ABS*:0000000000000028 TIM_PSC
       stm32f103.inc:334    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:335    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:336    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:337    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:338    *ABS*:000000000000004c TIM_DMAR
       stm32f103.inc:341    *ABS*:0000000040013000 SPI1_BASE_ADR
       stm32f103.inc:342    *ABS*:0000000040003800 SPI2_BASE_ADR
       stm32f103.inc:344    *ABS*:0000000000000000 SPI_CR1
       stm32f103.inc:345    *ABS*:0000000000000004 SPI_CR2
       stm32f103.inc:346    *ABS*:0000000000000008 SPI_SR
       stm32f103.inc:347    *ABS*:000000000000000c SPI_DR
       stm32f103.inc:348    *ABS*:0000000000000010 SPI_CRCPR
       stm32f103.inc:349    *ABS*:0000000000000014 SPI_RXCRCR
       stm32f103.inc:350    *ABS*:0000000000000018 SPI_TXCRCR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
ARM GAS  tinyBasic.s 			page 133


           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
ARM GAS  tinyBasic.s 			page 134


      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 135


      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 U2_RX_QUEUE
      tbi_macros.inc:137    *ABS*:0000000000000064 U2_COUNT
      tbi_macros.inc:138    *ABS*:0000000000000068 U3_RX_QUEUE
      tbi_macros.inc:139    *ABS*:000000000000006c U3_COUNT
      tbi_macros.inc:140    *ABS*:0000000000000070 VARS
      tbi_macros.inc:141    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:142    *ABS*:00000000000000d8 ARRAY_ADR
      tbi_macros.inc:143    *ABS*:00000000000000dc TRACE_LEVEL
      tbi_macros.inc:144    *ABS*:00000000000000e0 HERE
      tbi_macros.inc:145    *ABS*:00000000000000e0 BASIC_START
      tbi_macros.inc:148    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:149    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:150    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:151    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:152    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:153    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:154    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:155    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:157    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:158    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
ARM GAS  tinyBasic.s 			page 136


       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DSTACK_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DUMP_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 END_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 ERASE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FOR_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FORGET_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FREE_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GET_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOSUB_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOTO_IDX
       cmd_index.inc:55     *ABS*:000000000000001e HEX_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IF_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 IN_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INPUT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 INVERT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 KEY_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 ISR_INIT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IRET_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LET_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LIST_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LOAD_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LOCATE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LSHIFT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b NEW_IDX
       cmd_index.inc:69     *ABS*:000000000000002c NEXT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d NOT_IDX
       cmd_index.inc:71     *ABS*:000000000000002e OR_IDX
       cmd_index.inc:72     *ABS*:000000000000002f OUT_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PAD_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PAUSE_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PMODE_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PEEK8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PEEK16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PEEK32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POKE8_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 POKE16_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE32_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POP_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PUSH_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PUT_IDX
       cmd_index.inc:86     *ABS*:000000000000003d QKEY_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RANDOMIZE_IDX
       cmd_index.inc:88     *ABS*:000000000000003f READ_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 REM_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 REST_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 RET_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 RND_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 RSHIFT_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 RUN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SAVE_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SERVO_INIT_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 SERVO_OFF_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 SERVO_POS_IDX
       cmd_index.inc:99     *ABS*:000000000000004a SLEEP_IDX
       cmd_index.inc:100    *ABS*:000000000000004b SPC_IDX
ARM GAS  tinyBasic.s 			page 137


       cmd_index.inc:101    *ABS*:000000000000004c SPI_DSEL_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SPI_INIT_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SPI_READ_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SPI_SELECT_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SPI_WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 STEP_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 STOP_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 STORE_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 TAB_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 THEN_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 TICKS_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TIMER_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TMROUT_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TO_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TONE_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_INIT_IDX
       cmd_index.inc:117    *ABS*:000000000000005c TRACE_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UART_GETC_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UART_INIT_IDX
       cmd_index.inc:120    *ABS*:000000000000005f UART_PUTC_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 UBOUND_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 UFLASH_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 UNTIL_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 WAIT_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 WORDS_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XOR_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 XPOS_IDX
       cmd_index.inc:128    *ABS*:0000000000000067 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:298    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:226    .text:0000000000000148 show_data_stack
         tinyBasic.s:241    .text:0000000000000188 data_stack
         tinyBasic.s:242    .text:0000000000000188 $d
         tinyBasic.s:248    .text:0000000000000198 show_main_stack
         tinyBasic.s:263    .text:00000000000001dc main_stack
         tinyBasic.s:264    .text:00000000000001dc $d
         tinyBasic.s:270    .text:00000000000001ec show_trace
         tinyBasic.s:320    .text:0000000000000250 search_target
         tinyBasic.s:1765   .text:0000000000000e44 next_token
         tinyBasic.s:384    .text:00000000000002c8 search_label
         tinyBasic.s:2016   .text:0000000000001098 expression
         tinyBasic.s:1327   .text:0000000000000a60 syntax_error
         tinyBasic.s:422    .text:00000000000002f0 search_lineno
         tinyBasic.s:1342   .text:0000000000000a68 tb_error
         tinyBasic.s:352    .text:000000000000029c search_const
ARM GAS  tinyBasic.s 			page 138


         tinyBasic.s:453    .text:0000000000000310 delete_line
         tinyBasic.s:478    .text:000000000000033c create_gap
         tinyBasic.s:504    .text:0000000000000368 insert_line
         tinyBasic.s:543    .text:00000000000003b8 compile
         tinyBasic.s:1669   .text:0000000000000d94 pad
         tinyBasic.s:873    .text:00000000000006c0 parse_int
         tinyBasic.s:616    .text:0000000000000460 comp_token
         tinyBasic.s:699    .text:0000000000000566 store_r0
         tinyBasic.s:967    .text:0000000000000760 skip
         tinyBasic.s:1052   .text:00000000000007c8 is_letter
         tinyBasic.s:783    .text:00000000000005f8 comp_label
         tinyBasic.s:708    .text:0000000000000586 token_exit
         tinyBasic.s:690    .text:0000000000000542 tick2
         tinyBasic.s:726    .text:000000000000058c is_special
         tinyBasic.s:748    .text:00000000000005d0 token_ofs
         tinyBasic.s:639    .text:00000000000004ba tok_idx0
         tinyBasic.s:702    .text:000000000000056c try_number
         tinyBasic.s:643    .text:00000000000004bc single
         tinyBasic.s:743    .text:00000000000005c1 tok_single
         tinyBasic.s:647    .text:00000000000004c4 lt
         tinyBasic.s:653    .text:00000000000004d2 gt
         tinyBasic.s:666    .text:00000000000004f6 bkslash
         tinyBasic.s:673    .text:000000000000050c prt_cmd
         tinyBasic.s:679    .text:000000000000051e quote
         tinyBasic.s:906    .text:00000000000006f8 parse_quote
         tinyBasic.s:684    .text:0000000000000532 tick
         tinyBasic.s:740    .text:00000000000005ac char_list
         tinyBasic.s:741    .text:00000000000005ac $d
         tinyBasic.s:749    .text:00000000000005d0 $d
         tinyBasic.s:766    .text:00000000000005f8 $t
         tinyBasic.s:986    .text:0000000000000778 upper
         tinyBasic.s:2353   .rodata.dictionary:00000000000008d8 kword_dict
         tinyBasic.s:1494   .text:0000000000000be4 search_dict
         tinyBasic.s:840    .text:0000000000000694 compress_label
         tinyBasic.s:1083   .text:00000000000007e8 atoi
         tinyBasic.s:937    .text:000000000000072c get_escaped_char
         tinyBasic.s:954    .text:0000000000000756 escaped
         tinyBasic.s:954    .text:0000000000000756 $d
         tinyBasic.s:967    .text:000000000000075e $t
         tinyBasic.s:1004   .text:0000000000000788 is_digit
         tinyBasic.s:1028   .text:00000000000007a4 is_hex
         tinyBasic.s:1128   .text:0000000000000834 cmd_name
         tinyBasic.s:1157   .text:0000000000000860 decompile_line
         tinyBasic.s:1174   .text:00000000000008a6 decomp_loop
         tinyBasic.s:1287   .text:0000000000000a35 single_char
         tinyBasic.s:1282   .text:0000000000000a20 relop_str
         tinyBasic.s:1282   .text:0000000000000a20 $d
         tinyBasic.s:1283   .text:0000000000000a2c ge_str
         tinyBasic.s:1284   .text:0000000000000a2f le_str
         tinyBasic.s:1285   .text:0000000000000a32 ne_str
         tinyBasic.s:1304   .text:0000000000000a48 modulo
         tinyBasic.s:1375   .text:0000000000000af8 compile_error
         tinyBasic.s:1346   .text:0000000000000a70 rt_error
         tinyBasic.s:1390   .text:0000000000000b4a rt_error_msg
         tinyBasic.s:1394   .text:0000000000000b6a err_msg
         tinyBasic.s:1391   .text:0000000000000b5b token_at_msg
         tinyBasic.s:2839   .text.basic:000000000000043a dump01
ARM GAS  tinyBasic.s 			page 139


         tinyBasic.s:1682   .text:0000000000000da4 warm_start
         tinyBasic.s:1390   .text:0000000000000b4a $d
         tinyBasic.s:1402   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1403   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1404   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1405   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1406   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1407   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1408   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1409   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1410   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1411   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1412   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1413   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1414   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1415   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1416   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1417   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1419   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1420   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1421   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1431   .text:0000000000000bae $t
         tinyBasic.s:1431   .text:0000000000000bb0 skip_line
         tinyBasic.s:1448   .text:0000000000000bb8 BTGL
         tinyBasic.s:1466   .text:0000000000000bbc kword_cmp
         tinyBasic.s:1532   .text:0000000000000c22 cold_start
         tinyBasic.s:1545   .text:0000000000000c6c src_addr
         tinyBasic.s:1547   .text:0000000000000c70 dest_addr
         tinyBasic.s:1549   .text:0000000000000c74 sysvar_size
         tinyBasic.s:1560   .text:0000000000000c78 prt_version
         tinyBasic.s:1616   .text:0000000000000d1c clear_basic
         tinyBasic.s:3724   .text.basic:0000000000000d14 search_free
         tinyBasic.s:4050   .text.basic:00000000000010fc exec_autorun
         tinyBasic.s:1546   .text:0000000000000c6c $d
         tinyBasic.s:2194   .rodata:0000000000000000 uzero
         tinyBasic.s:2225   .rodata:00000000000001d4 ulast
         tinyBasic.s:1560   .text:0000000000000c78 $t
         tinyBasic.s:1583   .text:0000000000000cdc version_msg
         tinyBasic.s:1585   .text:0000000000000cfc version
         tinyBasic.s:1584   .text:0000000000000cdc $d
         tinyBasic.s:1600   .text:0000000000000d00 clear_vars
         tinyBasic.s:1668   .text:0000000000000d90 tib
         tinyBasic.s:1651   .text:0000000000000d64 warm_init
         tinyBasic.s:1667   .text:0000000000000d8c dstack
         tinyBasic.s:1666   .text:0000000000000d88 mstack
         tinyBasic.s:1666   .text:0000000000000d88 $d
         tinyBasic.s:1670   .text:0000000000000d98 array
         tinyBasic.s:1671   .text:0000000000000d9c ready
         tinyBasic.s:1702   .text:0000000000000dbc cmd_line
         tinyBasic.s:1716   .text:0000000000000df0 interpreter
         tinyBasic.s:1749   .text:0000000000000e3c execute
         tinyBasic.s:3204   .text.basic:00000000000007da let_var
         tinyBasic.s:3209   .text.basic:00000000000007e6 let_array
         tinyBasic.s:2362   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1821   .text:0000000000000ebc expect
         tinyBasic.s:1840   .text:0000000000000ed8 func_args
         tinyBasic.s:1862   .text:0000000000000f08 arg_list
ARM GAS  tinyBasic.s 			page 140


         tinyBasic.s:1897   .text:0000000000000f4c factor
         tinyBasic.s:2123   .text:0000000000001170 get_array_element
         tinyBasic.s:2161   .text:0000000000001198 get_var
         tinyBasic.s:1965   .text:0000000000001028 term
         tinyBasic.s:2058   .text:00000000000010f4 relation
         tinyBasic.s:2105   .text:0000000000001168 relop_jmp
         tinyBasic.s:2077   .text:000000000000113a rel_idx0
         tinyBasic.s:2078   .text:000000000000113a rel_eq
         tinyBasic.s:2095   .text:0000000000001150 rel_false
         tinyBasic.s:2081   .text:000000000000113e rel_gt
         tinyBasic.s:2084   .text:0000000000001142 rel_ge
         tinyBasic.s:2087   .text:0000000000001146 rel_lt
         tinyBasic.s:2090   .text:000000000000114a rel_le
         tinyBasic.s:2093   .text:000000000000114e rel_ne
         tinyBasic.s:2106   .text:0000000000001168 $d
         tinyBasic.s:2123   .text:000000000000116e $t
         tinyBasic.s:2143   .text:0000000000001184 set_array_element
         tinyBasic.s:2179   .text:00000000000011a8 set_var
         tinyBasic.s:2195   .rodata:0000000000000000 $d
         tinyBasic.s:5023   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2233   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2232   *ABS*:0000000000000000 link
         tinyBasic.s:2354   .rodata.dictionary:00000000000008d8 LINK
         tinyBasic.s:2234   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2349   .rodata.dictionary:00000000000008cc first_link
         tinyBasic.s:2397   .text.basic:0000000000000000 abs
         tinyBasic.s:2411   .text.basic:0000000000000024 analog_read
         tinyBasic.s:2434   .text.basic:0000000000000058 adc
         tinyBasic.s:2474   .text.basic:00000000000000cc bit_and
         tinyBasic.s:2488   .text.basic:00000000000000ec ascii
         tinyBasic.s:3998   .text.basic:0000000000001058 autorun
         tinyBasic.s:2514   .text.basic:000000000000013c awu
         tinyBasic.s:2555   .text.basic:00000000000001ac bitmask
         tinyBasic.s:2576   .text.basic:00000000000001cc bit_reset
         tinyBasic.s:2599   .text.basic:00000000000001f4 bit_set
         tinyBasic.s:2635   .text.basic:000000000000023c bit_test
         tinyBasic.s:2621   .text.basic:0000000000000218 bit_toggle
         tinyBasic.s:2666   .text.basic:0000000000000284 char
         tinyBasic.s:2658   .text.basic:0000000000000278 cls
         tinyBasic.s:2682   .text.basic:00000000000002a0 const
         tinyBasic.s:2809   .text.basic:0000000000000404 dec_base
         tinyBasic.s:3789   .text.basic:0000000000000d80 directory
         tinyBasic.s:2818   .text.basic:000000000000040c do_loop
         tinyBasic.s:4977   .text.basic:0000000000001a88 drop
         tinyBasic.s:2833   .text.basic:0000000000000414 dump
         tinyBasic.s:2876   .text.basic:00000000000004b8 cmd_end
         tinyBasic.s:2903   .text.basic:00000000000004f8 erase
         tinyBasic.s:2914   .text.basic:000000000000050c for
         tinyBasic.s:3829   .text.basic:0000000000000e38 forget
         tinyBasic.s:4066   .text.basic:0000000000001128 free
         tinyBasic.s:4990   .text.basic:0000000000001aa4 get
         tinyBasic.s:2995   .text.basic:00000000000005c8 gosub
         tinyBasic.s:3021   .text.basic:0000000000000608 goto
         tinyBasic.s:3029   .text.basic:0000000000000614 hex_base
         tinyBasic.s:3038   .text.basic:000000000000061c if
         tinyBasic.s:3351   .text.basic:0000000000000998 pin_input
         tinyBasic.s:3060   .text.basic:0000000000000634 input_var
ARM GAS  tinyBasic.s 			page 141


         tinyBasic.s:3135   .text.basic:0000000000000738 invert
         tinyBasic.s:3147   .text.basic:0000000000000754 key
         tinyBasic.s:3157   .text.basic:0000000000000768 isr_init
         tinyBasic.s:3179   .text.basic:00000000000007b4 isr_exit
         tinyBasic.s:3197   .text.basic:00000000000007c4 let
         tinyBasic.s:3240   .text.basic:0000000000000850 list
         tinyBasic.s:3858   .text.basic:0000000000000e84 load
         tinyBasic.s:3291   .text.basic:0000000000000900 locate
         tinyBasic.s:3304   .text.basic:0000000000000924 lshift
         tinyBasic.s:3317   .text.basic:0000000000000940 new
         tinyBasic.s:2959   .text.basic:0000000000000570 next
         tinyBasic.s:3326   .text.basic:0000000000000960 func_not
         tinyBasic.s:3338   .text.basic:0000000000000978 bit_or
         tinyBasic.s:3368   .text.basic:00000000000009c4 out
         tinyBasic.s:3384   .text.basic:00000000000009e8 pad_ref
         tinyBasic.s:3395   .text.basic:00000000000009f4 pause
         tinyBasic.s:3418   .text.basic:0000000000000a10 pin_mode
         tinyBasic.s:3473   .text.basic:0000000000000a94 peek8
         tinyBasic.s:3485   .text.basic:0000000000000ab0 peek16
         tinyBasic.s:3497   .text.basic:0000000000000acc peek32
         tinyBasic.s:3510   .text.basic:0000000000000ae8 poke8
         tinyBasic.s:3521   .text.basic:0000000000000b00 poke16
         tinyBasic.s:3532   .text.basic:0000000000000b18 poke32
         tinyBasic.s:4968   .text.basic:0000000000001a7c fn_pop
         tinyBasic.s:3545   .text.basic:0000000000000b30 print
         tinyBasic.s:4959   .text.basic:0000000000001a6c cmd_push
         tinyBasic.s:5003   .text.basic:0000000000001ac4 put
         tinyBasic.s:3617   .text.basic:0000000000000c20 qkey
         tinyBasic.s:3629   .text.basic:0000000000000c3c randomize
         tinyBasic.s:2717   .text.basic:0000000000000324 read
         tinyBasic.s:2767   .text.basic:0000000000000398 restore
         tinyBasic.s:3010   .text.basic:00000000000005f0 return
         tinyBasic.s:3638   .text.basic:0000000000000c44 random
         tinyBasic.s:3664   .text.basic:0000000000000c94 rshift
         tinyBasic.s:3676   .text.basic:0000000000000cb0 run
         tinyBasic.s:3913   .text.basic:0000000000000f18 save
         tinyBasic.s:4086   .text.basic:000000000000113c servo_init
         tinyBasic.s:4250   .text.basic:0000000000001320 servo_off
         tinyBasic.s:4286   .text.basic:0000000000001388 servo_pos
         tinyBasic.s:4313   .text.basic:00000000000013d0 sleep
         tinyBasic.s:4327   .text.basic:00000000000013f0 spc
         tinyBasic.s:4341   .text.basic:0000000000001418 spi_deselect
         tinyBasic.s:4369   .text.basic:000000000000145c spi_init
         tinyBasic.s:4435   .text.basic:0000000000001550 spi_read
         tinyBasic.s:4462   .text.basic:0000000000001594 spi_select
         tinyBasic.s:4491   .text.basic:00000000000015d8 spi_write
         tinyBasic.s:2945   .text.basic:0000000000000558 step
         tinyBasic.s:4521   .text.basic:000000000000161c stop
         tinyBasic.s:2884   .text.basic:00000000000004c0 store
         tinyBasic.s:4543   .text.basic:0000000000001660 tab
         tinyBasic.s:3049   .text.basic:0000000000000630 then
         tinyBasic.s:4558   .text.basic:0000000000001688 get_ticks
         tinyBasic.s:4567   .text.basic:0000000000001690 set_timer
         tinyBasic.s:4579   .text.basic:00000000000016a4 timeout
         tinyBasic.s:2932   .text.basic:0000000000000540 to
         tinyBasic.s:4592   .text.basic:00000000000016b8 tone
         tinyBasic.s:4626   .text.basic:0000000000001710 tone_init
ARM GAS  tinyBasic.s 			page 142


         tinyBasic.s:4654   .text.basic:0000000000001758 trace
         tinyBasic.s:4682   .text.basic:000000000000178c ser_getc
         tinyBasic.s:4729   .text.basic:0000000000001804 ser_init
         tinyBasic.s:4808   .text.basic:00000000000018f4 ser_putc
         tinyBasic.s:4670   .text.basic:0000000000001774 ubound
         tinyBasic.s:4828   .text.basic:0000000000001920 uflash
         tinyBasic.s:4839   .text.basic:0000000000001928 until
         tinyBasic.s:4854   .text.basic:0000000000001948 wait
         tinyBasic.s:4882   .text.basic:000000000000197c words
         tinyBasic.s:4922   .text.basic:0000000000001a28 bit_xor
         tinyBasic.s:4935   .text.basic:0000000000001a48 xpos
         tinyBasic.s:4944   .text.basic:0000000000001a58 ypos
         tinyBasic.s:2397   .text.basic:0000000000000000 $t
         tinyBasic.s:2421   .text.basic:0000000000000048 adc_loop
         tinyBasic.s:2458   .text.basic:00000000000000a8 adc_off
         tinyBasic.s:2439   .text.basic:000000000000006c adc_on
         tinyBasic.s:3388   .text.basic:00000000000009f0 pad_adr
         tinyBasic.s:2743   .text.basic:0000000000000370 seek_next
         tinyBasic.s:2798   .text.basic:00000000000003f6 no_data_line
         tinyBasic.s:2794   .text.basic:00000000000003f0 try_next_line
         tinyBasic.s:2850   .text.basic:0000000000000458 print_dump_header
         tinyBasic.s:2907   .text.basic:0000000000000508 user_space
         tinyBasic.s:2907   .text.basic:0000000000000508 $d
         tinyBasic.s:5014   .rodata.user:0000000000000000 user
         tinyBasic.s:2914   .text.basic:000000000000050c $t
         tinyBasic.s:2998   .text.basic:00000000000005d6 target
         tinyBasic.s:3128   .text.basic:0000000000000734 str_buffer
         tinyBasic.s:3127   .text.basic:0000000000000730 input_buffer
         tinyBasic.s:3127   .text.basic:0000000000000730 $d
         tinyBasic.s:3135   .text.basic:0000000000000738 $t
         tinyBasic.s:3285   .text.basic:00000000000008fc out_buff
         tinyBasic.s:3285   .text.basic:00000000000008fc $d
         tinyBasic.s:3291   .text.basic:0000000000000900 $t
         tinyBasic.s:3388   .text.basic:00000000000009f0 $d
         tinyBasic.s:3395   .text.basic:00000000000009f4 $t
         tinyBasic.s:3439   .text.basic:0000000000000a38 gpio_config
         tinyBasic.s:3602   .text.basic:0000000000000bfc unget_exit
         tinyBasic.s:3604   .text.basic:0000000000000c04 print_exit
         tinyBasic.s:3777   .text.basic:0000000000000d7c fs_addr
         tinyBasic.s:3752   .text.basic:0000000000000d38 search_file
         tinyBasic.s:3756   .text.basic:0000000000000d40 cmp_loop
         tinyBasic.s:3777   .text.basic:0000000000000d7c $d
         tinyBasic.s:3789   .text.basic:0000000000000d80 $t
         tinyBasic.s:3812   .text.basic:0000000000000df8 no_more_file
         tinyBasic.s:3822   .text.basic:0000000000000e30 fcount
         tinyBasic.s:3822   .text.basic:0000000000000e30 $d
         tinyBasic.s:3864   .text.basic:0000000000000ea6 load_autorun
         tinyBasic.s:3986   .text.basic:0000000000001044 fsize
         tinyBasic.s:3987   .text.basic:0000000000001050 data_bytes
         tinyBasic.s:3931   .text.basic:0000000000000f60 new_file
         tinyBasic.s:3986   .text.basic:0000000000001044 $d
         tinyBasic.s:4038   .text.basic:00000000000010e4 write_back
         tinyBasic.s:4043   .text.basic:00000000000010f6 arun_sign
         tinyBasic.s:4043   .text.basic:00000000000010f6 $d
         tinyBasic.s:4050   .text.basic:00000000000010fa $t
         tinyBasic.s:4144   .text.basic:00000000000011fc servo_param
         tinyBasic.s:4165   .text.basic:000000000000125c pwm_config
ARM GAS  tinyBasic.s 			page 143


         tinyBasic.s:4125   .text.basic:00000000000011c6 remap_t2
         tinyBasic.s:4131   .text.basic:00000000000011d4 remap_t3
         tinyBasic.s:4139   .text.basic:00000000000011ec no_remap
         tinyBasic.s:4227   .text.basic:00000000000012f0 pwm_dc
         tinyBasic.s:4144   .text.basic:00000000000011fc $d
         tinyBasic.s:4165   .text.basic:000000000000125c $t
         tinyBasic.s:4426   .text.basic:000000000000151e spi_param
         tinyBasic.s:4427   .text.basic:000000000000151e $d
         tinyBasic.s:4435   .text.basic:000000000000154e $t
         tinyBasic.s:4800   .text.basic:00000000000018d4 uart_param
         tinyBasic.s:4779   .text.basic:000000000000189c uart_baud
         tinyBasic.s:4801   .text.basic:00000000000018d4 $d
         tinyBasic.s:4808   .text.basic:00000000000018f4 $t
         tinyBasic.s:4915   .text.basic:0000000000001a12 dict_words
         tinyBasic.s:4915   .text.basic:0000000000001a12 $d
         tinyBasic.s:4922   .text.basic:0000000000001a26 $t
         tinyBasic.s:5013   .rodata.user:0000000000000000 $d
         tinyBasic.s:5023   .text.basic:0000000000001ae0 $d
         tinyBasic.s:5023   .text:00000000000011b8 $d
         tinyBasic.s:248    .text:0000000000000195 $d
         tinyBasic.s:248    .text:0000000000000196 $t
         tinyBasic.s:270    .text:00000000000001e9 $d
         tinyBasic.s:270    .text:00000000000001ea $t
         tinyBasic.s:747    .text:00000000000005cf $d
         tinyBasic.s:1304   .text:0000000000000a45 $d
         tinyBasic.s:1304   .text:0000000000000a46 $t
         tinyBasic.s:1587   .text:0000000000000cfd $d
         tinyBasic.s:1587   .text:0000000000000cfe $t
         tinyBasic.s:1682   .text:0000000000000da3 $d
         tinyBasic.s:1682   .text:0000000000000da4 $t
         tinyBasic.s:3829   .text.basic:0000000000000e37 $d
         tinyBasic.s:3829   .text.basic:0000000000000e38 $t
         tinyBasic.s:3998   .text.basic:0000000000001057 $d
         tinyBasic.s:3998   .text.basic:0000000000001058 $t

UNDEFINED SYMBOLS
GPIO_AFOD
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
nvic_enable_irq
set_curpos
tabulation
ARM GAS  tinyBasic.s 			page 144


uart_qkey
page_align
unlock
hword_write
write_page
get_curpos
