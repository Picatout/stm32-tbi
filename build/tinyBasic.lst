ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
 143              	
 144              	/* system control register */
ARM GAS  tinyBasic.s 			page 4


 145              	.equ SCR_BASE_ADR,0xE000ED10
 146              	.equ SCR_SLEEPONEXIT,(1<<1)
 147              	.equ SCR_SLEEPDEEP,(1<<2)
 148              	.equ SCR_SEVONPEND,(1<<4)
 149              	
 150              	/* power control register */
 151              	.equ PWR_CR_ADR,0x40007000
 152              	.equ PWR_CR_LPDS,(1<<0)
 153              	.equ PWR_CR_PDDS,(1<<1)
 154              	.equ PWR_CR_CWUF,(1<<2)
 155              	.equ PWR_CR_CSBF,(1<<3)
 156              	.equ PWR_CR_PVDE,(1<<4)
 157              	.equ PWR_CR_PLS,(1<<5)
 158              	.equ PWR_CR_DBP,(1<<8)
 159              	
 160              	/* power control and statut register */
 161              	.equ PWR_CSR_ADR,0x40007004 
 162              	.equ PWR_CSR_WUF,(1<<0)
 163              	.equ PWR_CSR_SBF,(1<<1)
 164              	.equ PWR_CSR_PVDO,(1<<2)
 165              	.equ PWR_CSR_EWUP,(1<<8)
 166              	
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
ARM GAS  tinyBasic.s 			page 5


  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
ARM GAS  tinyBasic.s 			page 6


   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
ARM GAS  tinyBasic.s 			page 7


  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	  .equ ERR_CANT_PROG,16
 107              	  
 108              	
 109              	//--------------------------------------
 110              	//   assembler flags 
 111              	//-------------------------------------
 112              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 113              	
 114              	.equ CELL_SIZE,4 
 115              	
 116              	
 117              	//-------------------------------
ARM GAS  tinyBasic.s 			page 8


 118              	//  macros used to help debugging
 119              	//-------------------------------
 120              	  .equ DEBUG,0
 121              	
 122              	    UPP .req r4  // base address system variables 
 123              	    VADR .req r5  // address FOR loop variable 
 124              	    LIMIT .req r6   // LOOP limit 
 125              	    INCR  .req  r7  // LOOP increment 
 126              	    T1  .req r8     // temporary register 
 127              	    T2  .req r9     // temporary register 
 128              	    IN  .req r10    //  index in text line or token list 
 129              	    BPTR .req r11   //  buffer address or BASIC line address 
 130              	    DP   .req r12   //  parameter stack pointer 
 131              	
 132              	/***************************
 133              	  SYSTEM variables offset 
 134              	  from UPP  
 135              	***************************/ 
 136              	
 137              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 138              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 139              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 140              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 141              	  .equ DATA,DATAPTR+4 // index to next data item 
 142              	  .equ DATALEN, DATA+4 // length of data line 
 143              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 144              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 145              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 146              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 147              	  .equ FSPTR,SEED+4 //  pointer used by file system
 148              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 149              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 150              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 151              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 152              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 153              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 154              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 155              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 156              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 157              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 158              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 159              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 160              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 161              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 162              	
 163              	/* flags used by BASIC interpreter */ 
 164              		.equ FRUN,(1<<0) // programm running
 165              		.equ FTRAP,(1<<1) // inside trap handler 
 166              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 167              		.equ FSTOP,(1<<3) // program stopped  
 168              		.equ FBREAK,(1<<4) // break point flag 
 169              		.equ FCOMP,(1<<5)  // compiling flags 
 170              		.equ FAUTORUN,(1<<6) // auto start program running 
 171              	
 172              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 173              	  
 174              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
ARM GAS  tinyBasic.s 			page 9


 175              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 176              	
 177              	/***********************************************
 178              	*       MACROS
 179              	***********************************************/
 180              		.macro _CALL fn /* low level routine call */ 
 181              	 	PUSH {LR}
 182              		BL \fn  
 183              	  POP {LR}
 184              		.endm
 185              		
 186              		.macro	_RET /* return from subroutine */
 187              		BX	LR
 188              		.endm
 189              	
 190              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 191              		MOV \REG, #\LITERAL&0xffff
 192              		MOVT \REG, #\LITERAL>>16
 193              		.endm
 194              	
 195              	// local function header 
 196              	  .macro _FUNC label 
 197              	  .p2align 2 
 198              	  .type \label, %function  
 199              	\label:
 200              	  .endm 
 201              	
 202              	// global function header 
 203              	  .macro _GBL_FUNC label 
 204              	  .global \label 
 205              	  _FUNC \label 
 206              	  .endm 
 207              	
 208              	
 209              	/********************************
 210              	    dictionary structure
 211              	------------------------------
 212              	 format:
 213              	   link:    
 214              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 215              	   cmd_name: 31 characters max 
 216              	   cmd_index: 2 bytes 
 217              	**********************************/
 218              		.macro _dict_entry tok_type,name,cmd_idx 
 219              	  .word LINK 
 220              	  .word \cmd_idx 
 221              		.word \tok_type  	
 222              		.equ LINK,.
 223              		.asciz "\name"
 224              		.p2align 2 
 225              		.endm 
 226              	
 227              	  // pop parameter in register 
 228              	  .macro _POP  reg 
 229              	  ldmia  DP!,{\reg}
 230              	  .endm 
 231              	
ARM GAS  tinyBasic.s 			page 10


 232              	  // push register on parameter stack 
 233              	  .macro _PUSH reg 
 234              	  stmdb DP!,{\reg}
 235              	  .endm 
 236              	
 237              	  // drop n parameters on dstack 
 238              	  .macro _DROP n
 239              	  mov r0,#4*\n
 240              	  add DP,R0 
 241              	  .endm 
 242              	
 243              	  // back to previous token in list 
 244              	  .macro _UNGET_TOKEN 
 245              	  ldr IN,[UPP,#IN_SAVED]
 246              	  ldr BPTR,[UPP,#BASICPTR] 
 247              	  .endm 
 248              	
 249              	 // create a text data 
 250              	 .macro _TEXT label,text
 251              	 \label: .asciz "\text"
 252              	 .p2align 2 
 253              	 .endm 
 254              	
 255              	// command line only 
 256              	  .macro _CLO 
 257              	  ldr r0,[UPP,#FLAGS]
 258              	  tst r0,#FRUN 
 259              	  beq 1f 
 260              	  mov r0,#ERR_CMD_ONLY
 261              	  b tb_error
 262              	1: 
 263              	  .endm 
 264              	
 265              	// run time only 
 266              	  .macro _RTO 
 267              	  ldr r0,[UPP,#FLAGS]
 268              	  tst r0,#FRUN 
 269              	  bne 1f 
 270              	  mov r0,#ERR_CMD_ONLY
 271              	  b tb_error
 272              	1:
 273              	  .endm 
 274              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
ARM GAS  tinyBasic.s 			page 11


  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, ABS_IDX+1  //   adc on 
  27              	    .equ ADCREAD_IDX,ADCON_IDX+1  // read adc 
  28              	    .equ AND_IDX,ADCREAD_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1  // 
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ DATA_IDX,CHAR_IDX+1 // 
  39              	    .equ DATALN_IDX,DATA_IDX+1 // 
  40              	    .equ DEC_IDX,DATALN_IDX+1 // 
  41              	    .equ DIR_IDX,DEC_IDX+1 // 
  42              	    .equ DO_IDX,DIR_IDX+1 // 
  43              	    .equ DUMP_IDX, DO_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ FOR_IDX, END_IDX+1 // 
  46              	    .equ FORGET_IDX, FOR_IDX+1 // 
  47              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  48              	    .equ GOTO_IDX, GOSUB_IDX+1
  49              	    .equ HEX_IDX, GOTO_IDX+1 // 
  50              	    .equ IF_IDX, HEX_IDX+1 // 
  51              	    .equ INP_IDX,IF_IDX+1
  52              	    .equ INPUT_IDX, INP_IDX+1 // 
  53              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  54              	    .equ KEY_IDX, INVERT_IDX+1 // 
  55              	    .equ LET_IDX, KEY_IDX+1 // 
  56              	    .equ LIST_IDX, LET_IDX+1 // 
  57              	    .equ LOAD_IDX, LIST_IDX+1 // 
  58              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
ARM GAS  tinyBasic.s 			page 12


  71              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  72              	    .equ POKE16_IDX,POKE8_IDX+1 
  73              	    .equ POKE32_IDX,POKE16_IDX+1
  74              	    .equ PRT_IDX, POKE32_IDX+1 //  //  PRINT commande index 
  75              	    .equ QKEY_IDX, PRT_IDX+1 // 
  76              	    .equ READ_IDX, QKEY_IDX+1 // 
  77              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  78              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  79              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  80              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  81              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  82              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  83              	    .equ SAVE_IDX, RUN_IDX+1 // 
  84              	    .equ SHOW_IDX, SAVE_IDX+1 // 
  85              	    .equ SIZE_IDX, SHOW_IDX+1 // 
  86              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  87              	    .equ SPIRD_IDX, SLEEP_IDX+1 // 
  88              	    .equ SPIEN_IDX, SPIRD_IDX+1 // 
  89              	    .equ SPISEL_IDX, SPIEN_IDX+1 // 
  90              	    .equ SPIWR_IDX, SPISEL_IDX+1 // 
  91              	    .equ STEP_IDX, SPIWR_IDX+1 // 
  92              	    .equ STOP_IDX, STEP_IDX+1 // 
  93              	    .equ THEN_IDX,STOP_IDX+1
  94              	    .equ TICKS_IDX, THEN_IDX+1 // 
  95              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  96              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  97              	    .equ TO_IDX, TMROUT_IDX+1 // 
  98              	    .equ TONE_IDX, TO_IDX+1 // 
  99              	    .equ UBOUND_IDX, TONE_IDX+1 // 
 100              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 101              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 102              	    .equ USR_IDX, UNTIL_IDX+1 // 
 103              	    .equ WAIT_IDX, USR_IDX+1 // 
 104              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 105              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 106              	    .equ XOR_IDX, WRITE_IDX+1 //  
 107              	    .equ XTRMT_IDX, XOR_IDX+1 // 
 108              	    .equ XRCV_IDX, XTRMT_IDX+1 // 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
ARM GAS  tinyBasic.s 			page 13


  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
ARM GAS  tinyBasic.s 			page 14


 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
ARM GAS  tinyBasic.s 			page 15


 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00C00 	    mov r0,#12
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
ARM GAS  tinyBasic.s 			page 16


 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
 208 0118 03BC     	    pop {r0,r1}
 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
ARM GAS  tinyBasic.s 			page 17


 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _GBL_FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
ARM GAS  tinyBasic.s 			page 18


 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
 314 01b0 8846     	    mov T1,R1
 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      FEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
ARM GAS  tinyBasic.s 			page 19


 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
 361              	    in pas buffer.
 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF8009A 	    ldr T2,pad // tokens buffer
 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      06F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e 2DE3     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e 25E3     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      27F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 20


 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF8A839 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 414 028e 1888     	    ldrh r0,[r3] // line number 
 415 0290 70B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 206C     	    ldr r0,[UPP,#FLAGS]
 418 0294 10F0080F 	    tst r0,#FSTOP
 419 0298 02D0     	    beq 7f 
 420 029a 4FF01000 	    mov r0,#ERR_CANT_PROG 
 421 029e 0DE3     	    b tb_error 
 422 02a0 1846     	7:  mov r0,r3 
 423 02a2 00B5FFF7 	    _CALL insert_line 
 423      96FF5DF8 
 423      04EB
 424 02ac 4040     	    eors r0,r0 
 425 02ae 08E0     	    b 9f 
 426 02b0 9B46     	8:  mov BPTR,r3 // *token_list 
 427 02b2 4FF0030A 	    mov IN,#3
 428 02b6 206C     	    ldr r0,[UPP,#FLAGS]
 429 02b8 A0F12000 	    sub r0,#FCOMP
 430 02bc 2064     	    str r0,[UPP,#FLAGS]
 431 02be 5FF0FF30 	    movs r0,#-1 
 432 02c2 7047     	9:  _RET 
 433              	
 434              	/*********************************************
 435              	    compile next token from source 
 436              	    input: 
 437              	      r3 		tib index  
 438              	      T1    tib adr
 439              	      T2    insert point in pad  
 440              	    output:
 441              	      r0     token attribute 
 442              	      r1 		token value
 443              	      r3     tib index updated    
 444              	      T2     updated 
 445              	      use:
 446              	**********************************************/
 447              	    .macro _case c, next  
 448              	    cmp r0,#\c 
 449              	    bne \next
 450              	    .endm 
 451              	
 452              	    _FUNC comp_token 
 453 02c4 40B4     	    push {r6}
 454 02c6 18F80300 	    ldrb r0,[T1,r3]
 455 02ca 0040     	    ands r0,r0 
 456 02cc 70D0     	    beq store_r0  // reached end of text  
 457 02ce 4FF02000 	    mov r0,#SPACE 
 458 02d2 00B500F0 	    _CALL skip  // skip spaces 
 458      12F95DF8 
 458      04EB
 459 02dc 18F80300 	    ldrb r0,[T1,r3]
 460 02e0 0040     	    ands r0,r0 
ARM GAS  tinyBasic.s 			page 21


 461 02e2 65D0     	    beq store_r0  // reached end of text 
 462 02e4 03F10103 	    add r3,#1 
 463 02e8 00B500F0 	    _CALL upper 
 463      13F95DF8 
 463      04EB
 464 02f2 00B500F0 	    _CALL is_special
 464      7CF85DF8 
 464      04EB
 465 02fc DFF8BC6D 	    ldr r6,=token_ofs
 466 0300 D6E811F0 	    tbh [r6,r1] 
 467              	tok_idx0:     
 468              	//  not special char.  
 469 0304 57E0     	    b try_number 
 470              	// single char token with no value 
 471              	single: 
 472 0306 DFF8B86D 	    ldr r6,=tok_single
 473 030a 705C     	    ldrb r0,[r6,r1] 
 474 030c 50E0     	    b store_r0  
 475              	lt:
 476 030e 4FF03400 	    mov r0,#TK_LT
 477 0312 18F80310 	    ldrb r1,[T1,r3]
 478 0316 3E29     	    cmp r1,#'>' 
 479 0318 06D0     	    beq 1f
 480 031a 0AE0     	    b 2f 
 481              	gt:
 482 031c 4FF03100 	    mov r0,#TK_GT 
 483 0320 18F80310 	    ldrb r1,[T1,r3]
 484 0324 3C29     	    cmp r1,#'<'
 485 0326 04D1     	    bne 2f  
 486 0328 03F10103 	1:  add r3,#1
 487 032c 4FF03500 	    mov r0,#TK_NE  
 488 0330 3EE0     	    b store_r0
 489 0332 3D29     	2:  cmp r1,#'=' 
 490 0334 3CD1     	    bne store_r0  
 491 0336 03F10103 	    add r3,#1
 492 033a 00F10200 	    add r0,#2
 493 033e 37E0     	    b store_r0       
 494              	bkslash:
 495 0340 18F80310 	    ldrb r1,[T1,r3]
 496 0344 03F10103 	    add r3,#1
 497 0348 4FF00300 	    mov r0,#TK_CHAR 
 498 034c 09F8010B 	    strb r0,[T2],#1
 499 0350 09F8011B 	    strb r1,[T2],#1
 500 0354 49E0     	    b token_exit 
 501              	prt_cmd: 
 502 0356 4FF00A00 	    mov r0,#TK_CMD 
 503 035a 4FF03101 	    mov r1,#PRT_IDX
 504 035e 09F8010B 	    strb r0,[T2],#1
 505 0362 09F8011B 	    strb r1,[T2],#1
 506 0366 40E0     	    b token_exit 
 507              	quote:
 508 0368 4FF00200 	    mov r0,#TK_QSTR 
 509 036c 09F8010B 	    strb r0,[T2],#1
 510 0370 00B500F0 	    _CALL parse_quote
 510      8FF85DF8 
 510      04EB
 511 037a 36E0     	    b token_exit
ARM GAS  tinyBasic.s 			page 22


 512              	tick: 
 513              	// copy comment in pad 
 514 037c 4FF00A00 	    mov r0,#TK_CMD 
 515 0380 4FF03401 	    mov r1,#REM_IDX 
 516 0384 09F8010B 	    strb r0,[T2],#1 
 517 0388 09F8011B 	    strb r1,[T2],#1
 518 038c 08EB0300 	    add r0,T1,r3 
 519 0390 4946     	    mov r1,T2 
 520 0392 00B5FFF7 	    _CALL strcpy 
 520      FEFF5DF8 
 520      04EB
 521 039c 00B5FFF7 	    _CALL strlen 
 521      FEFF5DF8 
 521      04EB
 522 03a6 8144     	    add T2,r0
 523 03a8 09F10109 	    add T2,#1
 524 03ac 6368     	    ldr r3,[UPP,#COUNT]
 525 03ae 1CE0     	    b token_exit
 526              	store_r0: 
 527 03b0 09F8010B 	    strb r0,[T2],#1
 528 03b4 19E0     	    b token_exit 
 529              	try_number:
 530 03b6 A3F10103 	    sub r3,#1
 531 03ba 00B500F0 	    _CALL parse_int  
 531      4EF85DF8 
 531      04EB
 532 03c4 04D0     	    beq 1f 
 533 03c6 09F8010B 	    strb r0,[T2],#1 
 534 03ca 49F8041B 	    str r1,[T2],#4
 535 03ce 0CE0     	    b token_exit 
 536 03d0 00B500F0 	1:  _CALL parse_keyword 
 536      1FF95DF8 
 536      04EB
 537 03da 0428     	    cmp r0,#TK_VAR 
 538 03dc 01D0     	    beq 2f 
 539 03de 3429     	    cmp r1,#REM_IDX 
 540 03e0 CCD0     	    beq tick
 541 03e2 09F8010B 	2:  strb r0,[T2],#1 
 542 03e6 09F8011B 	    strb r1,[T2],#1
 543              	token_exit:
 544 03ea 40BC     	    pop {r6}
 545 03ec 7047     	    _RET 
 546              	
 547              	/****************************
 548              	    is_special  
 549              	    check for non alphanum
 550              	    input:
 551              	      r0    character to scan 
 552              	    output:
 553              	      r0    character 
 554              	      r1    0 || index 
 555              	    use: 
 556              	      r1    scan index 
 557              	      r2    temp 
 558              	      r3    char_list 
 559              	*****************************/
 560 03ee 00BF     	    _FUNC is_special 
ARM GAS  tinyBasic.s 			page 23


 561 03f0 0CB4     	    push {r2,r3}
 562 03f2 4FF00101 	    mov r1,#1
 563 03f6 DFF8CC3C 	    ldr r3,=char_list 
 564 03fa 5A5C     	1:  ldrb r2,[r3,r1]
 565 03fc 22B1     	    cbz r2,8f 
 566 03fe 8242     	    cmp r2,r0 
 567 0400 04D0     	    beq 9f 
 568 0402 01F10101 	    add r1,#1 
 569 0406 F8E7     	    b 1b
 570 0408 81EA0101 	8:  eor r1,r1     
 571 040c 0CBC     	9:  pop {r2,r3}
 572 040e 7047     	    _RET 
 573              	
 574              	char_list:
 575 0410 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 575      293A232D 
 575      2B2A2F25 
 575      3D3C3E5C 
 575      3F272200 
 576              	
 577              	tok_single:
 578 0424 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 578      070109
 579 042b 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 579      2232
 580              	  
 581 0431 0000BF   	  .p2align 2
 582              	token_ofs:
 583 0434 0000     	  .hword  0 // not found
 584              	  // TK_COMMA...TK_EQUAL , 12 
 585 0436 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 585      01000100 
 586 043e 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 586      01000100 
 587 0446 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 587      01000100 
 588              	  // '<','>'
 589 044e 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 590              	  // '\'
 591 0452 1E00     	  .hword  (bkslash-tok_idx0)/2
 592              	  // '?' 
 593 0454 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 594              	  // "'"  
 595 0456 3C00     	  .hword  (tick-tok_idx0)/2 
 596              	  // '"' quote 
 597 0458 3200     	  .hword (quote-tok_idx0)/2
 598              	
 599 045a 00BF     	  .p2align 2
 600              	
 601              	/****************************
 602              	    parse_int 
 603              	    parse an integer from text
 604              	    if not valid integer 
 605              	    r1 return *buffer else 
 606              	    *buffer is incremented after integer 
 607              	  input:
 608              	    r0   *buffer 
ARM GAS  tinyBasic.s 			page 24


 609              	  output:
 610              	    r0   TK_INTGR|TK_NONE
 611              	    r1   int|0   
 612              	  use:
 613              	    r3   tib index updated     
 614              	*****************************/
 615              	    _FUNC parse_int 
 616 045c 4FF00A01 	    mov r1,#10 // default base 
 617 0460 18F80300 	    ldrb r0,[T1,r3]
 618 0464 2428     	    cmp r0,'$' 
 619 0466 02D1     	    bne 2f 
 620 0468 4FF01001 	    mov r1,#16 // hexadecimal number 
 621 046c 03E0     	    b 3f  
 622 046e 2628     	2:  cmp r0,#'&' 
 623 0470 03D1     	    bne 4f
 624 0472 4FF00201 	    mov r1,#2 //binary number  
 625 0476 03F10103 	3:  add r3,#1
 626 047a 03EB0800 	4:  add r0,r3,T1 
 627 047e 00B5FFF7 	    _CALL atoi 
 627      FEFF5DF8 
 627      04EB
 628 0488 10B1     	    cbz r0,9f
 629 048a 0344     	    add r3,r0
 630 048c 4FF00E00 	    mov r0,#TK_INTGR
 631 0490 0040     	9:  ands r0,r0   
 632 0492 7047     	    _RET 
 633              	
 634              	/*********************************************
 635              	    parse_quote 
 636              	    parse quoted string 
 637              	    input: 
 638              	      r3 		tib index  
 639              	      T1    tib adr
 640              	      T2    insert point in pad  
 641              	    output:
 642              	      r0     token attribute 
 643              	      r1 		*str 
 644              	      r3     tib index updated    
 645              	      T2     updated 
 646              	      use:
 647              	*********************************************/
 648              	    _FUNC parse_quote
 649 0494 4DF8049D 	    push {T2} 
 650 0498 18F80300 	1:  ldrb r0,[T1,r3]
 651 049c 03F10103 	    add r3,#1 
 652 04a0 2228     	    cmp r0,#'"'
 653 04a2 09D0     	    beq 9f 
 654 04a4 5C28     	    cmp r0,#'\\'
 655 04a6 04D1     	    bne 2f 
 656 04a8 00B500F0 	    _CALL get_escaped_char 
 656      0DF85DF8 
 656      04EB
 657 04b2 09F8010B 	2:  strb r0,[T2],#1
 658 04b6 EFE7     	    b 1b 
 659 04b8 80EA0000 	9:  eor  r0,r0
 660 04bc 09F8010B 	    strb r0,[T2],#1
 661 04c0 4FF00200 	    mov r0,#TK_QSTR
ARM GAS  tinyBasic.s 			page 25


 662 04c4 02BC     	    pop {r1}
 663 04c6 7047     	    _RET 
 664              	
 665              	/**********************************************
 666              	    get_escaped_char 
 667              	    convert "\c" in quoted string 
 668              	    input:
 669              	      r0 
 670              	      r3   index 
 671              	      T1   tib 
 672              	    output:
 673              	      r0   replacement char
 674              	      r3   updated 
 675              	    use:
 676              	      r1   *table 
 677              	      r2   temp 
 678              	**********************************************/
 679              	    _FUNC get_escaped_char 
 680 04c8 06B4     	    push {r1,r2}
 681 04ca 18F80300 	    ldrb r0,[T1,r3]
 682 04ce 03F10103 	    add r3,#1
 683 04d2 2228     	    cmp r0,#'"' 
 684 04d4 0BD0     	    beq 9f 
 685 04d6 DFF8F01B 	1:  ldr r1,=escaped 
 686 04da 11F8012B 	2:  ldrb r2,[r1],#1
 687 04de 12B1     	    cbz r2,6f 
 688 04e0 8242     	    cmp r2,r0 
 689 04e2 02D0     	    beq 7f 
 690 04e4 F9E7     	    b 2b
 691 04e6 A0F10702 	6:  sub r2,r0,#7     
 692 04ea 02F10700 	7:  add r0,r2,#7
 693 04ee 06BC     	9:  pop {r1,r2}   
 694 04f0 7047     	    _RET
 695              	
 696 04f2 6162746E 	escaped: .asciz "abtnvfr"
 696      76667200 
 697              	
 698              	/*********************************************
 699              	   skip character in TIB 
 700              	   input:
 701              	      r0    character to skip 
 702              	      r3    tib index 
 703              	      T1    tib adr
 704              	    output: 
 705              	      r3    updated
 706              	    use:
 707              	      r1     
 708              	**********************************************/   
 709 04fa 00BF     	    _FUNC skip
 710 04fc 02B4     	    push {r1} 
 711 04fe 18F80310 	1:  ldrb r1,[T1,r3]
 712 0502 8142     	    cmp r1,r0
 713 0504 02D1     	    bne 2f
 714 0506 03F10103 	    add r3,#1 
 715 050a F8E7     	    b 1b 
 716 050c 2360     	2:  str r3,[UPP,#IN_SAVED]
 717 050e 02BC     	    pop {r1}
ARM GAS  tinyBasic.s 			page 26


 718 0510 7047     	    _RET
 719              	
 720              	/********************************************
 721              	    upper
 722              	    convert character in upper case 
 723              	    input: 
 724              	      r0   character 
 725              	    output:
 726              	      r0   upper case character 
 727              	*********************************************/
 728 0512 00BF     	    _FUNC upper 
 729 0514 6128     	    cmp r0,#'a' 
 730 0516 03DB     	    blt 9f 
 731 0518 7A28     	    cmp r0,#'z' 
 732 051a 01DC     	    bgt 9f 
 733 051c 00F05F00 	    and r0,#0x5f 
 734 0520 7047     	9:  _RET 
 735              	
 736              	/***************************************
 737              	   is_digit 
 738              	   check if char is decimal digit.
 739              	   convert to decimal digit.
 740              	   input:
 741              	      r0    char 
 742              	   output:
 743              	      r0    if !Z then converted digit 
 744              	      Z     0 true | 1 false  
 745              	***************************************/
 746 0522 00BF     	    _GBL_FUNC is_digit 
 747 0524 02B4     	    push {r1} 
 748 0526 81EA0101 	    eor r1,r1 
 749 052a 3028     	    cmp r0,#'0' 
 750 052c 05DB     	    blt 9f
 751 052e 3A28     	    cmp r0,'9'+1
 752 0530 03D5     	    bpl 9f 
 753 0532 4FF0FF31 	    mov r1,#-1
 754 0536 A0F13000 	    sub r0,#'0'  
 755              	9:   
 756 053a 0940     	    ands r1,r1
 757 053c 02BC     	    pop {r1} 
 758 053e 7047     	    _RET 
 759              	
 760              	/***************************************
 761              	    is_hex 
 762              	    check for hexadecimal digit 
 763              	    convert to hex digit.
 764              	    input:
 765              	      r0    
 766              	    output:
 767              	      r0     if !Z then converted digit 
 768              	      Z      0 true | 1 false         
 769              	***************************************/
 770              	    _FUNC is_hex 
 771 0540 02B4     	    push {r1}
 772 0542 4FF0FF31 	    mov r1,#-1 
 773 0546 4128     	    cmp r0,#'A' 
 774 0548 01D4     	    bmi 1f 
ARM GAS  tinyBasic.s 			page 27


 775 054a A0F10700 	    sub r0,#7 
 776 054e A0F13000 	1:  sub r0,#'0'
 777 0552 01D4     	    bmi 2f 
 778 0554 1028     	    cmp r0,#16
 779 0556 01D4     	    bmi 9f 
 780 0558 81EA0101 	2:  eor r1,r1  
 781 055c 0940     	9:  ands r1,r1 
 782 055e 02BC     	    pop {r1}
 783 0560 7047     	    _RET 
 784              	
 785              	/***************************************
 786              	    is_bit 
 787              	    check if char is '0'|'1' 
 788              	    convert to binary digit. 
 789              	    input:
 790              	      r0    
 791              	    output:
 792              	      r0     if !Z then converted digit 
 793              	      Z      0 true | 1 false         
 794              	***************************************/
 795 0562 00BF     	    _FUNC is_bit
 796 0564 02B4     	    push  {r1}
 797 0566 4FF0FF31 	    mov r1,#-1 
 798 056a A0F13000 	    sub r0,#'0' 
 799 056e 01D4     	    bmi 2f 
 800 0570 0229     	    cmp r1,#2
 801 0572 01D4     	    bmi 9f 
 802 0574 81EA0101 	2:  eor r1,r1 
 803 0578 0940     	9:  ands r1,r1 
 804 057a 02BC     	    pop {r1}
 805 057c 7047     	    _RET 
 806              	
 807              	/***************************************
 808              	    is_alpha 
 809              	    check if character is {A..Z} 
 810              	  input:
 811              	    r0   character 
 812              	  output: 
 813              	    r0    same character 
 814              	    Z    0 true | 1 false  
 815              	****************************************/
 816 057e 00BF     	    _FUNC is_alpha
 817 0580 02B4     	    push {r1} 
 818 0582 4FF0FF31 	    mov r1,#-1 
 819 0586 4128     	    cmp r0,#'A' 
 820 0588 01DB     	    blt 8f 
 821 058a 5B28     	    cmp r0,#'Z'+1 
 822 058c 01D4     	    bmi 9f 
 823 058e 81EA0101 	8:  eor r1,r1  
 824 0592 0940     	9:  ands r1,r1 
 825 0594 02BC     	    pop {r1}
 826 0596 7047     	    _RET 
 827              	
 828              	/***************************************
 829              	    is_num 
 830              	    check if character is {0..9} 
 831              	  input:
ARM GAS  tinyBasic.s 			page 28


 832              	    r0   character 
 833              	  output: 
 834              	    r0    same character 
 835              	    Z    0 true | 1 false  
 836              	****************************************/
 837              	    _FUNC is_num 
 838 0598 02B4     	    push {r1} 
 839 059a 4FF0FF31 	    mov r1,#-1 
 840 059e 3028     	    cmp r0,#'0' 
 841 05a0 01DB     	    blt 8f 
 842 05a2 3A28     	    cmp r0,#'9'+1 
 843 05a4 01D4     	    bmi 9f 
 844 05a6 81EA0101 	8:  eor r1,r1  
 845 05aa 0940     	9:  ands r1,r1 
 846 05ac 02BC     	    pop {r1}
 847 05ae 7047     	    _RET 
 848              	
 849              	/*****************************************
 850              	    is_alnum 
 851              	    check if character is alphanumeric 
 852              	    input:
 853              	      r0 
 854              	    output:
 855              	      r0     same 
 856              	      Z      1 false | 0 true 
 857              	*****************************************/
 858              	    _FUNC is_alnum 
 859 05b0 00B5FFF7 	    _CALL is_alpha 
 859      E5FF5DF8 
 859      04EB
 860 05ba 04D1     	    bne 9f 
 861 05bc 00B5FFF7 	    _CALL is_num 
 861      EBFF5DF8 
 861      04EB
 862 05c6 7047     	9:  _RET 
 863              	
 864              	/******************************************
 865              	    atoi 
 866              	    convert ascii to integer 
 867              	    input:
 868              	      r0   *buffer 
 869              	      r1   base 
 870              	    output:
 871              	      r0   0 no integer found 
 872              	      r1   integer
 873              	    use:
 874              	      r2   base  
 875              	      T1   *buffer 
 876              	      T2   digit count  
 877              	******************************************/
 878              	    _GBL_FUNC atoi 
 879 05c8 2DE90403 	    push {r2,T1,T2}
 880 05cc 8046     	    mov T1,r0  // *buffer 
 881 05ce 0A46     	    mov r2,r1  // base  
 882 05d0 81EA0101 	    eor r1,r1  // converted integer 
 883 05d4 89EA0909 	    eor T2,T2  // digit count 
 884 05d8 18F8010B 	1:  ldrb r0,[T1],#1
ARM GAS  tinyBasic.s 			page 29


 885 05dc 00B5FFF7 	    _CALL upper 
 885      99FF5DF8 
 885      04EB
 886 05e6 3028     	    cmp r0,#'0'
 887 05e8 0FD4     	    bmi 8f
 888 05ea 3A28     	    cmp r0,#'9'+1 
 889 05ec 03D4     	    bmi 2f 
 890 05ee 4128     	    cmp r0,#'A'
 891 05f0 0BD4     	    bmi 8f 
 892 05f2 A0F10700 	    sub r0,#7 
 893 05f6 A0F13000 	2:  sub r0,#'0' 
 894 05fa 9042     	    cmp r0,r2
 895 05fc 05D5     	    bpl 8f  
 896 05fe 02FB01F1 	    mul r1,r2 
 897 0602 0144     	    add r1,r0
 898 0604 09F10109 	    add T2,#1
 899 0608 E6E7     	    b 1b 
 900 060a 4846     	8:  mov r0,T2  
 901 060c BDE80403 	    pop {r2,T1,T2}
 902 0610 7047     	    _RET 
 903              	
 904              	/*****************************************
 905              	    parse_keyword 
 906              	    parse work and ckeck if in dictionary 
 907              	    input:
 908              	      r0    first character 
 909              	      r3    tib index 
 910              	      t1    tib 
 911              	      t2    pad 
 912              	    output:
 913              	      r3    updated 
 914              	      t1    updated 
 915              	      t2    updated   
 916              	    use:
 917              	    
 918              	*****************************************/
 919 0612 00BF     	    _FUNC parse_keyword 
 920 0614 4DF8049D 	    push {T2}
 921 0618 18F80300 	    ldrb r0,[T1,r3]
 922 061c 03F10103 	    add r3,#1
 923 0620 00B3     	    cbz r0,2f 
 924 0622 00B5FFF7 	    _CALL upper 
 924      76FF5DF8 
 924      04EB
 925 062c 00B5FFF7 	    _CALL is_alpha 
 925      A7FF5DF8 
 925      04EB
 926 0636 00F03D81 	    beq syntax_error 
 927 063a 09F8010B 	    strb r0,[T2],#1
 928 063e 18F80300 	1:  ldrb r0,[T1,r3]
 929 0642 03F10103 	    add r3,#1 
 930 0646 68B1     	    cbz r0,2f 
 931 0648 00B5FFF7 	    _CALL upper 
 931      63FF5DF8 
 931      04EB
 932 0652 00B5FFF7 	    _CALL is_alnum
 932      ACFF5DF8 
ARM GAS  tinyBasic.s 			page 30


 932      04EB
 933 065c 02D0     	    beq 2f 
 934 065e 09F8010B 	    strb r0,[T2],#1
 935 0662 ECE7     	    b 1b 
 936 0664 A3F10103 	2:  sub r3,#1
 937 0668 80EA0000 	    eor r0,r0
 938 066c 89F80000 	    strb r0,[T2] 
 939 0670 0098     	    ldr r0,[sp]
 940 0672 4178     	    ldrb r1,[r0,#1] 
 941 0674 29B9     	    cbnz r1,3f
 942 0676 0178     	    ldrb r1,[r0]
 943 0678 A1F14101 	    sub r1,#'A'
 944 067c 4FF00400 	    mov r0,#TK_VAR
 945 0680 08E0     	    b 9f 
 946 0682 DFF8481A 	3:  ldr r1,=kword_dict  
 947 0686 00B500F0 	    _CALL search_dict 
 947      F4F95DF8 
 947      04EB
 948 0690 00B9     	    cbnz r0,9f 
 949 0692 0FE1     	    b syntax_error 
 950 0694 5DF8049B 	9:  pop {T2}
 951 0698 7047     	    _RET 
 952              	
 953              	
 954              	/*******************
 955              	    DECOMPILER 
 956              	*******************/
 957              	
 958              	/********************************************
 959              	    cmd_name 
 960              	    search bytecode in dictionary and 
 961              	    return its name 
 962              	  input:
 963              	    r0    keyword bytecode 
 964              	  ouput:
 965              	    r0    name string 
 966              	  use:
 967              	    T1    link 
 968              	    T2    tmp 
 969              	*********************************************/
 970 069a 00BF     	    _FUNC cmd_name 
 971 069c 2DE90003 	    push {T1,T2}
 972 06a0 DFF8288A 	    ldr T1,=kword_dict 
 973 06a4 58F8089C 	1:  ldr T2,[T1,#-8]
 974 06a8 8145     	    cmp T2,r0 
 975 06aa 04D0     	    beq 2f 
 976 06ac 58F80C8C 	    ldr T1,[T1,#-12]
 977 06b0 B8F1000F 	    cmp T1,#0
 978 06b4 F6D1     	    bne 1b  
 979 06b6 4046     	2:  mov r0,T1 
 980 06b8 BDE80003 	    pop {T1,T2}
 981 06bc 7047     	    _RET
 982              	
 983              	/*****************************
 984              	  decompile_line 
 985              	  detokenize BASIC line 
 986              	  input:
ARM GAS  tinyBasic.s 			page 31


 987              	    r0  *token list 
 988              	    r1  *output buffer 
 989              	  output:
 990              	    r0  *output buffer (.asciz) 
 991              	  use:
 992              	    T1  *output buffer
 993              	    BPTR  *token list
 994              	    IN  offset in token list  
 995              	******************************/
 996 06be 00BF     	    _GBL_FUNC decompile_line
 997 06c0 2DE90201 	    push {r1,T1} 
 998 06c4 8346     	    mov BPTR,r0 
 999 06c6 4FF0000A 	    mov IN,#0
 1000 06ca 8846     	    mov T1,r1 
 1001 06cc 3BF80A00 	    ldrh r0,[BPTR,IN]
 1002 06d0 0AF1020A 	    add IN,#2 
 1003 06d4 4FF00A01 	    mov r1,#10 
 1004 06d8 00B5FFF7 	    _CALL itoa
 1004      FEFF5DF8 
 1004      04EB
 1005 06e2 4146     	    mov r1,T1
 1006 06e4 00B5FFF7 	    _CALL strcpy
 1006      FEFF5DF8 
 1006      04EB
 1007 06ee 4046     	    mov r0,T1 
 1008 06f0 00B5FFF7 	    _CALL strlen
 1008      FEFF5DF8 
 1008      04EB
 1009 06fa 8044     	    add T1,r0 
 1010 06fc 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1011 0700 0AF1010A 	    add IN,#1 
 1012 0704 6060     	    str r0,[UPP,#COUNT]
 1013              	decomp_loop:
 1014 0706 00B500F0 	    _CALL next_token
 1014      E2FA5DF8 
 1014      04EB
 1015 0710 0028     	    cmp r0,#TK_NONE 
 1016 0712 00F09B80 	    beq 9f  
 1017 0716 0E28     	    cmp r0,#TK_INTGR 
 1018 0718 15D1     	    bne 1f 
 1019 071a 0846     	    mov r0,r1 
 1020 071c A169     	    ldr r1,[UPP,#BASE]
 1021 071e 00B5FFF7 	    _CALL itoa
 1021      FEFF5DF8 
 1021      04EB
 1022 0728 01B4     	    push {r0}
 1023 072a 4146     	    mov r1,T1 
 1024 072c 00B5FFF7 	    _CALL strcpy
 1024      FEFF5DF8 
 1024      04EB
 1025 0736 01BC     	    pop {r0} 
 1026 0738 00B5FFF7 	    _CALL strlen
 1026      FEFF5DF8 
 1026      04EB
 1027 0742 8044     	    add T1,r0 
 1028 0744 DFE7     	    b decomp_loop 
 1029 0746 0428     	1:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 32


 1030 0748 04D1     	    bne 2f 
 1031 074a 01F14100 	    add r0,r1,'A'
 1032 074e 08F8010B 	    strb r0,[T1],#1 
 1033 0752 D8E7     	    b decomp_loop 
 1034 0754 0328     	2:  cmp r0,#TK_CHAR 
 1035 0756 0AD1     	    bne 3f 
 1036 0758 4FF05C00 	    mov r0,#'\\'
 1037 075c 08F8010B 	    strb r0,[T1],#1
 1038 0760 08F8011B 	    strb r1,[T1],#1
 1039 0764 4FF02000 	    mov r0,#SPACE 
 1040 0768 08F8010B 	    strb r0,[T1],#1
 1041 076c CBE7     	    b decomp_loop 
 1042 076e 0228     	3:  cmp r0,#TK_QSTR 
 1043 0770 17D1     	    bne 4f 
 1044 0772 4FF02200 	    mov r0,#'"'
 1045 0776 08F8010B 	    strb r0,[T1],#1 
 1046 077a 0846     	    mov r0,r1
 1047 077c 02B4     	    push {r1}
 1048 077e 4146     	    mov r1,T1  
 1049 0780 00B5FFF7 	    _CALL strcpy
 1049      FEFF5DF8 
 1049      04EB
 1050 078a 01BC     	    pop {r0}
 1051 078c 00B5FFF7 	    _CALL strlen 
 1051      FEFF5DF8 
 1051      04EB
 1052 0796 8044     	    add T1,r0 
 1053 0798 4FF02200 	    mov r0,#'"'
 1054 079c 08F8010B 	    strb r0,[T1],#1 
 1055 07a0 B1E7     	    b decomp_loop
 1056 07a2 0A28     	4:  cmp r0,#TK_CMD
 1057 07a4 3AD4     	    bmi 5f 
 1058 07a6 0E28     	    cmp r0,#TK_INTGR 
 1059 07a8 38D5     	    bpl 5f
 1060 07aa 4FF02000 	    mov r0,#SPACE 
 1061 07ae 08F8010B 	    strb r0,[T1],#1  
 1062 07b2 0846     	    mov r0,r1
 1063 07b4 3128     	    cmp r0,#PRT_IDX 
 1064 07b6 04D1     	    bne 1f  
 1065 07b8 4FF03F00 	    mov r0,#'?'
 1066 07bc 08F8010B 	    strb r0,[T1],#1 
 1067 07c0 27E0     	    b 3f 
 1068 07c2 3428     	1:  cmp r0,#REM_IDX
 1069 07c4 12D1     	    bne 1f
 1070 07c6 4FF02700 	    mov r0,#'\''
 1071 07ca 08F8010B 	    strb r0,[T1],#1 
 1072 07ce 0BEB0A00 	    add r0,BPTR,IN
 1073 07d2 4146     	    mov r1,T1   
 1074 07d4 00B5FFF7 	    _CALL strcpy
 1074      FEFF5DF8 
 1074      04EB
 1075 07de 80EA0000 	    eor r0,r0 
 1076 07e2 88F80000 	    strb r0,[T1]  
 1077 07e6 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1078 07ea 2FE0     	    b 9f 
 1079 07ec 00B5FFF7 	1:  _CALL cmd_name
 1079      55FF5DF8 
ARM GAS  tinyBasic.s 			page 33


 1079      04EB
 1080 07f6 01B4     	2:  push {r0}
 1081 07f8 4146     	    mov r1,T1 
 1082 07fa 00B5FFF7 	    _CALL strcpy 
 1082      FEFF5DF8 
 1082      04EB
 1083 0804 01BC     	    pop {r0}
 1084 0806 00B5FFF7 	    _CALL strlen 
 1084      FEFF5DF8 
 1084      04EB
 1085 0810 8044     	    add T1,r0 
 1086 0812 4FF02000 	3:  mov r0,#SPACE 
 1087 0816 08F8010B 	    strb r0,[T1],#1 
 1088 081a 74E7     	    b decomp_loop
 1089 081c 01B4     	5:  push {r0}
 1090 081e DFF8B018 	    ldr r1,=single_char 
 1091 0822 085C     	    ldrb r0,[r1,r0]
 1092 0824 02BC     	    pop {r1}
 1093 0826 10B1     	    cbz r0,6f 
 1094 0828 08F8010B 	    strb r0,[T1],#1 
 1095 082c 6BE7     	    b decomp_loop
 1096 082e 3329     	6:  cmp r1,#TK_GE 
 1097 0830 02D1     	    bne 7f 
 1098 0832 DFF8A008 	    ldr r0,=ge_str
 1099 0836 DEE7     	    b 2b 
 1100 0838 3629     	7:  cmp r1,#TK_LE 
 1101 083a 02D1     	    bne 8f
 1102 083c DFF89808 	    ldr r0,=le_str
 1103 0840 D9E7     	    b 2b
 1104 0842 3529     	8:  cmp r1,#TK_NE 
 1105 0844 02D1     	    bne 9f 
 1106 0846 DFF89408 	    ldr r0,=ne_str 
 1107 084a D4E7     	    b 2b 
 1108 084c 80EA0000 	9:  eor r0,r0 
 1109 0850 88F80000 	    strb r0,[T1]
 1110 0854 BDE80101 	    pop {r0,T1}
 1111 0858 7047     	    _RET 
 1112              	
 1113 085a 3E3D00   	ge_str: .asciz ">="
 1114 085d 3C3D00   	le_str: .asciz "<="
 1115 0860 3C3E00   	ne_str: .asciz "<>"
 1116              	
 1117              	single_char:
 1118 0863 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1118      00402829 
 1118      2C23
 1119 086d 00000000 	  .space 6
 1119      0000
 1120 0873 2B2D     	  .byte '+','-'
 1121 0875 00000000 	  .space 14
 1121      00000000 
 1121      00000000 
 1121      0000
 1122 0883 2A2F25   	  .byte '*','/','%'
 1123 0886 00000000 	  .space 14
 1123      00000000 
 1123      00000000 
ARM GAS  tinyBasic.s 			page 34


 1123      0000
 1124 0894 3E3D003C 	  .byte '>','=',0,'<',0,0
 1124      0000
 1125              	
 1126              	
 1127              	/**********************************
 1128              	  modulo 
 1129              	  compute r0 mod r1
 1130              	  input:
 1131              	    r0   dividend
 1132              	    r1   divisor 
 1133              	  output:
 1134              	    r0   TK_INTGR 
 1135              	    r1   r0 mod r1 
 1136              	*********************************/
 1137 089a 00BF     	    _GBL_FUNC modulo 
 1138 089c 01B4     	    push {r0}
 1139 089e B0FBF1F0 	    udiv r0,r1 
 1140 08a2 01FB00F0 	    mul  r0,r1 
 1141 08a6 02BC     	    pop {r1}
 1142 08a8 A1EB0001 	    sub r1,r0
 1143 08ac 4FF00E00 	    mov r0,#TK_INTGR
 1144 08b0 7047     	    _RET 
 1145              	
 1146              	/**********************************
 1147              	      BASIC commands 
 1148              	**********************************/
 1149              	
 1150              	/*********************************
 1151              	    syntax_error 
 1152              	    display syntax error message and 
 1153              	    abort program 
 1154              	  input:
 1155              	    none  
 1156              	  output: 
 1157              	    none 
 1158              	  use:
 1159              	*********************************/
 1160 08b2 00BF     	    _FUNC syntax_error 
 1161 08b4 4FF00200 	    mov r0,#ERR_SYNTAX
 1162 08b8 00E0     	    b tb_error 
 1163              	
 1164              	/*********************************
 1165              	    tb_error 
 1166              	    display BASIC error and 
 1167              	    abort program. 
 1168              	  input:
 1169              	    r0    error code   
 1170              	  output: 
 1171              	    none 
 1172              	  use:
 1173              	    r1    temp 
 1174              	*********************************/
 1175 08ba 00BF     	    _FUNC tb_error 
 1176 08bc 216C     	    ldr r1,[UPP,#FLAGS]
 1177 08be 11F0200F 	    tst r1,#FCOMP
 1178 08c2 57D1     	    bne compile_error
ARM GAS  tinyBasic.s 			page 35


 1179              	rt_error:
 1180 08c4 01B4     	    push {r0}
 1181 08c6 DFF81808 	    ldr r0,=rt_error_msg 
 1182 08ca 00B5FFF7 	    _CALL uart_puts 
 1182      FEFF5DF8 
 1182      04EB
 1183 08d4 01BC     	    pop {r0}
 1184 08d6 DFF80C18 	    ldr r1,=err_msg  
 1185 08da 4FEA8000 	    lsl r0,#2 
 1186 08de 0858     	    ldr r0,[r1,r0]
 1187 08e0 00B5FFF7 	    _CALL uart_puts
 1187      FEFF5DF8 
 1187      04EB
 1188              	// print line number     
 1189 08ea D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1190 08ee D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1191 08f2 DFF8F407 	    ldr r0,=lineno_msg 
 1192 08f6 00B5FFF7 	    _CALL uart_puts
 1192      FEFF5DF8 
 1192      04EB
 1193 0900 BBF80000 	    ldrh r0,[BPTR]
 1194 0904 4FF00A01 	    mov r1,#10
 1195 0908 00B5FFF7 	    _CALL print_int 
 1195      FEFF5DF8 
 1195      04EB
 1196              	// line address 
 1197 0912 DFF8D807 	    ldr r0,=line_adr_msg 
 1198 0916 00B5FFF7 	    _CALL uart_puts 
 1198      FEFF5DF8 
 1198      04EB
 1199 0920 5846     	    mov r0,BPTR 
 1200 0922 4FF01001 	    MOV r1,#16
 1201 0926 00B5FFF7 	    _CALL print_int
 1201      FEFF5DF8 
 1201      04EB
 1202              	// print error offset on line      
 1203 0930 DFF8BC07 	    ldr r0,=token_at_msg 
 1204 0934 00B5FFF7 	    _CALL uart_puts 
 1204      FEFF5DF8 
 1204      04EB
 1205 093e D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1206 0942 5046     	    mov r0,IN 
 1207 0944 4FF01001 	    mov r1,#16 
 1208 0948 00B5FFF7 	    _CALL print_int
 1208      FEFF5DF8 
 1208      04EB
 1209 0952 4FF00D00 	    mov r0,#CR 
 1210 0956 00B5FFF7 	    _CALL uart_putc
 1210      FEFF5DF8 
 1210      04EB
 1211              	// dump tokenize line 
 1212 0960 5846     	    mov r0,BPTR
 1213 0962 8278     	    ldrb r2,[r0,#2]
 1214 0964 04B4     	    push {r2}
 1215 0966 00B500F0 	    _CALL dump01 
 1215      69F95DF8 
 1215      04EB
ARM GAS  tinyBasic.s 			page 36


 1216 0970 FFF7FEBF 	    b warm_start 
 1217              	compile_error:
 1218 0974 DFF86C17 	    ldr r1,=err_msg 
 1219 0978 4FEA8000 	    lsl r0,#2 
 1220 097c 0858     	    ldr r0,[r1,r0]
 1221 097e 00B5FFF7 	    _CALL uart_puts
 1221      FEFF5DF8 
 1221      04EB
 1222 0988 A068     	    ldr r0,[UPP,#BASICPTR]
 1223 098a 00B5FFF7 	    _CALL uart_puts
 1223      FEFF5DF8 
 1223      04EB
 1224 0994 4FF00D00 	    mov r0,#CR 
 1225 0998 00B5FFF7 	    _CALL uart_putc  
 1225      FEFF5DF8 
 1225      04EB
 1226 09a2 2068     	    ldr r0,[UPP,#IN_SAVED]
 1227 09a4 00B5FFF7 	    _CALL spaces 
 1227      FEFF5DF8 
 1227      04EB
 1228 09ae 4FF05E00 	    mov r0,#'^' 
 1229 09b2 00B5FFF7 	    _CALL uart_putc
 1229      FEFF5DF8 
 1229      04EB
 1230 09bc 4FF00D00 	    mov r0,#CR 
 1231 09c0 00B5FFF7 	    _CALL uart_putc   
 1231      FEFF5DF8 
 1231      04EB
 1232 09ca FFF7FEBF 	    b  warm_start  
 1233              	    
 1234 09ce 0A52756E 	rt_error_msg: .asciz "\nRuntime error\n"
 1234      74696D65 
 1234      20657272 
 1234      6F720A00 
 1235 09de 6C696E65 	lineno_msg:   .asciz "line: "
 1235      3A2000
 1236 09e5 2C616464 	line_adr_msg:   .asciz ",address: "
 1236      72657373 
 1236      3A2000
 1237 09f0 2C6F6666 	token_at_msg: .asciz ",offset: "
 1237      7365743A 
 1237      2000
 1238              	
 1239              	err_msg:
 1240 09fa 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1240      00000000 
 1240      0D000000 
 1240      1B000000 
 1240      34000000 
 1241 0a12 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1241      6F000000 
 1241      89000000 
 1241      9A000000 
 1241      AB000000 
 1242 0a26 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1242      EA000000 
 1242      FA000000 
ARM GAS  tinyBasic.s 			page 37


 1242      0E010000 
 1242      21010000 
 1243 0a3a 2E010000 	   .word err_cant_prog 
 1244              	
 1245              	    .section .rodata.tb_error 
 1246              	
 1247 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1247      72792066 
 1247      756C6C0A 
 1247      00
 1248 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1248      61782065 
 1248      72726F72 
 1248      0A00
 1249 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1249      206F7065 
 1249      72617469 
 1249      6F6E206F 
 1249      76657266 
 1250 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1250      73696F6E 
 1250      20627920 
 1250      300A00
 1251 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1251      6C696420 
 1251      6C696E65 
 1251      206E756D 
 1251      6265722E 
 1252 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1252      74696D65 
 1252      206F6E6C 
 1252      79207573 
 1252      6167652E 
 1253 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1253      616E6420 
 1253      6C696E65 
 1253      206F6E6C 
 1253      79207573 
 1254 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1254      69636174 
 1254      65206E61 
 1254      6D652E0A 
 1254      00
 1255 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1255      206E6F74 
 1255      20666F75 
 1255      6E642E0A 
 1255      00
 1256 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1256      76616C75 
 1256      652E0A00 
 1257 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1257      20696E20 
 1257      65787465 
 1257      6E646564 
 1257      206D656D 
 1258 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
ARM GAS  tinyBasic.s 			page 38


 1258      61746120 
 1258      666F756E 
 1258      642E0A00 
 1259 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1259      726F6772 
 1259      616D2069 
 1259      6E205241 
 1259      4D210A00 
 1260 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1260      20737973 
 1260      74656D20 
 1260      66756C6C 
 1260      2E0A00
 1261 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1261      65722066 
 1261      756C6C0A 
 1261      00
 1262 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1262      74206D6F 
 1262      64696679 
 1262      2070726F 
 1262      6772616D 
 1263              	
 1264 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1264      2074696D 
 1264      65206572 
 1264      726F722C 
 1264      2000
 1265 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1265      70696C65 
 1265      20657272 
 1265      6F722C20 
 1265      00
 1266 018d 6C617374 	tk_id: .asciz "last token id: "
 1266      20746F6B 
 1266      656E2069 
 1266      643A2000 
 1267              	
 1268              	
 1269              	    .section  .text , "ax", %progbits 
 1270              	
 1271              	/*********************************
 1272              	   skip_line 
 1273              	   data and remark line are skipped
 1274              	   by the interpreter 
 1275              	***********************************/
 1276 0a3e 00BF     	    _FUNC skip_line 
 1277 0a40 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1278 0a44 7047     	    _RET 
 1279              	
 1280              	
 1281              	/*********************************
 1282              	   BASIC: BTGL adr, mask   
 1283              	   toggle bits [adr]=[adr]^mask  
 1284              	   input:
 1285              	     r0    adr 
 1286              	     r1    mask 
ARM GAS  tinyBasic.s 			page 39


 1287              	    output;
 1288              	      none 
 1289              	    use:
 1290              	      T1   temp
 1291              	      T2   temp  
 1292              	*******************************/     
 1293 0a46 00BF     	    _FUNC BTGL 
 1294              	
 1295 0a48 7047     	    _RET 
 1296              	
 1297              	/***************************************
 1298              	   kword_cmp
 1299              	   compare keyword to dict entry
 1300              	  input:
 1301              	    r0  keyword 
 1302              	    r1  dict entry 
 1303              	    r2  character count 
 1304              	  output:
 1305              	    r0  0 not same | -1 same 
 1306              	  use:
 1307              	    r6   result  
 1308              	    T1   char 1
 1309              	    T2   char 2
 1310              	**************************************/   
 1311 0a4a 00BF     	    _FUNC kword_cmp 
 1312 0a4c 2DE94003 	    push {r6,T1,T2}
 1313 0a50 4FF0FF36 	    mov r6,#-1 
 1314 0a54 4AB1     	1:  cbz r2,9f       
 1315 0a56 10F8018B 	    ldrb T1,[r0],#1
 1316 0a5a 11F8019B 	    ldrb T2,[r1],#1
 1317 0a5e A2F10102 	    sub r2,#1
 1318 0a62 C845     	    cmp T1,T2
 1319 0a64 F6D0     	    beq 1b 
 1320 0a66 86EA0606 	    eor r6,r6  
 1321 0a6a 3046     	9:  mov r0,r6
 1322 0a6c BDE84003 	    pop {r6,T1,T2}
 1323 0a70 7047     	    _RET 
 1324              	
 1325              	/***********************************************
 1326              	    search_dict 
 1327              	    search keyword in dictionary
 1328              	   input:
 1329              	  	 r0   keyword 
 1330              	     r1		dictionary first name field address  
 1331              	   output:
 1332              	     r0 		token attribute 
 1333              	     r1		  cmd_index if r0!=TK_NONE  
 1334              	   use:
 1335              	     r3   length keyword 
 1336              	     T1   keyword
 1337              	     T2   link  
 1338              	**********************************************/
 1339 0a72 00BF     	  _FUNC search_dict
 1340 0a74 2DE90C03 	  push {r2,r3,T1,T2}
 1341 0a78 8046     	  mov T1,r0 
 1342 0a7a 00B5FFF7 	  _CALL strlen 
 1342      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 40


 1342      04EB
 1343 0a84 0346     	  mov r3,r0  
 1344              	1:  
 1345 0a86 8946     	   mov T2,r1  // keep for linking   
 1346 0a88 0878     	   ldrb r0,[r1] 
 1347 0a8a 78B1     	   cbz r0,9f // null byte, end of dictionary
 1348 0a8c 4046     	   mov r0,T1
 1349 0a8e 1A46     	   mov r2,r3   
 1350 0a90 00B5FFF7 	   _CALL kword_cmp  
 1350      DBFF5DF8 
 1350      04EB
 1351 0a9a 18B9     	   cbnz r0,2f 
 1352 0a9c 4946     	   mov r1,T2
 1353 0a9e 51F80C1C 	   ldr r1,[r1,#-12]
 1354 0aa2 F0E7     	   b 1b   
 1355              	2: // found
 1356 0aa4 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1357 0aa8 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1358 0aac BDE80C03 	9: pop {r2,r3,T1,T2}
 1359 0ab0 7047     	   _RET 
 1360              	
 1361              	
 1362              	/**************************
 1363              	    INTERPRETER 
 1364              	*************************/
 1365              	
 1366              	/*********************************
 1367              	   cold_start 
 1368              	   initialize BASIC interpreter 
 1369              	   never leave 
 1370              	   input:
 1371              	     none 
 1372              	   output:
 1373              	    none 
 1374              	*********************************/
 1375              	  .type cold_start, %function 
 1376              	  .global cold_start 
 1377              	cold_start: 
 1378 0ab2 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1378      C2F20004 
 1379 0aba DFF84800 	    ldr r0,src_addr 
 1380 0abe DFF84810 	    ldr r1,dest_addr
 1381 0ac2 0968     	    ldr r1,[r1] 
 1382 0ac4 0C44     	    add UPP,r1 // system variables base address   
 1383              	// clear RAM
 1384 0ac6 2046     	    mov r0,UPP  
 1385 0ac8 DFF85C11 	    ldr r1,tib 
 1386 0acc 82EA0202 	    eor r2,r2 
 1387 0ad0 40F8042B 	1:  str r2,[r0],#4 
 1388 0ad4 8842     	    cmp r0,r1 
 1389 0ad6 FBD4     	    bmi 1b 
 1390              	//copy initialized system variables to ram 
 1391 0ad8 DFF82800 	    ldr r0,src_addr 
 1392 0adc 2146     	    mov r1,UPP 
 1393 0ade DFF82C20 	    ldr r2,sysvar_size
 1394 0ae2 00B5FFF7 	    _CALL cmove
 1394      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 41


 1394      04EB
 1395 0aec 00B500F0 	    _CALL prt_version
 1395      0FF85DF8 
 1395      04EB
 1396 0af6 00B500F0 	    _CALL clear_basic  
 1396      5EF85DF8 
 1396      04EB
 1397 0b00 FFF7FEBF 	    b warm_start    
 1398              	src_addr:
 1399 0b04 00000000 	  .word uzero
 1400              	dest_addr:
 1401 0b08 00000000 	  .word vectors_size
 1402 0b0c CC000000 	sysvar_size: .word ulast-uzero 
 1403              	
 1404              	/************************************
 1405              	    print firmware version 
 1406              	    input: 
 1407              	      none 
 1408              	    output:
 1409              	      none 
 1410              	    use:
 1411              	      r0 
 1412              	***********************************/
 1413              	    _FUNC prt_version 
 1414 0b10 DFF8E005 	    ldr r0,=version_msg 
 1415 0b14 00B5FFF7 	    _CALL uart_puts
 1415      FEFF5DF8 
 1415      04EB
 1416 0b1e 9FF87800 	    ldrb r0,version 
 1417 0b22 4FEA1010 	    lsr r0,#4 
 1418 0b26 00F13000 	    add r0,#'0' 
 1419 0b2a 3A28     	    cmp r0,#'9'+1 
 1420 0b2c 01D4     	    bmi 1f 
 1421 0b2e 00F10700 	    add r0,#7 
 1422              	  1:
 1423 0b32 00B5FFF7 	    _CALL uart_putc 
 1423      FEFF5DF8 
 1423      04EB
 1424 0b3c 4FF02E00 	    mov r0,#'. 
 1425 0b40 00B5FFF7 	    _CALL uart_putc 
 1425      FEFF5DF8 
 1425      04EB
 1426 0b4a 9FF84C00 	    ldrb r0,version 
 1427 0b4e 00F00F00 	    and r0,#15 
 1428 0b52 00F13000 	    add r0,'0' 
 1429 0b56 3A28     	    cmp r0,#'9'+1 
 1430 0b58 01D4     	    bmi 1f 
 1431 0b5a 00F10700 	    add r0,#7
 1432              	  1: 
 1433 0b5e 00B5FFF7 	    _CALL uart_putc 
 1433      FEFF5DF8 
 1433      04EB
 1434 0b68 4FF00D00 	    mov r0,#CR 
 1435 0b6c 00B5FFF7 	    _CALL uart_putc 
 1435      FEFF5DF8 
 1435      04EB
 1436 0b76 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 42


 1437              	version_msg:
 1438 0b78 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1438      65207069 
 1438      6C6C2074 
 1438      696E7920 
 1438      42415349 
 1439              	version:
 1440 0b98 10       	    .byte 0x10 
 1441 0b99 0000BF   	    .p2align 2 
 1442              	
 1443              	
 1444              	/*****************************
 1445              	    clear_vars 
 1446              	    initialize variables to 0
 1447              	  input:
 1448              	    none 
 1449              	  output:
 1450              	    none 
 1451              	  use:
 1452              	    r0,r1,r2 
 1453              	*****************************/
 1454              	    _FUNC clear_vars 
 1455 0b9c 07B4     	    push {r0,r1,r2}
 1456 0b9e 80EA0000 	    eor r0,r0 
 1457 0ba2 04F16001 	    add r1,UPP,#VARS
 1458 0ba6 4FF01A02 	    mov r2,#26
 1459 0baa 41F8040B 	1:  str r0,[r1],#4 
 1460 0bae 013A     	    subs r2,#1
 1461 0bb0 FBD1     	    bne 1b  
 1462 0bb2 07BC     	    pop {r0,r1,r2}
 1463 0bb4 7047     	    _RET 
 1464              	
 1465              	/*****************************
 1466              	   clear_basic 
 1467              	   reset BASIC system variables 
 1468              	   and clear variables and RAM 
 1469              	*****************************/
 1470 0bb6 00BF     	    _FUNC clear_basic
 1471 0bb8 80EA0000 	  	eor r0,r0
 1472 0bbc 2064     	    str r0,[UPP,#FLAGS] 
 1473 0bbe 6060     	    str r0,[UPP,#COUNT]
 1474 0bc0 2060     	    str r0,[UPP,#IN_SAVED]
 1475 0bc2 A060     	    str r0,[UPP,#BASICPTR]
 1476 0bc4 E060     	    str r0,[UPP,#DATAPTR]
 1477 0bc6 2061     	    str r0,[UPP,#DATA]
 1478 0bc8 6061     	    str r0,[UPP,#DATALEN]
 1479 0bca 04F1CC00 	    add r0,UPP,#BASIC_START 
 1480 0bce 00F11000 	    add r0,#16 
 1481 0bd2 6FF00F01 	    mvn r1,#15
 1482 0bd6 00EA0100 	    and r0,r1 
 1483 0bda 2063     	    str r0,[UPP,#TXTBGN]
 1484 0bdc 6063     	    str r0,[UPP,#TXTEND]
 1485 0bde 00B5FFF7 	    _CALL clear_vars
 1485      DCFF5DF8 
 1485      04EB
 1486 0be8 206B     	    ldr r0,[UPP,#TXTBGN]
 1487 0bea DFF83C10 	    ldr r1,tib 
ARM GAS  tinyBasic.s 			page 43


 1488 0bee 82EA0202 	    eor r2,r2 
 1489 0bf2 40F8042B 	1:  str r2,[r0],#4
 1490 0bf6 8842     	    cmp r0,r1 
 1491 0bf8 FBD4     	    bmi 1b 
 1492 0bfa 7047     	    _RET  
 1493              	
 1494              	/***********************************
 1495              	   warm_init 
 1496              	   initialize interpreter context 
 1497              	  input:
 1498              	    none
 1499              	  output:
 1500              	    none 
 1501              	  use:
 1502              	    r0 
 1503              	***********************************/
 1504              	warm_init:
 1505              	// reset data stack       
 1506 0bfc DFF824C0 	    ldr DP,dstack 
 1507 0c00 4FF0000A 	    mov IN,#0 // BASIC line index 
 1508 0c04 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1509 0c08 80EA0000 	    eor r0,r0 
 1510 0c0c 6060     	    str r0,[UPP,#COUNT]  
 1511 0c0e 2064     	    str r0,[UPP,#FLAGS]
 1512 0c10 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1513 0c12 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1514 0c16 6064     	    str r0,[UPP,#TAB_WIDTH]
 1515 0c18 4FF00A00 	    mov r0,#10 // default base decimal 
 1516 0c1c A061     	    str r0,[UPP,#BASE]
 1517 0c1e 7047     	    _RET  
 1518              	
 1519 0c20 00000000 	mstack: .word _mstack 
 1520 0c24 00000000 	dstack: .word _dstack 
 1521 0c28 00000000 	tib: .word _tib 
 1522 0c2c 00000000 	pad: .word _pad 
 1523 0c30 FCFFFFFF 	array: .word _pad - 4 
 1524 0c34 0A524541 	ready: .asciz "\nREADY" 
 1524      445900
 1525              	
 1526              	/**********************************
 1527              	    warm_start 
 1528              	    start BASIC interpreter doesn't  
 1529              	    reset variables and code space 
 1530              	  input:
 1531              	    none 
 1532              	  output:
 1533              	    none 
 1534              	**********************************/
 1535 0c3b 00       	    _GBL_FUNC warm_start 
 1536              	// initialise parameters stack
 1537 0c3c FFF7DEFF 	    bl warm_init
 1538              	// reset main stack 
 1539 0c40 5FF82400 	    ldr r0,mstack
 1540 0c44 8546     	    mov sp,r0 
 1541 0c46 DFF8B004 	    ldr r0,=ready 
 1542 0c4a 00B5FFF7 	    _CALL uart_puts 
 1542      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 44


 1542      04EB
 1543              	// fall in cmd_line 
 1544              	
 1545              	/**********************************
 1546              	   cmd_line 
 1547              	   shell command line 
 1548              	   input:
 1549              	      none 
 1550              	   output:
 1551              	      none 
 1552              	   use:
 1553              	
 1554              	***********************************/
 1555              	    _FUNC cmd_line 
 1556 0c54 4FF00D00 	    mov r0,#CR 
 1557 0c58 00B5FFF7 	    _CALL uart_putc 
 1557      FEFF5DF8 
 1557      04EB
 1558 0c62 5FF83C00 	1:  ldr r0,tib
 1559 0c66 4FF05001 	    mov r1,#TIB_SIZE 
 1560 0c6a 00B5FFF7 	    _CALL readln 
 1560      FEFF5DF8 
 1560      04EB
 1561 0c74 0940     	    ands r1,r1 // empty line 
 1562 0c76 F4D0     	    beq 1b 
 1563 0c78 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1563      D3FA5DF8 
 1563      04EB
 1564 0c82 EED0     	    beq 1b  // tokens stored in text area 
 1565              	// interpret tokenized line 
 1566              	interpreter:
 1567 0c84 00B500F0 	  _CALL next_token 
 1567      23F85DF8 
 1567      04EB
 1568 0c8e 0028     	  cmp r0,#TK_NONE 
 1569 0c90 F8D0     	  beq interpreter   
 1570 0c92 0A28     	  cmp r0,#TK_CMD 
 1571 0c94 03D1     	  bne 2f
 1572 0c96 0846     	  mov r0,r1 
 1573 0c98 00F014F8 	  bl execute  
 1574 0c9c F2E7     	  b interpreter   
 1575              	2: 
 1576 0c9e 0428     	  cmp r0,#TK_VAR 
 1577 0ca0 05D1     	  bne 3f 
 1578 0ca2 00B500F0 	  _CALL let_var 
 1578      F3FA5DF8 
 1578      04EB
 1579 0cac EAE7     	  b interpreter 
 1580              	3: 
 1581 0cae 0528     	  cmp r0,#TK_ARRAY 
 1582 0cb0 05D1     	  bne 4f
 1583 0cb2 00B500F0 	  _CALL let_array 
 1583      F9FA5DF8 
 1583      04EB
 1584 0cbc E2E7     	  b interpreter
 1585              	4: 
 1586 0cbe 0128     	  cmp r0,#TK_COLON
ARM GAS  tinyBasic.s 			page 45


 1587 0cc0 E0D0     	  beq interpreter
 1588 0cc2 F7E5     	  b syntax_error
 1589              	
 1590              	/*****************************
 1591              	    execute 
 1592              	    execute a BASIC routine from 
 1593              	    its token value 
 1594              	  input:
 1595              	    r0  BASIC SUB|FUNC token  
 1596              	  output: 
 1597              	    depend on SUB|FUNc
 1598              	*****************************/
 1599              	    _FUNC execute 
 1600 0cc4 DFF83414 	    ldr r1,=fn_table 
 1601 0cc8 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1602 0ccc 0047     	    bx r0 
 1603              	
 1604              	/*************************************
 1605              	  next_token 
 1606              	  extract next token from token list 
 1607              	  input:
 1608              	    none 
 1609              	  output:
 1610              	    r0    token attribute
 1611              	    r1    token value if there is one 
 1612              	  use:
 1613              	    T1    exit token type  
 1614              	****************************/
 1615 0cce 00BF     	    _FUNC next_token 
 1616 0cd0 4DF8048D 	    push {T1}
 1617 0cd4 88EA0808 	    eor T1,T1 // TK_NONE 
 1618 0cd8 6068     	    ldr r0,[UPP,#COUNT]
 1619 0cda 8245     	    cmp IN,r0 
 1620 0cdc 11D4     	    bmi 0f
 1621              	new_line:
 1622 0cde BBF80010 	    ldrh r1,[BPTR] // line #
 1623 0ce2 09B9     	    cbnz r1, end_of_line  // command line
 1624 0ce4 FFF7FEBF 	    b warm_start
 1625              	end_of_line:        
 1626 0ce8 8344     	    add BPTR,r0 // next line 
 1627 0cea 606B     	    ldr r0,[UPP,#TXTEND]
 1628 0cec 8345     	    cmp BPTR,r0 
 1629 0cee 7FF5FEAF 	    bpl warm_start // end of program
 1630 0cf2 9BF80200 	    ldrb r0,[BPTR,#2]
 1631 0cf6 6060     	    str r0,[UPP,#COUNT] 
 1632 0cf8 4FF0030A 	    mov IN,#3
 1633 0cfc 4FF00100 	    mov r0,#TK_COLON 
 1634 0d00 2AE0     	    b 9f    
 1635              	0: 
 1636 0d02 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1637 0d06 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1638 0d0a 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1639 0d0e 0AF1010A 	    add IN,#1  
 1640 0d12 8046     	    mov T1,r0 
 1641 0d14 00F03F00 	    and r0,#0x3f // limit mask 
 1642 0d18 F949     	    ldr r1,=tok_jmp 
 1643 0d1a D1E800F0 	    tbb [r1,r0]
ARM GAS  tinyBasic.s 			page 46


 1644              	1: // pc reference point 
 1645 0d1e 1BE0     	    b 9f 
 1646              	2: // .byte param
 1647 0d20 1BF80A10 	    ldrb r1,[BPTR,IN]
 1648 0d24 0AF1010A 	    add IN,#1 
 1649 0d28 16E0     	    b 9f 
 1650              	3: // .hword param 
 1651 0d2a 3BF80A10 	    ldrh r1,[BPTR,IN]
 1652 0d2e 0AF1020A 	    add IN,#2 
 1653 0d32 11E0     	    b 9f 
 1654              	4: // .word param  
 1655 0d34 5BF80A10 	    ldr r1,[BPTR,IN]
 1656 0d38 0AF1040A 	    add IN,#4
 1657 0d3c 0CE0     	    b 9f 
 1658              	5: // .asciz param 
 1659 0d3e 0BEB0A01 	    add r1,BPTR,IN 
 1660 0d42 0846     	    mov r0,r1  
 1661 0d44 00B5FFF7 	    _CALL strlen 
 1661      FEFF5DF8 
 1661      04EB
 1662 0d4e 8244     	    add IN,r0
 1663 0d50 0AF1010A 	    add IN,#1
 1664 0d54 00E0     	    b 9f  
 1665              	8: // syntax error 
 1666 0d56 ADE5     	    b syntax_error 
 1667 0d58 4046     	9:  mov r0,T1  
 1668 0d5a 5DF8048B 	    pop {T1}
 1669 0d5e 7047     	    _RET
 1670              	
 1671              	  .p2align 2
 1672              	tok_jmp: // token id  tbb offset 
 1673 0d60 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1674 0d62 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1675 0d66 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1676 0d6a 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1677 0d6e 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1678 0d72 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1678      1C
 1679 0d77 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1679      1C1C
 1680 0d7d 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1681 0d80 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1682 0d83 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1682      1C1C1C1C 
 1683 0d8b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1683      1C1C
 1684 0d91 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1684      1D1D
 1685 0d97 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1685      1C1C1C1C 
 1685      1C
 1686              	
 1687              	  .p2align 2 
 1688              	
 1689              	/*********************************
 1690              	    expect 
 1691              	    check if next token is of 
ARM GAS  tinyBasic.s 			page 47


 1692              	    expected type. If not 
 1693              	    call syntax_error  
 1694              	  input:
 1695              	      r0   token attribute
 1696              	  output:
 1697              	      r0  token attribute 
 1698              	      r1  token value
 1699              	  use:
 1700              	      T1   
 1701              	**********************************/
 1702              	    _FUNC expect 
 1703 0da0 4DF8048D 	    push {T1}
 1704 0da4 8046     	    mov T1,r0 
 1705 0da6 00B5FFF7 	    _CALL next_token 
 1705      92FF5DF8 
 1705      04EB
 1706 0db0 4045     	    cmp r0,T1  
 1707 0db2 7FF47FAD 	    bne syntax_error 
 1708 0db6 5DF8048B 	    pop {T1}
 1709 0dba 7047     	    _RET 
 1710              	
 1711              	/***********************************
 1712              	    func_args 
 1713              	    get function arguments list 
 1714              	  input:
 1715              	    none 
 1716              	  output:
 1717              	    r0    arg. count 
 1718              	  use:
 1719              	
 1720              	************************************/
 1721              	    _FUNC func_args 
 1722 0dbc 4FF00600 	    mov r0,#TK_LPAREN 
 1723 0dc0 00B5FFF7 	    _CALL expect 
 1723      EDFF5DF8 
 1723      04EB
 1724 0dca 00B500F0 	    _CALL arg_list 
 1724      0CF85DF8 
 1724      04EB
 1725 0dd4 01B4     	    push {r0}
 1726 0dd6 4FF00700 	    mov r0,#TK_RPAREN 
 1727 0dda 00B5FFF7 	    _CALL expect 
 1727      E0FF5DF8 
 1727      04EB
 1728 0de4 01BC     	    pop {r0}
 1729 0de6 7047     	    _RET 
 1730              	
 1731              	/**********************************
 1732              	    arg_list 
 1733              	    get arguments list on dstack 
 1734              	  input:
 1735              	    none 
 1736              	  output:
 1737              	    r0    arg count
 1738              	  use:
 1739              	    T1    tmp count  
 1740              	***********************************/
ARM GAS  tinyBasic.s 			page 48


 1741              	    _FUNC arg_list 
 1742 0de8 4DF8048D 	    push {T1}
 1743 0dec 88EA0808 	    eor T1,T1 
 1744 0df0 00B500F0 	1:  _CALL expression 
 1744      C9F85DF8 
 1744      04EB
 1745 0dfa 0028     	    cmp R0,#TK_NONE 
 1746 0dfc 10D0     	    beq 9f 
 1747 0dfe 0E28     	    cmp r0,#TK_INTGR
 1748 0e00 0ED1     	    bne 9f 
 1749 0e02 4CF8041D 	    _PUSH r1 
 1750 0e06 08F10108 	    add T1,#1 
 1751 0e0a 00B5FFF7 	    _CALL next_token 
 1751      60FF5DF8 
 1751      04EB
 1752 0e14 0828     	    cmp r0,#TK_COMMA 
 1753 0e16 EBD0     	    beq 1b 
 1754 0e18 D4F800A0 	    _UNGET_TOKEN 
 1754      D4F808B0 
 1755 0e20 4046     	9:  mov r0,T1 
 1756 0e22 5DF8048B 	    pop {T1}
 1757 0e26 7047     	    _RET 
 1758              	
 1759              	/***********************************
 1760              	 factor
 1761              	 arithmetick factor parser 
 1762              	 factor ::= ['+'|'-'|e]  var | @ |
 1763              				 integer | function |
 1764              				 '('expression')' 
 1765              	  input: 
 1766              	    none 
 1767              	  output:
 1768              	    r0   token attribute 
 1769              	    r1   token value 
 1770              	  use:
 1771              	    r2   temp 
 1772              	    T1   sign 
 1773              	    T2   exit token attribute 
 1774              	***********************************/
 1775              	    _FUNC factor 
 1776 0e28 2DE90403 	    push {r2,T1,T2}
 1777 0e2c 4FF00E09 	    mov T2,#TK_INTGR 
 1778 0e30 4FF00108 	    mov T1,#1 // default sign +  
 1779 0e34 00B5FFF7 	    _CALL next_token
 1779      4BFF5DF8 
 1779      04EB
 1780 0e3e 0246     	    mov r2,r0 
 1781 0e40 00F03000 	    and r0,#TK_GRP_MASK 
 1782 0e44 1028     	    cmp r0,#TK_GRP_ADD
 1783 0e46 1046     	    mov r0,r2
 1784 0e48 08D1     	    bne 1f 
 1785 0e4a 1028     	    cmp r0,#TK_PLUS 
 1786 0e4c 01D0     	    beq 0f 
 1787 0e4e 4FF0FF38 	    mov T1,#-1 // minus sign 
 1788 0e52 00B5FFF7 	0:  _CALL next_token
 1788      3CFF5DF8 
 1788      04EB
ARM GAS  tinyBasic.s 			page 49


 1789 0e5c 0E28     	1:  cmp r0,#TK_INTGR 
 1790 0e5e 4ED0     	    beq 8f 
 1791 0e60 0528     	    cmp r0,#TK_ARRAY 
 1792 0e62 1ED1     	    bne 2f 
 1793 0e64 4FF00600 	    mov r0,#TK_LPAREN 
 1794 0e68 00B5FFF7 	    _CALL expect 
 1794      99FF5DF8 
 1794      04EB
 1795 0e72 00B500F0 	    _CALL expression
 1795      88F85DF8 
 1795      04EB
 1796 0e7c 0E28     	    cmp r0,#TK_INTGR
 1797 0e7e 7FF419AD 	    bne syntax_error
 1798 0e82 8146     	    mov T2,r0
 1799 0e84 0A46     	    mov r2,r1  
 1800 0e86 4FF00700 	    mov r0,#TK_RPAREN
 1801 0e8a 00B5FFF7 	    _CALL expect 
 1801      88FF5DF8 
 1801      04EB
 1802 0e94 1046     	    mov r0,r2 
 1803 0e96 00B500F0 	    _CALL get_array_element 
 1803      ECF85DF8 
 1803      04EB
 1804 0ea0 2DE0     	    b 8f
 1805 0ea2 0628     	2:  cmp r0,#TK_LPAREN 
 1806 0ea4 12D1     	    bne 3f 
 1807 0ea6 00B500F0 	    _CALL expression 
 1807      6EF85DF8 
 1807      04EB
 1808 0eb0 0E28     	    cmp r0,#TK_INTGR 
 1809 0eb2 7FF4FFAC 	    bne syntax_error
 1810 0eb6 8146     	    mov T2,r0
 1811 0eb8 0A46     	    mov r2,r1   
 1812 0eba 4FF00700 	    mov r0,#TK_RPAREN
 1813 0ebe 00B5FFF7 	    _CALL expect 
 1813      6EFF5DF8 
 1813      04EB
 1814 0ec8 1146     	    mov r1,r2 
 1815 0eca 18E0     	    b 8f       
 1816 0ecc 0428     	3:  cmp r0,#TK_VAR 
 1817 0ece 06D1     	    bne 4f
 1818 0ed0 0846     	    mov r0,r1  
 1819 0ed2 00B500F0 	    _CALL get_var 
 1819      E2F85DF8 
 1819      04EB
 1820 0edc 0FE0     	    b 8f 
 1821 0ede 0B28     	4:  cmp r0,#TK_IFUNC 
 1822 0ee0 06D1     	    bne 6f 
 1823 0ee2 0846     	5:  mov r0,r1  
 1824 0ee4 00B5FFF7 	    _CALL execute
 1824      EDFE5DF8 
 1824      04EB
 1825 0eee 06E0     	    b 8f 
 1826 0ef0 D4F800A0 	6:  _UNGET_TOKEN      
 1826      D4F808B0 
 1827 0ef8 4FF00000 	    mov r0,#TK_NONE
 1828 0efc 03E0     	    b 9f  
ARM GAS  tinyBasic.s 			page 50


 1829 0efe 08FB01F1 	8:  mul r1,T1 
 1830 0f02 5FEA0900 	    movs r0,T2 
 1831 0f06 BDE80403 	9:  pop {r2,T1,T2}   
 1832 0f0a 7047     	    _RET 
 1833              	
 1834              	
 1835              	/*****************************************
 1836              	    term 
 1837              	    term parser 
 1838              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1839              	    output:
 1840              	      r0  	token attribute 
 1841              	      r1		integer
 1842              	    use:
 1843              	      r2    first operand 
 1844              	      r3    temp 
 1845              	      T1    operator 
 1846              	      T2    exit token attribute 
 1847              	******************************************/
 1848              	     _FUNC term 
 1849 0f0c 2DE90C03 	    push {r2,r3,T1,T2}
 1850 0f10 4FF00009 	    mov T2,#TK_NONE 
 1851 0f14 00B5FFF7 	    _CALL factor
 1851      87FF5DF8 
 1851      04EB
 1852 0f1e 60B3     	    cbz r0, 9f  // no factor   
 1853 0f20 8146     	    mov T2,r0  // TK_INTGR 
 1854 0f22 0A46     	    mov r2,r1 // first factor    
 1855 0f24 00B5FFF7 	0:  _CALL next_token
 1855      D3FE5DF8 
 1855      04EB
 1856 0f2e 0346     	    mov r3,r0   
 1857 0f30 00F03000 	    and r0,#TK_GRP_MASK 
 1858 0f34 2028     	    cmp r0,#TK_GRP_MULT
 1859 0f36 04D0     	    beq 1f
 1860 0f38 D4F800A0 	    _UNGET_TOKEN
 1860      D4F808B0 
 1861 0f40 1BE0     	    b 9f 
 1862 0f42 9846     	1:  mov T1,r3 
 1863 0f44 00B5FFF7 	    _CALL factor  
 1863      6FFF5DF8 
 1863      04EB
 1864 0f4e 3FF4B1AC 	    beq syntax_error 
 1865 0f52 B8F1200F 	    cmp T1,#TK_MULT
 1866 0f56 02D1     	    bne 2f 
 1867              	// multiplication
 1868 0f58 01FB02F2 	    mul r2,r1
 1869 0f5c E2E7     	    b 0b  
 1870 0f5e B8F1210F 	2:  cmp T1,#TK_DIV 
 1871 0f62 02D1     	    bne 3f
 1872              	// division
 1873 0f64 92FBF1F2 	    sdiv r2,r2,r1
 1874 0f68 DCE7     	    b 0b  
 1875              	3: // modulo
 1876 0f6a 1046     	    mov r0,r2 
 1877 0f6c 92FBF1F2 	    sdiv r2,r2,r1 
 1878 0f70 01FB02F2 	    mul  r2,r1 
ARM GAS  tinyBasic.s 			page 51


 1879 0f74 A0EB0202 	    sub  r2,r0,r2
 1880 0f78 D4E7     	    b 0b  
 1881 0f7a 1146     	9:  mov r1,r2 
 1882 0f7c 5FEA0900 	    movs r0,T2 
 1883 0f80 BDE80C03 	    pop {r2,r3,T1,T2}
 1884 0f84 7047     	    _RET 
 1885              	
 1886              	/*****************************************
 1887              	    expression 
 1888              	    arithmetic expression parser 
 1889              	    expression ::= term [['+'|'-'] term]*
 1890              	    result range {-32768..32767}
 1891              	    output:
 1892              	      r0    TK_NONE || TK_INTGR 
 1893              	      r1 	  integer
 1894              	    use:
 1895              	      r2  left operand 
 1896              	      T1  operator 
 1897              	      T2  exit token attribute
 1898              	******************************************/
 1899 0f86 00BF     	    _FUNC expression 
 1900 0f88 2DE90403 	    push {r2,t1,t2}
 1901 0f8c 4FF00009 	    mov T2,#TK_NONE
 1902 0f90 82EA0202 	    eor r2,r2 // zero 
 1903 0f94 00B5FFF7 	    _CALL term 
 1903      B9FF5DF8 
 1903      04EB
 1904 0f9e 21D0     	    beq 9f  // no term  
 1905 0fa0 0A46     	    mov r2,r1 // first term
 1906 0fa2 4FF00E09 	    mov T2,#TK_INTGR    
 1907 0fa6 00B5FFF7 	1:  _CALL next_token 
 1907      92FE5DF8 
 1907      04EB
 1908 0fb0 8046     	    mov T1,r0 // token attribute 
 1909 0fb2 00F03000 	    and r0,#TK_GRP_MASK 
 1910 0fb6 1028     	    cmp r0,#TK_GRP_ADD 
 1911 0fb8 04D0     	    beq 3f 
 1912 0fba D4F800A0 	    _UNGET_TOKEN
 1912      D4F808B0 
 1913 0fc2 0FE0     	    b 9f  
 1914 0fc4 00B5FFF7 	3:  _CALL term 
 1914      A1FF5DF8 
 1914      04EB
 1915 0fce 0E28     	    cmp r0,#TK_INTGR 
 1916 0fd0 7FF470AC 	    bne syntax_error 
 1917 0fd4 B8F1100F 	    cmp T1,#TK_PLUS 
 1918 0fd8 02D0     	    beq 4f 
 1919 0fda A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1920 0fde E2E7     	    b 1b 
 1921 0fe0 0A44     	4:  add r2,r2,r1 // N1+N2
 1922 0fe2 E0E7     	    b 1b
 1923 0fe4 4846     	9:  mov r0,T2 
 1924 0fe6 1146     	    mov r1,r2 
 1925 0fe8 BDE80403 	    pop {r2,t1,t2}
 1926 0fec 7047     	    _RET 
 1927              	
 1928              	
ARM GAS  tinyBasic.s 			page 52


 1929              	/**********************************************
 1930              	    relation parser 
 1931              	    rel ::= expr1 rel_op expr2
 1932              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1933              	    relation return  integer , zero is false 
 1934              	    output:
 1935              	        r0	TK_INTGR  
 1936              	        r1	integer 
 1937              	    use:
 1938              	        r2   first operand 
 1939              	        T1   relop   
 1940              	**********************************************/
 1941 0fee 00BF     	    _FUNC relation 
 1942 0ff0 2DE90401 	    push {r2,T1}
 1943 0ff4 00B5FFF7 	    _CALL expression 
 1943      C7FF5DF8 
 1943      04EB
 1944 0ffe 0E28     	    cmp r0,#TK_INTGR 
 1945 1000 7FF458AC 	    bne syntax_error 
 1946 1004 0A46     	    mov r2,r1  // first operand  
 1947 1006 00B5FFF7 	    _CALL next_token 
 1947      62FE5DF8 
 1947      04EB
 1948 1010 8046     	    mov T1,r0  // relop  
 1949 1012 00F03000 	    and r0,#TK_GRP_MASK 
 1950 1016 3028     	    cmp r0,#TK_GRP_RELOP 
 1951 1018 1DD1     	    bne 8f  // single operand 
 1952 101a 00B5FFF7 	    _CALL expression 
 1952      B4FF5DF8 
 1952      04EB
 1953 1024 0E28     	    cmp r0,#TK_INTGR 
 1954 1026 7FF445AC 	    bne syntax_error 
 1955 102a 8A42     	    cmp r2,r1 // compare operands  
 1956 102c 4FF0FF31 	    mov r1,#-1 
 1957 1030 344A     	    ldr r2,=relop_jmp
 1958 1032 08F00708 	    and T1,#7 // {1..6}
 1959 1036 D2E808F0 	    tbb [r2,T1]    
 1960              	rel_idx0:
 1961              	rel_eq:
 1962 103a 11D0     	    beq 9f 
 1963 103c 08E0     	    b rel_false
 1964              	rel_lt: 
 1965 103e 0FDB     	    blt 9f   
 1966 1040 06E0     	    b rel_false 
 1967              	rel_le:
 1968 1042 0DDD     	    ble 9f  
 1969 1044 04E0     	    b rel_false 
 1970              	rel_gt:
 1971 1046 0BDC     	    bgt 9f  
 1972 1048 02E0     	    b rel_false  
 1973              	rel_ge:
 1974 104a 09DA     	    bge 9f  
 1975 104c 00E0     	    b rel_false  
 1976              	rel_diff:
 1977 104e 07D1     	    bne 9f 
 1978              	rel_false:    
 1979 1050 81EA0101 	    eor r1,r1  // false
ARM GAS  tinyBasic.s 			page 53


 1980 1054 04E0     	    b 9f  
 1981 1056 D4F800A0 	8:  _UNGET_TOKEN 
 1981      D4F808B0 
 1982 105e 1146     	    mov r1,r2    
 1983 1060 4FF00E00 	9:  mov r0,#TK_INTGR
 1984 1064 BDE80401 	    pop {r2,T1}
 1985 1068 7047     	    _RET 
 1986              	
 1987              	
 1988              	relop_jmp: 
 1989 106a 00       	  .byte 0 
 1990 106b 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1991 106c 00       	  .byte 0 // =
 1992 106d 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1993 106e 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1994 106f 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1995 1070 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1996              	
 1997              	
 1998              	/***********************************
 1999              	    get_array_element
 2000              	    return value of @(n)
 2001              	  input:
 2002              	    r0    indice 
 2003              	  output:
 2004              	    r0   TK_INTGR
 2005              	    r1   value  
 2006              	************************************/
 2007 1071 0000BF   	    _FUNC get_array_element 
 2008 1074 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2009 1078 4FEA8000 	    lsl r0,#2 
 2010 107c C0EB0100 	    rsb r0,r1 
 2011 1080 0168     	    ldr r1,[r0]
 2012 1082 4FF00E00 	    mov r0,#TK_INTGR 
 2013 1086 7047     	    _RET 
 2014              	
 2015              	
 2016              	/***********************************
 2017              	    set_array_element 
 2018              	    set value of array element 
 2019              	  input:
 2020              	    r0   index 
 2021              	    r1   new value 
 2022              	  output:
 2023              	    none
 2024              	  use:
 2025              	    r2    array pointer 
 2026              	**********************************/
 2027              	    _FUNC set_array_element 
 2028 1088 04B4     	    push {r2}
 2029 108a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2030 108e 4FEA8000 	    lsl r0,#2 
 2031 1092 A1EB0001 	    sub r1,r0 
 2032 1096 0960     	    str r1,[r1]
 2033 1098 04BC     	    pop {r2}
 2034 109a 7047     	    _RET 
 2035              	
ARM GAS  tinyBasic.s 			page 54


 2036              	/***********************************
 2037              	   get_var 
 2038              	   get variable value 
 2039              	  input:
 2040              	     r0    variable index {0..25}
 2041              	  output:
 2042              	     r0    TK_INTGR
 2043              	     r1    value 
 2044              	**********************************/
 2045              	    _FUNC get_var 
 2046 109c 04F16001 	    add r1,UPP,#VARS
 2047 10a0 4FEA8000 	    lsl r0,#2 
 2048 10a4 0958     	    ldr r1,[r1,r0]
 2049 10a6 4FF00E00 	    mov r0,#TK_INTGR
 2050 10aa 7047     	    _RET 
 2051              	
 2052              	/*********************************
 2053              	    set_var 
 2054              	    set variable value 
 2055              	  input:
 2056              	     r0    variable index {0..25}
 2057              	     r1    new value 
 2058              	  output:
 2059              	    none 
 2060              	  use:
 2061              	    r2   vars pointer 
 2062              	*********************************/
 2063              	    _FUNC set_var 
 2064 10ac 04B4     	    push {r2}
 2065 10ae 04F16002 	    add r2,UPP,#VARS
 2066 10b2 4FEA8000 	    lsl r0,#2
 2067 10b6 1150     	    str r1,[r2,r0]
 2068 10b8 04BC     	    pop {r2}
 2069 10ba 7047     	    _RET 
 2070              	
 2071              	/******************************
 2072              	    CONSTANTS data
 2073              	******************************/
 2074              	
 2075              	  .section .rodata 
 2076              	
 2077              	// system variables initial value 
 2078              	uzero:
 2079 0000 00000000 	  .word 0 // IN_SAVED
 2080 0004 00000000 	  .word 0 // COUNT
 2081 0008 00000000 	  .word 0 // BASICPTR
 2082 000c 00000000 	  .word 0 // DATAPTR
 2083 0010 00000000 	  .word 0 // DATA
 2084 0014 00000000 	  .word 0 // DATALEN
 2085 0018 0A000000 	  .word 10 // BASE
 2086 001c 00000000 	  .word 0 // TICKS
 2087 0020 00000000 	  .word 0 // TIMER
 2088 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2089 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2090 002c 00000000 	  .word 0 // FFREE
 2091 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2092 0034 CC000000 	  .word ulast-uzero // TXTEND
ARM GAS  tinyBasic.s 			page 55


 2093 0038 00000000 	  .word 0 //LOOP_DEPTH
 2094 003c 00000000 	  .word 0 // ARRAY_SIZE
 2095 0040 00000000 	  .word 0 // FLAGS
 2096 0044 04000000 	  .word 4 // TAB_WIDTH
 2097 0048 00000000 	  .word 0 // RX_HEAD
 2098 004c 00000000 	  .word 0 // RX_TAIL
 2099 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2099      00000000 
 2099      00000000 
 2099      00000000 
 2100 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2100      00000000 
 2100      00000000 
 2100      00000000 
 2100      00000000 
 2101 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2102              	ulast:
 2103              	
 2104              	  .section .rodata.dictionary 
 2105              	
 2106              	// keep alphabetic order for BASIC names from Z-A
 2107              	// this sort order is for for WORDS cmd output. 	
 2108              	
 2109              		.equ link, 0
 2110              	kword_end:
 2111 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2111      00000000 
 2111      00000000 
 2111      00000000 
 2112 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2112      52000000 
 2112      0A000000 
 2112      5854524D 
 2112      54000000 
 2113 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2113      53000000 
 2113      0A000000 
 2113      58524356 
 2113      00000000 
 2114 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2114      51000000 
 2114      0B000000 
 2114      584F5200 
 2115 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2115      50000000 
 2115      0A000000 
 2115      57524954 
 2115      45000000 
 2116 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2116      4F000000 
 2116      0A000000 
 2116      574F5244 
 2116      53000000 
 2117 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2117      4E000000 
 2117      0A000000 
 2117      57414954 
ARM GAS  tinyBasic.s 			page 56


 2117      00000000 
 2118 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2118      4D000000 
 2118      0B000000 
 2118      55535200 
 2119 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2119      4C000000 
 2119      0A000000 
 2119      554E5449 
 2119      4C000000 
 2120 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2120      4B000000 
 2120      0B000000 
 2120      55464C41 
 2120      53480000 
 2121 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2121      4A000000 
 2121      0B000000 
 2121      55424F55 
 2121      4E440000 
 2122 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2122      49000000 
 2122      0A000000 
 2122      544F4E45 
 2122      00000000 
 2123 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2123      48000000 
 2123      0A000000 
 2123      544F0000 
 2124 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2124      46000000 
 2124      0A000000 
 2124      54494D45 
 2124      52000000 
 2125 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2125      47000000 
 2125      0B000000 
 2125      54494D45 
 2125      4F555400 
 2126 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2126      45000000 
 2126      0B000000 
 2126      5449434B 
 2126      53000000 
 2127 0130 28010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2127      44000000 
 2127      0A000000 
 2127      5448454E 
 2127      00000000 
 2128 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2128      43000000 
 2128      0A000000 
 2128      53544F50 
 2128      00000000 
 2129 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2129      42000000 
 2129      0A000000 
ARM GAS  tinyBasic.s 			page 57


 2129      53544550 
 2129      00000000 
 2130 016c 64010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2130      41000000 
 2130      0A000000 
 2130      53504957 
 2130      52000000 
 2131 0180 78010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2131      40000000 
 2131      0A000000 
 2131      53504953 
 2131      454C0000 
 2132 0194 8C010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2132      3E000000 
 2132      0B000000 
 2132      53504952 
 2132      44000000 
 2133 01a8 A0010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2133      3F000000 
 2133      0A000000 
 2133      53504945 
 2133      4E000000 
 2134 01bc B4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2134      3D000000 
 2134      0A000000 
 2134      534C4545 
 2134      50000000 
 2135 01d0 C8010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2135      3C000000 
 2135      0B000000 
 2135      53495A45 
 2135      00000000 
 2136 01e4 DC010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2136      3B000000 
 2136      0A000000 
 2136      53484F57 
 2136      00000000 
 2137 01f8 F0010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2137      3A000000 
 2137      0A000000 
 2137      53415645 
 2137      00000000 
 2138 020c 04020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2138      39000000 
 2138      0A000000 
 2138      52554E00 
 2139 021c 18020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2139      38000000 
 2139      0B000000 
 2139      52534849 
 2139      46540000 
 2140 0230 28020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2140      37000000 
 2140      0B000000 
 2140      524E4400 
 2141 0240 3C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2141      36000000 
ARM GAS  tinyBasic.s 			page 58


 2141      0A000000 
 2141      52455455 
 2141      524E0000 
 2142 0254 4C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2142      35000000 
 2142      0A000000 
 2142      52455354 
 2142      4F524500 
 2143 0268 60020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2143      34000000 
 2143      0A000000 
 2143      52454D41 
 2143      524B0000 
 2144 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2144      33000000 
 2144      0B000000 
 2144      52454144 
 2144      00000000 
 2145 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2145      32000000 
 2145      0B000000 
 2145      514B4559 
 2145      00000000 
 2146 02a4 9C020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2146      31000000 
 2146      0A000000 
 2146      5052494E 
 2146      54000000 
 2147 02b8 B0020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2147      2E000000 
 2147      0A000000 
 2147      504F4B45 
 2147      38000000 
 2148 02cc C4020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2148      30000000 
 2148      0A000000 
 2148      504F4B45 
 2148      33320000 
 2149 02e0 D8020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2149      2F000000 
 2149      0A000000 
 2149      504F4B45 
 2149      31360000 
 2150 02f4 EC020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2150      2A000000 
 2150      0A000000 
 2150      504D4F44 
 2150      45000000 
 2151 0308 00030000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2151      2B000000 
 2151      0B000000 
 2151      5045454B 
 2151      38000000 
 2152 031c 14030000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2152      2D000000 
 2152      0B000000 
 2152      5045454B 
ARM GAS  tinyBasic.s 			page 59


 2152      33320000 
 2153 0330 28030000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2153      2C000000 
 2153      0B000000 
 2153      5045454B 
 2153      31360000 
 2154 0344 3C030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2154      29000000 
 2154      0A000000 
 2154      50415553 
 2154      45000000 
 2155 0358 50030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2155      28000000 
 2155      0B000000 
 2155      50414400 
 2156 0368 64030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2156      27000000 
 2156      0A000000 
 2156      4F555400 
 2157 0378 74030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2157      26000000 
 2157      0B000000 
 2157      4F520000 
 2158 0388 84030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2158      25000000 
 2158      0B000000 
 2158      4E4F5400 
 2159 0398 94030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2159      24000000 
 2159      0A000000 
 2159      4E455854 
 2159      00000000 
 2160 03ac A4030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2160      23000000 
 2160      0A000000 
 2160      4E455700 
 2161 03bc B8030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2161      22000000 
 2161      0B000000 
 2161      4C534849 
 2161      46540000 
 2162 03d0 C8030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2162      21000000 
 2162      0B000000 
 2162      4C4F4732 
 2162      00000000 
 2163 03e4 DC030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2163      20000000 
 2163      0A000000 
 2163      4C4F4144 
 2163      00000000 
 2164 03f8 F0030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2164      1F000000 
 2164      0A000000 
 2164      4C495354 
 2164      00000000 
 2165 040c 04040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
ARM GAS  tinyBasic.s 			page 60


 2165      1E000000 
 2165      0A000000 
 2165      4C455400 
 2166 041c 18040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2166      1D000000 
 2166      0B000000 
 2166      4B455900 
 2167 042c 28040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2167      1C000000 
 2167      0B000000 
 2167      494E5645 
 2167      52540000 
 2168 0440 38040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2168      1B000000 
 2168      0A000000 
 2168      494E5055 
 2168      54000000 
 2169 0454 4C040000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2169      1A000000 
 2169      0B000000 
 2169      494E5000 
 2170 0464 60040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2170      19000000 
 2170      0A000000 
 2170      49460000 
 2171 0474 70040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2171      18000000 
 2171      0A000000 
 2171      48455800 
 2172 0484 80040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2172      17000000 
 2172      0A000000 
 2172      474F544F 
 2172      00000000 
 2173 0498 90040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2173      16000000 
 2173      0A000000 
 2173      474F5355 
 2173      42000000 
 2174 04ac A4040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2174      15000000 
 2174      0A000000 
 2174      464F5247 
 2174      45540000 
 2175 04c0 B8040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2175      14000000 
 2175      0A000000 
 2175      464F5200 
 2176 04d0 CC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2176      13000000 
 2176      0A000000 
 2176      454E4400 
 2177 04e0 DC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2177      12000000 
 2177      0A000000 
 2177      44554D50 
 2177      00000000 
ARM GAS  tinyBasic.s 			page 61


 2178 04f4 EC040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2178      11000000 
 2178      0A000000 
 2178      444F0000 
 2179 0504 00050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2179      10000000 
 2179      0A000000 
 2179      44495200 
 2180 0514 10050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2180      0F000000 
 2180      0A000000 
 2180      44454300 
 2181 0524 20050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2181      0E000000 
 2181      0A000000 
 2181      44415441 
 2181      4C4E0000 
 2182 0538 30050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2182      0D000000 
 2182      0A000000 
 2182      44415441 
 2182      00000000 
 2183 054c 44050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2183      0C000000 
 2183      0C000000 
 2183      43484152 
 2183      00000000 
 2184 0560 58050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2184      0B000000 
 2184      0A000000 
 2184      42544F47 
 2184      4C000000 
 2185 0574 6C050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2185      0A000000 
 2185      0B000000 
 2185      42544553 
 2185      54000000 
 2186 0588 80050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2186      09000000 
 2186      0A000000 
 2186      42534554 
 2186      00000000 
 2187 059c 94050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2187      08000000 
 2187      0A000000 
 2187      42524553 
 2187      00000000 
 2188 05b0 A8050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2188      07000000 
 2188      0B000000 
 2188      42495400 
 2189 05c0 BC050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2189      06000000 
 2189      0A000000 
 2189      41575500 
 2190 05d0 CC050000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2190      05000000 
ARM GAS  tinyBasic.s 			page 62


 2190      0A000000 
 2190      4155544F 
 2190      52554E00 
 2191 05e4 DC050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2191      04000000 
 2191      0B000000 
 2191      41534300 
 2192 05f4 F0050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2192      03000000 
 2192      0B000000 
 2192      414E4400 
 2193 0604 00060000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2193      02000000 
 2193      0B000000 
 2193      41444352 
 2193      45414400 
 2194 0618 10060000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2194      01000000 
 2194      0A000000 
 2194      4144434F 
 2194      4E000000 
 2195              	first_link: 
 2196 062c 24060000 	  .word LINK 
 2197 0630 00000000 	  .word ABS_IDX 
 2198 0634 0B000000 	  .word TK_IFUNC
 2199              	kword_dict: // first name field 
 2200              	  .equ LINK,. 
 2201 0638 41425300 	  .asciz "ABS" 
 2202              	  .p2align 2 
 2203              	
 2204              	    .section .rodata.fn_tabld 
 2205              	
 2206              	//comands and fonctions address table 	
 2207              	fn_table:
 2208 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask 
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2209 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char  
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2210 0034 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,dump
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2211 004c 00000000 		.word cmd_end,for,forget,gosub,goto 
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2212 0060 00000000 		.word hex_base,if,inp,input_var,invert,key
 2212      00000000 
 2212      00000000 
ARM GAS  tinyBasic.s 			page 63


 2212      00000000 
 2212      00000000 
 2213 0078 00000000 		.word let,list,load,log2,lshift,new,next
 2213      00000000 
 2213      00000000 
 2213      00000000 
 2213      00000000 
 2214 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32,poke8,poke16
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2215 00c0 00000000 		.word poke32,print
 2215      00000000 
 2216 00c8 00000000 		.word qkey,read,skip_line
 2216      00000000 
 2216      00000000 
 2217 00d4 00000000 		.word restore,return, random,rshift,run,save,show,size 
 2217      00000000 
 2217      00000000 
 2217      00000000 
 2217      00000000 
 2218 00f4 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2219 0114 00000000 		.word then,set_timer,timeout,to,tone,ubound,uflash,until,usr
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2220 0138 00000000 		.word wait,words,write,bit_xor,transmit,receive
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2221 0150 00000000 		.word 0 
 2222              	
 2223              	
 2224              	/**********************************
 2225              	    BASIC commands and functions 
 2226              	**********************************/
 2227              	
 2228              	    .section .text.basic , "ax", %progbits 
 2229              	
 2230              	
 2231              	/*******************************
 2232              	  BASIC:  ABS expr 
 2233              	  input:
 2234              	    none 
 2235              	  output:
 2236              	    r0    token type 
 2237              	    r1    abs(expr)
 2238              	  use:
 2239              	    none 
 2240              	******************************/
ARM GAS  tinyBasic.s 			page 64


 2241              	    _FUNC abs 
 2242 0000 00B5FFF7 	    _CALL arg_list
 2242      FEFF5DF8 
 2242      04EB
 2243 000a 0128     	    cmp r0,#1 
 2244 000c 01D0     	    beq 1f 
 2245 000e FFF7FEBF 	    b syntax_error 
 2246 0012 5CF8041B 	1:  _POP r1 
 2247 0016 11F0004F 	    tst r1,#(1<<31)
 2248 001a 01D0     	    beq 9f
 2249 001c C1F10001 	    rsb r1,#0 
 2250 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2251 0024 7047     	   _RET 
 2252              	
 2253 0026 00BF     	    _FUNC power_adc
 2254 0028 7047     	    _RET
 2255              	
 2256 002a 00BF     	    _FUNC analog_read
 2257 002c 7047     	    _RET
 2258              	
 2259              	/************************************
 2260              	  BASIC: AND(expr1,expr2)
 2261              	  logical ANND bit to between expr1,expr2
 2262              	************************************/
 2263 002e 00BF     	    _FUNC bit_and
 2264 0030 00B5FFF7 	    _CALL func_args 
 2264      FEFF5DF8 
 2264      04EB
 2265 003a 0228     	    cmp r0,#2 
 2266 003c 7FF4FEAF 	    bne syntax_error 
 2267 0040 5CF8040B 	    _POP r0 
 2268 0044 5CF8041B 	    _POP r1 
 2269 0048 01EA0001 	    and r1,r0 
 2270 004c 4FF00E00 	    mov r0,#TK_INTGR
 2271 0050 7047     	    _RET
 2272              	
 2273              	/*******************************************
 2274              	  BASIC: ASC(string|char)
 2275              	  return ASCII code of char of first char 
 2276              	  of string 
 2277              	*******************************************/
 2278 0052 00BF     	    _FUNC ascii
 2279 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2280 0058 00B5FFF7 	    _CALL expect 
 2280      FEFF5DF8 
 2280      04EB
 2281 0062 00B5FFF7 	    _CALL next_token 
 2281      FEFF5DF8 
 2281      04EB
 2282 006c 0228     	    cmp r0,#TK_QSTR
 2283 006e 03D0     	    beq 2f 
 2284 0070 0328     	    cmp r0,#TK_CHAR 
 2285 0072 7FF4FEAF 	    bne syntax_error 
 2286 0076 00E0     	    b 9f 
 2287 0078 0978     	2:  ldrb r1,[r1]
 2288 007a 4CF8041D 	9:  _PUSH r1 
 2289 007e 4FF00700 	    mov r0,#TK_RPAREN 
ARM GAS  tinyBasic.s 			page 65


 2290 0082 00B5FFF7 	    _CALL expect 
 2290      FEFF5DF8 
 2290      04EB
 2291 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2292 0090 5CF8041B 	    _POP r1 
 2293 0094 7047     	    _RET
 2294              	
 2295 0096 00BF     	    _FUNC autorun
 2296 0098 7047     	    _RET
 2297              	
 2298 009a 00BF     	    _FUNC awu
 2299 009c 7047     	    _RET
 2300              	
 2301              	/********************************************
 2302              	  BASIC: BIT(expr)
 2303              	  expr must be between 0..31 and is used 
 2304              	  to create 1 bit mask at that position
 2305              	*******************************************/
 2306 009e 00BF     	    _FUNC bitmask
 2307 00a0 00B5FFF7 	    _CALL func_args
 2307      FEFF5DF8 
 2307      04EB
 2308 00aa 0128     	    cmp r0,#1 
 2309 00ac 7FF4FEAF 	    bne syntax_error 
 2310 00b0 5CF8040B 	    _POP r0
 2311 00b4 4FF00101 	    mov r1,#1
 2312 00b8 01FA00F1 	    lsl r1,r0 
 2313 00bc 4FF00E00 	9:  mov r0,#TK_INTGR
 2314 00c0 7047     	    _RET 
 2315              	
 2316              	  
 2317              	  /*********************************
 2318              	   BASIC: BRES adr, mask   
 2319              	   reset bits [adr]= [adr] & ~mask  
 2320              	   input:
 2321              	     none 
 2322              	    output;
 2323              	      none 
 2324              	    use:
 2325              	      T1   temp
 2326              	      T2   temp 
 2327              	*******************************/     
 2328 00c2 00BF     	  _FUNC bit_reset
 2329 00c4 00B5FFF7 	    _CALL arg_list 
 2329      FEFF5DF8 
 2329      04EB
 2330 00ce 0228     	    cmp r0,#2 
 2331 00d0 01D0     	    beq 1f 
 2332 00d2 FFF7FEBF 	    b syntax_error 
 2333 00d6 5CF8041B 	1:  _POP r1 //mask 
 2334 00da 5CF8040B 	    _POP r0 //address 
 2335 00de D0F80090 	    ldr T2,[r0] 
 2336 00e2 81F0FF31 	    eor r1,#-1 // ~mask 
 2337 00e6 01EA0901 	    and r1,T2
 2338 00ea 0160     	    str r1,[r0]
 2339 00ec 7047     	    _RET  
 2340              	
ARM GAS  tinyBasic.s 			page 66


 2341              	
 2342              	/*********************************
 2343              	   BASIC: BSET adr, mask   
 2344              	   reset bits [adr]= [adr] & ~mask  
 2345              	   input:
 2346              	      none 
 2347              	    output;
 2348              	      none 
 2349              	    use:
 2350              	      T1   temp
 2351              	      T2   temp  
 2352              	*******************************/     
 2353 00ee 00BF     	    _FUNC bit_set
 2354 00f0 00B5FFF7 	    _CALL arg_list 
 2354      FEFF5DF8 
 2354      04EB
 2355 00fa 0228     	    cmp r0,#2 
 2356 00fc 01D0     	    beq 1f 
 2357 00fe FFF7FEBF 	    b syntax_error 
 2358 0102 5CF8041B 	1:  _POP r1 //mask 
 2359 0106 5CF8040B 	    _POP r0 //address 
 2360 010a D0F80090 	    ldr T2,[r0] 
 2361 010e 41EA0901 	    orr r1,T2
 2362 0112 0160     	    str r1,[r0]
 2363 0114 7047     	    _RET 
 2364              	
 2365              	  /*********************************
 2366              	   BASIC: BTOGL adr, mask   
 2367              	   reset bits [adr]= [adr] & ~mask  
 2368              	   input:
 2369              	     r0    adr 
 2370              	     r1    mask 
 2371              	    output;
 2372              	      none 
 2373              	    use:
 2374              	      T1   temp
 2375              	      T2   temp  
 2376              	*******************************/     
 2377 0116 00BF     	  _FUNC bit_toggle
 2378 0118 00B5FFF7 	    _CALL arg_list 
 2378      FEFF5DF8 
 2378      04EB
 2379 0122 0228     	    cmp r0,#2 
 2380 0124 01D0     	    beq 1f 
 2381 0126 FFF7FEBF 	    b syntax_error 
 2382 012a 5CF8041B 	1:  _POP r1 //mask 
 2383 012e 5CF8040B 	    _POP r0 //address 
 2384 0132 D0F80090 	    ldr T2,[r0] 
 2385 0136 81EA0901 	    eor r1,T2
 2386 013a 0160     	    str r1,[r0]
 2387 013c 7047     	    _RET  
 2388              	
 2389              	/********************************
 2390              	  BASIC: BTEST(addr,bit)
 2391              	  return bit state at address
 2392              	********************************/
 2393 013e 00BF     	    _FUNC bit_test
ARM GAS  tinyBasic.s 			page 67


 2394 0140 00B5FFF7 	    _CALL func_args
 2394      FEFF5DF8 
 2394      04EB
 2395 014a 0228     	    cmp r0,#2 
 2396 014c 7FF4FEAF 	    bne syntax_error 
 2397 0150 5CF8041B 	    _POP r1
 2398 0154 4FF00100 	    mov r0,#1
 2399 0158 01F01F01 	    and r1,#31  
 2400 015c 21B1     	1:  cbz r1, 2f
 2401 015e 4FEA4000 	    lsl r0,#1
 2402 0162 A1F10101 	    sub r1,#1
 2403 0166 F9E7     	    b 1b 
 2404 0168 5CF8041B 	2:  _POP r1
 2405 016c 0968     	    ldr r1,[r1]
 2406 016e 01EA0001 	    and r1,r0 
 2407 0172 09B1     	    cbz r1,9f 
 2408 0174 4FF00101 	    mov r1,#1
 2409 0178 4FF00E00 	9:  mov r0,#TK_INTGR    
 2410 017c 7047     	    _RET 
 2411              	
 2412              	/*********************************
 2413              	  BASIC: CHAR(expr)
 2414              	  convert expr in character 
 2415              	********************************/
 2416 017e 00BF     	    _FUNC char
 2417 0180 00B5FFF7 	    _CALL func_args
 2417      FEFF5DF8 
 2417      04EB
 2418 018a 0128     	    cmp r0,#1
 2419 018c 7FF4FEAF 	    bne syntax_error 
 2420 0190 5CF8041B 	    _POP r1 
 2421 0194 01F07F01 	    and r1,#127 
 2422 0198 4FF00300 	    mov r0,#TK_CHAR
 2423 019c 7047     	    _RET 
 2424              	
 2425              	/**************************
 2426              	  BASIC: DATALN expr 
 2427              	  set data pointer to line#
 2428              	  specified by expr. 
 2429              	  if line# not valid program 
 2430              	  end with error.
 2431              	  use:
 2432              	
 2433              	**************************/
 2434 019e 00BF     	    _FUNC data_line
 2435 01a0 206C10F0 	    _RTO // run time only 
 2435      010F03D1 
 2435      4FF00700 
 2435      FFF7FEBF 
 2436 01b0 00B5FFF7 	    _CALL expression 
 2436      FEFF5DF8 
 2436      04EB
 2437 01ba 0E28     	    cmp r0,#TK_INTGR
 2438 01bc 7FF4FEAF 	    bne syntax_error
 2439 01c0 0846     	    mov r0,r1 
 2440 01c2 00B5FFF7 	    _CALL search_lineno
 2440      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 68


 2440      04EB
 2441 01cc 0029     	    cmp r1,#0
 2442 01ce 03D0     	    beq 1f 
 2443 01d0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2444 01d4 FFF7FEBF 	    b syntax_error 
 2445 01d8 C178     	1:  ldrb r1,[r0,#3]
 2446 01da 0A29     	    cmp r1,#TK_CMD 
 2447 01dc F8D1     	    bne 0b
 2448 01de 0179     	    ldrb r1,[r0,#4]
 2449 01e0 0D29     	    cmp r1,#DATA_IDX 
 2450 01e2 F5D1     	    bne 0b  
 2451 01e4 E060     	    str r0,[UPP,#DATAPTR]
 2452 01e6 8178     	    ldrb r1,[r0,#2]
 2453 01e8 6161     	    str r1,[UPP,#DATALEN]
 2454 01ea 4FF00501 	    mov r1,#5 // position of first data item  
 2455 01ee 2161     	    str r1,[UPP,#DATA]
 2456 01f0 7047     	    _RET 
 2457              	
 2458              	/*****************************
 2459              	  BASIC: READ 
 2460              	  read next data item 
 2461              	  the value can be assigned to
 2462              	  variable or used in expression
 2463              	*****************************/
 2464 01f2 00BF     	    _FUNC read
 2465 01f4 206C10F0 	    _RTO
 2465      010F03D1 
 2465      4FF00700 
 2465      FFF7FEBF 
 2466 0204 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2467 0206 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2468 0208 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2469 020a 8242     	    cmp r2,r0
 2470 020c 0ED0     	    beq seek_next
 2471 020e 885C     	1:  ldrb r0,[r1,r2]
 2472 0210 02F10102 	    add r2,#1
 2473 0214 0028     	    cmp r0,#TK_NONE
 2474 0216 09D0     	    beq seek_next
 2475 0218 0828     	    cmp r0,#TK_COMMA
 2476 021a F8D0     	    beq 1b  
 2477 021c 0E28     	    cmp r0,#TK_INTGR 
 2478 021e 7FF4FEAF 	    bne syntax_error  
 2479 0222 8958     	    ldr r1,[r1,r2]
 2480 0224 02F10402 	    add r2,#4
 2481 0228 2261     	    str r2,[UPP,#DATA]
 2482 022a 12E0     	    b 9f  
 2483              	seek_next: // is next line data ?
 2484 022c 8878     	    ldrb r0,[R1,#2]
 2485 022e 0144     	    add r1,r0 
 2486 0230 C878     	    ldrb r0,[R1,#3]
 2487 0232 0A28     	    cmp r0,#TK_CMD
 2488 0234 09D1     	    bne 2f 
 2489 0236 0879     	    ldrb r0,[r1,#4]
 2490 0238 0D28     	    cmp r0,#DATA_IDX 
 2491 023a 06D1     	    bne 2f 
 2492 023c E160     	    str r1,[UPP,#DATAPTR]
 2493 023e 8878     	    ldrb r0,[r1,#2]
ARM GAS  tinyBasic.s 			page 69


 2494 0240 6061     	    str  r0,[UPP,#DATALEN]
 2495 0242 4FF00502 	    mov r2,#5 
 2496 0246 2261     	    str r2,[UPP,#DATA]
 2497 0248 E1E7     	    b 1b 
 2498 024a 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2499 024e FFF7FEBF 	    b tb_error 
 2500 0252 7047     	9:  _RET 
 2501              	
 2502              	/********************************
 2503              	  BASIC: RESTORE 
 2504              	  seek first data line 
 2505              	********************************/
 2506              	    _FUNC restore
 2507 0254 206C10F0 	    _RTO 
 2507      010F03D1 
 2507      4FF00700 
 2507      FFF7FEBF 
 2508 0264 216B     	    ldr r1,[UPP,#TXTBGN]
 2509 0266 606B     	1:  ldr r0,[UPP,#TXTEND]
 2510 0268 0FD0     	    beq no_data_line 
 2511 026a 0879     	    ldrb r0,[r1,#4]
 2512 026c 0D28     	    cmp r0,#DATA_IDX
 2513 026e 09D1     	    bne try_next_line
 2514 0270 C878     	    ldrb r0,[r1,#3]
 2515 0272 0A28     	    cmp r0,#TK_CMD
 2516 0274 06D1     	    bne try_next_line
 2517              	// this a the first data line 
 2518 0276 E160     	    str r1,[UPP,#DATAPTR]
 2519 0278 8878     	    ldrb r0,[r1,#2]
 2520 027a 6061     	    str r0,[UPP,#DATALEN]
 2521 027c 4FF00500 	    mov r0,#5 
 2522 0280 2061     	    str r0,[UPP,#DATA]
 2523 0282 07E0     	    b 9f
 2524              	try_next_line:
 2525 0284 8878     	    ldrb r0,[r1,#2]
 2526 0286 0144     	    add r1,r0 
 2527 0288 EDE7     	    b 1b 
 2528              	no_data_line:
 2529 028a 80EA0000 	    eor r0,r0 
 2530 028e E060     	    str r0,[UPP,#DATAPTR]
 2531 0290 2061     	    str r0,[UPP,#DATA]
 2532 0292 6061     	    str r0,[UPP,#DATALEN]
 2533 0294 7047     	9:  _RET 
 2534              	
 2535              	/***********************************
 2536              	  BASIC: DEC 
 2537              	  switch base to decimal 
 2538              	***********************************/
 2539 0296 00BF     	    _FUNC dec_base
 2540 0298 4FF00A00 	    mov r0,#10
 2541 029c A061     	    str r0,[UPP,#BASE]
 2542 029e 7047     	    _RET 
 2543              	
 2544              	    _FUNC directory
 2545 02a0 7047     	    _RET 
 2546              	
 2547              	/***************************************
ARM GAS  tinyBasic.s 			page 70


 2548              	  BASIC: DO 
 2549              	  initialize a DO..UNTIL loop 
 2550              	***************************************/
 2551 02a2 00BF     	    _FUNC do_loop
 2552 02a4 6068     	    ldr r0,[UPP,#COUNT]
 2553 02a6 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 2554 02aa 7047     	    _RET 
 2555              	
 2556              	
 2557              	/****************************************
 2558              	  BASIC: DUMP adr, count 
 2559              	    command line only  
 2560              	    print memory content in hexadecimal 
 2561              	    16 bytes per row 
 2562              	    ouput:
 2563              	      none 
 2564              	    use:
 2565              	      r2   byte counter  
 2566              	****************************************/
 2567              	    _FUNC dump 
 2568 02ac 04B4     	    push {r2}
 2569 02ae 226C     	    ldr r2,[UPP,#FLAGS]
 2570 02b0 12F0010F 	    tst r2,#FRUN 
 2571 02b4 03D0     	    beq 0f
 2572 02b6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2573 02ba FFF7FEBF 	    b tb_error  
 2574 02be 00B5FFF7 	0:  _CALL arg_list 
 2574      FEFF5DF8 
 2574      04EB
 2575 02c8 0228     	    cmp r0,#2
 2576 02ca 7FF4FEAF 	    bne syntax_error 
 2577 02ce 5CF8042B 	    _POP r2   // count 
 2578 02d2 5CF8040B 	    _POP  r0  // adr 
 2579              	dump01:
 2580 02d6 00B500F0 	    _CALL print_dump_header 
 2580      0EF85DF8 
 2580      04EB
 2581 02e0 4FF01001 	1:  mov r1,#16
 2582 02e4 00B5FFF7 	    _CALL prt_row 
 2582      FEFF5DF8 
 2582      04EB
 2583 02ee 103A     	    subs r2,#16 
 2584 02f0 F6D5     	    bpl 1b 
 2585 02f2 04BC     	2:  pop {r2}
 2586 02f4 7047     	    _RET 
 2587              	
 2588              	/********************************
 2589              	   print_dump_header
 2590              	********************************/
 2591 02f6 00BF     	    _FUNC print_dump_header
 2592 02f8 2DE90103 	    push {r0,T1,T2}
 2593 02fc 4FF00C00 	    mov r0,#12 
 2594 0300 00B5FFF7 	    _CALL spaces
 2594      FEFF5DF8 
 2594      04EB
 2595 030a 4FF00000 	    mov r0,#0
 2596 030e 4FF01009 	    mov T2,#16
ARM GAS  tinyBasic.s 			page 71


 2597 0312 8046     	1:  mov T1,r0 
 2598 0314 00B5FFF7 	    _CALL print_hex 
 2598      FEFF5DF8 
 2598      04EB
 2599 031e 08F10100 	    add r0,T1,#1  
 2600 0322 4845     	    cmp r0,T2 
 2601 0324 F5D4     	    bmi 1b 
 2602 0326 4FF00D00 	    mov r0,#CR 
 2603 032a 00B5FFF7 	    _CALL uart_putc 
 2603      FEFF5DF8 
 2603      04EB
 2604 0334 4FF03D00 	    mov r0,#'='
 2605 0338 4FF04F08 	    mov T1,#79
 2606 033c 00B5FFF7 	2:  _CALL uart_putc
 2606      FEFF5DF8 
 2606      04EB
 2607 0346 B8F10108 	    subs T1,#1 
 2608 034a F7D1     	    bne 2b     
 2609 034c 4FF00D00 	    mov r0,#CR 
 2610 0350 00B5FFF7 	    _CALL uart_putc 
 2610      FEFF5DF8 
 2610      04EB
 2611 035a BDE80103 	    pop {r0,T1,T2}
 2612 035e 7047     	    _RET 
 2613              	
 2614              	
 2615              	/*******************************
 2616              	  BASIC: END 
 2617              	  exit program 
 2618              	******************************/ 
 2619              	    _FUNC cmd_end
 2620 0360 FFF7FEBF 	    b warm_start 
 2621 0364 7047     	    _RET 
 2622              	
 2623 0366 00BF     	    _FUNC forget
 2624 0368 7047     	    _RET 
 2625              	
 2626              	/**************************************************
 2627              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2628              	  introdure FOR...NEXT loop 
 2629              	**************************************************/
 2630 036a 00BF     	    _FUNC for
 2631 036c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2632 0370 4FF00107 	    mov INCR,#1
 2633 0374 00B5FFF7 	    _CALL next_token
 2633      FEFF5DF8 
 2633      04EB
 2634 037e 0428     	    cmp r0,#TK_VAR
 2635 0380 7FF4FEAF 	    bne syntax_error
 2636 0384 02B4     	    push {r1} 
 2637 0386 00B500F0 	    _CALL let_var 
 2637      2FF95DF8 
 2637      04EB
 2638 0390 20BC     	    pop {VADR}
 2639 0392 4FEA8505 	    lsl VADR,#2
 2640 0396 2544     	    add VADR,UPP 
 2641 0398 05F16005 	    add VADR,#VARS 
ARM GAS  tinyBasic.s 			page 72


 2642 039c 7047     	    _RET 
 2643              	
 2644              	/***************************************
 2645              	  BASIC: TO expr 
 2646              	  set limit of FOR...NEXT loop 
 2647              	**************************************/
 2648 039e 00BF     	    _FUNC to
 2649 03a0 00B5FFF7 	    _CALL expression 
 2649      FEFF5DF8 
 2649      04EB
 2650 03aa 0E28     	    cmp r0,#TK_INTGR
 2651 03ac 7FF4FEAF 	    bne syntax_error 
 2652 03b0 0E46     	    mov LIMIT,r1
 2653              	    // save loop back parameters 
 2654 03b2 6068     	    ldr r0,[UPP,#COUNT]
 2655 03b4 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2656 03b8 7047     	    _RET 
 2657              	
 2658              	/********************************************
 2659              	  BASIC: STEP expr 
 2660              	  set increment for FOR...NEXT loop 
 2661              	********************************************/
 2662 03ba 00BF     	    _FUNC step
 2663 03bc 00B5FFF7 	    _CALL expression 
 2663      FEFF5DF8 
 2663      04EB
 2664 03c6 0E28     	    cmp r0,#TK_INTGR
 2665 03c8 7FF4FEAF 	    bne syntax_error 
 2666 03cc 0F46     	    mov INCR,r1
 2667              	    // replace parameters left by TO
 2668 03ce 6068     	    ldr r0,[UPP,#COUNT]
 2669 03d0 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2670 03d4 7047     	    _RET 
 2671              	
 2672              	/********************************************
 2673              	  BASIC: NEXT var 
 2674              	  incrment FOR...NEXT loop variable
 2675              	  exit if variable cross LIMIT 
 2676              	********************************************/
 2677 03d6 00BF     	    _FUNC next
 2678 03d8 00B5FFF7 	    _CALL next_token 
 2678      FEFF5DF8 
 2678      04EB
 2679 03e2 0428     	    cmp r0,#TK_VAR 
 2680 03e4 7FF4FEAF 	    bne syntax_error 
 2681 03e8 4FEA8101 	    lsl r1,#2 
 2682 03ec 2144     	    add r1,UPP 
 2683 03ee 01F16001 	    add r1,#VARS 
 2684 03f2 A942     	    cmp r1,VADR
 2685 03f4 7FF4FEAF 	    bne syntax_error 
 2686 03f8 2868     	    ldr r0,[VADR]
 2687 03fa 3844     	    add r0,INCR 
 2688 03fc 2860     	    str r0,[VADR]
 2689 03fe 002F     	    cmp INCR,#0
 2690 0400 02D4     	    bmi 2f
 2691 0402 B042     	    cmp r0,LIMIT 
 2692 0404 02DC     	    bgt 8f  
ARM GAS  tinyBasic.s 			page 73


 2693 0406 07E0     	    b 9f  
 2694 0408 B042     	2:  cmp r0,LIMIT 
 2695 040a 05DA     	    bge 9f  
 2696              	8: // exit for...next
 2697              	  //  drop branch parameters
 2698 040c 4FF00C00 	    _DROP 3
 2698      8444
 2699              	  // restore outer loop parameters
 2700 0412 BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2701 0416 7047     	    _RET 
 2702 0418 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2703 041c 6060     	    str r0,[UPP,#COUNT]
 2704 041e 7047     	    _RET 
 2705              	
 2706              	/*********************************
 2707              	  BASIC: GOSUB expr 
 2708              	  call a subroutine at line# 
 2709              	*********************************/
 2710              	    _FUNC gosub
 2711 0420 00B5FFF7 	    _CALL expression
 2711      FEFF5DF8 
 2711      04EB
 2712 042a 0E28     	    cmp r0,#TK_INTGR 
 2713 042c 7FF4FEAF 	    bne syntax_error 
 2714 0430 0846     	    mov r0,r1 
 2715 0432 00B5FFF7 	    _CALL search_lineno  
 2715      FEFF5DF8 
 2715      04EB
 2716 043c 19B1     	    cbz r1,1f 
 2717 043e 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2718 0442 FFF7FEBF 	    b tb_error 
 2719 0446 6168     	1:  ldr r1,[UPP,#COUNT]
 2720 0448 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2721 044c 8346     	    mov BPTR,r0 
 2722 044e 4FF0030A 	    mov IN,#3 
 2723 0452 9BF80200 	    ldrb r0,[BPTR,#2]
 2724 0456 6060     	    str r0,[UPP,#COUNT]
 2725 0458 7047     	    _RET 
 2726              	
 2727              	/**********************************
 2728              	  BASIC: RETURN 
 2729              	  leave a subroutine 
 2730              	*********************************/
 2731 045a 00BF     	    _FUNC return 
 2732 045c BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2733 0460 6060     	    str r0,[UPP,#COUNT]
 2734 0462 7047     	    _RET 
 2735              	
 2736              	/**********************************
 2737              	  BASIC: GOTO expr 
 2738              	  go to line # 
 2739              	  use:
 2740              	
 2741              	**********************************/
 2742              	    _FUNC goto
 2743 0464 00B5FFF7 	    _CALL expression 
 2743      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 74


 2743      04EB
 2744 046e 0E28     	    cmp r0,#TK_INTGR 
 2745 0470 7FF4FEAF 	    bne syntax_error 
 2746 0474 59B1     	    cbz r1,9f 
 2747 0476 0846     	1:  mov r0,r1 
 2748 0478 00B5FFF7 	    _CALL search_lineno 
 2748      FEFF5DF8 
 2748      04EB
 2749 0482 19B1     	    cbz r1,2f 
 2750 0484 4FF00500 	    mov r0,#ERR_NO_LINE 
 2751 0488 FFF7FEBF 	    b tb_error 
 2752 048c 8346     	2:  mov BPTR,r0 
 2753 048e 4FF0030A 	9:  mov IN,#3 
 2754 0492 7047     	    _RET 
 2755              	
 2756              	/***************************************
 2757              	  BASIC: HEX 
 2758              	  set numeric base to hexadecimal 
 2759              	***************************************/
 2760              	    _FUNC hex_base
 2761 0494 4FF01000 	    mov r0,#16 
 2762 0498 A061     	    str r0,[UPP,#BASE]
 2763 049a 7047     	    _RET 
 2764              	
 2765              	    _FUNC const_idr
 2766 049c 7047     	    _RET 
 2767              	
 2768              	/**********************************************
 2769              	  BASIC: IF relation THEN statement
 2770              	  execute statement only if relation is true
 2771              	*********************************************/
 2772 049e 00BF     	    _FUNC if
 2773 04a0 00B5FFF7 	    _CALL relation 
 2773      FEFF5DF8 
 2773      04EB
 2774 04aa 09B9     	    cbnz r1,9f 
 2775 04ac D4F804A0 	    ldr IN,[UPP,#COUNT]
 2776 04b0 7047     	9:  _RET 
 2777              	
 2778              	/*******************************************************
 2779              	  BASIC: THEN statement
 2780              	  statements following THEN are executed if relation is !=0
 2781              	  optional, retained for compatibility.
 2782              	******************************************************/
 2783 04b2 00BF     	    _FUNC then 
 2784              	// do nothing 
 2785 04b4 7047     	    _RET
 2786              	
 2787              	/****************************************
 2788              	  BASIC: INPUT [string]var [,[string]var]+
 2789              	  prompt user for variable value
 2790              	***************************************/
 2791 04b6 00BF     	     _FUNC input_var
 2792 04b8 2DE90401 	    push {r2,T1}
 2793 04bc 00B5FFF7 	1:  _CALL next_token 
 2793      FEFF5DF8 
 2793      04EB
ARM GAS  tinyBasic.s 			page 75


 2794 04c6 0228     	    cmp r0,#2
 2795 04c8 5BD4     	    bmi 8f 
 2796 04ca 0228     	    cmp r0,#TK_QSTR 
 2797 04cc 12D1     	    bne 2f 
 2798 04ce 0846     	    mov r0,r1
 2799 04d0 DFF8C010 	    ldr r1,str_buffer
 2800 04d4 00B5FFF7 	    _CALL strcpy
 2800      FEFF5DF8 
 2800      04EB
 2801 04de 4FF00400 	    mov r0,#TK_VAR   
 2802 04e2 00B5FFF7 	    _CALL expect 
 2802      FEFF5DF8 
 2802      04EB
 2803 04ec 8846     	    mov T1,r1 
 2804 04ee DFF8A400 	    ldr r0,str_buffer 
 2805 04f2 08E0     	    b 3f 
 2806 04f4 0428     	2:  cmp r0,#TK_VAR 
 2807 04f6 7FF4FEAF 	    bne syntax_error     
 2808 04fa 8846     	    mov T1,r1 
 2809 04fc 01F14100 	    add r0,r1,#'A' 
 2810 0500 2449     	    ldr r1,str_buffer
 2811 0502 0880     	    strh r0,[r1]
 2812 0504 0846     	    mov r0,r1 
 2813 0506 00B5FFF7 	3:  _CALL uart_puts  
 2813      FEFF5DF8 
 2813      04EB
 2814 0510 4FF03D00 	    mov r0,#'='
 2815 0514 00B5FFF7 	    _CALL uart_putc
 2815      FEFF5DF8 
 2815      04EB
 2816 051e DFF87000 	    ldr r0,input_buffer
 2817 0522 4FF02201 	    mov r1,#34 
 2818 0526 00B5FFF7 	    _CALL readln
 2818      FEFF5DF8 
 2818      04EB
 2819 0530 D1B1     	    cbz r1,6f
 2820 0532 0178     	    ldrb r1,[r0]
 2821 0534 2429     	    cmp r1,#'$'
 2822 0536 04D1     	    bne 3f 
 2823 0538 4FF01001 	    mov r1,#16
 2824 053c 00F10100 	    add r0,#1  
 2825 0540 08E0     	    b 5f 
 2826 0542 2629     	3:  cmp r1,#'&' 
 2827 0544 04D1     	    bne 4f 
 2828 0546 4FF00201 	    mov r1,#2
 2829 054a 00F10100 	    add r0,#1 
 2830 054e 01E0     	    b 5f 
 2831 0550 4FF00A01 	4:  mov r1,#10 
 2832 0554 00B5FFF7 	5:  _CALL atoi 
 2832      FEFF5DF8 
 2832      04EB
 2833 055e 18B9     	    cbnz r0,6f
 2834 0560 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 2835 0564 FFF7FEBF 	    b tb_error
 2836 0568 4046     	6:  mov r0,T1 
 2837 056a 00B5FFF7 	    _CALL set_var
 2837      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 76


 2837      04EB
 2838 0574 00B5FFF7 	    _CALL next_token
 2838      FEFF5DF8 
 2838      04EB
 2839 057e 0828     	    cmp r0,#TK_COMMA 
 2840 0580 9CD0     	    beq 1b 
 2841 0582 D4F800A0 	8:  _UNGET_TOKEN          
 2841      D4F808B0 
 2842 058a BDE80401 	9:  pop {r2,T1}       
 2843 058e 7047     	    _RET 
 2844 0590 00000000 	input_buffer: .word _tib 
 2845 0594 00000000 	str_buffer: .word _pad 
 2846              	
 2847              	
 2848              	/*****************************************
 2849              	  BASIC: INVERT(expr)
 2850              	  return 1's complement of expr
 2851              	****************************************/
 2852              	    _FUNC invert
 2853 0598 00B5FFF7 	    _CALL func_args
 2853      FEFF5DF8 
 2853      04EB
 2854 05a2 0128     	    cmp r0,#1 
 2855 05a4 7FF4FEAF 	    bne syntax_error
 2856 05a8 5CF8041B 	    _POP r1  
 2857 05ac 6FEA0101 	    mvn r1,r1
 2858 05b0 4FF00E00 	    mov r0,#TK_INTGR
 2859 05b4 7047     	    _RET 
 2860              	
 2861 05b6 00BF     	    _FUNC enable_iwdg
 2862 05b8 7047     	    _RET 
 2863              	
 2864 05ba 00BF     	    _FUNC refresh_iwdg
 2865 05bc 7047     	    _RET 
 2866              	
 2867              	/*************************************
 2868              	  BASIC: KEY 
 2869              	  wait for a character from console
 2870              	*************************************/
 2871 05be 00BF     	    _FUNC key
 2872 05c0 00B5FFF7 	    _CALL uart_getc
 2872      FEFF5DF8 
 2872      04EB
 2873 05ca 0146     	    mov r1,r0
 2874 05cc 4FF00300 	    mov r0,#TK_CHAR 
 2875 05d0 7047     	    _RET  
 2876              	
 2877              	/******************************
 2878              	  BASIC: [LET] var=expr 
 2879              	         [LET] @(expr)=expr
 2880              	  input:
 2881              	    none 
 2882              	  output:
 2883              	    none 
 2884              	  use:
 2885              	
 2886              	****************************/         
ARM GAS  tinyBasic.s 			page 77


 2887 05d2 00BF     	    _FUNC let
 2888 05d4 00B5FFF7 	    _CALL next_token 
 2888      FEFF5DF8 
 2888      04EB
 2889 05de 0428     	    cmp r0,#TK_VAR
 2890 05e0 03D0     	    beq let_var 
 2891 05e2 0528     	    cmp r0,#TK_ARRAY 
 2892 05e4 07D0     	    beq let_array 
 2893 05e6 FFF7FEBF 	    b syntax_error 
 2894              	let_var:
 2895 05ea 4FEA8101 	    lsl r1,#2
 2896 05ee 04F16000 	    add r0,UPP,#VARS
 2897 05f2 0844     	    add r0,r1
 2898 05f4 1FE0     	    b 1f 
 2899              	let_array: 
 2900 05f6 4FF00600 	    mov r0,#TK_LPAREN
 2901 05fa 00B5FFF7 	    _CALL expect 
 2901      FEFF5DF8 
 2901      04EB
 2902 0604 00B5FFF7 	    _CALL expression
 2902      FEFF5DF8 
 2902      04EB
 2903 060e 0E28     	    cmp r0,#TK_INTGR 
 2904 0610 7FF4FEAF 	    bne syntax_error
 2905 0614 4CF8041D 	    _PUSH r1 
 2906 0618 4FF00700 	    mov r0,#TK_RPAREN
 2907 061c 00B5FFF7 	    _CALL expect 
 2907      FEFF5DF8 
 2907      04EB
 2908 0626 5CF8041B 	    _POP r1 
 2909 062a D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2910 062e 4FEA8101 	    lsl r1,#2 
 2911 0632 A0EB0100 	    sub r0,r1 
 2912 0636 4CF8040D 	1:  _PUSH r0 
 2913 063a 4FF03200 	    mov r0,#TK_EQUAL 
 2914 063e 00B5FFF7 	    _CALL expect 
 2914      FEFF5DF8 
 2914      04EB
 2915 0648 00B5FFF7 	    _CALL expression   
 2915      FEFF5DF8 
 2915      04EB
 2916 0652 0E28     	    cmp r0,#TK_INTGR
 2917 0654 7FF4FEAF 	    bne syntax_error   
 2918 0658 5CF8040B 	2:  _POP r0 
 2919 065c 0160     	    str r1,[r0]
 2920 065e 7047     	    _RET  
 2921              	
 2922              	/***************************************
 2923              	  BASIC: LIST [[first]-last]
 2924              	  use:
 2925              	    r2   first line# 
 2926              	    r3   last line#
 2927              	    T1   *line 
 2928              	    T2   TXTEND 
 2929              	**************************************/  
 2930              	    _FUNC list
 2931 0660 206C10F0 	    _CLO
ARM GAS  tinyBasic.s 			page 78


 2931      010F03D0 
 2931      4FF00700 
 2931      FFF7FEBF 
 2932 0670 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 2933 0674 D4F83490 	    ldr T2,[UPP,#TXTEND]
 2934 0678 B8F80020 	    ldrh r2,[T1]
 2935 067c 4FF40043 	    mov r3,#32768
 2936 0680 00B5FFF7 	    _CALL next_token 
 2936      FEFF5DF8 
 2936      04EB
 2937 068a E8B1     	    cbz r0,6f 
 2938 068c 0E28     	    cmp r0,#TK_INTGR
 2939 068e 06D1     	    bne 1f 
 2940 0690 0A46     	    mov r2,r1 // first line
 2941 0692 00B5FFF7 	    _CALL next_token
 2941      FEFF5DF8 
 2941      04EB
 2942 069c 60B1     	    cbz r0,4f
 2943 069e 1128     	1:  cmp r0,#TK_MINUS 
 2944 06a0 7FF4FEAF 	    bne syntax_error 
 2945 06a4 00B5FFF7 	    _CALL next_token 
 2945      FEFF5DF8 
 2945      04EB
 2946 06ae 18B1     	    cbz r0,4f 
 2947 06b0 0E28     	    cmp r0,#TK_INTGR
 2948 06b2 7FF4FEAF 	    bne syntax_error  
 2949 06b6 0B46     	    mov r3,r1 
 2950              	4:  // skip lines below r2 
 2951 06b8 B8F80000 	    ldrh r0,[T1]
 2952 06bc 9042     	    cmp r0,r2 
 2953 06be 03D5     	    bpl 6f 
 2954 06c0 98F80200 	    ldrb r0,[T1,#2]
 2955 06c4 8044     	    add T1,r0
 2956 06c6 F7E7     	    b 4b 
 2957 06c8 C845     	6:  cmp T1,T2  
 2958 06ca 1AD5     	    bpl 9f
 2959 06cc 4046     	    mov r0,T1   
 2960 06ce DFF83610 	    ldr r1,out_buff 
 2961 06d2 00B5FFF7 	    _CALL decompile_line 
 2961      FEFF5DF8 
 2961      04EB
 2962 06dc 00B5FFF7 	    _CALL uart_puts 
 2962      FEFF5DF8 
 2962      04EB
 2963 06e6 4FF00D00 	    mov r0,#CR 
 2964 06ea 00B5FFF7 	    _CALL uart_putc 
 2964      FEFF5DF8 
 2964      04EB
 2965 06f4 98F80200 	    ldrb r0,[T1,#2]
 2966 06f8 8044     	    add T1,r0
 2967 06fa 98F80000 	    ldrb r0,[T1]
 2968 06fe 9842     	    cmp r0,r3 
 2969 0700 E2DD     	    ble 6b 
 2970 0702 FFF7FEBF 	9:  b warm_start 
 2971 0706 00000000 	out_buff: .word _tib 
 2972              	
 2973 070a 00BF     	    _FUNC load
ARM GAS  tinyBasic.s 			page 79


 2974 070c 7047     	    _RET 
 2975              	
 2976              	/********************************
 2977              	  BASIC: LOG2(expr)
 2978              	  return log base 2 of expr 
 2979              	********************************/
 2980 070e 00BF     	    _FUNC log2
 2981 0710 00B5FFF7 	    _CALL func_args
 2981      FEFF5DF8 
 2981      04EB
 2982 071a 0128     	    cmp r0,#1 
 2983 071c 7FF4FEAF 	    bne syntax_error
 2984 0720 5CF8040B 	    _POP r0 
 2985 0724 B0FA80F1 	    clz r1,r0 
 2986 0728 C1F11F01 	    rsb r1,#31
 2987 072c 4FF00E00 	9:  mov r0,#TK_INTGR
 2988 0730 7047     	    _RET 
 2989              	
 2990              	
 2991              	/****************************************
 2992              	  BASIC: LSHIFT(expr1,expr2)
 2993              	  shift right expr1 of expr2 bits 
 2994              	****************************************/
 2995 0732 00BF     	    _FUNC lshift
 2996 0734 00B5FFF7 	    _CALL func_args
 2996      FEFF5DF8 
 2996      04EB
 2997 073e 0228     	    cmp r0,#2
 2998 0740 7FF4FEAF 	    bne syntax_error 
 2999 0744 BCE80300 	    ldmia DP!,{r0,r1}
 3000 0748 01FA00F1 	    lsl r1,r0 
 3001 074c 4FF00E00 	    mov r0,#TK_INTGR
 3002 0750 7047     	    _RET 
 3003              	
 3004              	/***********************************
 3005              	  BASIC: NEW 
 3006              	  delete existing program in memory
 3007              	  and clear variables and RAM 
 3008              	***********************************/
 3009 0752 00BF     	    _FUNC new
 3010 0754 206C10F0 	    _CLO 
 3010      010F03D0 
 3010      4FF00700 
 3010      FFF7FEBF 
 3011 0764 00B5FFF7 	    _CALL clear_basic 
 3011      FEFF5DF8 
 3011      04EB
 3012 076e FFF7FEBF 	    b warm_start   
 3013              	
 3014              	/************************************
 3015              	  BASIC: NOT relation  
 3016              	  invert logical value or relation
 3017              	************************************/
 3018 0772 00BF     	      _FUNC func_not
 3019 0774 00B5FFF7 	      _CALL relation 
 3019      FEFF5DF8 
 3019      04EB
ARM GAS  tinyBasic.s 			page 80


 3020 077e 11B1     	      cbz r1,8f 
 3021 0780 81EA0101 	      eor r1,r1
 3022 0784 01E0     	      b 9f 
 3023 0786 4FF0FF31 	  8:  mov r1,#-1
 3024 078a 7047     	  9:  _RET 
 3025              	
 3026              	/******************************************
 3027              	  BASIC: OR(expr1,expr2)
 3028              	  binary OR between 2 expressions
 3029              	******************************************/
 3030              	    _FUNC bit_or
 3031 078c 00B5FFF7 	    _CALL func_args
 3031      FEFF5DF8 
 3031      04EB
 3032 0796 0228     	    cmp r0,#2
 3033 0798 7FF4FEAF 	    bne syntax_error
 3034 079c 5CF8040B 	    _POP r0 
 3035 07a0 5CF8041B 	    _POP r1
 3036 07a4 41EA0001 	    orr r1,r0 
 3037 07a8 4FF00E00 	    mov r0,#TK_INTGR
 3038 07ac 7047     	    _RET 
 3039              	
 3040              	/****************************************
 3041              	  BASIC: INP(\c) 
 3042              	  read gpio_idr (16 bits value) 
 3043              	***************************************/
 3044 07ae 00BF     	    _FUNC inp 
 3045 07b0 4FF00600 	    mov r0,#TK_LPAREN 
 3046 07b4 00B5FFF7 	    _CALL expect 
 3046      FEFF5DF8 
 3046      04EB
 3047 07be 4FF00300 	    mov r0,#TK_CHAR 
 3048 07c2 00B5FFF7 	    _CALL expect
 3048      FEFF5DF8 
 3048      04EB
 3049 07cc 0846     	    mov r0,r1 
 3050 07ce 00B5FFF7 	    _CALL upper 
 3050      FEFF5DF8 
 3050      04EB
 3051 07d8 0246     	    mov r2,r0 
 3052 07da 4FF00700 	    mov r0,#TK_RPAREN
 3053 07de 00B5FFF7 	    _CALL expect 
 3053      FEFF5DF8 
 3053      04EB
 3054 07e8 A2F14102 	    sub r2,#'A' 
 3055 07ec 4FF48061 	    mov r1,0x400 
 3056 07f0 02FB01F1 	    mul r1,r2
 3057 07f4 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3057      C4F20102 
 3058 07fc 0A44     	    add r2,r1 
 3059 07fe 1188     	    ldrh r1,[r2]
 3060 0800 4FF00E00 	    mov r0,#TK_INTGR
 3061 0804 7047     	    _RET 
 3062              	
 3063              	
 3064              	/****************************************
 3065              	  BASIC: OUT \c,expr1[,\c,expr2] 
ARM GAS  tinyBasic.s 			page 81


 3066              	  output to gpio_odr expr lower 16 bits
 3067              	***************************************/
 3068 0806 00BF     	    _FUNC out
 3069 0808 4FF00300 	1:  mov r0,#TK_CHAR 
 3070 080c 00B5FFF7 	    _CALL expect 
 3070      FEFF5DF8 
 3070      04EB
 3071 0816 0846     	    mov r0,r1
 3072 0818 00B5FFF7 	    _CALL upper
 3072      FEFF5DF8 
 3072      04EB
 3073 0822 0246     	    mov r2,r0 
 3074 0824 4FF00800 	    mov r0,#TK_COMMA 
 3075 0828 00B5FFF7 	    _CALL expect 
 3075      FEFF5DF8 
 3075      04EB
 3076 0832 00B5FFF7 	    _CALL expression 
 3076      FEFF5DF8 
 3076      04EB
 3077 083c A2F14102 	    sub r2,#'A'
 3078 0840 4FF48063 	    mov r3,#0x400 
 3079 0844 03FB02F2 	    mul r2,r3 
 3080 0848 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3080      C4F20103 
 3081 0850 1A44     	    add r2,r3
 3082 0852 1180     	    strh r1,[r2]
 3083 0854 00B5FFF7 	    _CALL next_token
 3083      FEFF5DF8 
 3083      04EB
 3084 085e 0828     	    cmp r0,#TK_COMMA
 3085 0860 D2D0     	    beq 1b 
 3086 0862 D4F800A0 	    _UNGET_TOKEN
 3086      D4F808B0 
 3087 086a 7047     	    _RET 
 3088              	
 3089              	/****************************************
 3090              	  BASIC: PAD 
 3091              	  return pad buffer address 
 3092              	****************************************/
 3093              	    _FUNC pad_ref
 3094 086c 0149     	    ldr r1,pad_adr  
 3095 086e 4FF00E00 	    mov r0,#TK_INTGR 
 3096 0872 7047     	    _RET 
 3097 0874 00000000 	pad_adr: .word _pad 
 3098              	
 3099              	/***********************
 3100              	  BASIC: PAUSE expr 
 3101              	  suspend execution for 
 3102              	  expr milliseconds 
 3103              	************************/
 3104              	    _FUNC pause
 3105 0878 00B5FFF7 	    _CALL expression 
 3105      FEFF5DF8 
 3105      04EB
 3106 0882 0E28     	    cmp r0,#TK_INTGR 
 3107 0884 7FF4FEAF 	    bne syntax_error 
 3108 0888 E069     	    ldr r0,[UPP,#TICKS]
ARM GAS  tinyBasic.s 			page 82


 3109 088a 0844     	    add r0,r1 
 3110 088c E169     	1:  ldr r1,[UPP,#TICKS]
 3111 088e 8842     	    cmp r0,r1 
 3112 0890 FCD1     	    bne 1b     
 3113 0892 7047     	    _RET 
 3114              	
 3115              	    _FUNC pin_mode
 3116 0894 7047     	    _RET 
 3117              	
 3118              	/*****************************************
 3119              	  BASIC: PEEK8 (expr)  
 3120              	  return byte value at address 
 3121              	*****************************************/
 3122 0896 00BF     	    _FUNC peek8
 3123 0898 00B5FFF7 	    _CALL func_args  
 3123      FEFF5DF8 
 3123      04EB
 3124 08a2 0128     	    cmp r0,#1
 3125 08a4 3FF5FEAF 	    bmi syntax_error
 3126 08a8 5CF8041B 	    _POP r1 
 3127 08ac 0978     	    ldrb r1,[r1]
 3128 08ae 4FF00E00 	    mov r0,#TK_INTGR     
 3129 08b2 7047     	    _RET 
 3130              	
 3131              	/*****************************************
 3132              	  BASIC: PEEK16 (expr)  
 3133              	  return byte value at address 
 3134              	*****************************************/
 3135              	    _FUNC peek16
 3136 08b4 00B5FFF7 	    _CALL func_args  
 3136      FEFF5DF8 
 3136      04EB
 3137 08be 0128     	    cmp r0,#1
 3138 08c0 3FF5FEAF 	    bmi syntax_error
 3139 08c4 5CF8041B 	    _POP r1 
 3140 08c8 0988     	    ldrh r1,[r1]
 3141 08ca 4FF00E00 	    mov r0,#TK_INTGR     
 3142 08ce 7047     	    _RET 
 3143              	
 3144              	/*****************************************
 3145              	  BASIC: PEEK32 (expr)  
 3146              	  return byte value at address 
 3147              	*****************************************/
 3148              	    _FUNC peek32
 3149 08d0 00B5FFF7 	    _CALL func_args  
 3149      FEFF5DF8 
 3149      04EB
 3150 08da 0128     	    cmp r0,#1
 3151 08dc 3FF5FEAF 	    bmi syntax_error
 3152 08e0 5CF8041B 	    _POP r1 
 3153 08e4 0968     	    ldr r1,[r1]
 3154 08e6 4FF00E00 	    mov r0,#TK_INTGR     
 3155 08ea 7047     	    _RET 
 3156              	
 3157              	
 3158              	/**********************************
 3159              	  BASIC: POKE8 addr,byte
ARM GAS  tinyBasic.s 			page 83


 3160              	  store byte at addr   
 3161              	**********************************/
 3162              	    _FUNC poke8
 3163 08ec 00B5FFF7 	    _CALL arg_list
 3163      FEFF5DF8 
 3163      04EB
 3164 08f6 0228     	    cmp r0,#2 
 3165 08f8 7FF4FEAF 	    bne syntax_error
 3166 08fc BCE80300 	    ldmia DP!,{r0,r1} 
 3167 0900 0870     	    strb r0,[r1]
 3168 0902 7047     	    _RET 
 3169              	
 3170              	/**********************************
 3171              	  BASIC: POKE16 addr,hword
 3172              	  store hword at addr   
 3173              	**********************************/
 3174              	    _FUNC poke16
 3175 0904 00B5FFF7 	    _CALL arg_list
 3175      FEFF5DF8 
 3175      04EB
 3176 090e 0228     	    cmp r0,#2 
 3177 0910 7FF4FEAF 	    bne syntax_error
 3178 0914 BCE80300 	    ldmia DP!,{r0,r1} 
 3179 0918 0880     	    strh r0,[r1]
 3180 091a 7047     	    _RET 
 3181              	
 3182              	/**********************************
 3183              	  BASIC: POKE32 addr,word
 3184              	  store word at addr   
 3185              	**********************************/
 3186              	    _FUNC poke32
 3187 091c 00B5FFF7 	    _CALL arg_list 
 3187      FEFF5DF8 
 3187      04EB
 3188 0926 0228     	    cmp r0,#2 
 3189 0928 7FF4FEAF 	    bne syntax_error
 3190 092c BCE80300 	    ldmia DP!,{r0,r1} 
 3191 0930 0860     	    str r0,[r1]
 3192 0932 7047     	    _RET 
 3193              	
 3194              	
 3195              	
 3196              	/****************************
 3197              	  BASIC: PRINT|? arg_list 
 3198              	  print list of arguments 
 3199              	****************************/
 3200              	    _FUNC print
 3201 0934 88EA0808 	    eor T1,T1 
 3202 0938 00B5FFF7 	0:  _CALL expression
 3202      FEFF5DF8 
 3202      04EB
 3203 0942 0E28     	    cmp r0,#TK_INTGR
 3204 0944 07D1     	    bne 1f 
 3205 0946 0846     	    mov r0,r1
 3206 0948 A169     	    ldr r1,[UPP,#BASE]
 3207 094a 00B5FFF7 	    _CALL print_int
 3207      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 84


 3207      04EB
 3208 0954 3DE0     	    b 8f 
 3209 0956 00B5FFF7 	1:  _CALL next_token
 3209      FEFF5DF8 
 3209      04EB
 3210 0960 0128     	    cmp r0,#TK_COLON 
 3211 0962 04DC     	    bgt 2f
 3212 0964 D4F800A0 	    _UNGET_TOKEN 
 3212      D4F808B0 
 3213 096c 41E0     	    b print_exit
 3214 096e 0228     	2:  cmp r0,#TK_QSTR 
 3215 0970 06D1     	    bne 4f
 3216 0972 0846     	    mov r0,r1 
 3217 0974 00B5FFF7 	    _CALL uart_puts  
 3217      FEFF5DF8 
 3217      04EB
 3218 097e 28E0     	    b 8f 
 3219 0980 0C28     	4:  cmp r0,#TK_CFUNC
 3220 0982 05D1     	    bne 5f
 3221 0984 0846     	    mov r0,r1
 3222 0986 00B5FFF7 	    _CALL execute 
 3222      FEFF5DF8 
 3222      04EB
 3223 0990 0328     	5:  cmp r0,#TK_CHAR 
 3224 0992 06D1     	    bne 6f 
 3225 0994 0846     	    mov r0,r1 
 3226 0996 00B5FFF7 	    _CALL uart_putc 
 3226      FEFF5DF8 
 3226      04EB
 3227 09a0 17E0     	    b 8f 
 3228 09a2 0928     	6:  cmp r0,#TK_SHARP
 3229 09a4 04D0     	    beq 6f 
 3230 09a6 D4F800A0 	    _UNGET_TOKEN
 3230      D4F808B0 
 3231 09ae 20E0     	    b print_exit  
 3232 09b0 00B5FFF7 	6:  _CALL next_token
 3232      FEFF5DF8 
 3232      04EB
 3233 09ba 0928     	    cmp r0,#TK_SHARP 
 3234 09bc 05D1     	    bne 7f
 3235 09be 00B5FFF7 	    _CALL tabulation 
 3235      FEFF5DF8 
 3235      04EB
 3236 09c8 03E0     	    b 8f 
 3237 09ca 0E28     	7:  cmp r0,#TK_INTGR 
 3238 09cc 7FF4FEAF 	    bne syntax_error 
 3239 09d0 6164     	    str r1,[UPP,#TAB_WIDTH]
 3240 09d2 88EA0808 	8:  eor T1,T1 
 3241 09d6 00B5FFF7 	    _CALL next_token 
 3241      FEFF5DF8 
 3241      04EB
 3242 09e0 0828     	    cmp r0,#TK_COMMA 
 3243 09e2 02D1     	    bne 8f 
 3244 09e4 4FF0FF38 	    mov T1,#-1
 3245 09e8 A6D0     	    beq 0b
 3246 09ea D4F800A0 	8: _UNGET_TOKEN 
 3246      D4F808B0 
ARM GAS  tinyBasic.s 			page 85


 3247              	print_exit:
 3248 09f2 18EA0808 	    ands T1,T1 
 3249 09f6 06D1     	    bne 9f
 3250 09f8 4FF00D00 	    mov r0,#CR 
 3251 09fc 00B5FFF7 	    _CALL uart_putc 
 3251      FEFF5DF8 
 3251      04EB
 3252 0a06 7047     	9:  _RET 
 3253              	
 3254              	/**************************************
 3255              	  BASIC: QKEY
 3256              	  check if key pressed 
 3257              	**************************************/ 
 3258              	    _FUNC qkey
 3259 0a08 4FF00001 	    mov r1,#0
 3260 0a0c 00B5FFF7 	    _CALL uart_qkey
 3260      FEFF5DF8 
 3260      04EB
 3261 0a16 01D0     	    beq 9f 
 3262 0a18 4FF0FF31 	    mov r1,#-1 
 3263 0a1c 4FF00E00 	9:  mov r0,#TK_INTGR
 3264 0a20 7047     	    _RET 
 3265              	
 3266              	/******************************************
 3267              	  BASIC RANDOM(expr)
 3268              	  generate random number between 0..expr-1
 3269              	******************************************/
 3270 0a22 00BF     	    _FUNC random
 3271 0a24 00B5FFF7 	    _CALL func_args 
 3271      FEFF5DF8 
 3271      04EB
 3272 0a2e 0128     	    cmp r0,#1
 3273 0a30 7FF4FEAF 	    bne syntax_error 
 3274 0a34 606A     	    ldr r0,[UPP,#SEED]
 3275 0a36 4FEA4031 	    lsl r1,r0,#13
 3276 0a3a 81EA0001 	    eor r1,r0
 3277 0a3e 4FEA5140 	    lsr r0,r1,#17
 3278 0a42 81EA0001 	    eor r1,r0
 3279 0a46 4FEA4110 	    lsl r0,r1,#5
 3280 0a4a 81EA0001 	    eor r1,r0
 3281 0a4e 6162     	    str r1,[UPP,#SEED]
 3282 0a50 5CF8040B 	    _POP r0 
 3283 0a54 B1FBF0F2 	    udiv r2,r1,r0  
 3284 0a58 00FB02F2 	    mul r2,r0 
 3285 0a5c A1EB0201 	    sub r1,r2 
 3286 0a60 4FF00E00 	    mov r0,#TK_INTGR
 3287 0a64 7047     	    _RET 
 3288              	
 3289              	/****************************************
 3290              	  BASIC: RSHIFT(expr1,expr2)
 3291              	  shift left expr1 de expr2 bits 
 3292              	****************************************/
 3293 0a66 00BF     	    _FUNC rshift
 3294 0a68 00B5FFF7 	    _CALL func_args
 3294      FEFF5DF8 
 3294      04EB
 3295 0a72 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 86


 3296 0a74 7FF4FEAF 	    bne syntax_error
 3297 0a78 BCE80300 	    ldmia DP!,{r0,r1}
 3298 0a7c 21FA00F1 	    lsr r1,r0  
 3299 0a80 4FF00E00 	    mov r0,#TK_INTGR
 3300 0a84 7047     	    _RET 
 3301              	
 3302              	/****************************
 3303              	  BASIC: RUN 
 3304              	  execute program in memory
 3305              	****************************/
 3306 0a86 00BF     	    _FUNC run
 3307 0a88 206C10F0 	    _CLO 
 3307      010F03D0 
 3307      4FF00700 
 3307      FFF7FEBF 
 3308 0a98 206B     	    ldr r0,[UPP,#TXTBGN]
 3309 0a9a 616B     	    ldr r1,[UPP,#TXTEND]
 3310 0a9c 8842     	    cmp r0,r1
 3311 0a9e 1BD0     	    beq 9f
 3312 0aa0 216C     	    ldr r1,[UPP,#FLAGS]
 3313 0aa2 11F0080F 	    tst r1,#FSTOP
 3314 0aa6 09D0     	    beq 1f
 3315 0aa8 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3316 0aac 6060     	    str r0,[UPP,#COUNT]
 3317 0aae 206C     	    ldr r0,[UPP,#FLAGS]
 3318 0ab0 4FF00901 	    mov r1,#FRUN+FSTOP
 3319 0ab4 80EA0100 	    eor r0,r1
 3320 0ab8 2064     	    str r0,[UPP,#FLAGS] 
 3321 0aba 0DE0     	    b 9f  
 3322 0abc 8178     	1:  ldrb r1,[r0,#2]
 3323 0abe 6160     	    str r1,[UPP,#COUNT]
 3324 0ac0 8346     	    mov BPTR,r0 
 3325 0ac2 4FF0030A 	    mov IN,#3
 3326              	    // reset dataline pointers 
 3327 0ac6 80EA0000 	    eor r0,r0 
 3328 0aca E060     	    str r0,[UPP,#DATAPTR]
 3329 0acc 2061     	    str r0,[UPP,#DATA]
 3330 0ace 6061     	    str r0,[UPP,#DATALEN] 
 3331 0ad0 206C     	    ldr r0,[UPP,#FLAGS]
 3332 0ad2 40F00100 	    orr r0,#FRUN 
 3333 0ad6 2064     	    str r0,[UPP,#FLAGS]
 3334 0ad8 7047     	9:  _RET 
 3335              	
 3336 0ada 00BF     	    _FUNC save
 3337 0adc 7047     	    _RET 
 3338              	
 3339 0ade 00BF     	    _FUNC show
 3340 0ae0 7047     	    _RET 
 3341              	
 3342              	/*******************************
 3343              	  BASIC: SIZE 
 3344              	  return RAM free bytes 
 3345              	*******************************/
 3346 0ae2 00BF     	    _FUNC size
 3347 0ae4 606B     	    ldr r0,[UPP,#TXTEND]
 3348 0ae6 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3349 0aea A1EB0001 	    sub r1,R0
ARM GAS  tinyBasic.s 			page 87


 3350 0aee 4FF00E00 	    mov r0,#TK_INTGR
 3351 0af2 7047     	    _RET  
 3352              	
 3353              	/*********************************
 3354              	  BASIC: SLEEP 
 3355              	  place MCU lowest power mode 
 3356              	  wait for external interrpt or
 3357              	  reset.
 3358              	*********************************/
 3359              	    _FUNC sleep
 3360 0af4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3360      CEF20000 
 3361 0afc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3362 0b00 0160     	    str r1,[r0]
 3363 0b02 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3363      C4F20000 
 3364 0b0a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3365 0b0e 0160     	    str r1,[r0]
 3366 0b10 20BF     	    wfe 
 3367 0b12 7047     	    _RET 
 3368              	
 3369              	    _FUNC spi_read
 3370 0b14 7047     	    _RET 
 3371              	
 3372 0b16 00BF     	    _FUNC spi_enable
 3373 0b18 7047     	    _RET 
 3374              	
 3375 0b1a 00BF     	    _FUNC spi_select
 3376 0b1c 7047     	    _RET 
 3377              	
 3378 0b1e 00BF     	    _FUNC spi_write
 3379 0b20 7047     	    _RET 
 3380              	
 3381              	/******************************
 3382              	  BASIC: STOP 
 3383              	  stop program executre but 
 3384              	  keep execution state for 
 3385              	  resume 
 3386              	******************************/
 3387 0b22 00BF     	    _FUNC stop
 3388 0b24 206C10F0 	    _RTO 
 3388      010F03D1 
 3388      4FF00700 
 3388      FFF7FEBF 
 3389 0b34 6068     	    ldr r0,[UPP,#COUNT]
 3390 0b36 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3391 0b3a 206C     	    ldr r0,[UPP,#FLAGS]
 3392 0b3c 4FF00901 	    mov r1,#FRUN+FSTOP
 3393 0b40 80EA0100 	    eor r0,r1
 3394 0b44 2064     	    str r0,[UPP,#FLAGS]
 3395 0b46 8AEA0A0A 	    eor IN,IN 
 3396 0b4a 8BEA0B0B 	    eor BPTR,BPTR 
 3397 0b4e C4F804A0 	    str IN,[UPP,#COUNT]
 3398 0b52 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3399 0b56 C4F808A0 	    str IN,[UPP,#BASICPTR]
 3400 0b5a 4FF4A040 	    _MOV32 r0,RAM_END
 3400      C2F20000 
ARM GAS  tinyBasic.s 			page 88


 3401 0b62 8546     	    mov sp,r0
 3402 0b64 FFF7FEBF 	    b cmd_line 
 3403              	
 3404              	
 3405              	/**************************
 3406              	  BASIC: TICKS 
 3407              	  return msec counter
 3408              	**************************/  
 3409              	    _FUNC get_ticks
 3410 0b68 E169     	    ldr r1,[UPP,#TICKS]
 3411 0b6a 4FF00E00 	    mov r0,#TK_INTGR
 3412 0b6e 7047     	    _RET  
 3413              	
 3414              	/*************************
 3415              	  BASIC: TIMER expr 
 3416              	  set countdown timer 
 3417              	************************/
 3418              	    _FUNC set_timer
 3419 0b70 00B5FFF7 	    _CALL expression 
 3419      FEFF5DF8 
 3419      04EB
 3420 0b7a 0E28     	    cmp r0,#TK_INTGR
 3421 0b7c 7FF4FEAF 	    bne syntax_error 
 3422 0b80 2162     	    str r1,[UPP,#TIMER]
 3423 0b82 7047     	    _RET 
 3424              	
 3425              	/***************************
 3426              	  BASIC: TIMEOUT
 3427              	  check for timer expiration 
 3428              	  return -1 true || 0 false
 3429              	****************************/
 3430              	    _FUNC timeout
 3431 0b84 81EA0101 	    eor r1,r1 
 3432 0b88 206A     	    ldr r0,[UPP,#TIMER]
 3433 0b8a 08B9     	    cbnz r0,9f 
 3434 0b8c 6FEA0101 	    mvn r1,r1 
 3435 0b90 4FF00E00 	9:  mov r0,#TK_INTGR    
 3436 0b94 7047     	    _RET 
 3437              	
 3438 0b96 00BF     	    _FUNC tone
 3439 0b98 7047     	    _RET 
 3440              	
 3441              	/***************************
 3442              	  BASIC: UBOUND 
 3443              	  return last indice of @
 3444              	  output:
 3445              	    r0  TK_INTGR 
 3446              	    r1  +int 
 3447              	**************************/
 3448 0b9a 00BF     	    _FUNC ubound
 3449 0b9c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3450 0ba0 606B     	    ldr r0,[UPP,#TXTEND]
 3451 0ba2 A1EB0001 	    sub r1,r0 
 3452 0ba6 4FEA9101 	    lsr r1,#2
 3453 0baa 4FF00E00 	    mov r0,#TK_INTGR 
 3454 0bae 7047     	    _RET 
 3455              	
ARM GAS  tinyBasic.s 			page 89


 3456              	/****************************
 3457              	  BASIC: UFLASH 
 3458              	  return user flash address
 3459              	*****************************/
 3460              	    _FUNC uflash
 3461 0bb0 3C49     	    ldr r1,=user
 3462 0bb2 4FF00E00 	    mov r0,#TK_INTGR 
 3463 0bb6 7047     	    _RET 
 3464              	
 3465              	
 3466              	/************************************
 3467              	  BASIC: UNTIL relation 
 3468              	  close a DO..UNTIL loop 
 3469              	  loop until relation come true 
 3470              	************************************/
 3471              	    _FUNC until
 3472 0bb8 00B5FFF7 	    _CALL relation 
 3472      FEFF5DF8 
 3472      04EB
 3473 0bc2 11B1     	    cbz r1,9f
 3474 0bc4 0CF10C0C 	    add DP,#12
 3475 0bc8 7047     	    _RET  
 3476 0bca 9CE8010C 	9:  ldmia DP,{r0,IN,BPTR}
 3477 0bce 6060     	    str r0,[UPP,#COUNT]
 3478 0bd0 7047     	    _RET 
 3479              	
 3480 0bd2 00BF     	    _FUNC usr
 3481 0bd4 7047     	    _RET  
 3482              	
 3483              	/*************************************
 3484              	  BASIC: WAIT addr,expr1[,expr2] 
 3485              	  wait until *addr&expr1 is not null 
 3486              	  or until (*addr&expr1)^expr2 is null 
 3487              	***************************************/
 3488 0bd6 00BF     	    _FUNC wait
 3489 0bd8 00B5FFF7 	    _CALL arg_list 
 3489      FEFF5DF8 
 3489      04EB
 3490 0be2 0228     	    cmp r0,#2
 3491 0be4 03D0     	    beq 2f 
 3492 0be6 0328     	    cmp r0,#3
 3493 0be8 07D0     	    beq 4f
 3494 0bea FFF7FEBF 	    b syntax_error 
 3495 0bee BCE80300 	2:  ldmia DP!,{r0,r1}
 3496 0bf2 0A88     	3:  ldrh r2,[r1]
 3497 0bf4 0240     	    ands r2,r0 
 3498 0bf6 FCD0     	    beq 3b 
 3499 0bf8 06E0     	    b 9f 
 3500 0bfa BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 3501 0bfe 1388     	5:  ldrh r3,[r2]
 3502 0c00 83EA0003 	    eor r3,r0
 3503 0c04 0B40     	    ands r3,r1 
 3504 0c06 FAD0     	    beq 5b 
 3505 0c08 7047     	9:  _RET 
 3506              	
 3507              	/*********************************************
 3508              	  BASIC: WORDS 
ARM GAS  tinyBasic.s 			page 90


 3509              	  print list of BASIC WORDS in dictionary 
 3510              	  use:
 3511              	    r0,r1,T1,T2  
 3512              	********************************************/
 3513 0c0a 00BF     	    _FUNC words
 3514 0c0c 206C10F0 	    _CLO 
 3514      010F03D0 
 3514      4FF00700 
 3514      FFF7FEBF 
 3515 0c1c DFF88880 	    ldr T1,=kword_dict
 3516 0c20 89EA0909 	    eor T2,T2 
 3517              	1:  
 3518 0c24 4046     	    mov r0,T1
 3519 0c26 00B5FFF7 	    _CALL strlen
 3519      FEFF5DF8 
 3519      04EB
 3520 0c30 F0B1     	    cbz r0,9f 
 3521 0c32 8144     	    add T2,r0 
 3522 0c34 B9F1500F 	    cmp T2,#80 
 3523 0c38 08D4     	    bmi 2f
 3524 0c3a 89EA0909 	    eor T2,T2  
 3525 0c3e 4FF00D00 	    mov r0,#CR 
 3526 0c42 00B5FFF7 	    _CALL uart_putc 
 3526      FEFF5DF8 
 3526      04EB
 3527 0c4c 4046     	2:  mov r0,T1 
 3528 0c4e 00B5FFF7 	    _CALL uart_puts 
 3528      FEFF5DF8 
 3528      04EB
 3529 0c58 4FF02000 	    mov r0,#SPACE
 3530 0c5c 09F10109 	    add T2,#1  
 3531 0c60 00B5FFF7 	    _CALL uart_putc 
 3531      FEFF5DF8 
 3531      04EB
 3532 0c6a 58F80C8C 	    ldr T1,[T1,#-12]
 3533 0c6e D9E7     	    b 1b 
 3534 0c70 7047     	9:  _RET 
 3535              	
 3536 0c72 00BF     	    _FUNC write
 3537 0c74 7047     	    _RET 
 3538              	
 3539              	/**************************************
 3540              	  BASIC: XOR(expr1,expr2)
 3541              	  binary exclusive or between 2 expressions
 3542              	**************************************/
 3543 0c76 00BF     	    _FUNC bit_xor
 3544 0c78 00B5FFF7 	    _CALL func_args
 3544      FEFF5DF8 
 3544      04EB
 3545 0c82 0228     	    cmp r0,#2
 3546 0c84 7FF4FEAF 	    bne syntax_error
 3547 0c88 5CF8040B 	    _POP r0
 3548 0c8c 5CF8041B 	    _POP r1 
 3549 0c90 81EA0001 	    eor r1,r0 
 3550 0c94 4FF00E00 	    mov r0,#TK_INTGR
 3551 0c98 7047     	    _RET 
 3552              	
ARM GAS  tinyBasic.s 			page 91


 3553 0c9a 00BF     	    _FUNC transmit
 3554 0c9c 7047     	    _RET 
 3555              	
 3556 0c9e 00BF     	    _FUNC receive
 3557 0ca0 7047     	    _RET  
 3558              	
 3559 0ca2 0000     	  .section .rodata.user
 3560              	  .p2align 10 
 3561              	user:
 3562 0000 55534552 	  .ascii "USER"
 3563              	
 3564              	/*************************************************
 3565              	   extra FLASH memory not used by Tiny BASIC
 3566              	   is used to save BASIC programs.
 3567              	************************************************/
 3568 0004 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3568      00000000 
 3568      00000000 
 3568      00000000 
 3568      00000000 
 3569              	  .section .rodata.fs
 3570              	FILE_SYSTEM: // file system start here
 3571 0000 4653     	  .ascii "FS" 
ARM GAS  tinyBasic.s 			page 92


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 93


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:145    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:146    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:147    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:148    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:151    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:152    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:153    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:154    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:155    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:156    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:157    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:158    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:161    *ABS*:0000000040007004 PWR_CSR_ADR
ARM GAS  tinyBasic.s 			page 94


       stm32f103.inc:162    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:163    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:164    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:165    *ABS*:0000000000000100 PWR_CSR_EWUP
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
ARM GAS  tinyBasic.s 			page 95


           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
ARM GAS  tinyBasic.s 			page 96


      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:106    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:112    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:114    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:120    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:137    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:138    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:139    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:140    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:141    *ABS*:0000000000000010 DATA
      tbi_macros.inc:142    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:143    *ABS*:0000000000000018 BASE
      tbi_macros.inc:144    *ABS*:000000000000001c TICKS
      tbi_macros.inc:145    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:146    *ABS*:0000000000000024 SEED
      tbi_macros.inc:147    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:148    *ABS*:000000000000002c FFREE
      tbi_macros.inc:149    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:150    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:151    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:152    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:153    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:154    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:155    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:156    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:157    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:158    *ABS*:0000000000000060 VARS
      tbi_macros.inc:159    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:160    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:161    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:164    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:165    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:166    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:167    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:168    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:169    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:170    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:172    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:174    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:175    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
ARM GAS  tinyBasic.s 			page 97


       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATA_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATALN_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DEC_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DIR_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DO_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FOR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FORGET_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 GOSUB_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOTO_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 HEX_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 IF_IDX
       cmd_index.inc:51     *ABS*:000000000000001a INP_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INPUT_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INVERT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d KEY_IDX
       cmd_index.inc:55     *ABS*:000000000000001e LET_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LIST_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LOAD_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOG2_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e POKE8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE16_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PRT_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 QKEY_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 READ_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 REM_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 REST_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 RET_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 RND_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 RSHIFT_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RUN_IDX
       cmd_index.inc:83     *ABS*:000000000000003a SAVE_IDX
       cmd_index.inc:84     *ABS*:000000000000003b SHOW_IDX
       cmd_index.inc:85     *ABS*:000000000000003c SIZE_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SLEEP_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SPIRD_IDX
ARM GAS  tinyBasic.s 			page 98


       cmd_index.inc:88     *ABS*:000000000000003f SPIEN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPISEL_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SPIWR_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STEP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STOP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 THEN_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 TICKS_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TIMER_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TMROUT_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TO_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TONE_IDX
       cmd_index.inc:99     *ABS*:000000000000004a UBOUND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UFLASH_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UNTIL_IDX
       cmd_index.inc:102    *ABS*:000000000000004d USR_IDX
       cmd_index.inc:103    *ABS*:000000000000004e WAIT_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WORDS_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 XOR_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XTRMT_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1522   .text:0000000000000c2c pad
         tinyBasic.s:615    .text:000000000000045c parse_int
         tinyBasic.s:1175   .text:00000000000008bc tb_error
         tinyBasic.s:452    .text:00000000000002c4 comp_token
         tinyBasic.s:526    .text:00000000000003b0 store_r0
         tinyBasic.s:709    .text:00000000000004fc skip
         tinyBasic.s:728    .text:0000000000000514 upper
         tinyBasic.s:560    .text:00000000000003f0 is_special
         tinyBasic.s:582    .text:0000000000000434 token_ofs
         tinyBasic.s:467    .text:0000000000000304 tok_idx0
         tinyBasic.s:529    .text:00000000000003b6 try_number
         tinyBasic.s:471    .text:0000000000000306 single
         tinyBasic.s:577    .text:0000000000000424 tok_single
         tinyBasic.s:475    .text:000000000000030e lt
         tinyBasic.s:481    .text:000000000000031c gt
         tinyBasic.s:494    .text:0000000000000340 bkslash
         tinyBasic.s:543    .text:00000000000003ea token_exit
         tinyBasic.s:501    .text:0000000000000356 prt_cmd
ARM GAS  tinyBasic.s 			page 99


         tinyBasic.s:507    .text:0000000000000368 quote
         tinyBasic.s:648    .text:0000000000000494 parse_quote
         tinyBasic.s:512    .text:000000000000037c tick
         tinyBasic.s:919    .text:0000000000000614 parse_keyword
         tinyBasic.s:574    .text:0000000000000410 char_list
         tinyBasic.s:575    .text:0000000000000410 $d
         tinyBasic.s:583    .text:0000000000000434 $d
         tinyBasic.s:599    .text:000000000000045a $t
         tinyBasic.s:878    .text:00000000000005c8 atoi
         tinyBasic.s:679    .text:00000000000004c8 get_escaped_char
         tinyBasic.s:696    .text:00000000000004f2 escaped
         tinyBasic.s:696    .text:00000000000004f2 $d
         tinyBasic.s:709    .text:00000000000004fa $t
         tinyBasic.s:746    .text:0000000000000524 is_digit
         tinyBasic.s:770    .text:0000000000000540 is_hex
         tinyBasic.s:795    .text:0000000000000564 is_bit
         tinyBasic.s:816    .text:0000000000000580 is_alpha
         tinyBasic.s:837    .text:0000000000000598 is_num
         tinyBasic.s:858    .text:00000000000005b0 is_alnum
         tinyBasic.s:1160   .text:00000000000008b4 syntax_error
         tinyBasic.s:2199   .rodata.dictionary:0000000000000638 kword_dict
         tinyBasic.s:1339   .text:0000000000000a74 search_dict
         tinyBasic.s:970    .text:000000000000069c cmd_name
         tinyBasic.s:996    .text:00000000000006c0 decompile_line
         tinyBasic.s:1013   .text:0000000000000706 decomp_loop
         tinyBasic.s:1615   .text:0000000000000cd0 next_token
         tinyBasic.s:1117   .text:0000000000000863 single_char
         tinyBasic.s:1113   .text:000000000000085a ge_str
         tinyBasic.s:1114   .text:000000000000085d le_str
         tinyBasic.s:1115   .text:0000000000000860 ne_str
         tinyBasic.s:1113   .text:000000000000085a $d
         tinyBasic.s:1137   .text:000000000000089c modulo
         tinyBasic.s:1137   .text:000000000000089a $t
         tinyBasic.s:1217   .text:0000000000000974 compile_error
         tinyBasic.s:1179   .text:00000000000008c4 rt_error
         tinyBasic.s:1234   .text:00000000000009ce rt_error_msg
         tinyBasic.s:1239   .text:00000000000009fa err_msg
         tinyBasic.s:1235   .text:00000000000009de lineno_msg
         tinyBasic.s:1236   .text:00000000000009e5 line_adr_msg
         tinyBasic.s:1237   .text:00000000000009f0 token_at_msg
         tinyBasic.s:2579   .text.basic:00000000000002d6 dump01
         tinyBasic.s:1535   .text:0000000000000c3c warm_start
         tinyBasic.s:1234   .text:00000000000009ce $d
         tinyBasic.s:1247   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1248   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1249   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1250   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1251   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1252   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1253   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1254   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1255   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1256   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1257   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1258   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1259   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1260   .rodata.tb_error:000000000000010e err_no_fspace
ARM GAS  tinyBasic.s 			page 100


         tinyBasic.s:1261   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1262   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1264   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1265   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1266   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1276   .text:0000000000000a3e $t
         tinyBasic.s:1276   .text:0000000000000a40 skip_line
         tinyBasic.s:1293   .text:0000000000000a48 BTGL
         tinyBasic.s:1311   .text:0000000000000a4c kword_cmp
         tinyBasic.s:1377   .text:0000000000000ab2 cold_start
         tinyBasic.s:1398   .text:0000000000000b04 src_addr
         tinyBasic.s:1400   .text:0000000000000b08 dest_addr
         tinyBasic.s:1521   .text:0000000000000c28 tib
         tinyBasic.s:1402   .text:0000000000000b0c sysvar_size
         tinyBasic.s:1413   .text:0000000000000b10 prt_version
         tinyBasic.s:1470   .text:0000000000000bb8 clear_basic
         tinyBasic.s:1399   .text:0000000000000b04 $d
         tinyBasic.s:2078   .rodata:0000000000000000 uzero
         tinyBasic.s:2102   .rodata:00000000000000cc ulast
         tinyBasic.s:1413   .text:0000000000000b10 $t
         tinyBasic.s:1437   .text:0000000000000b78 version_msg
         tinyBasic.s:1439   .text:0000000000000b98 version
         tinyBasic.s:1438   .text:0000000000000b78 $d
         tinyBasic.s:1454   .text:0000000000000b9c clear_vars
         tinyBasic.s:1504   .text:0000000000000bfc warm_init
         tinyBasic.s:1520   .text:0000000000000c24 dstack
         tinyBasic.s:1519   .text:0000000000000c20 mstack
         tinyBasic.s:1519   .text:0000000000000c20 $d
         tinyBasic.s:1523   .text:0000000000000c30 array
         tinyBasic.s:1524   .text:0000000000000c34 ready
         tinyBasic.s:1555   .text:0000000000000c54 cmd_line
         tinyBasic.s:1566   .text:0000000000000c84 interpreter
         tinyBasic.s:1599   .text:0000000000000cc4 execute
         tinyBasic.s:2894   .text.basic:00000000000005ea let_var
         tinyBasic.s:2899   .text.basic:00000000000005f6 let_array
         tinyBasic.s:2207   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1621   .text:0000000000000cde new_line
         tinyBasic.s:1625   .text:0000000000000ce8 end_of_line
         tinyBasic.s:1672   .text:0000000000000d60 tok_jmp
         tinyBasic.s:1673   .text:0000000000000d60 $d
         tinyBasic.s:1687   .text:0000000000000da0 $t
         tinyBasic.s:1702   .text:0000000000000da0 expect
         tinyBasic.s:1721   .text:0000000000000dbc func_args
         tinyBasic.s:1741   .text:0000000000000de8 arg_list
         tinyBasic.s:1899   .text:0000000000000f88 expression
         tinyBasic.s:1775   .text:0000000000000e28 factor
         tinyBasic.s:2007   .text:0000000000001074 get_array_element
         tinyBasic.s:2045   .text:000000000000109c get_var
         tinyBasic.s:1848   .text:0000000000000f0c term
         tinyBasic.s:1941   .text:0000000000000ff0 relation
         tinyBasic.s:1988   .text:000000000000106a relop_jmp
         tinyBasic.s:1960   .text:000000000000103a rel_idx0
         tinyBasic.s:1961   .text:000000000000103a rel_eq
         tinyBasic.s:1978   .text:0000000000001050 rel_false
         tinyBasic.s:1964   .text:000000000000103e rel_lt
         tinyBasic.s:1967   .text:0000000000001042 rel_le
         tinyBasic.s:1970   .text:0000000000001046 rel_gt
ARM GAS  tinyBasic.s 			page 101


         tinyBasic.s:1973   .text:000000000000104a rel_ge
         tinyBasic.s:1976   .text:000000000000104e rel_diff
         tinyBasic.s:1989   .text:000000000000106a $d
         tinyBasic.s:2027   .text:0000000000001088 set_array_element
         tinyBasic.s:2063   .text:00000000000010ac set_var
         tinyBasic.s:3570   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2099   .rodata:0000000000000050 $d
         tinyBasic.s:2109   *ABS*:0000000000000000 link
         tinyBasic.s:2110   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2200   .rodata.dictionary:0000000000000638 LINK
         tinyBasic.s:2111   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2195   .rodata.dictionary:000000000000062c first_link
         tinyBasic.s:2241   .text.basic:0000000000000000 abs
         tinyBasic.s:2253   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2256   .text.basic:000000000000002c analog_read
         tinyBasic.s:2263   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2278   .text.basic:0000000000000054 ascii
         tinyBasic.s:2295   .text.basic:0000000000000098 autorun
         tinyBasic.s:2298   .text.basic:000000000000009c awu
         tinyBasic.s:2306   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2328   .text.basic:00000000000000c4 bit_reset
         tinyBasic.s:2353   .text.basic:00000000000000f0 bit_set
         tinyBasic.s:2393   .text.basic:0000000000000140 bit_test
         tinyBasic.s:2377   .text.basic:0000000000000118 bit_toggle
         tinyBasic.s:2416   .text.basic:0000000000000180 char
         tinyBasic.s:2434   .text.basic:00000000000001a0 data_line
         tinyBasic.s:2539   .text.basic:0000000000000298 dec_base
         tinyBasic.s:2544   .text.basic:00000000000002a0 directory
         tinyBasic.s:2551   .text.basic:00000000000002a4 do_loop
         tinyBasic.s:2567   .text.basic:00000000000002ac dump
         tinyBasic.s:2619   .text.basic:0000000000000360 cmd_end
         tinyBasic.s:2630   .text.basic:000000000000036c for
         tinyBasic.s:2623   .text.basic:0000000000000368 forget
         tinyBasic.s:2710   .text.basic:0000000000000420 gosub
         tinyBasic.s:2742   .text.basic:0000000000000464 goto
         tinyBasic.s:2760   .text.basic:0000000000000494 hex_base
         tinyBasic.s:2772   .text.basic:00000000000004a0 if
         tinyBasic.s:3044   .text.basic:00000000000007b0 inp
         tinyBasic.s:2791   .text.basic:00000000000004b8 input_var
         tinyBasic.s:2852   .text.basic:0000000000000598 invert
         tinyBasic.s:2871   .text.basic:00000000000005c0 key
         tinyBasic.s:2887   .text.basic:00000000000005d4 let
         tinyBasic.s:2930   .text.basic:0000000000000660 list
         tinyBasic.s:2973   .text.basic:000000000000070c load
         tinyBasic.s:2980   .text.basic:0000000000000710 log2
         tinyBasic.s:2995   .text.basic:0000000000000734 lshift
         tinyBasic.s:3009   .text.basic:0000000000000754 new
         tinyBasic.s:2677   .text.basic:00000000000003d8 next
         tinyBasic.s:3018   .text.basic:0000000000000774 func_not
         tinyBasic.s:3030   .text.basic:000000000000078c bit_or
         tinyBasic.s:3068   .text.basic:0000000000000808 out
         tinyBasic.s:3093   .text.basic:000000000000086c pad_ref
         tinyBasic.s:3104   .text.basic:0000000000000878 pause
         tinyBasic.s:3115   .text.basic:0000000000000894 pin_mode
         tinyBasic.s:3122   .text.basic:0000000000000898 peek8
         tinyBasic.s:3135   .text.basic:00000000000008b4 peek16
         tinyBasic.s:3148   .text.basic:00000000000008d0 peek32
ARM GAS  tinyBasic.s 			page 102


         tinyBasic.s:3162   .text.basic:00000000000008ec poke8
         tinyBasic.s:3174   .text.basic:0000000000000904 poke16
         tinyBasic.s:3186   .text.basic:000000000000091c poke32
         tinyBasic.s:3200   .text.basic:0000000000000934 print
         tinyBasic.s:3258   .text.basic:0000000000000a08 qkey
         tinyBasic.s:2464   .text.basic:00000000000001f4 read
         tinyBasic.s:2506   .text.basic:0000000000000254 restore
         tinyBasic.s:2731   .text.basic:000000000000045c return
         tinyBasic.s:3270   .text.basic:0000000000000a24 random
         tinyBasic.s:3293   .text.basic:0000000000000a68 rshift
         tinyBasic.s:3306   .text.basic:0000000000000a88 run
         tinyBasic.s:3336   .text.basic:0000000000000adc save
         tinyBasic.s:3339   .text.basic:0000000000000ae0 show
         tinyBasic.s:3346   .text.basic:0000000000000ae4 size
         tinyBasic.s:3359   .text.basic:0000000000000af4 sleep
         tinyBasic.s:3369   .text.basic:0000000000000b14 spi_read
         tinyBasic.s:3372   .text.basic:0000000000000b18 spi_enable
         tinyBasic.s:3375   .text.basic:0000000000000b1c spi_select
         tinyBasic.s:3378   .text.basic:0000000000000b20 spi_write
         tinyBasic.s:2662   .text.basic:00000000000003bc step
         tinyBasic.s:3387   .text.basic:0000000000000b24 stop
         tinyBasic.s:3409   .text.basic:0000000000000b68 get_ticks
         tinyBasic.s:2783   .text.basic:00000000000004b4 then
         tinyBasic.s:3418   .text.basic:0000000000000b70 set_timer
         tinyBasic.s:3430   .text.basic:0000000000000b84 timeout
         tinyBasic.s:2648   .text.basic:00000000000003a0 to
         tinyBasic.s:3438   .text.basic:0000000000000b98 tone
         tinyBasic.s:3448   .text.basic:0000000000000b9c ubound
         tinyBasic.s:3460   .text.basic:0000000000000bb0 uflash
         tinyBasic.s:3471   .text.basic:0000000000000bb8 until
         tinyBasic.s:3480   .text.basic:0000000000000bd4 usr
         tinyBasic.s:3488   .text.basic:0000000000000bd8 wait
         tinyBasic.s:3513   .text.basic:0000000000000c0c words
         tinyBasic.s:3536   .text.basic:0000000000000c74 write
         tinyBasic.s:3543   .text.basic:0000000000000c78 bit_xor
         tinyBasic.s:3553   .text.basic:0000000000000c9c transmit
         tinyBasic.s:3556   .text.basic:0000000000000ca0 receive
         tinyBasic.s:2241   .text.basic:0000000000000000 $t
         tinyBasic.s:2483   .text.basic:000000000000022c seek_next
         tinyBasic.s:2528   .text.basic:000000000000028a no_data_line
         tinyBasic.s:2524   .text.basic:0000000000000284 try_next_line
         tinyBasic.s:2591   .text.basic:00000000000002f8 print_dump_header
         tinyBasic.s:2765   .text.basic:000000000000049c const_idr
         tinyBasic.s:2845   .text.basic:0000000000000594 str_buffer
         tinyBasic.s:2844   .text.basic:0000000000000590 input_buffer
         tinyBasic.s:2844   .text.basic:0000000000000590 $d
         tinyBasic.s:2852   .text.basic:0000000000000598 $t
         tinyBasic.s:2861   .text.basic:00000000000005b8 enable_iwdg
         tinyBasic.s:2864   .text.basic:00000000000005bc refresh_iwdg
         tinyBasic.s:2971   .text.basic:0000000000000706 out_buff
         tinyBasic.s:2971   .text.basic:0000000000000706 $d
         tinyBasic.s:2973   .text.basic:000000000000070a $t
         tinyBasic.s:3097   .text.basic:0000000000000874 pad_adr
         tinyBasic.s:3097   .text.basic:0000000000000874 $d
         tinyBasic.s:3104   .text.basic:0000000000000878 $t
         tinyBasic.s:3247   .text.basic:00000000000009f2 print_exit
         tinyBasic.s:3561   .rodata.user:0000000000000000 user
ARM GAS  tinyBasic.s 			page 103


         tinyBasic.s:3560   .rodata.user:0000000000000000 $d
         tinyBasic.s:3559   .text.basic:0000000000000ca2 $d
         tinyBasic.s:3571   .text.basic:0000000000000ca4 $d
         tinyBasic.s:3571   .text:00000000000010bc $d
         tinyBasic.s:581    .text:0000000000000431 $d
         tinyBasic.s:581    .text:0000000000000432 $t
         tinyBasic.s:1441   .text:0000000000000b99 $d
         tinyBasic.s:1441   .text:0000000000000b9a $t
         tinyBasic.s:1535   .text:0000000000000c3b $d
         tinyBasic.s:1535   .text:0000000000000c3c $t
         tinyBasic.s:2007   .text:0000000000001071 $d
         tinyBasic.s:2007   .text:0000000000001072 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_getc
uart_qkey
