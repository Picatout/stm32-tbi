ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	
  19              	.syntax unified
  20              	  .cpu cortex-m3
  21              	  .fpu softvfp
  22              	  .thumb
  23              	
  24              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
ARM GAS  tinyBasic.s 			page 2


  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
ARM GAS  tinyBasic.s 			page 3


  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  25              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  tinyBasic.s 			page 4


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
ARM GAS  tinyBasic.s 			page 5


  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  26              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
ARM GAS  tinyBasic.s 			page 6


  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  74              	  .equ TK_GE,0x33      // relation operator '>,'
  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<,'
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
  85              	
  86              	//--------------------------------------
  87              	//   error codes 
ARM GAS  tinyBasic.s 			page 7


  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DSP  .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
ARM GAS  tinyBasic.s 			page 8


 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	
 160              	/* flags used by BASIC interpreter */ 
 161              		.equ FRUN,0 // programm running
 162              		.equ FTRAP,1 // inside trap handler 
 163              		.equ FLOOP,2 // FOR loop in preparation 
 164              		.equ FSLEEP,3 // in halt mode SLEEP 
 165              		.equ FBREAK,4 // break point flag 
 166              		.equ FCOMP,5  // compiling flags 
 167              		.equ FAUTORUN,6// auto start program running 
 168              	
 169              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 170              	  
 171              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 172              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 173              	
 174              	/***********************************************
 175              	*       MACROS
 176              	***********************************************/
 177              		.macro _CALL fn /* low level routine call */ 
 178              	 	PUSH {LR}
 179              		BL \fn  
 180              	  POP {LR}
 181              		.endm
 182              		
 183              		.macro	_RET /* return from subroutine */
 184              		BX	LR
 185              		.endm
 186              	
 187              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 188              		MOV \REG, #\LITERAL&0xffff
 189              		MOVT \REG, #\LITERAL>>16
 190              		.endm
 191              	
 192              	// local function header 
 193              	  .macro _FUNC label 
 194              	  .p2align 2 
 195              	  .type \label, %function  
 196              	\label:
 197              	  .endm 
 198              	
 199              	// global function header 
 200              	  .macro _GBL_FUNC label 
 201              	  .global \label 
ARM GAS  tinyBasic.s 			page 9


 202              	  _FUNC \label 
 203              	  .endm 
 204              	
 205              	
 206              	/********************************
 207              	    dictionary structure
 208              	------------------------------
 209              	 format:
 210              	   link:    
 211              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 212              	   cmd_name: 31 characters max 
 213              	   cmd_index: 2 bytes 
 214              	**********************************/
 215              		.macro _dict_entry tok_type,name,cmd_idx 
 216              	  .word LINK 
 217              	  .word \cmd_idx 
 218              		.word \tok_type  	
 219              		.equ LINK,.
 220              		.asciz "\name"
 221              		.p2align 2 
 222              		.endm 
 223              	
 224              	  // pop parameter in register 
 225              	  .macro _POP  reg 
 226              	  ldmia  DSP!,{\reg}
 227              	  .endm 
 228              	
 229              	  // push register on parameter stack 
 230              	  .macro _PUSH reg 
 231              	  stmdb DSP!,{\reg}
 232              	  .endm 
  27              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
ARM GAS  tinyBasic.s 			page 10


  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
ARM GAS  tinyBasic.s 			page 11


  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  28              	
  29              	  .section  .text , "ax", %progbits 
  30              	
  31              	
  32              	/********************************
  33              	    HELPER FUNCTIONS 
  34              	********************************/
  35              	
  36              	/**********************************
  37              	   strlen 
  38              	   return length of asciz 
  39              	   input:
  40              	      r0    *asciz 
ARM GAS  tinyBasic.s 			page 12


  41              	   output:
  42              	      r0   length 
  43              	   use:
  44              	      r1   string length 
  45              	      r2   char 
  46              	*********************************/
  47              	    _GBL_FUNC strlen 
  48 0000 06B4     	    push {r1,r2}
  49 0002 81EA0101 	    eor r1,r1  // strlen 
  50 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  51 000a 12B1     	    cbz r2,9f  
  52 000c 01F10101 	    add r1,#1 
  53 0010 F9E7     	    b 1b 
  54 0012 0846     	9:  mov r0,r1 
  55 0014 06BC     	    pop {r1,r2}
  56 0016 7047     	    _RET     
  57              	
  58              	
  59              	/******************************
  60              	   cmove 
  61              	   move n characters 
  62              	   input:
  63              	    r0      src 
  64              	    r1      dest 
  65              	    r2      count 
  66              	  output:
  67              	    none:
  68              	  use: 
  69              	    T1    temp   
  70              	******************************/
  71              	    _GBL_FUNC cmove
  72 0018 4DF8048D 	    push {T1} 
  73 001c 1240     	    ands r2,r2
  74 001e 10D0     	    beq 9f 
  75 0020 8842     	    cmp r0,r1 
  76 0022 06D4     	    bmi move_from_end 
  77              	move_from_low: // move from low address toward high 
  78 0024 10F8018B 	    ldrb T1,[r0],#1
  79 0028 01F8018B 	    strb T1,[r1],#1
  80 002c 013A     	    subs r2,#1
  81 002e F9D1     	    bne move_from_low
  82 0030 07E0     	    b 9f 
  83              	move_from_end: // move from high address toward low 
  84 0032 1044     	    add r0,r0,r2 
  85 0034 1144     	    add r1,r1,r2     
  86 0036 10F8018D 	1:  ldrb T1,[r0,#-1]!
  87 003a 01F8018D 	    strb T1,[r1,#-1]!
  88 003e 013A     	    subs r2,#1
  89 0040 F9D1     	    bne 1b 
  90 0042 5DF8048B 	9:  pop {T1}
  91 0046 7047     	    _RET
  92              	
  93              	/*********************************
  94              	  strcpy 
  95              	  copy .asciz string 
  96              	  input:
  97              	    r0   *string
ARM GAS  tinyBasic.s 			page 13


  98              	    r1   *dest_buffer
  99              	  output:
 100              	    r0   *string
 101              	    r1   *dest_buffer 
 102              	  use:
 103              	    r2   char
 104              	**********************************/
 105              	    _GBL_FUNC strcpy 
 106 0048 07B4     	    push {r0,r1,r2}
 107 004a 10F8012B 	1:  ldrb r2,[r0],#1
 108 004e 12B1     	    cbz  r2, 9f 
 109 0050 01F8012B 	    strb r2,[r1],#1
 110 0054 F9E7     	    b 1b 
 111 0056 0A70     	9:  strb r2,[r1] 
 112 0058 07BC     	    pop {r0,r1,r2}
 113 005a 7047     	    _RET 
 114              	
 115              	/*********************************
 116              	  cpstr 
 117              	  compare 2  .asciz strings 
 118              	  input:
 119              	    r0  *str1 
 120              	    r1  *str2
 121              	  output:
 122              	    r0  <0 str1<str2 
 123              	        0  str1==str2 
 124              	        >0  str1>str2  
 125              	  use:
 126              	    r2  *str1
 127              	    r3 char 1 
 128              	    r4 char 2  
 129              	*********************************/
 130              	  _FUNC cpstr
 131 005c 1CB4     	    push {r2,r3,r4}
 132 005e 0246     	    mov r2, r0
 133              	1:
 134 0060 12F8013B 	    ldrb r3,[r2],#1  
 135 0064 11F8014B 	    ldrb r4,[r1],#1
 136 0068 13B1     	    cbz r3, 2f 
 137 006a 0CB1     	    cbz r4, 2f 
 138 006c 181B     	    subs r0,r3,r4 
 139 006e F7D0     	    beq 1b
 140 0070 A3EB0400 	2:  sub r0,r3,r4 
 141 0074 1CBC     	    pop {r2,r3,r4}
 142 0076 7047     	    _RET 
 143              	
 144              	/**********************************
 145              	      BASIC commands 
 146              	**********************************/
 147              	
 148              	/*********************************
 149              	    syntax_error 
 150              	    display error message and 
 151              	    abort program 
 152              	  input:
 153              	    none  
 154              	  output: 
ARM GAS  tinyBasic.s 			page 14


 155              	    none 
 156              	  use:
 157              	*********************************/
 158              	    _FUNC syntax_error 
 159 0078 4FF00200 	    mov r0,#ERR_SYNTAX
 160 007c 00E0     	    b tb_error 
 161              	
 162              	/*********************************
 163              	    tb_error 
 164              	    display BASIC error and 
 165              	    abort program. 
 166              	  input:
 167              	    r0    error code   
 168              	  output: 
 169              	    none 
 170              	  use:
 171              	    r1    temp 
 172              	*********************************/
 173 007e 00BF     	    _FUNC tb_error 
 174 0080 CB49     	    ldr r1,=err_msg 
 175 0082 4FEA8000 	    lsl r0,#2 
 176 0086 0844     	    add r0,r1 
 177 0088 0068     	    ldr r0,[r0]
 178 008a 00B5FFF7 	    _CALL uart_puts
 178      FEFF5DF8 
 178      04EB
 179 0094 5748     	    ldr r0,dstack_empty
 180 0096 8546     	    mov sp,r0 
 181 0098 80E1     	    b  warm_start  
 182 009a 7047     	    _RET 
 183              	err_msg:
 184 009c 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 184      00000000 
 184      0D000000 
 184      1B000000 
 184      34000000 
 185 00b4 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 185      6F000000 
 185      89000000 
 185      9A000000 
 185      AB000000 
 186 00c8 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 186      EA000000 
 186      FA000000 
 186      0E010000 
 186      21010000 
 187              	
 188              	    .section .rodata.tb_error 
 189              	
 190 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 190      72792066 
 190      756C6C0A 
 190      00
 191 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 191      61782065 
 191      72726F72 
 191      0A00
ARM GAS  tinyBasic.s 			page 15


 192 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 192      206F7065 
 192      72617469 
 192      6F6E206F 
 192      76657266 
 193 0034 64697669 	err_div0: .asciz "division by 0\n" 
 193      73696F6E 
 193      20627920 
 193      300A00
 194 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 194      6C696420 
 194      6C696E65 
 194      206E756D 
 194      6265722E 
 195 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 195      74696D65 
 195      206F6E6C 
 195      79207573 
 195      6167652E 
 196 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 196      616E6420 
 196      6C696E65 
 196      206F6E6C 
 196      79207573 
 197 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 197      69636174 
 197      65206E61 
 197      6D652E0A 
 197      00
 198 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 198      206E6F74 
 198      20666F75 
 198      6E642E0A 
 198      00
 199 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 199      76616C75 
 199      652E0A00 
 200 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 200      20696E20 
 200      65787465 
 200      6E646564 
 200      206D656D 
 201 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 201      61746120 
 201      666F756E 
 201      642E0A00 
 202 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 202      726F6772 
 202      616D2069 
 202      6E205241 
 202      4D210A00 
 203 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 203      20737973 
 203      74656D20 
 203      66756C6C 
 203      2E0A00
 204 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
ARM GAS  tinyBasic.s 			page 16


 204      65722066 
 204      756C6C0A 
 204      00
 205              	
 206 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 206      2074696D 
 206      65206572 
 206      726F722C 
 206      2000
 207 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 207      70696C65 
 207      20657272 
 207      6F722C20 
 207      00
 208 0151 6C617374 	tk_id: .asciz "last token id: "
 208      20746F6B 
 208      656E2069 
 208      643A2000 
 209              	
 210              	
 211              	    .section  .text , "ax", %progbits 
 212              	
 213              	/*********************************
 214              	     arg_list 
 215              	     extract command arguments
 216              	     and push them on parameter stack 
 217              	    input:
 218              	       none 
 219              	    output:
 220              	       r0  arguments count found
 221              	       args on dstack in order left to right 
 222              	    use:
 223              	       T1   arguments counter  
 224              	********************************/
 225              	     _FUNC arg_list 
 226 00dc 4DF8048D 	     push {T1}
 227              	
 228 00e0 5DF8048B 	     pop {T1}      
 229 00e4 7047     	     _RET 
 230              	
 231              	/************************************
 232              	    func_args 
 233              	    get and stack function parameters
 234              	  input:
 235              	    none 
 236              	  output:
 237              	    r0    parameter count 
 238              	  use:
 239              	
 240              	************************************/
 241 00e6 00BF     	    _FUNC func_args 
 242              	
 243              	  
 244 00e8 7047     	    _RET 
 245              	
 246              	
 247              	
ARM GAS  tinyBasic.s 			page 17


 248              	
 249              	/*********************************
 250              	   BASIC: BTGL adr, mask   
 251              	   toggle bits [adr]=[adr]^mask  
 252              	   input:
 253              	     r0    adr 
 254              	     r1    mask 
 255              	    output;
 256              	      none 
 257              	    use:
 258              	      T1   temp
 259              	      T2   temp  
 260              	*******************************/     
 261 00ea 00BF     	    _FUNC BTGL 
 262              	
 263 00ec 7047     	    _RET 
 264              	
 265              	
 266              	
 267              	
 268              	//---------------------------------
 269              	// dictionary search 
 270              	// input:
 271              	//	 r0   target name
 272              	//   r1		dictionary first name field address  
 273              	// output:
 274              	//  r0 		token attribute 
 275              	//  r1		cmd_index if r0!=TK_NONE  
 276              	// use:
 277              	//  r2   length dictionary name 
 278              	//---------------------------------
 279 00ee 00BF     	  _FUNC search_dict
 280 00f0 04B4     	  push {r2}
 281 00f2 03B4     	  push {r0,r1}
 282              	1:
 283 00f4 11F8010B 	  ldrb r0,[r1],#1 
 284 00f8 0043     	  orrs r0,r0
 285 00fa 10D0     	  beq 9f // null byte  -> end of dictinary 
 286 00fc 0098     	  ldr r0,[sp]  
 287 00fe 00B5FFF7 	  _CALL cpstr 
 287      ACFF5DF8 
 287      04EB
 288 0108 04D0     	  beq 2f 
 289 010a 0199     	  ldr r1,[sp,#4]
 290 010c 51F80C1C 	  ldr r1,[r1,#-12]
 291 0110 0191     	  str r1,[sp,#4]
 292 0112 EFE7     	  b 1b   
 293              	2: // found
 294 0114 0199     	  ldr r1,[sp,#4]
 295 0116 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 296 011a 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 297 011e 02B0     	9: add sp,#8  // drop pushed r0,r1
 298 0120 04BC     	   pop {r2}
 299 0122 7047     	   _RET 
 300              	
 301              	/************************************
 302              	    print firmware version 
ARM GAS  tinyBasic.s 			page 18


 303              	    input: 
 304              	      none 
 305              	    output:
 306              	      none 
 307              	    use:
 308              	      r0 
 309              	***********************************/
 310              	    _FUNC prt_version 
 311 0124 DFF86400 	    ldr r0,version_msg 
 312 0128 00B5FFF7 	    _CALL uart_puts
 312      FEFF5DF8 
 312      04EB
 313 0132 9FF87800 	    ldrb r0,version 
 314 0136 4FEA1010 	    lsr r0,#4 
 315 013a 00F13000 	    add r0,#'0' 
 316 013e 3A28     	    cmp r0,#'9'+1 
 317 0140 01D4     	    bmi 1f 
 318 0142 00F10700 	    add r0,#7 
 319              	  1:
 320 0146 00B5FFF7 	    _CALL uart_putc 
 320      FEFF5DF8 
 320      04EB
 321 0150 4FF02E00 	    mov r0,#'. 
 322 0154 00B5FFF7 	    _CALL uart_putc 
 322      FEFF5DF8 
 322      04EB
 323 015e 9FF84C00 	    ldrb r0,version 
 324 0162 00F00F00 	    and r0,#15 
 325 0166 00F13000 	    add r0,'0' 
 326 016a 3A28     	    cmp r0,#'9'+1 
 327 016c 01D4     	    bmi 1f 
 328 016e 00F10700 	    add r0,#7
 329              	  1: 
 330 0172 00B5FFF7 	    _CALL uart_putc 
 330      FEFF5DF8 
 330      04EB
 331 017c 4FF00D00 	    mov r0,#CR 
 332 0180 00B5FFF7 	    _CALL uart_putc 
 332      FEFF5DF8 
 332      04EB
 333 018a 7047     	    _RET  
 334              	version_msg:
 335 018c 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 335      65207069 
 335      6C6C2074 
 335      696E7920 
 335      42415349 
 336              	version:
 337 01ac 10       	    .byte 0x10 
 338 01ad 0000BF   	    .p2align 2 
 339              	
 340              	
 341              	/*********************************
 342              	   cold_start 
 343              	   initialize BASIC interpreter 
 344              	   input:
 345              	     none 
ARM GAS  tinyBasic.s 			page 19


 346              	   output:
 347              	    none 
 348              	   use:
 349              	     r0,r1,r2,r3 
 350              	*********************************/
 351              	    _GBL_FUNC cold_start 
 352 01b0 0FB4     	    push {r0,r1,r2,r3}
 353              	// initialise parameters stack
 354 01b2 DFF840C0 	   ldr DSP,dstack_empty     
 355              	//copy system variables to ram 
 356 01b6 0B48     	    ldr r0,src_addr 
 357 01b8 0B49     	    ldr r1,dest_addr 
 358 01ba 0C46     	    mov UPP,r1 // system variables base address   
 359 01bc 4FF0D002 	    mov r2,#ulast-uzero
 360 01c0 00B5FFF7 	    _CALL cmove  
 360      FEFF5DF8 
 360      04EB
 361 01ca 00B5FFF7 	    _CALL prt_version 
 361      AAFF5DF8 
 361      04EB
 362 01d4 0FBC     	    pop {r0,r1,r2,r3}
 363 01d6 7047     	    _RET
 364 01d8 00B500F0 	    _CALL warm_init 
 364      29F85DF8 
 364      04EB
 365 01e2 37E0     	    b cmd_line   
 366              	src_addr:
 367 01e4 00000000 	  .word uzero
 368              	dest_addr:
 369 01e8 00000020 	  .word (RAM_ADR /*+ (isr_end - isr_vectors)*/)
 370              	test:
 371 01ec 00000000 	  .word isr_vectors, isr_end 
 371      00000000 
 372              	
 373              	dstack_empty:
 374 01f4 00000000 	   .word _dstack 
 375              	
 376              	/*****************************
 377              	    clear_vars 
 378              	    initialize variables to 0
 379              	  input:
 380              	    none 
 381              	  output:
 382              	    none 
 383              	  use:
 384              	    r0,r1,r2 
 385              	*****************************/
 386              	    _FUNC clear_vars 
 387 01f8 07B4     	    push {r0,r1,r2}
 388 01fa 80EA0000 	    eor r0,r0 
 389 01fe 04F16001 	    add r1,UPP,#VARS
 390 0202 4FF01A02 	    mov r2,#26
 391 0206 41F8040B 	1:  str r0,[r1],#4 
 392 020a 013A     	    subs r2,#1
 393 020c FBD1     	    bne 1b  
 394 020e 07BC     	    pop {r0,r1,r2}
 395 0210 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 20


 396              	
 397              	/*****************************
 398              	   clear_basic 
 399              	   reset BASIC text pointers 
 400              	   and clear variables 
 401              	*****************************/
 402 0212 00BF     	    _FUNC clear_basic
 403 0214 80EA0000 	  	eor r0,r0 
 404 0218 6060     	    str r0,[UPP,#COUNT]
 405 021a 2060     	    str r0,[UPP,#IN_SAVED]
 406 021c 04F1C800 	    add r0,UPP,#FREE_RAM
 407 0220 2063     	    str r0,[UPP,#TXTBGN]
 408 0222 6063     	    str r0,[UPP,#TXTEND]
 409 0224 00B5FFF7 	    _CALL clear_vars 
 409      E7FF5DF8 
 409      04EB
 410 022e 7047     	    _RET  
 411              	
 412              	/***********************************
 413              	   warm_init 
 414              	   initialize interpreter context 
 415              	  input:
 416              	    none
 417              	  output:
 418              	    none 
 419              	  use:
 420              	    r0 
 421              	***********************************/
 422              	warm_init:
 423 0230 4FF0000A 		mov IN,#0 // BASIC line index 
 424 0234 4FF0000B 	  mov BPTR,#0 // BASIC line address 
 425 0238 80EA0000 	  eor r0,r0 
 426 023c A060     	  str r0,[UPP,#BASICPTR]
 427 023e 2060     	  str r0,[UPP,#IN_SAVED]
 428 0240 6060     	  str r0,[UPP,#COUNT]  
 429 0242 2064     		str r0,[UPP,#FLAGS]
 430 0244 A063     	  str r0,[UPP,#LOOP_DEPTH] 
 431 0246 4FF00400 	  mov r0, #DEFAULT_TAB_WIDTH
 432 024a 6064     	  str r0,[UPP,#TAB_WIDTH]
 433 024c 4FF00A00 		mov r0,#10 // default base decimal 
 434 0250 A061     		str r0,[UPP,#BASE]
 435 0252 7047     	  _RET  
 436              	
 437              	
 438              	/**********************************
 439              	   cmd_line 
 440              	   shell command line 
 441              	   input:
 442              	      none 
 443              	   output:
 444              	      none 
 445              	   use:
 446              	
 447              	***********************************/
 448              	    _FUNC cmd_line 
 449 0254 4FF00D00 	    mov r0,#CR 
 450 0258 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 21


 450      FEFF5DF8 
 450      04EB
 451 0262 4D48     	1:  ldr r0,tib
 452 0264 00B5FFF7 	    _CALL readln 
 452      FEFF5DF8 
 452      04EB
 453 026e 0040     	    ands r0,r0 // empty line 
 454 0270 F7D0     	    beq 1b 
 455 0272 00B500F0 	    _CALL compile // tokenize BASIC text
 455      9AF85DF8 
 455      04EB
 456 027c 0040     	    ands r0,r0 
 457 027e F0D0     	    beq 1b  // tokens stored in text area 
 458              	// interpret tokenized line 
 459              	interpreter:
 460 0280 8AF0030A 	   eor IN,#3 
 461 0284 D4F808B0 	   ldr BPTR,[UPP,#BASICPTR]
 462 0288 6068     	   ldr r0,[UPP,#COUNT]
 463 028a 8245     	   cmp IN,r0  
 464 028c 16D4     	   bmi interp_loop
 465              	// end of line reached     
 466              	next_line:
 467 028e 206C     	  ldr r0,[UPP,#FLAGS]
 468 0290 10F0010F 	  tst r0,#(1<<FRUN)
 469 0294 DED0     	  beq cmd_line 
 470 0296 D4F800A0 	  ldr IN,[UPP,#IN_SAVED]
 471 029a D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 472 029e 0AEB0B00 	  add r0,IN,BPTR  
 473 02a2 616B     	  ldr r1,[UPP,#TXTEND]
 474 02a4 8842     	  cmp r0,r1 
 475 02a6 05D4     	  bmi 1f 
 476 02a8 00B500F0 	  _CALL warm_start 
 476      77F85DF8 
 476      04EB
 477 02b2 CFE7     	  b cmd_line
 478              	1:
 479 02b4 4FF0030A 	  mov IN,#3 
 480 02b8 C4F800A0 	  str IN,[UPP,#IN_SAVED] 
 481              	interp_loop:
 482 02bc 00B500F0 	  _CALL next_token 
 482      15F85DF8 
 482      04EB
 483 02c6 0028     	  cmp r0,#TK_NONE 
 484 02c8 E1D0     	  beq next_line 
 485 02ca 0B28     	  cmp r0,#TK_CMD 
 486 02cc 01D1     	  bne 2f
 487 02ce 0847     	  BX r1
 488 02d0 F4E7     	  b interp_loop 
 489              	2: 
 490 02d2 0528     	  cmp r0,#TK_VAR 
 491 02d4 02D1     	  bne 3f 
 492 02d6 00F039BD 	  b let_var 
 493 02da EFE7     	  b interp_loop
 494              	3: 
 495 02dc 0628     	  cmp r0,#TK_ARRAY 
 496 02de 02D1     	  bne 4f
 497 02e0 00F03EBD 	  b let_array 
ARM GAS  tinyBasic.s 			page 22


 498 02e4 EAE7     	  b interp_loop
 499              	4: 
 500 02e6 0128     	  cmp r0,#TK_COLON
 501 02e8 E8D0     	  beq interp_loop
 502 02ea C5E6     	  b syntax_error
 503              	
 504              	/*****************************
 505              	  next_token 
 506              	  extract next token from token list 
 507              	  input:
 508              	    none 
 509              	  output:
 510              	    r0    token attribute
 511              	    r1    token value if there is one 
 512              	  use:
 513              	    none 
 514              	****************************/
 515              	  _FUNC next_token 
 516 02ec 6068     	  ldr r0,[UPP,#COUNT]
 517 02ee 8245     	  cmp IN,r0 
 518 02f0 02D4     	  bmi 0f 
 519 02f2 80EA0000 	  eor r0,r0 
 520 02f6 28E0     	  b 9f  
 521              	0: 
 522 02f8 C4F800A0 	  str IN,[UPP,#IN_SAVED]
 523 02fc 1BF80A00 	  ldrb r0,[BPTR,IN] // token attribute 
 524 0300 00F03F00 	  and r0,#0x3f // limit mask 
 525 0304 08F10108 	  add T1,#1
 526 0308 2A49     	  ldr r1,=tbb_ofs 
 527 030a D1E800F0 	  tbb [r1,r0]
 528              	1: // pc reference point 
 529              	2: // .byte param
 530 030e 19F80810 	  ldrb r1,[T2,T1]
 531 0312 08F10108 	  add T1,#1 
 532 0316 18E0     	  b 9f 
 533              	3: // .hword param 
 534 0318 39F80810 	  ldrh r1,[T2,T1]
 535 031c 08F10208 	  add T1,#2 
 536 0320 13E0     	  b 9f 
 537              	4: // .word param  
 538 0322 59F80810 	  ldr r1,[T2,T1]
 539 0326 08F10408 	  add T1,#4
 540 032a 0EE0     	  b 9f 
 541              	5: // .asciz param 
 542 032c 09EB0801 	  add r1,T2,T1
 543 0330 0846     	  mov r0,r1  
 544 0332 00B5FFF7 	  _CALL strlen 
 544      FEFF5DF8 
 544      04EB
 545 033c 8044     	  add T1,r0
 546 033e 08F10108 	  add T1,#1
 547 0342 4FF00200 	  mov r0,#TK_QSTR
 548 0346 00E0     	  b 9f  
 549              	8: // syntax error 
 550 0348 96E6     	   b syntax_error 
 551              	9:
 552 034a C4F80080 	   str T1,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 23


 553 034e 7047     	  _RET
 554              	
 555              	  .p2align 2
 556              	tbb_ofs: // offsets table for tbb instruction 
 557 0350 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2
 558 0352 0F000005 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2
 559 0356 1E1E1E1E 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2
 560 035a 0A0A0A0A 	  .byte (4b-1b)/2,(4b-1b)/2,(4b-1b)/2,(4b-1b)/2,(4b-1b)/2
 560      0A
 561 035f 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2  
 562 0361 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 562      1D1D1D1D 
 563 0369 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 563      1D1D1D1D 
 564 0371 1E1E1E1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 564      1D1D1D1D 
 565 0379 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 565      1D1D1D1D 
 566 0381 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 566      1D1D1D1D 
 567 0389 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 567      1D1D1D1D 
 568 0391 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 569              	
 570 0395 0000BF   	  .p2align 2 
 571              	
 572 0398 00000000 	tib: .word _tib 
 573              	
 574              	
 575              	/**********************************
 576              	    warm_start 
 577              	    start BASIC interpreter without 
 578              	    reset variables and code space 
 579              	  input:
 580              	    none 
 581              	  output:
 582              	    none 
 583              	  use:
 584              	
 585              	**********************************/
 586              	    _FUNC warm_start 
 587              	// initialise parameters stack
 588 039c 5FF8ACC1 	   ldr DSP,dstack_empty     
 589              	
 590 03a0 FCE7     	    b warm_start 
 591              	
 592              	/***********************************
 593              	    get_array_element 
 594              	    return index of array element 
 595              	  input:
 596              	    none 
 597              	  output:
 598              	    r0   address of element 
 599              	  use:
 600              	
 601              	************************************/
 602 03a2 00BF     	    _FUNC get_array_element 
ARM GAS  tinyBasic.s 			page 24


 603              	
 604 03a4 7047     	    _RET 
 605              	
 606 03a6 00BF     	    _FUNC relation 
 607              	
 608 03a8 7047     	    _RET 
 609              	
 610              	/*********************************
 611              	    compile 
 612              	    tokenize source line 
 613              	  input:
 614              	    none 
 615              	  output:
 616              	    r0 
 617              	  use:
 618              	
 619              	***********************************/
 620 03aa 00BF     	    _FUNC compile
 621              	
 622 03ac 7047     	    _RET 
 623              	
 624 03ae 0000     	  .section .rodata 
 625              	
 626              	// system variables initial value 
 627              	uzero:
 628 0000 00000000 	  .word 0 // IN
 629 0004 00000000 	  .word 0 // IN_SAVED
 630 0008 00000000 	  .word 0 // COUNT
 631 000c 00000000 	  .word 0 // BASICPTR
 632 0010 00000000 	  .word 0 // DATAPTR
 633 0014 00000000 	  .word 0 // DATA
 634 0018 00000000 	  .word 0 // DATALEN
 635 001c 0A000000 	  .word 10 // BASE
 636 0020 00000000 	  .word 0 // TICKS
 637 0024 00000000 	  .word 0 // TIMER
 638 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 639 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 640 0030 00000000 	  .word 0 // FFREE
 641 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 642 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 643 003c 00000000 	  .word 0 //LOOP_DEPTH
 644 0040 00000000 	  .word 0 // ARRAY_SIZE
 645 0044 00000000 	  .word 0 // FLAGS
 646 0048 04000000 	  .word 4 // TAB_WIDTH
 647 004c 00000000 	  .word 0 // RX_HEAD
 648 0050 00000000 	  .word 0 // RX_TAIL
 649 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 649      00000000 
 649      00000000 
 649      00000000 
 650 0064 00000000 	  .space VARS_SIZE,0 // VARS
 650      00000000 
 650      00000000 
 650      00000000 
 650      00000000 
 651 00cc 00000000 	  .space 4, 0 // padding 
 652              	ulast:
ARM GAS  tinyBasic.s 			page 25


 653              	
 654              	  .section .rodata.dictionary 
 655              	
 656              	// keep alphabetic order for BASIC names from Z-A
 657              	// this sort order is for for WORDS cmd output. 	
 658              	
 659              		.equ link, 0
 660              	kword_end:
 661 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 661      00000000 
 661      00000000 
 661      00000000 
 662 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 662      64000000 
 662      0B000000 
 662      5854524D 
 662      54000000 
 663 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 663      65000000 
 663      0B000000 
 663      58524356 
 663      00000000 
 664 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 664      63000000 
 664      0C000000 
 664      584F5200 
 665 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 665      62000000 
 665      0B000000 
 665      57524954 
 665      45000000 
 666 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 666      61000000 
 666      0B000000 
 666      574F5244 
 666      53000000 
 667 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 667      60000000 
 667      0B000000 
 667      57414954 
 667      00000000 
 668 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 668      5F000000 
 668      0C000000 
 668      55535200 
 669 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 669      5E000000 
 669      0B000000 
 669      554E5449 
 669      4C000000 
 670 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 670      5D000000 
 670      0C000000 
 670      55464C41 
 670      53480000 
 671 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 671      5C000000 
ARM GAS  tinyBasic.s 			page 26


 671      0C000000 
 671      55424F55 
 671      4E440000 
 672 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 672      5B000000 
 672      0B000000 
 672      544F4E45 
 672      00000000 
 673 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 673      5A000000 
 673      0B000000 
 673      544F0000 
 674 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 674      58000000 
 674      0B000000 
 674      54494D45 
 674      52000000 
 675 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 675      59000000 
 675      0C000000 
 675      54494D45 
 675      4F555400 
 676 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 676      57000000 
 676      0C000000 
 676      5449434B 
 676      53000000 
 677 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 677      56000000 
 677      0B000000 
 677      53544F50 
 677      00000000 
 678 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 678      55000000 
 678      0B000000 
 678      53544550 
 678      00000000 
 679 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 679      54000000 
 679      0B000000 
 679      53504957 
 679      52000000 
 680 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 680      53000000 
 680      0B000000 
 680      53504953 
 680      454C0000 
 681 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 681      51000000 
 681      0C000000 
 681      53504952 
 681      44000000 
 682 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 682      52000000 
 682      0B000000 
 682      53504945 
 682      4E000000 
ARM GAS  tinyBasic.s 			page 27


 683 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 683      50000000 
 683      0B000000 
 683      534C4545 
 683      50000000 
 684 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 684      4F000000 
 684      0C000000 
 684      53495A45 
 684      00000000 
 685 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 685      4E000000 
 685      0B000000 
 685      53484F57 
 685      00000000 
 686 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 686      4D000000 
 686      0B000000 
 686      53415645 
 686      00000000 
 687 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 687      4C000000 
 687      0B000000 
 687      52554E00 
 688 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 688      4B000000 
 688      0C000000 
 688      52534849 
 688      46540000 
 689 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 689      4A000000 
 689      0C000000 
 689      524E4400 
 690 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 690      49000000 
 690      0B000000 
 690      52455455 
 690      524E0000 
 691 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 691      48000000 
 691      0B000000 
 691      52455354 
 691      4F524500 
 692 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 692      47000000 
 692      0B000000 
 692      52454D41 
 692      524B0000 
 693 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 693      46000000 
 693      0B000000 
 693      5245424F 
 693      4F540000 
 694 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 694      45000000 
 694      0C000000 
 694      52454144 
ARM GAS  tinyBasic.s 			page 28


 694      00000000 
 695 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 695      44000000 
 695      0C000000 
 695      514B4559 
 695      00000000 
 696 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 696      43000000 
 696      0C000000 
 696      50525449 
 696      00000000 
 697 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 697      42000000 
 697      0C000000 
 697      50525448 
 697      00000000 
 698 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 698      41000000 
 698      0C000000 
 698      50525447 
 698      00000000 
 699 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 699      40000000 
 699      0C000000 
 699      50525446 
 699      00000000 
 700 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 700      3F000000 
 700      0C000000 
 700      50525445 
 700      00000000 
 701 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 701      3E000000 
 701      0C000000 
 701      50525444 
 701      00000000 
 702 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 702      3D000000 
 702      0C000000 
 702      50525443 
 702      00000000 
 703 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 703      3C000000 
 703      0C000000 
 703      50525442 
 703      00000000 
 704 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 704      3B000000 
 704      0C000000 
 704      50525441 
 704      00000000 
 705 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 705      3A000000 
 705      0B000000 
 705      5052494E 
 705      54000000 
 706 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
ARM GAS  tinyBasic.s 			page 29


 706      39000000 
 706      0C000000 
 706      504F5554 
 706      00000000 
 707 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 707      38000000 
 707      0B000000 
 707      504F4B45 
 707      00000000 
 708 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 708      35000000 
 708      0B000000 
 708      504D4F44 
 708      45000000 
 709 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 709      37000000 
 709      0C000000 
 709      50494E50 
 709      00000000 
 710 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 710      36000000 
 710      0C000000 
 710      5045454B 
 710      00000000 
 711 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 711      34000000 
 711      0B000000 
 711      50415553 
 711      45000000 
 712 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 712      33000000 
 712      0C000000 
 712      50414400 
 713 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 713      32000000 
 713      0C000000 
 713      4F520000 
 714 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 714      31000000 
 714      0C000000 
 714      4F445200 
 715 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 715      30000000 
 715      0C000000 
 715      4E4F5400 
 716 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 716      2E000000 
 716      0B000000 
 716      4E455854 
 716      00000000 
 717 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 717      2F000000 
 717      0B000000 
 717      4E455700 
 718 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 718      2D000000 
 718      0C000000 
ARM GAS  tinyBasic.s 			page 30


 718      4D554C44 
 718      49560000 
 719 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 719      2C000000 
 719      0C000000 
 719      4C534849 
 719      46540000 
 720 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 720      2B000000 
 720      0C000000 
 720      4C4F4700 
 721 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 721      2A000000 
 721      0B000000 
 721      4C4F4144 
 721      00000000 
 722 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 722      29000000 
 722      0B000000 
 722      4C495354 
 722      00000000 
 723 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 723      28000000 
 723      0B000000 
 723      4C455400 
 724 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 724      27000000 
 724      0C000000 
 724      4B455900 
 725 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 725      26000000 
 725      0B000000 
 725      49574447 
 725      52454600 
 726 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 726      25000000 
 726      0B000000 
 726      49574447 
 726      454E0000 
 727 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 727      24000000 
 727      0C000000 
 727      494E5645 
 727      52540000 
 728 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 728      23000000 
 728      0B000000 
 728      494E5055 
 728      54000000 
 729 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 729      22000000 
 729      0B000000 
 729      49460000 
 730 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 730      21000000 
 730      0C000000 
 730      49445200 
ARM GAS  tinyBasic.s 			page 31


 731 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 731      20000000 
 731      0B000000 
 731      48455800 
 732 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 732      1F000000 
 732      0C000000 
 732      4750494F 
 732      00000000 
 733 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 733      1E000000 
 733      0B000000 
 733      474F544F 
 733      00000000 
 734 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 734      1D000000 
 734      0B000000 
 734      474F5355 
 734      42000000 
 735 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 735      1C000000 
 735      0B000000 
 735      464F5247 
 735      45540000 
 736 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 736      1B000000 
 736      0B000000 
 736      464F5200 
 737 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 737      1A000000 
 737      0B000000 
 737      46435055 
 737      00000000 
 738 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 738      18000000 
 738      0B000000 
 738      454E4400 
 739 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 739      19000000 
 739      0C000000 
 739      45455052 
 739      4F4D0000 
 740 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 740      17000000 
 740      0B000000 
 740      44575249 
 740      54450000 
 741 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 741      16000000 
 741      0C000000 
 741      44524541 
 741      44000000 
 742 0608 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 742      15000000 
 742      0B000000 
 742      444F0000 
 743 0618 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
ARM GAS  tinyBasic.s 			page 32


 743      14000000 
 743      0B000000 
 743      44495200 
 744 0628 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 744      13000000 
 744      0B000000 
 744      44454300 
 745 0638 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 745      12000000 
 745      0C000000 
 745      44445200 
 746 0648 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 746      11000000 
 746      0B000000 
 746      44415441 
 746      4C4E0000 
 747 065c 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 747      10000000 
 747      0B000000 
 747      44415441 
 747      00000000 
 748 0670 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 748      0F000000 
 748      0C000000 
 748      43524C00 
 749 0680 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 749      0E000000 
 749      0C000000 
 749      43524800 
 750 0690 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 750      0D000000 
 750      0D000000 
 750      43484152 
 750      00000000 
 751 06a4 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 751      0C000000 
 751      0B000000 
 751      42594500 
 752 06b4 B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 752      0B000000 
 752      0B000000 
 752      42544F47 
 752      4C000000 
 753 06c8 C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 753      0A000000 
 753      0C000000 
 753      42544553 
 753      54000000 
 754 06dc D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 754      09000000 
 754      0B000000 
 754      42534554 
 754      00000000 
 755 06f0 E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 755      08000000 
 755      0B000000 
 755      42524553 
ARM GAS  tinyBasic.s 			page 33


 755      00000000 
 756 0704 FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 756      07000000 
 756      0C000000 
 756      42495400 
 757 0714 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 757      06000000 
 757      0B000000 
 757      41575500 
 758 0724 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 758      05000000 
 758      0B000000 
 758      4155544F 
 758      52554E00 
 759 0738 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 759      04000000 
 759      0C000000 
 759      41534300 
 760 0748 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 760      03000000 
 760      0C000000 
 760      414E4400 
 761 0758 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 761      02000000 
 761      0C000000 
 761      41444352 
 761      45414400 
 762 076c 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 762      01000000 
 762      0B000000 
 762      4144434F 
 762      4E000000 
 763              	first_link: 
 764 0780 78070000 	  .word LINK 
 765 0784 00000000 	  .word ABS_IDX 
 766 0788 0C       	  .byte TK_IFUNC
 767              	kword_dict: // first name field 
 768              	  .equ LINK,. 
 769 0789 41425300 	  .asciz "ABS" 
 770 078d 000000   	  .p2align 2 
 771              	
 772              	//comands and fonctions address table 	
 773              	code_addr:
 774 0790 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 774      00000000 
 774      00000000 
 774      00000000 
 774      00000000 
 775 07b0 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 775      00000000 
 775      00000000 
 775      00000000 
 775      00000000 
 776 07cc 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 776      00000000 
 776      00000000 
 776      00000000 
ARM GAS  tinyBasic.s 			page 34


 776      00000000 
 777 07f0 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 777      00000000 
 777      00000000 
 777      00000000 
 777      00000000 
 778 0810 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 778      00000000 
 778      00000000 
 778      00000000 
 778      00000000 
 779 0830 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 779      00000000 
 779      00000000 
 779      00000000 
 779      00000000 
 780 0850 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 780      00000000 
 780      00000000 
 780      00000000 
 780      00000000 
 781 0870 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 781      00000000 
 781      00000000 
 781      00000000 
 781      00000000 
 782 0890 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 782      00000000 
 782      00000000 
 782      00000000 
 782      00000000 
 783 08b0 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 783      00000000 
 783      00000000 
 783      00000000 
 783      00000000 
 784 08d0 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 784      00000000 
 784      00000000 
 784      00000000 
 784      00000000 
 785 08f0 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 785      00000000 
 785      00000000 
 785      00000000 
 785      00000000 
 786 0910 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 786      00000000 
 786      00000000 
 786      00000000 
 786      00000000 
 787 0928 00000000 		.word 0 
 788              	
 789              	/**********************************
 790              	    BASIC commands and functions 
 791              	**********************************/
 792              	
ARM GAS  tinyBasic.s 			page 35


 793              	/*******************************
 794              	  BASIC:  ABS expr 
 795              	  input:
 796              	    none 
 797              	  output:
 798              	    r0    token type 
 799              	    r1    abs(expr)
 800              	  use:
 801              	    none 
 802              	******************************/
 803              	    _FUNC abs 
 804 092c 00B5FFF7 	    _CALL arg_list
 804      FEFF5DF8 
 804      04EB
 805 0936 0128     	    cmp r0,#1 
 806 0938 01D0     	    beq 1f 
 807 093a FFF7FEBF 	    b syntax_error 
 808 093e 5CF8041B 	1:  _POP r1 
 809 0942 11F0004F 	    tst r1,#(1<<31)
 810 0946 01D0     	    beq 9f
 811 0948 C1F10001 	    rsb r1,#0 
 812 094c 4FF00F00 	9:  mov r0,#TK_INTGR
 813 0950 7047     	   _RET 
 814              	
 815 0952 0000     	    _FUNC power_adc
 816 0954 7047     	    _RET
 817              	
 818 0956 0000     	    _FUNC analog_read
 819 0958 7047     	    _RET
 820              	
 821 095a 0000     	    _FUNC bit_and
 822 095c 7047     	    _RET
 823              	
 824 095e 0000     	    _FUNC ascii
 825 0960 7047     	    _RET
 826              	
 827 0962 0000     	    _FUNC autorun
 828 0964 7047     	    _RET
 829              	
 830 0966 0000     	    _FUNC awu
 831 0968 7047     	    _RET
 832              	
 833 096a 0000     	    _FUNC bitmask
 834 096c 7047     	    _RET 
 835              	
 836              	  
 837              	  /*********************************
 838              	   BASIC: BRES adr, mask   
 839              	   reset bits [adr]= [adr] & ~mask  
 840              	   input:
 841              	     none 
 842              	    output;
 843              	      none 
 844              	    use:
 845              	      T1   temp
 846              	      T2   temp 
 847              	*******************************/     
ARM GAS  tinyBasic.s 			page 36


 848 096e 0000     	  _FUNC bit_reset
 849 0970 00B5FFF7 	    _CALL arg_list 
 849      FEFF5DF8 
 849      04EB
 850 097a 0228     	    cmp r0,#2 
 851 097c 01D0     	    beq 1f 
 852 097e FFF7FEBF 	    b syntax_error 
 853 0982 5CF8041B 	1:  _POP r1 //mask 
 854 0986 5CF8040B 	    _POP r0 //address 
 855 098a D0F80090 	    ldr T2,[r0] 
 856 098e 81F0FF31 	    eor r1,#-1 // ~mask 
 857 0992 01EA0901 	    and r1,T2
 858 0996 0160     	    str r1,[r0]
 859 0998 00F05CB9 	    b interp_loop 
 860              	
 861              	
 862              	/*********************************
 863              	   BASIC: BSET adr, mask   
 864              	   reset bits [adr]= [adr] & ~mask  
 865              	   input:
 866              	      none 
 867              	    output;
 868              	      none 
 869              	    use:
 870              	      T1   temp
 871              	      T2   temp  
 872              	*******************************/     
 873              	    _FUNC bit_set
 874 099c 00B5FFF7 	    _CALL arg_list 
 874      FEFF5DF8 
 874      04EB
 875 09a6 0228     	    cmp r0,#2 
 876 09a8 01D0     	    beq 1f 
 877 09aa FFF7FEBF 	    b syntax_error 
 878 09ae 5CF8041B 	1:  _POP r1 //mask 
 879 09b2 5CF8040B 	    _POP r0 //address 
 880 09b6 D0F80090 	    ldr T2,[r0] 
 881 09ba 41EA0901 	    orr r1,T2
 882 09be 0160     	    str r1,[r0]
 883 09c0 00F05CB9 	    b interp_loop 
 884              	
 885              	  /*********************************
 886              	   BASIC: BTOGL adr, mask   
 887              	   reset bits [adr]= [adr] & ~mask  
 888              	   input:
 889              	     r0    adr 
 890              	     r1    mask 
 891              	    output;
 892              	      none 
 893              	    use:
 894              	      T1   temp
 895              	      T2   temp  
 896              	*******************************/     
 897              	  _FUNC bit_toggle
 898 09c4 00B5FFF7 	    _CALL arg_list 
 898      FEFF5DF8 
 898      04EB
ARM GAS  tinyBasic.s 			page 37


 899 09ce 0228     	    cmp r0,#2 
 900 09d0 01D0     	    beq 1f 
 901 09d2 FFF7FEBF 	    b syntax_error 
 902 09d6 5CF8041B 	1:  _POP r1 //mask 
 903 09da 5CF8040B 	    _POP r0 //address 
 904 09de D0F80090 	    ldr T2,[r0] 
 905 09e2 81EA0901 	    eor r1,T2
 906 09e6 0160     	    str r1,[r0]
 907 09e8 00F05CB9 	    b interp_loop 
 908              	
 909              	    _FUNC bit_test
 910 09ec 00F05CB9 	    b interp_loop
 911              	
 912              	    _FUNC bye
 913 09f0 00F05CB9 	    b interp_loop
 914              	
 915              	    _FUNC char
 916 09f4 00F05CB9 	    b interp_loop
 917              	
 918              	    _FUNC const_cr2
 919 09f8 00F05CB9 	    b interp_loop 
 920              	
 921              	    _FUNC const_cr1
 922 09fc 00F05CB9 	    b interp_loop
 923              	
 924              	    _FUNC data
 925 0a00 00F05CB9 	    b interp_loop
 926              	
 927              	    _FUNC data_line
 928 0a04 00F05CB9 	    b interp_loop
 929              	
 930              	    _FUNC const_ddr
 931 0a08 00F05CB9 	    b interp_loop
 932              	
 933              	    _FUNC dec_base
 934 0a0c 00F05CB9 	    b interp_loop
 935              	
 936              	    _FUNC directory
 937 0a10 00F05CB9 	    b interp_loop
 938              	
 939              	    _FUNC do_loop
 940 0a14 00F05CB9 	    b interp_loop
 941              	
 942              	    _FUNC digital_read
 943 0a18 00F05CB9 	    b interp_loop
 944              	
 945              	    _FUNC digital_write
 946 0a1c 00F05CB9 	    b interp_loop 
 947              	
 948              	    _FUNC cmd_end
 949 0a20 00F05CB9 	    b interp_loop
 950              	
 951              	    _FUNC const_eeprom_base
 952 0a24 00F05CB9 	    b interp_loop
 953              	
 954              	    _FUNC fcpu
 955 0a28 00F05CB9 	    b interp_loop
ARM GAS  tinyBasic.s 			page 38


 956              	
 957              	    _FUNC for
 958 0a2c 00F05CB9 	    b interp_loop
 959              	
 960              	    _FUNC forget
 961 0a30 00F05CB9 	    b interp_loop
 962              	
 963              	    _FUNC gosub
 964 0a34 00F05CB9 	    b interp_loop
 965              	
 966              	    _FUNC goto
 967 0a38 00F05CB9 	    b interp_loop
 968              	
 969              	    _FUNC gpio
 970 0a3c 00F05CB9 	    b interp_loop 
 971              	
 972              	    _FUNC hex_base
 973 0a40 00F05CB9 	    b interp_loop
 974              	
 975              	    _FUNC const_idr
 976 0a44 00F05CB9 	    b interp_loop
 977              	
 978              	    _FUNC if
 979 0a48 00F05CB9 	    b interp_loop
 980              	
 981              	    _FUNC input_var
 982 0a4c 00F05CB9 	    b interp_loop
 983              	
 984              	    _FUNC invert
 985 0a50 00F05CB9 	    b interp_loop
 986              	
 987              	    _FUNC enable_iwdg
 988 0a54 00F05CB9 	    b interp_loop
 989              	
 990              	    _FUNC refresh_iwdg
 991 0a58 00F05CB9 	    b interp_loop
 992              	
 993              	    _FUNC key
 994 0a5c 00F05CB9 	    b interp_loop 
 995              	
 996              	/******************************
 997              	  BASIC: [let] var=expr 
 998              	         [let] @(expr)=expr
 999              	  input:
 1000              	    none 
 1001              	  output:
 1002              	    none 
 1003              	  use:
 1004              	
 1005              	****************************/         
 1006              	    _FUNC let
 1007 0a60 00B5FFF7 	    _CALL next_token 
 1007      FEFF5DF8 
 1007      04EB
 1008 0a6a 0528     	    cmp r0,#TK_VAR
 1009 0a6c 03D0     	    beq let_var 
 1010 0a6e 0628     	    cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 39


 1011 0a70 06D0     	    beq let_array 
 1012 0a72 FFF7FEBF 	    b syntax_error 
 1013              	let_var:
 1014 0a76 00B5FFF7 	    _CALL get_array_element
 1014      FEFF5DF8 
 1014      04EB
 1015              	let_array: 
 1016 0a80 4CF8040D 	    _PUSH r0 
 1017 0a84 00B5FFF7 	    _CALL next_token 
 1017      FEFF5DF8 
 1017      04EB
 1018 0a8e 3228     	    cmp r0,#TK_EQUAL 
 1019 0a90 01D0     	    beq 1f 
 1020 0a92 FFF7FEBF 	    b syntax_error 
 1021 0a96 00B5FFF7 	1:  _CALL relation  
 1021      FEFF5DF8 
 1021      04EB
 1022 0aa0 0F28     	    cmp r0,#TK_INTGR
 1023 0aa2 01D0     	    beq 2f 
 1024 0aa4 FFF7FEBF 	    b syntax_error 
 1025 0aa8 5CF8040B 	2:  _POP r0 
 1026 0aac 0160     	    str r1,[r0]
 1027 0aae 4FF00000 	    mov r0,#TK_NONE 
 1028 0ab2 00F05CB9 	    b interp_loop 
 1029              	
 1030 0ab6 0000     	    _FUNC list
 1031 0ab8 00F05CB9 	    b interp_loop
 1032              	
 1033              	    _FUNC load
 1034 0abc 00F05CB9 	    b interp_loop
 1035              	
 1036              	    _FUNC log2
 1037 0ac0 00F05CB9 	    b interp_loop
 1038              	
 1039              	    _FUNC lshift
 1040 0ac4 00F05CB9 	    b interp_loop
 1041              	
 1042              	    _FUNC muldiv
 1043 0ac8 00F05CB9 	    b interp_loop
 1044              	
 1045              	    _FUNC next
 1046 0acc 00F05CB9 	    b interp_loop
 1047              	
 1048              	    _FUNC new
 1049 0ad0 00F05CB9 	    b interp_loop 
 1050              	
 1051              	    _FUNC func_not
 1052 0ad4 00F05CB9 	    b interp_loop
 1053              	
 1054              	    _FUNC const_odr
 1055 0ad8 00F05CB9 	    b interp_loop
 1056              	
 1057              	    _FUNC bit_or
 1058 0adc 00F05CB9 	    b interp_loop
 1059              	
 1060              	    _FUNC pad_ref
 1061 0ae0 00F05CB9 	    b interp_loop
ARM GAS  tinyBasic.s 			page 40


 1062              	
 1063              	    _FUNC pause
 1064 0ae4 00F05CB9 	    b interp_loop
 1065              	
 1066              	    _FUNC pin_mode
 1067 0ae8 00F05CB9 	    b interp_loop
 1068              	
 1069              	    _FUNC peek
 1070 0aec 00F05CB9 	    b interp_loop
 1071              	
 1072              	    _FUNC const_input
 1073 0af0 00F05CB9 	    b interp_loop 
 1074              	
 1075              	    _FUNC poke
 1076 0af4 00F05CB9 	    b interp_loop
 1077              	
 1078              	    _FUNC const_output
 1079 0af8 00F05CB9 	    b interp_loop
 1080              	
 1081              	    _FUNC print
 1082 0afc 00F05CB9 	    b interp_loop
 1083              	
 1084              	    _FUNC const_porta
 1085 0b00 00F05CB9 	    b interp_loop
 1086              	
 1087              	    _FUNC const_portb
 1088 0b04 00F05CB9 	    b interp_loop
 1089              	
 1090              	    _FUNC const_portc
 1091 0b08 00F05CB9 	    b interp_loop
 1092              	
 1093              	    _FUNC const_portd
 1094 0b0c 00F05CB9 	    b interp_loop
 1095              	
 1096              	    _FUNC const_porte
 1097 0b10 00F05CB9 	    b interp_loop 
 1098              	
 1099              	    _FUNC const_portf
 1100 0b14 00F05CB9 	    b interp_loop
 1101              	
 1102              	    _FUNC const_portg
 1103 0b18 00F05CB9 	    b interp_loop
 1104              	
 1105              	    _FUNC const_porth
 1106 0b1c 00F05CB9 	    b interp_loop
 1107              	
 1108              	    _FUNC const_porti
 1109 0b20 00F05CB9 	    b interp_loop
 1110              	
 1111              	    _FUNC qkey
 1112 0b24 00F05CB9 	    b interp_loop
 1113              	
 1114              	    _FUNC read
 1115 0b28 00F05CB9 	    b interp_loop
 1116              	
 1117              	    _FUNC remark
 1118 0b2c 00F05CB9 	    b interp_loop 
ARM GAS  tinyBasic.s 			page 41


 1119              	
 1120              	    _FUNC restore
 1121 0b30 00F05CB9 	    b interp_loop
 1122              	
 1123              	    _FUNC return
 1124 0b34 00F05CB9 	    b interp_loop
 1125              	
 1126              	    _FUNC  random
 1127 0b38 00F05CB9 	    b interp_loop
 1128              	
 1129              	    _FUNC rshift
 1130 0b3c 00F05CB9 	    b interp_loop
 1131              	
 1132              	    _FUNC run
 1133 0b40 00F05CB9 	    b interp_loop
 1134              	
 1135              	    _FUNC save
 1136 0b44 00F05CB9 	    b interp_loop
 1137              	
 1138              	    _FUNC show
 1139 0b48 00F05CB9 	    b interp_loop
 1140              	
 1141              	    _FUNC size
 1142 0b4c 00F05CB9 	    b interp_loop 
 1143              	
 1144              	    _FUNC sleep
 1145 0b50 00F05CB9 	    b interp_loop
 1146              	
 1147              	    _FUNC spi_read
 1148 0b54 00F05CB9 	    b interp_loop
 1149              	
 1150              	    _FUNC spi_enable
 1151 0b58 00F05CB9 	    b interp_loop
 1152              	
 1153              	    _FUNC spi_select
 1154 0b5c 00F05CB9 	    b interp_loop
 1155              	
 1156              	    _FUNC spi_write
 1157 0b60 00F05CB9 	    b interp_loop
 1158              	
 1159              	    _FUNC step
 1160 0b64 00F05CB9 	    b interp_loop
 1161              	
 1162              	    _FUNC stop
 1163 0b68 00F05CB9 	    b interp_loop
 1164              	
 1165              	    _FUNC get_ticks
 1166 0b6c 00F05CB9 	    b interp_loop 
 1167              	
 1168              	    _FUNC set_timer
 1169 0b70 00F05CB9 	    b interp_loop
 1170              	
 1171              	    _FUNC timeout
 1172 0b74 00F05CB9 	    b interp_loop
 1173              	
 1174              	    _FUNC to
 1175 0b78 00F05CB9 	    b interp_loop
ARM GAS  tinyBasic.s 			page 42


 1176              	
 1177              	    _FUNC tone
 1178 0b7c 00F05CB9 	    b interp_loop
 1179              	
 1180              	    _FUNC ubound
 1181 0b80 00F05CB9 	    b interp_loop
 1182              	
 1183              	    _FUNC uflash
 1184 0b84 00F05CB9 	    b interp_loop
 1185              	
 1186              	    _FUNC until
 1187 0b88 00F05CB9 	    b interp_loop
 1188              	
 1189              	    _FUNC usr
 1190 0b8c 00F05CB9 	    b interp_loop 
 1191              	
 1192              	    _FUNC wait
 1193 0b90 00F05CB9 	    b interp_loop
 1194              	
 1195              	    _FUNC words
 1196 0b94 00F05CB9 	    b interp_loop
 1197              	
 1198              	    _FUNC write
 1199 0b98 00F05CB9 	    b interp_loop
 1200              	
 1201              	    _FUNC bit_xor
 1202 0b9c 00F05CB9 	    b interp_loop
 1203              	
 1204              	    _FUNC transmit
 1205 0ba0 00F05CB9 	    b interp_loop
 1206              	
 1207              	    _FUNC receive
 1208 0ba4 00F05CB9 	    b interp_loop 
 1209              	
 1210              	
 1211              	/*************************************************
 1212              	   extra FLASH memory not used by Tiny BASIC
 1213              	   is used to save BASIC programs.
 1214              	************************************************/
 1215 0ba8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 1215      00000000 
 1215      00000000 
 1215      00000000 
 1215      00000000 
 1216              	  .section .fs
 1217              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 43


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 44


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 45


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 46


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 47


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:161    *ABS*:0000000000000000 FRUN
      tbi_macros.inc:162    *ABS*:0000000000000001 FTRAP
      tbi_macros.inc:163    *ABS*:0000000000000002 FLOOP
      tbi_macros.inc:164    *ABS*:0000000000000003 FSLEEP
      tbi_macros.inc:165    *ABS*:0000000000000004 FBREAK
      tbi_macros.inc:166    *ABS*:0000000000000005 FCOMP
      tbi_macros.inc:167    *ABS*:0000000000000006 FAUTORUN
      tbi_macros.inc:169    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:171    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:172    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
ARM GAS  tinyBasic.s 			page 48


       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
ARM GAS  tinyBasic.s 			page 49


       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:47     .text:0000000000000000 strlen
         tinyBasic.s:47     .text:0000000000000000 $t
         tinyBasic.s:71     .text:0000000000000018 cmove
         tinyBasic.s:83     .text:0000000000000032 move_from_end
         tinyBasic.s:77     .text:0000000000000024 move_from_low
         tinyBasic.s:105    .text:0000000000000048 strcpy
         tinyBasic.s:130    .text:000000000000005c cpstr
         tinyBasic.s:158    .text:0000000000000078 syntax_error
         tinyBasic.s:173    .text:0000000000000080 tb_error
         tinyBasic.s:183    .text:000000000000009c err_msg
         tinyBasic.s:373    .text:00000000000001f4 dstack_empty
         tinyBasic.s:586    .text:000000000000039c warm_start
         tinyBasic.s:184    .text:000000000000009c $d
         tinyBasic.s:190    .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:191    .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:192    .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:193    .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:194    .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:195    .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:196    .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:197    .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:198    .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:199    .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:200    .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:201    .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:202    .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:203    .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:204    .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:206    .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:207    .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:208    .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:225    .text:00000000000000dc $t
         tinyBasic.s:225    .text:00000000000000dc arg_list
         tinyBasic.s:241    .text:00000000000000e8 func_args
         tinyBasic.s:261    .text:00000000000000ec BTGL
         tinyBasic.s:279    .text:00000000000000f0 search_dict
         tinyBasic.s:310    .text:0000000000000124 prt_version
ARM GAS  tinyBasic.s 			page 50


         tinyBasic.s:334    .text:000000000000018c version_msg
         tinyBasic.s:336    .text:00000000000001ac version
         tinyBasic.s:335    .text:000000000000018c $d
         tinyBasic.s:351    .text:00000000000001b0 cold_start
         tinyBasic.s:366    .text:00000000000001e4 src_addr
         tinyBasic.s:368    .text:00000000000001e8 dest_addr
         tinyBasic.s:652    .rodata:00000000000000d0 ulast
         tinyBasic.s:627    .rodata:0000000000000000 uzero
         tinyBasic.s:422    .text:0000000000000230 warm_init
         tinyBasic.s:448    .text:0000000000000254 cmd_line
         tinyBasic.s:367    .text:00000000000001e4 $d
         tinyBasic.s:370    .text:00000000000001ec test
         tinyBasic.s:386    .text:00000000000001f8 $t
         tinyBasic.s:386    .text:00000000000001f8 clear_vars
         tinyBasic.s:402    .text:0000000000000214 clear_basic
         tinyBasic.s:572    .text:0000000000000398 tib
         tinyBasic.s:620    .text:00000000000003ac compile
         tinyBasic.s:459    .text:0000000000000280 interpreter
         tinyBasic.s:481    .text:00000000000002bc interp_loop
         tinyBasic.s:466    .text:000000000000028e next_line
         tinyBasic.s:515    .text:00000000000002ec next_token
         tinyBasic.s:1013   .rodata.dictionary:0000000000000a76 let_var
         tinyBasic.s:1015   .rodata.dictionary:0000000000000a80 let_array
         tinyBasic.s:556    .text:0000000000000350 tbb_ofs
         tinyBasic.s:557    .text:0000000000000350 $d
         tinyBasic.s:572    .text:0000000000000398 $d
         tinyBasic.s:586    .text:000000000000039c $t
         tinyBasic.s:602    .text:00000000000003a4 get_array_element
         tinyBasic.s:606    .text:00000000000003a8 relation
         tinyBasic.s:1217   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:649    .rodata:0000000000000054 $d
         tinyBasic.s:659    *ABS*:0000000000000000 link
         tinyBasic.s:660    .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:768    .rodata.dictionary:0000000000000789 LINK
         tinyBasic.s:661    .rodata.dictionary:000000000000000d $d
         tinyBasic.s:763    .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:767    .rodata.dictionary:0000000000000789 kword_dict
         tinyBasic.s:773    .rodata.dictionary:0000000000000790 code_addr
         tinyBasic.s:803    .rodata.dictionary:000000000000092c abs
         tinyBasic.s:815    .rodata.dictionary:0000000000000954 power_adc
         tinyBasic.s:818    .rodata.dictionary:0000000000000958 analog_read
         tinyBasic.s:821    .rodata.dictionary:000000000000095c bit_and
         tinyBasic.s:824    .rodata.dictionary:0000000000000960 ascii
         tinyBasic.s:827    .rodata.dictionary:0000000000000964 autorun
         tinyBasic.s:830    .rodata.dictionary:0000000000000968 awu
         tinyBasic.s:833    .rodata.dictionary:000000000000096c bitmask
         tinyBasic.s:848    .rodata.dictionary:0000000000000970 bit_reset
         tinyBasic.s:873    .rodata.dictionary:000000000000099c bit_set
         tinyBasic.s:909    .rodata.dictionary:00000000000009ec bit_test
         tinyBasic.s:897    .rodata.dictionary:00000000000009c4 bit_toggle
         tinyBasic.s:912    .rodata.dictionary:00000000000009f0 bye
         tinyBasic.s:915    .rodata.dictionary:00000000000009f4 char
         tinyBasic.s:918    .rodata.dictionary:00000000000009f8 const_cr2
         tinyBasic.s:921    .rodata.dictionary:00000000000009fc const_cr1
         tinyBasic.s:924    .rodata.dictionary:0000000000000a00 data
         tinyBasic.s:927    .rodata.dictionary:0000000000000a04 data_line
         tinyBasic.s:930    .rodata.dictionary:0000000000000a08 const_ddr
ARM GAS  tinyBasic.s 			page 51


         tinyBasic.s:933    .rodata.dictionary:0000000000000a0c dec_base
         tinyBasic.s:936    .rodata.dictionary:0000000000000a10 directory
         tinyBasic.s:939    .rodata.dictionary:0000000000000a14 do_loop
         tinyBasic.s:942    .rodata.dictionary:0000000000000a18 digital_read
         tinyBasic.s:945    .rodata.dictionary:0000000000000a1c digital_write
         tinyBasic.s:948    .rodata.dictionary:0000000000000a20 cmd_end
         tinyBasic.s:951    .rodata.dictionary:0000000000000a24 const_eeprom_base
         tinyBasic.s:954    .rodata.dictionary:0000000000000a28 fcpu
         tinyBasic.s:957    .rodata.dictionary:0000000000000a2c for
         tinyBasic.s:960    .rodata.dictionary:0000000000000a30 forget
         tinyBasic.s:963    .rodata.dictionary:0000000000000a34 gosub
         tinyBasic.s:966    .rodata.dictionary:0000000000000a38 goto
         tinyBasic.s:969    .rodata.dictionary:0000000000000a3c gpio
         tinyBasic.s:972    .rodata.dictionary:0000000000000a40 hex_base
         tinyBasic.s:975    .rodata.dictionary:0000000000000a44 const_idr
         tinyBasic.s:978    .rodata.dictionary:0000000000000a48 if
         tinyBasic.s:981    .rodata.dictionary:0000000000000a4c input_var
         tinyBasic.s:984    .rodata.dictionary:0000000000000a50 invert
         tinyBasic.s:987    .rodata.dictionary:0000000000000a54 enable_iwdg
         tinyBasic.s:990    .rodata.dictionary:0000000000000a58 refresh_iwdg
         tinyBasic.s:993    .rodata.dictionary:0000000000000a5c key
         tinyBasic.s:1006   .rodata.dictionary:0000000000000a60 let
         tinyBasic.s:1030   .rodata.dictionary:0000000000000ab8 list
         tinyBasic.s:1033   .rodata.dictionary:0000000000000abc load
         tinyBasic.s:1036   .rodata.dictionary:0000000000000ac0 log2
         tinyBasic.s:1039   .rodata.dictionary:0000000000000ac4 lshift
         tinyBasic.s:1042   .rodata.dictionary:0000000000000ac8 muldiv
         tinyBasic.s:1045   .rodata.dictionary:0000000000000acc next
         tinyBasic.s:1048   .rodata.dictionary:0000000000000ad0 new
         tinyBasic.s:1051   .rodata.dictionary:0000000000000ad4 func_not
         tinyBasic.s:1054   .rodata.dictionary:0000000000000ad8 const_odr
         tinyBasic.s:1057   .rodata.dictionary:0000000000000adc bit_or
         tinyBasic.s:1060   .rodata.dictionary:0000000000000ae0 pad_ref
         tinyBasic.s:1063   .rodata.dictionary:0000000000000ae4 pause
         tinyBasic.s:1066   .rodata.dictionary:0000000000000ae8 pin_mode
         tinyBasic.s:1069   .rodata.dictionary:0000000000000aec peek
         tinyBasic.s:1072   .rodata.dictionary:0000000000000af0 const_input
         tinyBasic.s:1075   .rodata.dictionary:0000000000000af4 poke
         tinyBasic.s:1078   .rodata.dictionary:0000000000000af8 const_output
         tinyBasic.s:1081   .rodata.dictionary:0000000000000afc print
         tinyBasic.s:1084   .rodata.dictionary:0000000000000b00 const_porta
         tinyBasic.s:1087   .rodata.dictionary:0000000000000b04 const_portb
         tinyBasic.s:1090   .rodata.dictionary:0000000000000b08 const_portc
         tinyBasic.s:1093   .rodata.dictionary:0000000000000b0c const_portd
         tinyBasic.s:1096   .rodata.dictionary:0000000000000b10 const_porte
         tinyBasic.s:1099   .rodata.dictionary:0000000000000b14 const_portf
         tinyBasic.s:1102   .rodata.dictionary:0000000000000b18 const_portg
         tinyBasic.s:1105   .rodata.dictionary:0000000000000b1c const_porth
         tinyBasic.s:1108   .rodata.dictionary:0000000000000b20 const_porti
         tinyBasic.s:1111   .rodata.dictionary:0000000000000b24 qkey
         tinyBasic.s:1114   .rodata.dictionary:0000000000000b28 read
         tinyBasic.s:1117   .rodata.dictionary:0000000000000b2c remark
         tinyBasic.s:1120   .rodata.dictionary:0000000000000b30 restore
         tinyBasic.s:1123   .rodata.dictionary:0000000000000b34 return
         tinyBasic.s:1126   .rodata.dictionary:0000000000000b38 random
         tinyBasic.s:1129   .rodata.dictionary:0000000000000b3c rshift
         tinyBasic.s:1132   .rodata.dictionary:0000000000000b40 run
ARM GAS  tinyBasic.s 			page 52


         tinyBasic.s:1135   .rodata.dictionary:0000000000000b44 save
         tinyBasic.s:1138   .rodata.dictionary:0000000000000b48 show
         tinyBasic.s:1141   .rodata.dictionary:0000000000000b4c size
         tinyBasic.s:1144   .rodata.dictionary:0000000000000b50 sleep
         tinyBasic.s:1147   .rodata.dictionary:0000000000000b54 spi_read
         tinyBasic.s:1150   .rodata.dictionary:0000000000000b58 spi_enable
         tinyBasic.s:1153   .rodata.dictionary:0000000000000b5c spi_select
         tinyBasic.s:1156   .rodata.dictionary:0000000000000b60 spi_write
         tinyBasic.s:1159   .rodata.dictionary:0000000000000b64 step
         tinyBasic.s:1162   .rodata.dictionary:0000000000000b68 stop
         tinyBasic.s:1165   .rodata.dictionary:0000000000000b6c get_ticks
         tinyBasic.s:1168   .rodata.dictionary:0000000000000b70 set_timer
         tinyBasic.s:1171   .rodata.dictionary:0000000000000b74 timeout
         tinyBasic.s:1174   .rodata.dictionary:0000000000000b78 to
         tinyBasic.s:1177   .rodata.dictionary:0000000000000b7c tone
         tinyBasic.s:1180   .rodata.dictionary:0000000000000b80 ubound
         tinyBasic.s:1183   .rodata.dictionary:0000000000000b84 uflash
         tinyBasic.s:1186   .rodata.dictionary:0000000000000b88 until
         tinyBasic.s:1189   .rodata.dictionary:0000000000000b8c usr
         tinyBasic.s:1192   .rodata.dictionary:0000000000000b90 wait
         tinyBasic.s:1195   .rodata.dictionary:0000000000000b94 words
         tinyBasic.s:1198   .rodata.dictionary:0000000000000b98 write
         tinyBasic.s:1201   .rodata.dictionary:0000000000000b9c bit_xor
         tinyBasic.s:1204   .rodata.dictionary:0000000000000ba0 transmit
         tinyBasic.s:1207   .rodata.dictionary:0000000000000ba4 receive
         tinyBasic.s:804    .rodata.dictionary:000000000000092c $t
         tinyBasic.s:815    .rodata.dictionary:0000000000000952 $d
         tinyBasic.s:816    .rodata.dictionary:0000000000000954 $t
         tinyBasic.s:818    .rodata.dictionary:0000000000000956 $d
         tinyBasic.s:819    .rodata.dictionary:0000000000000958 $t
         tinyBasic.s:821    .rodata.dictionary:000000000000095a $d
         tinyBasic.s:822    .rodata.dictionary:000000000000095c $t
         tinyBasic.s:824    .rodata.dictionary:000000000000095e $d
         tinyBasic.s:825    .rodata.dictionary:0000000000000960 $t
         tinyBasic.s:827    .rodata.dictionary:0000000000000962 $d
         tinyBasic.s:828    .rodata.dictionary:0000000000000964 $t
         tinyBasic.s:830    .rodata.dictionary:0000000000000966 $d
         tinyBasic.s:831    .rodata.dictionary:0000000000000968 $t
         tinyBasic.s:833    .rodata.dictionary:000000000000096a $d
         tinyBasic.s:834    .rodata.dictionary:000000000000096c $t
         tinyBasic.s:848    .rodata.dictionary:000000000000096e $d
         tinyBasic.s:849    .rodata.dictionary:0000000000000970 $t
         tinyBasic.s:874    .rodata.dictionary:000000000000099c $t
         tinyBasic.s:898    .rodata.dictionary:00000000000009c4 $t
         tinyBasic.s:910    .rodata.dictionary:00000000000009ec $t
         tinyBasic.s:913    .rodata.dictionary:00000000000009f0 $t
         tinyBasic.s:916    .rodata.dictionary:00000000000009f4 $t
         tinyBasic.s:919    .rodata.dictionary:00000000000009f8 $t
         tinyBasic.s:922    .rodata.dictionary:00000000000009fc $t
         tinyBasic.s:925    .rodata.dictionary:0000000000000a00 $t
         tinyBasic.s:928    .rodata.dictionary:0000000000000a04 $t
         tinyBasic.s:931    .rodata.dictionary:0000000000000a08 $t
         tinyBasic.s:934    .rodata.dictionary:0000000000000a0c $t
         tinyBasic.s:937    .rodata.dictionary:0000000000000a10 $t
         tinyBasic.s:940    .rodata.dictionary:0000000000000a14 $t
         tinyBasic.s:943    .rodata.dictionary:0000000000000a18 $t
         tinyBasic.s:946    .rodata.dictionary:0000000000000a1c $t
ARM GAS  tinyBasic.s 			page 53


         tinyBasic.s:949    .rodata.dictionary:0000000000000a20 $t
         tinyBasic.s:952    .rodata.dictionary:0000000000000a24 $t
         tinyBasic.s:955    .rodata.dictionary:0000000000000a28 $t
         tinyBasic.s:958    .rodata.dictionary:0000000000000a2c $t
         tinyBasic.s:961    .rodata.dictionary:0000000000000a30 $t
         tinyBasic.s:964    .rodata.dictionary:0000000000000a34 $t
         tinyBasic.s:967    .rodata.dictionary:0000000000000a38 $t
         tinyBasic.s:970    .rodata.dictionary:0000000000000a3c $t
         tinyBasic.s:973    .rodata.dictionary:0000000000000a40 $t
         tinyBasic.s:976    .rodata.dictionary:0000000000000a44 $t
         tinyBasic.s:979    .rodata.dictionary:0000000000000a48 $t
         tinyBasic.s:982    .rodata.dictionary:0000000000000a4c $t
         tinyBasic.s:985    .rodata.dictionary:0000000000000a50 $t
         tinyBasic.s:988    .rodata.dictionary:0000000000000a54 $t
         tinyBasic.s:991    .rodata.dictionary:0000000000000a58 $t
         tinyBasic.s:994    .rodata.dictionary:0000000000000a5c $t
         tinyBasic.s:1007   .rodata.dictionary:0000000000000a60 $t
         tinyBasic.s:1030   .rodata.dictionary:0000000000000ab6 $d
         tinyBasic.s:1031   .rodata.dictionary:0000000000000ab8 $t
         tinyBasic.s:1034   .rodata.dictionary:0000000000000abc $t
         tinyBasic.s:1037   .rodata.dictionary:0000000000000ac0 $t
         tinyBasic.s:1040   .rodata.dictionary:0000000000000ac4 $t
         tinyBasic.s:1043   .rodata.dictionary:0000000000000ac8 $t
         tinyBasic.s:1046   .rodata.dictionary:0000000000000acc $t
         tinyBasic.s:1049   .rodata.dictionary:0000000000000ad0 $t
         tinyBasic.s:1052   .rodata.dictionary:0000000000000ad4 $t
         tinyBasic.s:1055   .rodata.dictionary:0000000000000ad8 $t
         tinyBasic.s:1058   .rodata.dictionary:0000000000000adc $t
         tinyBasic.s:1061   .rodata.dictionary:0000000000000ae0 $t
         tinyBasic.s:1064   .rodata.dictionary:0000000000000ae4 $t
         tinyBasic.s:1067   .rodata.dictionary:0000000000000ae8 $t
         tinyBasic.s:1070   .rodata.dictionary:0000000000000aec $t
         tinyBasic.s:1073   .rodata.dictionary:0000000000000af0 $t
         tinyBasic.s:1076   .rodata.dictionary:0000000000000af4 $t
         tinyBasic.s:1079   .rodata.dictionary:0000000000000af8 $t
         tinyBasic.s:1082   .rodata.dictionary:0000000000000afc $t
         tinyBasic.s:1085   .rodata.dictionary:0000000000000b00 $t
         tinyBasic.s:1088   .rodata.dictionary:0000000000000b04 $t
         tinyBasic.s:1091   .rodata.dictionary:0000000000000b08 $t
         tinyBasic.s:1094   .rodata.dictionary:0000000000000b0c $t
         tinyBasic.s:1097   .rodata.dictionary:0000000000000b10 $t
         tinyBasic.s:1100   .rodata.dictionary:0000000000000b14 $t
         tinyBasic.s:1103   .rodata.dictionary:0000000000000b18 $t
         tinyBasic.s:1106   .rodata.dictionary:0000000000000b1c $t
         tinyBasic.s:1109   .rodata.dictionary:0000000000000b20 $t
         tinyBasic.s:1112   .rodata.dictionary:0000000000000b24 $t
         tinyBasic.s:1115   .rodata.dictionary:0000000000000b28 $t
         tinyBasic.s:1118   .rodata.dictionary:0000000000000b2c $t
         tinyBasic.s:1121   .rodata.dictionary:0000000000000b30 $t
         tinyBasic.s:1124   .rodata.dictionary:0000000000000b34 $t
         tinyBasic.s:1127   .rodata.dictionary:0000000000000b38 $t
         tinyBasic.s:1130   .rodata.dictionary:0000000000000b3c $t
         tinyBasic.s:1133   .rodata.dictionary:0000000000000b40 $t
         tinyBasic.s:1136   .rodata.dictionary:0000000000000b44 $t
         tinyBasic.s:1139   .rodata.dictionary:0000000000000b48 $t
         tinyBasic.s:1142   .rodata.dictionary:0000000000000b4c $t
         tinyBasic.s:1145   .rodata.dictionary:0000000000000b50 $t
ARM GAS  tinyBasic.s 			page 54


         tinyBasic.s:1148   .rodata.dictionary:0000000000000b54 $t
         tinyBasic.s:1151   .rodata.dictionary:0000000000000b58 $t
         tinyBasic.s:1154   .rodata.dictionary:0000000000000b5c $t
         tinyBasic.s:1157   .rodata.dictionary:0000000000000b60 $t
         tinyBasic.s:1160   .rodata.dictionary:0000000000000b64 $t
         tinyBasic.s:1163   .rodata.dictionary:0000000000000b68 $t
         tinyBasic.s:1166   .rodata.dictionary:0000000000000b6c $t
         tinyBasic.s:1169   .rodata.dictionary:0000000000000b70 $t
         tinyBasic.s:1172   .rodata.dictionary:0000000000000b74 $t
         tinyBasic.s:1175   .rodata.dictionary:0000000000000b78 $t
         tinyBasic.s:1178   .rodata.dictionary:0000000000000b7c $t
         tinyBasic.s:1181   .rodata.dictionary:0000000000000b80 $t
         tinyBasic.s:1184   .rodata.dictionary:0000000000000b84 $t
         tinyBasic.s:1187   .rodata.dictionary:0000000000000b88 $t
         tinyBasic.s:1190   .rodata.dictionary:0000000000000b8c $t
         tinyBasic.s:1193   .rodata.dictionary:0000000000000b90 $t
         tinyBasic.s:1196   .rodata.dictionary:0000000000000b94 $t
         tinyBasic.s:1199   .rodata.dictionary:0000000000000b98 $t
         tinyBasic.s:1202   .rodata.dictionary:0000000000000b9c $t
         tinyBasic.s:1205   .rodata.dictionary:0000000000000ba0 $t
         tinyBasic.s:1208   .rodata.dictionary:0000000000000ba4 $t
         tinyBasic.s:1215   .rodata.dictionary:0000000000000ba8 $d
         tinyBasic.s:624    .text:00000000000003ae $d
         tinyBasic.s:1217   .text:00000000000003b0 $d
         tinyBasic.s:338    .text:00000000000001ad $d
         tinyBasic.s:338    .text:00000000000001ae $t
         tinyBasic.s:570    .text:0000000000000395 $d
         tinyBasic.s:570    .text:0000000000000396 $t

UNDEFINED SYMBOLS
uart_puts
uart_putc
isr_vectors
isr_end
_dstack
readln
_tib
