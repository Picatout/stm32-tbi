ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	
  19              	.syntax unified
  20              	  .cpu cortex-m3
  21              	  .fpu softvfp
  22              	  .thumb
  23              	
  24              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
ARM GAS  tinyBasic.s 			page 2


  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
ARM GAS  tinyBasic.s 			page 3


  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  25              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  tinyBasic.s 			page 4


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
ARM GAS  tinyBasic.s 			page 5


  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  26              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
ARM GAS  tinyBasic.s 			page 6


  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  74              	  .equ TK_GE,0x33      // relation operator '>,'
  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<,'
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
  85              	
  86              	//--------------------------------------
  87              	//   error codes 
ARM GAS  tinyBasic.s 			page 7


  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
ARM GAS  tinyBasic.s 			page 8


 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	
 160              	/* flags used by BASIC interpreter */ 
 161              		.equ FRUN,0 // programm running
 162              		.equ FTRAP,1 // inside trap handler 
 163              		.equ FLOOP,2 // FOR loop in preparation 
 164              		.equ FSLEEP,3 // in halt mode SLEEP 
 165              		.equ FBREAK,4 // break point flag 
 166              		.equ FCOMP,5  // compiling flags 
 167              		.equ FAUTORUN,6// auto start program running 
 168              	
 169              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 170              	  
 171              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 172              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 173              	
 174              	/***********************************************
 175              	*       MACROS
 176              	***********************************************/
 177              		.macro _CALL fn /* low level routine call */ 
 178              	 	PUSH {LR}
 179              		BL \fn  
 180              	  POP {LR}
 181              		.endm
 182              		
 183              		.macro	_RET /* return from subroutine */
 184              		BX	LR
 185              		.endm
 186              	
 187              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 188              		MOV \REG, #\LITERAL&0xffff
 189              		MOVT \REG, #\LITERAL>>16
 190              		.endm
 191              	
 192              	// local function header 
 193              	  .macro _FUNC label 
 194              	  .p2align 2 
 195              	  .type \label, %function  
 196              	\label:
 197              	  .endm 
 198              	
 199              	// global function header 
 200              	  .macro _GBL_FUNC label 
 201              	  .global \label 
ARM GAS  tinyBasic.s 			page 9


 202              	  _FUNC \label 
 203              	  .endm 
 204              	
 205              	
 206              	/********************************
 207              	    dictionary structure
 208              	------------------------------
 209              	 format:
 210              	   link:    
 211              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 212              	   cmd_name: 31 characters max 
 213              	   cmd_index: 2 bytes 
 214              	**********************************/
 215              		.macro _dict_entry tok_type,name,cmd_idx 
 216              	  .word LINK 
 217              	  .word \cmd_idx 
 218              		.word \tok_type  	
 219              		.equ LINK,.
 220              		.asciz "\name"
 221              		.p2align 2 
 222              		.endm 
 223              	
 224              	  // pop parameter in register 
 225              	  .macro _POP  reg 
 226              	  ldmia  DP!,{\reg}
 227              	  .endm 
 228              	
 229              	  // push register on parameter stack 
 230              	  .macro _PUSH reg 
 231              	  stmdb DP!,{\reg}
 232              	  .endm 
 233              	
 234              	 // create a text data 
 235              	 .macro _TEXT label,text
 236              	 \label: .asciz "\text"
 237              	 .p2align 2 
 238              	 .endm 
  27              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
ARM GAS  tinyBasic.s 			page 10


  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
ARM GAS  tinyBasic.s 			page 11


  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  28              	
  29              	  .section  .text , "ax", %progbits 
  30              	
  31              	
  32              	/********************************
  33              	    HELPER FUNCTIONS 
  34              	********************************/
ARM GAS  tinyBasic.s 			page 12


  35              	
  36              	/**********************************
  37              	   strlen 
  38              	   return length of asciz 
  39              	   input:
  40              	      r0    *asciz 
  41              	   output:
  42              	      r0   length 
  43              	   use:
  44              	      r1   string length 
  45              	      r2   char 
  46              	*********************************/
  47              	    _GBL_FUNC strlen 
  48 0000 06B4     	    push {r1,r2}
  49 0002 81EA0101 	    eor r1,r1  // strlen 
  50 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  51 000a 12B1     	    cbz r2,9f  
  52 000c 01F10101 	    add r1,#1 
  53 0010 F9E7     	    b 1b 
  54 0012 0846     	9:  mov r0,r1 
  55 0014 06BC     	    pop {r1,r2}
  56 0016 7047     	    _RET     
  57              	
  58              	
  59              	/******************************
  60              	   cmove 
  61              	   move n characters 
  62              	   input:
  63              	    r0      src 
  64              	    r1      dest 
  65              	    r2      count 
  66              	  output:
  67              	    none:
  68              	  use: 
  69              	    r3    temp   
  70              	******************************/
  71              	    _GBL_FUNC cmove
  72 0018 08B4     	    push {r3} 
  73 001a 1240     	    ands r2,r2
  74 001c 10D0     	    beq 9f 
  75 001e 8842     	    cmp r0,r1 
  76 0020 06D4     	    bmi move_from_end 
  77              	move_from_low: // move from low address toward high 
  78 0022 10F8013B 	    ldrb r3,[r0],#1
  79 0026 01F8013B 	    strb r3,[r1],#1
  80 002a 013A     	    subs r2,#1
  81 002c F9D1     	    bne move_from_low
  82 002e 07E0     	    b 9f 
  83              	move_from_end: // move from high address toward low 
  84 0030 1044     	    add r0,r0,r2 
  85 0032 1144     	    add r1,r1,r2     
  86 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  87 0038 01F8013D 	    strb r3,[r1,#-1]!
  88 003c 013A     	    subs r2,#1
  89 003e F9D1     	    bne 1b 
  90 0040 08BC     	9:  pop {r3}
  91 0042 7047     	    _RET
ARM GAS  tinyBasic.s 			page 13


  92              	
  93              	/*********************************
  94              	  strcpy 
  95              	  copy .asciz string 
  96              	  input:
  97              	    r0   *string
  98              	    r1   *dest_buffer
  99              	  output:
 100              	    r0   *string
 101              	    r1   *dest_buffer 
 102              	  use:
 103              	    r2   char
 104              	**********************************/
 105              	    _GBL_FUNC strcpy 
 106 0044 07B4     	    push {r0,r1,r2}
 107 0046 10F8012B 	1:  ldrb r2,[r0],#1
 108 004a 12B1     	    cbz  r2, 9f 
 109 004c 01F8012B 	    strb r2,[r1],#1
 110 0050 F9E7     	    b 1b 
 111 0052 0A70     	9:  strb r2,[r1] 
 112 0054 07BC     	    pop {r0,r1,r2}
 113 0056 7047     	    _RET 
 114              	
 115              	/*********************************
 116              	  strcmp 
 117              	  compare 2  .asciz strings 
 118              	  input:
 119              	    r0  *str1 
 120              	    r1  *str2
 121              	  output:
 122              	    r0  <0 str1<str2 
 123              	        0  str1==str2 
 124              	        >0  str1>str2  
 125              	  use:
 126              	    r2  *str1
 127              	    r3 char 1 
 128              	    r7 char 2  
 129              	*********************************/
 130              	  _FUNC strcmp
 131 0058 8CB4     	    push {r2,r3,r7}
 132 005a 0246     	    mov r2, r0
 133              	1:
 134 005c 12F8013B 	    ldrb r3,[r2],#1  
 135 0060 11F8017B 	    ldrb r7,[r1],#1
 136 0064 13B1     	    cbz r3, 2f 
 137 0066 0FB1     	    cbz r7, 2f 
 138 0068 D81B     	    subs r0,r3,r7 
 139 006a F7D0     	    beq 1b
 140 006c A3EB0700 	2:  sub r0,r3,r7 
 141 0070 8CBC     	    pop {r2,r3,r7}
 142 0072 7047     	    _RET 
 143              	
 144              	/**********************************
 145              	    prt_tok 
 146              	    print token id and value 
 147              	  input:
 148              	    r0    id 
ARM GAS  tinyBasic.s 			page 14


 149              	    r1    value 
 150              	  output:
 151              	    none
 152              	  use:
 153              	
 154              	***********************************/
 155              	    _FUNC prt_tok 
 156 0074 03B4     	    push {r0,r1}
 157 0076 1248     	    ldr r0,tok_msg 
 158 0078 00B5FFF7 	    _CALL uart_puts 
 158      FEFF5DF8 
 158      04EB
 159 0082 01BC     	    pop {r0}
 160 0084 4FF01001 	    mov r1,#16 
 161 0088 00B5FFF7 	    _CALL print_int 
 161      FEFF5DF8 
 161      04EB
 162 0092 4FF02000 	    mov r0,#SPACE 
 163 0096 00B5FFF7 	    _CALL uart_putc 
 163      FEFF5DF8 
 163      04EB
 164 00a0 01BC     	    pop {r0}
 165 00a2 4FF01001 	    mov r1,#16 
 166 00a6 00B5FFF7 	    _CALL print_int
 166      FEFF5DF8 
 166      04EB
 167 00b0 4FF00D00 	    mov r0,#CR 
 168 00b4 00B5FFF7 	    _CALL uart_putc  
 168      FEFF5DF8 
 168      04EB
 169 00be 7047     	    _RET 
 170 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 170      6E3A2000 
 171              	
 172              	/******************************************
 173              	    prt_row 
 174              	    print memory content in byte format 
 175              	    input:
 176              	      r0    address 
 177              	      r1    count 
 178              	    output:
 179              	      r0    address+count 
 180              	    use:
 181              	      r2    address 
 182              	      r3    count 
 183              	****************************************/
 184              	    _FUNC prt_row 
 185 00c8 0FB4     	    push {r0,r1,r2,r3}
 186 00ca 0246     	    mov r2,r0
 187 00cc 0B46     	    mov r3,r1  
 188 00ce 4FF01001 	    mov r1,#16 
 189 00d2 00B5FFF7 	    _CALL print_int 
 189      FEFF5DF8 
 189      04EB
 190 00dc 4FF00300 	    mov r0,#3
 191 00e0 00B5FFF7 	    _CALL spaces  
 191      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 15


 191      04EB
 192              	// print bytes values in hexadecimal 
 193 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 194 00ee 00B5FFF7 	    _CALL print_hex
 194      FEFF5DF8 
 194      04EB
 195 00f8 013B     	    subs r3,#1 
 196 00fa F6D1     	    bne 1b 
 197 00fc 4FF00200 	    mov r0,#2 
 198 0100 00B5FFF7 	    _CALL spaces
 198      FEFF5DF8 
 198      04EB
 199              	// print characters      
 200 010a 03BC     	    pop {r0,r1}
 201 010c 00B500F0 	    _CALL prt_chars 
 201      0DF85DF8 
 201      04EB
 202 0116 4FF00D00 	    mov r0,#CR 
 203 011a 00B5FFF7 	    _CALL uart_putc 
 203      FEFF5DF8 
 203      04EB
 204 0124 1046     	    mov r0,r2
 205 0126 0CBC     	    pop {r2,r3}      
 206 0128 7047     	    _RET 
 207              	
 208              	/************************************
 209              	    prt_chars 
 210              	    print n ascii character starting 
 211              	    at address 
 212              	    input: 
 213              	      r0    address 
 214              	      r1    count 
 215              	    output:
 216              	      r0    address + count
 217              	    use:
 218              	      r2    address 
 219              	***********************************/
 220 012a 00BF     	    _FUNC prt_chars 
 221 012c 04B4     	    push {r2}
 222 012e 0246     	    mov r2,r0
 223 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 224 0134 2028     	    cmp r0,#SPACE 
 225 0136 01D5     	    bpl 2f 
 226 0138 4FF05F00 	    mov r0,#'_' 
 227 013c 00B5FFF7 	2:  _CALL uart_putc
 227      FEFF5DF8 
 227      04EB
 228 0146 0139     	    subs r1,#1 
 229 0148 F2D1     	    bne 1b 
 230 014a 1046     	    mov r0,r2 
 231 014c 04BC     	    pop {r2}
 232 014e 7047     	    _RET 
 233              	
 234              	/****************************************
 235              	    dump 
 236              	    print memory content in hexadecimal 
 237              	    16 bytes per row 
ARM GAS  tinyBasic.s 			page 16


 238              	    input:
 239              	      r0  address 
 240              	      r1  count 
 241              	    ouput:
 242              	      none 
 243              	    use:
 244              	
 245              	****************************************/
 246              	    _FUNC dump 
 247 0150 04B4     	    push {r2}
 248 0152 0A46     	    mov r2,r1 
 249 0154 4FF01001 	1:  mov r1,#16
 250 0158 00B5FFF7 	    _CALL prt_row 
 250      B5FF5DF8 
 250      04EB
 251 0162 103A     	    subs r2,#16 
 252 0164 F6D5     	    bpl 1b 
 253 0166 04BC     	2:  pop {r2}
 254 0168 7047     	    _RET 
 255              	
 256              	/***************************************
 257              	    search_lineno 
 258              	    localize BASIC line from its number 
 259              	    input:
 260              	      r0   line# 
 261              	    output: 
 262              	      r0   adr where found || adr new to be inserted 
 263              	      r1   0 found || !0 not found  
 264              	    use:
 265              	      r0   scan address 
 266              	      r1   temp   
 267              	      r2   address end of text
 268              	      r3   target line#
 269              	****************************************/    
 270 016a 00BF     	    _FUNC search_lineno
 271 016c 0CB4     	    push {r2,r3} 
 272 016e 0346     	    mov r3,r0 // target 
 273 0170 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 274 0172 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 275 0174 9042     	1:  cmp r0,r2 
 276 0176 05D0     	    beq  8f
 277 0178 0188     	    ldrh r1,[r0]
 278 017a C91A     	    subs r1,r3 
 279 017c 04D5     	    bpl 9f 
 280 017e 8178     	    ldrb r1,[r0,#2]
 281 0180 0844     	    add r0,r1
 282 0182 F7E7     	    b 1b 
 283 0184 4FF0FF31 	8:  mov r1,#-1 
 284 0188 0CBC     	9:  pop {r2,r3}
 285 018a 7047     	    _RET 
 286              	
 287              	
 288              	/********************************************
 289              	    delete_line 
 290              	    delete BASIC line at addr 
 291              	    input:
 292              	      r0    address 
ARM GAS  tinyBasic.s 			page 17


 293              	    output:
 294              	      r0    address  
 295              	    use: 
 296              	      r1    dest adr
 297              	      r2    bytes to move 
 298              	      T1    length line to delete 
 299              	      T2    txtend 
 300              	********************************************/
 301              	    _FUNC delete_line 
 302 018c 2DE90703 	    push {r0,r1,r2,T1,T2}
 303 0190 0146     	    mov r1,r0 // dest 
 304 0192 91F80280 	    ldrb T1,[r1,#2] // line length 
 305 0196 4044     	    add r0,T1  // src
 306 0198 D4F83490 	    ldr T2,[UPP,#TXTEND]
 307 019c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 308 01a0 00B5FFF7 	    _CALL cmove
 308      FEFF5DF8 
 308      04EB
 309 01aa A9EB0809 	    sub T2,T1 // txtend-count 
 310 01ae C4F83480 	    str T1,[UPP,#TXTEND] 
 311 01b2 BDE80703 	    pop {r0,r1,r2,T1,T2}
 312 01b6 7047     	    _RET 
 313              	
 314              	/******************************************
 315              	    create_gap 
 316              	    create a gap in text area to insert new line 
 317              	    input:
 318              	      r0    adr 
 319              	      r1    length 
 320              	    output:
 321              	      r0    adr 
 322              	    use:
 323              	      T1    length 
 324              	      T2    txtend 
 325              	************************************************/
 326              	    _FUNC create_gap 
 327 01b8 2DE90503 	    push {r0,r2,T1,T2}
 328 01bc 8846     	    mov T1,R1
 329 01be 0144     	    add r1,r0  // dest 
 330 01c0 D4F83490 	    ldr T2,[UPP,#TXTEND]
 331 01c4 A9EB0002 	    sub r2,T2,r0 
 332 01c8 00B5FFF7 	    _CALL cmove
 332      FEFF5DF8 
 332      04EB
 333 01d2 C144     	    add T2,T1 
 334 01d4 C4F83490 	    str T2,[UPP,#TXTEND]
 335 01d8 BDE80503 	    pop {r0,r2,T1,T2}
 336 01dc 7047     	    _RET 
 337              	
 338              	/************************************************
 339              	    insert_line 
 340              	    insert BASIC line in text area 
 341              	    first search if line with same number exist 
 342              	    replace if so. 
 343              	    input:
 344              	      r0    *buffer to insert 
 345              	    output:
ARM GAS  tinyBasic.s 			page 18


 346              	      none 
 347              	    use: 
 348              	      T1     *buffer
 349              	      T2     temp  
 350              	************************************************/ 
 351 01de 00BF     	    _FUNC insert_line 
 352 01e0 2DE90203 	    push {r1,T1,T2}
 353 01e4 8046     	    mov T1,r0 
 354 01e6 B8F80000 	    ldrh r0,[T1]
 355 01ea 00B5FFF7 	    _CALL search_lineno 
 355      BEFF5DF8 
 355      04EB
 356 01f4 49B9     	    cbnz  r1, 1f // line# doesn't exist
 357              	// already exist 
 358 01f6 00B5FFF7 	    _CALL delete_line // delete old one 
 358      C8FF5DF8 
 358      04EB
 359 0200 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 360 0204 B9F1030F 	    cmp T2,#3 
 361 0208 0DD0     	    beq 9f
 362              	1: //insert new line 
 363 020a 98F80210 	    ldrb r1,[T1,#2]
 364 020e 00B5FFF7 	    _CALL create_gap 
 364      D2FF5DF8 
 364      04EB
 365 0218 4146     	    mov r1,T1 
 366 021a 8A78     	    ldrb r2,[r1,#2]
 367 021c 00B5FFF7 	    _CALL cmove 
 367      FEFF5DF8 
 367      04EB
 368 0226 BDE80203 	9:  pop {r1,T1,T2}
 369 022a 7047     	    _RET 
 370              	
 371              	/*********************************
 372              	    compile 
 373              	    tokenize source line 
 374              	  input:
 375              	    none 
 376              	  output:
 377              	    r0 
 378              	  use:
 379              	
 380              	***********************************/
 381              	    _FUNC compile
 382              	
 383 022c 7047     	    _RET 
 384              	
 385              	
 386              	/**********************************
 387              	      BASIC commands 
 388              	**********************************/
 389              	
 390              	/*********************************
 391              	    syntax_error 
 392              	    display syntax error message and 
 393              	    abort program 
 394              	  input:
ARM GAS  tinyBasic.s 			page 19


 395              	    none  
 396              	  output: 
 397              	    none 
 398              	  use:
 399              	*********************************/
 400 022e 00BF     	    _FUNC syntax_error 
 401 0230 4FF00200 	    mov r0,#ERR_SYNTAX
 402 0234 00E0     	    b tb_error 
 403              	
 404              	/*********************************
 405              	    tb_error 
 406              	    display BASIC error and 
 407              	    abort program. 
 408              	  input:
 409              	    r0    error code   
 410              	  output: 
 411              	    none 
 412              	  use:
 413              	    r1    temp 
 414              	*********************************/
 415 0236 00BF     	    _FUNC tb_error 
 416 0238 CA49     	    ldr r1,=err_msg 
 417 023a 4FEA8000 	    lsl r0,#2 
 418 023e 0844     	    add r0,r1 
 419 0240 0068     	    ldr r0,[r0]
 420 0242 00B5FFF7 	    _CALL uart_puts
 420      FEFF5DF8 
 420      04EB
 421 024c 5748     	    ldr r0,dstack_empty
 422 024e 8546     	    mov sp,r0 
 423 0250 80E1     	    b  warm_start  
 424 0252 7047     	    _RET 
 425              	err_msg:
 426 0254 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 426      00000000 
 426      0D000000 
 426      1B000000 
 426      34000000 
 427 026c 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 427      6F000000 
 427      89000000 
 427      9A000000 
 427      AB000000 
 428 0280 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 428      EA000000 
 428      FA000000 
 428      0E010000 
 428      21010000 
 429              	
 430              	    .section .rodata.tb_error 
 431              	
 432 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 432      72792066 
 432      756C6C0A 
 432      00
 433 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 433      61782065 
ARM GAS  tinyBasic.s 			page 20


 433      72726F72 
 433      0A00
 434 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 434      206F7065 
 434      72617469 
 434      6F6E206F 
 434      76657266 
 435 0034 64697669 	err_div0: .asciz "division by 0\n" 
 435      73696F6E 
 435      20627920 
 435      300A00
 436 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 436      6C696420 
 436      6C696E65 
 436      206E756D 
 436      6265722E 
 437 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 437      74696D65 
 437      206F6E6C 
 437      79207573 
 437      6167652E 
 438 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 438      616E6420 
 438      6C696E65 
 438      206F6E6C 
 438      79207573 
 439 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 439      69636174 
 439      65206E61 
 439      6D652E0A 
 439      00
 440 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 440      206E6F74 
 440      20666F75 
 440      6E642E0A 
 440      00
 441 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 441      76616C75 
 441      652E0A00 
 442 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 442      20696E20 
 442      65787465 
 442      6E646564 
 442      206D656D 
 443 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 443      61746120 
 443      666F756E 
 443      642E0A00 
 444 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 444      726F6772 
 444      616D2069 
 444      6E205241 
 444      4D210A00 
 445 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 445      20737973 
 445      74656D20 
 445      66756C6C 
ARM GAS  tinyBasic.s 			page 21


 445      2E0A00
 446 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 446      65722066 
 446      756C6C0A 
 446      00
 447              	
 448 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 448      2074696D 
 448      65206572 
 448      726F722C 
 448      2000
 449 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 449      70696C65 
 449      20657272 
 449      6F722C20 
 449      00
 450 0151 6C617374 	tk_id: .asciz "last token id: "
 450      20746F6B 
 450      656E2069 
 450      643A2000 
 451              	
 452              	
 453              	    .section  .text , "ax", %progbits 
 454              	
 455              	/*********************************
 456              	     arg_list 
 457              	     extract command arguments
 458              	     and push them on parameter stack 
 459              	    input:
 460              	       none 
 461              	    output:
 462              	       r0  arguments count found
 463              	       args on dstack in order left to right 
 464              	    use:
 465              	       T1   arguments counter  
 466              	********************************/
 467              	     _FUNC arg_list 
 468 0294 4DF8048D 	     push {T1}
 469              	
 470 0298 5DF8048B 	     pop {T1}      
 471 029c 7047     	     _RET 
 472              	
 473              	/************************************
 474              	    func_args 
 475              	    get and stack function parameters
 476              	  input:
 477              	    none 
 478              	  output:
 479              	    r0    parameter count 
 480              	  use:
 481              	
 482              	************************************/
 483 029e 00BF     	    _FUNC func_args 
 484              	
 485              	  
 486 02a0 7047     	    _RET 
 487              	
ARM GAS  tinyBasic.s 			page 22


 488              	
 489              	
 490              	
 491              	/*********************************
 492              	   BASIC: BTGL adr, mask   
 493              	   toggle bits [adr]=[adr]^mask  
 494              	   input:
 495              	     r0    adr 
 496              	     r1    mask 
 497              	    output;
 498              	      none 
 499              	    use:
 500              	      T1   temp
 501              	      T2   temp  
 502              	*******************************/     
 503 02a2 00BF     	    _FUNC BTGL 
 504              	
 505 02a4 7047     	    _RET 
 506              	
 507              	
 508              	
 509              	
 510              	//---------------------------------
 511              	// dictionary search 
 512              	// input:
 513              	//	 r0   target name
 514              	//   r1		dictionary first name field address  
 515              	// output:
 516              	//  r0 		token attribute 
 517              	//  r1		cmd_index if r0!=TK_NONE  
 518              	// use:
 519              	//  r2   length dictionary name 
 520              	//---------------------------------
 521 02a6 00BF     	  _FUNC search_dict
 522 02a8 04B4     	  push {r2}
 523 02aa 03B4     	  push {r0,r1}
 524              	1:
 525 02ac 11F8010B 	  ldrb r0,[r1],#1 
 526 02b0 0043     	  orrs r0,r0
 527 02b2 10D0     	  beq 9f // null byte  -> end of dictinary 
 528 02b4 0098     	  ldr r0,[sp]  
 529 02b6 00B5FFF7 	  _CALL strcmp 
 529      CEFE5DF8 
 529      04EB
 530 02c0 04D0     	  beq 2f 
 531 02c2 0199     	  ldr r1,[sp,#4]
 532 02c4 51F80C1C 	  ldr r1,[r1,#-12]
 533 02c8 0191     	  str r1,[sp,#4]
 534 02ca EFE7     	  b 1b   
 535              	2: // found
 536 02cc 0199     	  ldr r1,[sp,#4]
 537 02ce 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 538 02d2 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 539 02d6 02B0     	9: add sp,#8  // drop pushed r0,r1
 540 02d8 04BC     	   pop {r2}
 541 02da 7047     	   _RET 
 542              	
ARM GAS  tinyBasic.s 			page 23


 543              	/************************************
 544              	    print firmware version 
 545              	    input: 
 546              	      none 
 547              	    output:
 548              	      none 
 549              	    use:
 550              	      r0 
 551              	***********************************/
 552              	    _FUNC prt_version 
 553 02dc A248     	    ldr r0,=version_msg 
 554 02de 00B5FFF7 	    _CALL uart_puts
 554      FEFF5DF8 
 554      04EB
 555 02e8 9FF87600 	    ldrb r0,version 
 556 02ec 4FEA1010 	    lsr r0,#4 
 557 02f0 00F13000 	    add r0,#'0' 
 558 02f4 3A28     	    cmp r0,#'9'+1 
 559 02f6 01D4     	    bmi 1f 
 560 02f8 00F10700 	    add r0,#7 
 561              	  1:
 562 02fc 00B5FFF7 	    _CALL uart_putc 
 562      FEFF5DF8 
 562      04EB
 563 0306 4FF02E00 	    mov r0,#'. 
 564 030a 00B5FFF7 	    _CALL uart_putc 
 564      FEFF5DF8 
 564      04EB
 565 0314 9FF84A00 	    ldrb r0,version 
 566 0318 00F00F00 	    and r0,#15 
 567 031c 00F13000 	    add r0,'0' 
 568 0320 3A28     	    cmp r0,#'9'+1 
 569 0322 01D4     	    bmi 1f 
 570 0324 00F10700 	    add r0,#7
 571              	  1: 
 572 0328 00B5FFF7 	    _CALL uart_putc 
 572      FEFF5DF8 
 572      04EB
 573 0332 4FF00D00 	    mov r0,#CR 
 574 0336 00B5FFF7 	    _CALL uart_putc 
 574      FEFF5DF8 
 574      04EB
 575 0340 7047     	    _RET  
 576              	version_msg:
 577 0342 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 577      65207069 
 577      6C6C2074 
 577      696E7920 
 577      42415349 
 578              	version:
 579 0362 10       	    .byte 0x10 
 580 0363 00       	    .p2align 2 
 581              	
 582              	
 583              	/*********************************
 584              	   cold_start 
 585              	   initialize BASIC interpreter 
ARM GAS  tinyBasic.s 			page 24


 586              	   input:
 587              	     none 
 588              	   output:
 589              	    none 
 590              	   use:
 591              	     r0,r1,r2,r3 
 592              	*********************************/
 593              	    _GBL_FUNC cold_start 
 594 0364 0FB4     	    push {r0,r1,r2,r3}
 595              	// initialise parameters stack
 596 0366 DFF844C0 	   ldr DP,dstack_empty     
 597              	//copy system variables to ram 
 598 036a 4FF00004 	    _MOV32 UPP,RAM_ADR 
 598      C2F20004 
 599 0372 0C48     	    ldr r0,src_addr 
 600 0374 0C49     	    ldr r1,dest_addr
 601 0376 0968     	    ldr r1,[r1] 
 602 0378 0C44     	    add UPP,r1 // system variables base address   
 603 037a 2146     	    mov r1,UPP 
 604 037c 4FF0D002 	    mov r2,#ulast-uzero
 605 0380 00B5FFF7 	    _CALL cmove  
 605      FEFF5DF8 
 605      04EB
 606 038a 00B5FFF7 	    _CALL prt_version 
 606      A6FF5DF8 
 606      04EB
 607 0394 0FBC     	    pop {r0,r1,r2,r3}
 608 0396 7047     	    _RET
 609 0398 00B500F0 	    _CALL warm_init 
 609      25F85DF8 
 609      04EB
 610 03a2 33E0     	    b cmd_line   
 611              	src_addr:
 612 03a4 00000000 	  .word uzero
 613              	dest_addr:
 614 03a8 00000000 	  .word vectors_size
 615              	dstack_empty:
 616 03ac 00000000 	   .word _dstack 
 617              	
 618              	/*****************************
 619              	    clear_vars 
 620              	    initialize variables to 0
 621              	  input:
 622              	    none 
 623              	  output:
 624              	    none 
 625              	  use:
 626              	    r0,r1,r2 
 627              	*****************************/
 628              	    _FUNC clear_vars 
 629 03b0 07B4     	    push {r0,r1,r2}
 630 03b2 80EA0000 	    eor r0,r0 
 631 03b6 04F16001 	    add r1,UPP,#VARS
 632 03ba 4FF01A02 	    mov r2,#26
 633 03be 41F8040B 	1:  str r0,[r1],#4 
 634 03c2 013A     	    subs r2,#1
 635 03c4 FBD1     	    bne 1b  
ARM GAS  tinyBasic.s 			page 25


 636 03c6 07BC     	    pop {r0,r1,r2}
 637 03c8 7047     	    _RET 
 638              	
 639              	/*****************************
 640              	   clear_basic 
 641              	   reset BASIC text pointers 
 642              	   and clear variables 
 643              	*****************************/
 644 03ca 00BF     	    _FUNC clear_basic
 645 03cc 80EA0000 	  	eor r0,r0 
 646 03d0 6060     	    str r0,[UPP,#COUNT]
 647 03d2 2060     	    str r0,[UPP,#IN_SAVED]
 648 03d4 04F1C800 	    add r0,UPP,#FREE_RAM
 649 03d8 2063     	    str r0,[UPP,#TXTBGN]
 650 03da 6063     	    str r0,[UPP,#TXTEND]
 651 03dc 00B5FFF7 	    _CALL clear_vars 
 651      E7FF5DF8 
 651      04EB
 652 03e6 7047     	    _RET  
 653              	
 654              	/***********************************
 655              	   warm_init 
 656              	   initialize interpreter context 
 657              	  input:
 658              	    none
 659              	  output:
 660              	    none 
 661              	  use:
 662              	    r0 
 663              	***********************************/
 664              	warm_init:
 665 03e8 4FF0000A 		mov IN,#0 // BASIC line index 
 666 03ec 4FF0000B 	  mov BPTR,#0 // BASIC line address 
 667 03f0 80EA0000 	  eor r0,r0 
 668 03f4 A060     	  str r0,[UPP,#BASICPTR]
 669 03f6 2060     	  str r0,[UPP,#IN_SAVED]
 670 03f8 6060     	  str r0,[UPP,#COUNT]  
 671 03fa 2064     		str r0,[UPP,#FLAGS]
 672 03fc A063     	  str r0,[UPP,#LOOP_DEPTH] 
 673 03fe 4FF00400 	  mov r0, #DEFAULT_TAB_WIDTH
 674 0402 6064     	  str r0,[UPP,#TAB_WIDTH]
 675 0404 4FF00A00 		mov r0,#10 // default base decimal 
 676 0408 A061     		str r0,[UPP,#BASE]
 677 040a 7047     	  _RET  
 678              	
 679              	
 680              	/**********************************
 681              	   cmd_line 
 682              	   shell command line 
 683              	   input:
 684              	      none 
 685              	   output:
 686              	      none 
 687              	   use:
 688              	
 689              	***********************************/
 690              	    _FUNC cmd_line 
ARM GAS  tinyBasic.s 			page 26


 691 040c 4FF00D00 	    mov r0,#CR 
 692 0410 00B5FFF7 	    _CALL uart_putc 
 692      FEFF5DF8 
 692      04EB
 693 041a 4D48     	1:  ldr r0,tib
 694 041c 00B5FFF7 	    _CALL readln 
 694      FEFF5DF8 
 694      04EB
 695 0426 0040     	    ands r0,r0 // empty line 
 696 0428 F7D0     	    beq 1b 
 697 042a 00B5FFF7 	    _CALL compile // tokenize BASIC text
 697      FEFE5DF8 
 697      04EB
 698 0434 0040     	    ands r0,r0 
 699 0436 F0D0     	    beq 1b  // tokens stored in text area 
 700              	// interpret tokenized line 
 701              	interpreter:
 702 0438 8AF0030A 	   eor IN,#3 
 703 043c D4F808B0 	   ldr BPTR,[UPP,#BASICPTR]
 704 0440 6068     	   ldr r0,[UPP,#COUNT]
 705 0442 8245     	   cmp IN,r0  
 706 0444 16D4     	   bmi interp_loop
 707              	// end of line reached     
 708              	next_line:
 709 0446 206C     	  ldr r0,[UPP,#FLAGS]
 710 0448 10F0010F 	  tst r0,#(1<<FRUN)
 711 044c DED0     	  beq cmd_line 
 712 044e D4F800A0 	  ldr IN,[UPP,#IN_SAVED]
 713 0452 D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 714 0456 0AEB0B00 	  add r0,IN,BPTR  
 715 045a 616B     	  ldr r1,[UPP,#TXTEND]
 716 045c 8842     	  cmp r0,r1 
 717 045e 05D4     	  bmi 1f 
 718 0460 00B500F0 	  _CALL warm_start 
 718      77F85DF8 
 718      04EB
 719 046a CFE7     	  b cmd_line
 720              	1:
 721 046c 4FF0030A 	  mov IN,#3 
 722 0470 C4F800A0 	  str IN,[UPP,#IN_SAVED] 
 723              	interp_loop:
 724 0474 00B500F0 	  _CALL next_token 
 724      15F85DF8 
 724      04EB
 725 047e 0028     	  cmp r0,#TK_NONE 
 726 0480 E1D0     	  beq next_line 
 727 0482 0B28     	  cmp r0,#TK_CMD 
 728 0484 01D1     	  bne 2f
 729 0486 0847     	  BX r1
 730 0488 F4E7     	  b interp_loop 
 731              	2: 
 732 048a 0528     	  cmp r0,#TK_VAR 
 733 048c 02D1     	  bne 3f 
 734 048e 00F039BD 	  b let_var 
 735 0492 EFE7     	  b interp_loop
 736              	3: 
 737 0494 0628     	  cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 27


 738 0496 02D1     	  bne 4f
 739 0498 00F03EBD 	  b let_array 
 740 049c EAE7     	  b interp_loop
 741              	4: 
 742 049e 0128     	  cmp r0,#TK_COLON
 743 04a0 E8D0     	  beq interp_loop
 744 04a2 C5E6     	  b syntax_error
 745              	
 746              	/*****************************
 747              	  next_token 
 748              	  extract next token from token list 
 749              	  input:
 750              	    none 
 751              	  output:
 752              	    r0    token attribute
 753              	    r1    token value if there is one 
 754              	  use:
 755              	    none 
 756              	****************************/
 757              	  _FUNC next_token 
 758 04a4 6068     	  ldr r0,[UPP,#COUNT]
 759 04a6 8245     	  cmp IN,r0 
 760 04a8 02D4     	  bmi 0f 
 761 04aa 80EA0000 	  eor r0,r0 
 762 04ae 28E0     	  b 9f  
 763              	0: 
 764 04b0 C4F800A0 	  str IN,[UPP,#IN_SAVED]
 765 04b4 1BF80A00 	  ldrb r0,[BPTR,IN] // token attribute 
 766 04b8 00F03F00 	  and r0,#0x3f // limit mask 
 767 04bc 08F10108 	  add T1,#1
 768 04c0 2A49     	  ldr r1,=tbb_ofs 
 769 04c2 D1E800F0 	  tbb [r1,r0]
 770              	1: // pc reference point 
 771              	2: // .byte param
 772 04c6 19F80810 	  ldrb r1,[T2,T1]
 773 04ca 08F10108 	  add T1,#1 
 774 04ce 18E0     	  b 9f 
 775              	3: // .hword param 
 776 04d0 39F80810 	  ldrh r1,[T2,T1]
 777 04d4 08F10208 	  add T1,#2 
 778 04d8 13E0     	  b 9f 
 779              	4: // .word param  
 780 04da 59F80810 	  ldr r1,[T2,T1]
 781 04de 08F10408 	  add T1,#4
 782 04e2 0EE0     	  b 9f 
 783              	5: // .asciz param 
 784 04e4 09EB0801 	  add r1,T2,T1
 785 04e8 0846     	  mov r0,r1  
 786 04ea 00B5FFF7 	  _CALL strlen 
 786      FEFF5DF8 
 786      04EB
 787 04f4 8044     	  add T1,r0
 788 04f6 08F10108 	  add T1,#1
 789 04fa 4FF00200 	  mov r0,#TK_QSTR
 790 04fe 00E0     	  b 9f  
 791              	8: // syntax error 
 792 0500 96E6     	   b syntax_error 
ARM GAS  tinyBasic.s 			page 28


 793              	9:
 794 0502 C4F80080 	   str T1,[UPP,#IN_SAVED]
 795 0506 7047     	  _RET
 796              	
 797              	  .p2align 2
 798              	tbb_ofs: // offsets table for tbb instruction 
 799 0508 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2
 800 050a 0F000005 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2
 801 050e 1E1E1E1E 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2
 802 0512 0A0A0A0A 	  .byte (4b-1b)/2,(4b-1b)/2,(4b-1b)/2,(4b-1b)/2,(4b-1b)/2
 802      0A
 803 0517 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2  
 804 0519 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 804      1D1D1D1D 
 805 0521 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 805      1D1D1D1D 
 806 0529 1E1E1E1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 806      1D1D1D1D 
 807 0531 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 807      1D1D1D1D 
 808 0539 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 808      1D1D1D1D 
 809 0541 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 809      1D1D1D1D 
 810 0549 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 811              	
 812 054d 0000BF   	  .p2align 2 
 813              	
 814 0550 00000000 	tib: .word _tib 
 815              	
 816              	
 817              	/**********************************
 818              	    warm_start 
 819              	    start BASIC interpreter without 
 820              	    reset variables and code space 
 821              	  input:
 822              	    none 
 823              	  output:
 824              	    none 
 825              	  use:
 826              	
 827              	**********************************/
 828              	    _FUNC warm_start 
 829              	// initialise parameters stack
 830 0554 5FF8ACC1 	   ldr DP,dstack_empty     
 831              	
 832 0558 FCE7     	    b warm_start 
 833              	
 834              	/***********************************
 835              	    get_array_element 
 836              	    return index of array element 
 837              	  input:
 838              	    none 
 839              	  output:
 840              	    r0   address of element 
 841              	  use:
 842              	
ARM GAS  tinyBasic.s 			page 29


 843              	************************************/
 844 055a 00BF     	    _FUNC get_array_element 
 845              	
 846 055c 7047     	    _RET 
 847              	
 848 055e 00BF     	    _FUNC relation 
 849              	
 850 0560 7047     	    _RET 
 851              	
 852 0562 0000     	  .section .rodata 
 853              	
 854              	// system variables initial value 
 855              	uzero:
 856 0000 00000000 	  .word 0 // IN
 857 0004 00000000 	  .word 0 // IN_SAVED
 858 0008 00000000 	  .word 0 // COUNT
 859 000c 00000000 	  .word 0 // BASICPTR
 860 0010 00000000 	  .word 0 // DATAPTR
 861 0014 00000000 	  .word 0 // DATA
 862 0018 00000000 	  .word 0 // DATALEN
 863 001c 0A000000 	  .word 10 // BASE
 864 0020 00000000 	  .word 0 // TICKS
 865 0024 00000000 	  .word 0 // TIMER
 866 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 867 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 868 0030 00000000 	  .word 0 // FFREE
 869 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 870 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 871 003c 00000000 	  .word 0 //LOOP_DEPTH
 872 0040 00000000 	  .word 0 // ARRAY_SIZE
 873 0044 00000000 	  .word 0 // FLAGS
 874 0048 04000000 	  .word 4 // TAB_WIDTH
 875 004c 00000000 	  .word 0 // RX_HEAD
 876 0050 00000000 	  .word 0 // RX_TAIL
 877 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 877      00000000 
 877      00000000 
 877      00000000 
 878 0064 00000000 	  .space VARS_SIZE,0 // VARS
 878      00000000 
 878      00000000 
 878      00000000 
 878      00000000 
 879 00cc 00000000 	  .space 4, 0 // padding 
 880              	ulast:
 881              	
 882              	  .section .rodata.dictionary 
 883              	
 884              	// keep alphabetic order for BASIC names from Z-A
 885              	// this sort order is for for WORDS cmd output. 	
 886              	
 887              		.equ link, 0
 888              	kword_end:
 889 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 889      00000000 
 889      00000000 
 889      00000000 
ARM GAS  tinyBasic.s 			page 30


 890 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 890      64000000 
 890      0B000000 
 890      5854524D 
 890      54000000 
 891 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 891      65000000 
 891      0B000000 
 891      58524356 
 891      00000000 
 892 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 892      63000000 
 892      0C000000 
 892      584F5200 
 893 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 893      62000000 
 893      0B000000 
 893      57524954 
 893      45000000 
 894 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 894      61000000 
 894      0B000000 
 894      574F5244 
 894      53000000 
 895 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 895      60000000 
 895      0B000000 
 895      57414954 
 895      00000000 
 896 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 896      5F000000 
 896      0C000000 
 896      55535200 
 897 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 897      5E000000 
 897      0B000000 
 897      554E5449 
 897      4C000000 
 898 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 898      5D000000 
 898      0C000000 
 898      55464C41 
 898      53480000 
 899 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 899      5C000000 
 899      0C000000 
 899      55424F55 
 899      4E440000 
 900 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 900      5B000000 
 900      0B000000 
 900      544F4E45 
 900      00000000 
 901 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 901      5A000000 
 901      0B000000 
 901      544F0000 
ARM GAS  tinyBasic.s 			page 31


 902 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 902      58000000 
 902      0B000000 
 902      54494D45 
 902      52000000 
 903 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 903      59000000 
 903      0C000000 
 903      54494D45 
 903      4F555400 
 904 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 904      57000000 
 904      0C000000 
 904      5449434B 
 904      53000000 
 905 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 905      56000000 
 905      0B000000 
 905      53544F50 
 905      00000000 
 906 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 906      55000000 
 906      0B000000 
 906      53544550 
 906      00000000 
 907 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 907      54000000 
 907      0B000000 
 907      53504957 
 907      52000000 
 908 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 908      53000000 
 908      0B000000 
 908      53504953 
 908      454C0000 
 909 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 909      51000000 
 909      0C000000 
 909      53504952 
 909      44000000 
 910 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 910      52000000 
 910      0B000000 
 910      53504945 
 910      4E000000 
 911 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 911      50000000 
 911      0B000000 
 911      534C4545 
 911      50000000 
 912 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 912      4F000000 
 912      0C000000 
 912      53495A45 
 912      00000000 
 913 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 913      4E000000 
ARM GAS  tinyBasic.s 			page 32


 913      0B000000 
 913      53484F57 
 913      00000000 
 914 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 914      4D000000 
 914      0B000000 
 914      53415645 
 914      00000000 
 915 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 915      4C000000 
 915      0B000000 
 915      52554E00 
 916 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 916      4B000000 
 916      0C000000 
 916      52534849 
 916      46540000 
 917 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 917      4A000000 
 917      0C000000 
 917      524E4400 
 918 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 918      49000000 
 918      0B000000 
 918      52455455 
 918      524E0000 
 919 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 919      48000000 
 919      0B000000 
 919      52455354 
 919      4F524500 
 920 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 920      47000000 
 920      0B000000 
 920      52454D41 
 920      524B0000 
 921 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 921      46000000 
 921      0B000000 
 921      5245424F 
 921      4F540000 
 922 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 922      45000000 
 922      0C000000 
 922      52454144 
 922      00000000 
 923 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 923      44000000 
 923      0C000000 
 923      514B4559 
 923      00000000 
 924 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 924      43000000 
 924      0C000000 
 924      50525449 
 924      00000000 
 925 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
ARM GAS  tinyBasic.s 			page 33


 925      42000000 
 925      0C000000 
 925      50525448 
 925      00000000 
 926 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 926      41000000 
 926      0C000000 
 926      50525447 
 926      00000000 
 927 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 927      40000000 
 927      0C000000 
 927      50525446 
 927      00000000 
 928 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 928      3F000000 
 928      0C000000 
 928      50525445 
 928      00000000 
 929 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 929      3E000000 
 929      0C000000 
 929      50525444 
 929      00000000 
 930 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 930      3D000000 
 930      0C000000 
 930      50525443 
 930      00000000 
 931 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 931      3C000000 
 931      0C000000 
 931      50525442 
 931      00000000 
 932 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 932      3B000000 
 932      0C000000 
 932      50525441 
 932      00000000 
 933 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 933      3A000000 
 933      0B000000 
 933      5052494E 
 933      54000000 
 934 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 934      39000000 
 934      0C000000 
 934      504F5554 
 934      00000000 
 935 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 935      38000000 
 935      0B000000 
 935      504F4B45 
 935      00000000 
 936 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 936      35000000 
 936      0B000000 
ARM GAS  tinyBasic.s 			page 34


 936      504D4F44 
 936      45000000 
 937 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 937      37000000 
 937      0C000000 
 937      50494E50 
 937      00000000 
 938 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 938      36000000 
 938      0C000000 
 938      5045454B 
 938      00000000 
 939 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 939      34000000 
 939      0B000000 
 939      50415553 
 939      45000000 
 940 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 940      33000000 
 940      0C000000 
 940      50414400 
 941 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 941      32000000 
 941      0C000000 
 941      4F520000 
 942 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 942      31000000 
 942      0C000000 
 942      4F445200 
 943 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 943      30000000 
 943      0C000000 
 943      4E4F5400 
 944 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 944      2E000000 
 944      0B000000 
 944      4E455854 
 944      00000000 
 945 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 945      2F000000 
 945      0B000000 
 945      4E455700 
 946 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 946      2D000000 
 946      0C000000 
 946      4D554C44 
 946      49560000 
 947 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 947      2C000000 
 947      0C000000 
 947      4C534849 
 947      46540000 
 948 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 948      2B000000 
 948      0C000000 
 948      4C4F4700 
 949 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
ARM GAS  tinyBasic.s 			page 35


 949      2A000000 
 949      0B000000 
 949      4C4F4144 
 949      00000000 
 950 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 950      29000000 
 950      0B000000 
 950      4C495354 
 950      00000000 
 951 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 951      28000000 
 951      0B000000 
 951      4C455400 
 952 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 952      27000000 
 952      0C000000 
 952      4B455900 
 953 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 953      26000000 
 953      0B000000 
 953      49574447 
 953      52454600 
 954 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 954      25000000 
 954      0B000000 
 954      49574447 
 954      454E0000 
 955 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 955      24000000 
 955      0C000000 
 955      494E5645 
 955      52540000 
 956 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 956      23000000 
 956      0B000000 
 956      494E5055 
 956      54000000 
 957 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 957      22000000 
 957      0B000000 
 957      49460000 
 958 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 958      21000000 
 958      0C000000 
 958      49445200 
 959 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 959      20000000 
 959      0B000000 
 959      48455800 
 960 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 960      1F000000 
 960      0C000000 
 960      4750494F 
 960      00000000 
 961 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 961      1E000000 
 961      0B000000 
ARM GAS  tinyBasic.s 			page 36


 961      474F544F 
 961      00000000 
 962 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 962      1D000000 
 962      0B000000 
 962      474F5355 
 962      42000000 
 963 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 963      1C000000 
 963      0B000000 
 963      464F5247 
 963      45540000 
 964 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 964      1B000000 
 964      0B000000 
 964      464F5200 
 965 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 965      1A000000 
 965      0B000000 
 965      46435055 
 965      00000000 
 966 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 966      18000000 
 966      0B000000 
 966      454E4400 
 967 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 967      19000000 
 967      0C000000 
 967      45455052 
 967      4F4D0000 
 968 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 968      17000000 
 968      0B000000 
 968      44575249 
 968      54450000 
 969 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 969      16000000 
 969      0C000000 
 969      44524541 
 969      44000000 
 970 0608 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 970      15000000 
 970      0B000000 
 970      444F0000 
 971 0618 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 971      14000000 
 971      0B000000 
 971      44495200 
 972 0628 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 972      13000000 
 972      0B000000 
 972      44454300 
 973 0638 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 973      12000000 
 973      0C000000 
 973      44445200 
 974 0648 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
ARM GAS  tinyBasic.s 			page 37


 974      11000000 
 974      0B000000 
 974      44415441 
 974      4C4E0000 
 975 065c 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 975      10000000 
 975      0B000000 
 975      44415441 
 975      00000000 
 976 0670 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 976      0F000000 
 976      0C000000 
 976      43524C00 
 977 0680 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 977      0E000000 
 977      0C000000 
 977      43524800 
 978 0690 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 978      0D000000 
 978      0D000000 
 978      43484152 
 978      00000000 
 979 06a4 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 979      0C000000 
 979      0B000000 
 979      42594500 
 980 06b4 B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 980      0B000000 
 980      0B000000 
 980      42544F47 
 980      4C000000 
 981 06c8 C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 981      0A000000 
 981      0C000000 
 981      42544553 
 981      54000000 
 982 06dc D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 982      09000000 
 982      0B000000 
 982      42534554 
 982      00000000 
 983 06f0 E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 983      08000000 
 983      0B000000 
 983      42524553 
 983      00000000 
 984 0704 FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 984      07000000 
 984      0C000000 
 984      42495400 
 985 0714 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 985      06000000 
 985      0B000000 
 985      41575500 
 986 0724 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 986      05000000 
 986      0B000000 
ARM GAS  tinyBasic.s 			page 38


 986      4155544F 
 986      52554E00 
 987 0738 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 987      04000000 
 987      0C000000 
 987      41534300 
 988 0748 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 988      03000000 
 988      0C000000 
 988      414E4400 
 989 0758 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 989      02000000 
 989      0C000000 
 989      41444352 
 989      45414400 
 990 076c 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 990      01000000 
 990      0B000000 
 990      4144434F 
 990      4E000000 
 991              	first_link: 
 992 0780 78070000 	  .word LINK 
 993 0784 00000000 	  .word ABS_IDX 
 994 0788 0C       	  .byte TK_IFUNC
 995              	kword_dict: // first name field 
 996              	  .equ LINK,. 
 997 0789 41425300 	  .asciz "ABS" 
 998 078d 000000   	  .p2align 2 
 999              	
 1000              	//comands and fonctions address table 	
 1001              	code_addr:
 1002 0790 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 1002      00000000 
 1002      00000000 
 1002      00000000 
 1002      00000000 
 1003 07b0 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 1003      00000000 
 1003      00000000 
 1003      00000000 
 1003      00000000 
 1004 07cc 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 1004      00000000 
 1004      00000000 
 1004      00000000 
 1004      00000000 
 1005 07f0 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 1005      00000000 
 1005      00000000 
 1005      00000000 
 1005      00000000 
 1006 0810 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 1006      00000000 
 1006      00000000 
 1006      00000000 
 1006      00000000 
 1007 0830 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
ARM GAS  tinyBasic.s 			page 39


 1007      00000000 
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1008 0850 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 1008      00000000 
 1008      00000000 
 1008      00000000 
 1008      00000000 
 1009 0870 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1010 0890 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1010      00000000 
 1011 08b0 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 1011      00000000 
 1011      00000000 
 1011      00000000 
 1011      00000000 
 1012 08d0 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1013 08f0 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 1013      00000000 
 1013      00000000 
 1013      00000000 
 1013      00000000 
 1014 0910 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 1014      00000000 
 1014      00000000 
 1014      00000000 
 1014      00000000 
 1015 0928 00000000 		.word 0 
 1016              	
 1017              	/**********************************
 1018              	    BASIC commands and functions 
 1019              	**********************************/
 1020              	
 1021              	/*******************************
 1022              	  BASIC:  ABS expr 
 1023              	  input:
 1024              	    none 
 1025              	  output:
 1026              	    r0    token type 
 1027              	    r1    abs(expr)
 1028              	  use:
 1029              	    none 
 1030              	******************************/
 1031              	    _FUNC abs 
 1032 092c 00B5FFF7 	    _CALL arg_list
ARM GAS  tinyBasic.s 			page 40


 1032      FEFF5DF8 
 1032      04EB
 1033 0936 0128     	    cmp r0,#1 
 1034 0938 01D0     	    beq 1f 
 1035 093a FFF7FEBF 	    b syntax_error 
 1036 093e 5CF8041B 	1:  _POP r1 
 1037 0942 11F0004F 	    tst r1,#(1<<31)
 1038 0946 01D0     	    beq 9f
 1039 0948 C1F10001 	    rsb r1,#0 
 1040 094c 4FF00F00 	9:  mov r0,#TK_INTGR
 1041 0950 7047     	   _RET 
 1042              	
 1043 0952 0000     	    _FUNC power_adc
 1044 0954 7047     	    _RET
 1045              	
 1046 0956 0000     	    _FUNC analog_read
 1047 0958 7047     	    _RET
 1048              	
 1049 095a 0000     	    _FUNC bit_and
 1050 095c 7047     	    _RET
 1051              	
 1052 095e 0000     	    _FUNC ascii
 1053 0960 7047     	    _RET
 1054              	
 1055 0962 0000     	    _FUNC autorun
 1056 0964 7047     	    _RET
 1057              	
 1058 0966 0000     	    _FUNC awu
 1059 0968 7047     	    _RET
 1060              	
 1061 096a 0000     	    _FUNC bitmask
 1062 096c 7047     	    _RET 
 1063              	
 1064              	  
 1065              	  /*********************************
 1066              	   BASIC: BRES adr, mask   
 1067              	   reset bits [adr]= [adr] & ~mask  
 1068              	   input:
 1069              	     none 
 1070              	    output;
 1071              	      none 
 1072              	    use:
 1073              	      T1   temp
 1074              	      T2   temp 
 1075              	*******************************/     
 1076 096e 0000     	  _FUNC bit_reset
 1077 0970 00B5FFF7 	    _CALL arg_list 
 1077      FEFF5DF8 
 1077      04EB
 1078 097a 0228     	    cmp r0,#2 
 1079 097c 01D0     	    beq 1f 
 1080 097e FFF7FEBF 	    b syntax_error 
 1081 0982 5CF8041B 	1:  _POP r1 //mask 
 1082 0986 5CF8040B 	    _POP r0 //address 
 1083 098a D0F80090 	    ldr T2,[r0] 
 1084 098e 81F0FF31 	    eor r1,#-1 // ~mask 
 1085 0992 01EA0901 	    and r1,T2
ARM GAS  tinyBasic.s 			page 41


 1086 0996 0160     	    str r1,[r0]
 1087 0998 00F038BA 	    b interp_loop 
 1088              	
 1089              	
 1090              	/*********************************
 1091              	   BASIC: BSET adr, mask   
 1092              	   reset bits [adr]= [adr] & ~mask  
 1093              	   input:
 1094              	      none 
 1095              	    output;
 1096              	      none 
 1097              	    use:
 1098              	      T1   temp
 1099              	      T2   temp  
 1100              	*******************************/     
 1101              	    _FUNC bit_set
 1102 099c 00B5FFF7 	    _CALL arg_list 
 1102      FEFF5DF8 
 1102      04EB
 1103 09a6 0228     	    cmp r0,#2 
 1104 09a8 01D0     	    beq 1f 
 1105 09aa FFF7FEBF 	    b syntax_error 
 1106 09ae 5CF8041B 	1:  _POP r1 //mask 
 1107 09b2 5CF8040B 	    _POP r0 //address 
 1108 09b6 D0F80090 	    ldr T2,[r0] 
 1109 09ba 41EA0901 	    orr r1,T2
 1110 09be 0160     	    str r1,[r0]
 1111 09c0 00F038BA 	    b interp_loop 
 1112              	
 1113              	  /*********************************
 1114              	   BASIC: BTOGL adr, mask   
 1115              	   reset bits [adr]= [adr] & ~mask  
 1116              	   input:
 1117              	     r0    adr 
 1118              	     r1    mask 
 1119              	    output;
 1120              	      none 
 1121              	    use:
 1122              	      T1   temp
 1123              	      T2   temp  
 1124              	*******************************/     
 1125              	  _FUNC bit_toggle
 1126 09c4 00B5FFF7 	    _CALL arg_list 
 1126      FEFF5DF8 
 1126      04EB
 1127 09ce 0228     	    cmp r0,#2 
 1128 09d0 01D0     	    beq 1f 
 1129 09d2 FFF7FEBF 	    b syntax_error 
 1130 09d6 5CF8041B 	1:  _POP r1 //mask 
 1131 09da 5CF8040B 	    _POP r0 //address 
 1132 09de D0F80090 	    ldr T2,[r0] 
 1133 09e2 81EA0901 	    eor r1,T2
 1134 09e6 0160     	    str r1,[r0]
 1135 09e8 00F038BA 	    b interp_loop 
 1136              	
 1137              	    _FUNC bit_test
 1138 09ec 00F038BA 	    b interp_loop
ARM GAS  tinyBasic.s 			page 42


 1139              	
 1140              	    _FUNC bye
 1141 09f0 00F038BA 	    b interp_loop
 1142              	
 1143              	    _FUNC char
 1144 09f4 00F038BA 	    b interp_loop
 1145              	
 1146              	    _FUNC const_cr2
 1147 09f8 00F038BA 	    b interp_loop 
 1148              	
 1149              	    _FUNC const_cr1
 1150 09fc 00F038BA 	    b interp_loop
 1151              	
 1152              	    _FUNC data
 1153 0a00 00F038BA 	    b interp_loop
 1154              	
 1155              	    _FUNC data_line
 1156 0a04 00F038BA 	    b interp_loop
 1157              	
 1158              	    _FUNC const_ddr
 1159 0a08 00F038BA 	    b interp_loop
 1160              	
 1161              	    _FUNC dec_base
 1162 0a0c 00F038BA 	    b interp_loop
 1163              	
 1164              	    _FUNC directory
 1165 0a10 00F038BA 	    b interp_loop
 1166              	
 1167              	    _FUNC do_loop
 1168 0a14 00F038BA 	    b interp_loop
 1169              	
 1170              	    _FUNC digital_read
 1171 0a18 00F038BA 	    b interp_loop
 1172              	
 1173              	    _FUNC digital_write
 1174 0a1c 00F038BA 	    b interp_loop 
 1175              	
 1176              	    _FUNC cmd_end
 1177 0a20 00F038BA 	    b interp_loop
 1178              	
 1179              	    _FUNC const_eeprom_base
 1180 0a24 00F038BA 	    b interp_loop
 1181              	
 1182              	    _FUNC fcpu
 1183 0a28 00F038BA 	    b interp_loop
 1184              	
 1185              	    _FUNC for
 1186 0a2c 00F038BA 	    b interp_loop
 1187              	
 1188              	    _FUNC forget
 1189 0a30 00F038BA 	    b interp_loop
 1190              	
 1191              	    _FUNC gosub
 1192 0a34 00F038BA 	    b interp_loop
 1193              	
 1194              	    _FUNC goto
 1195 0a38 00F038BA 	    b interp_loop
ARM GAS  tinyBasic.s 			page 43


 1196              	
 1197              	    _FUNC gpio
 1198 0a3c 00F038BA 	    b interp_loop 
 1199              	
 1200              	    _FUNC hex_base
 1201 0a40 00F038BA 	    b interp_loop
 1202              	
 1203              	    _FUNC const_idr
 1204 0a44 00F038BA 	    b interp_loop
 1205              	
 1206              	    _FUNC if
 1207 0a48 00F038BA 	    b interp_loop
 1208              	
 1209              	    _FUNC input_var
 1210 0a4c 00F038BA 	    b interp_loop
 1211              	
 1212              	    _FUNC invert
 1213 0a50 00F038BA 	    b interp_loop
 1214              	
 1215              	    _FUNC enable_iwdg
 1216 0a54 00F038BA 	    b interp_loop
 1217              	
 1218              	    _FUNC refresh_iwdg
 1219 0a58 00F038BA 	    b interp_loop
 1220              	
 1221              	    _FUNC key
 1222 0a5c 00F038BA 	    b interp_loop 
 1223              	
 1224              	/******************************
 1225              	  BASIC: [let] var=expr 
 1226              	         [let] @(expr)=expr
 1227              	  input:
 1228              	    none 
 1229              	  output:
 1230              	    none 
 1231              	  use:
 1232              	
 1233              	****************************/         
 1234              	    _FUNC let
 1235 0a60 00B5FFF7 	    _CALL next_token 
 1235      FEFF5DF8 
 1235      04EB
 1236 0a6a 0528     	    cmp r0,#TK_VAR
 1237 0a6c 03D0     	    beq let_var 
 1238 0a6e 0628     	    cmp r0,#TK_ARRAY 
 1239 0a70 06D0     	    beq let_array 
 1240 0a72 FFF7FEBF 	    b syntax_error 
 1241              	let_var:
 1242 0a76 00B5FFF7 	    _CALL get_array_element
 1242      FEFF5DF8 
 1242      04EB
 1243              	let_array: 
 1244 0a80 4CF8040D 	    _PUSH r0 
 1245 0a84 00B5FFF7 	    _CALL next_token 
 1245      FEFF5DF8 
 1245      04EB
 1246 0a8e 3228     	    cmp r0,#TK_EQUAL 
ARM GAS  tinyBasic.s 			page 44


 1247 0a90 01D0     	    beq 1f 
 1248 0a92 FFF7FEBF 	    b syntax_error 
 1249 0a96 00B5FFF7 	1:  _CALL relation  
 1249      FEFF5DF8 
 1249      04EB
 1250 0aa0 0F28     	    cmp r0,#TK_INTGR
 1251 0aa2 01D0     	    beq 2f 
 1252 0aa4 FFF7FEBF 	    b syntax_error 
 1253 0aa8 5CF8040B 	2:  _POP r0 
 1254 0aac 0160     	    str r1,[r0]
 1255 0aae 4FF00000 	    mov r0,#TK_NONE 
 1256 0ab2 00F038BA 	    b interp_loop 
 1257              	
 1258 0ab6 0000     	    _FUNC list
 1259 0ab8 00F038BA 	    b interp_loop
 1260              	
 1261              	    _FUNC load
 1262 0abc 00F038BA 	    b interp_loop
 1263              	
 1264              	    _FUNC log2
 1265 0ac0 00F038BA 	    b interp_loop
 1266              	
 1267              	    _FUNC lshift
 1268 0ac4 00F038BA 	    b interp_loop
 1269              	
 1270              	    _FUNC muldiv
 1271 0ac8 00F038BA 	    b interp_loop
 1272              	
 1273              	    _FUNC next
 1274 0acc 00F038BA 	    b interp_loop
 1275              	
 1276              	    _FUNC new
 1277 0ad0 00F038BA 	    b interp_loop 
 1278              	
 1279              	    _FUNC func_not
 1280 0ad4 00F038BA 	    b interp_loop
 1281              	
 1282              	    _FUNC const_odr
 1283 0ad8 00F038BA 	    b interp_loop
 1284              	
 1285              	    _FUNC bit_or
 1286 0adc 00F038BA 	    b interp_loop
 1287              	
 1288              	    _FUNC pad_ref
 1289 0ae0 00F038BA 	    b interp_loop
 1290              	
 1291              	    _FUNC pause
 1292 0ae4 00F038BA 	    b interp_loop
 1293              	
 1294              	    _FUNC pin_mode
 1295 0ae8 00F038BA 	    b interp_loop
 1296              	
 1297              	    _FUNC peek
 1298 0aec 00F038BA 	    b interp_loop
 1299              	
 1300              	    _FUNC const_input
 1301 0af0 00F038BA 	    b interp_loop 
ARM GAS  tinyBasic.s 			page 45


 1302              	
 1303              	    _FUNC poke
 1304 0af4 00F038BA 	    b interp_loop
 1305              	
 1306              	    _FUNC const_output
 1307 0af8 00F038BA 	    b interp_loop
 1308              	
 1309              	    _FUNC print
 1310 0afc 00F038BA 	    b interp_loop
 1311              	
 1312              	    _FUNC const_porta
 1313 0b00 00F038BA 	    b interp_loop
 1314              	
 1315              	    _FUNC const_portb
 1316 0b04 00F038BA 	    b interp_loop
 1317              	
 1318              	    _FUNC const_portc
 1319 0b08 00F038BA 	    b interp_loop
 1320              	
 1321              	    _FUNC const_portd
 1322 0b0c 00F038BA 	    b interp_loop
 1323              	
 1324              	    _FUNC const_porte
 1325 0b10 00F038BA 	    b interp_loop 
 1326              	
 1327              	    _FUNC const_portf
 1328 0b14 00F038BA 	    b interp_loop
 1329              	
 1330              	    _FUNC const_portg
 1331 0b18 00F038BA 	    b interp_loop
 1332              	
 1333              	    _FUNC const_porth
 1334 0b1c 00F038BA 	    b interp_loop
 1335              	
 1336              	    _FUNC const_porti
 1337 0b20 00F038BA 	    b interp_loop
 1338              	
 1339              	    _FUNC qkey
 1340 0b24 00F038BA 	    b interp_loop
 1341              	
 1342              	    _FUNC read
 1343 0b28 00F038BA 	    b interp_loop
 1344              	
 1345              	    _FUNC remark
 1346 0b2c 00F038BA 	    b interp_loop 
 1347              	
 1348              	    _FUNC restore
 1349 0b30 00F038BA 	    b interp_loop
 1350              	
 1351              	    _FUNC return
 1352 0b34 00F038BA 	    b interp_loop
 1353              	
 1354              	    _FUNC  random
 1355 0b38 00F038BA 	    b interp_loop
 1356              	
 1357              	    _FUNC rshift
 1358 0b3c 00F038BA 	    b interp_loop
ARM GAS  tinyBasic.s 			page 46


 1359              	
 1360              	    _FUNC run
 1361 0b40 00F038BA 	    b interp_loop
 1362              	
 1363              	    _FUNC save
 1364 0b44 00F038BA 	    b interp_loop
 1365              	
 1366              	    _FUNC show
 1367 0b48 00F038BA 	    b interp_loop
 1368              	
 1369              	    _FUNC size
 1370 0b4c 00F038BA 	    b interp_loop 
 1371              	
 1372              	    _FUNC sleep
 1373 0b50 00F038BA 	    b interp_loop
 1374              	
 1375              	    _FUNC spi_read
 1376 0b54 00F038BA 	    b interp_loop
 1377              	
 1378              	    _FUNC spi_enable
 1379 0b58 00F038BA 	    b interp_loop
 1380              	
 1381              	    _FUNC spi_select
 1382 0b5c 00F038BA 	    b interp_loop
 1383              	
 1384              	    _FUNC spi_write
 1385 0b60 00F038BA 	    b interp_loop
 1386              	
 1387              	    _FUNC step
 1388 0b64 00F038BA 	    b interp_loop
 1389              	
 1390              	    _FUNC stop
 1391 0b68 00F038BA 	    b interp_loop
 1392              	
 1393              	    _FUNC get_ticks
 1394 0b6c 00F038BA 	    b interp_loop 
 1395              	
 1396              	    _FUNC set_timer
 1397 0b70 00F038BA 	    b interp_loop
 1398              	
 1399              	    _FUNC timeout
 1400 0b74 00F038BA 	    b interp_loop
 1401              	
 1402              	    _FUNC to
 1403 0b78 00F038BA 	    b interp_loop
 1404              	
 1405              	    _FUNC tone
 1406 0b7c 00F038BA 	    b interp_loop
 1407              	
 1408              	    _FUNC ubound
 1409 0b80 00F038BA 	    b interp_loop
 1410              	
 1411              	    _FUNC uflash
 1412 0b84 00F038BA 	    b interp_loop
 1413              	
 1414              	    _FUNC until
 1415 0b88 00F038BA 	    b interp_loop
ARM GAS  tinyBasic.s 			page 47


 1416              	
 1417              	    _FUNC usr
 1418 0b8c 00F038BA 	    b interp_loop 
 1419              	
 1420              	    _FUNC wait
 1421 0b90 00F038BA 	    b interp_loop
 1422              	
 1423              	    _FUNC words
 1424 0b94 00F038BA 	    b interp_loop
 1425              	
 1426              	    _FUNC write
 1427 0b98 00F038BA 	    b interp_loop
 1428              	
 1429              	    _FUNC bit_xor
 1430 0b9c 00F038BA 	    b interp_loop
 1431              	
 1432              	    _FUNC transmit
 1433 0ba0 00F038BA 	    b interp_loop
 1434              	
 1435              	    _FUNC receive
 1436 0ba4 00F038BA 	    b interp_loop 
 1437              	
 1438              	
 1439              	/*************************************************
 1440              	   extra FLASH memory not used by Tiny BASIC
 1441              	   is used to save BASIC programs.
 1442              	************************************************/
 1443 0ba8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 1443      00000000 
 1443      00000000 
 1443      00000000 
 1443      00000000 
 1444              	  .section .fs
 1445              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 48


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 49


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 50


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 51


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 52


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:161    *ABS*:0000000000000000 FRUN
      tbi_macros.inc:162    *ABS*:0000000000000001 FTRAP
      tbi_macros.inc:163    *ABS*:0000000000000002 FLOOP
      tbi_macros.inc:164    *ABS*:0000000000000003 FSLEEP
      tbi_macros.inc:165    *ABS*:0000000000000004 FBREAK
      tbi_macros.inc:166    *ABS*:0000000000000005 FCOMP
      tbi_macros.inc:167    *ABS*:0000000000000006 FAUTORUN
      tbi_macros.inc:169    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:171    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:172    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
ARM GAS  tinyBasic.s 			page 53


       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
ARM GAS  tinyBasic.s 			page 54


       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:47     .text:0000000000000000 strlen
         tinyBasic.s:47     .text:0000000000000000 $t
         tinyBasic.s:71     .text:0000000000000018 cmove
         tinyBasic.s:83     .text:0000000000000030 move_from_end
         tinyBasic.s:77     .text:0000000000000022 move_from_low
         tinyBasic.s:105    .text:0000000000000044 strcpy
         tinyBasic.s:130    .text:0000000000000058 strcmp
         tinyBasic.s:155    .text:0000000000000074 prt_tok
         tinyBasic.s:170    .text:00000000000000c0 tok_msg
         tinyBasic.s:170    .text:00000000000000c0 $d
         tinyBasic.s:170    .text:00000000000000c8 $t
         tinyBasic.s:184    .text:00000000000000c8 prt_row
         tinyBasic.s:220    .text:000000000000012c prt_chars
         tinyBasic.s:246    .text:0000000000000150 dump
         tinyBasic.s:270    .text:000000000000016c search_lineno
         tinyBasic.s:301    .text:000000000000018c delete_line
         tinyBasic.s:326    .text:00000000000001b8 create_gap
         tinyBasic.s:351    .text:00000000000001e0 insert_line
         tinyBasic.s:381    .text:000000000000022c compile
         tinyBasic.s:400    .text:0000000000000230 syntax_error
         tinyBasic.s:415    .text:0000000000000238 tb_error
         tinyBasic.s:425    .text:0000000000000254 err_msg
         tinyBasic.s:615    .text:00000000000003ac dstack_empty
         tinyBasic.s:828    .text:0000000000000554 warm_start
         tinyBasic.s:426    .text:0000000000000254 $d
         tinyBasic.s:432    .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:433    .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:434    .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:435    .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:436    .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:437    .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:438    .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:439    .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:440    .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:441    .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:442    .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:443    .rodata.tb_error:00000000000000ea err_no_data
ARM GAS  tinyBasic.s 			page 55


         tinyBasic.s:444    .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:445    .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:446    .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:448    .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:449    .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:450    .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:467    .text:0000000000000294 $t
         tinyBasic.s:467    .text:0000000000000294 arg_list
         tinyBasic.s:483    .text:00000000000002a0 func_args
         tinyBasic.s:503    .text:00000000000002a4 BTGL
         tinyBasic.s:521    .text:00000000000002a8 search_dict
         tinyBasic.s:552    .text:00000000000002dc prt_version
         tinyBasic.s:576    .text:0000000000000342 version_msg
         tinyBasic.s:578    .text:0000000000000362 version
         tinyBasic.s:577    .text:0000000000000342 $d
         tinyBasic.s:593    .text:0000000000000364 cold_start
         tinyBasic.s:611    .text:00000000000003a4 src_addr
         tinyBasic.s:613    .text:00000000000003a8 dest_addr
         tinyBasic.s:880    .rodata:00000000000000d0 ulast
         tinyBasic.s:855    .rodata:0000000000000000 uzero
         tinyBasic.s:664    .text:00000000000003e8 warm_init
         tinyBasic.s:690    .text:000000000000040c cmd_line
         tinyBasic.s:612    .text:00000000000003a4 $d
         tinyBasic.s:628    .text:00000000000003b0 $t
         tinyBasic.s:628    .text:00000000000003b0 clear_vars
         tinyBasic.s:644    .text:00000000000003cc clear_basic
         tinyBasic.s:814    .text:0000000000000550 tib
         tinyBasic.s:701    .text:0000000000000438 interpreter
         tinyBasic.s:723    .text:0000000000000474 interp_loop
         tinyBasic.s:708    .text:0000000000000446 next_line
         tinyBasic.s:757    .text:00000000000004a4 next_token
         tinyBasic.s:1241   .rodata.dictionary:0000000000000a76 let_var
         tinyBasic.s:1243   .rodata.dictionary:0000000000000a80 let_array
         tinyBasic.s:798    .text:0000000000000508 tbb_ofs
         tinyBasic.s:799    .text:0000000000000508 $d
         tinyBasic.s:814    .text:0000000000000550 $d
         tinyBasic.s:828    .text:0000000000000554 $t
         tinyBasic.s:844    .text:000000000000055c get_array_element
         tinyBasic.s:848    .text:0000000000000560 relation
         tinyBasic.s:1445   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:877    .rodata:0000000000000054 $d
         tinyBasic.s:887    *ABS*:0000000000000000 link
         tinyBasic.s:888    .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:996    .rodata.dictionary:0000000000000789 LINK
         tinyBasic.s:889    .rodata.dictionary:000000000000000d $d
         tinyBasic.s:991    .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:995    .rodata.dictionary:0000000000000789 kword_dict
         tinyBasic.s:1001   .rodata.dictionary:0000000000000790 code_addr
         tinyBasic.s:1031   .rodata.dictionary:000000000000092c abs
         tinyBasic.s:1043   .rodata.dictionary:0000000000000954 power_adc
         tinyBasic.s:1046   .rodata.dictionary:0000000000000958 analog_read
         tinyBasic.s:1049   .rodata.dictionary:000000000000095c bit_and
         tinyBasic.s:1052   .rodata.dictionary:0000000000000960 ascii
         tinyBasic.s:1055   .rodata.dictionary:0000000000000964 autorun
         tinyBasic.s:1058   .rodata.dictionary:0000000000000968 awu
         tinyBasic.s:1061   .rodata.dictionary:000000000000096c bitmask
         tinyBasic.s:1076   .rodata.dictionary:0000000000000970 bit_reset
ARM GAS  tinyBasic.s 			page 56


         tinyBasic.s:1101   .rodata.dictionary:000000000000099c bit_set
         tinyBasic.s:1137   .rodata.dictionary:00000000000009ec bit_test
         tinyBasic.s:1125   .rodata.dictionary:00000000000009c4 bit_toggle
         tinyBasic.s:1140   .rodata.dictionary:00000000000009f0 bye
         tinyBasic.s:1143   .rodata.dictionary:00000000000009f4 char
         tinyBasic.s:1146   .rodata.dictionary:00000000000009f8 const_cr2
         tinyBasic.s:1149   .rodata.dictionary:00000000000009fc const_cr1
         tinyBasic.s:1152   .rodata.dictionary:0000000000000a00 data
         tinyBasic.s:1155   .rodata.dictionary:0000000000000a04 data_line
         tinyBasic.s:1158   .rodata.dictionary:0000000000000a08 const_ddr
         tinyBasic.s:1161   .rodata.dictionary:0000000000000a0c dec_base
         tinyBasic.s:1164   .rodata.dictionary:0000000000000a10 directory
         tinyBasic.s:1167   .rodata.dictionary:0000000000000a14 do_loop
         tinyBasic.s:1170   .rodata.dictionary:0000000000000a18 digital_read
         tinyBasic.s:1173   .rodata.dictionary:0000000000000a1c digital_write
         tinyBasic.s:1176   .rodata.dictionary:0000000000000a20 cmd_end
         tinyBasic.s:1179   .rodata.dictionary:0000000000000a24 const_eeprom_base
         tinyBasic.s:1182   .rodata.dictionary:0000000000000a28 fcpu
         tinyBasic.s:1185   .rodata.dictionary:0000000000000a2c for
         tinyBasic.s:1188   .rodata.dictionary:0000000000000a30 forget
         tinyBasic.s:1191   .rodata.dictionary:0000000000000a34 gosub
         tinyBasic.s:1194   .rodata.dictionary:0000000000000a38 goto
         tinyBasic.s:1197   .rodata.dictionary:0000000000000a3c gpio
         tinyBasic.s:1200   .rodata.dictionary:0000000000000a40 hex_base
         tinyBasic.s:1203   .rodata.dictionary:0000000000000a44 const_idr
         tinyBasic.s:1206   .rodata.dictionary:0000000000000a48 if
         tinyBasic.s:1209   .rodata.dictionary:0000000000000a4c input_var
         tinyBasic.s:1212   .rodata.dictionary:0000000000000a50 invert
         tinyBasic.s:1215   .rodata.dictionary:0000000000000a54 enable_iwdg
         tinyBasic.s:1218   .rodata.dictionary:0000000000000a58 refresh_iwdg
         tinyBasic.s:1221   .rodata.dictionary:0000000000000a5c key
         tinyBasic.s:1234   .rodata.dictionary:0000000000000a60 let
         tinyBasic.s:1258   .rodata.dictionary:0000000000000ab8 list
         tinyBasic.s:1261   .rodata.dictionary:0000000000000abc load
         tinyBasic.s:1264   .rodata.dictionary:0000000000000ac0 log2
         tinyBasic.s:1267   .rodata.dictionary:0000000000000ac4 lshift
         tinyBasic.s:1270   .rodata.dictionary:0000000000000ac8 muldiv
         tinyBasic.s:1273   .rodata.dictionary:0000000000000acc next
         tinyBasic.s:1276   .rodata.dictionary:0000000000000ad0 new
         tinyBasic.s:1279   .rodata.dictionary:0000000000000ad4 func_not
         tinyBasic.s:1282   .rodata.dictionary:0000000000000ad8 const_odr
         tinyBasic.s:1285   .rodata.dictionary:0000000000000adc bit_or
         tinyBasic.s:1288   .rodata.dictionary:0000000000000ae0 pad_ref
         tinyBasic.s:1291   .rodata.dictionary:0000000000000ae4 pause
         tinyBasic.s:1294   .rodata.dictionary:0000000000000ae8 pin_mode
         tinyBasic.s:1297   .rodata.dictionary:0000000000000aec peek
         tinyBasic.s:1300   .rodata.dictionary:0000000000000af0 const_input
         tinyBasic.s:1303   .rodata.dictionary:0000000000000af4 poke
         tinyBasic.s:1306   .rodata.dictionary:0000000000000af8 const_output
         tinyBasic.s:1309   .rodata.dictionary:0000000000000afc print
         tinyBasic.s:1312   .rodata.dictionary:0000000000000b00 const_porta
         tinyBasic.s:1315   .rodata.dictionary:0000000000000b04 const_portb
         tinyBasic.s:1318   .rodata.dictionary:0000000000000b08 const_portc
         tinyBasic.s:1321   .rodata.dictionary:0000000000000b0c const_portd
         tinyBasic.s:1324   .rodata.dictionary:0000000000000b10 const_porte
         tinyBasic.s:1327   .rodata.dictionary:0000000000000b14 const_portf
         tinyBasic.s:1330   .rodata.dictionary:0000000000000b18 const_portg
ARM GAS  tinyBasic.s 			page 57


         tinyBasic.s:1333   .rodata.dictionary:0000000000000b1c const_porth
         tinyBasic.s:1336   .rodata.dictionary:0000000000000b20 const_porti
         tinyBasic.s:1339   .rodata.dictionary:0000000000000b24 qkey
         tinyBasic.s:1342   .rodata.dictionary:0000000000000b28 read
         tinyBasic.s:1345   .rodata.dictionary:0000000000000b2c remark
         tinyBasic.s:1348   .rodata.dictionary:0000000000000b30 restore
         tinyBasic.s:1351   .rodata.dictionary:0000000000000b34 return
         tinyBasic.s:1354   .rodata.dictionary:0000000000000b38 random
         tinyBasic.s:1357   .rodata.dictionary:0000000000000b3c rshift
         tinyBasic.s:1360   .rodata.dictionary:0000000000000b40 run
         tinyBasic.s:1363   .rodata.dictionary:0000000000000b44 save
         tinyBasic.s:1366   .rodata.dictionary:0000000000000b48 show
         tinyBasic.s:1369   .rodata.dictionary:0000000000000b4c size
         tinyBasic.s:1372   .rodata.dictionary:0000000000000b50 sleep
         tinyBasic.s:1375   .rodata.dictionary:0000000000000b54 spi_read
         tinyBasic.s:1378   .rodata.dictionary:0000000000000b58 spi_enable
         tinyBasic.s:1381   .rodata.dictionary:0000000000000b5c spi_select
         tinyBasic.s:1384   .rodata.dictionary:0000000000000b60 spi_write
         tinyBasic.s:1387   .rodata.dictionary:0000000000000b64 step
         tinyBasic.s:1390   .rodata.dictionary:0000000000000b68 stop
         tinyBasic.s:1393   .rodata.dictionary:0000000000000b6c get_ticks
         tinyBasic.s:1396   .rodata.dictionary:0000000000000b70 set_timer
         tinyBasic.s:1399   .rodata.dictionary:0000000000000b74 timeout
         tinyBasic.s:1402   .rodata.dictionary:0000000000000b78 to
         tinyBasic.s:1405   .rodata.dictionary:0000000000000b7c tone
         tinyBasic.s:1408   .rodata.dictionary:0000000000000b80 ubound
         tinyBasic.s:1411   .rodata.dictionary:0000000000000b84 uflash
         tinyBasic.s:1414   .rodata.dictionary:0000000000000b88 until
         tinyBasic.s:1417   .rodata.dictionary:0000000000000b8c usr
         tinyBasic.s:1420   .rodata.dictionary:0000000000000b90 wait
         tinyBasic.s:1423   .rodata.dictionary:0000000000000b94 words
         tinyBasic.s:1426   .rodata.dictionary:0000000000000b98 write
         tinyBasic.s:1429   .rodata.dictionary:0000000000000b9c bit_xor
         tinyBasic.s:1432   .rodata.dictionary:0000000000000ba0 transmit
         tinyBasic.s:1435   .rodata.dictionary:0000000000000ba4 receive
         tinyBasic.s:1032   .rodata.dictionary:000000000000092c $t
         tinyBasic.s:1043   .rodata.dictionary:0000000000000952 $d
         tinyBasic.s:1044   .rodata.dictionary:0000000000000954 $t
         tinyBasic.s:1046   .rodata.dictionary:0000000000000956 $d
         tinyBasic.s:1047   .rodata.dictionary:0000000000000958 $t
         tinyBasic.s:1049   .rodata.dictionary:000000000000095a $d
         tinyBasic.s:1050   .rodata.dictionary:000000000000095c $t
         tinyBasic.s:1052   .rodata.dictionary:000000000000095e $d
         tinyBasic.s:1053   .rodata.dictionary:0000000000000960 $t
         tinyBasic.s:1055   .rodata.dictionary:0000000000000962 $d
         tinyBasic.s:1056   .rodata.dictionary:0000000000000964 $t
         tinyBasic.s:1058   .rodata.dictionary:0000000000000966 $d
         tinyBasic.s:1059   .rodata.dictionary:0000000000000968 $t
         tinyBasic.s:1061   .rodata.dictionary:000000000000096a $d
         tinyBasic.s:1062   .rodata.dictionary:000000000000096c $t
         tinyBasic.s:1076   .rodata.dictionary:000000000000096e $d
         tinyBasic.s:1077   .rodata.dictionary:0000000000000970 $t
         tinyBasic.s:1102   .rodata.dictionary:000000000000099c $t
         tinyBasic.s:1126   .rodata.dictionary:00000000000009c4 $t
         tinyBasic.s:1138   .rodata.dictionary:00000000000009ec $t
         tinyBasic.s:1141   .rodata.dictionary:00000000000009f0 $t
         tinyBasic.s:1144   .rodata.dictionary:00000000000009f4 $t
ARM GAS  tinyBasic.s 			page 58


         tinyBasic.s:1147   .rodata.dictionary:00000000000009f8 $t
         tinyBasic.s:1150   .rodata.dictionary:00000000000009fc $t
         tinyBasic.s:1153   .rodata.dictionary:0000000000000a00 $t
         tinyBasic.s:1156   .rodata.dictionary:0000000000000a04 $t
         tinyBasic.s:1159   .rodata.dictionary:0000000000000a08 $t
         tinyBasic.s:1162   .rodata.dictionary:0000000000000a0c $t
         tinyBasic.s:1165   .rodata.dictionary:0000000000000a10 $t
         tinyBasic.s:1168   .rodata.dictionary:0000000000000a14 $t
         tinyBasic.s:1171   .rodata.dictionary:0000000000000a18 $t
         tinyBasic.s:1174   .rodata.dictionary:0000000000000a1c $t
         tinyBasic.s:1177   .rodata.dictionary:0000000000000a20 $t
         tinyBasic.s:1180   .rodata.dictionary:0000000000000a24 $t
         tinyBasic.s:1183   .rodata.dictionary:0000000000000a28 $t
         tinyBasic.s:1186   .rodata.dictionary:0000000000000a2c $t
         tinyBasic.s:1189   .rodata.dictionary:0000000000000a30 $t
         tinyBasic.s:1192   .rodata.dictionary:0000000000000a34 $t
         tinyBasic.s:1195   .rodata.dictionary:0000000000000a38 $t
         tinyBasic.s:1198   .rodata.dictionary:0000000000000a3c $t
         tinyBasic.s:1201   .rodata.dictionary:0000000000000a40 $t
         tinyBasic.s:1204   .rodata.dictionary:0000000000000a44 $t
         tinyBasic.s:1207   .rodata.dictionary:0000000000000a48 $t
         tinyBasic.s:1210   .rodata.dictionary:0000000000000a4c $t
         tinyBasic.s:1213   .rodata.dictionary:0000000000000a50 $t
         tinyBasic.s:1216   .rodata.dictionary:0000000000000a54 $t
         tinyBasic.s:1219   .rodata.dictionary:0000000000000a58 $t
         tinyBasic.s:1222   .rodata.dictionary:0000000000000a5c $t
         tinyBasic.s:1235   .rodata.dictionary:0000000000000a60 $t
         tinyBasic.s:1258   .rodata.dictionary:0000000000000ab6 $d
         tinyBasic.s:1259   .rodata.dictionary:0000000000000ab8 $t
         tinyBasic.s:1262   .rodata.dictionary:0000000000000abc $t
         tinyBasic.s:1265   .rodata.dictionary:0000000000000ac0 $t
         tinyBasic.s:1268   .rodata.dictionary:0000000000000ac4 $t
         tinyBasic.s:1271   .rodata.dictionary:0000000000000ac8 $t
         tinyBasic.s:1274   .rodata.dictionary:0000000000000acc $t
         tinyBasic.s:1277   .rodata.dictionary:0000000000000ad0 $t
         tinyBasic.s:1280   .rodata.dictionary:0000000000000ad4 $t
         tinyBasic.s:1283   .rodata.dictionary:0000000000000ad8 $t
         tinyBasic.s:1286   .rodata.dictionary:0000000000000adc $t
         tinyBasic.s:1289   .rodata.dictionary:0000000000000ae0 $t
         tinyBasic.s:1292   .rodata.dictionary:0000000000000ae4 $t
         tinyBasic.s:1295   .rodata.dictionary:0000000000000ae8 $t
         tinyBasic.s:1298   .rodata.dictionary:0000000000000aec $t
         tinyBasic.s:1301   .rodata.dictionary:0000000000000af0 $t
         tinyBasic.s:1304   .rodata.dictionary:0000000000000af4 $t
         tinyBasic.s:1307   .rodata.dictionary:0000000000000af8 $t
         tinyBasic.s:1310   .rodata.dictionary:0000000000000afc $t
         tinyBasic.s:1313   .rodata.dictionary:0000000000000b00 $t
         tinyBasic.s:1316   .rodata.dictionary:0000000000000b04 $t
         tinyBasic.s:1319   .rodata.dictionary:0000000000000b08 $t
         tinyBasic.s:1322   .rodata.dictionary:0000000000000b0c $t
         tinyBasic.s:1325   .rodata.dictionary:0000000000000b10 $t
         tinyBasic.s:1328   .rodata.dictionary:0000000000000b14 $t
         tinyBasic.s:1331   .rodata.dictionary:0000000000000b18 $t
         tinyBasic.s:1334   .rodata.dictionary:0000000000000b1c $t
         tinyBasic.s:1337   .rodata.dictionary:0000000000000b20 $t
         tinyBasic.s:1340   .rodata.dictionary:0000000000000b24 $t
         tinyBasic.s:1343   .rodata.dictionary:0000000000000b28 $t
ARM GAS  tinyBasic.s 			page 59


         tinyBasic.s:1346   .rodata.dictionary:0000000000000b2c $t
         tinyBasic.s:1349   .rodata.dictionary:0000000000000b30 $t
         tinyBasic.s:1352   .rodata.dictionary:0000000000000b34 $t
         tinyBasic.s:1355   .rodata.dictionary:0000000000000b38 $t
         tinyBasic.s:1358   .rodata.dictionary:0000000000000b3c $t
         tinyBasic.s:1361   .rodata.dictionary:0000000000000b40 $t
         tinyBasic.s:1364   .rodata.dictionary:0000000000000b44 $t
         tinyBasic.s:1367   .rodata.dictionary:0000000000000b48 $t
         tinyBasic.s:1370   .rodata.dictionary:0000000000000b4c $t
         tinyBasic.s:1373   .rodata.dictionary:0000000000000b50 $t
         tinyBasic.s:1376   .rodata.dictionary:0000000000000b54 $t
         tinyBasic.s:1379   .rodata.dictionary:0000000000000b58 $t
         tinyBasic.s:1382   .rodata.dictionary:0000000000000b5c $t
         tinyBasic.s:1385   .rodata.dictionary:0000000000000b60 $t
         tinyBasic.s:1388   .rodata.dictionary:0000000000000b64 $t
         tinyBasic.s:1391   .rodata.dictionary:0000000000000b68 $t
         tinyBasic.s:1394   .rodata.dictionary:0000000000000b6c $t
         tinyBasic.s:1397   .rodata.dictionary:0000000000000b70 $t
         tinyBasic.s:1400   .rodata.dictionary:0000000000000b74 $t
         tinyBasic.s:1403   .rodata.dictionary:0000000000000b78 $t
         tinyBasic.s:1406   .rodata.dictionary:0000000000000b7c $t
         tinyBasic.s:1409   .rodata.dictionary:0000000000000b80 $t
         tinyBasic.s:1412   .rodata.dictionary:0000000000000b84 $t
         tinyBasic.s:1415   .rodata.dictionary:0000000000000b88 $t
         tinyBasic.s:1418   .rodata.dictionary:0000000000000b8c $t
         tinyBasic.s:1421   .rodata.dictionary:0000000000000b90 $t
         tinyBasic.s:1424   .rodata.dictionary:0000000000000b94 $t
         tinyBasic.s:1427   .rodata.dictionary:0000000000000b98 $t
         tinyBasic.s:1430   .rodata.dictionary:0000000000000b9c $t
         tinyBasic.s:1433   .rodata.dictionary:0000000000000ba0 $t
         tinyBasic.s:1436   .rodata.dictionary:0000000000000ba4 $t
         tinyBasic.s:1443   .rodata.dictionary:0000000000000ba8 $d
         tinyBasic.s:852    .text:0000000000000562 $d
         tinyBasic.s:1445   .text:0000000000000564 $d
         tinyBasic.s:580    .text:0000000000000363 $d
         tinyBasic.s:580    .text:0000000000000364 $t
         tinyBasic.s:812    .text:000000000000054d $d
         tinyBasic.s:812    .text:000000000000054e $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_dstack
readln
_tib
