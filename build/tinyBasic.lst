ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 13


  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 14


 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 15


 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 16


 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	  BASIC: DUMP adr, count 
 239              	    command line only  
 240              	    print memory content in hexadecimal 
 241              	    16 bytes per row 
 242              	    ouput:
 243              	      none 
 244              	    use:
 245              	      r2   byte counter  
 246              	****************************************/
 247              	    _FUNC dump 
 248 0150 04B4     	    push {r2}
 249 0152 226C     	    ldr r2,[UPP,#FLAGS]
 250 0154 12F0010F 	    tst r2,#FRUN 
 251 0158 02D0     	    beq 0f
 252 015a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 253 015e AFE2     	    b tb_error  
 254 0160 00B500F0 	0:  _CALL arg_list 
 254      27FD5DF8 
 254      04EB
 255 016a 0228     	    cmp r0,#2
 256 016c 40F0A482 	    bne syntax_error 
 257 0170 5CF8042B 	    _POP r2   // count 
ARM GAS  tinyBasic.s 			page 17


 258 0174 5CF8040B 	    _POP  r0  // adr 
 259 0178 4FF01001 	1:  mov r1,#16
 260 017c 00B5FFF7 	    _CALL prt_row 
 260      A3FF5DF8 
 260      04EB
 261 0186 103A     	    subs r2,#16 
 262 0188 F6D5     	    bpl 1b 
 263 018a 04BC     	2:  pop {r2}
 264 018c 7047     	    _RET 
 265              	
 266              	/***************************************
 267              	    search_lineno 
 268              	    localize BASIC line from its number 
 269              	    input:
 270              	      r0   line# 
 271              	    output: 
 272              	      r0   adr where found || adr new to be inserted 
 273              	      r1   0 found || !0 not found  
 274              	    use:
 275              	      r0   scan address 
 276              	      r1   temp   
 277              	      r2   address end of text
 278              	      r3   target line#
 279              	****************************************/    
 280 018e 00BF     	    _FUNC search_lineno
 281 0190 0CB4     	    push {r2,r3} 
 282 0192 0346     	    mov r3,r0 // target 
 283 0194 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 284 0196 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 285 0198 9042     	1:  cmp r0,r2 
 286 019a 05D0     	    beq  8f
 287 019c 0188     	    ldrh r1,[r0]
 288 019e C91A     	    subs r1,r3 
 289 01a0 04D5     	    bpl 9f 
 290 01a2 8178     	    ldrb r1,[r0,#2]
 291 01a4 0844     	    add r0,r1
 292 01a6 F7E7     	    b 1b 
 293 01a8 4FF0FF31 	8:  mov r1,#-1 
 294 01ac 0CBC     	9:  pop {r2,r3}
 295 01ae 7047     	    _RET 
 296              	
 297              	
 298              	/********************************************
 299              	    delete_line 
 300              	    delete BASIC line at addr 
 301              	    input:
 302              	      r0    address 
 303              	    output:
 304              	      r0    address  
 305              	    use: 
 306              	      r1    dest adr
 307              	      r2    bytes to move 
 308              	      T1    length line to delete 
 309              	      T2    txtend 
 310              	********************************************/
 311              	    _FUNC delete_line 
 312 01b0 2DE90703 	    push {r0,r1,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 313 01b4 0146     	    mov r1,r0 // dest 
 314 01b6 91F80280 	    ldrb T1,[r1,#2] // line length 
 315 01ba 4044     	    add r0,T1  // src
 316 01bc D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01c0 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 318 01c4 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01ce A9EB0809 	    sub T2,T1 // txtend-count 
 320 01d2 C4F83480 	    str T1,[UPP,#TXTEND] 
 321 01d6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 322 01da 7047     	    _RET 
 323              	
 324              	/******************************************
 325              	    create_gap 
 326              	    create a gap in text area to insert new line 
 327              	    input:
 328              	      r0    adr 
 329              	      r1    length 
 330              	    output:
 331              	      r0    adr 
 332              	    use:
 333              	      T1    length 
 334              	      T2    txtend 
 335              	************************************************/
 336              	    _FUNC create_gap 
 337 01dc 2DE90503 	    push {r0,r2,T1,T2}
 338 01e0 8846     	    mov T1,R1
 339 01e2 0144     	    add r1,r0  // dest 
 340 01e4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 341 01e8 A9EB0002 	    sub r2,T2,r0 
 342 01ec 00B5FFF7 	    _CALL cmove
 342      FEFF5DF8 
 342      04EB
 343 01f6 C144     	    add T2,T1 
 344 01f8 C4F83490 	    str T2,[UPP,#TXTEND]
 345 01fc BDE80503 	    pop {r0,r2,T1,T2}
 346 0200 7047     	    _RET 
 347              	
 348              	/************************************************
 349              	    insert_line 
 350              	    insert BASIC line in text area 
 351              	    first search if line with same number exist 
 352              	    replace if so. 
 353              	    input:
 354              	      r0    *buffer to insert 
 355              	    output:
 356              	      none 
 357              	    use: 
 358              	      T1     *buffer
 359              	      T2     temp  
 360              	************************************************/ 
 361 0202 00BF     	    _FUNC insert_line 
 362 0204 2DE90203 	    push {r1,T1,T2}
 363 0208 8046     	    mov T1,r0 
 364 020a B8F80000 	    ldrh r0,[T1]
 365 020e 00B5FFF7 	    _CALL search_lineno 
ARM GAS  tinyBasic.s 			page 19


 365      BEFF5DF8 
 365      04EB
 366 0218 49B9     	    cbnz  r1, 1f // line# doesn't exist
 367              	// already exist 
 368 021a 00B5FFF7 	    _CALL delete_line // delete old one 
 368      C8FF5DF8 
 368      04EB
 369 0224 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 370 0228 B9F1030F 	    cmp T2,#3 
 371 022c 0ED0     	    beq 9f
 372              	1: //insert new line 
 373 022e 98F80210 	    ldrb r1,[T1,#2]
 374 0232 00B5FFF7 	    _CALL create_gap 
 374      D2FF5DF8 
 374      04EB
 375 023c 0146     	    mov r1,r0
 376 023e 4046     	    mov r0,T1 
 377 0240 8278     	    ldrb r2,[r0,#2]
 378 0242 00B5FFF7 	    _CALL cmove 
 378      FEFF5DF8 
 378      04EB
 379 024c BDE80203 	9:  pop {r1,T1,T2}
 380 0250 7047     	    _RET 
 381              	
 382              	/*********************************
 383              	    compile 
 384              	    tokenize source line save it 
 385              	    in pas buffer.
 386              	    compiled line format: 
 387              	      line_no  2 bytes {0...32767}
 388              	      count    1 byte  
 389              	      tokens   variable length 
 390              	  input:
 391              	     r0   *text buffer 
 392              	     r1   *text length   
 393              	  output:
 394              	    r0    0 stored | -1 immediate 
 395              	  use:
 396              	    r3    tib index   
 397              	    T1    tib
 398              	    T2    pad
 399              	***********************************/
 400 0252 00BF     	    _FUNC compile
 401 0254 8046     	    mov T1, r0  // source text buffer 
 402 0256 6160     	    str r1,[UPP,#COUNT] // save line length 
 403 0258 DFF8A097 	    ldr T2,pad // tokens buffer
 404 025c 83EA0303 	    eor r3,r3 // source index  
 405 0260 206C     	    ldr r0,[UPP,#FLAGS]
 406 0262 40F02000 	    orr r0,#FCOMP
 407 0266 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 408 0268 80EA0000 	    eor r0,r0     
 409 026c 29F8020B 	    strh r0,[T2],#2   // line no 
 410 0270 09F8010B 	    strb r0,[T2],#1 // length 
 411 0274 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 412 0276 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 413 027a 00B500F0 	    _CALL parse_int 
 413      F8F85DF8 
ARM GAS  tinyBasic.s 			page 20


 413      04EB
 414 0284 07D0     	    beq 2f 
 415              	// this is a line number     
 416 0286 0129     	    cmp r1,#1 
 417 0288 02D5     	    bpl 1f 
 418 028a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 419 028e 17E2     	    b tb_error  
 420              	1:  // write line # to pad 
 421 0290 29F8031C 	    strh r1,[T2,#-3]
 422 0294 2360     	    str r3,[UPP,#IN_SAVED]
 423              	2:  // check for pad full 
 424 0296 C145     	    cmp T2,T1
 425 0298 02DB     	    blt 3f 
 426 029a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 427 029e 0FE2     	    b tb_error 
 428 02a0 00B500F0 	3:  _CALL comp_token 
 428      21F85DF8 
 428      04EB
 429 02aa 0028     	    cmp r0,#TK_NONE 
 430 02ac 01D0     	    beq 4f 
 431 02ae 2360     	    str r3,[UPP,#IN_SAVED]
 432 02b0 F1E7     	    b 2b 
 433              	4: // compilation completed 
 434 02b2 DFF84837 	    ldr r3,pad 
 435 02b6 A9EB0300 	    sub r0,T2,r3 // line length 
 436 02ba 9870     	    strb r0,[r3,#2]
 437 02bc 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 438 02be 1888     	    ldrh r0,[r3] // line number 
 439 02c0 38B1     	    cbz r0,8f  
 440              	// insert line in text buffer 
 441 02c2 1846     	    mov r0,r3 
 442 02c4 00B5FFF7 	    _CALL insert_line 
 442      9DFF5DF8 
 442      04EB
 443 02ce 4040     	    eors r0,r0 
 444 02d0 08E0     	    b 9f 
 445 02d2 9B46     	8:  mov BPTR,r3 // *token_list 
 446 02d4 4FF0030A 	    mov IN,#3
 447 02d8 206C     	    ldr r0,[UPP,#FLAGS]
 448 02da A0F12000 	    sub r0,#FCOMP
 449 02de 2064     	    str r0,[UPP,#FLAGS]
 450 02e0 5FF0FF30 	    movs r0,#-1 
 451 02e4 7047     	9:  _RET 
 452              	
 453              	/*********************************************
 454              	    compile next token from source 
 455              	    input: 
 456              	      r3 		tib index  
 457              	      T1    tib adr
 458              	      T2    insert point in pad  
 459              	    output:
 460              	      r0     token attribute 
 461              	      r1 		token value
 462              	      r3     tib index updated    
 463              	      T2     updated 
 464              	      use:
 465              	**********************************************/
ARM GAS  tinyBasic.s 			page 21


 466              	    .macro _case c, next  
 467              	    cmp r0,#\c 
 468              	    bne \next
 469              	    .endm 
 470              	
 471 02e6 00BF     	    _FUNC comp_token 
 472 02e8 40B4     	    push {r6}
 473 02ea 18F80300 	    ldrb r0,[T1,r3]
 474 02ee 0040     	    ands r0,r0 
 475 02f0 68D0     	    beq store_r0  // reached end of text  
 476 02f2 4FF02000 	    mov r0,#SPACE 
 477 02f6 00B500F0 	    _CALL skip  // skip spaces 
 477      26F95DF8 
 477      04EB
 478 0300 18F80300 	    ldrb r0,[T1,r3]
 479 0304 0040     	    ands r0,r0 
 480 0306 5DD0     	    beq store_r0  // reached end of text 
 481 0308 03F10103 	    add r3,#1 
 482 030c 00B500F0 	    _CALL upper 
 482      27F95DF8 
 482      04EB
 483 0316 00B500F0 	    _CALL is_special
 483      74F85DF8 
 483      04EB
 484 0320 DFF8686B 	    ldr r6,=token_ofs
 485 0324 D6E811F0 	    tbh [r6,r1] 
 486              	tok_idx0:     
 487              	//  not special char.  
 488 0328 4FE0     	    b try_number 
 489              	// single char token with no value 
 490              	single: 
 491 032a DFF8646B 	    ldr r6,=tok_single
 492 032e 705C     	    ldrb r0,[r6,r1] 
 493 0330 48E0     	    b store_r0  
 494              	lt:
 495 0332 4FF03400 	    mov r0,#TK_LT
 496 0336 18F80310 	    ldrb r1,[T1,r3]
 497 033a 3E29     	    cmp r1,#'>' 
 498 033c 06D0     	    beq 1f
 499 033e 0AE0     	    b 2f 
 500              	gt:
 501 0340 4FF03100 	    mov r0,#TK_GT 
 502 0344 18F80310 	    ldrb r1,[T1,r3]
 503 0348 3C29     	    cmp r1,#'<'
 504 034a 04D1     	    bne 2f  
 505 034c 03F10103 	1:  add r3,#1
 506 0350 4FF03500 	    mov r0,#TK_NE  
 507 0354 36E0     	    b store_r0
 508 0356 3D29     	2:  cmp r1,#'=' 
 509 0358 34D1     	    bne store_r0  
 510 035a 03F10103 	    add r3,#1
 511 035e 00F10200 	    add r0,#2
 512 0362 2FE0     	    b store_r0       
 513              	bkslash:
 514 0364 18F80310 	    ldrb r1,[T1,r3]
 515 0368 03F10103 	    add r3,#1
 516 036c 4FF00300 	    mov r0,#TK_CHAR 
ARM GAS  tinyBasic.s 			page 22


 517 0370 09F8010B 	    strb r0,[T2],#1
 518 0374 09F8011B 	    strb r1,[T2],#1
 519 0378 41E0     	    b token_exit 
 520              	prt_cmd: 
 521 037a 4FF00A00 	    mov r0,#TK_CMD 
 522 037e 4FF03A01 	    mov r1,#PRT_IDX
 523 0382 09F8010B 	    strb r0,[T2],#1
 524 0386 09F8011B 	    strb r1,[T2],#1
 525 038a 38E0     	    b token_exit 
 526              	quote:
 527 038c 4FF00200 	    mov r0,#TK_QSTR 
 528 0390 09F8010B 	    strb r0,[T2],#1
 529 0394 00B500F0 	    _CALL parse_quote
 529      A3F85DF8 
 529      04EB
 530 039e 2EE0     	    b token_exit
 531              	tick: 
 532              	// copy comment in pad 
 533 03a0 4FF00A00 	    mov r0,#TK_CMD 
 534 03a4 4FF04701 	    mov r1,#REM_IDX 
 535 03a8 09F8010B 	    strb r0,[T2],#1 
 536 03ac 09F8011B 	    strb r1,[T2],#1
 537 03b0 08EB0300 	    add r0,T1,r3 
 538 03b4 4946     	    mov r1,T2 
 539 03b6 00B5FFF7 	    _CALL strcpy 
 539      FEFF5DF8 
 539      04EB
 540 03c0 6368     	    ldr r3,[UPP,#COUNT]
 541 03c2 1CE0     	    b token_exit
 542              	store_r0: 
 543 03c4 09F8010B 	    strb r0,[T2],#1
 544 03c8 19E0     	    b token_exit 
 545              	try_number:
 546 03ca A3F10103 	    sub r3,#1
 547 03ce 00B500F0 	    _CALL parse_int  
 547      4EF85DF8 
 547      04EB
 548 03d8 04D0     	    beq 1f 
 549 03da 09F8010B 	    strb r0,[T2],#1 
 550 03de 49F8041B 	    str r1,[T2],#4
 551 03e2 0CE0     	    b token_exit 
 552 03e4 00B500F0 	1:  _CALL parse_keyword 
 552      15F95DF8 
 552      04EB
 553 03ee 0428     	    cmp r0,#TK_VAR 
 554 03f0 01D0     	    beq 2f 
 555 03f2 4729     	    cmp r1,#REM_IDX 
 556 03f4 D4D0     	    beq tick
 557 03f6 09F8010B 	2:  strb r0,[T2],#1 
 558 03fa 09F8011B 	    strb r1,[T2],#1
 559              	token_exit:
 560 03fe 40BC     	    pop {r6}
 561 0400 7047     	    _RET 
 562              	
 563              	/****************************
 564              	    is_special  
 565              	    check for non alphanum
ARM GAS  tinyBasic.s 			page 23


 566              	    input:
 567              	      r0    character to scan 
 568              	    output:
 569              	      r0    character 
 570              	      r1    0 || index 
 571              	    use: 
 572              	      r1    scan index 
 573              	      r2    temp 
 574              	      r3    char_list 
 575              	*****************************/
 576 0402 00BF     	    _FUNC is_special 
 577 0404 0CB4     	    push {r2,r3}
 578 0406 4FF00101 	    mov r1,#1
 579 040a DFF8883A 	    ldr r3,=char_list 
 580 040e 5A5C     	1:  ldrb r2,[r3,r1]
 581 0410 22B1     	    cbz r2,8f 
 582 0412 8242     	    cmp r2,r0 
 583 0414 04D0     	    beq 9f 
 584 0416 01F10101 	    add r1,#1 
 585 041a F8E7     	    b 1b
 586 041c 81EA0101 	8:  eor r1,r1     
 587 0420 0CBC     	9:  pop {r2,r3}
 588 0422 7047     	    _RET 
 589              	
 590              	char_list:
 591 0424 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 591      293A232D 
 591      2B2A2F25 
 591      3D3C3E5C 
 591      3F272200 
 592              	
 593              	tok_single:
 594 0438 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 594      070109
 595 043f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 595      2232
 596              	  
 597 0445 0000BF   	  .p2align 2
 598              	token_ofs:
 599 0448 0000     	  .hword  0 // not found
 600              	  // TK_COMMA...TK_EQUAL , 12 
 601 044a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 601      01000100 
 602 0452 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 602      01000100 
 603 045a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 603      01000100 
 604              	  // '<','>'
 605 0462 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 606              	  // '\'
 607 0466 1E00     	  .hword  (bkslash-tok_idx0)/2
 608              	  // '?' 
 609 0468 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 610              	  // "'"  
 611 046a 3C00     	  .hword  (tick-tok_idx0)/2 
 612              	  // '"' quote 
 613 046c 3200     	  .hword (quote-tok_idx0)/2
ARM GAS  tinyBasic.s 			page 24


 614              	
 615 046e 00BF     	  .p2align 2
 616              	
 617              	/****************************
 618              	    parse_int 
 619              	    parse an integer from text
 620              	    if not valid integer 
 621              	    r1 return *buffer else 
 622              	    *buffer is incremented after integer 
 623              	  input:
 624              	    r0   *buffer 
 625              	  output:
 626              	    r0   TK_INTGR|TK_NONE
 627              	    r1   int|0   
 628              	  use:
 629              	    r0   char 
 630              	    r1   save r3 
 631              	    r2   int
 632              	    r6   base 
 633              	    r7   digit count 
 634              	    r3   tib index   
 635              	    T1   *tib 
 636              	    T2   *pad  
 637              	*****************************/
 638              	    _FUNC parse_int 
 639 0470 C0B4     	    push {r6,r7}
 640 0472 82EA0202 	    eor r2,r2 // int 
 641 0476 1946     	    mov r1,r3 
 642 0478 4FF00A06 	    mov r6,#10 // default base 
 643 047c 87EA0707 	    eor r7,r7 // digit count 
 644 0480 18F80300 	    ldrb r0,[T1,r3]
 645 0484 03F10103 	    add r3,#1 
 646 0488 2428     	    cmp r0,'$' 
 647 048a 02D1     	    bne 2f 
 648 048c 4FF01006 	    mov r6,#16 // hexadecimal number 
 649 0490 03E0     	    b 3f  
 650 0492 2628     	2:  cmp r0,#'&' 
 651 0494 05D1     	    bne 4f
 652 0496 4FF00206 	    mov r6,#2 //binary number  
 653 049a 18F80300 	3:  ldrb r0,[T1,r3]
 654 049e 03F10103 	    add r3,#1
 655 04a2 00B500F0 	4:  _CALL upper 
 655      5CF85DF8 
 655      04EB
 656 04ac 4128     	    cmp r0,#'A'
 657 04ae 00D4     	    bmi 5f
 658 04b0 0738     	    subs r0,#7  
 659 04b2 3038     	5:  subs r0,#'0' 
 660 04b4 07D4     	    bmi 6f // not digit   
 661 04b6 B042     	    cmp r0,r6 
 662 04b8 05D5     	    bpl 6f // not digit 
 663 04ba 06FB02F2 	    mul r2,r6 
 664 04be 0244     	    add r2,r0
 665 04c0 07F10107 	    add r7,#1  
 666 04c4 E9E7     	    b 3b
 667 04c6 A3F10103 	6:  sub r3,#1  // unget last char
 668 04ca 1FB1     	    cbz r7, 7f 
ARM GAS  tinyBasic.s 			page 25


 669 04cc 4FF00E00 	    mov r0,#TK_INTGR  
 670 04d0 1146     	    mov r1,r2 
 671 04d2 02E0     	    b 9f 
 672              	7: // not a number 
 673 04d4 0B46     	    mov r3,r1 // restore r3 
 674 04d6 80EA0000 	    eor r0,r0 // TK_NONE 
 675 04da 0040     	9:  ands r0,r0 // to set zero flag 
 676 04dc C0BC     	    pop {r6,r7}
 677 04de 7047     	    _RET 
 678              	
 679              	/*********************************************
 680              	    parse_quote 
 681              	    parse quoted string 
 682              	    input: 
 683              	      r3 		tib index  
 684              	      T1    tib adr
 685              	      T2    insert point in pad  
 686              	    output:
 687              	      r0     token attribute 
 688              	      r1 		*str 
 689              	      r3     tib index updated    
 690              	      T2     updated 
 691              	      use:
 692              	*********************************************/
 693              	    _FUNC parse_quote
 694 04e0 4DF8049D 	    push {T2} 
 695 04e4 18F80300 	1:  ldrb r0,[T1,r3]
 696 04e8 03F10103 	    add r3,#1 
 697 04ec 2228     	    cmp r0,#'"'
 698 04ee 09D0     	    beq 9f 
 699 04f0 5C28     	    cmp r0,#'\\'
 700 04f2 04D1     	    bne 2f 
 701 04f4 00B500F0 	    _CALL get_escaped_char 
 701      0DF85DF8 
 701      04EB
 702 04fe 09F8010B 	2:  strb r0,[T2],#1
 703 0502 EFE7     	    b 1b 
 704 0504 80EA0000 	9:  eor  r0,r0
 705 0508 09F8010B 	    strb r0,[T2],#1
 706 050c 4FF00200 	    mov r0,#TK_QSTR
 707 0510 02BC     	    pop {r1}
 708 0512 7047     	    _RET 
 709              	
 710              	/**********************************************
 711              	    get_escaped_char 
 712              	    convert "\c" in quoted string 
 713              	    input:
 714              	      r0 
 715              	      r3   index 
 716              	      T1   tib 
 717              	    output:
 718              	      r0   replacement char
 719              	      r3   updated 
 720              	    use:
 721              	      r1   *table 
 722              	      r2   temp 
 723              	**********************************************/
ARM GAS  tinyBasic.s 			page 26


 724              	    _FUNC get_escaped_char 
 725 0514 06B4     	    push {r1,r2}
 726 0516 18F80300 	    ldrb r0,[T1,r3]
 727 051a 03F10103 	    add r3,#1
 728 051e 2228     	    cmp r0,#'"' 
 729 0520 0BD0     	    beq 9f 
 730 0522 DFF87419 	1:  ldr r1,=escaped 
 731 0526 11F8012B 	2:  ldrb r2,[r1],#1
 732 052a 12B1     	    cbz r2,6f 
 733 052c 8242     	    cmp r2,r0 
 734 052e 02D0     	    beq 7f 
 735 0530 F9E7     	    b 2b
 736 0532 A0F10702 	6:  sub r2,r0,#7     
 737 0536 02F10700 	7:  add r0,r2,#7
 738 053a 06BC     	9:  pop {r1,r2}   
 739 053c 7047     	    _RET
 740              	
 741 053e 6162746E 	escaped: .asciz "abtnvfr"
 741      76667200 
 742              	
 743              	/*********************************************
 744              	   skip character in TIB 
 745              	   input:
 746              	      r0    character to skip 
 747              	      r3    tib index 
 748              	      T1    tib adr
 749              	    output: 
 750              	      r3    updated
 751              	    use:
 752              	      r1     
 753              	**********************************************/   
 754 0546 00BF     	    _FUNC skip
 755 0548 02B4     	    push {r1} 
 756 054a 18F80310 	1:  ldrb r1,[T1,r3]
 757 054e 8142     	    cmp r1,r0
 758 0550 02D1     	    bne 2f
 759 0552 03F10103 	    add r3,#1 
 760 0556 F8E7     	    b 1b 
 761 0558 2360     	2:  str r3,[UPP,#IN_SAVED]
 762 055a 02BC     	    pop {r1}
 763 055c 7047     	    _RET
 764              	
 765              	/********************************************
 766              	    upper
 767              	    convert character in upper case 
 768              	    input: 
 769              	      r0   character 
 770              	    output:
 771              	      r0   upper case character 
 772              	*********************************************/
 773 055e 00BF     	    _FUNC upper 
 774 0560 6128     	    cmp r0,#'a' 
 775 0562 03DB     	    blt 9f 
 776 0564 7A28     	    cmp r0,#'z' 
 777 0566 01DC     	    bgt 9f 
 778 0568 00F05F00 	    and r0,#0x5f 
 779 056c 7047     	9:  _RET 
ARM GAS  tinyBasic.s 			page 27


 780              	
 781              	/***************************************
 782              	   is_digit 
 783              	   check if char is decimal digit.
 784              	   convert to decimal digit.
 785              	   input:
 786              	      r0    char 
 787              	   output:
 788              	      r0    if !Z then converted digit 
 789              	      Z     0 true | 1 false  
 790              	***************************************/
 791 056e 00BF     	    _GBL_FUNC is_digit 
 792 0570 02B4     	    push {r1} 
 793 0572 81EA0101 	    eor r1,r1 
 794 0576 3028     	    cmp r0,#'0' 
 795 0578 05DB     	    blt 9f
 796 057a 3A28     	    cmp r0,'9'+1
 797 057c 03D5     	    bpl 9f 
 798 057e 4FF0FF31 	    mov r1,#-1
 799 0582 A0F13000 	    sub r0,#'0'  
 800              	9:   
 801 0586 0940     	    ands r1,r1
 802 0588 02BC     	    pop {r1} 
 803 058a 7047     	    _RET 
 804              	
 805              	/***************************************
 806              	    is_hex 
 807              	    check for hexadecimal digit 
 808              	    convert to hex digit.
 809              	    input:
 810              	      r0    
 811              	    output:
 812              	      r0     if !Z then converted digit 
 813              	      Z      0 true | 1 false         
 814              	***************************************/
 815              	    _FUNC is_hex 
 816 058c 02B4     	    push {r1}
 817 058e 4FF0FF31 	    mov r1,#-1 
 818 0592 4128     	    cmp r0,#'A' 
 819 0594 01D4     	    bmi 1f 
 820 0596 A0F10700 	    sub r0,#7 
 821 059a A0F13000 	1:  sub r0,#'0'
 822 059e 01D4     	    bmi 2f 
 823 05a0 1028     	    cmp r0,#16
 824 05a2 01D4     	    bmi 9f 
 825 05a4 81EA0101 	2:  eor r1,r1  
 826 05a8 0940     	9:  ands r1,r1 
 827 05aa 02BC     	    pop {r1}
 828 05ac 7047     	    _RET 
 829              	
 830              	/***************************************
 831              	    is_bit 
 832              	    check if char is '0'|'1' 
 833              	    convert to binary digit. 
 834              	    input:
 835              	      r0    
 836              	    output:
ARM GAS  tinyBasic.s 			page 28


 837              	      r0     if !Z then converted digit 
 838              	      Z      0 true | 1 false         
 839              	***************************************/
 840 05ae 00BF     	    _FUNC is_bit
 841 05b0 02B4     	    push  {r1}
 842 05b2 4FF0FF31 	    mov r1,#-1 
 843 05b6 A0F13000 	    sub r0,#'0' 
 844 05ba 01D4     	    bmi 2f 
 845 05bc 0229     	    cmp r1,#2
 846 05be 01D4     	    bmi 9f 
 847 05c0 81EA0101 	2:  eor r1,r1 
 848 05c4 0940     	9:  ands r1,r1 
 849 05c6 02BC     	    pop {r1}
 850 05c8 7047     	    _RET 
 851              	
 852              	/***************************************
 853              	    is_alpha 
 854              	    check if character is {A..Z} 
 855              	  input:
 856              	    r0   character 
 857              	  output: 
 858              	    r0    same character 
 859              	    Z    0 true | 1 false  
 860              	****************************************/
 861 05ca 00BF     	    _FUNC is_alpha
 862 05cc 02B4     	    push {r1} 
 863 05ce 4FF0FF31 	    mov r1,#-1 
 864 05d2 4128     	    cmp r0,#'A' 
 865 05d4 01DB     	    blt 8f 
 866 05d6 5B28     	    cmp r0,#'Z'+1 
 867 05d8 01D4     	    bmi 9f 
 868 05da 81EA0101 	8:  eor r1,r1  
 869 05de 0940     	9:  ands r1,r1 
 870 05e0 02BC     	    pop {r1}
 871 05e2 7047     	    _RET 
 872              	
 873              	/***************************************
 874              	    is_num 
 875              	    check if character is {0..9} 
 876              	  input:
 877              	    r0   character 
 878              	  output: 
 879              	    r0    same character 
 880              	    Z    0 true | 1 false  
 881              	****************************************/
 882              	    _FUNC is_num 
 883 05e4 02B4     	    push {r1} 
 884 05e6 4FF0FF31 	    mov r1,#-1 
 885 05ea 3028     	    cmp r0,#'0' 
 886 05ec 01DB     	    blt 8f 
 887 05ee 3A28     	    cmp r0,#'9'+1 
 888 05f0 01D4     	    bmi 9f 
 889 05f2 81EA0101 	8:  eor r1,r1  
 890 05f6 0940     	9:  ands r1,r1 
 891 05f8 02BC     	    pop {r1}
 892 05fa 7047     	    _RET 
 893              	
ARM GAS  tinyBasic.s 			page 29


 894              	/*****************************************
 895              	    is_alnum 
 896              	    check if character is alphanumeric 
 897              	    input:
 898              	      r0 
 899              	    output:
 900              	      r0     same 
 901              	      Z      1 false | 0 true 
 902              	*****************************************/
 903              	    _FUNC is_alnum 
 904 05fc 00B5FFF7 	    _CALL is_alpha 
 904      E5FF5DF8 
 904      04EB
 905 0606 04D1     	    bne 9f 
 906 0608 00B5FFF7 	    _CALL is_num 
 906      EBFF5DF8 
 906      04EB
 907 0612 7047     	9:  _RET 
 908              	
 909              	
 910              	/*****************************************
 911              	    parse_keyword 
 912              	    parse work and ckeck if in dictionary 
 913              	    input:
 914              	      r0    first character 
 915              	      r3    tib index 
 916              	      t1    tib 
 917              	      t2    pad 
 918              	    output:
 919              	      r3    updated 
 920              	      t1    updated 
 921              	      t2    updated   
 922              	    use:
 923              	    
 924              	*****************************************/
 925              	    _FUNC parse_keyword 
 926 0614 4DF8049D 	    push {T2}
 927 0618 18F80300 	    ldrb r0,[T1,r3]
 928 061c 03F10103 	    add r3,#1
 929 0620 F8B1     	    cbz r0,2f 
 930 0622 00B5FFF7 	    _CALL upper 
 930      9CFF5DF8 
 930      04EB
 931 062c 00B5FFF7 	    _CALL is_alpha 
 931      CDFF5DF8 
 931      04EB
 932 0636 3FD0     	    beq syntax_error 
 933 0638 09F8010B 	    strb r0,[T2],#1
 934 063c 18F80300 	1:  ldrb r0,[T1,r3]
 935 0640 03F10103 	    add r3,#1 
 936 0644 68B1     	    cbz r0,2f 
 937 0646 00B5FFF7 	    _CALL upper 
 937      8AFF5DF8 
 937      04EB
 938 0650 00B5FFF7 	    _CALL is_alnum
 938      D3FF5DF8 
 938      04EB
ARM GAS  tinyBasic.s 			page 30


 939 065a 02D0     	    beq 2f 
 940 065c 09F8010B 	    strb r0,[T2],#1
 941 0660 ECE7     	    b 1b 
 942 0662 A3F10103 	2:  sub r3,#1
 943 0666 80EA0000 	    eor r0,r0
 944 066a 89F80000 	    strb r0,[T2] 
 945 066e 0098     	    ldr r0,[sp]
 946 0670 4178     	    ldrb r1,[r0,#1] 
 947 0672 29B9     	    cbnz r1,3f
 948 0674 0178     	    ldrb r1,[r0]
 949 0676 A1F14101 	    sub r1,#'A'
 950 067a 4FF00400 	    mov r0,#TK_VAR
 951 067e 08E0     	    b 9f 
 952 0680 DFF81818 	3:  ldr r1,=kword_dict  
 953 0684 00B500F0 	    _CALL search_dict 
 953      CDF85DF8 
 953      04EB
 954 068e 00B9     	    cbnz r0,9f 
 955 0690 12E0     	    b syntax_error 
 956 0692 5DF8049B 	9:  pop {T2}
 957 0696 7047     	    _RET 
 958              	
 959              	
 960              	/*******************
 961              	    DECOMPILER 
 962              	*******************/
 963              	
 964              	/**********************************
 965              	    cmd_name 
 966              	    reverse dictionary search 
 967              	    from CMD_IDX to NAME 
 968              	  input:
 969              	    r0    CMD_IDX 
 970              	  output:
 971              	    r0    *NAME | 0 
 972              	  use:
 973              	    r1    dictionary link
 974              	    r2    tmp 
 975              	**********************************/
 976              	    _FUNC cmd_name
 977 0698 06B4     	    push {r1,r2}
 978 069a DFF80018 	    ldr r1,=kword_dict  
 979 069e 0A78     	1:  ldrb r2,[r1]
 980 06a0 3AB1     	    cbz r2,3f 
 981 06a2 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 982 06a6 9042     	    cmp r0,r2 
 983 06a8 02D0     	    beq 2f 
 984 06aa 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 985 06ae F6E7     	    b 1b
 986 06b0 0A46     	2:  mov r2,r1
 987 06b2 1046     	3:  mov r0,r2 
 988 06b4 06BC     	    pop {r1,r2}
 989 06b6 7047     	    _RET 
 990              	
 991              	
 992              	/**********************************
 993              	      BASIC commands 
ARM GAS  tinyBasic.s 			page 31


 994              	**********************************/
 995              	
 996              	/*********************************
 997              	    syntax_error 
 998              	    display syntax error message and 
 999              	    abort program 
 1000              	  input:
 1001              	    none  
 1002              	  output: 
 1003              	    none 
 1004              	  use:
 1005              	*********************************/
 1006              	    _FUNC syntax_error 
 1007 06b8 4FF00200 	    mov r0,#ERR_SYNTAX
 1008 06bc 00E0     	    b tb_error 
 1009              	
 1010              	/*********************************
 1011              	    tb_error 
 1012              	    display BASIC error and 
 1013              	    abort program. 
 1014              	  input:
 1015              	    r0    error code   
 1016              	  output: 
 1017              	    none 
 1018              	  use:
 1019              	    r1    temp 
 1020              	*********************************/
 1021 06be 00BF     	    _FUNC tb_error 
 1022 06c0 216C     	    ldr r1,[UPP,#FLAGS]
 1023 06c2 11F0200F 	    tst r1,#FCOMP
 1024 06c6 43D1     	    bne compile_error
 1025              	rt_error:
 1026 06c8 01B4     	    push {r0}
 1027 06ca DFF8D407 	    ldr r0,=rt_error_msg 
 1028 06ce 00B5FFF7 	    _CALL uart_puts 
 1028      FEFF5DF8 
 1028      04EB
 1029 06d8 01BC     	    pop {r0}
 1030 06da DFF8C817 	    ldr r1,=err_msg  
 1031 06de 4FEA8000 	    lsl r0,#2 
 1032 06e2 0858     	    ldr r0,[r1,r0]
 1033 06e4 00B5FFF7 	    _CALL uart_puts
 1033      FEFF5DF8 
 1033      04EB
 1034 06ee D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1035 06f2 BBF80000 	    ldrh r0,[BPTR]
 1036 06f6 4FF00A01 	    mov r1,#10
 1037 06fa 00B5FFF7 	    _CALL print_int 
 1037      FEFF5DF8 
 1037      04EB
 1038 0704 4FF02C00 	    mov r0,#',' 
 1039 0708 00B5FFF7 	    _CALL uart_putc 
 1039      FEFF5DF8 
 1039      04EB
 1040 0712 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1041 0716 00B500F0 	    _CALL next_token
 1041      C2F95DF8 
ARM GAS  tinyBasic.s 			page 32


 1041      04EB
 1042 0720 02B4     	    push {r1}
 1043 0722 4FF00A01 	    mov r1,#10 
 1044 0726 00B5FFF7 	    _CALL print_int 
 1044      FEFF5DF8 
 1044      04EB
 1045 0730 4FF02C00 	    mov r0,#',' 
 1046 0734 00B5FFF7 	    _CALL uart_putc 
 1046      FEFF5DF8 
 1046      04EB
 1047 073e 01BC     	    pop {r0}
 1048 0740 4FF00A01 	    mov r1,#10 
 1049 0744 00B5FFF7 	    _CALL print_int 
 1049      FEFF5DF8 
 1049      04EB
 1050 074e 5DE1     	    b warm_start 
 1051              	compile_error:
 1052 0750 DFF85017 	    ldr r1,=err_msg 
 1053 0754 4FEA8000 	    lsl r0,#2 
 1054 0758 0858     	    ldr r0,[r1,r0]
 1055 075a 00B5FFF7 	    _CALL uart_puts
 1055      FEFF5DF8 
 1055      04EB
 1056 0764 A068     	    ldr r0,[UPP,#BASICPTR]
 1057 0766 00B5FFF7 	    _CALL uart_puts
 1057      FEFF5DF8 
 1057      04EB
 1058 0770 4FF00D00 	    mov r0,#CR 
 1059 0774 00B5FFF7 	    _CALL uart_putc  
 1059      FEFF5DF8 
 1059      04EB
 1060 077e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1061 0780 00B5FFF7 	    _CALL spaces 
 1061      FEFF5DF8 
 1061      04EB
 1062 078a 4FF05E00 	    mov r0,#'^' 
 1063 078e 00B5FFF7 	    _CALL uart_putc
 1063      FEFF5DF8 
 1063      04EB
 1064 0798 4FF00D00 	    mov r0,#CR 
 1065 079c 00B5FFF7 	    _CALL uart_putc   
 1065      FEFF5DF8 
 1065      04EB
 1066 07a6 31E1     	    b  warm_start  
 1067              	    
 1068              	rt_error_msg:
 1069 07a8 0A52756E 	  .asciz "\nRuntime error\n"
 1069      74696D65 
 1069      20657272 
 1069      6F720A00 
 1070              	
 1071              	err_msg:
 1072 07b8 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1072      00000000 
 1072      0D000000 
 1072      1B000000 
 1072      34000000 
ARM GAS  tinyBasic.s 			page 33


 1073 07d0 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1073      6F000000 
 1073      89000000 
 1073      9A000000 
 1073      AB000000 
 1074 07e4 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1074      EA000000 
 1074      FA000000 
 1074      0E010000 
 1074      21010000 
 1075              	
 1076              	    .section .rodata.tb_error 
 1077              	
 1078 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1078      72792066 
 1078      756C6C0A 
 1078      00
 1079 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1079      61782065 
 1079      72726F72 
 1079      0A00
 1080 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1080      206F7065 
 1080      72617469 
 1080      6F6E206F 
 1080      76657266 
 1081 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1081      73696F6E 
 1081      20627920 
 1081      300A00
 1082 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1082      6C696420 
 1082      6C696E65 
 1082      206E756D 
 1082      6265722E 
 1083 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1083      74696D65 
 1083      206F6E6C 
 1083      79207573 
 1083      6167652E 
 1084 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1084      616E6420 
 1084      6C696E65 
 1084      206F6E6C 
 1084      79207573 
 1085 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1085      69636174 
 1085      65206E61 
 1085      6D652E0A 
 1085      00
 1086 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1086      206E6F74 
 1086      20666F75 
 1086      6E642E0A 
 1086      00
 1087 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1087      76616C75 
ARM GAS  tinyBasic.s 			page 34


 1087      652E0A00 
 1088 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1088      20696E20 
 1088      65787465 
 1088      6E646564 
 1088      206D656D 
 1089 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1089      61746120 
 1089      666F756E 
 1089      642E0A00 
 1090 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1090      726F6772 
 1090      616D2069 
 1090      6E205241 
 1090      4D210A00 
 1091 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1091      20737973 
 1091      74656D20 
 1091      66756C6C 
 1091      2E0A00
 1092 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1092      65722066 
 1092      756C6C0A 
 1092      00
 1093              	
 1094 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1094      2074696D 
 1094      65206572 
 1094      726F722C 
 1094      2000
 1095 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1095      70696C65 
 1095      20657272 
 1095      6F722C20 
 1095      00
 1096 0151 6C617374 	tk_id: .asciz "last token id: "
 1096      20746F6B 
 1096      656E2069 
 1096      643A2000 
 1097              	
 1098              	
 1099              	    .section  .text , "ax", %progbits 
 1100              	
 1101              	/*********************************
 1102              	   BASIC: BTGL adr, mask   
 1103              	   toggle bits [adr]=[adr]^mask  
 1104              	   input:
 1105              	     r0    adr 
 1106              	     r1    mask 
 1107              	    output;
 1108              	      none 
 1109              	    use:
 1110              	      T1   temp
 1111              	      T2   temp  
 1112              	*******************************/     
 1113              	    _FUNC BTGL 
 1114              	
ARM GAS  tinyBasic.s 			page 35


 1115 07f8 7047     	    _RET 
 1116              	
 1117              	/***************************************
 1118              	   kword_cmp
 1119              	   compare keyword to dict entry
 1120              	  input:
 1121              	    r0  keyword 
 1122              	    r1  dict entry 
 1123              	    r2  character count 
 1124              	  output:
 1125              	    r0  0 not same | -1 same 
 1126              	  use:
 1127              	    r6   result  
 1128              	    T1   char 1
 1129              	    T2   char 2
 1130              	**************************************/   
 1131 07fa 00BF     	    _FUNC kword_cmp 
 1132 07fc 2DE94003 	    push {r6,T1,T2}
 1133 0800 4FF0FF36 	    mov r6,#-1 
 1134 0804 4AB1     	1:  cbz r2,9f       
 1135 0806 10F8018B 	    ldrb T1,[r0],#1
 1136 080a 11F8019B 	    ldrb T2,[r1],#1
 1137 080e A2F10102 	    sub r2,#1
 1138 0812 C845     	    cmp T1,T2
 1139 0814 F6D0     	    beq 1b 
 1140 0816 86EA0606 	    eor r6,r6  
 1141 081a 3046     	9:  mov r0,r6
 1142 081c BDE84003 	    pop {r6,T1,T2}
 1143 0820 7047     	    _RET 
 1144              	
 1145              	/***********************************************
 1146              	    search_dict 
 1147              	    search keyword in dictionary
 1148              	   input:
 1149              	  	 r0   keyword 
 1150              	     r1		dictionary first name field address  
 1151              	   output:
 1152              	     r0 		token attribute 
 1153              	     r1		  cmd_index if r0!=TK_NONE  
 1154              	   use:
 1155              	     r3   length keyword 
 1156              	     T1   keyword
 1157              	     T2   link  
 1158              	**********************************************/
 1159 0822 00BF     	  _FUNC search_dict
 1160 0824 2DE90C03 	  push {r2,r3,T1,T2}
 1161 0828 8046     	  mov T1,r0 
 1162 082a 00B5FFF7 	  _CALL strlen 
 1162      FEFF5DF8 
 1162      04EB
 1163 0834 0346     	  mov r3,r0  
 1164              	1:  
 1165 0836 8946     	   mov T2,r1  // keep for linking   
 1166 0838 0878     	   ldrb r0,[r1] 
 1167 083a 78B1     	   cbz r0,9f // null byte, end of dictionary
 1168 083c 4046     	   mov r0,T1
 1169 083e 1A46     	   mov r2,r3   
ARM GAS  tinyBasic.s 			page 36


 1170 0840 00B5FFF7 	   _CALL kword_cmp  
 1170      DBFF5DF8 
 1170      04EB
 1171 084a 18B9     	   cbnz r0,2f 
 1172 084c 4946     	   mov r1,T2
 1173 084e 51F80C1C 	   ldr r1,[r1,#-12]
 1174 0852 F0E7     	   b 1b   
 1175              	2: // found
 1176 0854 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1177 0858 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1178 085c BDE80C03 	9: pop {r2,r3,T1,T2}
 1179 0860 7047     	   _RET 
 1180              	
 1181              	/********************************************
 1182              	    bc_to_name 
 1183              	    search bytecode in dictionary and 
 1184              	    return its name 
 1185              	  input:
 1186              	    r0    keyword bytecode 
 1187              	  ouput:
 1188              	    r0    name string 
 1189              	  use:
 1190              	    T1    link 
 1191              	    T2    tmp 
 1192              	*********************************************/
 1193 0862 00BF     	    _FUNC bc_to_name 
 1194 0864 2DE90003 	    push {T1,T2}
 1195 0868 DFF83086 	    ldr T1,=kword_dict 
 1196 086c 58F8089C 	1:  ldr T2,[T1,#-8]
 1197 0870 8145     	    cmp T2,r0 
 1198 0872 04D0     	    beq 2f 
 1199 0874 58F80C8C 	    ldr T1,[T1,#-12]
 1200 0878 B8F1000F 	    cmp T1,#0
 1201 087c F6D1     	    bne 1b  
 1202 087e 4046     	2:  mov r0,T1 
 1203 0880 BDE80003 	    pop {T1,T2}
 1204 0884 7047     	    _RET
 1205              	
 1206              	
 1207              	/**************************
 1208              	    INTERPRETER 
 1209              	*************************/
 1210              	
 1211              	/*********************************
 1212              	   cold_start 
 1213              	   initialize BASIC interpreter 
 1214              	   never leave 
 1215              	   input:
 1216              	     none 
 1217              	   output:
 1218              	    none 
 1219              	*********************************/
 1220              	  .type cold_start, %function 
 1221              	  .global cold_start 
 1222              	cold_start: 
 1223 0886 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1223      C2F20004 
ARM GAS  tinyBasic.s 			page 37


 1224 088e DFF84400 	    ldr r0,src_addr 
 1225 0892 1149     	    ldr r1,dest_addr
 1226 0894 0968     	    ldr r1,[r1] 
 1227 0896 0C44     	    add UPP,r1 // system variables base address   
 1228              	// clear RAM
 1229 0898 2046     	    mov r0,UPP  
 1230 089a DFF85C11 	    ldr r1,tib 
 1231 089e 82EA0202 	    eor r2,r2 
 1232 08a2 40F8042B 	1:  str r2,[r0],#4 
 1233 08a6 8842     	    cmp r0,r1 
 1234 08a8 FBD4     	    bmi 1b 
 1235              	//copy initialized system variables to ram 
 1236 08aa DFF82800 	    ldr r0,src_addr 
 1237 08ae 2146     	    mov r1,UPP 
 1238 08b0 DFF82820 	    ldr r2,sysvar_size
 1239 08b4 00B5FFF7 	    _CALL cmove
 1239      FEFF5DF8 
 1239      04EB
 1240 08be 00B500F0 	    _CALL prt_version
 1240      0EF85DF8 
 1240      04EB
 1241 08c8 00B500F0 	    _CALL clear_basic  
 1241      5DF85DF8 
 1241      04EB
 1242 08d2 9BE0     	    b warm_start    
 1243              	src_addr:
 1244 08d4 00000000 	  .word uzero
 1245              	dest_addr:
 1246 08d8 00000000 	  .word vectors_size
 1247 08dc CC000000 	sysvar_size: .word ulast-uzero 
 1248              	
 1249              	/************************************
 1250              	    print firmware version 
 1251              	    input: 
 1252              	      none 
 1253              	    output:
 1254              	      none 
 1255              	    use:
 1256              	      r0 
 1257              	***********************************/
 1258              	    _FUNC prt_version 
 1259 08e0 DFF8C405 	    ldr r0,=version_msg 
 1260 08e4 00B5FFF7 	    _CALL uart_puts
 1260      FEFF5DF8 
 1260      04EB
 1261 08ee 9FF87800 	    ldrb r0,version 
 1262 08f2 4FEA1010 	    lsr r0,#4 
 1263 08f6 00F13000 	    add r0,#'0' 
 1264 08fa 3A28     	    cmp r0,#'9'+1 
 1265 08fc 01D4     	    bmi 1f 
 1266 08fe 00F10700 	    add r0,#7 
 1267              	  1:
 1268 0902 00B5FFF7 	    _CALL uart_putc 
 1268      FEFF5DF8 
 1268      04EB
 1269 090c 4FF02E00 	    mov r0,#'. 
 1270 0910 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 38


 1270      FEFF5DF8 
 1270      04EB
 1271 091a 9FF84C00 	    ldrb r0,version 
 1272 091e 00F00F00 	    and r0,#15 
 1273 0922 00F13000 	    add r0,'0' 
 1274 0926 3A28     	    cmp r0,#'9'+1 
 1275 0928 01D4     	    bmi 1f 
 1276 092a 00F10700 	    add r0,#7
 1277              	  1: 
 1278 092e 00B5FFF7 	    _CALL uart_putc 
 1278      FEFF5DF8 
 1278      04EB
 1279 0938 4FF00D00 	    mov r0,#CR 
 1280 093c 00B5FFF7 	    _CALL uart_putc 
 1280      FEFF5DF8 
 1280      04EB
 1281 0946 7047     	    _RET  
 1282              	version_msg:
 1283 0948 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1283      65207069 
 1283      6C6C2074 
 1283      696E7920 
 1283      42415349 
 1284              	version:
 1285 0968 10       	    .byte 0x10 
 1286 0969 0000BF   	    .p2align 2 
 1287              	
 1288              	
 1289              	/*****************************
 1290              	    clear_vars 
 1291              	    initialize variables to 0
 1292              	  input:
 1293              	    none 
 1294              	  output:
 1295              	    none 
 1296              	  use:
 1297              	    r0,r1,r2 
 1298              	*****************************/
 1299              	    _FUNC clear_vars 
 1300 096c 07B4     	    push {r0,r1,r2}
 1301 096e 80EA0000 	    eor r0,r0 
 1302 0972 04F16001 	    add r1,UPP,#VARS
 1303 0976 4FF01A02 	    mov r2,#26
 1304 097a 41F8040B 	1:  str r0,[r1],#4 
 1305 097e 013A     	    subs r2,#1
 1306 0980 FBD1     	    bne 1b  
 1307 0982 07BC     	    pop {r0,r1,r2}
 1308 0984 7047     	    _RET 
 1309              	
 1310              	/*****************************
 1311              	   clear_basic 
 1312              	   reset BASIC system variables 
 1313              	   and clear variables and RAM 
 1314              	*****************************/
 1315 0986 00BF     	    _FUNC clear_basic
 1316 0988 80EA0000 	  	eor r0,r0
 1317 098c 2064     	    str r0,[UPP,#FLAGS] 
ARM GAS  tinyBasic.s 			page 39


 1318 098e 6060     	    str r0,[UPP,#COUNT]
 1319 0990 2060     	    str r0,[UPP,#IN_SAVED]
 1320 0992 A060     	    str r0,[UPP,#BASICPTR]
 1321 0994 E060     	    str r0,[UPP,#DATAPTR]
 1322 0996 2061     	    str r0,[UPP,#DATA]
 1323 0998 6061     	    str r0,[UPP,#DATALEN]
 1324 099a 04F1CC00 	    add r0,UPP,#BASIC_START 
 1325 099e 00F11000 	    add r0,#16 
 1326 09a2 6FF00F01 	    mvn r1,#15
 1327 09a6 00EA0100 	    and r0,r1 
 1328 09aa 2063     	    str r0,[UPP,#TXTBGN]
 1329 09ac 6063     	    str r0,[UPP,#TXTEND]
 1330 09ae 00B5FFF7 	    _CALL clear_vars
 1330      DCFF5DF8 
 1330      04EB
 1331 09b8 206B     	    ldr r0,[UPP,#TXTBGN]
 1332 09ba DFF83C10 	    ldr r1,tib 
 1333 09be 82EA0202 	    eor r2,r2 
 1334 09c2 40F8042B 	1:  str r2,[r0],#4
 1335 09c6 8842     	    cmp r0,r1 
 1336 09c8 FBD4     	    bmi 1b 
 1337 09ca 7047     	    _RET  
 1338              	
 1339              	/***********************************
 1340              	   warm_init 
 1341              	   initialize interpreter context 
 1342              	  input:
 1343              	    none
 1344              	  output:
 1345              	    none 
 1346              	  use:
 1347              	    r0 
 1348              	***********************************/
 1349              	warm_init:
 1350              	// reset data stack       
 1351 09cc DFF824C0 	    ldr DP,dstack 
 1352 09d0 4FF0000A 	    mov IN,#0 // BASIC line index 
 1353 09d4 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1354 09d8 80EA0000 	    eor r0,r0 
 1355 09dc 6060     	    str r0,[UPP,#COUNT]  
 1356 09de 2064     	    str r0,[UPP,#FLAGS]
 1357 09e0 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1358 09e2 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1359 09e6 6064     	    str r0,[UPP,#TAB_WIDTH]
 1360 09e8 4FF00A00 	    mov r0,#10 // default base decimal 
 1361 09ec A061     	    str r0,[UPP,#BASE]
 1362 09ee 7047     	    _RET  
 1363              	
 1364 09f0 00000000 	mstack: .word _mstack 
 1365 09f4 00000000 	dstack: .word _dstack 
 1366 09f8 00000000 	tib: .word _tib 
 1367 09fc 00000000 	pad: .word _pad 
 1368 0a00 FCFFFFFF 	array: .word _pad - 4 
 1369 0a04 0A524541 	ready: .asciz "\nREADY" 
 1369      445900
 1370              	
 1371              	/**********************************
ARM GAS  tinyBasic.s 			page 40


 1372              	    warm_start 
 1373              	    start BASIC interpreter doesn't  
 1374              	    reset variables and code space 
 1375              	  input:
 1376              	    none 
 1377              	  output:
 1378              	    none 
 1379              	**********************************/
 1380 0a0b 00       	    _FUNC warm_start 
 1381              	// initialise parameters stack
 1382 0a0c FFF7DEFF 	    bl warm_init
 1383              	// reset main stack 
 1384 0a10 5FF82400 	    ldr r0,mstack
 1385 0a14 8546     	    mov sp,r0 
 1386 0a16 DFF89404 	    ldr r0,=ready 
 1387 0a1a 00B5FFF7 	    _CALL uart_puts 
 1387      FEFF5DF8 
 1387      04EB
 1388              	// fall in cmd_line 
 1389              	
 1390              	/**********************************
 1391              	   cmd_line 
 1392              	   shell command line 
 1393              	   input:
 1394              	      none 
 1395              	   output:
 1396              	      none 
 1397              	   use:
 1398              	
 1399              	***********************************/
 1400              	    _FUNC cmd_line 
 1401 0a24 4FF00D00 	    mov r0,#CR 
 1402 0a28 00B5FFF7 	    _CALL uart_putc 
 1402      FEFF5DF8 
 1402      04EB
 1403 0a32 5FF83C00 	1:  ldr r0,tib
 1404 0a36 4FF05001 	    mov r1,#TIB_SIZE 
 1405 0a3a 00B5FFF7 	    _CALL readln 
 1405      FEFF5DF8 
 1405      04EB
 1406 0a44 0940     	    ands r1,r1 // empty line 
 1407 0a46 F4D0     	    beq 1b 
 1408 0a48 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1408      03FC5DF8 
 1408      04EB
 1409 0a52 EED0     	    beq 1b  // tokens stored in text area 
 1410              	// interpret tokenized line 
 1411              	interpreter:
 1412 0a54 00B500F0 	  _CALL next_token 
 1412      23F85DF8 
 1412      04EB
 1413 0a5e 0028     	  cmp r0,#TK_NONE 
 1414 0a60 F8D0     	  beq interpreter   
 1415 0a62 0A28     	  cmp r0,#TK_CMD 
 1416 0a64 03D1     	  bne 2f
 1417 0a66 0846     	  mov r0,r1 
 1418 0a68 00F014F8 	  bl execute  
ARM GAS  tinyBasic.s 			page 41


 1419 0a6c F2E7     	  b interpreter   
 1420              	2: 
 1421 0a6e 0428     	  cmp r0,#TK_VAR 
 1422 0a70 05D1     	  bne 3f 
 1423 0a72 00B500F0 	  _CALL let_var 
 1423      3BF95DF8 
 1423      04EB
 1424 0a7c EAE7     	  b interpreter 
 1425              	3: 
 1426 0a7e 0528     	  cmp r0,#TK_ARRAY 
 1427 0a80 05D1     	  bne 4f
 1428 0a82 00B500F0 	  _CALL let_array 
 1428      41F95DF8 
 1428      04EB
 1429 0a8c E2E7     	  b interpreter
 1430              	4: 
 1431 0a8e 0128     	  cmp r0,#TK_COLON
 1432 0a90 E0D0     	  beq interpreter
 1433 0a92 11E6     	  b syntax_error
 1434              	
 1435              	/*****************************
 1436              	    execute 
 1437              	    execute a BASIC routine from 
 1438              	    its token value 
 1439              	  input:
 1440              	    r0  BASIC SUB|FUNC token  
 1441              	  output: 
 1442              	    depend on SUB|FUNc
 1443              	*****************************/
 1444              	    _FUNC execute 
 1445 0a94 DFF81814 	    ldr r1,=fn_table 
 1446 0a98 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1447 0a9c 0047     	    bx r0 
 1448              	
 1449              	/*************************************
 1450              	  next_token 
 1451              	  extract next token from token list 
 1452              	  input:
 1453              	    none 
 1454              	  output:
 1455              	    r0    token attribute
 1456              	    r1    token value if there is one 
 1457              	  use:
 1458              	    T1    exit token type  
 1459              	****************************/
 1460 0a9e 00BF     	    _FUNC next_token 
 1461 0aa0 4DF8048D 	    push {T1}
 1462 0aa4 88EA0808 	    eor T1,T1 // TK_NONE 
 1463 0aa8 6068     	    ldr r0,[UPP,#COUNT]
 1464 0aaa 8245     	    cmp IN,r0 
 1465 0aac 0FD4     	    bmi 0f
 1466              	new_line:
 1467 0aae BBF80010 	    ldrh r1,[BPTR] // line #
 1468 0ab2 01B9     	    cbnz r1, end_of_line  // command line
 1469 0ab4 AAE7     	    b warm_start
 1470              	end_of_line:        
 1471 0ab6 8344     	    add BPTR,r0 // next line 
ARM GAS  tinyBasic.s 			page 42


 1472 0ab8 606B     	    ldr r0,[UPP,#TXTEND]
 1473 0aba 8345     	    cmp BPTR,r0 
 1474 0abc A6D5     	    bpl warm_start // end of program
 1475 0abe 9BF80200 	    ldrb r0,[BPTR,#2]
 1476 0ac2 6060     	    str r0,[UPP,#COUNT] 
 1477 0ac4 4FF0030A 	    mov IN,#3
 1478 0ac8 4FF00100 	    mov r0,#TK_COLON 
 1479 0acc 2AE0     	    b 9f    
 1480              	0: 
 1481 0ace C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1482 0ad2 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1483 0ad6 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1484 0ada 0AF1010A 	    add IN,#1  
 1485 0ade 8046     	    mov T1,r0 
 1486 0ae0 00F03F00 	    and r0,#0x3f // limit mask 
 1487 0ae4 F349     	    ldr r1,=tok_jmp 
 1488 0ae6 D1E800F0 	    tbb [r1,r0]
 1489              	1: // pc reference point 
 1490 0aea 1BE0     	    b 9f 
 1491              	2: // .byte param
 1492 0aec 1BF80A10 	    ldrb r1,[BPTR,IN]
 1493 0af0 0AF1010A 	    add IN,#1 
 1494 0af4 16E0     	    b 9f 
 1495              	3: // .hword param 
 1496 0af6 3BF80A10 	    ldrh r1,[BPTR,IN]
 1497 0afa 0AF1020A 	    add IN,#2 
 1498 0afe 11E0     	    b 9f 
 1499              	4: // .word param  
 1500 0b00 5BF80A10 	    ldr r1,[BPTR,IN]
 1501 0b04 0AF1040A 	    add IN,#4
 1502 0b08 0CE0     	    b 9f 
 1503              	5: // .asciz param 
 1504 0b0a 0BEB0A01 	    add r1,BPTR,IN 
 1505 0b0e 0846     	    mov r0,r1  
 1506 0b10 00B5FFF7 	    _CALL strlen 
 1506      FEFF5DF8 
 1506      04EB
 1507 0b1a 8244     	    add IN,r0
 1508 0b1c 0AF1010A 	    add IN,#1
 1509 0b20 00E0     	    b 9f  
 1510              	8: // syntax error 
 1511 0b22 C9E5     	    b syntax_error 
 1512 0b24 4046     	9:  mov r0,T1  
 1513 0b26 5DF8048B 	    pop {T1}
 1514 0b2a 7047     	    _RET
 1515              	
 1516              	  .p2align 2
 1517              	tok_jmp: // token id  tbb offset 
 1518 0b2c 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1519 0b2e 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1520 0b32 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1521 0b36 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1522 0b3a 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1523 0b3e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1523      1C
 1524 0b43 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1524      1C1C
ARM GAS  tinyBasic.s 			page 43


 1525 0b49 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1526 0b4c 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1527 0b4f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1527      1C1C1C1C 
 1528 0b57 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1528      1C1C
 1529 0b5d 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1529      1D1D
 1530 0b63 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1530      1C1C1C1C 
 1530      1C
 1531              	
 1532              	  .p2align 2 
 1533              	
 1534              	/*********************************
 1535              	    expect 
 1536              	    check if next token is of 
 1537              	    expected type. If not 
 1538              	    call syntax_error  
 1539              	  input:
 1540              	      r0   token attribute
 1541              	  output:
 1542              	      r0  token attribute 
 1543              	      r1  token value
 1544              	  use:
 1545              	      T1   
 1546              	**********************************/
 1547              	    _FUNC expect 
 1548 0b6c 4DF8048D 	    push {T1}
 1549 0b70 8046     	    mov T1,r0 
 1550 0b72 00B5FFF7 	    _CALL next_token 
 1550      94FF5DF8 
 1550      04EB
 1551 0b7c 4045     	    cmp r0,T1  
 1552 0b7e 7FF49BAD 	    bne syntax_error 
 1553 0b82 5DF8048B 	    pop {T1}
 1554 0b86 7047     	    _RET 
 1555              	
 1556              	/***********************************
 1557              	    func_args 
 1558              	    get function arguments list 
 1559              	  input:
 1560              	    none 
 1561              	  output:
 1562              	    r0    arg. count 
 1563              	  use:
 1564              	
 1565              	************************************/
 1566              	    _FUNC func_args 
 1567 0b88 4FF00600 	    mov r0,#TK_LPAREN 
 1568 0b8c 00B5FFF7 	    _CALL expect 
 1568      EDFF5DF8 
 1568      04EB
 1569 0b96 00B500F0 	    _CALL arg_list 
 1569      0CF85DF8 
 1569      04EB
 1570 0ba0 01B4     	    push {r0}
ARM GAS  tinyBasic.s 			page 44


 1571 0ba2 4FF00700 	    mov r0,#TK_RPAREN 
 1572 0ba6 00B5FFF7 	    _CALL expect 
 1572      E0FF5DF8 
 1572      04EB
 1573 0bb0 01BC     	    pop {r0}
 1574 0bb2 7047     	    _RET 
 1575              	
 1576              	/**********************************
 1577              	    arg_list 
 1578              	    get arguments list on dstack 
 1579              	  input:
 1580              	    none 
 1581              	  output:
 1582              	    r0    arg count
 1583              	  use:
 1584              	    T1    tmp count  
 1585              	***********************************/
 1586              	    _FUNC arg_list 
 1587 0bb4 4DF8048D 	    push {T1}
 1588 0bb8 88EA0808 	    eor T1,T1 
 1589 0bbc 00B500F0 	1:  _CALL expression 
 1589      CBF85DF8 
 1589      04EB
 1590 0bc6 0028     	    cmp R0,#TK_NONE 
 1591 0bc8 10D0     	    beq 9f 
 1592 0bca 0E28     	    cmp r0,#TK_INTGR
 1593 0bcc 0ED1     	    bne 9f 
 1594 0bce 4CF8041D 	    _PUSH r1 
 1595 0bd2 08F10108 	    add T1,#1 
 1596 0bd6 00B5FFF7 	    _CALL next_token 
 1596      62FF5DF8 
 1596      04EB
 1597 0be0 0828     	    cmp r0,#TK_COMMA 
 1598 0be2 EBD0     	    beq 1b 
 1599 0be4 D4F800A0 	    _UNGET_TOKEN 
 1599      D4F808B0 
 1600 0bec 4046     	9:  mov r0,T1 
 1601 0bee 5DF8048B 	    pop {T1}
 1602 0bf2 7047     	    _RET 
 1603              	
 1604              	/***********************************
 1605              	 factor
 1606              	 arithmetick factor parser 
 1607              	 factor ::= ['+'|'-'|e]  var | @ |
 1608              				 integer | function |
 1609              				 '('expression')' 
 1610              	  input: 
 1611              	    none 
 1612              	  output:
 1613              	    r0   token attribute 
 1614              	    r1   token value 
 1615              	  use:
 1616              	    r2   temp 
 1617              	    T1   sign 
 1618              	    T2   exit token attribute 
 1619              	***********************************/
 1620              	    _FUNC factor 
ARM GAS  tinyBasic.s 			page 45


 1621 0bf4 2DE90403 	    push {r2,T1,T2}
 1622 0bf8 4FF00E09 	    mov T2,#TK_INTGR 
 1623 0bfc 4FF00108 	    mov T1,#1 // default sign +  
 1624 0c00 00B5FFF7 	    _CALL next_token
 1624      4DFF5DF8 
 1624      04EB
 1625 0c0a 0246     	    mov r2,r0 
 1626 0c0c 00F03000 	    and r0,#TK_GRP_MASK 
 1627 0c10 1028     	    cmp r0,#TK_GRP_ADD
 1628 0c12 1046     	    mov r0,r2
 1629 0c14 08D1     	    bne 1f 
 1630 0c16 1028     	    cmp r0,#TK_PLUS 
 1631 0c18 01D0     	    beq 0f 
 1632 0c1a 4FF0FF38 	    mov T1,#-1 // minus sign 
 1633 0c1e 00B5FFF7 	0:  _CALL next_token
 1633      3EFF5DF8 
 1633      04EB
 1634 0c28 0E28     	1:  cmp r0,#TK_INTGR 
 1635 0c2a 50D0     	    beq 8f 
 1636 0c2c 0528     	    cmp r0,#TK_ARRAY 
 1637 0c2e 1ED1     	    bne 2f 
 1638 0c30 4FF00600 	    mov r0,#TK_LPAREN 
 1639 0c34 00B5FFF7 	    _CALL expect 
 1639      99FF5DF8 
 1639      04EB
 1640 0c3e 00B500F0 	    _CALL expression
 1640      8AF85DF8 
 1640      04EB
 1641 0c48 0E28     	    cmp r0,#TK_INTGR
 1642 0c4a 7FF435AD 	    bne syntax_error
 1643 0c4e 8146     	    mov T2,r0
 1644 0c50 0A46     	    mov r2,r1  
 1645 0c52 4FF00700 	    mov r0,#TK_RPAREN
 1646 0c56 00B5FFF7 	    _CALL expect 
 1646      88FF5DF8 
 1646      04EB
 1647 0c60 1046     	    mov r0,r2 
 1648 0c62 00B500F0 	    _CALL get_array_element 
 1648      EEF85DF8 
 1648      04EB
 1649 0c6c 2FE0     	    b 8f
 1650 0c6e 0628     	2:  cmp r0,#TK_LPAREN 
 1651 0c70 12D1     	    bne 3f 
 1652 0c72 00B500F0 	    _CALL expression 
 1652      70F85DF8 
 1652      04EB
 1653 0c7c 0E28     	    cmp r0,#TK_INTGR 
 1654 0c7e 7FF41BAD 	    bne syntax_error
 1655 0c82 8146     	    mov T2,r0
 1656 0c84 0A46     	    mov r2,r1   
 1657 0c86 4FF00700 	    mov r0,#TK_RPAREN
 1658 0c8a 00B5FFF7 	    _CALL expect 
 1658      6EFF5DF8 
 1658      04EB
 1659 0c94 1146     	    mov r1,r2 
 1660 0c96 1AE0     	    b 8f       
 1661 0c98 0428     	3:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 46


 1662 0c9a 06D1     	    bne 4f
 1663 0c9c 0846     	    mov r0,r1  
 1664 0c9e 00B500F0 	    _CALL get_var 
 1664      E4F85DF8 
 1664      04EB
 1665 0ca8 11E0     	    b 8f 
 1666 0caa 0B28     	4:  cmp r0,#TK_IFUNC 
 1667 0cac 01D0     	    beq 5f 
 1668 0cae 0C28     	    cmp r0,#TK_CFUNC 
 1669 0cb0 06D1     	    bne 6f 
 1670 0cb2 0846     	5:  mov r0,r1  
 1671 0cb4 00B5FFF7 	    _CALL execute
 1671      EDFE5DF8 
 1671      04EB
 1672 0cbe 06E0     	    b 8f 
 1673 0cc0 D4F800A0 	6:  _UNGET_TOKEN      
 1673      D4F808B0 
 1674 0cc8 4FF00000 	    mov r0,#TK_NONE
 1675 0ccc 03E0     	    b 9f  
 1676 0cce 08FB01F1 	8:  mul r1,T1 
 1677 0cd2 5FEA0900 	    movs r0,T2 
 1678 0cd6 BDE80403 	9:  pop {r2,T1,T2}   
 1679 0cda 7047     	    _RET 
 1680              	
 1681              	
 1682              	/*****************************************
 1683              	    term 
 1684              	    term parser 
 1685              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1686              	    output:
 1687              	      r0  	token attribute 
 1688              	      r1		integer
 1689              	    use:
 1690              	      r2    first operand 
 1691              	      r3    temp 
 1692              	      T1    operator 
 1693              	      T2    exit token attribute 
 1694              	******************************************/
 1695              	     _FUNC term 
 1696 0cdc 2DE90C03 	    push {r2,r3,T1,T2}
 1697 0ce0 4FF00009 	    mov T2,#TK_NONE 
 1698 0ce4 00B5FFF7 	    _CALL factor
 1698      85FF5DF8 
 1698      04EB
 1699 0cee 60B3     	    cbz r0, 9f  // no factor   
 1700 0cf0 8146     	    mov T2,r0  // TK_INTGR 
 1701 0cf2 0A46     	    mov r2,r1 // first factor    
 1702 0cf4 00B5FFF7 	0:  _CALL next_token
 1702      D3FE5DF8 
 1702      04EB
 1703 0cfe 0346     	    mov r3,r0   
 1704 0d00 00F03000 	    and r0,#TK_GRP_MASK 
 1705 0d04 2028     	    cmp r0,#TK_GRP_MULT
 1706 0d06 04D0     	    beq 1f
 1707 0d08 D4F800A0 	    _UNGET_TOKEN
 1707      D4F808B0 
 1708 0d10 1BE0     	    b 9f 
ARM GAS  tinyBasic.s 			page 47


 1709 0d12 9846     	1:  mov T1,r3 
 1710 0d14 00B5FFF7 	    _CALL factor  
 1710      6DFF5DF8 
 1710      04EB
 1711 0d1e 3FF4CBAC 	    beq syntax_error 
 1712 0d22 B8F1200F 	    cmp T1,#TK_MULT
 1713 0d26 02D1     	    bne 2f 
 1714              	// multiplication
 1715 0d28 01FB02F2 	    mul r2,r1
 1716 0d2c E2E7     	    b 0b  
 1717 0d2e B8F1210F 	2:  cmp T1,#TK_DIV 
 1718 0d32 02D1     	    bne 3f
 1719              	// division
 1720 0d34 92FBF1F2 	    sdiv r2,r2,r1
 1721 0d38 DCE7     	    b 0b  
 1722              	3: // modulo
 1723 0d3a 1046     	    mov r0,r2 
 1724 0d3c 92FBF1F2 	    sdiv r2,r2,r1 
 1725 0d40 01FB02F2 	    mul  r2,r1 
 1726 0d44 A0EB0202 	    sub  r2,r0,r2
 1727 0d48 D4E7     	    b 0b  
 1728 0d4a 1146     	9:  mov r1,r2 
 1729 0d4c 5FEA0900 	    movs r0,T2 
 1730 0d50 BDE80C03 	    pop {r2,r3,T1,T2}
 1731 0d54 7047     	    _RET 
 1732              	
 1733              	/*****************************************
 1734              	    expression 
 1735              	    arithmetic expression parser 
 1736              	    expression ::= term [['+'|'-'] term]*
 1737              	    result range {-32768..32767}
 1738              	    output:
 1739              	      r0    TK_NONE || TK_INTGR 
 1740              	      r1 	  integer
 1741              	    use:
 1742              	      r2  left operand 
 1743              	      T1  operator 
 1744              	      T2  exit token attribute
 1745              	******************************************/
 1746 0d56 00BF     	    _FUNC expression 
 1747 0d58 2DE90403 	    push {r2,t1,t2}
 1748 0d5c 4FF00009 	    mov T2,#TK_NONE
 1749 0d60 82EA0202 	    eor r2,r2 // zero 
 1750 0d64 00B5FFF7 	    _CALL term 
 1750      B9FF5DF8 
 1750      04EB
 1751 0d6e 21D0     	    beq 9f  // no term  
 1752 0d70 0A46     	    mov r2,r1 // first term
 1753 0d72 4FF00E09 	    mov T2,#TK_INTGR    
 1754 0d76 00B5FFF7 	1:  _CALL next_token 
 1754      92FE5DF8 
 1754      04EB
 1755 0d80 8046     	    mov T1,r0 // token attribute 
 1756 0d82 00F03000 	    and r0,#TK_GRP_MASK 
 1757 0d86 1028     	    cmp r0,#TK_GRP_ADD 
 1758 0d88 04D0     	    beq 3f 
 1759 0d8a D4F800A0 	    _UNGET_TOKEN
ARM GAS  tinyBasic.s 			page 48


 1759      D4F808B0 
 1760 0d92 0FE0     	    b 9f  
 1761 0d94 00B5FFF7 	3:  _CALL term 
 1761      A1FF5DF8 
 1761      04EB
 1762 0d9e 0E28     	    cmp r0,#TK_INTGR 
 1763 0da0 7FF48AAC 	    bne syntax_error 
 1764 0da4 B8F1100F 	    cmp T1,#TK_PLUS 
 1765 0da8 02D0     	    beq 4f 
 1766 0daa A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1767 0dae E2E7     	    b 1b 
 1768 0db0 0A44     	4:  add r2,r2,r1 // N1+N2
 1769 0db2 E0E7     	    b 1b
 1770 0db4 4846     	9:  mov r0,T2 
 1771 0db6 1146     	    mov r1,r2 
 1772 0db8 BDE80403 	    pop {r2,t1,t2}
 1773 0dbc 7047     	    _RET 
 1774              	
 1775              	
 1776              	/**********************************************
 1777              	    relation parser 
 1778              	    rel ::= expr1 rel_op expr2
 1779              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1780              	    relation return  integer , zero is false 
 1781              	    output:
 1782              	        r0	TK_INTGR  
 1783              	        r1	integer 
 1784              	    use:
 1785              	        r2   first operand 
 1786              	        T1   relop   
 1787              	**********************************************/
 1788 0dbe 00BF     	    _FUNC relation 
 1789 0dc0 2DE90401 	    push {r2,T1}
 1790 0dc4 00B5FFF7 	    _CALL expression 
 1790      C7FF5DF8 
 1790      04EB
 1791 0dce 0E28     	    cmp r0,#TK_INTGR 
 1792 0dd0 7FF472AC 	    bne syntax_error 
 1793 0dd4 0A46     	    mov r2,r1  // first operand  
 1794 0dd6 00B5FFF7 	    _CALL next_token 
 1794      62FE5DF8 
 1794      04EB
 1795 0de0 8046     	    mov T1,r0  // relop  
 1796 0de2 00F03000 	    and r0,#TK_GRP_MASK 
 1797 0de6 3028     	    cmp r0,#TK_GRP_RELOP 
 1798 0de8 1DD1     	    bne 8f  // single operand 
 1799 0dea 00B5FFF7 	    _CALL expression 
 1799      B4FF5DF8 
 1799      04EB
 1800 0df4 0E28     	    cmp r0,#TK_INTGR 
 1801 0df6 7FF45FAC 	    bne syntax_error 
 1802 0dfa 8A42     	    cmp r2,r1 // compare operands  
 1803 0dfc 4FF0FF31 	    mov r1,#-1 
 1804 0e00 2D4A     	    ldr r2,=relop_jmp
 1805 0e02 08F00708 	    and T1,#7 // {1..6}
 1806 0e06 D2E808F0 	    tbb [r2,T1]    
 1807              	rel_idx0:
ARM GAS  tinyBasic.s 			page 49


 1808              	rel_eq:
 1809 0e0a 11D0     	    beq 9f 
 1810 0e0c 08E0     	    b rel_false
 1811              	rel_lt: 
 1812 0e0e 0FDB     	    blt 9f   
 1813 0e10 06E0     	    b rel_false 
 1814              	rel_le:
 1815 0e12 0DDD     	    ble 9f  
 1816 0e14 04E0     	    b rel_false 
 1817              	rel_gt:
 1818 0e16 0BDC     	    bgt 9f  
 1819 0e18 02E0     	    b rel_false  
 1820              	rel_ge:
 1821 0e1a 09DA     	    bge 9f  
 1822 0e1c 00E0     	    b rel_false  
 1823              	rel_diff:
 1824 0e1e 07D1     	    bne 9f 
 1825              	rel_false:    
 1826 0e20 81EA0101 	    eor r1,r1  // false
 1827 0e24 04E0     	    b 9f  
 1828 0e26 D4F800A0 	8:  _UNGET_TOKEN 
 1828      D4F808B0 
 1829 0e2e 1146     	    mov r1,r2    
 1830 0e30 4FF00E00 	9:  mov r0,#TK_INTGR
 1831 0e34 BDE80401 	    pop {r2,T1}
 1832 0e38 7047     	    _RET 
 1833              	
 1834              	
 1835              	relop_jmp: 
 1836 0e3a 00       	  .byte 0 
 1837 0e3b 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1838 0e3c 00       	  .byte 0 // =
 1839 0e3d 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1840 0e3e 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1841 0e3f 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1842 0e40 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1843              	
 1844              	
 1845              	/***********************************
 1846              	    get_array_element
 1847              	    return value of @(n)
 1848              	  input:
 1849              	    r0    indice 
 1850              	  output:
 1851              	    r0   TK_INTGR
 1852              	    r1   value  
 1853              	************************************/
 1854 0e41 0000BF   	    _FUNC get_array_element 
 1855 0e44 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1856 0e48 4FEA8000 	    lsl r0,#2 
 1857 0e4c C0EB0100 	    rsb r0,r1 
 1858 0e50 0168     	    ldr r1,[r0]
 1859 0e52 4FF00E00 	    mov r0,#TK_INTGR 
 1860 0e56 7047     	    _RET 
 1861              	
 1862              	
 1863              	/***********************************
ARM GAS  tinyBasic.s 			page 50


 1864              	    set_array_element 
 1865              	    set value of array element 
 1866              	  input:
 1867              	    r0   index 
 1868              	    r1   new value 
 1869              	  output:
 1870              	    none
 1871              	  use:
 1872              	    r2    array pointer 
 1873              	**********************************/
 1874              	    _FUNC set_array_element 
 1875 0e58 04B4     	    push {r2}
 1876 0e5a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1877 0e5e 4FEA8000 	    lsl r0,#2 
 1878 0e62 A1EB0001 	    sub r1,r0 
 1879 0e66 0960     	    str r1,[r1]
 1880 0e68 04BC     	    pop {r2}
 1881 0e6a 7047     	    _RET 
 1882              	
 1883              	/***********************************
 1884              	   get_var 
 1885              	   get variable value 
 1886              	  input:
 1887              	     r0    variable index {0..25}
 1888              	  output:
 1889              	     r0    TK_INTGR
 1890              	     r1    value 
 1891              	**********************************/
 1892              	    _FUNC get_var 
 1893 0e6c 04F16001 	    add r1,UPP,#VARS
 1894 0e70 4FEA8000 	    lsl r0,#2 
 1895 0e74 0958     	    ldr r1,[r1,r0]
 1896 0e76 4FF00E00 	    mov r0,#TK_INTGR
 1897 0e7a 7047     	    _RET 
 1898              	
 1899              	/*********************************
 1900              	    set_var 
 1901              	    set variable value 
 1902              	  input:
 1903              	     r0    variable index {0..25}
 1904              	     r1    new value 
 1905              	  output:
 1906              	    none 
 1907              	  use:
 1908              	    r2   vars pointer 
 1909              	*********************************/
 1910              	    _FUNC set_var 
 1911 0e7c 04B4     	    push {r2}
 1912 0e7e 226E     	    ldr r2,[UPP,#VARS]
 1913 0e80 4FEA8000 	    lsl r0,#2
 1914 0e84 1150     	    str r1,[r2,r0]
 1915 0e86 04BC     	    pop {r2}
 1916 0e88 7047     	    _RET 
 1917              	
 1918              	/******************************
 1919              	    CONSTANTS data
 1920              	******************************/
ARM GAS  tinyBasic.s 			page 51


 1921              	
 1922 0e8a 0000     	  .section .rodata 
 1923              	
 1924              	// system variables initial value 
 1925              	uzero:
 1926 0000 00000000 	  .word 0 // IN_SAVED
 1927 0004 00000000 	  .word 0 // COUNT
 1928 0008 00000000 	  .word 0 // BASICPTR
 1929 000c 00000000 	  .word 0 // DATAPTR
 1930 0010 00000000 	  .word 0 // DATA
 1931 0014 00000000 	  .word 0 // DATALEN
 1932 0018 0A000000 	  .word 10 // BASE
 1933 001c 00000000 	  .word 0 // TICKS
 1934 0020 00000000 	  .word 0 // TIMER
 1935 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 1936 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 1937 002c 00000000 	  .word 0 // FFREE
 1938 0030 CC000000 	  .word ulast-uzero // TXTBGN
 1939 0034 CC000000 	  .word ulast-uzero // TXTEND
 1940 0038 00000000 	  .word 0 //LOOP_DEPTH
 1941 003c 00000000 	  .word 0 // ARRAY_SIZE
 1942 0040 00000000 	  .word 0 // FLAGS
 1943 0044 04000000 	  .word 4 // TAB_WIDTH
 1944 0048 00000000 	  .word 0 // RX_HEAD
 1945 004c 00000000 	  .word 0 // RX_TAIL
 1946 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1946      00000000 
 1946      00000000 
 1946      00000000 
 1947 0060 00000000 	  .space VARS_SIZE,0 // VARS
 1947      00000000 
 1947      00000000 
 1947      00000000 
 1947      00000000 
 1948 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 1949              	ulast:
 1950              	
 1951              	  .section .rodata.dictionary 
 1952              	
 1953              	// keep alphabetic order for BASIC names from Z-A
 1954              	// this sort order is for for WORDS cmd output. 	
 1955              	
 1956              		.equ link, 0
 1957              	kword_end:
 1958 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1958      00000000 
 1958      00000000 
 1958      00000000 
 1959 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1959      64000000 
 1959      0A000000 
 1959      5854524D 
 1959      54000000 
 1960 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1960      65000000 
 1960      0A000000 
 1960      58524356 
ARM GAS  tinyBasic.s 			page 52


 1960      00000000 
 1961 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1961      63000000 
 1961      0B000000 
 1961      584F5200 
 1962 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1962      62000000 
 1962      0A000000 
 1962      57524954 
 1962      45000000 
 1963 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1963      61000000 
 1963      0A000000 
 1963      574F5244 
 1963      53000000 
 1964 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1964      60000000 
 1964      0A000000 
 1964      57414954 
 1964      00000000 
 1965 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1965      5F000000 
 1965      0B000000 
 1965      55535200 
 1966 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1966      5E000000 
 1966      0A000000 
 1966      554E5449 
 1966      4C000000 
 1967 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1967      5D000000 
 1967      0B000000 
 1967      55464C41 
 1967      53480000 
 1968 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1968      5C000000 
 1968      0B000000 
 1968      55424F55 
 1968      4E440000 
 1969 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1969      5B000000 
 1969      0A000000 
 1969      544F4E45 
 1969      00000000 
 1970 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1970      5A000000 
 1970      0A000000 
 1970      544F0000 
 1971 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1971      58000000 
 1971      0A000000 
 1971      54494D45 
 1971      52000000 
 1972 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1972      59000000 
 1972      0B000000 
 1972      54494D45 
ARM GAS  tinyBasic.s 			page 53


 1972      4F555400 
 1973 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1973      57000000 
 1973      0B000000 
 1973      5449434B 
 1973      53000000 
 1974 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1974      56000000 
 1974      0A000000 
 1974      53544F50 
 1974      00000000 
 1975 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1975      55000000 
 1975      0A000000 
 1975      53544550 
 1975      00000000 
 1976 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1976      54000000 
 1976      0A000000 
 1976      53504957 
 1976      52000000 
 1977 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1977      53000000 
 1977      0A000000 
 1977      53504953 
 1977      454C0000 
 1978 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1978      51000000 
 1978      0B000000 
 1978      53504952 
 1978      44000000 
 1979 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1979      52000000 
 1979      0A000000 
 1979      53504945 
 1979      4E000000 
 1980 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1980      50000000 
 1980      0A000000 
 1980      534C4545 
 1980      50000000 
 1981 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1981      4F000000 
 1981      0B000000 
 1981      53495A45 
 1981      00000000 
 1982 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1982      4E000000 
 1982      0A000000 
 1982      53484F57 
 1982      00000000 
 1983 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1983      4D000000 
 1983      0A000000 
 1983      53415645 
 1983      00000000 
 1984 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
ARM GAS  tinyBasic.s 			page 54


 1984      4C000000 
 1984      0A000000 
 1984      52554E00 
 1985 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1985      4B000000 
 1985      0B000000 
 1985      52534849 
 1985      46540000 
 1986 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1986      4A000000 
 1986      0B000000 
 1986      524E4400 
 1987 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1987      49000000 
 1987      0A000000 
 1987      52455455 
 1987      524E0000 
 1988 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1988      48000000 
 1988      0A000000 
 1988      52455354 
 1988      4F524500 
 1989 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1989      47000000 
 1989      0A000000 
 1989      52454D41 
 1989      524B0000 
 1990 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1990      46000000 
 1990      0A000000 
 1990      5245424F 
 1990      4F540000 
 1991 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1991      45000000 
 1991      0B000000 
 1991      52454144 
 1991      00000000 
 1992 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1992      44000000 
 1992      0B000000 
 1992      514B4559 
 1992      00000000 
 1993 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1993      43000000 
 1993      0B000000 
 1993      50525449 
 1993      00000000 
 1994 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1994      42000000 
 1994      0B000000 
 1994      50525448 
 1994      00000000 
 1995 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1995      41000000 
 1995      0B000000 
 1995      50525447 
 1995      00000000 
ARM GAS  tinyBasic.s 			page 55


 1996 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1996      40000000 
 1996      0B000000 
 1996      50525446 
 1996      00000000 
 1997 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1997      3F000000 
 1997      0B000000 
 1997      50525445 
 1997      00000000 
 1998 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1998      3E000000 
 1998      0B000000 
 1998      50525444 
 1998      00000000 
 1999 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1999      3D000000 
 1999      0B000000 
 1999      50525443 
 1999      00000000 
 2000 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2000      3C000000 
 2000      0B000000 
 2000      50525442 
 2000      00000000 
 2001 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2001      3B000000 
 2001      0B000000 
 2001      50525441 
 2001      00000000 
 2002 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2002      3A000000 
 2002      0A000000 
 2002      5052494E 
 2002      54000000 
 2003 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2003      39000000 
 2003      0B000000 
 2003      504F5554 
 2003      00000000 
 2004 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2004      38000000 
 2004      0A000000 
 2004      504F4B45 
 2004      00000000 
 2005 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2005      35000000 
 2005      0A000000 
 2005      504D4F44 
 2005      45000000 
 2006 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2006      37000000 
 2006      0B000000 
 2006      50494E50 
 2006      00000000 
 2007 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2007      36000000 
ARM GAS  tinyBasic.s 			page 56


 2007      0B000000 
 2007      5045454B 
 2007      00000000 
 2008 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2008      34000000 
 2008      0A000000 
 2008      50415553 
 2008      45000000 
 2009 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2009      33000000 
 2009      0B000000 
 2009      50414400 
 2010 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2010      32000000 
 2010      0B000000 
 2010      4F520000 
 2011 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2011      31000000 
 2011      0B000000 
 2011      4F445200 
 2012 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2012      30000000 
 2012      0B000000 
 2012      4E4F5400 
 2013 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2013      2E000000 
 2013      0A000000 
 2013      4E455854 
 2013      00000000 
 2014 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2014      2F000000 
 2014      0A000000 
 2014      4E455700 
 2015 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2015      2D000000 
 2015      0B000000 
 2015      4D554C44 
 2015      49560000 
 2016 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2016      2C000000 
 2016      0B000000 
 2016      4C534849 
 2016      46540000 
 2017 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2017      2B000000 
 2017      0B000000 
 2017      4C4F4700 
 2018 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2018      2A000000 
 2018      0A000000 
 2018      4C4F4144 
 2018      00000000 
 2019 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2019      29000000 
 2019      0A000000 
 2019      4C495354 
 2019      00000000 
ARM GAS  tinyBasic.s 			page 57


 2020 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2020      28000000 
 2020      0A000000 
 2020      4C455400 
 2021 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2021      27000000 
 2021      0B000000 
 2021      4B455900 
 2022 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2022      26000000 
 2022      0A000000 
 2022      49574447 
 2022      52454600 
 2023 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2023      25000000 
 2023      0A000000 
 2023      49574447 
 2023      454E0000 
 2024 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2024      24000000 
 2024      0B000000 
 2024      494E5645 
 2024      52540000 
 2025 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2025      23000000 
 2025      0A000000 
 2025      494E5055 
 2025      54000000 
 2026 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2026      22000000 
 2026      0A000000 
 2026      49460000 
 2027 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2027      21000000 
 2027      0B000000 
 2027      49445200 
 2028 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2028      20000000 
 2028      0A000000 
 2028      48455800 
 2029 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2029      1F000000 
 2029      0B000000 
 2029      4750494F 
 2029      00000000 
 2030 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2030      1E000000 
 2030      0A000000 
 2030      474F544F 
 2030      00000000 
 2031 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2031      1D000000 
 2031      0A000000 
 2031      474F5355 
 2031      42000000 
 2032 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2032      1C000000 
ARM GAS  tinyBasic.s 			page 58


 2032      0A000000 
 2032      464F5247 
 2032      45540000 
 2033 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2033      1B000000 
 2033      0A000000 
 2033      464F5200 
 2034 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 2034      1A000000 
 2034      0A000000 
 2034      46435055 
 2034      00000000 
 2035 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2035      18000000 
 2035      0A000000 
 2035      454E4400 
 2036 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2036      19000000 
 2036      0B000000 
 2036      45455052 
 2036      4F4D0000 
 2037 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2037      17000000 
 2037      0A000000 
 2037      44575249 
 2037      54450000 
 2038 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2038      66000000 
 2038      0A000000 
 2038      44554D50 
 2038      00000000 
 2039 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2039      16000000 
 2039      0B000000 
 2039      44524541 
 2039      44000000 
 2040 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2040      15000000 
 2040      0A000000 
 2040      444F0000 
 2041 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2041      14000000 
 2041      0A000000 
 2041      44495200 
 2042 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2042      13000000 
 2042      0A000000 
 2042      44454300 
 2043 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2043      12000000 
 2043      0B000000 
 2043      44445200 
 2044 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2044      11000000 
 2044      0A000000 
 2044      44415441 
 2044      4C4E0000 
ARM GAS  tinyBasic.s 			page 59


 2045 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2045      10000000 
 2045      0A000000 
 2045      44415441 
 2045      00000000 
 2046 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2046      0F000000 
 2046      0B000000 
 2046      43524C00 
 2047 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2047      0E000000 
 2047      0B000000 
 2047      43524800 
 2048 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2048      0D000000 
 2048      0C000000 
 2048      43484152 
 2048      00000000 
 2049 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2049      0C000000 
 2049      0A000000 
 2049      42594500 
 2050 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2050      0B000000 
 2050      0A000000 
 2050      42544F47 
 2050      4C000000 
 2051 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2051      0A000000 
 2051      0B000000 
 2051      42544553 
 2051      54000000 
 2052 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2052      09000000 
 2052      0A000000 
 2052      42534554 
 2052      00000000 
 2053 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2053      08000000 
 2053      0A000000 
 2053      42524553 
 2053      00000000 
 2054 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2054      07000000 
 2054      0B000000 
 2054      42495400 
 2055 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2055      06000000 
 2055      0A000000 
 2055      41575500 
 2056 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2056      05000000 
 2056      0A000000 
 2056      4155544F 
 2056      52554E00 
 2057 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2057      04000000 
ARM GAS  tinyBasic.s 			page 60


 2057      0B000000 
 2057      41534300 
 2058 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2058      03000000 
 2058      0B000000 
 2058      414E4400 
 2059 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2059      02000000 
 2059      0B000000 
 2059      41444352 
 2059      45414400 
 2060 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2060      01000000 
 2060      0A000000 
 2060      4144434F 
 2060      4E000000 
 2061              	first_link: 
 2062 0794 8C070000 	  .word LINK 
 2063 0798 00000000 	  .word ABS_IDX 
 2064 079c 0B000000 	  .word TK_IFUNC
 2065              	kword_dict: // first name field 
 2066              	  .equ LINK,. 
 2067 07a0 41425300 	  .asciz "ABS" 
 2068              	  .p2align 2 
 2069              	
 2070              	    .section .rodata.fn_tabld 
 2071              	
 2072              	//comands and fonctions address table 	
 2073              	fn_table:
 2074 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2074      00000000 
 2074      00000000 
 2074      00000000 
 2074      00000000 
 2075 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2075      00000000 
 2075      00000000 
 2075      00000000 
 2075      00000000 
 2076 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 2076      00000000 
 2076      00000000 
 2076      00000000 
 2076      00000000 
 2077 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2077      00000000 
 2077      00000000 
 2077      00000000 
 2077      00000000 
 2078 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2078      00000000 
 2078      00000000 
 2078      00000000 
 2078      00000000 
 2079 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2079      00000000 
 2079      00000000 
ARM GAS  tinyBasic.s 			page 61


 2079      00000000 
 2079      00000000 
 2080 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2080      00000000 
 2080      00000000 
 2080      00000000 
 2080      00000000 
 2081 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2081      00000000 
 2081      00000000 
 2081      00000000 
 2081      00000000 
 2082 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 2082      00000000 
 2082      00000000 
 2082      00000000 
 2082      00000000 
 2083 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2083      00000000 
 2083      00000000 
 2083      00000000 
 2083      00000000 
 2084 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2084      00000000 
 2084      00000000 
 2084      00000000 
 2084      00000000 
 2085 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2085      00000000 
 2085      00000000 
 2085      00000000 
 2085      00000000 
 2086 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2086      00000000 
 2086      00000000 
 2086      00000000 
 2086      00000000 
 2087 019c 00000000 		.word 0 
 2088              	
 2089              	
 2090              	/**********************************
 2091              	    BASIC commands and functions 
 2092              	**********************************/
 2093              	
 2094              	    .section .text.basic , "ax", %progbits 
 2095              	
 2096              	
 2097              	/*******************************
 2098              	  BASIC:  ABS expr 
 2099              	  input:
 2100              	    none 
 2101              	  output:
 2102              	    r0    token type 
 2103              	    r1    abs(expr)
 2104              	  use:
 2105              	    none 
 2106              	******************************/
ARM GAS  tinyBasic.s 			page 62


 2107              	    _FUNC abs 
 2108 0000 00B5FFF7 	    _CALL arg_list
 2108      FEFF5DF8 
 2108      04EB
 2109 000a 0128     	    cmp r0,#1 
 2110 000c 01D0     	    beq 1f 
 2111 000e FFF7FEBF 	    b syntax_error 
 2112 0012 5CF8041B 	1:  _POP r1 
 2113 0016 11F0004F 	    tst r1,#(1<<31)
 2114 001a 01D0     	    beq 9f
 2115 001c C1F10001 	    rsb r1,#0 
 2116 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2117 0024 7047     	   _RET 
 2118              	
 2119 0026 00BF     	    _FUNC power_adc
 2120 0028 7047     	    _RET
 2121              	
 2122 002a 00BF     	    _FUNC analog_read
 2123 002c 7047     	    _RET
 2124              	
 2125 002e 00BF     	    _FUNC bit_and
 2126 0030 7047     	    _RET
 2127              	
 2128 0032 00BF     	    _FUNC ascii
 2129 0034 7047     	    _RET
 2130              	
 2131 0036 00BF     	    _FUNC autorun
 2132 0038 7047     	    _RET
 2133              	
 2134 003a 00BF     	    _FUNC awu
 2135 003c 7047     	    _RET
 2136              	
 2137 003e 00BF     	    _FUNC bitmask
 2138 0040 7047     	    _RET 
 2139              	
 2140              	  
 2141              	  /*********************************
 2142              	   BASIC: BRES adr, mask   
 2143              	   reset bits [adr]= [adr] & ~mask  
 2144              	   input:
 2145              	     none 
 2146              	    output;
 2147              	      none 
 2148              	    use:
 2149              	      T1   temp
 2150              	      T2   temp 
 2151              	*******************************/     
 2152 0042 00BF     	  _FUNC bit_reset
 2153 0044 00B5FFF7 	    _CALL arg_list 
 2153      FEFF5DF8 
 2153      04EB
 2154 004e 0228     	    cmp r0,#2 
 2155 0050 01D0     	    beq 1f 
 2156 0052 FFF7FEBF 	    b syntax_error 
 2157 0056 5CF8041B 	1:  _POP r1 //mask 
 2158 005a 5CF8040B 	    _POP r0 //address 
 2159 005e D0F80090 	    ldr T2,[r0] 
ARM GAS  tinyBasic.s 			page 63


 2160 0062 81F0FF31 	    eor r1,#-1 // ~mask 
 2161 0066 01EA0901 	    and r1,T2
 2162 006a 0160     	    str r1,[r0]
 2163 006c 7047     	    _RET  
 2164              	
 2165              	
 2166              	/*********************************
 2167              	   BASIC: BSET adr, mask   
 2168              	   reset bits [adr]= [adr] & ~mask  
 2169              	   input:
 2170              	      none 
 2171              	    output;
 2172              	      none 
 2173              	    use:
 2174              	      T1   temp
 2175              	      T2   temp  
 2176              	*******************************/     
 2177 006e 00BF     	    _FUNC bit_set
 2178 0070 00B5FFF7 	    _CALL arg_list 
 2178      FEFF5DF8 
 2178      04EB
 2179 007a 0228     	    cmp r0,#2 
 2180 007c 01D0     	    beq 1f 
 2181 007e FFF7FEBF 	    b syntax_error 
 2182 0082 5CF8041B 	1:  _POP r1 //mask 
 2183 0086 5CF8040B 	    _POP r0 //address 
 2184 008a D0F80090 	    ldr T2,[r0] 
 2185 008e 41EA0901 	    orr r1,T2
 2186 0092 0160     	    str r1,[r0]
 2187 0094 7047     	    _RET 
 2188              	
 2189              	  /*********************************
 2190              	   BASIC: BTOGL adr, mask   
 2191              	   reset bits [adr]= [adr] & ~mask  
 2192              	   input:
 2193              	     r0    adr 
 2194              	     r1    mask 
 2195              	    output;
 2196              	      none 
 2197              	    use:
 2198              	      T1   temp
 2199              	      T2   temp  
 2200              	*******************************/     
 2201 0096 00BF     	  _FUNC bit_toggle
 2202 0098 00B5FFF7 	    _CALL arg_list 
 2202      FEFF5DF8 
 2202      04EB
 2203 00a2 0228     	    cmp r0,#2 
 2204 00a4 01D0     	    beq 1f 
 2205 00a6 FFF7FEBF 	    b syntax_error 
 2206 00aa 5CF8041B 	1:  _POP r1 //mask 
 2207 00ae 5CF8040B 	    _POP r0 //address 
 2208 00b2 D0F80090 	    ldr T2,[r0] 
 2209 00b6 81EA0901 	    eor r1,T2
 2210 00ba 0160     	    str r1,[r0]
 2211 00bc 7047     	    _RET  
 2212              	
ARM GAS  tinyBasic.s 			page 64


 2213 00be 00BF     	    _FUNC bit_test
 2214 00c0 7047     	    _RET 
 2215              	
 2216 00c2 00BF     	    _FUNC bye
 2217 00c4 7047     	    _RET 
 2218              	
 2219 00c6 00BF     	    _FUNC char
 2220 00c8 7047     	    _RET 
 2221              	
 2222 00ca 00BF     	    _FUNC const_cr2
 2223 00cc 7047     	    _RET  
 2224              	
 2225 00ce 00BF     	    _FUNC const_cr1
 2226 00d0 7047     	    _RET 
 2227              	
 2228 00d2 00BF     	    _FUNC data
 2229 00d4 7047     	    _RET 
 2230              	
 2231 00d6 00BF     	    _FUNC data_line
 2232 00d8 7047     	    _RET 
 2233              	
 2234 00da 00BF     	    _FUNC const_ddr
 2235 00dc 7047     	    _RET 
 2236              	
 2237 00de 00BF     	    _FUNC dec_base
 2238 00e0 7047     	    _RET 
 2239              	
 2240 00e2 00BF     	    _FUNC directory
 2241 00e4 7047     	    _RET 
 2242              	
 2243 00e6 00BF     	    _FUNC do_loop
 2244 00e8 7047     	    _RET 
 2245              	
 2246 00ea 00BF     	    _FUNC digital_read
 2247 00ec 7047     	    _RET 
 2248              	
 2249 00ee 00BF     	    _FUNC digital_write
 2250 00f0 7047     	    _RET  
 2251              	
 2252              	/*******************************
 2253              	  BASIC: END 
 2254              	  exit program 
 2255              	******************************/ 
 2256 00f2 00BF     	    _FUNC cmd_end
 2257 00f4 FFF7FEBF 	    b warm_start 
 2258 00f8 7047     	    _RET 
 2259              	
 2260 00fa 00BF     	    _FUNC const_eeprom_base
 2261 00fc 7047     	    _RET 
 2262              	
 2263 00fe 00BF     	    _FUNC fcpu
 2264 0100 7047     	    _RET 
 2265              	
 2266 0102 00BF     	    _FUNC forget
 2267 0104 7047     	    _RET 
 2268              	
 2269              	/**************************************************
ARM GAS  tinyBasic.s 			page 65


 2270              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2271              	  introdure FOR...NEXT loop 
 2272              	**************************************************/
 2273 0106 00BF     	    _FUNC for
 2274 0108 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2275 010c 4FF00107 	    mov INCR,#1
 2276 0110 00B5FFF7 	    _CALL next_token
 2276      FEFF5DF8 
 2276      04EB
 2277 011a 0428     	    cmp r0,#TK_VAR
 2278 011c 7FF4FEAF 	    bne syntax_error
 2279 0120 02B4     	    push {r1} 
 2280 0122 00B500F0 	    _CALL let_var 
 2280      A9F85DF8 
 2280      04EB
 2281 012c 20BC     	    pop {VADR}
 2282 012e 4FEA8505 	    lsl VADR,#2
 2283 0132 2544     	    add VADR,UPP 
 2284 0134 05F16005 	    add VADR,#VARS 
 2285 0138 7047     	    _RET 
 2286              	
 2287              	/***************************************
 2288              	  BASIC: TO expr 
 2289              	  set limit of FOR...NEXT loop 
 2290              	**************************************/
 2291 013a 00BF     	    _FUNC to
 2292 013c 00B5FFF7 	    _CALL expression 
 2292      FEFF5DF8 
 2292      04EB
 2293 0146 0E28     	    cmp r0,#TK_INTGR
 2294 0148 7FF4FEAF 	    bne syntax_error 
 2295 014c 0E46     	    mov LIMIT,r1
 2296              	    // save loop back parameters 
 2297 014e 6068     	    ldr r0,[UPP,#COUNT]
 2298 0150 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2299 0154 7047     	    _RET 
 2300              	
 2301              	/********************************************
 2302              	  BASIC: STEP expr 
 2303              	  set increment for FOR...NEXT loop 
 2304              	********************************************/
 2305 0156 00BF     	    _FUNC step
 2306 0158 00B5FFF7 	    _CALL expression 
 2306      FEFF5DF8 
 2306      04EB
 2307 0162 0E28     	    cmp r0,#TK_INTGR
 2308 0164 7FF4FEAF 	    bne syntax_error 
 2309 0168 0F46     	    mov INCR,r1
 2310              	    // replace parameters left by TO
 2311 016a 6068     	    ldr r0,[UPP,#COUNT]
 2312 016c 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2313 0170 7047     	    _RET 
 2314              	
 2315              	/********************************************
 2316              	  BASIC: NEXT var 
 2317              	  incrment FOR...NEXT loop variable
 2318              	  exit if variable cross LIMIT 
ARM GAS  tinyBasic.s 			page 66


 2319              	********************************************/
 2320 0172 00BF     	    _FUNC next
 2321 0174 00B5FFF7 	    _CALL next_token 
 2321      FEFF5DF8 
 2321      04EB
 2322 017e 0428     	    cmp r0,#TK_VAR 
 2323 0180 7FF4FEAF 	    bne syntax_error 
 2324 0184 4FEA8101 	    lsl r1,#2 
 2325 0188 2144     	    add r1,UPP 
 2326 018a 01F16001 	    add r1,#VARS 
 2327 018e A942     	    cmp r1,VADR
 2328 0190 7FF4FEAF 	    bne syntax_error 
 2329 0194 2868     	    ldr r0,[VADR]
 2330 0196 3844     	    add r0,INCR 
 2331 0198 2860     	    str r0,[VADR]
 2332 019a 002F     	    cmp INCR,#0
 2333 019c 02D4     	    bmi 2f
 2334 019e B042     	    cmp r0,LIMIT 
 2335 01a0 02DC     	    bgt 8f  
 2336 01a2 07E0     	    b 9f  
 2337 01a4 B042     	2:  cmp r0,LIMIT 
 2338 01a6 05DA     	    bge 9f  
 2339              	8: // exit for...next
 2340              	  //  drop branch parameters
 2341 01a8 4FF00C00 	    _DROP 3
 2341      8444
 2342              	  // restore outer loop parameters
 2343 01ae BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2344 01b2 7047     	    _RET 
 2345 01b4 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2346 01b8 6060     	    str r0,[UPP,#COUNT]
 2347 01ba 7047     	    _RET 
 2348              	
 2349              	/*********************************
 2350              	  BASIC: GOSUB expr 
 2351              	  call a subroutine at line# 
 2352              	*********************************/
 2353              	    _FUNC gosub
 2354 01bc 00B5FFF7 	    _CALL expression
 2354      FEFF5DF8 
 2354      04EB
 2355 01c6 0E28     	    cmp r0,#TK_INTGR 
 2356 01c8 7FF4FEAF 	    bne syntax_error 
 2357 01cc 0846     	    mov r0,r1 
 2358 01ce 00B5FFF7 	    _CALL search_lineno  
 2358      FEFF5DF8 
 2358      04EB
 2359 01d8 19B1     	    cbz r1,1f 
 2360 01da 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2361 01de FFF7FEBF 	    b tb_error 
 2362 01e2 6168     	1:  ldr r1,[UPP,#COUNT]
 2363 01e4 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2364 01e8 8346     	    mov BPTR,r0 
 2365 01ea 4FF0030A 	    mov IN,#3 
 2366 01ee 9BF80200 	    ldrb r0,[BPTR,#2]
 2367 01f2 6060     	    str r0,[UPP,#COUNT]
 2368 01f4 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 67


 2369              	
 2370              	/**********************************
 2371              	  BASIC: RETURN 
 2372              	  leave a subroutine 
 2373              	*********************************/
 2374 01f6 00BF     	    _FUNC return 
 2375 01f8 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2376 01fc 6060     	    str r0,[UPP,#COUNT]
 2377 01fe 7047     	    _RET 
 2378              	
 2379              	/**********************************
 2380              	  BASIC: GOTO expr 
 2381              	  go to line # 
 2382              	  use:
 2383              	
 2384              	**********************************/
 2385              	    _FUNC goto
 2386 0200 00B5FFF7 	    _CALL expression 
 2386      FEFF5DF8 
 2386      04EB
 2387 020a 0E28     	    cmp r0,#TK_INTGR 
 2388 020c 7FF4FEAF 	    bne syntax_error 
 2389 0210 59B1     	    cbz r1,9f 
 2390 0212 0846     	1:  mov r0,r1 
 2391 0214 00B5FFF7 	    _CALL search_lineno 
 2391      FEFF5DF8 
 2391      04EB
 2392 021e 19B1     	    cbz r1,2f 
 2393 0220 4FF00500 	    mov r0,#ERR_NO_LINE 
 2394 0224 FFF7FEBF 	    b tb_error 
 2395 0228 8346     	2:  mov BPTR,r0 
 2396 022a 4FF0030A 	9:  mov IN,#3 
 2397 022e 7047     	    _RET 
 2398              	
 2399              	    _FUNC gpio
 2400 0230 7047     	    _RET  
 2401              	
 2402 0232 00BF     	    _FUNC hex_base
 2403 0234 7047     	    _RET 
 2404              	
 2405 0236 00BF     	    _FUNC const_idr
 2406 0238 7047     	    _RET 
 2407              	
 2408              	/**********************************************
 2409              	  BASIC: IF relation : statement
 2410              	  execute statement only if relation is true
 2411              	*********************************************/
 2412 023a 00BF     	    _FUNC if
 2413 023c 00B5FFF7 	    _CALL relation 
 2413      FEFF5DF8 
 2413      04EB
 2414 0246 09B9     	    cbnz r1,9f 
 2415 0248 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2416 024c 7047     	9:  _RET 
 2417              	
 2418 024e 00BF     	    _FUNC input_var
 2419 0250 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 68


 2420              	
 2421 0252 00BF     	    _FUNC invert
 2422 0254 7047     	    _RET 
 2423              	
 2424 0256 00BF     	    _FUNC enable_iwdg
 2425 0258 7047     	    _RET 
 2426              	
 2427 025a 00BF     	    _FUNC refresh_iwdg
 2428 025c 7047     	    _RET 
 2429              	
 2430 025e 00BF     	    _FUNC key
 2431 0260 7047     	    _RET  
 2432              	
 2433              	/******************************
 2434              	  BASIC: [let] var=expr 
 2435              	         [let] @(expr)=expr
 2436              	  input:
 2437              	    none 
 2438              	  output:
 2439              	    none 
 2440              	  use:
 2441              	
 2442              	****************************/         
 2443 0262 00BF     	    _FUNC let
 2444 0264 00B5FFF7 	    _CALL next_token 
 2444      FEFF5DF8 
 2444      04EB
 2445 026e 0428     	    cmp r0,#TK_VAR
 2446 0270 03D0     	    beq let_var 
 2447 0272 0528     	    cmp r0,#TK_ARRAY 
 2448 0274 07D0     	    beq let_array 
 2449 0276 FFF7FEBF 	    b syntax_error 
 2450              	let_var:
 2451 027a 4FEA8101 	    lsl r1,#2
 2452 027e 04F16000 	    add r0,UPP,#VARS
 2453 0282 0844     	    add r0,r1
 2454 0284 1FE0     	    b 1f 
 2455              	let_array: 
 2456 0286 4FF00600 	    mov r0,#TK_LPAREN
 2457 028a 00B5FFF7 	    _CALL expect 
 2457      FEFF5DF8 
 2457      04EB
 2458 0294 00B5FFF7 	    _CALL expression
 2458      FEFF5DF8 
 2458      04EB
 2459 029e 0E28     	    cmp r0,#TK_INTGR 
 2460 02a0 7FF4FEAF 	    bne syntax_error
 2461 02a4 4CF8041D 	    _PUSH r1 
 2462 02a8 4FF00700 	    mov r0,#TK_RPAREN
 2463 02ac 00B5FFF7 	    _CALL expect 
 2463      FEFF5DF8 
 2463      04EB
 2464 02b6 5CF8041B 	    _POP r1 
 2465 02ba D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2466 02be 4FEA8101 	    lsl r1,#2 
 2467 02c2 A0EB0100 	    sub r0,r1 
 2468 02c6 4CF8040D 	1:  _PUSH r0 
ARM GAS  tinyBasic.s 			page 69


 2469 02ca 4FF03200 	    mov r0,#TK_EQUAL 
 2470 02ce 00B5FFF7 	    _CALL expect 
 2470      FEFF5DF8 
 2470      04EB
 2471 02d8 00B5FFF7 	    _CALL expression   
 2471      FEFF5DF8 
 2471      04EB
 2472 02e2 0E28     	    cmp r0,#TK_INTGR
 2473 02e4 7FF4FEAF 	    bne syntax_error   
 2474 02e8 5CF8040B 	2:  _POP r0 
 2475 02ec 0160     	    str r1,[r0]
 2476 02ee 7047     	    _RET  
 2477              	
 2478              	/***************************************
 2479              	  BASIC: LIST [[first,]last]
 2480              	  use:
 2481              	    T1 
 2482              	**************************************/  
 2483              	    _FUNC list
 2484 02f0 206C10F0 	    _CLO
 2484      010F03D0 
 2484      4FF00700 
 2484      FFF7FEBF 
 2485 0300 4DF8048D 	    push {T1} 
 2486              	//  _CALL arg_list 
 2487 0304 D4F830B0 	    ldr BPTR,[UPP,#TXTBGN]
 2488 0308 D4F83480 	    ldr T1,[UPP,#TXTEND]
 2489 030c C345     	1:  cmp BPTR,T1 
 2490 030e 09D5     	    bpl 9f
 2491 0310 5846     	    mov r0,BPTR  
 2492 0312 00B500F0 	    _CALL print_basic_line
 2492      08F85DF8 
 2492      04EB
 2493 031c 9BF80200 	    ldrb r0,[BPTR,#2]
 2494 0320 8344     	    add BPTR,r0 
 2495 0322 F3E7     	    b 1b
 2496 0324 FFF7FEBF 	9:  b warm_start 
 2497              	
 2498              	/****************************
 2499              	  decotonize and print line 
 2500              	  input:
 2501              	    BPTR   line address 
 2502              	  output:
 2503              	    none:
 2504              	  use:
 2505              	    r0,r1 
 2506              	****************************/
 2507              	    _FUNC print_basic_line 
 2508 0328 03B4     	    push {r0,r1}
 2509 032a 4FF0000A 	    mov IN,#0
 2510 032e 3BF80A00 	    ldrh r0,[BPTR,IN]
 2511 0332 0AF1020A 	    add IN,#2
 2512 0336 4FF00A01 	    mov r1,#10 
 2513 033a 00B5FFF7 	    _CALL print_int
 2513      FEFF5DF8 
 2513      04EB
 2514 0344 1BF80A00 	    ldrb r0, [BPTR,IN]
ARM GAS  tinyBasic.s 			page 70


 2515 0348 0AF1010A 	    add IN,#1 
 2516 034c 6060     	    str r0,[UPP,#COUNT]
 2517              	token_loop:  
 2518 034e 00B5FFF7 	    _CALL next_token
 2518      FEFF5DF8 
 2518      04EB
 2519 0358 0028     	    cmp r0,#TK_NONE 
 2520 035a 70D0     	    beq 9f  
 2521 035c 0E28     	    cmp r0,#TK_INTGR 
 2522 035e 07D1     	    bne 2f 
 2523 0360 0846     	    mov r0,r1 
 2524 0362 A169     	    ldr r1,[UPP,#BASE]
 2525 0364 00B5FFF7 	    _CALL print_int 
 2525      FEFF5DF8 
 2525      04EB
 2526 036e EEE7     	    b token_loop 
 2527 0370 0328     	2:  cmp r0,#TK_CHAR 
 2528 0372 0ED1     	    bne 3f 
 2529 0374 01F14100 	    add r0,r1,#'A' 
 2530 0378 00B5FFF7 	    _CALL uart_putc
 2530      FEFF5DF8 
 2530      04EB
 2531 0382 4FF02000 	    mov r0,#SPACE 
 2532 0386 00B5FFF7 	    _CALL uart_putc
 2532      FEFF5DF8 
 2532      04EB
 2533 0390 DDE7     	    b token_loop 
 2534 0392 0228     	3:  cmp r0,#TK_QSTR 
 2535 0394 14D1     	    bne 4f 
 2536 0396 4FF02200 	    mov r0,#'"'
 2537 039a 00B5FFF7 	    _CALL uart_putc 
 2537      FEFF5DF8 
 2537      04EB
 2538 03a4 0846     	    mov r0,r1 
 2539 03a6 00B5FFF7 	    _CALL uart_puts
 2539      FEFF5DF8 
 2539      04EB
 2540 03b0 4FF02200 	    mov r0,#'"'
 2541 03b4 00B5FFF7 	    _CALL uart_putc 
 2541      FEFF5DF8 
 2541      04EB
 2542 03be C6E7     	    b token_loop
 2543 03c0 0A28     	4:  cmp r0,#TK_CMD
 2544 03c2 25D4     	    bmi 5f 
 2545 03c4 0E28     	    cmp r0,#TK_INTGR 
 2546 03c6 23D5     	    bpl 5f
 2547 03c8 4FF02000 	    mov r0,#SPACE 
 2548 03cc 00B5FFF7 	    _CALL uart_putc  
 2548      FEFF5DF8 
 2548      04EB
 2549 03d6 0846     	    mov r0,r1
 2550 03d8 3A28     	    cmp r0,#PRT_IDX 
 2551 03da 07D1     	    bne 1f  
 2552 03dc 4FF03F00 	    mov r0,#'?'
 2553 03e0 00B5FFF7 	    _CALL uart_putc 
 2553      FEFF5DF8 
 2553      04EB
ARM GAS  tinyBasic.s 			page 71


 2554 03ea 09E0     	    b 3f 
 2555 03ec 00B5FFF7 	1:  _CALL bc_to_name
 2555      FEFF5DF8 
 2555      04EB
 2556 03f6 00B5FFF7 	2:  _CALL uart_puts
 2556      FEFF5DF8 
 2556      04EB
 2557 0400 4FF02000 	3:  mov r0,#SPACE 
 2558 0404 00B5FFF7 	    _CALL uart_putc 
 2558      FEFF5DF8 
 2558      04EB
 2559 040e 9EE7     	    b token_loop
 2560 0410 01B4     	5:  push {r0}
 2561 0412 FB49     	    ldr r1,=single_char 
 2562 0414 085C     	    ldrb r0,[r1,r0]
 2563 0416 02BC     	    pop {r1}
 2564 0418 28B1     	    cbz r0,6f 
 2565 041a 00B5FFF7 	    _CALL uart_putc
 2565      FEFF5DF8 
 2565      04EB
 2566 0424 93E7     	    b token_loop
 2567 0426 3329     	6:  cmp r1,#TK_GE 
 2568 0428 01D1     	    bne 7f 
 2569 042a F648     	    ldr r0,=ge_str
 2570 042c E3E7     	    b 2b 
 2571 042e 3629     	7:  cmp r1,#TK_LE 
 2572 0430 01D1     	    bne 8f
 2573 0432 F548     	    ldr r0,=le_str
 2574 0434 DFE7     	    b 2b
 2575 0436 3529     	8:  cmp r1,#TK_NE 
 2576 0438 01D1     	    bne 9f 
 2577 043a F448     	    ldr r0,=ne_str 
 2578 043c DBE7     	    b 2b 
 2579 043e 4FF00D00 	9:  mov r0,#CR 
 2580 0442 00B5FFF7 	    _CALL uart_putc 
 2580      FEFF5DF8 
 2580      04EB
 2581 044c 03BC     	    pop {r0,r1}
 2582 044e 7047     	    _RET 
 2583              	
 2584 0450 3E3D00   	ge_str: .asciz ">="
 2585 0453 3C3D00   	le_str: .asciz "<="
 2586 0456 3C3E00   	ne_str: .asciz "<>"
 2587              	
 2588              	single_char:
 2589 0459 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 2589      00402829 
 2589      2C23
 2590 0463 00000000 	  .space 6
 2590      0000
 2591 0469 2B2D     	  .byte '+','-'
 2592 046b 00000000 	  .space 14
 2592      00000000 
 2592      00000000 
 2592      0000
 2593 0479 2A2F25   	  .byte '*','/','%'
 2594 047c 00000000 	  .space 14
ARM GAS  tinyBasic.s 			page 72


 2594      00000000 
 2594      00000000 
 2594      0000
 2595 048a 3E3D003C 	  .byte '>','=',0,'<',0,0
 2595      0000
 2596              	
 2597              	
 2598              	    _FUNC load
 2599 0490 7047     	    _RET 
 2600              	
 2601 0492 00BF     	    _FUNC log2
 2602 0494 7047     	    _RET 
 2603              	
 2604 0496 00BF     	    _FUNC lshift
 2605 0498 7047     	    _RET 
 2606              	
 2607 049a 00BF     	    _FUNC muldiv
 2608 049c 7047     	    _RET 
 2609              	
 2610              	/***********************************
 2611              	  BASIC: NEW 
 2612              	  delete existing program in memory
 2613              	  and clear variables and RAM 
 2614              	***********************************/
 2615 049e 00BF     	    _FUNC new
 2616 04a0 206C10F0 	    _CLO 
 2616      010F03D0 
 2616      4FF00700 
 2616      FFF7FEBF 
 2617 04b0 00B5FFF7 	    _CALL clear_basic 
 2617      FEFF5DF8 
 2617      04EB
 2618 04ba FFF7FEBF 	    b warm_start   
 2619              	
 2620              	/************************************
 2621              	  BASIC: NOT relation  
 2622              	  invert logical value or relation
 2623              	************************************/
 2624 04be 00BF     	      _FUNC func_not
 2625 04c0 00B5FFF7 	      _CALL relation 
 2625      FEFF5DF8 
 2625      04EB
 2626 04ca 11B1     	      cbz r1,8f 
 2627 04cc 81EA0101 	      eor r1,r1
 2628 04d0 01E0     	      b 9f 
 2629 04d2 4FF0FF31 	  8:  mov r1,#-1
 2630 04d6 7047     	  9:  _RET 
 2631              	
 2632              	    _FUNC const_odr
 2633 04d8 7047     	    _RET 
 2634              	
 2635 04da 00BF     	    _FUNC bit_or
 2636 04dc 7047     	    _RET 
 2637              	
 2638 04de 00BF     	    _FUNC pad_ref
 2639 04e0 7047     	    _RET 
 2640              	
ARM GAS  tinyBasic.s 			page 73


 2641              	/***********************
 2642              	  BASIC: PAUSE expr 
 2643              	  suspend execution for 
 2644              	  expr milliseconds 
 2645              	************************/
 2646 04e2 00BF     	    _FUNC pause
 2647 04e4 00B5FFF7 	    _CALL expression 
 2647      FEFF5DF8 
 2647      04EB
 2648 04ee 0E28     	    cmp r0,#TK_INTGR 
 2649 04f0 7FF4FEAF 	    bne syntax_error 
 2650 04f4 E069     	    ldr r0,[UPP,#TICKS]
 2651 04f6 0844     	    add r0,r1 
 2652 04f8 E169     	1:  ldr r1,[UPP,#TICKS]
 2653 04fa 8842     	    cmp r0,r1 
 2654 04fc FCD1     	    bne 1b     
 2655 04fe 7047     	    _RET 
 2656              	
 2657              	    _FUNC pin_mode
 2658 0500 7047     	    _RET 
 2659              	
 2660 0502 00BF     	    _FUNC peek
 2661 0504 7047     	    _RET 
 2662              	
 2663 0506 00BF     	    _FUNC const_input
 2664 0508 7047     	    _RET  
 2665              	
 2666 050a 00BF     	    _FUNC poke
 2667 050c 7047     	    _RET 
 2668              	
 2669 050e 00BF     	    _FUNC const_output
 2670 0510 7047     	    _RET 
 2671              	
 2672              	/****************************
 2673              	  BASIC: PRINT|? arg_list 
 2674              	  print list of arguments 
 2675              	****************************/
 2676 0512 00BF     	    _FUNC print
 2677 0514 88EA0808 	    eor T1,T1 // no comma 
 2678 0518 00B5FFF7 	0:  _CALL expression
 2678      FEFF5DF8 
 2678      04EB
 2679 0522 0E28     	    cmp r0,#TK_INTGR
 2680 0524 07D1     	    bne 1f 
 2681 0526 0846     	    mov r0,r1
 2682 0528 A169     	    ldr r1,[UPP,#BASE]
 2683 052a 00B5FFF7 	    _CALL print_int
 2683      FEFF5DF8 
 2683      04EB
 2684 0534 2BE0     	    b 6f 
 2685 0536 00B5FFF7 	1:  _CALL next_token
 2685      FEFF5DF8 
 2685      04EB
 2686 0540 0128     	    cmp r0,#TK_COLON 
 2687 0542 04DC     	    bgt 2f
 2688 0544 D4F800A0 	    _UNGET_TOKEN 
 2688      D4F808B0 
ARM GAS  tinyBasic.s 			page 74


 2689 054c 2CE0     	    b print_exit
 2690 054e 88EA0808 	2:  eor T1, T1 
 2691 0552 0228     	    cmp r0,#TK_QSTR 
 2692 0554 06D1     	    bne 4f
 2693 0556 0846     	    mov r0,r1 
 2694 0558 00B5FFF7 	    _CALL uart_puts  
 2694      FEFF5DF8 
 2694      04EB
 2695 0562 14E0     	    b 6f 
 2696 0564 0328     	4:  cmp r0,#TK_CHAR 
 2697 0566 06D1     	    bne 5f 
 2698 0568 0846     	    mov r0,r1 
 2699 056a 00B5FFF7 	    _CALL uart_putc 
 2699      FEFF5DF8 
 2699      04EB
 2700 0574 0BE0     	    b 6f 
 2701 0576 0928     	5:  cmp r0,#TK_SHARP
 2702 0578 7FF4FEAF 	    bne syntax_error 
 2703 057c 00B5FFF7 	    _CALL next_token 
 2703      FEFF5DF8 
 2703      04EB
 2704 0586 0E28     	    cmp r0,#TK_INTGR 
 2705 0588 7FF4FEAF 	    bne syntax_error 
 2706 058c 6164     	    str r1,[UPP,#TAB_WIDTH]
 2707 058e 00B5FFF7 	6:  _CALL next_token 
 2707      FEFF5DF8 
 2707      04EB
 2708 0598 0828     	    cmp r0,#TK_COMMA 
 2709 059a 02D1     	    bne 7f
 2710 059c 4FF00108 	    mov T1,#1
 2711 05a0 BAE7     	    b 0b  
 2712 05a2 0228     	7:  cmp r0,#2 
 2713 05a4 7FF5FEAF 	    bpl syntax_error  
 2714              	print_exit:
 2715 05a8 18EA0808 	      ands T1,T1 
 2716 05ac 06D1     	      bne 9f
 2717 05ae 4FF00D00 	      mov r0,#CR 
 2718 05b2 00B5FFF7 	      _CALL uart_putc 
 2718      FEFF5DF8 
 2718      04EB
 2719 05bc 7047     	  9:  _RET 
 2720              	
 2721 05be 00BF     	    _FUNC const_porta
 2722 05c0 7047     	    _RET 
 2723              	
 2724 05c2 00BF     	    _FUNC const_portb
 2725 05c4 7047     	    _RET 
 2726              	
 2727 05c6 00BF     	    _FUNC const_portc
 2728 05c8 7047     	    _RET 
 2729              	
 2730 05ca 00BF     	    _FUNC const_portd
 2731 05cc 7047     	    _RET 
 2732              	
 2733 05ce 00BF     	    _FUNC const_porte
 2734 05d0 7047     	    _RET  
 2735              	
ARM GAS  tinyBasic.s 			page 75


 2736 05d2 00BF     	    _FUNC const_portf
 2737 05d4 7047     	    _RET 
 2738              	
 2739 05d6 00BF     	    _FUNC const_portg
 2740 05d8 7047     	    _RET 
 2741              	
 2742 05da 00BF     	    _FUNC const_porth
 2743 05dc 7047     	    _RET 
 2744              	
 2745 05de 00BF     	    _FUNC const_porti
 2746 05e0 7047     	    _RET 
 2747              	
 2748 05e2 00BF     	    _FUNC qkey
 2749 05e4 7047     	    _RET 
 2750              	
 2751 05e6 00BF     	    _FUNC read
 2752 05e8 7047     	    _RET 
 2753              	
 2754 05ea 00BF     	    _FUNC remark
 2755 05ec 7047     	    _RET  
 2756              	
 2757 05ee 00BF     	    _FUNC restore
 2758 05f0 7047     	    _RET 
 2759              	
 2760 05f2 00BF     	    _FUNC  random
 2761 05f4 7047     	    _RET 
 2762              	
 2763 05f6 00BF     	    _FUNC rshift
 2764 05f8 7047     	    _RET 
 2765              	
 2766              	/****************************
 2767              	  BASIC: RUN 
 2768              	  execute program in memory
 2769              	****************************/
 2770 05fa 00BF     	    _FUNC run
 2771 05fc 206C10F0 	    _CLO 
 2771      010F03D0 
 2771      4FF00700 
 2771      FFF7FEBF 
 2772 060c 206B     	    ldr r0,[UPP,#TXTBGN]
 2773 060e 616B     	    ldr r1,[UPP,#TXTEND]
 2774 0610 8842     	    cmp r0,r1
 2775 0612 08D0     	    beq 9f 
 2776 0614 8178     	    ldrb r1,[r0,#2]
 2777 0616 6160     	    str r1,[UPP,#COUNT]
 2778 0618 8346     	    mov BPTR,r0 
 2779 061a 4FF0030A 	    mov IN,#3 
 2780 061e 206C     	    ldr r0,[UPP,#FLAGS]
 2781 0620 40F00100 	    orr r0,#FRUN 
 2782 0624 2064     	    str r0,[UPP,#FLAGS]
 2783 0626 7047     	9:  _RET 
 2784              	
 2785              	    _FUNC save
 2786 0628 7047     	    _RET 
 2787              	
 2788 062a 00BF     	    _FUNC show
 2789 062c 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 76


 2790              	
 2791 062e 00BF     	    _FUNC size
 2792 0630 7047     	    _RET  
 2793              	
 2794 0632 00BF     	    _FUNC sleep
 2795 0634 7047     	    _RET 
 2796              	
 2797 0636 00BF     	    _FUNC spi_read
 2798 0638 7047     	    _RET 
 2799              	
 2800 063a 00BF     	    _FUNC spi_enable
 2801 063c 7047     	    _RET 
 2802              	
 2803 063e 00BF     	    _FUNC spi_select
 2804 0640 7047     	    _RET 
 2805              	
 2806 0642 00BF     	    _FUNC spi_write
 2807 0644 7047     	    _RET 
 2808              	
 2809 0646 00BF     	    _FUNC stop
 2810 0648 7047     	    _RET 
 2811              	
 2812              	/**************************
 2813              	  BASIC: TICKS 
 2814              	  return msec counter
 2815              	**************************/  
 2816 064a 00BF     	    _FUNC get_ticks
 2817 064c E169     	    ldr r1,[UPP,#TICKS]
 2818 064e 4FF00E00 	    mov r0,#TK_INTGR
 2819 0652 7047     	    _RET  
 2820              	
 2821              	/*************************
 2822              	  BASIC: TIMER expr 
 2823              	  set countdown timer 
 2824              	************************/
 2825              	    _FUNC set_timer
 2826 0654 00B5FFF7 	    _CALL expression 
 2826      FEFF5DF8 
 2826      04EB
 2827 065e 0E28     	    cmp r0,#TK_INTGR
 2828 0660 7FF4FEAF 	    bne syntax_error 
 2829 0664 2162     	    str r1,[UPP,#TIMER]
 2830 0666 7047     	    _RET 
 2831              	
 2832              	/***************************
 2833              	  BASIC: TIMEOUT
 2834              	  check for timer expiration 
 2835              	  return -1 true || 0 false
 2836              	****************************/
 2837              	    _FUNC timeout
 2838 0668 81EA0101 	    eor r1,r1 
 2839 066c 206A     	    ldr r0,[UPP,#TIMER]
 2840 066e 08B9     	    cbnz r0,9f 
 2841 0670 6FEA0101 	    mvn r1,r1 
 2842 0674 4FF00E00 	9:  mov r0,#TK_INTGR    
 2843 0678 7047     	    _RET 
 2844              	
ARM GAS  tinyBasic.s 			page 77


 2845 067a 00BF     	    _FUNC tone
 2846 067c 7047     	    _RET 
 2847              	
 2848              	/***************************
 2849              	  BASIC: UBOUND 
 2850              	  return last indice of @
 2851              	  output:
 2852              	    r0  TK_INTGR 
 2853              	    r1  +int 
 2854              	**************************/
 2855 067e 00BF     	    _FUNC ubound
 2856 0680 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2857 0684 606B     	    ldr r0,[UPP,#TXTEND]
 2858 0686 A1EB0001 	    sub r1,r0 
 2859 068a 4FEA9101 	    lsr r1,#2
 2860 068e 4FF00E00 	    mov r0,#TK_INTGR 
 2861 0692 7047     	    _RET 
 2862              	
 2863              	    _FUNC uflash
 2864 0694 7047     	    _RET 
 2865              	
 2866 0696 00BF     	    _FUNC until
 2867 0698 7047     	    _RET 
 2868              	
 2869 069a 00BF     	    _FUNC usr
 2870 069c 7047     	    _RET  
 2871              	
 2872 069e 00BF     	    _FUNC wait
 2873 06a0 7047     	    _RET 
 2874              	
 2875              	/*********************************************
 2876              	  BASIC: WORDS 
 2877              	  print list of BASIC WORDS in dictionary 
 2878              	  use:
 2879              	    r0,r1,T1,T2  
 2880              	********************************************/
 2881 06a2 00BF     	    _FUNC words
 2882 06a4 206C10F0 	    _CLO 
 2882      010F03D0 
 2882      4FF00700 
 2882      FFF7FEBF 
 2883 06b4 DFF85881 	    ldr T1,=kword_dict
 2884 06b8 89EA0909 	    eor T2,T2 
 2885              	1:  
 2886 06bc 4046     	    mov r0,T1
 2887 06be 00B5FFF7 	    _CALL strlen
 2887      FEFF5DF8 
 2887      04EB
 2888 06c8 F0B1     	    cbz r0,9f 
 2889 06ca 8144     	    add T2,r0 
 2890 06cc B9F1500F 	    cmp T2,#80 
 2891 06d0 08D4     	    bmi 2f
 2892 06d2 89EA0909 	    eor T2,T2  
 2893 06d6 4FF00D00 	    mov r0,#CR 
 2894 06da 00B5FFF7 	    _CALL uart_putc 
 2894      FEFF5DF8 
 2894      04EB
ARM GAS  tinyBasic.s 			page 78


 2895 06e4 4046     	2:  mov r0,T1 
 2896 06e6 00B5FFF7 	    _CALL uart_puts 
 2896      FEFF5DF8 
 2896      04EB
 2897 06f0 4FF02000 	    mov r0,#SPACE
 2898 06f4 09F10109 	    add T2,#1  
 2899 06f8 00B5FFF7 	    _CALL uart_putc 
 2899      FEFF5DF8 
 2899      04EB
 2900 0702 58F80C8C 	    ldr T1,[T1,#-12]
 2901 0706 D9E7     	    b 1b 
 2902 0708 7047     	9:  _RET 
 2903              	
 2904 070a 00BF     	    _FUNC write
 2905 070c 7047     	    _RET 
 2906              	
 2907 070e 00BF     	    _FUNC bit_xor
 2908 0710 7047     	    _RET 
 2909              	
 2910 0712 00BF     	    _FUNC transmit
 2911 0714 7047     	    _RET 
 2912              	
 2913 0716 00BF     	    _FUNC receive
 2914 0718 7047     	    _RET  
 2915              	
 2916              	
 2917              	/*************************************************
 2918              	   extra FLASH memory not used by Tiny BASIC
 2919              	   is used to save BASIC programs.
 2920              	************************************************/
 2921 071a 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2921      0080AFF3 
 2921      0080AFF3 
 2921      0080AFF3 
 2921      0080AFF3 
 2922              	  .section .fs
 2923              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 79


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 80


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 81


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 82


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 83


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 84


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 85


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:247    .text:0000000000000150 dump
         tinyBasic.s:1021   .text:00000000000006c0 tb_error
         tinyBasic.s:1586   .text:0000000000000bb4 arg_list
         tinyBasic.s:1006   .text:00000000000006b8 syntax_error
         tinyBasic.s:280    .text:0000000000000190 search_lineno
         tinyBasic.s:311    .text:00000000000001b0 delete_line
         tinyBasic.s:336    .text:00000000000001dc create_gap
         tinyBasic.s:361    .text:0000000000000204 insert_line
         tinyBasic.s:400    .text:0000000000000254 compile
         tinyBasic.s:1367   .text:00000000000009fc pad
         tinyBasic.s:638    .text:0000000000000470 parse_int
         tinyBasic.s:471    .text:00000000000002e8 comp_token
         tinyBasic.s:542    .text:00000000000003c4 store_r0
         tinyBasic.s:754    .text:0000000000000548 skip
         tinyBasic.s:773    .text:0000000000000560 upper
         tinyBasic.s:576    .text:0000000000000404 is_special
         tinyBasic.s:598    .text:0000000000000448 token_ofs
         tinyBasic.s:486    .text:0000000000000328 tok_idx0
         tinyBasic.s:545    .text:00000000000003ca try_number
         tinyBasic.s:490    .text:000000000000032a single
         tinyBasic.s:593    .text:0000000000000438 tok_single
         tinyBasic.s:494    .text:0000000000000332 lt
ARM GAS  tinyBasic.s 			page 86


         tinyBasic.s:500    .text:0000000000000340 gt
         tinyBasic.s:513    .text:0000000000000364 bkslash
         tinyBasic.s:559    .text:00000000000003fe token_exit
         tinyBasic.s:520    .text:000000000000037a prt_cmd
         tinyBasic.s:526    .text:000000000000038c quote
         tinyBasic.s:693    .text:00000000000004e0 parse_quote
         tinyBasic.s:531    .text:00000000000003a0 tick
         tinyBasic.s:925    .text:0000000000000614 parse_keyword
         tinyBasic.s:590    .text:0000000000000424 char_list
         tinyBasic.s:591    .text:0000000000000424 $d
         tinyBasic.s:599    .text:0000000000000448 $d
         tinyBasic.s:615    .text:000000000000046e $t
         tinyBasic.s:724    .text:0000000000000514 get_escaped_char
         tinyBasic.s:741    .text:000000000000053e escaped
         tinyBasic.s:741    .text:000000000000053e $d
         tinyBasic.s:754    .text:0000000000000546 $t
         tinyBasic.s:791    .text:0000000000000570 is_digit
         tinyBasic.s:815    .text:000000000000058c is_hex
         tinyBasic.s:840    .text:00000000000005b0 is_bit
         tinyBasic.s:861    .text:00000000000005cc is_alpha
         tinyBasic.s:882    .text:00000000000005e4 is_num
         tinyBasic.s:903    .text:00000000000005fc is_alnum
         tinyBasic.s:2065   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1159   .text:0000000000000824 search_dict
         tinyBasic.s:976    .text:0000000000000698 cmd_name
         tinyBasic.s:1051   .text:0000000000000750 compile_error
         tinyBasic.s:1025   .text:00000000000006c8 rt_error
         tinyBasic.s:1068   .text:00000000000007a8 rt_error_msg
         tinyBasic.s:1071   .text:00000000000007b8 err_msg
         tinyBasic.s:1460   .text:0000000000000aa0 next_token
         tinyBasic.s:1380   .text:0000000000000a0c warm_start
         tinyBasic.s:1069   .text:00000000000007a8 $d
         tinyBasic.s:1078   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1079   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1080   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1081   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1082   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1083   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1084   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1085   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1086   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1087   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1088   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1089   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1090   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1091   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1092   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1094   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1095   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1096   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1113   .text:00000000000007f8 $t
         tinyBasic.s:1113   .text:00000000000007f8 BTGL
         tinyBasic.s:1131   .text:00000000000007fc kword_cmp
         tinyBasic.s:1193   .text:0000000000000864 bc_to_name
         tinyBasic.s:1222   .text:0000000000000886 cold_start
         tinyBasic.s:1243   .text:00000000000008d4 src_addr
         tinyBasic.s:1245   .text:00000000000008d8 dest_addr
ARM GAS  tinyBasic.s 			page 87


         tinyBasic.s:1366   .text:00000000000009f8 tib
         tinyBasic.s:1247   .text:00000000000008dc sysvar_size
         tinyBasic.s:1258   .text:00000000000008e0 prt_version
         tinyBasic.s:1315   .text:0000000000000988 clear_basic
         tinyBasic.s:1244   .text:00000000000008d4 $d
         tinyBasic.s:1925   .rodata:0000000000000000 uzero
         tinyBasic.s:1949   .rodata:00000000000000cc ulast
         tinyBasic.s:1258   .text:00000000000008e0 $t
         tinyBasic.s:1282   .text:0000000000000948 version_msg
         tinyBasic.s:1284   .text:0000000000000968 version
         tinyBasic.s:1283   .text:0000000000000948 $d
         tinyBasic.s:1299   .text:000000000000096c clear_vars
         tinyBasic.s:1349   .text:00000000000009cc warm_init
         tinyBasic.s:1365   .text:00000000000009f4 dstack
         tinyBasic.s:1364   .text:00000000000009f0 mstack
         tinyBasic.s:1364   .text:00000000000009f0 $d
         tinyBasic.s:1368   .text:0000000000000a00 array
         tinyBasic.s:1369   .text:0000000000000a04 ready
         tinyBasic.s:1400   .text:0000000000000a24 cmd_line
         tinyBasic.s:1411   .text:0000000000000a54 interpreter
         tinyBasic.s:1444   .text:0000000000000a94 execute
         tinyBasic.s:2450   .text.basic:000000000000027a let_var
         tinyBasic.s:2455   .text.basic:0000000000000286 let_array
         tinyBasic.s:2073   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1466   .text:0000000000000aae new_line
         tinyBasic.s:1470   .text:0000000000000ab6 end_of_line
         tinyBasic.s:1517   .text:0000000000000b2c tok_jmp
         tinyBasic.s:1518   .text:0000000000000b2c $d
         tinyBasic.s:1532   .text:0000000000000b6c $t
         tinyBasic.s:1547   .text:0000000000000b6c expect
         tinyBasic.s:1566   .text:0000000000000b88 func_args
         tinyBasic.s:1746   .text:0000000000000d58 expression
         tinyBasic.s:1620   .text:0000000000000bf4 factor
         tinyBasic.s:1854   .text:0000000000000e44 get_array_element
         tinyBasic.s:1892   .text:0000000000000e6c get_var
         tinyBasic.s:1695   .text:0000000000000cdc term
         tinyBasic.s:1788   .text:0000000000000dc0 relation
         tinyBasic.s:1835   .text:0000000000000e3a relop_jmp
         tinyBasic.s:1807   .text:0000000000000e0a rel_idx0
         tinyBasic.s:1808   .text:0000000000000e0a rel_eq
         tinyBasic.s:1825   .text:0000000000000e20 rel_false
         tinyBasic.s:1811   .text:0000000000000e0e rel_lt
         tinyBasic.s:1814   .text:0000000000000e12 rel_le
         tinyBasic.s:1817   .text:0000000000000e16 rel_gt
         tinyBasic.s:1820   .text:0000000000000e1a rel_ge
         tinyBasic.s:1823   .text:0000000000000e1e rel_diff
         tinyBasic.s:1836   .text:0000000000000e3a $d
         tinyBasic.s:1874   .text:0000000000000e58 set_array_element
         tinyBasic.s:1910   .text:0000000000000e7c set_var
         tinyBasic.s:2923   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1946   .rodata:0000000000000050 $d
         tinyBasic.s:1956   *ABS*:0000000000000000 link
         tinyBasic.s:1957   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2066   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:1958   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2061   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2107   .text.basic:0000000000000000 abs
ARM GAS  tinyBasic.s 			page 88


         tinyBasic.s:2119   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2122   .text.basic:000000000000002c analog_read
         tinyBasic.s:2125   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2128   .text.basic:0000000000000034 ascii
         tinyBasic.s:2131   .text.basic:0000000000000038 autorun
         tinyBasic.s:2134   .text.basic:000000000000003c awu
         tinyBasic.s:2137   .text.basic:0000000000000040 bitmask
         tinyBasic.s:2152   .text.basic:0000000000000044 bit_reset
         tinyBasic.s:2177   .text.basic:0000000000000070 bit_set
         tinyBasic.s:2213   .text.basic:00000000000000c0 bit_test
         tinyBasic.s:2201   .text.basic:0000000000000098 bit_toggle
         tinyBasic.s:2216   .text.basic:00000000000000c4 bye
         tinyBasic.s:2219   .text.basic:00000000000000c8 char
         tinyBasic.s:2222   .text.basic:00000000000000cc const_cr2
         tinyBasic.s:2225   .text.basic:00000000000000d0 const_cr1
         tinyBasic.s:2228   .text.basic:00000000000000d4 data
         tinyBasic.s:2231   .text.basic:00000000000000d8 data_line
         tinyBasic.s:2234   .text.basic:00000000000000dc const_ddr
         tinyBasic.s:2237   .text.basic:00000000000000e0 dec_base
         tinyBasic.s:2240   .text.basic:00000000000000e4 directory
         tinyBasic.s:2243   .text.basic:00000000000000e8 do_loop
         tinyBasic.s:2246   .text.basic:00000000000000ec digital_read
         tinyBasic.s:2249   .text.basic:00000000000000f0 digital_write
         tinyBasic.s:2256   .text.basic:00000000000000f4 cmd_end
         tinyBasic.s:2260   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2263   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2273   .text.basic:0000000000000108 for
         tinyBasic.s:2266   .text.basic:0000000000000104 forget
         tinyBasic.s:2353   .text.basic:00000000000001bc gosub
         tinyBasic.s:2385   .text.basic:0000000000000200 goto
         tinyBasic.s:2399   .text.basic:0000000000000230 gpio
         tinyBasic.s:2402   .text.basic:0000000000000234 hex_base
         tinyBasic.s:2405   .text.basic:0000000000000238 const_idr
         tinyBasic.s:2412   .text.basic:000000000000023c if
         tinyBasic.s:2418   .text.basic:0000000000000250 input_var
         tinyBasic.s:2421   .text.basic:0000000000000254 invert
         tinyBasic.s:2424   .text.basic:0000000000000258 enable_iwdg
         tinyBasic.s:2427   .text.basic:000000000000025c refresh_iwdg
         tinyBasic.s:2430   .text.basic:0000000000000260 key
         tinyBasic.s:2443   .text.basic:0000000000000264 let
         tinyBasic.s:2483   .text.basic:00000000000002f0 list
         tinyBasic.s:2598   .text.basic:0000000000000490 load
         tinyBasic.s:2601   .text.basic:0000000000000494 log2
         tinyBasic.s:2604   .text.basic:0000000000000498 lshift
         tinyBasic.s:2607   .text.basic:000000000000049c muldiv
         tinyBasic.s:2320   .text.basic:0000000000000174 next
         tinyBasic.s:2615   .text.basic:00000000000004a0 new
         tinyBasic.s:2624   .text.basic:00000000000004c0 func_not
         tinyBasic.s:2632   .text.basic:00000000000004d8 const_odr
         tinyBasic.s:2635   .text.basic:00000000000004dc bit_or
         tinyBasic.s:2638   .text.basic:00000000000004e0 pad_ref
         tinyBasic.s:2646   .text.basic:00000000000004e4 pause
         tinyBasic.s:2657   .text.basic:0000000000000500 pin_mode
         tinyBasic.s:2660   .text.basic:0000000000000504 peek
         tinyBasic.s:2663   .text.basic:0000000000000508 const_input
         tinyBasic.s:2666   .text.basic:000000000000050c poke
         tinyBasic.s:2669   .text.basic:0000000000000510 const_output
ARM GAS  tinyBasic.s 			page 89


         tinyBasic.s:2676   .text.basic:0000000000000514 print
         tinyBasic.s:2721   .text.basic:00000000000005c0 const_porta
         tinyBasic.s:2724   .text.basic:00000000000005c4 const_portb
         tinyBasic.s:2727   .text.basic:00000000000005c8 const_portc
         tinyBasic.s:2730   .text.basic:00000000000005cc const_portd
         tinyBasic.s:2733   .text.basic:00000000000005d0 const_porte
         tinyBasic.s:2736   .text.basic:00000000000005d4 const_portf
         tinyBasic.s:2739   .text.basic:00000000000005d8 const_portg
         tinyBasic.s:2742   .text.basic:00000000000005dc const_porth
         tinyBasic.s:2745   .text.basic:00000000000005e0 const_porti
         tinyBasic.s:2748   .text.basic:00000000000005e4 qkey
         tinyBasic.s:2751   .text.basic:00000000000005e8 read
         tinyBasic.s:2754   .text.basic:00000000000005ec remark
         tinyBasic.s:2757   .text.basic:00000000000005f0 restore
         tinyBasic.s:2374   .text.basic:00000000000001f8 return
         tinyBasic.s:2760   .text.basic:00000000000005f4 random
         tinyBasic.s:2763   .text.basic:00000000000005f8 rshift
         tinyBasic.s:2770   .text.basic:00000000000005fc run
         tinyBasic.s:2785   .text.basic:0000000000000628 save
         tinyBasic.s:2788   .text.basic:000000000000062c show
         tinyBasic.s:2791   .text.basic:0000000000000630 size
         tinyBasic.s:2794   .text.basic:0000000000000634 sleep
         tinyBasic.s:2797   .text.basic:0000000000000638 spi_read
         tinyBasic.s:2800   .text.basic:000000000000063c spi_enable
         tinyBasic.s:2803   .text.basic:0000000000000640 spi_select
         tinyBasic.s:2806   .text.basic:0000000000000644 spi_write
         tinyBasic.s:2305   .text.basic:0000000000000158 step
         tinyBasic.s:2809   .text.basic:0000000000000648 stop
         tinyBasic.s:2816   .text.basic:000000000000064c get_ticks
         tinyBasic.s:2825   .text.basic:0000000000000654 set_timer
         tinyBasic.s:2837   .text.basic:0000000000000668 timeout
         tinyBasic.s:2291   .text.basic:000000000000013c to
         tinyBasic.s:2845   .text.basic:000000000000067c tone
         tinyBasic.s:2855   .text.basic:0000000000000680 ubound
         tinyBasic.s:2863   .text.basic:0000000000000694 uflash
         tinyBasic.s:2866   .text.basic:0000000000000698 until
         tinyBasic.s:2869   .text.basic:000000000000069c usr
         tinyBasic.s:2872   .text.basic:00000000000006a0 wait
         tinyBasic.s:2881   .text.basic:00000000000006a4 words
         tinyBasic.s:2904   .text.basic:000000000000070c write
         tinyBasic.s:2907   .text.basic:0000000000000710 bit_xor
         tinyBasic.s:2910   .text.basic:0000000000000714 transmit
         tinyBasic.s:2913   .text.basic:0000000000000718 receive
         tinyBasic.s:2107   .text.basic:0000000000000000 $t
         tinyBasic.s:2507   .text.basic:0000000000000328 print_basic_line
         tinyBasic.s:2517   .text.basic:000000000000034e token_loop
         tinyBasic.s:2588   .text.basic:0000000000000459 single_char
         tinyBasic.s:2584   .text.basic:0000000000000450 ge_str
         tinyBasic.s:2585   .text.basic:0000000000000453 le_str
         tinyBasic.s:2586   .text.basic:0000000000000456 ne_str
         tinyBasic.s:2584   .text.basic:0000000000000450 $d
         tinyBasic.s:2598   .text.basic:0000000000000490 $t
         tinyBasic.s:2714   .text.basic:00000000000005a8 print_exit
         tinyBasic.s:2923   .text.basic:0000000000000800 $d
         tinyBasic.s:1922   .text:0000000000000e8a $d
         tinyBasic.s:2923   .text:0000000000000e8c $d
         tinyBasic.s:597    .text:0000000000000445 $d
ARM GAS  tinyBasic.s 			page 90


         tinyBasic.s:597    .text:0000000000000446 $t
         tinyBasic.s:1286   .text:0000000000000969 $d
         tinyBasic.s:1286   .text:000000000000096a $t
         tinyBasic.s:1380   .text:0000000000000a0b $d
         tinyBasic.s:1380   .text:0000000000000a0c $t
         tinyBasic.s:1854   .text:0000000000000e41 $d
         tinyBasic.s:1854   .text:0000000000000e42 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
