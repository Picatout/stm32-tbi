ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 13


  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 14


 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 15


 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 16


 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	  BASIC: DUMP adr, count 
 239              	    command line only  
 240              	    print memory content in hexadecimal 
 241              	    16 bytes per row 
 242              	    ouput:
 243              	      none 
 244              	    use:
 245              	      r2   byte counter  
 246              	****************************************/
 247              	    _FUNC dump 
 248 0150 04B4     	    push {r2}
 249 0152 226C     	    ldr r2,[UPP,#FLAGS]
 250 0154 12F0010F 	    tst r2,#FRUN 
 251 0158 02D0     	    beq 0f
 252 015a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 253 015e AFE2     	    b tb_error  
 254 0160 00B500F0 	0:  _CALL arg_list 
 254      F5FC5DF8 
 254      04EB
 255 016a 0228     	    cmp r0,#2
 256 016c 40F0A482 	    bne syntax_error 
 257 0170 5CF8042B 	    _POP r2   // count 
ARM GAS  tinyBasic.s 			page 17


 258 0174 5CF8040B 	    _POP  r0  // adr 
 259 0178 4FF01001 	1:  mov r1,#16
 260 017c 00B5FFF7 	    _CALL prt_row 
 260      A3FF5DF8 
 260      04EB
 261 0186 103A     	    subs r2,#16 
 262 0188 F6D5     	    bpl 1b 
 263 018a 04BC     	2:  pop {r2}
 264 018c 7047     	    _RET 
 265              	
 266              	/***************************************
 267              	    search_lineno 
 268              	    localize BASIC line from its number 
 269              	    input:
 270              	      r0   line# 
 271              	    output: 
 272              	      r0   adr where found || adr new to be inserted 
 273              	      r1   0 found || !0 not found  
 274              	    use:
 275              	      r0   scan address 
 276              	      r1   temp   
 277              	      r2   address end of text
 278              	      r3   target line#
 279              	****************************************/    
 280 018e 00BF     	    _FUNC search_lineno
 281 0190 0CB4     	    push {r2,r3} 
 282 0192 0346     	    mov r3,r0 // target 
 283 0194 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 284 0196 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 285 0198 9042     	1:  cmp r0,r2 
 286 019a 05D0     	    beq  8f
 287 019c 0188     	    ldrh r1,[r0]
 288 019e C91A     	    subs r1,r3 
 289 01a0 04D5     	    bpl 9f 
 290 01a2 8178     	    ldrb r1,[r0,#2]
 291 01a4 0844     	    add r0,r1
 292 01a6 F7E7     	    b 1b 
 293 01a8 4FF0FF31 	8:  mov r1,#-1 
 294 01ac 0CBC     	9:  pop {r2,r3}
 295 01ae 7047     	    _RET 
 296              	
 297              	
 298              	/********************************************
 299              	    delete_line 
 300              	    delete BASIC line at addr 
 301              	    input:
 302              	      r0    address 
 303              	    output:
 304              	      r0    address  
 305              	    use: 
 306              	      r1    dest adr
 307              	      r2    bytes to move 
 308              	      T1    length line to delete 
 309              	      T2    txtend 
 310              	********************************************/
 311              	    _FUNC delete_line 
 312 01b0 2DE90703 	    push {r0,r1,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 313 01b4 0146     	    mov r1,r0 // dest 
 314 01b6 91F80280 	    ldrb T1,[r1,#2] // line length 
 315 01ba 4044     	    add r0,T1  // src
 316 01bc D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01c0 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 318 01c4 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01ce A9EB0809 	    sub T2,T1 // txtend-count 
 320 01d2 C4F83480 	    str T1,[UPP,#TXTEND] 
 321 01d6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 322 01da 7047     	    _RET 
 323              	
 324              	/******************************************
 325              	    create_gap 
 326              	    create a gap in text area to insert new line 
 327              	    input:
 328              	      r0    adr 
 329              	      r1    length 
 330              	    output:
 331              	      r0    adr 
 332              	    use:
 333              	      T1    length 
 334              	      T2    txtend 
 335              	************************************************/
 336              	    _FUNC create_gap 
 337 01dc 2DE90503 	    push {r0,r2,T1,T2}
 338 01e0 8846     	    mov T1,R1
 339 01e2 0144     	    add r1,r0  // dest 
 340 01e4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 341 01e8 A9EB0002 	    sub r2,T2,r0 
 342 01ec 00B5FFF7 	    _CALL cmove
 342      FEFF5DF8 
 342      04EB
 343 01f6 C144     	    add T2,T1 
 344 01f8 C4F83490 	    str T2,[UPP,#TXTEND]
 345 01fc BDE80503 	    pop {r0,r2,T1,T2}
 346 0200 7047     	    _RET 
 347              	
 348              	/************************************************
 349              	    insert_line 
 350              	    insert BASIC line in text area 
 351              	    first search if line with same number exist 
 352              	    replace if so. 
 353              	    input:
 354              	      r0    *buffer to insert 
 355              	    output:
 356              	      none 
 357              	    use: 
 358              	      T1     *buffer
 359              	      T2     temp  
 360              	************************************************/ 
 361 0202 00BF     	    _FUNC insert_line 
 362 0204 2DE90203 	    push {r1,T1,T2}
 363 0208 8046     	    mov T1,r0 
 364 020a B8F80000 	    ldrh r0,[T1]
 365 020e 00B5FFF7 	    _CALL search_lineno 
ARM GAS  tinyBasic.s 			page 19


 365      BEFF5DF8 
 365      04EB
 366 0218 49B9     	    cbnz  r1, 1f // line# doesn't exist
 367              	// already exist 
 368 021a 00B5FFF7 	    _CALL delete_line // delete old one 
 368      C8FF5DF8 
 368      04EB
 369 0224 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 370 0228 B9F1030F 	    cmp T2,#3 
 371 022c 0ED0     	    beq 9f
 372              	1: //insert new line 
 373 022e 98F80210 	    ldrb r1,[T1,#2]
 374 0232 00B5FFF7 	    _CALL create_gap 
 374      D2FF5DF8 
 374      04EB
 375 023c 0146     	    mov r1,r0
 376 023e 4046     	    mov r0,T1 
 377 0240 8278     	    ldrb r2,[r0,#2]
 378 0242 00B5FFF7 	    _CALL cmove 
 378      FEFF5DF8 
 378      04EB
 379 024c BDE80203 	9:  pop {r1,T1,T2}
 380 0250 7047     	    _RET 
 381              	
 382              	/*********************************
 383              	    compile 
 384              	    tokenize source line save it 
 385              	    in pas buffer.
 386              	    compiled line format: 
 387              	      line_no  2 bytes {0...32767}
 388              	      count    1 byte  
 389              	      tokens   variable length 
 390              	  input:
 391              	     r0   *text buffer 
 392              	     r1   *text length   
 393              	  output:
 394              	    r0    0 stored | -1 immediate 
 395              	  use:
 396              	    r3    tib index   
 397              	    T1    tib
 398              	    T2    pad
 399              	***********************************/
 400 0252 00BF     	    _FUNC compile
 401 0254 8046     	    mov T1, r0  // source text buffer 
 402 0256 6160     	    str r1,[UPP,#COUNT] // save line length 
 403 0258 DFF84697 	    ldr T2,pad // tokens buffer
 404 025c 83EA0303 	    eor r3,r3 // source index  
 405 0260 206C     	    ldr r0,[UPP,#FLAGS]
 406 0262 40F02000 	    orr r0,#FCOMP
 407 0266 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 408 0268 80EA0000 	    eor r0,r0     
 409 026c 29F8020B 	    strh r0,[T2],#2   // line no 
 410 0270 09F8010B 	    strb r0,[T2],#1 // length 
 411 0274 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 412 0276 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 413 027a 00B500F0 	    _CALL parse_int 
 413      F8F85DF8 
ARM GAS  tinyBasic.s 			page 20


 413      04EB
 414 0284 07D0     	    beq 2f 
 415              	// this is a line number     
 416 0286 0129     	    cmp r1,#1 
 417 0288 02D5     	    bpl 1f 
 418 028a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 419 028e 17E2     	    b tb_error  
 420              	1:  // write line # to pad 
 421 0290 29F8031C 	    strh r1,[T2,#-3]
 422 0294 2360     	    str r3,[UPP,#IN_SAVED]
 423              	2:  // check for pad full 
 424 0296 C145     	    cmp T2,T1
 425 0298 02DB     	    blt 3f 
 426 029a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 427 029e 0FE2     	    b tb_error 
 428 02a0 00B500F0 	3:  _CALL comp_token 
 428      21F85DF8 
 428      04EB
 429 02aa 0028     	    cmp r0,#TK_NONE 
 430 02ac 01D0     	    beq 4f 
 431 02ae 2360     	    str r3,[UPP,#IN_SAVED]
 432 02b0 F1E7     	    b 2b 
 433              	4: // compilation completed 
 434 02b2 DFF8EE36 	    ldr r3,pad 
 435 02b6 A9EB0300 	    sub r0,T2,r3 // line length 
 436 02ba 9870     	    strb r0,[r3,#2]
 437 02bc 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 438 02be 1888     	    ldrh r0,[r3] // line number 
 439 02c0 38B1     	    cbz r0,8f  
 440              	// insert line in text buffer 
 441 02c2 1846     	    mov r0,r3 
 442 02c4 00B5FFF7 	    _CALL insert_line 
 442      9DFF5DF8 
 442      04EB
 443 02ce 4040     	    eors r0,r0 
 444 02d0 08E0     	    b 9f 
 445 02d2 9B46     	8:  mov BPTR,r3 // *token_list 
 446 02d4 4FF0030A 	    mov IN,#3
 447 02d8 206C     	    ldr r0,[UPP,#FLAGS]
 448 02da A0F12000 	    sub r0,#FCOMP
 449 02de 2064     	    str r0,[UPP,#FLAGS]
 450 02e0 5FF0FF30 	    movs r0,#-1 
 451 02e4 7047     	9:  _RET 
 452              	
 453              	/*********************************************
 454              	    compile next token from source 
 455              	    input: 
 456              	      r3 		tib index  
 457              	      T1    tib adr
 458              	      T2    insert point in pad  
 459              	    output:
 460              	      r0     token attribute 
 461              	      r1 		token value
 462              	      r3     tib index updated    
 463              	      T2     updated 
 464              	      use:
 465              	**********************************************/
ARM GAS  tinyBasic.s 			page 21


 466              	    .macro _case c, next  
 467              	    cmp r0,#\c 
 468              	    bne \next
 469              	    .endm 
 470              	
 471 02e6 00BF     	    _FUNC comp_token 
 472 02e8 40B4     	    push {r6}
 473 02ea 18F80300 	    ldrb r0,[T1,r3]
 474 02ee 0040     	    ands r0,r0 
 475 02f0 68D0     	    beq store_r0  // reached end of text  
 476 02f2 4FF02000 	    mov r0,#SPACE 
 477 02f6 00B500F0 	    _CALL skip  // skip spaces 
 477      26F95DF8 
 477      04EB
 478 0300 18F80300 	    ldrb r0,[T1,r3]
 479 0304 0040     	    ands r0,r0 
 480 0306 5DD0     	    beq store_r0  // reached end of text 
 481 0308 03F10103 	    add r3,#1 
 482 030c 00B500F0 	    _CALL upper 
 482      27F95DF8 
 482      04EB
 483 0316 00B500F0 	    _CALL is_special
 483      74F85DF8 
 483      04EB
 484 0320 DFF8046B 	    ldr r6,=token_ofs
 485 0324 D6E811F0 	    tbh [r6,r1] 
 486              	tok_idx0:     
 487              	//  not special char.  
 488 0328 4FE0     	    b try_number 
 489              	// single char token with no value 
 490              	single: 
 491 032a DFF8006B 	    ldr r6,=tok_single
 492 032e 705C     	    ldrb r0,[r6,r1] 
 493 0330 48E0     	    b store_r0  
 494              	lt:
 495 0332 4FF03400 	    mov r0,#TK_LT
 496 0336 18F80310 	    ldrb r1,[T1,r3]
 497 033a 3E29     	    cmp r1,#'>' 
 498 033c 06D0     	    beq 1f
 499 033e 41E0     	    b store_r0 
 500              	gt:
 501 0340 4FF03100 	    mov r0,#TK_GT 
 502 0344 18F80310 	    ldrb r1,[T1,r3]
 503 0348 3C29     	    cmp r1,#'<'
 504 034a 04D1     	    bne 2f  
 505 034c 03F10103 	1:  add r3,#1
 506 0350 4FF03500 	    mov r0,#TK_NE  
 507 0354 36E0     	    b store_r0
 508 0356 3D29     	2:  cmp r1,#'=' 
 509 0358 34D1     	    bne store_r0  
 510 035a 03F10103 	    add r3,#1
 511 035e 00F10200 	    add r0,#2
 512 0362 2FE0     	    b store_r0       
 513              	bkslash:
 514 0364 18F80310 	    ldrb r1,[T1,r3]
 515 0368 03F10103 	    add r3,#1
 516 036c 4FF00300 	    mov r0,#TK_CHAR 
ARM GAS  tinyBasic.s 			page 22


 517 0370 09F8010B 	    strb r0,[T2],#1
 518 0374 09F8011B 	    strb r1,[T2],#1
 519 0378 41E0     	    b token_exit 
 520              	prt_cmd: 
 521 037a 4FF00A00 	    mov r0,#TK_CMD 
 522 037e 4FF03A01 	    mov r1,#PRT_IDX
 523 0382 09F8010B 	    strb r0,[T2],#1
 524 0386 09F8011B 	    strb r1,[T2],#1
 525 038a 38E0     	    b token_exit 
 526              	quote:
 527 038c 4FF00200 	    mov r0,#TK_QSTR 
 528 0390 09F8010B 	    strb r0,[T2],#1
 529 0394 00B500F0 	    _CALL parse_quote
 529      A3F85DF8 
 529      04EB
 530 039e 2EE0     	    b token_exit
 531              	tick: 
 532              	// copy comment in pad 
 533 03a0 4FF00A00 	    mov r0,#TK_CMD 
 534 03a4 4FF04701 	    mov r1,#REM_IDX 
 535 03a8 09F8010B 	    strb r0,[T2],#1 
 536 03ac 09F8011B 	    strb r1,[T2],#1
 537 03b0 08EB0300 	    add r0,T1,r3 
 538 03b4 4946     	    mov r1,T2 
 539 03b6 00B5FFF7 	    _CALL strcpy 
 539      FEFF5DF8 
 539      04EB
 540 03c0 6368     	    ldr r3,[UPP,#COUNT]
 541 03c2 1CE0     	    b token_exit
 542              	store_r0: 
 543 03c4 09F8010B 	    strb r0,[T2],#1
 544 03c8 19E0     	    b token_exit 
 545              	try_number:
 546 03ca A3F10103 	    sub r3,#1
 547 03ce 00B500F0 	    _CALL parse_int  
 547      4EF85DF8 
 547      04EB
 548 03d8 04D0     	    beq 1f 
 549 03da 09F8010B 	    strb r0,[T2],#1 
 550 03de 49F8041B 	    str r1,[T2],#4
 551 03e2 0CE0     	    b token_exit 
 552 03e4 00B500F0 	1:  _CALL parse_keyword 
 552      15F95DF8 
 552      04EB
 553 03ee 0428     	    cmp r0,#TK_VAR 
 554 03f0 01D0     	    beq 2f 
 555 03f2 4729     	    cmp r1,#REM_IDX 
 556 03f4 D4D0     	    beq tick
 557 03f6 09F8010B 	2:  strb r0,[T2],#1 
 558 03fa 09F8011B 	    strb r1,[T2],#1
 559              	token_exit:
 560 03fe 40BC     	    pop {r6}
 561 0400 7047     	    _RET 
 562              	
 563              	/****************************
 564              	    is_special  
 565              	    check for non alphanum
ARM GAS  tinyBasic.s 			page 23


 566              	    input:
 567              	      r0    character to scan 
 568              	    output:
 569              	      r0    character 
 570              	      r1    0 || index 
 571              	    use: 
 572              	      r1    scan index 
 573              	      r2    temp 
 574              	      r3    char_list 
 575              	*****************************/
 576 0402 00BF     	    _FUNC is_special 
 577 0404 0CB4     	    push {r2,r3}
 578 0406 4FF00101 	    mov r1,#1
 579 040a DFF8243A 	    ldr r3,=char_list 
 580 040e 5A5C     	1:  ldrb r2,[r3,r1]
 581 0410 22B1     	    cbz r2,8f 
 582 0412 8242     	    cmp r2,r0 
 583 0414 04D0     	    beq 9f 
 584 0416 01F10101 	    add r1,#1 
 585 041a F8E7     	    b 1b
 586 041c 81EA0101 	8:  eor r1,r1     
 587 0420 0CBC     	9:  pop {r2,r3}
 588 0422 7047     	    _RET 
 589              	
 590              	char_list:
 591 0424 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 591      293A232D 
 591      2B2A2F25 
 591      3D3C3E5C 
 591      3F272200 
 592              	
 593              	tok_single:
 594 0438 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 594      070109
 595 043f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 595      2232
 596              	  
 597 0445 0000BF   	  .p2align 2
 598              	token_ofs:
 599 0448 0000     	  .hword  0 // not found
 600              	  // TK_COMMA...TK_EQUAL , 12 
 601 044a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 601      01000100 
 602 0452 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 602      01000100 
 603 045a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 603      01000100 
 604              	  // '<','>'
 605 0462 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 606              	  // '\'
 607 0466 1E00     	  .hword  (bkslash-tok_idx0)/2
 608              	  // '?' 
 609 0468 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 610              	  // "'"  
 611 046a 3C00     	  .hword  (tick-tok_idx0)/2 
 612              	  // '"' quote 
 613 046c 3200     	  .hword (quote-tok_idx0)/2
ARM GAS  tinyBasic.s 			page 24


 614              	
 615 046e 00BF     	  .p2align 2
 616              	
 617              	/****************************
 618              	    parse_int 
 619              	    parse an integer from text
 620              	    if not valid integer 
 621              	    r1 return *buffer else 
 622              	    *buffer is incremented after integer 
 623              	  input:
 624              	    r0   *buffer 
 625              	  output:
 626              	    r0   TK_INTGR|TK_NONE
 627              	    r1   int|0   
 628              	  use:
 629              	    r0   char 
 630              	    r1   save r3 
 631              	    r2   int
 632              	    r6   base 
 633              	    r7   digit count 
 634              	    r3   tib index   
 635              	    T1   *tib 
 636              	    T2   *pad  
 637              	*****************************/
 638              	    _FUNC parse_int 
 639 0470 C0B4     	    push {r6,r7}
 640 0472 82EA0202 	    eor r2,r2 // int 
 641 0476 1946     	    mov r1,r3 
 642 0478 4FF00A06 	    mov r6,#10 // default base 
 643 047c 87EA0707 	    eor r7,r7 // digit count 
 644 0480 18F80300 	    ldrb r0,[T1,r3]
 645 0484 03F10103 	    add r3,#1 
 646 0488 2428     	    cmp r0,'$' 
 647 048a 02D1     	    bne 2f 
 648 048c 4FF01006 	    mov r6,#16 // hexadecimal number 
 649 0490 03E0     	    b 3f  
 650 0492 2628     	2:  cmp r0,#'&' 
 651 0494 05D1     	    bne 4f
 652 0496 4FF00206 	    mov r6,#2 //binary number  
 653 049a 18F80300 	3:  ldrb r0,[T1,r3]
 654 049e 03F10103 	    add r3,#1
 655 04a2 00B500F0 	4:  _CALL upper 
 655      5CF85DF8 
 655      04EB
 656 04ac 4128     	    cmp r0,#'A'
 657 04ae 00D4     	    bmi 5f
 658 04b0 0738     	    subs r0,#7  
 659 04b2 3038     	5:  subs r0,#'0' 
 660 04b4 07D4     	    bmi 6f // not digit   
 661 04b6 B042     	    cmp r0,r6 
 662 04b8 05D5     	    bpl 6f // not digit 
 663 04ba 06FB02F2 	    mul r2,r6 
 664 04be 0244     	    add r2,r0
 665 04c0 07F10107 	    add r7,#1  
 666 04c4 E9E7     	    b 3b
 667 04c6 A3F10103 	6:  sub r3,#1  // unget last char
 668 04ca 1FB1     	    cbz r7, 7f 
ARM GAS  tinyBasic.s 			page 25


 669 04cc 4FF00E00 	    mov r0,#TK_INTGR  
 670 04d0 1146     	    mov r1,r2 
 671 04d2 02E0     	    b 9f 
 672              	7: // not a number 
 673 04d4 0B46     	    mov r3,r1 // restore r3 
 674 04d6 80EA0000 	    eor r0,r0 // TK_NONE 
 675 04da 0040     	9:  ands r0,r0 // to set zero flag 
 676 04dc C0BC     	    pop {r6,r7}
 677 04de 7047     	    _RET 
 678              	
 679              	/*********************************************
 680              	    parse_quote 
 681              	    parse quoted string 
 682              	    input: 
 683              	      r3 		tib index  
 684              	      T1    tib adr
 685              	      T2    insert point in pad  
 686              	    output:
 687              	      r0     token attribute 
 688              	      r1 		*str 
 689              	      r3     tib index updated    
 690              	      T2     updated 
 691              	      use:
 692              	*********************************************/
 693              	    _FUNC parse_quote
 694 04e0 4DF8049D 	    push {T2} 
 695 04e4 18F80300 	1:  ldrb r0,[T1,r3]
 696 04e8 03F10103 	    add r3,#1 
 697 04ec 2228     	    cmp r0,#'"'
 698 04ee 09D0     	    beq 9f 
 699 04f0 5C28     	    cmp r0,#'\\'
 700 04f2 04D1     	    bne 2f 
 701 04f4 00B500F0 	    _CALL get_escaped_char 
 701      0DF85DF8 
 701      04EB
 702 04fe 09F8010B 	2:  strb r0,[T2],#1
 703 0502 EFE7     	    b 1b 
 704 0504 80EA0000 	9:  eor  r0,r0
 705 0508 09F8010B 	    strb r0,[T2],#1
 706 050c 4FF00200 	    mov r0,#TK_QSTR
 707 0510 02BC     	    pop {r1}
 708 0512 7047     	    _RET 
 709              	
 710              	/**********************************************
 711              	    get_escaped_char 
 712              	    convert "\c" in quoted string 
 713              	    input:
 714              	      r0 
 715              	      r3   index 
 716              	      T1   tib 
 717              	    output:
 718              	      r0   replacement char
 719              	      r3   updated 
 720              	    use:
 721              	      r1   *table 
 722              	      r2   temp 
 723              	**********************************************/
ARM GAS  tinyBasic.s 			page 26


 724              	    _FUNC get_escaped_char 
 725 0514 06B4     	    push {r1,r2}
 726 0516 18F80300 	    ldrb r0,[T1,r3]
 727 051a 03F10103 	    add r3,#1
 728 051e 2228     	    cmp r0,#'"' 
 729 0520 0BD0     	    beq 9f 
 730 0522 DFF81019 	1:  ldr r1,=escaped 
 731 0526 11F8012B 	2:  ldrb r2,[r1],#1
 732 052a 12B1     	    cbz r2,6f 
 733 052c 8242     	    cmp r2,r0 
 734 052e 02D0     	    beq 7f 
 735 0530 F9E7     	    b 2b
 736 0532 A0F10702 	6:  sub r2,r0,#7     
 737 0536 02F10700 	7:  add r0,r2,#7
 738 053a 06BC     	9:  pop {r1,r2}   
 739 053c 7047     	    _RET
 740              	
 741 053e 6162746E 	escaped: .asciz "abtnvfr"
 741      76667200 
 742              	
 743              	/*********************************************
 744              	   skip character in TIB 
 745              	   input:
 746              	      r0    character to skip 
 747              	      r3    tib index 
 748              	      T1    tib adr
 749              	    output: 
 750              	      r3    updated
 751              	    use:
 752              	      r1     
 753              	**********************************************/   
 754 0546 00BF     	    _FUNC skip
 755 0548 02B4     	    push {r1} 
 756 054a 18F80310 	1:  ldrb r1,[T1,r3]
 757 054e 8142     	    cmp r1,r0
 758 0550 02D1     	    bne 2f
 759 0552 03F10103 	    add r3,#1 
 760 0556 F8E7     	    b 1b 
 761 0558 2360     	2:  str r3,[UPP,#IN_SAVED]
 762 055a 02BC     	    pop {r1}
 763 055c 7047     	    _RET
 764              	
 765              	/********************************************
 766              	    upper
 767              	    convert character in upper case 
 768              	    input: 
 769              	      r0   character 
 770              	    output:
 771              	      r0   upper case character 
 772              	*********************************************/
 773 055e 00BF     	    _FUNC upper 
 774 0560 6128     	    cmp r0,#'a' 
 775 0562 03DB     	    blt 9f 
 776 0564 7A28     	    cmp r0,#'z' 
 777 0566 01DC     	    bgt 9f 
 778 0568 00F05F00 	    and r0,#0x5f 
 779 056c 7047     	9:  _RET 
ARM GAS  tinyBasic.s 			page 27


 780              	
 781              	/***************************************
 782              	   is_digit 
 783              	   check if char is decimal digit.
 784              	   convert to decimal digit.
 785              	   input:
 786              	      r0    char 
 787              	   output:
 788              	      r0    if !Z then converted digit 
 789              	      Z     0 true | 1 false  
 790              	***************************************/
 791 056e 00BF     	    _GBL_FUNC is_digit 
 792 0570 02B4     	    push {r1} 
 793 0572 81EA0101 	    eor r1,r1 
 794 0576 3028     	    cmp r0,#'0' 
 795 0578 05DB     	    blt 9f
 796 057a 3A28     	    cmp r0,'9'+1
 797 057c 03D5     	    bpl 9f 
 798 057e 4FF0FF31 	    mov r1,#-1
 799 0582 A0F13000 	    sub r0,#'0'  
 800              	9:   
 801 0586 0940     	    ands r1,r1
 802 0588 02BC     	    pop {r1} 
 803 058a 7047     	    _RET 
 804              	
 805              	/***************************************
 806              	    is_hex 
 807              	    check for hexadecimal digit 
 808              	    convert to hex digit.
 809              	    input:
 810              	      r0    
 811              	    output:
 812              	      r0     if !Z then converted digit 
 813              	      Z      0 true | 1 false         
 814              	***************************************/
 815              	    _FUNC is_hex 
 816 058c 02B4     	    push {r1}
 817 058e 4FF0FF31 	    mov r1,#-1 
 818 0592 4128     	    cmp r0,#'A' 
 819 0594 01D4     	    bmi 1f 
 820 0596 A0F10700 	    sub r0,#7 
 821 059a A0F13000 	1:  sub r0,#'0'
 822 059e 01D4     	    bmi 2f 
 823 05a0 1028     	    cmp r0,#16
 824 05a2 01D4     	    bmi 9f 
 825 05a4 81EA0101 	2:  eor r1,r1  
 826 05a8 0940     	9:  ands r1,r1 
 827 05aa 02BC     	    pop {r1}
 828 05ac 7047     	    _RET 
 829              	
 830              	/***************************************
 831              	    is_bit 
 832              	    check if char is '0'|'1' 
 833              	    convert to binary digit. 
 834              	    input:
 835              	      r0    
 836              	    output:
ARM GAS  tinyBasic.s 			page 28


 837              	      r0     if !Z then converted digit 
 838              	      Z      0 true | 1 false         
 839              	***************************************/
 840 05ae 00BF     	    _FUNC is_bit
 841 05b0 02B4     	    push  {r1}
 842 05b2 4FF0FF31 	    mov r1,#-1 
 843 05b6 A0F13000 	    sub r0,#'0' 
 844 05ba 01D4     	    bmi 2f 
 845 05bc 0229     	    cmp r1,#2
 846 05be 01D4     	    bmi 9f 
 847 05c0 81EA0101 	2:  eor r1,r1 
 848 05c4 0940     	9:  ands r1,r1 
 849 05c6 02BC     	    pop {r1}
 850 05c8 7047     	    _RET 
 851              	
 852              	/***************************************
 853              	    is_alpha 
 854              	    check if character is {A..Z} 
 855              	  input:
 856              	    r0   character 
 857              	  output: 
 858              	    r0    same character 
 859              	    Z    0 true | 1 false  
 860              	****************************************/
 861 05ca 00BF     	    _FUNC is_alpha
 862 05cc 02B4     	    push {r1} 
 863 05ce 4FF0FF31 	    mov r1,#-1 
 864 05d2 4128     	    cmp r0,#'A' 
 865 05d4 01DB     	    blt 8f 
 866 05d6 5B28     	    cmp r0,#'Z'+1 
 867 05d8 01D4     	    bmi 9f 
 868 05da 81EA0101 	8:  eor r1,r1  
 869 05de 0940     	9:  ands r1,r1 
 870 05e0 02BC     	    pop {r1}
 871 05e2 7047     	    _RET 
 872              	
 873              	/***************************************
 874              	    is_num 
 875              	    check if character is {0..9} 
 876              	  input:
 877              	    r0   character 
 878              	  output: 
 879              	    r0    same character 
 880              	    Z    0 true | 1 false  
 881              	****************************************/
 882              	    _FUNC is_num 
 883 05e4 02B4     	    push {r1} 
 884 05e6 4FF0FF31 	    mov r1,#-1 
 885 05ea 3028     	    cmp r0,#'0' 
 886 05ec 01DB     	    blt 8f 
 887 05ee 3A28     	    cmp r0,#'9'+1 
 888 05f0 01D4     	    bmi 9f 
 889 05f2 81EA0101 	8:  eor r1,r1  
 890 05f6 0940     	9:  ands r1,r1 
 891 05f8 02BC     	    pop {r1}
 892 05fa 7047     	    _RET 
 893              	
ARM GAS  tinyBasic.s 			page 29


 894              	/*****************************************
 895              	    is_alnum 
 896              	    check if character is alphanumeric 
 897              	    input:
 898              	      r0 
 899              	    output:
 900              	      r0     same 
 901              	      Z      1 false | 0 true 
 902              	*****************************************/
 903              	    _FUNC is_alnum 
 904 05fc 00B5FFF7 	    _CALL is_alpha 
 904      E5FF5DF8 
 904      04EB
 905 0606 04D1     	    bne 9f 
 906 0608 00B5FFF7 	    _CALL is_num 
 906      EBFF5DF8 
 906      04EB
 907 0612 7047     	9:  _RET 
 908              	
 909              	
 910              	/*****************************************
 911              	    parse_keyword 
 912              	    parse work and ckeck if in dictionary 
 913              	    input:
 914              	      r0    first character 
 915              	      r3    tib index 
 916              	      t1    tib 
 917              	      t2    pad 
 918              	    output:
 919              	      r3    updated 
 920              	      t1    updated 
 921              	      t2    updated   
 922              	    use:
 923              	    
 924              	*****************************************/
 925              	    _FUNC parse_keyword 
 926 0614 4DF8049D 	    push {T2}
 927 0618 18F80300 	    ldrb r0,[T1,r3]
 928 061c 03F10103 	    add r3,#1
 929 0620 F8B1     	    cbz r0,2f 
 930 0622 00B5FFF7 	    _CALL upper 
 930      9CFF5DF8 
 930      04EB
 931 062c 00B5FFF7 	    _CALL is_alpha 
 931      CDFF5DF8 
 931      04EB
 932 0636 3FD0     	    beq syntax_error 
 933 0638 09F8010B 	    strb r0,[T2],#1
 934 063c 18F80300 	1:  ldrb r0,[T1,r3]
 935 0640 03F10103 	    add r3,#1 
 936 0644 68B1     	    cbz r0,2f 
 937 0646 00B5FFF7 	    _CALL upper 
 937      8AFF5DF8 
 937      04EB
 938 0650 00B5FFF7 	    _CALL is_alnum
 938      D3FF5DF8 
 938      04EB
ARM GAS  tinyBasic.s 			page 30


 939 065a 02D0     	    beq 2f 
 940 065c 09F8010B 	    strb r0,[T2],#1
 941 0660 ECE7     	    b 1b 
 942 0662 A3F10103 	2:  sub r3,#1
 943 0666 80EA0000 	    eor r0,r0
 944 066a 89F80000 	    strb r0,[T2] 
 945 066e 0098     	    ldr r0,[sp]
 946 0670 4178     	    ldrb r1,[r0,#1] 
 947 0672 29B9     	    cbnz r1,3f
 948 0674 0178     	    ldrb r1,[r0]
 949 0676 A1F14101 	    sub r1,#'A'
 950 067a 4FF00400 	    mov r0,#TK_VAR
 951 067e 08E0     	    b 9f 
 952 0680 DFF8B417 	3:  ldr r1,=kword_dict  
 953 0684 00B500F0 	    _CALL search_dict 
 953      BDF85DF8 
 953      04EB
 954 068e 00B9     	    cbnz r0,9f 
 955 0690 12E0     	    b syntax_error 
 956 0692 5DF8049B 	9:  pop {T2}
 957 0696 7047     	    _RET 
 958              	
 959              	
 960              	/*******************
 961              	    DECOMPILER 
 962              	*******************/
 963              	
 964              	/**********************************
 965              	    cmd_name 
 966              	    reverse dictionary search 
 967              	    from CMD_IDX to NAME 
 968              	  input:
 969              	    r0    CMD_IDX 
 970              	  output:
 971              	    r0    *NAME | 0 
 972              	  use:
 973              	    r1    dictionary link
 974              	    r2    tmp 
 975              	**********************************/
 976              	    _FUNC cmd_name
 977 0698 06B4     	    push {r1,r2}
 978 069a DFF89C17 	    ldr r1,=kword_dict  
 979 069e 0A78     	1:  ldrb r2,[r1]
 980 06a0 3AB1     	    cbz r2,3f 
 981 06a2 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 982 06a6 9042     	    cmp r0,r2 
 983 06a8 02D0     	    beq 2f 
 984 06aa 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 985 06ae F6E7     	    b 1b
 986 06b0 0A46     	2:  mov r2,r1
 987 06b2 1046     	3:  mov r0,r2 
 988 06b4 06BC     	    pop {r1,r2}
 989 06b6 7047     	    _RET 
 990              	
 991              	
 992              	/**********************************
 993              	      BASIC commands 
ARM GAS  tinyBasic.s 			page 31


 994              	**********************************/
 995              	
 996              	/*********************************
 997              	    syntax_error 
 998              	    display syntax error message and 
 999              	    abort program 
 1000              	  input:
 1001              	    none  
 1002              	  output: 
 1003              	    none 
 1004              	  use:
 1005              	*********************************/
 1006              	    _FUNC syntax_error 
 1007 06b8 4FF00200 	    mov r0,#ERR_SYNTAX
 1008 06bc 00E0     	    b tb_error 
 1009              	
 1010              	/*********************************
 1011              	    tb_error 
 1012              	    display BASIC error and 
 1013              	    abort program. 
 1014              	  input:
 1015              	    r0    error code   
 1016              	  output: 
 1017              	    none 
 1018              	  use:
 1019              	    r1    temp 
 1020              	*********************************/
 1021 06be 00BF     	    _FUNC tb_error 
 1022 06c0 216C     	    ldr r1,[UPP,#FLAGS]
 1023 06c2 11F0200F 	    tst r1,#FCOMP
 1024 06c6 33D1     	    bne compile_error
 1025              	rt_error:
 1026 06c8 01B4     	    push {r0}
 1027 06ca DFF87007 	    ldr r0,=rt_error_msg 
 1028 06ce 00B5FFF7 	    _CALL uart_puts 
 1028      FEFF5DF8 
 1028      04EB
 1029 06d8 01BC     	    pop {r0}
 1030 06da DFF86417 	    ldr r1,=err_msg  
 1031 06de 4FEA8000 	    lsl r0,#2 
 1032 06e2 0858     	    ldr r0,[r1,r0]
 1033 06e4 00B5FFF7 	    _CALL uart_puts
 1033      FEFF5DF8 
 1033      04EB
 1034 06ee D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1035 06f2 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1036 06f6 00B500F0 	    _CALL next_token
 1036      A0F95DF8 
 1036      04EB
 1037 0700 02B4     	    push {r1}
 1038 0702 4FF00A01 	    mov r1,#10 
 1039 0706 00B5FFF7 	    _CALL print_int 
 1039      FEFF5DF8 
 1039      04EB
 1040 0710 4FF02C00 	    mov r0,#',' 
 1041 0714 00B5FFF7 	    _CALL uart_putc 
 1041      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 32


 1041      04EB
 1042 071e 01BC     	    pop {r0}
 1043 0720 4FF00A01 	    mov r1,#10 
 1044 0724 00B5FFF7 	    _CALL print_int 
 1044      FEFF5DF8 
 1044      04EB
 1045 072e 41E1     	    b warm_start 
 1046              	compile_error:
 1047 0730 DFF80C17 	    ldr r1,=err_msg 
 1048 0734 4FEA8000 	    lsl r0,#2 
 1049 0738 0858     	    ldr r0,[r1,r0]
 1050 073a 00B5FFF7 	    _CALL uart_puts
 1050      FEFF5DF8 
 1050      04EB
 1051 0744 A068     	    ldr r0,[UPP,#BASICPTR]
 1052 0746 00B5FFF7 	    _CALL uart_puts
 1052      FEFF5DF8 
 1052      04EB
 1053 0750 4FF00D00 	    mov r0,#CR 
 1054 0754 00B5FFF7 	    _CALL uart_putc  
 1054      FEFF5DF8 
 1054      04EB
 1055 075e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1056 0760 00B5FFF7 	    _CALL spaces 
 1056      FEFF5DF8 
 1056      04EB
 1057 076a 4FF05E00 	    mov r0,#'^' 
 1058 076e 00B5FFF7 	    _CALL uart_putc
 1058      FEFF5DF8 
 1058      04EB
 1059 0778 4FF00D00 	    mov r0,#CR 
 1060 077c 00B5FFF7 	    _CALL uart_putc   
 1060      FEFF5DF8 
 1060      04EB
 1061 0786 15E1     	    b  warm_start  
 1062              	    
 1063              	rt_error_msg:
 1064 0788 0A52756E 	  .asciz "\nRuntime error\n"
 1064      74696D65 
 1064      20657272 
 1064      6F720A00 
 1065              	
 1066              	err_msg:
 1067 0798 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1067      00000000 
 1067      0D000000 
 1067      1B000000 
 1067      34000000 
 1068 07b0 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1068      6F000000 
 1068      89000000 
 1068      9A000000 
 1068      AB000000 
 1069 07c4 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1069      EA000000 
 1069      FA000000 
 1069      0E010000 
ARM GAS  tinyBasic.s 			page 33


 1069      21010000 
 1070              	
 1071              	    .section .rodata.tb_error 
 1072              	
 1073 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1073      72792066 
 1073      756C6C0A 
 1073      00
 1074 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1074      61782065 
 1074      72726F72 
 1074      0A00
 1075 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1075      206F7065 
 1075      72617469 
 1075      6F6E206F 
 1075      76657266 
 1076 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1076      73696F6E 
 1076      20627920 
 1076      300A00
 1077 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1077      6C696420 
 1077      6C696E65 
 1077      206E756D 
 1077      6265722E 
 1078 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1078      74696D65 
 1078      206F6E6C 
 1078      79207573 
 1078      6167652E 
 1079 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1079      616E6420 
 1079      6C696E65 
 1079      206F6E6C 
 1079      79207573 
 1080 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1080      69636174 
 1080      65206E61 
 1080      6D652E0A 
 1080      00
 1081 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1081      206E6F74 
 1081      20666F75 
 1081      6E642E0A 
 1081      00
 1082 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1082      76616C75 
 1082      652E0A00 
 1083 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1083      20696E20 
 1083      65787465 
 1083      6E646564 
 1083      206D656D 
 1084 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1084      61746120 
 1084      666F756E 
ARM GAS  tinyBasic.s 			page 34


 1084      642E0A00 
 1085 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1085      726F6772 
 1085      616D2069 
 1085      6E205241 
 1085      4D210A00 
 1086 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1086      20737973 
 1086      74656D20 
 1086      66756C6C 
 1086      2E0A00
 1087 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1087      65722066 
 1087      756C6C0A 
 1087      00
 1088              	
 1089 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1089      2074696D 
 1089      65206572 
 1089      726F722C 
 1089      2000
 1090 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1090      70696C65 
 1090      20657272 
 1090      6F722C20 
 1090      00
 1091 0151 6C617374 	tk_id: .asciz "last token id: "
 1091      20746F6B 
 1091      656E2069 
 1091      643A2000 
 1092              	
 1093              	
 1094              	    .section  .text , "ax", %progbits 
 1095              	
 1096              	/*********************************
 1097              	   BASIC: BTGL adr, mask   
 1098              	   toggle bits [adr]=[adr]^mask  
 1099              	   input:
 1100              	     r0    adr 
 1101              	     r1    mask 
 1102              	    output;
 1103              	      none 
 1104              	    use:
 1105              	      T1   temp
 1106              	      T2   temp  
 1107              	*******************************/     
 1108              	    _FUNC BTGL 
 1109              	
 1110 07d8 7047     	    _RET 
 1111              	
 1112              	/***************************************
 1113              	   kword_cmp
 1114              	   compare keyword to dict entry
 1115              	  input:
 1116              	    r0  keyword 
 1117              	    r1  dict entry 
 1118              	    r2  character count 
ARM GAS  tinyBasic.s 			page 35


 1119              	  output:
 1120              	    r0  0 not same | -1 same 
 1121              	  use:
 1122              	    r6   result  
 1123              	    T1   char 1
 1124              	    T2   char 2
 1125              	**************************************/   
 1126 07da 00BF     	    _FUNC kword_cmp 
 1127 07dc 2DE94003 	    push {r6,T1,T2}
 1128 07e0 4FF0FF36 	    mov r6,#-1 
 1129 07e4 4AB1     	1:  cbz r2,9f       
 1130 07e6 10F8018B 	    ldrb T1,[r0],#1
 1131 07ea 11F8019B 	    ldrb T2,[r1],#1
 1132 07ee A2F10102 	    sub r2,#1
 1133 07f2 C845     	    cmp T1,T2
 1134 07f4 F6D0     	    beq 1b 
 1135 07f6 86EA0606 	    eor r6,r6  
 1136 07fa 3046     	9:  mov r0,r6
 1137 07fc BDE84003 	    pop {r6,T1,T2}
 1138 0800 7047     	    _RET 
 1139              	
 1140              	/***********************************************
 1141              	    search_dict 
 1142              	    search keyword in dictionary
 1143              	   input:
 1144              	  	 r0   keyword 
 1145              	     r1		dictionary first name field address  
 1146              	   output:
 1147              	     r0 		token attribute 
 1148              	     r1		  cmd_index if r0!=TK_NONE  
 1149              	   use:
 1150              	     r3   length keyword 
 1151              	     T1   keyword
 1152              	     T2   link  
 1153              	**********************************************/
 1154 0802 00BF     	  _FUNC search_dict
 1155 0804 2DE90C03 	  push {r2,r3,T1,T2}
 1156 0808 8046     	  mov T1,r0 
 1157 080a 00B5FFF7 	  _CALL strlen 
 1157      FEFF5DF8 
 1157      04EB
 1158 0814 0346     	  mov r3,r0  
 1159              	1:  
 1160 0816 8946     	   mov T2,r1  // keep for linking   
 1161 0818 0878     	   ldrb r0,[r1] 
 1162 081a 78B1     	   cbz r0,9f // null byte, end of dictionary
 1163 081c 4046     	   mov r0,T1
 1164 081e 1A46     	   mov r2,r3   
 1165 0820 00B5FFF7 	   _CALL kword_cmp  
 1165      DBFF5DF8 
 1165      04EB
 1166 082a 18B9     	   cbnz r0,2f 
 1167 082c 4946     	   mov r1,T2
 1168 082e 51F80C1C 	   ldr r1,[r1,#-12]
 1169 0832 F0E7     	   b 1b   
 1170              	2: // found
 1171 0834 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
ARM GAS  tinyBasic.s 			page 36


 1172 0838 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1173 083c BDE80C03 	9: pop {r2,r3,T1,T2}
 1174 0840 7047     	   _RET 
 1175              	
 1176              	/**************************
 1177              	    INTERPRETER 
 1178              	*************************/
 1179              	
 1180              	/*********************************
 1181              	   cold_start 
 1182              	   initialize BASIC interpreter 
 1183              	   never leave 
 1184              	   input:
 1185              	     none 
 1186              	   output:
 1187              	    none 
 1188              	*********************************/
 1189              	  .type cold_start, %function 
 1190              	  .global cold_start 
 1191              	cold_start: 
 1192 0842 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1192      C2F20004 
 1193 084a 1048     	    ldr r0,src_addr 
 1194 084c 1049     	    ldr r1,dest_addr
 1195 084e 0968     	    ldr r1,[r1] 
 1196 0850 0C44     	    add UPP,r1 // system variables base address   
 1197              	// clear RAM
 1198 0852 2046     	    mov r0,UPP  
 1199 0854 DFF84611 	    ldr r1,tib 
 1200 0858 82EA0202 	    eor r2,r2 
 1201 085c 40F8042B 	1:  str r2,[r0],#4 
 1202 0860 8842     	    cmp r0,r1 
 1203 0862 FBD4     	    bmi 1b 
 1204              	//copy initialized system variables to ram 
 1205 0864 0948     	    ldr r0,src_addr 
 1206 0866 2146     	    mov r1,UPP 
 1207 0868 DFF82820 	    ldr r2,sysvar_size
 1208 086c 00B5FFF7 	    _CALL cmove
 1208      FEFF5DF8 
 1208      04EB
 1209 0876 00B500F0 	    _CALL prt_version
 1209      0EF85DF8 
 1209      04EB
 1210 0880 00B500F0 	    _CALL clear_basic  
 1210      5DF85DF8 
 1210      04EB
 1211 088a 93E0     	    b warm_start    
 1212              	src_addr:
 1213 088c 00000000 	  .word uzero
 1214              	dest_addr:
 1215 0890 00000000 	  .word vectors_size
 1216 0894 CC000000 	sysvar_size: .word ulast-uzero 
 1217              	
 1218              	/************************************
 1219              	    print firmware version 
 1220              	    input: 
 1221              	      none 
ARM GAS  tinyBasic.s 			page 37


 1222              	    output:
 1223              	      none 
 1224              	    use:
 1225              	      r0 
 1226              	***********************************/
 1227              	    _FUNC prt_version 
 1228 0898 DFF8A805 	    ldr r0,=version_msg 
 1229 089c 00B5FFF7 	    _CALL uart_puts
 1229      FEFF5DF8 
 1229      04EB
 1230 08a6 9FF87800 	    ldrb r0,version 
 1231 08aa 4FEA1010 	    lsr r0,#4 
 1232 08ae 00F13000 	    add r0,#'0' 
 1233 08b2 3A28     	    cmp r0,#'9'+1 
 1234 08b4 01D4     	    bmi 1f 
 1235 08b6 00F10700 	    add r0,#7 
 1236              	  1:
 1237 08ba 00B5FFF7 	    _CALL uart_putc 
 1237      FEFF5DF8 
 1237      04EB
 1238 08c4 4FF02E00 	    mov r0,#'. 
 1239 08c8 00B5FFF7 	    _CALL uart_putc 
 1239      FEFF5DF8 
 1239      04EB
 1240 08d2 9FF84C00 	    ldrb r0,version 
 1241 08d6 00F00F00 	    and r0,#15 
 1242 08da 00F13000 	    add r0,'0' 
 1243 08de 3A28     	    cmp r0,#'9'+1 
 1244 08e0 01D4     	    bmi 1f 
 1245 08e2 00F10700 	    add r0,#7
 1246              	  1: 
 1247 08e6 00B5FFF7 	    _CALL uart_putc 
 1247      FEFF5DF8 
 1247      04EB
 1248 08f0 4FF00D00 	    mov r0,#CR 
 1249 08f4 00B5FFF7 	    _CALL uart_putc 
 1249      FEFF5DF8 
 1249      04EB
 1250 08fe 7047     	    _RET  
 1251              	version_msg:
 1252 0900 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1252      65207069 
 1252      6C6C2074 
 1252      696E7920 
 1252      42415349 
 1253              	version:
 1254 0920 10       	    .byte 0x10 
 1255 0921 0000BF   	    .p2align 2 
 1256              	
 1257              	
 1258              	/*****************************
 1259              	    clear_vars 
 1260              	    initialize variables to 0
 1261              	  input:
 1262              	    none 
 1263              	  output:
 1264              	    none 
ARM GAS  tinyBasic.s 			page 38


 1265              	  use:
 1266              	    r0,r1,r2 
 1267              	*****************************/
 1268              	    _FUNC clear_vars 
 1269 0924 07B4     	    push {r0,r1,r2}
 1270 0926 80EA0000 	    eor r0,r0 
 1271 092a 04F16001 	    add r1,UPP,#VARS
 1272 092e 4FF01A02 	    mov r2,#26
 1273 0932 41F8040B 	1:  str r0,[r1],#4 
 1274 0936 013A     	    subs r2,#1
 1275 0938 FBD1     	    bne 1b  
 1276 093a 07BC     	    pop {r0,r1,r2}
 1277 093c 7047     	    _RET 
 1278              	
 1279              	/*****************************
 1280              	   clear_basic 
 1281              	   reset BASIC system variables 
 1282              	   and clear variables 
 1283              	*****************************/
 1284 093e 00BF     	    _FUNC clear_basic
 1285 0940 80EA0000 	  	eor r0,r0
 1286 0944 2064     	    str r0,[UPP,#FLAGS] 
 1287 0946 6060     	    str r0,[UPP,#COUNT]
 1288 0948 2060     	    str r0,[UPP,#IN_SAVED]
 1289 094a A060     	    str r0,[UPP,#BASICPTR]
 1290 094c E060     	    str r0,[UPP,#DATAPTR]
 1291 094e 2061     	    str r0,[UPP,#DATA]
 1292 0950 6061     	    str r0,[UPP,#DATALEN]
 1293 0952 04F1CC00 	    add r0,UPP,#BASIC_START 
 1294 0956 00F11000 	    add r0,#16 
 1295 095a 6FF00F01 	    mvn r1,#15
 1296 095e 00EA0100 	    and r0,r1 
 1297 0962 2063     	    str r0,[UPP,#TXTBGN]
 1298 0964 6063     	    str r0,[UPP,#TXTEND]
 1299 0966 00B5FFF7 	    _CALL clear_vars 
 1299      DCFF5DF8 
 1299      04EB
 1300 0970 7047     	    _RET  
 1301              	
 1302              	/***********************************
 1303              	   warm_init 
 1304              	   initialize interpreter context 
 1305              	  input:
 1306              	    none
 1307              	  output:
 1308              	    none 
 1309              	  use:
 1310              	    r0 
 1311              	***********************************/
 1312              	warm_init:
 1313              	// reset data stack       
 1314 0972 DFF826C0 	    ldr DP,dstack 
 1315 0976 4FF0000A 	    mov IN,#0 // BASIC line index 
 1316 097a 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1317 097e 80EA0000 	    eor r0,r0 
 1318 0982 6060     	    str r0,[UPP,#COUNT]  
 1319 0984 2064     	    str r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 39


 1320 0986 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1321 0988 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1322 098c 6064     	    str r0,[UPP,#TAB_WIDTH]
 1323 098e 4FF00A00 	    mov r0,#10 // default base decimal 
 1324 0992 A061     	    str r0,[UPP,#BASE]
 1325 0994 7047     	    _RET  
 1326              	
 1327 0996 00000000 	mstack: .word _mstack 
 1328 099a 00000000 	dstack: .word _dstack 
 1329 099e 00000000 	tib: .word _tib 
 1330 09a2 00000000 	pad: .word _pad 
 1331 09a6 FCFFFFFF 	array: .word _pad - 4 
 1332 09aa 0A524541 	ready: .asciz "\nREADY" 
 1332      445900
 1333              	
 1334              	/**********************************
 1335              	    warm_start 
 1336              	    start BASIC interpreter doesn't  
 1337              	    reset variables and code space 
 1338              	  input:
 1339              	    none 
 1340              	  output:
 1341              	    none 
 1342              	**********************************/
 1343 09b1 0000BF   	    _FUNC warm_start 
 1344              	// initialise parameters stack
 1345 09b4 FFF7DDFF 	    bl warm_init
 1346              	// reset main stack 
 1347 09b8 5FF82600 	    ldr r0,mstack
 1348 09bc 8546     	    mov sp,r0 
 1349 09be DFF88804 	    ldr r0,=ready 
 1350 09c2 00B5FFF7 	    _CALL uart_puts 
 1350      FEFF5DF8 
 1350      04EB
 1351              	// fall in cmd_line 
 1352              	
 1353              	/**********************************
 1354              	   cmd_line 
 1355              	   shell command line 
 1356              	   input:
 1357              	      none 
 1358              	   output:
 1359              	      none 
 1360              	   use:
 1361              	
 1362              	***********************************/
 1363              	    _FUNC cmd_line 
 1364 09cc 4FF00D00 	    mov r0,#CR 
 1365 09d0 00B5FFF7 	    _CALL uart_putc 
 1365      FEFF5DF8 
 1365      04EB
 1366 09da 5FF83E00 	1:  ldr r0,tib
 1367 09de 4FF05001 	    mov r1,#TIB_SIZE 
 1368 09e2 00B5FFF7 	    _CALL readln 
 1368      FEFF5DF8 
 1368      04EB
 1369 09ec 0940     	    ands r1,r1 // empty line 
ARM GAS  tinyBasic.s 			page 40


 1370 09ee F4D0     	    beq 1b 
 1371 09f0 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1371      2FFC5DF8 
 1371      04EB
 1372 09fa EED0     	    beq 1b  // tokens stored in text area 
 1373              	// interpret tokenized line 
 1374              	interpreter:
 1375 09fc 00B500F0 	  _CALL next_token 
 1375      1DF85DF8 
 1375      04EB
 1376 0a06 0028     	  cmp r0,#TK_NONE 
 1377 0a08 F8D0     	  beq interpreter   
 1378 0a0a 0A28     	  cmp r0,#TK_CMD 
 1379 0a0c 03D1     	  bne 2f
 1380 0a0e 0846     	  mov r0,r1 
 1381 0a10 00F00EF8 	  bl execute  
 1382 0a14 F2E7     	  b interpreter   
 1383              	2: 
 1384 0a16 0428     	  cmp r0,#TK_VAR 
 1385 0a18 02D1     	  bne 3f 
 1386 0a1a 00F03BB9 	  b let_var 
 1387 0a1e EDE7     	  b interpreter 
 1388              	3: 
 1389 0a20 0528     	  cmp r0,#TK_ARRAY 
 1390 0a22 02D1     	  bne 4f
 1391 0a24 00F041B9 	  b let_array 
 1392 0a28 E8E7     	  b interpreter
 1393              	4: 
 1394 0a2a 0128     	  cmp r0,#TK_COLON
 1395 0a2c E6D0     	  beq interpreter
 1396 0a2e 43E6     	  b syntax_error
 1397              	
 1398              	/*****************************
 1399              	    execute 
 1400              	    execute a BASIC routine from 
 1401              	    its token value 
 1402              	  input:
 1403              	    r0  BASIC SUB|FUNC token  
 1404              	  output: 
 1405              	    depend on SUB|FUNc
 1406              	*****************************/
 1407              	    _FUNC execute 
 1408 0a30 DFF81814 	    ldr r1,=fn_table 
 1409 0a34 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1410 0a38 0047     	    bx r0 
 1411              	
 1412              	/*************************************
 1413              	  next_token 
 1414              	  extract next token from token list 
 1415              	  input:
 1416              	    none 
 1417              	  output:
 1418              	    r0    token attribute
 1419              	    r1    token value if there is one 
 1420              	  use:
 1421              	    T1    exit token type  
 1422              	****************************/
ARM GAS  tinyBasic.s 			page 41


 1423 0a3a 00BF     	    _FUNC next_token 
 1424 0a3c 4DF8048D 	    push {T1}
 1425 0a40 88EA0808 	    eor T1,T1 // TK_NONE 
 1426 0a44 6068     	    ldr r0,[UPP,#COUNT]
 1427 0a46 8245     	    cmp IN,r0 
 1428 0a48 0FD4     	    bmi 0f
 1429              	new_line:
 1430 0a4a BBF80010 	    ldrh r1,[BPTR] // line #
 1431 0a4e 01B9     	    cbnz r1, end_of_line  // command line
 1432 0a50 B0E7     	    b warm_start
 1433              	end_of_line:        
 1434 0a52 8344     	    add BPTR,r0 // next line 
 1435 0a54 606B     	    ldr r0,[UPP,#TXTEND]
 1436 0a56 8345     	    cmp BPTR,r0 
 1437 0a58 ACD5     	    bpl warm_start // end of program
 1438 0a5a 9BF80200 	    ldrb r0,[BPTR,#2]
 1439 0a5e 6060     	    str r0,[UPP,#COUNT] 
 1440 0a60 4FF0030A 	    mov IN,#3
 1441 0a64 4FF00100 	    mov r0,#TK_COLON 
 1442 0a68 2AE0     	    b 9f    
 1443              	0: 
 1444 0a6a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1445 0a6e C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1446 0a72 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1447 0a76 0AF1010A 	    add IN,#1  
 1448 0a7a 8046     	    mov T1,r0 
 1449 0a7c 00F03F00 	    and r0,#0x3f // limit mask 
 1450 0a80 F349     	    ldr r1,=tok_jmp 
 1451 0a82 D1E800F0 	    tbb [r1,r0]
 1452              	1: // pc reference point 
 1453 0a86 1BE0     	    b 9f 
 1454              	2: // .byte param
 1455 0a88 1BF80A10 	    ldrb r1,[BPTR,IN]
 1456 0a8c 0AF1010A 	    add IN,#1 
 1457 0a90 16E0     	    b 9f 
 1458              	3: // .hword param 
 1459 0a92 3BF80A10 	    ldrh r1,[BPTR,IN]
 1460 0a96 0AF1020A 	    add IN,#2 
 1461 0a9a 11E0     	    b 9f 
 1462              	4: // .word param  
 1463 0a9c 5BF80A10 	    ldr r1,[BPTR,IN]
 1464 0aa0 0AF1040A 	    add IN,#4
 1465 0aa4 0CE0     	    b 9f 
 1466              	5: // .asciz param 
 1467 0aa6 0BEB0A01 	    add r1,BPTR,IN 
 1468 0aaa 0846     	    mov r0,r1  
 1469 0aac 00B5FFF7 	    _CALL strlen 
 1469      FEFF5DF8 
 1469      04EB
 1470 0ab6 8244     	    add IN,r0
 1471 0ab8 0AF1010A 	    add IN,#1
 1472 0abc 00E0     	    b 9f  
 1473              	8: // syntax error 
 1474 0abe FBE5     	    b syntax_error 
 1475 0ac0 4046     	9:  mov r0,T1  
 1476 0ac2 5DF8048B 	    pop {T1}
 1477 0ac6 7047     	    _RET
ARM GAS  tinyBasic.s 			page 42


 1478              	
 1479              	  .p2align 2
 1480              	tok_jmp: // token id  tbb offset 
 1481 0ac8 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1482 0aca 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1483 0ace 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1484 0ad2 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1485 0ad6 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1486 0ada 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1486      1C
 1487 0adf 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1487      1C1C
 1488 0ae5 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1489 0ae8 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1490 0aeb 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1490      1C1C1C1C 
 1491 0af3 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1491      1C1C
 1492 0af9 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1492      1D1D
 1493 0aff 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1493      1C1C1C1C 
 1493      1C
 1494              	
 1495              	  .p2align 2 
 1496              	
 1497              	/*********************************
 1498              	    expect 
 1499              	    check if next token is of 
 1500              	    expected type. If not 
 1501              	    call syntax_error  
 1502              	  input:
 1503              	      r0   token attribute
 1504              	  output:
 1505              	      r0  token attribute 
 1506              	      r1  token value
 1507              	  use:
 1508              	      T1   
 1509              	**********************************/
 1510              	    _FUNC expect 
 1511 0b08 4DF8048D 	    push {T1}
 1512 0b0c 8046     	    mov T1,r0 
 1513 0b0e 00B5FFF7 	    _CALL next_token 
 1513      94FF5DF8 
 1513      04EB
 1514 0b18 4045     	    cmp r0,T1  
 1515 0b1a 7FF4CDAD 	    bne syntax_error 
 1516 0b1e 5DF8048B 	    pop {T1}
 1517 0b22 7047     	    _RET 
 1518              	
 1519              	/***********************************
 1520              	    func_args 
 1521              	    get function arguments list 
 1522              	  input:
 1523              	    none 
 1524              	  output:
 1525              	    r0    arg. count 
ARM GAS  tinyBasic.s 			page 43


 1526              	  use:
 1527              	
 1528              	************************************/
 1529              	    _FUNC func_args 
 1530 0b24 4FF00600 	    mov r0,#TK_LPAREN 
 1531 0b28 00B5FFF7 	    _CALL expect 
 1531      EDFF5DF8 
 1531      04EB
 1532 0b32 00B500F0 	    _CALL arg_list 
 1532      0CF85DF8 
 1532      04EB
 1533 0b3c 01B4     	    push {r0}
 1534 0b3e 4FF00700 	    mov r0,#TK_RPAREN 
 1535 0b42 00B5FFF7 	    _CALL expect 
 1535      E0FF5DF8 
 1535      04EB
 1536 0b4c 01BC     	    pop {r0}
 1537 0b4e 7047     	    _RET 
 1538              	
 1539              	/**********************************
 1540              	    arg_list 
 1541              	    get arguments list on dstack 
 1542              	  input:
 1543              	    none 
 1544              	  output:
 1545              	    r0    arg count
 1546              	  use:
 1547              	    T1    tmp count  
 1548              	***********************************/
 1549              	    _FUNC arg_list 
 1550 0b50 4DF8048D 	    push {T1}
 1551 0b54 88EA0808 	    eor T1,T1 
 1552 0b58 00B500F0 	1:  _CALL expression 
 1552      CBF85DF8 
 1552      04EB
 1553 0b62 0028     	    cmp R0,#TK_NONE 
 1554 0b64 10D0     	    beq 9f 
 1555 0b66 0E28     	    cmp r0,#TK_INTGR
 1556 0b68 0ED1     	    bne 9f 
 1557 0b6a 4CF8041D 	    _PUSH r1 
 1558 0b6e 08F10108 	    add T1,#1 
 1559 0b72 00B5FFF7 	    _CALL next_token 
 1559      62FF5DF8 
 1559      04EB
 1560 0b7c 0828     	    cmp r0,#TK_COMMA 
 1561 0b7e EBD0     	    beq 1b 
 1562 0b80 D4F800A0 	    _UNGET_TOKEN 
 1562      D4F808B0 
 1563 0b88 4046     	9:  mov r0,T1 
 1564 0b8a 5DF8048B 	    pop {T1}
 1565 0b8e 7047     	    _RET 
 1566              	
 1567              	/***********************************
 1568              	 factor
 1569              	 arithmetick factor parser 
 1570              	 factor ::= ['+'|'-'|e]  var | @ |
 1571              				 integer | function |
ARM GAS  tinyBasic.s 			page 44


 1572              				 '('expression')' 
 1573              	  input: 
 1574              	    none 
 1575              	  output:
 1576              	    r0   token attribute 
 1577              	    r1   token value 
 1578              	  use:
 1579              	    r2   temp 
 1580              	    T1   sign 
 1581              	    T2   exit token attribute 
 1582              	***********************************/
 1583              	    _FUNC factor 
 1584 0b90 2DE90403 	    push {r2,T1,T2}
 1585 0b94 4FF00E09 	    mov T2,#TK_INTGR 
 1586 0b98 4FF00108 	    mov T1,#1 // default sign +  
 1587 0b9c 00B5FFF7 	    _CALL next_token
 1587      4DFF5DF8 
 1587      04EB
 1588 0ba6 0246     	    mov r2,r0 
 1589 0ba8 00F03000 	    and r0,#TK_GRP_MASK 
 1590 0bac 1028     	    cmp r0,#TK_GRP_ADD
 1591 0bae 1046     	    mov r0,r2
 1592 0bb0 08D1     	    bne 1f 
 1593 0bb2 1028     	    cmp r0,#TK_PLUS 
 1594 0bb4 01D0     	    beq 0f 
 1595 0bb6 4FF0FF38 	    mov T1,#-1 // minus sign 
 1596 0bba 00B5FFF7 	0:  _CALL next_token
 1596      3EFF5DF8 
 1596      04EB
 1597 0bc4 0E28     	1:  cmp r0,#TK_INTGR 
 1598 0bc6 50D0     	    beq 8f 
 1599 0bc8 0528     	    cmp r0,#TK_ARRAY 
 1600 0bca 1ED1     	    bne 2f 
 1601 0bcc 4FF00600 	    mov r0,#TK_LPAREN 
 1602 0bd0 00B5FFF7 	    _CALL expect 
 1602      99FF5DF8 
 1602      04EB
 1603 0bda 00B500F0 	    _CALL expression
 1603      8AF85DF8 
 1603      04EB
 1604 0be4 0E28     	    cmp r0,#TK_INTGR
 1605 0be6 7FF467AD 	    bne syntax_error
 1606 0bea 8146     	    mov T2,r0
 1607 0bec 0A46     	    mov r2,r1  
 1608 0bee 4FF00700 	    mov r0,#TK_RPAREN
 1609 0bf2 00B5FFF7 	    _CALL expect 
 1609      88FF5DF8 
 1609      04EB
 1610 0bfc 1046     	    mov r0,r2 
 1611 0bfe 00B500F0 	    _CALL get_array_element 
 1611      EEF85DF8 
 1611      04EB
 1612 0c08 2FE0     	    b 8f
 1613 0c0a 0628     	2:  cmp r0,#TK_LPAREN 
 1614 0c0c 12D1     	    bne 3f 
 1615 0c0e 00B500F0 	    _CALL expression 
 1615      70F85DF8 
ARM GAS  tinyBasic.s 			page 45


 1615      04EB
 1616 0c18 0E28     	    cmp r0,#TK_INTGR 
 1617 0c1a 7FF44DAD 	    bne syntax_error
 1618 0c1e 8146     	    mov T2,r0
 1619 0c20 0A46     	    mov r2,r1   
 1620 0c22 4FF00700 	    mov r0,#TK_RPAREN
 1621 0c26 00B5FFF7 	    _CALL expect 
 1621      6EFF5DF8 
 1621      04EB
 1622 0c30 1146     	    mov r1,r2 
 1623 0c32 1AE0     	    b 8f       
 1624 0c34 0428     	3:  cmp r0,#TK_VAR 
 1625 0c36 06D1     	    bne 4f
 1626 0c38 0846     	    mov r0,r1  
 1627 0c3a 00B500F0 	    _CALL get_var 
 1627      E4F85DF8 
 1627      04EB
 1628 0c44 11E0     	    b 8f 
 1629 0c46 0B28     	4:  cmp r0,#TK_IFUNC 
 1630 0c48 01D0     	    beq 5f 
 1631 0c4a 0C28     	    cmp r0,#TK_CFUNC 
 1632 0c4c 06D1     	    bne 6f 
 1633 0c4e 0846     	5:  mov r0,r1  
 1634 0c50 00B5FFF7 	    _CALL execute
 1634      EDFE5DF8 
 1634      04EB
 1635 0c5a 06E0     	    b 8f 
 1636 0c5c D4F800A0 	6:  _UNGET_TOKEN      
 1636      D4F808B0 
 1637 0c64 4FF00000 	    mov r0,#TK_NONE
 1638 0c68 03E0     	    b 9f  
 1639 0c6a 08FB01F1 	8:  mul r1,T1 
 1640 0c6e 5FEA0900 	    movs r0,T2 
 1641 0c72 BDE80403 	9:  pop {r2,T1,T2}   
 1642 0c76 7047     	    _RET 
 1643              	
 1644              	
 1645              	/*****************************************
 1646              	    term 
 1647              	    term parser 
 1648              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1649              	    output:
 1650              	      r0  	token attribute 
 1651              	      r1		integer
 1652              	    use:
 1653              	      r2    first operand 
 1654              	      r3    temp 
 1655              	      T1    operator 
 1656              	      T2    exit token attribute 
 1657              	******************************************/
 1658              	     _FUNC term 
 1659 0c78 2DE90C03 	    push {r2,r3,T1,T2}
 1660 0c7c 4FF00009 	    mov T2,#TK_NONE 
 1661 0c80 00B5FFF7 	    _CALL factor
 1661      85FF5DF8 
 1661      04EB
 1662 0c8a 60B3     	    cbz r0, 9f  // no factor   
ARM GAS  tinyBasic.s 			page 46


 1663 0c8c 8146     	    mov T2,r0  // TK_INTGR 
 1664 0c8e 0A46     	    mov r2,r1 // first factor    
 1665 0c90 00B5FFF7 	0:  _CALL next_token
 1665      D3FE5DF8 
 1665      04EB
 1666 0c9a 0346     	    mov r3,r0   
 1667 0c9c 00F03000 	    and r0,#TK_GRP_MASK 
 1668 0ca0 2028     	    cmp r0,#TK_GRP_MULT
 1669 0ca2 04D0     	    beq 1f
 1670 0ca4 D4F800A0 	    _UNGET_TOKEN
 1670      D4F808B0 
 1671 0cac 1BE0     	    b 9f 
 1672 0cae 9846     	1:  mov T1,r3 
 1673 0cb0 00B5FFF7 	    _CALL factor  
 1673      6DFF5DF8 
 1673      04EB
 1674 0cba 3FF4FDAC 	    beq syntax_error 
 1675 0cbe B8F1200F 	    cmp T1,#TK_MULT
 1676 0cc2 02D1     	    bne 2f 
 1677              	// multiplication
 1678 0cc4 01FB02F2 	    mul r2,r1
 1679 0cc8 E2E7     	    b 0b  
 1680 0cca B8F1210F 	2:  cmp T1,#TK_DIV 
 1681 0cce 02D1     	    bne 3f
 1682              	// division
 1683 0cd0 92FBF1F2 	    sdiv r2,r2,r1
 1684 0cd4 DCE7     	    b 0b  
 1685              	3: // modulo
 1686 0cd6 1046     	    mov r0,r2 
 1687 0cd8 92FBF1F2 	    sdiv r2,r2,r1 
 1688 0cdc 01FB02F2 	    mul  r2,r1 
 1689 0ce0 A0EB0202 	    sub  r2,r0,r2
 1690 0ce4 D4E7     	    b 0b  
 1691 0ce6 1146     	9:  mov r1,r2 
 1692 0ce8 5FEA0900 	    movs r0,T2 
 1693 0cec BDE80C03 	    pop {r2,r3,T1,T2}
 1694 0cf0 7047     	    _RET 
 1695              	
 1696              	/*****************************************
 1697              	    expression 
 1698              	    arithmetic expression parser 
 1699              	    expression ::= term [['+'|'-'] term]*
 1700              	    result range {-32768..32767}
 1701              	    output:
 1702              	      r0    TK_NONE || TK_INTGR 
 1703              	      r1 	  integer
 1704              	    use:
 1705              	      r2  left operand 
 1706              	      T1  operator 
 1707              	      T2  exit token attribute
 1708              	******************************************/
 1709 0cf2 00BF     	    _FUNC expression 
 1710 0cf4 2DE90403 	    push {r2,t1,t2}
 1711 0cf8 4FF00009 	    mov T2,#TK_NONE
 1712 0cfc 82EA0202 	    eor r2,r2 // zero 
 1713 0d00 00B5FFF7 	    _CALL term 
 1713      B9FF5DF8 
ARM GAS  tinyBasic.s 			page 47


 1713      04EB
 1714 0d0a 21D0     	    beq 9f  // no term  
 1715 0d0c 0A46     	    mov r2,r1 // first term
 1716 0d0e 4FF00E09 	    mov T2,#TK_INTGR    
 1717 0d12 00B5FFF7 	1:  _CALL next_token 
 1717      92FE5DF8 
 1717      04EB
 1718 0d1c 8046     	    mov T1,r0 // token attribute 
 1719 0d1e 00F03000 	    and r0,#TK_GRP_MASK 
 1720 0d22 1028     	    cmp r0,#TK_GRP_ADD 
 1721 0d24 04D0     	    beq 3f 
 1722 0d26 D4F800A0 	    _UNGET_TOKEN
 1722      D4F808B0 
 1723 0d2e 0FE0     	    b 9f  
 1724 0d30 00B5FFF7 	3:  _CALL term 
 1724      A1FF5DF8 
 1724      04EB
 1725 0d3a 0E28     	    cmp r0,#TK_INTGR 
 1726 0d3c 7FF4BCAC 	    bne syntax_error 
 1727 0d40 B8F1100F 	    cmp T1,#TK_PLUS 
 1728 0d44 02D0     	    beq 4f 
 1729 0d46 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1730 0d4a E2E7     	    b 1b 
 1731 0d4c 0A44     	4:  add r2,r2,r1 // N1+N2
 1732 0d4e E0E7     	    b 1b
 1733 0d50 4846     	9:  mov r0,T2 
 1734 0d52 1146     	    mov r1,r2 
 1735 0d54 BDE80403 	    pop {r2,t1,t2}
 1736 0d58 7047     	    _RET 
 1737              	
 1738              	
 1739              	/**********************************************
 1740              	    relation parser 
 1741              	    rel ::= expr1 rel_op expr2
 1742              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1743              	    relation return  integer , zero is false 
 1744              	    output:
 1745              	        r0	TK_INTGR  
 1746              	        r1	integer 
 1747              	    use:
 1748              	        r2   first operand 
 1749              	        T1   relop   
 1750              	**********************************************/
 1751 0d5a 00BF     	    _FUNC relation 
 1752 0d5c 2DE90401 	    push {r2,T1}
 1753 0d60 00B5FFF7 	    _CALL expression 
 1753      C7FF5DF8 
 1753      04EB
 1754 0d6a 0E28     	    cmp r0,#TK_INTGR 
 1755 0d6c 7FF4A4AC 	    bne syntax_error 
 1756 0d70 0A46     	    mov r2,r1  // first operand  
 1757 0d72 00B5FFF7 	    _CALL next_token 
 1757      62FE5DF8 
 1757      04EB
 1758 0d7c 8046     	    mov T1,r0  // relop  
 1759 0d7e 00F03000 	    and r0,#TK_GRP_MASK 
 1760 0d82 3028     	    cmp r0,#TK_GRP_RELOP 
ARM GAS  tinyBasic.s 			page 48


 1761 0d84 1DD1     	    bne 8f  // single operand 
 1762 0d86 00B5FFF7 	    _CALL expression 
 1762      B4FF5DF8 
 1762      04EB
 1763 0d90 0E28     	    cmp r0,#TK_INTGR 
 1764 0d92 7FF491AC 	    bne syntax_error 
 1765 0d96 8A42     	    cmp r2,r1 // compare operands  
 1766 0d98 4FF0FF31 	    mov r1,#-1 
 1767 0d9c 2D4A     	    ldr r2,=relop_jmp
 1768 0d9e 08F00708 	    and T1,#7 // {1..6}
 1769 0da2 D2E808F0 	    tbb [r2,T1]    
 1770              	rel_idx0:
 1771              	rel_eq:
 1772 0da6 11D0     	    beq 9f 
 1773 0da8 08E0     	    b rel_false
 1774              	rel_lt: 
 1775 0daa 0FDB     	    blt 9f   
 1776 0dac 06E0     	    b rel_false 
 1777              	rel_le:
 1778 0dae 0DDD     	    ble 9f  
 1779 0db0 04E0     	    b rel_false 
 1780              	rel_gt:
 1781 0db2 0BDC     	    bgt 9f  
 1782 0db4 02E0     	    b rel_false  
 1783              	rel_ge:
 1784 0db6 09DA     	    bge 9f  
 1785 0db8 00E0     	    b rel_false  
 1786              	rel_diff:
 1787 0dba 07D1     	    bne 9f 
 1788              	rel_false:    
 1789 0dbc 81EA0101 	    eor r1,r1  // false
 1790 0dc0 04E0     	    b 9f  
 1791 0dc2 D4F800A0 	8:  _UNGET_TOKEN 
 1791      D4F808B0 
 1792 0dca 1146     	    mov r1,r2    
 1793 0dcc 4FF00E00 	9:  mov r0,#TK_INTGR
 1794 0dd0 BDE80401 	    pop {r2,T1}
 1795 0dd4 7047     	    _RET 
 1796              	
 1797              	
 1798              	relop_jmp: 
 1799 0dd6 00       	  .byte 0 
 1800 0dd7 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1801 0dd8 00       	  .byte 0 // =
 1802 0dd9 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1803 0dda 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1804 0ddb 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1805 0ddc 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1806              	
 1807              	
 1808              	/***********************************
 1809              	    get_array_element
 1810              	    return value of @(n)
 1811              	  input:
 1812              	    r0    indice 
 1813              	  output:
 1814              	    r0   TK_INTGR
ARM GAS  tinyBasic.s 			page 49


 1815              	    r1   value  
 1816              	************************************/
 1817 0ddd 0000BF   	    _FUNC get_array_element 
 1818 0de0 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1819 0de4 4FEA8000 	    lsl r0,#2 
 1820 0de8 C0EB0100 	    rsb r0,r1 
 1821 0dec 0168     	    ldr r1,[r0]
 1822 0dee 4FF00E00 	    mov r0,#TK_INTGR 
 1823 0df2 7047     	    _RET 
 1824              	
 1825              	
 1826              	/***********************************
 1827              	    set_array_element 
 1828              	    set value of array element 
 1829              	  input:
 1830              	    r0   index 
 1831              	    r1   new value 
 1832              	  output:
 1833              	    none
 1834              	  use:
 1835              	    r2    array pointer 
 1836              	**********************************/
 1837              	    _FUNC set_array_element 
 1838 0df4 04B4     	    push {r2}
 1839 0df6 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1840 0dfa 4FEA8000 	    lsl r0,#2 
 1841 0dfe A1EB0001 	    sub r1,r0 
 1842 0e02 0960     	    str r1,[r1]
 1843 0e04 04BC     	    pop {r2}
 1844 0e06 7047     	    _RET 
 1845              	
 1846              	/***********************************
 1847              	   get_var 
 1848              	   get variable value 
 1849              	  input:
 1850              	     r0    variable index {0..25}
 1851              	  output:
 1852              	     r0    TK_INTGR
 1853              	     r1    value 
 1854              	**********************************/
 1855              	    _FUNC get_var 
 1856 0e08 04F16001 	    add r1,UPP,#VARS
 1857 0e0c 4FEA8000 	    lsl r0,#2 
 1858 0e10 0958     	    ldr r1,[r1,r0]
 1859 0e12 4FF00E00 	    mov r0,#TK_INTGR
 1860 0e16 7047     	    _RET 
 1861              	
 1862              	/*********************************
 1863              	    set_var 
 1864              	    set variable value 
 1865              	  input:
 1866              	     r0    variable index {0..25}
 1867              	     r1    new value 
 1868              	  output:
 1869              	    none 
 1870              	  use:
 1871              	    r2   vars pointer 
ARM GAS  tinyBasic.s 			page 50


 1872              	*********************************/
 1873              	    _FUNC set_var 
 1874 0e18 04B4     	    push {r2}
 1875 0e1a 226E     	    ldr r2,[UPP,#VARS]
 1876 0e1c 4FEA8000 	    lsl r0,#2
 1877 0e20 1150     	    str r1,[r2,r0]
 1878 0e22 04BC     	    pop {r2}
 1879 0e24 7047     	    _RET 
 1880              	
 1881              	/******************************
 1882              	    CONSTANTS data
 1883              	******************************/
 1884              	
 1885 0e26 0000     	  .section .rodata 
 1886              	
 1887              	// system variables initial value 
 1888              	uzero:
 1889 0000 00000000 	  .word 0 // IN_SAVED
 1890 0004 00000000 	  .word 0 // COUNT
 1891 0008 00000000 	  .word 0 // BASICPTR
 1892 000c 00000000 	  .word 0 // DATAPTR
 1893 0010 00000000 	  .word 0 // DATA
 1894 0014 00000000 	  .word 0 // DATALEN
 1895 0018 0A000000 	  .word 10 // BASE
 1896 001c 00000000 	  .word 0 // TICKS
 1897 0020 00000000 	  .word 0 // TIMER
 1898 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 1899 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 1900 002c 00000000 	  .word 0 // FFREE
 1901 0030 CC000000 	  .word ulast-uzero // TXTBGN
 1902 0034 CC000000 	  .word ulast-uzero // TXTEND
 1903 0038 00000000 	  .word 0 //LOOP_DEPTH
 1904 003c 00000000 	  .word 0 // ARRAY_SIZE
 1905 0040 00000000 	  .word 0 // FLAGS
 1906 0044 04000000 	  .word 4 // TAB_WIDTH
 1907 0048 00000000 	  .word 0 // RX_HEAD
 1908 004c 00000000 	  .word 0 // RX_TAIL
 1909 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1909      00000000 
 1909      00000000 
 1909      00000000 
 1910 0060 00000000 	  .space VARS_SIZE,0 // VARS
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1911 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 1912              	ulast:
 1913              	
 1914              	  .section .rodata.dictionary 
 1915              	
 1916              	// keep alphabetic order for BASIC names from Z-A
 1917              	// this sort order is for for WORDS cmd output. 	
 1918              	
 1919              		.equ link, 0
 1920              	kword_end:
 1921 0000 0C000000 	  _dict_entry TK_NONE,"",0 
ARM GAS  tinyBasic.s 			page 51


 1921      00000000 
 1921      00000000 
 1921      00000000 
 1922 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1922      64000000 
 1922      0A000000 
 1922      5854524D 
 1922      54000000 
 1923 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1923      65000000 
 1923      0A000000 
 1923      58524356 
 1923      00000000 
 1924 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1924      63000000 
 1924      0B000000 
 1924      584F5200 
 1925 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1925      62000000 
 1925      0A000000 
 1925      57524954 
 1925      45000000 
 1926 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1926      61000000 
 1926      0A000000 
 1926      574F5244 
 1926      53000000 
 1927 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1927      60000000 
 1927      0A000000 
 1927      57414954 
 1927      00000000 
 1928 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1928      5F000000 
 1928      0B000000 
 1928      55535200 
 1929 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1929      5E000000 
 1929      0A000000 
 1929      554E5449 
 1929      4C000000 
 1930 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1930      5D000000 
 1930      0B000000 
 1930      55464C41 
 1930      53480000 
 1931 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1931      5C000000 
 1931      0B000000 
 1931      55424F55 
 1931      4E440000 
 1932 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1932      5B000000 
 1932      0A000000 
 1932      544F4E45 
 1932      00000000 
 1933 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
ARM GAS  tinyBasic.s 			page 52


 1933      5A000000 
 1933      0A000000 
 1933      544F0000 
 1934 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1934      58000000 
 1934      0A000000 
 1934      54494D45 
 1934      52000000 
 1935 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1935      59000000 
 1935      0B000000 
 1935      54494D45 
 1935      4F555400 
 1936 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1936      57000000 
 1936      0B000000 
 1936      5449434B 
 1936      53000000 
 1937 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1937      56000000 
 1937      0A000000 
 1937      53544F50 
 1937      00000000 
 1938 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1938      55000000 
 1938      0A000000 
 1938      53544550 
 1938      00000000 
 1939 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1939      54000000 
 1939      0A000000 
 1939      53504957 
 1939      52000000 
 1940 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1940      53000000 
 1940      0A000000 
 1940      53504953 
 1940      454C0000 
 1941 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1941      51000000 
 1941      0B000000 
 1941      53504952 
 1941      44000000 
 1942 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1942      52000000 
 1942      0A000000 
 1942      53504945 
 1942      4E000000 
 1943 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1943      50000000 
 1943      0A000000 
 1943      534C4545 
 1943      50000000 
 1944 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1944      4F000000 
 1944      0B000000 
 1944      53495A45 
ARM GAS  tinyBasic.s 			page 53


 1944      00000000 
 1945 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1945      4E000000 
 1945      0A000000 
 1945      53484F57 
 1945      00000000 
 1946 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1946      4D000000 
 1946      0A000000 
 1946      53415645 
 1946      00000000 
 1947 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1947      4C000000 
 1947      0A000000 
 1947      52554E00 
 1948 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1948      4B000000 
 1948      0B000000 
 1948      52534849 
 1948      46540000 
 1949 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1949      4A000000 
 1949      0B000000 
 1949      524E4400 
 1950 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1950      49000000 
 1950      0A000000 
 1950      52455455 
 1950      524E0000 
 1951 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1951      48000000 
 1951      0A000000 
 1951      52455354 
 1951      4F524500 
 1952 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1952      47000000 
 1952      0A000000 
 1952      52454D41 
 1952      524B0000 
 1953 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1953      46000000 
 1953      0A000000 
 1953      5245424F 
 1953      4F540000 
 1954 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1954      45000000 
 1954      0B000000 
 1954      52454144 
 1954      00000000 
 1955 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1955      44000000 
 1955      0B000000 
 1955      514B4559 
 1955      00000000 
 1956 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1956      43000000 
 1956      0B000000 
ARM GAS  tinyBasic.s 			page 54


 1956      50525449 
 1956      00000000 
 1957 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1957      42000000 
 1957      0B000000 
 1957      50525448 
 1957      00000000 
 1958 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1958      41000000 
 1958      0B000000 
 1958      50525447 
 1958      00000000 
 1959 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1959      40000000 
 1959      0B000000 
 1959      50525446 
 1959      00000000 
 1960 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1960      3F000000 
 1960      0B000000 
 1960      50525445 
 1960      00000000 
 1961 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1961      3E000000 
 1961      0B000000 
 1961      50525444 
 1961      00000000 
 1962 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1962      3D000000 
 1962      0B000000 
 1962      50525443 
 1962      00000000 
 1963 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1963      3C000000 
 1963      0B000000 
 1963      50525442 
 1963      00000000 
 1964 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 1964      3B000000 
 1964      0B000000 
 1964      50525441 
 1964      00000000 
 1965 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1965      3A000000 
 1965      0A000000 
 1965      5052494E 
 1965      54000000 
 1966 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1966      39000000 
 1966      0B000000 
 1966      504F5554 
 1966      00000000 
 1967 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1967      38000000 
 1967      0A000000 
 1967      504F4B45 
 1967      00000000 
ARM GAS  tinyBasic.s 			page 55


 1968 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1968      35000000 
 1968      0A000000 
 1968      504D4F44 
 1968      45000000 
 1969 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1969      37000000 
 1969      0B000000 
 1969      50494E50 
 1969      00000000 
 1970 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1970      36000000 
 1970      0B000000 
 1970      5045454B 
 1970      00000000 
 1971 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1971      34000000 
 1971      0A000000 
 1971      50415553 
 1971      45000000 
 1972 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1972      33000000 
 1972      0B000000 
 1972      50414400 
 1973 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1973      32000000 
 1973      0B000000 
 1973      4F520000 
 1974 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1974      31000000 
 1974      0B000000 
 1974      4F445200 
 1975 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1975      30000000 
 1975      0B000000 
 1975      4E4F5400 
 1976 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1976      2E000000 
 1976      0A000000 
 1976      4E455854 
 1976      00000000 
 1977 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1977      2F000000 
 1977      0A000000 
 1977      4E455700 
 1978 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1978      2D000000 
 1978      0B000000 
 1978      4D554C44 
 1978      49560000 
 1979 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1979      2C000000 
 1979      0B000000 
 1979      4C534849 
 1979      46540000 
 1980 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1980      2B000000 
ARM GAS  tinyBasic.s 			page 56


 1980      0B000000 
 1980      4C4F4700 
 1981 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1981      2A000000 
 1981      0A000000 
 1981      4C4F4144 
 1981      00000000 
 1982 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1982      29000000 
 1982      0A000000 
 1982      4C495354 
 1982      00000000 
 1983 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1983      28000000 
 1983      0A000000 
 1983      4C455400 
 1984 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1984      27000000 
 1984      0B000000 
 1984      4B455900 
 1985 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1985      26000000 
 1985      0A000000 
 1985      49574447 
 1985      52454600 
 1986 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1986      25000000 
 1986      0A000000 
 1986      49574447 
 1986      454E0000 
 1987 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1987      24000000 
 1987      0B000000 
 1987      494E5645 
 1987      52540000 
 1988 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1988      23000000 
 1988      0A000000 
 1988      494E5055 
 1988      54000000 
 1989 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1989      22000000 
 1989      0A000000 
 1989      49460000 
 1990 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1990      21000000 
 1990      0B000000 
 1990      49445200 
 1991 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1991      20000000 
 1991      0A000000 
 1991      48455800 
 1992 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1992      1F000000 
 1992      0B000000 
 1992      4750494F 
 1992      00000000 
ARM GAS  tinyBasic.s 			page 57


 1993 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1993      1E000000 
 1993      0A000000 
 1993      474F544F 
 1993      00000000 
 1994 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1994      1D000000 
 1994      0A000000 
 1994      474F5355 
 1994      42000000 
 1995 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1995      1C000000 
 1995      0A000000 
 1995      464F5247 
 1995      45540000 
 1996 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1996      1B000000 
 1996      0A000000 
 1996      464F5200 
 1997 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1997      1A000000 
 1997      0A000000 
 1997      46435055 
 1997      00000000 
 1998 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1998      18000000 
 1998      0A000000 
 1998      454E4400 
 1999 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1999      19000000 
 1999      0B000000 
 1999      45455052 
 1999      4F4D0000 
 2000 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2000      17000000 
 2000      0A000000 
 2000      44575249 
 2000      54450000 
 2001 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2001      66000000 
 2001      0A000000 
 2001      44554D50 
 2001      00000000 
 2002 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2002      16000000 
 2002      0B000000 
 2002      44524541 
 2002      44000000 
 2003 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2003      15000000 
 2003      0A000000 
 2003      444F0000 
 2004 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2004      14000000 
 2004      0A000000 
 2004      44495200 
 2005 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
ARM GAS  tinyBasic.s 			page 58


 2005      13000000 
 2005      0A000000 
 2005      44454300 
 2006 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2006      12000000 
 2006      0B000000 
 2006      44445200 
 2007 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2007      11000000 
 2007      0A000000 
 2007      44415441 
 2007      4C4E0000 
 2008 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2008      10000000 
 2008      0A000000 
 2008      44415441 
 2008      00000000 
 2009 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2009      0F000000 
 2009      0B000000 
 2009      43524C00 
 2010 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2010      0E000000 
 2010      0B000000 
 2010      43524800 
 2011 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2011      0D000000 
 2011      0C000000 
 2011      43484152 
 2011      00000000 
 2012 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2012      0C000000 
 2012      0A000000 
 2012      42594500 
 2013 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2013      0B000000 
 2013      0A000000 
 2013      42544F47 
 2013      4C000000 
 2014 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2014      0A000000 
 2014      0B000000 
 2014      42544553 
 2014      54000000 
 2015 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2015      09000000 
 2015      0A000000 
 2015      42534554 
 2015      00000000 
 2016 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2016      08000000 
 2016      0A000000 
 2016      42524553 
 2016      00000000 
 2017 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2017      07000000 
 2017      0B000000 
ARM GAS  tinyBasic.s 			page 59


 2017      42495400 
 2018 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2018      06000000 
 2018      0A000000 
 2018      41575500 
 2019 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2019      05000000 
 2019      0A000000 
 2019      4155544F 
 2019      52554E00 
 2020 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2020      04000000 
 2020      0B000000 
 2020      41534300 
 2021 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2021      03000000 
 2021      0B000000 
 2021      414E4400 
 2022 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2022      02000000 
 2022      0B000000 
 2022      41444352 
 2022      45414400 
 2023 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2023      01000000 
 2023      0A000000 
 2023      4144434F 
 2023      4E000000 
 2024              	first_link: 
 2025 0794 8C070000 	  .word LINK 
 2026 0798 00000000 	  .word ABS_IDX 
 2027 079c 0B000000 	  .word TK_IFUNC
 2028              	kword_dict: // first name field 
 2029              	  .equ LINK,. 
 2030 07a0 41425300 	  .asciz "ABS" 
 2031              	  .p2align 2 
 2032              	
 2033              	    .section .rodata.fn_tabld 
 2034              	
 2035              	//comands and fonctions address table 	
 2036              	fn_table:
 2037 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2038 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2038      00000000 
 2038      00000000 
 2038      00000000 
 2038      00000000 
 2039 003c 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 2039      00000000 
 2039      00000000 
 2039      00000000 
 2039      00000000 
 2040 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
ARM GAS  tinyBasic.s 			page 60


 2040      00000000 
 2040      00000000 
 2040      00000000 
 2040      00000000 
 2041 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2041      00000000 
 2041      00000000 
 2041      00000000 
 2041      00000000 
 2042 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2042      00000000 
 2042      00000000 
 2042      00000000 
 2042      00000000 
 2043 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2043      00000000 
 2043      00000000 
 2043      00000000 
 2043      00000000 
 2044 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2044      00000000 
 2044      00000000 
 2044      00000000 
 2044      00000000 
 2045 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 2045      00000000 
 2045      00000000 
 2045      00000000 
 2045      00000000 
 2046 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2046      00000000 
 2046      00000000 
 2046      00000000 
 2046      00000000 
 2047 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2047      00000000 
 2047      00000000 
 2047      00000000 
 2047      00000000 
 2048 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2048      00000000 
 2048      00000000 
 2048      00000000 
 2048      00000000 
 2049 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2049      00000000 
 2049      00000000 
 2049      00000000 
 2049      00000000 
 2050 019c 00000000 		.word 0 
 2051              	
 2052              	
 2053              	/**********************************
 2054              	    BASIC commands and functions 
 2055              	**********************************/
 2056              	
 2057              	    .section .text.basic , "ax", %progbits 
ARM GAS  tinyBasic.s 			page 61


 2058              	
 2059              	
 2060              	/*******************************
 2061              	  BASIC:  ABS expr 
 2062              	  input:
 2063              	    none 
 2064              	  output:
 2065              	    r0    token type 
 2066              	    r1    abs(expr)
 2067              	  use:
 2068              	    none 
 2069              	******************************/
 2070              	    _FUNC abs 
 2071 0000 00B5FFF7 	    _CALL arg_list
 2071      FEFF5DF8 
 2071      04EB
 2072 000a 0128     	    cmp r0,#1 
 2073 000c 01D0     	    beq 1f 
 2074 000e FFF7FEBF 	    b syntax_error 
 2075 0012 5CF8041B 	1:  _POP r1 
 2076 0016 11F0004F 	    tst r1,#(1<<31)
 2077 001a 01D0     	    beq 9f
 2078 001c C1F10001 	    rsb r1,#0 
 2079 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2080 0024 7047     	   _RET 
 2081              	
 2082 0026 00BF     	    _FUNC power_adc
 2083 0028 7047     	    _RET
 2084              	
 2085 002a 00BF     	    _FUNC analog_read
 2086 002c 7047     	    _RET
 2087              	
 2088 002e 00BF     	    _FUNC bit_and
 2089 0030 7047     	    _RET
 2090              	
 2091 0032 00BF     	    _FUNC ascii
 2092 0034 7047     	    _RET
 2093              	
 2094 0036 00BF     	    _FUNC autorun
 2095 0038 7047     	    _RET
 2096              	
 2097 003a 00BF     	    _FUNC awu
 2098 003c 7047     	    _RET
 2099              	
 2100 003e 00BF     	    _FUNC bitmask
 2101 0040 7047     	    _RET 
 2102              	
 2103              	  
 2104              	  /*********************************
 2105              	   BASIC: BRES adr, mask   
 2106              	   reset bits [adr]= [adr] & ~mask  
 2107              	   input:
 2108              	     none 
 2109              	    output;
 2110              	      none 
 2111              	    use:
 2112              	      T1   temp
ARM GAS  tinyBasic.s 			page 62


 2113              	      T2   temp 
 2114              	*******************************/     
 2115 0042 00BF     	  _FUNC bit_reset
 2116 0044 00B5FFF7 	    _CALL arg_list 
 2116      FEFF5DF8 
 2116      04EB
 2117 004e 0228     	    cmp r0,#2 
 2118 0050 01D0     	    beq 1f 
 2119 0052 FFF7FEBF 	    b syntax_error 
 2120 0056 5CF8041B 	1:  _POP r1 //mask 
 2121 005a 5CF8040B 	    _POP r0 //address 
 2122 005e D0F80090 	    ldr T2,[r0] 
 2123 0062 81F0FF31 	    eor r1,#-1 // ~mask 
 2124 0066 01EA0901 	    and r1,T2
 2125 006a 0160     	    str r1,[r0]
 2126 006c 7047     	    _RET  
 2127              	
 2128              	
 2129              	/*********************************
 2130              	   BASIC: BSET adr, mask   
 2131              	   reset bits [adr]= [adr] & ~mask  
 2132              	   input:
 2133              	      none 
 2134              	    output;
 2135              	      none 
 2136              	    use:
 2137              	      T1   temp
 2138              	      T2   temp  
 2139              	*******************************/     
 2140 006e 00BF     	    _FUNC bit_set
 2141 0070 00B5FFF7 	    _CALL arg_list 
 2141      FEFF5DF8 
 2141      04EB
 2142 007a 0228     	    cmp r0,#2 
 2143 007c 01D0     	    beq 1f 
 2144 007e FFF7FEBF 	    b syntax_error 
 2145 0082 5CF8041B 	1:  _POP r1 //mask 
 2146 0086 5CF8040B 	    _POP r0 //address 
 2147 008a D0F80090 	    ldr T2,[r0] 
 2148 008e 41EA0901 	    orr r1,T2
 2149 0092 0160     	    str r1,[r0]
 2150 0094 7047     	    _RET 
 2151              	
 2152              	  /*********************************
 2153              	   BASIC: BTOGL adr, mask   
 2154              	   reset bits [adr]= [adr] & ~mask  
 2155              	   input:
 2156              	     r0    adr 
 2157              	     r1    mask 
 2158              	    output;
 2159              	      none 
 2160              	    use:
 2161              	      T1   temp
 2162              	      T2   temp  
 2163              	*******************************/     
 2164 0096 00BF     	  _FUNC bit_toggle
 2165 0098 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 63


 2165      FEFF5DF8 
 2165      04EB
 2166 00a2 0228     	    cmp r0,#2 
 2167 00a4 01D0     	    beq 1f 
 2168 00a6 FFF7FEBF 	    b syntax_error 
 2169 00aa 5CF8041B 	1:  _POP r1 //mask 
 2170 00ae 5CF8040B 	    _POP r0 //address 
 2171 00b2 D0F80090 	    ldr T2,[r0] 
 2172 00b6 81EA0901 	    eor r1,T2
 2173 00ba 0160     	    str r1,[r0]
 2174 00bc 7047     	    _RET  
 2175              	
 2176 00be 00BF     	    _FUNC bit_test
 2177 00c0 7047     	    _RET 
 2178              	
 2179 00c2 00BF     	    _FUNC bye
 2180 00c4 7047     	    _RET 
 2181              	
 2182 00c6 00BF     	    _FUNC char
 2183 00c8 7047     	    _RET 
 2184              	
 2185 00ca 00BF     	    _FUNC const_cr2
 2186 00cc 7047     	    _RET  
 2187              	
 2188 00ce 00BF     	    _FUNC const_cr1
 2189 00d0 7047     	    _RET 
 2190              	
 2191 00d2 00BF     	    _FUNC data
 2192 00d4 7047     	    _RET 
 2193              	
 2194 00d6 00BF     	    _FUNC data_line
 2195 00d8 7047     	    _RET 
 2196              	
 2197 00da 00BF     	    _FUNC const_ddr
 2198 00dc 7047     	    _RET 
 2199              	
 2200 00de 00BF     	    _FUNC dec_base
 2201 00e0 7047     	    _RET 
 2202              	
 2203 00e2 00BF     	    _FUNC directory
 2204 00e4 7047     	    _RET 
 2205              	
 2206 00e6 00BF     	    _FUNC do_loop
 2207 00e8 7047     	    _RET 
 2208              	
 2209 00ea 00BF     	    _FUNC digital_read
 2210 00ec 7047     	    _RET 
 2211              	
 2212 00ee 00BF     	    _FUNC digital_write
 2213 00f0 7047     	    _RET  
 2214              	
 2215              	/*******************************
 2216              	  BASIC: END 
 2217              	  exit program 
 2218              	******************************/ 
 2219 00f2 00BF     	    _FUNC cmd_end
 2220 00f4 FFF7FEBF 	    b warm_start 
ARM GAS  tinyBasic.s 			page 64


 2221 00f8 7047     	    _RET 
 2222              	
 2223 00fa 00BF     	    _FUNC const_eeprom_base
 2224 00fc 7047     	    _RET 
 2225              	
 2226 00fe 00BF     	    _FUNC fcpu
 2227 0100 7047     	    _RET 
 2228              	
 2229 0102 00BF     	    _FUNC forget
 2230 0104 7047     	    _RET 
 2231              	
 2232              	/**************************************************
 2233              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2234              	  introdure FOR...NEXT loop 
 2235              	**************************************************/
 2236 0106 00BF     	    _FUNC for
 2237 0108 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2238 010c 4FF00107 	    mov INCR,#1
 2239 0110 00B5FFF7 	    _CALL next_token
 2239      FEFF5DF8 
 2239      04EB
 2240 011a 0428     	    cmp r0,#TK_VAR
 2241 011c 7FF4FEAF 	    bne syntax_error
 2242 0120 02B4     	    push {r1} 
 2243 0122 00B500F0 	    _CALL let_var 
 2243      A9F85DF8 
 2243      04EB
 2244 012c 20BC     	    pop {VADR}
 2245 012e 4FEA8505 	    lsl VADR,#2
 2246 0132 2544     	    add VADR,UPP 
 2247 0134 05F16005 	    add VADR,#VARS 
 2248 0138 7047     	    _RET 
 2249              	
 2250              	/***************************************
 2251              	  BASIC: TO expr 
 2252              	  set limit of FOR...NEXT loop 
 2253              	**************************************/
 2254 013a 00BF     	    _FUNC to
 2255 013c 00B5FFF7 	    _CALL expression 
 2255      FEFF5DF8 
 2255      04EB
 2256 0146 0E28     	    cmp r0,#TK_INTGR
 2257 0148 7FF4FEAF 	    bne syntax_error 
 2258 014c 0E46     	    mov LIMIT,r1
 2259              	    // save loop back parameters 
 2260 014e 6068     	    ldr r0,[UPP,#COUNT]
 2261 0150 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2262 0154 7047     	    _RET 
 2263              	
 2264              	/********************************************
 2265              	  BASIC: STEP expr 
 2266              	  set increment for FOR...NEXT loop 
 2267              	********************************************/
 2268 0156 00BF     	    _FUNC step
 2269 0158 00B5FFF7 	    _CALL expression 
 2269      FEFF5DF8 
 2269      04EB
ARM GAS  tinyBasic.s 			page 65


 2270 0162 0E28     	    cmp r0,#TK_INTGR
 2271 0164 7FF4FEAF 	    bne syntax_error 
 2272 0168 0F46     	    mov INCR,r1
 2273              	    // replace parameters left by TO
 2274 016a 6068     	    ldr r0,[UPP,#COUNT]
 2275 016c 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2276 0170 7047     	    _RET 
 2277              	
 2278              	/********************************************
 2279              	  BASIC: NEXT var 
 2280              	  incrment FOR...NEXT loop variable
 2281              	  exit if variable cross LIMIT 
 2282              	********************************************/
 2283 0172 00BF     	    _FUNC next
 2284 0174 00B5FFF7 	    _CALL next_token 
 2284      FEFF5DF8 
 2284      04EB
 2285 017e 0428     	    cmp r0,#TK_VAR 
 2286 0180 7FF4FEAF 	    bne syntax_error 
 2287 0184 4FEA8101 	    lsl r1,#2 
 2288 0188 2144     	    add r1,UPP 
 2289 018a 01F16001 	    add r1,#VARS 
 2290 018e A942     	    cmp r1,VADR
 2291 0190 7FF4FEAF 	    bne syntax_error 
 2292 0194 2868     	    ldr r0,[VADR]
 2293 0196 3844     	    add r0,INCR 
 2294 0198 2860     	    str r0,[VADR]
 2295 019a 002F     	    cmp INCR,#0
 2296 019c 02D4     	    bmi 2f
 2297 019e B042     	    cmp r0,LIMIT 
 2298 01a0 02DC     	    bgt 8f  
 2299 01a2 07E0     	    b 9f  
 2300 01a4 B042     	2:  cmp r0,LIMIT 
 2301 01a6 05DA     	    bge 9f  
 2302              	8: // exit for...next
 2303              	  //  drop branch parameters
 2304 01a8 4FF00C00 	    _DROP 3
 2304      8444
 2305              	  // restore outer loop parameters
 2306 01ae BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2307 01b2 7047     	    _RET 
 2308 01b4 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2309 01b8 6060     	    str r0,[UPP,#COUNT]
 2310 01ba 7047     	    _RET 
 2311              	
 2312              	/*********************************
 2313              	  BASIC: GOSUB expr 
 2314              	  call a subroutine at line# 
 2315              	*********************************/
 2316              	    _FUNC gosub
 2317 01bc 00B5FFF7 	    _CALL expression
 2317      FEFF5DF8 
 2317      04EB
 2318 01c6 0E28     	    cmp r0,#TK_INTGR 
 2319 01c8 7FF4FEAF 	    bne syntax_error 
 2320 01cc 0846     	    mov r0,r1 
 2321 01ce 00B5FFF7 	    _CALL search_lineno  
ARM GAS  tinyBasic.s 			page 66


 2321      FEFF5DF8 
 2321      04EB
 2322 01d8 19B1     	    cbz r1,1f 
 2323 01da 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2324 01de FFF7FEBF 	    b tb_error 
 2325 01e2 6168     	1:  ldr r1,[UPP,#COUNT]
 2326 01e4 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2327 01e8 8346     	    mov BPTR,r0 
 2328 01ea 4FF0030A 	    mov IN,#3 
 2329 01ee 9BF80200 	    ldrb r0,[BPTR,#2]
 2330 01f2 6060     	    str r0,[UPP,#COUNT]
 2331 01f4 7047     	    _RET 
 2332              	
 2333              	/**********************************
 2334              	  BASIC: RETURN 
 2335              	  leave a subroutine 
 2336              	*********************************/
 2337 01f6 00BF     	    _FUNC return 
 2338 01f8 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2339 01fc 6060     	    str r0,[UPP,#COUNT]
 2340 01fe 7047     	    _RET 
 2341              	
 2342              	/**********************************
 2343              	  BASIC: GOTO expr 
 2344              	  go to line # 
 2345              	  use:
 2346              	
 2347              	**********************************/
 2348              	    _FUNC goto
 2349 0200 00B5FFF7 	    _CALL expression 
 2349      FEFF5DF8 
 2349      04EB
 2350 020a 0E28     	    cmp r0,#TK_INTGR 
 2351 020c 7FF4FEAF 	    bne syntax_error 
 2352 0210 59B1     	    cbz r1,9f 
 2353 0212 0846     	1:  mov r0,r1 
 2354 0214 00B5FFF7 	    _CALL search_lineno 
 2354      FEFF5DF8 
 2354      04EB
 2355 021e 19B1     	    cbz r1,2f 
 2356 0220 4FF00500 	    mov r0,#ERR_NO_LINE 
 2357 0224 FFF7FEBF 	    b tb_error 
 2358 0228 8346     	2:  mov BPTR,r0 
 2359 022a 4FF0030A 	9:  mov IN,#3 
 2360 022e 7047     	    _RET 
 2361              	
 2362              	    _FUNC gpio
 2363 0230 7047     	    _RET  
 2364              	
 2365 0232 00BF     	    _FUNC hex_base
 2366 0234 7047     	    _RET 
 2367              	
 2368 0236 00BF     	    _FUNC const_idr
 2369 0238 7047     	    _RET 
 2370              	
 2371              	/**********************************************
 2372              	  BASIC: IF relation : statement
ARM GAS  tinyBasic.s 			page 67


 2373              	  execute statement only if relation is true
 2374              	*********************************************/
 2375 023a 00BF     	    _FUNC if
 2376 023c 00B5FFF7 	    _CALL relation 
 2376      FEFF5DF8 
 2376      04EB
 2377 0246 09B9     	    cbnz r1,9f 
 2378 0248 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2379 024c 7047     	9:  _RET 
 2380              	
 2381 024e 00BF     	    _FUNC input_var
 2382 0250 7047     	    _RET 
 2383              	
 2384 0252 00BF     	    _FUNC invert
 2385 0254 7047     	    _RET 
 2386              	
 2387 0256 00BF     	    _FUNC enable_iwdg
 2388 0258 7047     	    _RET 
 2389              	
 2390 025a 00BF     	    _FUNC refresh_iwdg
 2391 025c 7047     	    _RET 
 2392              	
 2393 025e 00BF     	    _FUNC key
 2394 0260 7047     	    _RET  
 2395              	
 2396              	/******************************
 2397              	  BASIC: [let] var=expr 
 2398              	         [let] @(expr)=expr
 2399              	  input:
 2400              	    none 
 2401              	  output:
 2402              	    none 
 2403              	  use:
 2404              	
 2405              	****************************/         
 2406 0262 00BF     	    _FUNC let
 2407 0264 00B5FFF7 	    _CALL next_token 
 2407      FEFF5DF8 
 2407      04EB
 2408 026e 0428     	    cmp r0,#TK_VAR
 2409 0270 03D0     	    beq let_var 
 2410 0272 0528     	    cmp r0,#TK_ARRAY 
 2411 0274 07D0     	    beq let_array 
 2412 0276 FFF7FEBF 	    b syntax_error 
 2413              	let_var:
 2414 027a 4FEA8101 	    lsl r1,#2
 2415 027e 04F16000 	    add r0,UPP,#VARS
 2416 0282 0844     	    add r0,r1
 2417 0284 1FE0     	    b 1f 
 2418              	let_array: 
 2419 0286 4FF00600 	    mov r0,#TK_LPAREN
 2420 028a 00B5FFF7 	    _CALL expect 
 2420      FEFF5DF8 
 2420      04EB
 2421 0294 00B5FFF7 	    _CALL expression
 2421      FEFF5DF8 
 2421      04EB
ARM GAS  tinyBasic.s 			page 68


 2422 029e 0E28     	    cmp r0,#TK_INTGR 
 2423 02a0 7FF4FEAF 	    bne syntax_error
 2424 02a4 4CF8041D 	    _PUSH r1 
 2425 02a8 4FF00700 	    mov r0,#TK_RPAREN
 2426 02ac 00B5FFF7 	    _CALL expect 
 2426      FEFF5DF8 
 2426      04EB
 2427 02b6 5CF8041B 	    _POP r1 
 2428 02ba D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2429 02be 4FEA8101 	    lsl r1,#2 
 2430 02c2 A0EB0100 	    sub r0,r1 
 2431 02c6 4CF8040D 	1:  _PUSH r0 
 2432 02ca 4FF03200 	    mov r0,#TK_EQUAL 
 2433 02ce 00B5FFF7 	    _CALL expect 
 2433      FEFF5DF8 
 2433      04EB
 2434 02d8 00B5FFF7 	    _CALL expression   
 2434      FEFF5DF8 
 2434      04EB
 2435 02e2 0E28     	    cmp r0,#TK_INTGR
 2436 02e4 7FF4FEAF 	    bne syntax_error   
 2437 02e8 5CF8040B 	2:  _POP r0 
 2438 02ec 0160     	    str r1,[r0]
 2439 02ee 7047     	    _RET  
 2440              	
 2441              	    _FUNC list
 2442 02f0 7047     	    _RET 
 2443              	
 2444 02f2 00BF     	    _FUNC load
 2445 02f4 7047     	    _RET 
 2446              	
 2447 02f6 00BF     	    _FUNC log2
 2448 02f8 7047     	    _RET 
 2449              	
 2450 02fa 00BF     	    _FUNC lshift
 2451 02fc 7047     	    _RET 
 2452              	
 2453 02fe 00BF     	    _FUNC muldiv
 2454 0300 7047     	    _RET 
 2455              	
 2456 0302 00BF     	    _FUNC new
 2457 0304 7047     	    _RET  
 2458              	
 2459              	/************************************
 2460              	  BASIC: NOT relation  
 2461              	  invert logical value or relation
 2462              	************************************/
 2463 0306 00BF     	      _FUNC func_not
 2464 0308 00B5FFF7 	      _CALL relation 
 2464      FEFF5DF8 
 2464      04EB
 2465 0312 11B1     	      cbz r1,8f 
 2466 0314 81EA0101 	      eor r1,r1
 2467 0318 01E0     	      b 9f 
 2468 031a 4FF0FF31 	  8:  mov r1,#-1
 2469 031e 7047     	  9:  _RET 
 2470              	
ARM GAS  tinyBasic.s 			page 69


 2471              	    _FUNC const_odr
 2472 0320 7047     	    _RET 
 2473              	
 2474 0322 00BF     	    _FUNC bit_or
 2475 0324 7047     	    _RET 
 2476              	
 2477 0326 00BF     	    _FUNC pad_ref
 2478 0328 7047     	    _RET 
 2479              	
 2480              	/***********************
 2481              	  BASIC: PAUSE expr 
 2482              	  suspend execution for 
 2483              	  expr milliseconds 
 2484              	************************/
 2485 032a 00BF     	    _FUNC pause
 2486 032c 00B5FFF7 	    _CALL expression 
 2486      FEFF5DF8 
 2486      04EB
 2487 0336 0E28     	    cmp r0,#TK_INTGR 
 2488 0338 7FF4FEAF 	    bne syntax_error 
 2489 033c E069     	    ldr r0,[UPP,#TICKS]
 2490 033e 0844     	    add r0,r1 
 2491 0340 E169     	1:  ldr r1,[UPP,#TICKS]
 2492 0342 8842     	    cmp r0,r1 
 2493 0344 FCD1     	    bne 1b     
 2494 0346 7047     	    _RET 
 2495              	
 2496              	    _FUNC pin_mode
 2497 0348 7047     	    _RET 
 2498              	
 2499 034a 00BF     	    _FUNC peek
 2500 034c 7047     	    _RET 
 2501              	
 2502 034e 00BF     	    _FUNC const_input
 2503 0350 7047     	    _RET  
 2504              	
 2505 0352 00BF     	    _FUNC poke
 2506 0354 7047     	    _RET 
 2507              	
 2508 0356 00BF     	    _FUNC const_output
 2509 0358 7047     	    _RET 
 2510              	
 2511              	/****************************
 2512              	  BASIC: PRINT|? arg_list 
 2513              	  print list of arguments 
 2514              	****************************/
 2515 035a 00BF     	    _FUNC print
 2516 035c 88EA0808 	    eor T1,T1 // no comma 
 2517 0360 00B5FFF7 	0:  _CALL expression
 2517      FEFF5DF8 
 2517      04EB
 2518 036a 0E28     	    cmp r0,#TK_INTGR
 2519 036c 07D1     	    bne 1f 
 2520 036e 0846     	    mov r0,r1
 2521 0370 A169     	    ldr r1,[UPP,#BASE]
 2522 0372 00B5FFF7 	    _CALL print_int
 2522      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 70


 2522      04EB
 2523 037c 2BE0     	    b 6f 
 2524 037e 00B5FFF7 	1:  _CALL next_token
 2524      FEFF5DF8 
 2524      04EB
 2525 0388 0128     	    cmp r0,#TK_COLON 
 2526 038a 04DC     	    bgt 2f
 2527 038c D4F800A0 	    _UNGET_TOKEN 
 2527      D4F808B0 
 2528 0394 2CE0     	    b print_exit
 2529 0396 88EA0808 	2:  eor T1, T1 
 2530 039a 0228     	    cmp r0,#TK_QSTR 
 2531 039c 06D1     	    bne 4f
 2532 039e 0846     	    mov r0,r1 
 2533 03a0 00B5FFF7 	    _CALL uart_puts  
 2533      FEFF5DF8 
 2533      04EB
 2534 03aa 14E0     	    b 6f 
 2535 03ac 0328     	4:  cmp r0,#TK_CHAR 
 2536 03ae 06D1     	    bne 5f 
 2537 03b0 0846     	    mov r0,r1 
 2538 03b2 00B5FFF7 	    _CALL uart_putc 
 2538      FEFF5DF8 
 2538      04EB
 2539 03bc 0BE0     	    b 6f 
 2540 03be 0928     	5:  cmp r0,#TK_SHARP
 2541 03c0 7FF4FEAF 	    bne syntax_error 
 2542 03c4 00B5FFF7 	    _CALL next_token 
 2542      FEFF5DF8 
 2542      04EB
 2543 03ce 0E28     	    cmp r0,#TK_INTGR 
 2544 03d0 7FF4FEAF 	    bne syntax_error 
 2545 03d4 6164     	    str r1,[UPP,#TAB_WIDTH]
 2546 03d6 00B5FFF7 	6:  _CALL next_token 
 2546      FEFF5DF8 
 2546      04EB
 2547 03e0 0828     	    cmp r0,#TK_COMMA 
 2548 03e2 02D1     	    bne 7f
 2549 03e4 4FF00108 	    mov T1,#1
 2550 03e8 BAE7     	    b 0b  
 2551 03ea 0228     	7:  cmp r0,#2 
 2552 03ec 7FF5FEAF 	    bpl syntax_error  
 2553              	print_exit:
 2554 03f0 18EA0808 	      ands T1,T1 
 2555 03f4 06D1     	      bne 9f
 2556 03f6 4FF00D00 	      mov r0,#CR 
 2557 03fa 00B5FFF7 	      _CALL uart_putc 
 2557      FEFF5DF8 
 2557      04EB
 2558 0404 7047     	  9:  _RET 
 2559              	
 2560 0406 00BF     	    _FUNC const_porta
 2561 0408 7047     	    _RET 
 2562              	
 2563 040a 00BF     	    _FUNC const_portb
 2564 040c 7047     	    _RET 
 2565              	
ARM GAS  tinyBasic.s 			page 71


 2566 040e 00BF     	    _FUNC const_portc
 2567 0410 7047     	    _RET 
 2568              	
 2569 0412 00BF     	    _FUNC const_portd
 2570 0414 7047     	    _RET 
 2571              	
 2572 0416 00BF     	    _FUNC const_porte
 2573 0418 7047     	    _RET  
 2574              	
 2575 041a 00BF     	    _FUNC const_portf
 2576 041c 7047     	    _RET 
 2577              	
 2578 041e 00BF     	    _FUNC const_portg
 2579 0420 7047     	    _RET 
 2580              	
 2581 0422 00BF     	    _FUNC const_porth
 2582 0424 7047     	    _RET 
 2583              	
 2584 0426 00BF     	    _FUNC const_porti
 2585 0428 7047     	    _RET 
 2586              	
 2587 042a 00BF     	    _FUNC qkey
 2588 042c 7047     	    _RET 
 2589              	
 2590 042e 00BF     	    _FUNC read
 2591 0430 7047     	    _RET 
 2592              	
 2593 0432 00BF     	    _FUNC remark
 2594 0434 7047     	    _RET  
 2595              	
 2596 0436 00BF     	    _FUNC restore
 2597 0438 7047     	    _RET 
 2598              	
 2599 043a 00BF     	    _FUNC  random
 2600 043c 7047     	    _RET 
 2601              	
 2602 043e 00BF     	    _FUNC rshift
 2603 0440 7047     	    _RET 
 2604              	
 2605              	/****************************
 2606              	  BASIC: RUN 
 2607              	  execute program in memory
 2608              	****************************/
 2609 0442 00BF     	    _FUNC run
 2610 0444 206C10F0 	    _CLO 
 2610      010F03D0 
 2610      4FF00700 
 2610      FFF7FEBF 
 2611 0454 206B     	    ldr r0,[UPP,#TXTBGN]
 2612 0456 616B     	    ldr r1,[UPP,#TXTEND]
 2613 0458 8842     	    cmp r0,r1
 2614 045a 08D0     	    beq 9f 
 2615 045c 8178     	    ldrb r1,[r0,#2]
 2616 045e 6160     	    str r1,[UPP,#COUNT]
 2617 0460 8346     	    mov BPTR,r0 
 2618 0462 4FF0030A 	    mov IN,#3 
 2619 0466 206C     	    ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 72


 2620 0468 40F00100 	    orr r0,#FRUN 
 2621 046c 2064     	    str r0,[UPP,#FLAGS]
 2622 046e 7047     	9:  _RET 
 2623              	
 2624              	    _FUNC save
 2625 0470 7047     	    _RET 
 2626              	
 2627 0472 00BF     	    _FUNC show
 2628 0474 7047     	    _RET 
 2629              	
 2630 0476 00BF     	    _FUNC size
 2631 0478 7047     	    _RET  
 2632              	
 2633 047a 00BF     	    _FUNC sleep
 2634 047c 7047     	    _RET 
 2635              	
 2636 047e 00BF     	    _FUNC spi_read
 2637 0480 7047     	    _RET 
 2638              	
 2639 0482 00BF     	    _FUNC spi_enable
 2640 0484 7047     	    _RET 
 2641              	
 2642 0486 00BF     	    _FUNC spi_select
 2643 0488 7047     	    _RET 
 2644              	
 2645 048a 00BF     	    _FUNC spi_write
 2646 048c 7047     	    _RET 
 2647              	
 2648 048e 00BF     	    _FUNC stop
 2649 0490 7047     	    _RET 
 2650              	
 2651              	/**************************
 2652              	  BASIC: TICKS 
 2653              	  return msec counter
 2654              	**************************/  
 2655 0492 00BF     	    _FUNC get_ticks
 2656 0494 E169     	    ldr r1,[UPP,#TICKS]
 2657 0496 4FF00E00 	    mov r0,#TK_INTGR
 2658 049a 7047     	    _RET  
 2659              	
 2660              	/*************************
 2661              	  BASIC: TIMER expr 
 2662              	  set countdown timer 
 2663              	************************/
 2664              	    _FUNC set_timer
 2665 049c 00B5FFF7 	    _CALL expression 
 2665      FEFF5DF8 
 2665      04EB
 2666 04a6 0E28     	    cmp r0,#TK_INTGR
 2667 04a8 7FF4FEAF 	    bne syntax_error 
 2668 04ac 2162     	    str r1,[UPP,#TIMER]
 2669 04ae 7047     	    _RET 
 2670              	
 2671              	/***************************
 2672              	  BASIC: TIMEOUT
 2673              	  check for timer expiration 
 2674              	  return -1 true || 0 false
ARM GAS  tinyBasic.s 			page 73


 2675              	****************************/
 2676              	    _FUNC timeout
 2677 04b0 81EA0101 	    eor r1,r1 
 2678 04b4 206A     	    ldr r0,[UPP,#TIMER]
 2679 04b6 08B9     	    cbnz r0,9f 
 2680 04b8 6FEA0101 	    mvn r1,r1 
 2681 04bc 4FF00E00 	9:  mov r0,#TK_INTGR    
 2682 04c0 7047     	    _RET 
 2683              	
 2684 04c2 00BF     	    _FUNC tone
 2685 04c4 7047     	    _RET 
 2686              	
 2687              	/***************************
 2688              	  BASIC: UBOUND 
 2689              	  return last indice of @
 2690              	  output:
 2691              	    r0  TK_INTGR 
 2692              	    r1  +int 
 2693              	**************************/
 2694 04c6 00BF     	    _FUNC ubound
 2695 04c8 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2696 04cc 606B     	    ldr r0,[UPP,#TXTEND]
 2697 04ce A1EB0001 	    sub r1,r0 
 2698 04d2 4FEA9101 	    lsr r1,#2
 2699 04d6 4FF00E00 	    mov r0,#TK_INTGR 
 2700 04da 7047     	    _RET 
 2701              	
 2702              	    _FUNC uflash
 2703 04dc 7047     	    _RET 
 2704              	
 2705 04de 00BF     	    _FUNC until
 2706 04e0 7047     	    _RET 
 2707              	
 2708 04e2 00BF     	    _FUNC usr
 2709 04e4 7047     	    _RET  
 2710              	
 2711 04e6 00BF     	    _FUNC wait
 2712 04e8 7047     	    _RET 
 2713              	
 2714              	/*********************************************
 2715              	  BASIC: WORDS 
 2716              	  print list of BASIC WORDS in dictionary 
 2717              	  use:
 2718              	    r0,r1,T1,T2  
 2719              	********************************************/
 2720 04ea 00BF     	    _FUNC words
 2721 04ec 206C10F0 	    _CLO 
 2721      010F03D0 
 2721      4FF00700 
 2721      FFF7FEBF 
 2722 04fc DFF80083 	    ldr T1,=kword_dict
 2723 0500 89EA0909 	    eor T2,T2 
 2724              	1:  
 2725 0504 4046     	    mov r0,T1
 2726 0506 00B5FFF7 	    _CALL strlen
 2726      FEFF5DF8 
 2726      04EB
ARM GAS  tinyBasic.s 			page 74


 2727 0510 F0B1     	    cbz r0,9f 
 2728 0512 8144     	    add T2,r0 
 2729 0514 B9F1500F 	    cmp T2,#80 
 2730 0518 08D4     	    bmi 2f
 2731 051a 89EA0909 	    eor T2,T2  
 2732 051e 4FF00D00 	    mov r0,#CR 
 2733 0522 00B5FFF7 	    _CALL uart_putc 
 2733      FEFF5DF8 
 2733      04EB
 2734 052c 4046     	2:  mov r0,T1 
 2735 052e 00B5FFF7 	    _CALL uart_puts 
 2735      FEFF5DF8 
 2735      04EB
 2736 0538 4FF02000 	    mov r0,#SPACE
 2737 053c 09F10109 	    add T2,#1  
 2738 0540 00B5FFF7 	    _CALL uart_putc 
 2738      FEFF5DF8 
 2738      04EB
 2739 054a 58F80C8C 	    ldr T1,[T1,#-12]
 2740 054e D9E7     	    b 1b 
 2741 0550 7047     	9:  _RET 
 2742              	
 2743 0552 00BF     	    _FUNC write
 2744 0554 7047     	    _RET 
 2745              	
 2746 0556 00BF     	    _FUNC bit_xor
 2747 0558 7047     	    _RET 
 2748              	
 2749 055a 00BF     	    _FUNC transmit
 2750 055c 7047     	    _RET 
 2751              	
 2752 055e 00BF     	    _FUNC receive
 2753 0560 7047     	    _RET  
 2754              	
 2755              	
 2756              	/*************************************************
 2757              	   extra FLASH memory not used by Tiny BASIC
 2758              	   is used to save BASIC programs.
 2759              	************************************************/
 2760 0562 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 2760      0080AFF3 
 2760      0080AFF3 
 2760      0080AFF3 
 2760      0080AFF3 
 2761              	  .section .fs
 2762              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 75


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 76


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 77


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 78


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 79


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 80


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 81


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:247    .text:0000000000000150 dump
         tinyBasic.s:1021   .text:00000000000006c0 tb_error
         tinyBasic.s:1549   .text:0000000000000b50 arg_list
         tinyBasic.s:1006   .text:00000000000006b8 syntax_error
         tinyBasic.s:280    .text:0000000000000190 search_lineno
         tinyBasic.s:311    .text:00000000000001b0 delete_line
         tinyBasic.s:336    .text:00000000000001dc create_gap
         tinyBasic.s:361    .text:0000000000000204 insert_line
         tinyBasic.s:400    .text:0000000000000254 compile
         tinyBasic.s:1330   .text:00000000000009a2 pad
         tinyBasic.s:638    .text:0000000000000470 parse_int
         tinyBasic.s:471    .text:00000000000002e8 comp_token
         tinyBasic.s:542    .text:00000000000003c4 store_r0
         tinyBasic.s:754    .text:0000000000000548 skip
         tinyBasic.s:773    .text:0000000000000560 upper
         tinyBasic.s:576    .text:0000000000000404 is_special
         tinyBasic.s:598    .text:0000000000000448 token_ofs
         tinyBasic.s:486    .text:0000000000000328 tok_idx0
         tinyBasic.s:545    .text:00000000000003ca try_number
         tinyBasic.s:490    .text:000000000000032a single
         tinyBasic.s:593    .text:0000000000000438 tok_single
         tinyBasic.s:494    .text:0000000000000332 lt
ARM GAS  tinyBasic.s 			page 82


         tinyBasic.s:500    .text:0000000000000340 gt
         tinyBasic.s:513    .text:0000000000000364 bkslash
         tinyBasic.s:559    .text:00000000000003fe token_exit
         tinyBasic.s:520    .text:000000000000037a prt_cmd
         tinyBasic.s:526    .text:000000000000038c quote
         tinyBasic.s:693    .text:00000000000004e0 parse_quote
         tinyBasic.s:531    .text:00000000000003a0 tick
         tinyBasic.s:925    .text:0000000000000614 parse_keyword
         tinyBasic.s:590    .text:0000000000000424 char_list
         tinyBasic.s:591    .text:0000000000000424 $d
         tinyBasic.s:599    .text:0000000000000448 $d
         tinyBasic.s:615    .text:000000000000046e $t
         tinyBasic.s:724    .text:0000000000000514 get_escaped_char
         tinyBasic.s:741    .text:000000000000053e escaped
         tinyBasic.s:741    .text:000000000000053e $d
         tinyBasic.s:754    .text:0000000000000546 $t
         tinyBasic.s:791    .text:0000000000000570 is_digit
         tinyBasic.s:815    .text:000000000000058c is_hex
         tinyBasic.s:840    .text:00000000000005b0 is_bit
         tinyBasic.s:861    .text:00000000000005cc is_alpha
         tinyBasic.s:882    .text:00000000000005e4 is_num
         tinyBasic.s:903    .text:00000000000005fc is_alnum
         tinyBasic.s:2028   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1154   .text:0000000000000804 search_dict
         tinyBasic.s:976    .text:0000000000000698 cmd_name
         tinyBasic.s:1046   .text:0000000000000730 compile_error
         tinyBasic.s:1025   .text:00000000000006c8 rt_error
         tinyBasic.s:1063   .text:0000000000000788 rt_error_msg
         tinyBasic.s:1066   .text:0000000000000798 err_msg
         tinyBasic.s:1423   .text:0000000000000a3c next_token
         tinyBasic.s:1343   .text:00000000000009b4 warm_start
         tinyBasic.s:1064   .text:0000000000000788 $d
         tinyBasic.s:1073   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1074   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1075   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1076   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1077   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1078   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1079   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1080   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1081   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1082   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1083   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1084   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1085   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1086   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1087   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1089   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1090   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1091   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1108   .text:00000000000007d8 $t
         tinyBasic.s:1108   .text:00000000000007d8 BTGL
         tinyBasic.s:1126   .text:00000000000007dc kword_cmp
         tinyBasic.s:1191   .text:0000000000000842 cold_start
         tinyBasic.s:1212   .text:000000000000088c src_addr
         tinyBasic.s:1214   .text:0000000000000890 dest_addr
         tinyBasic.s:1329   .text:000000000000099e tib
ARM GAS  tinyBasic.s 			page 83


         tinyBasic.s:1216   .text:0000000000000894 sysvar_size
         tinyBasic.s:1227   .text:0000000000000898 prt_version
         tinyBasic.s:1284   .text:0000000000000940 clear_basic
         tinyBasic.s:1213   .text:000000000000088c $d
         tinyBasic.s:1888   .rodata:0000000000000000 uzero
         tinyBasic.s:1912   .rodata:00000000000000cc ulast
         tinyBasic.s:1227   .text:0000000000000898 $t
         tinyBasic.s:1251   .text:0000000000000900 version_msg
         tinyBasic.s:1253   .text:0000000000000920 version
         tinyBasic.s:1252   .text:0000000000000900 $d
         tinyBasic.s:1268   .text:0000000000000924 clear_vars
         tinyBasic.s:1312   .text:0000000000000972 warm_init
         tinyBasic.s:1328   .text:000000000000099a dstack
         tinyBasic.s:1327   .text:0000000000000996 mstack
         tinyBasic.s:1327   .text:0000000000000996 $d
         tinyBasic.s:1331   .text:00000000000009a6 array
         tinyBasic.s:1332   .text:00000000000009aa ready
         tinyBasic.s:1363   .text:00000000000009cc cmd_line
         tinyBasic.s:1374   .text:00000000000009fc interpreter
         tinyBasic.s:1407   .text:0000000000000a30 execute
         tinyBasic.s:2413   .text.basic:000000000000027a let_var
         tinyBasic.s:2418   .text.basic:0000000000000286 let_array
         tinyBasic.s:2036   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1429   .text:0000000000000a4a new_line
         tinyBasic.s:1433   .text:0000000000000a52 end_of_line
         tinyBasic.s:1480   .text:0000000000000ac8 tok_jmp
         tinyBasic.s:1481   .text:0000000000000ac8 $d
         tinyBasic.s:1495   .text:0000000000000b08 $t
         tinyBasic.s:1510   .text:0000000000000b08 expect
         tinyBasic.s:1529   .text:0000000000000b24 func_args
         tinyBasic.s:1709   .text:0000000000000cf4 expression
         tinyBasic.s:1583   .text:0000000000000b90 factor
         tinyBasic.s:1817   .text:0000000000000de0 get_array_element
         tinyBasic.s:1855   .text:0000000000000e08 get_var
         tinyBasic.s:1658   .text:0000000000000c78 term
         tinyBasic.s:1751   .text:0000000000000d5c relation
         tinyBasic.s:1798   .text:0000000000000dd6 relop_jmp
         tinyBasic.s:1770   .text:0000000000000da6 rel_idx0
         tinyBasic.s:1771   .text:0000000000000da6 rel_eq
         tinyBasic.s:1788   .text:0000000000000dbc rel_false
         tinyBasic.s:1774   .text:0000000000000daa rel_lt
         tinyBasic.s:1777   .text:0000000000000dae rel_le
         tinyBasic.s:1780   .text:0000000000000db2 rel_gt
         tinyBasic.s:1783   .text:0000000000000db6 rel_ge
         tinyBasic.s:1786   .text:0000000000000dba rel_diff
         tinyBasic.s:1799   .text:0000000000000dd6 $d
         tinyBasic.s:1837   .text:0000000000000df4 set_array_element
         tinyBasic.s:1873   .text:0000000000000e18 set_var
         tinyBasic.s:2762   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1909   .rodata:0000000000000050 $d
         tinyBasic.s:1919   *ABS*:0000000000000000 link
         tinyBasic.s:1920   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2029   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:1921   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2024   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2070   .text.basic:0000000000000000 abs
         tinyBasic.s:2082   .text.basic:0000000000000028 power_adc
ARM GAS  tinyBasic.s 			page 84


         tinyBasic.s:2085   .text.basic:000000000000002c analog_read
         tinyBasic.s:2088   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2091   .text.basic:0000000000000034 ascii
         tinyBasic.s:2094   .text.basic:0000000000000038 autorun
         tinyBasic.s:2097   .text.basic:000000000000003c awu
         tinyBasic.s:2100   .text.basic:0000000000000040 bitmask
         tinyBasic.s:2115   .text.basic:0000000000000044 bit_reset
         tinyBasic.s:2140   .text.basic:0000000000000070 bit_set
         tinyBasic.s:2176   .text.basic:00000000000000c0 bit_test
         tinyBasic.s:2164   .text.basic:0000000000000098 bit_toggle
         tinyBasic.s:2179   .text.basic:00000000000000c4 bye
         tinyBasic.s:2182   .text.basic:00000000000000c8 char
         tinyBasic.s:2185   .text.basic:00000000000000cc const_cr2
         tinyBasic.s:2188   .text.basic:00000000000000d0 const_cr1
         tinyBasic.s:2191   .text.basic:00000000000000d4 data
         tinyBasic.s:2194   .text.basic:00000000000000d8 data_line
         tinyBasic.s:2197   .text.basic:00000000000000dc const_ddr
         tinyBasic.s:2200   .text.basic:00000000000000e0 dec_base
         tinyBasic.s:2203   .text.basic:00000000000000e4 directory
         tinyBasic.s:2206   .text.basic:00000000000000e8 do_loop
         tinyBasic.s:2209   .text.basic:00000000000000ec digital_read
         tinyBasic.s:2212   .text.basic:00000000000000f0 digital_write
         tinyBasic.s:2219   .text.basic:00000000000000f4 cmd_end
         tinyBasic.s:2223   .text.basic:00000000000000fc const_eeprom_base
         tinyBasic.s:2226   .text.basic:0000000000000100 fcpu
         tinyBasic.s:2236   .text.basic:0000000000000108 for
         tinyBasic.s:2229   .text.basic:0000000000000104 forget
         tinyBasic.s:2316   .text.basic:00000000000001bc gosub
         tinyBasic.s:2348   .text.basic:0000000000000200 goto
         tinyBasic.s:2362   .text.basic:0000000000000230 gpio
         tinyBasic.s:2365   .text.basic:0000000000000234 hex_base
         tinyBasic.s:2368   .text.basic:0000000000000238 const_idr
         tinyBasic.s:2375   .text.basic:000000000000023c if
         tinyBasic.s:2381   .text.basic:0000000000000250 input_var
         tinyBasic.s:2384   .text.basic:0000000000000254 invert
         tinyBasic.s:2387   .text.basic:0000000000000258 enable_iwdg
         tinyBasic.s:2390   .text.basic:000000000000025c refresh_iwdg
         tinyBasic.s:2393   .text.basic:0000000000000260 key
         tinyBasic.s:2406   .text.basic:0000000000000264 let
         tinyBasic.s:2441   .text.basic:00000000000002f0 list
         tinyBasic.s:2444   .text.basic:00000000000002f4 load
         tinyBasic.s:2447   .text.basic:00000000000002f8 log2
         tinyBasic.s:2450   .text.basic:00000000000002fc lshift
         tinyBasic.s:2453   .text.basic:0000000000000300 muldiv
         tinyBasic.s:2283   .text.basic:0000000000000174 next
         tinyBasic.s:2456   .text.basic:0000000000000304 new
         tinyBasic.s:2463   .text.basic:0000000000000308 func_not
         tinyBasic.s:2471   .text.basic:0000000000000320 const_odr
         tinyBasic.s:2474   .text.basic:0000000000000324 bit_or
         tinyBasic.s:2477   .text.basic:0000000000000328 pad_ref
         tinyBasic.s:2485   .text.basic:000000000000032c pause
         tinyBasic.s:2496   .text.basic:0000000000000348 pin_mode
         tinyBasic.s:2499   .text.basic:000000000000034c peek
         tinyBasic.s:2502   .text.basic:0000000000000350 const_input
         tinyBasic.s:2505   .text.basic:0000000000000354 poke
         tinyBasic.s:2508   .text.basic:0000000000000358 const_output
         tinyBasic.s:2515   .text.basic:000000000000035c print
ARM GAS  tinyBasic.s 			page 85


         tinyBasic.s:2560   .text.basic:0000000000000408 const_porta
         tinyBasic.s:2563   .text.basic:000000000000040c const_portb
         tinyBasic.s:2566   .text.basic:0000000000000410 const_portc
         tinyBasic.s:2569   .text.basic:0000000000000414 const_portd
         tinyBasic.s:2572   .text.basic:0000000000000418 const_porte
         tinyBasic.s:2575   .text.basic:000000000000041c const_portf
         tinyBasic.s:2578   .text.basic:0000000000000420 const_portg
         tinyBasic.s:2581   .text.basic:0000000000000424 const_porth
         tinyBasic.s:2584   .text.basic:0000000000000428 const_porti
         tinyBasic.s:2587   .text.basic:000000000000042c qkey
         tinyBasic.s:2590   .text.basic:0000000000000430 read
         tinyBasic.s:2593   .text.basic:0000000000000434 remark
         tinyBasic.s:2596   .text.basic:0000000000000438 restore
         tinyBasic.s:2337   .text.basic:00000000000001f8 return
         tinyBasic.s:2599   .text.basic:000000000000043c random
         tinyBasic.s:2602   .text.basic:0000000000000440 rshift
         tinyBasic.s:2609   .text.basic:0000000000000444 run
         tinyBasic.s:2624   .text.basic:0000000000000470 save
         tinyBasic.s:2627   .text.basic:0000000000000474 show
         tinyBasic.s:2630   .text.basic:0000000000000478 size
         tinyBasic.s:2633   .text.basic:000000000000047c sleep
         tinyBasic.s:2636   .text.basic:0000000000000480 spi_read
         tinyBasic.s:2639   .text.basic:0000000000000484 spi_enable
         tinyBasic.s:2642   .text.basic:0000000000000488 spi_select
         tinyBasic.s:2645   .text.basic:000000000000048c spi_write
         tinyBasic.s:2268   .text.basic:0000000000000158 step
         tinyBasic.s:2648   .text.basic:0000000000000490 stop
         tinyBasic.s:2655   .text.basic:0000000000000494 get_ticks
         tinyBasic.s:2664   .text.basic:000000000000049c set_timer
         tinyBasic.s:2676   .text.basic:00000000000004b0 timeout
         tinyBasic.s:2254   .text.basic:000000000000013c to
         tinyBasic.s:2684   .text.basic:00000000000004c4 tone
         tinyBasic.s:2694   .text.basic:00000000000004c8 ubound
         tinyBasic.s:2702   .text.basic:00000000000004dc uflash
         tinyBasic.s:2705   .text.basic:00000000000004e0 until
         tinyBasic.s:2708   .text.basic:00000000000004e4 usr
         tinyBasic.s:2711   .text.basic:00000000000004e8 wait
         tinyBasic.s:2720   .text.basic:00000000000004ec words
         tinyBasic.s:2743   .text.basic:0000000000000554 write
         tinyBasic.s:2746   .text.basic:0000000000000558 bit_xor
         tinyBasic.s:2749   .text.basic:000000000000055c transmit
         tinyBasic.s:2752   .text.basic:0000000000000560 receive
         tinyBasic.s:2070   .text.basic:0000000000000000 $t
         tinyBasic.s:2553   .text.basic:00000000000003f0 print_exit
         tinyBasic.s:2762   .text.basic:0000000000000800 $d
         tinyBasic.s:1885   .text:0000000000000e26 $d
         tinyBasic.s:2762   .text:0000000000000e28 $d
         tinyBasic.s:597    .text:0000000000000445 $d
         tinyBasic.s:597    .text:0000000000000446 $t
         tinyBasic.s:1255   .text:0000000000000921 $d
         tinyBasic.s:1255   .text:0000000000000922 $t
         tinyBasic.s:1343   .text:00000000000009b1 $d
         tinyBasic.s:1343   .text:00000000000009b2 $t
         tinyBasic.s:1817   .text:0000000000000ddd $d
         tinyBasic.s:1817   .text:0000000000000dde $t

UNDEFINED SYMBOLS
ARM GAS  tinyBasic.s 			page 86


uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
