ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 13


  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 14


 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 15


 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00A00 	    mov r0,#10
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
 208 0118 03BC     	    pop {r0,r1}
ARM GAS  tinyBasic.s 			page 16


 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
ARM GAS  tinyBasic.s 			page 17


 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
 314 01b0 8846     	    mov T1,R1
ARM GAS  tinyBasic.s 			page 18


 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      BEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
 361              	    in pas buffer.
ARM GAS  tinyBasic.s 			page 19


 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF84C99 	    ldr T2,pad // tokens buffer
 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      00F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e FBE2     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e F3E2     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      21F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF8F438 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 414 028e 1888     	    ldrh r0,[r3] // line number 
ARM GAS  tinyBasic.s 			page 20


 415 0290 38B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 1846     	    mov r0,r3 
 418 0294 00B5FFF7 	    _CALL insert_line 
 418      9DFF5DF8 
 418      04EB
 419 029e 4040     	    eors r0,r0 
 420 02a0 08E0     	    b 9f 
 421 02a2 9B46     	8:  mov BPTR,r3 // *token_list 
 422 02a4 4FF0030A 	    mov IN,#3
 423 02a8 206C     	    ldr r0,[UPP,#FLAGS]
 424 02aa A0F12000 	    sub r0,#FCOMP
 425 02ae 2064     	    str r0,[UPP,#FLAGS]
 426 02b0 5FF0FF30 	    movs r0,#-1 
 427 02b4 7047     	9:  _RET 
 428              	
 429              	/*********************************************
 430              	    compile next token from source 
 431              	    input: 
 432              	      r3 		tib index  
 433              	      T1    tib adr
 434              	      T2    insert point in pad  
 435              	    output:
 436              	      r0     token attribute 
 437              	      r1 		token value
 438              	      r3     tib index updated    
 439              	      T2     updated 
 440              	      use:
 441              	**********************************************/
 442              	    .macro _case c, next  
 443              	    cmp r0,#\c 
 444              	    bne \next
 445              	    .endm 
 446              	
 447 02b6 00BF     	    _FUNC comp_token 
 448 02b8 40B4     	    push {r6}
 449 02ba 18F80300 	    ldrb r0,[T1,r3]
 450 02be 0040     	    ands r0,r0 
 451 02c0 70D0     	    beq store_r0  // reached end of text  
 452 02c2 4FF02000 	    mov r0,#SPACE 
 453 02c6 00B500F0 	    _CALL skip  // skip spaces 
 453      2EF95DF8 
 453      04EB
 454 02d0 18F80300 	    ldrb r0,[T1,r3]
 455 02d4 0040     	    ands r0,r0 
 456 02d6 65D0     	    beq store_r0  // reached end of text 
 457 02d8 03F10103 	    add r3,#1 
 458 02dc 00B500F0 	    _CALL upper 
 458      2FF95DF8 
 458      04EB
 459 02e6 00B500F0 	    _CALL is_special
 459      7CF85DF8 
 459      04EB
 460 02f0 DFF8106D 	    ldr r6,=token_ofs
 461 02f4 D6E811F0 	    tbh [r6,r1] 
 462              	tok_idx0:     
 463              	//  not special char.  
ARM GAS  tinyBasic.s 			page 21


 464 02f8 57E0     	    b try_number 
 465              	// single char token with no value 
 466              	single: 
 467 02fa DFF80C6D 	    ldr r6,=tok_single
 468 02fe 705C     	    ldrb r0,[r6,r1] 
 469 0300 50E0     	    b store_r0  
 470              	lt:
 471 0302 4FF03400 	    mov r0,#TK_LT
 472 0306 18F80310 	    ldrb r1,[T1,r3]
 473 030a 3E29     	    cmp r1,#'>' 
 474 030c 06D0     	    beq 1f
 475 030e 0AE0     	    b 2f 
 476              	gt:
 477 0310 4FF03100 	    mov r0,#TK_GT 
 478 0314 18F80310 	    ldrb r1,[T1,r3]
 479 0318 3C29     	    cmp r1,#'<'
 480 031a 04D1     	    bne 2f  
 481 031c 03F10103 	1:  add r3,#1
 482 0320 4FF03500 	    mov r0,#TK_NE  
 483 0324 3EE0     	    b store_r0
 484 0326 3D29     	2:  cmp r1,#'=' 
 485 0328 3CD1     	    bne store_r0  
 486 032a 03F10103 	    add r3,#1
 487 032e 00F10200 	    add r0,#2
 488 0332 37E0     	    b store_r0       
 489              	bkslash:
 490 0334 18F80310 	    ldrb r1,[T1,r3]
 491 0338 03F10103 	    add r3,#1
 492 033c 4FF00300 	    mov r0,#TK_CHAR 
 493 0340 09F8010B 	    strb r0,[T2],#1
 494 0344 09F8011B 	    strb r1,[T2],#1
 495 0348 49E0     	    b token_exit 
 496              	prt_cmd: 
 497 034a 4FF00A00 	    mov r0,#TK_CMD 
 498 034e 4FF03A01 	    mov r1,#PRT_IDX
 499 0352 09F8010B 	    strb r0,[T2],#1
 500 0356 09F8011B 	    strb r1,[T2],#1
 501 035a 40E0     	    b token_exit 
 502              	quote:
 503 035c 4FF00200 	    mov r0,#TK_QSTR 
 504 0360 09F8010B 	    strb r0,[T2],#1
 505 0364 00B500F0 	    _CALL parse_quote
 505      ABF85DF8 
 505      04EB
 506 036e 36E0     	    b token_exit
 507              	tick: 
 508              	// copy comment in pad 
 509 0370 4FF00A00 	    mov r0,#TK_CMD 
 510 0374 4FF04701 	    mov r1,#REM_IDX 
 511 0378 09F8010B 	    strb r0,[T2],#1 
 512 037c 09F8011B 	    strb r1,[T2],#1
 513 0380 08EB0300 	    add r0,T1,r3 
 514 0384 4946     	    mov r1,T2 
 515 0386 00B5FFF7 	    _CALL strcpy 
 515      FEFF5DF8 
 515      04EB
 516 0390 00B5FFF7 	    _CALL strlen 
ARM GAS  tinyBasic.s 			page 22


 516      FEFF5DF8 
 516      04EB
 517 039a 8144     	    add T2,r0
 518 039c 09F10109 	    add T2,#1
 519 03a0 6368     	    ldr r3,[UPP,#COUNT]
 520 03a2 1CE0     	    b token_exit
 521              	store_r0: 
 522 03a4 09F8010B 	    strb r0,[T2],#1
 523 03a8 19E0     	    b token_exit 
 524              	try_number:
 525 03aa A3F10103 	    sub r3,#1
 526 03ae 00B500F0 	    _CALL parse_int  
 526      4EF85DF8 
 526      04EB
 527 03b8 04D0     	    beq 1f 
 528 03ba 09F8010B 	    strb r0,[T2],#1 
 529 03be 49F8041B 	    str r1,[T2],#4
 530 03c2 0CE0     	    b token_exit 
 531 03c4 00B500F0 	1:  _CALL parse_keyword 
 531      15F95DF8 
 531      04EB
 532 03ce 0428     	    cmp r0,#TK_VAR 
 533 03d0 01D0     	    beq 2f 
 534 03d2 4729     	    cmp r1,#REM_IDX 
 535 03d4 CCD0     	    beq tick
 536 03d6 09F8010B 	2:  strb r0,[T2],#1 
 537 03da 09F8011B 	    strb r1,[T2],#1
 538              	token_exit:
 539 03de 40BC     	    pop {r6}
 540 03e0 7047     	    _RET 
 541              	
 542              	/****************************
 543              	    is_special  
 544              	    check for non alphanum
 545              	    input:
 546              	      r0    character to scan 
 547              	    output:
 548              	      r0    character 
 549              	      r1    0 || index 
 550              	    use: 
 551              	      r1    scan index 
 552              	      r2    temp 
 553              	      r3    char_list 
 554              	*****************************/
 555 03e2 00BF     	    _FUNC is_special 
 556 03e4 0CB4     	    push {r2,r3}
 557 03e6 4FF00101 	    mov r1,#1
 558 03ea DFF8203C 	    ldr r3,=char_list 
 559 03ee 5A5C     	1:  ldrb r2,[r3,r1]
 560 03f0 22B1     	    cbz r2,8f 
 561 03f2 8242     	    cmp r2,r0 
 562 03f4 04D0     	    beq 9f 
 563 03f6 01F10101 	    add r1,#1 
 564 03fa F8E7     	    b 1b
 565 03fc 81EA0101 	8:  eor r1,r1     
 566 0400 0CBC     	9:  pop {r2,r3}
 567 0402 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 23


 568              	
 569              	char_list:
 570 0404 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 570      293A232D 
 570      2B2A2F25 
 570      3D3C3E5C 
 570      3F272200 
 571              	
 572              	tok_single:
 573 0418 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 573      070109
 574 041f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 574      2232
 575              	  
 576 0425 0000BF   	  .p2align 2
 577              	token_ofs:
 578 0428 0000     	  .hword  0 // not found
 579              	  // TK_COMMA...TK_EQUAL , 12 
 580 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 580      01000100 
 581 0432 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 581      01000100 
 582 043a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 582      01000100 
 583              	  // '<','>'
 584 0442 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 585              	  // '\'
 586 0446 1E00     	  .hword  (bkslash-tok_idx0)/2
 587              	  // '?' 
 588 0448 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 589              	  // "'"  
 590 044a 3C00     	  .hword  (tick-tok_idx0)/2 
 591              	  // '"' quote 
 592 044c 3200     	  .hword (quote-tok_idx0)/2
 593              	
 594 044e 00BF     	  .p2align 2
 595              	
 596              	/****************************
 597              	    parse_int 
 598              	    parse an integer from text
 599              	    if not valid integer 
 600              	    r1 return *buffer else 
 601              	    *buffer is incremented after integer 
 602              	  input:
 603              	    r0   *buffer 
 604              	  output:
 605              	    r0   TK_INTGR|TK_NONE
 606              	    r1   int|0   
 607              	  use:
 608              	    r0   char 
 609              	    r1   save r3 
 610              	    r2   int
 611              	    r6   base 
 612              	    r7   digit count 
 613              	    r3   tib index   
 614              	    T1   *tib 
 615              	    T2   *pad  
ARM GAS  tinyBasic.s 			page 24


 616              	*****************************/
 617              	    _FUNC parse_int 
 618 0450 C0B4     	    push {r6,r7}
 619 0452 82EA0202 	    eor r2,r2 // int 
 620 0456 1946     	    mov r1,r3 
 621 0458 4FF00A06 	    mov r6,#10 // default base 
 622 045c 87EA0707 	    eor r7,r7 // digit count 
 623 0460 18F80300 	    ldrb r0,[T1,r3]
 624 0464 03F10103 	    add r3,#1 
 625 0468 2428     	    cmp r0,'$' 
 626 046a 02D1     	    bne 2f 
 627 046c 4FF01006 	    mov r6,#16 // hexadecimal number 
 628 0470 03E0     	    b 3f  
 629 0472 2628     	2:  cmp r0,#'&' 
 630 0474 05D1     	    bne 4f
 631 0476 4FF00206 	    mov r6,#2 //binary number  
 632 047a 18F80300 	3:  ldrb r0,[T1,r3]
 633 047e 03F10103 	    add r3,#1
 634 0482 00B500F0 	4:  _CALL upper 
 634      5CF85DF8 
 634      04EB
 635 048c 4128     	    cmp r0,#'A'
 636 048e 00D4     	    bmi 5f
 637 0490 0738     	    subs r0,#7  
 638 0492 3038     	5:  subs r0,#'0' 
 639 0494 07D4     	    bmi 6f // not digit   
 640 0496 B042     	    cmp r0,r6 
 641 0498 05D5     	    bpl 6f // not digit 
 642 049a 06FB02F2 	    mul r2,r6 
 643 049e 0244     	    add r2,r0
 644 04a0 07F10107 	    add r7,#1  
 645 04a4 E9E7     	    b 3b
 646 04a6 A3F10103 	6:  sub r3,#1  // unget last char
 647 04aa 1FB1     	    cbz r7, 7f 
 648 04ac 4FF00E00 	    mov r0,#TK_INTGR  
 649 04b0 1146     	    mov r1,r2 
 650 04b2 02E0     	    b 9f 
 651              	7: // not a number 
 652 04b4 0B46     	    mov r3,r1 // restore r3 
 653 04b6 80EA0000 	    eor r0,r0 // TK_NONE 
 654 04ba 0040     	9:  ands r0,r0 // to set zero flag 
 655 04bc C0BC     	    pop {r6,r7}
 656 04be 7047     	    _RET 
 657              	
 658              	/*********************************************
 659              	    parse_quote 
 660              	    parse quoted string 
 661              	    input: 
 662              	      r3 		tib index  
 663              	      T1    tib adr
 664              	      T2    insert point in pad  
 665              	    output:
 666              	      r0     token attribute 
 667              	      r1 		*str 
 668              	      r3     tib index updated    
 669              	      T2     updated 
 670              	      use:
ARM GAS  tinyBasic.s 			page 25


 671              	*********************************************/
 672              	    _FUNC parse_quote
 673 04c0 4DF8049D 	    push {T2} 
 674 04c4 18F80300 	1:  ldrb r0,[T1,r3]
 675 04c8 03F10103 	    add r3,#1 
 676 04cc 2228     	    cmp r0,#'"'
 677 04ce 09D0     	    beq 9f 
 678 04d0 5C28     	    cmp r0,#'\\'
 679 04d2 04D1     	    bne 2f 
 680 04d4 00B500F0 	    _CALL get_escaped_char 
 680      0DF85DF8 
 680      04EB
 681 04de 09F8010B 	2:  strb r0,[T2],#1
 682 04e2 EFE7     	    b 1b 
 683 04e4 80EA0000 	9:  eor  r0,r0
 684 04e8 09F8010B 	    strb r0,[T2],#1
 685 04ec 4FF00200 	    mov r0,#TK_QSTR
 686 04f0 02BC     	    pop {r1}
 687 04f2 7047     	    _RET 
 688              	
 689              	/**********************************************
 690              	    get_escaped_char 
 691              	    convert "\c" in quoted string 
 692              	    input:
 693              	      r0 
 694              	      r3   index 
 695              	      T1   tib 
 696              	    output:
 697              	      r0   replacement char
 698              	      r3   updated 
 699              	    use:
 700              	      r1   *table 
 701              	      r2   temp 
 702              	**********************************************/
 703              	    _FUNC get_escaped_char 
 704 04f4 06B4     	    push {r1,r2}
 705 04f6 18F80300 	    ldrb r0,[T1,r3]
 706 04fa 03F10103 	    add r3,#1
 707 04fe 2228     	    cmp r0,#'"' 
 708 0500 0BD0     	    beq 9f 
 709 0502 DFF80C1B 	1:  ldr r1,=escaped 
 710 0506 11F8012B 	2:  ldrb r2,[r1],#1
 711 050a 12B1     	    cbz r2,6f 
 712 050c 8242     	    cmp r2,r0 
 713 050e 02D0     	    beq 7f 
 714 0510 F9E7     	    b 2b
 715 0512 A0F10702 	6:  sub r2,r0,#7     
 716 0516 02F10700 	7:  add r0,r2,#7
 717 051a 06BC     	9:  pop {r1,r2}   
 718 051c 7047     	    _RET
 719              	
 720 051e 6162746E 	escaped: .asciz "abtnvfr"
 720      76667200 
 721              	
 722              	/*********************************************
 723              	   skip character in TIB 
 724              	   input:
ARM GAS  tinyBasic.s 			page 26


 725              	      r0    character to skip 
 726              	      r3    tib index 
 727              	      T1    tib adr
 728              	    output: 
 729              	      r3    updated
 730              	    use:
 731              	      r1     
 732              	**********************************************/   
 733 0526 00BF     	    _FUNC skip
 734 0528 02B4     	    push {r1} 
 735 052a 18F80310 	1:  ldrb r1,[T1,r3]
 736 052e 8142     	    cmp r1,r0
 737 0530 02D1     	    bne 2f
 738 0532 03F10103 	    add r3,#1 
 739 0536 F8E7     	    b 1b 
 740 0538 2360     	2:  str r3,[UPP,#IN_SAVED]
 741 053a 02BC     	    pop {r1}
 742 053c 7047     	    _RET
 743              	
 744              	/********************************************
 745              	    upper
 746              	    convert character in upper case 
 747              	    input: 
 748              	      r0   character 
 749              	    output:
 750              	      r0   upper case character 
 751              	*********************************************/
 752 053e 00BF     	    _FUNC upper 
 753 0540 6128     	    cmp r0,#'a' 
 754 0542 03DB     	    blt 9f 
 755 0544 7A28     	    cmp r0,#'z' 
 756 0546 01DC     	    bgt 9f 
 757 0548 00F05F00 	    and r0,#0x5f 
 758 054c 7047     	9:  _RET 
 759              	
 760              	/***************************************
 761              	   is_digit 
 762              	   check if char is decimal digit.
 763              	   convert to decimal digit.
 764              	   input:
 765              	      r0    char 
 766              	   output:
 767              	      r0    if !Z then converted digit 
 768              	      Z     0 true | 1 false  
 769              	***************************************/
 770 054e 00BF     	    _GBL_FUNC is_digit 
 771 0550 02B4     	    push {r1} 
 772 0552 81EA0101 	    eor r1,r1 
 773 0556 3028     	    cmp r0,#'0' 
 774 0558 05DB     	    blt 9f
 775 055a 3A28     	    cmp r0,'9'+1
 776 055c 03D5     	    bpl 9f 
 777 055e 4FF0FF31 	    mov r1,#-1
 778 0562 A0F13000 	    sub r0,#'0'  
 779              	9:   
 780 0566 0940     	    ands r1,r1
 781 0568 02BC     	    pop {r1} 
ARM GAS  tinyBasic.s 			page 27


 782 056a 7047     	    _RET 
 783              	
 784              	/***************************************
 785              	    is_hex 
 786              	    check for hexadecimal digit 
 787              	    convert to hex digit.
 788              	    input:
 789              	      r0    
 790              	    output:
 791              	      r0     if !Z then converted digit 
 792              	      Z      0 true | 1 false         
 793              	***************************************/
 794              	    _FUNC is_hex 
 795 056c 02B4     	    push {r1}
 796 056e 4FF0FF31 	    mov r1,#-1 
 797 0572 4128     	    cmp r0,#'A' 
 798 0574 01D4     	    bmi 1f 
 799 0576 A0F10700 	    sub r0,#7 
 800 057a A0F13000 	1:  sub r0,#'0'
 801 057e 01D4     	    bmi 2f 
 802 0580 1028     	    cmp r0,#16
 803 0582 01D4     	    bmi 9f 
 804 0584 81EA0101 	2:  eor r1,r1  
 805 0588 0940     	9:  ands r1,r1 
 806 058a 02BC     	    pop {r1}
 807 058c 7047     	    _RET 
 808              	
 809              	/***************************************
 810              	    is_bit 
 811              	    check if char is '0'|'1' 
 812              	    convert to binary digit. 
 813              	    input:
 814              	      r0    
 815              	    output:
 816              	      r0     if !Z then converted digit 
 817              	      Z      0 true | 1 false         
 818              	***************************************/
 819 058e 00BF     	    _FUNC is_bit
 820 0590 02B4     	    push  {r1}
 821 0592 4FF0FF31 	    mov r1,#-1 
 822 0596 A0F13000 	    sub r0,#'0' 
 823 059a 01D4     	    bmi 2f 
 824 059c 0229     	    cmp r1,#2
 825 059e 01D4     	    bmi 9f 
 826 05a0 81EA0101 	2:  eor r1,r1 
 827 05a4 0940     	9:  ands r1,r1 
 828 05a6 02BC     	    pop {r1}
 829 05a8 7047     	    _RET 
 830              	
 831              	/***************************************
 832              	    is_alpha 
 833              	    check if character is {A..Z} 
 834              	  input:
 835              	    r0   character 
 836              	  output: 
 837              	    r0    same character 
 838              	    Z    0 true | 1 false  
ARM GAS  tinyBasic.s 			page 28


 839              	****************************************/
 840 05aa 00BF     	    _FUNC is_alpha
 841 05ac 02B4     	    push {r1} 
 842 05ae 4FF0FF31 	    mov r1,#-1 
 843 05b2 4128     	    cmp r0,#'A' 
 844 05b4 01DB     	    blt 8f 
 845 05b6 5B28     	    cmp r0,#'Z'+1 
 846 05b8 01D4     	    bmi 9f 
 847 05ba 81EA0101 	8:  eor r1,r1  
 848 05be 0940     	9:  ands r1,r1 
 849 05c0 02BC     	    pop {r1}
 850 05c2 7047     	    _RET 
 851              	
 852              	/***************************************
 853              	    is_num 
 854              	    check if character is {0..9} 
 855              	  input:
 856              	    r0   character 
 857              	  output: 
 858              	    r0    same character 
 859              	    Z    0 true | 1 false  
 860              	****************************************/
 861              	    _FUNC is_num 
 862 05c4 02B4     	    push {r1} 
 863 05c6 4FF0FF31 	    mov r1,#-1 
 864 05ca 3028     	    cmp r0,#'0' 
 865 05cc 01DB     	    blt 8f 
 866 05ce 3A28     	    cmp r0,#'9'+1 
 867 05d0 01D4     	    bmi 9f 
 868 05d2 81EA0101 	8:  eor r1,r1  
 869 05d6 0940     	9:  ands r1,r1 
 870 05d8 02BC     	    pop {r1}
 871 05da 7047     	    _RET 
 872              	
 873              	/*****************************************
 874              	    is_alnum 
 875              	    check if character is alphanumeric 
 876              	    input:
 877              	      r0 
 878              	    output:
 879              	      r0     same 
 880              	      Z      1 false | 0 true 
 881              	*****************************************/
 882              	    _FUNC is_alnum 
 883 05dc 00B5FFF7 	    _CALL is_alpha 
 883      E5FF5DF8 
 883      04EB
 884 05e6 04D1     	    bne 9f 
 885 05e8 00B5FFF7 	    _CALL is_num 
 885      EBFF5DF8 
 885      04EB
 886 05f2 7047     	9:  _RET 
 887              	
 888              	
 889              	/*****************************************
 890              	    parse_keyword 
 891              	    parse work and ckeck if in dictionary 
ARM GAS  tinyBasic.s 			page 29


 892              	    input:
 893              	      r0    first character 
 894              	      r3    tib index 
 895              	      t1    tib 
 896              	      t2    pad 
 897              	    output:
 898              	      r3    updated 
 899              	      t1    updated 
 900              	      t2    updated   
 901              	    use:
 902              	    
 903              	*****************************************/
 904              	    _FUNC parse_keyword 
 905 05f4 4DF8049D 	    push {T2}
 906 05f8 18F80300 	    ldrb r0,[T1,r3]
 907 05fc 03F10103 	    add r3,#1
 908 0600 00B3     	    cbz r0,2f 
 909 0602 00B5FFF7 	    _CALL upper 
 909      9CFF5DF8 
 909      04EB
 910 060c 00B5FFF7 	    _CALL is_alpha 
 910      CDFF5DF8 
 910      04EB
 911 0616 00F01B81 	    beq syntax_error 
 912 061a 09F8010B 	    strb r0,[T2],#1
 913 061e 18F80300 	1:  ldrb r0,[T1,r3]
 914 0622 03F10103 	    add r3,#1 
 915 0626 68B1     	    cbz r0,2f 
 916 0628 00B5FFF7 	    _CALL upper 
 916      89FF5DF8 
 916      04EB
 917 0632 00B5FFF7 	    _CALL is_alnum
 917      D2FF5DF8 
 917      04EB
 918 063c 02D0     	    beq 2f 
 919 063e 09F8010B 	    strb r0,[T2],#1
 920 0642 ECE7     	    b 1b 
 921 0644 A3F10103 	2:  sub r3,#1
 922 0648 80EA0000 	    eor r0,r0
 923 064c 89F80000 	    strb r0,[T2] 
 924 0650 0098     	    ldr r0,[sp]
 925 0652 4178     	    ldrb r1,[r0,#1] 
 926 0654 29B9     	    cbnz r1,3f
 927 0656 0178     	    ldrb r1,[r0]
 928 0658 A1F14101 	    sub r1,#'A'
 929 065c 4FF00400 	    mov r0,#TK_VAR
 930 0660 08E0     	    b 9f 
 931 0662 DFF8B019 	3:  ldr r1,=kword_dict  
 932 0666 00B500F0 	    _CALL search_dict 
 932      ACF95DF8 
 932      04EB
 933 0670 00B9     	    cbnz r0,9f 
 934 0672 EDE0     	    b syntax_error 
 935 0674 5DF8049B 	9:  pop {T2}
 936 0678 7047     	    _RET 
 937              	
 938              	
ARM GAS  tinyBasic.s 			page 30


 939              	/*******************
 940              	    DECOMPILER 
 941              	*******************/
 942              	
 943              	/********************************************
 944              	    cmd_name 
 945              	    search bytecode in dictionary and 
 946              	    return its name 
 947              	  input:
 948              	    r0    keyword bytecode 
 949              	  ouput:
 950              	    r0    name string 
 951              	  use:
 952              	    T1    link 
 953              	    T2    tmp 
 954              	*********************************************/
 955 067a 00BF     	    _FUNC cmd_name 
 956 067c 2DE90003 	    push {T1,T2}
 957 0680 DFF89089 	    ldr T1,=kword_dict 
 958 0684 58F8089C 	1:  ldr T2,[T1,#-8]
 959 0688 8145     	    cmp T2,r0 
 960 068a 04D0     	    beq 2f 
 961 068c 58F80C8C 	    ldr T1,[T1,#-12]
 962 0690 B8F1000F 	    cmp T1,#0
 963 0694 F6D1     	    bne 1b  
 964 0696 4046     	2:  mov r0,T1 
 965 0698 BDE80003 	    pop {T1,T2}
 966 069c 7047     	    _RET
 967              	
 968              	/****************************
 969              	  detokenize and print line 
 970              	  input:
 971              	    BPTR   line address 
 972              	  output:
 973              	    none:
 974              	  use:
 975              	    r0,r1 
 976              	****************************/
 977 069e 00BF     	    _FUNC print_basic_line 
 978 06a0 03B4     	    push {r0,r1}
 979 06a2 4FF0000A 	    mov IN,#0
 980 06a6 3BF80A00 	    ldrh r0,[BPTR,IN]
 981 06aa 0AF1020A 	    add IN,#2
 982 06ae 4FF00A01 	    mov r1,#10 
 983 06b2 00B5FFF7 	    _CALL print_int
 983      FEFF5DF8 
 983      04EB
 984 06bc 1BF80A00 	    ldrb r0, [BPTR,IN]
 985 06c0 0AF1010A 	    add IN,#1 
 986 06c4 6060     	    str r0,[UPP,#COUNT]
 987              	token_loop:  
 988 06c6 00B500F0 	    _CALL next_token
 988      A8FA5DF8 
 988      04EB
 989 06d0 0028     	    cmp r0,#TK_NONE 
 990 06d2 00F08880 	    beq 9f  
 991 06d6 0E28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 31


 992 06d8 07D1     	    bne 2f 
 993 06da 0846     	    mov r0,r1 
 994 06dc A169     	    ldr r1,[UPP,#BASE]
 995 06de 00B5FFF7 	    _CALL print_int 
 995      FEFF5DF8 
 995      04EB
 996 06e8 EDE7     	    b token_loop 
 997 06ea 0328     	2:  cmp r0,#TK_CHAR 
 998 06ec 0ED1     	    bne 3f 
 999 06ee 01F14100 	    add r0,r1,#'A' 
 1000 06f2 00B5FFF7 	    _CALL uart_putc
 1000      FEFF5DF8 
 1000      04EB
 1001 06fc 4FF02000 	    mov r0,#SPACE 
 1002 0700 00B5FFF7 	    _CALL uart_putc
 1002      FEFF5DF8 
 1002      04EB
 1003 070a DCE7     	    b token_loop 
 1004 070c 0228     	3:  cmp r0,#TK_QSTR 
 1005 070e 14D1     	    bne 4f 
 1006 0710 4FF02200 	    mov r0,#'"'
 1007 0714 00B5FFF7 	    _CALL uart_putc 
 1007      FEFF5DF8 
 1007      04EB
 1008 071e 0846     	    mov r0,r1 
 1009 0720 00B5FFF7 	    _CALL uart_puts
 1009      FEFF5DF8 
 1009      04EB
 1010 072a 4FF02200 	    mov r0,#'"'
 1011 072e 00B5FFF7 	    _CALL uart_putc 
 1011      FEFF5DF8 
 1011      04EB
 1012 0738 C5E7     	    b token_loop
 1013 073a 0A28     	4:  cmp r0,#TK_CMD
 1014 073c 38D4     	    bmi 5f 
 1015 073e 0E28     	    cmp r0,#TK_INTGR 
 1016 0740 36D5     	    bpl 5f
 1017 0742 4FF02000 	    mov r0,#SPACE 
 1018 0746 00B5FFF7 	    _CALL uart_putc  
 1018      FEFF5DF8 
 1018      04EB
 1019 0750 0846     	    mov r0,r1
 1020 0752 3A28     	    cmp r0,#PRT_IDX 
 1021 0754 07D1     	    bne 1f  
 1022 0756 4FF03F00 	    mov r0,#'?'
 1023 075a 00B5FFF7 	    _CALL uart_putc 
 1023      FEFF5DF8 
 1023      04EB
 1024 0764 1CE0     	    b 3f 
 1025 0766 4728     	1:  cmp r0,#REM_IDX
 1026 0768 10D1     	    bne 1f
 1027 076a 4FF02700 	    mov r0,#'\''
 1028 076e 00B5FFF7 	    _CALL uart_putc 
 1028      FEFF5DF8 
 1028      04EB
 1029 0778 0BEB0A00 	    add r0,BPTR,IN  
 1030 077c 00B5FFF7 	    _CALL uart_puts 
ARM GAS  tinyBasic.s 			page 32


 1030      FEFF5DF8 
 1030      04EB
 1031 0786 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1032 078a 2CE0     	    b 9f 
 1033 078c 00B5FFF7 	1:  _CALL cmd_name
 1033      75FF5DF8 
 1033      04EB
 1034 0796 00B5FFF7 	2:  _CALL uart_puts
 1034      FEFF5DF8 
 1034      04EB
 1035 07a0 4FF02000 	3:  mov r0,#SPACE 
 1036 07a4 00B5FFF7 	    _CALL uart_putc 
 1036      FEFF5DF8 
 1036      04EB
 1037 07ae 8AE7     	    b token_loop
 1038 07b0 01B4     	5:  push {r0}
 1039 07b2 DFF86418 	    ldr r1,=single_char 
 1040 07b6 085C     	    ldrb r0,[r1,r0]
 1041 07b8 02BC     	    pop {r1}
 1042 07ba 28B1     	    cbz r0,6f 
 1043 07bc 00B5FFF7 	    _CALL uart_putc
 1043      FEFF5DF8 
 1043      04EB
 1044 07c6 7EE7     	    b token_loop
 1045 07c8 3329     	6:  cmp r1,#TK_GE 
 1046 07ca 02D1     	    bne 7f 
 1047 07cc DFF84C08 	    ldr r0,=ge_str
 1048 07d0 E1E7     	    b 2b 
 1049 07d2 3629     	7:  cmp r1,#TK_LE 
 1050 07d4 02D1     	    bne 8f
 1051 07d6 DFF84808 	    ldr r0,=le_str
 1052 07da DCE7     	    b 2b
 1053 07dc 3529     	8:  cmp r1,#TK_NE 
 1054 07de 02D1     	    bne 9f 
 1055 07e0 DFF84008 	    ldr r0,=ne_str 
 1056 07e4 D7E7     	    b 2b 
 1057 07e6 4FF00D00 	9:  mov r0,#CR 
 1058 07ea 00B5FFF7 	    _CALL uart_putc 
 1058      FEFF5DF8 
 1058      04EB
 1059 07f4 03BC     	    pop {r0,r1}
 1060 07f6 7047     	    _RET 
 1061              	
 1062 07f8 3E3D00   	ge_str: .asciz ">="
 1063 07fb 3C3D00   	le_str: .asciz "<="
 1064 07fe 3C3E00   	ne_str: .asciz "<>"
 1065              	
 1066              	single_char:
 1067 0801 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1067      00402829 
 1067      2C23
 1068 080b 00000000 	  .space 6
 1068      0000
 1069 0811 2B2D     	  .byte '+','-'
 1070 0813 00000000 	  .space 14
 1070      00000000 
 1070      00000000 
ARM GAS  tinyBasic.s 			page 33


 1070      0000
 1071 0821 2A2F25   	  .byte '*','/','%'
 1072 0824 00000000 	  .space 14
 1072      00000000 
 1072      00000000 
 1072      0000
 1073 0832 3E3D003C 	  .byte '>','=',0,'<',0,0
 1073      0000
 1074              	
 1075              	
 1076              	/**********************************
 1077              	  modulo 
 1078              	  compute r0 mod r1
 1079              	  input:
 1080              	    r0   dividend
 1081              	    r1   divisor 
 1082              	  output:
 1083              	    r0   TK_INTGR 
 1084              	    r1   r0 mod r1 
 1085              	*********************************/
 1086              	    _GBL_FUNC modulo 
 1087 0838 01B4     	    push {r0}
 1088 083a B0FBF1F0 	    udiv r0,r1 
 1089 083e 01FB00F0 	    mul  r0,r1 
 1090 0842 02BC     	    pop {r1}
 1091 0844 A1EB0001 	    sub r1,r0
 1092 0848 4FF00E00 	    mov r0,#TK_INTGR
 1093 084c 7047     	    _RET 
 1094              	
 1095              	/**********************************
 1096              	      BASIC commands 
 1097              	**********************************/
 1098              	
 1099              	/*********************************
 1100              	    syntax_error 
 1101              	    display syntax error message and 
 1102              	    abort program 
 1103              	  input:
 1104              	    none  
 1105              	  output: 
 1106              	    none 
 1107              	  use:
 1108              	*********************************/
 1109 084e 00BF     	    _FUNC syntax_error 
 1110 0850 4FF00200 	    mov r0,#ERR_SYNTAX
 1111 0854 00E0     	    b tb_error 
 1112              	
 1113              	/*********************************
 1114              	    tb_error 
 1115              	    display BASIC error and 
 1116              	    abort program. 
 1117              	  input:
 1118              	    r0    error code   
 1119              	  output: 
 1120              	    none 
 1121              	  use:
 1122              	    r1    temp 
ARM GAS  tinyBasic.s 			page 34


 1123              	*********************************/
 1124 0856 00BF     	    _FUNC tb_error 
 1125 0858 216C     	    ldr r1,[UPP,#FLAGS]
 1126 085a 11F0200F 	    tst r1,#FCOMP
 1127 085e 43D1     	    bne compile_error
 1128              	rt_error:
 1129 0860 01B4     	    push {r0}
 1130 0862 DFF8C407 	    ldr r0,=rt_error_msg 
 1131 0866 00B5FFF7 	    _CALL uart_puts 
 1131      FEFF5DF8 
 1131      04EB
 1132 0870 01BC     	    pop {r0}
 1133 0872 DFF8B817 	    ldr r1,=err_msg  
 1134 0876 4FEA8000 	    lsl r0,#2 
 1135 087a 0858     	    ldr r0,[r1,r0]
 1136 087c 00B5FFF7 	    _CALL uart_puts
 1136      FEFF5DF8 
 1136      04EB
 1137 0886 D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1138 088a BBF80000 	    ldrh r0,[BPTR]
 1139 088e 4FF00A01 	    mov r1,#10
 1140 0892 00B5FFF7 	    _CALL print_int 
 1140      FEFF5DF8 
 1140      04EB
 1141 089c 4FF02C00 	    mov r0,#',' 
 1142 08a0 00B5FFF7 	    _CALL uart_putc 
 1142      FEFF5DF8 
 1142      04EB
 1143 08aa D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1144 08ae 00B500F0 	    _CALL next_token
 1144      B4F95DF8 
 1144      04EB
 1145 08b8 02B4     	    push {r1}
 1146 08ba 4FF00A01 	    mov r1,#10 
 1147 08be 00B5FFF7 	    _CALL print_int 
 1147      FEFF5DF8 
 1147      04EB
 1148 08c8 4FF02C00 	    mov r0,#',' 
 1149 08cc 00B5FFF7 	    _CALL uart_putc 
 1149      FEFF5DF8 
 1149      04EB
 1150 08d6 01BC     	    pop {r0}
 1151 08d8 4FF00A01 	    mov r1,#10 
 1152 08dc 00B5FFF7 	    _CALL print_int 
 1152      FEFF5DF8 
 1152      04EB
 1153 08e6 4FE1     	    b warm_start 
 1154              	compile_error:
 1155 08e8 DFF84017 	    ldr r1,=err_msg 
 1156 08ec 4FEA8000 	    lsl r0,#2 
 1157 08f0 0858     	    ldr r0,[r1,r0]
 1158 08f2 00B5FFF7 	    _CALL uart_puts
 1158      FEFF5DF8 
 1158      04EB
 1159 08fc A068     	    ldr r0,[UPP,#BASICPTR]
 1160 08fe 00B5FFF7 	    _CALL uart_puts
 1160      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 35


 1160      04EB
 1161 0908 4FF00D00 	    mov r0,#CR 
 1162 090c 00B5FFF7 	    _CALL uart_putc  
 1162      FEFF5DF8 
 1162      04EB
 1163 0916 2068     	    ldr r0,[UPP,#IN_SAVED]
 1164 0918 00B5FFF7 	    _CALL spaces 
 1164      FEFF5DF8 
 1164      04EB
 1165 0922 4FF05E00 	    mov r0,#'^' 
 1166 0926 00B5FFF7 	    _CALL uart_putc
 1166      FEFF5DF8 
 1166      04EB
 1167 0930 4FF00D00 	    mov r0,#CR 
 1168 0934 00B5FFF7 	    _CALL uart_putc   
 1168      FEFF5DF8 
 1168      04EB
 1169 093e 23E1     	    b  warm_start  
 1170              	    
 1171              	rt_error_msg:
 1172 0940 0A52756E 	  .asciz "\nRuntime error\n"
 1172      74696D65 
 1172      20657272 
 1172      6F720A00 
 1173              	
 1174              	err_msg:
 1175 0950 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1175      00000000 
 1175      0D000000 
 1175      1B000000 
 1175      34000000 
 1176 0968 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1176      6F000000 
 1176      89000000 
 1176      9A000000 
 1176      AB000000 
 1177 097c B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1177      EA000000 
 1177      FA000000 
 1177      0E010000 
 1177      21010000 
 1178              	
 1179              	    .section .rodata.tb_error 
 1180              	
 1181 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1181      72792066 
 1181      756C6C0A 
 1181      00
 1182 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1182      61782065 
 1182      72726F72 
 1182      0A00
 1183 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1183      206F7065 
 1183      72617469 
 1183      6F6E206F 
 1183      76657266 
ARM GAS  tinyBasic.s 			page 36


 1184 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1184      73696F6E 
 1184      20627920 
 1184      300A00
 1185 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1185      6C696420 
 1185      6C696E65 
 1185      206E756D 
 1185      6265722E 
 1186 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1186      74696D65 
 1186      206F6E6C 
 1186      79207573 
 1186      6167652E 
 1187 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1187      616E6420 
 1187      6C696E65 
 1187      206F6E6C 
 1187      79207573 
 1188 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1188      69636174 
 1188      65206E61 
 1188      6D652E0A 
 1188      00
 1189 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1189      206E6F74 
 1189      20666F75 
 1189      6E642E0A 
 1189      00
 1190 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1190      76616C75 
 1190      652E0A00 
 1191 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1191      20696E20 
 1191      65787465 
 1191      6E646564 
 1191      206D656D 
 1192 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1192      61746120 
 1192      666F756E 
 1192      642E0A00 
 1193 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1193      726F6772 
 1193      616D2069 
 1193      6E205241 
 1193      4D210A00 
 1194 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1194      20737973 
 1194      74656D20 
 1194      66756C6C 
 1194      2E0A00
 1195 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1195      65722066 
 1195      756C6C0A 
 1195      00
 1196              	
 1197 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
ARM GAS  tinyBasic.s 			page 37


 1197      2074696D 
 1197      65206572 
 1197      726F722C 
 1197      2000
 1198 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1198      70696C65 
 1198      20657272 
 1198      6F722C20 
 1198      00
 1199 0151 6C617374 	tk_id: .asciz "last token id: "
 1199      20746F6B 
 1199      656E2069 
 1199      643A2000 
 1200              	
 1201              	
 1202              	    .section  .text , "ax", %progbits 
 1203              	
 1204              	/*********************************
 1205              	   skip_line 
 1206              	   data and remark line are skipped
 1207              	   by the interpreter 
 1208              	***********************************/
 1209              	    _FUNC skip_line 
 1210 0990 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1211 0994 7047     	    _RET 
 1212              	
 1213              	
 1214              	/*********************************
 1215              	   BASIC: BTGL adr, mask   
 1216              	   toggle bits [adr]=[adr]^mask  
 1217              	   input:
 1218              	     r0    adr 
 1219              	     r1    mask 
 1220              	    output;
 1221              	      none 
 1222              	    use:
 1223              	      T1   temp
 1224              	      T2   temp  
 1225              	*******************************/     
 1226 0996 00BF     	    _FUNC BTGL 
 1227              	
 1228 0998 7047     	    _RET 
 1229              	
 1230              	/***************************************
 1231              	   kword_cmp
 1232              	   compare keyword to dict entry
 1233              	  input:
 1234              	    r0  keyword 
 1235              	    r1  dict entry 
 1236              	    r2  character count 
 1237              	  output:
 1238              	    r0  0 not same | -1 same 
 1239              	  use:
 1240              	    r6   result  
 1241              	    T1   char 1
 1242              	    T2   char 2
 1243              	**************************************/   
ARM GAS  tinyBasic.s 			page 38


 1244 099a 00BF     	    _FUNC kword_cmp 
 1245 099c 2DE94003 	    push {r6,T1,T2}
 1246 09a0 4FF0FF36 	    mov r6,#-1 
 1247 09a4 4AB1     	1:  cbz r2,9f       
 1248 09a6 10F8018B 	    ldrb T1,[r0],#1
 1249 09aa 11F8019B 	    ldrb T2,[r1],#1
 1250 09ae A2F10102 	    sub r2,#1
 1251 09b2 C845     	    cmp T1,T2
 1252 09b4 F6D0     	    beq 1b 
 1253 09b6 86EA0606 	    eor r6,r6  
 1254 09ba 3046     	9:  mov r0,r6
 1255 09bc BDE84003 	    pop {r6,T1,T2}
 1256 09c0 7047     	    _RET 
 1257              	
 1258              	/***********************************************
 1259              	    search_dict 
 1260              	    search keyword in dictionary
 1261              	   input:
 1262              	  	 r0   keyword 
 1263              	     r1		dictionary first name field address  
 1264              	   output:
 1265              	     r0 		token attribute 
 1266              	     r1		  cmd_index if r0!=TK_NONE  
 1267              	   use:
 1268              	     r3   length keyword 
 1269              	     T1   keyword
 1270              	     T2   link  
 1271              	**********************************************/
 1272 09c2 00BF     	  _FUNC search_dict
 1273 09c4 2DE90C03 	  push {r2,r3,T1,T2}
 1274 09c8 8046     	  mov T1,r0 
 1275 09ca 00B5FFF7 	  _CALL strlen 
 1275      FEFF5DF8 
 1275      04EB
 1276 09d4 0346     	  mov r3,r0  
 1277              	1:  
 1278 09d6 8946     	   mov T2,r1  // keep for linking   
 1279 09d8 0878     	   ldrb r0,[r1] 
 1280 09da 78B1     	   cbz r0,9f // null byte, end of dictionary
 1281 09dc 4046     	   mov r0,T1
 1282 09de 1A46     	   mov r2,r3   
 1283 09e0 00B5FFF7 	   _CALL kword_cmp  
 1283      DBFF5DF8 
 1283      04EB
 1284 09ea 18B9     	   cbnz r0,2f 
 1285 09ec 4946     	   mov r1,T2
 1286 09ee 51F80C1C 	   ldr r1,[r1,#-12]
 1287 09f2 F0E7     	   b 1b   
 1288              	2: // found
 1289 09f4 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1290 09f8 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1291 09fc BDE80C03 	9: pop {r2,r3,T1,T2}
 1292 0a00 7047     	   _RET 
 1293              	
 1294              	
 1295              	/**************************
 1296              	    INTERPRETER 
ARM GAS  tinyBasic.s 			page 39


 1297              	*************************/
 1298              	
 1299              	/*********************************
 1300              	   cold_start 
 1301              	   initialize BASIC interpreter 
 1302              	   never leave 
 1303              	   input:
 1304              	     none 
 1305              	   output:
 1306              	    none 
 1307              	*********************************/
 1308              	  .type cold_start, %function 
 1309              	  .global cold_start 
 1310              	cold_start: 
 1311 0a02 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1311      C2F20004 
 1312 0a0a DFF84400 	    ldr r0,src_addr 
 1313 0a0e 1149     	    ldr r1,dest_addr
 1314 0a10 0968     	    ldr r1,[r1] 
 1315 0a12 0C44     	    add UPP,r1 // system variables base address   
 1316              	// clear RAM
 1317 0a14 2046     	    mov r0,UPP  
 1318 0a16 DFF85C11 	    ldr r1,tib 
 1319 0a1a 82EA0202 	    eor r2,r2 
 1320 0a1e 40F8042B 	1:  str r2,[r0],#4 
 1321 0a22 8842     	    cmp r0,r1 
 1322 0a24 FBD4     	    bmi 1b 
 1323              	//copy initialized system variables to ram 
 1324 0a26 DFF82800 	    ldr r0,src_addr 
 1325 0a2a 2146     	    mov r1,UPP 
 1326 0a2c DFF82820 	    ldr r2,sysvar_size
 1327 0a30 00B5FFF7 	    _CALL cmove
 1327      FEFF5DF8 
 1327      04EB
 1328 0a3a 00B500F0 	    _CALL prt_version
 1328      0EF85DF8 
 1328      04EB
 1329 0a44 00B500F0 	    _CALL clear_basic  
 1329      5DF85DF8 
 1329      04EB
 1330 0a4e 9BE0     	    b warm_start    
 1331              	src_addr:
 1332 0a50 00000000 	  .word uzero
 1333              	dest_addr:
 1334 0a54 00000000 	  .word vectors_size
 1335 0a58 CC000000 	sysvar_size: .word ulast-uzero 
 1336              	
 1337              	/************************************
 1338              	    print firmware version 
 1339              	    input: 
 1340              	      none 
 1341              	    output:
 1342              	      none 
 1343              	    use:
 1344              	      r0 
 1345              	***********************************/
 1346              	    _FUNC prt_version 
ARM GAS  tinyBasic.s 			page 40


 1347 0a5c DFF8D005 	    ldr r0,=version_msg 
 1348 0a60 00B5FFF7 	    _CALL uart_puts
 1348      FEFF5DF8 
 1348      04EB
 1349 0a6a 9FF87800 	    ldrb r0,version 
 1350 0a6e 4FEA1010 	    lsr r0,#4 
 1351 0a72 00F13000 	    add r0,#'0' 
 1352 0a76 3A28     	    cmp r0,#'9'+1 
 1353 0a78 01D4     	    bmi 1f 
 1354 0a7a 00F10700 	    add r0,#7 
 1355              	  1:
 1356 0a7e 00B5FFF7 	    _CALL uart_putc 
 1356      FEFF5DF8 
 1356      04EB
 1357 0a88 4FF02E00 	    mov r0,#'. 
 1358 0a8c 00B5FFF7 	    _CALL uart_putc 
 1358      FEFF5DF8 
 1358      04EB
 1359 0a96 9FF84C00 	    ldrb r0,version 
 1360 0a9a 00F00F00 	    and r0,#15 
 1361 0a9e 00F13000 	    add r0,'0' 
 1362 0aa2 3A28     	    cmp r0,#'9'+1 
 1363 0aa4 01D4     	    bmi 1f 
 1364 0aa6 00F10700 	    add r0,#7
 1365              	  1: 
 1366 0aaa 00B5FFF7 	    _CALL uart_putc 
 1366      FEFF5DF8 
 1366      04EB
 1367 0ab4 4FF00D00 	    mov r0,#CR 
 1368 0ab8 00B5FFF7 	    _CALL uart_putc 
 1368      FEFF5DF8 
 1368      04EB
 1369 0ac2 7047     	    _RET  
 1370              	version_msg:
 1371 0ac4 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1371      65207069 
 1371      6C6C2074 
 1371      696E7920 
 1371      42415349 
 1372              	version:
 1373 0ae4 10       	    .byte 0x10 
 1374 0ae5 0000BF   	    .p2align 2 
 1375              	
 1376              	
 1377              	/*****************************
 1378              	    clear_vars 
 1379              	    initialize variables to 0
 1380              	  input:
 1381              	    none 
 1382              	  output:
 1383              	    none 
 1384              	  use:
 1385              	    r0,r1,r2 
 1386              	*****************************/
 1387              	    _FUNC clear_vars 
 1388 0ae8 07B4     	    push {r0,r1,r2}
 1389 0aea 80EA0000 	    eor r0,r0 
ARM GAS  tinyBasic.s 			page 41


 1390 0aee 04F16001 	    add r1,UPP,#VARS
 1391 0af2 4FF01A02 	    mov r2,#26
 1392 0af6 41F8040B 	1:  str r0,[r1],#4 
 1393 0afa 013A     	    subs r2,#1
 1394 0afc FBD1     	    bne 1b  
 1395 0afe 07BC     	    pop {r0,r1,r2}
 1396 0b00 7047     	    _RET 
 1397              	
 1398              	/*****************************
 1399              	   clear_basic 
 1400              	   reset BASIC system variables 
 1401              	   and clear variables and RAM 
 1402              	*****************************/
 1403 0b02 00BF     	    _FUNC clear_basic
 1404 0b04 80EA0000 	  	eor r0,r0
 1405 0b08 2064     	    str r0,[UPP,#FLAGS] 
 1406 0b0a 6060     	    str r0,[UPP,#COUNT]
 1407 0b0c 2060     	    str r0,[UPP,#IN_SAVED]
 1408 0b0e A060     	    str r0,[UPP,#BASICPTR]
 1409 0b10 E060     	    str r0,[UPP,#DATAPTR]
 1410 0b12 2061     	    str r0,[UPP,#DATA]
 1411 0b14 6061     	    str r0,[UPP,#DATALEN]
 1412 0b16 04F1CC00 	    add r0,UPP,#BASIC_START 
 1413 0b1a 00F11000 	    add r0,#16 
 1414 0b1e 6FF00F01 	    mvn r1,#15
 1415 0b22 00EA0100 	    and r0,r1 
 1416 0b26 2063     	    str r0,[UPP,#TXTBGN]
 1417 0b28 6063     	    str r0,[UPP,#TXTEND]
 1418 0b2a 00B5FFF7 	    _CALL clear_vars
 1418      DCFF5DF8 
 1418      04EB
 1419 0b34 206B     	    ldr r0,[UPP,#TXTBGN]
 1420 0b36 DFF83C10 	    ldr r1,tib 
 1421 0b3a 82EA0202 	    eor r2,r2 
 1422 0b3e 40F8042B 	1:  str r2,[r0],#4
 1423 0b42 8842     	    cmp r0,r1 
 1424 0b44 FBD4     	    bmi 1b 
 1425 0b46 7047     	    _RET  
 1426              	
 1427              	/***********************************
 1428              	   warm_init 
 1429              	   initialize interpreter context 
 1430              	  input:
 1431              	    none
 1432              	  output:
 1433              	    none 
 1434              	  use:
 1435              	    r0 
 1436              	***********************************/
 1437              	warm_init:
 1438              	// reset data stack       
 1439 0b48 DFF824C0 	    ldr DP,dstack 
 1440 0b4c 4FF0000A 	    mov IN,#0 // BASIC line index 
 1441 0b50 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1442 0b54 80EA0000 	    eor r0,r0 
 1443 0b58 6060     	    str r0,[UPP,#COUNT]  
 1444 0b5a 2064     	    str r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 42


 1445 0b5c A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1446 0b5e 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1447 0b62 6064     	    str r0,[UPP,#TAB_WIDTH]
 1448 0b64 4FF00A00 	    mov r0,#10 // default base decimal 
 1449 0b68 A061     	    str r0,[UPP,#BASE]
 1450 0b6a 7047     	    _RET  
 1451              	
 1452 0b6c 00000000 	mstack: .word _mstack 
 1453 0b70 00000000 	dstack: .word _dstack 
 1454 0b74 00000000 	tib: .word _tib 
 1455 0b78 00000000 	pad: .word _pad 
 1456 0b7c FCFFFFFF 	array: .word _pad - 4 
 1457 0b80 0A524541 	ready: .asciz "\nREADY" 
 1457      445900
 1458              	
 1459              	/**********************************
 1460              	    warm_start 
 1461              	    start BASIC interpreter doesn't  
 1462              	    reset variables and code space 
 1463              	  input:
 1464              	    none 
 1465              	  output:
 1466              	    none 
 1467              	**********************************/
 1468 0b87 00       	    _FUNC warm_start 
 1469              	// initialise parameters stack
 1470 0b88 FFF7DEFF 	    bl warm_init
 1471              	// reset main stack 
 1472 0b8c 5FF82400 	    ldr r0,mstack
 1473 0b90 8546     	    mov sp,r0 
 1474 0b92 DFF8A004 	    ldr r0,=ready 
 1475 0b96 00B5FFF7 	    _CALL uart_puts 
 1475      FEFF5DF8 
 1475      04EB
 1476              	// fall in cmd_line 
 1477              	
 1478              	/**********************************
 1479              	   cmd_line 
 1480              	   shell command line 
 1481              	   input:
 1482              	      none 
 1483              	   output:
 1484              	      none 
 1485              	   use:
 1486              	
 1487              	***********************************/
 1488              	    _FUNC cmd_line 
 1489 0ba0 4FF00D00 	    mov r0,#CR 
 1490 0ba4 00B5FFF7 	    _CALL uart_putc 
 1490      FEFF5DF8 
 1490      04EB
 1491 0bae 5FF83C00 	1:  ldr r0,tib
 1492 0bb2 4FF05001 	    mov r1,#TIB_SIZE 
 1493 0bb6 00B5FFF7 	    _CALL readln 
 1493      FEFF5DF8 
 1493      04EB
 1494 0bc0 0940     	    ands r1,r1 // empty line 
ARM GAS  tinyBasic.s 			page 43


 1495 0bc2 F4D0     	    beq 1b 
 1496 0bc4 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1496      2DFB5DF8 
 1496      04EB
 1497 0bce EED0     	    beq 1b  // tokens stored in text area 
 1498              	// interpret tokenized line 
 1499              	interpreter:
 1500 0bd0 00B500F0 	  _CALL next_token 
 1500      23F85DF8 
 1500      04EB
 1501 0bda 0028     	  cmp r0,#TK_NONE 
 1502 0bdc F8D0     	  beq interpreter   
 1503 0bde 0A28     	  cmp r0,#TK_CMD 
 1504 0be0 03D1     	  bne 2f
 1505 0be2 0846     	  mov r0,r1 
 1506 0be4 00F014F8 	  bl execute  
 1507 0be8 F2E7     	  b interpreter   
 1508              	2: 
 1509 0bea 0428     	  cmp r0,#TK_VAR 
 1510 0bec 05D1     	  bne 3f 
 1511 0bee 00B500F0 	  _CALL let_var 
 1511      2DFA5DF8 
 1511      04EB
 1512 0bf8 EAE7     	  b interpreter 
 1513              	3: 
 1514 0bfa 0528     	  cmp r0,#TK_ARRAY 
 1515 0bfc 05D1     	  bne 4f
 1516 0bfe 00B500F0 	  _CALL let_array 
 1516      33FA5DF8 
 1516      04EB
 1517 0c08 E2E7     	  b interpreter
 1518              	4: 
 1519 0c0a 0128     	  cmp r0,#TK_COLON
 1520 0c0c E0D0     	  beq interpreter
 1521 0c0e 1FE6     	  b syntax_error
 1522              	
 1523              	/*****************************
 1524              	    execute 
 1525              	    execute a BASIC routine from 
 1526              	    its token value 
 1527              	  input:
 1528              	    r0  BASIC SUB|FUNC token  
 1529              	  output: 
 1530              	    depend on SUB|FUNc
 1531              	*****************************/
 1532              	    _FUNC execute 
 1533 0c10 DFF82414 	    ldr r1,=fn_table 
 1534 0c14 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1535 0c18 0047     	    bx r0 
 1536              	
 1537              	/*************************************
 1538              	  next_token 
 1539              	  extract next token from token list 
 1540              	  input:
 1541              	    none 
 1542              	  output:
 1543              	    r0    token attribute
ARM GAS  tinyBasic.s 			page 44


 1544              	    r1    token value if there is one 
 1545              	  use:
 1546              	    T1    exit token type  
 1547              	****************************/
 1548 0c1a 00BF     	    _FUNC next_token 
 1549 0c1c 4DF8048D 	    push {T1}
 1550 0c20 88EA0808 	    eor T1,T1 // TK_NONE 
 1551 0c24 6068     	    ldr r0,[UPP,#COUNT]
 1552 0c26 8245     	    cmp IN,r0 
 1553 0c28 0FD4     	    bmi 0f
 1554              	new_line:
 1555 0c2a BBF80010 	    ldrh r1,[BPTR] // line #
 1556 0c2e 01B9     	    cbnz r1, end_of_line  // command line
 1557 0c30 AAE7     	    b warm_start
 1558              	end_of_line:        
 1559 0c32 8344     	    add BPTR,r0 // next line 
 1560 0c34 606B     	    ldr r0,[UPP,#TXTEND]
 1561 0c36 8345     	    cmp BPTR,r0 
 1562 0c38 A6D5     	    bpl warm_start // end of program
 1563 0c3a 9BF80200 	    ldrb r0,[BPTR,#2]
 1564 0c3e 6060     	    str r0,[UPP,#COUNT] 
 1565 0c40 4FF0030A 	    mov IN,#3
 1566 0c44 4FF00100 	    mov r0,#TK_COLON 
 1567 0c48 2AE0     	    b 9f    
 1568              	0: 
 1569 0c4a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1570 0c4e C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1571 0c52 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1572 0c56 0AF1010A 	    add IN,#1  
 1573 0c5a 8046     	    mov T1,r0 
 1574 0c5c 00F03F00 	    and r0,#0x3f // limit mask 
 1575 0c60 F649     	    ldr r1,=tok_jmp 
 1576 0c62 D1E800F0 	    tbb [r1,r0]
 1577              	1: // pc reference point 
 1578 0c66 1BE0     	    b 9f 
 1579              	2: // .byte param
 1580 0c68 1BF80A10 	    ldrb r1,[BPTR,IN]
 1581 0c6c 0AF1010A 	    add IN,#1 
 1582 0c70 16E0     	    b 9f 
 1583              	3: // .hword param 
 1584 0c72 3BF80A10 	    ldrh r1,[BPTR,IN]
 1585 0c76 0AF1020A 	    add IN,#2 
 1586 0c7a 11E0     	    b 9f 
 1587              	4: // .word param  
 1588 0c7c 5BF80A10 	    ldr r1,[BPTR,IN]
 1589 0c80 0AF1040A 	    add IN,#4
 1590 0c84 0CE0     	    b 9f 
 1591              	5: // .asciz param 
 1592 0c86 0BEB0A01 	    add r1,BPTR,IN 
 1593 0c8a 0846     	    mov r0,r1  
 1594 0c8c 00B5FFF7 	    _CALL strlen 
 1594      FEFF5DF8 
 1594      04EB
 1595 0c96 8244     	    add IN,r0
 1596 0c98 0AF1010A 	    add IN,#1
 1597 0c9c 00E0     	    b 9f  
 1598              	8: // syntax error 
ARM GAS  tinyBasic.s 			page 45


 1599 0c9e D7E5     	    b syntax_error 
 1600 0ca0 4046     	9:  mov r0,T1  
 1601 0ca2 5DF8048B 	    pop {T1}
 1602 0ca6 7047     	    _RET
 1603              	
 1604              	  .p2align 2
 1605              	tok_jmp: // token id  tbb offset 
 1606 0ca8 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1607 0caa 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1608 0cae 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1609 0cb2 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1610 0cb6 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1611 0cba 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1611      1C
 1612 0cbf 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1612      1C1C
 1613 0cc5 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1614 0cc8 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1615 0ccb 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1615      1C1C1C1C 
 1616 0cd3 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1616      1C1C
 1617 0cd9 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1617      1D1D
 1618 0cdf 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1618      1C1C1C1C 
 1618      1C
 1619              	
 1620              	  .p2align 2 
 1621              	
 1622              	/*********************************
 1623              	    expect 
 1624              	    check if next token is of 
 1625              	    expected type. If not 
 1626              	    call syntax_error  
 1627              	  input:
 1628              	      r0   token attribute
 1629              	  output:
 1630              	      r0  token attribute 
 1631              	      r1  token value
 1632              	  use:
 1633              	      T1   
 1634              	**********************************/
 1635              	    _FUNC expect 
 1636 0ce8 4DF8048D 	    push {T1}
 1637 0cec 8046     	    mov T1,r0 
 1638 0cee 00B5FFF7 	    _CALL next_token 
 1638      94FF5DF8 
 1638      04EB
 1639 0cf8 4045     	    cmp r0,T1  
 1640 0cfa 7FF4A9AD 	    bne syntax_error 
 1641 0cfe 5DF8048B 	    pop {T1}
 1642 0d02 7047     	    _RET 
 1643              	
 1644              	/***********************************
 1645              	    func_args 
 1646              	    get function arguments list 
ARM GAS  tinyBasic.s 			page 46


 1647              	  input:
 1648              	    none 
 1649              	  output:
 1650              	    r0    arg. count 
 1651              	  use:
 1652              	
 1653              	************************************/
 1654              	    _FUNC func_args 
 1655 0d04 4FF00600 	    mov r0,#TK_LPAREN 
 1656 0d08 00B5FFF7 	    _CALL expect 
 1656      EDFF5DF8 
 1656      04EB
 1657 0d12 00B500F0 	    _CALL arg_list 
 1657      0CF85DF8 
 1657      04EB
 1658 0d1c 01B4     	    push {r0}
 1659 0d1e 4FF00700 	    mov r0,#TK_RPAREN 
 1660 0d22 00B5FFF7 	    _CALL expect 
 1660      E0FF5DF8 
 1660      04EB
 1661 0d2c 01BC     	    pop {r0}
 1662 0d2e 7047     	    _RET 
 1663              	
 1664              	/**********************************
 1665              	    arg_list 
 1666              	    get arguments list on dstack 
 1667              	  input:
 1668              	    none 
 1669              	  output:
 1670              	    r0    arg count
 1671              	  use:
 1672              	    T1    tmp count  
 1673              	***********************************/
 1674              	    _FUNC arg_list 
 1675 0d30 4DF8048D 	    push {T1}
 1676 0d34 88EA0808 	    eor T1,T1 
 1677 0d38 00B500F0 	1:  _CALL expression 
 1677      C9F85DF8 
 1677      04EB
 1678 0d42 0028     	    cmp R0,#TK_NONE 
 1679 0d44 10D0     	    beq 9f 
 1680 0d46 0E28     	    cmp r0,#TK_INTGR
 1681 0d48 0ED1     	    bne 9f 
 1682 0d4a 4CF8041D 	    _PUSH r1 
 1683 0d4e 08F10108 	    add T1,#1 
 1684 0d52 00B5FFF7 	    _CALL next_token 
 1684      62FF5DF8 
 1684      04EB
 1685 0d5c 0828     	    cmp r0,#TK_COMMA 
 1686 0d5e EBD0     	    beq 1b 
 1687 0d60 D4F800A0 	    _UNGET_TOKEN 
 1687      D4F808B0 
 1688 0d68 4046     	9:  mov r0,T1 
 1689 0d6a 5DF8048B 	    pop {T1}
 1690 0d6e 7047     	    _RET 
 1691              	
 1692              	/***********************************
ARM GAS  tinyBasic.s 			page 47


 1693              	 factor
 1694              	 arithmetick factor parser 
 1695              	 factor ::= ['+'|'-'|e]  var | @ |
 1696              				 integer | function |
 1697              				 '('expression')' 
 1698              	  input: 
 1699              	    none 
 1700              	  output:
 1701              	    r0   token attribute 
 1702              	    r1   token value 
 1703              	  use:
 1704              	    r2   temp 
 1705              	    T1   sign 
 1706              	    T2   exit token attribute 
 1707              	***********************************/
 1708              	    _FUNC factor 
 1709 0d70 2DE90403 	    push {r2,T1,T2}
 1710 0d74 4FF00E09 	    mov T2,#TK_INTGR 
 1711 0d78 4FF00108 	    mov T1,#1 // default sign +  
 1712 0d7c 00B5FFF7 	    _CALL next_token
 1712      4DFF5DF8 
 1712      04EB
 1713 0d86 0246     	    mov r2,r0 
 1714 0d88 00F03000 	    and r0,#TK_GRP_MASK 
 1715 0d8c 1028     	    cmp r0,#TK_GRP_ADD
 1716 0d8e 1046     	    mov r0,r2
 1717 0d90 08D1     	    bne 1f 
 1718 0d92 1028     	    cmp r0,#TK_PLUS 
 1719 0d94 01D0     	    beq 0f 
 1720 0d96 4FF0FF38 	    mov T1,#-1 // minus sign 
 1721 0d9a 00B5FFF7 	0:  _CALL next_token
 1721      3EFF5DF8 
 1721      04EB
 1722 0da4 0E28     	1:  cmp r0,#TK_INTGR 
 1723 0da6 4ED0     	    beq 8f 
 1724 0da8 0528     	    cmp r0,#TK_ARRAY 
 1725 0daa 1ED1     	    bne 2f 
 1726 0dac 4FF00600 	    mov r0,#TK_LPAREN 
 1727 0db0 00B5FFF7 	    _CALL expect 
 1727      99FF5DF8 
 1727      04EB
 1728 0dba 00B500F0 	    _CALL expression
 1728      88F85DF8 
 1728      04EB
 1729 0dc4 0E28     	    cmp r0,#TK_INTGR
 1730 0dc6 7FF443AD 	    bne syntax_error
 1731 0dca 8146     	    mov T2,r0
 1732 0dcc 0A46     	    mov r2,r1  
 1733 0dce 4FF00700 	    mov r0,#TK_RPAREN
 1734 0dd2 00B5FFF7 	    _CALL expect 
 1734      88FF5DF8 
 1734      04EB
 1735 0ddc 1046     	    mov r0,r2 
 1736 0dde 00B500F0 	    _CALL get_array_element 
 1736      ECF85DF8 
 1736      04EB
 1737 0de8 2DE0     	    b 8f
ARM GAS  tinyBasic.s 			page 48


 1738 0dea 0628     	2:  cmp r0,#TK_LPAREN 
 1739 0dec 12D1     	    bne 3f 
 1740 0dee 00B500F0 	    _CALL expression 
 1740      6EF85DF8 
 1740      04EB
 1741 0df8 0E28     	    cmp r0,#TK_INTGR 
 1742 0dfa 7FF429AD 	    bne syntax_error
 1743 0dfe 8146     	    mov T2,r0
 1744 0e00 0A46     	    mov r2,r1   
 1745 0e02 4FF00700 	    mov r0,#TK_RPAREN
 1746 0e06 00B5FFF7 	    _CALL expect 
 1746      6EFF5DF8 
 1746      04EB
 1747 0e10 1146     	    mov r1,r2 
 1748 0e12 18E0     	    b 8f       
 1749 0e14 0428     	3:  cmp r0,#TK_VAR 
 1750 0e16 06D1     	    bne 4f
 1751 0e18 0846     	    mov r0,r1  
 1752 0e1a 00B500F0 	    _CALL get_var 
 1752      E2F85DF8 
 1752      04EB
 1753 0e24 0FE0     	    b 8f 
 1754 0e26 0B28     	4:  cmp r0,#TK_IFUNC 
 1755 0e28 06D1     	    bne 6f 
 1756 0e2a 0846     	5:  mov r0,r1  
 1757 0e2c 00B5FFF7 	    _CALL execute
 1757      EFFE5DF8 
 1757      04EB
 1758 0e36 06E0     	    b 8f 
 1759 0e38 D4F800A0 	6:  _UNGET_TOKEN      
 1759      D4F808B0 
 1760 0e40 4FF00000 	    mov r0,#TK_NONE
 1761 0e44 03E0     	    b 9f  
 1762 0e46 08FB01F1 	8:  mul r1,T1 
 1763 0e4a 5FEA0900 	    movs r0,T2 
 1764 0e4e BDE80403 	9:  pop {r2,T1,T2}   
 1765 0e52 7047     	    _RET 
 1766              	
 1767              	
 1768              	/*****************************************
 1769              	    term 
 1770              	    term parser 
 1771              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1772              	    output:
 1773              	      r0  	token attribute 
 1774              	      r1		integer
 1775              	    use:
 1776              	      r2    first operand 
 1777              	      r3    temp 
 1778              	      T1    operator 
 1779              	      T2    exit token attribute 
 1780              	******************************************/
 1781              	     _FUNC term 
 1782 0e54 2DE90C03 	    push {r2,r3,T1,T2}
 1783 0e58 4FF00009 	    mov T2,#TK_NONE 
 1784 0e5c 00B5FFF7 	    _CALL factor
 1784      87FF5DF8 
ARM GAS  tinyBasic.s 			page 49


 1784      04EB
 1785 0e66 60B3     	    cbz r0, 9f  // no factor   
 1786 0e68 8146     	    mov T2,r0  // TK_INTGR 
 1787 0e6a 0A46     	    mov r2,r1 // first factor    
 1788 0e6c 00B5FFF7 	0:  _CALL next_token
 1788      D5FE5DF8 
 1788      04EB
 1789 0e76 0346     	    mov r3,r0   
 1790 0e78 00F03000 	    and r0,#TK_GRP_MASK 
 1791 0e7c 2028     	    cmp r0,#TK_GRP_MULT
 1792 0e7e 04D0     	    beq 1f
 1793 0e80 D4F800A0 	    _UNGET_TOKEN
 1793      D4F808B0 
 1794 0e88 1BE0     	    b 9f 
 1795 0e8a 9846     	1:  mov T1,r3 
 1796 0e8c 00B5FFF7 	    _CALL factor  
 1796      6FFF5DF8 
 1796      04EB
 1797 0e96 3FF4DBAC 	    beq syntax_error 
 1798 0e9a B8F1200F 	    cmp T1,#TK_MULT
 1799 0e9e 02D1     	    bne 2f 
 1800              	// multiplication
 1801 0ea0 01FB02F2 	    mul r2,r1
 1802 0ea4 E2E7     	    b 0b  
 1803 0ea6 B8F1210F 	2:  cmp T1,#TK_DIV 
 1804 0eaa 02D1     	    bne 3f
 1805              	// division
 1806 0eac 92FBF1F2 	    sdiv r2,r2,r1
 1807 0eb0 DCE7     	    b 0b  
 1808              	3: // modulo
 1809 0eb2 1046     	    mov r0,r2 
 1810 0eb4 92FBF1F2 	    sdiv r2,r2,r1 
 1811 0eb8 01FB02F2 	    mul  r2,r1 
 1812 0ebc A0EB0202 	    sub  r2,r0,r2
 1813 0ec0 D4E7     	    b 0b  
 1814 0ec2 1146     	9:  mov r1,r2 
 1815 0ec4 5FEA0900 	    movs r0,T2 
 1816 0ec8 BDE80C03 	    pop {r2,r3,T1,T2}
 1817 0ecc 7047     	    _RET 
 1818              	
 1819              	/*****************************************
 1820              	    expression 
 1821              	    arithmetic expression parser 
 1822              	    expression ::= term [['+'|'-'] term]*
 1823              	    result range {-32768..32767}
 1824              	    output:
 1825              	      r0    TK_NONE || TK_INTGR 
 1826              	      r1 	  integer
 1827              	    use:
 1828              	      r2  left operand 
 1829              	      T1  operator 
 1830              	      T2  exit token attribute
 1831              	******************************************/
 1832 0ece 00BF     	    _FUNC expression 
 1833 0ed0 2DE90403 	    push {r2,t1,t2}
 1834 0ed4 4FF00009 	    mov T2,#TK_NONE
 1835 0ed8 82EA0202 	    eor r2,r2 // zero 
ARM GAS  tinyBasic.s 			page 50


 1836 0edc 00B5FFF7 	    _CALL term 
 1836      B9FF5DF8 
 1836      04EB
 1837 0ee6 21D0     	    beq 9f  // no term  
 1838 0ee8 0A46     	    mov r2,r1 // first term
 1839 0eea 4FF00E09 	    mov T2,#TK_INTGR    
 1840 0eee 00B5FFF7 	1:  _CALL next_token 
 1840      94FE5DF8 
 1840      04EB
 1841 0ef8 8046     	    mov T1,r0 // token attribute 
 1842 0efa 00F03000 	    and r0,#TK_GRP_MASK 
 1843 0efe 1028     	    cmp r0,#TK_GRP_ADD 
 1844 0f00 04D0     	    beq 3f 
 1845 0f02 D4F800A0 	    _UNGET_TOKEN
 1845      D4F808B0 
 1846 0f0a 0FE0     	    b 9f  
 1847 0f0c 00B5FFF7 	3:  _CALL term 
 1847      A1FF5DF8 
 1847      04EB
 1848 0f16 0E28     	    cmp r0,#TK_INTGR 
 1849 0f18 7FF49AAC 	    bne syntax_error 
 1850 0f1c B8F1100F 	    cmp T1,#TK_PLUS 
 1851 0f20 02D0     	    beq 4f 
 1852 0f22 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1853 0f26 E2E7     	    b 1b 
 1854 0f28 0A44     	4:  add r2,r2,r1 // N1+N2
 1855 0f2a E0E7     	    b 1b
 1856 0f2c 4846     	9:  mov r0,T2 
 1857 0f2e 1146     	    mov r1,r2 
 1858 0f30 BDE80403 	    pop {r2,t1,t2}
 1859 0f34 7047     	    _RET 
 1860              	
 1861              	
 1862              	/**********************************************
 1863              	    relation parser 
 1864              	    rel ::= expr1 rel_op expr2
 1865              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1866              	    relation return  integer , zero is false 
 1867              	    output:
 1868              	        r0	TK_INTGR  
 1869              	        r1	integer 
 1870              	    use:
 1871              	        r2   first operand 
 1872              	        T1   relop   
 1873              	**********************************************/
 1874 0f36 00BF     	    _FUNC relation 
 1875 0f38 2DE90401 	    push {r2,T1}
 1876 0f3c 00B5FFF7 	    _CALL expression 
 1876      C7FF5DF8 
 1876      04EB
 1877 0f46 0E28     	    cmp r0,#TK_INTGR 
 1878 0f48 7FF482AC 	    bne syntax_error 
 1879 0f4c 0A46     	    mov r2,r1  // first operand  
 1880 0f4e 00B5FFF7 	    _CALL next_token 
 1880      64FE5DF8 
 1880      04EB
 1881 0f58 8046     	    mov T1,r0  // relop  
ARM GAS  tinyBasic.s 			page 51


 1882 0f5a 00F03000 	    and r0,#TK_GRP_MASK 
 1883 0f5e 3028     	    cmp r0,#TK_GRP_RELOP 
 1884 0f60 1DD1     	    bne 8f  // single operand 
 1885 0f62 00B5FFF7 	    _CALL expression 
 1885      B4FF5DF8 
 1885      04EB
 1886 0f6c 0E28     	    cmp r0,#TK_INTGR 
 1887 0f6e 7FF46FAC 	    bne syntax_error 
 1888 0f72 8A42     	    cmp r2,r1 // compare operands  
 1889 0f74 4FF0FF31 	    mov r1,#-1 
 1890 0f78 314A     	    ldr r2,=relop_jmp
 1891 0f7a 08F00708 	    and T1,#7 // {1..6}
 1892 0f7e D2E808F0 	    tbb [r2,T1]    
 1893              	rel_idx0:
 1894              	rel_eq:
 1895 0f82 11D0     	    beq 9f 
 1896 0f84 08E0     	    b rel_false
 1897              	rel_lt: 
 1898 0f86 0FDB     	    blt 9f   
 1899 0f88 06E0     	    b rel_false 
 1900              	rel_le:
 1901 0f8a 0DDD     	    ble 9f  
 1902 0f8c 04E0     	    b rel_false 
 1903              	rel_gt:
 1904 0f8e 0BDC     	    bgt 9f  
 1905 0f90 02E0     	    b rel_false  
 1906              	rel_ge:
 1907 0f92 09DA     	    bge 9f  
 1908 0f94 00E0     	    b rel_false  
 1909              	rel_diff:
 1910 0f96 07D1     	    bne 9f 
 1911              	rel_false:    
 1912 0f98 81EA0101 	    eor r1,r1  // false
 1913 0f9c 04E0     	    b 9f  
 1914 0f9e D4F800A0 	8:  _UNGET_TOKEN 
 1914      D4F808B0 
 1915 0fa6 1146     	    mov r1,r2    
 1916 0fa8 4FF00E00 	9:  mov r0,#TK_INTGR
 1917 0fac BDE80401 	    pop {r2,T1}
 1918 0fb0 7047     	    _RET 
 1919              	
 1920              	
 1921              	relop_jmp: 
 1922 0fb2 00       	  .byte 0 
 1923 0fb3 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1924 0fb4 00       	  .byte 0 // =
 1925 0fb5 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1926 0fb6 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1927 0fb7 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1928 0fb8 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1929              	
 1930              	
 1931              	/***********************************
 1932              	    get_array_element
 1933              	    return value of @(n)
 1934              	  input:
 1935              	    r0    indice 
ARM GAS  tinyBasic.s 			page 52


 1936              	  output:
 1937              	    r0   TK_INTGR
 1938              	    r1   value  
 1939              	************************************/
 1940 0fb9 0000BF   	    _FUNC get_array_element 
 1941 0fbc D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1942 0fc0 4FEA8000 	    lsl r0,#2 
 1943 0fc4 C0EB0100 	    rsb r0,r1 
 1944 0fc8 0168     	    ldr r1,[r0]
 1945 0fca 4FF00E00 	    mov r0,#TK_INTGR 
 1946 0fce 7047     	    _RET 
 1947              	
 1948              	
 1949              	/***********************************
 1950              	    set_array_element 
 1951              	    set value of array element 
 1952              	  input:
 1953              	    r0   index 
 1954              	    r1   new value 
 1955              	  output:
 1956              	    none
 1957              	  use:
 1958              	    r2    array pointer 
 1959              	**********************************/
 1960              	    _FUNC set_array_element 
 1961 0fd0 04B4     	    push {r2}
 1962 0fd2 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1963 0fd6 4FEA8000 	    lsl r0,#2 
 1964 0fda A1EB0001 	    sub r1,r0 
 1965 0fde 0960     	    str r1,[r1]
 1966 0fe0 04BC     	    pop {r2}
 1967 0fe2 7047     	    _RET 
 1968              	
 1969              	/***********************************
 1970              	   get_var 
 1971              	   get variable value 
 1972              	  input:
 1973              	     r0    variable index {0..25}
 1974              	  output:
 1975              	     r0    TK_INTGR
 1976              	     r1    value 
 1977              	**********************************/
 1978              	    _FUNC get_var 
 1979 0fe4 04F16001 	    add r1,UPP,#VARS
 1980 0fe8 4FEA8000 	    lsl r0,#2 
 1981 0fec 0958     	    ldr r1,[r1,r0]
 1982 0fee 4FF00E00 	    mov r0,#TK_INTGR
 1983 0ff2 7047     	    _RET 
 1984              	
 1985              	/*********************************
 1986              	    set_var 
 1987              	    set variable value 
 1988              	  input:
 1989              	     r0    variable index {0..25}
 1990              	     r1    new value 
 1991              	  output:
 1992              	    none 
ARM GAS  tinyBasic.s 			page 53


 1993              	  use:
 1994              	    r2   vars pointer 
 1995              	*********************************/
 1996              	    _FUNC set_var 
 1997 0ff4 04B4     	    push {r2}
 1998 0ff6 226E     	    ldr r2,[UPP,#VARS]
 1999 0ff8 4FEA8000 	    lsl r0,#2
 2000 0ffc 1150     	    str r1,[r2,r0]
 2001 0ffe 04BC     	    pop {r2}
 2002 1000 7047     	    _RET 
 2003              	
 2004              	/******************************
 2005              	    CONSTANTS data
 2006              	******************************/
 2007              	
 2008 1002 0000     	  .section .rodata 
 2009              	
 2010              	// system variables initial value 
 2011              	uzero:
 2012 0000 00000000 	  .word 0 // IN_SAVED
 2013 0004 00000000 	  .word 0 // COUNT
 2014 0008 00000000 	  .word 0 // BASICPTR
 2015 000c 00000000 	  .word 0 // DATAPTR
 2016 0010 00000000 	  .word 0 // DATA
 2017 0014 00000000 	  .word 0 // DATALEN
 2018 0018 0A000000 	  .word 10 // BASE
 2019 001c 00000000 	  .word 0 // TICKS
 2020 0020 00000000 	  .word 0 // TIMER
 2021 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2022 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2023 002c 00000000 	  .word 0 // FFREE
 2024 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2025 0034 CC000000 	  .word ulast-uzero // TXTEND
 2026 0038 00000000 	  .word 0 //LOOP_DEPTH
 2027 003c 00000000 	  .word 0 // ARRAY_SIZE
 2028 0040 00000000 	  .word 0 // FLAGS
 2029 0044 04000000 	  .word 4 // TAB_WIDTH
 2030 0048 00000000 	  .word 0 // RX_HEAD
 2031 004c 00000000 	  .word 0 // RX_TAIL
 2032 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2032      00000000 
 2032      00000000 
 2032      00000000 
 2033 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2033      00000000 
 2033      00000000 
 2033      00000000 
 2033      00000000 
 2034 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2035              	ulast:
 2036              	
 2037              	  .section .rodata.dictionary 
 2038              	
 2039              	// keep alphabetic order for BASIC names from Z-A
 2040              	// this sort order is for for WORDS cmd output. 	
 2041              	
 2042              		.equ link, 0
ARM GAS  tinyBasic.s 			page 54


 2043              	kword_end:
 2044 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2044      00000000 
 2044      00000000 
 2044      00000000 
 2045 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2045      64000000 
 2045      0A000000 
 2045      5854524D 
 2045      54000000 
 2046 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2046      65000000 
 2046      0A000000 
 2046      58524356 
 2046      00000000 
 2047 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2047      63000000 
 2047      0B000000 
 2047      584F5200 
 2048 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2048      62000000 
 2048      0A000000 
 2048      57524954 
 2048      45000000 
 2049 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2049      61000000 
 2049      0A000000 
 2049      574F5244 
 2049      53000000 
 2050 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2050      60000000 
 2050      0A000000 
 2050      57414954 
 2050      00000000 
 2051 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2051      5F000000 
 2051      0B000000 
 2051      55535200 
 2052 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2052      5E000000 
 2052      0A000000 
 2052      554E5449 
 2052      4C000000 
 2053 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2053      5D000000 
 2053      0B000000 
 2053      55464C41 
 2053      53480000 
 2054 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2054      5C000000 
 2054      0B000000 
 2054      55424F55 
 2054      4E440000 
 2055 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2055      5B000000 
 2055      0A000000 
 2055      544F4E45 
ARM GAS  tinyBasic.s 			page 55


 2055      00000000 
 2056 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2056      5A000000 
 2056      0A000000 
 2056      544F0000 
 2057 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2057      58000000 
 2057      0A000000 
 2057      54494D45 
 2057      52000000 
 2058 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2058      59000000 
 2058      0B000000 
 2058      54494D45 
 2058      4F555400 
 2059 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2059      57000000 
 2059      0B000000 
 2059      5449434B 
 2059      53000000 
 2060 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2060      56000000 
 2060      0A000000 
 2060      53544F50 
 2060      00000000 
 2061 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2061      55000000 
 2061      0A000000 
 2061      53544550 
 2061      00000000 
 2062 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2062      54000000 
 2062      0A000000 
 2062      53504957 
 2062      52000000 
 2063 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2063      53000000 
 2063      0A000000 
 2063      53504953 
 2063      454C0000 
 2064 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2064      51000000 
 2064      0B000000 
 2064      53504952 
 2064      44000000 
 2065 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2065      52000000 
 2065      0A000000 
 2065      53504945 
 2065      4E000000 
 2066 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2066      50000000 
 2066      0A000000 
 2066      534C4545 
 2066      50000000 
 2067 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2067      4F000000 
ARM GAS  tinyBasic.s 			page 56


 2067      0B000000 
 2067      53495A45 
 2067      00000000 
 2068 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2068      4E000000 
 2068      0A000000 
 2068      53484F57 
 2068      00000000 
 2069 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2069      4D000000 
 2069      0A000000 
 2069      53415645 
 2069      00000000 
 2070 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2070      4C000000 
 2070      0A000000 
 2070      52554E00 
 2071 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2071      4B000000 
 2071      0B000000 
 2071      52534849 
 2071      46540000 
 2072 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2072      4A000000 
 2072      0B000000 
 2072      524E4400 
 2073 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2073      49000000 
 2073      0A000000 
 2073      52455455 
 2073      524E0000 
 2074 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2074      48000000 
 2074      0A000000 
 2074      52455354 
 2074      4F524500 
 2075 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2075      47000000 
 2075      0A000000 
 2075      52454D41 
 2075      524B0000 
 2076 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 2076      46000000 
 2076      0A000000 
 2076      5245424F 
 2076      4F540000 
 2077 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2077      45000000 
 2077      0B000000 
 2077      52454144 
 2077      00000000 
 2078 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2078      44000000 
 2078      0B000000 
 2078      514B4559 
 2078      00000000 
 2079 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
ARM GAS  tinyBasic.s 			page 57


 2079      43000000 
 2079      0B000000 
 2079      50525449 
 2079      00000000 
 2080 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 2080      42000000 
 2080      0B000000 
 2080      50525448 
 2080      00000000 
 2081 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 2081      41000000 
 2081      0B000000 
 2081      50525447 
 2081      00000000 
 2082 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 2082      40000000 
 2082      0B000000 
 2082      50525446 
 2082      00000000 
 2083 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 2083      3F000000 
 2083      0B000000 
 2083      50525445 
 2083      00000000 
 2084 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 2084      3E000000 
 2084      0B000000 
 2084      50525444 
 2084      00000000 
 2085 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 2085      3D000000 
 2085      0B000000 
 2085      50525443 
 2085      00000000 
 2086 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2086      3C000000 
 2086      0B000000 
 2086      50525442 
 2086      00000000 
 2087 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2087      3B000000 
 2087      0B000000 
 2087      50525441 
 2087      00000000 
 2088 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2088      3A000000 
 2088      0A000000 
 2088      5052494E 
 2088      54000000 
 2089 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2089      39000000 
 2089      0B000000 
 2089      504F5554 
 2089      00000000 
 2090 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2090      38000000 
 2090      0A000000 
ARM GAS  tinyBasic.s 			page 58


 2090      504F4B45 
 2090      00000000 
 2091 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2091      35000000 
 2091      0A000000 
 2091      504D4F44 
 2091      45000000 
 2092 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2092      37000000 
 2092      0B000000 
 2092      50494E50 
 2092      00000000 
 2093 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2093      36000000 
 2093      0B000000 
 2093      5045454B 
 2093      00000000 
 2094 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2094      34000000 
 2094      0A000000 
 2094      50415553 
 2094      45000000 
 2095 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2095      33000000 
 2095      0B000000 
 2095      50414400 
 2096 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2096      32000000 
 2096      0B000000 
 2096      4F520000 
 2097 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2097      31000000 
 2097      0B000000 
 2097      4F445200 
 2098 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2098      30000000 
 2098      0B000000 
 2098      4E4F5400 
 2099 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2099      2E000000 
 2099      0A000000 
 2099      4E455854 
 2099      00000000 
 2100 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2100      2F000000 
 2100      0A000000 
 2100      4E455700 
 2101 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2101      2D000000 
 2101      0B000000 
 2101      4D554C44 
 2101      49560000 
 2102 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2102      2C000000 
 2102      0B000000 
 2102      4C534849 
 2102      46540000 
ARM GAS  tinyBasic.s 			page 59


 2103 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2103      2B000000 
 2103      0B000000 
 2103      4C4F4700 
 2104 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2104      2A000000 
 2104      0A000000 
 2104      4C4F4144 
 2104      00000000 
 2105 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2105      29000000 
 2105      0A000000 
 2105      4C495354 
 2105      00000000 
 2106 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2106      28000000 
 2106      0A000000 
 2106      4C455400 
 2107 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2107      27000000 
 2107      0B000000 
 2107      4B455900 
 2108 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2108      26000000 
 2108      0A000000 
 2108      49574447 
 2108      52454600 
 2109 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2109      25000000 
 2109      0A000000 
 2109      49574447 
 2109      454E0000 
 2110 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2110      24000000 
 2110      0B000000 
 2110      494E5645 
 2110      52540000 
 2111 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2111      23000000 
 2111      0A000000 
 2111      494E5055 
 2111      54000000 
 2112 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2112      22000000 
 2112      0A000000 
 2112      49460000 
 2113 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2113      21000000 
 2113      0B000000 
 2113      49445200 
 2114 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2114      20000000 
 2114      0A000000 
 2114      48455800 
 2115 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2115      1F000000 
 2115      0B000000 
ARM GAS  tinyBasic.s 			page 60


 2115      4750494F 
 2115      00000000 
 2116 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2116      1E000000 
 2116      0A000000 
 2116      474F544F 
 2116      00000000 
 2117 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2117      1D000000 
 2117      0A000000 
 2117      474F5355 
 2117      42000000 
 2118 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2118      1C000000 
 2118      0A000000 
 2118      464F5247 
 2118      45540000 
 2119 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2119      1B000000 
 2119      0A000000 
 2119      464F5200 
 2120 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 2120      1A000000 
 2120      0A000000 
 2120      46435055 
 2120      00000000 
 2121 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2121      18000000 
 2121      0A000000 
 2121      454E4400 
 2122 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2122      19000000 
 2122      0B000000 
 2122      45455052 
 2122      4F4D0000 
 2123 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2123      17000000 
 2123      0A000000 
 2123      44575249 
 2123      54450000 
 2124 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2124      66000000 
 2124      0A000000 
 2124      44554D50 
 2124      00000000 
 2125 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2125      16000000 
 2125      0B000000 
 2125      44524541 
 2125      44000000 
 2126 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2126      15000000 
 2126      0A000000 
 2126      444F0000 
 2127 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2127      14000000 
 2127      0A000000 
ARM GAS  tinyBasic.s 			page 61


 2127      44495200 
 2128 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2128      13000000 
 2128      0A000000 
 2128      44454300 
 2129 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2129      12000000 
 2129      0B000000 
 2129      44445200 
 2130 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2130      11000000 
 2130      0A000000 
 2130      44415441 
 2130      4C4E0000 
 2131 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2131      10000000 
 2131      0A000000 
 2131      44415441 
 2131      00000000 
 2132 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2132      0F000000 
 2132      0B000000 
 2132      43524C00 
 2133 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2133      0E000000 
 2133      0B000000 
 2133      43524800 
 2134 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2134      0D000000 
 2134      0C000000 
 2134      43484152 
 2134      00000000 
 2135 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2135      0C000000 
 2135      0A000000 
 2135      42594500 
 2136 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2136      0B000000 
 2136      0A000000 
 2136      42544F47 
 2136      4C000000 
 2137 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2137      0A000000 
 2137      0B000000 
 2137      42544553 
 2137      54000000 
 2138 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2138      09000000 
 2138      0A000000 
 2138      42534554 
 2138      00000000 
 2139 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2139      08000000 
 2139      0A000000 
 2139      42524553 
 2139      00000000 
 2140 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
ARM GAS  tinyBasic.s 			page 62


 2140      07000000 
 2140      0B000000 
 2140      42495400 
 2141 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2141      06000000 
 2141      0A000000 
 2141      41575500 
 2142 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2142      05000000 
 2142      0A000000 
 2142      4155544F 
 2142      52554E00 
 2143 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2143      04000000 
 2143      0B000000 
 2143      41534300 
 2144 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2144      03000000 
 2144      0B000000 
 2144      414E4400 
 2145 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2145      02000000 
 2145      0B000000 
 2145      41444352 
 2145      45414400 
 2146 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2146      01000000 
 2146      0A000000 
 2146      4144434F 
 2146      4E000000 
 2147              	first_link: 
 2148 0794 8C070000 	  .word LINK 
 2149 0798 00000000 	  .word ABS_IDX 
 2150 079c 0B000000 	  .word TK_IFUNC
 2151              	kword_dict: // first name field 
 2152              	  .equ LINK,. 
 2153 07a0 41425300 	  .asciz "ABS" 
 2154              	  .p2align 2 
 2155              	
 2156              	    .section .rodata.fn_tabld 
 2157              	
 2158              	//comands and fonctions address table 	
 2159              	fn_table:
 2160 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2160      00000000 
 2160      00000000 
 2160      00000000 
 2160      00000000 
 2161 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2161      00000000 
 2161      00000000 
 2161      00000000 
 2161      00000000 
 2162 003c 00000000 		.word const_cr1,skip_line,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_writ
 2162      00000000 
 2162      00000000 
 2162      00000000 
ARM GAS  tinyBasic.s 			page 63


 2162      00000000 
 2163 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2163      00000000 
 2163      00000000 
 2163      00000000 
 2163      00000000 
 2164 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2164      00000000 
 2164      00000000 
 2164      00000000 
 2164      00000000 
 2165 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2165      00000000 
 2165      00000000 
 2165      00000000 
 2165      00000000 
 2166 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2166      00000000 
 2166      00000000 
 2166      00000000 
 2166      00000000 
 2167 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2167      00000000 
 2167      00000000 
 2167      00000000 
 2167      00000000 
 2168 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,skip_line // 64..71 
 2168      00000000 
 2168      00000000 
 2168      00000000 
 2168      00000000 
 2169 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2169      00000000 
 2169      00000000 
 2169      00000000 
 2169      00000000 
 2170 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2170      00000000 
 2170      00000000 
 2170      00000000 
 2170      00000000 
 2171 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2171      00000000 
 2171      00000000 
 2171      00000000 
 2171      00000000 
 2172 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2172      00000000 
 2172      00000000 
 2172      00000000 
 2172      00000000 
 2173 019c 00000000 		.word 0 
 2174              	
 2175              	
 2176              	/**********************************
 2177              	    BASIC commands and functions 
 2178              	**********************************/
ARM GAS  tinyBasic.s 			page 64


 2179              	
 2180              	    .section .text.basic , "ax", %progbits 
 2181              	
 2182              	
 2183              	/*******************************
 2184              	  BASIC:  ABS expr 
 2185              	  input:
 2186              	    none 
 2187              	  output:
 2188              	    r0    token type 
 2189              	    r1    abs(expr)
 2190              	  use:
 2191              	    none 
 2192              	******************************/
 2193              	    _FUNC abs 
 2194 0000 00B5FFF7 	    _CALL arg_list
 2194      FEFF5DF8 
 2194      04EB
 2195 000a 0128     	    cmp r0,#1 
 2196 000c 01D0     	    beq 1f 
 2197 000e FFF7FEBF 	    b syntax_error 
 2198 0012 5CF8041B 	1:  _POP r1 
 2199 0016 11F0004F 	    tst r1,#(1<<31)
 2200 001a 01D0     	    beq 9f
 2201 001c C1F10001 	    rsb r1,#0 
 2202 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2203 0024 7047     	   _RET 
 2204              	
 2205 0026 00BF     	    _FUNC power_adc
 2206 0028 7047     	    _RET
 2207              	
 2208 002a 00BF     	    _FUNC analog_read
 2209 002c 7047     	    _RET
 2210              	
 2211              	/************************************
 2212              	  BASIC: AND(expr1,expr2)
 2213              	  logical ANND bit to between expr1,expr2
 2214              	************************************/
 2215 002e 00BF     	    _FUNC bit_and
 2216 0030 00B5FFF7 	    _CALL func_args 
 2216      FEFF5DF8 
 2216      04EB
 2217 003a 0228     	    cmp r0,#2 
 2218 003c 7FF4FEAF 	    bne syntax_error 
 2219 0040 5CF8040B 	    _POP r0 
 2220 0044 5CF8041B 	    _POP r1 
 2221 0048 01EA0001 	    and r1,r0 
 2222 004c 4FF00E00 	    mov r0,#TK_INTGR
 2223 0050 7047     	    _RET
 2224              	
 2225              	/*******************************************
 2226              	  BASIC: ASC(string|char)
 2227              	  return ASCII code of char of first char 
 2228              	  of string 
 2229              	*******************************************/
 2230 0052 00BF     	    _FUNC ascii
 2231 0054 4FF00600 	    mov r0,#TK_LPAREN 
ARM GAS  tinyBasic.s 			page 65


 2232 0058 00B5FFF7 	    _CALL expect 
 2232      FEFF5DF8 
 2232      04EB
 2233 0062 00B5FFF7 	    _CALL next_token 
 2233      FEFF5DF8 
 2233      04EB
 2234 006c 0228     	    cmp r0,#TK_QSTR
 2235 006e 03D0     	    beq 2f 
 2236 0070 0328     	    cmp r0,#TK_CHAR 
 2237 0072 7FF4FEAF 	    bne syntax_error 
 2238 0076 00E0     	    b 9f 
 2239 0078 0978     	2:  ldrb r1,[r1]
 2240 007a 4CF8041D 	9:  _PUSH r1 
 2241 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2242 0082 00B5FFF7 	    _CALL expect 
 2242      FEFF5DF8 
 2242      04EB
 2243 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2244 0090 5CF8041B 	    _POP r1 
 2245 0094 7047     	    _RET
 2246              	
 2247 0096 00BF     	    _FUNC autorun
 2248 0098 7047     	    _RET
 2249              	
 2250 009a 00BF     	    _FUNC awu
 2251 009c 7047     	    _RET
 2252              	
 2253 009e 00BF     	    _FUNC bitmask
 2254 00a0 7047     	    _RET 
 2255              	
 2256              	  
 2257              	  /*********************************
 2258              	   BASIC: BRES adr, mask   
 2259              	   reset bits [adr]= [adr] & ~mask  
 2260              	   input:
 2261              	     none 
 2262              	    output;
 2263              	      none 
 2264              	    use:
 2265              	      T1   temp
 2266              	      T2   temp 
 2267              	*******************************/     
 2268 00a2 00BF     	  _FUNC bit_reset
 2269 00a4 00B5FFF7 	    _CALL arg_list 
 2269      FEFF5DF8 
 2269      04EB
 2270 00ae 0228     	    cmp r0,#2 
 2271 00b0 01D0     	    beq 1f 
 2272 00b2 FFF7FEBF 	    b syntax_error 
 2273 00b6 5CF8041B 	1:  _POP r1 //mask 
 2274 00ba 5CF8040B 	    _POP r0 //address 
 2275 00be D0F80090 	    ldr T2,[r0] 
 2276 00c2 81F0FF31 	    eor r1,#-1 // ~mask 
 2277 00c6 01EA0901 	    and r1,T2
 2278 00ca 0160     	    str r1,[r0]
 2279 00cc 7047     	    _RET  
 2280              	
ARM GAS  tinyBasic.s 			page 66


 2281              	
 2282              	/*********************************
 2283              	   BASIC: BSET adr, mask   
 2284              	   reset bits [adr]= [adr] & ~mask  
 2285              	   input:
 2286              	      none 
 2287              	    output;
 2288              	      none 
 2289              	    use:
 2290              	      T1   temp
 2291              	      T2   temp  
 2292              	*******************************/     
 2293 00ce 00BF     	    _FUNC bit_set
 2294 00d0 00B5FFF7 	    _CALL arg_list 
 2294      FEFF5DF8 
 2294      04EB
 2295 00da 0228     	    cmp r0,#2 
 2296 00dc 01D0     	    beq 1f 
 2297 00de FFF7FEBF 	    b syntax_error 
 2298 00e2 5CF8041B 	1:  _POP r1 //mask 
 2299 00e6 5CF8040B 	    _POP r0 //address 
 2300 00ea D0F80090 	    ldr T2,[r0] 
 2301 00ee 41EA0901 	    orr r1,T2
 2302 00f2 0160     	    str r1,[r0]
 2303 00f4 7047     	    _RET 
 2304              	
 2305              	  /*********************************
 2306              	   BASIC: BTOGL adr, mask   
 2307              	   reset bits [adr]= [adr] & ~mask  
 2308              	   input:
 2309              	     r0    adr 
 2310              	     r1    mask 
 2311              	    output;
 2312              	      none 
 2313              	    use:
 2314              	      T1   temp
 2315              	      T2   temp  
 2316              	*******************************/     
 2317 00f6 00BF     	  _FUNC bit_toggle
 2318 00f8 00B5FFF7 	    _CALL arg_list 
 2318      FEFF5DF8 
 2318      04EB
 2319 0102 0228     	    cmp r0,#2 
 2320 0104 01D0     	    beq 1f 
 2321 0106 FFF7FEBF 	    b syntax_error 
 2322 010a 5CF8041B 	1:  _POP r1 //mask 
 2323 010e 5CF8040B 	    _POP r0 //address 
 2324 0112 D0F80090 	    ldr T2,[r0] 
 2325 0116 81EA0901 	    eor r1,T2
 2326 011a 0160     	    str r1,[r0]
 2327 011c 7047     	    _RET  
 2328              	
 2329              	/********************************
 2330              	  BASIC: BTEST(addr,bit)
 2331              	  return bit state at address
 2332              	********************************/
 2333 011e 00BF     	    _FUNC bit_test
ARM GAS  tinyBasic.s 			page 67


 2334 0120 00B5FFF7 	    _CALL func_args
 2334      FEFF5DF8 
 2334      04EB
 2335 012a 0228     	    cmp r0,#2 
 2336 012c 7FF4FEAF 	    bne syntax_error 
 2337 0130 5CF8041B 	    _POP r1
 2338 0134 4FF00100 	    mov r0,#1
 2339 0138 01F01F01 	    and r1,#31  
 2340 013c 21B1     	1:  cbz r1, 2f
 2341 013e 4FEA4000 	    lsl r0,#1
 2342 0142 A1F10101 	    sub r1,#1
 2343 0146 F9E7     	    b 1b 
 2344 0148 5CF8041B 	2:  _POP r1
 2345 014c 0968     	    ldr r1,[r1]
 2346 014e 01EA0001 	    and r1,r0 
 2347 0152 09B1     	    cbz r1,9f 
 2348 0154 4FF00101 	    mov r1,#1
 2349 0158 4FF00E00 	9:  mov r0,#TK_INTGR    
 2350 015c 7047     	    _RET 
 2351              	
 2352 015e 00BF     	    _FUNC bye
 2353 0160 7047     	    _RET 
 2354              	
 2355              	/*********************************
 2356              	  BASIC: CHAR(expr)
 2357              	  convert expr in character 
 2358              	********************************/
 2359 0162 00BF     	    _FUNC char
 2360 0164 00B5FFF7 	    _CALL func_args
 2360      FEFF5DF8 
 2360      04EB
 2361 016e 0128     	    cmp r0,#1
 2362 0170 7FF4FEAF 	    bne syntax_error 
 2363 0174 01F07F01 	    and r1,#127 
 2364 0178 4FF00300 	    mov r0,#TK_CHAR
 2365 017c 7047     	    _RET 
 2366              	
 2367 017e 00BF     	    _FUNC const_cr2
 2368 0180 7047     	    _RET  
 2369              	
 2370 0182 00BF     	    _FUNC const_cr1
 2371 0184 7047     	    _RET 
 2372              	
 2373              	
 2374              	/**************************
 2375              	  BASIC: DATALN expr 
 2376              	  set data pointer to line#
 2377              	  specified by expr. 
 2378              	  if line# not valid program 
 2379              	  end with error.
 2380              	  use:
 2381              	
 2382              	**************************/
 2383 0186 00BF     	    _FUNC data_line
 2384 0188 206C10F0 	    _RTO // run time only 
 2384      010F03D1 
 2384      4FF00700 
ARM GAS  tinyBasic.s 			page 68


 2384      FFF7FEBF 
 2385 0198 00B5FFF7 	    _CALL expression 
 2385      FEFF5DF8 
 2385      04EB
 2386 01a2 0E28     	    cmp r0,#TK_INTGR
 2387 01a4 7FF4FEAF 	    bne syntax_error
 2388 01a8 0846     	    mov r0,r1 
 2389 01aa 00B5FFF7 	    _CALL search_lineno
 2389      FEFF5DF8 
 2389      04EB
 2390 01b4 0029     	    cmp r1,#0
 2391 01b6 03D0     	    beq 1f 
 2392 01b8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2393 01bc FFF7FEBF 	    b syntax_error 
 2394 01c0 C178     	1:  ldrb r1,[r0,#3]
 2395 01c2 0A29     	    cmp r1,#TK_CMD 
 2396 01c4 F8D1     	    bne 0b
 2397 01c6 0179     	    ldrb r1,[r0,#4]
 2398 01c8 1029     	    cmp r1,#DATA_IDX 
 2399 01ca F5D1     	    bne 0b  
 2400 01cc E060     	    str r0,[UPP,#DATAPTR]
 2401 01ce 8178     	    ldrb r1,[r0,#2]
 2402 01d0 6161     	    str r1,[UPP,#DATALEN]
 2403 01d2 4FF00501 	    mov r1,#5 // position of first data item  
 2404 01d6 2161     	    str r1,[UPP,#DATA]
 2405 01d8 7047     	    _RET 
 2406              	
 2407              	/*****************************
 2408              	  BASIC: READ 
 2409              	  read next data item 
 2410              	  the value can be assigned to
 2411              	  variable or used in expression
 2412              	*****************************/
 2413 01da 00BF     	    _FUNC read
 2414 01dc 206C10F0 	    _RTO
 2414      010F03D1 
 2414      4FF00700 
 2414      FFF7FEBF 
 2415 01ec 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2416 01ee E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2417 01f0 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2418 01f2 8242     	    cmp r2,r0
 2419 01f4 0ED0     	    beq seek_next
 2420 01f6 885C     	1:  ldrb r0,[r1,r2]
 2421 01f8 02F10102 	    add r2,#1
 2422 01fc 0028     	    cmp r0,#TK_NONE
 2423 01fe 09D0     	    beq seek_next
 2424 0200 0828     	    cmp r0,#TK_COMMA
 2425 0202 F8D0     	    beq 1b  
 2426 0204 0E28     	    cmp r0,#TK_INTGR 
 2427 0206 7FF4FEAF 	    bne syntax_error  
 2428 020a 8958     	    ldr r1,[r1,r2]
 2429 020c 02F10402 	    add r2,#4
 2430 0210 2261     	    str r2,[UPP,#DATA]
 2431 0212 12E0     	    b 9f  
 2432              	seek_next: // is next line data ?
 2433 0214 8878     	    ldrb r0,[R1,#2]
ARM GAS  tinyBasic.s 			page 69


 2434 0216 0144     	    add r1,r0 
 2435 0218 C878     	    ldrb r0,[R1,#3]
 2436 021a 0A28     	    cmp r0,#TK_CMD
 2437 021c 09D1     	    bne 2f 
 2438 021e 0879     	    ldrb r0,[r1,#4]
 2439 0220 1028     	    cmp r0,#DATA_IDX 
 2440 0222 06D1     	    bne 2f 
 2441 0224 E160     	    str r1,[UPP,#DATAPTR]
 2442 0226 8878     	    ldrb r0,[r1,#2]
 2443 0228 6061     	    str  r0,[UPP,#DATALEN]
 2444 022a 4FF00502 	    mov r2,#5 
 2445 022e 2261     	    str r2,[UPP,#DATA]
 2446 0230 E1E7     	    b 1b 
 2447 0232 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2448 0236 FFF7FEBF 	    b tb_error 
 2449 023a 7047     	9:  _RET 
 2450              	
 2451              	/********************************
 2452              	  BASIC: RESTORE 
 2453              	  seek first data line 
 2454              	********************************/
 2455              	    _FUNC restore
 2456 023c 206C10F0 	    _RTO 
 2456      010F03D1 
 2456      4FF00700 
 2456      FFF7FEBF 
 2457 024c 216B     	    ldr r1,[UPP,#TXTBGN]
 2458 024e 606B     	1:  ldr r0,[UPP,#TXTEND]
 2459 0250 0FD0     	    beq no_data_line 
 2460 0252 0879     	    ldrb r0,[r1,#4]
 2461 0254 1028     	    cmp r0,#DATA_IDX
 2462 0256 09D1     	    bne try_next_line
 2463 0258 C878     	    ldrb r0,[r1,#3]
 2464 025a 0A28     	    cmp r0,#TK_CMD
 2465 025c 06D1     	    bne try_next_line
 2466              	// this a the first data line 
 2467 025e E160     	    str r1,[UPP,#DATAPTR]
 2468 0260 8878     	    ldrb r0,[r1,#2]
 2469 0262 6061     	    str r0,[UPP,#DATALEN]
 2470 0264 4FF00500 	    mov r0,#5 
 2471 0268 2061     	    str r0,[UPP,#DATA]
 2472 026a 07E0     	    b 9f
 2473              	try_next_line:
 2474 026c 8878     	    ldrb r0,[r1,#2]
 2475 026e 0144     	    add r1,r0 
 2476 0270 EDE7     	    b 1b 
 2477              	no_data_line:
 2478 0272 80EA0000 	    eor r0,r0 
 2479 0276 E060     	    str r0,[UPP,#DATAPTR]
 2480 0278 2061     	    str r0,[UPP,#DATA]
 2481 027a 6061     	    str r0,[UPP,#DATALEN]
 2482 027c 7047     	9:  _RET 
 2483              	
 2484 027e 00BF     	    _FUNC const_ddr
 2485 0280 7047     	    _RET 
 2486              	
 2487 0282 00BF     	    _FUNC dec_base
ARM GAS  tinyBasic.s 			page 70


 2488 0284 7047     	    _RET 
 2489              	
 2490 0286 00BF     	    _FUNC directory
 2491 0288 7047     	    _RET 
 2492              	
 2493 028a 00BF     	    _FUNC do_loop
 2494 028c 7047     	    _RET 
 2495              	
 2496 028e 00BF     	    _FUNC digital_read
 2497 0290 7047     	    _RET 
 2498              	
 2499 0292 00BF     	    _FUNC digital_write
 2500 0294 7047     	    _RET  
 2501              	
 2502              	
 2503              	/****************************************
 2504              	  BASIC: DUMP adr, count 
 2505              	    command line only  
 2506              	    print memory content in hexadecimal 
 2507              	    16 bytes per row 
 2508              	    ouput:
 2509              	      none 
 2510              	    use:
 2511              	      r2   byte counter  
 2512              	****************************************/
 2513 0296 00BF     	    _FUNC dump 
 2514 0298 04B4     	    push {r2}
 2515 029a 226C     	    ldr r2,[UPP,#FLAGS]
 2516 029c 12F0010F 	    tst r2,#FRUN 
 2517 02a0 03D0     	    beq 0f
 2518 02a2 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2519 02a6 FFF7FEBF 	    b tb_error  
 2520 02aa 00B5FFF7 	0:  _CALL arg_list 
 2520      FEFF5DF8 
 2520      04EB
 2521 02b4 0228     	    cmp r0,#2
 2522 02b6 7FF4FEAF 	    bne syntax_error 
 2523 02ba 5CF8042B 	    _POP r2   // count 
 2524 02be 5CF8040B 	    _POP  r0  // adr 
 2525 02c2 4FF01001 	1:  mov r1,#16
 2526 02c6 00B5FFF7 	    _CALL prt_row 
 2526      FEFF5DF8 
 2526      04EB
 2527 02d0 103A     	    subs r2,#16 
 2528 02d2 F6D5     	    bpl 1b 
 2529 02d4 04BC     	2:  pop {r2}
 2530 02d6 7047     	    _RET 
 2531              	
 2532              	
 2533              	/*******************************
 2534              	  BASIC: END 
 2535              	  exit program 
 2536              	******************************/ 
 2537              	    _FUNC cmd_end
 2538 02d8 FFF7FEBF 	    b warm_start 
 2539 02dc 7047     	    _RET 
 2540              	
ARM GAS  tinyBasic.s 			page 71


 2541 02de 00BF     	    _FUNC const_eeprom_base
 2542 02e0 7047     	    _RET 
 2543              	
 2544 02e2 00BF     	    _FUNC fcpu
 2545 02e4 7047     	    _RET 
 2546              	
 2547 02e6 00BF     	    _FUNC forget
 2548 02e8 7047     	    _RET 
 2549              	
 2550              	/**************************************************
 2551              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2552              	  introdure FOR...NEXT loop 
 2553              	**************************************************/
 2554 02ea 00BF     	    _FUNC for
 2555 02ec 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2556 02f0 4FF00107 	    mov INCR,#1
 2557 02f4 00B5FFF7 	    _CALL next_token
 2557      FEFF5DF8 
 2557      04EB
 2558 02fe 0428     	    cmp r0,#TK_VAR
 2559 0300 7FF4FEAF 	    bne syntax_error
 2560 0304 02B4     	    push {r1} 
 2561 0306 00B500F0 	    _CALL let_var 
 2561      A9F85DF8 
 2561      04EB
 2562 0310 20BC     	    pop {VADR}
 2563 0312 4FEA8505 	    lsl VADR,#2
 2564 0316 2544     	    add VADR,UPP 
 2565 0318 05F16005 	    add VADR,#VARS 
 2566 031c 7047     	    _RET 
 2567              	
 2568              	/***************************************
 2569              	  BASIC: TO expr 
 2570              	  set limit of FOR...NEXT loop 
 2571              	**************************************/
 2572 031e 00BF     	    _FUNC to
 2573 0320 00B5FFF7 	    _CALL expression 
 2573      FEFF5DF8 
 2573      04EB
 2574 032a 0E28     	    cmp r0,#TK_INTGR
 2575 032c 7FF4FEAF 	    bne syntax_error 
 2576 0330 0E46     	    mov LIMIT,r1
 2577              	    // save loop back parameters 
 2578 0332 6068     	    ldr r0,[UPP,#COUNT]
 2579 0334 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2580 0338 7047     	    _RET 
 2581              	
 2582              	/********************************************
 2583              	  BASIC: STEP expr 
 2584              	  set increment for FOR...NEXT loop 
 2585              	********************************************/
 2586 033a 00BF     	    _FUNC step
 2587 033c 00B5FFF7 	    _CALL expression 
 2587      FEFF5DF8 
 2587      04EB
 2588 0346 0E28     	    cmp r0,#TK_INTGR
 2589 0348 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 72


 2590 034c 0F46     	    mov INCR,r1
 2591              	    // replace parameters left by TO
 2592 034e 6068     	    ldr r0,[UPP,#COUNT]
 2593 0350 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2594 0354 7047     	    _RET 
 2595              	
 2596              	/********************************************
 2597              	  BASIC: NEXT var 
 2598              	  incrment FOR...NEXT loop variable
 2599              	  exit if variable cross LIMIT 
 2600              	********************************************/
 2601 0356 00BF     	    _FUNC next
 2602 0358 00B5FFF7 	    _CALL next_token 
 2602      FEFF5DF8 
 2602      04EB
 2603 0362 0428     	    cmp r0,#TK_VAR 
 2604 0364 7FF4FEAF 	    bne syntax_error 
 2605 0368 4FEA8101 	    lsl r1,#2 
 2606 036c 2144     	    add r1,UPP 
 2607 036e 01F16001 	    add r1,#VARS 
 2608 0372 A942     	    cmp r1,VADR
 2609 0374 7FF4FEAF 	    bne syntax_error 
 2610 0378 2868     	    ldr r0,[VADR]
 2611 037a 3844     	    add r0,INCR 
 2612 037c 2860     	    str r0,[VADR]
 2613 037e 002F     	    cmp INCR,#0
 2614 0380 02D4     	    bmi 2f
 2615 0382 B042     	    cmp r0,LIMIT 
 2616 0384 02DC     	    bgt 8f  
 2617 0386 07E0     	    b 9f  
 2618 0388 B042     	2:  cmp r0,LIMIT 
 2619 038a 05DA     	    bge 9f  
 2620              	8: // exit for...next
 2621              	  //  drop branch parameters
 2622 038c 4FF00C00 	    _DROP 3
 2622      8444
 2623              	  // restore outer loop parameters
 2624 0392 BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2625 0396 7047     	    _RET 
 2626 0398 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2627 039c 6060     	    str r0,[UPP,#COUNT]
 2628 039e 7047     	    _RET 
 2629              	
 2630              	/*********************************
 2631              	  BASIC: GOSUB expr 
 2632              	  call a subroutine at line# 
 2633              	*********************************/
 2634              	    _FUNC gosub
 2635 03a0 00B5FFF7 	    _CALL expression
 2635      FEFF5DF8 
 2635      04EB
 2636 03aa 0E28     	    cmp r0,#TK_INTGR 
 2637 03ac 7FF4FEAF 	    bne syntax_error 
 2638 03b0 0846     	    mov r0,r1 
 2639 03b2 00B5FFF7 	    _CALL search_lineno  
 2639      FEFF5DF8 
 2639      04EB
ARM GAS  tinyBasic.s 			page 73


 2640 03bc 19B1     	    cbz r1,1f 
 2641 03be 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2642 03c2 FFF7FEBF 	    b tb_error 
 2643 03c6 6168     	1:  ldr r1,[UPP,#COUNT]
 2644 03c8 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2645 03cc 8346     	    mov BPTR,r0 
 2646 03ce 4FF0030A 	    mov IN,#3 
 2647 03d2 9BF80200 	    ldrb r0,[BPTR,#2]
 2648 03d6 6060     	    str r0,[UPP,#COUNT]
 2649 03d8 7047     	    _RET 
 2650              	
 2651              	/**********************************
 2652              	  BASIC: RETURN 
 2653              	  leave a subroutine 
 2654              	*********************************/
 2655 03da 00BF     	    _FUNC return 
 2656 03dc BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2657 03e0 6060     	    str r0,[UPP,#COUNT]
 2658 03e2 7047     	    _RET 
 2659              	
 2660              	/**********************************
 2661              	  BASIC: GOTO expr 
 2662              	  go to line # 
 2663              	  use:
 2664              	
 2665              	**********************************/
 2666              	    _FUNC goto
 2667 03e4 00B5FFF7 	    _CALL expression 
 2667      FEFF5DF8 
 2667      04EB
 2668 03ee 0E28     	    cmp r0,#TK_INTGR 
 2669 03f0 7FF4FEAF 	    bne syntax_error 
 2670 03f4 59B1     	    cbz r1,9f 
 2671 03f6 0846     	1:  mov r0,r1 
 2672 03f8 00B5FFF7 	    _CALL search_lineno 
 2672      FEFF5DF8 
 2672      04EB
 2673 0402 19B1     	    cbz r1,2f 
 2674 0404 4FF00500 	    mov r0,#ERR_NO_LINE 
 2675 0408 FFF7FEBF 	    b tb_error 
 2676 040c 8346     	2:  mov BPTR,r0 
 2677 040e 4FF0030A 	9:  mov IN,#3 
 2678 0412 7047     	    _RET 
 2679              	
 2680              	    _FUNC gpio
 2681 0414 7047     	    _RET  
 2682              	
 2683 0416 00BF     	    _FUNC hex_base
 2684 0418 7047     	    _RET 
 2685              	
 2686 041a 00BF     	    _FUNC const_idr
 2687 041c 7047     	    _RET 
 2688              	
 2689              	/**********************************************
 2690              	  BASIC: IF relation : statement
 2691              	  execute statement only if relation is true
 2692              	*********************************************/
ARM GAS  tinyBasic.s 			page 74


 2693 041e 00BF     	    _FUNC if
 2694 0420 00B5FFF7 	    _CALL relation 
 2694      FEFF5DF8 
 2694      04EB
 2695 042a 09B9     	    cbnz r1,9f 
 2696 042c D4F804A0 	    ldr IN,[UPP,#COUNT]
 2697 0430 7047     	9:  _RET 
 2698              	
 2699 0432 00BF     	    _FUNC input_var
 2700 0434 7047     	    _RET 
 2701              	
 2702 0436 00BF     	    _FUNC invert
 2703 0438 7047     	    _RET 
 2704              	
 2705 043a 00BF     	    _FUNC enable_iwdg
 2706 043c 7047     	    _RET 
 2707              	
 2708 043e 00BF     	    _FUNC refresh_iwdg
 2709 0440 7047     	    _RET 
 2710              	
 2711 0442 00BF     	    _FUNC key
 2712 0444 7047     	    _RET  
 2713              	
 2714              	/******************************
 2715              	  BASIC: [let] var=expr 
 2716              	         [let] @(expr)=expr
 2717              	  input:
 2718              	    none 
 2719              	  output:
 2720              	    none 
 2721              	  use:
 2722              	
 2723              	****************************/         
 2724 0446 00BF     	    _FUNC let
 2725 0448 00B5FFF7 	    _CALL next_token 
 2725      FEFF5DF8 
 2725      04EB
 2726 0452 0428     	    cmp r0,#TK_VAR
 2727 0454 03D0     	    beq let_var 
 2728 0456 0528     	    cmp r0,#TK_ARRAY 
 2729 0458 07D0     	    beq let_array 
 2730 045a FFF7FEBF 	    b syntax_error 
 2731              	let_var:
 2732 045e 4FEA8101 	    lsl r1,#2
 2733 0462 04F16000 	    add r0,UPP,#VARS
 2734 0466 0844     	    add r0,r1
 2735 0468 1FE0     	    b 1f 
 2736              	let_array: 
 2737 046a 4FF00600 	    mov r0,#TK_LPAREN
 2738 046e 00B5FFF7 	    _CALL expect 
 2738      FEFF5DF8 
 2738      04EB
 2739 0478 00B5FFF7 	    _CALL expression
 2739      FEFF5DF8 
 2739      04EB
 2740 0482 0E28     	    cmp r0,#TK_INTGR 
 2741 0484 7FF4FEAF 	    bne syntax_error
ARM GAS  tinyBasic.s 			page 75


 2742 0488 4CF8041D 	    _PUSH r1 
 2743 048c 4FF00700 	    mov r0,#TK_RPAREN
 2744 0490 00B5FFF7 	    _CALL expect 
 2744      FEFF5DF8 
 2744      04EB
 2745 049a 5CF8041B 	    _POP r1 
 2746 049e D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2747 04a2 4FEA8101 	    lsl r1,#2 
 2748 04a6 A0EB0100 	    sub r0,r1 
 2749 04aa 4CF8040D 	1:  _PUSH r0 
 2750 04ae 4FF03200 	    mov r0,#TK_EQUAL 
 2751 04b2 00B5FFF7 	    _CALL expect 
 2751      FEFF5DF8 
 2751      04EB
 2752 04bc 00B5FFF7 	    _CALL expression   
 2752      FEFF5DF8 
 2752      04EB
 2753 04c6 0E28     	    cmp r0,#TK_INTGR
 2754 04c8 7FF4FEAF 	    bne syntax_error   
 2755 04cc 5CF8040B 	2:  _POP r0 
 2756 04d0 0160     	    str r1,[r0]
 2757 04d2 7047     	    _RET  
 2758              	
 2759              	/***************************************
 2760              	  BASIC: LIST [[first,]last]
 2761              	  use:
 2762              	    T1 
 2763              	**************************************/  
 2764              	    _FUNC list
 2765 04d4 206C10F0 	    _CLO
 2765      010F03D0 
 2765      4FF00700 
 2765      FFF7FEBF 
 2766 04e4 4DF8048D 	    push {T1} 
 2767              	//  _CALL arg_list 
 2768 04e8 D4F830B0 	    ldr BPTR,[UPP,#TXTBGN]
 2769 04ec D4F83480 	    ldr T1,[UPP,#TXTEND]
 2770 04f0 C345     	1:  cmp BPTR,T1 
 2771 04f2 09D5     	    bpl 9f
 2772 04f4 5846     	    mov r0,BPTR  
 2773 04f6 00B5FFF7 	    _CALL print_basic_line
 2773      FEFF5DF8 
 2773      04EB
 2774 0500 9BF80200 	    ldrb r0,[BPTR,#2]
 2775 0504 8344     	    add BPTR,r0 
 2776 0506 F3E7     	    b 1b
 2777 0508 FFF7FEBF 	9:  b warm_start 
 2778              	
 2779              	    _FUNC load
 2780 050c 7047     	    _RET 
 2781              	
 2782 050e 00BF     	    _FUNC log2
 2783 0510 7047     	    _RET 
 2784              	
 2785 0512 00BF     	    _FUNC lshift
 2786 0514 7047     	    _RET 
 2787              	
ARM GAS  tinyBasic.s 			page 76


 2788 0516 00BF     	    _FUNC muldiv
 2789 0518 7047     	    _RET 
 2790              	
 2791              	/***********************************
 2792              	  BASIC: NEW 
 2793              	  delete existing program in memory
 2794              	  and clear variables and RAM 
 2795              	***********************************/
 2796 051a 00BF     	    _FUNC new
 2797 051c 206C10F0 	    _CLO 
 2797      010F03D0 
 2797      4FF00700 
 2797      FFF7FEBF 
 2798 052c 00B5FFF7 	    _CALL clear_basic 
 2798      FEFF5DF8 
 2798      04EB
 2799 0536 FFF7FEBF 	    b warm_start   
 2800              	
 2801              	/************************************
 2802              	  BASIC: NOT relation  
 2803              	  invert logical value or relation
 2804              	************************************/
 2805 053a 00BF     	      _FUNC func_not
 2806 053c 00B5FFF7 	      _CALL relation 
 2806      FEFF5DF8 
 2806      04EB
 2807 0546 11B1     	      cbz r1,8f 
 2808 0548 81EA0101 	      eor r1,r1
 2809 054c 01E0     	      b 9f 
 2810 054e 4FF0FF31 	  8:  mov r1,#-1
 2811 0552 7047     	  9:  _RET 
 2812              	
 2813              	    _FUNC const_odr
 2814 0554 7047     	    _RET 
 2815              	
 2816              	/******************************************
 2817              	  BASIC: OR(expr1,expr2)
 2818              	  binary OR between 2 expressions
 2819              	******************************************/
 2820 0556 00BF     	    _FUNC bit_or
 2821 0558 00B5FFF7 	    _CALL func_args
 2821      FEFF5DF8 
 2821      04EB
 2822 0562 0228     	    cmp r0,#2
 2823 0564 7FF4FEAF 	    bne syntax_error
 2824 0568 5CF8040B 	    _POP r0 
 2825 056c 5CF8041B 	    _POP r1
 2826 0570 41EA0001 	    orr r1,r0 
 2827 0574 4FF00E00 	    mov r0,#TK_INTGR
 2828 0578 7047     	    _RET 
 2829              	
 2830 057a 00BF     	    _FUNC pad_ref
 2831 057c 7047     	    _RET 
 2832              	
 2833              	/***********************
 2834              	  BASIC: PAUSE expr 
 2835              	  suspend execution for 
ARM GAS  tinyBasic.s 			page 77


 2836              	  expr milliseconds 
 2837              	************************/
 2838 057e 00BF     	    _FUNC pause
 2839 0580 00B5FFF7 	    _CALL expression 
 2839      FEFF5DF8 
 2839      04EB
 2840 058a 0E28     	    cmp r0,#TK_INTGR 
 2841 058c 7FF4FEAF 	    bne syntax_error 
 2842 0590 E069     	    ldr r0,[UPP,#TICKS]
 2843 0592 0844     	    add r0,r1 
 2844 0594 E169     	1:  ldr r1,[UPP,#TICKS]
 2845 0596 8842     	    cmp r0,r1 
 2846 0598 FCD1     	    bne 1b     
 2847 059a 7047     	    _RET 
 2848              	
 2849              	    _FUNC pin_mode
 2850 059c 7047     	    _RET 
 2851              	
 2852 059e 00BF     	    _FUNC peek
 2853 05a0 7047     	    _RET 
 2854              	
 2855 05a2 00BF     	    _FUNC const_input
 2856 05a4 7047     	    _RET  
 2857              	
 2858 05a6 00BF     	    _FUNC poke
 2859 05a8 7047     	    _RET 
 2860              	
 2861 05aa 00BF     	    _FUNC const_output
 2862 05ac 7047     	    _RET 
 2863              	
 2864              	/****************************
 2865              	  BASIC: PRINT|? arg_list 
 2866              	  print list of arguments 
 2867              	****************************/
 2868 05ae 00BF     	    _FUNC print
 2869 05b0 4FF0FF38 	0:  mov T1,#-1
 2870 05b4 00B5FFF7 	    _CALL expression
 2870      FEFF5DF8 
 2870      04EB
 2871 05be 0E28     	    cmp r0,#TK_INTGR
 2872 05c0 07D1     	    bne 1f 
 2873 05c2 0846     	    mov r0,r1
 2874 05c4 A169     	    ldr r1,[UPP,#BASE]
 2875 05c6 00B5FFF7 	    _CALL print_int
 2875      FEFF5DF8 
 2875      04EB
 2876 05d0 34E0     	    b 7f 
 2877 05d2 00B5FFF7 	1:  _CALL next_token
 2877      FEFF5DF8 
 2877      04EB
 2878 05dc 0128     	    cmp r0,#TK_COLON 
 2879 05de 04DC     	    bgt 2f
 2880 05e0 D4F800A0 	    _UNGET_TOKEN 
 2880      D4F808B0 
 2881 05e8 3AE0     	    b print_exit
 2882 05ea 88EA0808 	2:  eor T1, T1 
 2883 05ee 0228     	    cmp r0,#TK_QSTR 
ARM GAS  tinyBasic.s 			page 78


 2884 05f0 06D1     	    bne 4f
 2885 05f2 0846     	    mov r0,r1 
 2886 05f4 00B5FFF7 	    _CALL uart_puts  
 2886      FEFF5DF8 
 2886      04EB
 2887 05fe 1DE0     	    b 7f 
 2888 0600 0C28     	4:  cmp r0,#TK_CFUNC
 2889 0602 05D1     	    bne 5f
 2890 0604 0846     	    mov r0,r1
 2891 0606 00B5FFF7 	    _CALL execute 
 2891      FEFF5DF8 
 2891      04EB
 2892 0610 0328     	5:  cmp r0,#TK_CHAR 
 2893 0612 06D1     	    bne 6f 
 2894 0614 0846     	    mov r0,r1 
 2895 0616 00B5FFF7 	    _CALL uart_putc 
 2895      FEFF5DF8 
 2895      04EB
 2896 0620 0CE0     	    b 7f 
 2897 0622 0928     	6:  cmp r0,#TK_SHARP
 2898 0624 7FF4FEAF 	    bne syntax_error 
 2899 0628 00B5FFF7 	    _CALL next_token 
 2899      FEFF5DF8 
 2899      04EB
 2900 0632 0E28     	    cmp r0,#TK_INTGR 
 2901 0634 7FF4FEAF 	    bne syntax_error 
 2902 0638 6164     	    str r1,[UPP,#TAB_WIDTH]
 2903 063a 04E0     	    b 8f 
 2904              	7:  
 2905 063c 00B5FFF7 	    _CALL tabulation 
 2905      FEFF5DF8 
 2905      04EB
 2906 0646 88EA0808 	8:  eor T1,T1 
 2907 064a 00B5FFF7 	    _CALL next_token 
 2907      FEFF5DF8 
 2907      04EB
 2908 0654 0828     	    cmp r0,#TK_COMMA 
 2909 0656 ABD0     	    beq 0b
 2910 0658 D4F800A0 	    _UNGET_TOKEN 
 2910      D4F808B0 
 2911              	print_exit:
 2912 0660 18EA0808 	    ands T1,T1 
 2913 0664 06D1     	    bne 9f
 2914 0666 4FF00D00 	    mov r0,#CR 
 2915 066a 00B5FFF7 	    _CALL uart_putc 
 2915      FEFF5DF8 
 2915      04EB
 2916 0674 7047     	9:  _RET 
 2917              	
 2918 0676 00BF     	    _FUNC const_porta
 2919 0678 7047     	    _RET 
 2920              	
 2921 067a 00BF     	    _FUNC const_portb
 2922 067c 7047     	    _RET 
 2923              	
 2924 067e 00BF     	    _FUNC const_portc
 2925 0680 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 79


 2926              	
 2927 0682 00BF     	    _FUNC const_portd
 2928 0684 7047     	    _RET 
 2929              	
 2930 0686 00BF     	    _FUNC const_porte
 2931 0688 7047     	    _RET  
 2932              	
 2933 068a 00BF     	    _FUNC const_portf
 2934 068c 7047     	    _RET 
 2935              	
 2936 068e 00BF     	    _FUNC const_portg
 2937 0690 7047     	    _RET 
 2938              	
 2939 0692 00BF     	    _FUNC const_porth
 2940 0694 7047     	    _RET 
 2941              	
 2942 0696 00BF     	    _FUNC const_porti
 2943 0698 7047     	    _RET 
 2944              	
 2945 069a 00BF     	    _FUNC qkey
 2946 069c 7047     	    _RET 
 2947              	
 2948              	/******************************************
 2949              	  BASIC RANDOM(expr)
 2950              	  generate random number between 0..expr-1
 2951              	******************************************/
 2952 069e 00BF     	    _FUNC random
 2953 06a0 00B5FFF7 	    _CALL func_args 
 2953      FEFF5DF8 
 2953      04EB
 2954 06aa 0128     	    cmp r0,#1
 2955 06ac 7FF4FEAF 	    bne syntax_error 
 2956 06b0 606A     	    ldr r0,[UPP,#SEED]
 2957 06b2 4FEA4031 	    lsl r1,r0,#13
 2958 06b6 81EA0001 	    eor r1,r0
 2959 06ba 4FEA5140 	    lsr r0,r1,#17
 2960 06be 81EA0001 	    eor r1,r0
 2961 06c2 4FEA4110 	    lsl r0,r1,#5
 2962 06c6 81EA0001 	    eor r1,r0
 2963 06ca 6162     	    str r1,[UPP,#SEED]
 2964 06cc 5CF8040B 	    _POP r0 
 2965 06d0 B1FBF0F2 	    udiv r2,r1,r0  
 2966 06d4 00FB02F2 	    mul r2,r0 
 2967 06d8 A1EB0201 	    sub r1,r2 
 2968 06dc 4FF00E00 	    mov r0,#TK_INTGR
 2969 06e0 7047     	    _RET 
 2970              	
 2971 06e2 00BF     	    _FUNC rshift
 2972 06e4 7047     	    _RET 
 2973              	
 2974              	/****************************
 2975              	  BASIC: RUN 
 2976              	  execute program in memory
 2977              	****************************/
 2978 06e6 00BF     	    _FUNC run
 2979 06e8 206C10F0 	    _CLO 
 2979      010F03D0 
ARM GAS  tinyBasic.s 			page 80


 2979      4FF00700 
 2979      FFF7FEBF 
 2980 06f8 206B     	    ldr r0,[UPP,#TXTBGN]
 2981 06fa 616B     	    ldr r1,[UPP,#TXTEND]
 2982 06fc 8842     	    cmp r0,r1
 2983 06fe 0DD0     	    beq 9f 
 2984 0700 8178     	    ldrb r1,[r0,#2]
 2985 0702 6160     	    str r1,[UPP,#COUNT]
 2986 0704 8346     	    mov BPTR,r0 
 2987 0706 4FF0030A 	    mov IN,#3
 2988              	    // reset dataline pointers 
 2989 070a 80EA0000 	    eor r0,r0 
 2990 070e E060     	    str r0,[UPP,#DATAPTR]
 2991 0710 2061     	    str r0,[UPP,#DATA]
 2992 0712 6061     	    str r0,[UPP,#DATALEN] 
 2993 0714 206C     	    ldr r0,[UPP,#FLAGS]
 2994 0716 40F00100 	    orr r0,#FRUN 
 2995 071a 2064     	    str r0,[UPP,#FLAGS]
 2996 071c 7047     	9:  _RET 
 2997              	
 2998 071e 00BF     	    _FUNC save
 2999 0720 7047     	    _RET 
 3000              	
 3001 0722 00BF     	    _FUNC show
 3002 0724 7047     	    _RET 
 3003              	
 3004 0726 00BF     	    _FUNC size
 3005 0728 7047     	    _RET  
 3006              	
 3007 072a 00BF     	    _FUNC sleep
 3008 072c 7047     	    _RET 
 3009              	
 3010 072e 00BF     	    _FUNC spi_read
 3011 0730 7047     	    _RET 
 3012              	
 3013 0732 00BF     	    _FUNC spi_enable
 3014 0734 7047     	    _RET 
 3015              	
 3016 0736 00BF     	    _FUNC spi_select
 3017 0738 7047     	    _RET 
 3018              	
 3019 073a 00BF     	    _FUNC spi_write
 3020 073c 7047     	    _RET 
 3021              	
 3022 073e 00BF     	    _FUNC stop
 3023 0740 7047     	    _RET 
 3024              	
 3025              	/**************************
 3026              	  BASIC: TICKS 
 3027              	  return msec counter
 3028              	**************************/  
 3029 0742 00BF     	    _FUNC get_ticks
 3030 0744 E169     	    ldr r1,[UPP,#TICKS]
 3031 0746 4FF00E00 	    mov r0,#TK_INTGR
 3032 074a 7047     	    _RET  
 3033              	
 3034              	/*************************
ARM GAS  tinyBasic.s 			page 81


 3035              	  BASIC: TIMER expr 
 3036              	  set countdown timer 
 3037              	************************/
 3038              	    _FUNC set_timer
 3039 074c 00B5FFF7 	    _CALL expression 
 3039      FEFF5DF8 
 3039      04EB
 3040 0756 0E28     	    cmp r0,#TK_INTGR
 3041 0758 7FF4FEAF 	    bne syntax_error 
 3042 075c 2162     	    str r1,[UPP,#TIMER]
 3043 075e 7047     	    _RET 
 3044              	
 3045              	/***************************
 3046              	  BASIC: TIMEOUT
 3047              	  check for timer expiration 
 3048              	  return -1 true || 0 false
 3049              	****************************/
 3050              	    _FUNC timeout
 3051 0760 81EA0101 	    eor r1,r1 
 3052 0764 206A     	    ldr r0,[UPP,#TIMER]
 3053 0766 08B9     	    cbnz r0,9f 
 3054 0768 6FEA0101 	    mvn r1,r1 
 3055 076c 4FF00E00 	9:  mov r0,#TK_INTGR    
 3056 0770 7047     	    _RET 
 3057              	
 3058 0772 00BF     	    _FUNC tone
 3059 0774 7047     	    _RET 
 3060              	
 3061              	/***************************
 3062              	  BASIC: UBOUND 
 3063              	  return last indice of @
 3064              	  output:
 3065              	    r0  TK_INTGR 
 3066              	    r1  +int 
 3067              	**************************/
 3068 0776 00BF     	    _FUNC ubound
 3069 0778 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3070 077c 606B     	    ldr r0,[UPP,#TXTEND]
 3071 077e A1EB0001 	    sub r1,r0 
 3072 0782 4FEA9101 	    lsr r1,#2
 3073 0786 4FF00E00 	    mov r0,#TK_INTGR 
 3074 078a 7047     	    _RET 
 3075              	
 3076              	    _FUNC uflash
 3077 078c 7047     	    _RET 
 3078              	
 3079 078e 00BF     	    _FUNC until
 3080 0790 7047     	    _RET 
 3081              	
 3082 0792 00BF     	    _FUNC usr
 3083 0794 7047     	    _RET  
 3084              	
 3085 0796 00BF     	    _FUNC wait
 3086 0798 7047     	    _RET 
 3087              	
 3088              	/*********************************************
 3089              	  BASIC: WORDS 
ARM GAS  tinyBasic.s 			page 82


 3090              	  print list of BASIC WORDS in dictionary 
 3091              	  use:
 3092              	    r0,r1,T1,T2  
 3093              	********************************************/
 3094 079a 00BF     	    _FUNC words
 3095 079c 206C10F0 	    _CLO 
 3095      010F03D0 
 3095      4FF00700 
 3095      FFF7FEBF 
 3096 07ac DFF85084 	    ldr T1,=kword_dict
 3097 07b0 89EA0909 	    eor T2,T2 
 3098              	1:  
 3099 07b4 4046     	    mov r0,T1
 3100 07b6 00B5FFF7 	    _CALL strlen
 3100      FEFF5DF8 
 3100      04EB
 3101 07c0 F0B1     	    cbz r0,9f 
 3102 07c2 8144     	    add T2,r0 
 3103 07c4 B9F1500F 	    cmp T2,#80 
 3104 07c8 08D4     	    bmi 2f
 3105 07ca 89EA0909 	    eor T2,T2  
 3106 07ce 4FF00D00 	    mov r0,#CR 
 3107 07d2 00B5FFF7 	    _CALL uart_putc 
 3107      FEFF5DF8 
 3107      04EB
 3108 07dc 4046     	2:  mov r0,T1 
 3109 07de 00B5FFF7 	    _CALL uart_puts 
 3109      FEFF5DF8 
 3109      04EB
 3110 07e8 4FF02000 	    mov r0,#SPACE
 3111 07ec 09F10109 	    add T2,#1  
 3112 07f0 00B5FFF7 	    _CALL uart_putc 
 3112      FEFF5DF8 
 3112      04EB
 3113 07fa 58F80C8C 	    ldr T1,[T1,#-12]
 3114 07fe D9E7     	    b 1b 
 3115 0800 7047     	9:  _RET 
 3116              	
 3117 0802 00BF     	    _FUNC write
 3118 0804 7047     	    _RET 
 3119              	
 3120              	/**************************************
 3121              	  BASIC: XOR(expr1,expr2)
 3122              	  binary exclusive or between 2 expressions
 3123              	**************************************/
 3124 0806 00BF     	    _FUNC bit_xor
 3125 0808 00B5FFF7 	    _CALL func_args
 3125      FEFF5DF8 
 3125      04EB
 3126 0812 0228     	    cmp r0,#2
 3127 0814 7FF4FEAF 	    bne syntax_error
 3128 0818 5CF8040B 	    _POP r0
 3129 081c 5CF8041B 	    _POP r1 
 3130 0820 81EA0001 	    eor r1,r0 
 3131 0824 4FF00E00 	    mov r0,#TK_INTGR
 3132 0828 7047     	    _RET 
 3133              	
ARM GAS  tinyBasic.s 			page 83


 3134 082a 00BF     	    _FUNC transmit
 3135 082c 7047     	    _RET 
 3136              	
 3137 082e 00BF     	    _FUNC receive
 3138 0830 7047     	    _RET  
 3139              	
 3140              	
 3141              	/*************************************************
 3142              	   extra FLASH memory not used by Tiny BASIC
 3143              	   is used to save BASIC programs.
 3144              	************************************************/
 3145 0832 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3145      0080AFF3 
 3145      0080AFF3 
 3145      00800000 
 3145      00000000 
 3146              	  .section .fs
 3147              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 84


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 85


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 86


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 87


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 88


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 89


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 90


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1455   .text:0000000000000b78 pad
         tinyBasic.s:617    .text:0000000000000450 parse_int
         tinyBasic.s:1124   .text:0000000000000858 tb_error
         tinyBasic.s:447    .text:00000000000002b8 comp_token
         tinyBasic.s:521    .text:00000000000003a4 store_r0
         tinyBasic.s:733    .text:0000000000000528 skip
         tinyBasic.s:752    .text:0000000000000540 upper
         tinyBasic.s:555    .text:00000000000003e4 is_special
         tinyBasic.s:577    .text:0000000000000428 token_ofs
         tinyBasic.s:462    .text:00000000000002f8 tok_idx0
         tinyBasic.s:524    .text:00000000000003aa try_number
         tinyBasic.s:466    .text:00000000000002fa single
         tinyBasic.s:572    .text:0000000000000418 tok_single
         tinyBasic.s:470    .text:0000000000000302 lt
         tinyBasic.s:476    .text:0000000000000310 gt
         tinyBasic.s:489    .text:0000000000000334 bkslash
         tinyBasic.s:538    .text:00000000000003de token_exit
ARM GAS  tinyBasic.s 			page 91


         tinyBasic.s:496    .text:000000000000034a prt_cmd
         tinyBasic.s:502    .text:000000000000035c quote
         tinyBasic.s:672    .text:00000000000004c0 parse_quote
         tinyBasic.s:507    .text:0000000000000370 tick
         tinyBasic.s:904    .text:00000000000005f4 parse_keyword
         tinyBasic.s:569    .text:0000000000000404 char_list
         tinyBasic.s:570    .text:0000000000000404 $d
         tinyBasic.s:578    .text:0000000000000428 $d
         tinyBasic.s:594    .text:000000000000044e $t
         tinyBasic.s:703    .text:00000000000004f4 get_escaped_char
         tinyBasic.s:720    .text:000000000000051e escaped
         tinyBasic.s:720    .text:000000000000051e $d
         tinyBasic.s:733    .text:0000000000000526 $t
         tinyBasic.s:770    .text:0000000000000550 is_digit
         tinyBasic.s:794    .text:000000000000056c is_hex
         tinyBasic.s:819    .text:0000000000000590 is_bit
         tinyBasic.s:840    .text:00000000000005ac is_alpha
         tinyBasic.s:861    .text:00000000000005c4 is_num
         tinyBasic.s:882    .text:00000000000005dc is_alnum
         tinyBasic.s:1109   .text:0000000000000850 syntax_error
         tinyBasic.s:2151   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1272   .text:00000000000009c4 search_dict
         tinyBasic.s:955    .text:000000000000067c cmd_name
         tinyBasic.s:977    .text:00000000000006a0 print_basic_line
         tinyBasic.s:987    .text:00000000000006c6 token_loop
         tinyBasic.s:1548   .text:0000000000000c1c next_token
         tinyBasic.s:1066   .text:0000000000000801 single_char
         tinyBasic.s:1062   .text:00000000000007f8 ge_str
         tinyBasic.s:1063   .text:00000000000007fb le_str
         tinyBasic.s:1064   .text:00000000000007fe ne_str
         tinyBasic.s:1062   .text:00000000000007f8 $d
         tinyBasic.s:1086   .text:0000000000000838 modulo
         tinyBasic.s:1086   .text:0000000000000838 $t
         tinyBasic.s:1154   .text:00000000000008e8 compile_error
         tinyBasic.s:1128   .text:0000000000000860 rt_error
         tinyBasic.s:1171   .text:0000000000000940 rt_error_msg
         tinyBasic.s:1174   .text:0000000000000950 err_msg
         tinyBasic.s:1468   .text:0000000000000b88 warm_start
         tinyBasic.s:1172   .text:0000000000000940 $d
         tinyBasic.s:1181   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1182   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1183   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1184   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1185   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1186   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1187   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1188   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1189   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1190   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1191   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1192   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1193   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1194   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1195   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1197   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1198   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1199   .rodata.tb_error:0000000000000151 tk_id
ARM GAS  tinyBasic.s 			page 92


         tinyBasic.s:1209   .text:0000000000000990 $t
         tinyBasic.s:1209   .text:0000000000000990 skip_line
         tinyBasic.s:1226   .text:0000000000000998 BTGL
         tinyBasic.s:1244   .text:000000000000099c kword_cmp
         tinyBasic.s:1310   .text:0000000000000a02 cold_start
         tinyBasic.s:1331   .text:0000000000000a50 src_addr
         tinyBasic.s:1333   .text:0000000000000a54 dest_addr
         tinyBasic.s:1454   .text:0000000000000b74 tib
         tinyBasic.s:1335   .text:0000000000000a58 sysvar_size
         tinyBasic.s:1346   .text:0000000000000a5c prt_version
         tinyBasic.s:1403   .text:0000000000000b04 clear_basic
         tinyBasic.s:1332   .text:0000000000000a50 $d
         tinyBasic.s:2011   .rodata:0000000000000000 uzero
         tinyBasic.s:2035   .rodata:00000000000000cc ulast
         tinyBasic.s:1346   .text:0000000000000a5c $t
         tinyBasic.s:1370   .text:0000000000000ac4 version_msg
         tinyBasic.s:1372   .text:0000000000000ae4 version
         tinyBasic.s:1371   .text:0000000000000ac4 $d
         tinyBasic.s:1387   .text:0000000000000ae8 clear_vars
         tinyBasic.s:1437   .text:0000000000000b48 warm_init
         tinyBasic.s:1453   .text:0000000000000b70 dstack
         tinyBasic.s:1452   .text:0000000000000b6c mstack
         tinyBasic.s:1452   .text:0000000000000b6c $d
         tinyBasic.s:1456   .text:0000000000000b7c array
         tinyBasic.s:1457   .text:0000000000000b80 ready
         tinyBasic.s:1488   .text:0000000000000ba0 cmd_line
         tinyBasic.s:1499   .text:0000000000000bd0 interpreter
         tinyBasic.s:1532   .text:0000000000000c10 execute
         tinyBasic.s:2731   .text.basic:000000000000045e let_var
         tinyBasic.s:2736   .text.basic:000000000000046a let_array
         tinyBasic.s:2159   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1554   .text:0000000000000c2a new_line
         tinyBasic.s:1558   .text:0000000000000c32 end_of_line
         tinyBasic.s:1605   .text:0000000000000ca8 tok_jmp
         tinyBasic.s:1606   .text:0000000000000ca8 $d
         tinyBasic.s:1620   .text:0000000000000ce8 $t
         tinyBasic.s:1635   .text:0000000000000ce8 expect
         tinyBasic.s:1654   .text:0000000000000d04 func_args
         tinyBasic.s:1674   .text:0000000000000d30 arg_list
         tinyBasic.s:1832   .text:0000000000000ed0 expression
         tinyBasic.s:1708   .text:0000000000000d70 factor
         tinyBasic.s:1940   .text:0000000000000fbc get_array_element
         tinyBasic.s:1978   .text:0000000000000fe4 get_var
         tinyBasic.s:1781   .text:0000000000000e54 term
         tinyBasic.s:1874   .text:0000000000000f38 relation
         tinyBasic.s:1921   .text:0000000000000fb2 relop_jmp
         tinyBasic.s:1893   .text:0000000000000f82 rel_idx0
         tinyBasic.s:1894   .text:0000000000000f82 rel_eq
         tinyBasic.s:1911   .text:0000000000000f98 rel_false
         tinyBasic.s:1897   .text:0000000000000f86 rel_lt
         tinyBasic.s:1900   .text:0000000000000f8a rel_le
         tinyBasic.s:1903   .text:0000000000000f8e rel_gt
         tinyBasic.s:1906   .text:0000000000000f92 rel_ge
         tinyBasic.s:1909   .text:0000000000000f96 rel_diff
         tinyBasic.s:1922   .text:0000000000000fb2 $d
         tinyBasic.s:1960   .text:0000000000000fd0 set_array_element
         tinyBasic.s:1996   .text:0000000000000ff4 set_var
ARM GAS  tinyBasic.s 			page 93


         tinyBasic.s:3147   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2032   .rodata:0000000000000050 $d
         tinyBasic.s:2042   *ABS*:0000000000000000 link
         tinyBasic.s:2043   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2152   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:2044   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2147   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2193   .text.basic:0000000000000000 abs
         tinyBasic.s:2205   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2208   .text.basic:000000000000002c analog_read
         tinyBasic.s:2215   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2230   .text.basic:0000000000000054 ascii
         tinyBasic.s:2247   .text.basic:0000000000000098 autorun
         tinyBasic.s:2250   .text.basic:000000000000009c awu
         tinyBasic.s:2253   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2268   .text.basic:00000000000000a4 bit_reset
         tinyBasic.s:2293   .text.basic:00000000000000d0 bit_set
         tinyBasic.s:2333   .text.basic:0000000000000120 bit_test
         tinyBasic.s:2317   .text.basic:00000000000000f8 bit_toggle
         tinyBasic.s:2352   .text.basic:0000000000000160 bye
         tinyBasic.s:2359   .text.basic:0000000000000164 char
         tinyBasic.s:2367   .text.basic:0000000000000180 const_cr2
         tinyBasic.s:2370   .text.basic:0000000000000184 const_cr1
         tinyBasic.s:2383   .text.basic:0000000000000188 data_line
         tinyBasic.s:2484   .text.basic:0000000000000280 const_ddr
         tinyBasic.s:2487   .text.basic:0000000000000284 dec_base
         tinyBasic.s:2490   .text.basic:0000000000000288 directory
         tinyBasic.s:2493   .text.basic:000000000000028c do_loop
         tinyBasic.s:2496   .text.basic:0000000000000290 digital_read
         tinyBasic.s:2499   .text.basic:0000000000000294 digital_write
         tinyBasic.s:2537   .text.basic:00000000000002d8 cmd_end
         tinyBasic.s:2541   .text.basic:00000000000002e0 const_eeprom_base
         tinyBasic.s:2544   .text.basic:00000000000002e4 fcpu
         tinyBasic.s:2554   .text.basic:00000000000002ec for
         tinyBasic.s:2547   .text.basic:00000000000002e8 forget
         tinyBasic.s:2634   .text.basic:00000000000003a0 gosub
         tinyBasic.s:2666   .text.basic:00000000000003e4 goto
         tinyBasic.s:2680   .text.basic:0000000000000414 gpio
         tinyBasic.s:2683   .text.basic:0000000000000418 hex_base
         tinyBasic.s:2686   .text.basic:000000000000041c const_idr
         tinyBasic.s:2693   .text.basic:0000000000000420 if
         tinyBasic.s:2699   .text.basic:0000000000000434 input_var
         tinyBasic.s:2702   .text.basic:0000000000000438 invert
         tinyBasic.s:2705   .text.basic:000000000000043c enable_iwdg
         tinyBasic.s:2708   .text.basic:0000000000000440 refresh_iwdg
         tinyBasic.s:2711   .text.basic:0000000000000444 key
         tinyBasic.s:2724   .text.basic:0000000000000448 let
         tinyBasic.s:2764   .text.basic:00000000000004d4 list
         tinyBasic.s:2779   .text.basic:000000000000050c load
         tinyBasic.s:2782   .text.basic:0000000000000510 log2
         tinyBasic.s:2785   .text.basic:0000000000000514 lshift
         tinyBasic.s:2788   .text.basic:0000000000000518 muldiv
         tinyBasic.s:2601   .text.basic:0000000000000358 next
         tinyBasic.s:2796   .text.basic:000000000000051c new
         tinyBasic.s:2805   .text.basic:000000000000053c func_not
         tinyBasic.s:2813   .text.basic:0000000000000554 const_odr
         tinyBasic.s:2820   .text.basic:0000000000000558 bit_or
ARM GAS  tinyBasic.s 			page 94


         tinyBasic.s:2830   .text.basic:000000000000057c pad_ref
         tinyBasic.s:2838   .text.basic:0000000000000580 pause
         tinyBasic.s:2849   .text.basic:000000000000059c pin_mode
         tinyBasic.s:2852   .text.basic:00000000000005a0 peek
         tinyBasic.s:2855   .text.basic:00000000000005a4 const_input
         tinyBasic.s:2858   .text.basic:00000000000005a8 poke
         tinyBasic.s:2861   .text.basic:00000000000005ac const_output
         tinyBasic.s:2868   .text.basic:00000000000005b0 print
         tinyBasic.s:2918   .text.basic:0000000000000678 const_porta
         tinyBasic.s:2921   .text.basic:000000000000067c const_portb
         tinyBasic.s:2924   .text.basic:0000000000000680 const_portc
         tinyBasic.s:2927   .text.basic:0000000000000684 const_portd
         tinyBasic.s:2930   .text.basic:0000000000000688 const_porte
         tinyBasic.s:2933   .text.basic:000000000000068c const_portf
         tinyBasic.s:2936   .text.basic:0000000000000690 const_portg
         tinyBasic.s:2939   .text.basic:0000000000000694 const_porth
         tinyBasic.s:2942   .text.basic:0000000000000698 const_porti
         tinyBasic.s:2945   .text.basic:000000000000069c qkey
         tinyBasic.s:2413   .text.basic:00000000000001dc read
         tinyBasic.s:2455   .text.basic:000000000000023c restore
         tinyBasic.s:2655   .text.basic:00000000000003dc return
         tinyBasic.s:2952   .text.basic:00000000000006a0 random
         tinyBasic.s:2971   .text.basic:00000000000006e4 rshift
         tinyBasic.s:2978   .text.basic:00000000000006e8 run
         tinyBasic.s:2998   .text.basic:0000000000000720 save
         tinyBasic.s:3001   .text.basic:0000000000000724 show
         tinyBasic.s:3004   .text.basic:0000000000000728 size
         tinyBasic.s:3007   .text.basic:000000000000072c sleep
         tinyBasic.s:3010   .text.basic:0000000000000730 spi_read
         tinyBasic.s:3013   .text.basic:0000000000000734 spi_enable
         tinyBasic.s:3016   .text.basic:0000000000000738 spi_select
         tinyBasic.s:3019   .text.basic:000000000000073c spi_write
         tinyBasic.s:2586   .text.basic:000000000000033c step
         tinyBasic.s:3022   .text.basic:0000000000000740 stop
         tinyBasic.s:3029   .text.basic:0000000000000744 get_ticks
         tinyBasic.s:3038   .text.basic:000000000000074c set_timer
         tinyBasic.s:3050   .text.basic:0000000000000760 timeout
         tinyBasic.s:2572   .text.basic:0000000000000320 to
         tinyBasic.s:3058   .text.basic:0000000000000774 tone
         tinyBasic.s:3068   .text.basic:0000000000000778 ubound
         tinyBasic.s:3076   .text.basic:000000000000078c uflash
         tinyBasic.s:3079   .text.basic:0000000000000790 until
         tinyBasic.s:3082   .text.basic:0000000000000794 usr
         tinyBasic.s:3085   .text.basic:0000000000000798 wait
         tinyBasic.s:3094   .text.basic:000000000000079c words
         tinyBasic.s:3117   .text.basic:0000000000000804 write
         tinyBasic.s:3124   .text.basic:0000000000000808 bit_xor
         tinyBasic.s:3134   .text.basic:000000000000082c transmit
         tinyBasic.s:3137   .text.basic:0000000000000830 receive
         tinyBasic.s:2513   .text.basic:0000000000000298 dump
         tinyBasic.s:2193   .text.basic:0000000000000000 $t
         tinyBasic.s:2432   .text.basic:0000000000000214 seek_next
         tinyBasic.s:2477   .text.basic:0000000000000272 no_data_line
         tinyBasic.s:2473   .text.basic:000000000000026c try_next_line
         tinyBasic.s:2911   .text.basic:0000000000000660 print_exit
         tinyBasic.s:3147   .text.basic:0000000000000c00 $d
         tinyBasic.s:2008   .text:0000000000001002 $d
ARM GAS  tinyBasic.s 			page 95


         tinyBasic.s:3147   .text:0000000000001004 $d
         tinyBasic.s:576    .text:0000000000000425 $d
         tinyBasic.s:576    .text:0000000000000426 $t
         tinyBasic.s:1374   .text:0000000000000ae5 $d
         tinyBasic.s:1374   .text:0000000000000ae6 $t
         tinyBasic.s:1468   .text:0000000000000b87 $d
         tinyBasic.s:1468   .text:0000000000000b88 $t
         tinyBasic.s:1940   .text:0000000000000fb9 $d
         tinyBasic.s:1940   .text:0000000000000fba $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
vectors_size
_mstack
_dstack
_tib
_pad
readln
