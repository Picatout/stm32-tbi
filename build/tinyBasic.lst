ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//   constantes related to Arduino 
  35              	//   API mapping 
  36              	//-------------------------------------
  37              	  .equ INP,0
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ OUTP,1 
  39              	
  40              	//--------------------------------------
  41              	//       token attribute
  42              	//--------------------------------------
  43              	// bits 4:5 identify token group 
  44              	// 0x0n -> miscelinous 
  45              	// 0x1n -> +|- operators 
  46              	// 0x2n -> *|/|% operators
  47              	// 0x3n -> relational operators 
  48              	  .equ TK_NONE,0       // not a token 
  49              	  .equ TK_COLON,1      // command separator ':' 
  50              	  .equ TK_QSTR,2     // quoted string  
  51              	  .equ TK_CHAR,3       // ASCII character 
  52              	  .equ TK_VAR,4      // variable index 
  53              	  .equ TK_ARRAY,5     // array variable '@' 
  54              	  .equ TK_LPAREN,6     // left parenthesis '('
  55              	  .equ TK_RPAREN,7     // right parenthesis ')'
  56              	  .equ TK_COMMA,8     // item separator ',' 
  57              	  .equ TK_SEMIC,9     // semi-colon  
  58              	  .equ TK_SHARP,0xa     // print colon width '#' 
  59              	  .equ TK_CMD,0xb      // BASIC command   
  60              	  .equ TK_IFUNC,0xc    // BASIC integer function
  61              	  .equ TK_CFUNC,0xd    // BASIC character function
  62              	  .equ TK_CONST,0xe    // BASIC constant 
  63              	  .equ TK_INTGR,0xf    // 32 bits integer 
  64              	  .equ TK_PLUS,0x10    // addition operator '+'
  65              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  66              	  .equ TK_MULT,0x20    // multiplication operator '*'
  67              	  .equ TK_DIV,0x21     // division operator '/'
  68              	  .equ TK_MOD,0x22     // modulo operator '%'
  69              	  .equ TK_LBL,0x40     // label token 
  70              	  
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  79              	  .equ TK_GE,0x33      // relation operator '>='
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<='
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	  .equ ERR_CANT_PROG,16
 111              	  
 112              	
 113              	//--------------------------------------
 114              	//   assembler flags 
 115              	//-------------------------------------
 116              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 117              	
 118              	.equ CELL_SIZE,4 
 119              	
 120              	
 121              	//-------------------------------
 122              	//  macros used to help debugging
 123              	//-------------------------------
 124              	  .equ DEBUG,0
 125              	
 126              	    UPP .req r4  // base address system variables 
 127              	    VADR .req r5  // address FOR loop variable 
 128              	    LIMIT .req r6   // LOOP limit 
 129              	    INCR  .req  r7  // LOOP increment 
 130              	    T1  .req r8     // temporary register 
 131              	    T2  .req r9     // temporary register 
 132              	    IN  .req r10    //  index in text line or token list 
 133              	    BPTR .req r11   //  buffer address or BASIC line address 
 134              	    DP   .req r12   //  parameter stack pointer 
 135              	
 136              	/***************************
 137              	  SYSTEM variables offset 
 138              	  from UPP  
 139              	***************************/ 
 140              	
 141              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 142              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 143              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 144              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 145              	  .equ DATA,DATAPTR+4 // index to next data item 
 146              	  .equ DATALEN, DATA+4 // length of data line 
 147              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 148              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 149              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 150              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 151              	  .equ FSPTR,SEED+4 //  pointer used by file system
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 153              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 154              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 155              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 156              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 157              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 158              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 159              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 160              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 161              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 162              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 163              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 164              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 165              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 166              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 167              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 168              	
 169              	/* flags used by BASIC interpreter */ 
 170              		.equ FRUN,(1<<0) // programm running
 171              		.equ FTRAP,(1<<1) // inside trap handler 
 172              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 173              		.equ FSTOP,(1<<3) // program stopped  
 174              		.equ FBREAK,(1<<4) // break point flag 
 175              		.equ FCOMP,(1<<5)  // compiling flags 
 176              		.equ FAUTORUN,(1<<6) // auto start program running 
 177              	
 178              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 179              	  
 180              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 181              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 182              	
 183              	/***********************************************
 184              	*       MACROS
 185              	***********************************************/
 186              		.macro _CALL fn /* low level routine call */ 
 187              	 	PUSH {LR}
 188              		BL \fn  
 189              	  POP {LR}
 190              		.endm
 191              		
 192              		.macro	_RET /* return from subroutine */
 193              		BX	LR
 194              		.endm
 195              	
 196              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 197              		MOV \REG, #\LITERAL&0xffff
 198              		MOVT \REG, #\LITERAL>>16
 199              		.endm
 200              	
 201              	// local function header 
 202              	  .macro _FUNC label 
 203              	  .p2align 2 
 204              	  .type \label, %function  
 205              	\label:
 206              	  .endm 
 207              	
 208              	// global function header 
ARM GAS  tinyBasic.s 			page 10


 209              	  .macro _GBL_FUNC label 
 210              	  .global \label 
 211              	  _FUNC \label 
 212              	  .endm 
 213              	
 214              	
 215              	/********************************
 216              	    dictionary structure
 217              	------------------------------
 218              	 format:
 219              	   link:    
 220              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 221              	   cmd_name: 31 characters max 
 222              	   cmd_index: 2 bytes 
 223              	**********************************/
 224              		.macro _dict_entry tok_type,name,cmd_idx 
 225              	  .word LINK 
 226              	  .word \cmd_idx 
 227              		.word \tok_type  	
 228              		.equ LINK,.
 229              		.asciz "\name"
 230              		.p2align 2 
 231              		.endm 
 232              	
 233              	  // pop parameter in register 
 234              	  .macro _POP  reg 
 235              	  ldmia  DP!,{\reg}
 236              	  .endm 
 237              	
 238              	  // push register on parameter stack 
 239              	  .macro _PUSH reg 
 240              	  stmdb DP!,{\reg}
 241              	  .endm 
 242              	
 243              	  // drop n parameters on dstack 
 244              	  .macro _DROP n
 245              	  mov r0,#4*\n
 246              	  add DP,R0 
 247              	  .endm 
 248              	
 249              	  // back to previous token in list 
 250              	  .macro _UNGET_TOKEN 
 251              	  ldr IN,[UPP,#IN_SAVED]
 252              	  ldr BPTR,[UPP,#BASICPTR] 
 253              	  .endm 
 254              	
 255              	 // create a text data 
 256              	 .macro _TEXT label,text
 257              	 \label: .asciz "\text"
 258              	 .p2align 2 
 259              	 .endm 
 260              	
 261              	// command line only 
 262              	  .macro _CLO 
 263              	  ldr r0,[UPP,#FLAGS]
 264              	  tst r0,#FRUN 
 265              	  beq 1f 
ARM GAS  tinyBasic.s 			page 11


 266              	  mov r0,#ERR_CMD_ONLY
 267              	  b tb_error
 268              	1: 
 269              	  .endm 
 270              	
 271              	// run time only 
 272              	  .macro _RTO 
 273              	  ldr r0,[UPP,#FLAGS]
 274              	  tst r0,#FRUN 
 275              	  bne 1f 
 276              	  mov r0,#ERR_CMD_ONLY
 277              	  b tb_error
 278              	1:
 279              	  .endm 
 280              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CONST_IDX,CHAR_IDX+1 //
  36              	    .equ DATA_IDX,CONST_IDX+1 // 
  37              	    .equ DATALN_IDX,DATA_IDX+1 // 
  38              	    .equ DEC_IDX,DATALN_IDX+1 // 
  39              	    .equ DIR_IDX,DEC_IDX+1 // 
  40              	    .equ DO_IDX,DIR_IDX+1 // 
  41              	    .equ DROP_IDX,DO_IDX+1
ARM GAS  tinyBasic.s 			page 12


  42              	    .equ DUMP_IDX, DROP_IDX+1 
  43              	    .equ END_IDX,DUMP_IDX+1 // 
  44              	    .equ ERASE_IDX,END_IDX+1 
  45              	    .equ FLASH_IDX,ERASE_IDX+1
  46              	    .equ FOR_IDX, FLASH_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  49              	    .equ GOTO_IDX, GOSUB_IDX+1
  50              	    .equ HEX_IDX, GOTO_IDX+1 // 
  51              	    .equ IF_IDX, HEX_IDX+1 // 
  52              	    .equ INP_IDX,IF_IDX+1
  53              	    .equ INPUT_IDX, INP_IDX+1 // 
  54              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  55              	    .equ KEY_IDX, INVERT_IDX+1 // 
  56              	    .equ LET_IDX, KEY_IDX+1 // 
  57              	    .equ LIST_IDX, LET_IDX+1 // 
  58              	    .equ LOAD_IDX, LIST_IDX+1 // 
  59              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  60              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  61              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  62              	    .equ NEXT_IDX, NEW_IDX+1 // 
  63              	    .equ NOT_IDX, NEXT_IDX+1 // 
  64              	    .equ OR_IDX, NOT_IDX+1 // 
  65              	    .equ OUT_IDX,OR_IDX+1
  66              	    .equ PAD_IDX, OUT_IDX+1 // 
  67              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  68              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  69              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  70              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  71              	    .equ PEEK32_IDX, PEEK16_IDX+1
  72              	    .equ PICK_IDX,PEEK32_IDX+1
  73              	    .equ POKE8_IDX, PICK_IDX+1 // 
  74              	    .equ POKE16_IDX,POKE8_IDX+1 
  75              	    .equ POKE32_IDX,POKE16_IDX+1
  76              	    .equ POP_IDX,POKE32_IDX+1
  77              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  78              	    .equ PUSH_IDX,PRT_IDX+1
  79              	    .equ QKEY_IDX, PUSH_IDX+1 // 
  80              	    .equ READ_IDX, QKEY_IDX+1 // 
  81              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  82              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  83              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  84              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  85              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  86              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  87              	    .equ SAVE_IDX, RUN_IDX+1 // 
  88              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  89              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  90              	    .equ SPC_IDX,SLEEP_IDX+1 //
  91              	    .equ STEP_IDX, SPC_IDX+1 // 
  92              	    .equ STOP_IDX, STEP_IDX+1 // 
  93              	    .equ STORE_IDX,STOP_IDX+1
  94              	    .equ TAB_IDX, STORE_IDX+1 //
  95              	    .equ THEN_IDX,TAB_IDX+1
  96              	    .equ TICKS_IDX, THEN_IDX+1 // 
  97              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  98              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
ARM GAS  tinyBasic.s 			page 13


  99              	    .equ TO_IDX, TMROUT_IDX+1 // 
 100              	    .equ TRACE_IDX,TO_IDX+1
 101              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 102              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 103              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 104              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 105              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 106              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 107              	    .equ XOR_IDX, WRITE_IDX+1 //  
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
ARM GAS  tinyBasic.s 			page 14


  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
ARM GAS  tinyBasic.s 			page 15


 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
ARM GAS  tinyBasic.s 			page 16


 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
ARM GAS  tinyBasic.s 			page 17


 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
ARM GAS  tinyBasic.s 			page 18


 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
ARM GAS  tinyBasic.s 			page 19


 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL expression 
 318      BBFF5DF8 
 318      04EB
 319 0256 0F28     	    cmp r0,#TK_INTGR 
 320 0258 0ED0     	    beq 2f 
 321 025a 00B500F0 	    _CALL next_token 
 321      46FE5DF8 
 321      04EB
 322 0264 4028     	    cmp r0,#TK_LBL 
 323 0266 40F04784 	    bne syntax_error 
 324 026a 00B500F0 	    _CALL search_label
 324      2AF85DF8 
 324      04EB
 325 0274 40B1     	    cbz r0,8f
 326 0276 0BE0     	    b 9f 
 327 0278 0846     	2:  mov r0,r1 
 328 027a 48B1     	    cbz r0,9f 
 329 027c 00B5FFF7 	    _CALL search_lineno 
 329      FEFF5DF8 
 329      04EB
 330 0286 19B1     	    cbz r1,9f 
 331 0288 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 332 028c 00F038BC 	    b tb_error 
 333 0290 7047     	9:  _RET 
 334              	
 335              	
 336              	/***************************************
 337              	  search_const 
 338              	  search for constant 
 339              	  input:
 340              	    r0  constant label 
 341              	  output:
 342              	    r0  constant value  
 343              	  use:
 344              	    r1  temp 
 345              	    T1   *list 
 346              	    T2   BOUND 
 347              	***************************************/
 348 0292 00BF     	    _FUNC search_const
 349 0294 2DE90203 	    push {r1,T1,T2} 
 350 0298 D4F83480 	    ldr T1,[UPP,#TXTEND]
 351 029c D4F8D090 	    ldr T2,[UPP,#HERE] 
 352 02a0 C845     	1:  cmp T1,T2 
 353 02a2 0BD5     	    bpl 8f 
 354 02a4 58F8041B 	    ldr r1,[T1],#4
 355 02a8 8842     	    cmp r0,r1 
 356 02aa 02D0     	    beq 2f 
 357 02ac 08F10408 	    add T1,#4
ARM GAS  tinyBasic.s 			page 20


 358 02b0 F6E7     	    b 1b 
 359              	2:  // found 
 360 02b2 D8F80000 	    ldr r0,[T1]
 361 02b6 BDE80203 	    pop {r1,T1,T2}
 362 02ba 7047     	    _RET
 363              	8:  // that constant doesn't exist 
 364 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 365 02c0 00F01EBC 	    b tb_error      
 366              	
 367              	
 368              	/***************************************
 369              	    search_label 
 370              	    search target label 
 371              	    input:
 372              	      r1    target label 
 373              	    output:
 374              	      r0    address or 0 
 375              	    use:
 376              	      r2    line address link 
 377              	      r3    search limit 
 378              	****************************************/
 379              	    _FUNC search_label 
 380 02c4 0CB4     	    push {r2,r3}
 381 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 382 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 383 02ca 9A42     	1:  cmp r2,r3
 384 02cc 0AD0     	    beq 8f 
 385 02ce D078     	    ldrb r0,[r2,#3]
 386 02d0 4028     	    cmp  r0,#TK_LBL 
 387 02d2 02D0     	    beq 4f 
 388 02d4 9078     	2:  ldrb r0,[r2,#2]
 389 02d6 0244     	    add r2,r0 
 390 02d8 F7E7     	    b 1b 
 391              	4:  // compare label 
 392 02da 5068     	    ldr r0,[R2,#4]
 393 02dc 8142     	    cmp r1,r0 
 394 02de F9D1     	    bne 2b 
 395              	    // found label 
 396 02e0 1046     	    mov r0,r2 
 397 02e2 01E0     	    b 9f
 398 02e4 80EA0000 	8:  eor r0,r0 
 399 02e8 0CBC     	9:  pop {r2,r3}
 400 02ea 7047     	    _RET 
 401              	
 402              	
 403              	/***************************************
 404              	    search_lineno 
 405              	    localize BASIC line from its number 
 406              	    input:
 407              	      r0   line# 
 408              	    output: 
 409              	      r0   adr where found || adr new to be inserted 
 410              	      r1   0 found || !0 not found  
 411              	    use:
 412              	      r0   scan address 
 413              	      r1   temp   
 414              	      r2   address end of text
ARM GAS  tinyBasic.s 			page 21


 415              	      r3   target line#
 416              	****************************************/    
 417              	    _GBL_FUNC search_lineno
 418 02ec 0CB4     	    push {r2,r3} 
 419 02ee 0346     	    mov r3,r0 // target 
 420 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 421 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 422 02f4 9042     	1:  cmp r0,r2 
 423 02f6 05D0     	    beq  8f
 424 02f8 0188     	    ldrh r1,[r0]
 425 02fa C91A     	    subs r1,r3 
 426 02fc 04D5     	    bpl 9f 
 427 02fe 8178     	    ldrb r1,[r0,#2]
 428 0300 0844     	    add r0,r1
 429 0302 F7E7     	    b 1b 
 430 0304 4FF0FF31 	8:  mov r1,#-1 
 431 0308 0CBC     	9:  pop {r2,r3}
 432 030a 7047     	    _RET 
 433              	
 434              	
 435              	/********************************************
 436              	    delete_line 
 437              	    delete BASIC line at addr 
 438              	    input:
 439              	      r0    address line to delete 
 440              	    output:
 441              	      r0    same as input 
 442              	    use: 
 443              	      r1    dest adr
 444              	      r2    bytes to move 
 445              	      T1    length line to delete 
 446              	      T2    txtend 
 447              	********************************************/
 448              	    _FUNC delete_line 
 449 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
 450 0310 0146     	    mov r1,r0 // dest 
 451 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 452 0316 4044     	    add r0,T1  // src
 453 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 454 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 455 0320 00B5FFF7 	    _CALL cmove
 455      FEFF5DF8 
 455      04EB
 456 032a A9EB0809 	    sub T2,T1 // txtend-count 
 457 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 458 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 459 0336 7047     	    _RET 
 460              	
 461              	/******************************************
 462              	    create_gap 
 463              	    create a gap in text area to insert new line 
 464              	    input:
 465              	      r0    adr 
 466              	      r1    length 
 467              	    output:
 468              	      r0    adr 
 469              	    use:
ARM GAS  tinyBasic.s 			page 22


 470              	      T1    length 
 471              	      T2    txtend 
 472              	************************************************/
 473              	    _FUNC create_gap 
 474 0338 2DE90503 	    push {r0,r2,T1,T2}
 475 033c 8846     	    mov T1,R1
 476 033e 0144     	    add r1,r0  // dest 
 477 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 478 0344 A9EB0002 	    sub r2,T2,r0 
 479 0348 00B5FFF7 	    _CALL cmove
 479      FEFF5DF8 
 479      04EB
 480 0352 C144     	    add T2,T1 
 481 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 482 0358 BDE80503 	    pop {r0,r2,T1,T2}
 483 035c 7047     	    _RET 
 484              	
 485              	/************************************************
 486              	    insert_line 
 487              	    insert BASIC line in text area 
 488              	    first search if line with same number exist 
 489              	    replace if so. 
 490              	    input:
 491              	      r0    *buffer to insert 
 492              	    output:
 493              	      none 
 494              	    use: 
 495              	      T1     *buffer
 496              	      T2     temp  
 497              	************************************************/ 
 498 035e 00BF     	    _FUNC insert_line 
 499 0360 2DE90203 	    push {r1,T1,T2}
 500 0364 8046     	    mov T1,r0 
 501 0366 B8F80000 	    ldrh r0,[T1]
 502 036a 00B5FFF7 	    _CALL search_lineno 
 502      FEFF5DF8 
 502      04EB
 503 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 504              	// already exist 
 505 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 505      C8FF5DF8 
 505      04EB
 506 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 507 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 508 0388 0ED0     	    beq 9f
 509              	1: //insert new line 
 510 038a 98F80210 	    ldrb r1,[T1,#2]
 511 038e 00B5FFF7 	    _CALL create_gap 
 511      D2FF5DF8 
 511      04EB
 512 0398 0146     	    mov r1,r0
 513 039a 4046     	    mov r0,T1 
 514 039c 8278     	    ldrb r2,[r0,#2]
 515 039e 00B5FFF7 	    _CALL cmove 
 515      FEFF5DF8 
 515      04EB
 516 03a8 BDE80203 	9:  pop {r1,T1,T2}
ARM GAS  tinyBasic.s 			page 23


 517 03ac 7047     	    _RET 
 518              	
 519              	/*********************************
 520              	    compile 
 521              	    tokenize source line save it 
 522              	    in pas buffer.
 523              	    compiled line format: 
 524              	      line_no  2 bytes {0...32767}
 525              	      count    1 byte  
 526              	      tokens   variable length 
 527              	  input:
 528              	     r0   *text buffer 
 529              	     r1   *text length   
 530              	  output:
 531              	    r0    0 stored | -1 immediate 
 532              	  use:
 533              	    r3    tib index   
 534              	    T1    tib
 535              	    T2    pad
 536              	***********************************/
 537 03ae 00BF     	    _FUNC compile
 538 03b0 8046     	    mov T1, r0  // source text buffer 
 539 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 540 03b4 DFF8889A 	    ldr T2,pad // tokens buffer
 541 03b8 83EA0303 	    eor r3,r3 // source index  
 542 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 543 03be 40F02000 	    orr r0,#FCOMP
 544 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 545 03c4 80EA0000 	    eor r0,r0     
 546 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 547 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 548 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 549 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 550 03d6 00B500F0 	    _CALL parse_int 
 550      44F95DF8 
 550      04EB
 551 03e0 07D0     	    beq 2f 
 552              	// this is a line number     
 553 03e2 0129     	    cmp r1,#1 
 554 03e4 02D5     	    bpl 1f 
 555 03e6 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 556 03ea 89E3     	    b tb_error  
 557              	1:  // write line # to pad 
 558 03ec 29F8031C 	    strh r1,[T2,#-3]
 559 03f0 2360     	    str r3,[UPP,#IN_SAVED]
 560              	2:  // check for pad full 
 561 03f2 C145     	    cmp T2,T1
 562 03f4 02DB     	    blt 3f 
 563 03f6 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 564 03fa 81E3     	    b tb_error 
 565 03fc 00B500F0 	3:  _CALL comp_token 
 565      27F85DF8 
 565      04EB
 566 0406 0028     	    cmp r0,#TK_NONE 
 567 0408 01D0     	    beq 4f 
 568 040a 2360     	    str r3,[UPP,#IN_SAVED]
 569 040c F1E7     	    b 2b 
ARM GAS  tinyBasic.s 			page 24


 570              	4: // compilation completed 
 571 040e DFF8303A 	    ldr r3,pad 
 572 0412 A9EB0300 	    sub r0,T2,r3 // line length 
 573 0416 9870     	    strb r0,[r3,#2]
 574 0418 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 575 041a 1888     	    ldrh r0,[r3] // line number 
 576 041c 70B1     	    cbz r0,8f  
 577              	// insert line in text buffer 
 578 041e 206C     	    ldr r0,[UPP,#FLAGS]
 579 0420 10F0080F 	    tst r0,#FSTOP
 580 0424 02D0     	    beq 7f 
 581 0426 4FF01000 	    mov r0,#ERR_CANT_PROG 
 582 042a 69E3     	    b tb_error 
 583 042c 1846     	7:  mov r0,r3 
 584 042e 00B5FFF7 	    _CALL insert_line 
 584      96FF5DF8 
 584      04EB
 585 0438 4040     	    eors r0,r0 
 586 043a 08E0     	    b 9f 
 587 043c 9B46     	8:  mov BPTR,r3 // *token_list 
 588 043e 4FF0030A 	    mov IN,#3
 589 0442 206C     	    ldr r0,[UPP,#FLAGS]
 590 0444 A0F12000 	    sub r0,#FCOMP
 591 0448 2064     	    str r0,[UPP,#FLAGS]
 592 044a 5FF0FF30 	    movs r0,#-1 
 593 044e 7047     	9:  _RET 
 594              	
 595              	/*********************************************
 596              	    compile next token from source 
 597              	    input: 
 598              	      r3 		tib index  
 599              	      T1    tib adr
 600              	      T2    insert point in pad  
 601              	    output:
 602              	      r0     token attribute 
 603              	      r1 		token value
 604              	      r3     tib index updated    
 605              	      T2     updated 
 606              	      use:
 607              	**********************************************/
 608              	    .macro _case c, next  
 609              	    cmp r0,#\c 
 610              	    bne \next
 611              	    .endm 
 612              	
 613              	    _FUNC comp_token 
 614 0450 40B4     	    push {r6}
 615 0452 18F80300 	    ldrb r0,[T1,r3]
 616 0456 0040     	    ands r0,r0 
 617 0458 7CD0     	    beq store_r0  // reached end of text  
 618 045a 4FF02000 	    mov r0,#SPACE 
 619 045e 00B500F0 	    _CALL skip  // skip spaces 
 619      50F95DF8 
 619      04EB
 620 0468 18F80300 	    ldrb r0,[T1,r3]
 621 046c 0040     	    ands r0,r0 
 622 046e 71D0     	    beq store_r0  // reached end of text 
ARM GAS  tinyBasic.s 			page 25


 623 0470 03F10103 	    add r3,#1 
 624 0474 00B500F0 	    _CALL upper 
 624      51F95DF8 
 624      04EB
 625 047e 00B500F0 	    _CALL is_special
 625      88F85DF8 
 625      04EB
 626 0488 DFF8706E 	    ldr r6,=token_ofs
 627 048c D6E811F0 	    tbh [r6,r1] 
 628              	tok_idx0:     
 629              	//  not special char.  
 630 0490 63E0     	    b try_number 
 631              	// single char token with no value 
 632              	single: 
 633 0492 DFF86C6E 	    ldr r6,=tok_single
 634 0496 705C     	    ldrb r0,[r6,r1] 
 635 0498 5CE0     	    b store_r0
 636              	label: 
 637 049a 00B500F0 	    _CALL parse_label
 637      B4F85DF8 
 637      04EB
 638 04a4 00B9     	    cbnz r0,1f
 639 04a6 27E3     	    b syntax_error 
 640 04a8 09F8010B 	1:  strb r0,[T2],#1
 641 04ac 49F8041B 	    str r1,[T2],#4
 642 04b0 6DE0     	    b token_exit 
 643              	lt:
 644 04b2 4FF03400 	    mov r0,#TK_LT
 645 04b6 18F80310 	    ldrb r1,[T1,r3]
 646 04ba 3E29     	    cmp r1,#'>' 
 647 04bc 06D0     	    beq 1f
 648 04be 0AE0     	    b 2f 
 649              	gt:
 650 04c0 4FF03100 	    mov r0,#TK_GT 
 651 04c4 18F80310 	    ldrb r1,[T1,r3]
 652 04c8 3C29     	    cmp r1,#'<'
 653 04ca 04D1     	    bne 2f  
 654 04cc 03F10103 	1:  add r3,#1
 655 04d0 4FF03500 	    mov r0,#TK_NE  
 656 04d4 3EE0     	    b store_r0
 657 04d6 3D29     	2:  cmp r1,#'=' 
 658 04d8 3CD1     	    bne store_r0  
 659 04da 03F10103 	    add r3,#1
 660 04de 00F10200 	    add r0,#2
 661 04e2 37E0     	    b store_r0       
 662              	bkslash:
 663 04e4 18F80310 	    ldrb r1,[T1,r3]
 664 04e8 03F10103 	    add r3,#1
 665 04ec 4FF00300 	    mov r0,#TK_CHAR 
 666 04f0 09F8010B 	    strb r0,[T2],#1
 667 04f4 09F8011B 	    strb r1,[T2],#1
 668 04f8 49E0     	    b token_exit 
 669              	prt_cmd: 
 670 04fa 4FF00B00 	    mov r0,#TK_CMD 
 671 04fe 4FF03401 	    mov r1,#PRT_IDX
 672 0502 09F8010B 	    strb r0,[T2],#1
 673 0506 09F8011B 	    strb r1,[T2],#1
ARM GAS  tinyBasic.s 			page 26


 674 050a 40E0     	    b token_exit 
 675              	quote:
 676 050c 4FF00200 	    mov r0,#TK_QSTR 
 677 0510 09F8010B 	    strb r0,[T2],#1
 678 0514 00B500F0 	    _CALL parse_quote
 678      C1F85DF8 
 678      04EB
 679 051e 36E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 0520 4FF00B00 	    mov r0,#TK_CMD 
 683 0524 4FF03801 	    mov r1,#REM_IDX 
 684 0528 09F8010B 	    strb r0,[T2],#1 
 685 052c 09F8011B 	    strb r1,[T2],#1
 686 0530 08EB0300 	    add r0,T1,r3 
 687 0534 4946     	    mov r1,T2 
 688 0536 00B5FFF7 	    _CALL strcpy 
 688      FEFF5DF8 
 688      04EB
 689 0540 00B5FFF7 	    _CALL strlen 
 689      FEFF5DF8 
 689      04EB
 690 054a 8144     	    add T2,r0
 691 054c 09F10109 	    add T2,#1
 692 0550 6368     	    ldr r3,[UPP,#COUNT]
 693 0552 1CE0     	    b token_exit
 694              	store_r0: 
 695 0554 09F8010B 	    strb r0,[T2],#1
 696 0558 19E0     	    b token_exit 
 697              	try_number:
 698 055a A3F10103 	    sub r3,#1
 699 055e 00B500F0 	    _CALL parse_int  
 699      80F85DF8 
 699      04EB
 700 0568 04D0     	    beq 1f 
 701 056a 09F8010B 	    strb r0,[T2],#1 
 702 056e 49F8041B 	    str r1,[T2],#4
 703 0572 0CE0     	    b token_exit 
 704 0574 00B500F0 	1:  _CALL parse_keyword 
 704      55F95DF8 
 704      04EB
 705 057e 0428     	    cmp r0,#TK_VAR 
 706 0580 01D0     	    beq 2f 
 707 0582 3829     	    cmp r1,#REM_IDX 
 708 0584 CCD0     	    beq tick
 709 0586 09F8010B 	2:  strb r0,[T2],#1 
 710 058a 09F8011B 	    strb r1,[T2],#1
 711              	token_exit:
 712 058e 40BC     	    pop {r6}
 713 0590 7047     	    _RET 
 714              	
 715              	/****************************
 716              	    is_special  
 717              	    check for non alphanum
 718              	    input:
 719              	      r0    character to scan 
 720              	    output:
ARM GAS  tinyBasic.s 			page 27


 721              	      r0    character 
 722              	      r1    0 || index 
 723              	    use: 
 724              	      r1    scan index 
 725              	      r2    temp 
 726              	      r3    char_list 
 727              	*****************************/
 728 0592 00BF     	    _FUNC is_special 
 729 0594 0CB4     	    push {r2,r3}
 730 0596 4FF00101 	    mov r1,#1
 731 059a DFF8683D 	    ldr r3,=char_list 
 732 059e 5A5C     	1:  ldrb r2,[r3,r1]
 733 05a0 22B1     	    cbz r2,8f 
 734 05a2 8242     	    cmp r2,r0 
 735 05a4 04D0     	    beq 9f 
 736 05a6 01F10101 	    add r1,#1 
 737 05aa F8E7     	    b 1b
 738 05ac 81EA0101 	8:  eor r1,r1     
 739 05b0 0CBC     	9:  pop {r2,r3}
 740 05b2 7047     	    _RET 
 741              	
 742              	char_list:
 743 05b4 202C3B40 	  .asciz " ,;@():#-+*/%=!<>\\?'\""
 743      28293A23 
 743      2D2B2A2F 
 743      253D213C 
 743      3E5C3F27 
 744              	
 745              	tok_single:
 746 05ca 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 746      060701
 747 05d1 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL,TK_LBL  
 747      21223240 
 748              	  
 749 05d9 0000BF   	  .p2align 2
 750              	token_ofs:
 751 05dc 0000     	  .hword  0 // not found
 752              	  // TK_COMMA...TK_EQUAL , 13 
 753 05de 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 753      01000100 
 754 05e6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 754      01000100 
 755 05ee 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 755      01000100 
 756 05f6 01000500 	  .hword  (single-tok_idx0)/2,(label-tok_idx0)/2     
 757              	  // '<','>'
 758 05fa 11001800 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 759              	  // '\'
 760 05fe 2A00     	  .hword  (bkslash-tok_idx0)/2
 761              	  // '?' 
 762 0600 3500     	  .hword  (prt_cmd-tok_idx0)/2 
 763              	  // "'"  
 764 0602 4800     	  .hword  (tick-tok_idx0)/2 
 765              	  // '"' quote 
 766 0604 3E00     	  .hword (quote-tok_idx0)/2
 767              	
 768 0606 00BF     	  .p2align 2
ARM GAS  tinyBasic.s 			page 28


 769              	
 770              	/****************************
 771              	    parse_label 
 772              	    label form: ![A..Z]+
 773              	    maximum 6 letters
 774              	    input:
 775              	      *buffer 
 776              	    output:
 777              	      r0  TK_LBL 
 778              	      r1  compressed label
 779              	    use:
 780              	      r2   compressed value
 781              	      r3   updated 
 782              	      r5   letter count maxim 6   
 783              	****************************/
 784              	    _FUNC parse_label
 785 0608 24B4     	    push {r2,r5}
 786 060a 82EA0202 	    eor r2,r2
 787 060e 4FF00605 	    mov r5,#6 
 788 0612 18F80300 	1:  ldrb r0,[T1,r3]
 789 0616 00B500F0 	    _CALL is_alpha 
 789      B6F85DF8 
 789      04EB
 790 0620 18D0     	    beq 8f // not letter 
 791 0622 00B500F0 	    _CALL upper 
 791      7AF85DF8 
 791      04EB
 792 062c A0F14000 	    sub r0,#'@' 
 793 0630 4FEA4212 	    lsl r2,#5 
 794 0634 0244     	    add r2,r0 
 795 0636 03F10103 	    add r3,#1
 796 063a 013D     	    subs r5,#1 
 797 063c E9D1     	    bne 1b
 798              	2: // skip letters   
 799 063e 18F80300 	    ldrb r0,[T1,r3]
 800 0642 00B500F0 	    _CALL is_alpha 
 800      A0F85DF8 
 800      04EB
 801 064c 02D0     	    beq 8f 
 802 064e 03F10103 	    add r3,#1 
 803 0652 F4E7     	    b 2b       
 804 0654 80EA0000 	8:  eor r0,r0 
 805 0658 1146     	    mov r1,r2 
 806 065a 09B1     	    cbz r1,9f
 807 065c 4FF04000 	    mov r0,#TK_LBL 
 808 0660 24BC     	9:  pop {r2,r5}
 809 0662 7047     	    _RET 
 810              	
 811              	
 812              	/****************************
 813              	    parse_int 
 814              	    parse an integer from text
 815              	    if not valid integer 
 816              	    r1 return *buffer else 
 817              	    *buffer is incremented after integer 
 818              	  input:
 819              	    r0   *buffer 
ARM GAS  tinyBasic.s 			page 29


 820              	  output:
 821              	    r0   TK_INTGR|TK_NONE
 822              	    r1   int|0   
 823              	  use:
 824              	    r3   tib index updated     
 825              	*****************************/
 826              	    _FUNC parse_int 
 827 0664 4FF00A01 	    mov r1,#10 // default base 
 828 0668 18F80300 	    ldrb r0,[T1,r3]
 829 066c 2428     	    cmp r0,'$' 
 830 066e 02D1     	    bne 2f 
 831 0670 4FF01001 	    mov r1,#16 // hexadecimal number 
 832 0674 03E0     	    b 3f  
 833 0676 2628     	2:  cmp r0,#'&' 
 834 0678 03D1     	    bne 4f
 835 067a 4FF00201 	    mov r1,#2 //binary number  
 836 067e 03F10103 	3:  add r3,#1
 837 0682 03EB0800 	4:  add r0,r3,T1 
 838 0686 00B5FFF7 	    _CALL atoi 
 838      FEFF5DF8 
 838      04EB
 839 0690 10B1     	    cbz r0,9f
 840 0692 0344     	    add r3,r0
 841 0694 4FF00F00 	    mov r0,#TK_INTGR
 842 0698 0040     	9:  ands r0,r0   
 843 069a 7047     	    _RET 
 844              	
 845              	/*********************************************
 846              	    parse_quote 
 847              	    parse quoted string 
 848              	    input: 
 849              	      r3 		tib index  
 850              	      T1    tib adr
 851              	      T2    insert point in pad  
 852              	    output:
 853              	      r0     token attribute 
 854              	      r1 		*str 
 855              	      r3     tib index updated    
 856              	      T2     updated 
 857              	      use:
 858              	*********************************************/
 859              	    _FUNC parse_quote
 860 069c 4DF8049D 	    push {T2} 
 861 06a0 18F80300 	1:  ldrb r0,[T1,r3]
 862 06a4 03F10103 	    add r3,#1 
 863 06a8 2228     	    cmp r0,#'"'
 864 06aa 09D0     	    beq 9f 
 865 06ac 5C28     	    cmp r0,#'\\'
 866 06ae 04D1     	    bne 2f 
 867 06b0 00B500F0 	    _CALL get_escaped_char 
 867      0DF85DF8 
 867      04EB
 868 06ba 09F8010B 	2:  strb r0,[T2],#1
 869 06be EFE7     	    b 1b 
 870 06c0 80EA0000 	9:  eor  r0,r0
 871 06c4 09F8010B 	    strb r0,[T2],#1
 872 06c8 4FF00200 	    mov r0,#TK_QSTR
ARM GAS  tinyBasic.s 			page 30


 873 06cc 02BC     	    pop {r1}
 874 06ce 7047     	    _RET 
 875              	
 876              	/**********************************************
 877              	    get_escaped_char 
 878              	    convert "\c" in quoted string 
 879              	    input:
 880              	      r0 
 881              	      r3   index 
 882              	      T1   tib 
 883              	    output:
 884              	      r0   replacement char
 885              	      r3   updated 
 886              	    use:
 887              	      r1   *table 
 888              	      r2   temp 
 889              	**********************************************/
 890              	    _FUNC get_escaped_char 
 891 06d0 06B4     	    push {r1,r2}
 892 06d2 18F80300 	    ldrb r0,[T1,r3]
 893 06d6 03F10103 	    add r3,#1
 894 06da 2228     	    cmp r0,#'"' 
 895 06dc 0BD0     	    beq 9f 
 896 06de DFF8281C 	1:  ldr r1,=escaped 
 897 06e2 11F8012B 	2:  ldrb r2,[r1],#1
 898 06e6 12B1     	    cbz r2,6f 
 899 06e8 8242     	    cmp r2,r0 
 900 06ea 02D0     	    beq 7f 
 901 06ec F9E7     	    b 2b
 902 06ee A0F10702 	6:  sub r2,r0,#7     
 903 06f2 02F10700 	7:  add r0,r2,#7
 904 06f6 06BC     	9:  pop {r1,r2}   
 905 06f8 7047     	    _RET
 906              	
 907 06fa 6162746E 	escaped: .asciz "abtnvfr"
 907      76667200 
 908              	
 909              	/*********************************************
 910              	   skip character in TIB 
 911              	   input:
 912              	      r0    character to skip 
 913              	      r3    tib index 
 914              	      T1    tib adr
 915              	    output: 
 916              	      r3    updated
 917              	    use:
 918              	      r1     
 919              	**********************************************/   
 920 0702 00BF     	    _FUNC skip
 921 0704 02B4     	    push {r1} 
 922 0706 18F80310 	1:  ldrb r1,[T1,r3]
 923 070a 8142     	    cmp r1,r0
 924 070c 02D1     	    bne 2f
 925 070e 03F10103 	    add r3,#1 
 926 0712 F8E7     	    b 1b 
 927 0714 2360     	2:  str r3,[UPP,#IN_SAVED]
 928 0716 02BC     	    pop {r1}
ARM GAS  tinyBasic.s 			page 31


 929 0718 7047     	    _RET
 930              	
 931              	/********************************************
 932              	    upper
 933              	    convert character in upper case 
 934              	    input: 
 935              	      r0   character 
 936              	    output:
 937              	      r0   upper case character 
 938              	*********************************************/
 939 071a 00BF     	    _FUNC upper 
 940 071c 6128     	    cmp r0,#'a' 
 941 071e 03DB     	    blt 9f 
 942 0720 7A28     	    cmp r0,#'z' 
 943 0722 01DC     	    bgt 9f 
 944 0724 00F05F00 	    and r0,#0x5f 
 945 0728 7047     	9:  _RET 
 946              	
 947              	/***************************************
 948              	   is_digit 
 949              	   check if char is decimal digit.
 950              	   convert to decimal digit.
 951              	   input:
 952              	      r0    char 
 953              	   output:
 954              	      r0    if !Z then converted digit 
 955              	      Z     BNE true | BEQ false  
 956              	***************************************/
 957 072a 00BF     	    _GBL_FUNC is_digit 
 958 072c 02B4     	    push {r1} 
 959 072e 81EA0101 	    eor r1,r1 
 960 0732 3028     	    cmp r0,#'0' 
 961 0734 05DB     	    blt 9f
 962 0736 3A28     	    cmp r0,'9'+1
 963 0738 03D5     	    bpl 9f 
 964 073a 4FF0FF31 	    mov r1,#-1
 965 073e A0F13000 	    sub r0,#'0'  
 966              	9:   
 967 0742 0940     	    ands r1,r1
 968 0744 02BC     	    pop {r1} 
 969 0746 7047     	    _RET 
 970              	
 971              	/***************************************
 972              	    is_hex 
 973              	    check for hexadecimal digit 
 974              	    convert to hex digit.
 975              	    input:
 976              	      r0    
 977              	    output:
 978              	      r0     if !Z then converted digit 
 979              	      Z      BNE true | BEQ false         
 980              	***************************************/
 981              	    _FUNC is_hex 
 982 0748 02B4     	    push {r1}
 983 074a 4FF0FF31 	    mov r1,#-1 
 984 074e 4128     	    cmp r0,#'A' 
 985 0750 01D4     	    bmi 1f 
ARM GAS  tinyBasic.s 			page 32


 986 0752 A0F10700 	    sub r0,#7 
 987 0756 A0F13000 	1:  sub r0,#'0'
 988 075a 01D4     	    bmi 2f 
 989 075c 1028     	    cmp r0,#16
 990 075e 01D4     	    bmi 9f 
 991 0760 81EA0101 	2:  eor r1,r1  
 992 0764 0940     	9:  ands r1,r1 
 993 0766 02BC     	    pop {r1}
 994 0768 7047     	    _RET 
 995              	
 996              	/***************************************
 997              	    is_bit 
 998              	    check if char is '0'|'1' 
 999              	    convert to binary digit. 
 1000              	    input:
 1001              	      r0    
 1002              	    output:
 1003              	      r0     if !Z then converted digit 
 1004              	      Z      BNE true | BEQ false         
 1005              	***************************************/
 1006 076a 00BF     	    _FUNC is_bit
 1007 076c 02B4     	    push  {r1}
 1008 076e 4FF0FF31 	    mov r1,#-1 
 1009 0772 A0F13000 	    sub r0,#'0' 
 1010 0776 01D4     	    bmi 2f 
 1011 0778 0229     	    cmp r1,#2
 1012 077a 01D4     	    bmi 9f 
 1013 077c 81EA0101 	2:  eor r1,r1 
 1014 0780 0940     	9:  ands r1,r1 
 1015 0782 02BC     	    pop {r1}
 1016 0784 7047     	    _RET 
 1017              	
 1018              	/***************************************
 1019              	    is_alpha 
 1020              	    check if character is {a..z,A..Z} 
 1021              	  input:
 1022              	    r0   character 
 1023              	  output: 
 1024              	    r0    same character 
 1025              	    Z    BNE true | BEQ false  
 1026              	****************************************/
 1027 0786 00BF     	    _FUNC is_alpha
 1028 0788 02B4     	    push {r1} 
 1029 078a 4FF0FF31 	    mov r1,#-1
 1030 078e 4128     	    cmp r0,#'A' 
 1031 0790 05D4     	    bmi 8f 
 1032 0792 5B28     	    cmp r0,#'Z'+1 
 1033 0794 05D4     	    bmi 9f
 1034 0796 6128     	    cmp r0,#'a' 
 1035 0798 01D4     	    bmi 8f 
 1036 079a 7B28     	    cmp r0,#'z'+1
 1037 079c 01D4     	    bmi 9f  
 1038 079e 81EA0101 	8:  eor r1,r1  
 1039 07a2 0940     	9:  ands r1,r1 
 1040 07a4 02BC     	    pop {r1}
 1041 07a6 7047     	    _RET 
 1042              	
ARM GAS  tinyBasic.s 			page 33


 1043              	/***************************************
 1044              	    is_num 
 1045              	    check if character is {0..9} 
 1046              	  input:
 1047              	    r0   character 
 1048              	  output: 
 1049              	    r0    same character 
 1050              	    Z    BNE true | BEQ false  
 1051              	****************************************/
 1052              	    _FUNC is_num 
 1053 07a8 02B4     	    push {r1} 
 1054 07aa 4FF0FF31 	    mov r1,#-1 
 1055 07ae 3028     	    cmp r0,#'0' 
 1056 07b0 01DB     	    blt 8f 
 1057 07b2 3A28     	    cmp r0,#'9'+1 
 1058 07b4 01D4     	    bmi 9f 
 1059 07b6 81EA0101 	8:  eor r1,r1  
 1060 07ba 0940     	9:  ands r1,r1 
 1061 07bc 02BC     	    pop {r1}
 1062 07be 7047     	    _RET 
 1063              	
 1064              	/*****************************************
 1065              	    is_alnum 
 1066              	    check if character is alphanumeric 
 1067              	    input:
 1068              	      r0 
 1069              	    output:
 1070              	      r0     same 
 1071              	      Z      BEQ false | BNE true 
 1072              	*****************************************/
 1073              	    _FUNC is_alnum 
 1074 07c0 00B5FFF7 	    _CALL is_alpha 
 1074      E1FF5DF8 
 1074      04EB
 1075 07ca 04D1     	    bne 9f 
 1076 07cc 00B5FFF7 	    _CALL is_num 
 1076      EBFF5DF8 
 1076      04EB
 1077 07d6 7047     	9:  _RET 
 1078              	
 1079              	/******************************************
 1080              	    atoi 
 1081              	    convert ascii to integer 
 1082              	    input:
 1083              	      r0   *buffer 
 1084              	      r1   base 
 1085              	    output:
 1086              	      r0   0 no integer found 
 1087              	      r1   integer
 1088              	    use:
 1089              	      r2   base  
 1090              	      T1   *buffer 
 1091              	      T2   digit count  
 1092              	******************************************/
 1093              	    _GBL_FUNC atoi 
 1094 07d8 2DE90403 	    push {r2,T1,T2}
 1095 07dc 8046     	    mov T1,r0  // *buffer 
ARM GAS  tinyBasic.s 			page 34


 1096 07de 0A46     	    mov r2,r1  // base  
 1097 07e0 81EA0101 	    eor r1,r1  // converted integer 
 1098 07e4 89EA0909 	    eor T2,T2  // digit count 
 1099 07e8 18F8010B 	1:  ldrb r0,[T1],#1
 1100 07ec 00B5FFF7 	    _CALL upper 
 1100      95FF5DF8 
 1100      04EB
 1101 07f6 3028     	    cmp r0,#'0'
 1102 07f8 0FD4     	    bmi 8f
 1103 07fa 3A28     	    cmp r0,#'9'+1 
 1104 07fc 03D4     	    bmi 2f 
 1105 07fe 4128     	    cmp r0,#'A'
 1106 0800 0BD4     	    bmi 8f 
 1107 0802 A0F10700 	    sub r0,#7 
 1108 0806 A0F13000 	2:  sub r0,#'0' 
 1109 080a 9042     	    cmp r0,r2
 1110 080c 05D5     	    bpl 8f  
 1111 080e 02FB01F1 	    mul r1,r2 
 1112 0812 0144     	    add r1,r0
 1113 0814 09F10109 	    add T2,#1
 1114 0818 E6E7     	    b 1b 
 1115 081a 4846     	8:  mov r0,T2  
 1116 081c BDE80403 	    pop {r2,T1,T2}
 1117 0820 7047     	    _RET 
 1118              	
 1119              	/*****************************************
 1120              	    parse_keyword 
 1121              	    parse work and ckeck if in dictionary 
 1122              	    input:
 1123              	      r0    first character 
 1124              	      r3    tib index 
 1125              	      t1    tib 
 1126              	      t2    pad 
 1127              	    output:
 1128              	      r3    updated 
 1129              	      t1    updated 
 1130              	      t2    updated   
 1131              	    use:
 1132              	    
 1133              	*****************************************/
 1134 0822 00BF     	    _FUNC parse_keyword 
 1135 0824 4DF8049D 	    push {T2}
 1136 0828 18F80300 	    ldrb r0,[T1,r3]
 1137 082c 03F10103 	    add r3,#1
 1138 0830 00B3     	    cbz r0,2f 
 1139 0832 00B5FFF7 	    _CALL upper 
 1139      72FF5DF8 
 1139      04EB
 1140 083c 00B5FFF7 	    _CALL is_alpha 
 1140      A3FF5DF8 
 1140      04EB
 1141 0846 00F05781 	    beq syntax_error 
 1142 084a 09F8010B 	    strb r0,[T2],#1
 1143 084e 18F80300 	1:  ldrb r0,[T1,r3]
 1144 0852 03F10103 	    add r3,#1 
 1145 0856 68B1     	    cbz r0,2f 
 1146 0858 00B5FFF7 	    _CALL upper 
ARM GAS  tinyBasic.s 			page 35


 1146      5FFF5DF8 
 1146      04EB
 1147 0862 00B5FFF7 	    _CALL is_alnum
 1147      ACFF5DF8 
 1147      04EB
 1148 086c 02D0     	    beq 2f 
 1149 086e 09F8010B 	    strb r0,[T2],#1
 1150 0872 ECE7     	    b 1b 
 1151 0874 A3F10103 	2:  sub r3,#1
 1152 0878 80EA0000 	    eor r0,r0
 1153 087c 89F80000 	    strb r0,[T2] 
 1154 0880 0098     	    ldr r0,[sp]
 1155 0882 4178     	    ldrb r1,[r0,#1] 
 1156 0884 29B9     	    cbnz r1,3f
 1157 0886 0178     	    ldrb r1,[r0]
 1158 0888 A1F14101 	    sub r1,#'A'
 1159 088c 4FF00400 	    mov r0,#TK_VAR
 1160 0890 08E0     	    b 9f 
 1161 0892 DFF8781A 	3:  ldr r1,=kword_dict  
 1162 0896 00B500F0 	    _CALL search_dict 
 1162      F0F95DF8 
 1162      04EB
 1163 08a0 00B9     	    cbnz r0,9f 
 1164 08a2 29E1     	    b syntax_error 
 1165 08a4 5DF8049B 	9:  pop {T2}
 1166 08a8 7047     	    _RET 
 1167              	
 1168              	
 1169              	/*******************
 1170              	    DECOMPILER 
 1171              	*******************/
 1172              	
 1173              	/********************************************
 1174              	    cmd_name 
 1175              	    search bytecode in dictionary and 
 1176              	    return its name 
 1177              	  input:
 1178              	    r0    keyword bytecode 
 1179              	  ouput:
 1180              	    r0    name string 
 1181              	  use:
 1182              	    T1    link 
 1183              	    T2    tmp 
 1184              	*********************************************/
 1185 08aa 00BF     	    _FUNC cmd_name 
 1186 08ac 2DE90003 	    push {T1,T2}
 1187 08b0 DFF8588A 	    ldr T1,=kword_dict 
 1188 08b4 58F8089C 	1:  ldr T2,[T1,#-8]
 1189 08b8 8145     	    cmp T2,r0 
 1190 08ba 04D0     	    beq 2f 
 1191 08bc 58F80C8C 	    ldr T1,[T1,#-12]
 1192 08c0 B8F1000F 	    cmp T1,#0
 1193 08c4 F6D1     	    bne 1b  
 1194 08c6 4046     	2:  mov r0,T1 
 1195 08c8 BDE80003 	    pop {T1,T2}
 1196 08cc 7047     	    _RET
 1197              	
ARM GAS  tinyBasic.s 			page 36


 1198              	/*****************************
 1199              	  decompile_line 
 1200              	  detokenize BASIC line 
 1201              	  input:
 1202              	    r0  *token list 
 1203              	    r1  *output buffer 
 1204              	  output:
 1205              	    r0  *output buffer (.asciz) 
 1206              	  use:
 1207              	    T1  *output buffer
 1208              	    BPTR  *token list
 1209              	    IN  offset in token list  
 1210              	******************************/
 1211 08ce 00BF     	    _GBL_FUNC decompile_line
 1212 08d0 2DE90E01 	    push {r1,r2,r3,T1} 
 1213 08d4 8346     	    mov BPTR,r0 
 1214 08d6 4FF0000A 	    mov IN,#0
 1215 08da 8846     	    mov T1,r1 
 1216 08dc 3BF80A00 	    ldrh r0,[BPTR,IN]
 1217 08e0 0AF1020A 	    add IN,#2 
 1218 08e4 4FF00A01 	    mov r1,#10 
 1219 08e8 00B5FFF7 	    _CALL itoa
 1219      FEFF5DF8 
 1219      04EB
 1220 08f2 4146     	    mov r1,T1
 1221 08f4 00B5FFF7 	    _CALL strcpy
 1221      FEFF5DF8 
 1221      04EB
 1222 08fe 4046     	    mov r0,T1 
 1223 0900 00B5FFF7 	    _CALL strlen
 1223      FEFF5DF8 
 1223      04EB
 1224 090a 8044     	    add T1,r0 
 1225 090c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1226 0910 0AF1010A 	    add IN,#1 
 1227 0914 6060     	    str r0,[UPP,#COUNT]
 1228              	decomp_loop:
 1229 0916 00B500F0 	    _CALL next_token
 1229      E8FA5DF8 
 1229      04EB
 1230 0920 0028     	    cmp r0,#TK_NONE 
 1231 0922 00F0B580 	    beq 9f  
 1232 0926 0F28     	    cmp r0,#TK_INTGR 
 1233 0928 15D1     	    bne 1f 
 1234 092a 0846     	    mov r0,r1 
 1235 092c A169     	    ldr r1,[UPP,#BASE]
 1236 092e 00B5FFF7 	    _CALL itoa
 1236      FEFF5DF8 
 1236      04EB
 1237 0938 01B4     	    push {r0}
 1238 093a 4146     	    mov r1,T1 
 1239 093c 00B5FFF7 	    _CALL strcpy
 1239      FEFF5DF8 
 1239      04EB
 1240 0946 01BC     	    pop {r0} 
 1241 0948 00B5FFF7 	    _CALL strlen
 1241      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 37


 1241      04EB
 1242 0952 8044     	    add T1,r0 
 1243 0954 DFE7     	    b decomp_loop 
 1244 0956 4028     	1:  cmp r0,#TK_LBL
 1245 0958 17D1     	    bne 1f
 1246 095a 4FF02100 	    mov r0,#'!'
 1247 095e 08F8010B 	    strb r0,[T1],#1 
 1248 0962 4FF01902 	    mov r2,#25
 1249 0966 4FF6FF73 	    mov r3,#0xffff 
 1250 096a C3F6FF73 	    movt r3,#0x3fff 
 1251 096e 01EA0301 	0:  and r1,r3 
 1252 0972 4FEA5313 	    lsr r3,#5 
 1253 0976 31FA02F0 	    lsrs r0,r1,r2 
 1254 097a 03D0     	    beq 2f
 1255 097c 00F14000 	    add r0,#'@'
 1256 0980 08F8010B 	    strb r0,[T1],#1
 1257 0984 053A     	2:  subs r2,#5 
 1258 0986 F2DA     	    bge 0b 
 1259 0988 C5E7     	    b decomp_loop
 1260 098a 0428     	1:  cmp r0,#TK_VAR 
 1261 098c 04D1     	    bne 2f 
 1262 098e 01F14100 	    add r0,r1,'A'
 1263 0992 08F8010B 	    strb r0,[T1],#1 
 1264 0996 BEE7     	    b decomp_loop 
 1265 0998 0328     	2:  cmp r0,#TK_CHAR 
 1266 099a 0AD1     	    bne 3f 
 1267 099c 4FF05C00 	    mov r0,#'\\'
 1268 09a0 08F8010B 	    strb r0,[T1],#1
 1269 09a4 08F8011B 	    strb r1,[T1],#1
 1270 09a8 4FF02000 	    mov r0,#SPACE 
 1271 09ac 08F8010B 	    strb r0,[T1],#1
 1272 09b0 B1E7     	    b decomp_loop 
 1273 09b2 0228     	3:  cmp r0,#TK_QSTR 
 1274 09b4 17D1     	    bne 4f 
 1275 09b6 4FF02200 	    mov r0,#'"'
 1276 09ba 08F8010B 	    strb r0,[T1],#1 
 1277 09be 0846     	    mov r0,r1
 1278 09c0 02B4     	    push {r1}
 1279 09c2 4146     	    mov r1,T1  
 1280 09c4 00B5FFF7 	    _CALL strcpy
 1280      FEFF5DF8 
 1280      04EB
 1281 09ce 01BC     	    pop {r0}
 1282 09d0 00B5FFF7 	    _CALL strlen 
 1282      FEFF5DF8 
 1282      04EB
 1283 09da 8044     	    add T1,r0 
 1284 09dc 4FF02200 	    mov r0,#'"'
 1285 09e0 08F8010B 	    strb r0,[T1],#1 
 1286 09e4 97E7     	    b decomp_loop
 1287 09e6 0B28     	4:  cmp r0,#TK_CMD
 1288 09e8 3AD4     	    bmi 5f 
 1289 09ea 0F28     	    cmp r0,#TK_INTGR 
 1290 09ec 38D5     	    bpl 5f
 1291 09ee 4FF02000 	    mov r0,#SPACE 
 1292 09f2 08F8010B 	    strb r0,[T1],#1  
 1293 09f6 0846     	    mov r0,r1
ARM GAS  tinyBasic.s 			page 38


 1294 09f8 3428     	    cmp r0,#PRT_IDX 
 1295 09fa 04D1     	    bne 1f  
 1296 09fc 4FF03F00 	    mov r0,#'?'
 1297 0a00 08F8010B 	    strb r0,[T1],#1 
 1298 0a04 27E0     	    b 3f 
 1299 0a06 3828     	1:  cmp r0,#REM_IDX
 1300 0a08 12D1     	    bne 1f
 1301 0a0a 4FF02700 	    mov r0,#'\''
 1302 0a0e 08F8010B 	    strb r0,[T1],#1 
 1303 0a12 0BEB0A00 	    add r0,BPTR,IN
 1304 0a16 4146     	    mov r1,T1   
 1305 0a18 00B5FFF7 	    _CALL strcpy
 1305      FEFF5DF8 
 1305      04EB
 1306 0a22 80EA0000 	    eor r0,r0 
 1307 0a26 88F80000 	    strb r0,[T1]  
 1308 0a2a D4F804A0 	    ldr IN,[UPP,#COUNT]
 1309 0a2e 2FE0     	    b 9f 
 1310 0a30 00B5FFF7 	1:  _CALL cmd_name
 1310      3BFF5DF8 
 1310      04EB
 1311 0a3a 01B4     	2:  push {r0}
 1312 0a3c 4146     	    mov r1,T1 
 1313 0a3e 00B5FFF7 	    _CALL strcpy 
 1313      FEFF5DF8 
 1313      04EB
 1314 0a48 01BC     	    pop {r0}
 1315 0a4a 00B5FFF7 	    _CALL strlen 
 1315      FEFF5DF8 
 1315      04EB
 1316 0a54 8044     	    add T1,r0 
 1317 0a56 4FF02000 	3:  mov r0,#SPACE 
 1318 0a5a 08F8010B 	    strb r0,[T1],#1 
 1319 0a5e 5AE7     	    b decomp_loop
 1320 0a60 01B4     	5:  push {r0}
 1321 0a62 DFF8AC18 	    ldr r1,=single_char 
 1322 0a66 085C     	    ldrb r0,[r1,r0]
 1323 0a68 02BC     	    pop {r1}
 1324 0a6a 10B1     	    cbz r0,6f 
 1325 0a6c 08F8010B 	    strb r0,[T1],#1 
 1326 0a70 51E7     	    b decomp_loop
 1327 0a72 3329     	6:  cmp r1,#TK_GE 
 1328 0a74 02D1     	    bne 7f 
 1329 0a76 DFF89C08 	    ldr r0,=ge_str
 1330 0a7a DEE7     	    b 2b 
 1331 0a7c 3629     	7:  cmp r1,#TK_LE 
 1332 0a7e 02D1     	    bne 8f
 1333 0a80 DFF89408 	    ldr r0,=le_str
 1334 0a84 D9E7     	    b 2b
 1335 0a86 3529     	8:  cmp r1,#TK_NE 
 1336 0a88 02D1     	    bne 9f 
 1337 0a8a DFF89008 	    ldr r0,=ne_str 
 1338 0a8e D4E7     	    b 2b 
 1339 0a90 80EA0000 	9:  eor r0,r0 
 1340 0a94 88F80000 	    strb r0,[T1]
 1341 0a98 BDE80E01 	    pop {r1,r2,r3,T1}
 1342 0a9c 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 39


 1343 0a9e 7047     	    _RET 
 1344              	
 1345 0aa0 3E3D00   	ge_str: .asciz ">="
 1346 0aa3 3C3D00   	le_str: .asciz "<="
 1347 0aa6 3C3E00   	ne_str: .asciz "<>"
 1348              	
 1349              	single_char:
 1350 0aa9 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1350      00402829 
 1350      2C3B23
 1351 0ab4 00000000 	  .space 5
 1351      00
 1352 0ab9 2B2D     	  .byte '+', '-'
 1353 0abb 00000000 	  .space 14
 1353      00000000 
 1353      00000000 
 1353      0000
 1354 0ac9 2A2F25   	  .byte '*', '/', '%'
 1355 0acc 00000000 	  .space 14
 1355      00000000 
 1355      00000000 
 1355      0000
 1356 0ada 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1356      0000
 1357              	
 1358              	
 1359              	/**********************************
 1360              	  modulo 
 1361              	  compute r0 mod r1
 1362              	  input:
 1363              	    r0   dividend
 1364              	    r1   divisor 
 1365              	  output:
 1366              	    r0   TK_INTGR 
 1367              	    r1   r0 mod r1 
 1368              	*********************************/
 1369              	    _GBL_FUNC modulo 
 1370 0ae0 01B4     	    push {r0}
 1371 0ae2 B0FBF1F0 	    udiv r0,r1 
 1372 0ae6 01FB00F0 	    mul  r0,r1 
 1373 0aea 02BC     	    pop {r1}
 1374 0aec A1EB0001 	    sub r1,r0
 1375 0af0 4FF00F00 	    mov r0,#TK_INTGR
 1376 0af4 7047     	    _RET 
 1377              	
 1378              	/**********************************
 1379              	      BASIC commands 
 1380              	**********************************/
 1381              	
 1382              	/*********************************
 1383              	    syntax_error 
 1384              	    display syntax error message and 
 1385              	    abort program 
 1386              	  input:
 1387              	    none  
 1388              	  output: 
 1389              	    none 
ARM GAS  tinyBasic.s 			page 40


 1390              	  use:
 1391              	*********************************/
 1392 0af6 00BF     	    _FUNC syntax_error 
 1393 0af8 4FF00200 	    mov r0,#ERR_SYNTAX
 1394 0afc 00E0     	    b tb_error 
 1395              	
 1396              	/*********************************
 1397              	    tb_error 
 1398              	    display BASIC error and 
 1399              	    abort program. 
 1400              	  input:
 1401              	    r0    error code   
 1402              	  output: 
 1403              	    none 
 1404              	  use:
 1405              	    r1    temp 
 1406              	*********************************/
 1407 0afe 00BF     	    _FUNC tb_error 
 1408 0b00 216C     	    ldr r1,[UPP,#FLAGS]
 1409 0b02 11F0200F 	    tst r1,#FCOMP
 1410 0b06 43D1     	    bne compile_error
 1411              	rt_error:
 1412 0b08 5246     	    mov r2,IN 
 1413 0b0a 01B4     	    push {r0}
 1414 0b0c DFF81008 	    ldr r0,=rt_error_msg 
 1415 0b10 00B5FFF7 	    _CALL uart_puts 
 1415      FEFF5DF8 
 1415      04EB
 1416 0b1a 01BC     	    pop {r0}
 1417 0b1c DFF80418 	    ldr r1,=err_msg  
 1418 0b20 4FEA8000 	    lsl r0,#2 
 1419 0b24 0858     	    ldr r0,[r1,r0]
 1420 0b26 00B5FFF7 	    _CALL uart_puts
 1420      FEFF5DF8 
 1420      04EB
 1421              	// decompile and print faulty line      
 1422 0b30 5846     	    mov r0,BPTR
 1423 0b32 5246     	    mov r2,IN  
 1424 0b34 DFF80813 	    ldr r1,pad 
 1425 0b38 00B5FFF7 	    _CALL decompile_line
 1425      FEFF5DF8 
 1425      04EB
 1426 0b42 00B5FFF7 	    _CALL uart_puts 
 1426      FEFF5DF8 
 1426      04EB
 1427 0b4c 00B5FFF7 	    _CALL cr 
 1427      FEFF5DF8 
 1427      04EB
 1428              	// print error offset on line      
 1429 0b56 DFF8D007 	    ldr r0,=token_at_msg 
 1430 0b5a 00B5FFF7 	    _CALL uart_puts 
 1430      FEFF5DF8 
 1430      04EB
 1431 0b64 1046     	    mov r0,r2 
 1432 0b66 4FF01001 	    mov r1,#16 
 1433 0b6a 00B5FFF7 	    _CALL print_int
 1433      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 41


 1433      04EB
 1434 0b74 00B5FFF7 	    _CALL cr
 1434      FEFF5DF8 
 1434      04EB
 1435              	// dump tokenize line 
 1436 0b7e 5846     	    mov r0,BPTR
 1437 0b80 8278     	    ldrb r2,[r0,#2]
 1438 0b82 00B500F0 	    _CALL dump01 
 1438      DBF95DF8 
 1438      04EB
 1439 0b8c FFF7FEBF 	    b warm_start 
 1440              	compile_error:
 1441 0b90 DFF89017 	    ldr r1,=err_msg 
 1442 0b94 4FEA8000 	    lsl r0,#2 
 1443 0b98 0858     	    ldr r0,[r1,r0]
 1444 0b9a 00B5FFF7 	    _CALL uart_puts
 1444      FEFF5DF8 
 1444      04EB
 1445 0ba4 A068     	    ldr r0,[UPP,#BASICPTR]
 1446 0ba6 00B5FFF7 	    _CALL uart_puts
 1446      FEFF5DF8 
 1446      04EB
 1447 0bb0 00B5FFF7 	    _CALL cr
 1447      FEFF5DF8 
 1447      04EB
 1448 0bba 2068     	    ldr r0,[UPP,#IN_SAVED]
 1449 0bbc 00B5FFF7 	    _CALL spaces 
 1449      FEFF5DF8 
 1449      04EB
 1450 0bc6 4FF05E00 	    mov r0,#'^' 
 1451 0bca 00B5FFF7 	    _CALL uart_putc
 1451      FEFF5DF8 
 1451      04EB
 1452 0bd4 00B5FFF7 	    _CALL cr
 1452      FEFF5DF8 
 1452      04EB
 1453 0bde FFF7FEBF 	    b  warm_start  
 1454              	    
 1455 0be2 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1455      74696D65 
 1455      20657272 
 1455      6F723A20 
 1455      00
 1456 0bf3 746F6B65 	token_at_msg: .asciz "token offset: "
 1456      6E206F66 
 1456      66736574 
 1456      3A2000
 1457              	
 1458              	
 1459              	err_msg:
 1460 0c02 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1460      00000000 
 1460      0D000000 
 1460      1B000000 
 1460      34000000 
 1461 0c1a 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1461      6F000000 
ARM GAS  tinyBasic.s 			page 42


 1461      89000000 
 1461      9A000000 
 1461      AB000000 
 1462 0c2e B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1462      EA000000 
 1462      FA000000 
 1462      0E010000 
 1462      21010000 
 1463 0c42 2E010000 	   .word err_cant_prog 
 1464              	
 1465              	    .section .rodata.tb_error 
 1466              	
 1467 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1467      72792066 
 1467      756C6C0A 
 1467      00
 1468 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1468      61782065 
 1468      72726F72 
 1468      0A00
 1469 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1469      206F7065 
 1469      72617469 
 1469      6F6E206F 
 1469      76657266 
 1470 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1470      73696F6E 
 1470      20627920 
 1470      300A00
 1471 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1471      6C696420 
 1471      6C696E65 
 1471      206E756D 
 1471      6265722E 
 1472 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1472      74696D65 
 1472      206F6E6C 
 1472      79207573 
 1472      6167652E 
 1473 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1473      616E6420 
 1473      6C696E65 
 1473      206F6E6C 
 1473      79207573 
 1474 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1474      69636174 
 1474      65206E61 
 1474      6D652E0A 
 1474      00
 1475 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1475      206E6F74 
 1475      20666F75 
 1475      6E642E0A 
 1475      00
 1476 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1476      76616C75 
 1476      652E0A00 
ARM GAS  tinyBasic.s 			page 43


 1477 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1477      20696E20 
 1477      65787465 
 1477      6E646564 
 1477      206D656D 
 1478 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1478      61746120 
 1478      666F756E 
 1478      642E0A00 
 1479 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1479      726F6772 
 1479      616D2069 
 1479      6E205241 
 1479      4D210A00 
 1480 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1480      20737973 
 1480      74656D20 
 1480      66756C6C 
 1480      2E0A00
 1481 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1481      65722066 
 1481      756C6C0A 
 1481      00
 1482 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1482      74206D6F 
 1482      64696679 
 1482      2070726F 
 1482      6772616D 
 1483              	
 1484 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1484      2074696D 
 1484      65206572 
 1484      726F722C 
 1484      2000
 1485 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1485      70696C65 
 1485      20657272 
 1485      6F722C20 
 1485      00
 1486 018d 6C617374 	tk_id: .asciz "last token id: "
 1486      20746F6B 
 1486      656E2069 
 1486      643A2000 
 1487              	
 1488              	
 1489              	    .section  .text , "ax", %progbits 
 1490              	
 1491              	/*********************************
 1492              	   skip_line 
 1493              	   data and remark line are skipped
 1494              	   by the interpreter 
 1495              	***********************************/
 1496 0c46 00BF     	    _FUNC skip_line 
 1497 0c48 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1498 0c4c 7047     	    _RET 
 1499              	
 1500              	
ARM GAS  tinyBasic.s 			page 44


 1501              	/*********************************
 1502              	   BASIC: BTGL adr, mask   
 1503              	   toggle bits [adr]=[adr]^mask  
 1504              	   input:
 1505              	     r0    adr 
 1506              	     r1    mask 
 1507              	    output;
 1508              	      none 
 1509              	    use:
 1510              	      T1   temp
 1511              	      T2   temp  
 1512              	*******************************/     
 1513 0c4e 00BF     	    _FUNC BTGL 
 1514              	
 1515 0c50 7047     	    _RET 
 1516              	
 1517              	/***************************************
 1518              	   kword_cmp
 1519              	   compare keyword to dict entry
 1520              	  input:
 1521              	    r0  keyword 
 1522              	    r1  dict entry 
 1523              	    r2  character count 
 1524              	  output:
 1525              	    r0  0 not same | -1 same 
 1526              	  use:
 1527              	    r6   result  
 1528              	    T1   char 1
 1529              	    T2   char 2
 1530              	**************************************/   
 1531 0c52 00BF     	    _FUNC kword_cmp 
 1532 0c54 2DE94003 	    push {r6,T1,T2}
 1533 0c58 4FF0FF36 	    mov r6,#-1 
 1534 0c5c 4AB1     	1:  cbz r2,9f       
 1535 0c5e 10F8018B 	    ldrb T1,[r0],#1
 1536 0c62 11F8019B 	    ldrb T2,[r1],#1
 1537 0c66 A2F10102 	    sub r2,#1
 1538 0c6a C845     	    cmp T1,T2
 1539 0c6c F6D0     	    beq 1b 
 1540 0c6e 86EA0606 	    eor r6,r6  
 1541 0c72 3046     	9:  mov r0,r6
 1542 0c74 BDE84003 	    pop {r6,T1,T2}
 1543 0c78 7047     	    _RET 
 1544              	
 1545              	/***********************************************
 1546              	    search_dict 
 1547              	    search keyword in dictionary
 1548              	   input:
 1549              	  	 r0   keyword 
 1550              	     r1		dictionary first name field address  
 1551              	   output:
 1552              	     r0 		token attribute 
 1553              	     r1		  cmd_index if r0!=TK_NONE  
 1554              	   use:
 1555              	     r3   length keyword 
 1556              	     T1   keyword
 1557              	     T2   link  
ARM GAS  tinyBasic.s 			page 45


 1558              	**********************************************/
 1559 0c7a 00BF     	  _FUNC search_dict
 1560 0c7c 2DE90C03 	  push {r2,r3,T1,T2}
 1561 0c80 8046     	  mov T1,r0 
 1562 0c82 00B5FFF7 	  _CALL strlen 
 1562      FEFF5DF8 
 1562      04EB
 1563 0c8c 0346     	  mov r3,r0  
 1564              	1:  
 1565 0c8e 8946     	   mov T2,r1  // keep for linking   
 1566 0c90 0878     	   ldrb r0,[r1] 
 1567 0c92 78B1     	   cbz r0,9f // null byte, end of dictionary
 1568 0c94 4046     	   mov r0,T1
 1569 0c96 1A46     	   mov r2,r3   
 1570 0c98 00B5FFF7 	   _CALL kword_cmp  
 1570      DBFF5DF8 
 1570      04EB
 1571 0ca2 18B9     	   cbnz r0,2f 
 1572 0ca4 4946     	   mov r1,T2
 1573 0ca6 51F80C1C 	   ldr r1,[r1,#-12]
 1574 0caa F0E7     	   b 1b   
 1575              	2: // found
 1576 0cac 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1577 0cb0 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1578 0cb4 BDE80C03 	9: pop {r2,r3,T1,T2}
 1579 0cb8 7047     	   _RET 
 1580              	
 1581              	
 1582              	/**************************
 1583              	    INTERPRETER 
 1584              	*************************/
 1585              	
 1586              	/*********************************
 1587              	   cold_start 
 1588              	   initialize BASIC interpreter 
 1589              	   never leave 
 1590              	   input:
 1591              	     none 
 1592              	   output:
 1593              	    none 
 1594              	*********************************/
 1595              	  .type cold_start, %function 
 1596              	  .global cold_start 
 1597              	cold_start: 
 1598 0cba 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1598      C2F20004 
 1599 0cc2 DFF85400 	    ldr r0,src_addr 
 1600 0cc6 DFF85410 	    ldr r1,dest_addr
 1601 0cca 0968     	    ldr r1,[r1] 
 1602 0ccc 0C44     	    add UPP,r1 // system variables base address   
 1603              	// clear RAM
 1604 0cce 2046     	    mov r0,UPP  
 1605 0cd0 DFF86811 	    ldr r1,tib 
 1606 0cd4 82EA0202 	    eor r2,r2 
 1607 0cd8 40F8042B 	1:  str r2,[r0],#4 
 1608 0cdc 8842     	    cmp r0,r1 
 1609 0cde FBD4     	    bmi 1b 
ARM GAS  tinyBasic.s 			page 46


 1610              	//copy initialized system variables to ram 
 1611 0ce0 DFF83400 	    ldr r0,src_addr 
 1612 0ce4 2146     	    mov r1,UPP 
 1613 0ce6 DFF83820 	    ldr r2,sysvar_size
 1614 0cea 00B5FFF7 	    _CALL cmove
 1614      FEFF5DF8 
 1614      04EB
 1615 0cf4 00B500F0 	    _CALL prt_version
 1615      15F85DF8 
 1615      04EB
 1616 0cfe 00B500F0 	    _CALL clear_basic 
 1616      62F85DF8 
 1616      04EB
 1617 0d08 00B5FFF7 	    _CALL search_free 
 1617      FEFF5DF8 
 1617      04EB
 1618 0d12 E062     	    str r0,[UPP,#FSFREE] 
 1619 0d14 FFF7FEBF 	    b warm_start    
 1620              	src_addr:
 1621 0d18 00000000 	  .word uzero
 1622              	dest_addr:
 1623 0d1c 00000000 	  .word vectors_size
 1624 0d20 D4000000 	sysvar_size: .word ulast-uzero 
 1625              	
 1626              	/************************************
 1627              	    print firmware version 
 1628              	    input: 
 1629              	      none 
 1630              	    output:
 1631              	      none 
 1632              	    use:
 1633              	      r0 
 1634              	***********************************/
 1635              	    _FUNC prt_version 
 1636 0d24 DFF80406 	    ldr r0,=version_msg 
 1637 0d28 00B5FFF7 	    _CALL uart_puts
 1637      FEFF5DF8 
 1637      04EB
 1638 0d32 9FF87400 	    ldrb r0,version 
 1639 0d36 4FEA1010 	    lsr r0,#4 
 1640 0d3a 00F13000 	    add r0,#'0' 
 1641 0d3e 3A28     	    cmp r0,#'9'+1 
 1642 0d40 01D4     	    bmi 1f 
 1643 0d42 00F10700 	    add r0,#7 
 1644              	  1:
 1645 0d46 00B5FFF7 	    _CALL uart_putc 
 1645      FEFF5DF8 
 1645      04EB
 1646 0d50 4FF02E00 	    mov r0,#'. 
 1647 0d54 00B5FFF7 	    _CALL uart_putc 
 1647      FEFF5DF8 
 1647      04EB
 1648 0d5e 9FF84800 	    ldrb r0,version 
 1649 0d62 00F00F00 	    and r0,#15 
 1650 0d66 00F13000 	    add r0,'0' 
 1651 0d6a 3A28     	    cmp r0,#'9'+1 
 1652 0d6c 01D4     	    bmi 1f 
ARM GAS  tinyBasic.s 			page 47


 1653 0d6e 00F10700 	    add r0,#7
 1654              	  1: 
 1655 0d72 00B5FFF7 	    _CALL uart_putc 
 1655      FEFF5DF8 
 1655      04EB
 1656 0d7c 00B5FFF7 	    _CALL cr
 1656      FEFF5DF8 
 1656      04EB
 1657 0d86 7047     	    _RET  
 1658              	version_msg:
 1659 0d88 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1659      65207069 
 1659      6C6C2074 
 1659      696E7920 
 1659      42415349 
 1660              	version:
 1661 0da8 10       	    .byte 0x10 
 1662 0da9 0000BF   	    .p2align 2 
 1663              	
 1664              	
 1665              	/*****************************
 1666              	    clear_vars 
 1667              	    initialize variables to 0
 1668              	  input:
 1669              	    none 
 1670              	  output:
 1671              	    none 
 1672              	  use:
 1673              	    r0,r1,r2 
 1674              	*****************************/
 1675              	    _FUNC clear_vars 
 1676 0dac 07B4     	    push {r0,r1,r2}
 1677 0dae 80EA0000 	    eor r0,r0 
 1678 0db2 04F16001 	    add r1,UPP,#VARS
 1679 0db6 4FF01A02 	    mov r2,#26
 1680 0dba 41F8040B 	1:  str r0,[r1],#4 
 1681 0dbe 013A     	    subs r2,#1
 1682 0dc0 FBD1     	    bne 1b  
 1683 0dc2 07BC     	    pop {r0,r1,r2}
 1684 0dc4 7047     	    _RET 
 1685              	
 1686              	/*****************************
 1687              	   clear_basic 
 1688              	   reset BASIC system variables 
 1689              	   and clear variables and RAM 
 1690              	*****************************/
 1691 0dc6 00BF     	    _FUNC clear_basic
 1692 0dc8 80EA0000 	  	eor r0,r0
 1693 0dcc 2064     	    str r0,[UPP,#FLAGS] 
 1694 0dce 6060     	    str r0,[UPP,#COUNT]
 1695 0dd0 2060     	    str r0,[UPP,#IN_SAVED]
 1696 0dd2 A060     	    str r0,[UPP,#BASICPTR]
 1697 0dd4 E060     	    str r0,[UPP,#DATAPTR]
 1698 0dd6 2061     	    str r0,[UPP,#DATA]
 1699 0dd8 6061     	    str r0,[UPP,#DATALEN]
 1700 0dda 04F1D000 	    add r0,UPP,#BASIC_START 
 1701 0dde 00F11000 	    add r0,#16 
ARM GAS  tinyBasic.s 			page 48


 1702 0de2 6FF00F01 	    mvn r1,#15
 1703 0de6 00EA0100 	    and r0,r1 
 1704 0dea 2063     	    str r0,[UPP,#TXTBGN]
 1705 0dec 6063     	    str r0,[UPP,#TXTEND]
 1706 0dee C4F8D000 	    str r0,[UPP,#HERE]
 1707 0df2 00B5FFF7 	    _CALL clear_vars
 1707      DAFF5DF8 
 1707      04EB
 1708 0dfc 206B     	    ldr r0,[UPP,#TXTBGN]
 1709 0dfe DFF83C10 	    ldr r1,tib 
 1710 0e02 82EA0202 	    eor r2,r2 
 1711 0e06 40F8042B 	1:  str r2,[r0],#4
 1712 0e0a 8842     	    cmp r0,r1 
 1713 0e0c FBD4     	    bmi 1b 
 1714 0e0e 7047     	    _RET  
 1715              	
 1716              	/***********************************
 1717              	   warm_init 
 1718              	   initialize interpreter context 
 1719              	  input:
 1720              	    none
 1721              	  output:
 1722              	    none 
 1723              	  use:
 1724              	    r0 
 1725              	***********************************/
 1726              	warm_init:
 1727              	// reset data stack       
 1728 0e10 DFF824C0 	    ldr DP,dstack 
 1729 0e14 4FF0000A 	    mov IN,#0 // BASIC line index 
 1730 0e18 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1731 0e1c 80EA0000 	    eor r0,r0 
 1732 0e20 6060     	    str r0,[UPP,#COUNT]  
 1733 0e22 2064     	    str r0,[UPP,#FLAGS]
 1734 0e24 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1735 0e26 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1736 0e2a 6064     	    str r0,[UPP,#TAB_WIDTH]
 1737 0e2c 4FF00A00 	    mov r0,#10 // default base decimal 
 1738 0e30 A061     	    str r0,[UPP,#BASE]
 1739 0e32 7047     	    _RET  
 1740              	
 1741 0e34 00000000 	mstack: .word _mstack 
 1742 0e38 00000000 	dstack: .word _dstack 
 1743 0e3c 00000000 	tib: .word _tib 
 1744 0e40 00000000 	pad: .word _pad 
 1745 0e44 FCFFFFFF 	array: .word _pad - 4 
 1746 0e48 0A524541 	ready: .asciz "\nREADY" 
 1746      445900
 1747              	
 1748              	/**********************************
 1749              	    warm_start 
 1750              	    start BASIC interpreter doesn't  
 1751              	    reset variables and code space 
 1752              	  input:
 1753              	    none 
 1754              	  output:
 1755              	    none 
ARM GAS  tinyBasic.s 			page 49


 1756              	**********************************/
 1757 0e4f 00       	    _GBL_FUNC warm_start 
 1758              	// initialise parameters stack
 1759 0e50 FFF7DEFF 	    bl warm_init
 1760              	// reset main stack 
 1761 0e54 5FF82400 	    ldr r0,mstack
 1762 0e58 8546     	    mov sp,r0 
 1763 0e5a DFF8D404 	    ldr r0,=ready 
 1764 0e5e 00B5FFF7 	    _CALL uart_puts 
 1764      FEFF5DF8 
 1764      04EB
 1765              	// fall in cmd_line 
 1766              	
 1767              	/**********************************
 1768              	   cmd_line 
 1769              	   shell command line 
 1770              	   input:
 1771              	      none 
 1772              	   output:
 1773              	      none 
 1774              	   use:
 1775              	
 1776              	***********************************/
 1777              	    _FUNC cmd_line 
 1778 0e68 00B5FFF7 	    _CALL cr
 1778      FEFF5DF8 
 1778      04EB
 1779 0e72 80EA0000 	    eor r0,r0 
 1780 0e76 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1781 0e7a 5FF84000 	1:  ldr r0,tib
 1782 0e7e 4FF05001 	    mov r1,#TIB_SIZE 
 1783 0e82 00B5FFF7 	    _CALL readln 
 1783      FEFF5DF8 
 1783      04EB
 1784 0e8c 0940     	    ands r1,r1 // empty line 
 1785 0e8e F4D0     	    beq 1b 
 1786 0e90 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1786      8DFA5DF8 
 1786      04EB
 1787 0e9a EED0     	    beq 1b  // tokens stored in text area 
 1788              	// interpret tokenized line 
 1789              	interpreter:
 1790 0e9c 00B500F0 	  _CALL next_token 
 1790      25F85DF8 
 1790      04EB
 1791 0ea6 0028     	  cmp r0,#TK_NONE 
 1792 0ea8 F8D0     	  beq interpreter    
 1793 0eaa 4028     	  cmp r0,#TK_LBL 
 1794 0eac F6D0     	  beq interpreter 
 1795 0eae 0B28     	  cmp r0,#TK_CMD 
 1796 0eb0 03D1     	  bne 2f
 1797 0eb2 0846     	  mov r0,r1 
 1798 0eb4 00F014F8 	  bl execute  
 1799 0eb8 F0E7     	  b interpreter   
 1800              	2: 
 1801 0eba 0428     	  cmp r0,#TK_VAR 
 1802 0ebc 05D1     	  bne 3f 
ARM GAS  tinyBasic.s 			page 50


 1803 0ebe 00B500F0 	  _CALL let_var 
 1803      7BFB5DF8 
 1803      04EB
 1804 0ec8 E8E7     	  b interpreter 
 1805              	3: 
 1806 0eca 0528     	  cmp r0,#TK_ARRAY 
 1807 0ecc 05D1     	  bne 4f
 1808 0ece 00B500F0 	  _CALL let_array 
 1808      81FB5DF8 
 1808      04EB
 1809 0ed8 E0E7     	  b interpreter
 1810              	4: 
 1811 0eda 0128     	  cmp r0,#TK_COLON
 1812 0edc DED0     	  beq interpreter
 1813 0ede 0BE6     	  b syntax_error
 1814              	
 1815              	/*****************************
 1816              	    execute 
 1817              	    execute a BASIC routine from 
 1818              	    its token value 
 1819              	  input:
 1820              	    r0  BASIC SUB|FUNC token  
 1821              	  output: 
 1822              	    depend on SUB|FUNc
 1823              	*****************************/
 1824              	    _FUNC execute 
 1825 0ee0 DFF85014 	    ldr r1,=fn_table 
 1826 0ee4 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1827 0ee8 0047     	    bx r0 
 1828              	
 1829              	/*************************************
 1830              	  next_token 
 1831              	  extract next token from token list 
 1832              	  input:
 1833              	    none 
 1834              	  output:
 1835              	    r0    token attribute
 1836              	    r1    token value if there is one 
 1837              	  use:
 1838              	    T1    exit token type  
 1839              	****************************/
 1840 0eea 00BF     	    _FUNC next_token 
 1841 0eec 4DF8048D 	    push {T1}
 1842 0ef0 88EA0808 	    eor T1,T1 // TK_NONE 
 1843 0ef4 6068     	    ldr r0,[UPP,#COUNT]
 1844 0ef6 8245     	    cmp IN,r0 
 1845 0ef8 14D4     	    bmi 0f
 1846              	end_of_line:
 1847 0efa BBF80010 	    ldrh r1,[BPTR] // line #
 1848 0efe 09B9     	    cbnz r1, next_line  // command line
 1849 0f00 FFF7FEBF 	    b warm_start
 1850              	next_line:
 1851 0f04 8344     	    add BPTR,r0 // next line 
 1852 0f06 606B     	    ldr r0,[UPP,#TXTEND]
 1853 0f08 8345     	    cmp BPTR,r0 
 1854 0f0a 7FF5FEAF 	    bpl warm_start // end of program
 1855 0f0e 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
ARM GAS  tinyBasic.s 			page 51


 1856 0f12 6060     	    str r0,[UPP,#COUNT] 
 1857 0f14 4FF0030A 	    mov IN,#3
 1858 0f18 00B5FFF7 	    _CALL show_trace
 1858      67F95DF8 
 1858      04EB
 1859 0f22 2AE0     	    b 9f  
 1860              	0: 
 1861 0f24 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1862 0f28 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1863 0f2c 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1864 0f30 0AF1010A 	    add IN,#1  
 1865 0f34 8046     	    mov T1,r0 
 1866 0f36 00F07F00 	    and r0,#0x7f // limit mask 
 1867 0f3a FF49     	    ldr r1,=tok_jmp 
 1868 0f3c D1E800F0 	    tbb [r1,r0]
 1869              	1: // pc reference point 
 1870 0f40 1BE0     	    b 9f 
 1871              	2: // .byte param
 1872 0f42 1BF80A10 	    ldrb r1,[BPTR,IN]
 1873 0f46 0AF1010A 	    add IN,#1 
 1874 0f4a 16E0     	    b 9f 
 1875              	3: // .hword param 
 1876 0f4c 3BF80A10 	    ldrh r1,[BPTR,IN]
 1877 0f50 0AF1020A 	    add IN,#2 
 1878 0f54 11E0     	    b 9f 
 1879              	4: // .word param  
 1880 0f56 5BF80A10 	    ldr r1,[BPTR,IN]
 1881 0f5a 0AF1040A 	    add IN,#4
 1882 0f5e 0CE0     	    b 9f 
 1883              	5: // .asciz param 
 1884 0f60 0BEB0A01 	    add r1,BPTR,IN 
 1885 0f64 0846     	    mov r0,r1  
 1886 0f66 00B5FFF7 	    _CALL strlen 
 1886      FEFF5DF8 
 1886      04EB
 1887 0f70 8244     	    add IN,r0
 1888 0f72 0AF1010A 	    add IN,#1
 1889 0f76 00E0     	    b 9f  
 1890              	8: // syntax error 
 1891 0f78 BEE5     	    b syntax_error 
 1892 0f7a 4046     	9:  mov r0,T1  
 1893 0f7c 5DF8048B 	    pop {T1}
 1894 0f80 7047     	    _RET
 1895              	
 1896 0f82 00BF     	  .p2align 2
 1897              	tok_jmp: // token id  tbb offset 
 1898 0f84 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1899 0f86 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1900 0f8a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1900      1D
 1901 0f8f 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1902 0f93 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1903 0f96 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1903      1C
 1904 0f9b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1904      1C1C
 1905 0fa1 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
ARM GAS  tinyBasic.s 			page 52


 1906 0fa4 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1907 0fa7 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1907      1C1C1C1C 
 1908 0faf 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1908      1C1C
 1909 0fb5 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1909      1D1D
 1910 0fbb 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1910      1C1C1C1C 
 1910      1C
 1911 0fc4 0B       	  .byte (4b-1b)/2 //0x40 TK_LBL 
 1912              	
 1913 0fc5 0000BF   	  .p2align 2 
 1914              	
 1915              	/*********************************
 1916              	    expect 
 1917              	    check if next token is of 
 1918              	    expected type. If not 
 1919              	    call syntax_error  
 1920              	  input:
 1921              	      r0   token attribute
 1922              	  output:
 1923              	      r0  token attribute 
 1924              	      r1  token value
 1925              	  use:
 1926              	      T1   
 1927              	**********************************/
 1928              	    _FUNC expect 
 1929 0fc8 4DF8048D 	    push {T1}
 1930 0fcc 8046     	    mov T1,r0 
 1931 0fce 00B5FFF7 	    _CALL next_token 
 1931      8CFF5DF8 
 1931      04EB
 1932 0fd8 4045     	    cmp r0,T1  
 1933 0fda 7FF48DAD 	    bne syntax_error 
 1934 0fde 5DF8048B 	    pop {T1}
 1935 0fe2 7047     	    _RET 
 1936              	
 1937              	/***********************************
 1938              	    func_args 
 1939              	    get function arguments list 
 1940              	  input:
 1941              	    none 
 1942              	  output:
 1943              	    r0    arg. count 
 1944              	  use:
 1945              	
 1946              	************************************/
 1947              	    _FUNC func_args 
 1948 0fe4 4FF00600 	    mov r0,#TK_LPAREN 
 1949 0fe8 00B5FFF7 	    _CALL expect 
 1949      EDFF5DF8 
 1949      04EB
 1950 0ff2 00B500F0 	    _CALL arg_list 
 1950      0CF85DF8 
 1950      04EB
 1951 0ffc 01B4     	    push {r0}
ARM GAS  tinyBasic.s 			page 53


 1952 0ffe 4FF00700 	    mov r0,#TK_RPAREN 
 1953 1002 00B5FFF7 	    _CALL expect 
 1953      E0FF5DF8 
 1953      04EB
 1954 100c 01BC     	    pop {r0}
 1955 100e 7047     	    _RET 
 1956              	
 1957              	/**********************************
 1958              	    arg_list 
 1959              	    get arguments list on dstack 
 1960              	  input:
 1961              	    none 
 1962              	  output:
 1963              	    r0    arg count
 1964              	  use:
 1965              	    T1    tmp count  
 1966              	***********************************/
 1967              	    _FUNC arg_list 
 1968 1010 4DF8048D 	    push {T1}
 1969 1014 88EA0808 	    eor T1,T1 
 1970 1018 00B500F0 	1:  _CALL expression 
 1970      D5F85DF8 
 1970      04EB
 1971 1022 0028     	    cmp R0,#TK_NONE 
 1972 1024 10D0     	    beq 9f 
 1973 1026 0F28     	    cmp r0,#TK_INTGR
 1974 1028 0ED1     	    bne 9f 
 1975 102a 4CF8041D 	    _PUSH r1 
 1976 102e 08F10108 	    add T1,#1 
 1977 1032 00B5FFF7 	    _CALL next_token 
 1977      5AFF5DF8 
 1977      04EB
 1978 103c 0828     	    cmp r0,#TK_COMMA 
 1979 103e EBD0     	    beq 1b 
 1980 1040 D4F800A0 	    _UNGET_TOKEN 
 1980      D4F808B0 
 1981 1048 4046     	9:  mov r0,T1 
 1982 104a 5DF8048B 	    pop {T1}
 1983 104e 7047     	    _RET 
 1984              	
 1985              	/***********************************
 1986              	 factor
 1987              	 arithmetick factor parser 
 1988              	 factor ::= ['+'|'-'|e]  var | @ |
 1989              				 integer | function |
 1990              				 '('expression')' 
 1991              	  input: 
 1992              	    none 
 1993              	  output:
 1994              	    r0   token attribute 
 1995              	    r1   token value 
 1996              	  use:
 1997              	    r2   temp 
 1998              	    T1   sign 
 1999              	    T2   exit token attribute 
 2000              	***********************************/
 2001              	    _FUNC factor 
ARM GAS  tinyBasic.s 			page 54


 2002 1050 2DE90403 	    push {r2,T1,T2}
 2003 1054 4FF00F09 	    mov T2,#TK_INTGR 
 2004 1058 4FF00108 	    mov T1,#1 // default sign +  
 2005 105c 00B5FFF7 	    _CALL next_token
 2005      45FF5DF8 
 2005      04EB
 2006 1066 0246     	    mov r2,r0 
 2007 1068 00F03000 	    and r0,#TK_GRP_MASK 
 2008 106c 1028     	    cmp r0,#TK_GRP_ADD
 2009 106e 1046     	    mov r0,r2
 2010 1070 08D1     	    bne 1f 
 2011 1072 1028     	    cmp r0,#TK_PLUS 
 2012 1074 01D0     	    beq 0f 
 2013 1076 4FF0FF38 	    mov T1,#-1 // minus sign 
 2014 107a 00B5FFF7 	0:  _CALL next_token
 2014      36FF5DF8 
 2014      04EB
 2015 1084 0F28     	1:  cmp r0,#TK_INTGR 
 2016 1086 59D0     	    beq 8f 
 2017 1088 0528     	    cmp r0,#TK_ARRAY 
 2018 108a 1ED1     	    bne 2f 
 2019 108c 4FF00600 	    mov r0,#TK_LPAREN 
 2020 1090 00B5FFF7 	    _CALL expect 
 2020      99FF5DF8 
 2020      04EB
 2021 109a 00B500F0 	    _CALL expression
 2021      94F85DF8 
 2021      04EB
 2022 10a4 0F28     	    cmp r0,#TK_INTGR
 2023 10a6 7FF427AD 	    bne syntax_error
 2024 10aa 8146     	    mov T2,r0
 2025 10ac 0A46     	    mov r2,r1  
 2026 10ae 4FF00700 	    mov r0,#TK_RPAREN
 2027 10b2 00B5FFF7 	    _CALL expect 
 2027      88FF5DF8 
 2027      04EB
 2028 10bc 1046     	    mov r0,r2 
 2029 10be 00B500F0 	    _CALL get_array_element 
 2029      F8F85DF8 
 2029      04EB
 2030 10c8 38E0     	    b 8f
 2031 10ca 0628     	2:  cmp r0,#TK_LPAREN 
 2032 10cc 12D1     	    bne 3f 
 2033 10ce 00B500F0 	    _CALL expression 
 2033      7AF85DF8 
 2033      04EB
 2034 10d8 0F28     	    cmp r0,#TK_INTGR 
 2035 10da 7FF40DAD 	    bne syntax_error
 2036 10de 8146     	    mov T2,r0
 2037 10e0 0A46     	    mov r2,r1   
 2038 10e2 4FF00700 	    mov r0,#TK_RPAREN
 2039 10e6 00B5FFF7 	    _CALL expect 
 2039      6EFF5DF8 
 2039      04EB
 2040 10f0 1146     	    mov r1,r2 
 2041 10f2 23E0     	    b 8f       
 2042 10f4 0428     	3:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 55


 2043 10f6 06D1     	    bne 4f
 2044 10f8 0846     	    mov r0,r1  
 2045 10fa 00B500F0 	    _CALL get_var 
 2045      EEF85DF8 
 2045      04EB
 2046 1104 1AE0     	    b 8f 
 2047 1106 0C28     	4:  cmp r0,#TK_IFUNC 
 2048 1108 06D1     	    bne 6f 
 2049 110a 0846     	5:  mov r0,r1  
 2050 110c 00B5FFF7 	    _CALL execute
 2050      E7FE5DF8 
 2050      04EB
 2051 1116 11E0     	    b 8f 
 2052 1118 4028     	6:  cmp r0,#TK_LBL
 2053 111a 08D1     	    bne 7f 
 2054 111c 41F00040 	    orr r0,r1,#(1<<31) 
 2055 1120 00B5FFF7 	    _CALL search_const
 2055      B7F85DF8 
 2055      04EB
 2056 112a 0146     	    mov r1,r0 
 2057 112c 06E0     	    b 8f 
 2058 112e D4F800A0 	7:  _UNGET_TOKEN      
 2058      D4F808B0 
 2059 1136 4FF00000 	    mov r0,#TK_NONE
 2060 113a 03E0     	    b 9f  
 2061 113c 08FB01F1 	8:  mul r1,T1 
 2062 1140 5FEA0900 	    movs r0,T2 
 2063 1144 BDE80403 	9:  pop {r2,T1,T2}   
 2064 1148 7047     	    _RET 
 2065              	
 2066              	
 2067              	/*****************************************
 2068              	    term 
 2069              	    term parser 
 2070              	    term ::= factor [['*'|'/'|'%'] factor]* 
 2071              	    output:
 2072              	      r0  	token attribute 
 2073              	      r1		integer
 2074              	    use:
 2075              	      r2    first operand 
 2076              	      r3    temp 
 2077              	      T1    operator 
 2078              	      T2    exit token attribute 
 2079              	******************************************/
 2080 114a 00BF     	     _FUNC term 
 2081 114c 2DE90C03 	    push {r2,r3,T1,T2}
 2082 1150 4FF00009 	    mov T2,#TK_NONE 
 2083 1154 00B5FFF7 	    _CALL factor
 2083      7BFF5DF8 
 2083      04EB
 2084 115e 60B3     	    cbz r0, 9f  // no factor   
 2085 1160 8146     	    mov T2,r0  // TK_INTGR 
 2086 1162 0A46     	    mov r2,r1 // first factor    
 2087 1164 00B5FFF7 	0:  _CALL next_token
 2087      C1FE5DF8 
 2087      04EB
 2088 116e 0346     	    mov r3,r0   
ARM GAS  tinyBasic.s 			page 56


 2089 1170 00F03000 	    and r0,#TK_GRP_MASK 
 2090 1174 2028     	    cmp r0,#TK_GRP_MULT
 2091 1176 04D0     	    beq 1f
 2092 1178 D4F800A0 	    _UNGET_TOKEN
 2092      D4F808B0 
 2093 1180 1BE0     	    b 9f 
 2094 1182 9846     	1:  mov T1,r3 
 2095 1184 00B5FFF7 	    _CALL factor  
 2095      63FF5DF8 
 2095      04EB
 2096 118e 3FF4B3AC 	    beq syntax_error 
 2097 1192 B8F1200F 	    cmp T1,#TK_MULT
 2098 1196 02D1     	    bne 2f 
 2099              	// multiplication
 2100 1198 01FB02F2 	    mul r2,r1
 2101 119c E2E7     	    b 0b  
 2102 119e B8F1210F 	2:  cmp T1,#TK_DIV 
 2103 11a2 02D1     	    bne 3f
 2104              	// division
 2105 11a4 92FBF1F2 	    sdiv r2,r2,r1
 2106 11a8 DCE7     	    b 0b  
 2107              	3: // modulo
 2108 11aa 1046     	    mov r0,r2 
 2109 11ac 92FBF1F2 	    sdiv r2,r2,r1 
 2110 11b0 01FB02F2 	    mul  r2,r1 
 2111 11b4 A0EB0202 	    sub  r2,r0,r2
 2112 11b8 D4E7     	    b 0b  
 2113 11ba 1146     	9:  mov r1,r2 
 2114 11bc 5FEA0900 	    movs r0,T2 
 2115 11c0 BDE80C03 	    pop {r2,r3,T1,T2}
 2116 11c4 7047     	    _RET 
 2117              	
 2118              	/*****************************************
 2119              	    expression 
 2120              	    arithmetic expression parser 
 2121              	    expression ::= term [['+'|'-'] term]*
 2122              	    result range {-32768..32767}
 2123              	    output:
 2124              	      r0    TK_NONE || TK_INTGR 
 2125              	      r1 	  integer
 2126              	    use:
 2127              	      r2  left operand 
 2128              	      T1  operator 
 2129              	      T2  exit token attribute
 2130              	******************************************/
 2131 11c6 00BF     	    _FUNC expression 
 2132 11c8 2DE90403 	    push {r2,t1,t2}
 2133 11cc 4FF00009 	    mov T2,#TK_NONE
 2134 11d0 82EA0202 	    eor r2,r2 // zero 
 2135 11d4 00B5FFF7 	    _CALL term 
 2135      B9FF5DF8 
 2135      04EB
 2136 11de 21D0     	    beq 9f  // no term  
 2137 11e0 0A46     	    mov r2,r1 // first term
 2138 11e2 4FF00F09 	    mov T2,#TK_INTGR    
 2139 11e6 00B5FFF7 	1:  _CALL next_token 
 2139      80FE5DF8 
ARM GAS  tinyBasic.s 			page 57


 2139      04EB
 2140 11f0 8046     	    mov T1,r0 // token attribute 
 2141 11f2 00F03000 	    and r0,#TK_GRP_MASK 
 2142 11f6 1028     	    cmp r0,#TK_GRP_ADD 
 2143 11f8 04D0     	    beq 3f 
 2144 11fa D4F800A0 	    _UNGET_TOKEN
 2144      D4F808B0 
 2145 1202 0FE0     	    b 9f  
 2146 1204 00B5FFF7 	3:  _CALL term 
 2146      A1FF5DF8 
 2146      04EB
 2147 120e 0F28     	    cmp r0,#TK_INTGR 
 2148 1210 7FF472AC 	    bne syntax_error 
 2149 1214 B8F1100F 	    cmp T1,#TK_PLUS 
 2150 1218 02D0     	    beq 4f 
 2151 121a A2EB0102 	    sub r2,r2,r1 // N1-N2  
 2152 121e E2E7     	    b 1b 
 2153 1220 0A44     	4:  add r2,r2,r1 // N1+N2
 2154 1222 E0E7     	    b 1b
 2155 1224 4846     	9:  mov r0,T2 
 2156 1226 1146     	    mov r1,r2 
 2157 1228 BDE80403 	    pop {r2,t1,t2}
 2158 122c 7047     	    _RET 
 2159              	
 2160              	
 2161              	/**********************************************
 2162              	    relation parser 
 2163              	    rel ::= expr1 rel_op expr2
 2164              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2165              	    relation return  integer , zero is false 
 2166              	    output:
 2167              	        r0	TK_INTGR  
 2168              	        r1	integer 
 2169              	    use:
 2170              	        r2   first operand 
 2171              	        T1   relop   
 2172              	**********************************************/
 2173 122e 00BF     	    _FUNC relation 
 2174 1230 2DE90401 	    push {r2,T1}
 2175 1234 00B5FFF7 	    _CALL expression 
 2175      C7FF5DF8 
 2175      04EB
 2176 123e 0F28     	    cmp r0,#TK_INTGR 
 2177 1240 7FF45AAC 	    bne syntax_error 
 2178 1244 0A46     	    mov r2,r1  // first operand  
 2179 1246 00B5FFF7 	    _CALL next_token 
 2179      50FE5DF8 
 2179      04EB
 2180 1250 8046     	    mov T1,r0  // relop  
 2181 1252 00F03000 	    and r0,#TK_GRP_MASK 
 2182 1256 3028     	    cmp r0,#TK_GRP_RELOP 
 2183 1258 1DD1     	    bne 8f  // single operand 
 2184 125a 00B5FFF7 	    _CALL expression 
 2184      B4FF5DF8 
 2184      04EB
 2185 1264 0F28     	    cmp r0,#TK_INTGR 
 2186 1266 7FF447AC 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 58


 2187 126a 8A42     	    cmp r2,r1 // compare operands  
 2188 126c 4FF0FF31 	    mov r1,#-1 
 2189 1270 324A     	    ldr r2,=relop_jmp
 2190 1272 08F00708 	    and T1,#7 // {1..6}
 2191 1276 D2E808F0 	    tbb [r2,T1]    
 2192              	rel_idx0:
 2193              	rel_eq:
 2194 127a 11D0     	    beq 9f 
 2195 127c 08E0     	    b rel_false
 2196              	rel_lt: 
 2197 127e 0FDB     	    blt 9f   
 2198 1280 06E0     	    b rel_false 
 2199              	rel_le:
 2200 1282 0DDD     	    ble 9f  
 2201 1284 04E0     	    b rel_false 
 2202              	rel_gt:
 2203 1286 0BDC     	    bgt 9f  
 2204 1288 02E0     	    b rel_false  
 2205              	rel_ge:
 2206 128a 09DA     	    bge 9f  
 2207 128c 00E0     	    b rel_false  
 2208              	rel_diff:
 2209 128e 07D1     	    bne 9f 
 2210              	rel_false:    
 2211 1290 81EA0101 	    eor r1,r1  // false
 2212 1294 04E0     	    b 9f  
 2213 1296 D4F800A0 	8:  _UNGET_TOKEN 
 2213      D4F808B0 
 2214 129e 1146     	    mov r1,r2    
 2215 12a0 4FF00F00 	9:  mov r0,#TK_INTGR
 2216 12a4 BDE80401 	    pop {r2,T1}
 2217 12a8 7047     	    _RET 
 2218              	
 2219              	
 2220              	relop_jmp: 
 2221 12aa 00       	  .byte 0 
 2222 12ab 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2223 12ac 00       	  .byte 0 // =
 2224 12ad 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2225 12ae 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2226 12af 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2227 12b0 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2228              	
 2229              	
 2230              	/***********************************
 2231              	    get_array_element
 2232              	    return value of @(n)
 2233              	  input:
 2234              	    r0    indice 
 2235              	  output:
 2236              	    r0   TK_INTGR
 2237              	    r1   value  
 2238              	************************************/
 2239 12b1 0000BF   	    _FUNC get_array_element 
 2240 12b4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2241 12b8 4FEA8000 	    lsl r0,#2 
 2242 12bc C0EB0100 	    rsb r0,r1 
ARM GAS  tinyBasic.s 			page 59


 2243 12c0 0168     	    ldr r1,[r0]
 2244 12c2 4FF00F00 	    mov r0,#TK_INTGR 
 2245 12c6 7047     	    _RET 
 2246              	
 2247              	
 2248              	/***********************************
 2249              	    set_array_element 
 2250              	    set value of array element 
 2251              	  input:
 2252              	    r0   index 
 2253              	    r1   new value 
 2254              	  output:
 2255              	    none
 2256              	  use:
 2257              	    r2    array pointer 
 2258              	**********************************/
 2259              	    _FUNC set_array_element 
 2260 12c8 04B4     	    push {r2}
 2261 12ca D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2262 12ce 4FEA8000 	    lsl r0,#2 
 2263 12d2 A1EB0001 	    sub r1,r0 
 2264 12d6 0960     	    str r1,[r1]
 2265 12d8 04BC     	    pop {r2}
 2266 12da 7047     	    _RET 
 2267              	
 2268              	/***********************************
 2269              	   get_var 
 2270              	   get variable value 
 2271              	  input:
 2272              	     r0    variable index {0..25}
 2273              	  output:
 2274              	     r0    TK_INTGR
 2275              	     r1    value 
 2276              	**********************************/
 2277              	    _FUNC get_var 
 2278 12dc 04F16001 	    add r1,UPP,#VARS
 2279 12e0 4FEA8000 	    lsl r0,#2 
 2280 12e4 0958     	    ldr r1,[r1,r0]
 2281 12e6 4FF00F00 	    mov r0,#TK_INTGR
 2282 12ea 7047     	    _RET 
 2283              	
 2284              	/*********************************
 2285              	    set_var 
 2286              	    set variable value 
 2287              	  input:
 2288              	     r0    variable index {0..25}
 2289              	     r1    new value 
 2290              	  output:
 2291              	    none 
 2292              	  use:
 2293              	    r2   vars pointer 
 2294              	*********************************/
 2295              	    _FUNC set_var 
 2296 12ec 04B4     	    push {r2}
 2297 12ee 04F16002 	    add r2,UPP,#VARS
 2298 12f2 4FEA8000 	    lsl r0,#2
 2299 12f6 1150     	    str r1,[r2,r0]
ARM GAS  tinyBasic.s 			page 60


 2300 12f8 04BC     	    pop {r2}
 2301 12fa 7047     	    _RET 
 2302              	
 2303              	/******************************
 2304              	    CONSTANTS data
 2305              	******************************/
 2306              	
 2307              	  .section .rodata 
 2308              	
 2309              	// system variables initial value 
 2310              	uzero:
 2311 0000 00000000 	  .word 0 // IN_SAVED
 2312 0004 00000000 	  .word 0 // COUNT
 2313 0008 00000000 	  .word 0 // BASICPTR
 2314 000c 00000000 	  .word 0 // DATAPTR
 2315 0010 00000000 	  .word 0 // DATA
 2316 0014 00000000 	  .word 0 // DATALEN
 2317 0018 0A000000 	  .word 10 // BASE
 2318 001c 00000000 	  .word 0 // TICKS
 2319 0020 00000000 	  .word 0 // TIMER
 2320 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2321 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2322 002c 00000000 	  .word 0 // FSFREE
 2323 0030 00000000 	  .word 0 // TXTBGN
 2324 0034 00000000 	  .word 0 // TXTEND
 2325 0038 00000000 	  .word 0 //LOOP_DEPTH
 2326 003c 00000000 	  .word 0 // ARRAY_SIZE
 2327 0040 00000000 	  .word 0 // FLAGS
 2328 0044 04000000 	  .word 4 // TAB_WIDTH
 2329 0048 00000000 	  .word 0 // RX_HEAD
 2330 004c 00000000 	  .word 0 // RX_TAIL
 2331 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2331      00000000 
 2331      00000000 
 2331      00000000 
 2332 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2332      00000000 
 2332      00000000 
 2332      00000000 
 2332      00000000 
 2333 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2334 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2335 00d0 00000000 	  .word 0 // HERE 
 2336              	ulast:
 2337              	
 2338              	  .section .rodata.dictionary 
 2339              	
 2340              	// keep alphabetic order for BASIC names from Z-A
 2341              	// this sort order is for for WORDS cmd output. 	
 2342              	  .type kword_end, %object
 2343              		.equ link, 0
 2344              	kword_end:
 2345 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2345      00000000 
 2345      00000000 
 2345      00000000 
 2346 0010 0C000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
ARM GAS  tinyBasic.s 			page 61


 2346      52000000 
 2346      0C000000 
 2346      584F5200 
 2347 0020 1C000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2347      50000000 
 2347      0B000000 
 2347      574F5244 
 2347      53000000 
 2348 0034 2C000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2348      4F000000 
 2348      0B000000 
 2348      57414954 
 2348      00000000 
 2349 0048 40000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2349      4E000000 
 2349      0B000000 
 2349      554E5449 
 2349      4C000000 
 2350 005c 54000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2350      4D000000 
 2350      0C000000 
 2350      55464C41 
 2350      53480000 
 2351 0070 68000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2351      4C000000 
 2351      0C000000 
 2351      55424F55 
 2351      4E440000 
 2352 0084 7C000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2352      4B000000 
 2352      0B000000 
 2352      54524143 
 2352      45000000 
 2353 0098 90000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2353      4A000000 
 2353      0B000000 
 2353      544F0000 
 2354 00a8 A4000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2354      48000000 
 2354      0B000000 
 2354      54494D45 
 2354      52000000 
 2355 00bc B4000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2355      49000000 
 2355      0C000000 
 2355      54494D45 
 2355      4F555400 
 2356 00d0 C8000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2356      47000000 
 2356      0C000000 
 2356      5449434B 
 2356      53000000 
 2357 00e4 DC000000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2357      46000000 
 2357      0B000000 
 2357      5448454E 
 2357      00000000 
ARM GAS  tinyBasic.s 			page 62


 2358 00f8 F0000000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2358      45000000 
 2358      0B000000 
 2358      54414200 
 2359 0108 04010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store 
 2359      44000000 
 2359      0B000000 
 2359      53544F52 
 2359      45000000 
 2360 011c 14010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2360      43000000 
 2360      0B000000 
 2360      53544F50 
 2360      00000000 
 2361 0130 28010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2361      42000000 
 2361      0B000000 
 2361      53544550 
 2361      00000000 
 2362 0144 3C010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2362      41000000 
 2362      0B000000 
 2362      53504300 
 2363 0154 50010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2363      40000000 
 2363      0B000000 
 2363      534C4545 
 2363      50000000 
 2364 0168 60010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2364      3F000000 
 2364      0C000000 
 2364      53495A45 
 2364      00000000 
 2365 017c 74010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2365      3E000000 
 2365      0B000000 
 2365      53415645 
 2365      00000000 
 2366 0190 88010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2366      3D000000 
 2366      0B000000 
 2366      52554E00 
 2367 01a0 9C010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2367      3C000000 
 2367      0C000000 
 2367      52534849 
 2367      46540000 
 2368 01b4 AC010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2368      3B000000 
 2368      0C000000 
 2368      524E4400 
 2369 01c4 C0010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2369      3A000000 
 2369      0B000000 
 2369      52455455 
 2369      524E0000 
 2370 01d8 D0010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
ARM GAS  tinyBasic.s 			page 63


 2370      39000000 
 2370      0B000000 
 2370      52455354 
 2370      4F524500 
 2371 01ec E4010000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2371      38000000 
 2371      0B000000 
 2371      52454D41 
 2371      524B0000 
 2372 0200 F8010000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2372      37000000 
 2372      0C000000 
 2372      52454144 
 2372      00000000 
 2373 0214 0C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2373      36000000 
 2373      0C000000 
 2373      514B4559 
 2373      00000000 
 2374 0228 20020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2374      35000000 
 2374      0B000000 
 2374      50555348 
 2374      00000000 
 2375 023c 34020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2375      34000000 
 2375      0B000000 
 2375      5052494E 
 2375      54000000 
 2376 0250 48020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2376      33000000 
 2376      0C000000 
 2376      504F5000 
 2377 0260 5C020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2377      30000000 
 2377      0B000000 
 2377      504F4B45 
 2377      38000000 
 2378 0274 6C020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2378      32000000 
 2378      0B000000 
 2378      504F4B45 
 2378      33320000 
 2379 0288 80020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2379      31000000 
 2379      0B000000 
 2379      504F4B45 
 2379      31360000 
 2380 029c 94020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2380      2B000000 
 2380      0B000000 
 2380      504D4F44 
 2380      45000000 
 2381 02b0 A8020000 	  _dict_entry TK_IFUNC,PICK,PICK_IDX // pick 
 2381      2F000000 
 2381      0C000000 
 2381      5049434B 
ARM GAS  tinyBasic.s 			page 64


 2381      00000000 
 2382 02c4 BC020000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2382      2C000000 
 2382      0C000000 
 2382      5045454B 
 2382      38000000 
 2383 02d8 D0020000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2383      2E000000 
 2383      0C000000 
 2383      5045454B 
 2383      33320000 
 2384 02ec E4020000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2384      2D000000 
 2384      0C000000 
 2384      5045454B 
 2384      31360000 
 2385 0300 F8020000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2385      2A000000 
 2385      0B000000 
 2385      50415553 
 2385      45000000 
 2386 0314 0C030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2386      29000000 
 2386      0C000000 
 2386      50414400 
 2387 0324 20030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2387      28000000 
 2387      0B000000 
 2387      4F555400 
 2388 0334 30030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2388      27000000 
 2388      0C000000 
 2388      4F520000 
 2389 0344 40030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2389      26000000 
 2389      0C000000 
 2389      4E4F5400 
 2390 0354 50030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2390      25000000 
 2390      0B000000 
 2390      4E455854 
 2390      00000000 
 2391 0368 60030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2391      24000000 
 2391      0B000000 
 2391      4E455700 
 2392 0378 74030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2392      23000000 
 2392      0C000000 
 2392      4C534849 
 2392      46540000 
 2393 038c 84030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2393      22000000 
 2393      0C000000 
 2393      4C4F4732 
 2393      00000000 
 2394 03a0 98030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
ARM GAS  tinyBasic.s 			page 65


 2394      21000000 
 2394      0B000000 
 2394      4C4F4144 
 2394      00000000 
 2395 03b4 AC030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2395      20000000 
 2395      0B000000 
 2395      4C495354 
 2395      00000000 
 2396 03c8 C0030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2396      1F000000 
 2396      0B000000 
 2396      4C455400 
 2397 03d8 D4030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2397      1E000000 
 2397      0C000000 
 2397      4B455900 
 2398 03e8 E4030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2398      1D000000 
 2398      0C000000 
 2398      494E5645 
 2398      52540000 
 2399 03fc F4030000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2399      1C000000 
 2399      0B000000 
 2399      494E5055 
 2399      54000000 
 2400 0410 08040000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2400      1B000000 
 2400      0C000000 
 2400      494E5000 
 2401 0420 1C040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2401      1A000000 
 2401      0B000000 
 2401      49460000 
 2402 0430 2C040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2402      19000000 
 2402      0B000000 
 2402      48455800 
 2403 0440 3C040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2403      18000000 
 2403      0B000000 
 2403      474F544F 
 2403      00000000 
 2404 0454 4C040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2404      17000000 
 2404      0B000000 
 2404      474F5355 
 2404      42000000 
 2405 0468 60040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2405      16000000 
 2405      0B000000 
 2405      464F5247 
 2405      45540000 
 2406 047c 74040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2406      15000000 
 2406      0B000000 
ARM GAS  tinyBasic.s 			page 66


 2406      464F5200 
 2407 048c 88040000 	  _dict_entry TK_CMD,FLASH,FLASH_IDX // flash 
 2407      14000000 
 2407      0B000000 
 2407      464C4153 
 2407      48000000 
 2408 04a0 98040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2408      13000000 
 2408      0B000000 
 2408      45524153 
 2408      45000000 
 2409 04b4 AC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2409      12000000 
 2409      0B000000 
 2409      454E4400 
 2410 04c4 C0040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2410      11000000 
 2410      0B000000 
 2410      44554D50 
 2410      00000000 
 2411 04d8 D0040000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2411      10000000 
 2411      0B000000 
 2411      44524F50 
 2411      00000000 
 2412 04ec E4040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2412      0F000000 
 2412      0B000000 
 2412      444F0000 
 2413 04fc F8040000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2413      0E000000 
 2413      0B000000 
 2413      44495200 
 2414 050c 08050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2414      0D000000 
 2414      0B000000 
 2414      44454300 
 2415 051c 18050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2415      0C000000 
 2415      0B000000 
 2415      44415441 
 2415      4C4E0000 
 2416 0530 28050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2416      0B000000 
 2416      0B000000 
 2416      44415441 
 2416      00000000 
 2417 0544 3C050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2417      0A000000 
 2417      0B000000 
 2417      434F4E53 
 2417      54000000 
 2418 0558 50050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2418      09000000 
 2418      0D000000 
 2418      43484152 
 2418      00000000 
ARM GAS  tinyBasic.s 			page 67


 2419 056c 64050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2419      08000000 
 2419      0B000000 
 2419      42544F47 
 2419      4C000000 
 2420 0580 78050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2420      07000000 
 2420      0C000000 
 2420      42544553 
 2420      54000000 
 2421 0594 8C050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2421      06000000 
 2421      0B000000 
 2421      42534554 
 2421      00000000 
 2422 05a8 A0050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2422      05000000 
 2422      0B000000 
 2422      42524553 
 2422      00000000 
 2423 05bc B4050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2423      04000000 
 2423      0C000000 
 2423      42495400 
 2424 05cc C8050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2424      03000000 
 2424      0B000000 
 2424      41575500 
 2425 05dc D8050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2425      02000000 
 2425      0C000000 
 2425      41534300 
 2426 05ec E8050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2426      01000000 
 2426      0C000000 
 2426      414E4400 
 2427              	first_link: 
 2428 05fc F8050000 	  .word LINK 
 2429 0600 00000000 	  .word ABS_IDX 
 2430 0604 0C000000 	  .word TK_IFUNC
 2431              	kword_dict: // first name field 
 2432              	  .equ LINK,. 
 2433 0608 41425300 	  .asciz "ABS" 
 2434              	  .p2align 2 
 2435              	
 2436              	    .section .rodata.fn_tabld 
 2437              	
 2438              	//comands and fonctions address table
 2439              	  .type fn_table, %object
 2440              	fn_table:
 2441 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2442 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,const   
 2442      00000000 
ARM GAS  tinyBasic.s 			page 68


 2442      00000000 
 2442      00000000 
 2442      00000000 
 2443 002c 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2443      00000000 
 2443      00000000 
 2443      00000000 
 2443      00000000 
 2444 0048 00000000 		.word cmd_end,erase,flash,for,forget,gosub,goto 
 2444      00000000 
 2444      00000000 
 2444      00000000 
 2444      00000000 
 2445 0064 00000000 		.word hex_base,if,inp,input_var,invert,key
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2446 007c 00000000 		.word let,list,load,log2,lshift,new,next
 2446      00000000 
 2446      00000000 
 2446      00000000 
 2446      00000000 
 2447 0098 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2447      00000000 
 2447      00000000 
 2447      00000000 
 2447      00000000 
 2448 00bc 00000000 		.word pick,poke8,poke16,poke32,fn_pop,print,cmd_push 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2449 00d8 00000000 		.word qkey,read,skip_line
 2449      00000000 
 2449      00000000 
 2450 00e4 00000000 		.word restore,return, random,rshift,run,save,size 
 2450      00000000 
 2450      00000000 
 2450      00000000 
 2450      00000000 
 2451 0100 00000000 		.word sleep,spc,step,stop,store,tab
 2451      00000000 
 2451      00000000 
 2451      00000000 
 2451      00000000 
 2452 0118 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2452      00000000 
 2452      00000000 
 2452      00000000 
 2452      00000000 
 2453 013c 00000000 		.word wait,words,bit_xor
 2453      00000000 
 2453      00000000 
 2454 0148 00000000 		.word 0 
 2455              	
 2456              	
ARM GAS  tinyBasic.s 			page 69


 2457              	/**********************************
 2458              	    BASIC commands and functions 
 2459              	**********************************/
 2460              	
 2461              	    .section .text.basic , "ax", %progbits 
 2462              	
 2463              	
 2464              	/*******************************
 2465              	  BASIC:  ABS expr 
 2466              	  input:
 2467              	    none 
 2468              	  output:
 2469              	    r0    token type 
 2470              	    r1    abs(expr)
 2471              	  use:
 2472              	    none 
 2473              	******************************/
 2474              	    _FUNC abs 
 2475 0000 00B5FFF7 	    _CALL arg_list
 2475      FEFF5DF8 
 2475      04EB
 2476 000a 0128     	    cmp r0,#1 
 2477 000c 01D0     	    beq 1f 
 2478 000e FFF7FEBF 	    b syntax_error 
 2479 0012 5CF8041B 	1:  _POP r1 
 2480 0016 11F0004F 	    tst r1,#(1<<31)
 2481 001a 01D0     	    beq 9f
 2482 001c C1F10001 	    rsb r1,#0 
 2483 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2484 0024 7047     	   _RET 
 2485              	
 2486 0026 00BF     	    _FUNC power_adc
 2487 0028 7047     	    _RET
 2488              	
 2489 002a 00BF     	    _FUNC analog_read
 2490 002c 7047     	    _RET
 2491              	
 2492              	/************************************
 2493              	  BASIC: AND(expr1,expr2)
 2494              	  logical ANND bit to between expr1,expr2
 2495              	************************************/
 2496 002e 00BF     	    _FUNC bit_and
 2497 0030 00B5FFF7 	    _CALL func_args 
 2497      FEFF5DF8 
 2497      04EB
 2498 003a 0228     	    cmp r0,#2 
 2499 003c 7FF4FEAF 	    bne syntax_error 
 2500 0040 5CF8040B 	    _POP r0 
 2501 0044 5CF8041B 	    _POP r1 
 2502 0048 01EA0001 	    and r1,r0 
 2503 004c 4FF00F00 	    mov r0,#TK_INTGR
 2504 0050 7047     	    _RET
 2505              	
 2506              	/*******************************************
 2507              	  BASIC: ASC(string|char)
 2508              	  return ASCII code of char of first char 
 2509              	  of string 
ARM GAS  tinyBasic.s 			page 70


 2510              	*******************************************/
 2511 0052 00BF     	    _FUNC ascii
 2512 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2513 0058 00B5FFF7 	    _CALL expect 
 2513      FEFF5DF8 
 2513      04EB
 2514 0062 00B5FFF7 	    _CALL next_token 
 2514      FEFF5DF8 
 2514      04EB
 2515 006c 0228     	    cmp r0,#TK_QSTR
 2516 006e 03D0     	    beq 2f 
 2517 0070 0328     	    cmp r0,#TK_CHAR 
 2518 0072 7FF4FEAF 	    bne syntax_error 
 2519 0076 00E0     	    b 9f 
 2520 0078 0978     	2:  ldrb r1,[r1]
 2521 007a 4CF8041D 	9:  _PUSH r1 
 2522 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2523 0082 00B5FFF7 	    _CALL expect 
 2523      FEFF5DF8 
 2523      04EB
 2524 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2525 0090 5CF8041B 	    _POP r1 
 2526 0094 7047     	    _RET
 2527              	
 2528 0096 00BF     	    _FUNC autorun
 2529 0098 7047     	    _RET
 2530              	
 2531              	/*******************************************
 2532              	  BASIC: AWU time_sleep  
 2533              	  enable LSI and IWDG and place MCU in 
 2534              	  deep sleep. IDWG wakeup MCU 
 2535              	******************************************/
 2536 009a 00BF     	    _FUNC awu
 2537 009c 00B5FFF7 	    _CALL arg_list
 2537      FEFF5DF8 
 2537      04EB
 2538 00a6 0128     	    cmp r0,#1 
 2539 00a8 7FF4FEAF 	    bne syntax_error 
 2540 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2540      C4F20201 
 2541 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2542              	// enable LSI 
 2543 00b6 80F00100 	    eor r0,#1
 2544 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2545              	// wait for LSIRDY 
 2546 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2547 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2548 00c2 FBD0     	    beq 1b 
 2549              	// configure IWDG
 2550              	// compute values for IWDG_PR and IWDG_RLR 
 2551 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2552 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2553 00cc 03FB02F2 	    mul r2,r3 
 2554 00d0 83EA0303 	    eor r3,r3
 2555 00d4 B2F5005F 	2:  cmp r2,#8192 
 2556 00d8 04D4     	    bmi 3f 
 2557 00da 4FEA5202 	    lsr r2,#1 
ARM GAS  tinyBasic.s 			page 71


 2558 00de 03F10103 	    add r3,#1
 2559 00e2 F7E7     	    b 2b
 2560              	// initialize IWDG      
 2561 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2561      C4F20001 
 2562 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2563 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2564 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2565 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2566 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2567 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2568 00fc 00F092BF 	    b sleep // place MCU in deep sleep
 2569 0100 7047     	    _RET
 2570              	
 2571              	/********************************************
 2572              	  BASIC: BIT(expr)
 2573              	  expr must be between 0..31 and is used 
 2574              	  to create 1 bit mask at that position
 2575              	*******************************************/
 2576 0102 00BF     	    _FUNC bitmask
 2577 0104 00B5FFF7 	    _CALL func_args
 2577      FEFF5DF8 
 2577      04EB
 2578 010e 0128     	    cmp r0,#1 
 2579 0110 7FF4FEAF 	    bne syntax_error 
 2580 0114 5CF8040B 	    _POP r0
 2581 0118 4FF00101 	    mov r1,#1
 2582 011c 01FA00F1 	    lsl r1,r0 
 2583 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2584 0124 7047     	    _RET 
 2585              	
 2586              	  
 2587              	  /*********************************
 2588              	   BASIC: BRES adr, mask   
 2589              	   reset bits [adr]= [adr] & ~mask  
 2590              	   input:
 2591              	     none 
 2592              	    output;
 2593              	      none 
 2594              	    use:
 2595              	      T1   temp
 2596              	      T2   temp 
 2597              	*******************************/     
 2598 0126 00BF     	  _FUNC bit_reset
 2599 0128 00B5FFF7 	    _CALL arg_list 
 2599      FEFF5DF8 
 2599      04EB
 2600 0132 0228     	    cmp r0,#2 
 2601 0134 01D0     	    beq 1f 
 2602 0136 FFF7FEBF 	    b syntax_error 
 2603 013a 5CF8041B 	1:  _POP r1 //mask 
 2604 013e 5CF8040B 	    _POP r0 //address 
 2605 0142 D0F80090 	    ldr T2,[r0] 
 2606 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2607 014a 01EA0901 	    and r1,T2
 2608 014e 0160     	    str r1,[r0]
 2609 0150 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 72


 2610              	
 2611              	
 2612              	/*********************************
 2613              	   BASIC: BSET adr, mask   
 2614              	   reset bits [adr]= [adr] & ~mask  
 2615              	   input:
 2616              	      none 
 2617              	    output;
 2618              	      none 
 2619              	    use:
 2620              	      T1   temp
 2621              	      T2   temp  
 2622              	*******************************/     
 2623 0152 00BF     	    _FUNC bit_set
 2624 0154 00B5FFF7 	    _CALL arg_list 
 2624      FEFF5DF8 
 2624      04EB
 2625 015e 0228     	    cmp r0,#2 
 2626 0160 01D0     	    beq 1f 
 2627 0162 FFF7FEBF 	    b syntax_error 
 2628 0166 5CF8041B 	1:  _POP r1 //mask 
 2629 016a 5CF8040B 	    _POP r0 //address 
 2630 016e D0F80090 	    ldr T2,[r0] 
 2631 0172 41EA0901 	    orr r1,T2
 2632 0176 0160     	    str r1,[r0]
 2633 0178 7047     	    _RET 
 2634              	
 2635              	  /*********************************
 2636              	   BASIC: BTOGL adr, mask   
 2637              	   reset bits [adr]= [adr] & ~mask  
 2638              	   input:
 2639              	     r0    adr 
 2640              	     r1    mask 
 2641              	    output;
 2642              	      none 
 2643              	    use:
 2644              	      T1   temp
 2645              	      T2   temp  
 2646              	*******************************/     
 2647 017a 00BF     	  _FUNC bit_toggle
 2648 017c 00B5FFF7 	    _CALL arg_list 
 2648      FEFF5DF8 
 2648      04EB
 2649 0186 0228     	    cmp r0,#2 
 2650 0188 01D0     	    beq 1f 
 2651 018a FFF7FEBF 	    b syntax_error 
 2652 018e 5CF8041B 	1:  _POP r1 //mask 
 2653 0192 5CF8040B 	    _POP r0 //address 
 2654 0196 D0F80090 	    ldr T2,[r0] 
 2655 019a 81EA0901 	    eor r1,T2
 2656 019e 0160     	    str r1,[r0]
 2657 01a0 7047     	    _RET  
 2658              	
 2659              	/********************************
 2660              	  BASIC: BTEST(addr,bit)
 2661              	  return bit state at address
 2662              	********************************/
ARM GAS  tinyBasic.s 			page 73


 2663 01a2 00BF     	    _FUNC bit_test
 2664 01a4 00B5FFF7 	    _CALL func_args
 2664      FEFF5DF8 
 2664      04EB
 2665 01ae 0228     	    cmp r0,#2 
 2666 01b0 7FF4FEAF 	    bne syntax_error 
 2667 01b4 5CF8041B 	    _POP r1
 2668 01b8 4FF00100 	    mov r0,#1
 2669 01bc 01F01F01 	    and r1,#31  
 2670 01c0 21B1     	1:  cbz r1, 2f
 2671 01c2 4FEA4000 	    lsl r0,#1
 2672 01c6 A1F10101 	    sub r1,#1
 2673 01ca F9E7     	    b 1b 
 2674 01cc 5CF8041B 	2:  _POP r1
 2675 01d0 0968     	    ldr r1,[r1]
 2676 01d2 01EA0001 	    and r1,r0 
 2677 01d6 09B1     	    cbz r1,9f 
 2678 01d8 4FF00101 	    mov r1,#1
 2679 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2680 01e0 7047     	    _RET 
 2681              	
 2682              	/*********************************
 2683              	  BASIC: CHAR(expr)
 2684              	  convert expr in character 
 2685              	********************************/
 2686 01e2 00BF     	    _FUNC char
 2687 01e4 00B5FFF7 	    _CALL func_args
 2687      FEFF5DF8 
 2687      04EB
 2688 01ee 0128     	    cmp r0,#1
 2689 01f0 7FF4FEAF 	    bne syntax_error 
 2690 01f4 5CF8041B 	    _POP r1 
 2691 01f8 01F07F01 	    and r1,#127 
 2692 01fc 4FF00300 	    mov r0,#TK_CHAR
 2693 0200 7047     	    _RET 
 2694              	
 2695              	/**********************************
 2696              	  BASIC: CONST !label=expr [,!label=expr]
 2697              	  define constants constants are 
 2698              	  store at end of BASIC code.
 2699              	  use:
 2700              	    T1   *location 
 2701              	    T2   *bound 
 2702              	*********************************/
 2703 0202 00BF     	    _FUNC const
 2704 0204 206C10F0 	    _RTO 
 2704      010F03D1 
 2704      4FF00700 
 2704      FFF7FEBF 
 2705 0214 D4F8D080 	    ldr T1,[UPP,#HERE]
 2706 0218 DFF86897 	    ldr T2,pad_adr  
 2707 021c C845     	1:  cmp T1,T2 
 2708 021e 03D4     	    bmi 2f 
 2709 0220 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2710 0224 FFF7FEBF 	    b tb_error 
 2711 0228 00B5FFF7 	2:  _CALL next_token 
 2711      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 74


 2711      04EB
 2712 0232 4028     	    cmp r0,#TK_LBL 
 2713 0234 7FF4FEAF 	    bne syntax_error 
 2714 0238 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2715 023c 4CF8041D 	    _PUSH r1 
 2716 0240 4FF03200 	    mov r0,#TK_EQUAL
 2717 0244 00B5FFF7 	    _CALL expect
 2717      FEFF5DF8 
 2717      04EB
 2718 024e 00B5FFF7 	    _CALL expression  
 2718      FEFF5DF8 
 2718      04EB
 2719 0258 0F28     	    cmp r0,#TK_INTGR
 2720 025a 7FF4FEAF 	    bne syntax_error
 2721 025e 5CF8040B 	    _POP r0 
 2722 0262 48F8040B 	    str r0,[T1],#4
 2723 0266 48F8041B 	    str r1,[T1],#4 
 2724 026a C4F8D080 	    str T1,[UPP,#HERE]
 2725 026e 00B5FFF7 	    _CALL next_token
 2725      FEFF5DF8 
 2725      04EB
 2726 0278 0828     	    cmp r0,#TK_COMMA 
 2727 027a CFD0     	    beq 1b 
 2728 027c D4F800A0 	    _UNGET_TOKEN
 2728      D4F808B0 
 2729              	9:  
 2730 0284 7047     	    _RET 
 2731              	
 2732              	
 2733              	/**************************
 2734              	  BASIC: DATALN expr 
 2735              	  set data pointer to line#
 2736              	  specified by expr. 
 2737              	  if line# not valid program 
 2738              	  end with error.
 2739              	  use:
 2740              	
 2741              	**************************/
 2742 0286 00BF     	    _FUNC data_line
 2743 0288 206C10F0 	    _RTO // run time only 
 2743      010F03D1 
 2743      4FF00700 
 2743      FFF7FEBF 
 2744 0298 00B5FFF7 	    _CALL expression 
 2744      FEFF5DF8 
 2744      04EB
 2745 02a2 0F28     	    cmp r0,#TK_INTGR
 2746 02a4 7FF4FEAF 	    bne syntax_error
 2747 02a8 0846     	    mov r0,r1 
 2748 02aa 00B5FFF7 	    _CALL search_lineno
 2748      FEFF5DF8 
 2748      04EB
 2749 02b4 0029     	    cmp r1,#0
 2750 02b6 03D0     	    beq 1f 
 2751 02b8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2752 02bc FFF7FEBF 	    b syntax_error 
 2753 02c0 C178     	1:  ldrb r1,[r0,#3]
ARM GAS  tinyBasic.s 			page 75


 2754 02c2 0B29     	    cmp r1,#TK_CMD 
 2755 02c4 F8D1     	    bne 0b
 2756 02c6 0179     	    ldrb r1,[r0,#4]
 2757 02c8 0B29     	    cmp r1,#DATA_IDX 
 2758 02ca F5D1     	    bne 0b  
 2759 02cc E060     	    str r0,[UPP,#DATAPTR]
 2760 02ce 8178     	    ldrb r1,[r0,#2]
 2761 02d0 6161     	    str r1,[UPP,#DATALEN]
 2762 02d2 4FF00501 	    mov r1,#5 // position of first data item  
 2763 02d6 2161     	    str r1,[UPP,#DATA]
 2764 02d8 7047     	    _RET 
 2765              	
 2766              	/*****************************
 2767              	  BASIC: READ 
 2768              	  read next data item 
 2769              	  the value can be assigned to
 2770              	  variable or used in expression
 2771              	*****************************/
 2772 02da 00BF     	    _FUNC read
 2773 02dc 206C10F0 	    _RTO
 2773      010F03D1 
 2773      4FF00700 
 2773      FFF7FEBF 
 2774 02ec 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2775 02ee E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2776 02f0 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2777 02f2 8242     	    cmp r2,r0
 2778 02f4 0ED0     	    beq seek_next
 2779 02f6 885C     	1:  ldrb r0,[r1,r2]
 2780 02f8 02F10102 	    add r2,#1
 2781 02fc 0028     	    cmp r0,#TK_NONE
 2782 02fe 09D0     	    beq seek_next
 2783 0300 0828     	    cmp r0,#TK_COMMA
 2784 0302 F8D0     	    beq 1b  
 2785 0304 0F28     	    cmp r0,#TK_INTGR 
 2786 0306 7FF4FEAF 	    bne syntax_error  
 2787 030a 8958     	    ldr r1,[r1,r2]
 2788 030c 02F10402 	    add r2,#4
 2789 0310 2261     	    str r2,[UPP,#DATA]
 2790 0312 12E0     	    b 9f  
 2791              	seek_next: // is next line data ?
 2792 0314 8878     	    ldrb r0,[R1,#2]
 2793 0316 0144     	    add r1,r0 
 2794 0318 C878     	    ldrb r0,[R1,#3]
 2795 031a 0B28     	    cmp r0,#TK_CMD
 2796 031c 09D1     	    bne 2f 
 2797 031e 0879     	    ldrb r0,[r1,#4]
 2798 0320 0B28     	    cmp r0,#DATA_IDX 
 2799 0322 06D1     	    bne 2f 
 2800 0324 E160     	    str r1,[UPP,#DATAPTR]
 2801 0326 8878     	    ldrb r0,[r1,#2]
 2802 0328 6061     	    str  r0,[UPP,#DATALEN]
 2803 032a 4FF00502 	    mov r2,#5 
 2804 032e 2261     	    str r2,[UPP,#DATA]
 2805 0330 E1E7     	    b 1b 
 2806 0332 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2807 0336 FFF7FEBF 	    b tb_error 
ARM GAS  tinyBasic.s 			page 76


 2808 033a 7047     	9:  _RET 
 2809              	
 2810              	/********************************
 2811              	  BASIC: RESTORE 
 2812              	  seek first data line 
 2813              	********************************/
 2814              	    _FUNC restore
 2815 033c 206C10F0 	    _RTO 
 2815      010F03D1 
 2815      4FF00700 
 2815      FFF7FEBF 
 2816 034c 216B     	    ldr r1,[UPP,#TXTBGN]
 2817 034e 606B     	1:  ldr r0,[UPP,#TXTEND]
 2818 0350 0FD0     	    beq no_data_line 
 2819 0352 0879     	    ldrb r0,[r1,#4]
 2820 0354 0B28     	    cmp r0,#DATA_IDX
 2821 0356 09D1     	    bne try_next_line
 2822 0358 C878     	    ldrb r0,[r1,#3]
 2823 035a 0B28     	    cmp r0,#TK_CMD
 2824 035c 06D1     	    bne try_next_line
 2825              	// this a the first data line 
 2826 035e E160     	    str r1,[UPP,#DATAPTR]
 2827 0360 8878     	    ldrb r0,[r1,#2]
 2828 0362 6061     	    str r0,[UPP,#DATALEN]
 2829 0364 4FF00500 	    mov r0,#5 
 2830 0368 2061     	    str r0,[UPP,#DATA]
 2831 036a 07E0     	    b 9f
 2832              	try_next_line:
 2833 036c 8878     	    ldrb r0,[r1,#2]
 2834 036e 0144     	    add r1,r0 
 2835 0370 EDE7     	    b 1b 
 2836              	no_data_line:
 2837 0372 80EA0000 	    eor r0,r0 
 2838 0376 E060     	    str r0,[UPP,#DATAPTR]
 2839 0378 2061     	    str r0,[UPP,#DATA]
 2840 037a 6061     	    str r0,[UPP,#DATALEN]
 2841 037c 7047     	9:  _RET 
 2842              	
 2843              	/***********************************
 2844              	  BASIC: DEC 
 2845              	  switch base to decimal 
 2846              	***********************************/
 2847 037e 00BF     	    _FUNC dec_base
 2848 0380 4FF00A00 	    mov r0,#10
 2849 0384 A061     	    str r0,[UPP,#BASE]
 2850 0386 7047     	    _RET 
 2851              	
 2852              	/***************************************
 2853              	  BASIC: DO 
 2854              	  initialize a DO..UNTIL loop 
 2855              	***************************************/
 2856              	    _FUNC do_loop
 2857 0388 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2858 038c 7047     	    _RET 
 2859              	
 2860              	
 2861              	/****************************************
ARM GAS  tinyBasic.s 			page 77


 2862              	  BASIC: DUMP adr, count 
 2863              	    command line only  
 2864              	    print memory content in hexadecimal 
 2865              	    16 bytes per row 
 2866              	    ouput:
 2867              	      none 
 2868              	    use:
 2869              	      r2   byte counter  
 2870              	****************************************/
 2871 038e 00BF     	    _FUNC dump 
 2872 0390 04B4     	    push {r2}
 2873 0392 226C     	    ldr r2,[UPP,#FLAGS]
 2874 0394 12F0010F 	    tst r2,#FRUN 
 2875 0398 03D0     	    beq 0f
 2876 039a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2877 039e FFF7FEBF 	    b tb_error  
 2878 03a2 00B5FFF7 	0:  _CALL arg_list 
 2878      FEFF5DF8 
 2878      04EB
 2879 03ac 0228     	    cmp r0,#2
 2880 03ae 7FF4FEAF 	    bne syntax_error 
 2881 03b2 5CF8042B 	    _POP r2   // count 
 2882 03b6 5CF8040B 	    _POP  r0  // adr 
 2883              	dump01:
 2884 03ba 00B500F0 	    _CALL print_dump_header 
 2884      0EF85DF8 
 2884      04EB
 2885 03c4 4FF01001 	1:  mov r1,#16
 2886 03c8 00B5FFF7 	    _CALL prt_row 
 2886      FEFF5DF8 
 2886      04EB
 2887 03d2 103A     	    subs r2,#16 
 2888 03d4 F6D5     	    bpl 1b 
 2889 03d6 04BC     	2:  pop {r2}
 2890 03d8 7047     	    _RET 
 2891              	
 2892              	/********************************
 2893              	   print_dump_header
 2894              	********************************/
 2895 03da 00BF     	    _FUNC print_dump_header
 2896 03dc 2DE90103 	    push {r0,T1,T2}
 2897 03e0 4FF00C00 	    mov r0,#12 
 2898 03e4 00B5FFF7 	    _CALL cursor_x 
 2898      FEFF5DF8 
 2898      04EB
 2899 03ee 4FF00000 	    mov r0,#0
 2900 03f2 4FF01009 	    mov T2,#16
 2901 03f6 8046     	1:  mov T1,r0 
 2902 03f8 00B5FFF7 	    _CALL print_hex 
 2902      FEFF5DF8 
 2902      04EB
 2903 0402 08F10100 	    add r0,T1,#1  
 2904 0406 4845     	    cmp r0,T2 
 2905 0408 F5D4     	    bmi 1b 
 2906 040a 00B5FFF7 	    _CALL cr
 2906      FEFF5DF8 
 2906      04EB
ARM GAS  tinyBasic.s 			page 78


 2907 0414 4FF03D00 	    mov r0,#'='
 2908 0418 4FF04F08 	    mov T1,#79
 2909 041c 00B5FFF7 	2:  _CALL uart_putc
 2909      FEFF5DF8 
 2909      04EB
 2910 0426 B8F10108 	    subs T1,#1 
 2911 042a F7D1     	    bne 2b     
 2912 042c 00B5FFF7 	    _CALL cr
 2912      FEFF5DF8 
 2912      04EB
 2913 0436 BDE80103 	    pop {r0,T1,T2}
 2914 043a 7047     	    _RET 
 2915              	
 2916              	
 2917              	/*******************************
 2918              	  BASIC: END 
 2919              	  exit program 
 2920              	******************************/ 
 2921              	    _FUNC cmd_end
 2922 043c FFF7FEBF 	    b warm_start 
 2923 0440 7047     	    _RET 
 2924              	
 2925              	/*******************************************
 2926              	  BASIC: FLASH adr, value 
 2927              	  write value to user space in flash memory 
 2928              	*********************************************/
 2929 0442 00BF     	    _FUNC flash 
 2930 0444 00B5FFF7 	    _CALL arg_list 
 2930      FEFF5DF8 
 2930      04EB
 2931 044e 0228     	    cmp r0,#2 
 2932 0450 7FF4FEAF 	    bne syntax_error 
 2933 0454 BCE80300 	    ldmia DP!,{r0,r1}
 2934 0458 DFF83020 	    ldr r2,user_space
 2935 045c 9142     	    cmp r1,r2 
 2936 045e 03D5     	    bpl 1f 
 2937 0460 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2938 0464 FFF7FEBF 	    b tb_error 
 2939 0468 02F58062 	1:  add r2,#1024 
 2940 046c 9142     	    cmp r1,r2 
 2941 046e F7D5     	    bpl 0b 
 2942 0470 00B5FFF7 	    _CALL flash_store 
 2942      FEFF5DF8 
 2942      04EB
 2943 047a 7047     	    _RET 
 2944              	
 2945              	/**************************************************
 2946              	  BASIC: ERASE 
 2947              	  erase user space page 
 2948              	*************************************************/
 2949              	    _FUNC erase 
 2950 047c DFF80C00 	    ldr r0,user_space 
 2951 0480 00B5FFF7 	    _CALL erase_page 
 2951      FEFF5DF8 
 2951      04EB
 2952 048a 7047     	    _RET 
 2953 048c 00000000 	user_space: .word user 
ARM GAS  tinyBasic.s 			page 79


 2954              	
 2955              	
 2956              	/**************************************************
 2957              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2958              	  introdure FOR...NEXT loop 
 2959              	**************************************************/
 2960              	    _FUNC for
 2961 0490 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2962 0494 4FF00107 	    mov INCR,#1
 2963 0498 00B5FFF7 	    _CALL next_token
 2963      FEFF5DF8 
 2963      04EB
 2964 04a2 0428     	    cmp r0,#TK_VAR
 2965 04a4 7FF4FEAF 	    bne syntax_error
 2966 04a8 02B4     	    push {r1} 
 2967 04aa 00B500F0 	    _CALL let_var 
 2967      25F95DF8 
 2967      04EB
 2968 04b4 20BC     	    pop {VADR}
 2969 04b6 4FEA8505 	    lsl VADR,#2
 2970 04ba 2544     	    add VADR,UPP 
 2971 04bc 05F16005 	    add VADR,#VARS 
 2972 04c0 7047     	    _RET 
 2973              	
 2974              	/***************************************
 2975              	  BASIC: TO expr 
 2976              	  set limit of FOR...NEXT loop 
 2977              	**************************************/
 2978 04c2 00BF     	    _FUNC to
 2979 04c4 00B5FFF7 	    _CALL expression 
 2979      FEFF5DF8 
 2979      04EB
 2980 04ce 0F28     	    cmp r0,#TK_INTGR
 2981 04d0 7FF4FEAF 	    bne syntax_error 
 2982 04d4 0E46     	    mov LIMIT,r1
 2983              	    // save loop back parameters 
 2984 04d6 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2985 04da 7047     	    _RET 
 2986              	
 2987              	/********************************************
 2988              	  BASIC: STEP expr 
 2989              	  set increment for FOR...NEXT loop 
 2990              	********************************************/
 2991              	    _FUNC step
 2992 04dc 00B5FFF7 	    _CALL expression 
 2992      FEFF5DF8 
 2992      04EB
 2993 04e6 0F28     	    cmp r0,#TK_INTGR
 2994 04e8 7FF4FEAF 	    bne syntax_error 
 2995 04ec 0F46     	    mov INCR,r1
 2996              	    // replace parameters left by TO
 2997 04ee 8CE8000C 	    stmia DP, {IN,BPTR}
 2998 04f2 7047     	    _RET 
 2999              	
 3000              	/********************************************
 3001              	  BASIC: NEXT var 
 3002              	  incrment FOR...NEXT loop variable
ARM GAS  tinyBasic.s 			page 80


 3003              	  exit if variable cross LIMIT 
 3004              	********************************************/
 3005              	    _FUNC next
 3006 04f4 00B5FFF7 	    _CALL next_token 
 3006      FEFF5DF8 
 3006      04EB
 3007 04fe 0428     	    cmp r0,#TK_VAR 
 3008 0500 7FF4FEAF 	    bne syntax_error 
 3009 0504 4FEA8101 	    lsl r1,#2 
 3010 0508 2144     	    add r1,UPP 
 3011 050a 01F16001 	    add r1,#VARS 
 3012 050e A942     	    cmp r1,VADR
 3013 0510 7FF4FEAF 	    bne syntax_error 
 3014 0514 2868     	    ldr r0,[VADR]
 3015 0516 3844     	    add r0,INCR 
 3016 0518 2860     	    str r0,[VADR]
 3017 051a 002F     	    cmp INCR,#0
 3018 051c 02D4     	    bmi 2f
 3019 051e B042     	    cmp r0,LIMIT 
 3020 0520 02DC     	    bgt 8f  
 3021 0522 07E0     	    b 9f  
 3022 0524 B042     	2:  cmp r0,LIMIT 
 3023 0526 05DA     	    bge 9f  
 3024              	8: // exit for...next
 3025              	  //  drop branch parameters
 3026 0528 4FF00800 	    _DROP 2
 3026      8444
 3027              	  // restore outer loop parameters
 3028 052e BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 3029 0532 7047     	    _RET 
 3030 0534 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 3031 0538 9BF80200 	    ldrb r0,[BPTR,#2]
 3032 053c 6060     	    str r0,[UPP,#COUNT]
 3033 053e 00B5FFF7 	    _CALL show_trace 
 3033      FEFF5DF8 
 3033      04EB
 3034 0548 7047     	    _RET 
 3035              	
 3036              	
 3037              	/*********************************
 3038              	  BASIC: GOSUB expr 
 3039              	  call a subroutine at line# 
 3040              	*********************************/
 3041 054a 00BF     	    _FUNC gosub
 3042 054c 00B5FFF7 	    _CALL search_target 
 3042      FEFF5DF8 
 3042      04EB
 3043 0556 2CE9000C 	    stmdb DP!,{IN,BPTR}
 3044              	target:
 3045 055a 8346     	    mov BPTR,r0 
 3046 055c 4FF0030A 	    mov IN,#3 
 3047 0560 9BF80200 	    ldrb r0,[BPTR,#2]
 3048 0564 6060     	    str r0,[UPP,#COUNT]
 3049 0566 00B5FFF7 	    _CALL show_trace 
 3049      FEFF5DF8 
 3049      04EB
 3050 0570 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 81


 3051              	
 3052              	/**********************************
 3053              	  BASIC: RETURN 
 3054              	  leave a subroutine 
 3055              	*********************************/
 3056 0572 00BF     	    _FUNC return 
 3057 0574 BCE8000C 	    ldmia DP!,{IN,BPTR}
 3058 0578 9BF80200 	    ldrb r0,[BPTR,#2]
 3059 057c 6060     	    str r0,[UPP,#COUNT]
 3060 057e 00B5FFF7 	    _CALL show_trace 
 3060      FEFF5DF8 
 3060      04EB
 3061 0588 7047     	    _RET 
 3062              	
 3063              	/**********************************
 3064              	  BASIC: GOTO expr 
 3065              	  go to line # | label 
 3066              	**********************************/
 3067 058a 00BF     	    _FUNC goto
 3068 058c 00B5FFF7 	    _CALL search_target 
 3068      FEFF5DF8 
 3068      04EB
 3069 0596 E0E7     	    b target  
 3070              	
 3071              	
 3072              	/***************************************
 3073              	  BASIC: HEX 
 3074              	  set numeric base to hexadecimal 
 3075              	***************************************/
 3076              	    _FUNC hex_base
 3077 0598 4FF01000 	    mov r0,#16 
 3078 059c A061     	    str r0,[UPP,#BASE]
 3079 059e 7047     	    _RET 
 3080              	
 3081              	/**********************************************
 3082              	  BASIC: IF relation THEN statement
 3083              	  execute statement only if relation is true
 3084              	*********************************************/
 3085              	    _FUNC if
 3086 05a0 00B5FFF7 	    _CALL relation 
 3086      FEFF5DF8 
 3086      04EB
 3087 05aa 09B9     	    cbnz r1,9f 
 3088 05ac D4F804A0 	    ldr IN,[UPP,#COUNT]
 3089 05b0 7047     	9:  _RET 
 3090              	
 3091              	/*******************************************************
 3092              	  BASIC: THEN statement
 3093              	  statements following THEN are executed if relation is !=0
 3094              	  optional, retained for compatibility.
 3095              	******************************************************/
 3096 05b2 00BF     	    _FUNC then 
 3097              	// do nothing 
 3098 05b4 7047     	    _RET
 3099              	
 3100              	/****************************************
 3101              	  BASIC: INPUT [string]var [,[string]var]+
ARM GAS  tinyBasic.s 			page 82


 3102              	  prompt user for variable value
 3103              	***************************************/
 3104 05b6 00BF     	     _FUNC input_var
 3105 05b8 2DE90401 	    push {r2,T1}
 3106 05bc 00B5FFF7 	1:  _CALL next_token 
 3106      FEFF5DF8 
 3106      04EB
 3107 05c6 0228     	    cmp r0,#2
 3108 05c8 67D4     	    bmi 8f 
 3109 05ca 0228     	    cmp r0,#TK_QSTR 
 3110 05cc 12D1     	    bne 2f 
 3111 05ce 0846     	    mov r0,r1
 3112 05d0 DFF8D810 	    ldr r1,str_buffer
 3113 05d4 00B5FFF7 	    _CALL strcpy
 3113      FEFF5DF8 
 3113      04EB
 3114 05de 4FF00400 	    mov r0,#TK_VAR   
 3115 05e2 00B5FFF7 	    _CALL expect 
 3115      FEFF5DF8 
 3115      04EB
 3116 05ec 8846     	    mov T1,r1 
 3117 05ee DFF8BC00 	    ldr r0,str_buffer 
 3118 05f2 08E0     	    b 3f 
 3119 05f4 0428     	2:  cmp r0,#TK_VAR 
 3120 05f6 7FF4FEAF 	    bne syntax_error     
 3121 05fa 8846     	    mov T1,r1 
 3122 05fc 01F14100 	    add r0,r1,#'A' 
 3123 0600 2A49     	    ldr r1,str_buffer
 3124 0602 0880     	    strh r0,[r1]
 3125 0604 0846     	    mov r0,r1 
 3126 0606 00B5FFF7 	3:  _CALL uart_puts  
 3126      FEFF5DF8 
 3126      04EB
 3127 0610 4FF03D00 	    mov r0,#'='
 3128 0614 00B5FFF7 	    _CALL uart_putc
 3128      FEFF5DF8 
 3128      04EB
 3129 061e DFF88800 	    ldr r0,input_buffer
 3130 0622 4FF02201 	    mov r1,#34 
 3131 0626 00B5FFF7 	    _CALL readln
 3131      FEFF5DF8 
 3131      04EB
 3132 0630 31B3     	    cbz r1,6f
 3133 0632 0178     	    ldrb r1,[r0]
 3134 0634 01B4     	    push {r0}
 3135 0636 0846     	    mov r0,r1
 3136 0638 00B5FFF7 	    _CALL is_alpha 
 3136      FEFF5DF8 
 3136      04EB
 3137 0642 01BC     	    pop {r0}
 3138 0644 02D0     	    beq 3f 
 3139 0646 01F05F01 	    and r1,#0x5f // uppercase  
 3140 064a 19E0     	    b 6f 
 3141 064c 2429     	3:  cmp r1,#'$'
 3142 064e 04D1     	    bne 3f 
 3143 0650 4FF01001 	    mov r1,#16
 3144 0654 00F10100 	    add r0,#1  
ARM GAS  tinyBasic.s 			page 83


 3145 0658 08E0     	    b 5f 
 3146 065a 2629     	3:  cmp r1,#'&' 
 3147 065c 04D1     	    bne 4f 
 3148 065e 4FF00201 	    mov r1,#2
 3149 0662 00F10100 	    add r0,#1 
 3150 0666 01E0     	    b 5f 
 3151 0668 4FF00A01 	4:  mov r1,#10 
 3152 066c 00B5FFF7 	5:  _CALL atoi 
 3152      FEFF5DF8 
 3152      04EB
 3153 0676 18B9     	    cbnz r0,6f
 3154 0678 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3155 067c FFF7FEBF 	    b tb_error
 3156 0680 4046     	6:  mov r0,T1 
 3157 0682 00B5FFF7 	    _CALL set_var
 3157      FEFF5DF8 
 3157      04EB
 3158 068c 00B5FFF7 	    _CALL next_token
 3158      FEFF5DF8 
 3158      04EB
 3159 0696 0828     	    cmp r0,#TK_COMMA 
 3160 0698 90D0     	    beq 1b 
 3161 069a D4F800A0 	8:  _UNGET_TOKEN          
 3161      D4F808B0 
 3162 06a2 BDE80401 	9:  pop {r2,T1}       
 3163 06a6 7047     	    _RET 
 3164 06a8 00000000 	input_buffer: .word _tib 
 3165 06ac 00000000 	str_buffer: .word _pad 
 3166              	
 3167              	
 3168              	/*****************************************
 3169              	  BASIC: INVERT(expr)
 3170              	  return 1's complement of expr
 3171              	****************************************/
 3172              	    _FUNC invert
 3173 06b0 00B5FFF7 	    _CALL func_args
 3173      FEFF5DF8 
 3173      04EB
 3174 06ba 0128     	    cmp r0,#1 
 3175 06bc 7FF4FEAF 	    bne syntax_error
 3176 06c0 5CF8041B 	    _POP r1  
 3177 06c4 6FEA0101 	    mvn r1,r1
 3178 06c8 4FF00F00 	    mov r0,#TK_INTGR
 3179 06cc 7047     	    _RET 
 3180              	
 3181              	/*************************************
 3182              	  BASIC: KEY 
 3183              	  wait for a character from console
 3184              	*************************************/
 3185 06ce 00BF     	    _FUNC key
 3186 06d0 00B5FFF7 	    _CALL uart_getc
 3186      FEFF5DF8 
 3186      04EB
 3187 06da 0146     	    mov r1,r0
 3188 06dc 4FF00300 	    mov r0,#TK_CHAR 
 3189 06e0 7047     	    _RET  
 3190              	
ARM GAS  tinyBasic.s 			page 84


 3191              	/******************************
 3192              	  BASIC: [LET] var=expr 
 3193              	         [LET] @(expr)=expr
 3194              	  input:
 3195              	    none 
 3196              	  output:
 3197              	    none 
 3198              	  use:
 3199              	
 3200              	****************************/         
 3201 06e2 00BF     	    _FUNC let
 3202 06e4 00B5FFF7 	    _CALL next_token 
 3202      FEFF5DF8 
 3202      04EB
 3203 06ee 0428     	    cmp r0,#TK_VAR
 3204 06f0 03D0     	    beq let_var 
 3205 06f2 0528     	    cmp r0,#TK_ARRAY 
 3206 06f4 07D0     	    beq let_array 
 3207 06f6 FFF7FEBF 	    b syntax_error 
 3208              	let_var:
 3209 06fa 4FEA8101 	    lsl r1,#2
 3210 06fe 04F16000 	    add r0,UPP,#VARS
 3211 0702 0844     	    add r0,r1
 3212 0704 1FE0     	    b 1f 
 3213              	let_array: 
 3214 0706 4FF00600 	    mov r0,#TK_LPAREN
 3215 070a 00B5FFF7 	    _CALL expect 
 3215      FEFF5DF8 
 3215      04EB
 3216 0714 00B5FFF7 	    _CALL expression
 3216      FEFF5DF8 
 3216      04EB
 3217 071e 0F28     	    cmp r0,#TK_INTGR 
 3218 0720 7FF4FEAF 	    bne syntax_error
 3219 0724 4CF8041D 	    _PUSH r1 
 3220 0728 4FF00700 	    mov r0,#TK_RPAREN
 3221 072c 00B5FFF7 	    _CALL expect 
 3221      FEFF5DF8 
 3221      04EB
 3222 0736 5CF8041B 	    _POP r1 
 3223 073a D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3224 073e 4FEA8101 	    lsl r1,#2 
 3225 0742 A0EB0100 	    sub r0,r1 
 3226 0746 4CF8040D 	1:  _PUSH r0 
 3227 074a 4FF03200 	    mov r0,#TK_EQUAL 
 3228 074e 00B5FFF7 	    _CALL expect 
 3228      FEFF5DF8 
 3228      04EB
 3229 0758 00B5FFF7 	    _CALL expression   
 3229      FEFF5DF8 
 3229      04EB
 3230 0762 0F28     	    cmp r0,#TK_INTGR
 3231 0764 7FF4FEAF 	    bne syntax_error   
 3232 0768 5CF8040B 	2:  _POP r0 
 3233 076c 0160     	    str r1,[r0]
 3234 076e 7047     	    _RET  
 3235              	
ARM GAS  tinyBasic.s 			page 85


 3236              	/***************************************
 3237              	  BASIC: LIST [[first]-last]
 3238              	  use:
 3239              	    r2   first line# 
 3240              	    r3   last line#
 3241              	    T1   *line 
 3242              	    T2   TXTEND 
 3243              	**************************************/  
 3244              	    _FUNC list
 3245 0770 206C10F0 	    _CLO
 3245      010F03D0 
 3245      4FF00700 
 3245      FFF7FEBF 
 3246 0780 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3247 0784 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3248 0788 B8F80020 	    ldrh r2,[T1]
 3249 078c 4FF40043 	    mov r3,#32768
 3250 0790 00B5FFF7 	    _CALL next_token 
 3250      FEFF5DF8 
 3250      04EB
 3251 079a 10B3     	    cbz r0,6f 
 3252 079c 0F28     	    cmp r0,#TK_INTGR
 3253 079e 09D1     	    bne 1f 
 3254 07a0 0A46     	    mov r2,r1 // first line
 3255 07a2 00B5FFF7 	    _CALL next_token
 3255      FEFF5DF8 
 3255      04EB
 3256 07ac 0028     	    cmp r0,#TK_NONE 
 3257 07ae 01D1     	    bne 1f 
 3258 07b0 1346     	    mov r3,r2 
 3259 07b2 0CE0     	    b 4f 
 3260 07b4 1128     	1:  cmp r0,#TK_MINUS 
 3261 07b6 7FF4FEAF 	    bne syntax_error 
 3262 07ba 00B5FFF7 	    _CALL next_token 
 3262      FEFF5DF8 
 3262      04EB
 3263 07c4 18B1     	    cbz r0,4f 
 3264 07c6 0F28     	    cmp r0,#TK_INTGR
 3265 07c8 7FF4FEAF 	    bne syntax_error  
 3266 07cc 0B46     	    mov r3,r1 
 3267              	4:  // skip lines below r2 
 3268 07ce B8F80000 	    ldrh r0,[T1]
 3269 07d2 9042     	    cmp r0,r2 
 3270 07d4 05D5     	    bpl 6f 
 3271 07d6 98F80200 	    ldrb r0,[T1,#2]
 3272 07da 8044     	    add T1,r0
 3273 07dc C845     	    cmp T1,T2 
 3274 07de F6D4     	    bmi 4b
 3275 07e0 1AE0     	    b 9f 
 3276 07e2 C845     	6:  cmp T1,T2  
 3277 07e4 18D5     	    bpl 9f
 3278 07e6 4046     	    mov r0,T1   
 3279 07e8 DFF83010 	    ldr r1,out_buff 
 3280 07ec 00B5FFF7 	    _CALL decompile_line 
 3280      FEFF5DF8 
 3280      04EB
 3281 07f6 00B5FFF7 	    _CALL uart_puts 
ARM GAS  tinyBasic.s 			page 86


 3281      FEFF5DF8 
 3281      04EB
 3282 0800 00B5FFF7 	    _CALL cr 
 3282      FEFF5DF8 
 3282      04EB
 3283 080a 98F80200 	    ldrb r0,[T1,#2]
 3284 080e 8044     	    add T1,r0
 3285 0810 B8F80000 	    ldrh r0,[T1]
 3286 0814 9842     	    cmp r0,r3 
 3287 0816 E4DD     	    ble 6b 
 3288 0818 FFF7FEBF 	9:  b warm_start 
 3289 081c 00000000 	out_buff: .word _tib 
 3290              	
 3291              	/********************************
 3292              	  BASIC: LOG2(expr)
 3293              	  return log base 2 of expr 
 3294              	********************************/
 3295              	    _FUNC log2
 3296 0820 00B5FFF7 	    _CALL func_args
 3296      FEFF5DF8 
 3296      04EB
 3297 082a 0128     	    cmp r0,#1 
 3298 082c 7FF4FEAF 	    bne syntax_error
 3299 0830 5CF8040B 	    _POP r0 
 3300 0834 B0FA80F1 	    clz r1,r0 
 3301 0838 C1F11F01 	    rsb r1,#31
 3302 083c 4FF00F00 	9:  mov r0,#TK_INTGR
 3303 0840 7047     	    _RET 
 3304              	
 3305              	
 3306              	/****************************************
 3307              	  BASIC: LSHIFT(expr1,expr2)
 3308              	  shift right expr1 of expr2 bits 
 3309              	****************************************/
 3310 0842 00BF     	    _FUNC lshift
 3311 0844 00B5FFF7 	    _CALL func_args
 3311      FEFF5DF8 
 3311      04EB
 3312 084e 0228     	    cmp r0,#2
 3313 0850 7FF4FEAF 	    bne syntax_error 
 3314 0854 BCE80300 	    ldmia DP!,{r0,r1}
 3315 0858 01FA00F1 	    lsl r1,r0 
 3316 085c 4FF00F00 	    mov r0,#TK_INTGR
 3317 0860 7047     	    _RET 
 3318              	
 3319              	/***********************************
 3320              	  BASIC: NEW 
 3321              	  delete existing program in memory
 3322              	  and clear variables and RAM 
 3323              	***********************************/
 3324 0862 00BF     	    _FUNC new
 3325 0864 206C10F0 	    _CLO 
 3325      010F03D0 
 3325      4FF00700 
 3325      FFF7FEBF 
 3326 0874 00B5FFF7 	    _CALL clear_basic 
 3326      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 87


 3326      04EB
 3327 087e FFF7FEBF 	    b warm_start   
 3328              	
 3329              	/************************************
 3330              	  BASIC: NOT relation  
 3331              	  invert logical value or relation
 3332              	************************************/
 3333 0882 00BF     	      _FUNC func_not
 3334 0884 00B5FFF7 	      _CALL relation 
 3334      FEFF5DF8 
 3334      04EB
 3335 088e 11B1     	      cbz r1,8f 
 3336 0890 81EA0101 	      eor r1,r1
 3337 0894 01E0     	      b 9f 
 3338 0896 4FF0FF31 	  8:  mov r1,#-1
 3339 089a 7047     	  9:  _RET 
 3340              	
 3341              	/******************************************
 3342              	  BASIC: OR(expr1,expr2)
 3343              	  binary OR between 2 expressions
 3344              	******************************************/
 3345              	    _FUNC bit_or
 3346 089c 00B5FFF7 	    _CALL func_args
 3346      FEFF5DF8 
 3346      04EB
 3347 08a6 0228     	    cmp r0,#2
 3348 08a8 7FF4FEAF 	    bne syntax_error
 3349 08ac 5CF8040B 	    _POP r0 
 3350 08b0 5CF8041B 	    _POP r1
 3351 08b4 41EA0001 	    orr r1,r0 
 3352 08b8 4FF00F00 	    mov r0,#TK_INTGR
 3353 08bc 7047     	    _RET 
 3354              	
 3355              	/****************************************
 3356              	  BASIC: INP(\c) 
 3357              	  read gpio_idr (16 bits value) 
 3358              	***************************************/
 3359 08be 00BF     	    _FUNC inp 
 3360 08c0 4FF00600 	    mov r0,#TK_LPAREN 
 3361 08c4 00B5FFF7 	    _CALL expect 
 3361      FEFF5DF8 
 3361      04EB
 3362 08ce 4FF00300 	    mov r0,#TK_CHAR 
 3363 08d2 00B5FFF7 	    _CALL expect
 3363      FEFF5DF8 
 3363      04EB
 3364 08dc 0846     	    mov r0,r1 
 3365 08de 00B5FFF7 	    _CALL upper 
 3365      FEFF5DF8 
 3365      04EB
 3366 08e8 0246     	    mov r2,r0 
 3367 08ea 4FF00700 	    mov r0,#TK_RPAREN
 3368 08ee 00B5FFF7 	    _CALL expect 
 3368      FEFF5DF8 
 3368      04EB
 3369 08f8 A2F14102 	    sub r2,#'A' 
 3370 08fc 4FF48061 	    mov r1,0x400 
ARM GAS  tinyBasic.s 			page 88


 3371 0900 02FB01F1 	    mul r1,r2
 3372 0904 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3372      C4F20102 
 3373 090c 0A44     	    add r2,r1 
 3374 090e 1168     	    ldr r1,[r2]
 3375 0910 4FF00F00 	    mov r0,#TK_INTGR
 3376 0914 7047     	    _RET 
 3377              	
 3378              	
 3379              	/****************************************
 3380              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3381              	  output to gpio_odr expr lower 16 bits
 3382              	***************************************/
 3383 0916 00BF     	    _FUNC out
 3384 0918 4FF00300 	1:  mov r0,#TK_CHAR 
 3385 091c 00B5FFF7 	    _CALL expect 
 3385      FEFF5DF8 
 3385      04EB
 3386 0926 0846     	    mov r0,r1
 3387 0928 00B5FFF7 	    _CALL upper
 3387      FEFF5DF8 
 3387      04EB
 3388 0932 0246     	    mov r2,r0 
 3389 0934 4FF00800 	    mov r0,#TK_COMMA 
 3390 0938 00B5FFF7 	    _CALL expect 
 3390      FEFF5DF8 
 3390      04EB
 3391 0942 00B5FFF7 	    _CALL expression 
 3391      FEFF5DF8 
 3391      04EB
 3392 094c A2F14102 	    sub r2,#'A'
 3393 0950 4FF48063 	    mov r3,#0x400 
 3394 0954 03FB02F2 	    mul r2,r3 
 3395 0958 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3395      C4F20103 
 3396 0960 1A44     	    add r2,r3
 3397 0962 1180     	    strh r1,[r2]
 3398 0964 00B5FFF7 	    _CALL next_token
 3398      FEFF5DF8 
 3398      04EB
 3399 096e 0828     	    cmp r0,#TK_COMMA
 3400 0970 D2D0     	    beq 1b 
 3401 0972 D4F800A0 	    _UNGET_TOKEN
 3401      D4F808B0 
 3402 097a 7047     	    _RET 
 3403              	
 3404              	/****************************************
 3405              	  BASIC: PAD 
 3406              	  return pad buffer address 
 3407              	****************************************/
 3408              	    _FUNC pad_ref
 3409 097c 0149     	    ldr r1,pad_adr  
 3410 097e 4FF00F00 	    mov r0,#TK_INTGR 
 3411 0982 7047     	    _RET 
 3412 0984 00000000 	pad_adr: .word _pad 
 3413              	
 3414              	/***********************
ARM GAS  tinyBasic.s 			page 89


 3415              	  BASIC: PAUSE expr 
 3416              	  suspend execution for 
 3417              	  expr milliseconds 
 3418              	************************/
 3419              	    _FUNC pause
 3420 0988 00B5FFF7 	    _CALL expression 
 3420      FEFF5DF8 
 3420      04EB
 3421 0992 0F28     	    cmp r0,#TK_INTGR 
 3422 0994 7FF4FEAF 	    bne syntax_error 
 3423 0998 E069     	    ldr r0,[UPP,#TICKS]
 3424 099a 0844     	    add r0,r1 
 3425 099c E169     	1:  ldr r1,[UPP,#TICKS]
 3426 099e 8842     	    cmp r0,r1 
 3427 09a0 FCD1     	    bne 1b     
 3428 09a2 7047     	    _RET 
 3429              	
 3430              	/***************************************************
 3431              	  BASIC: PMODE \c,pin,mode[,opt] 
 3432              	  configure a digital pin for input|output
 3433              	  paramters:
 3434              	    \c    port letter
 3435              	    pin   pin {0..15} 
 3436              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3437              	    for input mode:
 3438              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3439              	    for output mode:
 3440              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3441              	  use:
 3442              	    r2  opt
 3443              	    r3  mode 
 3444              	    T1  pin  
 3445              	    T2  port      
 3446              	***************************************************/
 3447              	      _FUNC pin_mode
 3448 09a4 4FF00300 	      mov r0,#TK_CHAR 
 3449 09a8 00B5FFF7 	      _CALL expect
 3449      FEFF5DF8 
 3449      04EB
 3450 09b2 0846     	      mov r0,r1 
 3451 09b4 00B5FFF7 	      _CALL upper 
 3451      FEFF5DF8 
 3451      04EB
 3452 09be A0F14109 	      sub T2,r0,#'A'
 3453 09c2 4FF00800 	      mov r0,#TK_COMMA
 3454 09c6 00B5FFF7 	      _CALL expect 
 3454      FEFF5DF8 
 3454      04EB
 3455 09d0 00B5FFF7 	      _CALL arg_list
 3455      FEFF5DF8 
 3455      04EB
 3456 09da 0228     	      cmp r0,#2 
 3457 09dc 3FF5FEAF 	      bmi syntax_error
 3458 09e0 0428     	      cmp r0,#4
 3459 09e2 01D4     	      bmi 1f 
 3460 09e4 FFF7FEBF 	      b syntax_error
 3461 09e8 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
ARM GAS  tinyBasic.s 			page 90


 3462 09ec 0228     	      cmp r0,#2
 3463 09ee 02D0     	      beq 2f 
 3464              	// 3 parameters, pin,mode,opt  
 3465 09f0 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3466 09f4 01E0     	    b 4f  
 3467              	2: // 2 parameters, pin,mode 
 3468 09f6 BCE80801 	    ldmia DP!,{r3,T1}
 3469 09fa 4FF48060 	4:  mov r0,#0x400 
 3470 09fe 00FB09F9 	    mul T2,r0 
 3471 0a02 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3471      C4F20100 
 3472 0a0a 8144     	    add T2,r0 // port base address 
 3473              	// if input mode set pull in ODR 
 3474 0a0c 83B9     	    cbnz r3,2f 
 3475 0a0e 022A     	    cmp r2,#2
 3476 0a10 0ED4     	    bmi 2f 
 3477 0a12 4FF00100 	    mov r0,#1 
 3478 0a16 4146     	    mov r1,T1 
 3479 0a18 032A     	    cmp r2,#3 
 3480 0a1a 01D0     	    beq 1f
 3481 0a1c 01F11001 	    add r1,#16 //reset bit 
 3482 0a20 00FA01F0 	1:  lsl r0,r1
 3483 0a24 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3484 0a28 032A     	    cmp r2,#3 
 3485 0a2a 01D4     	    bmi 2f 
 3486 0a2c A2F10102 	    sub r2,#1
 3487              	2: // set CNF|MODE bits GPIO_CRx 
 3488 0a30 B8F1080F 	    cmp T1,#8 
 3489 0a34 03D4     	    bmi 3f 
 3490 0a36 A8F10808 	    sub T1,#8 
 3491 0a3a 09F10409 	    add T2,#4 //CRH 
 3492 0a3e 4FF00F00 	3:  mov r0,#15   
 3493 0a42 4FEA8801 	    lsl r1,T1,#2 
 3494 0a46 00FA01F0 	    lsl r0,r1
 3495 0a4a 6FEA0000 	    mvn r0,r0 // bitmask 
 3496 0a4e D9F80010 	    ldr r1,[T2]
 3497 0a52 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3498              	// combine opt|mode     
 3499 0a56 4FEA8200 	    lsl r0,r2,#2 
 3500 0a5a 40EA0300 	    orr r0,r3 // OPT|MODE 
 3501 0a5e 4FEA8803 	    lsl r3,T1,#2 
 3502 0a62 00FA03F0 	    lsl r0,r3
 3503 0a66 41EA0001 	    orr r1,r0   
 3504 0a6a C9F80010 	    str r1,[T2] // mode and option set
 3505 0a6e 7047     	    _RET 
 3506              	
 3507              	
 3508              	/*****************************************
 3509              	  BASIC: PEEK8 (expr)  
 3510              	  return byte value at address 
 3511              	*****************************************/
 3512              	    _FUNC peek8
 3513 0a70 00B5FFF7 	    _CALL func_args  
 3513      FEFF5DF8 
 3513      04EB
 3514 0a7a 0128     	    cmp r0,#1
 3515 0a7c 3FF5FEAF 	    bmi syntax_error
ARM GAS  tinyBasic.s 			page 91


 3516 0a80 5CF8041B 	    _POP r1 
 3517 0a84 0978     	    ldrb r1,[r1]
 3518 0a86 4FF00F00 	    mov r0,#TK_INTGR     
 3519 0a8a 7047     	    _RET 
 3520              	
 3521              	/*****************************************
 3522              	  BASIC: PEEK16 (expr)  
 3523              	  return byte value at address 
 3524              	*****************************************/
 3525              	    _FUNC peek16
 3526 0a8c 00B5FFF7 	    _CALL func_args  
 3526      FEFF5DF8 
 3526      04EB
 3527 0a96 0128     	    cmp r0,#1
 3528 0a98 3FF5FEAF 	    bmi syntax_error
 3529 0a9c 5CF8041B 	    _POP r1 
 3530 0aa0 0988     	    ldrh r1,[r1]
 3531 0aa2 4FF00F00 	    mov r0,#TK_INTGR     
 3532 0aa6 7047     	    _RET 
 3533              	
 3534              	/*****************************************
 3535              	  BASIC: PEEK32 (expr)  
 3536              	  return byte value at address 
 3537              	*****************************************/
 3538              	    _FUNC peek32
 3539 0aa8 00B5FFF7 	    _CALL func_args  
 3539      FEFF5DF8 
 3539      04EB
 3540 0ab2 0128     	    cmp r0,#1
 3541 0ab4 3FF5FEAF 	    bmi syntax_error
 3542 0ab8 5CF8041B 	    _POP r1 
 3543 0abc 0968     	    ldr r1,[r1]
 3544 0abe 4FF00F00 	    mov r0,#TK_INTGR     
 3545 0ac2 7047     	    _RET 
 3546              	
 3547              	
 3548              	/**********************************
 3549              	  BASIC: POKE8 addr,byte
 3550              	  store byte at addr   
 3551              	**********************************/
 3552              	    _FUNC poke8
 3553 0ac4 00B5FFF7 	    _CALL arg_list
 3553      FEFF5DF8 
 3553      04EB
 3554 0ace 0228     	    cmp r0,#2 
 3555 0ad0 7FF4FEAF 	    bne syntax_error
 3556 0ad4 BCE80300 	    ldmia DP!,{r0,r1} 
 3557 0ad8 0870     	    strb r0,[r1]
 3558 0ada 7047     	    _RET 
 3559              	
 3560              	/**********************************
 3561              	  BASIC: POKE16 addr,hword
 3562              	  store hword at addr   
 3563              	**********************************/
 3564              	    _FUNC poke16
 3565 0adc 00B5FFF7 	    _CALL arg_list
 3565      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 92


 3565      04EB
 3566 0ae6 0228     	    cmp r0,#2 
 3567 0ae8 7FF4FEAF 	    bne syntax_error
 3568 0aec BCE80300 	    ldmia DP!,{r0,r1} 
 3569 0af0 0880     	    strh r0,[r1]
 3570 0af2 7047     	    _RET 
 3571              	
 3572              	/**********************************
 3573              	  BASIC: POKE32 addr,word
 3574              	  store word at addr   
 3575              	**********************************/
 3576              	    _FUNC poke32
 3577 0af4 00B5FFF7 	    _CALL arg_list 
 3577      FEFF5DF8 
 3577      04EB
 3578 0afe 0228     	    cmp r0,#2 
 3579 0b00 7FF4FEAF 	    bne syntax_error
 3580 0b04 BCE80300 	    ldmia DP!,{r0,r1} 
 3581 0b08 0860     	    str r0,[r1]
 3582 0b0a 7047     	    _RET 
 3583              	
 3584              	
 3585              	
 3586              	/****************************
 3587              	  BASIC: PRINT|? arg_list 
 3588              	  print list of arguments 
 3589              	****************************/
 3590              	    _FUNC print
 3591 0b0c 88EA0808 	    eor T1,T1 
 3592 0b10 00B5FFF7 	0:  _CALL expression
 3592      FEFF5DF8 
 3592      04EB
 3593 0b1a 0F28     	    cmp r0,#TK_INTGR
 3594 0b1c 07D1     	    bne 1f 
 3595 0b1e 0846     	    mov r0,r1
 3596 0b20 A169     	    ldr r1,[UPP,#BASE]
 3597 0b22 00B5FFF7 	    _CALL print_int
 3597      FEFF5DF8 
 3597      04EB
 3598 0b2c 3EE0     	    b 8f  
 3599 0b2e 00B5FFF7 	1:  _CALL next_token
 3599      FEFF5DF8 
 3599      04EB
 3600 0b38 0128     	    cmp r0,#TK_COLON 
 3601 0b3a 00DC     	    bgt 2f
 3602 0b3c 4DE0     	    b unget_exit 
 3603 0b3e 0228     	2:  cmp r0,#TK_QSTR 
 3604 0b40 06D1     	    bne 3f
 3605 0b42 0846     	    mov r0,r1 
 3606 0b44 00B5FFF7 	    _CALL uart_puts  
 3606      FEFF5DF8 
 3606      04EB
 3607 0b4e 2DE0     	    b 8f 
 3608 0b50 0D28     	3:  cmp r0,#TK_CFUNC
 3609 0b52 05D1     	    bne 4f
 3610 0b54 0846     	    mov r0,r1
 3611 0b56 00B5FFF7 	    _CALL execute 
ARM GAS  tinyBasic.s 			page 93


 3611      FEFF5DF8 
 3611      04EB
 3612 0b60 0328     	4:  cmp r0,#TK_CHAR 
 3613 0b62 06D1     	    bne 5f 
 3614 0b64 0846     	    mov r0,r1 
 3615 0b66 00B5FFF7 	    _CALL uart_putc 
 3615      FEFF5DF8 
 3615      04EB
 3616 0b70 1CE0     	    b 8f 
 3617 0b72 0A28     	5:  cmp r0,#TK_SHARP
 3618 0b74 09D1     	    bne 6f 
 3619 0b76 00B5FFF7 	   _CALL next_token
 3619      FEFF5DF8 
 3619      04EB
 3620 0b80 0F28     	    cmp r0,#TK_INTGR  
 3621 0b82 7FF4FEAF 	    bne syntax_error 
 3622 0b86 6164     	    str r1,[UPP,#TAB_WIDTH]
 3623 0b88 10E0     	    b 8f 
 3624 0b8a 0B28     	6:  cmp r0,#TK_CMD 
 3625 0b8c 25D1     	    bne unget_exit  
 3626 0b8e 4529     	    cmp r1,#TAB_IDX 
 3627 0b90 05D1     	    bne 6f
 3628 0b92 00B500F0 	    _CALL tab 
 3628      90FA5DF8 
 3628      04EB
 3629 0b9c 06E0     	    b 8f 
 3630 0b9e 4129     	6:  cmp r1,#SPC_IDX  
 3631 0ba0 1BD1     	    bne unget_exit
 3632 0ba2 00B500F0 	    _CALL spc   
 3632      4EFA5DF8 
 3632      04EB
 3633 0bac 88EA0808 	8:  eor T1,T1  
 3634 0bb0 00B5FFF7 	    _CALL next_token
 3634      FEFF5DF8 
 3634      04EB
 3635 0bba 90B1     	    cbz r0, print_exit  
 3636 0bbc 0828     	    cmp r0,#TK_COMMA 
 3637 0bbe 02D1     	    bne 8f 
 3638 0bc0 4FF0FF38 	    mov T1,#-1
 3639 0bc4 A4E7     	    b 0b
 3640 0bc6 0928     	8:  cmp r0,#TK_SEMIC 
 3641 0bc8 07D1     	    bne unget_exit 
 3642 0bca 00B5FFF7 	    _CALL tabulation 
 3642      FEFF5DF8 
 3642      04EB
 3643 0bd4 4FF0FF38 	    mov T1,#-1
 3644 0bd8 9AE7     	    b 0b
 3645              	unget_exit:         
 3646 0bda D4F800A0 	   _UNGET_TOKEN 
 3646      D4F808B0 
 3647              	print_exit:
 3648 0be2 18EA0808 	    ands T1,T1 
 3649 0be6 04D1     	    bne 9f
 3650 0be8 00B5FFF7 	    _CALL cr 
 3650      FEFF5DF8 
 3650      04EB
 3651 0bf2 7047     	9:  _RET 
ARM GAS  tinyBasic.s 			page 94


 3652              	
 3653              	/**************************************
 3654              	  BASIC: QKEY
 3655              	  check if key pressed 
 3656              	**************************************/ 
 3657              	    _FUNC qkey
 3658 0bf4 4FF00001 	    mov r1,#0
 3659 0bf8 00B5FFF7 	    _CALL uart_qkey
 3659      FEFF5DF8 
 3659      04EB
 3660 0c02 01D0     	    beq 9f 
 3661 0c04 4FF0FF31 	    mov r1,#-1 
 3662 0c08 4FF00F00 	9:  mov r0,#TK_INTGR
 3663 0c0c 7047     	    _RET 
 3664              	
 3665              	/******************************************
 3666              	  BASIC RANDOM(expr)
 3667              	  generate random number between 0..expr-1
 3668              	******************************************/
 3669 0c0e 00BF     	    _FUNC random
 3670 0c10 00B5FFF7 	    _CALL func_args 
 3670      FEFF5DF8 
 3670      04EB
 3671 0c1a 0128     	    cmp r0,#1
 3672 0c1c 7FF4FEAF 	    bne syntax_error 
 3673 0c20 606A     	    ldr r0,[UPP,#SEED]
 3674 0c22 4FEA4031 	    lsl r1,r0,#13
 3675 0c26 81EA0001 	    eor r1,r0
 3676 0c2a 4FEA5140 	    lsr r0,r1,#17
 3677 0c2e 81EA0001 	    eor r1,r0
 3678 0c32 4FEA4110 	    lsl r0,r1,#5
 3679 0c36 81EA0001 	    eor r1,r0
 3680 0c3a 6162     	    str r1,[UPP,#SEED]
 3681 0c3c 5CF8040B 	    _POP r0 
 3682 0c40 B1FBF0F2 	    udiv r2,r1,r0  
 3683 0c44 00FB02F2 	    mul r2,r0 
 3684 0c48 A1EB0201 	    sub r1,r2 
 3685 0c4c 4FF00F00 	    mov r0,#TK_INTGR
 3686 0c50 7047     	    _RET 
 3687              	
 3688              	/****************************************
 3689              	  BASIC: RSHIFT(expr1,expr2)
 3690              	  shift left expr1 de expr2 bits 
 3691              	****************************************/
 3692 0c52 00BF     	    _FUNC rshift
 3693 0c54 00B5FFF7 	    _CALL func_args
 3693      FEFF5DF8 
 3693      04EB
 3694 0c5e 0228     	    cmp r0,#2 
 3695 0c60 7FF4FEAF 	    bne syntax_error
 3696 0c64 BCE80300 	    ldmia DP!,{r0,r1}
 3697 0c68 21FA00F1 	    lsr r1,r0  
 3698 0c6c 4FF00F00 	    mov r0,#TK_INTGR
 3699 0c70 7047     	    _RET 
 3700              	
 3701              	/****************************
 3702              	  BASIC: RUN 
ARM GAS  tinyBasic.s 			page 95


 3703              	  execute program in memory
 3704              	****************************/
 3705 0c72 00BF     	    _FUNC run
 3706 0c74 206C10F0 	    _CLO 
 3706      010F03D0 
 3706      4FF00700 
 3706      FFF7FEBF 
 3707 0c84 206B     	    ldr r0,[UPP,#TXTBGN]
 3708 0c86 616B     	    ldr r1,[UPP,#TXTEND]
 3709 0c88 C4F8D010 	    str r1,[UPP,#HERE]
 3710 0c8c 8842     	    cmp r0,r1
 3711 0c8e 21D0     	    beq 9f
 3712 0c90 216C     	    ldr r1,[UPP,#FLAGS]
 3713 0c92 11F0080F 	    tst r1,#FSTOP
 3714 0c96 09D0     	    beq 1f
 3715 0c98 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3716 0c9c 6060     	    str r0,[UPP,#COUNT]
 3717 0c9e 206C     	    ldr r0,[UPP,#FLAGS]
 3718 0ca0 4FF00901 	    mov r1,#FRUN+FSTOP
 3719 0ca4 80EA0100 	    eor r0,r1
 3720 0ca8 2064     	    str r0,[UPP,#FLAGS] 
 3721 0caa 13E0     	    b 9f  
 3722 0cac 8178     	1:  ldrb r1,[r0,#2]
 3723 0cae 6160     	    str r1,[UPP,#COUNT]
 3724 0cb0 8346     	    mov BPTR,r0 
 3725 0cb2 4FF0030A 	    mov IN,#3
 3726 0cb6 606B     	    ldr r0,[UPP,#TXTEND]
 3727              	    // reset dataline pointers 
 3728 0cb8 80EA0000 	    eor r0,r0 
 3729 0cbc E060     	    str r0,[UPP,#DATAPTR]
 3730 0cbe 2061     	    str r0,[UPP,#DATA]
 3731 0cc0 6061     	    str r0,[UPP,#DATALEN] 
 3732 0cc2 206C     	    ldr r0,[UPP,#FLAGS]
 3733 0cc4 40F00100 	    orr r0,#FRUN 
 3734 0cc8 2064     	    str r0,[UPP,#FLAGS]
 3735 0cca 00B5FFF7 	    _CALL show_trace 
 3735      FEFF5DF8 
 3735      04EB
 3736 0cd4 7047     	9:  _RET 
 3737              	
 3738              	/**********************************
 3739              	        FILE SYSTEM 
 3740              	**********************************/
 3741              	
 3742              	/*********************************
 3743              	  search_free 
 3744              	  search first free PAGE in fs
 3745              	  a PAGE is free if first word is
 3746              	  -1
 3747              	  input:
 3748              	    none 
 3749              	  output:
 3750              	    r0    addr|0
 3751              	  use:
 3752              	*********************************/
 3753 0cd6 00BF     	    _FUNC search_free 
 3754 0cd8 06B4     	    push {r1,r2}
ARM GAS  tinyBasic.s 			page 96


 3755 0cda DFF86410 	    ldr r1,fs_addr 
 3756 0cde 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3756      C0F60202 
 3757 0ce6 0868     	1:  ldr r0,[r1]
 3758 0ce8 B0F1FF3F 	    cmp r0,#-1
 3759 0cec 03D0     	    beq 8f 
 3760 0cee 01F58061 	    add r1,#PAGE_SIZE
 3761 0cf2 9142     	    cmp r1,r2 
 3762 0cf4 F7D4     	    bmi 1b 
 3763 0cf6 0846     	8:  mov r0,r1 
 3764 0cf8 06BC     	    pop {r1,r2}   
 3765 0cfa 7047     	    _RET 
 3766              	
 3767              	/*********************************
 3768              	  search_file 
 3769              	  search for a file name 
 3770              	  in file system.
 3771              	  input: 
 3772              	    r0   .asciz target name
 3773              	  output:
 3774              	    r0    0 || address found 
 3775              	  use:
 3776              	   r0     temp 
 3777              	   r1     *file_name 
 3778              	   r2     *fs  
 3779              	   r3     target   
 3780              	**********************************/
 3781              	    _FUNC search_file 
 3782 0cfc 0EB4     	    push {r1,r2,r3}
 3783 0cfe DFF84020 	    ldr r2,fs_addr
 3784 0d02 0346     	    mov r3,r0  
 3785              	cmp_loop:
 3786 0d04 1068     	    ldr r0,[r2]
 3787 0d06 B0F1FF3F 	    cmp r0,#-1
 3788 0d0a 80EA0000 	    eor r0,r0
 3789 0d0e 15D0     	    beq 9f // reached end of fs 
 3790 0d10 1846     	1:  mov r0,r3
 3791 0d12 02F10201 	    add r1,r2,#2
 3792 0d16 00B5FFF7 	    _CALL strcmp
 3792      FEFF5DF8 
 3792      04EB
 3793 0d20 08B9     	    cbnz r0,2f
 3794 0d22 1046     	    mov r0,r2 
 3795 0d24 0AE0     	    b 9f   
 3796 0d26 1088     	2:  ldrh r0,[r2] // name length
 3797 0d28 0244     	    add r2,r0 
 3798 0d2a 1088     	    ldrh r0,[r2]
 3799 0d2c 1044     	    add r0,r2
 3800 0d2e 00B5FFF7 	    _CALL page_align 
 3800      FEFF5DF8 
 3800      04EB
 3801 0d38 0246     	    mov r2,r0   
 3802 0d3a E3E7     	    b cmp_loop 
 3803 0d3c 0EBC     	9:  pop {r1,r2,r3}
 3804 0d3e 7047     	    _RET 
 3805              	
 3806 0d40 00000000 	fs_addr: .word FILE_SYSTEM
ARM GAS  tinyBasic.s 			page 97


 3807              	
 3808              	/*************************************
 3809              	  BASIC: DIR 
 3810              	  list files stored in fs 
 3811              	  use:
 3812              	    r0  temp 
 3813              	    r1  temp
 3814              	    r2  file count
 3815              	    r3  data size
 3816              	    T1  *fs  
 3817              	*************************************/
 3818              	    _FUNC directory
 3819 0d44 206C10F0 	    _CLO 
 3819      010F03D0 
 3819      4FF00700 
 3819      FFF7FEBF 
 3820 0d54 82EA0202 	    eor r2,r2 
 3821 0d58 5FF81C80 	    ldr T1,fs_addr 
 3822 0d5c D8F80000 	1:  ldr r0,[T1] // name length 
 3823 0d60 B0F1FF3F 	    cmp r0,#-1
 3824 0d64 2AD0     	    beq no_more_file
 3825 0d66 00F00F03 	    and r3,r0,#15
 3826 0d6a 08F10200 	    add r0,T1,#2
 3827 0d6e 00B5FFF7 	    _CALL uart_puts 
 3827      FEFF5DF8 
 3827      04EB
 3828 0d78 4FF01000 	    mov r0,#16 
 3829 0d7c 00B5FFF7 	    _CALL cursor_x 
 3829      FEFF5DF8 
 3829      04EB
 3830 0d86 9844     	    add T1,r3 
 3831 0d88 B8F80030 	    ldrh r3,[T1]
 3832 0d8c 1846     	    mov r0,r3 
 3833 0d8e 4FF00A01 	    mov r1,#10 
 3834 0d92 00B5FFF7 	    _CALL print_int
 3834      FEFF5DF8 
 3834      04EB
 3835 0d9c 00B5FFF7 	    _CALL cr  
 3835      FEFF5DF8 
 3835      04EB
 3836 0da6 08EB0300 	    add r0,T1,r3 
 3837 0daa 00B5FFF7 	    _CALL page_align
 3837      FEFF5DF8 
 3837      04EB
 3838 0db4 8046     	    mov T1,r0 
 3839 0db6 02F10102 	    add r2,#1 
 3840 0dba CFE7     	    b 1b  
 3841              	no_more_file:
 3842 0dbc 00B5FFF7 	    _CALL cr
 3842      FEFF5DF8 
 3842      04EB
 3843 0dc6 4FF01000 	    mov r0,#16
 3844 0dca 00B5FFF7 	    _CALL cursor_x  
 3844      FEFF5DF8 
 3844      04EB
 3845 0dd4 1046     	    mov r0,r2 
 3846 0dd6 4FF00A01 	    mov r1,#10 
ARM GAS  tinyBasic.s 			page 98


 3847 0dda 00B5FFF7 	    _CALL print_int 
 3847      FEFF5DF8 
 3847      04EB
 3848 0de4 DFF8D404 	    ldr r0,=fcount 
 3849 0de8 00B5FFF7 	    _CALL uart_puts 
 3849      FEFF5DF8 
 3849      04EB
 3850 0df2 7047     	    _RET 
 3851 0df4 66696C65 	fcount:  .asciz "files\n"
 3851      730A00
 3852              	
 3853              	/*************************************
 3854              	  BASIC: FORGET ["name"]
 3855              	  delete file and all following 
 3856              	  if no name given delete all files 
 3857              	************************************/
 3858 0dfb 00       	    _FUNC forget
 3859 0dfc 2DE90802 	    push {r3,T2}
 3860 0e00 5FF8C490 	    ldr T2,fs_addr 
 3861 0e04 E36A     	    ldr r3,[UPP,#FSFREE]
 3862 0e06 00B5FFF7 	    _CALL next_token
 3862      FEFF5DF8 
 3862      04EB
 3863 0e10 38B1     	    cbz r0,1f // no name 
 3864 0e12 0846     	    mov r0,r1
 3865 0e14 00B5FFF7 	    _CALL search_file
 3865      71FF5DF8 
 3865      04EB
 3866 0e1e 58B1     	    cbz r0,9f 
 3867 0e20 8146     	    mov T2,r0 
 3868 0e22 9945     	1:  cmp T2,r3 
 3869 0e24 08D5     	    bpl 9f 
 3870 0e26 4846     	    mov r0,T2 
 3871 0e28 00B5FFF7 	    _CALL erase_page
 3871      FEFF5DF8 
 3871      04EB
 3872 0e32 09F58069 	    add T2,#PAGE_SIZE
 3873 0e36 F4E7     	    b 1b 
 3874 0e38 00B5FFF7 	9:  _CALL search_free
 3874      4DFF5DF8 
 3874      04EB
 3875 0e42 BDE80802 	    pop {r3,T2} 
 3876 0e46 7047     	    _RET 
 3877              	
 3878              	/**********************************
 3879              	  BASIC LOAD "name" 
 3880              	  load file in RAM for execution
 3881              	  use:
 3882              	    r0   temp
 3883              	    r1   src
 3884              	    r2   dest 
 3885              	    r3   count 
 3886              	**********************************/
 3887              	    _FUNC load
 3888 0e48 206C10F0 	    _CLO 
 3888      010F03D0 
 3888      4FF00700 
ARM GAS  tinyBasic.s 			page 99


 3888      FFF7FEBF 
 3889 0e58 00B5FFF7 	    _CALL next_token 
 3889      FEFF5DF8 
 3889      04EB
 3890 0e62 0228     	    cmp r0,#TK_QSTR 
 3891 0e64 7FF4FEAF 	    bne syntax_error 
 3892 0e68 0846     	    mov r0,r1 
 3893 0e6a 00B5FFF7 	    _CALL search_file 
 3893      46FF5DF8 
 3893      04EB
 3894 0e74 18B9     	    cbnz r0, 1f 
 3895 0e76 4FF00900 	    mov r0,#ERR_NOT_FILE
 3896 0e7a FFF7FEBF 	    b tb_error 
 3897 0e7e 0146     	1:  mov r1,r0 
 3898 0e80 0888     	    ldrh r0,[r1]
 3899 0e82 0144     	    add r1,r0 // data size field  
 3900 0e84 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3901 0e88 226B     	    ldr r2,[UPP,#TXTBGN]
 3902 0e8a 02EB0300 	    add r0,r2,r3  
 3903 0e8e 6063     	    str r0,[UPP,#TXTEND]
 3904 0e90 03F10103 	    add r3,#1
 3905 0e94 4FEA5303 	    lsr r3,#1
 3906              	2:  // load file data 
 3907 0e98 31F8020B 	    ldrh r0,[r1],#2
 3908 0e9c 22F8020B 	    strh r0,[r2],#2 
 3909 0ea0 013B     	    subs r3,#1 
 3910 0ea2 F9D1     	    bne 2b 
 3911              	// report file size 
 3912 0ea4 DFF81804 	    ldr r0,=fsize 
 3913 0ea8 00B5FFF7 	    _CALL uart_puts
 3913      FEFF5DF8 
 3913      04EB
 3914 0eb2 606B     	    ldr r0,[UPP,#TXTEND]
 3915 0eb4 236B     	    ldr r3,[UPP,#TXTBGN]
 3916 0eb6 A0EB0300 	    sub r0,r3 
 3917 0eba 4FF00A01 	    mov r1,#10 
 3918 0ebe 00B5FFF7 	    _CALL print_int 
 3918      FEFF5DF8 
 3918      04EB
 3919 0ec8 FE48     	    ldr r0,=data_bytes 
 3920 0eca 00B5FFF7 	    _CALL uart_puts      
 3920      FEFF5DF8 
 3920      04EB
 3921 0ed4 7047     	    _RET 
 3922              	
 3923              	
 3924              	/*********************************
 3925              	  BASIC: SAVE "name" 
 3926              	  save program in flash memory
 3927              	  file structure:
 3928              	    .hword name_length 
 3929              	    .asciz name
 3930              	    .palign 1  
 3931              	    .hword data_length 
 3932              	    .byte  file data (variable length)  
 3933              	  use:
 3934              	    r0  temp 
ARM GAS  tinyBasic.s 			page 100


 3935              	    r1  temp
 3936              	    r2  *flash 
 3937              	    r3  *ram  
 3938              	    T1  temp   
 3939              	********************************/
 3940 0ed6 00BF     	    _FUNC save
 3941 0ed8 206C10F0 	    _CLO 
 3941      010F03D0 
 3941      4FF00700 
 3941      FFF7FEBF 
 3942 0ee8 606B     	    ldr r0,[UPP,#TXTEND]
 3943 0eea 216B     	    ldr r1,[UPP,#TXTBGN]
 3944 0eec 8842     	    cmp r0,r1
 3945 0eee 03D1     	    bne 0f 
 3946 0ef0 4FF00D00 	    mov r0,#ERR_NO_PROG
 3947 0ef4 FFF7FEBF 	    b tb_error 
 3948 0ef8 00B5FFF7 	0:  _CALL next_token 
 3948      FEFF5DF8 
 3948      04EB
 3949 0f02 0228     	    cmp r0,#TK_QSTR
 3950 0f04 7FF4FEAF 	    bne syntax_error 
 3951              	// check for existing 
 3952 0f08 0B46     	    mov r3,r1 // save name 
 3953 0f0a 1846     	    mov r0,r3  
 3954 0f0c 00B5FFF7 	    _CALL search_file
 3954      F5FE5DF8 
 3954      04EB
 3955 0f16 18B1     	    cbz r0,new_file 
 3956 0f18 4FF00800 	    mov r0,#ERR_DUPLICATE
 3957 0f1c FFF7FEBF 	    b tb_error 
 3958              	new_file:
 3959 0f20 4FF00100 	    mov r0,#1 
 3960 0f24 00B5FFF7 	    _CALL unlock 
 3960      FEFF5DF8 
 3960      04EB
 3961 0f2e E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3962 0f30 1846     	    mov r0,r3 // *name 
 3963 0f32 00B5FFF7 	    _CALL strlen 
 3963      FEFF5DF8 
 3963      04EB
 3964 0f3c 00F10400 	    add r0,#4  
 3965 0f40 20F00100 	    and r0,#-2 //even size
 3966 0f44 A0F10208 	    sub T1,r0,#2  // name length counter   
 3967 0f48 1146     	1:  mov r1,r2  
 3968 0f4a 00B5FFF7 	    _CALL hword_write   
 3968      FEFF5DF8 
 3968      04EB
 3969 0f54 02F10202 	    add r2,#2  
 3970              	// write file name      
 3971 0f58 33F8020B 	2:  ldrh r0,[r3],#2 
 3972 0f5c 1146     	    mov r1,r2 
 3973 0f5e 00B5FFF7 	    _CALL hword_write
 3973      FEFF5DF8 
 3973      04EB
 3974 0f68 02F10202 	    add r2,#2
 3975 0f6c B8F10208 	    subs T1,#2
 3976 0f70 F2D1     	    bne 2b
ARM GAS  tinyBasic.s 			page 101


 3977              	// write data size 
 3978 0f72 606B     	    ldr r0,[UPP,#TXTEND]
 3979 0f74 236B     	    ldr r3,[UPP,#TXTBGN]
 3980 0f76 A0EB0300 	    sub r0,r3
 3981 0f7a 8046     	    mov T1,r0
 3982 0f7c 1146     	    mov r1,r2 
 3983 0f7e 00B5FFF7 	    _CALL hword_write
 3983      FEFF5DF8 
 3983      04EB
 3984 0f88 02F10202 	    add r2,#2 
 3985              	// write data 
 3986 0f8c 08F10108 	    add T1,#1 
 3987 0f90 4FEA5808 	    lsr T1,#1 // .hword to write 
 3988 0f94 33F8020B 	3:  ldrh r0,[r3],#2
 3989 0f98 1146     	    mov r1,r2
 3990 0f9a 00B5FFF7 	    _CALL hword_write 
 3990      FEFF5DF8 
 3990      04EB
 3991 0fa4 02F10202 	    add r2,#2 
 3992 0fa8 B8F10108 	    subs T1,#1 
 3993 0fac F2D1     	    bne 3b
 3994 0fae 4FF00000 	    mov r0,#0 
 3995 0fb2 00B5FFF7 	    _CALL unlock
 3995      FEFF5DF8 
 3995      04EB
 3996              	// update FSFREE     
 3997 0fbc 606B     	    ldr r0,[UPP,#TXTEND]
 3998 0fbe 216B     	    ldr r1,[UPP,#TXTBGN]
 3999 0fc0 A0EB0100 	    sub r0,r1 
 4000 0fc4 8046     	    mov T1,r0 
 4001 0fc6 E16A     	    ldr r1,[UPP,#FSFREE]
 4002 0fc8 0844     	    add r0,r1 
 4003 0fca 00B5FFF7 	    _CALL page_align
 4003      FEFF5DF8 
 4003      04EB
 4004 0fd4 E062     	    str r0,[UPP,#FSFREE]
 4005 0fd6 BA48     	    ldr r0,=fsize
 4006 0fd8 00B5FFF7 	    _CALL uart_puts
 4006      FEFF5DF8 
 4006      04EB
 4007 0fe2 4046     	    mov r0,T1 
 4008 0fe4 4FF00A01 	    mov r1,#10 
 4009 0fe8 00B5FFF7 	    _CALL print_int 
 4009      FEFF5DF8 
 4009      04EB
 4010 0ff2 B448     	    ldr r0,=data_bytes 
 4011 0ff4 00B5FFF7 	    _CALL uart_puts  
 4011      FEFF5DF8 
 4011      04EB
 4012 0ffe 7047     	    _RET 
 4013 1000 66696C65 	fsize: .asciz "file size: "
 4013      2073697A 
 4013      653A2000 
 4014 100c 62797465 	data_bytes: .asciz "bytes"
 4014      7300
 4015              	
 4016              	
ARM GAS  tinyBasic.s 			page 102


 4017              	/*******************************
 4018              	  BASIC: SIZE 
 4019              	  return RAM free bytes 
 4020              	*******************************/
 4021 1012 00BF     	    _FUNC size
 4022 1014 606B     	    ldr r0,[UPP,#TXTEND]
 4023 1016 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4024 101a A1EB0001 	    sub r1,R0
 4025 101e 4FF00F00 	    mov r0,#TK_INTGR
 4026 1022 7047     	    _RET  
 4027              	
 4028              	/*********************************
 4029              	  BASIC: SLEEP 
 4030              	  place MCU lowest power mode 
 4031              	  wait for external interrpt or
 4032              	  reset.
 4033              	*********************************/
 4034              	    _FUNC sleep
 4035 1024 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4035      CEF20000 
 4036 102c 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4037 1030 0160     	    str r1,[r0]
 4038 1032 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4038      C4F20000 
 4039 103a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4040 103e 0160     	    str r1,[r0]
 4041 1040 20BF     	    wfe 
 4042 1042 7047     	    _RET 
 4043              	
 4044              	/************************************
 4045              	  BASIC: SPC(expr)
 4046              	  mov cursor right expr spaces 
 4047              	***********************************/
 4048              	    _FUNC spc 
 4049 1044 00B5FFF7 	    _CALL func_args 
 4049      FEFF5DF8 
 4049      04EB
 4050 104e 0128     	    cmp r0,#1
 4051 1050 7FF4FEAF 	    bne syntax_error 
 4052 1054 5CF8040B 	    _POP r0 
 4053 1058 00B5FFF7 	    _CALL spaces 
 4053      FEFF5DF8 
 4053      04EB
 4054 1062 7047     	    _RET 
 4055              	
 4056              	    _FUNC spi_read
 4057 1064 7047     	    _RET 
 4058              	
 4059 1066 00BF     	    _FUNC spi_enable
 4060 1068 7047     	    _RET 
 4061              	
 4062 106a 00BF     	    _FUNC spi_select
 4063 106c 7047     	    _RET 
 4064              	
 4065 106e 00BF     	    _FUNC spi_write
 4066 1070 7047     	    _RET 
 4067              	
ARM GAS  tinyBasic.s 			page 103


 4068              	/******************************
 4069              	  BASIC: STOP 
 4070              	  stop program executre but 
 4071              	  keep execution state for 
 4072              	  resume 
 4073              	******************************/
 4074 1072 00BF     	    _FUNC stop
 4075 1074 206C10F0 	    _RTO 
 4075      010F03D1 
 4075      4FF00700 
 4075      FFF7FEBF 
 4076 1084 6068     	    ldr r0,[UPP,#COUNT]
 4077 1086 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4078 108a 206C     	    ldr r0,[UPP,#FLAGS]
 4079 108c 4FF00901 	    mov r1,#FRUN+FSTOP
 4080 1090 80EA0100 	    eor r0,r1
 4081 1094 2064     	    str r0,[UPP,#FLAGS]
 4082 1096 8AEA0A0A 	    eor IN,IN 
 4083 109a 8BEA0B0B 	    eor BPTR,BPTR 
 4084 109e C4F804A0 	    str IN,[UPP,#COUNT]
 4085 10a2 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4086 10a6 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4087 10aa 4FF4A040 	    _MOV32 r0,RAM_END
 4087      C2F20000 
 4088 10b2 8546     	    mov sp,r0
 4089 10b4 FFF7FEBF 	    b cmd_line 
 4090              	
 4091              	
 4092              	/**************************
 4093              	  BASIC: TAB(expr)
 4094              	  move cursor column expr 
 4095              	**************************/
 4096              	    _FUNC tab 
 4097 10b8 00B5FFF7 	    _CALL func_args  
 4097      FEFF5DF8 
 4097      04EB
 4098 10c2 0128     	    cmp r0,#1 
 4099 10c4 7FF4FEAF 	    bne syntax_error 
 4100 10c8 5CF8040B 	    _POP r0 
 4101 10cc 00B5FFF7 	    _CALL cursor_x 
 4101      FEFF5DF8 
 4101      04EB
 4102 10d6 7047     	    _RET 
 4103              	
 4104              	/**************************
 4105              	  BASIC: TICKS 
 4106              	  return msec counter
 4107              	**************************/  
 4108              	    _FUNC get_ticks
 4109 10d8 E169     	    ldr r1,[UPP,#TICKS]
 4110 10da 4FF00F00 	    mov r0,#TK_INTGR
 4111 10de 7047     	    _RET  
 4112              	
 4113              	/*************************
 4114              	  BASIC: TIMER expr 
 4115              	  set countdown timer 
 4116              	************************/
ARM GAS  tinyBasic.s 			page 104


 4117              	    _FUNC set_timer
 4118 10e0 00B5FFF7 	    _CALL expression 
 4118      FEFF5DF8 
 4118      04EB
 4119 10ea 0F28     	    cmp r0,#TK_INTGR
 4120 10ec 7FF4FEAF 	    bne syntax_error 
 4121 10f0 2162     	    str r1,[UPP,#TIMER]
 4122 10f2 7047     	    _RET 
 4123              	
 4124              	/***************************
 4125              	  BASIC: TIMEOUT
 4126              	  check for timer expiration 
 4127              	  return -1 true || 0 false
 4128              	****************************/
 4129              	    _FUNC timeout
 4130 10f4 81EA0101 	    eor r1,r1 
 4131 10f8 206A     	    ldr r0,[UPP,#TIMER]
 4132 10fa 08B9     	    cbnz r0,9f 
 4133 10fc 6FEA0101 	    mvn r1,r1 
 4134 1100 4FF00F00 	9:  mov r0,#TK_INTGR    
 4135 1104 7047     	    _RET 
 4136              	
 4137              	/****************************************
 4138              	  BASIC:  TONE freq, duration 
 4139              	  play a tone with frequency freq and duration
 4140              	  in milliseconds
 4141              	***********************************************/
 4142 1106 00BF     	    _FUNC tone
 4143 1108 00B5FFF7 	    _CALL arg_list 
 4143      FEFF5DF8 
 4143      04EB
 4144 1112 0228     	    cmp r0,#2 
 4145 1114 7FF4FEAF 	    bne syntax_error
 4146 1118 BCE80003 	    ldmia DP!,{T1,T2}
 4147              	    
 4148 111c 7047     	    _RET 
 4149              	
 4150              	/****************************************
 4151              	  BASIC: TRACE n 
 4152              	  enable execution trace 
 4153              	  0   ddisable
 4154              	  1   show current line#
 4155              	  2  show line#+data_stack
 4156              	  3  show line#+data_stack+main_stack 
 4157              	***************************************/
 4158 111e 00BF     	    _FUNC trace 
 4159 1120 00B5FFF7 	    _CALL next_token 
 4159      FEFF5DF8 
 4159      04EB
 4160 112a 0F28     	    cmp r0,#TK_INTGR  
 4161 112c 7FF4FEAF 	    bne syntax_error 
 4162 1130 01F00301 	    and r1,#3 
 4163 1134 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4164 1138 7047     	    _RET 
 4165              	
 4166              	
 4167              	/***************************
ARM GAS  tinyBasic.s 			page 105


 4168              	  BASIC: UBOUND 
 4169              	  return last indice of @
 4170              	  output:
 4171              	    r0  TK_INTGR 
 4172              	    r1  +int 
 4173              	**************************/
 4174 113a 00BF     	    _FUNC ubound
 4175 113c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4176 1140 D4F8D000 	    ldr r0,[UPP,#HERE]
 4177 1144 A1EB0001 	    sub r1,r0 
 4178 1148 4FEA9101 	    lsr r1,#2
 4179 114c 4FF00F00 	    mov r0,#TK_INTGR 
 4180 1150 7047     	    _RET 
 4181              	
 4182              	/****************************
 4183              	  BASIC: UFLASH 
 4184              	  return user flash address
 4185              	*****************************/
 4186 1152 00BF     	    _FUNC uflash
 4187 1154 5C49     	    ldr r1,=user
 4188 1156 4FF00F00 	    mov r0,#TK_INTGR 
 4189 115a 7047     	    _RET 
 4190              	
 4191              	
 4192              	/************************************
 4193              	  BASIC: UNTIL relation 
 4194              	  close a DO..UNTIL loop 
 4195              	  loop until relation come true 
 4196              	************************************/
 4197              	    _FUNC until
 4198 115c 00B5FFF7 	    _CALL relation 
 4198      FEFF5DF8 
 4198      04EB
 4199 1166 11B1     	    cbz r1,9f
 4200 1168 0CF1080C 	    add DP,#8
 4201 116c 7047     	    _RET  
 4202 116e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4203 1172 9BF80200 	    ldrb r0,[BPTR,#2]
 4204 1176 6060     	    str r0,[UPP,#COUNT]
 4205 1178 7047     	    _RET 
 4206              	
 4207              	/*************************************
 4208              	  BASIC: WAIT addr,expr1[,expr2] 
 4209              	  wait until *addr&expr1 is not null 
 4210              	  or until (*addr&expr1)^expr2 is null 
 4211              	***************************************/
 4212 117a 00BF     	    _FUNC wait
 4213 117c 00B5FFF7 	    _CALL arg_list 
 4213      FEFF5DF8 
 4213      04EB
 4214 1186 0228     	    cmp r0,#2
 4215 1188 03D0     	    beq 2f 
 4216 118a 0328     	    cmp r0,#3
 4217 118c 07D0     	    beq 4f
 4218 118e FFF7FEBF 	    b syntax_error 
 4219 1192 BCE80300 	2:  ldmia DP!,{r0,r1}
 4220 1196 0A88     	3:  ldrh r2,[r1]
ARM GAS  tinyBasic.s 			page 106


 4221 1198 0240     	    ands r2,r0 
 4222 119a FCD0     	    beq 3b 
 4223 119c 06E0     	    b 9f 
 4224 119e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4225 11a2 1388     	5:  ldrh r3,[r2]
 4226 11a4 83EA0003 	    eor r3,r0
 4227 11a8 0B40     	    ands r3,r1 
 4228 11aa FAD0     	    beq 5b 
 4229 11ac 7047     	9:  _RET 
 4230              	
 4231              	/*********************************************
 4232              	  BASIC: WORDS 
 4233              	  print list of BASIC WORDS in dictionary 
 4234              	  use:
 4235              	    r0,r1,T1,T2  
 4236              	********************************************/
 4237 11ae 00BF     	    _FUNC words
 4238 11b0 206C10F0 	    _CLO 
 4238      010F03D0 
 4238      4FF00700 
 4238      FFF7FEBF 
 4239 11c0 DFF80881 	    ldr T1,=kword_dict
 4240 11c4 89EA0909 	    eor T2,T2 
 4241              	1:  
 4242 11c8 4046     	    mov r0,T1
 4243 11ca 00B5FFF7 	    _CALL strlen
 4243      FEFF5DF8 
 4243      04EB
 4244 11d4 E0B1     	    cbz r0,9f 
 4245 11d6 8144     	    add T2,r0 
 4246 11d8 B9F1500F 	    cmp T2,#80 
 4247 11dc 06D4     	    bmi 2f
 4248 11de 89EA0909 	    eor T2,T2  
 4249 11e2 00B5FFF7 	    _CALL cr 
 4249      FEFF5DF8 
 4249      04EB
 4250 11ec 4046     	2:  mov r0,T1 
 4251 11ee 00B5FFF7 	    _CALL uart_puts 
 4251      FEFF5DF8 
 4251      04EB
 4252 11f8 4FF02000 	    mov r0,#SPACE
 4253 11fc 09F10109 	    add T2,#1  
 4254 1200 00B5FFF7 	    _CALL uart_putc 
 4254      FEFF5DF8 
 4254      04EB
 4255 120a 58F80C8C 	    ldr T1,[T1,#-12]
 4256 120e DBE7     	    b 1b 
 4257 1210 7047     	9:  _RET 
 4258              	
 4259              	
 4260              	/**************************************
 4261              	  BASIC: XOR(expr1,expr2)
 4262              	  binary exclusive or between 2 expressions
 4263              	**************************************/
 4264 1212 00BF     	    _FUNC bit_xor
 4265 1214 00B5FFF7 	    _CALL func_args
 4265      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 107


 4265      04EB
 4266 121e 0228     	    cmp r0,#2
 4267 1220 7FF4FEAF 	    bne syntax_error
 4268 1224 5CF8040B 	    _POP r0
 4269 1228 5CF8041B 	    _POP r1 
 4270 122c 81EA0001 	    eor r1,r0 
 4271 1230 4FF00F00 	    mov r0,#TK_INTGR
 4272 1234 7047     	    _RET 
 4273              	
 4274              	/**********************************
 4275              	     argument stack manipulation
 4276              	**********************************/
 4277              	
 4278              	/**********************************
 4279              	  BASIC PUSH expr[,expr] 
 4280              	  push integers on stack 
 4281              	*********************************/
 4282 1236 00BF     	    _FUNC cmd_push 
 4283 1238 00B5FFF7 	    _CALL arg_list
 4283      FEFF5DF8 
 4283      04EB
 4284 1242 7047     	    _RET 
 4285              	
 4286              	/********************************
 4287              	  BASIC: POP 
 4288              	  pop an integer out of stack 
 4289              	********************************/    
 4290              	    _FUNC fn_pop 
 4291 1244 5CF8041B 	    _POP r1 
 4292 1248 4FF00F00 	    mov r0,#TK_INTGR 
 4293 124c 7047     	    _RET 
 4294              	
 4295              	/*******************************
 4296              	  BASIC: DROP n 
 4297              	  discard n integer from stack
 4298              	*******************************/
 4299 124e 00BF     	    _FUNC drop 
 4300 1250 00B5FFF7 	    _CALL expression 
 4300      FEFF5DF8 
 4300      04EB
 4301 125a 0F28     	    cmp r0,#TK_INTGR 
 4302 125c 7FF4FEAF 	    bne syntax_error 
 4303 1260 4FF00400 	    mov r0,#4 
 4304 1264 01FB00F0 	    mul r0,r1 
 4305 1268 8444     	    add DP,r0 
 4306 126a 7047     	    _RET 
 4307              	
 4308              	/********************************
 4309              	  BASIC: pick(n) 
 4310              	  retreive nth element from stack 
 4311              	********************************/
 4312              	    _FUNC pick 
 4313 126c 00B5FFF7 	    _CALL func_args
 4313      FEFF5DF8 
 4313      04EB
 4314 1276 0128     	    cmp r0,#1 
 4315 1278 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 108


 4316 127c 5CF8040B 	    _POP r0
 4317 1280 4FF00401 	    mov r1,#4 
 4318 1284 01FB00F0 	    mul r0,r1 
 4319 1288 5CF80010 	    ldr r1,[DP,r0]
 4320 128c 4FF00F00 	    mov r0,#TK_INTGR
 4321 1290 7047     	    _RET 
 4322              	
 4323              	/*************************************
 4324              	  BASIC: store value,n  
 4325              	  store value at nth position on stack
 4326              	**************************************/
 4327 1292 00BF     	    _FUNC store 
 4328 1294 00B5FFF7 	    _CALL arg_list 
 4328      FEFF5DF8 
 4328      04EB
 4329 129e 0228     	    cmp r0,#2 
 4330 12a0 7FF4FEAF 	    bne syntax_error 
 4331 12a4 5CF8040B 	    _POP r0 
 4332 12a8 4FF00401 	    mov r1,#4 
 4333 12ac 01FB00F0 	    mul r0,r1 
 4334 12b0 5CF8041B 	    _POP r1
 4335 12b4 4CF80010 	    str r1,[DP,r0]
 4336 12b8 7047     	    _RET 
 4337              	
 4338              	
 4339 12ba 0000     	  .section .rodata.user
 4340              	  .p2align 10 
 4341              	user:
 4342 0000 FFFFFFFF 	  .space 1024,255
 4342      FFFFFFFF 
 4342      FFFFFFFF 
 4342      FFFFFFFF 
 4342      FFFFFFFF 
 4343              	
 4344              	/*************************************************
 4345              	   extra FLASH memory not used by Tiny BASIC
 4346              	   is used to save BASIC programs.
 4347              	************************************************/
 4348              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4349              	  .section .rodata.fs
 4350              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 109


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 110


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 111


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 112


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 INP
      tbi_macros.inc:38     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:53     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:54     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:55     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:56     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:57     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:58     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:59     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:60     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:61     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:62     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:63     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:64     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:65     *ABS*:0000000000000011 TK_MINUS
ARM GAS  tinyBasic.s 			page 113


      tbi_macros.inc:66     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:67     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:68     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:69     *ABS*:0000000000000040 TK_LBL
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:116    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:118    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:124    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:141    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:142    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:143    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:144    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:145    *ABS*:0000000000000010 DATA
      tbi_macros.inc:146    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:147    *ABS*:0000000000000018 BASE
      tbi_macros.inc:148    *ABS*:000000000000001c TICKS
      tbi_macros.inc:149    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:150    *ABS*:0000000000000024 SEED
      tbi_macros.inc:151    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:152    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:153    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:154    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:155    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:156    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:157    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:158    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:159    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:160    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:161    *ABS*:0000000000000050 RX_QUEUE
ARM GAS  tinyBasic.s 			page 114


      tbi_macros.inc:162    *ABS*:0000000000000060 VARS
      tbi_macros.inc:163    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:164    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:165    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:166    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:167    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:170    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:171    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:172    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:173    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:174    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:175    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:176    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:178    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:180    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:181    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CONST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b DATA_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATALN_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DEC_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DIR_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DO_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DROP_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DUMP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 END_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 ERASE_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FLASH_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOSUB_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GOTO_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 HEX_IDX
       cmd_index.inc:51     *ABS*:000000000000001a IF_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INP_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INPUT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d INVERT_IDX
       cmd_index.inc:55     *ABS*:000000000000001e KEY_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LET_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LIST_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOAD_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LOG2_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LSHIFT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEW_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NEXT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NOT_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OR_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 OUT_IDX
ARM GAS  tinyBasic.s 			page 115


       cmd_index.inc:66     *ABS*:0000000000000029 PAD_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PAUSE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PMODE_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK8_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK16_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK32_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PICK_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POP_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PRT_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PUSH_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 QKEY_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 READ_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 REM_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 REST_IDX
       cmd_index.inc:83     *ABS*:000000000000003a RET_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RND_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RSHIFT_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RUN_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SAVE_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SIZE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SLEEP_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SPC_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STEP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STOP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STORE_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 TAB_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 THEN_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TICKS_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TIMER_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TMROUT_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TO_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TRACE_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UBOUND_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UFLASH_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UNTIL_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WAIT_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WORDS_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WRITE_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XOR_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:2131   .text:00000000000011c8 expression
         tinyBasic.s:1840   .text:0000000000000eec next_token
         tinyBasic.s:1392   .text:0000000000000af8 syntax_error
         tinyBasic.s:379    .text:00000000000002c4 search_label
         tinyBasic.s:417    .text:00000000000002ec search_lineno
         tinyBasic.s:1407   .text:0000000000000b00 tb_error
         tinyBasic.s:348    .text:0000000000000294 search_const
         tinyBasic.s:448    .text:000000000000030c delete_line
         tinyBasic.s:473    .text:0000000000000338 create_gap
         tinyBasic.s:498    .text:0000000000000360 insert_line
         tinyBasic.s:537    .text:00000000000003b0 compile
         tinyBasic.s:1744   .text:0000000000000e40 pad
         tinyBasic.s:826    .text:0000000000000664 parse_int
         tinyBasic.s:613    .text:0000000000000450 comp_token
         tinyBasic.s:694    .text:0000000000000554 store_r0
         tinyBasic.s:920    .text:0000000000000704 skip
         tinyBasic.s:939    .text:000000000000071c upper
         tinyBasic.s:728    .text:0000000000000594 is_special
         tinyBasic.s:750    .text:00000000000005dc token_ofs
         tinyBasic.s:628    .text:0000000000000490 tok_idx0
         tinyBasic.s:697    .text:000000000000055a try_number
         tinyBasic.s:632    .text:0000000000000492 single
         tinyBasic.s:745    .text:00000000000005ca tok_single
         tinyBasic.s:636    .text:000000000000049a label
         tinyBasic.s:784    .text:0000000000000608 parse_label
         tinyBasic.s:711    .text:000000000000058e token_exit
         tinyBasic.s:643    .text:00000000000004b2 lt
         tinyBasic.s:649    .text:00000000000004c0 gt
         tinyBasic.s:662    .text:00000000000004e4 bkslash
         tinyBasic.s:669    .text:00000000000004fa prt_cmd
         tinyBasic.s:675    .text:000000000000050c quote
         tinyBasic.s:859    .text:000000000000069c parse_quote
         tinyBasic.s:680    .text:0000000000000520 tick
         tinyBasic.s:1134   .text:0000000000000824 parse_keyword
         tinyBasic.s:742    .text:00000000000005b4 char_list
         tinyBasic.s:743    .text:00000000000005b4 $d
         tinyBasic.s:751    .text:00000000000005dc $d
         tinyBasic.s:768    .text:0000000000000606 $t
         tinyBasic.s:1027   .text:0000000000000788 is_alpha
         tinyBasic.s:1093   .text:00000000000007d8 atoi
         tinyBasic.s:890    .text:00000000000006d0 get_escaped_char
         tinyBasic.s:907    .text:00000000000006fa escaped
         tinyBasic.s:907    .text:00000000000006fa $d
         tinyBasic.s:920    .text:0000000000000702 $t
         tinyBasic.s:957    .text:000000000000072c is_digit
         tinyBasic.s:981    .text:0000000000000748 is_hex
         tinyBasic.s:1006   .text:000000000000076c is_bit
         tinyBasic.s:1052   .text:00000000000007a8 is_num
         tinyBasic.s:1073   .text:00000000000007c0 is_alnum
         tinyBasic.s:2431   .rodata.dictionary:0000000000000608 kword_dict
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:1559   .text:0000000000000c7c search_dict
         tinyBasic.s:1185   .text:00000000000008ac cmd_name
         tinyBasic.s:1211   .text:00000000000008d0 decompile_line
         tinyBasic.s:1228   .text:0000000000000916 decomp_loop
         tinyBasic.s:1349   .text:0000000000000aa9 single_char
         tinyBasic.s:1345   .text:0000000000000aa0 ge_str
         tinyBasic.s:1346   .text:0000000000000aa3 le_str
         tinyBasic.s:1347   .text:0000000000000aa6 ne_str
         tinyBasic.s:1345   .text:0000000000000aa0 $d
         tinyBasic.s:1369   .text:0000000000000ae0 modulo
         tinyBasic.s:1369   .text:0000000000000ae0 $t
         tinyBasic.s:1440   .text:0000000000000b90 compile_error
         tinyBasic.s:1411   .text:0000000000000b08 rt_error
         tinyBasic.s:1455   .text:0000000000000be2 rt_error_msg
         tinyBasic.s:1459   .text:0000000000000c02 err_msg
         tinyBasic.s:1456   .text:0000000000000bf3 token_at_msg
         tinyBasic.s:2883   .text.basic:00000000000003ba dump01
         tinyBasic.s:1757   .text:0000000000000e50 warm_start
         tinyBasic.s:1455   .text:0000000000000be2 $d
         tinyBasic.s:1467   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1468   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1469   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1470   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1471   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1472   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1473   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1474   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1475   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1476   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1477   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1478   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1479   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1480   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1481   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1482   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1484   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1485   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1486   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1496   .text:0000000000000c46 $t
         tinyBasic.s:1496   .text:0000000000000c48 skip_line
         tinyBasic.s:1513   .text:0000000000000c50 BTGL
         tinyBasic.s:1531   .text:0000000000000c54 kword_cmp
         tinyBasic.s:1597   .text:0000000000000cba cold_start
         tinyBasic.s:1620   .text:0000000000000d18 src_addr
         tinyBasic.s:1622   .text:0000000000000d1c dest_addr
         tinyBasic.s:1743   .text:0000000000000e3c tib
         tinyBasic.s:1624   .text:0000000000000d20 sysvar_size
         tinyBasic.s:1635   .text:0000000000000d24 prt_version
         tinyBasic.s:1691   .text:0000000000000dc8 clear_basic
         tinyBasic.s:3753   .text.basic:0000000000000cd8 search_free
         tinyBasic.s:1621   .text:0000000000000d18 $d
         tinyBasic.s:2310   .rodata:0000000000000000 uzero
         tinyBasic.s:2336   .rodata:00000000000000d4 ulast
         tinyBasic.s:1635   .text:0000000000000d24 $t
         tinyBasic.s:1658   .text:0000000000000d88 version_msg
         tinyBasic.s:1660   .text:0000000000000da8 version
         tinyBasic.s:1659   .text:0000000000000d88 $d
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:1675   .text:0000000000000dac clear_vars
         tinyBasic.s:1726   .text:0000000000000e10 warm_init
         tinyBasic.s:1742   .text:0000000000000e38 dstack
         tinyBasic.s:1741   .text:0000000000000e34 mstack
         tinyBasic.s:1741   .text:0000000000000e34 $d
         tinyBasic.s:1745   .text:0000000000000e44 array
         tinyBasic.s:1746   .text:0000000000000e48 ready
         tinyBasic.s:1777   .text:0000000000000e68 cmd_line
         tinyBasic.s:1789   .text:0000000000000e9c interpreter
         tinyBasic.s:1824   .text:0000000000000ee0 execute
         tinyBasic.s:3208   .text.basic:00000000000006fa let_var
         tinyBasic.s:3213   .text.basic:0000000000000706 let_array
         tinyBasic.s:2440   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1846   .text:0000000000000efa end_of_line
         tinyBasic.s:1850   .text:0000000000000f04 next_line
         tinyBasic.s:1897   .text:0000000000000f84 tok_jmp
         tinyBasic.s:1898   .text:0000000000000f84 $d
         tinyBasic.s:1928   .text:0000000000000fc8 expect
         tinyBasic.s:1947   .text:0000000000000fe4 func_args
         tinyBasic.s:1967   .text:0000000000001010 arg_list
         tinyBasic.s:2001   .text:0000000000001050 factor
         tinyBasic.s:2239   .text:00000000000012b4 get_array_element
         tinyBasic.s:2277   .text:00000000000012dc get_var
         tinyBasic.s:2080   .text:000000000000114c term
         tinyBasic.s:2173   .text:0000000000001230 relation
         tinyBasic.s:2220   .text:00000000000012aa relop_jmp
         tinyBasic.s:2192   .text:000000000000127a rel_idx0
         tinyBasic.s:2193   .text:000000000000127a rel_eq
         tinyBasic.s:2210   .text:0000000000001290 rel_false
         tinyBasic.s:2196   .text:000000000000127e rel_lt
         tinyBasic.s:2199   .text:0000000000001282 rel_le
         tinyBasic.s:2202   .text:0000000000001286 rel_gt
         tinyBasic.s:2205   .text:000000000000128a rel_ge
         tinyBasic.s:2208   .text:000000000000128e rel_diff
         tinyBasic.s:2221   .text:00000000000012aa $d
         tinyBasic.s:2259   .text:00000000000012c8 set_array_element
         tinyBasic.s:2295   .text:00000000000012ec set_var
         tinyBasic.s:4350   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2331   .rodata:0000000000000050 $d
         tinyBasic.s:2344   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2343   *ABS*:0000000000000000 link
         tinyBasic.s:2432   .rodata.dictionary:0000000000000608 LINK
         tinyBasic.s:2345   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2427   .rodata.dictionary:00000000000005fc first_link
         tinyBasic.s:2474   .text.basic:0000000000000000 abs
         tinyBasic.s:2496   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2511   .text.basic:0000000000000054 ascii
         tinyBasic.s:2536   .text.basic:000000000000009c awu
         tinyBasic.s:2576   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2598   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2623   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2663   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2647   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2686   .text.basic:00000000000001e4 char
         tinyBasic.s:2703   .text.basic:0000000000000204 const
         tinyBasic.s:2742   .text.basic:0000000000000288 data_line
         tinyBasic.s:2847   .text.basic:0000000000000380 dec_base
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:3818   .text.basic:0000000000000d44 directory
         tinyBasic.s:2856   .text.basic:0000000000000388 do_loop
         tinyBasic.s:4299   .text.basic:0000000000001250 drop
         tinyBasic.s:2871   .text.basic:0000000000000390 dump
         tinyBasic.s:2921   .text.basic:000000000000043c cmd_end
         tinyBasic.s:2949   .text.basic:000000000000047c erase
         tinyBasic.s:2929   .text.basic:0000000000000444 flash
         tinyBasic.s:2960   .text.basic:0000000000000490 for
         tinyBasic.s:3858   .text.basic:0000000000000dfc forget
         tinyBasic.s:3041   .text.basic:000000000000054c gosub
         tinyBasic.s:3067   .text.basic:000000000000058c goto
         tinyBasic.s:3076   .text.basic:0000000000000598 hex_base
         tinyBasic.s:3085   .text.basic:00000000000005a0 if
         tinyBasic.s:3359   .text.basic:00000000000008c0 inp
         tinyBasic.s:3104   .text.basic:00000000000005b8 input_var
         tinyBasic.s:3172   .text.basic:00000000000006b0 invert
         tinyBasic.s:3185   .text.basic:00000000000006d0 key
         tinyBasic.s:3201   .text.basic:00000000000006e4 let
         tinyBasic.s:3244   .text.basic:0000000000000770 list
         tinyBasic.s:3887   .text.basic:0000000000000e48 load
         tinyBasic.s:3295   .text.basic:0000000000000820 log2
         tinyBasic.s:3310   .text.basic:0000000000000844 lshift
         tinyBasic.s:3324   .text.basic:0000000000000864 new
         tinyBasic.s:3005   .text.basic:00000000000004f4 next
         tinyBasic.s:3333   .text.basic:0000000000000884 func_not
         tinyBasic.s:3345   .text.basic:000000000000089c bit_or
         tinyBasic.s:3383   .text.basic:0000000000000918 out
         tinyBasic.s:3408   .text.basic:000000000000097c pad_ref
         tinyBasic.s:3419   .text.basic:0000000000000988 pause
         tinyBasic.s:3447   .text.basic:00000000000009a4 pin_mode
         tinyBasic.s:3512   .text.basic:0000000000000a70 peek8
         tinyBasic.s:3525   .text.basic:0000000000000a8c peek16
         tinyBasic.s:3538   .text.basic:0000000000000aa8 peek32
         tinyBasic.s:4312   .text.basic:000000000000126c pick
         tinyBasic.s:3552   .text.basic:0000000000000ac4 poke8
         tinyBasic.s:3564   .text.basic:0000000000000adc poke16
         tinyBasic.s:3576   .text.basic:0000000000000af4 poke32
         tinyBasic.s:4290   .text.basic:0000000000001244 fn_pop
         tinyBasic.s:3590   .text.basic:0000000000000b0c print
         tinyBasic.s:4282   .text.basic:0000000000001238 cmd_push
         tinyBasic.s:3657   .text.basic:0000000000000bf4 qkey
         tinyBasic.s:2772   .text.basic:00000000000002dc read
         tinyBasic.s:2814   .text.basic:000000000000033c restore
         tinyBasic.s:3056   .text.basic:0000000000000574 return
         tinyBasic.s:3669   .text.basic:0000000000000c10 random
         tinyBasic.s:3692   .text.basic:0000000000000c54 rshift
         tinyBasic.s:3705   .text.basic:0000000000000c74 run
         tinyBasic.s:3940   .text.basic:0000000000000ed8 save
         tinyBasic.s:4021   .text.basic:0000000000001014 size
         tinyBasic.s:4034   .text.basic:0000000000001024 sleep
         tinyBasic.s:4048   .text.basic:0000000000001044 spc
         tinyBasic.s:2991   .text.basic:00000000000004dc step
         tinyBasic.s:4074   .text.basic:0000000000001074 stop
         tinyBasic.s:4327   .text.basic:0000000000001294 store
         tinyBasic.s:4096   .text.basic:00000000000010b8 tab
         tinyBasic.s:3096   .text.basic:00000000000005b4 then
         tinyBasic.s:4108   .text.basic:00000000000010d8 get_ticks
ARM GAS  tinyBasic.s 			page 120


         tinyBasic.s:4117   .text.basic:00000000000010e0 set_timer
         tinyBasic.s:4129   .text.basic:00000000000010f4 timeout
         tinyBasic.s:2978   .text.basic:00000000000004c4 to
         tinyBasic.s:4158   .text.basic:0000000000001120 trace
         tinyBasic.s:4174   .text.basic:000000000000113c ubound
         tinyBasic.s:4186   .text.basic:0000000000001154 uflash
         tinyBasic.s:4197   .text.basic:000000000000115c until
         tinyBasic.s:4212   .text.basic:000000000000117c wait
         tinyBasic.s:4237   .text.basic:00000000000011b0 words
         tinyBasic.s:4264   .text.basic:0000000000001214 bit_xor
         tinyBasic.s:2474   .text.basic:0000000000000000 $t
         tinyBasic.s:2486   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2489   .text.basic:000000000000002c analog_read
         tinyBasic.s:2528   .text.basic:0000000000000098 autorun
         tinyBasic.s:3412   .text.basic:0000000000000984 pad_adr
         tinyBasic.s:2791   .text.basic:0000000000000314 seek_next
         tinyBasic.s:2836   .text.basic:0000000000000372 no_data_line
         tinyBasic.s:2832   .text.basic:000000000000036c try_next_line
         tinyBasic.s:2895   .text.basic:00000000000003dc print_dump_header
         tinyBasic.s:2953   .text.basic:000000000000048c user_space
         tinyBasic.s:2953   .text.basic:000000000000048c $d
         tinyBasic.s:4341   .rodata.user:0000000000000000 user
         tinyBasic.s:2960   .text.basic:0000000000000490 $t
         tinyBasic.s:3044   .text.basic:000000000000055a target
         tinyBasic.s:3165   .text.basic:00000000000006ac str_buffer
         tinyBasic.s:3164   .text.basic:00000000000006a8 input_buffer
         tinyBasic.s:3164   .text.basic:00000000000006a8 $d
         tinyBasic.s:3172   .text.basic:00000000000006b0 $t
         tinyBasic.s:3289   .text.basic:000000000000081c out_buff
         tinyBasic.s:3289   .text.basic:000000000000081c $d
         tinyBasic.s:3295   .text.basic:0000000000000820 $t
         tinyBasic.s:3412   .text.basic:0000000000000984 $d
         tinyBasic.s:3419   .text.basic:0000000000000988 $t
         tinyBasic.s:3645   .text.basic:0000000000000bda unget_exit
         tinyBasic.s:3647   .text.basic:0000000000000be2 print_exit
         tinyBasic.s:3806   .text.basic:0000000000000d40 fs_addr
         tinyBasic.s:3781   .text.basic:0000000000000cfc search_file
         tinyBasic.s:3785   .text.basic:0000000000000d04 cmp_loop
         tinyBasic.s:3806   .text.basic:0000000000000d40 $d
         tinyBasic.s:3818   .text.basic:0000000000000d44 $t
         tinyBasic.s:3841   .text.basic:0000000000000dbc no_more_file
         tinyBasic.s:3851   .text.basic:0000000000000df4 fcount
         tinyBasic.s:3851   .text.basic:0000000000000df4 $d
         tinyBasic.s:4013   .text.basic:0000000000001000 fsize
         tinyBasic.s:4014   .text.basic:000000000000100c data_bytes
         tinyBasic.s:3958   .text.basic:0000000000000f20 new_file
         tinyBasic.s:4013   .text.basic:0000000000001000 $d
         tinyBasic.s:4021   .text.basic:0000000000001012 $t
         tinyBasic.s:4056   .text.basic:0000000000001064 spi_read
         tinyBasic.s:4059   .text.basic:0000000000001068 spi_enable
         tinyBasic.s:4062   .text.basic:000000000000106c spi_select
         tinyBasic.s:4065   .text.basic:0000000000001070 spi_write
         tinyBasic.s:4142   .text.basic:0000000000001108 tone
         tinyBasic.s:4340   .rodata.user:0000000000000000 $d
         tinyBasic.s:4339   .text.basic:00000000000012ba $d
         tinyBasic.s:4350   .text.basic:00000000000012bc $d
         tinyBasic.s:4350   .text:00000000000012fc $d
ARM GAS  tinyBasic.s 			page 121


         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:749    .text:00000000000005d9 $d
         tinyBasic.s:749    .text:00000000000005da $t
         tinyBasic.s:1662   .text:0000000000000da9 $d
         tinyBasic.s:1662   .text:0000000000000daa $t
         tinyBasic.s:1757   .text:0000000000000e4f $d
         tinyBasic.s:1757   .text:0000000000000e50 $t
         tinyBasic.s:1913   .text:0000000000000fc5 $d
         tinyBasic.s:1913   .text:0000000000000fc6 $t
         tinyBasic.s:2239   .text:00000000000012b1 $d
         tinyBasic.s:2239   .text:00000000000012b2 $t
         tinyBasic.s:3858   .text.basic:0000000000000dfb $d
         tinyBasic.s:3858   .text.basic:0000000000000dfc $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
flash_store
erase_page
uart_getc
tabulation
uart_qkey
page_align
unlock
hword_write
