ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// bits 4:5 identify token group 
  37              	// 0x0n -> miscelinous 
ARM GAS  tinyBasic.s 			page 7


  38              	// 0x1n -> +|- operators 
  39              	// 0x2n -> *|/|% operators
  40              	// 0x3n -> relational operators 
  41              	  .equ TK_NONE,0       // not a token 
  42              	  .equ TK_COLON,1      // command separator ':' 
  43              	  .equ TK_QSTR,2     // quoted string  
  44              	  .equ TK_CHAR,3       // ASCII character 
  45              	  .equ TK_VAR,4      // variable index 
  46              	  .equ TK_ARRAY,5     // array variable '@' 
  47              	  .equ TK_LPAREN,6     // left parenthesis '('
  48              	  .equ TK_RPAREN,7     // right parenthesis ')'
  49              	  .equ TK_COMMA,8     // item separator ',' 
  50              	  .equ TK_SEMIC,9     // semi-colon  
  51              	  .equ TK_SHARP,0xa     // print colon width '#' 
  52              	  .equ TK_CMD,0xb      // BASIC command   
  53              	  .equ TK_IFUNC,0xc    // BASIC integer function
  54              	  .equ TK_CFUNC,0xd    // BASIC character function
  55              	  .equ TK_CONST,0xe    // BASIC constant 
  56              	  .equ TK_INTGR,0xf    // 32 bits integer 
  57              	  .equ TK_PLUS,0x10    // addition operator '+'
  58              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  59              	  .equ TK_MULT,0x20    // multiplication operator '*'
  60              	  .equ TK_DIV,0x21     // division operator '/'
  61              	  .equ TK_MOD,0x22     // modulo operator '%'
  62              	  .equ TK_LBL,0x40     // label token 
  63              	  
  64              	// don't change these token values 
  65              	// values chosen to be used as a mask.
  66              	// bit 7   1 for dictionary words else 0 
  67              	// bits 6  always 0 
  68              	// bits 5:4 identify group 
  69              	// bits 3:0 token identifier inside group  
  70              	  .equ TK_GT,0x31      // relation operator '>'
  71              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  72              	  .equ TK_GE,0x33      // relation operator '>='
  73              	  .equ TK_LT,0x34      // relation operator '<'
  74              	  .equ TK_LE,0x36      // relation operator '<='
  75              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  76              	// token groups 
  77              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  78              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  79              	  .equ TK_GRP_ADD,0x10  // additive operators
  80              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  81              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  82              	  .equ CMD_END,2 
  83              	
  84              	//--------------------------------------
  85              	//   error codes 
  86              	//--------------------------------------
  87              	  .equ ERR_NONE,0
  88              	  .equ ERR_MEM_FULL,1 
  89              	  .equ ERR_SYNTAX,2
  90              	  .equ ERR_MATH_OVF,3
  91              	  .equ ERR_DIV0,4 
  92              	  .equ ERR_NO_LINE,5
  93              	  .equ ERR_RUN_ONLY,6
  94              	  .equ ERR_CMD_ONLY,7
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_DUPLICATE,8
  96              	  .equ ERR_NOT_FILE,9
  97              	  .equ ERR_BAD_VALUE,10
  98              	  .equ ERR_NO_ACCESS,11
  99              	  .equ ERR_NO_DATA,12 
 100              	  .equ ERR_NO_PROG,13
 101              	  .equ ERR_NO_FSPACE,14
 102              	  .equ ERR_BUF_FULL,15
 103              	  .equ ERR_CANT_PROG,16
 104              	  
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 157              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 158              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 159              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 160              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 161              	
 162              	/* flags used by BASIC interpreter */ 
 163              		.equ FRUN,(1<<0) // programm running
 164              		.equ FTRAP,(1<<1) // inside trap handler 
 165              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 166              		.equ FSTOP,(1<<3) // program stopped  
 167              		.equ FBREAK,(1<<4) // break point flag 
 168              		.equ FCOMP,(1<<5)  // compiling flags 
 169              		.equ FAUTORUN,(1<<6) // auto start program running 
 170              	
 171              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 172              	  
 173              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 174              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 175              	
 176              	/***********************************************
 177              	*       MACROS
 178              	***********************************************/
 179              		.macro _CALL fn /* low level routine call */ 
 180              	 	PUSH {LR}
 181              		BL \fn  
 182              	  POP {LR}
 183              		.endm
 184              		
 185              		.macro	_RET /* return from subroutine */
 186              		BX	LR
 187              		.endm
 188              	
 189              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 190              		MOV \REG, #\LITERAL&0xffff
 191              		MOVT \REG, #\LITERAL>>16
 192              		.endm
 193              	
 194              	// local function header 
 195              	  .macro _FUNC label 
 196              	  .p2align 2 
 197              	  .type \label, %function  
 198              	\label:
 199              	  .endm 
 200              	
 201              	// global function header 
 202              	  .macro _GBL_FUNC label 
 203              	  .global \label 
 204              	  _FUNC \label 
 205              	  .endm 
 206              	
 207              	
 208              	/********************************
ARM GAS  tinyBasic.s 			page 10


 209              	    dictionary structure
 210              	*********************************/
 211              		.macro _dict_entry tok_type,name,cmd_idx 
 212              	  .word LINK 
 213              	  .word \cmd_idx 
 214              		.word \tok_type  	
 215              		.equ LINK,.
 216              		.asciz "\name"
 217              		.p2align 2 
 218              		.endm 
 219              	
 220              	  // pop parameter in register 
 221              	  .macro _POP  reg 
 222              	  ldmia  DP!,{\reg}
 223              	  .endm 
 224              	
 225              	  // push register on parameter stack 
 226              	  .macro _PUSH reg 
 227              	  stmdb DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // drop n parameters on dstack 
 231              	  .macro _DROP n
 232              	  mov r0,#4*\n
 233              	  add DP,R0 
 234              	  .endm 
 235              	
 236              	  // back to previous token in list 
 237              	  .macro _UNGET_TOKEN 
 238              	  ldr IN,[UPP,#IN_SAVED]
 239              	  ldr BPTR,[UPP,#BASICPTR] 
 240              	  .endm 
 241              	
 242              	 // create a text data 
 243              	 .macro _TEXT label,text
 244              	 \label: .asciz "\text"
 245              	 .p2align 2 
 246              	 .endm 
 247              	
 248              	// command line only 
 249              	  .macro _CLO 
 250              	  ldr r0,[UPP,#FLAGS]
 251              	  tst r0,#FRUN 
 252              	  beq 1f 
 253              	  mov r0,#ERR_CMD_ONLY
 254              	  b tb_error
 255              	1: 
 256              	  .endm 
 257              	
 258              	// run time only 
 259              	  .macro _RTO 
 260              	  ldr r0,[UPP,#FLAGS]
 261              	  tst r0,#FRUN 
 262              	  bne 1f 
 263              	  mov r0,#ERR_CMD_ONLY
 264              	  b tb_error
 265              	1:
ARM GAS  tinyBasic.s 			page 11


 266              	  .endm 
 267              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CLS_IDX,CHAR_IDX+1 //
  36              	    .equ CONST_IDX,CLS_IDX+1 //
  37              	    .equ DATA_IDX,CONST_IDX+1 // 
  38              	    .equ DATALN_IDX,DATA_IDX+1 // 
  39              	    .equ DEC_IDX,DATALN_IDX+1 // 
  40              	    .equ DIR_IDX,DEC_IDX+1 // 
  41              	    .equ DO_IDX,DIR_IDX+1 // 
  42              	    .equ DROP_IDX,DO_IDX+1
  43              	    .equ DUMP_IDX, DROP_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ ERASE_IDX,END_IDX+1 
  46              	    .equ FOR_IDX, ERASE_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ GET_IDX,FORGET_IDX+1
  49              	    .equ GOSUB_IDX, GET_IDX+1 // 
  50              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  51              	    .equ HEX_IDX, GOTO_IDX+1 // 
  52              	    .equ IF_IDX, HEX_IDX+1 // 
  53              	    .equ IN_IDX,IF_IDX+1
  54              	    .equ INPUT_IDX, IN_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  55              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  56              	    .equ KEY_IDX, INVERT_IDX+1 // 
  57              	    .equ LET_IDX, KEY_IDX+1 // 
  58              	    .equ LIST_IDX, LET_IDX+1 // 
  59              	    .equ LOAD_IDX, LIST_IDX+1 // 
  60              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  61              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  62              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  63              	    .equ NEXT_IDX, NEW_IDX+1 // 
  64              	    .equ NOT_IDX, NEXT_IDX+1 // 
  65              	    .equ OR_IDX, NOT_IDX+1 // 
  66              	    .equ OUT_IDX,OR_IDX+1
  67              	    .equ PAD_IDX, OUT_IDX+1 // 
  68              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  69              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  70              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  71              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  72              	    .equ PEEK32_IDX, PEEK16_IDX+1
  73              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  74              	    .equ POKE16_IDX,POKE8_IDX+1 
  75              	    .equ POKE32_IDX,POKE16_IDX+1
  76              	    .equ POP_IDX,POKE32_IDX+1
  77              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  78              	    .equ PUSH_IDX,PRT_IDX+1
  79              	    .equ PUT_IDX,PUSH_IDX+1
  80              	    .equ QKEY_IDX, PUT_IDX+1 // 
  81              	    .equ READ_IDX, QKEY_IDX+1 // 
  82              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  83              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  84              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  85              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  86              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  87              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  88              	    .equ SAVE_IDX, RUN_IDX+1 // 
  89              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  90              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  91              	    .equ SPC_IDX,SLEEP_IDX+1 //
  92              	    .equ STEP_IDX, SPC_IDX+1 // 
  93              	    .equ STOP_IDX, STEP_IDX+1 // 
  94              	    .equ STORE_IDX,STOP_IDX+1
  95              	    .equ TAB_IDX, STORE_IDX+1 //
  96              	    .equ THEN_IDX,TAB_IDX+1
  97              	    .equ TICKS_IDX, THEN_IDX+1 // 
  98              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  99              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 100              	    .equ TO_IDX, TMROUT_IDX+1 // 
 101              	    .equ TRACE_IDX,TO_IDX+1
 102              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 103              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 104              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 105              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 106              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 107              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 108              	    .equ XOR_IDX, WRITE_IDX+1 //  
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
ARM GAS  tinyBasic.s 			page 13


  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
ARM GAS  tinyBasic.s 			page 14


  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
ARM GAS  tinyBasic.s 			page 15


 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
ARM GAS  tinyBasic.s 			page 16


 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
ARM GAS  tinyBasic.s 			page 17


 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
ARM GAS  tinyBasic.s 			page 18


 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      09FE5DF8 
 318      04EB
ARM GAS  tinyBasic.s 			page 19


 319 0256 4028     	    cmp r0,TK_LBL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      34F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      65FF5DF8 
 325      04EB
 326 027a 0F28     	    cmp r0,#TK_INTGR 
 327 027c 40F0F883 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 F0E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  constant value  
 344              	  use:
 345              	    r1  temp 
 346              	    T1   *list 
 347              	    T2   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 2DE90203 	    push {r1,T1,T2} 
 351 029c D4F83480 	    ldr T1,[UPP,#TXTEND]
 352 02a0 D4F8D090 	    ldr T2,[UPP,#HERE] 
 353 02a4 C845     	1:  cmp T1,T2 
 354 02a6 0BD5     	    bpl 8f 
 355 02a8 58F8041B 	    ldr r1,[T1],#4
 356 02ac 8842     	    cmp r0,r1 
 357 02ae 02D0     	    beq 2f 
 358 02b0 08F10408 	    add T1,#4
 359 02b4 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b6 D8F80000 	    ldr r0,[T1]
 362 02ba BDE80203 	    pop {r1,T1,T2}
 363 02be 7047     	    _RET
 364              	8:  // that constant doesn't exist 
 365 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 366 02c4 D8E3     	    b tb_error      
 367              	
 368              	
ARM GAS  tinyBasic.s 			page 20


 369              	/***************************************
 370              	    search_label 
 371              	    search target label 
 372              	    input:
 373              	      r1    target label 
 374              	    output:
 375              	      r0    address or 0 
 376              	    use:
 377              	      r2    line address link 
 378              	      r3    search limit 
 379              	****************************************/
 380 02c6 00BF     	    _FUNC search_label 
 381 02c8 0CB4     	    push {r2,r3}
 382 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 383 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 384 02ce 9A42     	1:  cmp r2,r3
 385 02d0 0AD0     	    beq 8f 
 386 02d2 D078     	    ldrb r0,[r2,#3]
 387 02d4 4028     	    cmp  r0,#TK_LBL 
 388 02d6 02D0     	    beq 4f 
 389 02d8 9078     	2:  ldrb r0,[r2,#2]
 390 02da 0244     	    add r2,r0 
 391 02dc F7E7     	    b 1b 
 392              	4:  // compare label 
 393 02de 5068     	    ldr r0,[R2,#4]
 394 02e0 8142     	    cmp r1,r0 
 395 02e2 F9D1     	    bne 2b 
 396              	    // found label 
 397 02e4 1046     	    mov r0,r2 
 398 02e6 01E0     	    b 9f
 399 02e8 80EA0000 	8:  eor r0,r0 
 400 02ec 0CBC     	9:  pop {r2,r3}
 401 02ee 7047     	    _RET 
 402              	
 403              	
 404              	/***************************************
 405              	    search_lineno 
 406              	    localize BASIC line from its number 
 407              	    input:
 408              	      r0   line# 
 409              	    output: 
 410              	      r0   adr where found || adr new to be inserted 
 411              	      r1   0 found || !0 not found  
 412              	    use:
 413              	      r0   scan address 
 414              	      r1   temp   
 415              	      r2   address end of text
 416              	      r3   target line#
 417              	****************************************/    
 418              	    _GBL_FUNC search_lineno
 419 02f0 0CB4     	    push {r2,r3} 
 420 02f2 0346     	    mov r3,r0 // target 
 421 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 422 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 423 02f8 9042     	1:  cmp r0,r2 
 424 02fa 05D0     	    beq  8f
 425 02fc 0188     	    ldrh r1,[r0]
ARM GAS  tinyBasic.s 			page 21


 426 02fe C91A     	    subs r1,r3 
 427 0300 04D5     	    bpl 9f 
 428 0302 8178     	    ldrb r1,[r0,#2]
 429 0304 0844     	    add r0,r1
 430 0306 F7E7     	    b 1b 
 431 0308 4FF0FF31 	8:  mov r1,#-1 
 432 030c 0CBC     	9:  pop {r2,r3}
 433 030e 7047     	    _RET 
 434              	
 435              	
 436              	/********************************************
 437              	    delete_line 
 438              	    delete BASIC line at addr 
 439              	    input:
 440              	      r0    address line to delete 
 441              	    output:
 442              	      r0    same as input 
 443              	    use: 
 444              	      r1    dest adr
 445              	      r2    bytes to move 
 446              	      T1    length line to delete 
 447              	      T2    txtend 
 448              	********************************************/
 449              	    _FUNC delete_line 
 450 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 451 0314 0146     	    mov r1,r0 // dest 
 452 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 453 031a 4044     	    add r0,T1  // src
 454 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 455 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 456 0324 00B5FFF7 	    _CALL cmove
 456      FEFF5DF8 
 456      04EB
 457 032e A9EB0809 	    sub T2,T1 // txtend-count 
 458 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 459 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 460 033a 7047     	    _RET 
 461              	
 462              	/******************************************
 463              	    create_gap 
 464              	    create a gap in text area to insert new line 
 465              	    input:
 466              	      r0    adr 
 467              	      r1    length 
 468              	    output:
 469              	      r0    adr 
 470              	    use:
 471              	      T1    length 
 472              	      T2    txtend 
 473              	************************************************/
 474              	    _FUNC create_gap 
 475 033c 2DE90503 	    push {r0,r2,T1,T2}
 476 0340 8846     	    mov T1,R1
 477 0342 0144     	    add r1,r0  // dest 
 478 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 479 0348 A9EB0002 	    sub r2,T2,r0 
 480 034c 00B5FFF7 	    _CALL cmove
ARM GAS  tinyBasic.s 			page 22


 480      FEFF5DF8 
 480      04EB
 481 0356 C144     	    add T2,T1 
 482 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 483 035c BDE80503 	    pop {r0,r2,T1,T2}
 484 0360 7047     	    _RET 
 485              	
 486              	/************************************************
 487              	    insert_line 
 488              	    insert BASIC line in text area 
 489              	    first search if line with same number exist 
 490              	    replace if so. 
 491              	    input:
 492              	      r0    *buffer to insert 
 493              	    output:
 494              	      none 
 495              	    use: 
 496              	      T1     *buffer
 497              	      T2     temp  
 498              	************************************************/ 
 499 0362 00BF     	    _FUNC insert_line 
 500 0364 2DE90203 	    push {r1,T1,T2}
 501 0368 8046     	    mov T1,r0 
 502 036a B8F80000 	    ldrh r0,[T1]
 503 036e 00B5FFF7 	    _CALL search_lineno 
 503      FEFF5DF8 
 503      04EB
 504 0378 49B9     	    cbnz  r1, 1f // line# doesn't exist
 505              	// already exist 
 506 037a 00B5FFF7 	    _CALL delete_line // delete old one 
 506      C8FF5DF8 
 506      04EB
 507 0384 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 508 0388 B9F1040F 	    cmp T2,#4 // empty line length==4  
 509 038c 0ED0     	    beq 9f
 510              	1: //insert new line 
 511 038e 98F80210 	    ldrb r1,[T1,#2]
 512 0392 00B5FFF7 	    _CALL create_gap 
 512      D2FF5DF8 
 512      04EB
 513 039c 0146     	    mov r1,r0
 514 039e 4046     	    mov r0,T1 
 515 03a0 8278     	    ldrb r2,[r0,#2]
 516 03a2 00B5FFF7 	    _CALL cmove 
 516      FEFF5DF8 
 516      04EB
 517 03ac BDE80203 	9:  pop {r1,T1,T2}
 518 03b0 7047     	    _RET 
 519              	
 520              	/*********************************
 521              	    compile 
 522              	    tokenize source line save it 
 523              	    in pas buffer.
 524              	    compiled line format: 
 525              	      line_no  2 bytes {0...32767}
 526              	      count    1 byte  
 527              	      tokens   variable length 
ARM GAS  tinyBasic.s 			page 23


 528              	  input:
 529              	     r0   *text buffer 
 530              	     r1   *text length   
 531              	  output:
 532              	    r0    0 stored | -1 immediate 
 533              	  use:
 534              	    r3    tib index   
 535              	    T1    tib
 536              	    T2    pad
 537              	***********************************/
 538 03b2 00BF     	    _FUNC compile
 539 03b4 8046     	    mov T1, r0  // source text buffer 
 540 03b6 6160     	    str r1,[UPP,#COUNT] // save line length 
 541 03b8 DFF8FC99 	    ldr T2,pad // tokens buffer
 542 03bc 83EA0303 	    eor r3,r3 // source index  
 543 03c0 206C     	    ldr r0,[UPP,#FLAGS]
 544 03c2 40F02000 	    orr r0,#FCOMP
 545 03c6 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 546 03c8 80EA0000 	    eor r0,r0     
 547 03cc 29F8020B 	    strh r0,[T2],#2   // line no 
 548 03d0 09F8010B 	    strb r0,[T2],#1 // length 
 549 03d4 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 550 03d6 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 551 03da 00B500F0 	    _CALL parse_int 
 551      64F95DF8 
 551      04EB
 552 03e4 0AD0     	    beq 2f 
 553              	// this is a line number     
 554 03e6 0129     	    cmp r1,#1 
 555 03e8 02D5     	    bpl 1f 
 556 03ea 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 557 03ee 43E3     	    b tb_error  
 558 03f0 B1F5803F 	1:  cmp r1,#65536
 559 03f4 F9D5     	    bpl 0b 
 560              	    // write line # to pad 
 561 03f6 29F8031C 	    strh r1,[T2,#-3]
 562 03fa 2360     	    str r3,[UPP,#IN_SAVED]
 563              	2:  // check for pad full 
 564 03fc C145     	    cmp T2,T1
 565 03fe 02DB     	    blt 3f 
 566 0400 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 567 0404 38E3     	    b tb_error 
 568 0406 00B500F0 	3:  _CALL comp_token 
 568      28F85DF8 
 568      04EB
 569 0410 0028     	    cmp r0,#TK_NONE 
 570 0412 01D0     	    beq 4f 
 571 0414 2360     	    str r3,[UPP,#IN_SAVED]
 572 0416 F1E7     	    b 2b 
 573              	4: // compilation completed 
 574 0418 DFF89C39 	    ldr r3,pad 
 575 041c A9EB0300 	    sub r0,T2,r3 // line length 
 576 0420 9870     	    strb r0,[r3,#2]
 577 0422 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 578 0424 1888     	    ldrh r0,[r3] // line number 
 579 0426 70B1     	    cbz r0,8f  
 580              	// insert line in text buffer 
ARM GAS  tinyBasic.s 			page 24


 581 0428 206C     	    ldr r0,[UPP,#FLAGS]
 582 042a 10F0080F 	    tst r0,#FSTOP
 583 042e 02D0     	    beq 7f 
 584 0430 4FF01000 	    mov r0,#ERR_CANT_PROG 
 585 0434 20E3     	    b tb_error 
 586 0436 1846     	7:  mov r0,r3 
 587 0438 00B5FFF7 	    _CALL insert_line 
 587      93FF5DF8 
 587      04EB
 588 0442 4040     	    eors r0,r0 
 589 0444 08E0     	    b 9f 
 590 0446 9B46     	8:  mov BPTR,r3 // *token_list 
 591 0448 4FF0030A 	    mov IN,#3
 592 044c 206C     	    ldr r0,[UPP,#FLAGS]
 593 044e A0F12000 	    sub r0,#FCOMP
 594 0452 2064     	    str r0,[UPP,#FLAGS]
 595 0454 5FF0FF30 	    movs r0,#-1 
 596 0458 7047     	9:  _RET 
 597              	
 598              	/*********************************************
 599              	    compile next token from source 
 600              	    input: 
 601              	      r3 		tib index  
 602              	      T1    tib adr
 603              	      T2    insert point in pad  
 604              	    output:
 605              	      r0     token attribute 
 606              	      r1 		token value
 607              	      r3     tib index updated    
 608              	      T2     updated 
 609              	      use:
 610              	**********************************************/
 611              	    .macro _case c, next  
 612              	    cmp r0,#\c 
 613              	    bne \next
 614              	    .endm 
 615              	
 616 045a 00BF     	    _FUNC comp_token 
 617 045c 40B4     	    push {r6}
 618 045e 18F80300 	    ldrb r0,[T1,r3]
 619 0462 0040     	    ands r0,r0 
 620 0464 79D0     	    beq store_r0  // reached end of text  
 621 0466 4FF02000 	    mov r0,#SPACE 
 622 046a 00B500F0 	    _CALL skip  // skip spaces 
 622      6CF95DF8 
 622      04EB
 623 0474 18F80300 	    ldrb r0,[T1,r3]
 624 0478 0040     	    ands r0,r0 
 625 047a 6ED0     	    beq store_r0  // reached end of text 
 626 047c 03F10103 	    add r3,#1
 627 0480 00B500F0 	    _CALL is_letter 
 627      95F95DF8 
 627      04EB
 628 048a 07D1     	    bne 1f
 629 048c A3F10103 	    sub r3,#1 
 630 0490 00B500F0 	    _CALL parse_label
 630      ABF85DF8 
ARM GAS  tinyBasic.s 			page 25


 630      04EB
 631 049a 6EE0     	    b token_exit 
 632 049c 00B500F0 	1:  _CALL is_special
 632      6FF85DF8 
 632      04EB
 633 04a6 DFF8CC6D 	    ldr r6,=token_ofs
 634 04aa D6E811F0 	    tbh [r6,r1] 
 635              	tok_idx0:     
 636              	//  not special char.  
 637 04ae 57E0     	    b try_number 
 638              	// single char token with no value 
 639              	single: 
 640 04b0 DFF8C46D 	    ldr r6,=tok_single
 641 04b4 705C     	    ldrb r0,[r6,r1] 
 642 04b6 50E0     	    b store_r0
 643              	lt:
 644 04b8 4FF03400 	    mov r0,#TK_LT
 645 04bc 18F80310 	    ldrb r1,[T1,r3]
 646 04c0 3E29     	    cmp r1,#'>' 
 647 04c2 06D0     	    beq 1f
 648 04c4 0AE0     	    b 2f 
 649              	gt:
 650 04c6 4FF03100 	    mov r0,#TK_GT 
 651 04ca 18F80310 	    ldrb r1,[T1,r3]
 652 04ce 3C29     	    cmp r1,#'<'
 653 04d0 04D1     	    bne 2f  
 654 04d2 03F10103 	1:  add r3,#1
 655 04d6 4FF03500 	    mov r0,#TK_NE  
 656 04da 3EE0     	    b store_r0
 657 04dc 3D29     	2:  cmp r1,#'=' 
 658 04de 3CD1     	    bne store_r0  
 659 04e0 03F10103 	    add r3,#1
 660 04e4 00F10200 	    add r0,#2
 661 04e8 37E0     	    b store_r0       
 662              	bkslash:
 663 04ea 18F80310 	    ldrb r1,[T1,r3]
 664 04ee 03F10103 	    add r3,#1
 665 04f2 4FF00300 	    mov r0,#TK_CHAR 
 666 04f6 09F8010B 	    strb r0,[T2],#1
 667 04fa 09F8011B 	    strb r1,[T2],#1
 668 04fe 3CE0     	    b token_exit 
 669              	prt_cmd: 
 670 0500 4FF00B00 	    mov r0,#TK_CMD 
 671 0504 4FF03401 	    mov r1,#PRT_IDX
 672 0508 09F8010B 	    strb r0,[T2],#1
 673 050c 09F8011B 	    strb r1,[T2],#1
 674 0510 33E0     	    b token_exit 
 675              	quote:
 676 0512 4FF00200 	    mov r0,#TK_QSTR 
 677 0516 09F8010B 	    strb r0,[T2],#1
 678 051a 00B500F0 	    _CALL parse_quote
 678      E0F85DF8 
 678      04EB
 679 0524 29E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 0526 4FF00B00 	    mov r0,#TK_CMD 
ARM GAS  tinyBasic.s 			page 26


 683 052a 4FF03901 	    mov r1,#REM_IDX 
 684 052e 09F8010B 	    strb r0,[T2],#1 
 685 0532 09F8011B 	    strb r1,[T2],#1
 686 0536 08EB0300 	    add r0,T1,r3 
 687 053a 4946     	    mov r1,T2 
 688 053c 00B5FFF7 	    _CALL strcpy 
 688      FEFF5DF8 
 688      04EB
 689 0546 00B5FFF7 	    _CALL strlen 
 689      FEFF5DF8 
 689      04EB
 690 0550 8144     	    add T2,r0
 691 0552 09F10109 	    add T2,#1
 692 0556 6368     	    ldr r3,[UPP,#COUNT]
 693 0558 0FE0     	    b token_exit
 694              	store_r0: 
 695 055a 09F8010B 	    strb r0,[T2],#1
 696 055e 0CE0     	    b token_exit 
 697              	try_number:
 698 0560 A3F10103 	    sub r3,#1
 699 0564 00B500F0 	    _CALL parse_int  
 699      9FF85DF8 
 699      04EB
 700 056e 00F07F82 	    beq syntax_error  
 701 0572 09F8010B 	    strb r0,[T2],#1 
 702 0576 49F8041B 	    str r1,[T2],#4
 703              	token_exit:
 704 057a 40BC     	    pop {r6}
 705 057c 7047     	    _RET 
 706              	
 707              	
 708              	/****************************
 709              	    is_special  
 710              	    check for non alphanum
 711              	    input:
 712              	      r0    character to scan 
 713              	    output:
 714              	      r0    character 
 715              	      r1    0 || index 
 716              	    use: 
 717              	      r1    scan index 
 718              	      r2    temp 
 719              	      r3    char_list 
 720              	*****************************/
 721 057e 00BF     	    _FUNC is_special 
 722 0580 0CB4     	    push {r2,r3}
 723 0582 4FF00101 	    mov r1,#1
 724 0586 DFF8F43C 	    ldr r3,=char_list 
 725 058a 5A5C     	1:  ldrb r2,[r3,r1]
 726 058c 22B1     	    cbz r2,8f 
 727 058e 8242     	    cmp r2,r0 
 728 0590 04D0     	    beq 9f 
 729 0592 01F10101 	    add r1,#1 
 730 0596 F8E7     	    b 1b
 731 0598 81EA0101 	8:  eor r1,r1     
 732 059c 0CBC     	9:  pop {r2,r3}
 733 059e 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 27


 734              	
 735              	char_list:
 736 05a0 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 736      28293A23 
 736      2D2B2A2F 
 736      253D3C3E 
 736      5C3F2722 
 737              	
 738              	tok_single:
 739 05b5 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 739      060701
 740 05bc 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 740      212232
 741              	  
 742 05c3 00       	  .p2align 2
 743              	token_ofs:
 744 05c4 0000     	  .hword  0 // not found
 745              	  // TK_COMMA...TK_EQUAL , 13 
 746 05c6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 746      01000100 
 747 05ce 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05d6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05de 0100     	  .hword  (single-tok_idx0)/2    
 750              	  // '<','>'
 751 05e0 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 752              	  // '\'
 753 05e4 1E00     	  .hword  (bkslash-tok_idx0)/2
 754              	  // '?' 
 755 05e6 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 756              	  // "'"  
 757 05e8 3C00     	  .hword  (tick-tok_idx0)/2 
 758              	  // '"' quote 
 759 05ea 3200     	  .hword (quote-tok_idx0)/2
 760              	
 761              	  .p2align 2
 762              	
 763              	/****************************
 764              	    parse_label 
 765              	    label form: [A..Z]+
 766              	    can be a keyword, a target
 767              	    or constant name. 
 768              	    input:
 769              	      *buffer 
 770              	    output:
 771              	      T2  *label 
 772              	      R3  updated
 773              	    use:
 774              	****************************/
 775              	    _FUNC parse_label
 776 05ec 24B4     	    push {r2,r5}
 777 05ee 4DF8049D 	    push {T2}
 778 05f2 82EA0202 	    eor r2,r2
 779 05f6 4FF00605 	    mov r5,#6 
 780 05fa 18F80300 	1:  ldrb r0,[T1,r3]
 781 05fe 00B500F0 	    _CALL is_letter 
ARM GAS  tinyBasic.s 			page 28


 781      D6F85DF8 
 781      04EB
 782 0608 09D1     	    bne 2f // not letter 
 783 060a 00B500F0 	    _CALL upper 
 783      A8F85DF8 
 783      04EB
 784 0614 09F8010B 	    strb r0,[T2],#1
 785 0618 03F10103 	    add r3,#1
 786 061c EDE7     	    b 1b 
 787 061e 80EA0000 	2:  eor r0,r0 
 788 0622 89F80000 	    strb r0,[T2]
 789              	// is this a variable ?
 790 0626 5DF8049B 	    pop {T2}
 791 062a 99F80100 	    ldrb r0,[T2,#1]
 792 062e 30B9     	    cbnz r0,3f // length >1 not variable 
 793 0630 99F80010 	    ldrb r1,[T2]
 794 0634 A1F14101 	    sub r1,#'A' 
 795 0638 4FF00400 	    mov r0,#TK_VAR
 796 063c 1CE0     	    b 8f 
 797              	3:  // try keyword 
 798 063e 4846     	    mov r0,T2 
 799 0640 DFF83C1C 	    ldr r1,=kword_dict  
 800 0644 00B500F0 	    _CALL search_dict 
 800      D5FA5DF8 
 800      04EB
 801 064e 30B1     	    cbz r0,4f
 802 0650 0F28     	    cmp r0,TK_INTGR 
 803 0652 11D1     	    bne 8f 
 804 0654 09F8010B 	    strb r0,[T2],#1
 805 0658 49F8041B 	    str r1,[T2],#4
 806 065c 10E0     	    b 9f 
 807              	4: // must be a label 
 808 065e 4846     	    mov r0,T2 
 809 0660 00B500F0 	    _CALL compress_label
 809      0FF85DF8 
 809      04EB
 810 066a 4FF04000 	    mov r0,#TK_LBL
 811 066e 09F8010B 	    strb r0,[T2],#1
 812 0672 49F8041B 	    str r1,[T2],#4
 813 0676 03E0     	    b 9f 
 814 0678 09F8010B 	8:  strb r0,[T2],#1
 815 067c 09F8011B 	    strb r1,[T2],#1          
 816 0680 24BC     	9:  pop {r2,r5}
 817 0682 7047     	    _RET 
 818              	
 819              	/********************************
 820              	    compress_label 
 821              	    compress label in integer 
 822              	    maximum 6 character, 
 823              	    ignore extras characters 
 824              	    input:
 825              	      r0  *label 
 826              	    output:
 827              	      r1   compressed label 
 828              	********************************/
 829              	    _FUNC compress_label
 830 0684 0CB4     	    push {r2,r3}
ARM GAS  tinyBasic.s 			page 29


 831 0686 82EA0202 	    eor r2,r2 // compress value
 832 068a 4FF00603 	    mov r3,#6 // max characters 
 833 068e 10F8011B 	1:  ldrb r1,[r0],#1 
 834 0692 31B1     	    cbz r1,2f 
 835 0694 A1F14001 	    sub r1,#'@'
 836 0698 4FEA4212 	    lsl r2,#5
 837 069c 0A44     	    add r2,r1
 838 069e 013B     	    subs r3,#1 
 839 06a0 F5D1     	    bne 1b 
 840 06a2 1146     	2:  mov r1,r2     
 841 06a4 0CBC     	    pop {r2,r3}
 842 06a6 7047     	    _RET 
 843              	
 844              	
 845              	/****************************
 846              	    parse_int 
 847              	    parse an integer from text
 848              	    if not valid integer 
 849              	    r1 return *buffer else 
 850              	    *buffer is incremented after integer 
 851              	  input:
 852              	    r0   *buffer 
 853              	  output:
 854              	    r0   TK_INTGR|TK_NONE
 855              	    r1   int|0   
 856              	  use:
 857              	    r3   tib index updated     
 858              	*****************************/
 859              	    _FUNC parse_int 
 860 06a8 4FF00A01 	    mov r1,#10 // default base 
 861 06ac 18F80300 	    ldrb r0,[T1,r3]
 862 06b0 2428     	    cmp r0,'$' 
 863 06b2 02D1     	    bne 2f 
 864 06b4 4FF01001 	    mov r1,#16 // hexadecimal number 
 865 06b8 03E0     	    b 3f  
 866 06ba 2628     	2:  cmp r0,#'&' 
 867 06bc 03D1     	    bne 4f
 868 06be 4FF00201 	    mov r1,#2 //binary number  
 869 06c2 03F10103 	3:  add r3,#1
 870 06c6 03EB0800 	4:  add r0,r3,T1 
 871 06ca 00B5FFF7 	    _CALL atoi 
 871      FEFF5DF8 
 871      04EB
 872 06d4 10B1     	    cbz r0,9f
 873 06d6 0344     	    add r3,r0
 874 06d8 4FF00F00 	    mov r0,#TK_INTGR
 875 06dc 0040     	9:  ands r0,r0   
 876 06de 7047     	    _RET 
 877              	
 878              	/*********************************************
 879              	    parse_quote 
 880              	    parse quoted string 
 881              	    input: 
 882              	      r3 		tib index  
 883              	      T1    tib adr
 884              	      T2    insert point in pad  
 885              	    output:
ARM GAS  tinyBasic.s 			page 30


 886              	      r0     token attribute 
 887              	      r1 		*str 
 888              	      r3     tib index updated    
 889              	      T2     updated 
 890              	      use:
 891              	*********************************************/
 892              	    _FUNC parse_quote
 893 06e0 4DF8049D 	    push {T2} 
 894 06e4 18F80300 	1:  ldrb r0,[T1,r3]
 895 06e8 03F10103 	    add r3,#1 
 896 06ec 2228     	    cmp r0,#'"'
 897 06ee 09D0     	    beq 9f 
 898 06f0 5C28     	    cmp r0,#'\\'
 899 06f2 04D1     	    bne 2f 
 900 06f4 00B500F0 	    _CALL get_escaped_char 
 900      0DF85DF8 
 900      04EB
 901 06fe 09F8010B 	2:  strb r0,[T2],#1
 902 0702 EFE7     	    b 1b 
 903 0704 80EA0000 	9:  eor  r0,r0
 904 0708 09F8010B 	    strb r0,[T2],#1
 905 070c 4FF00200 	    mov r0,#TK_QSTR
 906 0710 02BC     	    pop {r1}
 907 0712 7047     	    _RET 
 908              	
 909              	/**********************************************
 910              	    get_escaped_char 
 911              	    convert "\c" in quoted string 
 912              	    input:
 913              	      r0 
 914              	      r3   index 
 915              	      T1   tib 
 916              	    output:
 917              	      r0   replacement char
 918              	      r3   updated 
 919              	    use:
 920              	      r1   *table 
 921              	      r2   temp 
 922              	**********************************************/
 923              	    _FUNC get_escaped_char 
 924 0714 06B4     	    push {r1,r2}
 925 0716 18F80300 	    ldrb r0,[T1,r3]
 926 071a 03F10103 	    add r3,#1
 927 071e 2228     	    cmp r0,#'"' 
 928 0720 0BD0     	    beq 9f 
 929 0722 DFF8601B 	1:  ldr r1,=escaped 
 930 0726 11F8012B 	2:  ldrb r2,[r1],#1
 931 072a 12B1     	    cbz r2,6f 
 932 072c 8242     	    cmp r2,r0 
 933 072e 02D0     	    beq 7f 
 934 0730 F9E7     	    b 2b
 935 0732 A0F10702 	6:  sub r2,r0,#7     
 936 0736 02F10700 	7:  add r0,r2,#7
 937 073a 06BC     	9:  pop {r1,r2}   
 938 073c 7047     	    _RET
 939              	
 940 073e 6162746E 	escaped: .asciz "abtnvfr"
ARM GAS  tinyBasic.s 			page 31


 940      76667200 
 941              	
 942              	/*********************************************
 943              	   skip character in TIB 
 944              	   input:
 945              	      r0    character to skip 
 946              	      r3    tib index 
 947              	      T1    tib adr
 948              	    output: 
 949              	      r3    updated
 950              	    use:
 951              	      r1     
 952              	**********************************************/   
 953 0746 00BF     	    _FUNC skip
 954 0748 02B4     	    push {r1} 
 955 074a 18F80310 	1:  ldrb r1,[T1,r3]
 956 074e 8142     	    cmp r1,r0
 957 0750 02D1     	    bne 2f
 958 0752 03F10103 	    add r3,#1 
 959 0756 F8E7     	    b 1b 
 960 0758 2360     	2:  str r3,[UPP,#IN_SAVED]
 961 075a 02BC     	    pop {r1}
 962 075c 7047     	    _RET
 963              	
 964              	/********************************************
 965              	    upper
 966              	    convert character in upper case 
 967              	    input: 
 968              	      r0   character 
 969              	    output:
 970              	      r0   upper case character 
 971              	*********************************************/
 972 075e 00BF     	    _FUNC upper 
 973 0760 6128     	    cmp r0,#'a' 
 974 0762 03DB     	    blt 9f 
 975 0764 7A28     	    cmp r0,#'z' 
 976 0766 01DC     	    bgt 9f 
 977 0768 00F05F00 	    and r0,#0x5f 
 978 076c 7047     	9:  _RET 
 979              	
 980              	/***************************************
 981              	   is_digit 
 982              	   check if char is decimal digit.
 983              	   convert to decimal digit.
 984              	   input:
 985              	      r0    char 
 986              	   output:
 987              	      r0        if Z then converted digit else not changed
 988              	      Z flag    1 true | 0 false  
 989              	***************************************/
 990 076e 00BF     	    _GBL_FUNC is_digit 
 991 0770 02B4     	    push {r1} 
 992 0772 4FF0FF31 	    mov r1,#-1   
 993 0776 3028     	    cmp r0,#'0' 
 994 0778 05DB     	    blt 9f
 995 077a 3A28     	    cmp r0,'9'+1
 996 077c 03D5     	    bpl 9f 
ARM GAS  tinyBasic.s 			page 32


 997 077e 81EA0101 	    eor r1,r1 
 998 0782 A0F13000 	    sub r0,#'0'  
 999              	9:   
 1000 0786 0940     	    ands r1,r1
 1001 0788 02BC     	    pop {r1} 
 1002 078a 7047     	    _RET 
 1003              	
 1004              	/***************************************
 1005              	    is_hex 
 1006              	    check for hexadecimal digit 
 1007              	    convert to hex digit.
 1008              	    input:
 1009              	      r0    
 1010              	    output:
 1011              	      r0         if Z then converted digit 
 1012              	      Z  flag    1 true | 0 false         
 1013              	***************************************/
 1014              	    _FUNC is_hex 
 1015 078c 02B4     	    push {r1}
 1016 078e 80EA0000 	    eor r0,r0 
 1017 0792 4128     	    cmp r0,#'A' 
 1018 0794 01D4     	    bmi 1f 
 1019 0796 A0F10700 	    sub r0,#7 
 1020 079a A0F13000 	1:  sub r0,#'0'
 1021 079e 01D4     	    bmi 2f 
 1022 07a0 1028     	    cmp r0,#16
 1023 07a2 01D4     	    bmi 9f 
 1024 07a4 6FEA0101 	2:  mvn r1,r1  
 1025 07a8 0940     	9:  ands r1,r1 
 1026 07aa 02BC     	    pop {r1}
 1027 07ac 7047     	    _RET 
 1028              	
 1029              	/***************************************
 1030              	    is_letter 
 1031              	    check if character is {a..z,A..Z} 
 1032              	  input:
 1033              	    r0   character 
 1034              	  output: 
 1035              	    r0       same character 
 1036              	    Z flag   1 true | 0 false  
 1037              	****************************************/
 1038 07ae 00BF     	    _FUNC is_letter
 1039 07b0 02B4     	    push {r1} 
 1040 07b2 81EA0101 	    eor r1,r1 
 1041 07b6 4128     	    cmp r0,#'A' 
 1042 07b8 05D4     	    bmi 8f 
 1043 07ba 5B28     	    cmp r0,#'Z'+1 
 1044 07bc 05D4     	    bmi 9f
 1045 07be 6128     	    cmp r0,#'a' 
 1046 07c0 01D4     	    bmi 8f 
 1047 07c2 7B28     	    cmp r0,#'z'+1
 1048 07c4 01D4     	    bmi 9f  
 1049 07c6 6FEA0101 	8:  mvn r1,r1  
 1050 07ca 0940     	9:  ands r1,r1 
 1051 07cc 02BC     	    pop {r1}
 1052 07ce 7047     	    _RET 
 1053              	
ARM GAS  tinyBasic.s 			page 33


 1054              	
 1055              	/******************************************
 1056              	    atoi 
 1057              	    convert ascii to integer 
 1058              	    input:
 1059              	      r0   *buffer 
 1060              	      r1   base 
 1061              	    output:
 1062              	      r0   0 no integer found 
 1063              	      r1   integer
 1064              	    use:
 1065              	      r2   base  
 1066              	      T1   *buffer 
 1067              	      T2   digit count  
 1068              	******************************************/
 1069              	    _GBL_FUNC atoi 
 1070 07d0 2DE90403 	    push {r2,T1,T2}
 1071 07d4 8046     	    mov T1,r0  // *buffer 
 1072 07d6 0A46     	    mov r2,r1  // base  
 1073 07d8 81EA0101 	    eor r1,r1  // converted integer 
 1074 07dc 89EA0909 	    eor T2,T2  // digit count 
 1075 07e0 18F8010B 	1:  ldrb r0,[T1],#1
 1076 07e4 00B5FFF7 	    _CALL upper 
 1076      BBFF5DF8 
 1076      04EB
 1077 07ee 3028     	    cmp r0,#'0'
 1078 07f0 0FD4     	    bmi 8f
 1079 07f2 3A28     	    cmp r0,#'9'+1 
 1080 07f4 03D4     	    bmi 2f 
 1081 07f6 4128     	    cmp r0,#'A'
 1082 07f8 0BD4     	    bmi 8f 
 1083 07fa A0F10700 	    sub r0,#7 
 1084 07fe A0F13000 	2:  sub r0,#'0' 
 1085 0802 9042     	    cmp r0,r2
 1086 0804 05D5     	    bpl 8f  
 1087 0806 02FB01F1 	    mul r1,r2 
 1088 080a 0144     	    add r1,r0
 1089 080c 09F10109 	    add T2,#1
 1090 0810 E6E7     	    b 1b 
 1091 0812 4846     	8:  mov r0,T2  
 1092 0814 BDE80403 	    pop {r2,T1,T2}
 1093 0818 7047     	    _RET 
 1094              	
 1095              	
 1096              	
 1097              	/*******************
 1098              	    DECOMPILER 
 1099              	*******************/
 1100              	
 1101              	/********************************************
 1102              	    cmd_name 
 1103              	    search bytecode in dictionary and 
 1104              	    return its name 
 1105              	  input:
 1106              	    r0    keyword bytecode 
 1107              	  ouput:
 1108              	    r0    name string 
ARM GAS  tinyBasic.s 			page 34


 1109              	  use:
 1110              	    T1    link 
 1111              	    T2    tmp 
 1112              	*********************************************/
 1113 081a 00BF     	    _FUNC cmd_name 
 1114 081c 2DE90003 	    push {T1,T2}
 1115 0820 DFF85C8A 	    ldr T1,=kword_dict 
 1116 0824 58F8089C 	1:  ldr T2,[T1,#-8]
 1117 0828 8145     	    cmp T2,r0 
 1118 082a 04D0     	    beq 2f 
 1119 082c 58F80C8C 	    ldr T1,[T1,#-12]
 1120 0830 B8F1000F 	    cmp T1,#0
 1121 0834 F6D1     	    bne 1b  
 1122 0836 4046     	2:  mov r0,T1 
 1123 0838 BDE80003 	    pop {T1,T2}
 1124 083c 7047     	    _RET
 1125              	
 1126              	/*****************************
 1127              	  decompile_line 
 1128              	  detokenize BASIC line 
 1129              	  input:
 1130              	    r0  *token list 
 1131              	    r1  *output buffer 
 1132              	  output:
 1133              	    r0  *output buffer (.asciz) 
 1134              	  use:
 1135              	    T1  *output buffer
 1136              	    BPTR  *token list
 1137              	    IN  offset in token list  
 1138              	******************************/
 1139 083e 00BF     	    _GBL_FUNC decompile_line
 1140 0840 2DE90E01 	    push {r1,r2,r3,T1} 
 1141 0844 8346     	    mov BPTR,r0 
 1142 0846 4FF0000A 	    mov IN,#0
 1143 084a 8846     	    mov T1,r1 
 1144 084c 3BF80A00 	    ldrh r0,[BPTR,IN]
 1145 0850 0AF1020A 	    add IN,#2 
 1146 0854 4FF00A01 	    mov r1,#10 
 1147 0858 00B5FFF7 	    _CALL itoa
 1147      FEFF5DF8 
 1147      04EB
 1148 0862 4146     	    mov r1,T1
 1149 0864 00B5FFF7 	    _CALL strcpy
 1149      FEFF5DF8 
 1149      04EB
 1150 086e 4046     	    mov r0,T1 
 1151 0870 00B5FFF7 	    _CALL strlen
 1151      FEFF5DF8 
 1151      04EB
 1152 087a 8044     	    add T1,r0 
 1153 087c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1154 0880 0AF1010A 	    add IN,#1 
 1155 0884 6060     	    str r0,[UPP,#COUNT]
 1156              	decomp_loop:
 1157 0886 00B500F0 	    _CALL next_token
 1157      ECFA5DF8 
 1157      04EB
ARM GAS  tinyBasic.s 			page 35


 1158 0890 0028     	    cmp r0,#TK_NONE 
 1159 0892 00F0B880 	    beq 9f  
 1160 0896 0F28     	    cmp r0,#TK_INTGR 
 1161 0898 15D1     	    bne 1f 
 1162 089a 0846     	    mov r0,r1 
 1163 089c A169     	    ldr r1,[UPP,#BASE]
 1164 089e 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 08a8 01B4     	    push {r0}
 1166 08aa 4146     	    mov r1,T1 
 1167 08ac 00B5FFF7 	    _CALL strcpy
 1167      FEFF5DF8 
 1167      04EB
 1168 08b6 01BC     	    pop {r0} 
 1169 08b8 00B5FFF7 	    _CALL strlen
 1169      FEFF5DF8 
 1169      04EB
 1170 08c2 8044     	    add T1,r0 
 1171 08c4 DFE7     	    b decomp_loop 
 1172 08c6 4028     	1:  cmp r0,#TK_LBL
 1173 08c8 13D1     	    bne 1f
 1174 08ca 4FF01902 	    mov r2,#25
 1175 08ce 4FF6FF73 	    mov r3,#0xffff 
 1176 08d2 C3F6FF73 	    movt r3,#0x3fff 
 1177 08d6 01EA0301 	0:  and r1,r3 
 1178 08da 4FEA5313 	    lsr r3,#5 
 1179 08de 31FA02F0 	    lsrs r0,r1,r2 
 1180 08e2 03D0     	    beq 2f
 1181 08e4 00F14000 	    add r0,#'@'
 1182 08e8 08F8010B 	    strb r0,[T1],#1
 1183 08ec 053A     	2:  subs r2,#5 
 1184 08ee F2DA     	    bge 0b 
 1185 08f0 C9E7     	    b decomp_loop
 1186 08f2 0428     	1:  cmp r0,#TK_VAR 
 1187 08f4 04D1     	    bne 2f 
 1188 08f6 01F14100 	    add r0,r1,'A'
 1189 08fa 08F8010B 	    strb r0,[T1],#1 
 1190 08fe C2E7     	    b decomp_loop 
 1191 0900 0328     	2:  cmp r0,#TK_CHAR 
 1192 0902 0AD1     	    bne 3f 
 1193 0904 4FF05C00 	    mov r0,#'\\'
 1194 0908 08F8010B 	    strb r0,[T1],#1
 1195 090c 08F8011B 	    strb r1,[T1],#1
 1196 0910 4FF02000 	    mov r0,#SPACE 
 1197 0914 08F8010B 	    strb r0,[T1],#1
 1198 0918 B5E7     	    b decomp_loop 
 1199 091a 0228     	3:  cmp r0,#TK_QSTR 
 1200 091c 17D1     	    bne 4f 
 1201 091e 4FF02200 	    mov r0,#'"'
 1202 0922 08F8010B 	    strb r0,[T1],#1 
 1203 0926 0846     	    mov r0,r1
 1204 0928 02B4     	    push {r1}
 1205 092a 4146     	    mov r1,T1  
 1206 092c 00B5FFF7 	    _CALL strcpy
 1206      FEFF5DF8 
 1206      04EB
ARM GAS  tinyBasic.s 			page 36


 1207 0936 01BC     	    pop {r0}
 1208 0938 00B5FFF7 	    _CALL strlen 
 1208      FEFF5DF8 
 1208      04EB
 1209 0942 8044     	    add T1,r0 
 1210 0944 4FF02200 	    mov r0,#'"'
 1211 0948 08F8010B 	    strb r0,[T1],#1 
 1212 094c 9BE7     	    b decomp_loop
 1213 094e 0B28     	4:  cmp r0,#TK_CMD
 1214 0950 41D4     	    bmi 5f 
 1215 0952 0F28     	    cmp r0,#TK_INTGR 
 1216 0954 3FD5     	    bpl 5f
 1217 0956 4FEA0043 	    lsl r3,r0,#16  // TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST
 1218 095a 4FF02000 	    mov r0,#SPACE 
 1219 095e 08F8010B 	    strb r0,[T1],#1  
 1220 0962 0846     	    mov r0,r1
 1221 0964 43EA0103 	    orr r3,r1 // _IDX  
 1222 0968 00B5FFF7 	    _CALL cmd_name
 1222      57FF5DF8 
 1222      04EB
 1223 0972 01B4     	2:  push {r0}
 1224 0974 4146     	    mov r1,T1 
 1225 0976 00B5FFF7 	    _CALL strcpy 
 1225      FEFF5DF8 
 1225      04EB
 1226 0980 01BC     	    pop {r0}
 1227 0982 00B5FFF7 	    _CALL strlen 
 1227      FEFF5DF8 
 1227      04EB
 1228 098c 8044     	    add T1,r0
 1229 098e 4FEA1340 	    lsr r0,r3,#16
 1230 0992 0C28     	    cmp r0,#TK_IFUNC
 1231 0994 03D0     	    beq 2f
 1232 0996 4FF02000 	    mov r0,#SPACE 
 1233 099a 08F8010B 	    strb r0,[T1],#1 
 1234 099e 03F0FF00 	2:  and r0,r3,#0xFF 
 1235 09a2 3928     	    cmp r0,#REM_IDX
 1236 09a4 7FF46FAF 	    bne decomp_loop 
 1237 09a8 0BEB0A00 	    add r0,BPTR,IN
 1238 09ac 4146     	    mov r1,T1   
 1239 09ae 00B5FFF7 	    _CALL strcpy
 1239      FEFF5DF8 
 1239      04EB
 1240 09b8 4046     	    mov r0,T1 
 1241 09ba 00B5FFF7 	    _CALL strlen
 1241      FEFF5DF8 
 1241      04EB
 1242 09c4 8044     	    add T1,r0
 1243 09c6 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1244 09ca 1CE0     	    b 9f 
 1245 09cc 4FF02000 	3:  mov r0,#SPACE 
 1246 09d0 08F8010B 	    strb r0,[T1],#1 
 1247 09d4 57E7     	    b decomp_loop
 1248 09d6 01B4     	5:  push {r0}
 1249 09d8 DFF8AC18 	    ldr r1,=single_char 
 1250 09dc 085C     	    ldrb r0,[r1,r0]
 1251 09de 02BC     	    pop {r1}
ARM GAS  tinyBasic.s 			page 37


 1252 09e0 10B1     	    cbz r0,6f 
 1253 09e2 08F8010B 	    strb r0,[T1],#1 
 1254 09e6 4EE7     	    b decomp_loop
 1255 09e8 3329     	6:  cmp r1,#TK_GE 
 1256 09ea 02D1     	    bne 7f 
 1257 09ec DFF89C08 	    ldr r0,=ge_str
 1258 09f0 D5E7     	    b 2b 
 1259 09f2 3629     	7:  cmp r1,#TK_LE 
 1260 09f4 02D1     	    bne 8f
 1261 09f6 DFF89808 	    ldr r0,=le_str
 1262 09fa D0E7     	    b 2b
 1263 09fc 3529     	8:  cmp r1,#TK_NE 
 1264 09fe 02D1     	    bne 9f 
 1265 0a00 DFF89008 	    ldr r0,=ne_str 
 1266 0a04 CBE7     	    b 2b 
 1267 0a06 80EA0000 	9:  eor r0,r0 
 1268 0a0a 88F80000 	    strb r0,[T1]
 1269 0a0e BDE80E01 	    pop {r1,r2,r3,T1}
 1270 0a12 0846     	    mov r0,r1 
 1271 0a14 7047     	    _RET 
 1272              	
 1273 0a16 3E3D00   	ge_str: .asciz ">="
 1274 0a19 3C3D00   	le_str: .asciz "<="
 1275 0a1c 3C3E00   	ne_str: .asciz "<>"
 1276              	
 1277              	single_char:
 1278 0a1f 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1278      00402829 
 1278      2C3B23
 1279 0a2a 00000000 	  .space 5
 1279      00
 1280 0a2f 2B2D     	  .byte '+', '-'
 1281 0a31 00000000 	  .space 14
 1281      00000000 
 1281      00000000 
 1281      0000
 1282 0a3f 2A2F25   	  .byte '*', '/', '%'
 1283 0a42 00000000 	  .space 14
 1283      00000000 
 1283      00000000 
 1283      0000
 1284 0a50 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1284      0000
 1285              	
 1286              	
 1287              	/**********************************
 1288              	  modulo 
 1289              	  compute r0 mod r1
 1290              	  input:
 1291              	    r0   dividend
 1292              	    r1   divisor 
 1293              	  output:
 1294              	    r0   TK_INTGR 
 1295              	    r1   r0 mod r1 
 1296              	*********************************/
 1297 0a56 00BF     	    _GBL_FUNC modulo 
 1298 0a58 01B4     	    push {r0}
ARM GAS  tinyBasic.s 			page 38


 1299 0a5a B0FBF1F0 	    udiv r0,r1 
 1300 0a5e 01FB00F0 	    mul  r0,r1 
 1301 0a62 02BC     	    pop {r1}
 1302 0a64 A1EB0001 	    sub r1,r0
 1303 0a68 4FF00F00 	    mov r0,#TK_INTGR
 1304 0a6c 7047     	    _RET 
 1305              	
 1306              	/**********************************
 1307              	      BASIC commands 
 1308              	**********************************/
 1309              	
 1310              	/*********************************
 1311              	    syntax_error 
 1312              	    display syntax error message and 
 1313              	    abort program 
 1314              	  input:
 1315              	    none  
 1316              	  output: 
 1317              	    none 
 1318              	  use:
 1319              	*********************************/
 1320 0a6e 00BF     	    _FUNC syntax_error 
 1321 0a70 4FF00200 	    mov r0,#ERR_SYNTAX
 1322 0a74 00E0     	    b tb_error 
 1323              	
 1324              	/*********************************
 1325              	    tb_error 
 1326              	    display BASIC error and 
 1327              	    abort program. 
 1328              	  input:
 1329              	    r0    error code   
 1330              	  output: 
 1331              	    none 
 1332              	  use:
 1333              	    r1    temp 
 1334              	*********************************/
 1335 0a76 00BF     	    _FUNC tb_error 
 1336 0a78 216C     	    ldr r1,[UPP,#FLAGS]
 1337 0a7a 11F0200F 	    tst r1,#FCOMP
 1338 0a7e 43D1     	    bne compile_error
 1339              	rt_error:
 1340 0a80 5246     	    mov r2,IN 
 1341 0a82 01B4     	    push {r0}
 1342 0a84 DFF81008 	    ldr r0,=rt_error_msg 
 1343 0a88 00B5FFF7 	    _CALL uart_puts 
 1343      FEFF5DF8 
 1343      04EB
 1344 0a92 01BC     	    pop {r0}
 1345 0a94 DFF80418 	    ldr r1,=err_msg  
 1346 0a98 4FEA8000 	    lsl r0,#2 
 1347 0a9c 0858     	    ldr r0,[r1,r0]
 1348 0a9e 00B5FFF7 	    _CALL uart_puts
 1348      FEFF5DF8 
 1348      04EB
 1349              	// decompile and print faulty line      
 1350 0aa8 5846     	    mov r0,BPTR
 1351 0aaa 5246     	    mov r2,IN  
ARM GAS  tinyBasic.s 			page 39


 1352 0aac DFF80813 	    ldr r1,pad 
 1353 0ab0 00B5FFF7 	    _CALL decompile_line
 1353      FEFF5DF8 
 1353      04EB
 1354 0aba 00B5FFF7 	    _CALL uart_puts 
 1354      FEFF5DF8 
 1354      04EB
 1355 0ac4 00B5FFF7 	    _CALL cr 
 1355      FEFF5DF8 
 1355      04EB
 1356              	// print error offset on line      
 1357 0ace DFF8D007 	    ldr r0,=token_at_msg 
 1358 0ad2 00B5FFF7 	    _CALL uart_puts 
 1358      FEFF5DF8 
 1358      04EB
 1359 0adc 1046     	    mov r0,r2 
 1360 0ade 4FF01001 	    mov r1,#16 
 1361 0ae2 00B5FFF7 	    _CALL print_int
 1361      FEFF5DF8 
 1361      04EB
 1362 0aec 00B5FFF7 	    _CALL cr
 1362      FEFF5DF8 
 1362      04EB
 1363              	// dump tokenize line 
 1364 0af6 5846     	    mov r0,BPTR
 1365 0af8 8278     	    ldrb r2,[r0,#2]
 1366 0afa 00B500F0 	    _CALL dump01 
 1366      E1F95DF8 
 1366      04EB
 1367 0b04 FFF7FEBF 	    b warm_start 
 1368              	compile_error:
 1369 0b08 DFF89017 	    ldr r1,=err_msg 
 1370 0b0c 4FEA8000 	    lsl r0,#2 
 1371 0b10 0858     	    ldr r0,[r1,r0]
 1372 0b12 00B5FFF7 	    _CALL uart_puts
 1372      FEFF5DF8 
 1372      04EB
 1373 0b1c A068     	    ldr r0,[UPP,#BASICPTR]
 1374 0b1e 00B5FFF7 	    _CALL uart_puts
 1374      FEFF5DF8 
 1374      04EB
 1375 0b28 00B5FFF7 	    _CALL cr
 1375      FEFF5DF8 
 1375      04EB
 1376 0b32 2068     	    ldr r0,[UPP,#IN_SAVED]
 1377 0b34 00B5FFF7 	    _CALL spaces 
 1377      FEFF5DF8 
 1377      04EB
 1378 0b3e 4FF05E00 	    mov r0,#'^' 
 1379 0b42 00B5FFF7 	    _CALL uart_putc
 1379      FEFF5DF8 
 1379      04EB
 1380 0b4c 00B5FFF7 	    _CALL cr
 1380      FEFF5DF8 
 1380      04EB
 1381 0b56 FFF7FEBF 	    b  warm_start  
 1382              	    
ARM GAS  tinyBasic.s 			page 40


 1383 0b5a 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1383      74696D65 
 1383      20657272 
 1383      6F723A20 
 1383      00
 1384 0b6b 746F6B65 	token_at_msg: .asciz "token offset: "
 1384      6E206F66 
 1384      66736574 
 1384      3A2000
 1385              	
 1386              	
 1387              	err_msg:
 1388 0b7a 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1388      00000000 
 1388      0D000000 
 1388      1B000000 
 1388      34000000 
 1389 0b92 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1389      6F000000 
 1389      89000000 
 1389      9A000000 
 1389      AB000000 
 1390 0ba6 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1390      EA000000 
 1390      FA000000 
 1390      0E010000 
 1390      21010000 
 1391 0bba 2E010000 	   .word err_cant_prog 
 1392              	
 1393              	    .section .rodata.tb_error 
 1394              	
 1395 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1395      72792066 
 1395      756C6C0A 
 1395      00
 1396 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1396      61782065 
 1396      72726F72 
 1396      0A00
 1397 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1397      206F7065 
 1397      72617469 
 1397      6F6E206F 
 1397      76657266 
 1398 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1398      73696F6E 
 1398      20627920 
 1398      300A00
 1399 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1399      6C696420 
 1399      6C696E65 
 1399      206E756D 
 1399      6265722E 
 1400 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1400      74696D65 
 1400      206F6E6C 
 1400      79207573 
ARM GAS  tinyBasic.s 			page 41


 1400      6167652E 
 1401 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1401      616E6420 
 1401      6C696E65 
 1401      206F6E6C 
 1401      79207573 
 1402 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1402      69636174 
 1402      65206E61 
 1402      6D652E0A 
 1402      00
 1403 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1403      206E6F74 
 1403      20666F75 
 1403      6E642E0A 
 1403      00
 1404 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1404      76616C75 
 1404      652E0A00 
 1405 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1405      20696E20 
 1405      65787465 
 1405      6E646564 
 1405      206D656D 
 1406 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1406      61746120 
 1406      666F756E 
 1406      642E0A00 
 1407 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1407      726F6772 
 1407      616D2069 
 1407      6E205241 
 1407      4D210A00 
 1408 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1408      20737973 
 1408      74656D20 
 1408      66756C6C 
 1408      2E0A00
 1409 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1409      65722066 
 1409      756C6C0A 
 1409      00
 1410 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1410      74206D6F 
 1410      64696679 
 1410      2070726F 
 1410      6772616D 
 1411              	
 1412 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1412      2074696D 
 1412      65206572 
 1412      726F722C 
 1412      2000
 1413 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1413      70696C65 
 1413      20657272 
 1413      6F722C20 
ARM GAS  tinyBasic.s 			page 42


 1413      00
 1414 018d 6C617374 	tk_id: .asciz "last token id: "
 1414      20746F6B 
 1414      656E2069 
 1414      643A2000 
 1415              	
 1416              	
 1417              	    .section  .text , "ax", %progbits 
 1418              	
 1419              	/*********************************
 1420              	   skip_line 
 1421              	   data and remark line are skipped
 1422              	   by the interpreter 
 1423              	***********************************/
 1424 0bbe 00BF     	    _FUNC skip_line 
 1425 0bc0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1426 0bc4 7047     	    _RET 
 1427              	
 1428              	
 1429              	/*********************************
 1430              	   BASIC: BTGL adr, mask   
 1431              	   toggle bits [adr]=[adr]^mask  
 1432              	   input:
 1433              	     r0    adr 
 1434              	     r1    mask 
 1435              	    output;
 1436              	      none 
 1437              	    use:
 1438              	      T1   temp
 1439              	      T2   temp  
 1440              	*******************************/     
 1441 0bc6 00BF     	    _FUNC BTGL 
 1442              	
 1443 0bc8 7047     	    _RET 
 1444              	
 1445              	/***************************************
 1446              	   kword_cmp
 1447              	   compare keyword to dict entry
 1448              	  input:
 1449              	    r0  keyword 
 1450              	    r1  dict entry 
 1451              	    r2  character count 
 1452              	  output:
 1453              	    r0  0 not same | -1 same 
 1454              	  use:
 1455              	    r6   result  
 1456              	    T1   char 1
 1457              	    T2   char 2
 1458              	**************************************/   
 1459 0bca 00BF     	    _FUNC kword_cmp 
 1460 0bcc 2DE94003 	    push {r6,T1,T2}
 1461 0bd0 4FF0FF36 	    mov r6,#-1 
 1462 0bd4 4AB1     	1:  cbz r2,9f       
 1463 0bd6 10F8018B 	    ldrb T1,[r0],#1
 1464 0bda 11F8019B 	    ldrb T2,[r1],#1
 1465 0bde A2F10102 	    sub r2,#1
 1466 0be2 C845     	    cmp T1,T2
ARM GAS  tinyBasic.s 			page 43


 1467 0be4 F6D0     	    beq 1b 
 1468 0be6 86EA0606 	    eor r6,r6  
 1469 0bea 3046     	9:  mov r0,r6
 1470 0bec BDE84003 	    pop {r6,T1,T2}
 1471 0bf0 7047     	    _RET 
 1472              	
 1473              	/***********************************************
 1474              	    search_dict 
 1475              	    search keyword in dictionary
 1476              	   input:
 1477              	  	 r0   keyword 
 1478              	     r1		dictionary first name field address  
 1479              	   output:
 1480              	     r0 		token attribute 
 1481              	     r1		  cmd_index if r0!=TK_NONE  
 1482              	   use:
 1483              	     r3   length keyword 
 1484              	     T1   keyword
 1485              	     T2   link  
 1486              	**********************************************/
 1487 0bf2 00BF     	  _FUNC search_dict
 1488 0bf4 2DE90C03 	  push {r2,r3,T1,T2}
 1489 0bf8 8046     	  mov T1,r0 
 1490 0bfa 00B5FFF7 	  _CALL strlen 
 1490      FEFF5DF8 
 1490      04EB
 1491 0c04 0346     	  mov r3,r0  
 1492              	1:  
 1493 0c06 8946     	   mov T2,r1  // keep for linking   
 1494 0c08 0878     	   ldrb r0,[r1] 
 1495 0c0a 78B1     	   cbz r0,9f // null byte, end of dictionary
 1496 0c0c 4046     	   mov r0,T1
 1497 0c0e 1A46     	   mov r2,r3   
 1498 0c10 00B5FFF7 	   _CALL kword_cmp  
 1498      DBFF5DF8 
 1498      04EB
 1499 0c1a 18B9     	   cbnz r0,2f 
 1500 0c1c 4946     	   mov r1,T2
 1501 0c1e 51F80C1C 	   ldr r1,[r1,#-12]
 1502 0c22 F0E7     	   b 1b   
 1503              	2: // found
 1504 0c24 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1505 0c28 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1506 0c2c BDE80C03 	9: pop {r2,r3,T1,T2}
 1507 0c30 7047     	   _RET 
 1508              	
 1509              	
 1510              	/**************************
 1511              	    INTERPRETER 
 1512              	*************************/
 1513              	
 1514              	/*********************************
 1515              	   cold_start 
 1516              	   initialize BASIC interpreter 
 1517              	   never leave 
 1518              	   input:
 1519              	     none 
ARM GAS  tinyBasic.s 			page 44


 1520              	   output:
 1521              	    none 
 1522              	*********************************/
 1523              	  .type cold_start, %function 
 1524              	  .global cold_start 
 1525              	cold_start: 
 1526 0c32 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1526      C2F20004 
 1527 0c3a DFF85400 	    ldr r0,src_addr 
 1528 0c3e DFF85410 	    ldr r1,dest_addr
 1529 0c42 0968     	    ldr r1,[r1] 
 1530 0c44 0C44     	    add UPP,r1 // system variables base address   
 1531              	// clear RAM
 1532 0c46 2046     	    mov r0,UPP  
 1533 0c48 DFF86811 	    ldr r1,tib 
 1534 0c4c 82EA0202 	    eor r2,r2 
 1535 0c50 40F8042B 	1:  str r2,[r0],#4 
 1536 0c54 8842     	    cmp r0,r1 
 1537 0c56 FBD4     	    bmi 1b 
 1538              	//copy initialized system variables to ram 
 1539 0c58 DFF83400 	    ldr r0,src_addr 
 1540 0c5c 2146     	    mov r1,UPP 
 1541 0c5e DFF83820 	    ldr r2,sysvar_size
 1542 0c62 00B5FFF7 	    _CALL cmove
 1542      FEFF5DF8 
 1542      04EB
 1543 0c6c 00B500F0 	    _CALL prt_version
 1543      15F85DF8 
 1543      04EB
 1544 0c76 00B500F0 	    _CALL clear_basic 
 1544      62F85DF8 
 1544      04EB
 1545 0c80 00B5FFF7 	    _CALL search_free 
 1545      FEFF5DF8 
 1545      04EB
 1546 0c8a E062     	    str r0,[UPP,#FSFREE] 
 1547 0c8c FFF7FEBF 	    b warm_start    
 1548              	src_addr:
 1549 0c90 00000000 	  .word uzero
 1550              	dest_addr:
 1551 0c94 00000000 	  .word vectors_size
 1552 0c98 D4000000 	sysvar_size: .word ulast-uzero 
 1553              	
 1554              	/************************************
 1555              	    print firmware version 
 1556              	    input: 
 1557              	      none 
 1558              	    output:
 1559              	      none 
 1560              	    use:
 1561              	      r0 
 1562              	***********************************/
 1563              	    _FUNC prt_version 
 1564 0c9c DFF80406 	    ldr r0,=version_msg 
 1565 0ca0 00B5FFF7 	    _CALL uart_puts
 1565      FEFF5DF8 
 1565      04EB
ARM GAS  tinyBasic.s 			page 45


 1566 0caa 9FF87400 	    ldrb r0,version 
 1567 0cae 4FEA1010 	    lsr r0,#4 
 1568 0cb2 00F13000 	    add r0,#'0' 
 1569 0cb6 3A28     	    cmp r0,#'9'+1 
 1570 0cb8 01D4     	    bmi 1f 
 1571 0cba 00F10700 	    add r0,#7 
 1572              	  1:
 1573 0cbe 00B5FFF7 	    _CALL uart_putc 
 1573      FEFF5DF8 
 1573      04EB
 1574 0cc8 4FF02E00 	    mov r0,#'. 
 1575 0ccc 00B5FFF7 	    _CALL uart_putc 
 1575      FEFF5DF8 
 1575      04EB
 1576 0cd6 9FF84800 	    ldrb r0,version 
 1577 0cda 00F00F00 	    and r0,#15 
 1578 0cde 00F13000 	    add r0,'0' 
 1579 0ce2 3A28     	    cmp r0,#'9'+1 
 1580 0ce4 01D4     	    bmi 1f 
 1581 0ce6 00F10700 	    add r0,#7
 1582              	  1: 
 1583 0cea 00B5FFF7 	    _CALL uart_putc 
 1583      FEFF5DF8 
 1583      04EB
 1584 0cf4 00B5FFF7 	    _CALL cr
 1584      FEFF5DF8 
 1584      04EB
 1585 0cfe 7047     	    _RET  
 1586              	version_msg:
 1587 0d00 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1587      65207069 
 1587      6C6C2074 
 1587      696E7920 
 1587      42415349 
 1588              	version:
 1589 0d20 10       	    .byte 0x10 
 1590 0d21 0000BF   	    .p2align 2 
 1591              	
 1592              	
 1593              	/*****************************
 1594              	    clear_vars 
 1595              	    initialize variables to 0
 1596              	  input:
 1597              	    none 
 1598              	  output:
 1599              	    none 
 1600              	  use:
 1601              	    r0,r1,r2 
 1602              	*****************************/
 1603              	    _FUNC clear_vars 
 1604 0d24 07B4     	    push {r0,r1,r2}
 1605 0d26 80EA0000 	    eor r0,r0 
 1606 0d2a 04F16001 	    add r1,UPP,#VARS
 1607 0d2e 4FF01A02 	    mov r2,#26
 1608 0d32 41F8040B 	1:  str r0,[r1],#4 
 1609 0d36 013A     	    subs r2,#1
 1610 0d38 FBD1     	    bne 1b  
ARM GAS  tinyBasic.s 			page 46


 1611 0d3a 07BC     	    pop {r0,r1,r2}
 1612 0d3c 7047     	    _RET 
 1613              	
 1614              	/*****************************
 1615              	   clear_basic 
 1616              	   reset BASIC system variables 
 1617              	   and clear variables and RAM 
 1618              	*****************************/
 1619 0d3e 00BF     	    _FUNC clear_basic
 1620 0d40 80EA0000 	  	eor r0,r0
 1621 0d44 2064     	    str r0,[UPP,#FLAGS] 
 1622 0d46 6060     	    str r0,[UPP,#COUNT]
 1623 0d48 2060     	    str r0,[UPP,#IN_SAVED]
 1624 0d4a A060     	    str r0,[UPP,#BASICPTR]
 1625 0d4c E060     	    str r0,[UPP,#DATAPTR]
 1626 0d4e 2061     	    str r0,[UPP,#DATA]
 1627 0d50 6061     	    str r0,[UPP,#DATALEN]
 1628 0d52 04F1D000 	    add r0,UPP,#BASIC_START 
 1629 0d56 00F11000 	    add r0,#16 
 1630 0d5a 6FF00F01 	    mvn r1,#15
 1631 0d5e 00EA0100 	    and r0,r1 
 1632 0d62 2063     	    str r0,[UPP,#TXTBGN]
 1633 0d64 6063     	    str r0,[UPP,#TXTEND]
 1634 0d66 C4F8D000 	    str r0,[UPP,#HERE]
 1635 0d6a 00B5FFF7 	    _CALL clear_vars
 1635      DAFF5DF8 
 1635      04EB
 1636 0d74 206B     	    ldr r0,[UPP,#TXTBGN]
 1637 0d76 DFF83C10 	    ldr r1,tib 
 1638 0d7a 82EA0202 	    eor r2,r2 
 1639 0d7e 40F8042B 	1:  str r2,[r0],#4
 1640 0d82 8842     	    cmp r0,r1 
 1641 0d84 FBD4     	    bmi 1b 
 1642 0d86 7047     	    _RET  
 1643              	
 1644              	/***********************************
 1645              	   warm_init 
 1646              	   initialize interpreter context 
 1647              	  input:
 1648              	    none
 1649              	  output:
 1650              	    none 
 1651              	  use:
 1652              	    r0 
 1653              	***********************************/
 1654              	warm_init:
 1655              	// reset data stack       
 1656 0d88 DFF824C0 	    ldr DP,dstack 
 1657 0d8c 4FF0000A 	    mov IN,#0 // BASIC line index 
 1658 0d90 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1659 0d94 80EA0000 	    eor r0,r0 
 1660 0d98 6060     	    str r0,[UPP,#COUNT]  
 1661 0d9a 2064     	    str r0,[UPP,#FLAGS]
 1662 0d9c A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1663 0d9e 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1664 0da2 6064     	    str r0,[UPP,#TAB_WIDTH]
 1665 0da4 4FF00A00 	    mov r0,#10 // default base decimal 
ARM GAS  tinyBasic.s 			page 47


 1666 0da8 A061     	    str r0,[UPP,#BASE]
 1667 0daa 7047     	    _RET  
 1668              	
 1669 0dac 00000000 	mstack: .word _mstack 
 1670 0db0 00000000 	dstack: .word _dstack 
 1671 0db4 00000000 	tib: .word _tib 
 1672 0db8 00000000 	pad: .word _pad 
 1673 0dbc FCFFFFFF 	array: .word _pad - 4 
 1674 0dc0 0A524541 	ready: .asciz "\nREADY" 
 1674      445900
 1675              	
 1676              	/**********************************
 1677              	    warm_start 
 1678              	    start BASIC interpreter doesn't  
 1679              	    reset variables and code space 
 1680              	  input:
 1681              	    none 
 1682              	  output:
 1683              	    none 
 1684              	**********************************/
 1685 0dc7 00       	    _GBL_FUNC warm_start 
 1686              	// initialise parameters stack
 1687 0dc8 FFF7DEFF 	    bl warm_init
 1688              	// reset main stack 
 1689 0dcc 5FF82400 	    ldr r0,mstack
 1690 0dd0 8546     	    mov sp,r0 
 1691 0dd2 DFF8D404 	    ldr r0,=ready 
 1692 0dd6 00B5FFF7 	    _CALL uart_puts 
 1692      FEFF5DF8 
 1692      04EB
 1693              	// fall in cmd_line 
 1694              	
 1695              	/**********************************
 1696              	   cmd_line 
 1697              	   shell command line 
 1698              	   input:
 1699              	      none 
 1700              	   output:
 1701              	      none 
 1702              	   use:
 1703              	
 1704              	***********************************/
 1705              	    _FUNC cmd_line 
 1706 0de0 00B5FFF7 	    _CALL cr
 1706      FEFF5DF8 
 1706      04EB
 1707 0dea 80EA0000 	    eor r0,r0 
 1708 0dee C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1709 0df2 5FF84000 	1:  ldr r0,tib
 1710 0df6 4FF05001 	    mov r1,#TIB_SIZE 
 1711 0dfa 00B5FFF7 	    _CALL readln 
 1711      FEFF5DF8 
 1711      04EB
 1712 0e04 0940     	    ands r1,r1 // empty line 
 1713 0e06 F4D0     	    beq 1b 
 1714 0e08 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1714      D3FA5DF8 
ARM GAS  tinyBasic.s 			page 48


 1714      04EB
 1715 0e12 EED0     	    beq 1b  // tokens stored in text area 
 1716              	// interpret tokenized line 
 1717              	interpreter:
 1718 0e14 00B500F0 	  _CALL next_token 
 1718      25F85DF8 
 1718      04EB
 1719 0e1e 0028     	  cmp r0,#TK_NONE 
 1720 0e20 F8D0     	  beq interpreter    
 1721 0e22 4028     	  cmp r0,#TK_LBL 
 1722 0e24 F6D0     	  beq interpreter 
 1723 0e26 0B28     	  cmp r0,#TK_CMD 
 1724 0e28 03D1     	  bne 2f
 1725 0e2a 0846     	  mov r0,r1 
 1726 0e2c 00F014F8 	  bl execute  
 1727 0e30 F0E7     	  b interpreter   
 1728              	2: 
 1729 0e32 0428     	  cmp r0,#TK_VAR 
 1730 0e34 05D1     	  bne 3f 
 1731 0e36 00B500F0 	  _CALL let_var 
 1731      81FB5DF8 
 1731      04EB
 1732 0e40 E8E7     	  b interpreter 
 1733              	3: 
 1734 0e42 0528     	  cmp r0,#TK_ARRAY 
 1735 0e44 05D1     	  bne 4f
 1736 0e46 00B500F0 	  _CALL let_array 
 1736      87FB5DF8 
 1736      04EB
 1737 0e50 E0E7     	  b interpreter
 1738              	4: 
 1739 0e52 0128     	  cmp r0,#TK_COLON
 1740 0e54 DED0     	  beq interpreter
 1741 0e56 0BE6     	  b syntax_error
 1742              	
 1743              	/*****************************
 1744              	    execute 
 1745              	    execute a BASIC routine from 
 1746              	    its token value 
 1747              	  input:
 1748              	    r0  BASIC SUB|FUNC token  
 1749              	  output: 
 1750              	    depend on SUB|FUNc
 1751              	*****************************/
 1752              	    _FUNC execute 
 1753 0e58 DFF85014 	    ldr r1,=fn_table 
 1754 0e5c 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1755 0e60 0047     	    bx r0 
 1756              	
 1757              	/*************************************
 1758              	  next_token 
 1759              	  extract next token from token list 
 1760              	  input:
 1761              	    none 
 1762              	  output:
 1763              	    r0    token attribute
 1764              	    r1    token value if there is one 
ARM GAS  tinyBasic.s 			page 49


 1765              	  use:
 1766              	    T1    exit token type  
 1767              	****************************/
 1768 0e62 00BF     	    _FUNC next_token 
 1769 0e64 4DF8048D 	    push {T1}
 1770 0e68 88EA0808 	    eor T1,T1 // TK_NONE 
 1771 0e6c 6068     	    ldr r0,[UPP,#COUNT]
 1772 0e6e 8245     	    cmp IN,r0 
 1773 0e70 14D4     	    bmi 0f
 1774              	end_of_line:
 1775 0e72 BBF80010 	    ldrh r1,[BPTR] // line #
 1776 0e76 09B9     	    cbnz r1, next_line  // command line
 1777 0e78 FFF7FEBF 	    b warm_start
 1778              	next_line:
 1779 0e7c 8344     	    add BPTR,r0 // next line 
 1780 0e7e 606B     	    ldr r0,[UPP,#TXTEND]
 1781 0e80 8345     	    cmp BPTR,r0 
 1782 0e82 7FF5FEAF 	    bpl warm_start // end of program
 1783 0e86 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1784 0e8a 6060     	    str r0,[UPP,#COUNT] 
 1785 0e8c 4FF0030A 	    mov IN,#3
 1786 0e90 00B5FFF7 	    _CALL show_trace
 1786      ABF95DF8 
 1786      04EB
 1787 0e9a 2AE0     	    b 9f  
 1788              	0: 
 1789 0e9c C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1790 0ea0 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1791 0ea4 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1792 0ea8 0AF1010A 	    add IN,#1  
 1793 0eac 8046     	    mov T1,r0 
 1794 0eae 00F07F00 	    and r0,#0x7f // limit mask 
 1795 0eb2 FF49     	    ldr r1,=tok_jmp 
 1796 0eb4 D1E800F0 	    tbb [r1,r0]
 1797              	1: // pc reference point 
 1798 0eb8 1BE0     	    b 9f 
 1799              	2: // .byte param
 1800 0eba 1BF80A10 	    ldrb r1,[BPTR,IN]
 1801 0ebe 0AF1010A 	    add IN,#1 
 1802 0ec2 16E0     	    b 9f 
 1803              	3: // .hword param 
 1804 0ec4 3BF80A10 	    ldrh r1,[BPTR,IN]
 1805 0ec8 0AF1020A 	    add IN,#2 
 1806 0ecc 11E0     	    b 9f 
 1807              	4: // .word param  
 1808 0ece 5BF80A10 	    ldr r1,[BPTR,IN]
 1809 0ed2 0AF1040A 	    add IN,#4
 1810 0ed6 0CE0     	    b 9f 
 1811              	5: // .asciz param 
 1812 0ed8 0BEB0A01 	    add r1,BPTR,IN 
 1813 0edc 0846     	    mov r0,r1  
 1814 0ede 00B5FFF7 	    _CALL strlen 
 1814      FEFF5DF8 
 1814      04EB
 1815 0ee8 8244     	    add IN,r0
 1816 0eea 0AF1010A 	    add IN,#1
 1817 0eee 00E0     	    b 9f  
ARM GAS  tinyBasic.s 			page 50


 1818              	8: // syntax error 
 1819 0ef0 BEE5     	    b syntax_error 
 1820 0ef2 4046     	9:  mov r0,T1  
 1821 0ef4 5DF8048B 	    pop {T1}
 1822 0ef8 7047     	    _RET
 1823              	
 1824 0efa 00BF     	  .p2align 2
 1825              	tok_jmp: // token id  tbb offset 
 1826 0efc 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1827 0efe 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1828 0f02 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1828      1D
 1829 0f07 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1830 0f0b 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1831 0f0e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1831      1C
 1832 0f13 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1832      1C1C
 1833 0f19 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1834 0f1c 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1835 0f1f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1835      1C1C1C1C 
 1836 0f27 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1836      1C1C
 1837 0f2d 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1837      1D1D
 1838 0f33 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1838      1C1C1C1C 
 1838      1C
 1839 0f3c 0B       	  .byte (4b-1b)/2 //0x40 TK_LBL 
 1840              	
 1841 0f3d 0000BF   	  .p2align 2 
 1842              	
 1843              	/*********************************
 1844              	    expect 
 1845              	    check if next token is of 
 1846              	    expected type. If not 
 1847              	    call syntax_error  
 1848              	  input:
 1849              	      r0   token attribute
 1850              	  output:
 1851              	      r0  token attribute 
 1852              	      r1  token value
 1853              	  use:
 1854              	      T1   
 1855              	**********************************/
 1856              	    _FUNC expect 
 1857 0f40 4DF8048D 	    push {T1}
 1858 0f44 8046     	    mov T1,r0 
 1859 0f46 00B5FFF7 	    _CALL next_token 
 1859      8CFF5DF8 
 1859      04EB
 1860 0f50 4045     	    cmp r0,T1  
 1861 0f52 7FF48DAD 	    bne syntax_error 
 1862 0f56 5DF8048B 	    pop {T1}
 1863 0f5a 7047     	    _RET 
 1864              	
ARM GAS  tinyBasic.s 			page 51


 1865              	/***********************************
 1866              	    func_args 
 1867              	    get function arguments list 
 1868              	  input:
 1869              	    none 
 1870              	  output:
 1871              	    r0    arg. count 
 1872              	  use:
 1873              	
 1874              	************************************/
 1875              	    _FUNC func_args 
 1876 0f5c 4FF00600 	    mov r0,#TK_LPAREN 
 1877 0f60 00B5FFF7 	    _CALL expect 
 1877      EDFF5DF8 
 1877      04EB
 1878 0f6a 00B500F0 	    _CALL arg_list 
 1878      0CF85DF8 
 1878      04EB
 1879 0f74 01B4     	    push {r0}
 1880 0f76 4FF00700 	    mov r0,#TK_RPAREN 
 1881 0f7a 00B5FFF7 	    _CALL expect 
 1881      E0FF5DF8 
 1881      04EB
 1882 0f84 01BC     	    pop {r0}
 1883 0f86 7047     	    _RET 
 1884              	
 1885              	/**********************************
 1886              	    arg_list 
 1887              	    get arguments list on dstack 
 1888              	  input:
 1889              	    none 
 1890              	  output:
 1891              	    r0    arg count
 1892              	  use:
 1893              	    T1    tmp count  
 1894              	***********************************/
 1895              	    _FUNC arg_list 
 1896 0f88 4DF8048D 	    push {T1}
 1897 0f8c 88EA0808 	    eor T1,T1 
 1898 0f90 00B500F0 	1:  _CALL expression 
 1898      D5F85DF8 
 1898      04EB
 1899 0f9a 0028     	    cmp R0,#TK_NONE 
 1900 0f9c 10D0     	    beq 9f 
 1901 0f9e 0F28     	    cmp r0,#TK_INTGR
 1902 0fa0 0ED1     	    bne 9f 
 1903 0fa2 4CF8041D 	    _PUSH r1 
 1904 0fa6 08F10108 	    add T1,#1 
 1905 0faa 00B5FFF7 	    _CALL next_token 
 1905      5AFF5DF8 
 1905      04EB
 1906 0fb4 0828     	    cmp r0,#TK_COMMA 
 1907 0fb6 EBD0     	    beq 1b 
 1908 0fb8 D4F800A0 	    _UNGET_TOKEN 
 1908      D4F808B0 
 1909 0fc0 4046     	9:  mov r0,T1 
 1910 0fc2 5DF8048B 	    pop {T1}
ARM GAS  tinyBasic.s 			page 52


 1911 0fc6 7047     	    _RET 
 1912              	
 1913              	/***********************************
 1914              	 factor
 1915              	 arithmetick factor parser 
 1916              	 factor ::= ['+'|'-'|e]  var | @ |
 1917              				 integer | function |
 1918              				 '('expression')' 
 1919              	  input: 
 1920              	    none 
 1921              	  output:
 1922              	    r0   token attribute 
 1923              	    r1   token value 
 1924              	  use:
 1925              	    r2   temp 
 1926              	    T1   sign 
 1927              	    T2   exit token attribute 
 1928              	***********************************/
 1929              	    _FUNC factor 
 1930 0fc8 2DE90403 	    push {r2,T1,T2}
 1931 0fcc 4FF00F09 	    mov T2,#TK_INTGR 
 1932 0fd0 4FF00108 	    mov T1,#1 // default sign +  
 1933 0fd4 00B5FFF7 	    _CALL next_token
 1933      45FF5DF8 
 1933      04EB
 1934 0fde 0246     	    mov r2,r0 
 1935 0fe0 00F03000 	    and r0,#TK_GRP_MASK 
 1936 0fe4 1028     	    cmp r0,#TK_GRP_ADD
 1937 0fe6 1046     	    mov r0,r2
 1938 0fe8 08D1     	    bne 1f 
 1939 0fea 1028     	    cmp r0,#TK_PLUS 
 1940 0fec 01D0     	    beq 0f 
 1941 0fee 4FF0FF38 	    mov T1,#-1 // minus sign 
 1942 0ff2 00B5FFF7 	0:  _CALL next_token
 1942      36FF5DF8 
 1942      04EB
 1943 0ffc 0F28     	1:  cmp r0,#TK_INTGR 
 1944 0ffe 59D0     	    beq 8f 
 1945 1000 0528     	    cmp r0,#TK_ARRAY 
 1946 1002 1ED1     	    bne 2f 
 1947 1004 4FF00600 	    mov r0,#TK_LPAREN 
 1948 1008 00B5FFF7 	    _CALL expect 
 1948      99FF5DF8 
 1948      04EB
 1949 1012 00B500F0 	    _CALL expression
 1949      94F85DF8 
 1949      04EB
 1950 101c 0F28     	    cmp r0,#TK_INTGR
 1951 101e 7FF427AD 	    bne syntax_error
 1952 1022 8146     	    mov T2,r0
 1953 1024 0A46     	    mov r2,r1  
 1954 1026 4FF00700 	    mov r0,#TK_RPAREN
 1955 102a 00B5FFF7 	    _CALL expect 
 1955      88FF5DF8 
 1955      04EB
 1956 1034 1046     	    mov r0,r2 
 1957 1036 00B500F0 	    _CALL get_array_element 
ARM GAS  tinyBasic.s 			page 53


 1957      F8F85DF8 
 1957      04EB
 1958 1040 38E0     	    b 8f
 1959 1042 0628     	2:  cmp r0,#TK_LPAREN 
 1960 1044 12D1     	    bne 3f 
 1961 1046 00B500F0 	    _CALL expression 
 1961      7AF85DF8 
 1961      04EB
 1962 1050 0F28     	    cmp r0,#TK_INTGR 
 1963 1052 7FF40DAD 	    bne syntax_error
 1964 1056 8146     	    mov T2,r0
 1965 1058 0A46     	    mov r2,r1   
 1966 105a 4FF00700 	    mov r0,#TK_RPAREN
 1967 105e 00B5FFF7 	    _CALL expect 
 1967      6EFF5DF8 
 1967      04EB
 1968 1068 1146     	    mov r1,r2 
 1969 106a 23E0     	    b 8f       
 1970 106c 0428     	3:  cmp r0,#TK_VAR 
 1971 106e 06D1     	    bne 4f
 1972 1070 0846     	    mov r0,r1  
 1973 1072 00B500F0 	    _CALL get_var 
 1973      EEF85DF8 
 1973      04EB
 1974 107c 1AE0     	    b 8f 
 1975 107e 0C28     	4:  cmp r0,#TK_IFUNC 
 1976 1080 06D1     	    bne 6f 
 1977 1082 0846     	5:  mov r0,r1  
 1978 1084 00B5FFF7 	    _CALL execute
 1978      E7FE5DF8 
 1978      04EB
 1979 108e 11E0     	    b 8f 
 1980 1090 4028     	6:  cmp r0,#TK_LBL
 1981 1092 08D1     	    bne 7f 
 1982 1094 41F00040 	    orr r0,r1,#(1<<31) 
 1983 1098 00B5FFF7 	    _CALL search_const
 1983      FDF85DF8 
 1983      04EB
 1984 10a2 0146     	    mov r1,r0 
 1985 10a4 06E0     	    b 8f 
 1986 10a6 D4F800A0 	7:  _UNGET_TOKEN      
 1986      D4F808B0 
 1987 10ae 4FF00000 	    mov r0,#TK_NONE
 1988 10b2 03E0     	    b 9f  
 1989 10b4 08FB01F1 	8:  mul r1,T1 
 1990 10b8 5FEA0900 	    movs r0,T2 
 1991 10bc BDE80403 	9:  pop {r2,T1,T2}   
 1992 10c0 7047     	    _RET 
 1993              	
 1994              	
 1995              	/*****************************************
 1996              	    term 
 1997              	    term parser 
 1998              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1999              	    output:
 2000              	      r0  	token attribute 
 2001              	      r1		integer
ARM GAS  tinyBasic.s 			page 54


 2002              	    use:
 2003              	      r2    first operand 
 2004              	      r3    temp 
 2005              	      T1    operator 
 2006              	      T2    exit token attribute 
 2007              	******************************************/
 2008 10c2 00BF     	     _FUNC term 
 2009 10c4 2DE90C03 	    push {r2,r3,T1,T2}
 2010 10c8 4FF00009 	    mov T2,#TK_NONE 
 2011 10cc 00B5FFF7 	    _CALL factor
 2011      7BFF5DF8 
 2011      04EB
 2012 10d6 60B3     	    cbz r0, 9f  // no factor   
 2013 10d8 8146     	    mov T2,r0  // TK_INTGR 
 2014 10da 0A46     	    mov r2,r1 // first factor    
 2015 10dc 00B5FFF7 	0:  _CALL next_token
 2015      C1FE5DF8 
 2015      04EB
 2016 10e6 0346     	    mov r3,r0   
 2017 10e8 00F03000 	    and r0,#TK_GRP_MASK 
 2018 10ec 2028     	    cmp r0,#TK_GRP_MULT
 2019 10ee 04D0     	    beq 1f
 2020 10f0 D4F800A0 	    _UNGET_TOKEN
 2020      D4F808B0 
 2021 10f8 1BE0     	    b 9f 
 2022 10fa 9846     	1:  mov T1,r3 
 2023 10fc 00B5FFF7 	    _CALL factor  
 2023      63FF5DF8 
 2023      04EB
 2024 1106 3FF4B3AC 	    beq syntax_error 
 2025 110a B8F1200F 	    cmp T1,#TK_MULT
 2026 110e 02D1     	    bne 2f 
 2027              	// multiplication
 2028 1110 01FB02F2 	    mul r2,r1
 2029 1114 E2E7     	    b 0b  
 2030 1116 B8F1210F 	2:  cmp T1,#TK_DIV 
 2031 111a 02D1     	    bne 3f
 2032              	// division
 2033 111c 92FBF1F2 	    sdiv r2,r2,r1
 2034 1120 DCE7     	    b 0b  
 2035              	3: // modulo
 2036 1122 1046     	    mov r0,r2 
 2037 1124 92FBF1F2 	    sdiv r2,r2,r1 
 2038 1128 01FB02F2 	    mul  r2,r1 
 2039 112c A0EB0202 	    sub  r2,r0,r2
 2040 1130 D4E7     	    b 0b  
 2041 1132 1146     	9:  mov r1,r2 
 2042 1134 5FEA0900 	    movs r0,T2 
 2043 1138 BDE80C03 	    pop {r2,r3,T1,T2}
 2044 113c 7047     	    _RET 
 2045              	
 2046              	/*****************************************
 2047              	    expression 
 2048              	    arithmetic expression parser 
 2049              	    expression ::= term [['+'|'-'] term]*
 2050              	    result range {-32768..32767}
 2051              	    output:
ARM GAS  tinyBasic.s 			page 55


 2052              	      r0    TK_NONE || TK_INTGR 
 2053              	      r1 	  integer
 2054              	    use:
 2055              	      r2  left operand 
 2056              	      T1  operator 
 2057              	      T2  exit token attribute
 2058              	******************************************/
 2059 113e 00BF     	    _FUNC expression 
 2060 1140 2DE90403 	    push {r2,t1,t2}
 2061 1144 4FF00009 	    mov T2,#TK_NONE
 2062 1148 82EA0202 	    eor r2,r2 // zero 
 2063 114c 00B5FFF7 	    _CALL term 
 2063      B9FF5DF8 
 2063      04EB
 2064 1156 21D0     	    beq 9f  // no term  
 2065 1158 0A46     	    mov r2,r1 // first term
 2066 115a 4FF00F09 	    mov T2,#TK_INTGR    
 2067 115e 00B5FFF7 	1:  _CALL next_token 
 2067      80FE5DF8 
 2067      04EB
 2068 1168 8046     	    mov T1,r0 // token attribute 
 2069 116a 00F03000 	    and r0,#TK_GRP_MASK 
 2070 116e 1028     	    cmp r0,#TK_GRP_ADD 
 2071 1170 04D0     	    beq 3f 
 2072 1172 D4F800A0 	    _UNGET_TOKEN
 2072      D4F808B0 
 2073 117a 0FE0     	    b 9f  
 2074 117c 00B5FFF7 	3:  _CALL term 
 2074      A1FF5DF8 
 2074      04EB
 2075 1186 0F28     	    cmp r0,#TK_INTGR 
 2076 1188 7FF472AC 	    bne syntax_error 
 2077 118c B8F1100F 	    cmp T1,#TK_PLUS 
 2078 1190 02D0     	    beq 4f 
 2079 1192 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 2080 1196 E2E7     	    b 1b 
 2081 1198 0A44     	4:  add r2,r2,r1 // N1+N2
 2082 119a E0E7     	    b 1b
 2083 119c 4846     	9:  mov r0,T2 
 2084 119e 1146     	    mov r1,r2 
 2085 11a0 BDE80403 	    pop {r2,t1,t2}
 2086 11a4 7047     	    _RET 
 2087              	
 2088              	
 2089              	/**********************************************
 2090              	    relation parser 
 2091              	    rel ::= expr1 rel_op expr2
 2092              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2093              	    relation return  integer , zero is false 
 2094              	    output:
 2095              	        r0	TK_INTGR  
 2096              	        r1	integer 
 2097              	    use:
 2098              	        r2   first operand 
 2099              	        T1   relop   
 2100              	**********************************************/
 2101 11a6 00BF     	    _FUNC relation 
ARM GAS  tinyBasic.s 			page 56


 2102 11a8 2DE90401 	    push {r2,T1}
 2103 11ac 00B5FFF7 	    _CALL expression 
 2103      C7FF5DF8 
 2103      04EB
 2104 11b6 0F28     	    cmp r0,#TK_INTGR 
 2105 11b8 7FF45AAC 	    bne syntax_error 
 2106 11bc 0A46     	    mov r2,r1  // first operand  
 2107 11be 00B5FFF7 	    _CALL next_token 
 2107      50FE5DF8 
 2107      04EB
 2108 11c8 8046     	    mov T1,r0  // relop  
 2109 11ca 00F03000 	    and r0,#TK_GRP_MASK 
 2110 11ce 3028     	    cmp r0,#TK_GRP_RELOP 
 2111 11d0 1DD1     	    bne 8f  // single operand 
 2112 11d2 00B5FFF7 	    _CALL expression 
 2112      B4FF5DF8 
 2112      04EB
 2113 11dc 0F28     	    cmp r0,#TK_INTGR 
 2114 11de 7FF447AC 	    bne syntax_error 
 2115 11e2 8A42     	    cmp r2,r1 // compare operands  
 2116 11e4 4FF0FF31 	    mov r1,#-1 
 2117 11e8 324A     	    ldr r2,=relop_jmp
 2118 11ea 08F00708 	    and T1,#7 // {1..6}
 2119 11ee D2E808F0 	    tbb [r2,T1]    
 2120              	rel_idx0:
 2121              	rel_eq:
 2122 11f2 11D0     	    beq 9f 
 2123 11f4 08E0     	    b rel_false
 2124              	rel_lt: 
 2125 11f6 0FDB     	    blt 9f   
 2126 11f8 06E0     	    b rel_false 
 2127              	rel_le:
 2128 11fa 0DDD     	    ble 9f  
 2129 11fc 04E0     	    b rel_false 
 2130              	rel_gt:
 2131 11fe 0BDC     	    bgt 9f  
 2132 1200 02E0     	    b rel_false  
 2133              	rel_ge:
 2134 1202 09DA     	    bge 9f  
 2135 1204 00E0     	    b rel_false  
 2136              	rel_diff:
 2137 1206 07D1     	    bne 9f 
 2138              	rel_false:    
 2139 1208 81EA0101 	    eor r1,r1  // false
 2140 120c 04E0     	    b 9f  
 2141 120e D4F800A0 	8:  _UNGET_TOKEN 
 2141      D4F808B0 
 2142 1216 1146     	    mov r1,r2    
 2143 1218 4FF00F00 	9:  mov r0,#TK_INTGR
 2144 121c BDE80401 	    pop {r2,T1}
 2145 1220 7047     	    _RET 
 2146              	
 2147              	
 2148              	relop_jmp: 
 2149 1222 00       	  .byte 0 
 2150 1223 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2151 1224 00       	  .byte 0 // =
ARM GAS  tinyBasic.s 			page 57


 2152 1225 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2153 1226 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2154 1227 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2155 1228 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2156              	
 2157              	
 2158              	/***********************************
 2159              	    get_array_element
 2160              	    return value of @(n)
 2161              	  input:
 2162              	    r0    indice 
 2163              	  output:
 2164              	    r0   TK_INTGR
 2165              	    r1   value  
 2166              	************************************/
 2167 1229 0000BF   	    _FUNC get_array_element 
 2168 122c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2169 1230 4FEA8000 	    lsl r0,#2 
 2170 1234 C0EB0100 	    rsb r0,r1 
 2171 1238 0168     	    ldr r1,[r0]
 2172 123a 4FF00F00 	    mov r0,#TK_INTGR 
 2173 123e 7047     	    _RET 
 2174              	
 2175              	
 2176              	/***********************************
 2177              	    set_array_element 
 2178              	    set value of array element 
 2179              	  input:
 2180              	    r0   index 
 2181              	    r1   new value 
 2182              	  output:
 2183              	    none
 2184              	  use:
 2185              	    r2    array pointer 
 2186              	**********************************/
 2187              	    _FUNC set_array_element 
 2188 1240 04B4     	    push {r2}
 2189 1242 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2190 1246 4FEA8000 	    lsl r0,#2 
 2191 124a A1EB0001 	    sub r1,r0 
 2192 124e 0960     	    str r1,[r1]
 2193 1250 04BC     	    pop {r2}
 2194 1252 7047     	    _RET 
 2195              	
 2196              	/***********************************
 2197              	   get_var 
 2198              	   get variable value 
 2199              	  input:
 2200              	     r0    variable index {0..25}
 2201              	  output:
 2202              	     r0    TK_INTGR
 2203              	     r1    value 
 2204              	**********************************/
 2205              	    _FUNC get_var 
 2206 1254 04F16001 	    add r1,UPP,#VARS
 2207 1258 4FEA8000 	    lsl r0,#2 
 2208 125c 0958     	    ldr r1,[r1,r0]
ARM GAS  tinyBasic.s 			page 58


 2209 125e 4FF00F00 	    mov r0,#TK_INTGR
 2210 1262 7047     	    _RET 
 2211              	
 2212              	/*********************************
 2213              	    set_var 
 2214              	    set variable value 
 2215              	  input:
 2216              	     r0    variable index {0..25}
 2217              	     r1    new value 
 2218              	  output:
 2219              	    none 
 2220              	  use:
 2221              	    r2   vars pointer 
 2222              	*********************************/
 2223              	    _FUNC set_var 
 2224 1264 04B4     	    push {r2}
 2225 1266 04F16002 	    add r2,UPP,#VARS
 2226 126a 4FEA8000 	    lsl r0,#2
 2227 126e 1150     	    str r1,[r2,r0]
 2228 1270 04BC     	    pop {r2}
 2229 1272 7047     	    _RET 
 2230              	
 2231              	/******************************
 2232              	    CONSTANTS data
 2233              	******************************/
 2234              	
 2235              	  .section .rodata 
 2236              	
 2237              	// system variables initial value 
 2238              	uzero:
 2239 0000 00000000 	  .word 0 // IN_SAVED
 2240 0004 00000000 	  .word 0 // COUNT
 2241 0008 00000000 	  .word 0 // BASICPTR
 2242 000c 00000000 	  .word 0 // DATAPTR
 2243 0010 00000000 	  .word 0 // DATA
 2244 0014 00000000 	  .word 0 // DATALEN
 2245 0018 0A000000 	  .word 10 // BASE
 2246 001c 00000000 	  .word 0 // TICKS
 2247 0020 00000000 	  .word 0 // TIMER
 2248 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2249 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2250 002c 00000000 	  .word 0 // FSFREE
 2251 0030 00000000 	  .word 0 // TXTBGN
 2252 0034 00000000 	  .word 0 // TXTEND
 2253 0038 00000000 	  .word 0 //LOOP_DEPTH
 2254 003c 00000000 	  .word 0 // ARRAY_SIZE
 2255 0040 00000000 	  .word 0 // FLAGS
 2256 0044 04000000 	  .word 4 // TAB_WIDTH
 2257 0048 00000000 	  .word 0 // RX_HEAD
 2258 004c 00000000 	  .word 0 // RX_TAIL
 2259 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2259      00000000 
 2259      00000000 
 2259      00000000 
 2260 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2260      00000000 
 2260      00000000 
ARM GAS  tinyBasic.s 			page 59


 2260      00000000 
 2260      00000000 
 2261 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2262 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2263 00d0 00000000 	  .word 0 // HERE 
 2264              	ulast:
 2265              	
 2266              	  .section .rodata.dictionary 
 2267              	
 2268              	// keep alphabetic order for BASIC names from Z-A
 2269              	// this sort order is for for WORDS cmd output. 	
 2270              	  .type kword_end, %object
 2271              		.equ link, 0
 2272              	kword_end:
 2273 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2273      00000000 
 2273      00000000 
 2273      00000000 
 2274 0010 0C000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2274      53000000 
 2274      0C000000 
 2274      584F5200 
 2275 0020 1C000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2275      51000000 
 2275      0B000000 
 2275      574F5244 
 2275      53000000 
 2276 0034 2C000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2276      50000000 
 2276      0B000000 
 2276      57414954 
 2276      00000000 
 2277 0048 40000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2277      4F000000 
 2277      0B000000 
 2277      554E5449 
 2277      4C000000 
 2278 005c 54000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2278      4E000000 
 2278      0C000000 
 2278      55464C41 
 2278      53480000 
 2279 0070 68000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2279      4D000000 
 2279      0C000000 
 2279      55424F55 
 2279      4E440000 
 2280 0084 7C000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2280      4C000000 
 2280      0B000000 
 2280      54524143 
 2280      45000000 
 2281 0098 90000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2281      4B000000 
 2281      0B000000 
 2281      544F0000 
 2282 00a8 A4000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
ARM GAS  tinyBasic.s 			page 60


 2282      49000000 
 2282      0B000000 
 2282      54494D45 
 2282      52000000 
 2283 00bc B4000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2283      4A000000 
 2283      0C000000 
 2283      54494D45 
 2283      4F555400 
 2284 00d0 C8000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2284      48000000 
 2284      0C000000 
 2284      5449434B 
 2284      53000000 
 2285 00e4 DC000000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2285      47000000 
 2285      0B000000 
 2285      5448454E 
 2285      00000000 
 2286 00f8 F0000000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2286      46000000 
 2286      0B000000 
 2286      54414200 
 2287 0108 04010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2287      45000000 
 2287      0B000000 
 2287      53544F52 
 2287      45000000 
 2288 011c 14010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2288      44000000 
 2288      0B000000 
 2288      53544F50 
 2288      00000000 
 2289 0130 28010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2289      43000000 
 2289      0B000000 
 2289      53544550 
 2289      00000000 
 2290 0144 3C010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2290      42000000 
 2290      0B000000 
 2290      53504300 
 2291 0154 50010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2291      41000000 
 2291      0B000000 
 2291      534C4545 
 2291      50000000 
 2292 0168 60010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2292      40000000 
 2292      0C000000 
 2292      53495A45 
 2292      00000000 
 2293 017c 74010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2293      3F000000 
 2293      0B000000 
 2293      53415645 
 2293      00000000 
ARM GAS  tinyBasic.s 			page 61


 2294 0190 88010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2294      3E000000 
 2294      0B000000 
 2294      52554E00 
 2295 01a0 9C010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2295      3D000000 
 2295      0C000000 
 2295      52534849 
 2295      46540000 
 2296 01b4 AC010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2296      3C000000 
 2296      0C000000 
 2296      524E4400 
 2297 01c4 C0010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2297      3B000000 
 2297      0B000000 
 2297      52455455 
 2297      524E0000 
 2298 01d8 D0010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2298      3A000000 
 2298      0B000000 
 2298      52455354 
 2298      4F524500 
 2299 01ec E4010000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2299      39000000 
 2299      0B000000 
 2299      52454D00 
 2300 01fc F8010000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2300      38000000 
 2300      0C000000 
 2300      52454144 
 2300      00000000 
 2301 0210 08020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2301      37000000 
 2301      0C000000 
 2301      514B4559 
 2301      00000000 
 2302 0224 1C020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2302      36000000 
 2302      0B000000 
 2302      50555400 
 2303 0234 30020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2303      35000000 
 2303      0B000000 
 2303      50555348 
 2303      00000000 
 2304 0248 40020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2304      34000000 
 2304      0B000000 
 2304      5052494E 
 2304      54000000 
 2305 025c 54020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2305      33000000 
 2305      0C000000 
 2305      504F5000 
 2306 026c 68020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2306      32000000 
ARM GAS  tinyBasic.s 			page 62


 2306      0B000000 
 2306      504F4B45 
 2306      57000000 
 2307 0280 78020000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2307      31000000 
 2307      0B000000 
 2307      504F4B45 
 2307      48000000 
 2308 0294 8C020000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2308      30000000 
 2308      0B000000 
 2308      504F4B45 
 2308      42000000 
 2309 02a8 A0020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2309      2C000000 
 2309      0B000000 
 2309      504D4F44 
 2309      45000000 
 2310 02bc B4020000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2310      2F000000 
 2310      0C000000 
 2310      5045454B 
 2310      57000000 
 2311 02d0 C8020000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2311      2E000000 
 2311      0C000000 
 2311      5045454B 
 2311      48000000 
 2312 02e4 DC020000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2312      2D000000 
 2312      0C000000 
 2312      5045454B 
 2312      42000000 
 2313 02f8 F0020000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2313      2B000000 
 2313      0B000000 
 2313      50415553 
 2313      45000000 
 2314 030c 04030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2314      2A000000 
 2314      0C000000 
 2314      50414400 
 2315 031c 18030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2315      29000000 
 2315      0B000000 
 2315      4F555400 
 2316 032c 28030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2316      28000000 
 2316      0C000000 
 2316      4F520000 
 2317 033c 38030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2317      27000000 
 2317      0C000000 
 2317      4E4F5400 
 2318 034c 48030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2318      26000000 
 2318      0B000000 
ARM GAS  tinyBasic.s 			page 63


 2318      4E455854 
 2318      00000000 
 2319 0360 58030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2319      25000000 
 2319      0B000000 
 2319      4E455700 
 2320 0370 6C030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2320      24000000 
 2320      0C000000 
 2320      4C534849 
 2320      46540000 
 2321 0384 7C030000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2321      23000000 
 2321      0B000000 
 2321      4C4F4341 
 2321      54450000 
 2322 0398 90030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2322      22000000 
 2322      0B000000 
 2322      4C4F4144 
 2322      00000000 
 2323 03ac A4030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2323      21000000 
 2323      0B000000 
 2323      4C495354 
 2323      00000000 
 2324 03c0 B8030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2324      20000000 
 2324      0B000000 
 2324      4C455400 
 2325 03d0 CC030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2325      1F000000 
 2325      0C000000 
 2325      4B455900 
 2326 03e0 DC030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2326      1E000000 
 2326      0C000000 
 2326      494E5645 
 2326      52540000 
 2327 03f4 EC030000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2327      1D000000 
 2327      0B000000 
 2327      494E5055 
 2327      54000000 
 2328 0408 00040000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2328      1C000000 
 2328      0C000000 
 2328      494E0000 
 2329 0418 14040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2329      1B000000 
 2329      0B000000 
 2329      49460000 
 2330 0428 24040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2330      1A000000 
 2330      0B000000 
 2330      48455800 
 2331 0438 34040000 	  _dict_entry TK_INTGR,GPIOC,GPIOC_BASE_ADR //  
ARM GAS  tinyBasic.s 			page 64


 2331      00100140 
 2331      0F000000 
 2331      4750494F 
 2331      43000000 
 2332 044c 44040000 	  _dict_entry TK_INTGR,GPIOB,GPIOB_BASE_ADR //  
 2332      000C0140 
 2332      0F000000 
 2332      4750494F 
 2332      42000000 
 2333 0460 58040000 	  _dict_entry TK_INTGR,GPIOA,GPIOA_BASE_ADR //  
 2333      00080140 
 2333      0F000000 
 2333      4750494F 
 2333      41000000 
 2334 0474 6C040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2334      19000000 
 2334      0B000000 
 2334      474F544F 
 2334      00000000 
 2335 0488 80040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2335      18000000 
 2335      0B000000 
 2335      474F5355 
 2335      42000000 
 2336 049c 94040000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2336      17000000 
 2336      0C000000 
 2336      47455400 
 2337 04ac A8040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2337      16000000 
 2337      0B000000 
 2337      464F5247 
 2337      45540000 
 2338 04c0 B8040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2338      15000000 
 2338      0B000000 
 2338      464F5200 
 2339 04d0 CC040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2339      14000000 
 2339      0B000000 
 2339      45524153 
 2339      45000000 
 2340 04e4 DC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2340      13000000 
 2340      0B000000 
 2340      454E4400 
 2341 04f4 F0040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2341      12000000 
 2341      0B000000 
 2341      44554D50 
 2341      00000000 
 2342 0508 00050000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2342      11000000 
 2342      0B000000 
 2342      44524F50 
 2342      00000000 
 2343 051c 14050000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
ARM GAS  tinyBasic.s 			page 65


 2343      10000000 
 2343      0B000000 
 2343      444F0000 
 2344 052c 28050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2344      0F000000 
 2344      0B000000 
 2344      44495200 
 2345 053c 38050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2345      0E000000 
 2345      0B000000 
 2345      44454300 
 2346 054c 48050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2346      0D000000 
 2346      0B000000 
 2346      44415441 
 2346      4C4E0000 
 2347 0560 58050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2347      0C000000 
 2347      0B000000 
 2347      44415441 
 2347      00000000 
 2348 0574 6C050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2348      0B000000 
 2348      0B000000 
 2348      434F4E53 
 2348      54000000 
 2349 0588 80050000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2349      0A000000 
 2349      0B000000 
 2349      434C5300 
 2350 0598 94050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2350      09000000 
 2350      0D000000 
 2350      43484152 
 2350      00000000 
 2351 05ac A4050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2351      08000000 
 2351      0B000000 
 2351      42544F47 
 2351      4C000000 
 2352 05c0 B8050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2352      07000000 
 2352      0C000000 
 2352      42544553 
 2352      54000000 
 2353 05d4 CC050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2353      06000000 
 2353      0B000000 
 2353      42534554 
 2353      00000000 
 2354 05e8 E0050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2354      05000000 
 2354      0B000000 
 2354      42524553 
 2354      00000000 
 2355 05fc F4050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2355      04000000 
ARM GAS  tinyBasic.s 			page 66


 2355      0C000000 
 2355      42495400 
 2356 060c 08060000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2356      03000000 
 2356      0B000000 
 2356      41575500 
 2357 061c 18060000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2357      02000000 
 2357      0C000000 
 2357      41534300 
 2358 062c 28060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2358      01000000 
 2358      0C000000 
 2358      414E4400 
 2359              	first_link: 
 2360 063c 38060000 	  .word LINK 
 2361 0640 00000000 	  .word ABS_IDX 
 2362 0644 0C000000 	  .word TK_IFUNC
 2363              	kword_dict: // first name field 
 2364              	  .equ LINK,. 
 2365 0648 41425300 	  .asciz "ABS" 
 2366              	  .p2align 2 
 2367              	
 2368              	    .section .rodata.fn_tabld 
 2369              	
 2370              	//comands and fonctions address table
 2371              	  .type fn_table, %object
 2372              	fn_table:
 2373 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2374 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2375 0030 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2375      00000000 
 2375      00000000 
 2375      00000000 
 2375      00000000 
 2376 004c 00000000 		.word cmd_end,erase,for,forget,get,gosub,goto
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2377 0068 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2378 0080 00000000 		.word let,list,load,locate,lshift,new,next
 2378      00000000 
 2378      00000000 
 2378      00000000 
ARM GAS  tinyBasic.s 			page 67


 2378      00000000 
 2379 009c 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2379      00000000 
 2379      00000000 
 2379      00000000 
 2379      00000000 
 2380 00c0 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2380      00000000 
 2380      00000000 
 2380      00000000 
 2380      00000000 
 2381 00dc 00000000 		.word qkey,read,skip_line
 2381      00000000 
 2381      00000000 
 2382 00e8 00000000 		.word restore,return, random,rshift,run,save,size 
 2382      00000000 
 2382      00000000 
 2382      00000000 
 2382      00000000 
 2383 0104 00000000 		.word sleep,spc,step,stop,store,tab
 2383      00000000 
 2383      00000000 
 2383      00000000 
 2383      00000000 
 2384 011c 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2384      00000000 
 2384      00000000 
 2384      00000000 
 2384      00000000 
 2385 0140 00000000 		.word wait,words,bit_xor
 2385      00000000 
 2385      00000000 
 2386 014c 00000000 		.word 0 
 2387              	
 2388              	
 2389              	/**********************************
 2390              	    BASIC commands and functions 
 2391              	**********************************/
 2392              	
 2393              	    .section .text.basic , "ax", %progbits 
 2394              	
 2395              	
 2396              	/*******************************
 2397              	  BASIC:  ABS expr 
 2398              	  input:
 2399              	    none 
 2400              	  output:
 2401              	    r0    token type 
 2402              	    r1    abs(expr)
 2403              	  use:
 2404              	    none 
 2405              	******************************/
 2406              	    _FUNC abs 
 2407 0000 00B5FFF7 	    _CALL arg_list
 2407      FEFF5DF8 
 2407      04EB
 2408 000a 0128     	    cmp r0,#1 
ARM GAS  tinyBasic.s 			page 68


 2409 000c 01D0     	    beq 1f 
 2410 000e FFF7FEBF 	    b syntax_error 
 2411 0012 5CF8041B 	1:  _POP r1 
 2412 0016 11F0004F 	    tst r1,#(1<<31)
 2413 001a 01D0     	    beq 9f
 2414 001c C1F10001 	    rsb r1,#0 
 2415 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2416 0024 7047     	   _RET 
 2417              	
 2418 0026 00BF     	    _FUNC power_adc
 2419 0028 7047     	    _RET
 2420              	
 2421 002a 00BF     	    _FUNC analog_read
 2422 002c 7047     	    _RET
 2423              	
 2424              	/************************************
 2425              	  BASIC: AND(expr1,expr2)
 2426              	  logical ANND bit to between expr1,expr2
 2427              	************************************/
 2428 002e 00BF     	    _FUNC bit_and
 2429 0030 00B5FFF7 	    _CALL func_args 
 2429      FEFF5DF8 
 2429      04EB
 2430 003a 0228     	    cmp r0,#2 
 2431 003c 7FF4FEAF 	    bne syntax_error 
 2432 0040 5CF8040B 	    _POP r0 
 2433 0044 5CF8041B 	    _POP r1 
 2434 0048 01EA0001 	    and r1,r0 
 2435 004c 4FF00F00 	    mov r0,#TK_INTGR
 2436 0050 7047     	    _RET
 2437              	
 2438              	/*******************************************
 2439              	  BASIC: ASC(string|char)
 2440              	  return ASCII code of char of first char 
 2441              	  of string 
 2442              	*******************************************/
 2443 0052 00BF     	    _FUNC ascii
 2444 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2445 0058 00B5FFF7 	    _CALL expect 
 2445      FEFF5DF8 
 2445      04EB
 2446 0062 00B5FFF7 	    _CALL next_token 
 2446      FEFF5DF8 
 2446      04EB
 2447 006c 0228     	    cmp r0,#TK_QSTR
 2448 006e 03D0     	    beq 2f 
 2449 0070 0328     	    cmp r0,#TK_CHAR 
 2450 0072 7FF4FEAF 	    bne syntax_error 
 2451 0076 00E0     	    b 9f 
 2452 0078 0978     	2:  ldrb r1,[r1]
 2453 007a 4CF8041D 	9:  _PUSH r1 
 2454 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2455 0082 00B5FFF7 	    _CALL expect 
 2455      FEFF5DF8 
 2455      04EB
 2456 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2457 0090 5CF8041B 	    _POP r1 
ARM GAS  tinyBasic.s 			page 69


 2458 0094 7047     	    _RET
 2459              	
 2460 0096 00BF     	    _FUNC autorun
 2461 0098 7047     	    _RET
 2462              	
 2463              	/*******************************************
 2464              	  BASIC: AWU time_sleep  
 2465              	  enable LSI and IWDG and place MCU in 
 2466              	  deep sleep. IDWG wakeup MCU 
 2467              	******************************************/
 2468 009a 00BF     	    _FUNC awu
 2469 009c 00B5FFF7 	    _CALL arg_list
 2469      FEFF5DF8 
 2469      04EB
 2470 00a6 0128     	    cmp r0,#1 
 2471 00a8 7FF4FEAF 	    bne syntax_error 
 2472 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2472      C4F20201 
 2473 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2474              	// enable LSI 
 2475 00b6 80F00100 	    eor r0,#1
 2476 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2477              	// wait for LSIRDY 
 2478 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2479 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2480 00c2 FBD0     	    beq 1b 
 2481              	// configure IWDG
 2482              	// compute values for IWDG_PR and IWDG_RLR 
 2483 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2484 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2485 00cc 03FB02F2 	    mul r2,r3 
 2486 00d0 83EA0303 	    eor r3,r3
 2487 00d4 B2F5005F 	2:  cmp r2,#8192 
 2488 00d8 04D4     	    bmi 3f 
 2489 00da 4FEA5202 	    lsr r2,#1 
 2490 00de 03F10103 	    add r3,#1
 2491 00e2 F7E7     	    b 2b
 2492              	// initialize IWDG      
 2493 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2493      C4F20001 
 2494 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2495 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2496 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2497 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2498 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2499 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2500 00fc 00F066BF 	    b sleep // place MCU in deep sleep
 2501 0100 7047     	    _RET
 2502              	
 2503              	/********************************************
 2504              	  BASIC: BIT(expr)
 2505              	  expr must be between 0..31 and is used 
 2506              	  to create 1 bit mask at that position
 2507              	*******************************************/
 2508 0102 00BF     	    _FUNC bitmask
 2509 0104 00B5FFF7 	    _CALL func_args
 2509      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 70


 2509      04EB
 2510 010e 0128     	    cmp r0,#1 
 2511 0110 7FF4FEAF 	    bne syntax_error 
 2512 0114 5CF8040B 	    _POP r0
 2513 0118 4FF00101 	    mov r1,#1
 2514 011c 01FA00F1 	    lsl r1,r0 
 2515 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2516 0124 7047     	    _RET 
 2517              	
 2518              	  
 2519              	  /*********************************
 2520              	   BASIC: BRES adr, mask   
 2521              	   reset bits [adr]= [adr] & ~mask  
 2522              	   input:
 2523              	     none 
 2524              	    output;
 2525              	      none 
 2526              	    use:
 2527              	      T1   temp
 2528              	      T2   temp 
 2529              	*******************************/     
 2530 0126 00BF     	  _FUNC bit_reset
 2531 0128 00B5FFF7 	    _CALL arg_list 
 2531      FEFF5DF8 
 2531      04EB
 2532 0132 0228     	    cmp r0,#2 
 2533 0134 01D0     	    beq 1f 
 2534 0136 FFF7FEBF 	    b syntax_error 
 2535 013a 5CF8041B 	1:  _POP r1 //mask 
 2536 013e 5CF8040B 	    _POP r0 //address 
 2537 0142 D0F80090 	    ldr T2,[r0] 
 2538 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2539 014a 01EA0901 	    and r1,T2
 2540 014e 0160     	    str r1,[r0]
 2541 0150 7047     	    _RET  
 2542              	
 2543              	
 2544              	/*********************************
 2545              	   BASIC: BSET adr, mask   
 2546              	   reset bits [adr]= [adr] & ~mask  
 2547              	   input:
 2548              	      none 
 2549              	    output;
 2550              	      none 
 2551              	    use:
 2552              	      T1   temp
 2553              	      T2   temp  
 2554              	*******************************/     
 2555 0152 00BF     	    _FUNC bit_set
 2556 0154 00B5FFF7 	    _CALL arg_list 
 2556      FEFF5DF8 
 2556      04EB
 2557 015e 0228     	    cmp r0,#2 
 2558 0160 01D0     	    beq 1f 
 2559 0162 FFF7FEBF 	    b syntax_error 
 2560 0166 5CF8041B 	1:  _POP r1 //mask 
 2561 016a 5CF8040B 	    _POP r0 //address 
ARM GAS  tinyBasic.s 			page 71


 2562 016e D0F80090 	    ldr T2,[r0] 
 2563 0172 41EA0901 	    orr r1,T2
 2564 0176 0160     	    str r1,[r0]
 2565 0178 7047     	    _RET 
 2566              	
 2567              	  /*********************************
 2568              	   BASIC: BTOGL adr, mask   
 2569              	   reset bits [adr]= [adr] & ~mask  
 2570              	   input:
 2571              	     r0    adr 
 2572              	     r1    mask 
 2573              	    output;
 2574              	      none 
 2575              	    use:
 2576              	      T1   temp
 2577              	      T2   temp  
 2578              	*******************************/     
 2579 017a 00BF     	  _FUNC bit_toggle
 2580 017c 00B5FFF7 	    _CALL arg_list 
 2580      FEFF5DF8 
 2580      04EB
 2581 0186 0228     	    cmp r0,#2 
 2582 0188 01D0     	    beq 1f 
 2583 018a FFF7FEBF 	    b syntax_error 
 2584 018e 5CF8041B 	1:  _POP r1 //mask 
 2585 0192 5CF8040B 	    _POP r0 //address 
 2586 0196 D0F80090 	    ldr T2,[r0] 
 2587 019a 81EA0901 	    eor r1,T2
 2588 019e 0160     	    str r1,[r0]
 2589 01a0 7047     	    _RET  
 2590              	
 2591              	/********************************
 2592              	  BASIC: BTEST(addr,bit)
 2593              	  return bit state at address
 2594              	********************************/
 2595 01a2 00BF     	    _FUNC bit_test
 2596 01a4 00B5FFF7 	    _CALL func_args
 2596      FEFF5DF8 
 2596      04EB
 2597 01ae 0228     	    cmp r0,#2 
 2598 01b0 7FF4FEAF 	    bne syntax_error 
 2599 01b4 5CF8041B 	    _POP r1
 2600 01b8 4FF00100 	    mov r0,#1
 2601 01bc 01F01F01 	    and r1,#31  
 2602 01c0 21B1     	1:  cbz r1, 2f
 2603 01c2 4FEA4000 	    lsl r0,#1
 2604 01c6 A1F10101 	    sub r1,#1
 2605 01ca F9E7     	    b 1b 
 2606 01cc 5CF8041B 	2:  _POP r1
 2607 01d0 0968     	    ldr r1,[r1]
 2608 01d2 01EA0001 	    and r1,r0 
 2609 01d6 09B1     	    cbz r1,9f 
 2610 01d8 4FF00101 	    mov r1,#1
 2611 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2612 01e0 7047     	    _RET 
 2613              	
 2614              	/********************************
ARM GAS  tinyBasic.s 			page 72


 2615              	  BASIC: CLS 
 2616              	  clear terminal screen move cursor 
 2617              	  home 
 2618              	************************************/
 2619 01e2 00BF     	    _FUNC cls 
 2620 01e4 00B5FFF7 	    _CALL clear_screen
 2620      FEFF5DF8 
 2620      04EB
 2621 01ee 7047     	    _RET 
 2622              	
 2623              	/*********************************
 2624              	  BASIC: CHAR(expr)
 2625              	  convert expr in character 
 2626              	********************************/
 2627              	    _FUNC char
 2628 01f0 00B5FFF7 	    _CALL func_args
 2628      FEFF5DF8 
 2628      04EB
 2629 01fa 0128     	    cmp r0,#1
 2630 01fc 7FF4FEAF 	    bne syntax_error 
 2631 0200 5CF8041B 	    _POP r1 
 2632 0204 01F07F01 	    and r1,#127 
 2633 0208 4FF00300 	    mov r0,#TK_CHAR
 2634 020c 7047     	    _RET 
 2635              	
 2636              	/**********************************
 2637              	  BASIC: CONST !label=expr [,!label=expr]
 2638              	  define constants constants are 
 2639              	  store at end of BASIC code.
 2640              	  use:
 2641              	    T1   *location 
 2642              	    T2   *bound 
 2643              	*********************************/
 2644 020e 00BF     	    _FUNC const
 2645 0210 206C10F0 	    _RTO 
 2645      010F03D1 
 2645      4FF00700 
 2645      FFF7FEBF 
 2646 0220 D4F8D080 	    ldr T1,[UPP,#HERE]
 2647 0224 DFF80497 	    ldr T2,pad_adr  
 2648 0228 C845     	1:  cmp T1,T2 
 2649 022a 03D4     	    bmi 2f 
 2650 022c 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2651 0230 FFF7FEBF 	    b tb_error 
 2652 0234 00B5FFF7 	2:  _CALL next_token 
 2652      FEFF5DF8 
 2652      04EB
 2653 023e 4028     	    cmp r0,#TK_LBL 
 2654 0240 7FF4FEAF 	    bne syntax_error 
 2655 0244 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2656 0248 4CF8041D 	    _PUSH r1 
 2657 024c 4FF03200 	    mov r0,#TK_EQUAL
 2658 0250 00B5FFF7 	    _CALL expect
 2658      FEFF5DF8 
 2658      04EB
 2659 025a 00B5FFF7 	    _CALL expression  
 2659      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 73


 2659      04EB
 2660 0264 0F28     	    cmp r0,#TK_INTGR
 2661 0266 7FF4FEAF 	    bne syntax_error
 2662 026a 5CF8040B 	    _POP r0 
 2663 026e 48F8040B 	    str r0,[T1],#4
 2664 0272 48F8041B 	    str r1,[T1],#4 
 2665 0276 C4F8D080 	    str T1,[UPP,#HERE]
 2666 027a 00B5FFF7 	    _CALL next_token
 2666      FEFF5DF8 
 2666      04EB
 2667 0284 0828     	    cmp r0,#TK_COMMA 
 2668 0286 CFD0     	    beq 1b 
 2669 0288 D4F800A0 	    _UNGET_TOKEN
 2669      D4F808B0 
 2670              	9:  
 2671 0290 7047     	    _RET 
 2672              	
 2673              	
 2674              	/**************************
 2675              	  BASIC: DATALN expr 
 2676              	  set data pointer to line#
 2677              	  specified by expr. 
 2678              	  if line# not valid program 
 2679              	  end with error.
 2680              	  use:
 2681              	
 2682              	**************************/
 2683 0292 00BF     	    _FUNC data_line
 2684 0294 206C10F0 	    _RTO // run time only 
 2684      010F03D1 
 2684      4FF00700 
 2684      FFF7FEBF 
 2685 02a4 00B5FFF7 	    _CALL expression 
 2685      FEFF5DF8 
 2685      04EB
 2686 02ae 0F28     	    cmp r0,#TK_INTGR
 2687 02b0 7FF4FEAF 	    bne syntax_error
 2688 02b4 0846     	    mov r0,r1 
 2689 02b6 00B5FFF7 	    _CALL search_lineno
 2689      FEFF5DF8 
 2689      04EB
 2690 02c0 0029     	    cmp r1,#0
 2691 02c2 03D0     	    beq 1f 
 2692 02c4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2693 02c8 FFF7FEBF 	    b syntax_error 
 2694 02cc C178     	1:  ldrb r1,[r0,#3]
 2695 02ce 0B29     	    cmp r1,#TK_CMD 
 2696 02d0 F8D1     	    bne 0b
 2697 02d2 0179     	    ldrb r1,[r0,#4]
 2698 02d4 0C29     	    cmp r1,#DATA_IDX 
 2699 02d6 F5D1     	    bne 0b  
 2700 02d8 E060     	    str r0,[UPP,#DATAPTR]
 2701 02da 8178     	    ldrb r1,[r0,#2]
 2702 02dc 6161     	    str r1,[UPP,#DATALEN]
 2703 02de 4FF00501 	    mov r1,#5 // position of first data item  
 2704 02e2 2161     	    str r1,[UPP,#DATA]
 2705 02e4 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 74


 2706              	
 2707              	/*****************************
 2708              	  BASIC: READ 
 2709              	  read next data item 
 2710              	  the value can be assigned to
 2711              	  variable or used in expression
 2712              	*****************************/
 2713 02e6 00BF     	    _FUNC read
 2714 02e8 206C10F0 	    _RTO
 2714      010F03D1 
 2714      4FF00700 
 2714      FFF7FEBF 
 2715 02f8 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2716 02fa E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2717 02fc 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2718 02fe 8242     	    cmp r2,r0
 2719 0300 0ED0     	    beq seek_next
 2720 0302 885C     	1:  ldrb r0,[r1,r2]
 2721 0304 02F10102 	    add r2,#1
 2722 0308 0028     	    cmp r0,#TK_NONE
 2723 030a 09D0     	    beq seek_next
 2724 030c 0828     	    cmp r0,#TK_COMMA
 2725 030e F8D0     	    beq 1b  
 2726 0310 0F28     	    cmp r0,#TK_INTGR 
 2727 0312 7FF4FEAF 	    bne syntax_error  
 2728 0316 8958     	    ldr r1,[r1,r2]
 2729 0318 02F10402 	    add r2,#4
 2730 031c 2261     	    str r2,[UPP,#DATA]
 2731 031e 12E0     	    b 9f  
 2732              	seek_next: // is next line data ?
 2733 0320 8878     	    ldrb r0,[R1,#2]
 2734 0322 0144     	    add r1,r0 
 2735 0324 C878     	    ldrb r0,[R1,#3]
 2736 0326 0B28     	    cmp r0,#TK_CMD
 2737 0328 09D1     	    bne 2f 
 2738 032a 0879     	    ldrb r0,[r1,#4]
 2739 032c 0C28     	    cmp r0,#DATA_IDX 
 2740 032e 06D1     	    bne 2f 
 2741 0330 E160     	    str r1,[UPP,#DATAPTR]
 2742 0332 8878     	    ldrb r0,[r1,#2]
 2743 0334 6061     	    str  r0,[UPP,#DATALEN]
 2744 0336 4FF00502 	    mov r2,#5 
 2745 033a 2261     	    str r2,[UPP,#DATA]
 2746 033c E1E7     	    b 1b 
 2747 033e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2748 0342 FFF7FEBF 	    b tb_error 
 2749 0346 7047     	9:  _RET 
 2750              	
 2751              	/********************************
 2752              	  BASIC: RESTORE 
 2753              	  seek first data line 
 2754              	********************************/
 2755              	    _FUNC restore
 2756 0348 206C10F0 	    _RTO 
 2756      010F03D1 
 2756      4FF00700 
 2756      FFF7FEBF 
ARM GAS  tinyBasic.s 			page 75


 2757 0358 216B     	    ldr r1,[UPP,#TXTBGN]
 2758 035a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2759 035c 0FD0     	    beq no_data_line 
 2760 035e 0879     	    ldrb r0,[r1,#4]
 2761 0360 0C28     	    cmp r0,#DATA_IDX
 2762 0362 09D1     	    bne try_next_line
 2763 0364 C878     	    ldrb r0,[r1,#3]
 2764 0366 0B28     	    cmp r0,#TK_CMD
 2765 0368 06D1     	    bne try_next_line
 2766              	// this a the first data line 
 2767 036a E160     	    str r1,[UPP,#DATAPTR]
 2768 036c 8878     	    ldrb r0,[r1,#2]
 2769 036e 6061     	    str r0,[UPP,#DATALEN]
 2770 0370 4FF00500 	    mov r0,#5 
 2771 0374 2061     	    str r0,[UPP,#DATA]
 2772 0376 07E0     	    b 9f
 2773              	try_next_line:
 2774 0378 8878     	    ldrb r0,[r1,#2]
 2775 037a 0144     	    add r1,r0 
 2776 037c EDE7     	    b 1b 
 2777              	no_data_line:
 2778 037e 80EA0000 	    eor r0,r0 
 2779 0382 E060     	    str r0,[UPP,#DATAPTR]
 2780 0384 2061     	    str r0,[UPP,#DATA]
 2781 0386 6061     	    str r0,[UPP,#DATALEN]
 2782 0388 7047     	9:  _RET 
 2783              	
 2784              	/***********************************
 2785              	  BASIC: DEC 
 2786              	  switch base to decimal 
 2787              	***********************************/
 2788 038a 00BF     	    _FUNC dec_base
 2789 038c 4FF00A00 	    mov r0,#10
 2790 0390 A061     	    str r0,[UPP,#BASE]
 2791 0392 7047     	    _RET 
 2792              	
 2793              	/***************************************
 2794              	  BASIC: DO 
 2795              	  initialize a DO..UNTIL loop 
 2796              	***************************************/
 2797              	    _FUNC do_loop
 2798 0394 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2799 0398 7047     	    _RET 
 2800              	
 2801              	
 2802              	/****************************************
 2803              	  BASIC: DUMP adr, count 
 2804              	    command line only  
 2805              	    print memory content in hexadecimal 
 2806              	    16 bytes per row 
 2807              	    ouput:
 2808              	      none 
 2809              	    use:
 2810              	      r2   byte counter  
 2811              	****************************************/
 2812 039a 00BF     	    _FUNC dump 
 2813 039c 04B4     	    push {r2}
ARM GAS  tinyBasic.s 			page 76


 2814 039e 226C     	    ldr r2,[UPP,#FLAGS]
 2815 03a0 12F0010F 	    tst r2,#FRUN 
 2816 03a4 03D0     	    beq 0f
 2817 03a6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2818 03aa FFF7FEBF 	    b tb_error  
 2819 03ae 00B5FFF7 	0:  _CALL arg_list 
 2819      FEFF5DF8 
 2819      04EB
 2820 03b8 0228     	    cmp r0,#2
 2821 03ba 7FF4FEAF 	    bne syntax_error 
 2822 03be 5CF8042B 	    _POP r2   // count 
 2823 03c2 5CF8040B 	    _POP  r0  // adr 
 2824              	dump01:
 2825 03c6 00B500F0 	    _CALL print_dump_header 
 2825      0EF85DF8 
 2825      04EB
 2826 03d0 4FF01001 	1:  mov r1,#16
 2827 03d4 00B5FFF7 	    _CALL prt_row 
 2827      FEFF5DF8 
 2827      04EB
 2828 03de 103A     	    subs r2,#16 
 2829 03e0 F6D5     	    bpl 1b 
 2830 03e2 04BC     	2:  pop {r2}
 2831 03e4 7047     	    _RET 
 2832              	
 2833              	/********************************
 2834              	   print_dump_header
 2835              	********************************/
 2836 03e6 00BF     	    _FUNC print_dump_header
 2837 03e8 2DE90103 	    push {r0,T1,T2}
 2838 03ec 4FF00C00 	    mov r0,#12 
 2839 03f0 00B5FFF7 	    _CALL cursor_x 
 2839      FEFF5DF8 
 2839      04EB
 2840 03fa 4FF00000 	    mov r0,#0
 2841 03fe 4FF01009 	    mov T2,#16
 2842 0402 8046     	1:  mov T1,r0 
 2843 0404 00B5FFF7 	    _CALL print_hex 
 2843      FEFF5DF8 
 2843      04EB
 2844 040e 08F10100 	    add r0,T1,#1  
 2845 0412 4845     	    cmp r0,T2 
 2846 0414 F5D4     	    bmi 1b 
 2847 0416 00B5FFF7 	    _CALL cr
 2847      FEFF5DF8 
 2847      04EB
 2848 0420 4FF03D00 	    mov r0,#'='
 2849 0424 4FF04F08 	    mov T1,#79
 2850 0428 00B5FFF7 	2:  _CALL uart_putc
 2850      FEFF5DF8 
 2850      04EB
 2851 0432 B8F10108 	    subs T1,#1 
 2852 0436 F7D1     	    bne 2b     
 2853 0438 00B5FFF7 	    _CALL cr
 2853      FEFF5DF8 
 2853      04EB
 2854 0442 BDE80103 	    pop {r0,T1,T2}
ARM GAS  tinyBasic.s 			page 77


 2855 0446 7047     	    _RET 
 2856              	
 2857              	
 2858              	/*******************************
 2859              	  BASIC: END 
 2860              	  exit program 
 2861              	******************************/ 
 2862              	    _FUNC cmd_end
 2863 0448 FFF7FEBF 	    b warm_start 
 2864 044c 7047     	    _RET 
 2865              	
 2866              	/*******************************************
 2867              	  BASIC: STORE adr, value 
 2868              	  write value to user space in flash memory 
 2869              	*********************************************/
 2870 044e 00BF     	    _FUNC store 
 2871 0450 00B5FFF7 	    _CALL arg_list 
 2871      FEFF5DF8 
 2871      04EB
 2872 045a 0228     	    cmp r0,#2 
 2873 045c 7FF4FEAF 	    bne syntax_error 
 2874 0460 BCE80300 	    ldmia DP!,{r0,r1}
 2875 0464 DFF83020 	    ldr r2,user_space
 2876 0468 9142     	    cmp r1,r2 
 2877 046a 03D5     	    bpl 1f 
 2878 046c 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2879 0470 FFF7FEBF 	    b tb_error 
 2880 0474 02F58062 	1:  add r2,#1024 
 2881 0478 9142     	    cmp r1,r2 
 2882 047a F7D5     	    bpl 0b 
 2883 047c 00B5FFF7 	    _CALL flash_store 
 2883      FEFF5DF8 
 2883      04EB
 2884 0486 7047     	    _RET 
 2885              	
 2886              	/**************************************************
 2887              	  BASIC: ERASE 
 2888              	  erase user space page 
 2889              	*************************************************/
 2890              	    _FUNC erase 
 2891 0488 DFF80C00 	    ldr r0,user_space 
 2892 048c 00B5FFF7 	    _CALL erase_page 
 2892      FEFF5DF8 
 2892      04EB
 2893 0496 7047     	    _RET 
 2894 0498 00000000 	user_space: .word user 
 2895              	
 2896              	
 2897              	/**************************************************
 2898              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2899              	  introdure FOR...NEXT loop 
 2900              	**************************************************/
 2901              	    _FUNC for
 2902 049c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2903 04a0 4FF00107 	    mov INCR,#1
 2904 04a4 00B5FFF7 	    _CALL next_token
 2904      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 78


 2904      04EB
 2905 04ae 0428     	    cmp r0,#TK_VAR
 2906 04b0 7FF4FEAF 	    bne syntax_error
 2907 04b4 02B4     	    push {r1} 
 2908 04b6 00B500F0 	    _CALL let_var 
 2908      25F95DF8 
 2908      04EB
 2909 04c0 20BC     	    pop {VADR}
 2910 04c2 4FEA8505 	    lsl VADR,#2
 2911 04c6 2544     	    add VADR,UPP 
 2912 04c8 05F16005 	    add VADR,#VARS 
 2913 04cc 7047     	    _RET 
 2914              	
 2915              	/***************************************
 2916              	  BASIC: TO expr 
 2917              	  set limit of FOR...NEXT loop 
 2918              	**************************************/
 2919 04ce 00BF     	    _FUNC to
 2920 04d0 00B5FFF7 	    _CALL expression 
 2920      FEFF5DF8 
 2920      04EB
 2921 04da 0F28     	    cmp r0,#TK_INTGR
 2922 04dc 7FF4FEAF 	    bne syntax_error 
 2923 04e0 0E46     	    mov LIMIT,r1
 2924              	    // save loop back parameters 
 2925 04e2 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2926 04e6 7047     	    _RET 
 2927              	
 2928              	/********************************************
 2929              	  BASIC: STEP expr 
 2930              	  set increment for FOR...NEXT loop 
 2931              	********************************************/
 2932              	    _FUNC step
 2933 04e8 00B5FFF7 	    _CALL expression 
 2933      FEFF5DF8 
 2933      04EB
 2934 04f2 0F28     	    cmp r0,#TK_INTGR
 2935 04f4 7FF4FEAF 	    bne syntax_error 
 2936 04f8 0F46     	    mov INCR,r1
 2937              	    // replace parameters left by TO
 2938 04fa 8CE8000C 	    stmia DP, {IN,BPTR}
 2939 04fe 7047     	    _RET 
 2940              	
 2941              	/********************************************
 2942              	  BASIC: NEXT var 
 2943              	  incrment FOR...NEXT loop variable
 2944              	  exit if variable cross LIMIT 
 2945              	********************************************/
 2946              	    _FUNC next
 2947 0500 00B5FFF7 	    _CALL next_token 
 2947      FEFF5DF8 
 2947      04EB
 2948 050a 0428     	    cmp r0,#TK_VAR 
 2949 050c 7FF4FEAF 	    bne syntax_error 
 2950 0510 4FEA8101 	    lsl r1,#2 
 2951 0514 2144     	    add r1,UPP 
 2952 0516 01F16001 	    add r1,#VARS 
ARM GAS  tinyBasic.s 			page 79


 2953 051a A942     	    cmp r1,VADR
 2954 051c 7FF4FEAF 	    bne syntax_error 
 2955 0520 2868     	    ldr r0,[VADR]
 2956 0522 3844     	    add r0,INCR 
 2957 0524 2860     	    str r0,[VADR]
 2958 0526 002F     	    cmp INCR,#0
 2959 0528 02D4     	    bmi 2f
 2960 052a B042     	    cmp r0,LIMIT 
 2961 052c 02DC     	    bgt 8f  
 2962 052e 07E0     	    b 9f  
 2963 0530 B042     	2:  cmp r0,LIMIT 
 2964 0532 05DA     	    bge 9f  
 2965              	8: // exit for...next
 2966              	  //  drop branch parameters
 2967 0534 4FF00800 	    _DROP 2
 2967      8444
 2968              	  // restore outer loop parameters
 2969 053a BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2970 053e 7047     	    _RET 
 2971 0540 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2972 0544 9BF80200 	    ldrb r0,[BPTR,#2]
 2973 0548 6060     	    str r0,[UPP,#COUNT]
 2974 054a 00B5FFF7 	    _CALL show_trace 
 2974      FEFF5DF8 
 2974      04EB
 2975 0554 7047     	    _RET 
 2976              	
 2977              	
 2978              	/*********************************
 2979              	  BASIC: GOSUB expr 
 2980              	  call a subroutine at line# 
 2981              	*********************************/
 2982 0556 00BF     	    _FUNC gosub
 2983 0558 00B5FFF7 	    _CALL search_target 
 2983      FEFF5DF8 
 2983      04EB
 2984 0562 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2985              	target:
 2986 0566 8346     	    mov BPTR,r0 
 2987 0568 4FF0030A 	    mov IN,#3 
 2988 056c 9BF80200 	    ldrb r0,[BPTR,#2]
 2989 0570 6060     	    str r0,[UPP,#COUNT]
 2990 0572 00B5FFF7 	    _CALL show_trace 
 2990      FEFF5DF8 
 2990      04EB
 2991 057c 7047     	    _RET 
 2992              	
 2993              	/**********************************
 2994              	  BASIC: RETURN 
 2995              	  leave a subroutine 
 2996              	*********************************/
 2997 057e 00BF     	    _FUNC return 
 2998 0580 BCE8000C 	    ldmia DP!,{IN,BPTR}
 2999 0584 9BF80200 	    ldrb r0,[BPTR,#2]
 3000 0588 6060     	    str r0,[UPP,#COUNT]
 3001 058a 00B5FFF7 	    _CALL show_trace 
 3001      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 80


 3001      04EB
 3002 0594 7047     	    _RET 
 3003              	
 3004              	/**********************************
 3005              	  BASIC: GOTO expr 
 3006              	  go to line # | label 
 3007              	**********************************/
 3008 0596 00BF     	    _FUNC goto
 3009 0598 00B5FFF7 	    _CALL search_target 
 3009      FEFF5DF8 
 3009      04EB
 3010 05a2 E0E7     	    b target  
 3011              	
 3012              	/***************************************
 3013              	  BASIC: HEX 
 3014              	  set numeric base to hexadecimal 
 3015              	***************************************/
 3016              	    _FUNC hex_base
 3017 05a4 4FF01000 	    mov r0,#16 
 3018 05a8 A061     	    str r0,[UPP,#BASE]
 3019 05aa 7047     	    _RET 
 3020              	
 3021              	/**********************************************
 3022              	  BASIC: IF relation THEN statement
 3023              	  execute statement only if relation is true
 3024              	*********************************************/
 3025              	    _FUNC if
 3026 05ac 00B5FFF7 	    _CALL relation 
 3026      FEFF5DF8 
 3026      04EB
 3027 05b6 09B9     	    cbnz r1,9f 
 3028 05b8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 3029 05bc 7047     	9:  _RET 
 3030              	
 3031              	/*******************************************************
 3032              	  BASIC: THEN statement
 3033              	  statements following THEN are executed if relation is !=0
 3034              	  optional, retained for compatibility.
 3035              	******************************************************/
 3036 05be 00BF     	    _FUNC then 
 3037              	// do nothing 
 3038 05c0 7047     	    _RET
 3039              	
 3040              	/****************************************
 3041              	  BASIC: INPUT [string]var [,[string]var]+
 3042              	  prompt user for variable value
 3043              	***************************************/
 3044 05c2 00BF     	     _FUNC input_var
 3045 05c4 2DE90401 	    push {r2,T1}
 3046 05c8 00B5FFF7 	1:  _CALL next_token 
 3046      FEFF5DF8 
 3046      04EB
 3047 05d2 0228     	    cmp r0,#2
 3048 05d4 67D4     	    bmi 8f 
 3049 05d6 0228     	    cmp r0,#TK_QSTR 
 3050 05d8 12D1     	    bne 2f 
 3051 05da 0846     	    mov r0,r1
ARM GAS  tinyBasic.s 			page 81


 3052 05dc DFF8D810 	    ldr r1,str_buffer
 3053 05e0 00B5FFF7 	    _CALL strcpy
 3053      FEFF5DF8 
 3053      04EB
 3054 05ea 4FF00400 	    mov r0,#TK_VAR   
 3055 05ee 00B5FFF7 	    _CALL expect 
 3055      FEFF5DF8 
 3055      04EB
 3056 05f8 8846     	    mov T1,r1 
 3057 05fa DFF8BC00 	    ldr r0,str_buffer 
 3058 05fe 08E0     	    b 3f 
 3059 0600 0428     	2:  cmp r0,#TK_VAR 
 3060 0602 7FF4FEAF 	    bne syntax_error     
 3061 0606 8846     	    mov T1,r1 
 3062 0608 01F14100 	    add r0,r1,#'A' 
 3063 060c 2A49     	    ldr r1,str_buffer
 3064 060e 0880     	    strh r0,[r1]
 3065 0610 0846     	    mov r0,r1 
 3066 0612 00B5FFF7 	3:  _CALL uart_puts  
 3066      FEFF5DF8 
 3066      04EB
 3067 061c 4FF03D00 	    mov r0,#'='
 3068 0620 00B5FFF7 	    _CALL uart_putc
 3068      FEFF5DF8 
 3068      04EB
 3069 062a DFF88800 	    ldr r0,input_buffer
 3070 062e 4FF02201 	    mov r1,#34 
 3071 0632 00B5FFF7 	    _CALL readln
 3071      FEFF5DF8 
 3071      04EB
 3072 063c 31B3     	    cbz r1,6f
 3073 063e 0178     	    ldrb r1,[r0]
 3074 0640 01B4     	    push {r0}
 3075 0642 0846     	    mov r0,r1
 3076 0644 00B5FFF7 	    _CALL is_letter 
 3076      FEFF5DF8 
 3076      04EB
 3077 064e 01BC     	    pop {r0}
 3078 0650 02D1     	    bne 3f 
 3079 0652 01F05F01 	    and r1,#0x5f // uppercase  
 3080 0656 19E0     	    b 6f 
 3081 0658 2429     	3:  cmp r1,#'$'
 3082 065a 04D1     	    bne 3f 
 3083 065c 4FF01001 	    mov r1,#16
 3084 0660 00F10100 	    add r0,#1  
 3085 0664 08E0     	    b 5f 
 3086 0666 2629     	3:  cmp r1,#'&' 
 3087 0668 04D1     	    bne 4f 
 3088 066a 4FF00201 	    mov r1,#2
 3089 066e 00F10100 	    add r0,#1 
 3090 0672 01E0     	    b 5f 
 3091 0674 4FF00A01 	4:  mov r1,#10 
 3092 0678 00B5FFF7 	5:  _CALL atoi 
 3092      FEFF5DF8 
 3092      04EB
 3093 0682 18B9     	    cbnz r0,6f
 3094 0684 4FF00A00 	    mov r0,#ERR_BAD_VALUE
ARM GAS  tinyBasic.s 			page 82


 3095 0688 FFF7FEBF 	    b tb_error
 3096 068c 4046     	6:  mov r0,T1 
 3097 068e 00B5FFF7 	    _CALL set_var
 3097      FEFF5DF8 
 3097      04EB
 3098 0698 00B5FFF7 	    _CALL next_token
 3098      FEFF5DF8 
 3098      04EB
 3099 06a2 0828     	    cmp r0,#TK_COMMA 
 3100 06a4 90D0     	    beq 1b 
 3101 06a6 D4F800A0 	8:  _UNGET_TOKEN          
 3101      D4F808B0 
 3102 06ae BDE80401 	9:  pop {r2,T1}       
 3103 06b2 7047     	    _RET 
 3104 06b4 00000000 	input_buffer: .word _tib 
 3105 06b8 00000000 	str_buffer: .word _pad 
 3106              	
 3107              	
 3108              	/*****************************************
 3109              	  BASIC: INVERT(expr)
 3110              	  return 1's complement of expr
 3111              	****************************************/
 3112              	    _FUNC invert
 3113 06bc 00B5FFF7 	    _CALL func_args
 3113      FEFF5DF8 
 3113      04EB
 3114 06c6 0128     	    cmp r0,#1 
 3115 06c8 7FF4FEAF 	    bne syntax_error
 3116 06cc 5CF8041B 	    _POP r1  
 3117 06d0 6FEA0101 	    mvn r1,r1
 3118 06d4 4FF00F00 	    mov r0,#TK_INTGR
 3119 06d8 7047     	    _RET 
 3120              	
 3121              	/*************************************
 3122              	  BASIC: KEY 
 3123              	  wait for a character from console
 3124              	*************************************/
 3125 06da 00BF     	    _FUNC key
 3126 06dc 00B5FFF7 	    _CALL uart_getc
 3126      FEFF5DF8 
 3126      04EB
 3127 06e6 0146     	    mov r1,r0
 3128 06e8 4FF00300 	    mov r0,#TK_CHAR 
 3129 06ec 7047     	    _RET  
 3130              	
 3131              	/******************************
 3132              	  BASIC: [LET] var=expr 
 3133              	         [LET] @(expr)=expr
 3134              	  input:
 3135              	    none 
 3136              	  output:
 3137              	    none 
 3138              	  use:
 3139              	
 3140              	****************************/         
 3141 06ee 00BF     	    _FUNC let
 3142 06f0 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 83


 3142      FEFF5DF8 
 3142      04EB
 3143 06fa 0428     	    cmp r0,#TK_VAR
 3144 06fc 03D0     	    beq let_var 
 3145 06fe 0528     	    cmp r0,#TK_ARRAY 
 3146 0700 07D0     	    beq let_array 
 3147 0702 FFF7FEBF 	    b syntax_error 
 3148              	let_var:
 3149 0706 4FEA8101 	    lsl r1,#2
 3150 070a 04F16000 	    add r0,UPP,#VARS
 3151 070e 0844     	    add r0,r1
 3152 0710 1FE0     	    b 1f 
 3153              	let_array: 
 3154 0712 4FF00600 	    mov r0,#TK_LPAREN
 3155 0716 00B5FFF7 	    _CALL expect 
 3155      FEFF5DF8 
 3155      04EB
 3156 0720 00B5FFF7 	    _CALL expression
 3156      FEFF5DF8 
 3156      04EB
 3157 072a 0F28     	    cmp r0,#TK_INTGR 
 3158 072c 7FF4FEAF 	    bne syntax_error
 3159 0730 4CF8041D 	    _PUSH r1 
 3160 0734 4FF00700 	    mov r0,#TK_RPAREN
 3161 0738 00B5FFF7 	    _CALL expect 
 3161      FEFF5DF8 
 3161      04EB
 3162 0742 5CF8041B 	    _POP r1 
 3163 0746 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3164 074a 4FEA8101 	    lsl r1,#2 
 3165 074e A0EB0100 	    sub r0,r1 
 3166 0752 4CF8040D 	1:  _PUSH r0 
 3167 0756 4FF03200 	    mov r0,#TK_EQUAL 
 3168 075a 00B5FFF7 	    _CALL expect 
 3168      FEFF5DF8 
 3168      04EB
 3169 0764 00B5FFF7 	    _CALL expression   
 3169      FEFF5DF8 
 3169      04EB
 3170 076e 0F28     	    cmp r0,#TK_INTGR
 3171 0770 7FF4FEAF 	    bne syntax_error   
 3172 0774 5CF8040B 	2:  _POP r0 
 3173 0778 0160     	    str r1,[r0]
 3174 077a 7047     	    _RET  
 3175              	
 3176              	/***************************************
 3177              	  BASIC: LIST [[first]-last]
 3178              	  use:
 3179              	    r2   first line# 
 3180              	    r3   last line#
 3181              	    T1   *line 
 3182              	    T2   TXTEND 
 3183              	**************************************/  
 3184              	    _FUNC list
 3185 077c 206C10F0 	    _CLO
 3185      010F03D0 
 3185      4FF00700 
ARM GAS  tinyBasic.s 			page 84


 3185      FFF7FEBF 
 3186 078c D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3187 0790 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3188 0794 B8F80020 	    ldrh r2,[T1]
 3189 0798 4FF6FF73 	    mov r3,#65535 
 3190 079c 00B5FFF7 	    _CALL next_token 
 3190      FEFF5DF8 
 3190      04EB
 3191 07a6 10B3     	    cbz r0,6f 
 3192 07a8 0F28     	    cmp r0,#TK_INTGR
 3193 07aa 09D1     	    bne 1f 
 3194 07ac 0A46     	    mov r2,r1 // first line
 3195 07ae 00B5FFF7 	    _CALL next_token
 3195      FEFF5DF8 
 3195      04EB
 3196 07b8 0028     	    cmp r0,#TK_NONE 
 3197 07ba 01D1     	    bne 1f 
 3198 07bc 1346     	    mov r3,r2 
 3199 07be 0CE0     	    b 4f 
 3200 07c0 1128     	1:  cmp r0,#TK_MINUS 
 3201 07c2 7FF4FEAF 	    bne syntax_error 
 3202 07c6 00B5FFF7 	    _CALL next_token 
 3202      FEFF5DF8 
 3202      04EB
 3203 07d0 18B1     	    cbz r0,4f 
 3204 07d2 0F28     	    cmp r0,#TK_INTGR
 3205 07d4 7FF4FEAF 	    bne syntax_error  
 3206 07d8 0B46     	    mov r3,r1 
 3207              	4:  // skip lines below r2 
 3208 07da B8F80000 	    ldrh r0,[T1]
 3209 07de 9042     	    cmp r0,r2 
 3210 07e0 05D5     	    bpl 6f 
 3211 07e2 98F80200 	    ldrb r0,[T1,#2]
 3212 07e6 8044     	    add T1,r0
 3213 07e8 C845     	    cmp T1,T2 
 3214 07ea F6D4     	    bmi 4b
 3215 07ec 1AE0     	    b 9f 
 3216 07ee C845     	6:  cmp T1,T2  
 3217 07f0 18D5     	    bpl 9f
 3218 07f2 4046     	    mov r0,T1   
 3219 07f4 DFF83010 	    ldr r1,out_buff 
 3220 07f8 00B5FFF7 	    _CALL decompile_line 
 3220      FEFF5DF8 
 3220      04EB
 3221 0802 00B5FFF7 	    _CALL uart_puts 
 3221      FEFF5DF8 
 3221      04EB
 3222 080c 00B5FFF7 	    _CALL cr 
 3222      FEFF5DF8 
 3222      04EB
 3223 0816 98F80200 	    ldrb r0,[T1,#2]
 3224 081a 8044     	    add T1,r0
 3225 081c B8F80000 	    ldrh r0,[T1]
 3226 0820 9842     	    cmp r0,r3 
 3227 0822 E4DD     	    ble 6b 
 3228 0824 FFF7FEBF 	9:  b warm_start 
 3229 0828 00000000 	out_buff: .word _tib 
ARM GAS  tinyBasic.s 			page 85


 3230              	
 3231              	/********************************
 3232              	  BASIC: LOCATE line,col
 3233              	  return log base 2 of expr 
 3234              	********************************/
 3235              	    _FUNC locate
 3236 082c 00B5FFF7 	    _CALL arg_list 
 3236      FEFF5DF8 
 3236      04EB
 3237 0836 0228     	    cmp r0,#2 
 3238 0838 7FF4FEAF 	    bne syntax_error
 3239 083c 5CF8041B 	    _POP r1
 3240 0840 5CF8040B 	    _POP r0  
 3241 0844 00B5FFF7 	    _CALL set_curpos 
 3241      FEFF5DF8 
 3241      04EB
 3242 084e 7047     	    _RET 
 3243              	
 3244              	
 3245              	/****************************************
 3246              	  BASIC: LSHIFT(expr1,expr2)
 3247              	  shift right expr1 of expr2 bits 
 3248              	****************************************/
 3249              	    _FUNC lshift
 3250 0850 00B5FFF7 	    _CALL func_args
 3250      FEFF5DF8 
 3250      04EB
 3251 085a 0228     	    cmp r0,#2
 3252 085c 7FF4FEAF 	    bne syntax_error 
 3253 0860 BCE80300 	    ldmia DP!,{r0,r1}
 3254 0864 01FA00F1 	    lsl r1,r0 
 3255 0868 4FF00F00 	    mov r0,#TK_INTGR
 3256 086c 7047     	    _RET 
 3257              	
 3258              	/***********************************
 3259              	  BASIC: NEW 
 3260              	  delete existing program in memory
 3261              	  and clear variables and RAM 
 3262              	***********************************/
 3263 086e 00BF     	    _FUNC new
 3264 0870 206C10F0 	    _CLO 
 3264      010F03D0 
 3264      4FF00700 
 3264      FFF7FEBF 
 3265 0880 00B5FFF7 	    _CALL clear_basic 
 3265      FEFF5DF8 
 3265      04EB
 3266 088a FFF7FEBF 	    b warm_start   
 3267              	
 3268              	/************************************
 3269              	  BASIC: NOT relation  
 3270              	  invert logical value or relation
 3271              	************************************/
 3272 088e 00BF     	      _FUNC func_not
 3273 0890 00B5FFF7 	      _CALL relation 
 3273      FEFF5DF8 
 3273      04EB
ARM GAS  tinyBasic.s 			page 86


 3274 089a 11B1     	      cbz r1,8f 
 3275 089c 81EA0101 	      eor r1,r1
 3276 08a0 01E0     	      b 9f 
 3277 08a2 4FF0FF31 	  8:  mov r1,#-1
 3278 08a6 7047     	  9:  _RET 
 3279              	
 3280              	/******************************************
 3281              	  BASIC: OR(expr1,expr2)
 3282              	  binary OR between 2 expressions
 3283              	******************************************/
 3284              	    _FUNC bit_or
 3285 08a8 00B5FFF7 	    _CALL func_args
 3285      FEFF5DF8 
 3285      04EB
 3286 08b2 0228     	    cmp r0,#2
 3287 08b4 7FF4FEAF 	    bne syntax_error
 3288 08b8 5CF8040B 	    _POP r0 
 3289 08bc 5CF8041B 	    _POP r1
 3290 08c0 41EA0001 	    orr r1,r0 
 3291 08c4 4FF00F00 	    mov r0,#TK_INTGR
 3292 08c8 7047     	    _RET 
 3293              	
 3294              	/****************************************
 3295              	  BASIC: IN(gpio,pin) 
 3296              	  read gpio_idr selected pin  
 3297              	***************************************/
 3298 08ca 00BF     	    _FUNC pin_input 
 3299 08cc 00B5FFF7 	    _CALL func_args 
 3299      FEFF5DF8 
 3299      04EB
 3300 08d6 0228     	    cmp r0,#2 
 3301 08d8 7FF4FEAF 	    bne syntax_error  
 3302 08dc BCE80300 	    ldmia DP!,{r0,r1}
 3303 08e0 4FF00802 	    mov r2,#GPIO_IDR 
 3304 08e4 8A58     	    ldr r2,[r1,r2]
 3305 08e6 00F00F00 	    and r0,#15 
 3306 08ea 22FA00F2 	    lsr r2,r0 
 3307 08ee 02F00101 	    and r1,r2,#1 
 3308 08f2 4FF00F00 	    mov r0,#TK_INTGR
 3309 08f6 7047     	    _RET 
 3310              	
 3311              	
 3312              	/****************************************
 3313              	  BASIC: OUT gpio,pin,value 
 3314              	   output to gpio_odr
 3315              	***************************************/
 3316              	    _FUNC out
 3317 08f8 00B5FFF7 	    _CALL arg_list 
 3317      FEFF5DF8 
 3317      04EB
 3318 0902 0328     	    cmp r0,#3 
 3319 0904 7FF4FEAF 	    bne syntax_error 
 3320 0908 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3321 090c 4FF01003 	    mov r3,#GPIO_BSRR
 3322 0910 08B9     	    cbnz r0,1f 
 3323 0912 01F11001 	    add r1,#16 
 3324 0916 4FF00100 	1:  mov r0,#1 
ARM GAS  tinyBasic.s 			page 87


 3325 091a 00FA01F0 	    lsl r0,r1 
 3326 091e D050     	    str r0,[r2,r3]    
 3327 0920 7047     	    _RET 
 3328              	
 3329              	
 3330              	/****************************************
 3331              	  BASIC: PAD 
 3332              	  return pad buffer address 
 3333              	****************************************/
 3334 0922 00BF     	    _FUNC pad_ref
 3335 0924 0149     	    ldr r1,pad_adr  
 3336 0926 4FF00F00 	    mov r0,#TK_INTGR 
 3337 092a 7047     	    _RET 
 3338 092c 00000000 	pad_adr: .word _pad 
 3339              	
 3340              	/***********************
 3341              	  BASIC: PAUSE expr 
 3342              	  suspend execution for 
 3343              	  expr milliseconds 
 3344              	************************/
 3345              	    _FUNC pause
 3346 0930 00B5FFF7 	    _CALL expression 
 3346      FEFF5DF8 
 3346      04EB
 3347 093a 0F28     	    cmp r0,#TK_INTGR 
 3348 093c 7FF4FEAF 	    bne syntax_error 
 3349 0940 E069     	    ldr r0,[UPP,#TICKS]
 3350 0942 0844     	    add r0,r1 
 3351 0944 E169     	1:  ldr r1,[UPP,#TICKS]
 3352 0946 8842     	    cmp r0,r1 
 3353 0948 FCD1     	    bne 1b     
 3354 094a 7047     	    _RET 
 3355              	
 3356              	/***************************************************
 3357              	  BASIC: PMODE \c,pin,mode[,opt] 
 3358              	  configure a digital pin for input|output
 3359              	  paramters:
 3360              	    \c    port letter
 3361              	    pin   pin {0..15} 
 3362              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3363              	    for input mode:
 3364              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3365              	    for output mode:
 3366              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3367              	  use:
 3368              	    r2  opt
 3369              	    r3  mode 
 3370              	    T1  pin  
 3371              	    T2  port      
 3372              	***************************************************/
 3373              	      _FUNC pin_mode
 3374 094c 4FF00300 	      mov r0,#TK_CHAR 
 3375 0950 00B5FFF7 	      _CALL expect
 3375      FEFF5DF8 
 3375      04EB
 3376 095a 0846     	      mov r0,r1 
 3377 095c 00B5FFF7 	      _CALL upper 
ARM GAS  tinyBasic.s 			page 88


 3377      FEFF5DF8 
 3377      04EB
 3378 0966 A0F14109 	      sub T2,r0,#'A'
 3379 096a 4FF00800 	      mov r0,#TK_COMMA
 3380 096e 00B5FFF7 	      _CALL expect 
 3380      FEFF5DF8 
 3380      04EB
 3381 0978 00B5FFF7 	      _CALL arg_list
 3381      FEFF5DF8 
 3381      04EB
 3382 0982 0228     	      cmp r0,#2 
 3383 0984 3FF5FEAF 	      bmi syntax_error
 3384 0988 0428     	      cmp r0,#4
 3385 098a 01D4     	      bmi 1f 
 3386 098c FFF7FEBF 	      b syntax_error
 3387 0990 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3388 0994 0228     	      cmp r0,#2
 3389 0996 02D0     	      beq 2f 
 3390              	// 3 parameters, pin,mode,opt  
 3391 0998 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3392 099c 01E0     	    b 4f  
 3393              	2: // 2 parameters, pin,mode 
 3394 099e BCE80801 	    ldmia DP!,{r3,T1}
 3395 09a2 4FF48060 	4:  mov r0,#0x400 
 3396 09a6 00FB09F9 	    mul T2,r0 
 3397 09aa 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3397      C4F20100 
 3398 09b2 8144     	    add T2,r0 // port base address 
 3399              	// if input mode set pull in ODR 
 3400 09b4 83B9     	    cbnz r3,2f 
 3401 09b6 022A     	    cmp r2,#2
 3402 09b8 0ED4     	    bmi 2f 
 3403 09ba 4FF00100 	    mov r0,#1 
 3404 09be 4146     	    mov r1,T1 
 3405 09c0 032A     	    cmp r2,#3 
 3406 09c2 01D0     	    beq 1f
 3407 09c4 01F11001 	    add r1,#16 //reset bit 
 3408 09c8 00FA01F0 	1:  lsl r0,r1
 3409 09cc C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3410 09d0 032A     	    cmp r2,#3 
 3411 09d2 01D4     	    bmi 2f 
 3412 09d4 A2F10102 	    sub r2,#1
 3413              	2: // set CNF|MODE bits GPIO_CRx 
 3414 09d8 B8F1080F 	    cmp T1,#8 
 3415 09dc 03D4     	    bmi 3f 
 3416 09de A8F10808 	    sub T1,#8 
 3417 09e2 09F10409 	    add T2,#4 //CRH 
 3418 09e6 4FF00F00 	3:  mov r0,#15   
 3419 09ea 4FEA8801 	    lsl r1,T1,#2 
 3420 09ee 00FA01F0 	    lsl r0,r1
 3421 09f2 6FEA0000 	    mvn r0,r0 // bitmask 
 3422 09f6 D9F80010 	    ldr r1,[T2]
 3423 09fa 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3424              	// combine opt|mode     
 3425 09fe 4FEA8200 	    lsl r0,r2,#2 
 3426 0a02 40EA0300 	    orr r0,r3 // OPT|MODE 
 3427 0a06 4FEA8803 	    lsl r3,T1,#2 
ARM GAS  tinyBasic.s 			page 89


 3428 0a0a 00FA03F0 	    lsl r0,r3
 3429 0a0e 41EA0001 	    orr r1,r0   
 3430 0a12 C9F80010 	    str r1,[T2] // mode and option set
 3431 0a16 7047     	    _RET 
 3432              	
 3433              	
 3434              	/*****************************************
 3435              	  BASIC: PEEK8 (expr)  
 3436              	  return byte value at address 
 3437              	*****************************************/
 3438              	    _FUNC peek8
 3439 0a18 00B5FFF7 	    _CALL func_args  
 3439      FEFF5DF8 
 3439      04EB
 3440 0a22 0128     	    cmp r0,#1
 3441 0a24 3FF5FEAF 	    bmi syntax_error
 3442 0a28 5CF8041B 	    _POP r1 
 3443 0a2c 0978     	    ldrb r1,[r1]
 3444 0a2e 4FF00F00 	    mov r0,#TK_INTGR     
 3445 0a32 7047     	    _RET 
 3446              	
 3447              	/*****************************************
 3448              	  BASIC: PEEK16 (expr)  
 3449              	  return byte value at address 
 3450              	*****************************************/
 3451              	    _FUNC peek16
 3452 0a34 00B5FFF7 	    _CALL func_args  
 3452      FEFF5DF8 
 3452      04EB
 3453 0a3e 0128     	    cmp r0,#1
 3454 0a40 3FF5FEAF 	    bmi syntax_error
 3455 0a44 5CF8041B 	    _POP r1 
 3456 0a48 0988     	    ldrh r1,[r1]
 3457 0a4a 4FF00F00 	    mov r0,#TK_INTGR     
 3458 0a4e 7047     	    _RET 
 3459              	
 3460              	/*****************************************
 3461              	  BASIC: PEEK32 (expr)  
 3462              	  return byte value at address 
 3463              	*****************************************/
 3464              	    _FUNC peek32
 3465 0a50 00B5FFF7 	    _CALL func_args  
 3465      FEFF5DF8 
 3465      04EB
 3466 0a5a 0128     	    cmp r0,#1
 3467 0a5c 3FF5FEAF 	    bmi syntax_error
 3468 0a60 5CF8041B 	    _POP r1 
 3469 0a64 0968     	    ldr r1,[r1]
 3470 0a66 4FF00F00 	    mov r0,#TK_INTGR     
 3471 0a6a 7047     	    _RET 
 3472              	
 3473              	
 3474              	/**********************************
 3475              	  BASIC: POKE8 addr,byte
 3476              	  store byte at addr   
 3477              	**********************************/
 3478              	    _FUNC poke8
ARM GAS  tinyBasic.s 			page 90


 3479 0a6c 00B5FFF7 	    _CALL arg_list
 3479      FEFF5DF8 
 3479      04EB
 3480 0a76 0228     	    cmp r0,#2 
 3481 0a78 7FF4FEAF 	    bne syntax_error
 3482 0a7c BCE80300 	    ldmia DP!,{r0,r1} 
 3483 0a80 0870     	    strb r0,[r1]
 3484 0a82 7047     	    _RET 
 3485              	
 3486              	/**********************************
 3487              	  BASIC: POKE16 addr,hword
 3488              	  store hword at addr   
 3489              	**********************************/
 3490              	    _FUNC poke16
 3491 0a84 00B5FFF7 	    _CALL arg_list
 3491      FEFF5DF8 
 3491      04EB
 3492 0a8e 0228     	    cmp r0,#2 
 3493 0a90 7FF4FEAF 	    bne syntax_error
 3494 0a94 BCE80300 	    ldmia DP!,{r0,r1} 
 3495 0a98 0880     	    strh r0,[r1]
 3496 0a9a 7047     	    _RET 
 3497              	
 3498              	/**********************************
 3499              	  BASIC: POKE32 addr,word
 3500              	  store word at addr   
 3501              	**********************************/
 3502              	    _FUNC poke32
 3503 0a9c 00B5FFF7 	    _CALL arg_list 
 3503      FEFF5DF8 
 3503      04EB
 3504 0aa6 0228     	    cmp r0,#2 
 3505 0aa8 7FF4FEAF 	    bne syntax_error
 3506 0aac BCE80300 	    ldmia DP!,{r0,r1} 
 3507 0ab0 0860     	    str r0,[r1]
 3508 0ab2 7047     	    _RET 
 3509              	
 3510              	
 3511              	
 3512              	/****************************
 3513              	  BASIC: PRINT|? arg_list 
 3514              	  print list of arguments 
 3515              	****************************/
 3516              	    _FUNC print
 3517 0ab4 88EA0808 	    eor T1,T1 
 3518 0ab8 00B5FFF7 	0:  _CALL expression
 3518      FEFF5DF8 
 3518      04EB
 3519 0ac2 0F28     	    cmp r0,#TK_INTGR
 3520 0ac4 07D1     	    bne 1f 
 3521 0ac6 0846     	    mov r0,r1
 3522 0ac8 A169     	    ldr r1,[UPP,#BASE]
 3523 0aca 00B5FFF7 	    _CALL print_int
 3523      FEFF5DF8 
 3523      04EB
 3524 0ad4 3EE0     	    b 8f  
 3525 0ad6 00B5FFF7 	1:  _CALL next_token
ARM GAS  tinyBasic.s 			page 91


 3525      FEFF5DF8 
 3525      04EB
 3526 0ae0 0128     	    cmp r0,#TK_COLON 
 3527 0ae2 00DC     	    bgt 2f
 3528 0ae4 4DE0     	    b unget_exit 
 3529 0ae6 0228     	2:  cmp r0,#TK_QSTR 
 3530 0ae8 06D1     	    bne 3f
 3531 0aea 0846     	    mov r0,r1 
 3532 0aec 00B5FFF7 	    _CALL uart_puts  
 3532      FEFF5DF8 
 3532      04EB
 3533 0af6 2DE0     	    b 8f 
 3534 0af8 0D28     	3:  cmp r0,#TK_CFUNC
 3535 0afa 05D1     	    bne 4f
 3536 0afc 0846     	    mov r0,r1
 3537 0afe 00B5FFF7 	    _CALL execute 
 3537      FEFF5DF8 
 3537      04EB
 3538 0b08 0328     	4:  cmp r0,#TK_CHAR 
 3539 0b0a 06D1     	    bne 5f 
 3540 0b0c 0846     	    mov r0,r1 
 3541 0b0e 00B5FFF7 	    _CALL uart_putc 
 3541      FEFF5DF8 
 3541      04EB
 3542 0b18 1CE0     	    b 8f 
 3543 0b1a 0A28     	5:  cmp r0,#TK_SHARP
 3544 0b1c 09D1     	    bne 6f 
 3545 0b1e 00B5FFF7 	   _CALL next_token
 3545      FEFF5DF8 
 3545      04EB
 3546 0b28 0F28     	    cmp r0,#TK_INTGR  
 3547 0b2a 7FF4FEAF 	    bne syntax_error 
 3548 0b2e 6164     	    str r1,[UPP,#TAB_WIDTH]
 3549 0b30 10E0     	    b 8f 
 3550 0b32 0B28     	6:  cmp r0,#TK_CMD 
 3551 0b34 25D1     	    bne unget_exit  
 3552 0b36 4629     	    cmp r1,#TAB_IDX 
 3553 0b38 05D1     	    bne 6f
 3554 0b3a 00B500F0 	    _CALL tab 
 3554      90FA5DF8 
 3554      04EB
 3555 0b44 06E0     	    b 8f 
 3556 0b46 4229     	6:  cmp r1,#SPC_IDX  
 3557 0b48 1BD1     	    bne unget_exit
 3558 0b4a 00B500F0 	    _CALL spc   
 3558      4EFA5DF8 
 3558      04EB
 3559 0b54 88EA0808 	8:  eor T1,T1  
 3560 0b58 00B5FFF7 	    _CALL next_token
 3560      FEFF5DF8 
 3560      04EB
 3561 0b62 90B1     	    cbz r0, print_exit  
 3562 0b64 0828     	    cmp r0,#TK_COMMA 
 3563 0b66 02D1     	    bne 8f 
 3564 0b68 4FF0FF38 	    mov T1,#-1
 3565 0b6c A4E7     	    b 0b
 3566 0b6e 0928     	8:  cmp r0,#TK_SEMIC 
ARM GAS  tinyBasic.s 			page 92


 3567 0b70 07D1     	    bne unget_exit 
 3568 0b72 00B5FFF7 	    _CALL tabulation 
 3568      FEFF5DF8 
 3568      04EB
 3569 0b7c 4FF0FF38 	    mov T1,#-1
 3570 0b80 9AE7     	    b 0b
 3571              	unget_exit:         
 3572 0b82 D4F800A0 	   _UNGET_TOKEN 
 3572      D4F808B0 
 3573              	print_exit:
 3574 0b8a 18EA0808 	    ands T1,T1 
 3575 0b8e 04D1     	    bne 9f
 3576 0b90 00B5FFF7 	    _CALL cr 
 3576      FEFF5DF8 
 3576      04EB
 3577 0b9a 7047     	9:  _RET 
 3578              	
 3579              	/**************************************
 3580              	  BASIC: QKEY
 3581              	  check if key pressed 
 3582              	**************************************/ 
 3583              	    _FUNC qkey
 3584 0b9c 4FF00001 	    mov r1,#0
 3585 0ba0 00B5FFF7 	    _CALL uart_qkey
 3585      FEFF5DF8 
 3585      04EB
 3586 0baa 01D0     	    beq 9f 
 3587 0bac 4FF0FF31 	    mov r1,#-1 
 3588 0bb0 4FF00F00 	9:  mov r0,#TK_INTGR
 3589 0bb4 7047     	    _RET 
 3590              	
 3591              	/******************************************
 3592              	  BASIC RANDOM(expr)
 3593              	  generate random number between 0..expr-1
 3594              	******************************************/
 3595 0bb6 00BF     	    _FUNC random
 3596 0bb8 00B5FFF7 	    _CALL func_args 
 3596      FEFF5DF8 
 3596      04EB
 3597 0bc2 0128     	    cmp r0,#1
 3598 0bc4 7FF4FEAF 	    bne syntax_error 
 3599 0bc8 606A     	    ldr r0,[UPP,#SEED]
 3600 0bca 4FEA4031 	    lsl r1,r0,#13
 3601 0bce 81EA0001 	    eor r1,r0
 3602 0bd2 4FEA5140 	    lsr r0,r1,#17
 3603 0bd6 81EA0001 	    eor r1,r0
 3604 0bda 4FEA4110 	    lsl r0,r1,#5
 3605 0bde 81EA0001 	    eor r1,r0
 3606 0be2 6162     	    str r1,[UPP,#SEED]
 3607 0be4 5CF8040B 	    _POP r0 
 3608 0be8 B1FBF0F2 	    udiv r2,r1,r0  
 3609 0bec 00FB02F2 	    mul r2,r0 
 3610 0bf0 A1EB0201 	    sub r1,r2 
 3611 0bf4 4FF00F00 	    mov r0,#TK_INTGR
 3612 0bf8 7047     	    _RET 
 3613              	
 3614              	/****************************************
ARM GAS  tinyBasic.s 			page 93


 3615              	  BASIC: RSHIFT(expr1,expr2)
 3616              	  shift left expr1 de expr2 bits 
 3617              	****************************************/
 3618 0bfa 00BF     	    _FUNC rshift
 3619 0bfc 00B5FFF7 	    _CALL func_args
 3619      FEFF5DF8 
 3619      04EB
 3620 0c06 0228     	    cmp r0,#2 
 3621 0c08 7FF4FEAF 	    bne syntax_error
 3622 0c0c BCE80300 	    ldmia DP!,{r0,r1}
 3623 0c10 21FA00F1 	    lsr r1,r0  
 3624 0c14 4FF00F00 	    mov r0,#TK_INTGR
 3625 0c18 7047     	    _RET 
 3626              	
 3627              	/****************************
 3628              	  BASIC: RUN 
 3629              	  execute program in memory
 3630              	****************************/
 3631 0c1a 00BF     	    _FUNC run
 3632 0c1c 206C10F0 	    _CLO 
 3632      010F03D0 
 3632      4FF00700 
 3632      FFF7FEBF 
 3633 0c2c 206B     	    ldr r0,[UPP,#TXTBGN]
 3634 0c2e 616B     	    ldr r1,[UPP,#TXTEND]
 3635 0c30 C4F8D010 	    str r1,[UPP,#HERE]
 3636 0c34 8842     	    cmp r0,r1
 3637 0c36 21D0     	    beq 9f
 3638 0c38 216C     	    ldr r1,[UPP,#FLAGS]
 3639 0c3a 11F0080F 	    tst r1,#FSTOP
 3640 0c3e 09D0     	    beq 1f
 3641 0c40 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3642 0c44 6060     	    str r0,[UPP,#COUNT]
 3643 0c46 206C     	    ldr r0,[UPP,#FLAGS]
 3644 0c48 4FF00901 	    mov r1,#FRUN+FSTOP
 3645 0c4c 80EA0100 	    eor r0,r1
 3646 0c50 2064     	    str r0,[UPP,#FLAGS] 
 3647 0c52 13E0     	    b 9f  
 3648 0c54 8178     	1:  ldrb r1,[r0,#2]
 3649 0c56 6160     	    str r1,[UPP,#COUNT]
 3650 0c58 8346     	    mov BPTR,r0 
 3651 0c5a 4FF0030A 	    mov IN,#3
 3652 0c5e 606B     	    ldr r0,[UPP,#TXTEND]
 3653              	    // reset dataline pointers 
 3654 0c60 80EA0000 	    eor r0,r0 
 3655 0c64 E060     	    str r0,[UPP,#DATAPTR]
 3656 0c66 2061     	    str r0,[UPP,#DATA]
 3657 0c68 6061     	    str r0,[UPP,#DATALEN] 
 3658 0c6a 206C     	    ldr r0,[UPP,#FLAGS]
 3659 0c6c 40F00100 	    orr r0,#FRUN 
 3660 0c70 2064     	    str r0,[UPP,#FLAGS]
 3661 0c72 00B5FFF7 	    _CALL show_trace 
 3661      FEFF5DF8 
 3661      04EB
 3662 0c7c 7047     	9:  _RET 
 3663              	
 3664              	/**********************************
ARM GAS  tinyBasic.s 			page 94


 3665              	        FILE SYSTEM 
 3666              	**********************************/
 3667              	
 3668              	/*********************************
 3669              	  search_free 
 3670              	  search first free PAGE in fs
 3671              	  a PAGE is free if first word is
 3672              	  -1
 3673              	  input:
 3674              	    none 
 3675              	  output:
 3676              	    r0    addr|0
 3677              	  use:
 3678              	*********************************/
 3679 0c7e 00BF     	    _FUNC search_free 
 3680 0c80 06B4     	    push {r1,r2}
 3681 0c82 DFF86410 	    ldr r1,fs_addr 
 3682 0c86 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3682      C0F60202 
 3683 0c8e 0868     	1:  ldr r0,[r1]
 3684 0c90 B0F1FF3F 	    cmp r0,#-1
 3685 0c94 03D0     	    beq 8f 
 3686 0c96 01F58061 	    add r1,#PAGE_SIZE
 3687 0c9a 9142     	    cmp r1,r2 
 3688 0c9c F7D4     	    bmi 1b 
 3689 0c9e 0846     	8:  mov r0,r1 
 3690 0ca0 06BC     	    pop {r1,r2}   
 3691 0ca2 7047     	    _RET 
 3692              	
 3693              	/*********************************
 3694              	  search_file 
 3695              	  search for a file name 
 3696              	  in file system.
 3697              	  input: 
 3698              	    r0   .asciz target name
 3699              	  output:
 3700              	    r0    0 || address found 
 3701              	  use:
 3702              	   r0     temp 
 3703              	   r1     *file_name 
 3704              	   r2     *fs  
 3705              	   r3     target   
 3706              	**********************************/
 3707              	    _FUNC search_file 
 3708 0ca4 0EB4     	    push {r1,r2,r3}
 3709 0ca6 DFF84020 	    ldr r2,fs_addr
 3710 0caa 0346     	    mov r3,r0  
 3711              	cmp_loop:
 3712 0cac 1068     	    ldr r0,[r2]
 3713 0cae B0F1FF3F 	    cmp r0,#-1
 3714 0cb2 80EA0000 	    eor r0,r0
 3715 0cb6 15D0     	    beq 9f // reached end of fs 
 3716 0cb8 1846     	1:  mov r0,r3
 3717 0cba 02F10201 	    add r1,r2,#2
 3718 0cbe 00B5FFF7 	    _CALL strcmp
 3718      FEFF5DF8 
 3718      04EB
ARM GAS  tinyBasic.s 			page 95


 3719 0cc8 08B9     	    cbnz r0,2f
 3720 0cca 1046     	    mov r0,r2 
 3721 0ccc 0AE0     	    b 9f   
 3722 0cce 1088     	2:  ldrh r0,[r2] // name length
 3723 0cd0 0244     	    add r2,r0 
 3724 0cd2 1088     	    ldrh r0,[r2]
 3725 0cd4 1044     	    add r0,r2
 3726 0cd6 00B5FFF7 	    _CALL page_align 
 3726      FEFF5DF8 
 3726      04EB
 3727 0ce0 0246     	    mov r2,r0   
 3728 0ce2 E3E7     	    b cmp_loop 
 3729 0ce4 0EBC     	9:  pop {r1,r2,r3}
 3730 0ce6 7047     	    _RET 
 3731              	
 3732 0ce8 00000000 	fs_addr: .word FILE_SYSTEM
 3733              	
 3734              	/*************************************
 3735              	  BASIC: DIR 
 3736              	  list files stored in fs 
 3737              	  use:
 3738              	    r0  temp 
 3739              	    r1  temp
 3740              	    r2  file count
 3741              	    r3  data size
 3742              	    T1  *fs  
 3743              	*************************************/
 3744              	    _FUNC directory
 3745 0cec 206C10F0 	    _CLO 
 3745      010F03D0 
 3745      4FF00700 
 3745      FFF7FEBF 
 3746 0cfc 82EA0202 	    eor r2,r2 
 3747 0d00 5FF81C80 	    ldr T1,fs_addr 
 3748 0d04 D8F80000 	1:  ldr r0,[T1] // name length 
 3749 0d08 B0F1FF3F 	    cmp r0,#-1
 3750 0d0c 2AD0     	    beq no_more_file
 3751 0d0e 00F00F03 	    and r3,r0,#15
 3752 0d12 08F10200 	    add r0,T1,#2
 3753 0d16 00B5FFF7 	    _CALL uart_puts 
 3753      FEFF5DF8 
 3753      04EB
 3754 0d20 4FF01000 	    mov r0,#16 
 3755 0d24 00B5FFF7 	    _CALL cursor_x 
 3755      FEFF5DF8 
 3755      04EB
 3756 0d2e 9844     	    add T1,r3 
 3757 0d30 B8F80030 	    ldrh r3,[T1]
 3758 0d34 1846     	    mov r0,r3 
 3759 0d36 4FF00A01 	    mov r1,#10 
 3760 0d3a 00B5FFF7 	    _CALL print_int
 3760      FEFF5DF8 
 3760      04EB
 3761 0d44 00B5FFF7 	    _CALL cr  
 3761      FEFF5DF8 
 3761      04EB
 3762 0d4e 08EB0300 	    add r0,T1,r3 
ARM GAS  tinyBasic.s 			page 96


 3763 0d52 00B5FFF7 	    _CALL page_align
 3763      FEFF5DF8 
 3763      04EB
 3764 0d5c 8046     	    mov T1,r0 
 3765 0d5e 02F10102 	    add r2,#1 
 3766 0d62 CFE7     	    b 1b  
 3767              	no_more_file:
 3768 0d64 00B5FFF7 	    _CALL cr
 3768      FEFF5DF8 
 3768      04EB
 3769 0d6e 4FF01000 	    mov r0,#16
 3770 0d72 00B5FFF7 	    _CALL cursor_x  
 3770      FEFF5DF8 
 3770      04EB
 3771 0d7c 1046     	    mov r0,r2 
 3772 0d7e 4FF00A01 	    mov r1,#10 
 3773 0d82 00B5FFF7 	    _CALL print_int 
 3773      FEFF5DF8 
 3773      04EB
 3774 0d8c DFF8D404 	    ldr r0,=fcount 
 3775 0d90 00B5FFF7 	    _CALL uart_puts 
 3775      FEFF5DF8 
 3775      04EB
 3776 0d9a 7047     	    _RET 
 3777 0d9c 66696C65 	fcount:  .asciz "files\n"
 3777      730A00
 3778              	
 3779              	/*************************************
 3780              	  BASIC: FORGET ["name"]
 3781              	  delete file and all following 
 3782              	  if no name given delete all files 
 3783              	************************************/
 3784 0da3 00       	    _FUNC forget
 3785 0da4 2DE90802 	    push {r3,T2}
 3786 0da8 5FF8C490 	    ldr T2,fs_addr 
 3787 0dac E36A     	    ldr r3,[UPP,#FSFREE]
 3788 0dae 00B5FFF7 	    _CALL next_token
 3788      FEFF5DF8 
 3788      04EB
 3789 0db8 38B1     	    cbz r0,1f // no name 
 3790 0dba 0846     	    mov r0,r1
 3791 0dbc 00B5FFF7 	    _CALL search_file
 3791      71FF5DF8 
 3791      04EB
 3792 0dc6 58B1     	    cbz r0,9f 
 3793 0dc8 8146     	    mov T2,r0 
 3794 0dca 9945     	1:  cmp T2,r3 
 3795 0dcc 08D5     	    bpl 9f 
 3796 0dce 4846     	    mov r0,T2 
 3797 0dd0 00B5FFF7 	    _CALL erase_page
 3797      FEFF5DF8 
 3797      04EB
 3798 0dda 09F58069 	    add T2,#PAGE_SIZE
 3799 0dde F4E7     	    b 1b 
 3800 0de0 00B5FFF7 	9:  _CALL search_free
 3800      4DFF5DF8 
 3800      04EB
ARM GAS  tinyBasic.s 			page 97


 3801 0dea BDE80802 	    pop {r3,T2} 
 3802 0dee 7047     	    _RET 
 3803              	
 3804              	/**********************************
 3805              	  BASIC LOAD "name" 
 3806              	  load file in RAM for execution
 3807              	  use:
 3808              	    r0   temp
 3809              	    r1   src
 3810              	    r2   dest 
 3811              	    r3   count 
 3812              	**********************************/
 3813              	    _FUNC load
 3814 0df0 206C10F0 	    _CLO 
 3814      010F03D0 
 3814      4FF00700 
 3814      FFF7FEBF 
 3815 0e00 00B5FFF7 	    _CALL next_token 
 3815      FEFF5DF8 
 3815      04EB
 3816 0e0a 0228     	    cmp r0,#TK_QSTR 
 3817 0e0c 7FF4FEAF 	    bne syntax_error 
 3818 0e10 0846     	    mov r0,r1 
 3819 0e12 00B5FFF7 	    _CALL search_file 
 3819      46FF5DF8 
 3819      04EB
 3820 0e1c 18B9     	    cbnz r0, 1f 
 3821 0e1e 4FF00900 	    mov r0,#ERR_NOT_FILE
 3822 0e22 FFF7FEBF 	    b tb_error 
 3823 0e26 0146     	1:  mov r1,r0 
 3824 0e28 0888     	    ldrh r0,[r1]
 3825 0e2a 0144     	    add r1,r0 // data size field  
 3826 0e2c 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3827 0e30 226B     	    ldr r2,[UPP,#TXTBGN]
 3828 0e32 02EB0300 	    add r0,r2,r3  
 3829 0e36 6063     	    str r0,[UPP,#TXTEND]
 3830 0e38 03F10103 	    add r3,#1
 3831 0e3c 4FEA5303 	    lsr r3,#1
 3832              	2:  // load file data 
 3833 0e40 31F8020B 	    ldrh r0,[r1],#2
 3834 0e44 22F8020B 	    strh r0,[r2],#2 
 3835 0e48 013B     	    subs r3,#1 
 3836 0e4a F9D1     	    bne 2b 
 3837              	// report file size 
 3838 0e4c DFF81804 	    ldr r0,=fsize 
 3839 0e50 00B5FFF7 	    _CALL uart_puts
 3839      FEFF5DF8 
 3839      04EB
 3840 0e5a 606B     	    ldr r0,[UPP,#TXTEND]
 3841 0e5c 236B     	    ldr r3,[UPP,#TXTBGN]
 3842 0e5e A0EB0300 	    sub r0,r3 
 3843 0e62 4FF00A01 	    mov r1,#10 
 3844 0e66 00B5FFF7 	    _CALL print_int 
 3844      FEFF5DF8 
 3844      04EB
 3845 0e70 FE48     	    ldr r0,=data_bytes 
 3846 0e72 00B5FFF7 	    _CALL uart_puts      
ARM GAS  tinyBasic.s 			page 98


 3846      FEFF5DF8 
 3846      04EB
 3847 0e7c 7047     	    _RET 
 3848              	
 3849              	
 3850              	/*********************************
 3851              	  BASIC: SAVE "name" 
 3852              	  save program in flash memory
 3853              	  file structure:
 3854              	    .hword name_length 
 3855              	    .asciz name
 3856              	    .palign 1  
 3857              	    .hword data_length 
 3858              	    .byte  file data (variable length)  
 3859              	  use:
 3860              	    r0  temp 
 3861              	    r1  temp
 3862              	    r2  *flash 
 3863              	    r3  *ram  
 3864              	    T1  temp   
 3865              	********************************/
 3866 0e7e 00BF     	    _FUNC save
 3867 0e80 206C10F0 	    _CLO 
 3867      010F03D0 
 3867      4FF00700 
 3867      FFF7FEBF 
 3868 0e90 606B     	    ldr r0,[UPP,#TXTEND]
 3869 0e92 216B     	    ldr r1,[UPP,#TXTBGN]
 3870 0e94 8842     	    cmp r0,r1
 3871 0e96 03D1     	    bne 0f 
 3872 0e98 4FF00D00 	    mov r0,#ERR_NO_PROG
 3873 0e9c FFF7FEBF 	    b tb_error 
 3874 0ea0 00B5FFF7 	0:  _CALL next_token 
 3874      FEFF5DF8 
 3874      04EB
 3875 0eaa 0228     	    cmp r0,#TK_QSTR
 3876 0eac 7FF4FEAF 	    bne syntax_error 
 3877              	// check for existing 
 3878 0eb0 0B46     	    mov r3,r1 // save name 
 3879 0eb2 1846     	    mov r0,r3  
 3880 0eb4 00B5FFF7 	    _CALL search_file
 3880      F5FE5DF8 
 3880      04EB
 3881 0ebe 18B1     	    cbz r0,new_file 
 3882 0ec0 4FF00800 	    mov r0,#ERR_DUPLICATE
 3883 0ec4 FFF7FEBF 	    b tb_error 
 3884              	new_file:
 3885 0ec8 4FF00100 	    mov r0,#1 
 3886 0ecc 00B5FFF7 	    _CALL unlock 
 3886      FEFF5DF8 
 3886      04EB
 3887 0ed6 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3888 0ed8 1846     	    mov r0,r3 // *name 
 3889 0eda 00B5FFF7 	    _CALL strlen 
 3889      FEFF5DF8 
 3889      04EB
 3890 0ee4 00F10400 	    add r0,#4  
ARM GAS  tinyBasic.s 			page 99


 3891 0ee8 20F00100 	    and r0,#-2 //even size
 3892 0eec A0F10208 	    sub T1,r0,#2  // name length counter   
 3893 0ef0 1146     	1:  mov r1,r2  
 3894 0ef2 00B5FFF7 	    _CALL hword_write   
 3894      FEFF5DF8 
 3894      04EB
 3895 0efc 02F10202 	    add r2,#2  
 3896              	// write file name      
 3897 0f00 33F8020B 	2:  ldrh r0,[r3],#2 
 3898 0f04 1146     	    mov r1,r2 
 3899 0f06 00B5FFF7 	    _CALL hword_write
 3899      FEFF5DF8 
 3899      04EB
 3900 0f10 02F10202 	    add r2,#2
 3901 0f14 B8F10208 	    subs T1,#2
 3902 0f18 F2D1     	    bne 2b
 3903              	// write data size 
 3904 0f1a 606B     	    ldr r0,[UPP,#TXTEND]
 3905 0f1c 236B     	    ldr r3,[UPP,#TXTBGN]
 3906 0f1e A0EB0300 	    sub r0,r3
 3907 0f22 8046     	    mov T1,r0
 3908 0f24 1146     	    mov r1,r2 
 3909 0f26 00B5FFF7 	    _CALL hword_write
 3909      FEFF5DF8 
 3909      04EB
 3910 0f30 02F10202 	    add r2,#2 
 3911              	// write data 
 3912 0f34 08F10108 	    add T1,#1 
 3913 0f38 4FEA5808 	    lsr T1,#1 // .hword to write 
 3914 0f3c 33F8020B 	3:  ldrh r0,[r3],#2
 3915 0f40 1146     	    mov r1,r2
 3916 0f42 00B5FFF7 	    _CALL hword_write 
 3916      FEFF5DF8 
 3916      04EB
 3917 0f4c 02F10202 	    add r2,#2 
 3918 0f50 B8F10108 	    subs T1,#1 
 3919 0f54 F2D1     	    bne 3b
 3920 0f56 4FF00000 	    mov r0,#0 
 3921 0f5a 00B5FFF7 	    _CALL unlock
 3921      FEFF5DF8 
 3921      04EB
 3922              	// update FSFREE     
 3923 0f64 606B     	    ldr r0,[UPP,#TXTEND]
 3924 0f66 216B     	    ldr r1,[UPP,#TXTBGN]
 3925 0f68 A0EB0100 	    sub r0,r1 
 3926 0f6c 8046     	    mov T1,r0 
 3927 0f6e E16A     	    ldr r1,[UPP,#FSFREE]
 3928 0f70 0844     	    add r0,r1 
 3929 0f72 00B5FFF7 	    _CALL page_align
 3929      FEFF5DF8 
 3929      04EB
 3930 0f7c E062     	    str r0,[UPP,#FSFREE]
 3931 0f7e BA48     	    ldr r0,=fsize
 3932 0f80 00B5FFF7 	    _CALL uart_puts
 3932      FEFF5DF8 
 3932      04EB
 3933 0f8a 4046     	    mov r0,T1 
ARM GAS  tinyBasic.s 			page 100


 3934 0f8c 4FF00A01 	    mov r1,#10 
 3935 0f90 00B5FFF7 	    _CALL print_int 
 3935      FEFF5DF8 
 3935      04EB
 3936 0f9a B448     	    ldr r0,=data_bytes 
 3937 0f9c 00B5FFF7 	    _CALL uart_puts  
 3937      FEFF5DF8 
 3937      04EB
 3938 0fa6 7047     	    _RET 
 3939 0fa8 66696C65 	fsize: .asciz "file size: "
 3939      2073697A 
 3939      653A2000 
 3940 0fb4 62797465 	data_bytes: .asciz "bytes"
 3940      7300
 3941              	
 3942              	
 3943              	/*******************************
 3944              	  BASIC: SIZE 
 3945              	  return RAM free bytes 
 3946              	*******************************/
 3947 0fba 00BF     	    _FUNC size
 3948 0fbc 606B     	    ldr r0,[UPP,#TXTEND]
 3949 0fbe D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3950 0fc2 A1EB0001 	    sub r1,R0
 3951 0fc6 4FF00F00 	    mov r0,#TK_INTGR
 3952 0fca 7047     	    _RET  
 3953              	
 3954              	/*********************************
 3955              	  BASIC: SLEEP 
 3956              	  place MCU lowest power mode 
 3957              	  wait for external interrpt or
 3958              	  reset.
 3959              	*********************************/
 3960              	    _FUNC sleep
 3961 0fcc 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3961      CEF20000 
 3962 0fd4 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3963 0fd8 0160     	    str r1,[r0]
 3964 0fda 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3964      C4F20000 
 3965 0fe2 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3966 0fe6 0160     	    str r1,[r0]
 3967 0fe8 20BF     	    wfe 
 3968 0fea 7047     	    _RET 
 3969              	
 3970              	/************************************
 3971              	  BASIC: SPC(expr)
 3972              	  mov cursor right expr spaces 
 3973              	***********************************/
 3974              	    _FUNC spc 
 3975 0fec 00B5FFF7 	    _CALL func_args 
 3975      FEFF5DF8 
 3975      04EB
 3976 0ff6 0128     	    cmp r0,#1
 3977 0ff8 7FF4FEAF 	    bne syntax_error 
 3978 0ffc 5CF8040B 	    _POP r0 
 3979 1000 00B5FFF7 	    _CALL spaces 
ARM GAS  tinyBasic.s 			page 101


 3979      FEFF5DF8 
 3979      04EB
 3980 100a 7047     	    _RET 
 3981              	
 3982              	    _FUNC spi_read
 3983 100c 7047     	    _RET 
 3984              	
 3985 100e 00BF     	    _FUNC spi_enable
 3986 1010 7047     	    _RET 
 3987              	
 3988 1012 00BF     	    _FUNC spi_select
 3989 1014 7047     	    _RET 
 3990              	
 3991 1016 00BF     	    _FUNC spi_write
 3992 1018 7047     	    _RET 
 3993              	
 3994              	/******************************
 3995              	  BASIC: STOP 
 3996              	  stop program executre but 
 3997              	  keep execution state for 
 3998              	  resume 
 3999              	******************************/
 4000 101a 00BF     	    _FUNC stop
 4001 101c 206C10F0 	    _RTO 
 4001      010F03D1 
 4001      4FF00700 
 4001      FFF7FEBF 
 4002 102c 6068     	    ldr r0,[UPP,#COUNT]
 4003 102e 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4004 1032 206C     	    ldr r0,[UPP,#FLAGS]
 4005 1034 4FF00901 	    mov r1,#FRUN+FSTOP
 4006 1038 80EA0100 	    eor r0,r1
 4007 103c 2064     	    str r0,[UPP,#FLAGS]
 4008 103e 8AEA0A0A 	    eor IN,IN 
 4009 1042 8BEA0B0B 	    eor BPTR,BPTR 
 4010 1046 C4F804A0 	    str IN,[UPP,#COUNT]
 4011 104a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4012 104e C4F808A0 	    str IN,[UPP,#BASICPTR]
 4013 1052 4FF4A040 	    _MOV32 r0,RAM_END
 4013      C2F20000 
 4014 105a 8546     	    mov sp,r0
 4015 105c FFF7FEBF 	    b cmd_line 
 4016              	
 4017              	
 4018              	/**************************
 4019              	  BASIC: TAB(expr)
 4020              	  move cursor column expr 
 4021              	**************************/
 4022              	    _FUNC tab 
 4023 1060 00B5FFF7 	    _CALL func_args  
 4023      FEFF5DF8 
 4023      04EB
 4024 106a 0128     	    cmp r0,#1 
 4025 106c 7FF4FEAF 	    bne syntax_error 
 4026 1070 5CF8040B 	    _POP r0 
 4027 1074 00B5FFF7 	    _CALL cursor_x 
 4027      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 102


 4027      04EB
 4028 107e 7047     	    _RET 
 4029              	
 4030              	/**************************
 4031              	  BASIC: TICKS 
 4032              	  return msec counter
 4033              	**************************/  
 4034              	    _FUNC get_ticks
 4035 1080 E169     	    ldr r1,[UPP,#TICKS]
 4036 1082 4FF00F00 	    mov r0,#TK_INTGR
 4037 1086 7047     	    _RET  
 4038              	
 4039              	/*************************
 4040              	  BASIC: TIMER expr 
 4041              	  set countdown timer 
 4042              	************************/
 4043              	    _FUNC set_timer
 4044 1088 00B5FFF7 	    _CALL expression 
 4044      FEFF5DF8 
 4044      04EB
 4045 1092 0F28     	    cmp r0,#TK_INTGR
 4046 1094 7FF4FEAF 	    bne syntax_error 
 4047 1098 2162     	    str r1,[UPP,#TIMER]
 4048 109a 7047     	    _RET 
 4049              	
 4050              	/***************************
 4051              	  BASIC: TIMEOUT
 4052              	  check for timer expiration 
 4053              	  return -1 true || 0 false
 4054              	****************************/
 4055              	    _FUNC timeout
 4056 109c 81EA0101 	    eor r1,r1 
 4057 10a0 206A     	    ldr r0,[UPP,#TIMER]
 4058 10a2 08B9     	    cbnz r0,9f 
 4059 10a4 6FEA0101 	    mvn r1,r1 
 4060 10a8 4FF00F00 	9:  mov r0,#TK_INTGR    
 4061 10ac 7047     	    _RET 
 4062              	
 4063              	/****************************************
 4064              	  BASIC:  TONE freq, duration 
 4065              	  play a tone with frequency freq and duration
 4066              	  in milliseconds
 4067              	***********************************************/
 4068 10ae 00BF     	    _FUNC tone
 4069 10b0 00B5FFF7 	    _CALL arg_list 
 4069      FEFF5DF8 
 4069      04EB
 4070 10ba 0228     	    cmp r0,#2 
 4071 10bc 7FF4FEAF 	    bne syntax_error
 4072 10c0 BCE80003 	    ldmia DP!,{T1,T2}
 4073              	    
 4074 10c4 7047     	    _RET 
 4075              	
 4076              	/****************************************
 4077              	  BASIC: TRACE n 
 4078              	  enable execution trace 
 4079              	  0   ddisable
ARM GAS  tinyBasic.s 			page 103


 4080              	  1   show current line#
 4081              	  2  show line#+data_stack
 4082              	  3  show line#+data_stack+main_stack 
 4083              	***************************************/
 4084 10c6 00BF     	    _FUNC trace 
 4085 10c8 00B5FFF7 	    _CALL next_token 
 4085      FEFF5DF8 
 4085      04EB
 4086 10d2 0F28     	    cmp r0,#TK_INTGR  
 4087 10d4 7FF4FEAF 	    bne syntax_error 
 4088 10d8 01F00301 	    and r1,#3 
 4089 10dc C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4090 10e0 7047     	    _RET 
 4091              	
 4092              	
 4093              	/***************************
 4094              	  BASIC: UBOUND 
 4095              	  return last indice of @
 4096              	  output:
 4097              	    r0  TK_INTGR 
 4098              	    r1  +int 
 4099              	**************************/
 4100 10e2 00BF     	    _FUNC ubound
 4101 10e4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4102 10e8 D4F8D000 	    ldr r0,[UPP,#HERE]
 4103 10ec A1EB0001 	    sub r1,r0 
 4104 10f0 4FEA9101 	    lsr r1,#2
 4105 10f4 4FF00F00 	    mov r0,#TK_INTGR 
 4106 10f8 7047     	    _RET 
 4107              	
 4108              	/****************************
 4109              	  BASIC: UFLASH 
 4110              	  return user flash address
 4111              	*****************************/
 4112 10fa 00BF     	    _FUNC uflash
 4113 10fc 5C49     	    ldr r1,=user
 4114 10fe 4FF00F00 	    mov r0,#TK_INTGR 
 4115 1102 7047     	    _RET 
 4116              	
 4117              	
 4118              	/************************************
 4119              	  BASIC: UNTIL relation 
 4120              	  close a DO..UNTIL loop 
 4121              	  loop until relation come true 
 4122              	************************************/
 4123              	    _FUNC until
 4124 1104 00B5FFF7 	    _CALL relation 
 4124      FEFF5DF8 
 4124      04EB
 4125 110e 11B1     	    cbz r1,9f
 4126 1110 0CF1080C 	    add DP,#8
 4127 1114 7047     	    _RET  
 4128 1116 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4129 111a 9BF80200 	    ldrb r0,[BPTR,#2]
 4130 111e 6060     	    str r0,[UPP,#COUNT]
 4131 1120 7047     	    _RET 
 4132              	
ARM GAS  tinyBasic.s 			page 104


 4133              	/*************************************
 4134              	  BASIC: WAIT addr,expr1[,expr2] 
 4135              	  wait until *addr&expr1 is not null 
 4136              	  or until (*addr&expr1)^expr2 is null 
 4137              	***************************************/
 4138 1122 00BF     	    _FUNC wait
 4139 1124 00B5FFF7 	    _CALL arg_list 
 4139      FEFF5DF8 
 4139      04EB
 4140 112e 0228     	    cmp r0,#2
 4141 1130 03D0     	    beq 2f 
 4142 1132 0328     	    cmp r0,#3
 4143 1134 07D0     	    beq 4f
 4144 1136 FFF7FEBF 	    b syntax_error 
 4145 113a BCE80300 	2:  ldmia DP!,{r0,r1}
 4146 113e 0A88     	3:  ldrh r2,[r1]
 4147 1140 0240     	    ands r2,r0 
 4148 1142 FCD0     	    beq 3b 
 4149 1144 06E0     	    b 9f 
 4150 1146 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4151 114a 1388     	5:  ldrh r3,[r2]
 4152 114c 83EA0003 	    eor r3,r0
 4153 1150 0B40     	    ands r3,r1 
 4154 1152 FAD0     	    beq 5b 
 4155 1154 7047     	9:  _RET 
 4156              	
 4157              	/*********************************************
 4158              	  BASIC: WORDS 
 4159              	  print list of BASIC WORDS in dictionary 
 4160              	  use:
 4161              	    r0,r1,T1,T2  
 4162              	********************************************/
 4163 1156 00BF     	    _FUNC words
 4164 1158 206C10F0 	    _CLO 
 4164      010F03D0 
 4164      4FF00700 
 4164      FFF7FEBF 
 4165 1168 DFF80881 	    ldr T1,=kword_dict
 4166 116c 89EA0909 	    eor T2,T2 
 4167              	1:  
 4168 1170 4046     	    mov r0,T1
 4169 1172 00B5FFF7 	    _CALL strlen
 4169      FEFF5DF8 
 4169      04EB
 4170 117c E0B1     	    cbz r0,9f 
 4171 117e 8144     	    add T2,r0 
 4172 1180 B9F1500F 	    cmp T2,#80 
 4173 1184 06D4     	    bmi 2f
 4174 1186 89EA0909 	    eor T2,T2  
 4175 118a 00B5FFF7 	    _CALL cr 
 4175      FEFF5DF8 
 4175      04EB
 4176 1194 4046     	2:  mov r0,T1 
 4177 1196 00B5FFF7 	    _CALL uart_puts 
 4177      FEFF5DF8 
 4177      04EB
 4178 11a0 4FF02000 	    mov r0,#SPACE
ARM GAS  tinyBasic.s 			page 105


 4179 11a4 09F10109 	    add T2,#1  
 4180 11a8 00B5FFF7 	    _CALL uart_putc 
 4180      FEFF5DF8 
 4180      04EB
 4181 11b2 58F80C8C 	    ldr T1,[T1,#-12]
 4182 11b6 DBE7     	    b 1b 
 4183 11b8 7047     	9:  _RET 
 4184              	
 4185              	
 4186              	/**************************************
 4187              	  BASIC: XOR(expr1,expr2)
 4188              	  binary exclusive or between 2 expressions
 4189              	**************************************/
 4190 11ba 00BF     	    _FUNC bit_xor
 4191 11bc 00B5FFF7 	    _CALL func_args
 4191      FEFF5DF8 
 4191      04EB
 4192 11c6 0228     	    cmp r0,#2
 4193 11c8 7FF4FEAF 	    bne syntax_error
 4194 11cc 5CF8040B 	    _POP r0
 4195 11d0 5CF8041B 	    _POP r1 
 4196 11d4 81EA0001 	    eor r1,r0 
 4197 11d8 4FF00F00 	    mov r0,#TK_INTGR
 4198 11dc 7047     	    _RET 
 4199              	
 4200              	/**********************************
 4201              	     argument stack manipulation
 4202              	**********************************/
 4203              	
 4204              	/**********************************
 4205              	  BASIC PUSH expr[,expr] 
 4206              	  push integers on stack 
 4207              	*********************************/
 4208 11de 00BF     	    _FUNC cmd_push 
 4209 11e0 00B5FFF7 	    _CALL arg_list
 4209      FEFF5DF8 
 4209      04EB
 4210 11ea 7047     	    _RET 
 4211              	
 4212              	/********************************
 4213              	  BASIC: POP 
 4214              	  pop an integer out of stack 
 4215              	********************************/    
 4216              	    _FUNC fn_pop 
 4217 11ec 5CF8041B 	    _POP r1 
 4218 11f0 4FF00F00 	    mov r0,#TK_INTGR 
 4219 11f4 7047     	    _RET 
 4220              	
 4221              	/*******************************
 4222              	  BASIC: DROP n 
 4223              	  discard n integer from stack
 4224              	*******************************/
 4225 11f6 00BF     	    _FUNC drop 
 4226 11f8 00B5FFF7 	    _CALL expression 
 4226      FEFF5DF8 
 4226      04EB
 4227 1202 0F28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 106


 4228 1204 7FF4FEAF 	    bne syntax_error 
 4229 1208 4FF00400 	    mov r0,#4 
 4230 120c 01FB00F0 	    mul r0,r1 
 4231 1210 8444     	    add DP,r0 
 4232 1212 7047     	    _RET 
 4233              	
 4234              	/********************************
 4235              	  BASIC: GET(expr) 
 4236              	  retreive nth element from stack 
 4237              	********************************/
 4238              	    _FUNC get 
 4239 1214 00B5FFF7 	    _CALL func_args
 4239      FEFF5DF8 
 4239      04EB
 4240 121e 0128     	    cmp r0,#1 
 4241 1220 7FF4FEAF 	    bne syntax_error 
 4242 1224 5CF8040B 	    _POP r0
 4243 1228 4FF00401 	    mov r1,#4 
 4244 122c 01FB00F0 	    mul r0,r1 
 4245 1230 5CF80010 	    ldr r1,[DP,r0]
 4246 1234 4FF00F00 	    mov r0,#TK_INTGR
 4247 1238 7047     	    _RET 
 4248              	
 4249              	/*************************************
 4250              	  BASIC: PUT value,n  
 4251              	  store value at nth position on stack
 4252              	**************************************/
 4253 123a 00BF     	    _FUNC put
 4254 123c 00B5FFF7 	    _CALL arg_list 
 4254      FEFF5DF8 
 4254      04EB
 4255 1246 0228     	    cmp r0,#2 
 4256 1248 7FF4FEAF 	    bne syntax_error 
 4257 124c 5CF8040B 	    _POP r0 
 4258 1250 4FF00401 	    mov r1,#4 
 4259 1254 01FB00F0 	    mul r0,r1 
 4260 1258 5CF8041B 	    _POP r1
 4261 125c 4CF80010 	    str r1,[DP,r0]
 4262 1260 7047     	    _RET 
 4263              	
 4264              	
 4265 1262 0000     	  .section .rodata.user
 4266              	  .p2align 10 
 4267              	user:
 4268 0000 FFFFFFFF 	  .space 1024,255
 4268      FFFFFFFF 
 4268      FFFFFFFF 
 4268      FFFFFFFF 
 4268      FFFFFFFF 
 4269              	
 4270              	/*************************************************
 4271              	   extra FLASH memory not used by Tiny BASIC
 4272              	   is used to save BASIC programs.
 4273              	************************************************/
 4274              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4275              	  .section .rodata.fs
 4276              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 107


ARM GAS  tinyBasic.s 			page 108


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 110


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 111


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:41     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:42     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:43     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:44     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:45     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:46     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:47     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:48     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:49     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:50     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:51     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:52     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:53     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:54     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:55     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:56     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:57     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:58     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:59     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:60     *ABS*:0000000000000021 TK_DIV
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:61     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:62     *ABS*:0000000000000040 TK_LBL
      tbi_macros.inc:70     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:71     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:72     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:73     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:74     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:75     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:77     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:78     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:79     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:80     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:81     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:82     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:87     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:88     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:89     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:90     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:91     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:92     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:93     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:94     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:95     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:96     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:97     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:98     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:99     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:100    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:101    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:102    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:103    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000068 VARS_SIZE
ARM GAS  tinyBasic.s 			page 113


      tbi_macros.inc:157    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:158    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:159    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:160    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:163    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:164    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:165    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:166    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:167    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:168    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:169    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:171    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:173    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:174    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CLS_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CONST_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATA_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATALN_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DEC_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DIR_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DO_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DROP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 ERASE_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GET_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GOSUB_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GOTO_IDX
       cmd_index.inc:51     *ABS*:000000000000001a HEX_IDX
       cmd_index.inc:52     *ABS*:000000000000001b IF_IDX
       cmd_index.inc:53     *ABS*:000000000000001c IN_IDX
       cmd_index.inc:54     *ABS*:000000000000001d INPUT_IDX
       cmd_index.inc:55     *ABS*:000000000000001e INVERT_IDX
       cmd_index.inc:56     *ABS*:000000000000001f KEY_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LET_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LIST_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LOAD_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LOCATE_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LSHIFT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NEW_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NEXT_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NOT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 OR_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 OUT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PAD_IDX
ARM GAS  tinyBasic.s 			page 114


       cmd_index.inc:68     *ABS*:000000000000002b PAUSE_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PMODE_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK8_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK16_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK32_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POP_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PRT_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PUSH_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PUT_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 QKEY_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 READ_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 REM_IDX
       cmd_index.inc:83     *ABS*:000000000000003a REST_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RET_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RND_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RSHIFT_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RUN_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SAVE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SIZE_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SLEEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SPC_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STEP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STOP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 STORE_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TAB_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 THEN_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TICKS_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TIMER_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TMROUT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TO_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TRACE_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UBOUND_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UFLASH_IDX
       cmd_index.inc:104    *ABS*:000000000000004f UNTIL_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WAIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WORDS_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 WRITE_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XOR_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1768   .text:0000000000000e64 next_token
         tinyBasic.s:380    .text:00000000000002c8 search_label
         tinyBasic.s:2059   .text:0000000000001140 expression
         tinyBasic.s:1320   .text:0000000000000a70 syntax_error
         tinyBasic.s:418    .text:00000000000002f0 search_lineno
         tinyBasic.s:1335   .text:0000000000000a78 tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:449    .text:0000000000000310 delete_line
         tinyBasic.s:474    .text:000000000000033c create_gap
         tinyBasic.s:499    .text:0000000000000364 insert_line
         tinyBasic.s:538    .text:00000000000003b4 compile
         tinyBasic.s:1672   .text:0000000000000db8 pad
         tinyBasic.s:859    .text:00000000000006a8 parse_int
         tinyBasic.s:616    .text:000000000000045c comp_token
         tinyBasic.s:694    .text:000000000000055a store_r0
         tinyBasic.s:953    .text:0000000000000748 skip
         tinyBasic.s:1038   .text:00000000000007b0 is_letter
         tinyBasic.s:775    .text:00000000000005ec parse_label
         tinyBasic.s:703    .text:000000000000057a token_exit
         tinyBasic.s:721    .text:0000000000000580 is_special
         tinyBasic.s:743    .text:00000000000005c4 token_ofs
         tinyBasic.s:635    .text:00000000000004ae tok_idx0
         tinyBasic.s:697    .text:0000000000000560 try_number
         tinyBasic.s:639    .text:00000000000004b0 single
         tinyBasic.s:738    .text:00000000000005b5 tok_single
         tinyBasic.s:643    .text:00000000000004b8 lt
         tinyBasic.s:649    .text:00000000000004c6 gt
         tinyBasic.s:662    .text:00000000000004ea bkslash
         tinyBasic.s:669    .text:0000000000000500 prt_cmd
         tinyBasic.s:675    .text:0000000000000512 quote
         tinyBasic.s:892    .text:00000000000006e0 parse_quote
         tinyBasic.s:680    .text:0000000000000526 tick
         tinyBasic.s:735    .text:00000000000005a0 char_list
         tinyBasic.s:736    .text:00000000000005a0 $d
         tinyBasic.s:744    .text:00000000000005c4 $d
         tinyBasic.s:761    .text:00000000000005ec $t
         tinyBasic.s:972    .text:0000000000000760 upper
         tinyBasic.s:2363   .rodata.dictionary:0000000000000648 kword_dict
         tinyBasic.s:1487   .text:0000000000000bf4 search_dict
         tinyBasic.s:829    .text:0000000000000684 compress_label
         tinyBasic.s:1069   .text:00000000000007d0 atoi
         tinyBasic.s:923    .text:0000000000000714 get_escaped_char
         tinyBasic.s:940    .text:000000000000073e escaped
         tinyBasic.s:940    .text:000000000000073e $d
         tinyBasic.s:953    .text:0000000000000746 $t
         tinyBasic.s:990    .text:0000000000000770 is_digit
         tinyBasic.s:1014   .text:000000000000078c is_hex
         tinyBasic.s:1113   .text:000000000000081c cmd_name
         tinyBasic.s:1139   .text:0000000000000840 decompile_line
         tinyBasic.s:1156   .text:0000000000000886 decomp_loop
         tinyBasic.s:1277   .text:0000000000000a1f single_char
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1273   .text:0000000000000a16 ge_str
         tinyBasic.s:1274   .text:0000000000000a19 le_str
         tinyBasic.s:1275   .text:0000000000000a1c ne_str
         tinyBasic.s:1273   .text:0000000000000a16 $d
         tinyBasic.s:1297   .text:0000000000000a58 modulo
         tinyBasic.s:1297   .text:0000000000000a56 $t
         tinyBasic.s:1368   .text:0000000000000b08 compile_error
         tinyBasic.s:1339   .text:0000000000000a80 rt_error
         tinyBasic.s:1383   .text:0000000000000b5a rt_error_msg
         tinyBasic.s:1387   .text:0000000000000b7a err_msg
         tinyBasic.s:1384   .text:0000000000000b6b token_at_msg
         tinyBasic.s:2824   .text.basic:00000000000003c6 dump01
         tinyBasic.s:1685   .text:0000000000000dc8 warm_start
         tinyBasic.s:1383   .text:0000000000000b5a $d
         tinyBasic.s:1395   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1396   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1397   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1398   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1399   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1400   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1401   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1402   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1403   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1404   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1405   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1406   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1407   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1408   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1409   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1410   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1412   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1413   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1414   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1424   .text:0000000000000bbe $t
         tinyBasic.s:1424   .text:0000000000000bc0 skip_line
         tinyBasic.s:1441   .text:0000000000000bc8 BTGL
         tinyBasic.s:1459   .text:0000000000000bcc kword_cmp
         tinyBasic.s:1525   .text:0000000000000c32 cold_start
         tinyBasic.s:1548   .text:0000000000000c90 src_addr
         tinyBasic.s:1550   .text:0000000000000c94 dest_addr
         tinyBasic.s:1671   .text:0000000000000db4 tib
         tinyBasic.s:1552   .text:0000000000000c98 sysvar_size
         tinyBasic.s:1563   .text:0000000000000c9c prt_version
         tinyBasic.s:1619   .text:0000000000000d40 clear_basic
         tinyBasic.s:3679   .text.basic:0000000000000c80 search_free
         tinyBasic.s:1549   .text:0000000000000c90 $d
         tinyBasic.s:2238   .rodata:0000000000000000 uzero
         tinyBasic.s:2264   .rodata:00000000000000d4 ulast
         tinyBasic.s:1563   .text:0000000000000c9c $t
         tinyBasic.s:1586   .text:0000000000000d00 version_msg
         tinyBasic.s:1588   .text:0000000000000d20 version
         tinyBasic.s:1587   .text:0000000000000d00 $d
         tinyBasic.s:1603   .text:0000000000000d24 clear_vars
         tinyBasic.s:1654   .text:0000000000000d88 warm_init
         tinyBasic.s:1670   .text:0000000000000db0 dstack
         tinyBasic.s:1669   .text:0000000000000dac mstack
         tinyBasic.s:1669   .text:0000000000000dac $d
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:1673   .text:0000000000000dbc array
         tinyBasic.s:1674   .text:0000000000000dc0 ready
         tinyBasic.s:1705   .text:0000000000000de0 cmd_line
         tinyBasic.s:1717   .text:0000000000000e14 interpreter
         tinyBasic.s:1752   .text:0000000000000e58 execute
         tinyBasic.s:3148   .text.basic:0000000000000706 let_var
         tinyBasic.s:3153   .text.basic:0000000000000712 let_array
         tinyBasic.s:2372   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1774   .text:0000000000000e72 end_of_line
         tinyBasic.s:1778   .text:0000000000000e7c next_line
         tinyBasic.s:1825   .text:0000000000000efc tok_jmp
         tinyBasic.s:1826   .text:0000000000000efc $d
         tinyBasic.s:1856   .text:0000000000000f40 expect
         tinyBasic.s:1875   .text:0000000000000f5c func_args
         tinyBasic.s:1895   .text:0000000000000f88 arg_list
         tinyBasic.s:1929   .text:0000000000000fc8 factor
         tinyBasic.s:2167   .text:000000000000122c get_array_element
         tinyBasic.s:2205   .text:0000000000001254 get_var
         tinyBasic.s:2008   .text:00000000000010c4 term
         tinyBasic.s:2101   .text:00000000000011a8 relation
         tinyBasic.s:2148   .text:0000000000001222 relop_jmp
         tinyBasic.s:2120   .text:00000000000011f2 rel_idx0
         tinyBasic.s:2121   .text:00000000000011f2 rel_eq
         tinyBasic.s:2138   .text:0000000000001208 rel_false
         tinyBasic.s:2124   .text:00000000000011f6 rel_lt
         tinyBasic.s:2127   .text:00000000000011fa rel_le
         tinyBasic.s:2130   .text:00000000000011fe rel_gt
         tinyBasic.s:2133   .text:0000000000001202 rel_ge
         tinyBasic.s:2136   .text:0000000000001206 rel_diff
         tinyBasic.s:2149   .text:0000000000001222 $d
         tinyBasic.s:2187   .text:0000000000001240 set_array_element
         tinyBasic.s:2223   .text:0000000000001264 set_var
         tinyBasic.s:4276   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2259   .rodata:0000000000000050 $d
         tinyBasic.s:2272   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2271   *ABS*:0000000000000000 link
         tinyBasic.s:2364   .rodata.dictionary:0000000000000648 LINK
         tinyBasic.s:2273   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2359   .rodata.dictionary:000000000000063c first_link
         tinyBasic.s:2406   .text.basic:0000000000000000 abs
         tinyBasic.s:2428   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2443   .text.basic:0000000000000054 ascii
         tinyBasic.s:2468   .text.basic:000000000000009c awu
         tinyBasic.s:2508   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2530   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2555   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2595   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2579   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2627   .text.basic:00000000000001f0 char
         tinyBasic.s:2619   .text.basic:00000000000001e4 cls
         tinyBasic.s:2644   .text.basic:0000000000000210 const
         tinyBasic.s:2683   .text.basic:0000000000000294 data_line
         tinyBasic.s:2788   .text.basic:000000000000038c dec_base
         tinyBasic.s:3744   .text.basic:0000000000000cec directory
         tinyBasic.s:2797   .text.basic:0000000000000394 do_loop
         tinyBasic.s:4225   .text.basic:00000000000011f8 drop
         tinyBasic.s:2812   .text.basic:000000000000039c dump
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:2862   .text.basic:0000000000000448 cmd_end
         tinyBasic.s:2890   .text.basic:0000000000000488 erase
         tinyBasic.s:2901   .text.basic:000000000000049c for
         tinyBasic.s:3784   .text.basic:0000000000000da4 forget
         tinyBasic.s:4238   .text.basic:0000000000001214 get
         tinyBasic.s:2982   .text.basic:0000000000000558 gosub
         tinyBasic.s:3008   .text.basic:0000000000000598 goto
         tinyBasic.s:3016   .text.basic:00000000000005a4 hex_base
         tinyBasic.s:3025   .text.basic:00000000000005ac if
         tinyBasic.s:3298   .text.basic:00000000000008cc pin_input
         tinyBasic.s:3044   .text.basic:00000000000005c4 input_var
         tinyBasic.s:3112   .text.basic:00000000000006bc invert
         tinyBasic.s:3125   .text.basic:00000000000006dc key
         tinyBasic.s:3141   .text.basic:00000000000006f0 let
         tinyBasic.s:3184   .text.basic:000000000000077c list
         tinyBasic.s:3813   .text.basic:0000000000000df0 load
         tinyBasic.s:3235   .text.basic:000000000000082c locate
         tinyBasic.s:3249   .text.basic:0000000000000850 lshift
         tinyBasic.s:3263   .text.basic:0000000000000870 new
         tinyBasic.s:2946   .text.basic:0000000000000500 next
         tinyBasic.s:3272   .text.basic:0000000000000890 func_not
         tinyBasic.s:3284   .text.basic:00000000000008a8 bit_or
         tinyBasic.s:3316   .text.basic:00000000000008f8 out
         tinyBasic.s:3334   .text.basic:0000000000000924 pad_ref
         tinyBasic.s:3345   .text.basic:0000000000000930 pause
         tinyBasic.s:3373   .text.basic:000000000000094c pin_mode
         tinyBasic.s:3438   .text.basic:0000000000000a18 peek8
         tinyBasic.s:3451   .text.basic:0000000000000a34 peek16
         tinyBasic.s:3464   .text.basic:0000000000000a50 peek32
         tinyBasic.s:3478   .text.basic:0000000000000a6c poke8
         tinyBasic.s:3490   .text.basic:0000000000000a84 poke16
         tinyBasic.s:3502   .text.basic:0000000000000a9c poke32
         tinyBasic.s:4216   .text.basic:00000000000011ec fn_pop
         tinyBasic.s:3516   .text.basic:0000000000000ab4 print
         tinyBasic.s:4208   .text.basic:00000000000011e0 cmd_push
         tinyBasic.s:4253   .text.basic:000000000000123c put
         tinyBasic.s:3583   .text.basic:0000000000000b9c qkey
         tinyBasic.s:2713   .text.basic:00000000000002e8 read
         tinyBasic.s:2755   .text.basic:0000000000000348 restore
         tinyBasic.s:2997   .text.basic:0000000000000580 return
         tinyBasic.s:3595   .text.basic:0000000000000bb8 random
         tinyBasic.s:3618   .text.basic:0000000000000bfc rshift
         tinyBasic.s:3631   .text.basic:0000000000000c1c run
         tinyBasic.s:3866   .text.basic:0000000000000e80 save
         tinyBasic.s:3947   .text.basic:0000000000000fbc size
         tinyBasic.s:3960   .text.basic:0000000000000fcc sleep
         tinyBasic.s:3974   .text.basic:0000000000000fec spc
         tinyBasic.s:2932   .text.basic:00000000000004e8 step
         tinyBasic.s:4000   .text.basic:000000000000101c stop
         tinyBasic.s:2870   .text.basic:0000000000000450 store
         tinyBasic.s:4022   .text.basic:0000000000001060 tab
         tinyBasic.s:3036   .text.basic:00000000000005c0 then
         tinyBasic.s:4034   .text.basic:0000000000001080 get_ticks
         tinyBasic.s:4043   .text.basic:0000000000001088 set_timer
         tinyBasic.s:4055   .text.basic:000000000000109c timeout
         tinyBasic.s:2919   .text.basic:00000000000004d0 to
         tinyBasic.s:4084   .text.basic:00000000000010c8 trace
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:4100   .text.basic:00000000000010e4 ubound
         tinyBasic.s:4112   .text.basic:00000000000010fc uflash
         tinyBasic.s:4123   .text.basic:0000000000001104 until
         tinyBasic.s:4138   .text.basic:0000000000001124 wait
         tinyBasic.s:4163   .text.basic:0000000000001158 words
         tinyBasic.s:4190   .text.basic:00000000000011bc bit_xor
         tinyBasic.s:2406   .text.basic:0000000000000000 $t
         tinyBasic.s:2418   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2421   .text.basic:000000000000002c analog_read
         tinyBasic.s:2460   .text.basic:0000000000000098 autorun
         tinyBasic.s:3338   .text.basic:000000000000092c pad_adr
         tinyBasic.s:2732   .text.basic:0000000000000320 seek_next
         tinyBasic.s:2777   .text.basic:000000000000037e no_data_line
         tinyBasic.s:2773   .text.basic:0000000000000378 try_next_line
         tinyBasic.s:2836   .text.basic:00000000000003e8 print_dump_header
         tinyBasic.s:2894   .text.basic:0000000000000498 user_space
         tinyBasic.s:2894   .text.basic:0000000000000498 $d
         tinyBasic.s:4267   .rodata.user:0000000000000000 user
         tinyBasic.s:2901   .text.basic:000000000000049c $t
         tinyBasic.s:2985   .text.basic:0000000000000566 target
         tinyBasic.s:3105   .text.basic:00000000000006b8 str_buffer
         tinyBasic.s:3104   .text.basic:00000000000006b4 input_buffer
         tinyBasic.s:3104   .text.basic:00000000000006b4 $d
         tinyBasic.s:3112   .text.basic:00000000000006bc $t
         tinyBasic.s:3229   .text.basic:0000000000000828 out_buff
         tinyBasic.s:3229   .text.basic:0000000000000828 $d
         tinyBasic.s:3235   .text.basic:000000000000082c $t
         tinyBasic.s:3338   .text.basic:000000000000092c $d
         tinyBasic.s:3345   .text.basic:0000000000000930 $t
         tinyBasic.s:3571   .text.basic:0000000000000b82 unget_exit
         tinyBasic.s:3573   .text.basic:0000000000000b8a print_exit
         tinyBasic.s:3732   .text.basic:0000000000000ce8 fs_addr
         tinyBasic.s:3707   .text.basic:0000000000000ca4 search_file
         tinyBasic.s:3711   .text.basic:0000000000000cac cmp_loop
         tinyBasic.s:3732   .text.basic:0000000000000ce8 $d
         tinyBasic.s:3744   .text.basic:0000000000000cec $t
         tinyBasic.s:3767   .text.basic:0000000000000d64 no_more_file
         tinyBasic.s:3777   .text.basic:0000000000000d9c fcount
         tinyBasic.s:3777   .text.basic:0000000000000d9c $d
         tinyBasic.s:3939   .text.basic:0000000000000fa8 fsize
         tinyBasic.s:3940   .text.basic:0000000000000fb4 data_bytes
         tinyBasic.s:3884   .text.basic:0000000000000ec8 new_file
         tinyBasic.s:3939   .text.basic:0000000000000fa8 $d
         tinyBasic.s:3947   .text.basic:0000000000000fba $t
         tinyBasic.s:3982   .text.basic:000000000000100c spi_read
         tinyBasic.s:3985   .text.basic:0000000000001010 spi_enable
         tinyBasic.s:3988   .text.basic:0000000000001014 spi_select
         tinyBasic.s:3991   .text.basic:0000000000001018 spi_write
         tinyBasic.s:4068   .text.basic:00000000000010b0 tone
         tinyBasic.s:4266   .rodata.user:0000000000000000 $d
         tinyBasic.s:4265   .text.basic:0000000000001262 $d
         tinyBasic.s:4276   .text.basic:0000000000001264 $d
         tinyBasic.s:4276   .text:0000000000001274 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
ARM GAS  tinyBasic.s 			page 120


         tinyBasic.s:742    .text:00000000000005c3 $d
         tinyBasic.s:1590   .text:0000000000000d21 $d
         tinyBasic.s:1590   .text:0000000000000d22 $t
         tinyBasic.s:1685   .text:0000000000000dc7 $d
         tinyBasic.s:1685   .text:0000000000000dc8 $t
         tinyBasic.s:1841   .text:0000000000000f3d $d
         tinyBasic.s:1841   .text:0000000000000f3e $t
         tinyBasic.s:2167   .text:0000000000001229 $d
         tinyBasic.s:2167   .text:000000000000122a $t
         tinyBasic.s:3784   .text.basic:0000000000000da3 $d
         tinyBasic.s:3784   .text.basic:0000000000000da4 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
