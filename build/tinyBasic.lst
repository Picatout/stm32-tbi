ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//   constantes related to Arduino 
  35              	//   API mapping 
  36              	//-------------------------------------
  37              	  .equ INP,0
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ OUTP,1 
  39              	
  40              	//--------------------------------------
  41              	//       token attribute
  42              	//--------------------------------------
  43              	// bits 4:5 identify token group 
  44              	// 0x0n -> miscelinous 
  45              	// 0x1n -> +|- operators 
  46              	// 0x2n -> *|/|% operators
  47              	// 0x3n -> relational operators 
  48              	  .equ TK_NONE,0       // not a token 
  49              	  .equ TK_COLON,1      // command separator ':' 
  50              	  .equ TK_QSTR,2     // quoted string  
  51              	  .equ TK_CHAR,3       // ASCII character 
  52              	  .equ TK_VAR,4      // variable index 
  53              	  .equ TK_ARRAY,5     // array variable '@' 
  54              	  .equ TK_LPAREN,6     // left parenthesis '('
  55              	  .equ TK_RPAREN,7     // right parenthesis ')'
  56              	  .equ TK_COMMA,8     // item separator ',' 
  57              	  .equ TK_SEMIC,9     // semi-colon  
  58              	  .equ TK_SHARP,0xa     // print colon width '#' 
  59              	  .equ TK_CMD,0xb      // BASIC command   
  60              	  .equ TK_IFUNC,0xc    // BASIC integer function
  61              	  .equ TK_CFUNC,0xd    // BASIC character function
  62              	  .equ TK_CONST,0xe    // BASIC constant 
  63              	  .equ TK_INTGR,0xf    // 32 bits integer 
  64              	  .equ TK_PLUS,0x10    // addition operator '+'
  65              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  66              	  .equ TK_MULT,0x20    // multiplication operator '*'
  67              	  .equ TK_DIV,0x21     // division operator '/'
  68              	  .equ TK_MOD,0x22     // modulo operator '%'
  69              	
  70              	// don't change these token values 
  71              	// values chosen to be used as a mask.
  72              	// bit 7   1 for dictionary words else 0 
  73              	// bits 6  always 0 
  74              	// bits 5:4 identify group 
  75              	// bits 3:0 token identifier inside group  
  76              	  .equ TK_GT,0x31      // relation operator '>'
  77              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  78              	  .equ TK_GE,0x33      // relation operator '>='
  79              	  .equ TK_LT,0x34      // relation operator '<'
  80              	  .equ TK_LE,0x36      // relation operator '<='
  81              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  82              	// token groups 
  83              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  84              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  85              	  .equ TK_GRP_ADD,0x10  // additive operators
  86              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  87              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  88              	  .equ CMD_END,2 
  89              	
  90              	//--------------------------------------
  91              	//   error codes 
  92              	//--------------------------------------
  93              	  .equ ERR_NONE,0
  94              	  .equ ERR_MEM_FULL,1 
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_SYNTAX,2
  96              	  .equ ERR_MATH_OVF,3
  97              	  .equ ERR_DIV0,4 
  98              	  .equ ERR_NO_LINE,5
  99              	  .equ ERR_RUN_ONLY,6
 100              	  .equ ERR_CMD_ONLY,7
 101              	  .equ ERR_DUPLICATE,8
 102              	  .equ ERR_NOT_FILE,9
 103              	  .equ ERR_BAD_VALUE,10
 104              	  .equ ERR_NO_ACCESS,11
 105              	  .equ ERR_NO_DATA,12 
 106              	  .equ ERR_NO_PROG,13
 107              	  .equ ERR_NO_FSPACE,14
 108              	  .equ ERR_BUF_FULL,15
 109              	  .equ ERR_CANT_PROG,16
 110              	  
 111              	
 112              	//--------------------------------------
 113              	//   assembler flags 
 114              	//-------------------------------------
 115              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 116              	
 117              	.equ CELL_SIZE,4 
 118              	
 119              	
 120              	//-------------------------------
 121              	//  macros used to help debugging
 122              	//-------------------------------
 123              	  .equ DEBUG,0
 124              	
 125              	    UPP .req r4  // base address system variables 
 126              	    VADR .req r5  // address FOR loop variable 
 127              	    LIMIT .req r6   // LOOP limit 
 128              	    INCR  .req  r7  // LOOP increment 
 129              	    T1  .req r8     // temporary register 
 130              	    T2  .req r9     // temporary register 
 131              	    IN  .req r10    //  index in text line or token list 
 132              	    BPTR .req r11   //  buffer address or BASIC line address 
 133              	    DP   .req r12   //  parameter stack pointer 
 134              	
 135              	/***************************
 136              	  SYSTEM variables offset 
 137              	  from UPP  
 138              	***************************/ 
 139              	
 140              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 141              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 142              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 143              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 144              	  .equ DATA,DATAPTR+4 // index to next data item 
 145              	  .equ DATALEN, DATA+4 // length of data line 
 146              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 147              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 148              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 149              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 150              	  .equ FSPTR,SEED+4 //  pointer used by file system
 151              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 153              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 154              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 155              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 156              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 157              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 158              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 159              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 160              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 161              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 162              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 163              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 164              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 165              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 166              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 167              	
 168              	/* flags used by BASIC interpreter */ 
 169              		.equ FRUN,(1<<0) // programm running
 170              		.equ FTRAP,(1<<1) // inside trap handler 
 171              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 172              		.equ FSTOP,(1<<3) // program stopped  
 173              		.equ FBREAK,(1<<4) // break point flag 
 174              		.equ FCOMP,(1<<5)  // compiling flags 
 175              		.equ FAUTORUN,(1<<6) // auto start program running 
 176              	
 177              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 178              	  
 179              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 180              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 181              	
 182              	/***********************************************
 183              	*       MACROS
 184              	***********************************************/
 185              		.macro _CALL fn /* low level routine call */ 
 186              	 	PUSH {LR}
 187              		BL \fn  
 188              	  POP {LR}
 189              		.endm
 190              		
 191              		.macro	_RET /* return from subroutine */
 192              		BX	LR
 193              		.endm
 194              	
 195              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 196              		MOV \REG, #\LITERAL&0xffff
 197              		MOVT \REG, #\LITERAL>>16
 198              		.endm
 199              	
 200              	// local function header 
 201              	  .macro _FUNC label 
 202              	  .p2align 2 
 203              	  .type \label, %function  
 204              	\label:
 205              	  .endm 
 206              	
 207              	// global function header 
 208              	  .macro _GBL_FUNC label 
ARM GAS  tinyBasic.s 			page 10


 209              	  .global \label 
 210              	  _FUNC \label 
 211              	  .endm 
 212              	
 213              	
 214              	/********************************
 215              	    dictionary structure
 216              	------------------------------
 217              	 format:
 218              	   link:    
 219              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 220              	   cmd_name: 31 characters max 
 221              	   cmd_index: 2 bytes 
 222              	**********************************/
 223              		.macro _dict_entry tok_type,name,cmd_idx 
 224              	  .word LINK 
 225              	  .word \cmd_idx 
 226              		.word \tok_type  	
 227              		.equ LINK,.
 228              		.asciz "\name"
 229              		.p2align 2 
 230              		.endm 
 231              	
 232              	  // pop parameter in register 
 233              	  .macro _POP  reg 
 234              	  ldmia  DP!,{\reg}
 235              	  .endm 
 236              	
 237              	  // push register on parameter stack 
 238              	  .macro _PUSH reg 
 239              	  stmdb DP!,{\reg}
 240              	  .endm 
 241              	
 242              	  // drop n parameters on dstack 
 243              	  .macro _DROP n
 244              	  mov r0,#4*\n
 245              	  add DP,R0 
 246              	  .endm 
 247              	
 248              	  // back to previous token in list 
 249              	  .macro _UNGET_TOKEN 
 250              	  ldr IN,[UPP,#IN_SAVED]
 251              	  ldr BPTR,[UPP,#BASICPTR] 
 252              	  .endm 
 253              	
 254              	 // create a text data 
 255              	 .macro _TEXT label,text
 256              	 \label: .asciz "\text"
 257              	 .p2align 2 
 258              	 .endm 
 259              	
 260              	// command line only 
 261              	  .macro _CLO 
 262              	  ldr r0,[UPP,#FLAGS]
 263              	  tst r0,#FRUN 
 264              	  beq 1f 
 265              	  mov r0,#ERR_CMD_ONLY
ARM GAS  tinyBasic.s 			page 11


 266              	  b tb_error
 267              	1: 
 268              	  .endm 
 269              	
 270              	// run time only 
 271              	  .macro _RTO 
 272              	  ldr r0,[UPP,#FLAGS]
 273              	  tst r0,#FRUN 
 274              	  bne 1f 
 275              	  mov r0,#ERR_CMD_ONLY
 276              	  b tb_error
 277              	1:
 278              	  .endm 
 279              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ DATA_IDX,CHAR_IDX+1 // 
  36              	    .equ DATALN_IDX,DATA_IDX+1 // 
  37              	    .equ DEC_IDX,DATALN_IDX+1 // 
  38              	    .equ DIR_IDX,DEC_IDX+1 // 
  39              	    .equ DO_IDX,DIR_IDX+1 // 
  40              	    .equ DROP_IDX,DO_IDX+1
  41              	    .equ DUMP_IDX, DROP_IDX+1 
  42              	    .equ END_IDX,DUMP_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  43              	    .equ ERASE_IDX,END_IDX+1 
  44              	    .equ FLASH_IDX,ERASE_IDX+1
  45              	    .equ FOR_IDX, FLASH_IDX+1 // 
  46              	    .equ FORGET_IDX, FOR_IDX+1 // 
  47              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  48              	    .equ GOTO_IDX, GOSUB_IDX+1
  49              	    .equ HEX_IDX, GOTO_IDX+1 // 
  50              	    .equ IF_IDX, HEX_IDX+1 // 
  51              	    .equ INP_IDX,IF_IDX+1
  52              	    .equ INPUT_IDX, INP_IDX+1 // 
  53              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  54              	    .equ KEY_IDX, INVERT_IDX+1 // 
  55              	    .equ LET_IDX, KEY_IDX+1 // 
  56              	    .equ LIST_IDX, LET_IDX+1 // 
  57              	    .equ LOAD_IDX, LIST_IDX+1 // 
  58              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
  71              	    .equ PICK_IDX,PEEK32_IDX+1
  72              	    .equ POKE8_IDX, PICK_IDX+1 // 
  73              	    .equ POKE16_IDX,POKE8_IDX+1 
  74              	    .equ POKE32_IDX,POKE16_IDX+1
  75              	    .equ POP_IDX,POKE32_IDX+1
  76              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  77              	    .equ PUSH_IDX,PRT_IDX+1
  78              	    .equ QKEY_IDX, PUSH_IDX+1 // 
  79              	    .equ READ_IDX, QKEY_IDX+1 // 
  80              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  81              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  82              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  83              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  84              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  85              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  86              	    .equ SAVE_IDX, RUN_IDX+1 // 
  87              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  88              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  89              	    .equ SPC_IDX,SLEEP_IDX+1 //
  90              	    .equ STEP_IDX, SPC_IDX+1 // 
  91              	    .equ STOP_IDX, STEP_IDX+1 // 
  92              	    .equ STORE_IDX,STOP_IDX+1
  93              	    .equ TAB_IDX, STORE_IDX+1 //
  94              	    .equ THEN_IDX,TAB_IDX+1
  95              	    .equ TICKS_IDX, THEN_IDX+1 // 
  96              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  97              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  98              	    .equ TO_IDX, TMROUT_IDX+1 // 
  99              	    .equ TRACE_IDX,TO_IDX+1
ARM GAS  tinyBasic.s 			page 13


 100              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 101              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 102              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 103              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 104              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 105              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 106              	    .equ XOR_IDX, WRITE_IDX+1 //  
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
ARM GAS  tinyBasic.s 			page 14


  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
ARM GAS  tinyBasic.s 			page 15


 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
ARM GAS  tinyBasic.s 			page 16


 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8BF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
ARM GAS  tinyBasic.s 			page 17


 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF8E80F 	    ldr r0,=main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262 01dc 72737461 	main_stack: .asciz "rstack: " 
 262      636B3A20 
 262      00
 263              	
ARM GAS  tinyBasic.s 			page 18


 264              	/************************************
 265              	    show execution trace 
 266              	************************************/
 267 01e5 0000BF   	    _FUNC show_trace
 268 01e8 04B4     	    push {r2}
 269 01ea D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 270 01ee BAB1     	    cbz r2,9f  
 271 01f0 00B5FFF7 	    _CALL cr 
 271      FEFF5DF8 
 271      04EB
 272 01fa 00B5FFF7 	    _CALL show_line_nbr
 272      92FF5DF8 
 272      04EB
 273 0204 022A     	    cmp r2,#2 
 274 0206 0BD4     	    bmi 9f 
 275 0208 00B5FFF7 	    _CALL show_data_stack 
 275      9DFF5DF8 
 275      04EB
 276 0212 032A     	    cmp r2,#3 
 277 0214 04D4     	    bmi 9f 
 278 0216 00B5FFF7 	    _CALL show_main_stack 
 278      BEFF5DF8 
 278      04EB
 279 0220 04BC     	9:  pop {r2}
 280 0222 7047     	    _RET 
 281              	
 282              	
 283              	/************************************
 284              	    prt_chars 
 285              	    print n ascii character starting 
 286              	    at address 
 287              	    input: 
 288              	      r0    address 
 289              	      r1    count 
 290              	    output:
 291              	      r0    address + count
 292              	    use:
 293              	      r2    address 
 294              	***********************************/
 295              	    _FUNC prt_chars 
 296 0224 04B4     	    push {r2}
 297 0226 0246     	    mov r2,r0
 298 0228 12F8010B 	1:  ldrb r0,[r2],#1 
 299 022c 2028     	    cmp r0,#SPACE 
 300 022e 01D5     	    bpl 2f 
 301 0230 4FF05F00 	    mov r0,#'_' 
 302 0234 00B5FFF7 	2:  _CALL uart_putc
 302      FEFF5DF8 
 302      04EB
 303 023e 0139     	    subs r1,#1 
 304 0240 F2D1     	    bne 1b 
 305 0242 1046     	    mov r0,r2 
 306 0244 04BC     	    pop {r2}
 307 0246 7047     	    _RET 
 308              	
 309              	/***************************************
 310              	    search_lineno 
ARM GAS  tinyBasic.s 			page 19


 311              	    localize BASIC line from its number 
 312              	    input:
 313              	      r0   line# 
 314              	    output: 
 315              	      r0   adr where found || adr new to be inserted 
 316              	      r1   0 found || !0 not found  
 317              	    use:
 318              	      r0   scan address 
 319              	      r1   temp   
 320              	      r2   address end of text
 321              	      r3   target line#
 322              	****************************************/    
 323              	    _GBL_FUNC search_lineno
 324 0248 0CB4     	    push {r2,r3} 
 325 024a 0346     	    mov r3,r0 // target 
 326 024c 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 327 024e 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 328 0250 9042     	1:  cmp r0,r2 
 329 0252 05D0     	    beq  8f
 330 0254 0188     	    ldrh r1,[r0]
 331 0256 C91A     	    subs r1,r3 
 332 0258 04D5     	    bpl 9f 
 333 025a 8178     	    ldrb r1,[r0,#2]
 334 025c 0844     	    add r0,r1
 335 025e F7E7     	    b 1b 
 336 0260 4FF0FF31 	8:  mov r1,#-1 
 337 0264 0CBC     	9:  pop {r2,r3}
 338 0266 7047     	    _RET 
 339              	
 340              	
 341              	/********************************************
 342              	    delete_line 
 343              	    delete BASIC line at addr 
 344              	    input:
 345              	      r0    address line to delete 
 346              	    output:
 347              	      r0    same as input 
 348              	    use: 
 349              	      r1    dest adr
 350              	      r2    bytes to move 
 351              	      T1    length line to delete 
 352              	      T2    txtend 
 353              	********************************************/
 354              	    _FUNC delete_line 
 355 0268 2DE90703 	    push {r0,r1,r2,T1,T2}
 356 026c 0146     	    mov r1,r0 // dest 
 357 026e 91F80280 	    ldrb T1,[r1,#2] // line length 
 358 0272 4044     	    add r0,T1  // src
 359 0274 D4F83490 	    ldr T2,[UPP,#TXTEND]
 360 0278 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 361 027c 00B5FFF7 	    _CALL cmove
 361      FEFF5DF8 
 361      04EB
 362 0286 A9EB0809 	    sub T2,T1 // txtend-count 
 363 028a C4F83490 	    str T2,[UPP,#TXTEND] 
 364 028e BDE80703 	    pop {r0,r1,r2,T1,T2}
 365 0292 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 20


 366              	
 367              	/******************************************
 368              	    create_gap 
 369              	    create a gap in text area to insert new line 
 370              	    input:
 371              	      r0    adr 
 372              	      r1    length 
 373              	    output:
 374              	      r0    adr 
 375              	    use:
 376              	      T1    length 
 377              	      T2    txtend 
 378              	************************************************/
 379              	    _FUNC create_gap 
 380 0294 2DE90503 	    push {r0,r2,T1,T2}
 381 0298 8846     	    mov T1,R1
 382 029a 0144     	    add r1,r0  // dest 
 383 029c D4F83490 	    ldr T2,[UPP,#TXTEND]
 384 02a0 A9EB0002 	    sub r2,T2,r0 
 385 02a4 00B5FFF7 	    _CALL cmove
 385      FEFF5DF8 
 385      04EB
 386 02ae C144     	    add T2,T1 
 387 02b0 C4F83490 	    str T2,[UPP,#TXTEND]
 388 02b4 BDE80503 	    pop {r0,r2,T1,T2}
 389 02b8 7047     	    _RET 
 390              	
 391              	/************************************************
 392              	    insert_line 
 393              	    insert BASIC line in text area 
 394              	    first search if line with same number exist 
 395              	    replace if so. 
 396              	    input:
 397              	      r0    *buffer to insert 
 398              	    output:
 399              	      none 
 400              	    use: 
 401              	      T1     *buffer
 402              	      T2     temp  
 403              	************************************************/ 
 404 02ba 00BF     	    _FUNC insert_line 
 405 02bc 2DE90203 	    push {r1,T1,T2}
 406 02c0 8046     	    mov T1,r0 
 407 02c2 B8F80000 	    ldrh r0,[T1]
 408 02c6 00B5FFF7 	    _CALL search_lineno 
 408      FEFF5DF8 
 408      04EB
 409 02d0 49B9     	    cbnz  r1, 1f // line# doesn't exist
 410              	// already exist 
 411 02d2 00B5FFF7 	    _CALL delete_line // delete old one 
 411      C8FF5DF8 
 411      04EB
 412 02dc 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 413 02e0 B9F1040F 	    cmp T2,#4 // empty line length==4  
 414 02e4 0ED0     	    beq 9f
 415              	1: //insert new line 
 416 02e6 98F80210 	    ldrb r1,[T1,#2]
ARM GAS  tinyBasic.s 			page 21


 417 02ea 00B5FFF7 	    _CALL create_gap 
 417      D2FF5DF8 
 417      04EB
 418 02f4 0146     	    mov r1,r0
 419 02f6 4046     	    mov r0,T1 
 420 02f8 8278     	    ldrb r2,[r0,#2]
 421 02fa 00B5FFF7 	    _CALL cmove 
 421      FEFF5DF8 
 421      04EB
 422 0304 BDE80203 	9:  pop {r1,T1,T2}
 423 0308 7047     	    _RET 
 424              	
 425              	/*********************************
 426              	    compile 
 427              	    tokenize source line save it 
 428              	    in pas buffer.
 429              	    compiled line format: 
 430              	      line_no  2 bytes {0...32767}
 431              	      count    1 byte  
 432              	      tokens   variable length 
 433              	  input:
 434              	     r0   *text buffer 
 435              	     r1   *text length   
 436              	  output:
 437              	    r0    0 stored | -1 immediate 
 438              	  use:
 439              	    r3    tib index   
 440              	    T1    tib
 441              	    T2    pad
 442              	***********************************/
 443 030a 00BF     	    _FUNC compile
 444 030c 8046     	    mov T1, r0  // source text buffer 
 445 030e 6160     	    str r1,[UPP,#COUNT] // save line length 
 446 0310 DFF8D899 	    ldr T2,pad // tokens buffer
 447 0314 83EA0303 	    eor r3,r3 // source index  
 448 0318 206C     	    ldr r0,[UPP,#FLAGS]
 449 031a 40F02000 	    orr r0,#FCOMP
 450 031e 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 451 0320 80EA0000 	    eor r0,r0     
 452 0324 29F8020B 	    strh r0,[T2],#2   // line no 
 453 0328 09F8010B 	    strb r0,[T2],#1 // length 
 454 032c 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 455 032e C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 456 0332 00B500F0 	    _CALL parse_int 
 456      06F95DF8 
 456      04EB
 457 033c 07D0     	    beq 2f 
 458              	// this is a line number     
 459 033e 0129     	    cmp r1,#1 
 460 0340 02D5     	    bpl 1f 
 461 0342 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 462 0346 31E3     	    b tb_error  
 463              	1:  // write line # to pad 
 464 0348 29F8031C 	    strh r1,[T2,#-3]
 465 034c 2360     	    str r3,[UPP,#IN_SAVED]
 466              	2:  // check for pad full 
 467 034e C145     	    cmp T2,T1
ARM GAS  tinyBasic.s 			page 22


 468 0350 02DB     	    blt 3f 
 469 0352 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 470 0356 29E3     	    b tb_error 
 471 0358 00B500F0 	3:  _CALL comp_token 
 471      27F85DF8 
 471      04EB
 472 0362 0028     	    cmp r0,#TK_NONE 
 473 0364 01D0     	    beq 4f 
 474 0366 2360     	    str r3,[UPP,#IN_SAVED]
 475 0368 F1E7     	    b 2b 
 476              	4: // compilation completed 
 477 036a DFF88039 	    ldr r3,pad 
 478 036e A9EB0300 	    sub r0,T2,r3 // line length 
 479 0372 9870     	    strb r0,[r3,#2]
 480 0374 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 481 0376 1888     	    ldrh r0,[r3] // line number 
 482 0378 70B1     	    cbz r0,8f  
 483              	// insert line in text buffer 
 484 037a 206C     	    ldr r0,[UPP,#FLAGS]
 485 037c 10F0080F 	    tst r0,#FSTOP
 486 0380 02D0     	    beq 7f 
 487 0382 4FF01000 	    mov r0,#ERR_CANT_PROG 
 488 0386 11E3     	    b tb_error 
 489 0388 1846     	7:  mov r0,r3 
 490 038a 00B5FFF7 	    _CALL insert_line 
 490      96FF5DF8 
 490      04EB
 491 0394 4040     	    eors r0,r0 
 492 0396 08E0     	    b 9f 
 493 0398 9B46     	8:  mov BPTR,r3 // *token_list 
 494 039a 4FF0030A 	    mov IN,#3
 495 039e 206C     	    ldr r0,[UPP,#FLAGS]
 496 03a0 A0F12000 	    sub r0,#FCOMP
 497 03a4 2064     	    str r0,[UPP,#FLAGS]
 498 03a6 5FF0FF30 	    movs r0,#-1 
 499 03aa 7047     	9:  _RET 
 500              	
 501              	/*********************************************
 502              	    compile next token from source 
 503              	    input: 
 504              	      r3 		tib index  
 505              	      T1    tib adr
 506              	      T2    insert point in pad  
 507              	    output:
 508              	      r0     token attribute 
 509              	      r1 		token value
 510              	      r3     tib index updated    
 511              	      T2     updated 
 512              	      use:
 513              	**********************************************/
 514              	    .macro _case c, next  
 515              	    cmp r0,#\c 
 516              	    bne \next
 517              	    .endm 
 518              	
 519              	    _FUNC comp_token 
 520 03ac 40B4     	    push {r6}
ARM GAS  tinyBasic.s 			page 23


 521 03ae 18F80300 	    ldrb r0,[T1,r3]
 522 03b2 0040     	    ands r0,r0 
 523 03b4 70D0     	    beq store_r0  // reached end of text  
 524 03b6 4FF02000 	    mov r0,#SPACE 
 525 03ba 00B500F0 	    _CALL skip  // skip spaces 
 525      12F95DF8 
 525      04EB
 526 03c4 18F80300 	    ldrb r0,[T1,r3]
 527 03c8 0040     	    ands r0,r0 
 528 03ca 65D0     	    beq store_r0  // reached end of text 
 529 03cc 03F10103 	    add r3,#1 
 530 03d0 00B500F0 	    _CALL upper 
 530      13F95DF8 
 530      04EB
 531 03da 00B500F0 	    _CALL is_special
 531      7CF85DF8 
 531      04EB
 532 03e4 DFF8A46D 	    ldr r6,=token_ofs
 533 03e8 D6E811F0 	    tbh [r6,r1] 
 534              	tok_idx0:     
 535              	//  not special char.  
 536 03ec 57E0     	    b try_number 
 537              	// single char token with no value 
 538              	single: 
 539 03ee DFF8A06D 	    ldr r6,=tok_single
 540 03f2 705C     	    ldrb r0,[r6,r1] 
 541 03f4 50E0     	    b store_r0  
 542              	lt:
 543 03f6 4FF03400 	    mov r0,#TK_LT
 544 03fa 18F80310 	    ldrb r1,[T1,r3]
 545 03fe 3E29     	    cmp r1,#'>' 
 546 0400 06D0     	    beq 1f
 547 0402 0AE0     	    b 2f 
 548              	gt:
 549 0404 4FF03100 	    mov r0,#TK_GT 
 550 0408 18F80310 	    ldrb r1,[T1,r3]
 551 040c 3C29     	    cmp r1,#'<'
 552 040e 04D1     	    bne 2f  
 553 0410 03F10103 	1:  add r3,#1
 554 0414 4FF03500 	    mov r0,#TK_NE  
 555 0418 3EE0     	    b store_r0
 556 041a 3D29     	2:  cmp r1,#'=' 
 557 041c 3CD1     	    bne store_r0  
 558 041e 03F10103 	    add r3,#1
 559 0422 00F10200 	    add r0,#2
 560 0426 37E0     	    b store_r0       
 561              	bkslash:
 562 0428 18F80310 	    ldrb r1,[T1,r3]
 563 042c 03F10103 	    add r3,#1
 564 0430 4FF00300 	    mov r0,#TK_CHAR 
 565 0434 09F8010B 	    strb r0,[T2],#1
 566 0438 09F8011B 	    strb r1,[T2],#1
 567 043c 49E0     	    b token_exit 
 568              	prt_cmd: 
 569 043e 4FF00B00 	    mov r0,#TK_CMD 
 570 0442 4FF03301 	    mov r1,#PRT_IDX
 571 0446 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 24


 572 044a 09F8011B 	    strb r1,[T2],#1
 573 044e 40E0     	    b token_exit 
 574              	quote:
 575 0450 4FF00200 	    mov r0,#TK_QSTR 
 576 0454 09F8010B 	    strb r0,[T2],#1
 577 0458 00B500F0 	    _CALL parse_quote
 577      8FF85DF8 
 577      04EB
 578 0462 36E0     	    b token_exit
 579              	tick: 
 580              	// copy comment in pad 
 581 0464 4FF00B00 	    mov r0,#TK_CMD 
 582 0468 4FF03701 	    mov r1,#REM_IDX 
 583 046c 09F8010B 	    strb r0,[T2],#1 
 584 0470 09F8011B 	    strb r1,[T2],#1
 585 0474 08EB0300 	    add r0,T1,r3 
 586 0478 4946     	    mov r1,T2 
 587 047a 00B5FFF7 	    _CALL strcpy 
 587      FEFF5DF8 
 587      04EB
 588 0484 00B5FFF7 	    _CALL strlen 
 588      FEFF5DF8 
 588      04EB
 589 048e 8144     	    add T2,r0
 590 0490 09F10109 	    add T2,#1
 591 0494 6368     	    ldr r3,[UPP,#COUNT]
 592 0496 1CE0     	    b token_exit
 593              	store_r0: 
 594 0498 09F8010B 	    strb r0,[T2],#1
 595 049c 19E0     	    b token_exit 
 596              	try_number:
 597 049e A3F10103 	    sub r3,#1
 598 04a2 00B500F0 	    _CALL parse_int  
 598      4EF85DF8 
 598      04EB
 599 04ac 04D0     	    beq 1f 
 600 04ae 09F8010B 	    strb r0,[T2],#1 
 601 04b2 49F8041B 	    str r1,[T2],#4
 602 04b6 0CE0     	    b token_exit 
 603 04b8 00B500F0 	1:  _CALL parse_keyword 
 603      23F95DF8 
 603      04EB
 604 04c2 0428     	    cmp r0,#TK_VAR 
 605 04c4 01D0     	    beq 2f 
 606 04c6 3729     	    cmp r1,#REM_IDX 
 607 04c8 CCD0     	    beq tick
 608 04ca 09F8010B 	2:  strb r0,[T2],#1 
 609 04ce 09F8011B 	    strb r1,[T2],#1
 610              	token_exit:
 611 04d2 40BC     	    pop {r6}
 612 04d4 7047     	    _RET 
 613              	
 614              	/****************************
 615              	    is_special  
 616              	    check for non alphanum
 617              	    input:
 618              	      r0    character to scan 
ARM GAS  tinyBasic.s 			page 25


 619              	    output:
 620              	      r0    character 
 621              	      r1    0 || index 
 622              	    use: 
 623              	      r1    scan index 
 624              	      r2    temp 
 625              	      r3    char_list 
 626              	*****************************/
 627 04d6 00BF     	    _FUNC is_special 
 628 04d8 0CB4     	    push {r2,r3}
 629 04da 4FF00101 	    mov r1,#1
 630 04de DFF8B43C 	    ldr r3,=char_list 
 631 04e2 5A5C     	1:  ldrb r2,[r3,r1]
 632 04e4 22B1     	    cbz r2,8f 
 633 04e6 8242     	    cmp r2,r0 
 634 04e8 04D0     	    beq 9f 
 635 04ea 01F10101 	    add r1,#1 
 636 04ee F8E7     	    b 1b
 637 04f0 81EA0101 	8:  eor r1,r1     
 638 04f4 0CBC     	9:  pop {r2,r3}
 639 04f6 7047     	    _RET 
 640              	
 641              	char_list:
 642 04f8 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 642      28293A23 
 642      2D2B2A2F 
 642      253D3C3E 
 642      5C3F2722 
 643              	
 644              	tok_single:
 645 050d 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 645      060701
 646 0514 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 646      212232
 647              	  
 648 051b 00       	  .p2align 2
 649              	token_ofs:
 650 051c 0000     	  .hword  0 // not found
 651              	  // TK_COMMA...TK_EQUAL , 13 
 652 051e 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 652      01000100 
 653 0526 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 653      01000100 
 654 052e 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 654      01000100 
 655 0536 0100     	  .hword  (single-tok_idx0)/2     
 656              	  // '<','>'
 657 0538 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 658              	  // '\'
 659 053c 1E00     	  .hword  (bkslash-tok_idx0)/2
 660              	  // '?' 
 661 053e 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 662              	  // "'"  
 663 0540 3C00     	  .hword  (tick-tok_idx0)/2 
 664              	  // '"' quote 
 665 0542 3200     	  .hword (quote-tok_idx0)/2
 666              	
ARM GAS  tinyBasic.s 			page 26


 667              	  .p2align 2
 668              	
 669              	/****************************
 670              	    parse_int 
 671              	    parse an integer from text
 672              	    if not valid integer 
 673              	    r1 return *buffer else 
 674              	    *buffer is incremented after integer 
 675              	  input:
 676              	    r0   *buffer 
 677              	  output:
 678              	    r0   TK_INTGR|TK_NONE
 679              	    r1   int|0   
 680              	  use:
 681              	    r3   tib index updated     
 682              	*****************************/
 683              	    _FUNC parse_int 
 684 0544 4FF00A01 	    mov r1,#10 // default base 
 685 0548 18F80300 	    ldrb r0,[T1,r3]
 686 054c 2428     	    cmp r0,'$' 
 687 054e 02D1     	    bne 2f 
 688 0550 4FF01001 	    mov r1,#16 // hexadecimal number 
 689 0554 03E0     	    b 3f  
 690 0556 2628     	2:  cmp r0,#'&' 
 691 0558 03D1     	    bne 4f
 692 055a 4FF00201 	    mov r1,#2 //binary number  
 693 055e 03F10103 	3:  add r3,#1
 694 0562 03EB0800 	4:  add r0,r3,T1 
 695 0566 00B5FFF7 	    _CALL atoi 
 695      FEFF5DF8 
 695      04EB
 696 0570 10B1     	    cbz r0,9f
 697 0572 0344     	    add r3,r0
 698 0574 4FF00F00 	    mov r0,#TK_INTGR
 699 0578 0040     	9:  ands r0,r0   
 700 057a 7047     	    _RET 
 701              	
 702              	/*********************************************
 703              	    parse_quote 
 704              	    parse quoted string 
 705              	    input: 
 706              	      r3 		tib index  
 707              	      T1    tib adr
 708              	      T2    insert point in pad  
 709              	    output:
 710              	      r0     token attribute 
 711              	      r1 		*str 
 712              	      r3     tib index updated    
 713              	      T2     updated 
 714              	      use:
 715              	*********************************************/
 716              	    _FUNC parse_quote
 717 057c 4DF8049D 	    push {T2} 
 718 0580 18F80300 	1:  ldrb r0,[T1,r3]
 719 0584 03F10103 	    add r3,#1 
 720 0588 2228     	    cmp r0,#'"'
 721 058a 09D0     	    beq 9f 
ARM GAS  tinyBasic.s 			page 27


 722 058c 5C28     	    cmp r0,#'\\'
 723 058e 04D1     	    bne 2f 
 724 0590 00B500F0 	    _CALL get_escaped_char 
 724      0DF85DF8 
 724      04EB
 725 059a 09F8010B 	2:  strb r0,[T2],#1
 726 059e EFE7     	    b 1b 
 727 05a0 80EA0000 	9:  eor  r0,r0
 728 05a4 09F8010B 	    strb r0,[T2],#1
 729 05a8 4FF00200 	    mov r0,#TK_QSTR
 730 05ac 02BC     	    pop {r1}
 731 05ae 7047     	    _RET 
 732              	
 733              	/**********************************************
 734              	    get_escaped_char 
 735              	    convert "\c" in quoted string 
 736              	    input:
 737              	      r0 
 738              	      r3   index 
 739              	      T1   tib 
 740              	    output:
 741              	      r0   replacement char
 742              	      r3   updated 
 743              	    use:
 744              	      r1   *table 
 745              	      r2   temp 
 746              	**********************************************/
 747              	    _FUNC get_escaped_char 
 748 05b0 06B4     	    push {r1,r2}
 749 05b2 18F80300 	    ldrb r0,[T1,r3]
 750 05b6 03F10103 	    add r3,#1
 751 05ba 2228     	    cmp r0,#'"' 
 752 05bc 0BD0     	    beq 9f 
 753 05be DFF8D81B 	1:  ldr r1,=escaped 
 754 05c2 11F8012B 	2:  ldrb r2,[r1],#1
 755 05c6 12B1     	    cbz r2,6f 
 756 05c8 8242     	    cmp r2,r0 
 757 05ca 02D0     	    beq 7f 
 758 05cc F9E7     	    b 2b
 759 05ce A0F10702 	6:  sub r2,r0,#7     
 760 05d2 02F10700 	7:  add r0,r2,#7
 761 05d6 06BC     	9:  pop {r1,r2}   
 762 05d8 7047     	    _RET
 763              	
 764 05da 6162746E 	escaped: .asciz "abtnvfr"
 764      76667200 
 765              	
 766              	/*********************************************
 767              	   skip character in TIB 
 768              	   input:
 769              	      r0    character to skip 
 770              	      r3    tib index 
 771              	      T1    tib adr
 772              	    output: 
 773              	      r3    updated
 774              	    use:
 775              	      r1     
ARM GAS  tinyBasic.s 			page 28


 776              	**********************************************/   
 777 05e2 00BF     	    _FUNC skip
 778 05e4 02B4     	    push {r1} 
 779 05e6 18F80310 	1:  ldrb r1,[T1,r3]
 780 05ea 8142     	    cmp r1,r0
 781 05ec 02D1     	    bne 2f
 782 05ee 03F10103 	    add r3,#1 
 783 05f2 F8E7     	    b 1b 
 784 05f4 2360     	2:  str r3,[UPP,#IN_SAVED]
 785 05f6 02BC     	    pop {r1}
 786 05f8 7047     	    _RET
 787              	
 788              	/********************************************
 789              	    upper
 790              	    convert character in upper case 
 791              	    input: 
 792              	      r0   character 
 793              	    output:
 794              	      r0   upper case character 
 795              	*********************************************/
 796 05fa 00BF     	    _FUNC upper 
 797 05fc 6128     	    cmp r0,#'a' 
 798 05fe 03DB     	    blt 9f 
 799 0600 7A28     	    cmp r0,#'z' 
 800 0602 01DC     	    bgt 9f 
 801 0604 00F05F00 	    and r0,#0x5f 
 802 0608 7047     	9:  _RET 
 803              	
 804              	/***************************************
 805              	   is_digit 
 806              	   check if char is decimal digit.
 807              	   convert to decimal digit.
 808              	   input:
 809              	      r0    char 
 810              	   output:
 811              	      r0    if !Z then converted digit 
 812              	      Z     0 true | 1 false  
 813              	***************************************/
 814 060a 00BF     	    _GBL_FUNC is_digit 
 815 060c 02B4     	    push {r1} 
 816 060e 81EA0101 	    eor r1,r1 
 817 0612 3028     	    cmp r0,#'0' 
 818 0614 05DB     	    blt 9f
 819 0616 3A28     	    cmp r0,'9'+1
 820 0618 03D5     	    bpl 9f 
 821 061a 4FF0FF31 	    mov r1,#-1
 822 061e A0F13000 	    sub r0,#'0'  
 823              	9:   
 824 0622 0940     	    ands r1,r1
 825 0624 02BC     	    pop {r1} 
 826 0626 7047     	    _RET 
 827              	
 828              	/***************************************
 829              	    is_hex 
 830              	    check for hexadecimal digit 
 831              	    convert to hex digit.
 832              	    input:
ARM GAS  tinyBasic.s 			page 29


 833              	      r0    
 834              	    output:
 835              	      r0     if !Z then converted digit 
 836              	      Z      0 true | 1 false         
 837              	***************************************/
 838              	    _FUNC is_hex 
 839 0628 02B4     	    push {r1}
 840 062a 4FF0FF31 	    mov r1,#-1 
 841 062e 4128     	    cmp r0,#'A' 
 842 0630 01D4     	    bmi 1f 
 843 0632 A0F10700 	    sub r0,#7 
 844 0636 A0F13000 	1:  sub r0,#'0'
 845 063a 01D4     	    bmi 2f 
 846 063c 1028     	    cmp r0,#16
 847 063e 01D4     	    bmi 9f 
 848 0640 81EA0101 	2:  eor r1,r1  
 849 0644 0940     	9:  ands r1,r1 
 850 0646 02BC     	    pop {r1}
 851 0648 7047     	    _RET 
 852              	
 853              	/***************************************
 854              	    is_bit 
 855              	    check if char is '0'|'1' 
 856              	    convert to binary digit. 
 857              	    input:
 858              	      r0    
 859              	    output:
 860              	      r0     if !Z then converted digit 
 861              	      Z      0 true | 1 false         
 862              	***************************************/
 863 064a 00BF     	    _FUNC is_bit
 864 064c 02B4     	    push  {r1}
 865 064e 4FF0FF31 	    mov r1,#-1 
 866 0652 A0F13000 	    sub r0,#'0' 
 867 0656 01D4     	    bmi 2f 
 868 0658 0229     	    cmp r1,#2
 869 065a 01D4     	    bmi 9f 
 870 065c 81EA0101 	2:  eor r1,r1 
 871 0660 0940     	9:  ands r1,r1 
 872 0662 02BC     	    pop {r1}
 873 0664 7047     	    _RET 
 874              	
 875              	/***************************************
 876              	    is_alpha 
 877              	    check if character is {a..z,A..Z} 
 878              	  input:
 879              	    r0   character 
 880              	  output: 
 881              	    r0    same character 
 882              	    Z    0 true | 1 false  
 883              	****************************************/
 884 0666 00BF     	    _FUNC is_alpha
 885 0668 02B4     	    push {r1} 
 886 066a 4FF0FF31 	    mov r1,#-1
 887 066e 4128     	    cmp r0,#'A' 
 888 0670 05D4     	    bmi 8f 
 889 0672 5B28     	    cmp r0,#'Z'+1 
ARM GAS  tinyBasic.s 			page 30


 890 0674 05D4     	    bmi 9f
 891 0676 6128     	    cmp r0,#'a' 
 892 0678 01D4     	    bmi 8f 
 893 067a 7B28     	    cmp r0,#'z'+1
 894 067c 01D4     	    bmi 9f  
 895 067e 81EA0101 	8:  eor r1,r1  
 896 0682 0940     	9:  ands r1,r1 
 897 0684 02BC     	    pop {r1}
 898 0686 7047     	    _RET 
 899              	
 900              	/***************************************
 901              	    is_num 
 902              	    check if character is {0..9} 
 903              	  input:
 904              	    r0   character 
 905              	  output: 
 906              	    r0    same character 
 907              	    Z    0 true | 1 false  
 908              	****************************************/
 909              	    _FUNC is_num 
 910 0688 02B4     	    push {r1} 
 911 068a 4FF0FF31 	    mov r1,#-1 
 912 068e 3028     	    cmp r0,#'0' 
 913 0690 01DB     	    blt 8f 
 914 0692 3A28     	    cmp r0,#'9'+1 
 915 0694 01D4     	    bmi 9f 
 916 0696 81EA0101 	8:  eor r1,r1  
 917 069a 0940     	9:  ands r1,r1 
 918 069c 02BC     	    pop {r1}
 919 069e 7047     	    _RET 
 920              	
 921              	/*****************************************
 922              	    is_alnum 
 923              	    check if character is alphanumeric 
 924              	    input:
 925              	      r0 
 926              	    output:
 927              	      r0     same 
 928              	      Z      1 false | 0 true 
 929              	*****************************************/
 930              	    _FUNC is_alnum 
 931 06a0 00B5FFF7 	    _CALL is_alpha 
 931      E1FF5DF8 
 931      04EB
 932 06aa 04D1     	    bne 9f 
 933 06ac 00B5FFF7 	    _CALL is_num 
 933      EBFF5DF8 
 933      04EB
 934 06b6 7047     	9:  _RET 
 935              	
 936              	/******************************************
 937              	    atoi 
 938              	    convert ascii to integer 
 939              	    input:
 940              	      r0   *buffer 
 941              	      r1   base 
 942              	    output:
ARM GAS  tinyBasic.s 			page 31


 943              	      r0   0 no integer found 
 944              	      r1   integer
 945              	    use:
 946              	      r2   base  
 947              	      T1   *buffer 
 948              	      T2   digit count  
 949              	******************************************/
 950              	    _GBL_FUNC atoi 
 951 06b8 2DE90403 	    push {r2,T1,T2}
 952 06bc 8046     	    mov T1,r0  // *buffer 
 953 06be 0A46     	    mov r2,r1  // base  
 954 06c0 81EA0101 	    eor r1,r1  // converted integer 
 955 06c4 89EA0909 	    eor T2,T2  // digit count 
 956 06c8 18F8010B 	1:  ldrb r0,[T1],#1
 957 06cc 00B5FFF7 	    _CALL upper 
 957      95FF5DF8 
 957      04EB
 958 06d6 3028     	    cmp r0,#'0'
 959 06d8 0FD4     	    bmi 8f
 960 06da 3A28     	    cmp r0,#'9'+1 
 961 06dc 03D4     	    bmi 2f 
 962 06de 4128     	    cmp r0,#'A'
 963 06e0 0BD4     	    bmi 8f 
 964 06e2 A0F10700 	    sub r0,#7 
 965 06e6 A0F13000 	2:  sub r0,#'0' 
 966 06ea 9042     	    cmp r0,r2
 967 06ec 05D5     	    bpl 8f  
 968 06ee 02FB01F1 	    mul r1,r2 
 969 06f2 0144     	    add r1,r0
 970 06f4 09F10109 	    add T2,#1
 971 06f8 E6E7     	    b 1b 
 972 06fa 4846     	8:  mov r0,T2  
 973 06fc BDE80403 	    pop {r2,T1,T2}
 974 0700 7047     	    _RET 
 975              	
 976              	/*****************************************
 977              	    parse_keyword 
 978              	    parse work and ckeck if in dictionary 
 979              	    input:
 980              	      r0    first character 
 981              	      r3    tib index 
 982              	      t1    tib 
 983              	      t2    pad 
 984              	    output:
 985              	      r3    updated 
 986              	      t1    updated 
 987              	      t2    updated   
 988              	    use:
 989              	    
 990              	*****************************************/
 991 0702 00BF     	    _FUNC parse_keyword 
 992 0704 4DF8049D 	    push {T2}
 993 0708 18F80300 	    ldrb r0,[T1,r3]
 994 070c 03F10103 	    add r3,#1
 995 0710 00B3     	    cbz r0,2f 
 996 0712 00B5FFF7 	    _CALL upper 
 996      72FF5DF8 
ARM GAS  tinyBasic.s 			page 32


 996      04EB
 997 071c 00B5FFF7 	    _CALL is_alpha 
 997      A3FF5DF8 
 997      04EB
 998 0726 00F03D81 	    beq syntax_error 
 999 072a 09F8010B 	    strb r0,[T2],#1
 1000 072e 18F80300 	1:  ldrb r0,[T1,r3]
 1001 0732 03F10103 	    add r3,#1 
 1002 0736 68B1     	    cbz r0,2f 
 1003 0738 00B5FFF7 	    _CALL upper 
 1003      5FFF5DF8 
 1003      04EB
 1004 0742 00B5FFF7 	    _CALL is_alnum
 1004      ACFF5DF8 
 1004      04EB
 1005 074c 02D0     	    beq 2f 
 1006 074e 09F8010B 	    strb r0,[T2],#1
 1007 0752 ECE7     	    b 1b 
 1008 0754 A3F10103 	2:  sub r3,#1
 1009 0758 80EA0000 	    eor r0,r0
 1010 075c 89F80000 	    strb r0,[T2] 
 1011 0760 0098     	    ldr r0,[sp]
 1012 0762 4178     	    ldrb r1,[r0,#1] 
 1013 0764 29B9     	    cbnz r1,3f
 1014 0766 0178     	    ldrb r1,[r0]
 1015 0768 A1F14101 	    sub r1,#'A'
 1016 076c 4FF00400 	    mov r0,#TK_VAR
 1017 0770 08E0     	    b 9f 
 1018 0772 DFF8281A 	3:  ldr r1,=kword_dict  
 1019 0776 00B500F0 	    _CALL search_dict 
 1019      D6F95DF8 
 1019      04EB
 1020 0780 00B9     	    cbnz r0,9f 
 1021 0782 0FE1     	    b syntax_error 
 1022 0784 5DF8049B 	9:  pop {T2}
 1023 0788 7047     	    _RET 
 1024              	
 1025              	
 1026              	/*******************
 1027              	    DECOMPILER 
 1028              	*******************/
 1029              	
 1030              	/********************************************
 1031              	    cmd_name 
 1032              	    search bytecode in dictionary and 
 1033              	    return its name 
 1034              	  input:
 1035              	    r0    keyword bytecode 
 1036              	  ouput:
 1037              	    r0    name string 
 1038              	  use:
 1039              	    T1    link 
 1040              	    T2    tmp 
 1041              	*********************************************/
 1042 078a 00BF     	    _FUNC cmd_name 
 1043 078c 2DE90003 	    push {T1,T2}
 1044 0790 DFF8088A 	    ldr T1,=kword_dict 
ARM GAS  tinyBasic.s 			page 33


 1045 0794 58F8089C 	1:  ldr T2,[T1,#-8]
 1046 0798 8145     	    cmp T2,r0 
 1047 079a 04D0     	    beq 2f 
 1048 079c 58F80C8C 	    ldr T1,[T1,#-12]
 1049 07a0 B8F1000F 	    cmp T1,#0
 1050 07a4 F6D1     	    bne 1b  
 1051 07a6 4046     	2:  mov r0,T1 
 1052 07a8 BDE80003 	    pop {T1,T2}
 1053 07ac 7047     	    _RET
 1054              	
 1055              	/*****************************
 1056              	  decompile_line 
 1057              	  detokenize BASIC line 
 1058              	  input:
 1059              	    r0  *token list 
 1060              	    r1  *output buffer 
 1061              	  output:
 1062              	    r0  *output buffer (.asciz) 
 1063              	  use:
 1064              	    T1  *output buffer
 1065              	    BPTR  *token list
 1066              	    IN  offset in token list  
 1067              	******************************/
 1068 07ae 00BF     	    _GBL_FUNC decompile_line
 1069 07b0 2DE90201 	    push {r1,T1} 
 1070 07b4 8346     	    mov BPTR,r0 
 1071 07b6 4FF0000A 	    mov IN,#0
 1072 07ba 8846     	    mov T1,r1 
 1073 07bc 3BF80A00 	    ldrh r0,[BPTR,IN]
 1074 07c0 0AF1020A 	    add IN,#2 
 1075 07c4 4FF00A01 	    mov r1,#10 
 1076 07c8 00B5FFF7 	    _CALL itoa
 1076      FEFF5DF8 
 1076      04EB
 1077 07d2 4146     	    mov r1,T1
 1078 07d4 00B5FFF7 	    _CALL strcpy
 1078      FEFF5DF8 
 1078      04EB
 1079 07de 4046     	    mov r0,T1 
 1080 07e0 00B5FFF7 	    _CALL strlen
 1080      FEFF5DF8 
 1080      04EB
 1081 07ea 8044     	    add T1,r0 
 1082 07ec 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1083 07f0 0AF1010A 	    add IN,#1 
 1084 07f4 6060     	    str r0,[UPP,#COUNT]
 1085              	decomp_loop:
 1086 07f6 00B500F0 	    _CALL next_token
 1086      CCFA5DF8 
 1086      04EB
 1087 0800 0028     	    cmp r0,#TK_NONE 
 1088 0802 00F09B80 	    beq 9f  
 1089 0806 0F28     	    cmp r0,#TK_INTGR 
 1090 0808 15D1     	    bne 1f 
 1091 080a 0846     	    mov r0,r1 
 1092 080c A169     	    ldr r1,[UPP,#BASE]
 1093 080e 00B5FFF7 	    _CALL itoa
ARM GAS  tinyBasic.s 			page 34


 1093      FEFF5DF8 
 1093      04EB
 1094 0818 01B4     	    push {r0}
 1095 081a 4146     	    mov r1,T1 
 1096 081c 00B5FFF7 	    _CALL strcpy
 1096      FEFF5DF8 
 1096      04EB
 1097 0826 01BC     	    pop {r0} 
 1098 0828 00B5FFF7 	    _CALL strlen
 1098      FEFF5DF8 
 1098      04EB
 1099 0832 8044     	    add T1,r0 
 1100 0834 DFE7     	    b decomp_loop 
 1101 0836 0428     	1:  cmp r0,#TK_VAR 
 1102 0838 04D1     	    bne 2f 
 1103 083a 01F14100 	    add r0,r1,'A'
 1104 083e 08F8010B 	    strb r0,[T1],#1 
 1105 0842 D8E7     	    b decomp_loop 
 1106 0844 0328     	2:  cmp r0,#TK_CHAR 
 1107 0846 0AD1     	    bne 3f 
 1108 0848 4FF05C00 	    mov r0,#'\\'
 1109 084c 08F8010B 	    strb r0,[T1],#1
 1110 0850 08F8011B 	    strb r1,[T1],#1
 1111 0854 4FF02000 	    mov r0,#SPACE 
 1112 0858 08F8010B 	    strb r0,[T1],#1
 1113 085c CBE7     	    b decomp_loop 
 1114 085e 0228     	3:  cmp r0,#TK_QSTR 
 1115 0860 17D1     	    bne 4f 
 1116 0862 4FF02200 	    mov r0,#'"'
 1117 0866 08F8010B 	    strb r0,[T1],#1 
 1118 086a 0846     	    mov r0,r1
 1119 086c 02B4     	    push {r1}
 1120 086e 4146     	    mov r1,T1  
 1121 0870 00B5FFF7 	    _CALL strcpy
 1121      FEFF5DF8 
 1121      04EB
 1122 087a 01BC     	    pop {r0}
 1123 087c 00B5FFF7 	    _CALL strlen 
 1123      FEFF5DF8 
 1123      04EB
 1124 0886 8044     	    add T1,r0 
 1125 0888 4FF02200 	    mov r0,#'"'
 1126 088c 08F8010B 	    strb r0,[T1],#1 
 1127 0890 B1E7     	    b decomp_loop
 1128 0892 0B28     	4:  cmp r0,#TK_CMD
 1129 0894 3AD4     	    bmi 5f 
 1130 0896 0F28     	    cmp r0,#TK_INTGR 
 1131 0898 38D5     	    bpl 5f
 1132 089a 4FF02000 	    mov r0,#SPACE 
 1133 089e 08F8010B 	    strb r0,[T1],#1  
 1134 08a2 0846     	    mov r0,r1
 1135 08a4 3328     	    cmp r0,#PRT_IDX 
 1136 08a6 04D1     	    bne 1f  
 1137 08a8 4FF03F00 	    mov r0,#'?'
 1138 08ac 08F8010B 	    strb r0,[T1],#1 
 1139 08b0 27E0     	    b 3f 
 1140 08b2 3728     	1:  cmp r0,#REM_IDX
ARM GAS  tinyBasic.s 			page 35


 1141 08b4 12D1     	    bne 1f
 1142 08b6 4FF02700 	    mov r0,#'\''
 1143 08ba 08F8010B 	    strb r0,[T1],#1 
 1144 08be 0BEB0A00 	    add r0,BPTR,IN
 1145 08c2 4146     	    mov r1,T1   
 1146 08c4 00B5FFF7 	    _CALL strcpy
 1146      FEFF5DF8 
 1146      04EB
 1147 08ce 80EA0000 	    eor r0,r0 
 1148 08d2 88F80000 	    strb r0,[T1]  
 1149 08d6 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1150 08da 2FE0     	    b 9f 
 1151 08dc 00B5FFF7 	1:  _CALL cmd_name
 1151      55FF5DF8 
 1151      04EB
 1152 08e6 01B4     	2:  push {r0}
 1153 08e8 4146     	    mov r1,T1 
 1154 08ea 00B5FFF7 	    _CALL strcpy 
 1154      FEFF5DF8 
 1154      04EB
 1155 08f4 01BC     	    pop {r0}
 1156 08f6 00B5FFF7 	    _CALL strlen 
 1156      FEFF5DF8 
 1156      04EB
 1157 0900 8044     	    add T1,r0 
 1158 0902 4FF02000 	3:  mov r0,#SPACE 
 1159 0906 08F8010B 	    strb r0,[T1],#1 
 1160 090a 74E7     	    b decomp_loop
 1161 090c 01B4     	5:  push {r0}
 1162 090e DFF89018 	    ldr r1,=single_char 
 1163 0912 085C     	    ldrb r0,[r1,r0]
 1164 0914 02BC     	    pop {r1}
 1165 0916 10B1     	    cbz r0,6f 
 1166 0918 08F8010B 	    strb r0,[T1],#1 
 1167 091c 6BE7     	    b decomp_loop
 1168 091e 3329     	6:  cmp r1,#TK_GE 
 1169 0920 02D1     	    bne 7f 
 1170 0922 DFF88008 	    ldr r0,=ge_str
 1171 0926 DEE7     	    b 2b 
 1172 0928 3629     	7:  cmp r1,#TK_LE 
 1173 092a 02D1     	    bne 8f
 1174 092c DFF87808 	    ldr r0,=le_str
 1175 0930 D9E7     	    b 2b
 1176 0932 3529     	8:  cmp r1,#TK_NE 
 1177 0934 02D1     	    bne 9f 
 1178 0936 DFF87408 	    ldr r0,=ne_str 
 1179 093a D4E7     	    b 2b 
 1180 093c 80EA0000 	9:  eor r0,r0 
 1181 0940 88F80000 	    strb r0,[T1]
 1182 0944 BDE80201 	    pop {r1,T1}
 1183 0948 0846     	    mov r0,r1 
 1184 094a 7047     	    _RET 
 1185              	
 1186 094c 3E3D00   	ge_str: .asciz ">="
 1187 094f 3C3D00   	le_str: .asciz "<="
 1188 0952 3C3E00   	ne_str: .asciz "<>"
 1189              	
ARM GAS  tinyBasic.s 			page 36


 1190              	single_char:
 1191 0955 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1191      00402829 
 1191      2C3B23
 1192 0960 00000000 	  .space 5
 1192      00
 1193 0965 2B2D     	  .byte '+', '-'
 1194 0967 00000000 	  .space 14
 1194      00000000 
 1194      00000000 
 1194      0000
 1195 0975 2A2F25   	  .byte '*', '/', '%'
 1196 0978 00000000 	  .space 14
 1196      00000000 
 1196      00000000 
 1196      0000
 1197 0986 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1197      0000
 1198              	
 1199              	
 1200              	/**********************************
 1201              	  modulo 
 1202              	  compute r0 mod r1
 1203              	  input:
 1204              	    r0   dividend
 1205              	    r1   divisor 
 1206              	  output:
 1207              	    r0   TK_INTGR 
 1208              	    r1   r0 mod r1 
 1209              	*********************************/
 1210              	    _GBL_FUNC modulo 
 1211 098c 01B4     	    push {r0}
 1212 098e B0FBF1F0 	    udiv r0,r1 
 1213 0992 01FB00F0 	    mul  r0,r1 
 1214 0996 02BC     	    pop {r1}
 1215 0998 A1EB0001 	    sub r1,r0
 1216 099c 4FF00F00 	    mov r0,#TK_INTGR
 1217 09a0 7047     	    _RET 
 1218              	
 1219              	/**********************************
 1220              	      BASIC commands 
 1221              	**********************************/
 1222              	
 1223              	/*********************************
 1224              	    syntax_error 
 1225              	    display syntax error message and 
 1226              	    abort program 
 1227              	  input:
 1228              	    none  
 1229              	  output: 
 1230              	    none 
 1231              	  use:
 1232              	*********************************/
 1233 09a2 00BF     	    _FUNC syntax_error 
 1234 09a4 4FF00200 	    mov r0,#ERR_SYNTAX
 1235 09a8 00E0     	    b tb_error 
 1236              	
ARM GAS  tinyBasic.s 			page 37


 1237              	/*********************************
 1238              	    tb_error 
 1239              	    display BASIC error and 
 1240              	    abort program. 
 1241              	  input:
 1242              	    r0    error code   
 1243              	  output: 
 1244              	    none 
 1245              	  use:
 1246              	    r1    temp 
 1247              	*********************************/
 1248 09aa 00BF     	    _FUNC tb_error 
 1249 09ac 216C     	    ldr r1,[UPP,#FLAGS]
 1250 09ae 11F0200F 	    tst r1,#FCOMP
 1251 09b2 43D1     	    bne compile_error
 1252              	rt_error:
 1253 09b4 5246     	    mov r2,IN 
 1254 09b6 01B4     	    push {r0}
 1255 09b8 DFF8F407 	    ldr r0,=rt_error_msg 
 1256 09bc 00B5FFF7 	    _CALL uart_puts 
 1256      FEFF5DF8 
 1256      04EB
 1257 09c6 01BC     	    pop {r0}
 1258 09c8 DFF8E817 	    ldr r1,=err_msg  
 1259 09cc 4FEA8000 	    lsl r0,#2 
 1260 09d0 0858     	    ldr r0,[r1,r0]
 1261 09d2 00B5FFF7 	    _CALL uart_puts
 1261      FEFF5DF8 
 1261      04EB
 1262              	// decompile and print faulty line      
 1263 09dc 5846     	    mov r0,BPTR
 1264 09de 5246     	    mov r2,IN  
 1265 09e0 DFF80813 	    ldr r1,pad 
 1266 09e4 00B5FFF7 	    _CALL decompile_line
 1266      FEFF5DF8 
 1266      04EB
 1267 09ee 00B5FFF7 	    _CALL uart_puts 
 1267      FEFF5DF8 
 1267      04EB
 1268 09f8 00B5FFF7 	    _CALL cr 
 1268      FEFF5DF8 
 1268      04EB
 1269              	// print error offset on line      
 1270 0a02 DFF8B407 	    ldr r0,=token_at_msg 
 1271 0a06 00B5FFF7 	    _CALL uart_puts 
 1271      FEFF5DF8 
 1271      04EB
 1272 0a10 1046     	    mov r0,r2 
 1273 0a12 4FF01001 	    mov r1,#16 
 1274 0a16 00B5FFF7 	    _CALL print_int
 1274      FEFF5DF8 
 1274      04EB
 1275 0a20 00B5FFF7 	    _CALL cr
 1275      FEFF5DF8 
 1275      04EB
 1276              	// dump tokenize line 
 1277 0a2a 5846     	    mov r0,BPTR
ARM GAS  tinyBasic.s 			page 38


 1278 0a2c 8278     	    ldrb r2,[r0,#2]
 1279 0a2e 00B500F0 	    _CALL dump01 
 1279      99F95DF8 
 1279      04EB
 1280 0a38 FFF7FEBF 	    b warm_start 
 1281              	compile_error:
 1282 0a3c DFF87417 	    ldr r1,=err_msg 
 1283 0a40 4FEA8000 	    lsl r0,#2 
 1284 0a44 0858     	    ldr r0,[r1,r0]
 1285 0a46 00B5FFF7 	    _CALL uart_puts
 1285      FEFF5DF8 
 1285      04EB
 1286 0a50 A068     	    ldr r0,[UPP,#BASICPTR]
 1287 0a52 00B5FFF7 	    _CALL uart_puts
 1287      FEFF5DF8 
 1287      04EB
 1288 0a5c 00B5FFF7 	    _CALL cr
 1288      FEFF5DF8 
 1288      04EB
 1289 0a66 2068     	    ldr r0,[UPP,#IN_SAVED]
 1290 0a68 00B5FFF7 	    _CALL spaces 
 1290      FEFF5DF8 
 1290      04EB
 1291 0a72 4FF05E00 	    mov r0,#'^' 
 1292 0a76 00B5FFF7 	    _CALL uart_putc
 1292      FEFF5DF8 
 1292      04EB
 1293 0a80 00B5FFF7 	    _CALL cr
 1293      FEFF5DF8 
 1293      04EB
 1294 0a8a FFF7FEBF 	    b  warm_start  
 1295              	    
 1296 0a8e 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1296      74696D65 
 1296      20657272 
 1296      6F723A20 
 1296      00
 1297 0a9f 746F6B65 	token_at_msg: .asciz "token offset: "
 1297      6E206F66 
 1297      66736574 
 1297      3A2000
 1298              	
 1299              	
 1300              	err_msg:
 1301 0aae 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1301      00000000 
 1301      0D000000 
 1301      1B000000 
 1301      34000000 
 1302 0ac6 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1302      6F000000 
 1302      89000000 
 1302      9A000000 
 1302      AB000000 
 1303 0ada B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1303      EA000000 
 1303      FA000000 
ARM GAS  tinyBasic.s 			page 39


 1303      0E010000 
 1303      21010000 
 1304 0aee 2E010000 	   .word err_cant_prog 
 1305              	
 1306              	    .section .rodata.tb_error 
 1307              	
 1308 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1308      72792066 
 1308      756C6C0A 
 1308      00
 1309 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1309      61782065 
 1309      72726F72 
 1309      0A00
 1310 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1310      206F7065 
 1310      72617469 
 1310      6F6E206F 
 1310      76657266 
 1311 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1311      73696F6E 
 1311      20627920 
 1311      300A00
 1312 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1312      6C696420 
 1312      6C696E65 
 1312      206E756D 
 1312      6265722E 
 1313 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1313      74696D65 
 1313      206F6E6C 
 1313      79207573 
 1313      6167652E 
 1314 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1314      616E6420 
 1314      6C696E65 
 1314      206F6E6C 
 1314      79207573 
 1315 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1315      69636174 
 1315      65206E61 
 1315      6D652E0A 
 1315      00
 1316 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1316      206E6F74 
 1316      20666F75 
 1316      6E642E0A 
 1316      00
 1317 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1317      76616C75 
 1317      652E0A00 
 1318 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1318      20696E20 
 1318      65787465 
 1318      6E646564 
 1318      206D656D 
 1319 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
ARM GAS  tinyBasic.s 			page 40


 1319      61746120 
 1319      666F756E 
 1319      642E0A00 
 1320 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1320      726F6772 
 1320      616D2069 
 1320      6E205241 
 1320      4D210A00 
 1321 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1321      20737973 
 1321      74656D20 
 1321      66756C6C 
 1321      2E0A00
 1322 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1322      65722066 
 1322      756C6C0A 
 1322      00
 1323 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1323      74206D6F 
 1323      64696679 
 1323      2070726F 
 1323      6772616D 
 1324              	
 1325 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1325      2074696D 
 1325      65206572 
 1325      726F722C 
 1325      2000
 1326 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1326      70696C65 
 1326      20657272 
 1326      6F722C20 
 1326      00
 1327 018d 6C617374 	tk_id: .asciz "last token id: "
 1327      20746F6B 
 1327      656E2069 
 1327      643A2000 
 1328              	
 1329              	
 1330              	    .section  .text , "ax", %progbits 
 1331              	
 1332              	/*********************************
 1333              	   skip_line 
 1334              	   data and remark line are skipped
 1335              	   by the interpreter 
 1336              	***********************************/
 1337 0af2 00BF     	    _FUNC skip_line 
 1338 0af4 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1339 0af8 7047     	    _RET 
 1340              	
 1341              	
 1342              	/*********************************
 1343              	   BASIC: BTGL adr, mask   
 1344              	   toggle bits [adr]=[adr]^mask  
 1345              	   input:
 1346              	     r0    adr 
 1347              	     r1    mask 
ARM GAS  tinyBasic.s 			page 41


 1348              	    output;
 1349              	      none 
 1350              	    use:
 1351              	      T1   temp
 1352              	      T2   temp  
 1353              	*******************************/     
 1354 0afa 00BF     	    _FUNC BTGL 
 1355              	
 1356 0afc 7047     	    _RET 
 1357              	
 1358              	/***************************************
 1359              	   kword_cmp
 1360              	   compare keyword to dict entry
 1361              	  input:
 1362              	    r0  keyword 
 1363              	    r1  dict entry 
 1364              	    r2  character count 
 1365              	  output:
 1366              	    r0  0 not same | -1 same 
 1367              	  use:
 1368              	    r6   result  
 1369              	    T1   char 1
 1370              	    T2   char 2
 1371              	**************************************/   
 1372 0afe 00BF     	    _FUNC kword_cmp 
 1373 0b00 2DE94003 	    push {r6,T1,T2}
 1374 0b04 4FF0FF36 	    mov r6,#-1 
 1375 0b08 4AB1     	1:  cbz r2,9f       
 1376 0b0a 10F8018B 	    ldrb T1,[r0],#1
 1377 0b0e 11F8019B 	    ldrb T2,[r1],#1
 1378 0b12 A2F10102 	    sub r2,#1
 1379 0b16 C845     	    cmp T1,T2
 1380 0b18 F6D0     	    beq 1b 
 1381 0b1a 86EA0606 	    eor r6,r6  
 1382 0b1e 3046     	9:  mov r0,r6
 1383 0b20 BDE84003 	    pop {r6,T1,T2}
 1384 0b24 7047     	    _RET 
 1385              	
 1386              	/***********************************************
 1387              	    search_dict 
 1388              	    search keyword in dictionary
 1389              	   input:
 1390              	  	 r0   keyword 
 1391              	     r1		dictionary first name field address  
 1392              	   output:
 1393              	     r0 		token attribute 
 1394              	     r1		  cmd_index if r0!=TK_NONE  
 1395              	   use:
 1396              	     r3   length keyword 
 1397              	     T1   keyword
 1398              	     T2   link  
 1399              	**********************************************/
 1400 0b26 00BF     	  _FUNC search_dict
 1401 0b28 2DE90C03 	  push {r2,r3,T1,T2}
 1402 0b2c 8046     	  mov T1,r0 
 1403 0b2e 00B5FFF7 	  _CALL strlen 
 1403      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 42


 1403      04EB
 1404 0b38 0346     	  mov r3,r0  
 1405              	1:  
 1406 0b3a 8946     	   mov T2,r1  // keep for linking   
 1407 0b3c 0878     	   ldrb r0,[r1] 
 1408 0b3e 78B1     	   cbz r0,9f // null byte, end of dictionary
 1409 0b40 4046     	   mov r0,T1
 1410 0b42 1A46     	   mov r2,r3   
 1411 0b44 00B5FFF7 	   _CALL kword_cmp  
 1411      DBFF5DF8 
 1411      04EB
 1412 0b4e 18B9     	   cbnz r0,2f 
 1413 0b50 4946     	   mov r1,T2
 1414 0b52 51F80C1C 	   ldr r1,[r1,#-12]
 1415 0b56 F0E7     	   b 1b   
 1416              	2: // found
 1417 0b58 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1418 0b5c 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1419 0b60 BDE80C03 	9: pop {r2,r3,T1,T2}
 1420 0b64 7047     	   _RET 
 1421              	
 1422              	
 1423              	/**************************
 1424              	    INTERPRETER 
 1425              	*************************/
 1426              	
 1427              	/*********************************
 1428              	   cold_start 
 1429              	   initialize BASIC interpreter 
 1430              	   never leave 
 1431              	   input:
 1432              	     none 
 1433              	   output:
 1434              	    none 
 1435              	*********************************/
 1436              	  .type cold_start, %function 
 1437              	  .global cold_start 
 1438              	cold_start: 
 1439 0b66 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1439      C2F20004 
 1440 0b6e DFF85400 	    ldr r0,src_addr 
 1441 0b72 DFF85410 	    ldr r1,dest_addr
 1442 0b76 0968     	    ldr r1,[r1] 
 1443 0b78 0C44     	    add UPP,r1 // system variables base address   
 1444              	// clear RAM
 1445 0b7a 2046     	    mov r0,UPP  
 1446 0b7c DFF86811 	    ldr r1,tib 
 1447 0b80 82EA0202 	    eor r2,r2 
 1448 0b84 40F8042B 	1:  str r2,[r0],#4 
 1449 0b88 8842     	    cmp r0,r1 
 1450 0b8a FBD4     	    bmi 1b 
 1451              	//copy initialized system variables to ram 
 1452 0b8c DFF83400 	    ldr r0,src_addr 
 1453 0b90 2146     	    mov r1,UPP 
 1454 0b92 DFF83820 	    ldr r2,sysvar_size
 1455 0b96 00B5FFF7 	    _CALL cmove
 1455      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 43


 1455      04EB
 1456 0ba0 00B500F0 	    _CALL prt_version
 1456      15F85DF8 
 1456      04EB
 1457 0baa 00B500F0 	    _CALL clear_basic 
 1457      62F85DF8 
 1457      04EB
 1458 0bb4 00B5FFF7 	    _CALL search_free 
 1458      FEFF5DF8 
 1458      04EB
 1459 0bbe E062     	    str r0,[UPP,#FSFREE] 
 1460 0bc0 FFF7FEBF 	    b warm_start    
 1461              	src_addr:
 1462 0bc4 00000000 	  .word uzero
 1463              	dest_addr:
 1464 0bc8 00000000 	  .word vectors_size
 1465 0bcc D4000000 	sysvar_size: .word ulast-uzero 
 1466              	
 1467              	/************************************
 1468              	    print firmware version 
 1469              	    input: 
 1470              	      none 
 1471              	    output:
 1472              	      none 
 1473              	    use:
 1474              	      r0 
 1475              	***********************************/
 1476              	    _FUNC prt_version 
 1477 0bd0 DFF8E805 	    ldr r0,=version_msg 
 1478 0bd4 00B5FFF7 	    _CALL uart_puts
 1478      FEFF5DF8 
 1478      04EB
 1479 0bde 9FF87400 	    ldrb r0,version 
 1480 0be2 4FEA1010 	    lsr r0,#4 
 1481 0be6 00F13000 	    add r0,#'0' 
 1482 0bea 3A28     	    cmp r0,#'9'+1 
 1483 0bec 01D4     	    bmi 1f 
 1484 0bee 00F10700 	    add r0,#7 
 1485              	  1:
 1486 0bf2 00B5FFF7 	    _CALL uart_putc 
 1486      FEFF5DF8 
 1486      04EB
 1487 0bfc 4FF02E00 	    mov r0,#'. 
 1488 0c00 00B5FFF7 	    _CALL uart_putc 
 1488      FEFF5DF8 
 1488      04EB
 1489 0c0a 9FF84800 	    ldrb r0,version 
 1490 0c0e 00F00F00 	    and r0,#15 
 1491 0c12 00F13000 	    add r0,'0' 
 1492 0c16 3A28     	    cmp r0,#'9'+1 
 1493 0c18 01D4     	    bmi 1f 
 1494 0c1a 00F10700 	    add r0,#7
 1495              	  1: 
 1496 0c1e 00B5FFF7 	    _CALL uart_putc 
 1496      FEFF5DF8 
 1496      04EB
 1497 0c28 00B5FFF7 	    _CALL cr
ARM GAS  tinyBasic.s 			page 44


 1497      FEFF5DF8 
 1497      04EB
 1498 0c32 7047     	    _RET  
 1499              	version_msg:
 1500 0c34 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1500      65207069 
 1500      6C6C2074 
 1500      696E7920 
 1500      42415349 
 1501              	version:
 1502 0c54 10       	    .byte 0x10 
 1503 0c55 0000BF   	    .p2align 2 
 1504              	
 1505              	
 1506              	/*****************************
 1507              	    clear_vars 
 1508              	    initialize variables to 0
 1509              	  input:
 1510              	    none 
 1511              	  output:
 1512              	    none 
 1513              	  use:
 1514              	    r0,r1,r2 
 1515              	*****************************/
 1516              	    _FUNC clear_vars 
 1517 0c58 07B4     	    push {r0,r1,r2}
 1518 0c5a 80EA0000 	    eor r0,r0 
 1519 0c5e 04F16001 	    add r1,UPP,#VARS
 1520 0c62 4FF01A02 	    mov r2,#26
 1521 0c66 41F8040B 	1:  str r0,[r1],#4 
 1522 0c6a 013A     	    subs r2,#1
 1523 0c6c FBD1     	    bne 1b  
 1524 0c6e 07BC     	    pop {r0,r1,r2}
 1525 0c70 7047     	    _RET 
 1526              	
 1527              	/*****************************
 1528              	   clear_basic 
 1529              	   reset BASIC system variables 
 1530              	   and clear variables and RAM 
 1531              	*****************************/
 1532 0c72 00BF     	    _FUNC clear_basic
 1533 0c74 80EA0000 	  	eor r0,r0
 1534 0c78 2064     	    str r0,[UPP,#FLAGS] 
 1535 0c7a 6060     	    str r0,[UPP,#COUNT]
 1536 0c7c 2060     	    str r0,[UPP,#IN_SAVED]
 1537 0c7e A060     	    str r0,[UPP,#BASICPTR]
 1538 0c80 E060     	    str r0,[UPP,#DATAPTR]
 1539 0c82 2061     	    str r0,[UPP,#DATA]
 1540 0c84 6061     	    str r0,[UPP,#DATALEN]
 1541 0c86 04F1D000 	    add r0,UPP,#BASIC_START 
 1542 0c8a 00F11000 	    add r0,#16 
 1543 0c8e 6FF00F01 	    mvn r1,#15
 1544 0c92 00EA0100 	    and r0,r1 
 1545 0c96 2063     	    str r0,[UPP,#TXTBGN]
 1546 0c98 6063     	    str r0,[UPP,#TXTEND]
 1547 0c9a C4F8D000 	    str r0,[UPP,#HERE]
 1548 0c9e 00B5FFF7 	    _CALL clear_vars
ARM GAS  tinyBasic.s 			page 45


 1548      DAFF5DF8 
 1548      04EB
 1549 0ca8 206B     	    ldr r0,[UPP,#TXTBGN]
 1550 0caa DFF83C10 	    ldr r1,tib 
 1551 0cae 82EA0202 	    eor r2,r2 
 1552 0cb2 40F8042B 	1:  str r2,[r0],#4
 1553 0cb6 8842     	    cmp r0,r1 
 1554 0cb8 FBD4     	    bmi 1b 
 1555 0cba 7047     	    _RET  
 1556              	
 1557              	/***********************************
 1558              	   warm_init 
 1559              	   initialize interpreter context 
 1560              	  input:
 1561              	    none
 1562              	  output:
 1563              	    none 
 1564              	  use:
 1565              	    r0 
 1566              	***********************************/
 1567              	warm_init:
 1568              	// reset data stack       
 1569 0cbc DFF824C0 	    ldr DP,dstack 
 1570 0cc0 4FF0000A 	    mov IN,#0 // BASIC line index 
 1571 0cc4 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1572 0cc8 80EA0000 	    eor r0,r0 
 1573 0ccc 6060     	    str r0,[UPP,#COUNT]  
 1574 0cce 2064     	    str r0,[UPP,#FLAGS]
 1575 0cd0 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1576 0cd2 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1577 0cd6 6064     	    str r0,[UPP,#TAB_WIDTH]
 1578 0cd8 4FF00A00 	    mov r0,#10 // default base decimal 
 1579 0cdc A061     	    str r0,[UPP,#BASE]
 1580 0cde 7047     	    _RET  
 1581              	
 1582 0ce0 00000000 	mstack: .word _mstack 
 1583 0ce4 00000000 	dstack: .word _dstack 
 1584 0ce8 00000000 	tib: .word _tib 
 1585 0cec 00000000 	pad: .word _pad 
 1586 0cf0 FCFFFFFF 	array: .word _pad - 4 
 1587 0cf4 0A524541 	ready: .asciz "\nREADY" 
 1587      445900
 1588              	
 1589              	/**********************************
 1590              	    warm_start 
 1591              	    start BASIC interpreter doesn't  
 1592              	    reset variables and code space 
 1593              	  input:
 1594              	    none 
 1595              	  output:
 1596              	    none 
 1597              	**********************************/
 1598 0cfb 00       	    _GBL_FUNC warm_start 
 1599              	// initialise parameters stack
 1600 0cfc FFF7DEFF 	    bl warm_init
 1601              	// reset main stack 
 1602 0d00 5FF82400 	    ldr r0,mstack
ARM GAS  tinyBasic.s 			page 46


 1603 0d04 8546     	    mov sp,r0 
 1604 0d06 DFF8B804 	    ldr r0,=ready 
 1605 0d0a 00B5FFF7 	    _CALL uart_puts 
 1605      FEFF5DF8 
 1605      04EB
 1606              	// fall in cmd_line 
 1607              	
 1608              	/**********************************
 1609              	   cmd_line 
 1610              	   shell command line 
 1611              	   input:
 1612              	      none 
 1613              	   output:
 1614              	      none 
 1615              	   use:
 1616              	
 1617              	***********************************/
 1618              	    _FUNC cmd_line 
 1619 0d14 00B5FFF7 	    _CALL cr
 1619      FEFF5DF8 
 1619      04EB
 1620 0d1e 80EA0000 	    eor r0,r0 
 1621 0d22 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1622 0d26 5FF84000 	1:  ldr r0,tib
 1623 0d2a 4FF05001 	    mov r1,#TIB_SIZE 
 1624 0d2e 00B5FFF7 	    _CALL readln 
 1624      FEFF5DF8 
 1624      04EB
 1625 0d38 0940     	    ands r1,r1 // empty line 
 1626 0d3a F4D0     	    beq 1b 
 1627 0d3c 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1627      E5FA5DF8 
 1627      04EB
 1628 0d46 EED0     	    beq 1b  // tokens stored in text area 
 1629              	// interpret tokenized line 
 1630              	interpreter:
 1631 0d48 00B500F0 	  _CALL next_token 
 1631      23F85DF8 
 1631      04EB
 1632 0d52 0028     	  cmp r0,#TK_NONE 
 1633 0d54 F8D0     	  beq interpreter    
 1634 0d56 0B28     	  cmp r0,#TK_CMD 
 1635 0d58 03D1     	  bne 2f
 1636 0d5a 0846     	  mov r0,r1 
 1637 0d5c 00F014F8 	  bl execute  
 1638 0d60 F2E7     	  b interpreter   
 1639              	2: 
 1640 0d62 0428     	  cmp r0,#TK_VAR 
 1641 0d64 05D1     	  bne 3f 
 1642 0d66 00B500F0 	  _CALL let_var 
 1642      61FB5DF8 
 1642      04EB
 1643 0d70 EAE7     	  b interpreter 
 1644              	3: 
 1645 0d72 0528     	  cmp r0,#TK_ARRAY 
 1646 0d74 05D1     	  bne 4f
 1647 0d76 00B500F0 	  _CALL let_array 
ARM GAS  tinyBasic.s 			page 47


 1647      67FB5DF8 
 1647      04EB
 1648 0d80 E2E7     	  b interpreter
 1649              	4: 
 1650 0d82 0128     	  cmp r0,#TK_COLON
 1651 0d84 E0D0     	  beq interpreter
 1652 0d86 0DE6     	  b syntax_error
 1653              	
 1654              	/*****************************
 1655              	    execute 
 1656              	    execute a BASIC routine from 
 1657              	    its token value 
 1658              	  input:
 1659              	    r0  BASIC SUB|FUNC token  
 1660              	  output: 
 1661              	    depend on SUB|FUNc
 1662              	*****************************/
 1663              	    _FUNC execute 
 1664 0d88 DFF83814 	    ldr r1,=fn_table 
 1665 0d8c 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1666 0d90 0047     	    bx r0 
 1667              	
 1668              	/*************************************
 1669              	  next_token 
 1670              	  extract next token from token list 
 1671              	  input:
 1672              	    none 
 1673              	  output:
 1674              	    r0    token attribute
 1675              	    r1    token value if there is one 
 1676              	  use:
 1677              	    T1    exit token type  
 1678              	****************************/
 1679 0d92 00BF     	    _FUNC next_token 
 1680 0d94 4DF8048D 	    push {T1}
 1681 0d98 88EA0808 	    eor T1,T1 // TK_NONE 
 1682 0d9c 6068     	    ldr r0,[UPP,#COUNT]
 1683 0d9e 8245     	    cmp IN,r0 
 1684 0da0 14D4     	    bmi 0f
 1685              	end_of_line:
 1686 0da2 BBF80010 	    ldrh r1,[BPTR] // line #
 1687 0da6 09B9     	    cbnz r1, next_line  // command line
 1688 0da8 FFF7FEBF 	    b warm_start
 1689              	next_line:
 1690 0dac 8344     	    add BPTR,r0 // next line 
 1691 0dae 606B     	    ldr r0,[UPP,#TXTEND]
 1692 0db0 8345     	    cmp BPTR,r0 
 1693 0db2 7FF5FEAF 	    bpl warm_start // end of program
 1694 0db6 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1695 0dba 6060     	    str r0,[UPP,#COUNT] 
 1696 0dbc 4FF0030A 	    mov IN,#3
 1697 0dc0 00B5FFF7 	    _CALL show_trace
 1697      11FA5DF8 
 1697      04EB
 1698 0dca 2AE0     	    b 9f  
 1699              	0: 
 1700 0dcc C4F800A0 	    str IN,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 48


 1701 0dd0 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1702 0dd4 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1703 0dd8 0AF1010A 	    add IN,#1  
 1704 0ddc 8046     	    mov T1,r0 
 1705 0dde 00F03F00 	    and r0,#0x3f // limit mask 
 1706 0de2 F949     	    ldr r1,=tok_jmp 
 1707 0de4 D1E800F0 	    tbb [r1,r0]
 1708              	1: // pc reference point 
 1709 0de8 1BE0     	    b 9f 
 1710              	2: // .byte param
 1711 0dea 1BF80A10 	    ldrb r1,[BPTR,IN]
 1712 0dee 0AF1010A 	    add IN,#1 
 1713 0df2 16E0     	    b 9f 
 1714              	3: // .hword param 
 1715 0df4 3BF80A10 	    ldrh r1,[BPTR,IN]
 1716 0df8 0AF1020A 	    add IN,#2 
 1717 0dfc 11E0     	    b 9f 
 1718              	4: // .word param  
 1719 0dfe 5BF80A10 	    ldr r1,[BPTR,IN]
 1720 0e02 0AF1040A 	    add IN,#4
 1721 0e06 0CE0     	    b 9f 
 1722              	5: // .asciz param 
 1723 0e08 0BEB0A01 	    add r1,BPTR,IN 
 1724 0e0c 0846     	    mov r0,r1  
 1725 0e0e 00B5FFF7 	    _CALL strlen 
 1725      FEFF5DF8 
 1725      04EB
 1726 0e18 8244     	    add IN,r0
 1727 0e1a 0AF1010A 	    add IN,#1
 1728 0e1e 00E0     	    b 9f  
 1729              	8: // syntax error 
 1730 0e20 C0E5     	    b syntax_error 
 1731 0e22 4046     	9:  mov r0,T1  
 1732 0e24 5DF8048B 	    pop {T1}
 1733 0e28 7047     	    _RET
 1734              	
 1735 0e2a 00BF     	  .p2align 2
 1736              	tok_jmp: // token id  tbb offset 
 1737 0e2c 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1738 0e2e 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1739 0e32 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1739      1D
 1740 0e37 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1741 0e3b 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1742 0e3e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1742      1C
 1743 0e43 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1743      1C1C
 1744 0e49 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1745 0e4c 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1746 0e4f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1746      1C1C1C1C 
 1747 0e57 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1747      1C1C
 1748 0e5d 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1748      1D1D
 1749 0e63 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
ARM GAS  tinyBasic.s 			page 49


 1749      1C1C1C1C 
 1749      1C
 1750              	
 1751              	  .p2align 2 
 1752              	
 1753              	/*********************************
 1754              	    expect 
 1755              	    check if next token is of 
 1756              	    expected type. If not 
 1757              	    call syntax_error  
 1758              	  input:
 1759              	      r0   token attribute
 1760              	  output:
 1761              	      r0  token attribute 
 1762              	      r1  token value
 1763              	  use:
 1764              	      T1   
 1765              	**********************************/
 1766              	    _FUNC expect 
 1767 0e6c 4DF8048D 	    push {T1}
 1768 0e70 8046     	    mov T1,r0 
 1769 0e72 00B5FFF7 	    _CALL next_token 
 1769      8EFF5DF8 
 1769      04EB
 1770 0e7c 4045     	    cmp r0,T1  
 1771 0e7e 7FF491AD 	    bne syntax_error 
 1772 0e82 5DF8048B 	    pop {T1}
 1773 0e86 7047     	    _RET 
 1774              	
 1775              	/***********************************
 1776              	    func_args 
 1777              	    get function arguments list 
 1778              	  input:
 1779              	    none 
 1780              	  output:
 1781              	    r0    arg. count 
 1782              	  use:
 1783              	
 1784              	************************************/
 1785              	    _FUNC func_args 
 1786 0e88 4FF00600 	    mov r0,#TK_LPAREN 
 1787 0e8c 00B5FFF7 	    _CALL expect 
 1787      EDFF5DF8 
 1787      04EB
 1788 0e96 00B500F0 	    _CALL arg_list 
 1788      0CF85DF8 
 1788      04EB
 1789 0ea0 01B4     	    push {r0}
 1790 0ea2 4FF00700 	    mov r0,#TK_RPAREN 
 1791 0ea6 00B5FFF7 	    _CALL expect 
 1791      E0FF5DF8 
 1791      04EB
 1792 0eb0 01BC     	    pop {r0}
 1793 0eb2 7047     	    _RET 
 1794              	
 1795              	/**********************************
 1796              	    arg_list 
ARM GAS  tinyBasic.s 			page 50


 1797              	    get arguments list on dstack 
 1798              	  input:
 1799              	    none 
 1800              	  output:
 1801              	    r0    arg count
 1802              	  use:
 1803              	    T1    tmp count  
 1804              	***********************************/
 1805              	    _FUNC arg_list 
 1806 0eb4 4DF8048D 	    push {T1}
 1807 0eb8 88EA0808 	    eor T1,T1 
 1808 0ebc 00B500F0 	1:  _CALL expression 
 1808      C9F85DF8 
 1808      04EB
 1809 0ec6 0028     	    cmp R0,#TK_NONE 
 1810 0ec8 10D0     	    beq 9f 
 1811 0eca 0F28     	    cmp r0,#TK_INTGR
 1812 0ecc 0ED1     	    bne 9f 
 1813 0ece 4CF8041D 	    _PUSH r1 
 1814 0ed2 08F10108 	    add T1,#1 
 1815 0ed6 00B5FFF7 	    _CALL next_token 
 1815      5CFF5DF8 
 1815      04EB
 1816 0ee0 0828     	    cmp r0,#TK_COMMA 
 1817 0ee2 EBD0     	    beq 1b 
 1818 0ee4 D4F800A0 	    _UNGET_TOKEN 
 1818      D4F808B0 
 1819 0eec 4046     	9:  mov r0,T1 
 1820 0eee 5DF8048B 	    pop {T1}
 1821 0ef2 7047     	    _RET 
 1822              	
 1823              	/***********************************
 1824              	 factor
 1825              	 arithmetick factor parser 
 1826              	 factor ::= ['+'|'-'|e]  var | @ |
 1827              				 integer | function |
 1828              				 '('expression')' 
 1829              	  input: 
 1830              	    none 
 1831              	  output:
 1832              	    r0   token attribute 
 1833              	    r1   token value 
 1834              	  use:
 1835              	    r2   temp 
 1836              	    T1   sign 
 1837              	    T2   exit token attribute 
 1838              	***********************************/
 1839              	    _FUNC factor 
 1840 0ef4 2DE90403 	    push {r2,T1,T2}
 1841 0ef8 4FF00F09 	    mov T2,#TK_INTGR 
 1842 0efc 4FF00108 	    mov T1,#1 // default sign +  
 1843 0f00 00B5FFF7 	    _CALL next_token
 1843      47FF5DF8 
 1843      04EB
 1844 0f0a 0246     	    mov r2,r0 
 1845 0f0c 00F03000 	    and r0,#TK_GRP_MASK 
 1846 0f10 1028     	    cmp r0,#TK_GRP_ADD
ARM GAS  tinyBasic.s 			page 51


 1847 0f12 1046     	    mov r0,r2
 1848 0f14 08D1     	    bne 1f 
 1849 0f16 1028     	    cmp r0,#TK_PLUS 
 1850 0f18 01D0     	    beq 0f 
 1851 0f1a 4FF0FF38 	    mov T1,#-1 // minus sign 
 1852 0f1e 00B5FFF7 	0:  _CALL next_token
 1852      38FF5DF8 
 1852      04EB
 1853 0f28 0F28     	1:  cmp r0,#TK_INTGR 
 1854 0f2a 4ED0     	    beq 8f 
 1855 0f2c 0528     	    cmp r0,#TK_ARRAY 
 1856 0f2e 1ED1     	    bne 2f 
 1857 0f30 4FF00600 	    mov r0,#TK_LPAREN 
 1858 0f34 00B5FFF7 	    _CALL expect 
 1858      99FF5DF8 
 1858      04EB
 1859 0f3e 00B500F0 	    _CALL expression
 1859      88F85DF8 
 1859      04EB
 1860 0f48 0F28     	    cmp r0,#TK_INTGR
 1861 0f4a 7FF42BAD 	    bne syntax_error
 1862 0f4e 8146     	    mov T2,r0
 1863 0f50 0A46     	    mov r2,r1  
 1864 0f52 4FF00700 	    mov r0,#TK_RPAREN
 1865 0f56 00B5FFF7 	    _CALL expect 
 1865      88FF5DF8 
 1865      04EB
 1866 0f60 1046     	    mov r0,r2 
 1867 0f62 00B500F0 	    _CALL get_array_element 
 1867      ECF85DF8 
 1867      04EB
 1868 0f6c 2DE0     	    b 8f
 1869 0f6e 0628     	2:  cmp r0,#TK_LPAREN 
 1870 0f70 12D1     	    bne 3f 
 1871 0f72 00B500F0 	    _CALL expression 
 1871      6EF85DF8 
 1871      04EB
 1872 0f7c 0F28     	    cmp r0,#TK_INTGR 
 1873 0f7e 7FF411AD 	    bne syntax_error
 1874 0f82 8146     	    mov T2,r0
 1875 0f84 0A46     	    mov r2,r1   
 1876 0f86 4FF00700 	    mov r0,#TK_RPAREN
 1877 0f8a 00B5FFF7 	    _CALL expect 
 1877      6EFF5DF8 
 1877      04EB
 1878 0f94 1146     	    mov r1,r2 
 1879 0f96 18E0     	    b 8f       
 1880 0f98 0428     	3:  cmp r0,#TK_VAR 
 1881 0f9a 06D1     	    bne 4f
 1882 0f9c 0846     	    mov r0,r1  
 1883 0f9e 00B500F0 	    _CALL get_var 
 1883      E2F85DF8 
 1883      04EB
 1884 0fa8 0FE0     	    b 8f 
 1885 0faa 0C28     	4:  cmp r0,#TK_IFUNC 
 1886 0fac 06D1     	    bne 6f 
 1887 0fae 0846     	5:  mov r0,r1  
ARM GAS  tinyBasic.s 			page 52


 1888 0fb0 00B5FFF7 	    _CALL execute
 1888      E9FE5DF8 
 1888      04EB
 1889 0fba 06E0     	    b 8f 
 1890 0fbc D4F800A0 	6:  _UNGET_TOKEN      
 1890      D4F808B0 
 1891 0fc4 4FF00000 	    mov r0,#TK_NONE
 1892 0fc8 03E0     	    b 9f  
 1893 0fca 08FB01F1 	8:  mul r1,T1 
 1894 0fce 5FEA0900 	    movs r0,T2 
 1895 0fd2 BDE80403 	9:  pop {r2,T1,T2}   
 1896 0fd6 7047     	    _RET 
 1897              	
 1898              	
 1899              	/*****************************************
 1900              	    term 
 1901              	    term parser 
 1902              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1903              	    output:
 1904              	      r0  	token attribute 
 1905              	      r1		integer
 1906              	    use:
 1907              	      r2    first operand 
 1908              	      r3    temp 
 1909              	      T1    operator 
 1910              	      T2    exit token attribute 
 1911              	******************************************/
 1912              	     _FUNC term 
 1913 0fd8 2DE90C03 	    push {r2,r3,T1,T2}
 1914 0fdc 4FF00009 	    mov T2,#TK_NONE 
 1915 0fe0 00B5FFF7 	    _CALL factor
 1915      87FF5DF8 
 1915      04EB
 1916 0fea 60B3     	    cbz r0, 9f  // no factor   
 1917 0fec 8146     	    mov T2,r0  // TK_INTGR 
 1918 0fee 0A46     	    mov r2,r1 // first factor    
 1919 0ff0 00B5FFF7 	0:  _CALL next_token
 1919      CFFE5DF8 
 1919      04EB
 1920 0ffa 0346     	    mov r3,r0   
 1921 0ffc 00F03000 	    and r0,#TK_GRP_MASK 
 1922 1000 2028     	    cmp r0,#TK_GRP_MULT
 1923 1002 04D0     	    beq 1f
 1924 1004 D4F800A0 	    _UNGET_TOKEN
 1924      D4F808B0 
 1925 100c 1BE0     	    b 9f 
 1926 100e 9846     	1:  mov T1,r3 
 1927 1010 00B5FFF7 	    _CALL factor  
 1927      6FFF5DF8 
 1927      04EB
 1928 101a 3FF4C3AC 	    beq syntax_error 
 1929 101e B8F1200F 	    cmp T1,#TK_MULT
 1930 1022 02D1     	    bne 2f 
 1931              	// multiplication
 1932 1024 01FB02F2 	    mul r2,r1
 1933 1028 E2E7     	    b 0b  
 1934 102a B8F1210F 	2:  cmp T1,#TK_DIV 
ARM GAS  tinyBasic.s 			page 53


 1935 102e 02D1     	    bne 3f
 1936              	// division
 1937 1030 92FBF1F2 	    sdiv r2,r2,r1
 1938 1034 DCE7     	    b 0b  
 1939              	3: // modulo
 1940 1036 1046     	    mov r0,r2 
 1941 1038 92FBF1F2 	    sdiv r2,r2,r1 
 1942 103c 01FB02F2 	    mul  r2,r1 
 1943 1040 A0EB0202 	    sub  r2,r0,r2
 1944 1044 D4E7     	    b 0b  
 1945 1046 1146     	9:  mov r1,r2 
 1946 1048 5FEA0900 	    movs r0,T2 
 1947 104c BDE80C03 	    pop {r2,r3,T1,T2}
 1948 1050 7047     	    _RET 
 1949              	
 1950              	/*****************************************
 1951              	    expression 
 1952              	    arithmetic expression parser 
 1953              	    expression ::= term [['+'|'-'] term]*
 1954              	    result range {-32768..32767}
 1955              	    output:
 1956              	      r0    TK_NONE || TK_INTGR 
 1957              	      r1 	  integer
 1958              	    use:
 1959              	      r2  left operand 
 1960              	      T1  operator 
 1961              	      T2  exit token attribute
 1962              	******************************************/
 1963 1052 00BF     	    _FUNC expression 
 1964 1054 2DE90403 	    push {r2,t1,t2}
 1965 1058 4FF00009 	    mov T2,#TK_NONE
 1966 105c 82EA0202 	    eor r2,r2 // zero 
 1967 1060 00B5FFF7 	    _CALL term 
 1967      B9FF5DF8 
 1967      04EB
 1968 106a 21D0     	    beq 9f  // no term  
 1969 106c 0A46     	    mov r2,r1 // first term
 1970 106e 4FF00F09 	    mov T2,#TK_INTGR    
 1971 1072 00B5FFF7 	1:  _CALL next_token 
 1971      8EFE5DF8 
 1971      04EB
 1972 107c 8046     	    mov T1,r0 // token attribute 
 1973 107e 00F03000 	    and r0,#TK_GRP_MASK 
 1974 1082 1028     	    cmp r0,#TK_GRP_ADD 
 1975 1084 04D0     	    beq 3f 
 1976 1086 D4F800A0 	    _UNGET_TOKEN
 1976      D4F808B0 
 1977 108e 0FE0     	    b 9f  
 1978 1090 00B5FFF7 	3:  _CALL term 
 1978      A1FF5DF8 
 1978      04EB
 1979 109a 0F28     	    cmp r0,#TK_INTGR 
 1980 109c 7FF482AC 	    bne syntax_error 
 1981 10a0 B8F1100F 	    cmp T1,#TK_PLUS 
 1982 10a4 02D0     	    beq 4f 
 1983 10a6 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1984 10aa E2E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 54


 1985 10ac 0A44     	4:  add r2,r2,r1 // N1+N2
 1986 10ae E0E7     	    b 1b
 1987 10b0 4846     	9:  mov r0,T2 
 1988 10b2 1146     	    mov r1,r2 
 1989 10b4 BDE80403 	    pop {r2,t1,t2}
 1990 10b8 7047     	    _RET 
 1991              	
 1992              	
 1993              	/**********************************************
 1994              	    relation parser 
 1995              	    rel ::= expr1 rel_op expr2
 1996              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1997              	    relation return  integer , zero is false 
 1998              	    output:
 1999              	        r0	TK_INTGR  
 2000              	        r1	integer 
 2001              	    use:
 2002              	        r2   first operand 
 2003              	        T1   relop   
 2004              	**********************************************/
 2005 10ba 00BF     	    _FUNC relation 
 2006 10bc 2DE90401 	    push {r2,T1}
 2007 10c0 00B5FFF7 	    _CALL expression 
 2007      C7FF5DF8 
 2007      04EB
 2008 10ca 0F28     	    cmp r0,#TK_INTGR 
 2009 10cc 7FF46AAC 	    bne syntax_error 
 2010 10d0 0A46     	    mov r2,r1  // first operand  
 2011 10d2 00B5FFF7 	    _CALL next_token 
 2011      5EFE5DF8 
 2011      04EB
 2012 10dc 8046     	    mov T1,r0  // relop  
 2013 10de 00F03000 	    and r0,#TK_GRP_MASK 
 2014 10e2 3028     	    cmp r0,#TK_GRP_RELOP 
 2015 10e4 1DD1     	    bne 8f  // single operand 
 2016 10e6 00B5FFF7 	    _CALL expression 
 2016      B4FF5DF8 
 2016      04EB
 2017 10f0 0F28     	    cmp r0,#TK_INTGR 
 2018 10f2 7FF457AC 	    bne syntax_error 
 2019 10f6 8A42     	    cmp r2,r1 // compare operands  
 2020 10f8 4FF0FF31 	    mov r1,#-1 
 2021 10fc 334A     	    ldr r2,=relop_jmp
 2022 10fe 08F00708 	    and T1,#7 // {1..6}
 2023 1102 D2E808F0 	    tbb [r2,T1]    
 2024              	rel_idx0:
 2025              	rel_eq:
 2026 1106 11D0     	    beq 9f 
 2027 1108 08E0     	    b rel_false
 2028              	rel_lt: 
 2029 110a 0FDB     	    blt 9f   
 2030 110c 06E0     	    b rel_false 
 2031              	rel_le:
 2032 110e 0DDD     	    ble 9f  
 2033 1110 04E0     	    b rel_false 
 2034              	rel_gt:
 2035 1112 0BDC     	    bgt 9f  
ARM GAS  tinyBasic.s 			page 55


 2036 1114 02E0     	    b rel_false  
 2037              	rel_ge:
 2038 1116 09DA     	    bge 9f  
 2039 1118 00E0     	    b rel_false  
 2040              	rel_diff:
 2041 111a 07D1     	    bne 9f 
 2042              	rel_false:    
 2043 111c 81EA0101 	    eor r1,r1  // false
 2044 1120 04E0     	    b 9f  
 2045 1122 D4F800A0 	8:  _UNGET_TOKEN 
 2045      D4F808B0 
 2046 112a 1146     	    mov r1,r2    
 2047 112c 4FF00F00 	9:  mov r0,#TK_INTGR
 2048 1130 BDE80401 	    pop {r2,T1}
 2049 1134 7047     	    _RET 
 2050              	
 2051              	
 2052              	relop_jmp: 
 2053 1136 00       	  .byte 0 
 2054 1137 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2055 1138 00       	  .byte 0 // =
 2056 1139 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2057 113a 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2058 113b 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2059 113c 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2060              	
 2061              	
 2062              	/***********************************
 2063              	    get_array_element
 2064              	    return value of @(n)
 2065              	  input:
 2066              	    r0    indice 
 2067              	  output:
 2068              	    r0   TK_INTGR
 2069              	    r1   value  
 2070              	************************************/
 2071 113d 0000BF   	    _FUNC get_array_element 
 2072 1140 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2073 1144 4FEA8000 	    lsl r0,#2 
 2074 1148 C0EB0100 	    rsb r0,r1 
 2075 114c 0168     	    ldr r1,[r0]
 2076 114e 4FF00F00 	    mov r0,#TK_INTGR 
 2077 1152 7047     	    _RET 
 2078              	
 2079              	
 2080              	/***********************************
 2081              	    set_array_element 
 2082              	    set value of array element 
 2083              	  input:
 2084              	    r0   index 
 2085              	    r1   new value 
 2086              	  output:
 2087              	    none
 2088              	  use:
 2089              	    r2    array pointer 
 2090              	**********************************/
 2091              	    _FUNC set_array_element 
ARM GAS  tinyBasic.s 			page 56


 2092 1154 04B4     	    push {r2}
 2093 1156 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2094 115a 4FEA8000 	    lsl r0,#2 
 2095 115e A1EB0001 	    sub r1,r0 
 2096 1162 0960     	    str r1,[r1]
 2097 1164 04BC     	    pop {r2}
 2098 1166 7047     	    _RET 
 2099              	
 2100              	/***********************************
 2101              	   get_var 
 2102              	   get variable value 
 2103              	  input:
 2104              	     r0    variable index {0..25}
 2105              	  output:
 2106              	     r0    TK_INTGR
 2107              	     r1    value 
 2108              	**********************************/
 2109              	    _FUNC get_var 
 2110 1168 04F16001 	    add r1,UPP,#VARS
 2111 116c 4FEA8000 	    lsl r0,#2 
 2112 1170 0958     	    ldr r1,[r1,r0]
 2113 1172 4FF00F00 	    mov r0,#TK_INTGR
 2114 1176 7047     	    _RET 
 2115              	
 2116              	/*********************************
 2117              	    set_var 
 2118              	    set variable value 
 2119              	  input:
 2120              	     r0    variable index {0..25}
 2121              	     r1    new value 
 2122              	  output:
 2123              	    none 
 2124              	  use:
 2125              	    r2   vars pointer 
 2126              	*********************************/
 2127              	    _FUNC set_var 
 2128 1178 04B4     	    push {r2}
 2129 117a 04F16002 	    add r2,UPP,#VARS
 2130 117e 4FEA8000 	    lsl r0,#2
 2131 1182 1150     	    str r1,[r2,r0]
 2132 1184 04BC     	    pop {r2}
 2133 1186 7047     	    _RET 
 2134              	
 2135              	/******************************
 2136              	    CONSTANTS data
 2137              	******************************/
 2138              	
 2139              	  .section .rodata 
 2140              	
 2141              	// system variables initial value 
 2142              	uzero:
 2143 0000 00000000 	  .word 0 // IN_SAVED
 2144 0004 00000000 	  .word 0 // COUNT
 2145 0008 00000000 	  .word 0 // BASICPTR
 2146 000c 00000000 	  .word 0 // DATAPTR
 2147 0010 00000000 	  .word 0 // DATA
 2148 0014 00000000 	  .word 0 // DATALEN
ARM GAS  tinyBasic.s 			page 57


 2149 0018 0A000000 	  .word 10 // BASE
 2150 001c 00000000 	  .word 0 // TICKS
 2151 0020 00000000 	  .word 0 // TIMER
 2152 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2153 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2154 002c 00000000 	  .word 0 // FSFREE
 2155 0030 00000000 	  .word 0 // TXTBGN
 2156 0034 00000000 	  .word 0 // TXTEND
 2157 0038 00000000 	  .word 0 //LOOP_DEPTH
 2158 003c 00000000 	  .word 0 // ARRAY_SIZE
 2159 0040 00000000 	  .word 0 // FLAGS
 2160 0044 04000000 	  .word 4 // TAB_WIDTH
 2161 0048 00000000 	  .word 0 // RX_HEAD
 2162 004c 00000000 	  .word 0 // RX_TAIL
 2163 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2163      00000000 
 2163      00000000 
 2163      00000000 
 2164 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2164      00000000 
 2164      00000000 
 2164      00000000 
 2164      00000000 
 2165 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2166 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2167 00d0 00000000 	  .word 0 // HERE 
 2168              	ulast:
 2169              	
 2170              	  .section .rodata.dictionary 
 2171              	
 2172              	// keep alphabetic order for BASIC names from Z-A
 2173              	// this sort order is for for WORDS cmd output. 	
 2174              	  .type kword_end, %object
 2175              		.equ link, 0
 2176              	kword_end:
 2177 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2177      00000000 
 2177      00000000 
 2177      00000000 
 2178 0010 0C000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2178      51000000 
 2178      0C000000 
 2178      584F5200 
 2179 0020 1C000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2179      4F000000 
 2179      0B000000 
 2179      574F5244 
 2179      53000000 
 2180 0034 2C000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2180      4E000000 
 2180      0B000000 
 2180      57414954 
 2180      00000000 
 2181 0048 40000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2181      4D000000 
 2181      0B000000 
 2181      554E5449 
ARM GAS  tinyBasic.s 			page 58


 2181      4C000000 
 2182 005c 54000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2182      4C000000 
 2182      0C000000 
 2182      55464C41 
 2182      53480000 
 2183 0070 68000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2183      4B000000 
 2183      0C000000 
 2183      55424F55 
 2183      4E440000 
 2184 0084 7C000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2184      4A000000 
 2184      0B000000 
 2184      54524143 
 2184      45000000 
 2185 0098 90000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2185      49000000 
 2185      0B000000 
 2185      544F0000 
 2186 00a8 A4000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2186      47000000 
 2186      0B000000 
 2186      54494D45 
 2186      52000000 
 2187 00bc B4000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2187      48000000 
 2187      0C000000 
 2187      54494D45 
 2187      4F555400 
 2188 00d0 C8000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2188      46000000 
 2188      0C000000 
 2188      5449434B 
 2188      53000000 
 2189 00e4 DC000000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2189      45000000 
 2189      0B000000 
 2189      5448454E 
 2189      00000000 
 2190 00f8 F0000000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2190      44000000 
 2190      0B000000 
 2190      54414200 
 2191 0108 04010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store 
 2191      43000000 
 2191      0B000000 
 2191      53544F52 
 2191      45000000 
 2192 011c 14010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2192      42000000 
 2192      0B000000 
 2192      53544F50 
 2192      00000000 
 2193 0130 28010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2193      41000000 
 2193      0B000000 
ARM GAS  tinyBasic.s 			page 59


 2193      53544550 
 2193      00000000 
 2194 0144 3C010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2194      40000000 
 2194      0B000000 
 2194      53504300 
 2195 0154 50010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2195      3F000000 
 2195      0B000000 
 2195      534C4545 
 2195      50000000 
 2196 0168 60010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2196      3E000000 
 2196      0C000000 
 2196      53495A45 
 2196      00000000 
 2197 017c 74010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2197      3D000000 
 2197      0B000000 
 2197      53415645 
 2197      00000000 
 2198 0190 88010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2198      3C000000 
 2198      0B000000 
 2198      52554E00 
 2199 01a0 9C010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2199      3B000000 
 2199      0C000000 
 2199      52534849 
 2199      46540000 
 2200 01b4 AC010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2200      3A000000 
 2200      0C000000 
 2200      524E4400 
 2201 01c4 C0010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2201      39000000 
 2201      0B000000 
 2201      52455455 
 2201      524E0000 
 2202 01d8 D0010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2202      38000000 
 2202      0B000000 
 2202      52455354 
 2202      4F524500 
 2203 01ec E4010000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2203      37000000 
 2203      0B000000 
 2203      52454D41 
 2203      524B0000 
 2204 0200 F8010000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2204      36000000 
 2204      0C000000 
 2204      52454144 
 2204      00000000 
 2205 0214 0C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2205      35000000 
 2205      0C000000 
ARM GAS  tinyBasic.s 			page 60


 2205      514B4559 
 2205      00000000 
 2206 0228 20020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2206      34000000 
 2206      0B000000 
 2206      50555348 
 2206      00000000 
 2207 023c 34020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2207      33000000 
 2207      0B000000 
 2207      5052494E 
 2207      54000000 
 2208 0250 48020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2208      32000000 
 2208      0C000000 
 2208      504F5000 
 2209 0260 5C020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2209      2F000000 
 2209      0B000000 
 2209      504F4B45 
 2209      38000000 
 2210 0274 6C020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2210      31000000 
 2210      0B000000 
 2210      504F4B45 
 2210      33320000 
 2211 0288 80020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2211      30000000 
 2211      0B000000 
 2211      504F4B45 
 2211      31360000 
 2212 029c 94020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2212      2A000000 
 2212      0B000000 
 2212      504D4F44 
 2212      45000000 
 2213 02b0 A8020000 	  _dict_entry TK_IFUNC,PICK,PICK_IDX // pick 
 2213      2E000000 
 2213      0C000000 
 2213      5049434B 
 2213      00000000 
 2214 02c4 BC020000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2214      2B000000 
 2214      0C000000 
 2214      5045454B 
 2214      38000000 
 2215 02d8 D0020000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2215      2D000000 
 2215      0C000000 
 2215      5045454B 
 2215      33320000 
 2216 02ec E4020000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2216      2C000000 
 2216      0C000000 
 2216      5045454B 
 2216      31360000 
 2217 0300 F8020000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
ARM GAS  tinyBasic.s 			page 61


 2217      29000000 
 2217      0B000000 
 2217      50415553 
 2217      45000000 
 2218 0314 0C030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2218      28000000 
 2218      0C000000 
 2218      50414400 
 2219 0324 20030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2219      27000000 
 2219      0B000000 
 2219      4F555400 
 2220 0334 30030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2220      26000000 
 2220      0C000000 
 2220      4F520000 
 2221 0344 40030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2221      25000000 
 2221      0C000000 
 2221      4E4F5400 
 2222 0354 50030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2222      24000000 
 2222      0B000000 
 2222      4E455854 
 2222      00000000 
 2223 0368 60030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2223      23000000 
 2223      0B000000 
 2223      4E455700 
 2224 0378 74030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2224      22000000 
 2224      0C000000 
 2224      4C534849 
 2224      46540000 
 2225 038c 84030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2225      21000000 
 2225      0C000000 
 2225      4C4F4732 
 2225      00000000 
 2226 03a0 98030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2226      20000000 
 2226      0B000000 
 2226      4C4F4144 
 2226      00000000 
 2227 03b4 AC030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2227      1F000000 
 2227      0B000000 
 2227      4C495354 
 2227      00000000 
 2228 03c8 C0030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2228      1E000000 
 2228      0B000000 
 2228      4C455400 
 2229 03d8 D4030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2229      1D000000 
 2229      0C000000 
 2229      4B455900 
ARM GAS  tinyBasic.s 			page 62


 2230 03e8 E4030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2230      1C000000 
 2230      0C000000 
 2230      494E5645 
 2230      52540000 
 2231 03fc F4030000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2231      1B000000 
 2231      0B000000 
 2231      494E5055 
 2231      54000000 
 2232 0410 08040000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2232      1A000000 
 2232      0C000000 
 2232      494E5000 
 2233 0420 1C040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2233      19000000 
 2233      0B000000 
 2233      49460000 
 2234 0430 2C040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2234      18000000 
 2234      0B000000 
 2234      48455800 
 2235 0440 3C040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2235      17000000 
 2235      0B000000 
 2235      474F544F 
 2235      00000000 
 2236 0454 4C040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2236      16000000 
 2236      0B000000 
 2236      474F5355 
 2236      42000000 
 2237 0468 60040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2237      15000000 
 2237      0B000000 
 2237      464F5247 
 2237      45540000 
 2238 047c 74040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2238      14000000 
 2238      0B000000 
 2238      464F5200 
 2239 048c 88040000 	  _dict_entry TK_CMD,FLASH,FLASH_IDX // flash 
 2239      13000000 
 2239      0B000000 
 2239      464C4153 
 2239      48000000 
 2240 04a0 98040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2240      12000000 
 2240      0B000000 
 2240      45524153 
 2240      45000000 
 2241 04b4 AC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2241      11000000 
 2241      0B000000 
 2241      454E4400 
 2242 04c4 C0040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2242      10000000 
ARM GAS  tinyBasic.s 			page 63


 2242      0B000000 
 2242      44554D50 
 2242      00000000 
 2243 04d8 D0040000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2243      0F000000 
 2243      0B000000 
 2243      44524F50 
 2243      00000000 
 2244 04ec E4040000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2244      0E000000 
 2244      0B000000 
 2244      444F0000 
 2245 04fc F8040000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2245      0D000000 
 2245      0B000000 
 2245      44495200 
 2246 050c 08050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2246      0C000000 
 2246      0B000000 
 2246      44454300 
 2247 051c 18050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2247      0B000000 
 2247      0B000000 
 2247      44415441 
 2247      4C4E0000 
 2248 0530 28050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2248      0A000000 
 2248      0B000000 
 2248      44415441 
 2248      00000000 
 2249 0544 3C050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2249      09000000 
 2249      0D000000 
 2249      43484152 
 2249      00000000 
 2250 0558 50050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2250      08000000 
 2250      0B000000 
 2250      42544F47 
 2250      4C000000 
 2251 056c 64050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2251      07000000 
 2251      0C000000 
 2251      42544553 
 2251      54000000 
 2252 0580 78050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2252      06000000 
 2252      0B000000 
 2252      42534554 
 2252      00000000 
 2253 0594 8C050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2253      05000000 
 2253      0B000000 
 2253      42524553 
 2253      00000000 
 2254 05a8 A0050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2254      04000000 
ARM GAS  tinyBasic.s 			page 64


 2254      0C000000 
 2254      42495400 
 2255 05b8 B4050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2255      03000000 
 2255      0B000000 
 2255      41575500 
 2256 05c8 C4050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2256      02000000 
 2256      0C000000 
 2256      41534300 
 2257 05d8 D4050000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2257      01000000 
 2257      0C000000 
 2257      414E4400 
 2258              	first_link: 
 2259 05e8 E4050000 	  .word LINK 
 2260 05ec 00000000 	  .word ABS_IDX 
 2261 05f0 0C000000 	  .word TK_IFUNC
 2262              	kword_dict: // first name field 
 2263              	  .equ LINK,. 
 2264 05f4 41425300 	  .asciz "ABS" 
 2265              	  .p2align 2 
 2266              	
 2267              	    .section .rodata.fn_tabld 
 2268              	
 2269              	//comands and fonctions address table
 2270              	  .type fn_table, %object
 2271              	fn_table:
 2272 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2272      00000000 
 2272      00000000 
 2272      00000000 
 2272      00000000 
 2273 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char  
 2273      00000000 
 2273      00000000 
 2273      00000000 
 2273      00000000 
 2274 0028 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2274      00000000 
 2274      00000000 
 2274      00000000 
 2274      00000000 
 2275 0044 00000000 		.word cmd_end,erase,flash,for,forget,gosub,goto 
 2275      00000000 
 2275      00000000 
 2275      00000000 
 2275      00000000 
 2276 0060 00000000 		.word hex_base,if,inp,input_var,invert,key
 2276      00000000 
 2276      00000000 
 2276      00000000 
 2276      00000000 
 2277 0078 00000000 		.word let,list,load,log2,lshift,new,next
 2277      00000000 
 2277      00000000 
 2277      00000000 
ARM GAS  tinyBasic.s 			page 65


 2277      00000000 
 2278 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2279 00b8 00000000 		.word pick,poke8,poke16,poke32,fn_pop,print,cmd_push 
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2280 00d4 00000000 		.word qkey,read,skip_line
 2280      00000000 
 2280      00000000 
 2281 00e0 00000000 		.word restore,return, random,rshift,run,save,size 
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2282 00fc 00000000 		.word sleep,spc,step,stop,store,tab
 2282      00000000 
 2282      00000000 
 2282      00000000 
 2282      00000000 
 2283 0114 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2283      00000000 
 2283      00000000 
 2283      00000000 
 2283      00000000 
 2284 0138 00000000 		.word wait,words,bit_xor
 2284      00000000 
 2284      00000000 
 2285 0144 00000000 		.word 0 
 2286              	
 2287              	
 2288              	/**********************************
 2289              	    BASIC commands and functions 
 2290              	**********************************/
 2291              	
 2292              	    .section .text.basic , "ax", %progbits 
 2293              	
 2294              	
 2295              	/*******************************
 2296              	  BASIC:  ABS expr 
 2297              	  input:
 2298              	    none 
 2299              	  output:
 2300              	    r0    token type 
 2301              	    r1    abs(expr)
 2302              	  use:
 2303              	    none 
 2304              	******************************/
 2305              	    _FUNC abs 
 2306 0000 00B5FFF7 	    _CALL arg_list
 2306      FEFF5DF8 
 2306      04EB
 2307 000a 0128     	    cmp r0,#1 
ARM GAS  tinyBasic.s 			page 66


 2308 000c 01D0     	    beq 1f 
 2309 000e FFF7FEBF 	    b syntax_error 
 2310 0012 5CF8041B 	1:  _POP r1 
 2311 0016 11F0004F 	    tst r1,#(1<<31)
 2312 001a 01D0     	    beq 9f
 2313 001c C1F10001 	    rsb r1,#0 
 2314 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2315 0024 7047     	   _RET 
 2316              	
 2317 0026 00BF     	    _FUNC power_adc
 2318 0028 7047     	    _RET
 2319              	
 2320 002a 00BF     	    _FUNC analog_read
 2321 002c 7047     	    _RET
 2322              	
 2323              	/************************************
 2324              	  BASIC: AND(expr1,expr2)
 2325              	  logical ANND bit to between expr1,expr2
 2326              	************************************/
 2327 002e 00BF     	    _FUNC bit_and
 2328 0030 00B5FFF7 	    _CALL func_args 
 2328      FEFF5DF8 
 2328      04EB
 2329 003a 0228     	    cmp r0,#2 
 2330 003c 7FF4FEAF 	    bne syntax_error 
 2331 0040 5CF8040B 	    _POP r0 
 2332 0044 5CF8041B 	    _POP r1 
 2333 0048 01EA0001 	    and r1,r0 
 2334 004c 4FF00F00 	    mov r0,#TK_INTGR
 2335 0050 7047     	    _RET
 2336              	
 2337              	/*******************************************
 2338              	  BASIC: ASC(string|char)
 2339              	  return ASCII code of char of first char 
 2340              	  of string 
 2341              	*******************************************/
 2342 0052 00BF     	    _FUNC ascii
 2343 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2344 0058 00B5FFF7 	    _CALL expect 
 2344      FEFF5DF8 
 2344      04EB
 2345 0062 00B5FFF7 	    _CALL next_token 
 2345      FEFF5DF8 
 2345      04EB
 2346 006c 0228     	    cmp r0,#TK_QSTR
 2347 006e 03D0     	    beq 2f 
 2348 0070 0328     	    cmp r0,#TK_CHAR 
 2349 0072 7FF4FEAF 	    bne syntax_error 
 2350 0076 00E0     	    b 9f 
 2351 0078 0978     	2:  ldrb r1,[r1]
 2352 007a 4CF8041D 	9:  _PUSH r1 
 2353 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2354 0082 00B5FFF7 	    _CALL expect 
 2354      FEFF5DF8 
 2354      04EB
 2355 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2356 0090 5CF8041B 	    _POP r1 
ARM GAS  tinyBasic.s 			page 67


 2357 0094 7047     	    _RET
 2358              	
 2359 0096 00BF     	    _FUNC autorun
 2360 0098 7047     	    _RET
 2361              	
 2362              	/*******************************************
 2363              	  BASIC: AWU time_sleep  
 2364              	  enable LSI and IWDG and place MCU in 
 2365              	  deep sleep. IDWG wakeup MCU 
 2366              	******************************************/
 2367 009a 00BF     	    _FUNC awu
 2368 009c 00B5FFF7 	    _CALL arg_list
 2368      FEFF5DF8 
 2368      04EB
 2369 00a6 0128     	    cmp r0,#1 
 2370 00a8 7FF4FEAF 	    bne syntax_error 
 2371 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2371      C4F20201 
 2372 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2373              	// enable LSI 
 2374 00b6 80F00100 	    eor r0,#1
 2375 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2376              	// wait for LSIRDY 
 2377 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2378 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2379 00c2 FBD0     	    beq 1b 
 2380              	// configure IWDG
 2381              	// compute values for IWDG_PR and IWDG_RLR 
 2382 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2383 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2384 00cc 03FB02F2 	    mul r2,r3 
 2385 00d0 83EA0303 	    eor r3,r3
 2386 00d4 B2F5005F 	2:  cmp r2,#8192 
 2387 00d8 04D4     	    bmi 3f 
 2388 00da 4FEA5202 	    lsr r2,#1 
 2389 00de 03F10103 	    add r3,#1
 2390 00e2 F7E7     	    b 2b
 2391              	// initialize IWDG      
 2392 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2392      C4F20001 
 2393 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2394 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2395 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2396 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2397 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2398 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2399 00fc 00F074BF 	    b sleep // place MCU in deep sleep
 2400 0100 7047     	    _RET
 2401              	
 2402              	/********************************************
 2403              	  BASIC: BIT(expr)
 2404              	  expr must be between 0..31 and is used 
 2405              	  to create 1 bit mask at that position
 2406              	*******************************************/
 2407 0102 00BF     	    _FUNC bitmask
 2408 0104 00B5FFF7 	    _CALL func_args
 2408      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 68


 2408      04EB
 2409 010e 0128     	    cmp r0,#1 
 2410 0110 7FF4FEAF 	    bne syntax_error 
 2411 0114 5CF8040B 	    _POP r0
 2412 0118 4FF00101 	    mov r1,#1
 2413 011c 01FA00F1 	    lsl r1,r0 
 2414 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2415 0124 7047     	    _RET 
 2416              	
 2417              	  
 2418              	  /*********************************
 2419              	   BASIC: BRES adr, mask   
 2420              	   reset bits [adr]= [adr] & ~mask  
 2421              	   input:
 2422              	     none 
 2423              	    output;
 2424              	      none 
 2425              	    use:
 2426              	      T1   temp
 2427              	      T2   temp 
 2428              	*******************************/     
 2429 0126 00BF     	  _FUNC bit_reset
 2430 0128 00B5FFF7 	    _CALL arg_list 
 2430      FEFF5DF8 
 2430      04EB
 2431 0132 0228     	    cmp r0,#2 
 2432 0134 01D0     	    beq 1f 
 2433 0136 FFF7FEBF 	    b syntax_error 
 2434 013a 5CF8041B 	1:  _POP r1 //mask 
 2435 013e 5CF8040B 	    _POP r0 //address 
 2436 0142 D0F80090 	    ldr T2,[r0] 
 2437 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2438 014a 01EA0901 	    and r1,T2
 2439 014e 0160     	    str r1,[r0]
 2440 0150 7047     	    _RET  
 2441              	
 2442              	
 2443              	/*********************************
 2444              	   BASIC: BSET adr, mask   
 2445              	   reset bits [adr]= [adr] & ~mask  
 2446              	   input:
 2447              	      none 
 2448              	    output;
 2449              	      none 
 2450              	    use:
 2451              	      T1   temp
 2452              	      T2   temp  
 2453              	*******************************/     
 2454 0152 00BF     	    _FUNC bit_set
 2455 0154 00B5FFF7 	    _CALL arg_list 
 2455      FEFF5DF8 
 2455      04EB
 2456 015e 0228     	    cmp r0,#2 
 2457 0160 01D0     	    beq 1f 
 2458 0162 FFF7FEBF 	    b syntax_error 
 2459 0166 5CF8041B 	1:  _POP r1 //mask 
 2460 016a 5CF8040B 	    _POP r0 //address 
ARM GAS  tinyBasic.s 			page 69


 2461 016e D0F80090 	    ldr T2,[r0] 
 2462 0172 41EA0901 	    orr r1,T2
 2463 0176 0160     	    str r1,[r0]
 2464 0178 7047     	    _RET 
 2465              	
 2466              	  /*********************************
 2467              	   BASIC: BTOGL adr, mask   
 2468              	   reset bits [adr]= [adr] & ~mask  
 2469              	   input:
 2470              	     r0    adr 
 2471              	     r1    mask 
 2472              	    output;
 2473              	      none 
 2474              	    use:
 2475              	      T1   temp
 2476              	      T2   temp  
 2477              	*******************************/     
 2478 017a 00BF     	  _FUNC bit_toggle
 2479 017c 00B5FFF7 	    _CALL arg_list 
 2479      FEFF5DF8 
 2479      04EB
 2480 0186 0228     	    cmp r0,#2 
 2481 0188 01D0     	    beq 1f 
 2482 018a FFF7FEBF 	    b syntax_error 
 2483 018e 5CF8041B 	1:  _POP r1 //mask 
 2484 0192 5CF8040B 	    _POP r0 //address 
 2485 0196 D0F80090 	    ldr T2,[r0] 
 2486 019a 81EA0901 	    eor r1,T2
 2487 019e 0160     	    str r1,[r0]
 2488 01a0 7047     	    _RET  
 2489              	
 2490              	/********************************
 2491              	  BASIC: BTEST(addr,bit)
 2492              	  return bit state at address
 2493              	********************************/
 2494 01a2 00BF     	    _FUNC bit_test
 2495 01a4 00B5FFF7 	    _CALL func_args
 2495      FEFF5DF8 
 2495      04EB
 2496 01ae 0228     	    cmp r0,#2 
 2497 01b0 7FF4FEAF 	    bne syntax_error 
 2498 01b4 5CF8041B 	    _POP r1
 2499 01b8 4FF00100 	    mov r0,#1
 2500 01bc 01F01F01 	    and r1,#31  
 2501 01c0 21B1     	1:  cbz r1, 2f
 2502 01c2 4FEA4000 	    lsl r0,#1
 2503 01c6 A1F10101 	    sub r1,#1
 2504 01ca F9E7     	    b 1b 
 2505 01cc 5CF8041B 	2:  _POP r1
 2506 01d0 0968     	    ldr r1,[r1]
 2507 01d2 01EA0001 	    and r1,r0 
 2508 01d6 09B1     	    cbz r1,9f 
 2509 01d8 4FF00101 	    mov r1,#1
 2510 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2511 01e0 7047     	    _RET 
 2512              	
 2513              	/*********************************
ARM GAS  tinyBasic.s 			page 70


 2514              	  BASIC: CHAR(expr)
 2515              	  convert expr in character 
 2516              	********************************/
 2517 01e2 00BF     	    _FUNC char
 2518 01e4 00B5FFF7 	    _CALL func_args
 2518      FEFF5DF8 
 2518      04EB
 2519 01ee 0128     	    cmp r0,#1
 2520 01f0 7FF4FEAF 	    bne syntax_error 
 2521 01f4 5CF8041B 	    _POP r1 
 2522 01f8 01F07F01 	    and r1,#127 
 2523 01fc 4FF00300 	    mov r0,#TK_CHAR
 2524 0200 7047     	    _RET 
 2525              	
 2526              	/**************************
 2527              	  BASIC: DATALN expr 
 2528              	  set data pointer to line#
 2529              	  specified by expr. 
 2530              	  if line# not valid program 
 2531              	  end with error.
 2532              	  use:
 2533              	
 2534              	**************************/
 2535 0202 00BF     	    _FUNC data_line
 2536 0204 206C10F0 	    _RTO // run time only 
 2536      010F03D1 
 2536      4FF00700 
 2536      FFF7FEBF 
 2537 0214 00B5FFF7 	    _CALL expression 
 2537      FEFF5DF8 
 2537      04EB
 2538 021e 0F28     	    cmp r0,#TK_INTGR
 2539 0220 7FF4FEAF 	    bne syntax_error
 2540 0224 0846     	    mov r0,r1 
 2541 0226 00B5FFF7 	    _CALL search_lineno
 2541      FEFF5DF8 
 2541      04EB
 2542 0230 0029     	    cmp r1,#0
 2543 0232 03D0     	    beq 1f 
 2544 0234 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2545 0238 FFF7FEBF 	    b syntax_error 
 2546 023c C178     	1:  ldrb r1,[r0,#3]
 2547 023e 0B29     	    cmp r1,#TK_CMD 
 2548 0240 F8D1     	    bne 0b
 2549 0242 0179     	    ldrb r1,[r0,#4]
 2550 0244 0A29     	    cmp r1,#DATA_IDX 
 2551 0246 F5D1     	    bne 0b  
 2552 0248 E060     	    str r0,[UPP,#DATAPTR]
 2553 024a 8178     	    ldrb r1,[r0,#2]
 2554 024c 6161     	    str r1,[UPP,#DATALEN]
 2555 024e 4FF00501 	    mov r1,#5 // position of first data item  
 2556 0252 2161     	    str r1,[UPP,#DATA]
 2557 0254 7047     	    _RET 
 2558              	
 2559              	/*****************************
 2560              	  BASIC: READ 
 2561              	  read next data item 
ARM GAS  tinyBasic.s 			page 71


 2562              	  the value can be assigned to
 2563              	  variable or used in expression
 2564              	*****************************/
 2565 0256 00BF     	    _FUNC read
 2566 0258 206C10F0 	    _RTO
 2566      010F03D1 
 2566      4FF00700 
 2566      FFF7FEBF 
 2567 0268 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2568 026a E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2569 026c 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2570 026e 8242     	    cmp r2,r0
 2571 0270 0ED0     	    beq seek_next
 2572 0272 885C     	1:  ldrb r0,[r1,r2]
 2573 0274 02F10102 	    add r2,#1
 2574 0278 0028     	    cmp r0,#TK_NONE
 2575 027a 09D0     	    beq seek_next
 2576 027c 0828     	    cmp r0,#TK_COMMA
 2577 027e F8D0     	    beq 1b  
 2578 0280 0F28     	    cmp r0,#TK_INTGR 
 2579 0282 7FF4FEAF 	    bne syntax_error  
 2580 0286 8958     	    ldr r1,[r1,r2]
 2581 0288 02F10402 	    add r2,#4
 2582 028c 2261     	    str r2,[UPP,#DATA]
 2583 028e 12E0     	    b 9f  
 2584              	seek_next: // is next line data ?
 2585 0290 8878     	    ldrb r0,[R1,#2]
 2586 0292 0144     	    add r1,r0 
 2587 0294 C878     	    ldrb r0,[R1,#3]
 2588 0296 0B28     	    cmp r0,#TK_CMD
 2589 0298 09D1     	    bne 2f 
 2590 029a 0879     	    ldrb r0,[r1,#4]
 2591 029c 0A28     	    cmp r0,#DATA_IDX 
 2592 029e 06D1     	    bne 2f 
 2593 02a0 E160     	    str r1,[UPP,#DATAPTR]
 2594 02a2 8878     	    ldrb r0,[r1,#2]
 2595 02a4 6061     	    str  r0,[UPP,#DATALEN]
 2596 02a6 4FF00502 	    mov r2,#5 
 2597 02aa 2261     	    str r2,[UPP,#DATA]
 2598 02ac E1E7     	    b 1b 
 2599 02ae 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2600 02b2 FFF7FEBF 	    b tb_error 
 2601 02b6 7047     	9:  _RET 
 2602              	
 2603              	/********************************
 2604              	  BASIC: RESTORE 
 2605              	  seek first data line 
 2606              	********************************/
 2607              	    _FUNC restore
 2608 02b8 206C10F0 	    _RTO 
 2608      010F03D1 
 2608      4FF00700 
 2608      FFF7FEBF 
 2609 02c8 216B     	    ldr r1,[UPP,#TXTBGN]
 2610 02ca 606B     	1:  ldr r0,[UPP,#TXTEND]
 2611 02cc 0FD0     	    beq no_data_line 
 2612 02ce 0879     	    ldrb r0,[r1,#4]
ARM GAS  tinyBasic.s 			page 72


 2613 02d0 0A28     	    cmp r0,#DATA_IDX
 2614 02d2 09D1     	    bne try_next_line
 2615 02d4 C878     	    ldrb r0,[r1,#3]
 2616 02d6 0B28     	    cmp r0,#TK_CMD
 2617 02d8 06D1     	    bne try_next_line
 2618              	// this a the first data line 
 2619 02da E160     	    str r1,[UPP,#DATAPTR]
 2620 02dc 8878     	    ldrb r0,[r1,#2]
 2621 02de 6061     	    str r0,[UPP,#DATALEN]
 2622 02e0 4FF00500 	    mov r0,#5 
 2623 02e4 2061     	    str r0,[UPP,#DATA]
 2624 02e6 07E0     	    b 9f
 2625              	try_next_line:
 2626 02e8 8878     	    ldrb r0,[r1,#2]
 2627 02ea 0144     	    add r1,r0 
 2628 02ec EDE7     	    b 1b 
 2629              	no_data_line:
 2630 02ee 80EA0000 	    eor r0,r0 
 2631 02f2 E060     	    str r0,[UPP,#DATAPTR]
 2632 02f4 2061     	    str r0,[UPP,#DATA]
 2633 02f6 6061     	    str r0,[UPP,#DATALEN]
 2634 02f8 7047     	9:  _RET 
 2635              	
 2636              	/***********************************
 2637              	  BASIC: DEC 
 2638              	  switch base to decimal 
 2639              	***********************************/
 2640 02fa 00BF     	    _FUNC dec_base
 2641 02fc 4FF00A00 	    mov r0,#10
 2642 0300 A061     	    str r0,[UPP,#BASE]
 2643 0302 7047     	    _RET 
 2644              	
 2645              	/***************************************
 2646              	  BASIC: DO 
 2647              	  initialize a DO..UNTIL loop 
 2648              	***************************************/
 2649              	    _FUNC do_loop
 2650 0304 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2651 0308 7047     	    _RET 
 2652              	
 2653              	
 2654              	/****************************************
 2655              	  BASIC: DUMP adr, count 
 2656              	    command line only  
 2657              	    print memory content in hexadecimal 
 2658              	    16 bytes per row 
 2659              	    ouput:
 2660              	      none 
 2661              	    use:
 2662              	      r2   byte counter  
 2663              	****************************************/
 2664 030a 00BF     	    _FUNC dump 
 2665 030c 04B4     	    push {r2}
 2666 030e 226C     	    ldr r2,[UPP,#FLAGS]
 2667 0310 12F0010F 	    tst r2,#FRUN 
 2668 0314 03D0     	    beq 0f
 2669 0316 4FF00700 	    mov r0,#ERR_CMD_ONLY 
ARM GAS  tinyBasic.s 			page 73


 2670 031a FFF7FEBF 	    b tb_error  
 2671 031e 00B5FFF7 	0:  _CALL arg_list 
 2671      FEFF5DF8 
 2671      04EB
 2672 0328 0228     	    cmp r0,#2
 2673 032a 7FF4FEAF 	    bne syntax_error 
 2674 032e 5CF8042B 	    _POP r2   // count 
 2675 0332 5CF8040B 	    _POP  r0  // adr 
 2676              	dump01:
 2677 0336 00B500F0 	    _CALL print_dump_header 
 2677      0EF85DF8 
 2677      04EB
 2678 0340 4FF01001 	1:  mov r1,#16
 2679 0344 00B5FFF7 	    _CALL prt_row 
 2679      FEFF5DF8 
 2679      04EB
 2680 034e 103A     	    subs r2,#16 
 2681 0350 F6D5     	    bpl 1b 
 2682 0352 04BC     	2:  pop {r2}
 2683 0354 7047     	    _RET 
 2684              	
 2685              	/********************************
 2686              	   print_dump_header
 2687              	********************************/
 2688 0356 00BF     	    _FUNC print_dump_header
 2689 0358 2DE90103 	    push {r0,T1,T2}
 2690 035c 4FF00C00 	    mov r0,#12 
 2691 0360 00B5FFF7 	    _CALL cursor_x 
 2691      FEFF5DF8 
 2691      04EB
 2692 036a 4FF00000 	    mov r0,#0
 2693 036e 4FF01009 	    mov T2,#16
 2694 0372 8046     	1:  mov T1,r0 
 2695 0374 00B5FFF7 	    _CALL print_hex 
 2695      FEFF5DF8 
 2695      04EB
 2696 037e 08F10100 	    add r0,T1,#1  
 2697 0382 4845     	    cmp r0,T2 
 2698 0384 F5D4     	    bmi 1b 
 2699 0386 00B5FFF7 	    _CALL cr
 2699      FEFF5DF8 
 2699      04EB
 2700 0390 4FF03D00 	    mov r0,#'='
 2701 0394 4FF04F08 	    mov T1,#79
 2702 0398 00B5FFF7 	2:  _CALL uart_putc
 2702      FEFF5DF8 
 2702      04EB
 2703 03a2 B8F10108 	    subs T1,#1 
 2704 03a6 F7D1     	    bne 2b     
 2705 03a8 00B5FFF7 	    _CALL cr
 2705      FEFF5DF8 
 2705      04EB
 2706 03b2 BDE80103 	    pop {r0,T1,T2}
 2707 03b6 7047     	    _RET 
 2708              	
 2709              	
 2710              	/*******************************
ARM GAS  tinyBasic.s 			page 74


 2711              	  BASIC: END 
 2712              	  exit program 
 2713              	******************************/ 
 2714              	    _FUNC cmd_end
 2715 03b8 FFF7FEBF 	    b warm_start 
 2716 03bc 7047     	    _RET 
 2717              	
 2718              	/*******************************************
 2719              	  BASIC: FLASH adr, value 
 2720              	  write value to user space in flash memory 
 2721              	*********************************************/
 2722 03be 00BF     	    _FUNC flash 
 2723 03c0 00B5FFF7 	    _CALL arg_list 
 2723      FEFF5DF8 
 2723      04EB
 2724 03ca 0228     	    cmp r0,#2 
 2725 03cc 7FF4FEAF 	    bne syntax_error 
 2726 03d0 BCE80300 	    ldmia DP!,{r0,r1}
 2727 03d4 DFF83020 	    ldr r2,user_space
 2728 03d8 9142     	    cmp r1,r2 
 2729 03da 03D5     	    bpl 1f 
 2730 03dc 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2731 03e0 FFF7FEBF 	    b tb_error 
 2732 03e4 02F58062 	1:  add r2,#1024 
 2733 03e8 9142     	    cmp r1,r2 
 2734 03ea F7D5     	    bpl 0b 
 2735 03ec 00B5FFF7 	    _CALL flash_store 
 2735      FEFF5DF8 
 2735      04EB
 2736 03f6 7047     	    _RET 
 2737              	
 2738              	/**************************************************
 2739              	  BASIC: ERASE 
 2740              	  erase user space page 
 2741              	*************************************************/
 2742              	    _FUNC erase 
 2743 03f8 DFF80C00 	    ldr r0,user_space 
 2744 03fc 00B5FFF7 	    _CALL erase_page 
 2744      FEFF5DF8 
 2744      04EB
 2745 0406 7047     	    _RET 
 2746 0408 00000000 	user_space: .word user 
 2747              	
 2748              	
 2749              	/**************************************************
 2750              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2751              	  introdure FOR...NEXT loop 
 2752              	**************************************************/
 2753              	    _FUNC for
 2754 040c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2755 0410 4FF00107 	    mov INCR,#1
 2756 0414 00B5FFF7 	    _CALL next_token
 2756      FEFF5DF8 
 2756      04EB
 2757 041e 0428     	    cmp r0,#TK_VAR
 2758 0420 7FF4FEAF 	    bne syntax_error
 2759 0424 02B4     	    push {r1} 
ARM GAS  tinyBasic.s 			page 75


 2760 0426 00B500F0 	    _CALL let_var 
 2760      4DF95DF8 
 2760      04EB
 2761 0430 20BC     	    pop {VADR}
 2762 0432 4FEA8505 	    lsl VADR,#2
 2763 0436 2544     	    add VADR,UPP 
 2764 0438 05F16005 	    add VADR,#VARS 
 2765 043c 7047     	    _RET 
 2766              	
 2767              	/***************************************
 2768              	  BASIC: TO expr 
 2769              	  set limit of FOR...NEXT loop 
 2770              	**************************************/
 2771 043e 00BF     	    _FUNC to
 2772 0440 00B5FFF7 	    _CALL expression 
 2772      FEFF5DF8 
 2772      04EB
 2773 044a 0F28     	    cmp r0,#TK_INTGR
 2774 044c 7FF4FEAF 	    bne syntax_error 
 2775 0450 0E46     	    mov LIMIT,r1
 2776              	    // save loop back parameters 
 2777 0452 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2778 0456 7047     	    _RET 
 2779              	
 2780              	/********************************************
 2781              	  BASIC: STEP expr 
 2782              	  set increment for FOR...NEXT loop 
 2783              	********************************************/
 2784              	    _FUNC step
 2785 0458 00B5FFF7 	    _CALL expression 
 2785      FEFF5DF8 
 2785      04EB
 2786 0462 0F28     	    cmp r0,#TK_INTGR
 2787 0464 7FF4FEAF 	    bne syntax_error 
 2788 0468 0F46     	    mov INCR,r1
 2789              	    // replace parameters left by TO
 2790 046a 8CE8000C 	    stmia DP, {IN,BPTR}
 2791 046e 7047     	    _RET 
 2792              	
 2793              	/********************************************
 2794              	  BASIC: NEXT var 
 2795              	  incrment FOR...NEXT loop variable
 2796              	  exit if variable cross LIMIT 
 2797              	********************************************/
 2798              	    _FUNC next
 2799 0470 00B5FFF7 	    _CALL next_token 
 2799      FEFF5DF8 
 2799      04EB
 2800 047a 0428     	    cmp r0,#TK_VAR 
 2801 047c 7FF4FEAF 	    bne syntax_error 
 2802 0480 4FEA8101 	    lsl r1,#2 
 2803 0484 2144     	    add r1,UPP 
 2804 0486 01F16001 	    add r1,#VARS 
 2805 048a A942     	    cmp r1,VADR
 2806 048c 7FF4FEAF 	    bne syntax_error 
 2807 0490 2868     	    ldr r0,[VADR]
 2808 0492 3844     	    add r0,INCR 
ARM GAS  tinyBasic.s 			page 76


 2809 0494 2860     	    str r0,[VADR]
 2810 0496 002F     	    cmp INCR,#0
 2811 0498 02D4     	    bmi 2f
 2812 049a B042     	    cmp r0,LIMIT 
 2813 049c 02DC     	    bgt 8f  
 2814 049e 07E0     	    b 9f  
 2815 04a0 B042     	2:  cmp r0,LIMIT 
 2816 04a2 05DA     	    bge 9f  
 2817              	8: // exit for...next
 2818              	  //  drop branch parameters
 2819 04a4 4FF00800 	    _DROP 2
 2819      8444
 2820              	  // restore outer loop parameters
 2821 04aa BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2822 04ae 7047     	    _RET 
 2823 04b0 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2824 04b4 9BF80200 	    ldrb r0,[BPTR,#2]
 2825 04b8 6060     	    str r0,[UPP,#COUNT]
 2826 04ba 00B5FFF7 	    _CALL show_trace 
 2826      FEFF5DF8 
 2826      04EB
 2827 04c4 7047     	    _RET 
 2828              	
 2829              	/*********************************
 2830              	  BASIC: GOSUB expr 
 2831              	  call a subroutine at line# 
 2832              	*********************************/
 2833 04c6 00BF     	    _FUNC gosub
 2834 04c8 00B5FFF7 	    _CALL expression
 2834      FEFF5DF8 
 2834      04EB
 2835 04d2 0F28     	    cmp r0,#TK_INTGR 
 2836 04d4 7FF4FEAF 	    bne syntax_error 
 2837 04d8 0846     	    mov r0,r1 
 2838 04da 00B5FFF7 	    _CALL search_lineno  
 2838      FEFF5DF8 
 2838      04EB
 2839 04e4 19B1     	    cbz r1,1f 
 2840 04e6 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2841 04ea FFF7FEBF 	    b tb_error 
 2842 04ee 2CE9000C 	1:  stmdb DP!,{IN,BPTR}
 2843 04f2 8346     	    mov BPTR,r0 
 2844 04f4 4FF0030A 	    mov IN,#3 
 2845 04f8 9BF80200 	    ldrb r0,[BPTR,#2]
 2846 04fc 6060     	    str r0,[UPP,#COUNT]
 2847 04fe 00B5FFF7 	    _CALL show_trace 
 2847      FEFF5DF8 
 2847      04EB
 2848 0508 7047     	    _RET 
 2849              	
 2850              	/**********************************
 2851              	  BASIC: RETURN 
 2852              	  leave a subroutine 
 2853              	*********************************/
 2854 050a 00BF     	    _FUNC return 
 2855 050c BCE8000C 	    ldmia DP!,{IN,BPTR}
 2856 0510 9BF80200 	    ldrb r0,[BPTR,#2]
ARM GAS  tinyBasic.s 			page 77


 2857 0514 6060     	    str r0,[UPP,#COUNT]
 2858 0516 00B5FFF7 	    _CALL show_trace 
 2858      FEFF5DF8 
 2858      04EB
 2859 0520 7047     	    _RET 
 2860              	
 2861              	/**********************************
 2862              	  BASIC: GOTO expr 
 2863              	  go to line # 
 2864              	  use:
 2865              	
 2866              	**********************************/
 2867 0522 00BF     	    _FUNC goto
 2868 0524 00B5FFF7 	    _CALL expression 
 2868      FEFF5DF8 
 2868      04EB
 2869 052e 0F28     	    cmp r0,#TK_INTGR 
 2870 0530 7FF4FEAF 	    bne syntax_error 
 2871 0534 71B1     	    cbz r1,9f 
 2872 0536 0846     	1:  mov r0,r1 
 2873 0538 00B5FFF7 	    _CALL search_lineno 
 2873      FEFF5DF8 
 2873      04EB
 2874 0542 19B1     	    cbz r1,2f 
 2875 0544 4FF00500 	    mov r0,#ERR_NO_LINE 
 2876 0548 FFF7FEBF 	    b tb_error 
 2877 054c 8346     	2:  mov BPTR,r0
 2878 054e 9BF80200 	    ldrb r0,[BPTR,#2]
 2879 0552 6060     	    str r0,[UPP,#COUNT]
 2880 0554 4FF0030A 	9:  mov IN,#3
 2881 0558 00B5FFF7 	    _CALL show_trace 
 2881      FEFF5DF8 
 2881      04EB
 2882 0562 7047     	    _RET 
 2883              	
 2884              	/***************************************
 2885              	  BASIC: HEX 
 2886              	  set numeric base to hexadecimal 
 2887              	***************************************/
 2888              	    _FUNC hex_base
 2889 0564 4FF01000 	    mov r0,#16 
 2890 0568 A061     	    str r0,[UPP,#BASE]
 2891 056a 7047     	    _RET 
 2892              	
 2893              	/**********************************************
 2894              	  BASIC: IF relation THEN statement
 2895              	  execute statement only if relation is true
 2896              	*********************************************/
 2897              	    _FUNC if
 2898 056c 00B5FFF7 	    _CALL relation 
 2898      FEFF5DF8 
 2898      04EB
 2899 0576 09B9     	    cbnz r1,9f 
 2900 0578 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2901 057c 7047     	9:  _RET 
 2902              	
 2903              	/*******************************************************
ARM GAS  tinyBasic.s 			page 78


 2904              	  BASIC: THEN statement
 2905              	  statements following THEN are executed if relation is !=0
 2906              	  optional, retained for compatibility.
 2907              	******************************************************/
 2908 057e 00BF     	    _FUNC then 
 2909              	// do nothing 
 2910 0580 7047     	    _RET
 2911              	
 2912              	/****************************************
 2913              	  BASIC: INPUT [string]var [,[string]var]+
 2914              	  prompt user for variable value
 2915              	***************************************/
 2916 0582 00BF     	     _FUNC input_var
 2917 0584 2DE90401 	    push {r2,T1}
 2918 0588 00B5FFF7 	1:  _CALL next_token 
 2918      FEFF5DF8 
 2918      04EB
 2919 0592 0228     	    cmp r0,#2
 2920 0594 67D4     	    bmi 8f 
 2921 0596 0228     	    cmp r0,#TK_QSTR 
 2922 0598 12D1     	    bne 2f 
 2923 059a 0846     	    mov r0,r1
 2924 059c DFF8D810 	    ldr r1,str_buffer
 2925 05a0 00B5FFF7 	    _CALL strcpy
 2925      FEFF5DF8 
 2925      04EB
 2926 05aa 4FF00400 	    mov r0,#TK_VAR   
 2927 05ae 00B5FFF7 	    _CALL expect 
 2927      FEFF5DF8 
 2927      04EB
 2928 05b8 8846     	    mov T1,r1 
 2929 05ba DFF8BC00 	    ldr r0,str_buffer 
 2930 05be 08E0     	    b 3f 
 2931 05c0 0428     	2:  cmp r0,#TK_VAR 
 2932 05c2 7FF4FEAF 	    bne syntax_error     
 2933 05c6 8846     	    mov T1,r1 
 2934 05c8 01F14100 	    add r0,r1,#'A' 
 2935 05cc 2A49     	    ldr r1,str_buffer
 2936 05ce 0880     	    strh r0,[r1]
 2937 05d0 0846     	    mov r0,r1 
 2938 05d2 00B5FFF7 	3:  _CALL uart_puts  
 2938      FEFF5DF8 
 2938      04EB
 2939 05dc 4FF03D00 	    mov r0,#'='
 2940 05e0 00B5FFF7 	    _CALL uart_putc
 2940      FEFF5DF8 
 2940      04EB
 2941 05ea DFF88800 	    ldr r0,input_buffer
 2942 05ee 4FF02201 	    mov r1,#34 
 2943 05f2 00B5FFF7 	    _CALL readln
 2943      FEFF5DF8 
 2943      04EB
 2944 05fc 31B3     	    cbz r1,6f
 2945 05fe 0178     	    ldrb r1,[r0]
 2946 0600 01B4     	    push {r0}
 2947 0602 0846     	    mov r0,r1
 2948 0604 00B5FFF7 	    _CALL is_alpha 
ARM GAS  tinyBasic.s 			page 79


 2948      FEFF5DF8 
 2948      04EB
 2949 060e 01BC     	    pop {r0}
 2950 0610 02D0     	    beq 3f 
 2951 0612 01F05F01 	    and r1,#0x5f // uppercase  
 2952 0616 19E0     	    b 6f 
 2953 0618 2429     	3:  cmp r1,#'$'
 2954 061a 04D1     	    bne 3f 
 2955 061c 4FF01001 	    mov r1,#16
 2956 0620 00F10100 	    add r0,#1  
 2957 0624 08E0     	    b 5f 
 2958 0626 2629     	3:  cmp r1,#'&' 
 2959 0628 04D1     	    bne 4f 
 2960 062a 4FF00201 	    mov r1,#2
 2961 062e 00F10100 	    add r0,#1 
 2962 0632 01E0     	    b 5f 
 2963 0634 4FF00A01 	4:  mov r1,#10 
 2964 0638 00B5FFF7 	5:  _CALL atoi 
 2964      FEFF5DF8 
 2964      04EB
 2965 0642 18B9     	    cbnz r0,6f
 2966 0644 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 2967 0648 FFF7FEBF 	    b tb_error
 2968 064c 4046     	6:  mov r0,T1 
 2969 064e 00B5FFF7 	    _CALL set_var
 2969      FEFF5DF8 
 2969      04EB
 2970 0658 00B5FFF7 	    _CALL next_token
 2970      FEFF5DF8 
 2970      04EB
 2971 0662 0828     	    cmp r0,#TK_COMMA 
 2972 0664 90D0     	    beq 1b 
 2973 0666 D4F800A0 	8:  _UNGET_TOKEN          
 2973      D4F808B0 
 2974 066e BDE80401 	9:  pop {r2,T1}       
 2975 0672 7047     	    _RET 
 2976 0674 00000000 	input_buffer: .word _tib 
 2977 0678 00000000 	str_buffer: .word _pad 
 2978              	
 2979              	
 2980              	/*****************************************
 2981              	  BASIC: INVERT(expr)
 2982              	  return 1's complement of expr
 2983              	****************************************/
 2984              	    _FUNC invert
 2985 067c 00B5FFF7 	    _CALL func_args
 2985      FEFF5DF8 
 2985      04EB
 2986 0686 0128     	    cmp r0,#1 
 2987 0688 7FF4FEAF 	    bne syntax_error
 2988 068c 5CF8041B 	    _POP r1  
 2989 0690 6FEA0101 	    mvn r1,r1
 2990 0694 4FF00F00 	    mov r0,#TK_INTGR
 2991 0698 7047     	    _RET 
 2992              	
 2993              	/*************************************
 2994              	  BASIC: KEY 
ARM GAS  tinyBasic.s 			page 80


 2995              	  wait for a character from console
 2996              	*************************************/
 2997 069a 00BF     	    _FUNC key
 2998 069c 00B5FFF7 	    _CALL uart_getc
 2998      FEFF5DF8 
 2998      04EB
 2999 06a6 0146     	    mov r1,r0
 3000 06a8 4FF00300 	    mov r0,#TK_CHAR 
 3001 06ac 7047     	    _RET  
 3002              	
 3003              	/******************************
 3004              	  BASIC: [LET] var=expr 
 3005              	         [LET] @(expr)=expr
 3006              	  input:
 3007              	    none 
 3008              	  output:
 3009              	    none 
 3010              	  use:
 3011              	
 3012              	****************************/         
 3013 06ae 00BF     	    _FUNC let
 3014 06b0 00B5FFF7 	    _CALL next_token 
 3014      FEFF5DF8 
 3014      04EB
 3015 06ba 0428     	    cmp r0,#TK_VAR
 3016 06bc 03D0     	    beq let_var 
 3017 06be 0528     	    cmp r0,#TK_ARRAY 
 3018 06c0 07D0     	    beq let_array 
 3019 06c2 FFF7FEBF 	    b syntax_error 
 3020              	let_var:
 3021 06c6 4FEA8101 	    lsl r1,#2
 3022 06ca 04F16000 	    add r0,UPP,#VARS
 3023 06ce 0844     	    add r0,r1
 3024 06d0 1FE0     	    b 1f 
 3025              	let_array: 
 3026 06d2 4FF00600 	    mov r0,#TK_LPAREN
 3027 06d6 00B5FFF7 	    _CALL expect 
 3027      FEFF5DF8 
 3027      04EB
 3028 06e0 00B5FFF7 	    _CALL expression
 3028      FEFF5DF8 
 3028      04EB
 3029 06ea 0F28     	    cmp r0,#TK_INTGR 
 3030 06ec 7FF4FEAF 	    bne syntax_error
 3031 06f0 4CF8041D 	    _PUSH r1 
 3032 06f4 4FF00700 	    mov r0,#TK_RPAREN
 3033 06f8 00B5FFF7 	    _CALL expect 
 3033      FEFF5DF8 
 3033      04EB
 3034 0702 5CF8041B 	    _POP r1 
 3035 0706 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3036 070a 4FEA8101 	    lsl r1,#2 
 3037 070e A0EB0100 	    sub r0,r1 
 3038 0712 4CF8040D 	1:  _PUSH r0 
 3039 0716 4FF03200 	    mov r0,#TK_EQUAL 
 3040 071a 00B5FFF7 	    _CALL expect 
 3040      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 81


 3040      04EB
 3041 0724 00B5FFF7 	    _CALL expression   
 3041      FEFF5DF8 
 3041      04EB
 3042 072e 0F28     	    cmp r0,#TK_INTGR
 3043 0730 7FF4FEAF 	    bne syntax_error   
 3044 0734 5CF8040B 	2:  _POP r0 
 3045 0738 0160     	    str r1,[r0]
 3046 073a 7047     	    _RET  
 3047              	
 3048              	/***************************************
 3049              	  BASIC: LIST [[first]-last]
 3050              	  use:
 3051              	    r2   first line# 
 3052              	    r3   last line#
 3053              	    T1   *line 
 3054              	    T2   TXTEND 
 3055              	**************************************/  
 3056              	    _FUNC list
 3057 073c 206C10F0 	    _CLO
 3057      010F03D0 
 3057      4FF00700 
 3057      FFF7FEBF 
 3058 074c D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3059 0750 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3060 0754 B8F80020 	    ldrh r2,[T1]
 3061 0758 4FF40043 	    mov r3,#32768
 3062 075c 00B5FFF7 	    _CALL next_token 
 3062      FEFF5DF8 
 3062      04EB
 3063 0766 10B3     	    cbz r0,6f 
 3064 0768 0F28     	    cmp r0,#TK_INTGR
 3065 076a 09D1     	    bne 1f 
 3066 076c 0A46     	    mov r2,r1 // first line
 3067 076e 00B5FFF7 	    _CALL next_token
 3067      FEFF5DF8 
 3067      04EB
 3068 0778 0028     	    cmp r0,#TK_NONE 
 3069 077a 01D1     	    bne 1f 
 3070 077c 1346     	    mov r3,r2 
 3071 077e 0CE0     	    b 4f 
 3072 0780 1128     	1:  cmp r0,#TK_MINUS 
 3073 0782 7FF4FEAF 	    bne syntax_error 
 3074 0786 00B5FFF7 	    _CALL next_token 
 3074      FEFF5DF8 
 3074      04EB
 3075 0790 18B1     	    cbz r0,4f 
 3076 0792 0F28     	    cmp r0,#TK_INTGR
 3077 0794 7FF4FEAF 	    bne syntax_error  
 3078 0798 0B46     	    mov r3,r1 
 3079              	4:  // skip lines below r2 
 3080 079a B8F80000 	    ldrh r0,[T1]
 3081 079e 9042     	    cmp r0,r2 
 3082 07a0 05D5     	    bpl 6f 
 3083 07a2 98F80200 	    ldrb r0,[T1,#2]
 3084 07a6 8044     	    add T1,r0
 3085 07a8 C845     	    cmp T1,T2 
ARM GAS  tinyBasic.s 			page 82


 3086 07aa F6D4     	    bmi 4b
 3087 07ac 1AE0     	    b 9f 
 3088 07ae C845     	6:  cmp T1,T2  
 3089 07b0 18D5     	    bpl 9f
 3090 07b2 4046     	    mov r0,T1   
 3091 07b4 DFF83010 	    ldr r1,out_buff 
 3092 07b8 00B5FFF7 	    _CALL decompile_line 
 3092      FEFF5DF8 
 3092      04EB
 3093 07c2 00B5FFF7 	    _CALL uart_puts 
 3093      FEFF5DF8 
 3093      04EB
 3094 07cc 00B5FFF7 	    _CALL cr 
 3094      FEFF5DF8 
 3094      04EB
 3095 07d6 98F80200 	    ldrb r0,[T1,#2]
 3096 07da 8044     	    add T1,r0
 3097 07dc B8F80000 	    ldrh r0,[T1]
 3098 07e0 9842     	    cmp r0,r3 
 3099 07e2 E4DD     	    ble 6b 
 3100 07e4 FFF7FEBF 	9:  b warm_start 
 3101 07e8 00000000 	out_buff: .word _tib 
 3102              	
 3103              	/********************************
 3104              	  BASIC: LOG2(expr)
 3105              	  return log base 2 of expr 
 3106              	********************************/
 3107              	    _FUNC log2
 3108 07ec 00B5FFF7 	    _CALL func_args
 3108      FEFF5DF8 
 3108      04EB
 3109 07f6 0128     	    cmp r0,#1 
 3110 07f8 7FF4FEAF 	    bne syntax_error
 3111 07fc 5CF8040B 	    _POP r0 
 3112 0800 B0FA80F1 	    clz r1,r0 
 3113 0804 C1F11F01 	    rsb r1,#31
 3114 0808 4FF00F00 	9:  mov r0,#TK_INTGR
 3115 080c 7047     	    _RET 
 3116              	
 3117              	
 3118              	/****************************************
 3119              	  BASIC: LSHIFT(expr1,expr2)
 3120              	  shift right expr1 of expr2 bits 
 3121              	****************************************/
 3122 080e 00BF     	    _FUNC lshift
 3123 0810 00B5FFF7 	    _CALL func_args
 3123      FEFF5DF8 
 3123      04EB
 3124 081a 0228     	    cmp r0,#2
 3125 081c 7FF4FEAF 	    bne syntax_error 
 3126 0820 BCE80300 	    ldmia DP!,{r0,r1}
 3127 0824 01FA00F1 	    lsl r1,r0 
 3128 0828 4FF00F00 	    mov r0,#TK_INTGR
 3129 082c 7047     	    _RET 
 3130              	
 3131              	/***********************************
 3132              	  BASIC: NEW 
ARM GAS  tinyBasic.s 			page 83


 3133              	  delete existing program in memory
 3134              	  and clear variables and RAM 
 3135              	***********************************/
 3136 082e 00BF     	    _FUNC new
 3137 0830 206C10F0 	    _CLO 
 3137      010F03D0 
 3137      4FF00700 
 3137      FFF7FEBF 
 3138 0840 00B5FFF7 	    _CALL clear_basic 
 3138      FEFF5DF8 
 3138      04EB
 3139 084a FFF7FEBF 	    b warm_start   
 3140              	
 3141              	/************************************
 3142              	  BASIC: NOT relation  
 3143              	  invert logical value or relation
 3144              	************************************/
 3145 084e 00BF     	      _FUNC func_not
 3146 0850 00B5FFF7 	      _CALL relation 
 3146      FEFF5DF8 
 3146      04EB
 3147 085a 11B1     	      cbz r1,8f 
 3148 085c 81EA0101 	      eor r1,r1
 3149 0860 01E0     	      b 9f 
 3150 0862 4FF0FF31 	  8:  mov r1,#-1
 3151 0866 7047     	  9:  _RET 
 3152              	
 3153              	/******************************************
 3154              	  BASIC: OR(expr1,expr2)
 3155              	  binary OR between 2 expressions
 3156              	******************************************/
 3157              	    _FUNC bit_or
 3158 0868 00B5FFF7 	    _CALL func_args
 3158      FEFF5DF8 
 3158      04EB
 3159 0872 0228     	    cmp r0,#2
 3160 0874 7FF4FEAF 	    bne syntax_error
 3161 0878 5CF8040B 	    _POP r0 
 3162 087c 5CF8041B 	    _POP r1
 3163 0880 41EA0001 	    orr r1,r0 
 3164 0884 4FF00F00 	    mov r0,#TK_INTGR
 3165 0888 7047     	    _RET 
 3166              	
 3167              	/****************************************
 3168              	  BASIC: INP(\c) 
 3169              	  read gpio_idr (16 bits value) 
 3170              	***************************************/
 3171 088a 00BF     	    _FUNC inp 
 3172 088c 4FF00600 	    mov r0,#TK_LPAREN 
 3173 0890 00B5FFF7 	    _CALL expect 
 3173      FEFF5DF8 
 3173      04EB
 3174 089a 4FF00300 	    mov r0,#TK_CHAR 
 3175 089e 00B5FFF7 	    _CALL expect
 3175      FEFF5DF8 
 3175      04EB
 3176 08a8 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 84


 3177 08aa 00B5FFF7 	    _CALL upper 
 3177      FEFF5DF8 
 3177      04EB
 3178 08b4 0246     	    mov r2,r0 
 3179 08b6 4FF00700 	    mov r0,#TK_RPAREN
 3180 08ba 00B5FFF7 	    _CALL expect 
 3180      FEFF5DF8 
 3180      04EB
 3181 08c4 A2F14102 	    sub r2,#'A' 
 3182 08c8 4FF48061 	    mov r1,0x400 
 3183 08cc 02FB01F1 	    mul r1,r2
 3184 08d0 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
 3184      C4F20102 
 3185 08d8 0A44     	    add r2,r1 
 3186 08da 1168     	    ldr r1,[r2]
 3187 08dc 4FF00F00 	    mov r0,#TK_INTGR
 3188 08e0 7047     	    _RET 
 3189              	
 3190              	
 3191              	/****************************************
 3192              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3193              	  output to gpio_odr expr lower 16 bits
 3194              	***************************************/
 3195 08e2 00BF     	    _FUNC out
 3196 08e4 4FF00300 	1:  mov r0,#TK_CHAR 
 3197 08e8 00B5FFF7 	    _CALL expect 
 3197      FEFF5DF8 
 3197      04EB
 3198 08f2 0846     	    mov r0,r1
 3199 08f4 00B5FFF7 	    _CALL upper
 3199      FEFF5DF8 
 3199      04EB
 3200 08fe 0246     	    mov r2,r0 
 3201 0900 4FF00800 	    mov r0,#TK_COMMA 
 3202 0904 00B5FFF7 	    _CALL expect 
 3202      FEFF5DF8 
 3202      04EB
 3203 090e 00B5FFF7 	    _CALL expression 
 3203      FEFF5DF8 
 3203      04EB
 3204 0918 A2F14102 	    sub r2,#'A'
 3205 091c 4FF48063 	    mov r3,#0x400 
 3206 0920 03FB02F2 	    mul r2,r3 
 3207 0924 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3207      C4F20103 
 3208 092c 1A44     	    add r2,r3
 3209 092e 1180     	    strh r1,[r2]
 3210 0930 00B5FFF7 	    _CALL next_token
 3210      FEFF5DF8 
 3210      04EB
 3211 093a 0828     	    cmp r0,#TK_COMMA
 3212 093c D2D0     	    beq 1b 
 3213 093e D4F800A0 	    _UNGET_TOKEN
 3213      D4F808B0 
 3214 0946 7047     	    _RET 
 3215              	
 3216              	/****************************************
ARM GAS  tinyBasic.s 			page 85


 3217              	  BASIC: PAD 
 3218              	  return pad buffer address 
 3219              	****************************************/
 3220              	    _FUNC pad_ref
 3221 0948 0149     	    ldr r1,pad_adr  
 3222 094a 4FF00F00 	    mov r0,#TK_INTGR 
 3223 094e 7047     	    _RET 
 3224 0950 00000000 	pad_adr: .word _pad 
 3225              	
 3226              	/***********************
 3227              	  BASIC: PAUSE expr 
 3228              	  suspend execution for 
 3229              	  expr milliseconds 
 3230              	************************/
 3231              	    _FUNC pause
 3232 0954 00B5FFF7 	    _CALL expression 
 3232      FEFF5DF8 
 3232      04EB
 3233 095e 0F28     	    cmp r0,#TK_INTGR 
 3234 0960 7FF4FEAF 	    bne syntax_error 
 3235 0964 E069     	    ldr r0,[UPP,#TICKS]
 3236 0966 0844     	    add r0,r1 
 3237 0968 E169     	1:  ldr r1,[UPP,#TICKS]
 3238 096a 8842     	    cmp r0,r1 
 3239 096c FCD1     	    bne 1b     
 3240 096e 7047     	    _RET 
 3241              	
 3242              	/***************************************************
 3243              	  BASIC: PMODE \c,pin,mode[,opt] 
 3244              	  configure a digital pin for input|output
 3245              	  paramters:
 3246              	    \c    port letter
 3247              	    pin   pin {0..15} 
 3248              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3249              	    for input mode:
 3250              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3251              	    for output mode:
 3252              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3253              	  use:
 3254              	    r2  opt
 3255              	    r3  mode 
 3256              	    T1  pin  
 3257              	    T2  port      
 3258              	***************************************************/
 3259              	      _FUNC pin_mode
 3260 0970 4FF00300 	      mov r0,#TK_CHAR 
 3261 0974 00B5FFF7 	      _CALL expect
 3261      FEFF5DF8 
 3261      04EB
 3262 097e 0846     	      mov r0,r1 
 3263 0980 00B5FFF7 	      _CALL upper 
 3263      FEFF5DF8 
 3263      04EB
 3264 098a A0F14109 	      sub T2,r0,#'A'
 3265 098e 4FF00800 	      mov r0,#TK_COMMA
 3266 0992 00B5FFF7 	      _CALL expect 
 3266      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 86


 3266      04EB
 3267 099c 00B5FFF7 	      _CALL arg_list
 3267      FEFF5DF8 
 3267      04EB
 3268 09a6 0228     	      cmp r0,#2 
 3269 09a8 3FF5FEAF 	      bmi syntax_error
 3270 09ac 0428     	      cmp r0,#4
 3271 09ae 01D4     	      bmi 1f 
 3272 09b0 FFF7FEBF 	      b syntax_error
 3273 09b4 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3274 09b8 0228     	      cmp r0,#2
 3275 09ba 02D0     	      beq 2f 
 3276              	// 3 parameters, pin,mode,opt  
 3277 09bc BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3278 09c0 01E0     	    b 4f  
 3279              	2: // 2 parameters, pin,mode 
 3280 09c2 BCE80801 	    ldmia DP!,{r3,T1}
 3281 09c6 4FF48060 	4:  mov r0,#0x400 
 3282 09ca 00FB09F9 	    mul T2,r0 
 3283 09ce 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3283      C4F20100 
 3284 09d6 8144     	    add T2,r0 // port base address 
 3285              	// if input mode set pull in ODR 
 3286 09d8 83B9     	    cbnz r3,2f 
 3287 09da 022A     	    cmp r2,#2
 3288 09dc 0ED4     	    bmi 2f 
 3289 09de 4FF00100 	    mov r0,#1 
 3290 09e2 4146     	    mov r1,T1 
 3291 09e4 032A     	    cmp r2,#3 
 3292 09e6 01D0     	    beq 1f
 3293 09e8 01F11001 	    add r1,#16 //reset bit 
 3294 09ec 00FA01F0 	1:  lsl r0,r1
 3295 09f0 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3296 09f4 032A     	    cmp r2,#3 
 3297 09f6 01D4     	    bmi 2f 
 3298 09f8 A2F10102 	    sub r2,#1
 3299              	2: // set CNF|MODE bits GPIO_CRx 
 3300 09fc B8F1080F 	    cmp T1,#8 
 3301 0a00 03D4     	    bmi 3f 
 3302 0a02 A8F10808 	    sub T1,#8 
 3303 0a06 09F10409 	    add T2,#4 //CRH 
 3304 0a0a 4FF00F00 	3:  mov r0,#15   
 3305 0a0e 4FEA8801 	    lsl r1,T1,#2 
 3306 0a12 00FA01F0 	    lsl r0,r1
 3307 0a16 6FEA0000 	    mvn r0,r0 // bitmask 
 3308 0a1a D9F80010 	    ldr r1,[T2]
 3309 0a1e 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3310              	// combine opt|mode     
 3311 0a22 4FEA8200 	    lsl r0,r2,#2 
 3312 0a26 40EA0300 	    orr r0,r3 // OPT|MODE 
 3313 0a2a 4FEA8803 	    lsl r3,T1,#2 
 3314 0a2e 00FA03F0 	    lsl r0,r3
 3315 0a32 41EA0001 	    orr r1,r0   
 3316 0a36 C9F80010 	    str r1,[T2] // mode and option set
 3317 0a3a 7047     	    _RET 
 3318              	
 3319              	
ARM GAS  tinyBasic.s 			page 87


 3320              	/*****************************************
 3321              	  BASIC: PEEK8 (expr)  
 3322              	  return byte value at address 
 3323              	*****************************************/
 3324              	    _FUNC peek8
 3325 0a3c 00B5FFF7 	    _CALL func_args  
 3325      FEFF5DF8 
 3325      04EB
 3326 0a46 0128     	    cmp r0,#1
 3327 0a48 3FF5FEAF 	    bmi syntax_error
 3328 0a4c 5CF8041B 	    _POP r1 
 3329 0a50 0978     	    ldrb r1,[r1]
 3330 0a52 4FF00F00 	    mov r0,#TK_INTGR     
 3331 0a56 7047     	    _RET 
 3332              	
 3333              	/*****************************************
 3334              	  BASIC: PEEK16 (expr)  
 3335              	  return byte value at address 
 3336              	*****************************************/
 3337              	    _FUNC peek16
 3338 0a58 00B5FFF7 	    _CALL func_args  
 3338      FEFF5DF8 
 3338      04EB
 3339 0a62 0128     	    cmp r0,#1
 3340 0a64 3FF5FEAF 	    bmi syntax_error
 3341 0a68 5CF8041B 	    _POP r1 
 3342 0a6c 0988     	    ldrh r1,[r1]
 3343 0a6e 4FF00F00 	    mov r0,#TK_INTGR     
 3344 0a72 7047     	    _RET 
 3345              	
 3346              	/*****************************************
 3347              	  BASIC: PEEK32 (expr)  
 3348              	  return byte value at address 
 3349              	*****************************************/
 3350              	    _FUNC peek32
 3351 0a74 00B5FFF7 	    _CALL func_args  
 3351      FEFF5DF8 
 3351      04EB
 3352 0a7e 0128     	    cmp r0,#1
 3353 0a80 3FF5FEAF 	    bmi syntax_error
 3354 0a84 5CF8041B 	    _POP r1 
 3355 0a88 0968     	    ldr r1,[r1]
 3356 0a8a 4FF00F00 	    mov r0,#TK_INTGR     
 3357 0a8e 7047     	    _RET 
 3358              	
 3359              	
 3360              	/**********************************
 3361              	  BASIC: POKE8 addr,byte
 3362              	  store byte at addr   
 3363              	**********************************/
 3364              	    _FUNC poke8
 3365 0a90 00B5FFF7 	    _CALL arg_list
 3365      FEFF5DF8 
 3365      04EB
 3366 0a9a 0228     	    cmp r0,#2 
 3367 0a9c 7FF4FEAF 	    bne syntax_error
 3368 0aa0 BCE80300 	    ldmia DP!,{r0,r1} 
ARM GAS  tinyBasic.s 			page 88


 3369 0aa4 0870     	    strb r0,[r1]
 3370 0aa6 7047     	    _RET 
 3371              	
 3372              	/**********************************
 3373              	  BASIC: POKE16 addr,hword
 3374              	  store hword at addr   
 3375              	**********************************/
 3376              	    _FUNC poke16
 3377 0aa8 00B5FFF7 	    _CALL arg_list
 3377      FEFF5DF8 
 3377      04EB
 3378 0ab2 0228     	    cmp r0,#2 
 3379 0ab4 7FF4FEAF 	    bne syntax_error
 3380 0ab8 BCE80300 	    ldmia DP!,{r0,r1} 
 3381 0abc 0880     	    strh r0,[r1]
 3382 0abe 7047     	    _RET 
 3383              	
 3384              	/**********************************
 3385              	  BASIC: POKE32 addr,word
 3386              	  store word at addr   
 3387              	**********************************/
 3388              	    _FUNC poke32
 3389 0ac0 00B5FFF7 	    _CALL arg_list 
 3389      FEFF5DF8 
 3389      04EB
 3390 0aca 0228     	    cmp r0,#2 
 3391 0acc 7FF4FEAF 	    bne syntax_error
 3392 0ad0 BCE80300 	    ldmia DP!,{r0,r1} 
 3393 0ad4 0860     	    str r0,[r1]
 3394 0ad6 7047     	    _RET 
 3395              	
 3396              	
 3397              	
 3398              	/****************************
 3399              	  BASIC: PRINT|? arg_list 
 3400              	  print list of arguments 
 3401              	****************************/
 3402              	    _FUNC print
 3403 0ad8 88EA0808 	    eor T1,T1 
 3404 0adc 00B5FFF7 	0:  _CALL expression
 3404      FEFF5DF8 
 3404      04EB
 3405 0ae6 0F28     	    cmp r0,#TK_INTGR
 3406 0ae8 07D1     	    bne 1f 
 3407 0aea 0846     	    mov r0,r1
 3408 0aec A169     	    ldr r1,[UPP,#BASE]
 3409 0aee 00B5FFF7 	    _CALL print_int
 3409      FEFF5DF8 
 3409      04EB
 3410 0af8 3EE0     	    b 8f  
 3411 0afa 00B5FFF7 	1:  _CALL next_token
 3411      FEFF5DF8 
 3411      04EB
 3412 0b04 0128     	    cmp r0,#TK_COLON 
 3413 0b06 00DC     	    bgt 2f
 3414 0b08 4DE0     	    b unget_exit 
 3415 0b0a 0228     	2:  cmp r0,#TK_QSTR 
ARM GAS  tinyBasic.s 			page 89


 3416 0b0c 06D1     	    bne 3f
 3417 0b0e 0846     	    mov r0,r1 
 3418 0b10 00B5FFF7 	    _CALL uart_puts  
 3418      FEFF5DF8 
 3418      04EB
 3419 0b1a 2DE0     	    b 8f 
 3420 0b1c 0D28     	3:  cmp r0,#TK_CFUNC
 3421 0b1e 05D1     	    bne 4f
 3422 0b20 0846     	    mov r0,r1
 3423 0b22 00B5FFF7 	    _CALL execute 
 3423      FEFF5DF8 
 3423      04EB
 3424 0b2c 0328     	4:  cmp r0,#TK_CHAR 
 3425 0b2e 06D1     	    bne 5f 
 3426 0b30 0846     	    mov r0,r1 
 3427 0b32 00B5FFF7 	    _CALL uart_putc 
 3427      FEFF5DF8 
 3427      04EB
 3428 0b3c 1CE0     	    b 8f 
 3429 0b3e 0A28     	5:  cmp r0,#TK_SHARP
 3430 0b40 09D1     	    bne 6f 
 3431 0b42 00B5FFF7 	   _CALL next_token
 3431      FEFF5DF8 
 3431      04EB
 3432 0b4c 0F28     	    cmp r0,#TK_INTGR  
 3433 0b4e 7FF4FEAF 	    bne syntax_error 
 3434 0b52 6164     	    str r1,[UPP,#TAB_WIDTH]
 3435 0b54 10E0     	    b 8f 
 3436 0b56 0B28     	6:  cmp r0,#TK_CMD 
 3437 0b58 25D1     	    bne unget_exit  
 3438 0b5a 4429     	    cmp r1,#TAB_IDX 
 3439 0b5c 05D1     	    bne 6f
 3440 0b5e 00B500F0 	    _CALL tab 
 3440      8CFA5DF8 
 3440      04EB
 3441 0b68 06E0     	    b 8f 
 3442 0b6a 4029     	6:  cmp r1,#SPC_IDX  
 3443 0b6c 1BD1     	    bne unget_exit
 3444 0b6e 00B500F0 	    _CALL spc   
 3444      4AFA5DF8 
 3444      04EB
 3445 0b78 88EA0808 	8:  eor T1,T1  
 3446 0b7c 00B5FFF7 	    _CALL next_token
 3446      FEFF5DF8 
 3446      04EB
 3447 0b86 90B1     	    cbz r0, print_exit  
 3448 0b88 0828     	    cmp r0,#TK_COMMA 
 3449 0b8a 02D1     	    bne 8f 
 3450 0b8c 4FF0FF38 	    mov T1,#-1
 3451 0b90 A4E7     	    b 0b
 3452 0b92 0928     	8:  cmp r0,#TK_SEMIC 
 3453 0b94 07D1     	    bne unget_exit 
 3454 0b96 00B5FFF7 	    _CALL tabulation 
 3454      FEFF5DF8 
 3454      04EB
 3455 0ba0 4FF0FF38 	    mov T1,#-1
 3456 0ba4 9AE7     	    b 0b
ARM GAS  tinyBasic.s 			page 90


 3457              	unget_exit:         
 3458 0ba6 D4F800A0 	   _UNGET_TOKEN 
 3458      D4F808B0 
 3459              	print_exit:
 3460 0bae 18EA0808 	    ands T1,T1 
 3461 0bb2 04D1     	    bne 9f
 3462 0bb4 00B5FFF7 	    _CALL cr 
 3462      FEFF5DF8 
 3462      04EB
 3463 0bbe 7047     	9:  _RET 
 3464              	
 3465              	/**************************************
 3466              	  BASIC: QKEY
 3467              	  check if key pressed 
 3468              	**************************************/ 
 3469              	    _FUNC qkey
 3470 0bc0 4FF00001 	    mov r1,#0
 3471 0bc4 00B5FFF7 	    _CALL uart_qkey
 3471      FEFF5DF8 
 3471      04EB
 3472 0bce 01D0     	    beq 9f 
 3473 0bd0 4FF0FF31 	    mov r1,#-1 
 3474 0bd4 4FF00F00 	9:  mov r0,#TK_INTGR
 3475 0bd8 7047     	    _RET 
 3476              	
 3477              	/******************************************
 3478              	  BASIC RANDOM(expr)
 3479              	  generate random number between 0..expr-1
 3480              	******************************************/
 3481 0bda 00BF     	    _FUNC random
 3482 0bdc 00B5FFF7 	    _CALL func_args 
 3482      FEFF5DF8 
 3482      04EB
 3483 0be6 0128     	    cmp r0,#1
 3484 0be8 7FF4FEAF 	    bne syntax_error 
 3485 0bec 606A     	    ldr r0,[UPP,#SEED]
 3486 0bee 4FEA4031 	    lsl r1,r0,#13
 3487 0bf2 81EA0001 	    eor r1,r0
 3488 0bf6 4FEA5140 	    lsr r0,r1,#17
 3489 0bfa 81EA0001 	    eor r1,r0
 3490 0bfe 4FEA4110 	    lsl r0,r1,#5
 3491 0c02 81EA0001 	    eor r1,r0
 3492 0c06 6162     	    str r1,[UPP,#SEED]
 3493 0c08 5CF8040B 	    _POP r0 
 3494 0c0c B1FBF0F2 	    udiv r2,r1,r0  
 3495 0c10 00FB02F2 	    mul r2,r0 
 3496 0c14 A1EB0201 	    sub r1,r2 
 3497 0c18 4FF00F00 	    mov r0,#TK_INTGR
 3498 0c1c 7047     	    _RET 
 3499              	
 3500              	/****************************************
 3501              	  BASIC: RSHIFT(expr1,expr2)
 3502              	  shift left expr1 de expr2 bits 
 3503              	****************************************/
 3504 0c1e 00BF     	    _FUNC rshift
 3505 0c20 00B5FFF7 	    _CALL func_args
 3505      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 91


 3505      04EB
 3506 0c2a 0228     	    cmp r0,#2 
 3507 0c2c 7FF4FEAF 	    bne syntax_error
 3508 0c30 BCE80300 	    ldmia DP!,{r0,r1}
 3509 0c34 21FA00F1 	    lsr r1,r0  
 3510 0c38 4FF00F00 	    mov r0,#TK_INTGR
 3511 0c3c 7047     	    _RET 
 3512              	
 3513              	/****************************
 3514              	  BASIC: RUN 
 3515              	  execute program in memory
 3516              	****************************/
 3517 0c3e 00BF     	    _FUNC run
 3518 0c40 206C10F0 	    _CLO 
 3518      010F03D0 
 3518      4FF00700 
 3518      FFF7FEBF 
 3519 0c50 206B     	    ldr r0,[UPP,#TXTBGN]
 3520 0c52 616B     	    ldr r1,[UPP,#TXTEND]
 3521 0c54 8842     	    cmp r0,r1
 3522 0c56 20D0     	    beq 9f
 3523 0c58 216C     	    ldr r1,[UPP,#FLAGS]
 3524 0c5a 11F0080F 	    tst r1,#FSTOP
 3525 0c5e 09D0     	    beq 1f
 3526 0c60 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3527 0c64 6060     	    str r0,[UPP,#COUNT]
 3528 0c66 206C     	    ldr r0,[UPP,#FLAGS]
 3529 0c68 4FF00901 	    mov r1,#FRUN+FSTOP
 3530 0c6c 80EA0100 	    eor r0,r1
 3531 0c70 2064     	    str r0,[UPP,#FLAGS] 
 3532 0c72 12E0     	    b 9f  
 3533 0c74 8178     	1:  ldrb r1,[r0,#2]
 3534 0c76 6160     	    str r1,[UPP,#COUNT]
 3535 0c78 8346     	    mov BPTR,r0 
 3536 0c7a 4FF0030A 	    mov IN,#3
 3537              	    // reset dataline pointers 
 3538 0c7e 80EA0000 	    eor r0,r0 
 3539 0c82 E060     	    str r0,[UPP,#DATAPTR]
 3540 0c84 2061     	    str r0,[UPP,#DATA]
 3541 0c86 6061     	    str r0,[UPP,#DATALEN] 
 3542 0c88 206C     	    ldr r0,[UPP,#FLAGS]
 3543 0c8a 40F00100 	    orr r0,#FRUN 
 3544 0c8e 2064     	    str r0,[UPP,#FLAGS]
 3545 0c90 00B5FFF7 	    _CALL show_trace 
 3545      FEFF5DF8 
 3545      04EB
 3546 0c9a 7047     	9:  _RET 
 3547              	
 3548              	/**********************************
 3549              	        FILE SYSTEM 
 3550              	**********************************/
 3551              	
 3552              	/*********************************
 3553              	  search_free 
 3554              	  search first free PAGE in fs
 3555              	  a PAGE is free if first word is
 3556              	  -1
ARM GAS  tinyBasic.s 			page 92


 3557              	  input:
 3558              	    none 
 3559              	  output:
 3560              	    r0    addr|0
 3561              	  use:
 3562              	*********************************/
 3563              	    _FUNC search_free 
 3564 0c9c 06B4     	    push {r1,r2}
 3565 0c9e DFF86410 	    ldr r1,fs_addr 
 3566 0ca2 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3566      C0F60202 
 3567 0caa 0868     	1:  ldr r0,[r1]
 3568 0cac B0F1FF3F 	    cmp r0,#-1
 3569 0cb0 03D0     	    beq 8f 
 3570 0cb2 01F58061 	    add r1,#PAGE_SIZE
 3571 0cb6 9142     	    cmp r1,r2 
 3572 0cb8 F7D4     	    bmi 1b 
 3573 0cba 0846     	8:  mov r0,r1 
 3574 0cbc 06BC     	    pop {r1,r2}   
 3575 0cbe 7047     	    _RET 
 3576              	
 3577              	/*********************************
 3578              	  search_file 
 3579              	  search for a file name 
 3580              	  in file system.
 3581              	  input: 
 3582              	    r0   .asciz target name
 3583              	  output:
 3584              	    r0    0 || address found 
 3585              	  use:
 3586              	   r0     temp 
 3587              	   r1     *file_name 
 3588              	   r2     *fs  
 3589              	   r3     target   
 3590              	**********************************/
 3591              	    _FUNC search_file 
 3592 0cc0 0EB4     	    push {r1,r2,r3}
 3593 0cc2 DFF84020 	    ldr r2,fs_addr
 3594 0cc6 0346     	    mov r3,r0  
 3595              	cmp_loop:
 3596 0cc8 1068     	    ldr r0,[r2]
 3597 0cca B0F1FF3F 	    cmp r0,#-1
 3598 0cce 80EA0000 	    eor r0,r0
 3599 0cd2 15D0     	    beq 9f // reached end of fs 
 3600 0cd4 1846     	1:  mov r0,r3
 3601 0cd6 02F10201 	    add r1,r2,#2
 3602 0cda 00B5FFF7 	    _CALL strcmp
 3602      FEFF5DF8 
 3602      04EB
 3603 0ce4 08B9     	    cbnz r0,2f
 3604 0ce6 1046     	    mov r0,r2 
 3605 0ce8 0AE0     	    b 9f   
 3606 0cea 1088     	2:  ldrh r0,[r2] // name length
 3607 0cec 0244     	    add r2,r0 
 3608 0cee 1088     	    ldrh r0,[r2]
 3609 0cf0 1044     	    add r0,r2
 3610 0cf2 00B5FFF7 	    _CALL page_align 
ARM GAS  tinyBasic.s 			page 93


 3610      FEFF5DF8 
 3610      04EB
 3611 0cfc 0246     	    mov r2,r0   
 3612 0cfe E3E7     	    b cmp_loop 
 3613 0d00 0EBC     	9:  pop {r1,r2,r3}
 3614 0d02 7047     	    _RET 
 3615              	
 3616 0d04 00000000 	fs_addr: .word FILE_SYSTEM
 3617              	
 3618              	/*************************************
 3619              	  BASIC: DIR 
 3620              	  list files stored in fs 
 3621              	  use:
 3622              	    r0  temp 
 3623              	    r1  temp
 3624              	    r2  file count
 3625              	    r3  data size
 3626              	    T1  *fs  
 3627              	*************************************/
 3628              	    _FUNC directory
 3629 0d08 206C10F0 	    _CLO 
 3629      010F03D0 
 3629      4FF00700 
 3629      FFF7FEBF 
 3630 0d18 82EA0202 	    eor r2,r2 
 3631 0d1c 5FF81C80 	    ldr T1,fs_addr 
 3632 0d20 D8F80000 	1:  ldr r0,[T1] // name length 
 3633 0d24 B0F1FF3F 	    cmp r0,#-1
 3634 0d28 2AD0     	    beq no_more_file
 3635 0d2a 00F00F03 	    and r3,r0,#15
 3636 0d2e 08F10200 	    add r0,T1,#2
 3637 0d32 00B5FFF7 	    _CALL uart_puts 
 3637      FEFF5DF8 
 3637      04EB
 3638 0d3c 4FF01000 	    mov r0,#16 
 3639 0d40 00B5FFF7 	    _CALL cursor_x 
 3639      FEFF5DF8 
 3639      04EB
 3640 0d4a 9844     	    add T1,r3 
 3641 0d4c B8F80030 	    ldrh r3,[T1]
 3642 0d50 1846     	    mov r0,r3 
 3643 0d52 4FF00A01 	    mov r1,#10 
 3644 0d56 00B5FFF7 	    _CALL print_int
 3644      FEFF5DF8 
 3644      04EB
 3645 0d60 00B5FFF7 	    _CALL cr  
 3645      FEFF5DF8 
 3645      04EB
 3646 0d6a 08EB0300 	    add r0,T1,r3 
 3647 0d6e 00B5FFF7 	    _CALL page_align
 3647      FEFF5DF8 
 3647      04EB
 3648 0d78 8046     	    mov T1,r0 
 3649 0d7a 02F10102 	    add r2,#1 
 3650 0d7e CFE7     	    b 1b  
 3651              	no_more_file:
 3652 0d80 00B5FFF7 	    _CALL cr
ARM GAS  tinyBasic.s 			page 94


 3652      FEFF5DF8 
 3652      04EB
 3653 0d8a 4FF01000 	    mov r0,#16
 3654 0d8e 00B5FFF7 	    _CALL cursor_x  
 3654      FEFF5DF8 
 3654      04EB
 3655 0d98 1046     	    mov r0,r2 
 3656 0d9a 4FF00A01 	    mov r1,#10 
 3657 0d9e 00B5FFF7 	    _CALL print_int 
 3657      FEFF5DF8 
 3657      04EB
 3658 0da8 DFF8D004 	    ldr r0,=fcount 
 3659 0dac 00B5FFF7 	    _CALL uart_puts 
 3659      FEFF5DF8 
 3659      04EB
 3660 0db6 7047     	    _RET 
 3661 0db8 66696C65 	fcount:  .asciz "files\n"
 3661      730A00
 3662              	
 3663              	/*************************************
 3664              	  BASIC: FORGET ["name"]
 3665              	  delete file and all following 
 3666              	  if no name given delete all files 
 3667              	************************************/
 3668 0dbf 00       	    _FUNC forget
 3669 0dc0 2DE90802 	    push {r3,T2}
 3670 0dc4 5FF8C490 	    ldr T2,fs_addr 
 3671 0dc8 E36A     	    ldr r3,[UPP,#FSFREE]
 3672 0dca 00B5FFF7 	    _CALL next_token
 3672      FEFF5DF8 
 3672      04EB
 3673 0dd4 38B1     	    cbz r0,1f // no name 
 3674 0dd6 0846     	    mov r0,r1
 3675 0dd8 00B5FFF7 	    _CALL search_file
 3675      71FF5DF8 
 3675      04EB
 3676 0de2 58B1     	    cbz r0,9f 
 3677 0de4 8146     	    mov T2,r0 
 3678 0de6 9945     	1:  cmp T2,r3 
 3679 0de8 08D5     	    bpl 9f 
 3680 0dea 4846     	    mov r0,T2 
 3681 0dec 00B5FFF7 	    _CALL erase_page
 3681      FEFF5DF8 
 3681      04EB
 3682 0df6 09F58069 	    add T2,#PAGE_SIZE
 3683 0dfa F4E7     	    b 1b 
 3684 0dfc 00B5FFF7 	9:  _CALL search_free
 3684      4DFF5DF8 
 3684      04EB
 3685 0e06 BDE80802 	    pop {r3,T2} 
 3686 0e0a 7047     	    _RET 
 3687              	
 3688              	/**********************************
 3689              	  BASIC LOAD "name" 
 3690              	  load file in RAM for execution
 3691              	  use:
 3692              	    r0   temp
ARM GAS  tinyBasic.s 			page 95


 3693              	    r1   src
 3694              	    r2   dest 
 3695              	    r3   count 
 3696              	**********************************/
 3697              	    _FUNC load
 3698 0e0c 206C10F0 	    _CLO 
 3698      010F03D0 
 3698      4FF00700 
 3698      FFF7FEBF 
 3699 0e1c 00B5FFF7 	    _CALL next_token 
 3699      FEFF5DF8 
 3699      04EB
 3700 0e26 0228     	    cmp r0,#TK_QSTR 
 3701 0e28 7FF4FEAF 	    bne syntax_error 
 3702 0e2c 0846     	    mov r0,r1 
 3703 0e2e 00B5FFF7 	    _CALL search_file 
 3703      46FF5DF8 
 3703      04EB
 3704 0e38 18B9     	    cbnz r0, 1f 
 3705 0e3a 4FF00900 	    mov r0,#ERR_NOT_FILE
 3706 0e3e FFF7FEBF 	    b tb_error 
 3707 0e42 0146     	1:  mov r1,r0 
 3708 0e44 0888     	    ldrh r0,[r1]
 3709 0e46 0144     	    add r1,r0 // data size field  
 3710 0e48 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3711 0e4c 226B     	    ldr r2,[UPP,#TXTBGN]
 3712 0e4e 02EB0300 	    add r0,r2,r3  
 3713 0e52 6063     	    str r0,[UPP,#TXTEND]
 3714 0e54 03F10103 	    add r3,#1
 3715 0e58 4FEA5303 	    lsr r3,#1
 3716              	2:  // load file data 
 3717 0e5c 31F8020B 	    ldrh r0,[r1],#2
 3718 0e60 22F8020B 	    strh r0,[r2],#2 
 3719 0e64 013B     	    subs r3,#1 
 3720 0e66 F9D1     	    bne 2b 
 3721              	// report file size 
 3722 0e68 DFF81404 	    ldr r0,=fsize 
 3723 0e6c 00B5FFF7 	    _CALL uart_puts
 3723      FEFF5DF8 
 3723      04EB
 3724 0e76 606B     	    ldr r0,[UPP,#TXTEND]
 3725 0e78 236B     	    ldr r3,[UPP,#TXTBGN]
 3726 0e7a A0EB0300 	    sub r0,r3 
 3727 0e7e 4FF00A01 	    mov r1,#10 
 3728 0e82 00B5FFF7 	    _CALL print_int 
 3728      FEFF5DF8 
 3728      04EB
 3729 0e8c FD48     	    ldr r0,=data_bytes 
 3730 0e8e 00B5FFF7 	    _CALL uart_puts      
 3730      FEFF5DF8 
 3730      04EB
 3731 0e98 7047     	    _RET 
 3732              	
 3733              	
 3734              	/*********************************
 3735              	  BASIC: SAVE "name" 
 3736              	  save program in flash memory
ARM GAS  tinyBasic.s 			page 96


 3737              	  file structure:
 3738              	    .hword name_length 
 3739              	    .asciz name
 3740              	    .palign 1  
 3741              	    .hword data_length 
 3742              	    .byte  file data (variable length)  
 3743              	  use:
 3744              	    r0  temp 
 3745              	    r1  temp
 3746              	    r2  *flash 
 3747              	    r3  *ram  
 3748              	    T1  temp   
 3749              	********************************/
 3750 0e9a 00BF     	    _FUNC save
 3751 0e9c 206C10F0 	    _CLO 
 3751      010F03D0 
 3751      4FF00700 
 3751      FFF7FEBF 
 3752 0eac 606B     	    ldr r0,[UPP,#TXTEND]
 3753 0eae 216B     	    ldr r1,[UPP,#TXTBGN]
 3754 0eb0 8842     	    cmp r0,r1
 3755 0eb2 03D1     	    bne 0f 
 3756 0eb4 4FF00D00 	    mov r0,#ERR_NO_PROG
 3757 0eb8 FFF7FEBF 	    b tb_error 
 3758 0ebc 00B5FFF7 	0:  _CALL next_token 
 3758      FEFF5DF8 
 3758      04EB
 3759 0ec6 0228     	    cmp r0,#TK_QSTR
 3760 0ec8 7FF4FEAF 	    bne syntax_error 
 3761              	// check for existing 
 3762 0ecc 0B46     	    mov r3,r1 // save name 
 3763 0ece 1846     	    mov r0,r3  
 3764 0ed0 00B5FFF7 	    _CALL search_file
 3764      F5FE5DF8 
 3764      04EB
 3765 0eda 18B1     	    cbz r0,new_file 
 3766 0edc 4FF00800 	    mov r0,#ERR_DUPLICATE
 3767 0ee0 FFF7FEBF 	    b tb_error 
 3768              	new_file:
 3769 0ee4 4FF00100 	    mov r0,#1 
 3770 0ee8 00B5FFF7 	    _CALL unlock 
 3770      FEFF5DF8 
 3770      04EB
 3771 0ef2 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3772 0ef4 1846     	    mov r0,r3 // *name 
 3773 0ef6 00B5FFF7 	    _CALL strlen 
 3773      FEFF5DF8 
 3773      04EB
 3774 0f00 00F10400 	    add r0,#4  
 3775 0f04 20F00100 	    and r0,#-2 //even size
 3776 0f08 A0F10208 	    sub T1,r0,#2  // name length counter   
 3777 0f0c 1146     	1:  mov r1,r2  
 3778 0f0e 00B5FFF7 	    _CALL hword_write   
 3778      FEFF5DF8 
 3778      04EB
 3779 0f18 02F10202 	    add r2,#2  
 3780              	// write file name      
ARM GAS  tinyBasic.s 			page 97


 3781 0f1c 33F8020B 	2:  ldrh r0,[r3],#2 
 3782 0f20 1146     	    mov r1,r2 
 3783 0f22 00B5FFF7 	    _CALL hword_write
 3783      FEFF5DF8 
 3783      04EB
 3784 0f2c 02F10202 	    add r2,#2
 3785 0f30 B8F10208 	    subs T1,#2
 3786 0f34 F2D1     	    bne 2b
 3787              	// write data size 
 3788 0f36 606B     	    ldr r0,[UPP,#TXTEND]
 3789 0f38 236B     	    ldr r3,[UPP,#TXTBGN]
 3790 0f3a A0EB0300 	    sub r0,r3
 3791 0f3e 8046     	    mov T1,r0
 3792 0f40 1146     	    mov r1,r2 
 3793 0f42 00B5FFF7 	    _CALL hword_write
 3793      FEFF5DF8 
 3793      04EB
 3794 0f4c 02F10202 	    add r2,#2 
 3795              	// write data 
 3796 0f50 08F10108 	    add T1,#1 
 3797 0f54 4FEA5808 	    lsr T1,#1 // .hword to write 
 3798 0f58 33F8020B 	3:  ldrh r0,[r3],#2
 3799 0f5c 1146     	    mov r1,r2
 3800 0f5e 00B5FFF7 	    _CALL hword_write 
 3800      FEFF5DF8 
 3800      04EB
 3801 0f68 02F10202 	    add r2,#2 
 3802 0f6c B8F10108 	    subs T1,#1 
 3803 0f70 F2D1     	    bne 3b
 3804 0f72 4FF00000 	    mov r0,#0 
 3805 0f76 00B5FFF7 	    _CALL unlock
 3805      FEFF5DF8 
 3805      04EB
 3806              	// update FSFREE     
 3807 0f80 606B     	    ldr r0,[UPP,#TXTEND]
 3808 0f82 216B     	    ldr r1,[UPP,#TXTBGN]
 3809 0f84 A0EB0100 	    sub r0,r1 
 3810 0f88 8046     	    mov T1,r0 
 3811 0f8a E16A     	    ldr r1,[UPP,#FSFREE]
 3812 0f8c 0844     	    add r0,r1 
 3813 0f8e 00B5FFF7 	    _CALL page_align
 3813      FEFF5DF8 
 3813      04EB
 3814 0f98 E062     	    str r0,[UPP,#FSFREE]
 3815 0f9a B948     	    ldr r0,=fsize
 3816 0f9c 00B5FFF7 	    _CALL uart_puts
 3816      FEFF5DF8 
 3816      04EB
 3817 0fa6 4046     	    mov r0,T1 
 3818 0fa8 4FF00A01 	    mov r1,#10 
 3819 0fac 00B5FFF7 	    _CALL print_int 
 3819      FEFF5DF8 
 3819      04EB
 3820 0fb6 B348     	    ldr r0,=data_bytes 
 3821 0fb8 00B5FFF7 	    _CALL uart_puts  
 3821      FEFF5DF8 
 3821      04EB
ARM GAS  tinyBasic.s 			page 98


 3822 0fc2 7047     	    _RET 
 3823 0fc4 66696C65 	fsize: .asciz "file size: "
 3823      2073697A 
 3823      653A2000 
 3824 0fd0 62797465 	data_bytes: .asciz "bytes"
 3824      7300
 3825              	
 3826              	
 3827              	/*******************************
 3828              	  BASIC: SIZE 
 3829              	  return RAM free bytes 
 3830              	*******************************/
 3831 0fd6 00BF     	    _FUNC size
 3832 0fd8 606B     	    ldr r0,[UPP,#TXTEND]
 3833 0fda D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3834 0fde A1EB0001 	    sub r1,R0
 3835 0fe2 4FF00F00 	    mov r0,#TK_INTGR
 3836 0fe6 7047     	    _RET  
 3837              	
 3838              	/*********************************
 3839              	  BASIC: SLEEP 
 3840              	  place MCU lowest power mode 
 3841              	  wait for external interrpt or
 3842              	  reset.
 3843              	*********************************/
 3844              	    _FUNC sleep
 3845 0fe8 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3845      CEF20000 
 3846 0ff0 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3847 0ff4 0160     	    str r1,[r0]
 3848 0ff6 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3848      C4F20000 
 3849 0ffe 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3850 1002 0160     	    str r1,[r0]
 3851 1004 20BF     	    wfe 
 3852 1006 7047     	    _RET 
 3853              	
 3854              	/************************************
 3855              	  BASIC: SPC(expr)
 3856              	  mov cursor right expr spaces 
 3857              	***********************************/
 3858              	    _FUNC spc 
 3859 1008 00B5FFF7 	    _CALL func_args 
 3859      FEFF5DF8 
 3859      04EB
 3860 1012 0128     	    cmp r0,#1
 3861 1014 7FF4FEAF 	    bne syntax_error 
 3862 1018 5CF8040B 	    _POP r0 
 3863 101c 00B5FFF7 	    _CALL spaces 
 3863      FEFF5DF8 
 3863      04EB
 3864 1026 7047     	    _RET 
 3865              	
 3866              	    _FUNC spi_read
 3867 1028 7047     	    _RET 
 3868              	
 3869 102a 00BF     	    _FUNC spi_enable
ARM GAS  tinyBasic.s 			page 99


 3870 102c 7047     	    _RET 
 3871              	
 3872 102e 00BF     	    _FUNC spi_select
 3873 1030 7047     	    _RET 
 3874              	
 3875 1032 00BF     	    _FUNC spi_write
 3876 1034 7047     	    _RET 
 3877              	
 3878              	/******************************
 3879              	  BASIC: STOP 
 3880              	  stop program executre but 
 3881              	  keep execution state for 
 3882              	  resume 
 3883              	******************************/
 3884 1036 00BF     	    _FUNC stop
 3885 1038 206C10F0 	    _RTO 
 3885      010F03D1 
 3885      4FF00700 
 3885      FFF7FEBF 
 3886 1048 6068     	    ldr r0,[UPP,#COUNT]
 3887 104a 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3888 104e 206C     	    ldr r0,[UPP,#FLAGS]
 3889 1050 4FF00901 	    mov r1,#FRUN+FSTOP
 3890 1054 80EA0100 	    eor r0,r1
 3891 1058 2064     	    str r0,[UPP,#FLAGS]
 3892 105a 8AEA0A0A 	    eor IN,IN 
 3893 105e 8BEA0B0B 	    eor BPTR,BPTR 
 3894 1062 C4F804A0 	    str IN,[UPP,#COUNT]
 3895 1066 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3896 106a C4F808A0 	    str IN,[UPP,#BASICPTR]
 3897 106e 4FF4A040 	    _MOV32 r0,RAM_END
 3897      C2F20000 
 3898 1076 8546     	    mov sp,r0
 3899 1078 FFF7FEBF 	    b cmd_line 
 3900              	
 3901              	
 3902              	/**************************
 3903              	  BASIC: TAB(expr)
 3904              	  move cursor column expr 
 3905              	**************************/
 3906              	    _FUNC tab 
 3907 107c 00B5FFF7 	    _CALL func_args  
 3907      FEFF5DF8 
 3907      04EB
 3908 1086 0128     	    cmp r0,#1 
 3909 1088 7FF4FEAF 	    bne syntax_error 
 3910 108c 5CF8040B 	    _POP r0 
 3911 1090 00B5FFF7 	    _CALL cursor_x 
 3911      FEFF5DF8 
 3911      04EB
 3912 109a 7047     	    _RET 
 3913              	
 3914              	/**************************
 3915              	  BASIC: TICKS 
 3916              	  return msec counter
 3917              	**************************/  
 3918              	    _FUNC get_ticks
ARM GAS  tinyBasic.s 			page 100


 3919 109c E169     	    ldr r1,[UPP,#TICKS]
 3920 109e 4FF00F00 	    mov r0,#TK_INTGR
 3921 10a2 7047     	    _RET  
 3922              	
 3923              	/*************************
 3924              	  BASIC: TIMER expr 
 3925              	  set countdown timer 
 3926              	************************/
 3927              	    _FUNC set_timer
 3928 10a4 00B5FFF7 	    _CALL expression 
 3928      FEFF5DF8 
 3928      04EB
 3929 10ae 0F28     	    cmp r0,#TK_INTGR
 3930 10b0 7FF4FEAF 	    bne syntax_error 
 3931 10b4 2162     	    str r1,[UPP,#TIMER]
 3932 10b6 7047     	    _RET 
 3933              	
 3934              	/***************************
 3935              	  BASIC: TIMEOUT
 3936              	  check for timer expiration 
 3937              	  return -1 true || 0 false
 3938              	****************************/
 3939              	    _FUNC timeout
 3940 10b8 81EA0101 	    eor r1,r1 
 3941 10bc 206A     	    ldr r0,[UPP,#TIMER]
 3942 10be 08B9     	    cbnz r0,9f 
 3943 10c0 6FEA0101 	    mvn r1,r1 
 3944 10c4 4FF00F00 	9:  mov r0,#TK_INTGR    
 3945 10c8 7047     	    _RET 
 3946              	
 3947              	/****************************************
 3948              	  BASIC:  TONE freq, duration 
 3949              	  play a tone with frequency freq and duration
 3950              	  in milliseconds
 3951              	***********************************************/
 3952 10ca 00BF     	    _FUNC tone
 3953 10cc 00B5FFF7 	    _CALL arg_list 
 3953      FEFF5DF8 
 3953      04EB
 3954 10d6 0228     	    cmp r0,#2 
 3955 10d8 7FF4FEAF 	    bne syntax_error
 3956 10dc BCE80003 	    ldmia DP!,{T1,T2}
 3957              	    
 3958 10e0 7047     	    _RET 
 3959              	
 3960              	/****************************************
 3961              	  BASIC: TRACE n 
 3962              	  enable execution trace 
 3963              	  0   ddisable
 3964              	  1   show current line#
 3965              	  2  show line#+data_stack
 3966              	  3  show line#+data_stack+main_stack 
 3967              	***************************************/
 3968 10e2 00BF     	    _FUNC trace 
 3969 10e4 00B5FFF7 	    _CALL next_token 
 3969      FEFF5DF8 
 3969      04EB
ARM GAS  tinyBasic.s 			page 101


 3970 10ee 0F28     	    cmp r0,#TK_INTGR  
 3971 10f0 7FF4FEAF 	    bne syntax_error 
 3972 10f4 01F00301 	    and r1,#3 
 3973 10f8 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 3974 10fc 7047     	    _RET 
 3975              	
 3976              	
 3977              	/***************************
 3978              	  BASIC: UBOUND 
 3979              	  return last indice of @
 3980              	  output:
 3981              	    r0  TK_INTGR 
 3982              	    r1  +int 
 3983              	**************************/
 3984 10fe 00BF     	    _FUNC ubound
 3985 1100 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3986 1104 606B     	    ldr r0,[UPP,#TXTEND]
 3987 1106 A1EB0001 	    sub r1,r0 
 3988 110a 4FEA9101 	    lsr r1,#2
 3989 110e 4FF00F00 	    mov r0,#TK_INTGR 
 3990 1112 7047     	    _RET 
 3991              	
 3992              	/****************************
 3993              	  BASIC: UFLASH 
 3994              	  return user flash address
 3995              	*****************************/
 3996              	    _FUNC uflash
 3997 1114 5C49     	    ldr r1,=user
 3998 1116 4FF00F00 	    mov r0,#TK_INTGR 
 3999 111a 7047     	    _RET 
 4000              	
 4001              	
 4002              	/************************************
 4003              	  BASIC: UNTIL relation 
 4004              	  close a DO..UNTIL loop 
 4005              	  loop until relation come true 
 4006              	************************************/
 4007              	    _FUNC until
 4008 111c 00B5FFF7 	    _CALL relation 
 4008      FEFF5DF8 
 4008      04EB
 4009 1126 11B1     	    cbz r1,9f
 4010 1128 0CF1080C 	    add DP,#8
 4011 112c 7047     	    _RET  
 4012 112e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4013 1132 9BF80200 	    ldrb r0,[BPTR,#2]
 4014 1136 6060     	    str r0,[UPP,#COUNT]
 4015 1138 7047     	    _RET 
 4016              	
 4017              	/*************************************
 4018              	  BASIC: WAIT addr,expr1[,expr2] 
 4019              	  wait until *addr&expr1 is not null 
 4020              	  or until (*addr&expr1)^expr2 is null 
 4021              	***************************************/
 4022 113a 00BF     	    _FUNC wait
 4023 113c 00B5FFF7 	    _CALL arg_list 
 4023      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 102


 4023      04EB
 4024 1146 0228     	    cmp r0,#2
 4025 1148 03D0     	    beq 2f 
 4026 114a 0328     	    cmp r0,#3
 4027 114c 07D0     	    beq 4f
 4028 114e FFF7FEBF 	    b syntax_error 
 4029 1152 BCE80300 	2:  ldmia DP!,{r0,r1}
 4030 1156 0A88     	3:  ldrh r2,[r1]
 4031 1158 0240     	    ands r2,r0 
 4032 115a FCD0     	    beq 3b 
 4033 115c 06E0     	    b 9f 
 4034 115e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4035 1162 1388     	5:  ldrh r3,[r2]
 4036 1164 83EA0003 	    eor r3,r0
 4037 1168 0B40     	    ands r3,r1 
 4038 116a FAD0     	    beq 5b 
 4039 116c 7047     	9:  _RET 
 4040              	
 4041              	/*********************************************
 4042              	  BASIC: WORDS 
 4043              	  print list of BASIC WORDS in dictionary 
 4044              	  use:
 4045              	    r0,r1,T1,T2  
 4046              	********************************************/
 4047 116e 00BF     	    _FUNC words
 4048 1170 206C10F0 	    _CLO 
 4048      010F03D0 
 4048      4FF00700 
 4048      FFF7FEBF 
 4049 1180 DFF80881 	    ldr T1,=kword_dict
 4050 1184 89EA0909 	    eor T2,T2 
 4051              	1:  
 4052 1188 4046     	    mov r0,T1
 4053 118a 00B5FFF7 	    _CALL strlen
 4053      FEFF5DF8 
 4053      04EB
 4054 1194 E0B1     	    cbz r0,9f 
 4055 1196 8144     	    add T2,r0 
 4056 1198 B9F1500F 	    cmp T2,#80 
 4057 119c 06D4     	    bmi 2f
 4058 119e 89EA0909 	    eor T2,T2  
 4059 11a2 00B5FFF7 	    _CALL cr 
 4059      FEFF5DF8 
 4059      04EB
 4060 11ac 4046     	2:  mov r0,T1 
 4061 11ae 00B5FFF7 	    _CALL uart_puts 
 4061      FEFF5DF8 
 4061      04EB
 4062 11b8 4FF02000 	    mov r0,#SPACE
 4063 11bc 09F10109 	    add T2,#1  
 4064 11c0 00B5FFF7 	    _CALL uart_putc 
 4064      FEFF5DF8 
 4064      04EB
 4065 11ca 58F80C8C 	    ldr T1,[T1,#-12]
 4066 11ce DBE7     	    b 1b 
 4067 11d0 7047     	9:  _RET 
 4068              	
ARM GAS  tinyBasic.s 			page 103


 4069              	
 4070              	/**************************************
 4071              	  BASIC: XOR(expr1,expr2)
 4072              	  binary exclusive or between 2 expressions
 4073              	**************************************/
 4074 11d2 00BF     	    _FUNC bit_xor
 4075 11d4 00B5FFF7 	    _CALL func_args
 4075      FEFF5DF8 
 4075      04EB
 4076 11de 0228     	    cmp r0,#2
 4077 11e0 7FF4FEAF 	    bne syntax_error
 4078 11e4 5CF8040B 	    _POP r0
 4079 11e8 5CF8041B 	    _POP r1 
 4080 11ec 81EA0001 	    eor r1,r0 
 4081 11f0 4FF00F00 	    mov r0,#TK_INTGR
 4082 11f4 7047     	    _RET 
 4083              	
 4084              	/**********************************
 4085              	     argument stack manipulation
 4086              	**********************************/
 4087              	
 4088              	/**********************************
 4089              	  BASIC PUSH expr[,expr] 
 4090              	  push integers on stack 
 4091              	*********************************/
 4092 11f6 00BF     	    _FUNC cmd_push 
 4093 11f8 00B5FFF7 	    _CALL arg_list
 4093      FEFF5DF8 
 4093      04EB
 4094 1202 7047     	    _RET 
 4095              	
 4096              	/********************************
 4097              	  BASIC: POP 
 4098              	  pop an integer out of stack 
 4099              	********************************/    
 4100              	    _FUNC fn_pop 
 4101 1204 5CF8041B 	    _POP r1 
 4102 1208 4FF00F00 	    mov r0,#TK_INTGR 
 4103 120c 7047     	    _RET 
 4104              	
 4105              	/*******************************
 4106              	  BASIC: DROP n 
 4107              	  discard n integer from stack
 4108              	*******************************/
 4109 120e 00BF     	    _FUNC drop 
 4110 1210 00B5FFF7 	    _CALL expression 
 4110      FEFF5DF8 
 4110      04EB
 4111 121a 0F28     	    cmp r0,#TK_INTGR 
 4112 121c 7FF4FEAF 	    bne syntax_error 
 4113 1220 4FF00400 	    mov r0,#4 
 4114 1224 01FB00F0 	    mul r0,r1 
 4115 1228 8444     	    add DP,r0 
 4116 122a 7047     	    _RET 
 4117              	
 4118              	/********************************
 4119              	  BASIC: pick(n) 
ARM GAS  tinyBasic.s 			page 104


 4120              	  retreive nth element from stack 
 4121              	********************************/
 4122              	    _FUNC pick 
 4123 122c 00B5FFF7 	    _CALL func_args
 4123      FEFF5DF8 
 4123      04EB
 4124 1236 0128     	    cmp r0,#1 
 4125 1238 7FF4FEAF 	    bne syntax_error 
 4126 123c 5CF8040B 	    _POP r0
 4127 1240 4FF00401 	    mov r1,#4 
 4128 1244 01FB00F0 	    mul r0,r1 
 4129 1248 5CF80010 	    ldr r1,[DP,r0]
 4130 124c 4FF00F00 	    mov r0,#TK_INTGR
 4131 1250 7047     	    _RET 
 4132              	
 4133              	/*************************************
 4134              	  BASIC: store value,n  
 4135              	  store value at nth position on stack
 4136              	**************************************/
 4137 1252 00BF     	    _FUNC store 
 4138 1254 00B5FFF7 	    _CALL arg_list 
 4138      FEFF5DF8 
 4138      04EB
 4139 125e 0228     	    cmp r0,#2 
 4140 1260 7FF4FEAF 	    bne syntax_error 
 4141 1264 5CF8040B 	    _POP r0 
 4142 1268 4FF00401 	    mov r1,#4 
 4143 126c 01FB00F0 	    mul r0,r1 
 4144 1270 5CF8041B 	    _POP r1
 4145 1274 4CF80010 	    str r1,[DP,r0]
 4146 1278 7047     	    _RET 
 4147              	
 4148              	
 4149 127a 0000     	  .section .rodata.user
 4150              	  .p2align 10 
 4151              	user:
 4152 0000 FFFFFFFF 	  .space 1024,255
 4152      FFFFFFFF 
 4152      FFFFFFFF 
 4152      FFFFFFFF 
 4152      FFFFFFFF 
 4153              	
 4154              	/*************************************************
 4155              	   extra FLASH memory not used by Tiny BASIC
 4156              	   is used to save BASIC programs.
 4157              	************************************************/
 4158              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4159              	  .section .rodata.fs
 4160              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 105


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 106


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 107


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 108


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 INP
      tbi_macros.inc:38     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:53     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:54     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:55     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:56     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:57     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:58     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:59     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:60     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:61     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:62     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:63     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:64     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:65     *ABS*:0000000000000011 TK_MINUS
ARM GAS  tinyBasic.s 			page 109


      tbi_macros.inc:66     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:67     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:68     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:76     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:77     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:78     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:79     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:80     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:81     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:84     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:85     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:86     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:87     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:88     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:93     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:94     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:95     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:96     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:98     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:99     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:100    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:102    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:103    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:104    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:105    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:106    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:107    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:108    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:115    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:117    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:123    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:140    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:141    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:142    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:143    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:144    *ABS*:0000000000000010 DATA
      tbi_macros.inc:145    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:146    *ABS*:0000000000000018 BASE
      tbi_macros.inc:147    *ABS*:000000000000001c TICKS
      tbi_macros.inc:148    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:149    *ABS*:0000000000000024 SEED
      tbi_macros.inc:150    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:151    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:152    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:153    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:154    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:155    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:156    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:157    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:158    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:159    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:160    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:161    *ABS*:0000000000000060 VARS
ARM GAS  tinyBasic.s 			page 110


      tbi_macros.inc:162    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:163    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:164    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:165    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:166    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:169    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:170    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:171    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:172    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:173    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:174    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:175    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:177    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:179    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:180    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a DATA_IDX
       cmd_index.inc:36     *ABS*:000000000000000b DATALN_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DEC_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DIR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DO_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DROP_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DUMP_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 END_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 ERASE_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 FLASH_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FOR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FORGET_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 GOSUB_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOTO_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 HEX_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 IF_IDX
       cmd_index.inc:51     *ABS*:000000000000001a INP_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INPUT_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INVERT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d KEY_IDX
       cmd_index.inc:55     *ABS*:000000000000001e LET_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LIST_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LOAD_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOG2_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
ARM GAS  tinyBasic.s 			page 111


       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PICK_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POP_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PRT_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PUSH_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 QKEY_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 READ_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 REM_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 REST_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RET_IDX
       cmd_index.inc:83     *ABS*:000000000000003a RND_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RSHIFT_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RUN_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SAVE_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SIZE_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SLEEP_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPC_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 STEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STOP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STORE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 TAB_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 THEN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TICKS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TIMER_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TMROUT_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TO_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TRACE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b UBOUND_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UFLASH_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UNTIL_IDX
       cmd_index.inc:103    *ABS*:000000000000004e WAIT_IDX
       cmd_index.inc:104    *ABS*:000000000000004f WORDS_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WRITE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 XOR_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:295    .text:0000000000000224 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
ARM GAS  tinyBasic.s 			page 112


         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:262    .text:00000000000001dc $d
         tinyBasic.s:267    .text:00000000000001e8 show_trace
         tinyBasic.s:323    .text:0000000000000248 search_lineno
         tinyBasic.s:354    .text:0000000000000268 delete_line
         tinyBasic.s:379    .text:0000000000000294 create_gap
         tinyBasic.s:404    .text:00000000000002bc insert_line
         tinyBasic.s:443    .text:000000000000030c compile
         tinyBasic.s:1585   .text:0000000000000cec pad
         tinyBasic.s:683    .text:0000000000000544 parse_int
         tinyBasic.s:1248   .text:00000000000009ac tb_error
         tinyBasic.s:519    .text:00000000000003ac comp_token
         tinyBasic.s:593    .text:0000000000000498 store_r0
         tinyBasic.s:777    .text:00000000000005e4 skip
         tinyBasic.s:796    .text:00000000000005fc upper
         tinyBasic.s:627    .text:00000000000004d8 is_special
         tinyBasic.s:649    .text:000000000000051c token_ofs
         tinyBasic.s:534    .text:00000000000003ec tok_idx0
         tinyBasic.s:596    .text:000000000000049e try_number
         tinyBasic.s:538    .text:00000000000003ee single
         tinyBasic.s:644    .text:000000000000050d tok_single
         tinyBasic.s:542    .text:00000000000003f6 lt
         tinyBasic.s:548    .text:0000000000000404 gt
         tinyBasic.s:561    .text:0000000000000428 bkslash
         tinyBasic.s:610    .text:00000000000004d2 token_exit
         tinyBasic.s:568    .text:000000000000043e prt_cmd
         tinyBasic.s:574    .text:0000000000000450 quote
         tinyBasic.s:716    .text:000000000000057c parse_quote
         tinyBasic.s:579    .text:0000000000000464 tick
         tinyBasic.s:991    .text:0000000000000704 parse_keyword
         tinyBasic.s:641    .text:00000000000004f8 char_list
         tinyBasic.s:642    .text:00000000000004f8 $d
         tinyBasic.s:650    .text:000000000000051c $d
         tinyBasic.s:667    .text:0000000000000544 $t
         tinyBasic.s:950    .text:00000000000006b8 atoi
         tinyBasic.s:747    .text:00000000000005b0 get_escaped_char
         tinyBasic.s:764    .text:00000000000005da escaped
         tinyBasic.s:764    .text:00000000000005da $d
         tinyBasic.s:777    .text:00000000000005e2 $t
         tinyBasic.s:814    .text:000000000000060c is_digit
         tinyBasic.s:838    .text:0000000000000628 is_hex
         tinyBasic.s:863    .text:000000000000064c is_bit
         tinyBasic.s:884    .text:0000000000000668 is_alpha
         tinyBasic.s:909    .text:0000000000000688 is_num
         tinyBasic.s:930    .text:00000000000006a0 is_alnum
         tinyBasic.s:1233   .text:00000000000009a4 syntax_error
         tinyBasic.s:2262   .rodata.dictionary:00000000000005f4 kword_dict
         tinyBasic.s:1400   .text:0000000000000b28 search_dict
         tinyBasic.s:1042   .text:000000000000078c cmd_name
         tinyBasic.s:1068   .text:00000000000007b0 decompile_line
         tinyBasic.s:1085   .text:00000000000007f6 decomp_loop
         tinyBasic.s:1679   .text:0000000000000d94 next_token
         tinyBasic.s:1190   .text:0000000000000955 single_char
         tinyBasic.s:1186   .text:000000000000094c ge_str
         tinyBasic.s:1187   .text:000000000000094f le_str
         tinyBasic.s:1188   .text:0000000000000952 ne_str
ARM GAS  tinyBasic.s 			page 113


         tinyBasic.s:1186   .text:000000000000094c $d
         tinyBasic.s:1210   .text:000000000000098c modulo
         tinyBasic.s:1210   .text:000000000000098c $t
         tinyBasic.s:1281   .text:0000000000000a3c compile_error
         tinyBasic.s:1252   .text:00000000000009b4 rt_error
         tinyBasic.s:1296   .text:0000000000000a8e rt_error_msg
         tinyBasic.s:1300   .text:0000000000000aae err_msg
         tinyBasic.s:1297   .text:0000000000000a9f token_at_msg
         tinyBasic.s:2676   .text.basic:0000000000000336 dump01
         tinyBasic.s:1598   .text:0000000000000cfc warm_start
         tinyBasic.s:1296   .text:0000000000000a8e $d
         tinyBasic.s:1308   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1309   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1310   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1311   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1312   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1313   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1314   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1315   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1316   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1317   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1318   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1319   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1320   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1321   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1322   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1323   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1325   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1326   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1327   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1337   .text:0000000000000af2 $t
         tinyBasic.s:1337   .text:0000000000000af4 skip_line
         tinyBasic.s:1354   .text:0000000000000afc BTGL
         tinyBasic.s:1372   .text:0000000000000b00 kword_cmp
         tinyBasic.s:1438   .text:0000000000000b66 cold_start
         tinyBasic.s:1461   .text:0000000000000bc4 src_addr
         tinyBasic.s:1463   .text:0000000000000bc8 dest_addr
         tinyBasic.s:1584   .text:0000000000000ce8 tib
         tinyBasic.s:1465   .text:0000000000000bcc sysvar_size
         tinyBasic.s:1476   .text:0000000000000bd0 prt_version
         tinyBasic.s:1532   .text:0000000000000c74 clear_basic
         tinyBasic.s:3563   .text.basic:0000000000000c9c search_free
         tinyBasic.s:1462   .text:0000000000000bc4 $d
         tinyBasic.s:2142   .rodata:0000000000000000 uzero
         tinyBasic.s:2168   .rodata:00000000000000d4 ulast
         tinyBasic.s:1476   .text:0000000000000bd0 $t
         tinyBasic.s:1499   .text:0000000000000c34 version_msg
         tinyBasic.s:1501   .text:0000000000000c54 version
         tinyBasic.s:1500   .text:0000000000000c34 $d
         tinyBasic.s:1516   .text:0000000000000c58 clear_vars
         tinyBasic.s:1567   .text:0000000000000cbc warm_init
         tinyBasic.s:1583   .text:0000000000000ce4 dstack
         tinyBasic.s:1582   .text:0000000000000ce0 mstack
         tinyBasic.s:1582   .text:0000000000000ce0 $d
         tinyBasic.s:1586   .text:0000000000000cf0 array
         tinyBasic.s:1587   .text:0000000000000cf4 ready
         tinyBasic.s:1618   .text:0000000000000d14 cmd_line
ARM GAS  tinyBasic.s 			page 114


         tinyBasic.s:1630   .text:0000000000000d48 interpreter
         tinyBasic.s:1663   .text:0000000000000d88 execute
         tinyBasic.s:3020   .text.basic:00000000000006c6 let_var
         tinyBasic.s:3025   .text.basic:00000000000006d2 let_array
         tinyBasic.s:2271   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1685   .text:0000000000000da2 end_of_line
         tinyBasic.s:1689   .text:0000000000000dac next_line
         tinyBasic.s:1736   .text:0000000000000e2c tok_jmp
         tinyBasic.s:1737   .text:0000000000000e2c $d
         tinyBasic.s:1751   .text:0000000000000e6c $t
         tinyBasic.s:1766   .text:0000000000000e6c expect
         tinyBasic.s:1785   .text:0000000000000e88 func_args
         tinyBasic.s:1805   .text:0000000000000eb4 arg_list
         tinyBasic.s:1963   .text:0000000000001054 expression
         tinyBasic.s:1839   .text:0000000000000ef4 factor
         tinyBasic.s:2071   .text:0000000000001140 get_array_element
         tinyBasic.s:2109   .text:0000000000001168 get_var
         tinyBasic.s:1912   .text:0000000000000fd8 term
         tinyBasic.s:2005   .text:00000000000010bc relation
         tinyBasic.s:2052   .text:0000000000001136 relop_jmp
         tinyBasic.s:2024   .text:0000000000001106 rel_idx0
         tinyBasic.s:2025   .text:0000000000001106 rel_eq
         tinyBasic.s:2042   .text:000000000000111c rel_false
         tinyBasic.s:2028   .text:000000000000110a rel_lt
         tinyBasic.s:2031   .text:000000000000110e rel_le
         tinyBasic.s:2034   .text:0000000000001112 rel_gt
         tinyBasic.s:2037   .text:0000000000001116 rel_ge
         tinyBasic.s:2040   .text:000000000000111a rel_diff
         tinyBasic.s:2053   .text:0000000000001136 $d
         tinyBasic.s:2091   .text:0000000000001154 set_array_element
         tinyBasic.s:2127   .text:0000000000001178 set_var
         tinyBasic.s:4160   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2163   .rodata:0000000000000050 $d
         tinyBasic.s:2176   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2175   *ABS*:0000000000000000 link
         tinyBasic.s:2263   .rodata.dictionary:00000000000005f4 LINK
         tinyBasic.s:2177   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2258   .rodata.dictionary:00000000000005e8 first_link
         tinyBasic.s:2305   .text.basic:0000000000000000 abs
         tinyBasic.s:2327   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2342   .text.basic:0000000000000054 ascii
         tinyBasic.s:2367   .text.basic:000000000000009c awu
         tinyBasic.s:2407   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2429   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2454   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2494   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2478   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2517   .text.basic:00000000000001e4 char
         tinyBasic.s:2535   .text.basic:0000000000000204 data_line
         tinyBasic.s:2640   .text.basic:00000000000002fc dec_base
         tinyBasic.s:3628   .text.basic:0000000000000d08 directory
         tinyBasic.s:2649   .text.basic:0000000000000304 do_loop
         tinyBasic.s:4109   .text.basic:0000000000001210 drop
         tinyBasic.s:2664   .text.basic:000000000000030c dump
         tinyBasic.s:2714   .text.basic:00000000000003b8 cmd_end
         tinyBasic.s:2742   .text.basic:00000000000003f8 erase
         tinyBasic.s:2722   .text.basic:00000000000003c0 flash
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:2753   .text.basic:000000000000040c for
         tinyBasic.s:3668   .text.basic:0000000000000dc0 forget
         tinyBasic.s:2833   .text.basic:00000000000004c8 gosub
         tinyBasic.s:2867   .text.basic:0000000000000524 goto
         tinyBasic.s:2888   .text.basic:0000000000000564 hex_base
         tinyBasic.s:2897   .text.basic:000000000000056c if
         tinyBasic.s:3171   .text.basic:000000000000088c inp
         tinyBasic.s:2916   .text.basic:0000000000000584 input_var
         tinyBasic.s:2984   .text.basic:000000000000067c invert
         tinyBasic.s:2997   .text.basic:000000000000069c key
         tinyBasic.s:3013   .text.basic:00000000000006b0 let
         tinyBasic.s:3056   .text.basic:000000000000073c list
         tinyBasic.s:3697   .text.basic:0000000000000e0c load
         tinyBasic.s:3107   .text.basic:00000000000007ec log2
         tinyBasic.s:3122   .text.basic:0000000000000810 lshift
         tinyBasic.s:3136   .text.basic:0000000000000830 new
         tinyBasic.s:2798   .text.basic:0000000000000470 next
         tinyBasic.s:3145   .text.basic:0000000000000850 func_not
         tinyBasic.s:3157   .text.basic:0000000000000868 bit_or
         tinyBasic.s:3195   .text.basic:00000000000008e4 out
         tinyBasic.s:3220   .text.basic:0000000000000948 pad_ref
         tinyBasic.s:3231   .text.basic:0000000000000954 pause
         tinyBasic.s:3259   .text.basic:0000000000000970 pin_mode
         tinyBasic.s:3324   .text.basic:0000000000000a3c peek8
         tinyBasic.s:3337   .text.basic:0000000000000a58 peek16
         tinyBasic.s:3350   .text.basic:0000000000000a74 peek32
         tinyBasic.s:4122   .text.basic:000000000000122c pick
         tinyBasic.s:3364   .text.basic:0000000000000a90 poke8
         tinyBasic.s:3376   .text.basic:0000000000000aa8 poke16
         tinyBasic.s:3388   .text.basic:0000000000000ac0 poke32
         tinyBasic.s:4100   .text.basic:0000000000001204 fn_pop
         tinyBasic.s:3402   .text.basic:0000000000000ad8 print
         tinyBasic.s:4092   .text.basic:00000000000011f8 cmd_push
         tinyBasic.s:3469   .text.basic:0000000000000bc0 qkey
         tinyBasic.s:2565   .text.basic:0000000000000258 read
         tinyBasic.s:2607   .text.basic:00000000000002b8 restore
         tinyBasic.s:2854   .text.basic:000000000000050c return
         tinyBasic.s:3481   .text.basic:0000000000000bdc random
         tinyBasic.s:3504   .text.basic:0000000000000c20 rshift
         tinyBasic.s:3517   .text.basic:0000000000000c40 run
         tinyBasic.s:3750   .text.basic:0000000000000e9c save
         tinyBasic.s:3831   .text.basic:0000000000000fd8 size
         tinyBasic.s:3844   .text.basic:0000000000000fe8 sleep
         tinyBasic.s:3858   .text.basic:0000000000001008 spc
         tinyBasic.s:2784   .text.basic:0000000000000458 step
         tinyBasic.s:3884   .text.basic:0000000000001038 stop
         tinyBasic.s:4137   .text.basic:0000000000001254 store
         tinyBasic.s:3906   .text.basic:000000000000107c tab
         tinyBasic.s:2908   .text.basic:0000000000000580 then
         tinyBasic.s:3918   .text.basic:000000000000109c get_ticks
         tinyBasic.s:3927   .text.basic:00000000000010a4 set_timer
         tinyBasic.s:3939   .text.basic:00000000000010b8 timeout
         tinyBasic.s:2771   .text.basic:0000000000000440 to
         tinyBasic.s:3968   .text.basic:00000000000010e4 trace
         tinyBasic.s:3984   .text.basic:0000000000001100 ubound
         tinyBasic.s:3996   .text.basic:0000000000001114 uflash
         tinyBasic.s:4007   .text.basic:000000000000111c until
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:4022   .text.basic:000000000000113c wait
         tinyBasic.s:4047   .text.basic:0000000000001170 words
         tinyBasic.s:4074   .text.basic:00000000000011d4 bit_xor
         tinyBasic.s:2305   .text.basic:0000000000000000 $t
         tinyBasic.s:2317   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2320   .text.basic:000000000000002c analog_read
         tinyBasic.s:2359   .text.basic:0000000000000098 autorun
         tinyBasic.s:2584   .text.basic:0000000000000290 seek_next
         tinyBasic.s:2629   .text.basic:00000000000002ee no_data_line
         tinyBasic.s:2625   .text.basic:00000000000002e8 try_next_line
         tinyBasic.s:2688   .text.basic:0000000000000358 print_dump_header
         tinyBasic.s:2746   .text.basic:0000000000000408 user_space
         tinyBasic.s:2746   .text.basic:0000000000000408 $d
         tinyBasic.s:4151   .rodata.user:0000000000000000 user
         tinyBasic.s:2753   .text.basic:000000000000040c $t
         tinyBasic.s:2977   .text.basic:0000000000000678 str_buffer
         tinyBasic.s:2976   .text.basic:0000000000000674 input_buffer
         tinyBasic.s:2976   .text.basic:0000000000000674 $d
         tinyBasic.s:2984   .text.basic:000000000000067c $t
         tinyBasic.s:3101   .text.basic:00000000000007e8 out_buff
         tinyBasic.s:3101   .text.basic:00000000000007e8 $d
         tinyBasic.s:3107   .text.basic:00000000000007ec $t
         tinyBasic.s:3224   .text.basic:0000000000000950 pad_adr
         tinyBasic.s:3224   .text.basic:0000000000000950 $d
         tinyBasic.s:3231   .text.basic:0000000000000954 $t
         tinyBasic.s:3457   .text.basic:0000000000000ba6 unget_exit
         tinyBasic.s:3459   .text.basic:0000000000000bae print_exit
         tinyBasic.s:3616   .text.basic:0000000000000d04 fs_addr
         tinyBasic.s:3591   .text.basic:0000000000000cc0 search_file
         tinyBasic.s:3595   .text.basic:0000000000000cc8 cmp_loop
         tinyBasic.s:3616   .text.basic:0000000000000d04 $d
         tinyBasic.s:3628   .text.basic:0000000000000d08 $t
         tinyBasic.s:3651   .text.basic:0000000000000d80 no_more_file
         tinyBasic.s:3661   .text.basic:0000000000000db8 fcount
         tinyBasic.s:3661   .text.basic:0000000000000db8 $d
         tinyBasic.s:3823   .text.basic:0000000000000fc4 fsize
         tinyBasic.s:3824   .text.basic:0000000000000fd0 data_bytes
         tinyBasic.s:3768   .text.basic:0000000000000ee4 new_file
         tinyBasic.s:3823   .text.basic:0000000000000fc4 $d
         tinyBasic.s:3831   .text.basic:0000000000000fd6 $t
         tinyBasic.s:3866   .text.basic:0000000000001028 spi_read
         tinyBasic.s:3869   .text.basic:000000000000102c spi_enable
         tinyBasic.s:3872   .text.basic:0000000000001030 spi_select
         tinyBasic.s:3875   .text.basic:0000000000001034 spi_write
         tinyBasic.s:3952   .text.basic:00000000000010cc tone
         tinyBasic.s:4150   .rodata.user:0000000000000000 $d
         tinyBasic.s:4149   .text.basic:000000000000127a $d
         tinyBasic.s:4160   .text.basic:000000000000127c $d
         tinyBasic.s:4160   .text:0000000000001188 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:267    .text:00000000000001e5 $d
         tinyBasic.s:267    .text:00000000000001e6 $t
         tinyBasic.s:648    .text:000000000000051b $d
         tinyBasic.s:1503   .text:0000000000000c55 $d
         tinyBasic.s:1503   .text:0000000000000c56 $t
         tinyBasic.s:1598   .text:0000000000000cfb $d
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:1598   .text:0000000000000cfc $t
         tinyBasic.s:2071   .text:000000000000113d $d
         tinyBasic.s:2071   .text:000000000000113e $t
         tinyBasic.s:3668   .text.basic:0000000000000dbf $d
         tinyBasic.s:3668   .text.basic:0000000000000dc0 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
flash_store
erase_page
uart_getc
tabulation
uart_qkey
page_align
unlock
hword_write
