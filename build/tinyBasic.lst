ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//   constantes related to Arduino 
  35              	//   API mapping 
  36              	//-------------------------------------
  37              	  .equ INP,0
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ OUTP,1 
  39              	
  40              	//--------------------------------------
  41              	//       token attribute
  42              	//--------------------------------------
  43              	// bits 4:5 identify token group 
  44              	// 0x0n -> miscelinous 
  45              	// 0x1n -> +|- operators 
  46              	// 0x2n -> *|/|% operators
  47              	// 0x3n -> relational operators 
  48              	  .equ TK_NONE,0       // not a token 
  49              	  .equ TK_COLON,1      // command separator ':' 
  50              	  .equ TK_QSTR,2     // quoted string  
  51              	  .equ TK_CHAR,3       // ASCII character 
  52              	  .equ TK_VAR,4      // variable index 
  53              	  .equ TK_ARRAY,5     // array variable '@' 
  54              	  .equ TK_LPAREN,6     // left parenthesis '('
  55              	  .equ TK_RPAREN,7     // right parenthesis ')'
  56              	  .equ TK_COMMA,8     // item separator ',' 
  57              	  .equ TK_SEMIC,9     // semi-colon  
  58              	  .equ TK_SHARP,0xa     // print colon width '#' 
  59              	  .equ TK_CMD,0xb      // BASIC command   
  60              	  .equ TK_IFUNC,0xc    // BASIC integer function
  61              	  .equ TK_CFUNC,0xd    // BASIC character function
  62              	  .equ TK_CONST,0xe    // BASIC constant 
  63              	  .equ TK_INTGR,0xf    // 32 bits integer 
  64              	  .equ TK_PLUS,0x10    // addition operator '+'
  65              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  66              	  .equ TK_MULT,0x20    // multiplication operator '*'
  67              	  .equ TK_DIV,0x21     // division operator '/'
  68              	  .equ TK_MOD,0x22     // modulo operator '%'
  69              	
  70              	// don't change these token values 
  71              	// values chosen to be used as a mask.
  72              	// bit 7   1 for dictionary words else 0 
  73              	// bits 6  always 0 
  74              	// bits 5:4 identify group 
  75              	// bits 3:0 token identifier inside group  
  76              	  .equ TK_GT,0x31      // relation operator '>'
  77              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  78              	  .equ TK_GE,0x33      // relation operator '>='
  79              	  .equ TK_LT,0x34      // relation operator '<'
  80              	  .equ TK_LE,0x36      // relation operator '<='
  81              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  82              	// token groups 
  83              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  84              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  85              	  .equ TK_GRP_ADD,0x10  // additive operators
  86              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  87              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  88              	  .equ CMD_END,2 
  89              	
  90              	//--------------------------------------
  91              	//   error codes 
  92              	//--------------------------------------
  93              	  .equ ERR_NONE,0
  94              	  .equ ERR_MEM_FULL,1 
ARM GAS  tinyBasic.s 			page 8


  95              	  .equ ERR_SYNTAX,2
  96              	  .equ ERR_MATH_OVF,3
  97              	  .equ ERR_DIV0,4 
  98              	  .equ ERR_NO_LINE,5
  99              	  .equ ERR_RUN_ONLY,6
 100              	  .equ ERR_CMD_ONLY,7
 101              	  .equ ERR_DUPLICATE,8
 102              	  .equ ERR_NOT_FILE,9
 103              	  .equ ERR_BAD_VALUE,10
 104              	  .equ ERR_NO_ACCESS,11
 105              	  .equ ERR_NO_DATA,12 
 106              	  .equ ERR_NO_PROG,13
 107              	  .equ ERR_NO_FSPACE,14
 108              	  .equ ERR_BUF_FULL,15
 109              	  .equ ERR_CANT_PROG,16
 110              	  
 111              	
 112              	//--------------------------------------
 113              	//   assembler flags 
 114              	//-------------------------------------
 115              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 116              	
 117              	.equ CELL_SIZE,4 
 118              	
 119              	
 120              	//-------------------------------
 121              	//  macros used to help debugging
 122              	//-------------------------------
 123              	  .equ DEBUG,0
 124              	
 125              	    UPP .req r4  // base address system variables 
 126              	    VADR .req r5  // address FOR loop variable 
 127              	    LIMIT .req r6   // LOOP limit 
 128              	    INCR  .req  r7  // LOOP increment 
 129              	    T1  .req r8     // temporary register 
 130              	    T2  .req r9     // temporary register 
 131              	    IN  .req r10    //  index in text line or token list 
 132              	    BPTR .req r11   //  buffer address or BASIC line address 
 133              	    DP   .req r12   //  parameter stack pointer 
 134              	
 135              	/***************************
 136              	  SYSTEM variables offset 
 137              	  from UPP  
 138              	***************************/ 
 139              	
 140              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 141              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 142              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 143              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 144              	  .equ DATA,DATAPTR+4 // index to next data item 
 145              	  .equ DATALEN, DATA+4 // length of data line 
 146              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 147              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 148              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 149              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 150              	  .equ FSPTR,SEED+4 //  pointer used by file system
 151              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
ARM GAS  tinyBasic.s 			page 9


 152              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 153              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 154              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 155              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 156              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 157              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 158              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 159              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 160              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 161              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 162              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 163              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 164              	  .equ TRACE_LEVEL,ARRAY_ADR+4
 165              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 166              	
 167              	/* flags used by BASIC interpreter */ 
 168              		.equ FRUN,(1<<0) // programm running
 169              		.equ FTRAP,(1<<1) // inside trap handler 
 170              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 171              		.equ FSTOP,(1<<3) // program stopped  
 172              		.equ FBREAK,(1<<4) // break point flag 
 173              		.equ FCOMP,(1<<5)  // compiling flags 
 174              		.equ FAUTORUN,(1<<6) // auto start program running 
 175              	
 176              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 177              	  
 178              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 179              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 180              	
 181              	/***********************************************
 182              	*       MACROS
 183              	***********************************************/
 184              		.macro _CALL fn /* low level routine call */ 
 185              	 	PUSH {LR}
 186              		BL \fn  
 187              	  POP {LR}
 188              		.endm
 189              		
 190              		.macro	_RET /* return from subroutine */
 191              		BX	LR
 192              		.endm
 193              	
 194              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 195              		MOV \REG, #\LITERAL&0xffff
 196              		MOVT \REG, #\LITERAL>>16
 197              		.endm
 198              	
 199              	// local function header 
 200              	  .macro _FUNC label 
 201              	  .p2align 2 
 202              	  .type \label, %function  
 203              	\label:
 204              	  .endm 
 205              	
 206              	// global function header 
 207              	  .macro _GBL_FUNC label 
 208              	  .global \label 
ARM GAS  tinyBasic.s 			page 10


 209              	  _FUNC \label 
 210              	  .endm 
 211              	
 212              	
 213              	/********************************
 214              	    dictionary structure
 215              	------------------------------
 216              	 format:
 217              	   link:    
 218              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 219              	   cmd_name: 31 characters max 
 220              	   cmd_index: 2 bytes 
 221              	**********************************/
 222              		.macro _dict_entry tok_type,name,cmd_idx 
 223              	  .word LINK 
 224              	  .word \cmd_idx 
 225              		.word \tok_type  	
 226              		.equ LINK,.
 227              		.asciz "\name"
 228              		.p2align 2 
 229              		.endm 
 230              	
 231              	  // pop parameter in register 
 232              	  .macro _POP  reg 
 233              	  ldmia  DP!,{\reg}
 234              	  .endm 
 235              	
 236              	  // push register on parameter stack 
 237              	  .macro _PUSH reg 
 238              	  stmdb DP!,{\reg}
 239              	  .endm 
 240              	
 241              	  // drop n parameters on dstack 
 242              	  .macro _DROP n
 243              	  mov r0,#4*\n
 244              	  add DP,R0 
 245              	  .endm 
 246              	
 247              	  // back to previous token in list 
 248              	  .macro _UNGET_TOKEN 
 249              	  ldr IN,[UPP,#IN_SAVED]
 250              	  ldr BPTR,[UPP,#BASICPTR] 
 251              	  .endm 
 252              	
 253              	 // create a text data 
 254              	 .macro _TEXT label,text
 255              	 \label: .asciz "\text"
 256              	 .p2align 2 
 257              	 .endm 
 258              	
 259              	// command line only 
 260              	  .macro _CLO 
 261              	  ldr r0,[UPP,#FLAGS]
 262              	  tst r0,#FRUN 
 263              	  beq 1f 
 264              	  mov r0,#ERR_CMD_ONLY
 265              	  b tb_error
ARM GAS  tinyBasic.s 			page 11


 266              	1: 
 267              	  .endm 
 268              	
 269              	// run time only 
 270              	  .macro _RTO 
 271              	  ldr r0,[UPP,#FLAGS]
 272              	  tst r0,#FRUN 
 273              	  bne 1f 
 274              	  mov r0,#ERR_CMD_ONLY
 275              	  b tb_error
 276              	1:
 277              	  .endm 
 278              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, ABS_IDX+1  //   adc on 
  27              	    .equ ADCREAD_IDX,ADCON_IDX+1  // read adc 
  28              	    .equ AND_IDX,ADCREAD_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1  // 
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ DATA_IDX,CHAR_IDX+1 // 
  39              	    .equ DATALN_IDX,DATA_IDX+1 // 
  40              	    .equ DEC_IDX,DATALN_IDX+1 // 
  41              	    .equ DIR_IDX,DEC_IDX+1 // 
  42              	    .equ DO_IDX,DIR_IDX+1 // 
  43              	    .equ DUMP_IDX, DO_IDX+1 
ARM GAS  tinyBasic.s 			page 12


  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ FOR_IDX, END_IDX+1 // 
  46              	    .equ FORGET_IDX, FOR_IDX+1 // 
  47              	    .equ GOSUB_IDX, FORGET_IDX+1 // 
  48              	    .equ GOTO_IDX, GOSUB_IDX+1
  49              	    .equ HEX_IDX, GOTO_IDX+1 // 
  50              	    .equ IF_IDX, HEX_IDX+1 // 
  51              	    .equ INP_IDX,IF_IDX+1
  52              	    .equ INPUT_IDX, INP_IDX+1 // 
  53              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  54              	    .equ KEY_IDX, INVERT_IDX+1 // 
  55              	    .equ LET_IDX, KEY_IDX+1 // 
  56              	    .equ LIST_IDX, LET_IDX+1 // 
  57              	    .equ LOAD_IDX, LIST_IDX+1 // 
  58              	    .equ LOG2_IDX, LOAD_IDX+1 // 
  59              	    .equ LSHIFT_IDX, LOG2_IDX+1 // 
  60              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  61              	    .equ NEXT_IDX, NEW_IDX+1 // 
  62              	    .equ NOT_IDX, NEXT_IDX+1 // 
  63              	    .equ OR_IDX, NOT_IDX+1 // 
  64              	    .equ OUT_IDX,OR_IDX+1
  65              	    .equ PAD_IDX, OUT_IDX+1 // 
  66              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  67              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  68              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  69              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  70              	    .equ PEEK32_IDX, PEEK16_IDX+1
  71              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  72              	    .equ POKE16_IDX,POKE8_IDX+1 
  73              	    .equ POKE32_IDX,POKE16_IDX+1
  74              	    .equ PRT_IDX, POKE32_IDX+1 //  //  PRINT commande index 
  75              	    .equ QKEY_IDX, PRT_IDX+1 // 
  76              	    .equ READ_IDX, QKEY_IDX+1 // 
  77              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  78              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  79              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  80              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  81              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  82              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  83              	    .equ SAVE_IDX, RUN_IDX+1 // 
  84              	    .equ SIZE_IDX, SAVE_IDX+1 // 
  85              	    .equ SLEEP_IDX, SIZE_IDX+1 // 
  86              	    .equ SPC_IDX,SLEEP_IDX+1 //
  87              	    .equ SPIRD_IDX, SPC_IDX+1 // 
  88              	    .equ SPIEN_IDX, SPIRD_IDX+1 // 
  89              	    .equ SPISEL_IDX, SPIEN_IDX+1 // 
  90              	    .equ SPIWR_IDX, SPISEL_IDX+1 // 
  91              	    .equ STEP_IDX, SPIWR_IDX+1 // 
  92              	    .equ STOP_IDX, STEP_IDX+1 // 
  93              	    .equ TAB_IDX, STOP_IDX+1 //
  94              	    .equ THEN_IDX,TAB_IDX+1
  95              	    .equ TICKS_IDX, THEN_IDX+1 // 
  96              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  97              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
  98              	    .equ TO_IDX, TMROUT_IDX+1 // 
  99              	    .equ TONE_IDX, TO_IDX+1 // 
 100              	    .equ TRACE_IDX,TONE_IDX+1
ARM GAS  tinyBasic.s 			page 13


 101              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 102              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 103              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 104              	    .equ USR_IDX, UNTIL_IDX+1 // 
 105              	    .equ WAIT_IDX, USR_IDX+1 // 
 106              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 107              	    .equ WRITE_IDX, WORDS_IDX+1 // 
 108              	    .equ XOR_IDX, WRITE_IDX+1 //  
 109              	    .equ XTRMT_IDX, XOR_IDX+1 // 
 110              	    .equ XRCV_IDX, XTRMT_IDX+1 // 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
ARM GAS  tinyBasic.s 			page 14


  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
ARM GAS  tinyBasic.s 			page 15


 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
ARM GAS  tinyBasic.s 			page 16


 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
ARM GAS  tinyBasic.s 			page 17


 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c DFF83C00 	    ldr r0,data_stack 
 228 0150 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 015a E046     	    mov T1,DP 
 230 015c 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0164 C845     	1:  cmp T1,T2 
 232 0166 09D5     	    bpl 9f 
 233 0168 58F8040B 	    ldr r0,[T1],#4 
 234 016c 4FF01001 	    mov r1,#16 
 235 0170 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 017a F3E7     	    b 1b 
 237 017c 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0186 BDE80303 	    pop {r0,r1,T1,T2}
 239 018a 7047     	    _RET 
 240              	data_stack:
 241 018c 90010000 	  .word .+4 
 242 0190 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0199 0000BF   	    _FUNC show_main_stack
 248 019c 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 01a0 DFF8E40F 	    ldr r0,=main_stack 
 250 01a4 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01ae 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b6 0DF10408 	    add T1,sp,#4
 253 01ba C845     	1:  cmp T1,T2
 254 01bc 09D5     	    bpl 9f 
 255 01be 58F8040B 	    ldr r0,[T1],#4 
 256 01c2 4FF01001 	    mov r1,#16 
 257 01c6 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01d0 F3E7     	    b 1b
 259 01d2 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01dc BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01e0 7047     	    _RET  
 262 01e2 72737461 	main_stack: .asciz "rstack: " 
ARM GAS  tinyBasic.s 			page 18


 262      636B3A20 
 262      00
 263              	
 264              	/************************************
 265              	    show execution trace 
 266              	************************************/
 267 01eb 00       	    _FUNC show_trace
 268 01ec 04B4     	    push {r2}
 269 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 270 01f2 BAB1     	    cbz r2,9f  
 271 01f4 00B5FFF7 	    _CALL cr 
 271      FEFF5DF8 
 271      04EB
 272 01fe 00B5FFF7 	    _CALL show_line_nbr
 272      90FF5DF8 
 272      04EB
 273 0208 022A     	    cmp r2,#2 
 274 020a 0BD4     	    bmi 9f 
 275 020c 00B5FFF7 	    _CALL show_data_stack 
 275      9BFF5DF8 
 275      04EB
 276 0216 032A     	    cmp r2,#3 
 277 0218 04D4     	    bmi 9f 
 278 021a 00B5FFF7 	    _CALL show_main_stack 
 278      BEFF5DF8 
 278      04EB
 279 0224 04BC     	9:  pop {r2}
 280 0226 7047     	    _RET 
 281              	
 282              	
 283              	/************************************
 284              	    prt_chars 
 285              	    print n ascii character starting 
 286              	    at address 
 287              	    input: 
 288              	      r0    address 
 289              	      r1    count 
 290              	    output:
 291              	      r0    address + count
 292              	    use:
 293              	      r2    address 
 294              	***********************************/
 295              	    _FUNC prt_chars 
 296 0228 04B4     	    push {r2}
 297 022a 0246     	    mov r2,r0
 298 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 299 0230 2028     	    cmp r0,#SPACE 
 300 0232 01D5     	    bpl 2f 
 301 0234 4FF05F00 	    mov r0,#'_' 
 302 0238 00B5FFF7 	2:  _CALL uart_putc
 302      FEFF5DF8 
 302      04EB
 303 0242 0139     	    subs r1,#1 
 304 0244 F2D1     	    bne 1b 
 305 0246 1046     	    mov r0,r2 
 306 0248 04BC     	    pop {r2}
 307 024a 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 19


 308              	
 309              	/***************************************
 310              	    search_lineno 
 311              	    localize BASIC line from its number 
 312              	    input:
 313              	      r0   line# 
 314              	    output: 
 315              	      r0   adr where found || adr new to be inserted 
 316              	      r1   0 found || !0 not found  
 317              	    use:
 318              	      r0   scan address 
 319              	      r1   temp   
 320              	      r2   address end of text
 321              	      r3   target line#
 322              	****************************************/    
 323              	    _GBL_FUNC search_lineno
 324 024c 0CB4     	    push {r2,r3} 
 325 024e 0346     	    mov r3,r0 // target 
 326 0250 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 327 0252 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 328 0254 9042     	1:  cmp r0,r2 
 329 0256 05D0     	    beq  8f
 330 0258 0188     	    ldrh r1,[r0]
 331 025a C91A     	    subs r1,r3 
 332 025c 04D5     	    bpl 9f 
 333 025e 8178     	    ldrb r1,[r0,#2]
 334 0260 0844     	    add r0,r1
 335 0262 F7E7     	    b 1b 
 336 0264 4FF0FF31 	8:  mov r1,#-1 
 337 0268 0CBC     	9:  pop {r2,r3}
 338 026a 7047     	    _RET 
 339              	
 340              	
 341              	/********************************************
 342              	    delete_line 
 343              	    delete BASIC line at addr 
 344              	    input:
 345              	      r0    address line to delete 
 346              	    output:
 347              	      r0    same as input 
 348              	    use: 
 349              	      r1    dest adr
 350              	      r2    bytes to move 
 351              	      T1    length line to delete 
 352              	      T2    txtend 
 353              	********************************************/
 354              	    _FUNC delete_line 
 355 026c 2DE90703 	    push {r0,r1,r2,T1,T2}
 356 0270 0146     	    mov r1,r0 // dest 
 357 0272 91F80280 	    ldrb T1,[r1,#2] // line length 
 358 0276 4044     	    add r0,T1  // src
 359 0278 D4F83490 	    ldr T2,[UPP,#TXTEND]
 360 027c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 361 0280 00B5FFF7 	    _CALL cmove
 361      FEFF5DF8 
 361      04EB
 362 028a A9EB0809 	    sub T2,T1 // txtend-count 
ARM GAS  tinyBasic.s 			page 20


 363 028e C4F83490 	    str T2,[UPP,#TXTEND] 
 364 0292 BDE80703 	    pop {r0,r1,r2,T1,T2}
 365 0296 7047     	    _RET 
 366              	
 367              	/******************************************
 368              	    create_gap 
 369              	    create a gap in text area to insert new line 
 370              	    input:
 371              	      r0    adr 
 372              	      r1    length 
 373              	    output:
 374              	      r0    adr 
 375              	    use:
 376              	      T1    length 
 377              	      T2    txtend 
 378              	************************************************/
 379              	    _FUNC create_gap 
 380 0298 2DE90503 	    push {r0,r2,T1,T2}
 381 029c 8846     	    mov T1,R1
 382 029e 0144     	    add r1,r0  // dest 
 383 02a0 D4F83490 	    ldr T2,[UPP,#TXTEND]
 384 02a4 A9EB0002 	    sub r2,T2,r0 
 385 02a8 00B5FFF7 	    _CALL cmove
 385      FEFF5DF8 
 385      04EB
 386 02b2 C144     	    add T2,T1 
 387 02b4 C4F83490 	    str T2,[UPP,#TXTEND]
 388 02b8 BDE80503 	    pop {r0,r2,T1,T2}
 389 02bc 7047     	    _RET 
 390              	
 391              	/************************************************
 392              	    insert_line 
 393              	    insert BASIC line in text area 
 394              	    first search if line with same number exist 
 395              	    replace if so. 
 396              	    input:
 397              	      r0    *buffer to insert 
 398              	    output:
 399              	      none 
 400              	    use: 
 401              	      T1     *buffer
 402              	      T2     temp  
 403              	************************************************/ 
 404 02be 00BF     	    _FUNC insert_line 
 405 02c0 2DE90203 	    push {r1,T1,T2}
 406 02c4 8046     	    mov T1,r0 
 407 02c6 B8F80000 	    ldrh r0,[T1]
 408 02ca 00B5FFF7 	    _CALL search_lineno 
 408      FEFF5DF8 
 408      04EB
 409 02d4 49B9     	    cbnz  r1, 1f // line# doesn't exist
 410              	// already exist 
 411 02d6 00B5FFF7 	    _CALL delete_line // delete old one 
 411      C8FF5DF8 
 411      04EB
 412 02e0 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 413 02e4 B9F1040F 	    cmp T2,#4 // empty line length==4  
ARM GAS  tinyBasic.s 			page 21


 414 02e8 0ED0     	    beq 9f
 415              	1: //insert new line 
 416 02ea 98F80210 	    ldrb r1,[T1,#2]
 417 02ee 00B5FFF7 	    _CALL create_gap 
 417      D2FF5DF8 
 417      04EB
 418 02f8 0146     	    mov r1,r0
 419 02fa 4046     	    mov r0,T1 
 420 02fc 8278     	    ldrb r2,[r0,#2]
 421 02fe 00B5FFF7 	    _CALL cmove 
 421      FEFF5DF8 
 421      04EB
 422 0308 BDE80203 	9:  pop {r1,T1,T2}
 423 030c 7047     	    _RET 
 424              	
 425              	/*********************************
 426              	    compile 
 427              	    tokenize source line save it 
 428              	    in pas buffer.
 429              	    compiled line format: 
 430              	      line_no  2 bytes {0...32767}
 431              	      count    1 byte  
 432              	      tokens   variable length 
 433              	  input:
 434              	     r0   *text buffer 
 435              	     r1   *text length   
 436              	  output:
 437              	    r0    0 stored | -1 immediate 
 438              	  use:
 439              	    r3    tib index   
 440              	    T1    tib
 441              	    T2    pad
 442              	***********************************/
 443 030e 00BF     	    _FUNC compile
 444 0310 8046     	    mov T1, r0  // source text buffer 
 445 0312 6160     	    str r1,[UPP,#COUNT] // save line length 
 446 0314 DFF8D499 	    ldr T2,pad // tokens buffer
 447 0318 83EA0303 	    eor r3,r3 // source index  
 448 031c 206C     	    ldr r0,[UPP,#FLAGS]
 449 031e 40F02000 	    orr r0,#FCOMP
 450 0322 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 451 0324 80EA0000 	    eor r0,r0     
 452 0328 29F8020B 	    strh r0,[T2],#2   // line no 
 453 032c 09F8010B 	    strb r0,[T2],#1 // length 
 454 0330 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 455 0332 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 456 0336 00B500F0 	    _CALL parse_int 
 456      06F95DF8 
 456      04EB
 457 0340 07D0     	    beq 2f 
 458              	// this is a line number     
 459 0342 0129     	    cmp r1,#1 
 460 0344 02D5     	    bpl 1f 
 461 0346 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 462 034a 31E3     	    b tb_error  
 463              	1:  // write line # to pad 
 464 034c 29F8031C 	    strh r1,[T2,#-3]
ARM GAS  tinyBasic.s 			page 22


 465 0350 2360     	    str r3,[UPP,#IN_SAVED]
 466              	2:  // check for pad full 
 467 0352 C145     	    cmp T2,T1
 468 0354 02DB     	    blt 3f 
 469 0356 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 470 035a 29E3     	    b tb_error 
 471 035c 00B500F0 	3:  _CALL comp_token 
 471      27F85DF8 
 471      04EB
 472 0366 0028     	    cmp r0,#TK_NONE 
 473 0368 01D0     	    beq 4f 
 474 036a 2360     	    str r3,[UPP,#IN_SAVED]
 475 036c F1E7     	    b 2b 
 476              	4: // compilation completed 
 477 036e DFF87C39 	    ldr r3,pad 
 478 0372 A9EB0300 	    sub r0,T2,r3 // line length 
 479 0376 9870     	    strb r0,[r3,#2]
 480 0378 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 481 037a 1888     	    ldrh r0,[r3] // line number 
 482 037c 70B1     	    cbz r0,8f  
 483              	// insert line in text buffer 
 484 037e 206C     	    ldr r0,[UPP,#FLAGS]
 485 0380 10F0080F 	    tst r0,#FSTOP
 486 0384 02D0     	    beq 7f 
 487 0386 4FF01000 	    mov r0,#ERR_CANT_PROG 
 488 038a 11E3     	    b tb_error 
 489 038c 1846     	7:  mov r0,r3 
 490 038e 00B5FFF7 	    _CALL insert_line 
 490      96FF5DF8 
 490      04EB
 491 0398 4040     	    eors r0,r0 
 492 039a 08E0     	    b 9f 
 493 039c 9B46     	8:  mov BPTR,r3 // *token_list 
 494 039e 4FF0030A 	    mov IN,#3
 495 03a2 206C     	    ldr r0,[UPP,#FLAGS]
 496 03a4 A0F12000 	    sub r0,#FCOMP
 497 03a8 2064     	    str r0,[UPP,#FLAGS]
 498 03aa 5FF0FF30 	    movs r0,#-1 
 499 03ae 7047     	9:  _RET 
 500              	
 501              	/*********************************************
 502              	    compile next token from source 
 503              	    input: 
 504              	      r3 		tib index  
 505              	      T1    tib adr
 506              	      T2    insert point in pad  
 507              	    output:
 508              	      r0     token attribute 
 509              	      r1 		token value
 510              	      r3     tib index updated    
 511              	      T2     updated 
 512              	      use:
 513              	**********************************************/
 514              	    .macro _case c, next  
 515              	    cmp r0,#\c 
 516              	    bne \next
 517              	    .endm 
ARM GAS  tinyBasic.s 			page 23


 518              	
 519              	    _FUNC comp_token 
 520 03b0 40B4     	    push {r6}
 521 03b2 18F80300 	    ldrb r0,[T1,r3]
 522 03b6 0040     	    ands r0,r0 
 523 03b8 70D0     	    beq store_r0  // reached end of text  
 524 03ba 4FF02000 	    mov r0,#SPACE 
 525 03be 00B500F0 	    _CALL skip  // skip spaces 
 525      12F95DF8 
 525      04EB
 526 03c8 18F80300 	    ldrb r0,[T1,r3]
 527 03cc 0040     	    ands r0,r0 
 528 03ce 65D0     	    beq store_r0  // reached end of text 
 529 03d0 03F10103 	    add r3,#1 
 530 03d4 00B500F0 	    _CALL upper 
 530      13F95DF8 
 530      04EB
 531 03de 00B500F0 	    _CALL is_special
 531      7CF85DF8 
 531      04EB
 532 03e8 DFF8A06D 	    ldr r6,=token_ofs
 533 03ec D6E811F0 	    tbh [r6,r1] 
 534              	tok_idx0:     
 535              	//  not special char.  
 536 03f0 57E0     	    b try_number 
 537              	// single char token with no value 
 538              	single: 
 539 03f2 DFF89C6D 	    ldr r6,=tok_single
 540 03f6 705C     	    ldrb r0,[r6,r1] 
 541 03f8 50E0     	    b store_r0  
 542              	lt:
 543 03fa 4FF03400 	    mov r0,#TK_LT
 544 03fe 18F80310 	    ldrb r1,[T1,r3]
 545 0402 3E29     	    cmp r1,#'>' 
 546 0404 06D0     	    beq 1f
 547 0406 0AE0     	    b 2f 
 548              	gt:
 549 0408 4FF03100 	    mov r0,#TK_GT 
 550 040c 18F80310 	    ldrb r1,[T1,r3]
 551 0410 3C29     	    cmp r1,#'<'
 552 0412 04D1     	    bne 2f  
 553 0414 03F10103 	1:  add r3,#1
 554 0418 4FF03500 	    mov r0,#TK_NE  
 555 041c 3EE0     	    b store_r0
 556 041e 3D29     	2:  cmp r1,#'=' 
 557 0420 3CD1     	    bne store_r0  
 558 0422 03F10103 	    add r3,#1
 559 0426 00F10200 	    add r0,#2
 560 042a 37E0     	    b store_r0       
 561              	bkslash:
 562 042c 18F80310 	    ldrb r1,[T1,r3]
 563 0430 03F10103 	    add r3,#1
 564 0434 4FF00300 	    mov r0,#TK_CHAR 
 565 0438 09F8010B 	    strb r0,[T2],#1
 566 043c 09F8011B 	    strb r1,[T2],#1
 567 0440 49E0     	    b token_exit 
 568              	prt_cmd: 
ARM GAS  tinyBasic.s 			page 24


 569 0442 4FF00B00 	    mov r0,#TK_CMD 
 570 0446 4FF03101 	    mov r1,#PRT_IDX
 571 044a 09F8010B 	    strb r0,[T2],#1
 572 044e 09F8011B 	    strb r1,[T2],#1
 573 0452 40E0     	    b token_exit 
 574              	quote:
 575 0454 4FF00200 	    mov r0,#TK_QSTR 
 576 0458 09F8010B 	    strb r0,[T2],#1
 577 045c 00B500F0 	    _CALL parse_quote
 577      8FF85DF8 
 577      04EB
 578 0466 36E0     	    b token_exit
 579              	tick: 
 580              	// copy comment in pad 
 581 0468 4FF00B00 	    mov r0,#TK_CMD 
 582 046c 4FF03401 	    mov r1,#REM_IDX 
 583 0470 09F8010B 	    strb r0,[T2],#1 
 584 0474 09F8011B 	    strb r1,[T2],#1
 585 0478 08EB0300 	    add r0,T1,r3 
 586 047c 4946     	    mov r1,T2 
 587 047e 00B5FFF7 	    _CALL strcpy 
 587      FEFF5DF8 
 587      04EB
 588 0488 00B5FFF7 	    _CALL strlen 
 588      FEFF5DF8 
 588      04EB
 589 0492 8144     	    add T2,r0
 590 0494 09F10109 	    add T2,#1
 591 0498 6368     	    ldr r3,[UPP,#COUNT]
 592 049a 1CE0     	    b token_exit
 593              	store_r0: 
 594 049c 09F8010B 	    strb r0,[T2],#1
 595 04a0 19E0     	    b token_exit 
 596              	try_number:
 597 04a2 A3F10103 	    sub r3,#1
 598 04a6 00B500F0 	    _CALL parse_int  
 598      4EF85DF8 
 598      04EB
 599 04b0 04D0     	    beq 1f 
 600 04b2 09F8010B 	    strb r0,[T2],#1 
 601 04b6 49F8041B 	    str r1,[T2],#4
 602 04ba 0CE0     	    b token_exit 
 603 04bc 00B500F0 	1:  _CALL parse_keyword 
 603      23F95DF8 
 603      04EB
 604 04c6 0428     	    cmp r0,#TK_VAR 
 605 04c8 01D0     	    beq 2f 
 606 04ca 3429     	    cmp r1,#REM_IDX 
 607 04cc CCD0     	    beq tick
 608 04ce 09F8010B 	2:  strb r0,[T2],#1 
 609 04d2 09F8011B 	    strb r1,[T2],#1
 610              	token_exit:
 611 04d6 40BC     	    pop {r6}
 612 04d8 7047     	    _RET 
 613              	
 614              	/****************************
 615              	    is_special  
ARM GAS  tinyBasic.s 			page 25


 616              	    check for non alphanum
 617              	    input:
 618              	      r0    character to scan 
 619              	    output:
 620              	      r0    character 
 621              	      r1    0 || index 
 622              	    use: 
 623              	      r1    scan index 
 624              	      r2    temp 
 625              	      r3    char_list 
 626              	*****************************/
 627 04da 00BF     	    _FUNC is_special 
 628 04dc 0CB4     	    push {r2,r3}
 629 04de 4FF00101 	    mov r1,#1
 630 04e2 DFF8B03C 	    ldr r3,=char_list 
 631 04e6 5A5C     	1:  ldrb r2,[r3,r1]
 632 04e8 22B1     	    cbz r2,8f 
 633 04ea 8242     	    cmp r2,r0 
 634 04ec 04D0     	    beq 9f 
 635 04ee 01F10101 	    add r1,#1 
 636 04f2 F8E7     	    b 1b
 637 04f4 81EA0101 	8:  eor r1,r1     
 638 04f8 0CBC     	9:  pop {r2,r3}
 639 04fa 7047     	    _RET 
 640              	
 641              	char_list:
 642 04fc 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 642      28293A23 
 642      2D2B2A2F 
 642      253D3C3E 
 642      5C3F2722 
 643              	
 644              	tok_single:
 645 0511 00080905 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 645      060701
 646 0518 0A111020 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 646      212232
 647              	  
 648 051f 00       	  .p2align 2
 649              	token_ofs:
 650 0520 0000     	  .hword  0 // not found
 651              	  // TK_COMMA...TK_EQUAL , 13 
 652 0522 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 652      01000100 
 653 052a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 653      01000100 
 654 0532 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 654      01000100 
 655 053a 0100     	  .hword  (single-tok_idx0)/2     
 656              	  // '<','>'
 657 053c 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 658              	  // '\'
 659 0540 1E00     	  .hword  (bkslash-tok_idx0)/2
 660              	  // '?' 
 661 0542 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 662              	  // "'"  
 663 0544 3C00     	  .hword  (tick-tok_idx0)/2 
ARM GAS  tinyBasic.s 			page 26


 664              	  // '"' quote 
 665 0546 3200     	  .hword (quote-tok_idx0)/2
 666              	
 667              	  .p2align 2
 668              	
 669              	/****************************
 670              	    parse_int 
 671              	    parse an integer from text
 672              	    if not valid integer 
 673              	    r1 return *buffer else 
 674              	    *buffer is incremented after integer 
 675              	  input:
 676              	    r0   *buffer 
 677              	  output:
 678              	    r0   TK_INTGR|TK_NONE
 679              	    r1   int|0   
 680              	  use:
 681              	    r3   tib index updated     
 682              	*****************************/
 683              	    _FUNC parse_int 
 684 0548 4FF00A01 	    mov r1,#10 // default base 
 685 054c 18F80300 	    ldrb r0,[T1,r3]
 686 0550 2428     	    cmp r0,'$' 
 687 0552 02D1     	    bne 2f 
 688 0554 4FF01001 	    mov r1,#16 // hexadecimal number 
 689 0558 03E0     	    b 3f  
 690 055a 2628     	2:  cmp r0,#'&' 
 691 055c 03D1     	    bne 4f
 692 055e 4FF00201 	    mov r1,#2 //binary number  
 693 0562 03F10103 	3:  add r3,#1
 694 0566 03EB0800 	4:  add r0,r3,T1 
 695 056a 00B5FFF7 	    _CALL atoi 
 695      FEFF5DF8 
 695      04EB
 696 0574 10B1     	    cbz r0,9f
 697 0576 0344     	    add r3,r0
 698 0578 4FF00F00 	    mov r0,#TK_INTGR
 699 057c 0040     	9:  ands r0,r0   
 700 057e 7047     	    _RET 
 701              	
 702              	/*********************************************
 703              	    parse_quote 
 704              	    parse quoted string 
 705              	    input: 
 706              	      r3 		tib index  
 707              	      T1    tib adr
 708              	      T2    insert point in pad  
 709              	    output:
 710              	      r0     token attribute 
 711              	      r1 		*str 
 712              	      r3     tib index updated    
 713              	      T2     updated 
 714              	      use:
 715              	*********************************************/
 716              	    _FUNC parse_quote
 717 0580 4DF8049D 	    push {T2} 
 718 0584 18F80300 	1:  ldrb r0,[T1,r3]
ARM GAS  tinyBasic.s 			page 27


 719 0588 03F10103 	    add r3,#1 
 720 058c 2228     	    cmp r0,#'"'
 721 058e 09D0     	    beq 9f 
 722 0590 5C28     	    cmp r0,#'\\'
 723 0592 04D1     	    bne 2f 
 724 0594 00B500F0 	    _CALL get_escaped_char 
 724      0DF85DF8 
 724      04EB
 725 059e 09F8010B 	2:  strb r0,[T2],#1
 726 05a2 EFE7     	    b 1b 
 727 05a4 80EA0000 	9:  eor  r0,r0
 728 05a8 09F8010B 	    strb r0,[T2],#1
 729 05ac 4FF00200 	    mov r0,#TK_QSTR
 730 05b0 02BC     	    pop {r1}
 731 05b2 7047     	    _RET 
 732              	
 733              	/**********************************************
 734              	    get_escaped_char 
 735              	    convert "\c" in quoted string 
 736              	    input:
 737              	      r0 
 738              	      r3   index 
 739              	      T1   tib 
 740              	    output:
 741              	      r0   replacement char
 742              	      r3   updated 
 743              	    use:
 744              	      r1   *table 
 745              	      r2   temp 
 746              	**********************************************/
 747              	    _FUNC get_escaped_char 
 748 05b4 06B4     	    push {r1,r2}
 749 05b6 18F80300 	    ldrb r0,[T1,r3]
 750 05ba 03F10103 	    add r3,#1
 751 05be 2228     	    cmp r0,#'"' 
 752 05c0 0BD0     	    beq 9f 
 753 05c2 DFF8D41B 	1:  ldr r1,=escaped 
 754 05c6 11F8012B 	2:  ldrb r2,[r1],#1
 755 05ca 12B1     	    cbz r2,6f 
 756 05cc 8242     	    cmp r2,r0 
 757 05ce 02D0     	    beq 7f 
 758 05d0 F9E7     	    b 2b
 759 05d2 A0F10702 	6:  sub r2,r0,#7     
 760 05d6 02F10700 	7:  add r0,r2,#7
 761 05da 06BC     	9:  pop {r1,r2}   
 762 05dc 7047     	    _RET
 763              	
 764 05de 6162746E 	escaped: .asciz "abtnvfr"
 764      76667200 
 765              	
 766              	/*********************************************
 767              	   skip character in TIB 
 768              	   input:
 769              	      r0    character to skip 
 770              	      r3    tib index 
 771              	      T1    tib adr
 772              	    output: 
ARM GAS  tinyBasic.s 			page 28


 773              	      r3    updated
 774              	    use:
 775              	      r1     
 776              	**********************************************/   
 777 05e6 00BF     	    _FUNC skip
 778 05e8 02B4     	    push {r1} 
 779 05ea 18F80310 	1:  ldrb r1,[T1,r3]
 780 05ee 8142     	    cmp r1,r0
 781 05f0 02D1     	    bne 2f
 782 05f2 03F10103 	    add r3,#1 
 783 05f6 F8E7     	    b 1b 
 784 05f8 2360     	2:  str r3,[UPP,#IN_SAVED]
 785 05fa 02BC     	    pop {r1}
 786 05fc 7047     	    _RET
 787              	
 788              	/********************************************
 789              	    upper
 790              	    convert character in upper case 
 791              	    input: 
 792              	      r0   character 
 793              	    output:
 794              	      r0   upper case character 
 795              	*********************************************/
 796 05fe 00BF     	    _FUNC upper 
 797 0600 6128     	    cmp r0,#'a' 
 798 0602 03DB     	    blt 9f 
 799 0604 7A28     	    cmp r0,#'z' 
 800 0606 01DC     	    bgt 9f 
 801 0608 00F05F00 	    and r0,#0x5f 
 802 060c 7047     	9:  _RET 
 803              	
 804              	/***************************************
 805              	   is_digit 
 806              	   check if char is decimal digit.
 807              	   convert to decimal digit.
 808              	   input:
 809              	      r0    char 
 810              	   output:
 811              	      r0    if !Z then converted digit 
 812              	      Z     0 true | 1 false  
 813              	***************************************/
 814 060e 00BF     	    _GBL_FUNC is_digit 
 815 0610 02B4     	    push {r1} 
 816 0612 81EA0101 	    eor r1,r1 
 817 0616 3028     	    cmp r0,#'0' 
 818 0618 05DB     	    blt 9f
 819 061a 3A28     	    cmp r0,'9'+1
 820 061c 03D5     	    bpl 9f 
 821 061e 4FF0FF31 	    mov r1,#-1
 822 0622 A0F13000 	    sub r0,#'0'  
 823              	9:   
 824 0626 0940     	    ands r1,r1
 825 0628 02BC     	    pop {r1} 
 826 062a 7047     	    _RET 
 827              	
 828              	/***************************************
 829              	    is_hex 
ARM GAS  tinyBasic.s 			page 29


 830              	    check for hexadecimal digit 
 831              	    convert to hex digit.
 832              	    input:
 833              	      r0    
 834              	    output:
 835              	      r0     if !Z then converted digit 
 836              	      Z      0 true | 1 false         
 837              	***************************************/
 838              	    _FUNC is_hex 
 839 062c 02B4     	    push {r1}
 840 062e 4FF0FF31 	    mov r1,#-1 
 841 0632 4128     	    cmp r0,#'A' 
 842 0634 01D4     	    bmi 1f 
 843 0636 A0F10700 	    sub r0,#7 
 844 063a A0F13000 	1:  sub r0,#'0'
 845 063e 01D4     	    bmi 2f 
 846 0640 1028     	    cmp r0,#16
 847 0642 01D4     	    bmi 9f 
 848 0644 81EA0101 	2:  eor r1,r1  
 849 0648 0940     	9:  ands r1,r1 
 850 064a 02BC     	    pop {r1}
 851 064c 7047     	    _RET 
 852              	
 853              	/***************************************
 854              	    is_bit 
 855              	    check if char is '0'|'1' 
 856              	    convert to binary digit. 
 857              	    input:
 858              	      r0    
 859              	    output:
 860              	      r0     if !Z then converted digit 
 861              	      Z      0 true | 1 false         
 862              	***************************************/
 863 064e 00BF     	    _FUNC is_bit
 864 0650 02B4     	    push  {r1}
 865 0652 4FF0FF31 	    mov r1,#-1 
 866 0656 A0F13000 	    sub r0,#'0' 
 867 065a 01D4     	    bmi 2f 
 868 065c 0229     	    cmp r1,#2
 869 065e 01D4     	    bmi 9f 
 870 0660 81EA0101 	2:  eor r1,r1 
 871 0664 0940     	9:  ands r1,r1 
 872 0666 02BC     	    pop {r1}
 873 0668 7047     	    _RET 
 874              	
 875              	/***************************************
 876              	    is_alpha 
 877              	    check if character is {a..z,A..Z} 
 878              	  input:
 879              	    r0   character 
 880              	  output: 
 881              	    r0    same character 
 882              	    Z    0 true | 1 false  
 883              	****************************************/
 884 066a 00BF     	    _FUNC is_alpha
 885 066c 02B4     	    push {r1} 
 886 066e 4FF0FF31 	    mov r1,#-1
ARM GAS  tinyBasic.s 			page 30


 887 0672 4128     	    cmp r0,#'A' 
 888 0674 05D4     	    bmi 8f 
 889 0676 5B28     	    cmp r0,#'Z'+1 
 890 0678 05D4     	    bmi 9f
 891 067a 6128     	    cmp r0,#'a' 
 892 067c 01D4     	    bmi 8f 
 893 067e 7B28     	    cmp r0,#'z'+1
 894 0680 01D4     	    bmi 9f  
 895 0682 81EA0101 	8:  eor r1,r1  
 896 0686 0940     	9:  ands r1,r1 
 897 0688 02BC     	    pop {r1}
 898 068a 7047     	    _RET 
 899              	
 900              	/***************************************
 901              	    is_num 
 902              	    check if character is {0..9} 
 903              	  input:
 904              	    r0   character 
 905              	  output: 
 906              	    r0    same character 
 907              	    Z    0 true | 1 false  
 908              	****************************************/
 909              	    _FUNC is_num 
 910 068c 02B4     	    push {r1} 
 911 068e 4FF0FF31 	    mov r1,#-1 
 912 0692 3028     	    cmp r0,#'0' 
 913 0694 01DB     	    blt 8f 
 914 0696 3A28     	    cmp r0,#'9'+1 
 915 0698 01D4     	    bmi 9f 
 916 069a 81EA0101 	8:  eor r1,r1  
 917 069e 0940     	9:  ands r1,r1 
 918 06a0 02BC     	    pop {r1}
 919 06a2 7047     	    _RET 
 920              	
 921              	/*****************************************
 922              	    is_alnum 
 923              	    check if character is alphanumeric 
 924              	    input:
 925              	      r0 
 926              	    output:
 927              	      r0     same 
 928              	      Z      1 false | 0 true 
 929              	*****************************************/
 930              	    _FUNC is_alnum 
 931 06a4 00B5FFF7 	    _CALL is_alpha 
 931      E1FF5DF8 
 931      04EB
 932 06ae 04D1     	    bne 9f 
 933 06b0 00B5FFF7 	    _CALL is_num 
 933      EBFF5DF8 
 933      04EB
 934 06ba 7047     	9:  _RET 
 935              	
 936              	/******************************************
 937              	    atoi 
 938              	    convert ascii to integer 
 939              	    input:
ARM GAS  tinyBasic.s 			page 31


 940              	      r0   *buffer 
 941              	      r1   base 
 942              	    output:
 943              	      r0   0 no integer found 
 944              	      r1   integer
 945              	    use:
 946              	      r2   base  
 947              	      T1   *buffer 
 948              	      T2   digit count  
 949              	******************************************/
 950              	    _GBL_FUNC atoi 
 951 06bc 2DE90403 	    push {r2,T1,T2}
 952 06c0 8046     	    mov T1,r0  // *buffer 
 953 06c2 0A46     	    mov r2,r1  // base  
 954 06c4 81EA0101 	    eor r1,r1  // converted integer 
 955 06c8 89EA0909 	    eor T2,T2  // digit count 
 956 06cc 18F8010B 	1:  ldrb r0,[T1],#1
 957 06d0 00B5FFF7 	    _CALL upper 
 957      95FF5DF8 
 957      04EB
 958 06da 3028     	    cmp r0,#'0'
 959 06dc 0FD4     	    bmi 8f
 960 06de 3A28     	    cmp r0,#'9'+1 
 961 06e0 03D4     	    bmi 2f 
 962 06e2 4128     	    cmp r0,#'A'
 963 06e4 0BD4     	    bmi 8f 
 964 06e6 A0F10700 	    sub r0,#7 
 965 06ea A0F13000 	2:  sub r0,#'0' 
 966 06ee 9042     	    cmp r0,r2
 967 06f0 05D5     	    bpl 8f  
 968 06f2 02FB01F1 	    mul r1,r2 
 969 06f6 0144     	    add r1,r0
 970 06f8 09F10109 	    add T2,#1
 971 06fc E6E7     	    b 1b 
 972 06fe 4846     	8:  mov r0,T2  
 973 0700 BDE80403 	    pop {r2,T1,T2}
 974 0704 7047     	    _RET 
 975              	
 976              	/*****************************************
 977              	    parse_keyword 
 978              	    parse work and ckeck if in dictionary 
 979              	    input:
 980              	      r0    first character 
 981              	      r3    tib index 
 982              	      t1    tib 
 983              	      t2    pad 
 984              	    output:
 985              	      r3    updated 
 986              	      t1    updated 
 987              	      t2    updated   
 988              	    use:
 989              	    
 990              	*****************************************/
 991 0706 00BF     	    _FUNC parse_keyword 
 992 0708 4DF8049D 	    push {T2}
 993 070c 18F80300 	    ldrb r0,[T1,r3]
 994 0710 03F10103 	    add r3,#1
ARM GAS  tinyBasic.s 			page 32


 995 0714 00B3     	    cbz r0,2f 
 996 0716 00B5FFF7 	    _CALL upper 
 996      72FF5DF8 
 996      04EB
 997 0720 00B5FFF7 	    _CALL is_alpha 
 997      A3FF5DF8 
 997      04EB
 998 072a 00F03D81 	    beq syntax_error 
 999 072e 09F8010B 	    strb r0,[T2],#1
 1000 0732 18F80300 	1:  ldrb r0,[T1,r3]
 1001 0736 03F10103 	    add r3,#1 
 1002 073a 68B1     	    cbz r0,2f 
 1003 073c 00B5FFF7 	    _CALL upper 
 1003      5FFF5DF8 
 1003      04EB
 1004 0746 00B5FFF7 	    _CALL is_alnum
 1004      ACFF5DF8 
 1004      04EB
 1005 0750 02D0     	    beq 2f 
 1006 0752 09F8010B 	    strb r0,[T2],#1
 1007 0756 ECE7     	    b 1b 
 1008 0758 A3F10103 	2:  sub r3,#1
 1009 075c 80EA0000 	    eor r0,r0
 1010 0760 89F80000 	    strb r0,[T2] 
 1011 0764 0098     	    ldr r0,[sp]
 1012 0766 4178     	    ldrb r1,[r0,#1] 
 1013 0768 29B9     	    cbnz r1,3f
 1014 076a 0178     	    ldrb r1,[r0]
 1015 076c A1F14101 	    sub r1,#'A'
 1016 0770 4FF00400 	    mov r0,#TK_VAR
 1017 0774 08E0     	    b 9f 
 1018 0776 DFF8241A 	3:  ldr r1,=kword_dict  
 1019 077a 00B500F0 	    _CALL search_dict 
 1019      D6F95DF8 
 1019      04EB
 1020 0784 00B9     	    cbnz r0,9f 
 1021 0786 0FE1     	    b syntax_error 
 1022 0788 5DF8049B 	9:  pop {T2}
 1023 078c 7047     	    _RET 
 1024              	
 1025              	
 1026              	/*******************
 1027              	    DECOMPILER 
 1028              	*******************/
 1029              	
 1030              	/********************************************
 1031              	    cmd_name 
 1032              	    search bytecode in dictionary and 
 1033              	    return its name 
 1034              	  input:
 1035              	    r0    keyword bytecode 
 1036              	  ouput:
 1037              	    r0    name string 
 1038              	  use:
 1039              	    T1    link 
 1040              	    T2    tmp 
 1041              	*********************************************/
ARM GAS  tinyBasic.s 			page 33


 1042 078e 00BF     	    _FUNC cmd_name 
 1043 0790 2DE90003 	    push {T1,T2}
 1044 0794 DFF8048A 	    ldr T1,=kword_dict 
 1045 0798 58F8089C 	1:  ldr T2,[T1,#-8]
 1046 079c 8145     	    cmp T2,r0 
 1047 079e 04D0     	    beq 2f 
 1048 07a0 58F80C8C 	    ldr T1,[T1,#-12]
 1049 07a4 B8F1000F 	    cmp T1,#0
 1050 07a8 F6D1     	    bne 1b  
 1051 07aa 4046     	2:  mov r0,T1 
 1052 07ac BDE80003 	    pop {T1,T2}
 1053 07b0 7047     	    _RET
 1054              	
 1055              	/*****************************
 1056              	  decompile_line 
 1057              	  detokenize BASIC line 
 1058              	  input:
 1059              	    r0  *token list 
 1060              	    r1  *output buffer 
 1061              	  output:
 1062              	    r0  *output buffer (.asciz) 
 1063              	  use:
 1064              	    T1  *output buffer
 1065              	    BPTR  *token list
 1066              	    IN  offset in token list  
 1067              	******************************/
 1068 07b2 00BF     	    _GBL_FUNC decompile_line
 1069 07b4 2DE90201 	    push {r1,T1} 
 1070 07b8 8346     	    mov BPTR,r0 
 1071 07ba 4FF0000A 	    mov IN,#0
 1072 07be 8846     	    mov T1,r1 
 1073 07c0 3BF80A00 	    ldrh r0,[BPTR,IN]
 1074 07c4 0AF1020A 	    add IN,#2 
 1075 07c8 4FF00A01 	    mov r1,#10 
 1076 07cc 00B5FFF7 	    _CALL itoa
 1076      FEFF5DF8 
 1076      04EB
 1077 07d6 4146     	    mov r1,T1
 1078 07d8 00B5FFF7 	    _CALL strcpy
 1078      FEFF5DF8 
 1078      04EB
 1079 07e2 4046     	    mov r0,T1 
 1080 07e4 00B5FFF7 	    _CALL strlen
 1080      FEFF5DF8 
 1080      04EB
 1081 07ee 8044     	    add T1,r0 
 1082 07f0 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1083 07f4 0AF1010A 	    add IN,#1 
 1084 07f8 6060     	    str r0,[UPP,#COUNT]
 1085              	decomp_loop:
 1086 07fa 00B500F0 	    _CALL next_token
 1086      CAFA5DF8 
 1086      04EB
 1087 0804 0028     	    cmp r0,#TK_NONE 
 1088 0806 00F09B80 	    beq 9f  
 1089 080a 0F28     	    cmp r0,#TK_INTGR 
 1090 080c 15D1     	    bne 1f 
ARM GAS  tinyBasic.s 			page 34


 1091 080e 0846     	    mov r0,r1 
 1092 0810 A169     	    ldr r1,[UPP,#BASE]
 1093 0812 00B5FFF7 	    _CALL itoa
 1093      FEFF5DF8 
 1093      04EB
 1094 081c 01B4     	    push {r0}
 1095 081e 4146     	    mov r1,T1 
 1096 0820 00B5FFF7 	    _CALL strcpy
 1096      FEFF5DF8 
 1096      04EB
 1097 082a 01BC     	    pop {r0} 
 1098 082c 00B5FFF7 	    _CALL strlen
 1098      FEFF5DF8 
 1098      04EB
 1099 0836 8044     	    add T1,r0 
 1100 0838 DFE7     	    b decomp_loop 
 1101 083a 0428     	1:  cmp r0,#TK_VAR 
 1102 083c 04D1     	    bne 2f 
 1103 083e 01F14100 	    add r0,r1,'A'
 1104 0842 08F8010B 	    strb r0,[T1],#1 
 1105 0846 D8E7     	    b decomp_loop 
 1106 0848 0328     	2:  cmp r0,#TK_CHAR 
 1107 084a 0AD1     	    bne 3f 
 1108 084c 4FF05C00 	    mov r0,#'\\'
 1109 0850 08F8010B 	    strb r0,[T1],#1
 1110 0854 08F8011B 	    strb r1,[T1],#1
 1111 0858 4FF02000 	    mov r0,#SPACE 
 1112 085c 08F8010B 	    strb r0,[T1],#1
 1113 0860 CBE7     	    b decomp_loop 
 1114 0862 0228     	3:  cmp r0,#TK_QSTR 
 1115 0864 17D1     	    bne 4f 
 1116 0866 4FF02200 	    mov r0,#'"'
 1117 086a 08F8010B 	    strb r0,[T1],#1 
 1118 086e 0846     	    mov r0,r1
 1119 0870 02B4     	    push {r1}
 1120 0872 4146     	    mov r1,T1  
 1121 0874 00B5FFF7 	    _CALL strcpy
 1121      FEFF5DF8 
 1121      04EB
 1122 087e 01BC     	    pop {r0}
 1123 0880 00B5FFF7 	    _CALL strlen 
 1123      FEFF5DF8 
 1123      04EB
 1124 088a 8044     	    add T1,r0 
 1125 088c 4FF02200 	    mov r0,#'"'
 1126 0890 08F8010B 	    strb r0,[T1],#1 
 1127 0894 B1E7     	    b decomp_loop
 1128 0896 0B28     	4:  cmp r0,#TK_CMD
 1129 0898 3AD4     	    bmi 5f 
 1130 089a 0F28     	    cmp r0,#TK_INTGR 
 1131 089c 38D5     	    bpl 5f
 1132 089e 4FF02000 	    mov r0,#SPACE 
 1133 08a2 08F8010B 	    strb r0,[T1],#1  
 1134 08a6 0846     	    mov r0,r1
 1135 08a8 3128     	    cmp r0,#PRT_IDX 
 1136 08aa 04D1     	    bne 1f  
 1137 08ac 4FF03F00 	    mov r0,#'?'
ARM GAS  tinyBasic.s 			page 35


 1138 08b0 08F8010B 	    strb r0,[T1],#1 
 1139 08b4 27E0     	    b 3f 
 1140 08b6 3428     	1:  cmp r0,#REM_IDX
 1141 08b8 12D1     	    bne 1f
 1142 08ba 4FF02700 	    mov r0,#'\''
 1143 08be 08F8010B 	    strb r0,[T1],#1 
 1144 08c2 0BEB0A00 	    add r0,BPTR,IN
 1145 08c6 4146     	    mov r1,T1   
 1146 08c8 00B5FFF7 	    _CALL strcpy
 1146      FEFF5DF8 
 1146      04EB
 1147 08d2 80EA0000 	    eor r0,r0 
 1148 08d6 88F80000 	    strb r0,[T1]  
 1149 08da D4F804A0 	    ldr IN,[UPP,#COUNT]
 1150 08de 2FE0     	    b 9f 
 1151 08e0 00B5FFF7 	1:  _CALL cmd_name
 1151      55FF5DF8 
 1151      04EB
 1152 08ea 01B4     	2:  push {r0}
 1153 08ec 4146     	    mov r1,T1 
 1154 08ee 00B5FFF7 	    _CALL strcpy 
 1154      FEFF5DF8 
 1154      04EB
 1155 08f8 01BC     	    pop {r0}
 1156 08fa 00B5FFF7 	    _CALL strlen 
 1156      FEFF5DF8 
 1156      04EB
 1157 0904 8044     	    add T1,r0 
 1158 0906 4FF02000 	3:  mov r0,#SPACE 
 1159 090a 08F8010B 	    strb r0,[T1],#1 
 1160 090e 74E7     	    b decomp_loop
 1161 0910 01B4     	5:  push {r0}
 1162 0912 DFF88C18 	    ldr r1,=single_char 
 1163 0916 085C     	    ldrb r0,[r1,r0]
 1164 0918 02BC     	    pop {r1}
 1165 091a 10B1     	    cbz r0,6f 
 1166 091c 08F8010B 	    strb r0,[T1],#1 
 1167 0920 6BE7     	    b decomp_loop
 1168 0922 3329     	6:  cmp r1,#TK_GE 
 1169 0924 02D1     	    bne 7f 
 1170 0926 DFF87C08 	    ldr r0,=ge_str
 1171 092a DEE7     	    b 2b 
 1172 092c 3629     	7:  cmp r1,#TK_LE 
 1173 092e 02D1     	    bne 8f
 1174 0930 DFF87408 	    ldr r0,=le_str
 1175 0934 D9E7     	    b 2b
 1176 0936 3529     	8:  cmp r1,#TK_NE 
 1177 0938 02D1     	    bne 9f 
 1178 093a DFF87008 	    ldr r0,=ne_str 
 1179 093e D4E7     	    b 2b 
 1180 0940 80EA0000 	9:  eor r0,r0 
 1181 0944 88F80000 	    strb r0,[T1]
 1182 0948 BDE80201 	    pop {r1,T1}
 1183 094c 0846     	    mov r0,r1 
 1184 094e 7047     	    _RET 
 1185              	
 1186 0950 3E3D00   	ge_str: .asciz ">="
ARM GAS  tinyBasic.s 			page 36


 1187 0953 3C3D00   	le_str: .asciz "<="
 1188 0956 3C3E00   	ne_str: .asciz "<>"
 1189              	
 1190              	single_char:
 1191 0959 003A0000 	  .byte 0, ':', 0, 0, 0, '@', '(', ')', ',' , ';', '#' // 0..a
 1191      00402829 
 1191      2C3B23
 1192 0964 00000000 	  .space 5
 1192      00
 1193 0969 2B2D     	  .byte '+', '-'
 1194 096b 00000000 	  .space 14
 1194      00000000 
 1194      00000000 
 1194      0000
 1195 0979 2A2F25   	  .byte '*', '/', '%'
 1196 097c 00000000 	  .space 14
 1196      00000000 
 1196      00000000 
 1196      0000
 1197 098a 3E3D003C 	  .byte '>', '=', 0, '<', 0, 0
 1197      0000
 1198              	
 1199              	
 1200              	/**********************************
 1201              	  modulo 
 1202              	  compute r0 mod r1
 1203              	  input:
 1204              	    r0   dividend
 1205              	    r1   divisor 
 1206              	  output:
 1207              	    r0   TK_INTGR 
 1208              	    r1   r0 mod r1 
 1209              	*********************************/
 1210              	    _GBL_FUNC modulo 
 1211 0990 01B4     	    push {r0}
 1212 0992 B0FBF1F0 	    udiv r0,r1 
 1213 0996 01FB00F0 	    mul  r0,r1 
 1214 099a 02BC     	    pop {r1}
 1215 099c A1EB0001 	    sub r1,r0
 1216 09a0 4FF00F00 	    mov r0,#TK_INTGR
 1217 09a4 7047     	    _RET 
 1218              	
 1219              	/**********************************
 1220              	      BASIC commands 
 1221              	**********************************/
 1222              	
 1223              	/*********************************
 1224              	    syntax_error 
 1225              	    display syntax error message and 
 1226              	    abort program 
 1227              	  input:
 1228              	    none  
 1229              	  output: 
 1230              	    none 
 1231              	  use:
 1232              	*********************************/
 1233 09a6 00BF     	    _FUNC syntax_error 
ARM GAS  tinyBasic.s 			page 37


 1234 09a8 4FF00200 	    mov r0,#ERR_SYNTAX
 1235 09ac 00E0     	    b tb_error 
 1236              	
 1237              	/*********************************
 1238              	    tb_error 
 1239              	    display BASIC error and 
 1240              	    abort program. 
 1241              	  input:
 1242              	    r0    error code   
 1243              	  output: 
 1244              	    none 
 1245              	  use:
 1246              	    r1    temp 
 1247              	*********************************/
 1248 09ae 00BF     	    _FUNC tb_error 
 1249 09b0 216C     	    ldr r1,[UPP,#FLAGS]
 1250 09b2 11F0200F 	    tst r1,#FCOMP
 1251 09b6 43D1     	    bne compile_error
 1252              	rt_error:
 1253 09b8 5246     	    mov r2,IN 
 1254 09ba 01B4     	    push {r0}
 1255 09bc DFF8F007 	    ldr r0,=rt_error_msg 
 1256 09c0 00B5FFF7 	    _CALL uart_puts 
 1256      FEFF5DF8 
 1256      04EB
 1257 09ca 01BC     	    pop {r0}
 1258 09cc DFF8E417 	    ldr r1,=err_msg  
 1259 09d0 4FEA8000 	    lsl r0,#2 
 1260 09d4 0858     	    ldr r0,[r1,r0]
 1261 09d6 00B5FFF7 	    _CALL uart_puts
 1261      FEFF5DF8 
 1261      04EB
 1262              	// decompile and print faulty line      
 1263 09e0 5846     	    mov r0,BPTR
 1264 09e2 5246     	    mov r2,IN  
 1265 09e4 DFF80413 	    ldr r1,pad 
 1266 09e8 00B5FFF7 	    _CALL decompile_line
 1266      FEFF5DF8 
 1266      04EB
 1267 09f2 00B5FFF7 	    _CALL uart_puts 
 1267      FEFF5DF8 
 1267      04EB
 1268 09fc 00B5FFF7 	    _CALL cr 
 1268      FEFF5DF8 
 1268      04EB
 1269              	// print error offset on line      
 1270 0a06 DFF8B007 	    ldr r0,=token_at_msg 
 1271 0a0a 00B5FFF7 	    _CALL uart_puts 
 1271      FEFF5DF8 
 1271      04EB
 1272 0a14 1046     	    mov r0,r2 
 1273 0a16 4FF01001 	    mov r1,#16 
 1274 0a1a 00B5FFF7 	    _CALL print_int
 1274      FEFF5DF8 
 1274      04EB
 1275 0a24 00B5FFF7 	    _CALL cr
 1275      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 38


 1275      04EB
 1276              	// dump tokenize line 
 1277 0a2e 5846     	    mov r0,BPTR
 1278 0a30 8278     	    ldrb r2,[r0,#2]
 1279 0a32 00B500F0 	    _CALL dump01 
 1279      99F95DF8 
 1279      04EB
 1280 0a3c FFF7FEBF 	    b warm_start 
 1281              	compile_error:
 1282 0a40 DFF87017 	    ldr r1,=err_msg 
 1283 0a44 4FEA8000 	    lsl r0,#2 
 1284 0a48 0858     	    ldr r0,[r1,r0]
 1285 0a4a 00B5FFF7 	    _CALL uart_puts
 1285      FEFF5DF8 
 1285      04EB
 1286 0a54 A068     	    ldr r0,[UPP,#BASICPTR]
 1287 0a56 00B5FFF7 	    _CALL uart_puts
 1287      FEFF5DF8 
 1287      04EB
 1288 0a60 00B5FFF7 	    _CALL cr
 1288      FEFF5DF8 
 1288      04EB
 1289 0a6a 2068     	    ldr r0,[UPP,#IN_SAVED]
 1290 0a6c 00B5FFF7 	    _CALL spaces 
 1290      FEFF5DF8 
 1290      04EB
 1291 0a76 4FF05E00 	    mov r0,#'^' 
 1292 0a7a 00B5FFF7 	    _CALL uart_putc
 1292      FEFF5DF8 
 1292      04EB
 1293 0a84 00B5FFF7 	    _CALL cr
 1293      FEFF5DF8 
 1293      04EB
 1294 0a8e FFF7FEBF 	    b  warm_start  
 1295              	    
 1296 0a92 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1296      74696D65 
 1296      20657272 
 1296      6F723A20 
 1296      00
 1297 0aa3 746F6B65 	token_at_msg: .asciz "token offset: "
 1297      6E206F66 
 1297      66736574 
 1297      3A2000
 1298              	
 1299              	
 1300              	err_msg:
 1301 0ab2 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1301      00000000 
 1301      0D000000 
 1301      1B000000 
 1301      34000000 
 1302 0aca 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1302      6F000000 
 1302      89000000 
 1302      9A000000 
 1302      AB000000 
ARM GAS  tinyBasic.s 			page 39


 1303 0ade B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1303      EA000000 
 1303      FA000000 
 1303      0E010000 
 1303      21010000 
 1304 0af2 2E010000 	   .word err_cant_prog 
 1305              	
 1306              	    .section .rodata.tb_error 
 1307              	
 1308 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1308      72792066 
 1308      756C6C0A 
 1308      00
 1309 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1309      61782065 
 1309      72726F72 
 1309      0A00
 1310 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1310      206F7065 
 1310      72617469 
 1310      6F6E206F 
 1310      76657266 
 1311 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1311      73696F6E 
 1311      20627920 
 1311      300A00
 1312 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1312      6C696420 
 1312      6C696E65 
 1312      206E756D 
 1312      6265722E 
 1313 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1313      74696D65 
 1313      206F6E6C 
 1313      79207573 
 1313      6167652E 
 1314 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1314      616E6420 
 1314      6C696E65 
 1314      206F6E6C 
 1314      79207573 
 1315 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1315      69636174 
 1315      65206E61 
 1315      6D652E0A 
 1315      00
 1316 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1316      206E6F74 
 1316      20666F75 
 1316      6E642E0A 
 1316      00
 1317 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1317      76616C75 
 1317      652E0A00 
 1318 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1318      20696E20 
 1318      65787465 
ARM GAS  tinyBasic.s 			page 40


 1318      6E646564 
 1318      206D656D 
 1319 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1319      61746120 
 1319      666F756E 
 1319      642E0A00 
 1320 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1320      726F6772 
 1320      616D2069 
 1320      6E205241 
 1320      4D210A00 
 1321 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1321      20737973 
 1321      74656D20 
 1321      66756C6C 
 1321      2E0A00
 1322 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1322      65722066 
 1322      756C6C0A 
 1322      00
 1323 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1323      74206D6F 
 1323      64696679 
 1323      2070726F 
 1323      6772616D 
 1324              	
 1325 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1325      2074696D 
 1325      65206572 
 1325      726F722C 
 1325      2000
 1326 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1326      70696C65 
 1326      20657272 
 1326      6F722C20 
 1326      00
 1327 018d 6C617374 	tk_id: .asciz "last token id: "
 1327      20746F6B 
 1327      656E2069 
 1327      643A2000 
 1328              	
 1329              	
 1330              	    .section  .text , "ax", %progbits 
 1331              	
 1332              	/*********************************
 1333              	   skip_line 
 1334              	   data and remark line are skipped
 1335              	   by the interpreter 
 1336              	***********************************/
 1337 0af6 00BF     	    _FUNC skip_line 
 1338 0af8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1339 0afc 7047     	    _RET 
 1340              	
 1341              	
 1342              	/*********************************
 1343              	   BASIC: BTGL adr, mask   
 1344              	   toggle bits [adr]=[adr]^mask  
ARM GAS  tinyBasic.s 			page 41


 1345              	   input:
 1346              	     r0    adr 
 1347              	     r1    mask 
 1348              	    output;
 1349              	      none 
 1350              	    use:
 1351              	      T1   temp
 1352              	      T2   temp  
 1353              	*******************************/     
 1354 0afe 00BF     	    _FUNC BTGL 
 1355              	
 1356 0b00 7047     	    _RET 
 1357              	
 1358              	/***************************************
 1359              	   kword_cmp
 1360              	   compare keyword to dict entry
 1361              	  input:
 1362              	    r0  keyword 
 1363              	    r1  dict entry 
 1364              	    r2  character count 
 1365              	  output:
 1366              	    r0  0 not same | -1 same 
 1367              	  use:
 1368              	    r6   result  
 1369              	    T1   char 1
 1370              	    T2   char 2
 1371              	**************************************/   
 1372 0b02 00BF     	    _FUNC kword_cmp 
 1373 0b04 2DE94003 	    push {r6,T1,T2}
 1374 0b08 4FF0FF36 	    mov r6,#-1 
 1375 0b0c 4AB1     	1:  cbz r2,9f       
 1376 0b0e 10F8018B 	    ldrb T1,[r0],#1
 1377 0b12 11F8019B 	    ldrb T2,[r1],#1
 1378 0b16 A2F10102 	    sub r2,#1
 1379 0b1a C845     	    cmp T1,T2
 1380 0b1c F6D0     	    beq 1b 
 1381 0b1e 86EA0606 	    eor r6,r6  
 1382 0b22 3046     	9:  mov r0,r6
 1383 0b24 BDE84003 	    pop {r6,T1,T2}
 1384 0b28 7047     	    _RET 
 1385              	
 1386              	/***********************************************
 1387              	    search_dict 
 1388              	    search keyword in dictionary
 1389              	   input:
 1390              	  	 r0   keyword 
 1391              	     r1		dictionary first name field address  
 1392              	   output:
 1393              	     r0 		token attribute 
 1394              	     r1		  cmd_index if r0!=TK_NONE  
 1395              	   use:
 1396              	     r3   length keyword 
 1397              	     T1   keyword
 1398              	     T2   link  
 1399              	**********************************************/
 1400 0b2a 00BF     	  _FUNC search_dict
 1401 0b2c 2DE90C03 	  push {r2,r3,T1,T2}
ARM GAS  tinyBasic.s 			page 42


 1402 0b30 8046     	  mov T1,r0 
 1403 0b32 00B5FFF7 	  _CALL strlen 
 1403      FEFF5DF8 
 1403      04EB
 1404 0b3c 0346     	  mov r3,r0  
 1405              	1:  
 1406 0b3e 8946     	   mov T2,r1  // keep for linking   
 1407 0b40 0878     	   ldrb r0,[r1] 
 1408 0b42 78B1     	   cbz r0,9f // null byte, end of dictionary
 1409 0b44 4046     	   mov r0,T1
 1410 0b46 1A46     	   mov r2,r3   
 1411 0b48 00B5FFF7 	   _CALL kword_cmp  
 1411      DBFF5DF8 
 1411      04EB
 1412 0b52 18B9     	   cbnz r0,2f 
 1413 0b54 4946     	   mov r1,T2
 1414 0b56 51F80C1C 	   ldr r1,[r1,#-12]
 1415 0b5a F0E7     	   b 1b   
 1416              	2: // found
 1417 0b5c 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1418 0b60 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1419 0b64 BDE80C03 	9: pop {r2,r3,T1,T2}
 1420 0b68 7047     	   _RET 
 1421              	
 1422              	
 1423              	/**************************
 1424              	    INTERPRETER 
 1425              	*************************/
 1426              	
 1427              	/*********************************
 1428              	   cold_start 
 1429              	   initialize BASIC interpreter 
 1430              	   never leave 
 1431              	   input:
 1432              	     none 
 1433              	   output:
 1434              	    none 
 1435              	*********************************/
 1436              	  .type cold_start, %function 
 1437              	  .global cold_start 
 1438              	cold_start: 
 1439 0b6a 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1439      C2F20004 
 1440 0b72 DFF85400 	    ldr r0,src_addr 
 1441 0b76 DFF85410 	    ldr r1,dest_addr
 1442 0b7a 0968     	    ldr r1,[r1] 
 1443 0b7c 0C44     	    add UPP,r1 // system variables base address   
 1444              	// clear RAM
 1445 0b7e 2046     	    mov r0,UPP  
 1446 0b80 DFF86411 	    ldr r1,tib 
 1447 0b84 82EA0202 	    eor r2,r2 
 1448 0b88 40F8042B 	1:  str r2,[r0],#4 
 1449 0b8c 8842     	    cmp r0,r1 
 1450 0b8e FBD4     	    bmi 1b 
 1451              	//copy initialized system variables to ram 
 1452 0b90 DFF83400 	    ldr r0,src_addr 
 1453 0b94 2146     	    mov r1,UPP 
ARM GAS  tinyBasic.s 			page 43


 1454 0b96 DFF83820 	    ldr r2,sysvar_size
 1455 0b9a 00B5FFF7 	    _CALL cmove
 1455      FEFF5DF8 
 1455      04EB
 1456 0ba4 00B500F0 	    _CALL prt_version
 1456      15F85DF8 
 1456      04EB
 1457 0bae 00B500F0 	    _CALL clear_basic 
 1457      62F85DF8 
 1457      04EB
 1458 0bb8 00B5FFF7 	    _CALL search_free 
 1458      FEFF5DF8 
 1458      04EB
 1459 0bc2 E062     	    str r0,[UPP,#FSFREE] 
 1460 0bc4 FFF7FEBF 	    b warm_start    
 1461              	src_addr:
 1462 0bc8 00000000 	  .word uzero
 1463              	dest_addr:
 1464 0bcc 00000000 	  .word vectors_size
 1465 0bd0 D0000000 	sysvar_size: .word ulast-uzero 
 1466              	
 1467              	/************************************
 1468              	    print firmware version 
 1469              	    input: 
 1470              	      none 
 1471              	    output:
 1472              	      none 
 1473              	    use:
 1474              	      r0 
 1475              	***********************************/
 1476              	    _FUNC prt_version 
 1477 0bd4 DFF8E405 	    ldr r0,=version_msg 
 1478 0bd8 00B5FFF7 	    _CALL uart_puts
 1478      FEFF5DF8 
 1478      04EB
 1479 0be2 9FF87400 	    ldrb r0,version 
 1480 0be6 4FEA1010 	    lsr r0,#4 
 1481 0bea 00F13000 	    add r0,#'0' 
 1482 0bee 3A28     	    cmp r0,#'9'+1 
 1483 0bf0 01D4     	    bmi 1f 
 1484 0bf2 00F10700 	    add r0,#7 
 1485              	  1:
 1486 0bf6 00B5FFF7 	    _CALL uart_putc 
 1486      FEFF5DF8 
 1486      04EB
 1487 0c00 4FF02E00 	    mov r0,#'. 
 1488 0c04 00B5FFF7 	    _CALL uart_putc 
 1488      FEFF5DF8 
 1488      04EB
 1489 0c0e 9FF84800 	    ldrb r0,version 
 1490 0c12 00F00F00 	    and r0,#15 
 1491 0c16 00F13000 	    add r0,'0' 
 1492 0c1a 3A28     	    cmp r0,#'9'+1 
 1493 0c1c 01D4     	    bmi 1f 
 1494 0c1e 00F10700 	    add r0,#7
 1495              	  1: 
 1496 0c22 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 44


 1496      FEFF5DF8 
 1496      04EB
 1497 0c2c 00B5FFF7 	    _CALL cr
 1497      FEFF5DF8 
 1497      04EB
 1498 0c36 7047     	    _RET  
 1499              	version_msg:
 1500 0c38 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1500      65207069 
 1500      6C6C2074 
 1500      696E7920 
 1500      42415349 
 1501              	version:
 1502 0c58 10       	    .byte 0x10 
 1503 0c59 0000BF   	    .p2align 2 
 1504              	
 1505              	
 1506              	/*****************************
 1507              	    clear_vars 
 1508              	    initialize variables to 0
 1509              	  input:
 1510              	    none 
 1511              	  output:
 1512              	    none 
 1513              	  use:
 1514              	    r0,r1,r2 
 1515              	*****************************/
 1516              	    _FUNC clear_vars 
 1517 0c5c 07B4     	    push {r0,r1,r2}
 1518 0c5e 80EA0000 	    eor r0,r0 
 1519 0c62 04F16001 	    add r1,UPP,#VARS
 1520 0c66 4FF01A02 	    mov r2,#26
 1521 0c6a 41F8040B 	1:  str r0,[r1],#4 
 1522 0c6e 013A     	    subs r2,#1
 1523 0c70 FBD1     	    bne 1b  
 1524 0c72 07BC     	    pop {r0,r1,r2}
 1525 0c74 7047     	    _RET 
 1526              	
 1527              	/*****************************
 1528              	   clear_basic 
 1529              	   reset BASIC system variables 
 1530              	   and clear variables and RAM 
 1531              	*****************************/
 1532 0c76 00BF     	    _FUNC clear_basic
 1533 0c78 80EA0000 	  	eor r0,r0
 1534 0c7c 2064     	    str r0,[UPP,#FLAGS] 
 1535 0c7e 6060     	    str r0,[UPP,#COUNT]
 1536 0c80 2060     	    str r0,[UPP,#IN_SAVED]
 1537 0c82 A060     	    str r0,[UPP,#BASICPTR]
 1538 0c84 E060     	    str r0,[UPP,#DATAPTR]
 1539 0c86 2061     	    str r0,[UPP,#DATA]
 1540 0c88 6061     	    str r0,[UPP,#DATALEN]
 1541 0c8a 04F1D000 	    add r0,UPP,#BASIC_START 
 1542 0c8e 00F11000 	    add r0,#16 
 1543 0c92 6FF00F01 	    mvn r1,#15
 1544 0c96 00EA0100 	    and r0,r1 
 1545 0c9a 2063     	    str r0,[UPP,#TXTBGN]
ARM GAS  tinyBasic.s 			page 45


 1546 0c9c 6063     	    str r0,[UPP,#TXTEND]
 1547 0c9e 00B5FFF7 	    _CALL clear_vars
 1547      DCFF5DF8 
 1547      04EB
 1548 0ca8 206B     	    ldr r0,[UPP,#TXTBGN]
 1549 0caa DFF83C10 	    ldr r1,tib 
 1550 0cae 82EA0202 	    eor r2,r2 
 1551 0cb2 40F8042B 	1:  str r2,[r0],#4
 1552 0cb6 8842     	    cmp r0,r1 
 1553 0cb8 FBD4     	    bmi 1b 
 1554 0cba 7047     	    _RET  
 1555              	
 1556              	/***********************************
 1557              	   warm_init 
 1558              	   initialize interpreter context 
 1559              	  input:
 1560              	    none
 1561              	  output:
 1562              	    none 
 1563              	  use:
 1564              	    r0 
 1565              	***********************************/
 1566              	warm_init:
 1567              	// reset data stack       
 1568 0cbc DFF824C0 	    ldr DP,dstack 
 1569 0cc0 4FF0000A 	    mov IN,#0 // BASIC line index 
 1570 0cc4 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1571 0cc8 80EA0000 	    eor r0,r0 
 1572 0ccc 6060     	    str r0,[UPP,#COUNT]  
 1573 0cce 2064     	    str r0,[UPP,#FLAGS]
 1574 0cd0 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1575 0cd2 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1576 0cd6 6064     	    str r0,[UPP,#TAB_WIDTH]
 1577 0cd8 4FF00A00 	    mov r0,#10 // default base decimal 
 1578 0cdc A061     	    str r0,[UPP,#BASE]
 1579 0cde 7047     	    _RET  
 1580              	
 1581 0ce0 00000000 	mstack: .word _mstack 
 1582 0ce4 00000000 	dstack: .word _dstack 
 1583 0ce8 00000000 	tib: .word _tib 
 1584 0cec 00000000 	pad: .word _pad 
 1585 0cf0 FCFFFFFF 	array: .word _pad - 4 
 1586 0cf4 0A524541 	ready: .asciz "\nREADY" 
 1586      445900
 1587              	
 1588              	/**********************************
 1589              	    warm_start 
 1590              	    start BASIC interpreter doesn't  
 1591              	    reset variables and code space 
 1592              	  input:
 1593              	    none 
 1594              	  output:
 1595              	    none 
 1596              	**********************************/
 1597 0cfb 00       	    _GBL_FUNC warm_start 
 1598              	// initialise parameters stack
 1599 0cfc FFF7DEFF 	    bl warm_init
ARM GAS  tinyBasic.s 			page 46


 1600              	// reset main stack 
 1601 0d00 5FF82400 	    ldr r0,mstack
 1602 0d04 8546     	    mov sp,r0 
 1603 0d06 DFF8B804 	    ldr r0,=ready 
 1604 0d0a 00B5FFF7 	    _CALL uart_puts 
 1604      FEFF5DF8 
 1604      04EB
 1605              	// fall in cmd_line 
 1606              	
 1607              	/**********************************
 1608              	   cmd_line 
 1609              	   shell command line 
 1610              	   input:
 1611              	      none 
 1612              	   output:
 1613              	      none 
 1614              	   use:
 1615              	
 1616              	***********************************/
 1617              	    _FUNC cmd_line 
 1618 0d14 00B5FFF7 	    _CALL cr
 1618      FEFF5DF8 
 1618      04EB
 1619 0d1e 80EA0000 	    eor r0,r0 
 1620 0d22 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1621 0d26 5FF84000 	1:  ldr r0,tib
 1622 0d2a 4FF05001 	    mov r1,#TIB_SIZE 
 1623 0d2e 00B5FFF7 	    _CALL readln 
 1623      FEFF5DF8 
 1623      04EB
 1624 0d38 0940     	    ands r1,r1 // empty line 
 1625 0d3a F4D0     	    beq 1b 
 1626 0d3c 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1626      E7FA5DF8 
 1626      04EB
 1627 0d46 EED0     	    beq 1b  // tokens stored in text area 
 1628              	// interpret tokenized line 
 1629              	interpreter:
 1630 0d48 00B500F0 	  _CALL next_token 
 1630      23F85DF8 
 1630      04EB
 1631 0d52 0028     	  cmp r0,#TK_NONE 
 1632 0d54 F8D0     	  beq interpreter    
 1633 0d56 0B28     	  cmp r0,#TK_CMD 
 1634 0d58 03D1     	  bne 2f
 1635 0d5a 0846     	  mov r0,r1 
 1636 0d5c 00F014F8 	  bl execute  
 1637 0d60 F2E7     	  b interpreter   
 1638              	2: 
 1639 0d62 0428     	  cmp r0,#TK_VAR 
 1640 0d64 05D1     	  bne 3f 
 1641 0d66 00B500F0 	  _CALL let_var 
 1641      3BFB5DF8 
 1641      04EB
 1642 0d70 EAE7     	  b interpreter 
 1643              	3: 
 1644 0d72 0528     	  cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 47


 1645 0d74 05D1     	  bne 4f
 1646 0d76 00B500F0 	  _CALL let_array 
 1646      41FB5DF8 
 1646      04EB
 1647 0d80 E2E7     	  b interpreter
 1648              	4: 
 1649 0d82 0128     	  cmp r0,#TK_COLON
 1650 0d84 E0D0     	  beq interpreter
 1651 0d86 0FE6     	  b syntax_error
 1652              	
 1653              	/*****************************
 1654              	    execute 
 1655              	    execute a BASIC routine from 
 1656              	    its token value 
 1657              	  input:
 1658              	    r0  BASIC SUB|FUNC token  
 1659              	  output: 
 1660              	    depend on SUB|FUNc
 1661              	*****************************/
 1662              	    _FUNC execute 
 1663 0d88 DFF83814 	    ldr r1,=fn_table 
 1664 0d8c 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1665 0d90 0047     	    bx r0 
 1666              	
 1667              	/*************************************
 1668              	  next_token 
 1669              	  extract next token from token list 
 1670              	  input:
 1671              	    none 
 1672              	  output:
 1673              	    r0    token attribute
 1674              	    r1    token value if there is one 
 1675              	  use:
 1676              	    T1    exit token type  
 1677              	****************************/
 1678 0d92 00BF     	    _FUNC next_token 
 1679 0d94 4DF8048D 	    push {T1}
 1680 0d98 88EA0808 	    eor T1,T1 // TK_NONE 
 1681 0d9c 6068     	    ldr r0,[UPP,#COUNT]
 1682 0d9e 8245     	    cmp IN,r0 
 1683 0da0 14D4     	    bmi 0f
 1684              	end_of_line:
 1685 0da2 BBF80010 	    ldrh r1,[BPTR] // line #
 1686 0da6 09B9     	    cbnz r1, next_line  // command line
 1687 0da8 FFF7FEBF 	    b warm_start
 1688              	next_line:
 1689 0dac 8344     	    add BPTR,r0 // next line 
 1690 0dae 606B     	    ldr r0,[UPP,#TXTEND]
 1691 0db0 8345     	    cmp BPTR,r0 
 1692 0db2 7FF5FEAF 	    bpl warm_start // end of program
 1693 0db6 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1694 0dba 6060     	    str r0,[UPP,#COUNT] 
 1695 0dbc 4FF0030A 	    mov IN,#3
 1696 0dc0 00B5FFF7 	    _CALL show_trace
 1696      13FA5DF8 
 1696      04EB
 1697 0dca 2AE0     	    b 9f  
ARM GAS  tinyBasic.s 			page 48


 1698              	0: 
 1699 0dcc C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1700 0dd0 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1701 0dd4 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1702 0dd8 0AF1010A 	    add IN,#1  
 1703 0ddc 8046     	    mov T1,r0 
 1704 0dde 00F03F00 	    and r0,#0x3f // limit mask 
 1705 0de2 F949     	    ldr r1,=tok_jmp 
 1706 0de4 D1E800F0 	    tbb [r1,r0]
 1707              	1: // pc reference point 
 1708 0de8 1BE0     	    b 9f 
 1709              	2: // .byte param
 1710 0dea 1BF80A10 	    ldrb r1,[BPTR,IN]
 1711 0dee 0AF1010A 	    add IN,#1 
 1712 0df2 16E0     	    b 9f 
 1713              	3: // .hword param 
 1714 0df4 3BF80A10 	    ldrh r1,[BPTR,IN]
 1715 0df8 0AF1020A 	    add IN,#2 
 1716 0dfc 11E0     	    b 9f 
 1717              	4: // .word param  
 1718 0dfe 5BF80A10 	    ldr r1,[BPTR,IN]
 1719 0e02 0AF1040A 	    add IN,#4
 1720 0e06 0CE0     	    b 9f 
 1721              	5: // .asciz param 
 1722 0e08 0BEB0A01 	    add r1,BPTR,IN 
 1723 0e0c 0846     	    mov r0,r1  
 1724 0e0e 00B5FFF7 	    _CALL strlen 
 1724      FEFF5DF8 
 1724      04EB
 1725 0e18 8244     	    add IN,r0
 1726 0e1a 0AF1010A 	    add IN,#1
 1727 0e1e 00E0     	    b 9f  
 1728              	8: // syntax error 
 1729 0e20 C2E5     	    b syntax_error 
 1730 0e22 4046     	9:  mov r0,T1  
 1731 0e24 5DF8048B 	    pop {T1}
 1732 0e28 7047     	    _RET
 1733              	
 1734 0e2a 00BF     	  .p2align 2
 1735              	tok_jmp: // token id  tbb offset 
 1736 0e2c 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1737 0e2e 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1738 0e32 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0xa TK_LPAREN,TK_RPAREN,TK_COMMA,
 1738      1D
 1739 0e37 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xb..0xe TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1740 0e3b 0B1D1D   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xf..0x11 TK_INTGR,TK_PLUS,TK_MINUS  
 1741 0e3e 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1741      1C
 1742 0e43 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1742      1C1C
 1743 0e49 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1744 0e4c 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1745 0e4f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1745      1C1C1C1C 
 1746 0e57 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1746      1C1C
 1747 0e5d 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
ARM GAS  tinyBasic.s 			page 49


 1747      1D1D
 1748 0e63 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1748      1C1C1C1C 
 1748      1C
 1749              	
 1750              	  .p2align 2 
 1751              	
 1752              	/*********************************
 1753              	    expect 
 1754              	    check if next token is of 
 1755              	    expected type. If not 
 1756              	    call syntax_error  
 1757              	  input:
 1758              	      r0   token attribute
 1759              	  output:
 1760              	      r0  token attribute 
 1761              	      r1  token value
 1762              	  use:
 1763              	      T1   
 1764              	**********************************/
 1765              	    _FUNC expect 
 1766 0e6c 4DF8048D 	    push {T1}
 1767 0e70 8046     	    mov T1,r0 
 1768 0e72 00B5FFF7 	    _CALL next_token 
 1768      8EFF5DF8 
 1768      04EB
 1769 0e7c 4045     	    cmp r0,T1  
 1770 0e7e 7FF493AD 	    bne syntax_error 
 1771 0e82 5DF8048B 	    pop {T1}
 1772 0e86 7047     	    _RET 
 1773              	
 1774              	/***********************************
 1775              	    func_args 
 1776              	    get function arguments list 
 1777              	  input:
 1778              	    none 
 1779              	  output:
 1780              	    r0    arg. count 
 1781              	  use:
 1782              	
 1783              	************************************/
 1784              	    _FUNC func_args 
 1785 0e88 4FF00600 	    mov r0,#TK_LPAREN 
 1786 0e8c 00B5FFF7 	    _CALL expect 
 1786      EDFF5DF8 
 1786      04EB
 1787 0e96 00B500F0 	    _CALL arg_list 
 1787      0CF85DF8 
 1787      04EB
 1788 0ea0 01B4     	    push {r0}
 1789 0ea2 4FF00700 	    mov r0,#TK_RPAREN 
 1790 0ea6 00B5FFF7 	    _CALL expect 
 1790      E0FF5DF8 
 1790      04EB
 1791 0eb0 01BC     	    pop {r0}
 1792 0eb2 7047     	    _RET 
 1793              	
ARM GAS  tinyBasic.s 			page 50


 1794              	/**********************************
 1795              	    arg_list 
 1796              	    get arguments list on dstack 
 1797              	  input:
 1798              	    none 
 1799              	  output:
 1800              	    r0    arg count
 1801              	  use:
 1802              	    T1    tmp count  
 1803              	***********************************/
 1804              	    _FUNC arg_list 
 1805 0eb4 4DF8048D 	    push {T1}
 1806 0eb8 88EA0808 	    eor T1,T1 
 1807 0ebc 00B500F0 	1:  _CALL expression 
 1807      C9F85DF8 
 1807      04EB
 1808 0ec6 0028     	    cmp R0,#TK_NONE 
 1809 0ec8 10D0     	    beq 9f 
 1810 0eca 0F28     	    cmp r0,#TK_INTGR
 1811 0ecc 0ED1     	    bne 9f 
 1812 0ece 4CF8041D 	    _PUSH r1 
 1813 0ed2 08F10108 	    add T1,#1 
 1814 0ed6 00B5FFF7 	    _CALL next_token 
 1814      5CFF5DF8 
 1814      04EB
 1815 0ee0 0828     	    cmp r0,#TK_COMMA 
 1816 0ee2 EBD0     	    beq 1b 
 1817 0ee4 D4F800A0 	    _UNGET_TOKEN 
 1817      D4F808B0 
 1818 0eec 4046     	9:  mov r0,T1 
 1819 0eee 5DF8048B 	    pop {T1}
 1820 0ef2 7047     	    _RET 
 1821              	
 1822              	/***********************************
 1823              	 factor
 1824              	 arithmetick factor parser 
 1825              	 factor ::= ['+'|'-'|e]  var | @ |
 1826              				 integer | function |
 1827              				 '('expression')' 
 1828              	  input: 
 1829              	    none 
 1830              	  output:
 1831              	    r0   token attribute 
 1832              	    r1   token value 
 1833              	  use:
 1834              	    r2   temp 
 1835              	    T1   sign 
 1836              	    T2   exit token attribute 
 1837              	***********************************/
 1838              	    _FUNC factor 
 1839 0ef4 2DE90403 	    push {r2,T1,T2}
 1840 0ef8 4FF00F09 	    mov T2,#TK_INTGR 
 1841 0efc 4FF00108 	    mov T1,#1 // default sign +  
 1842 0f00 00B5FFF7 	    _CALL next_token
 1842      47FF5DF8 
 1842      04EB
 1843 0f0a 0246     	    mov r2,r0 
ARM GAS  tinyBasic.s 			page 51


 1844 0f0c 00F03000 	    and r0,#TK_GRP_MASK 
 1845 0f10 1028     	    cmp r0,#TK_GRP_ADD
 1846 0f12 1046     	    mov r0,r2
 1847 0f14 08D1     	    bne 1f 
 1848 0f16 1028     	    cmp r0,#TK_PLUS 
 1849 0f18 01D0     	    beq 0f 
 1850 0f1a 4FF0FF38 	    mov T1,#-1 // minus sign 
 1851 0f1e 00B5FFF7 	0:  _CALL next_token
 1851      38FF5DF8 
 1851      04EB
 1852 0f28 0F28     	1:  cmp r0,#TK_INTGR 
 1853 0f2a 4ED0     	    beq 8f 
 1854 0f2c 0528     	    cmp r0,#TK_ARRAY 
 1855 0f2e 1ED1     	    bne 2f 
 1856 0f30 4FF00600 	    mov r0,#TK_LPAREN 
 1857 0f34 00B5FFF7 	    _CALL expect 
 1857      99FF5DF8 
 1857      04EB
 1858 0f3e 00B500F0 	    _CALL expression
 1858      88F85DF8 
 1858      04EB
 1859 0f48 0F28     	    cmp r0,#TK_INTGR
 1860 0f4a 7FF42DAD 	    bne syntax_error
 1861 0f4e 8146     	    mov T2,r0
 1862 0f50 0A46     	    mov r2,r1  
 1863 0f52 4FF00700 	    mov r0,#TK_RPAREN
 1864 0f56 00B5FFF7 	    _CALL expect 
 1864      88FF5DF8 
 1864      04EB
 1865 0f60 1046     	    mov r0,r2 
 1866 0f62 00B500F0 	    _CALL get_array_element 
 1866      ECF85DF8 
 1866      04EB
 1867 0f6c 2DE0     	    b 8f
 1868 0f6e 0628     	2:  cmp r0,#TK_LPAREN 
 1869 0f70 12D1     	    bne 3f 
 1870 0f72 00B500F0 	    _CALL expression 
 1870      6EF85DF8 
 1870      04EB
 1871 0f7c 0F28     	    cmp r0,#TK_INTGR 
 1872 0f7e 7FF413AD 	    bne syntax_error
 1873 0f82 8146     	    mov T2,r0
 1874 0f84 0A46     	    mov r2,r1   
 1875 0f86 4FF00700 	    mov r0,#TK_RPAREN
 1876 0f8a 00B5FFF7 	    _CALL expect 
 1876      6EFF5DF8 
 1876      04EB
 1877 0f94 1146     	    mov r1,r2 
 1878 0f96 18E0     	    b 8f       
 1879 0f98 0428     	3:  cmp r0,#TK_VAR 
 1880 0f9a 06D1     	    bne 4f
 1881 0f9c 0846     	    mov r0,r1  
 1882 0f9e 00B500F0 	    _CALL get_var 
 1882      E2F85DF8 
 1882      04EB
 1883 0fa8 0FE0     	    b 8f 
 1884 0faa 0C28     	4:  cmp r0,#TK_IFUNC 
ARM GAS  tinyBasic.s 			page 52


 1885 0fac 06D1     	    bne 6f 
 1886 0fae 0846     	5:  mov r0,r1  
 1887 0fb0 00B5FFF7 	    _CALL execute
 1887      E9FE5DF8 
 1887      04EB
 1888 0fba 06E0     	    b 8f 
 1889 0fbc D4F800A0 	6:  _UNGET_TOKEN      
 1889      D4F808B0 
 1890 0fc4 4FF00000 	    mov r0,#TK_NONE
 1891 0fc8 03E0     	    b 9f  
 1892 0fca 08FB01F1 	8:  mul r1,T1 
 1893 0fce 5FEA0900 	    movs r0,T2 
 1894 0fd2 BDE80403 	9:  pop {r2,T1,T2}   
 1895 0fd6 7047     	    _RET 
 1896              	
 1897              	
 1898              	/*****************************************
 1899              	    term 
 1900              	    term parser 
 1901              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1902              	    output:
 1903              	      r0  	token attribute 
 1904              	      r1		integer
 1905              	    use:
 1906              	      r2    first operand 
 1907              	      r3    temp 
 1908              	      T1    operator 
 1909              	      T2    exit token attribute 
 1910              	******************************************/
 1911              	     _FUNC term 
 1912 0fd8 2DE90C03 	    push {r2,r3,T1,T2}
 1913 0fdc 4FF00009 	    mov T2,#TK_NONE 
 1914 0fe0 00B5FFF7 	    _CALL factor
 1914      87FF5DF8 
 1914      04EB
 1915 0fea 60B3     	    cbz r0, 9f  // no factor   
 1916 0fec 8146     	    mov T2,r0  // TK_INTGR 
 1917 0fee 0A46     	    mov r2,r1 // first factor    
 1918 0ff0 00B5FFF7 	0:  _CALL next_token
 1918      CFFE5DF8 
 1918      04EB
 1919 0ffa 0346     	    mov r3,r0   
 1920 0ffc 00F03000 	    and r0,#TK_GRP_MASK 
 1921 1000 2028     	    cmp r0,#TK_GRP_MULT
 1922 1002 04D0     	    beq 1f
 1923 1004 D4F800A0 	    _UNGET_TOKEN
 1923      D4F808B0 
 1924 100c 1BE0     	    b 9f 
 1925 100e 9846     	1:  mov T1,r3 
 1926 1010 00B5FFF7 	    _CALL factor  
 1926      6FFF5DF8 
 1926      04EB
 1927 101a 3FF4C5AC 	    beq syntax_error 
 1928 101e B8F1200F 	    cmp T1,#TK_MULT
 1929 1022 02D1     	    bne 2f 
 1930              	// multiplication
 1931 1024 01FB02F2 	    mul r2,r1
ARM GAS  tinyBasic.s 			page 53


 1932 1028 E2E7     	    b 0b  
 1933 102a B8F1210F 	2:  cmp T1,#TK_DIV 
 1934 102e 02D1     	    bne 3f
 1935              	// division
 1936 1030 92FBF1F2 	    sdiv r2,r2,r1
 1937 1034 DCE7     	    b 0b  
 1938              	3: // modulo
 1939 1036 1046     	    mov r0,r2 
 1940 1038 92FBF1F2 	    sdiv r2,r2,r1 
 1941 103c 01FB02F2 	    mul  r2,r1 
 1942 1040 A0EB0202 	    sub  r2,r0,r2
 1943 1044 D4E7     	    b 0b  
 1944 1046 1146     	9:  mov r1,r2 
 1945 1048 5FEA0900 	    movs r0,T2 
 1946 104c BDE80C03 	    pop {r2,r3,T1,T2}
 1947 1050 7047     	    _RET 
 1948              	
 1949              	/*****************************************
 1950              	    expression 
 1951              	    arithmetic expression parser 
 1952              	    expression ::= term [['+'|'-'] term]*
 1953              	    result range {-32768..32767}
 1954              	    output:
 1955              	      r0    TK_NONE || TK_INTGR 
 1956              	      r1 	  integer
 1957              	    use:
 1958              	      r2  left operand 
 1959              	      T1  operator 
 1960              	      T2  exit token attribute
 1961              	******************************************/
 1962 1052 00BF     	    _FUNC expression 
 1963 1054 2DE90403 	    push {r2,t1,t2}
 1964 1058 4FF00009 	    mov T2,#TK_NONE
 1965 105c 82EA0202 	    eor r2,r2 // zero 
 1966 1060 00B5FFF7 	    _CALL term 
 1966      B9FF5DF8 
 1966      04EB
 1967 106a 21D0     	    beq 9f  // no term  
 1968 106c 0A46     	    mov r2,r1 // first term
 1969 106e 4FF00F09 	    mov T2,#TK_INTGR    
 1970 1072 00B5FFF7 	1:  _CALL next_token 
 1970      8EFE5DF8 
 1970      04EB
 1971 107c 8046     	    mov T1,r0 // token attribute 
 1972 107e 00F03000 	    and r0,#TK_GRP_MASK 
 1973 1082 1028     	    cmp r0,#TK_GRP_ADD 
 1974 1084 04D0     	    beq 3f 
 1975 1086 D4F800A0 	    _UNGET_TOKEN
 1975      D4F808B0 
 1976 108e 0FE0     	    b 9f  
 1977 1090 00B5FFF7 	3:  _CALL term 
 1977      A1FF5DF8 
 1977      04EB
 1978 109a 0F28     	    cmp r0,#TK_INTGR 
 1979 109c 7FF484AC 	    bne syntax_error 
 1980 10a0 B8F1100F 	    cmp T1,#TK_PLUS 
 1981 10a4 02D0     	    beq 4f 
ARM GAS  tinyBasic.s 			page 54


 1982 10a6 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1983 10aa E2E7     	    b 1b 
 1984 10ac 0A44     	4:  add r2,r2,r1 // N1+N2
 1985 10ae E0E7     	    b 1b
 1986 10b0 4846     	9:  mov r0,T2 
 1987 10b2 1146     	    mov r1,r2 
 1988 10b4 BDE80403 	    pop {r2,t1,t2}
 1989 10b8 7047     	    _RET 
 1990              	
 1991              	
 1992              	/**********************************************
 1993              	    relation parser 
 1994              	    rel ::= expr1 rel_op expr2
 1995              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1996              	    relation return  integer , zero is false 
 1997              	    output:
 1998              	        r0	TK_INTGR  
 1999              	        r1	integer 
 2000              	    use:
 2001              	        r2   first operand 
 2002              	        T1   relop   
 2003              	**********************************************/
 2004 10ba 00BF     	    _FUNC relation 
 2005 10bc 2DE90401 	    push {r2,T1}
 2006 10c0 00B5FFF7 	    _CALL expression 
 2006      C7FF5DF8 
 2006      04EB
 2007 10ca 0F28     	    cmp r0,#TK_INTGR 
 2008 10cc 7FF46CAC 	    bne syntax_error 
 2009 10d0 0A46     	    mov r2,r1  // first operand  
 2010 10d2 00B5FFF7 	    _CALL next_token 
 2010      5EFE5DF8 
 2010      04EB
 2011 10dc 8046     	    mov T1,r0  // relop  
 2012 10de 00F03000 	    and r0,#TK_GRP_MASK 
 2013 10e2 3028     	    cmp r0,#TK_GRP_RELOP 
 2014 10e4 1DD1     	    bne 8f  // single operand 
 2015 10e6 00B5FFF7 	    _CALL expression 
 2015      B4FF5DF8 
 2015      04EB
 2016 10f0 0F28     	    cmp r0,#TK_INTGR 
 2017 10f2 7FF459AC 	    bne syntax_error 
 2018 10f6 8A42     	    cmp r2,r1 // compare operands  
 2019 10f8 4FF0FF31 	    mov r1,#-1 
 2020 10fc 334A     	    ldr r2,=relop_jmp
 2021 10fe 08F00708 	    and T1,#7 // {1..6}
 2022 1102 D2E808F0 	    tbb [r2,T1]    
 2023              	rel_idx0:
 2024              	rel_eq:
 2025 1106 11D0     	    beq 9f 
 2026 1108 08E0     	    b rel_false
 2027              	rel_lt: 
 2028 110a 0FDB     	    blt 9f   
 2029 110c 06E0     	    b rel_false 
 2030              	rel_le:
 2031 110e 0DDD     	    ble 9f  
 2032 1110 04E0     	    b rel_false 
ARM GAS  tinyBasic.s 			page 55


 2033              	rel_gt:
 2034 1112 0BDC     	    bgt 9f  
 2035 1114 02E0     	    b rel_false  
 2036              	rel_ge:
 2037 1116 09DA     	    bge 9f  
 2038 1118 00E0     	    b rel_false  
 2039              	rel_diff:
 2040 111a 07D1     	    bne 9f 
 2041              	rel_false:    
 2042 111c 81EA0101 	    eor r1,r1  // false
 2043 1120 04E0     	    b 9f  
 2044 1122 D4F800A0 	8:  _UNGET_TOKEN 
 2044      D4F808B0 
 2045 112a 1146     	    mov r1,r2    
 2046 112c 4FF00F00 	9:  mov r0,#TK_INTGR
 2047 1130 BDE80401 	    pop {r2,T1}
 2048 1134 7047     	    _RET 
 2049              	
 2050              	
 2051              	relop_jmp: 
 2052 1136 00       	  .byte 0 
 2053 1137 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 2054 1138 00       	  .byte 0 // =
 2055 1139 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 2056 113a 02       	  .byte (rel_lt-rel_idx0)/2 // <
 2057 113b 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 2058 113c 04       	  .byte (rel_le-rel_idx0)/2  // <=
 2059              	
 2060              	
 2061              	/***********************************
 2062              	    get_array_element
 2063              	    return value of @(n)
 2064              	  input:
 2065              	    r0    indice 
 2066              	  output:
 2067              	    r0   TK_INTGR
 2068              	    r1   value  
 2069              	************************************/
 2070 113d 0000BF   	    _FUNC get_array_element 
 2071 1140 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2072 1144 4FEA8000 	    lsl r0,#2 
 2073 1148 C0EB0100 	    rsb r0,r1 
 2074 114c 0168     	    ldr r1,[r0]
 2075 114e 4FF00F00 	    mov r0,#TK_INTGR 
 2076 1152 7047     	    _RET 
 2077              	
 2078              	
 2079              	/***********************************
 2080              	    set_array_element 
 2081              	    set value of array element 
 2082              	  input:
 2083              	    r0   index 
 2084              	    r1   new value 
 2085              	  output:
 2086              	    none
 2087              	  use:
 2088              	    r2    array pointer 
ARM GAS  tinyBasic.s 			page 56


 2089              	**********************************/
 2090              	    _FUNC set_array_element 
 2091 1154 04B4     	    push {r2}
 2092 1156 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2093 115a 4FEA8000 	    lsl r0,#2 
 2094 115e A1EB0001 	    sub r1,r0 
 2095 1162 0960     	    str r1,[r1]
 2096 1164 04BC     	    pop {r2}
 2097 1166 7047     	    _RET 
 2098              	
 2099              	/***********************************
 2100              	   get_var 
 2101              	   get variable value 
 2102              	  input:
 2103              	     r0    variable index {0..25}
 2104              	  output:
 2105              	     r0    TK_INTGR
 2106              	     r1    value 
 2107              	**********************************/
 2108              	    _FUNC get_var 
 2109 1168 04F16001 	    add r1,UPP,#VARS
 2110 116c 4FEA8000 	    lsl r0,#2 
 2111 1170 0958     	    ldr r1,[r1,r0]
 2112 1172 4FF00F00 	    mov r0,#TK_INTGR
 2113 1176 7047     	    _RET 
 2114              	
 2115              	/*********************************
 2116              	    set_var 
 2117              	    set variable value 
 2118              	  input:
 2119              	     r0    variable index {0..25}
 2120              	     r1    new value 
 2121              	  output:
 2122              	    none 
 2123              	  use:
 2124              	    r2   vars pointer 
 2125              	*********************************/
 2126              	    _FUNC set_var 
 2127 1178 04B4     	    push {r2}
 2128 117a 04F16002 	    add r2,UPP,#VARS
 2129 117e 4FEA8000 	    lsl r0,#2
 2130 1182 1150     	    str r1,[r2,r0]
 2131 1184 04BC     	    pop {r2}
 2132 1186 7047     	    _RET 
 2133              	
 2134              	/******************************
 2135              	    CONSTANTS data
 2136              	******************************/
 2137              	
 2138              	  .section .rodata 
 2139              	
 2140              	// system variables initial value 
 2141              	uzero:
 2142 0000 00000000 	  .word 0 // IN_SAVED
 2143 0004 00000000 	  .word 0 // COUNT
 2144 0008 00000000 	  .word 0 // BASICPTR
 2145 000c 00000000 	  .word 0 // DATAPTR
ARM GAS  tinyBasic.s 			page 57


 2146 0010 00000000 	  .word 0 // DATA
 2147 0014 00000000 	  .word 0 // DATALEN
 2148 0018 0A000000 	  .word 10 // BASE
 2149 001c 00000000 	  .word 0 // TICKS
 2150 0020 00000000 	  .word 0 // TIMER
 2151 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2152 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2153 002c 00000000 	  .word 0 // FSFREE
 2154 0030 D0000000 	  .word ulast-uzero // TXTBGN
 2155 0034 D0000000 	  .word ulast-uzero // TXTEND
 2156 0038 00000000 	  .word 0 //LOOP_DEPTH
 2157 003c 00000000 	  .word 0 // ARRAY_SIZE
 2158 0040 00000000 	  .word 0 // FLAGS
 2159 0044 04000000 	  .word 4 // TAB_WIDTH
 2160 0048 00000000 	  .word 0 // RX_HEAD
 2161 004c 00000000 	  .word 0 // RX_TAIL
 2162 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2162      00000000 
 2162      00000000 
 2162      00000000 
 2163 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2163      00000000 
 2163      00000000 
 2163      00000000 
 2163      00000000 
 2164 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2165 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2166              	ulast:
 2167              	
 2168              	  .section .rodata.dictionary 
 2169              	
 2170              	// keep alphabetic order for BASIC names from Z-A
 2171              	// this sort order is for for WORDS cmd output. 	
 2172              	  .type kword_end, %object
 2173              		.equ link, 0
 2174              	kword_end:
 2175 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2175      00000000 
 2175      00000000 
 2175      00000000 
 2176 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2176      54000000 
 2176      0B000000 
 2176      5854524D 
 2176      54000000 
 2177 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2177      55000000 
 2177      0B000000 
 2177      58524356 
 2177      00000000 
 2178 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2178      53000000 
 2178      0C000000 
 2178      584F5200 
 2179 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2179      52000000 
 2179      0B000000 
ARM GAS  tinyBasic.s 			page 58


 2179      57524954 
 2179      45000000 
 2180 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2180      51000000 
 2180      0B000000 
 2180      574F5244 
 2180      53000000 
 2181 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2181      50000000 
 2181      0B000000 
 2181      57414954 
 2181      00000000 
 2182 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2182      4F000000 
 2182      0C000000 
 2182      55535200 
 2183 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2183      4E000000 
 2183      0B000000 
 2183      554E5449 
 2183      4C000000 
 2184 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2184      4D000000 
 2184      0C000000 
 2184      55464C41 
 2184      53480000 
 2185 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2185      4C000000 
 2185      0C000000 
 2185      55424F55 
 2185      4E440000 
 2186 00d0 C8000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2186      4B000000 
 2186      0B000000 
 2186      54524143 
 2186      45000000 
 2187 00e4 DC000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2187      4A000000 
 2187      0B000000 
 2187      544F4E45 
 2187      00000000 
 2188 00f8 F0000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2188      49000000 
 2188      0B000000 
 2188      544F0000 
 2189 0108 04010000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2189      47000000 
 2189      0B000000 
 2189      54494D45 
 2189      52000000 
 2190 011c 14010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2190      48000000 
 2190      0C000000 
 2190      54494D45 
 2190      4F555400 
 2191 0130 28010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2191      46000000 
ARM GAS  tinyBasic.s 			page 59


 2191      0C000000 
 2191      5449434B 
 2191      53000000 
 2192 0144 3C010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2192      45000000 
 2192      0B000000 
 2192      5448454E 
 2192      00000000 
 2193 0158 50010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2193      44000000 
 2193      0B000000 
 2193      54414200 
 2194 0168 64010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2194      43000000 
 2194      0B000000 
 2194      53544F50 
 2194      00000000 
 2195 017c 74010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2195      42000000 
 2195      0B000000 
 2195      53544550 
 2195      00000000 
 2196 0190 88010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2196      41000000 
 2196      0B000000 
 2196      53504957 
 2196      52000000 
 2197 01a4 9C010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2197      40000000 
 2197      0B000000 
 2197      53504953 
 2197      454C0000 
 2198 01b8 B0010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2198      3E000000 
 2198      0C000000 
 2198      53504952 
 2198      44000000 
 2199 01cc C4010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2199      3F000000 
 2199      0B000000 
 2199      53504945 
 2199      4E000000 
 2200 01e0 D8010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2200      3D000000 
 2200      0B000000 
 2200      53504300 
 2201 01f0 EC010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2201      3C000000 
 2201      0B000000 
 2201      534C4545 
 2201      50000000 
 2202 0204 FC010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2202      3B000000 
 2202      0C000000 
 2202      53495A45 
 2202      00000000 
 2203 0218 10020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
ARM GAS  tinyBasic.s 			page 60


 2203      3A000000 
 2203      0B000000 
 2203      53415645 
 2203      00000000 
 2204 022c 24020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2204      39000000 
 2204      0B000000 
 2204      52554E00 
 2205 023c 38020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2205      38000000 
 2205      0C000000 
 2205      52534849 
 2205      46540000 
 2206 0250 48020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2206      37000000 
 2206      0C000000 
 2206      524E4400 
 2207 0260 5C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2207      36000000 
 2207      0B000000 
 2207      52455455 
 2207      524E0000 
 2208 0274 6C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2208      35000000 
 2208      0B000000 
 2208      52455354 
 2208      4F524500 
 2209 0288 80020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2209      34000000 
 2209      0B000000 
 2209      52454D41 
 2209      524B0000 
 2210 029c 94020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2210      33000000 
 2210      0C000000 
 2210      52454144 
 2210      00000000 
 2211 02b0 A8020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2211      32000000 
 2211      0C000000 
 2211      514B4559 
 2211      00000000 
 2212 02c4 BC020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2212      31000000 
 2212      0B000000 
 2212      5052494E 
 2212      54000000 
 2213 02d8 D0020000 	  _dict_entry TK_CMD,POKE8,POKE8_IDX // poke8 
 2213      2E000000 
 2213      0B000000 
 2213      504F4B45 
 2213      38000000 
 2214 02ec E4020000 	  _dict_entry TK_CMD,POKE32,POKE32_IDX //poke32
 2214      30000000 
 2214      0B000000 
 2214      504F4B45 
 2214      33320000 
ARM GAS  tinyBasic.s 			page 61


 2215 0300 F8020000 	  _dict_entry TK_CMD,POKE16,POKE16_IDX // poke16
 2215      2F000000 
 2215      0B000000 
 2215      504F4B45 
 2215      31360000 
 2216 0314 0C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2216      2A000000 
 2216      0B000000 
 2216      504D4F44 
 2216      45000000 
 2217 0328 20030000 	  _dict_entry TK_IFUNC,PEEK8,PEEK8_IDX //peek8
 2217      2B000000 
 2217      0C000000 
 2217      5045454B 
 2217      38000000 
 2218 033c 34030000 	  _dict_entry TK_IFUNC,PEEK32,PEEK32_IDX //peek32
 2218      2D000000 
 2218      0C000000 
 2218      5045454B 
 2218      33320000 
 2219 0350 48030000 	  _dict_entry TK_IFUNC,PEEK16,PEEK16_IDX //peek16
 2219      2C000000 
 2219      0C000000 
 2219      5045454B 
 2219      31360000 
 2220 0364 5C030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2220      29000000 
 2220      0B000000 
 2220      50415553 
 2220      45000000 
 2221 0378 70030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2221      28000000 
 2221      0C000000 
 2221      50414400 
 2222 0388 84030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2222      27000000 
 2222      0B000000 
 2222      4F555400 
 2223 0398 94030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2223      26000000 
 2223      0C000000 
 2223      4F520000 
 2224 03a8 A4030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2224      25000000 
 2224      0C000000 
 2224      4E4F5400 
 2225 03b8 B4030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2225      24000000 
 2225      0B000000 
 2225      4E455854 
 2225      00000000 
 2226 03cc C4030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2226      23000000 
 2226      0B000000 
 2226      4E455700 
 2227 03dc D8030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2227      22000000 
ARM GAS  tinyBasic.s 			page 62


 2227      0C000000 
 2227      4C534849 
 2227      46540000 
 2228 03f0 E8030000 	  _dict_entry TK_IFUNC,LOG2,LOG2_IDX //log2 
 2228      21000000 
 2228      0C000000 
 2228      4C4F4732 
 2228      00000000 
 2229 0404 FC030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2229      20000000 
 2229      0B000000 
 2229      4C4F4144 
 2229      00000000 
 2230 0418 10040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2230      1F000000 
 2230      0B000000 
 2230      4C495354 
 2230      00000000 
 2231 042c 24040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2231      1E000000 
 2231      0B000000 
 2231      4C455400 
 2232 043c 38040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2232      1D000000 
 2232      0C000000 
 2232      4B455900 
 2233 044c 48040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2233      1C000000 
 2233      0C000000 
 2233      494E5645 
 2233      52540000 
 2234 0460 58040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2234      1B000000 
 2234      0B000000 
 2234      494E5055 
 2234      54000000 
 2235 0474 6C040000 	  _dict_entry TK_IFUNC,INP,INP_IDX // inp   
 2235      1A000000 
 2235      0C000000 
 2235      494E5000 
 2236 0484 80040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2236      19000000 
 2236      0B000000 
 2236      49460000 
 2237 0494 90040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2237      18000000 
 2237      0B000000 
 2237      48455800 
 2238 04a4 A0040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2238      17000000 
 2238      0B000000 
 2238      474F544F 
 2238      00000000 
 2239 04b8 B0040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2239      16000000 
 2239      0B000000 
 2239      474F5355 
ARM GAS  tinyBasic.s 			page 63


 2239      42000000 
 2240 04cc C4040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2240      15000000 
 2240      0B000000 
 2240      464F5247 
 2240      45540000 
 2241 04e0 D8040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2241      14000000 
 2241      0B000000 
 2241      464F5200 
 2242 04f0 EC040000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2242      13000000 
 2242      0B000000 
 2242      454E4400 
 2243 0500 FC040000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2243      12000000 
 2243      0B000000 
 2243      44554D50 
 2243      00000000 
 2244 0514 0C050000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2244      11000000 
 2244      0B000000 
 2244      444F0000 
 2245 0524 20050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2245      10000000 
 2245      0B000000 
 2245      44495200 
 2246 0534 30050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2246      0F000000 
 2246      0B000000 
 2246      44454300 
 2247 0544 40050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2247      0E000000 
 2247      0B000000 
 2247      44415441 
 2247      4C4E0000 
 2248 0558 50050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2248      0D000000 
 2248      0B000000 
 2248      44415441 
 2248      00000000 
 2249 056c 64050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2249      0C000000 
 2249      0D000000 
 2249      43484152 
 2249      00000000 
 2250 0580 78050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2250      0B000000 
 2250      0B000000 
 2250      42544F47 
 2250      4C000000 
 2251 0594 8C050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2251      0A000000 
 2251      0C000000 
 2251      42544553 
 2251      54000000 
 2252 05a8 A0050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
ARM GAS  tinyBasic.s 			page 64


 2252      09000000 
 2252      0B000000 
 2252      42534554 
 2252      00000000 
 2253 05bc B4050000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2253      08000000 
 2253      0B000000 
 2253      42524553 
 2253      00000000 
 2254 05d0 C8050000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2254      07000000 
 2254      0C000000 
 2254      42495400 
 2255 05e0 DC050000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2255      06000000 
 2255      0B000000 
 2255      41575500 
 2256 05f0 EC050000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2256      05000000 
 2256      0B000000 
 2256      4155544F 
 2256      52554E00 
 2257 0604 FC050000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2257      04000000 
 2257      0C000000 
 2257      41534300 
 2258 0614 10060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2258      03000000 
 2258      0C000000 
 2258      414E4400 
 2259 0624 20060000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2259      02000000 
 2259      0C000000 
 2259      41444352 
 2259      45414400 
 2260 0638 30060000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2260      01000000 
 2260      0B000000 
 2260      4144434F 
 2260      4E000000 
 2261              	first_link: 
 2262 064c 44060000 	  .word LINK 
 2263 0650 00000000 	  .word ABS_IDX 
 2264 0654 0C000000 	  .word TK_IFUNC
 2265              	kword_dict: // first name field 
 2266              	  .equ LINK,. 
 2267 0658 41425300 	  .asciz "ABS" 
 2268              	  .p2align 2 
 2269              	
 2270              	    .section .rodata.fn_tabld 
 2271              	
 2272              	//comands and fonctions address table
 2273              	  .type fn_table, %object
 2274              	fn_table:
 2275 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask 
 2275      00000000 
 2275      00000000 
ARM GAS  tinyBasic.s 			page 65


 2275      00000000 
 2275      00000000 
 2276 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char  
 2276      00000000 
 2276      00000000 
 2276      00000000 
 2276      00000000 
 2277 0034 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,dump
 2277      00000000 
 2277      00000000 
 2277      00000000 
 2277      00000000 
 2278 004c 00000000 		.word cmd_end,for,forget,gosub,goto 
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2279 0060 00000000 		.word hex_base,if,inp,input_var,invert,key
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2280 0078 00000000 		.word let,list,load,log2,lshift,new,next
 2280      00000000 
 2280      00000000 
 2280      00000000 
 2280      00000000 
 2281 0094 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32,poke8,poke16
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2282 00c0 00000000 		.word poke32,print
 2282      00000000 
 2283 00c8 00000000 		.word qkey,read,skip_line
 2283      00000000 
 2283      00000000 
 2284 00d4 00000000 		.word restore,return, random,rshift,run,save,size 
 2284      00000000 
 2284      00000000 
 2284      00000000 
 2284      00000000 
 2285 00f0 00000000 		.word sleep,spc,spi_read,spi_enable,spi_select,spi_write,step,stop,tab
 2285      00000000 
 2285      00000000 
 2285      00000000 
 2285      00000000 
 2286 0114 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,trace,ubound,uflash,until,usr
 2286      00000000 
 2286      00000000 
 2286      00000000 
 2286      00000000 
 2287 0140 00000000 		.word wait,words,write,bit_xor,transmit,receive
 2287      00000000 
 2287      00000000 
 2287      00000000 
 2287      00000000 
ARM GAS  tinyBasic.s 			page 66


 2288 0158 00000000 		.word 0 
 2289              	
 2290              	
 2291              	/**********************************
 2292              	    BASIC commands and functions 
 2293              	**********************************/
 2294              	
 2295              	    .section .text.basic , "ax", %progbits 
 2296              	
 2297              	
 2298              	/*******************************
 2299              	  BASIC:  ABS expr 
 2300              	  input:
 2301              	    none 
 2302              	  output:
 2303              	    r0    token type 
 2304              	    r1    abs(expr)
 2305              	  use:
 2306              	    none 
 2307              	******************************/
 2308              	    _FUNC abs 
 2309 0000 00B5FFF7 	    _CALL arg_list
 2309      FEFF5DF8 
 2309      04EB
 2310 000a 0128     	    cmp r0,#1 
 2311 000c 01D0     	    beq 1f 
 2312 000e FFF7FEBF 	    b syntax_error 
 2313 0012 5CF8041B 	1:  _POP r1 
 2314 0016 11F0004F 	    tst r1,#(1<<31)
 2315 001a 01D0     	    beq 9f
 2316 001c C1F10001 	    rsb r1,#0 
 2317 0020 4FF00F00 	9:  mov r0,#TK_INTGR
 2318 0024 7047     	   _RET 
 2319              	
 2320 0026 00BF     	    _FUNC power_adc
 2321 0028 7047     	    _RET
 2322              	
 2323 002a 00BF     	    _FUNC analog_read
 2324 002c 7047     	    _RET
 2325              	
 2326              	/************************************
 2327              	  BASIC: AND(expr1,expr2)
 2328              	  logical ANND bit to between expr1,expr2
 2329              	************************************/
 2330 002e 00BF     	    _FUNC bit_and
 2331 0030 00B5FFF7 	    _CALL func_args 
 2331      FEFF5DF8 
 2331      04EB
 2332 003a 0228     	    cmp r0,#2 
 2333 003c 7FF4FEAF 	    bne syntax_error 
 2334 0040 5CF8040B 	    _POP r0 
 2335 0044 5CF8041B 	    _POP r1 
 2336 0048 01EA0001 	    and r1,r0 
 2337 004c 4FF00F00 	    mov r0,#TK_INTGR
 2338 0050 7047     	    _RET
 2339              	
 2340              	/*******************************************
ARM GAS  tinyBasic.s 			page 67


 2341              	  BASIC: ASC(string|char)
 2342              	  return ASCII code of char of first char 
 2343              	  of string 
 2344              	*******************************************/
 2345 0052 00BF     	    _FUNC ascii
 2346 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2347 0058 00B5FFF7 	    _CALL expect 
 2347      FEFF5DF8 
 2347      04EB
 2348 0062 00B5FFF7 	    _CALL next_token 
 2348      FEFF5DF8 
 2348      04EB
 2349 006c 0228     	    cmp r0,#TK_QSTR
 2350 006e 03D0     	    beq 2f 
 2351 0070 0328     	    cmp r0,#TK_CHAR 
 2352 0072 7FF4FEAF 	    bne syntax_error 
 2353 0076 00E0     	    b 9f 
 2354 0078 0978     	2:  ldrb r1,[r1]
 2355 007a 4CF8041D 	9:  _PUSH r1 
 2356 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2357 0082 00B5FFF7 	    _CALL expect 
 2357      FEFF5DF8 
 2357      04EB
 2358 008c 4FF00F00 	    mov r0,#TK_INTGR 
 2359 0090 5CF8041B 	    _POP r1 
 2360 0094 7047     	    _RET
 2361              	
 2362 0096 00BF     	    _FUNC autorun
 2363 0098 7047     	    _RET
 2364              	
 2365              	/*******************************************
 2366              	  BASIC: AWU time_sleep  
 2367              	  enable LSI and IWDG and place MCU in 
 2368              	  deep sleep. IDWG wakeup MCU 
 2369              	******************************************/
 2370 009a 00BF     	    _FUNC awu
 2371 009c 00B5FFF7 	    _CALL arg_list
 2371      FEFF5DF8 
 2371      04EB
 2372 00a6 0128     	    cmp r0,#1 
 2373 00a8 7FF4FEAF 	    bne syntax_error 
 2374 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2374      C4F20201 
 2375 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2376              	// enable LSI 
 2377 00b6 80F00100 	    eor r0,#1
 2378 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2379              	// wait for LSIRDY 
 2380 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2381 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2382 00c2 FBD0     	    beq 1b 
 2383              	// configure IWDG
 2384              	// compute values for IWDG_PR and IWDG_RLR 
 2385 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2386 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2387 00cc 03FB02F2 	    mul r2,r3 
 2388 00d0 83EA0303 	    eor r3,r3
ARM GAS  tinyBasic.s 			page 68


 2389 00d4 B2F5005F 	2:  cmp r2,#8192 
 2390 00d8 04D4     	    bmi 3f 
 2391 00da 4FEA5202 	    lsr r2,#1 
 2392 00de 03F10103 	    add r3,#1
 2393 00e2 F7E7     	    b 2b
 2394              	// initialize IWDG      
 2395 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2395      C4F20001 
 2396 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2397 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2398 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2399 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2400 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2401 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2402 00fc 00F04CBF 	    b sleep // place MCU in deep sleep
 2403 0100 7047     	    _RET
 2404              	
 2405              	/********************************************
 2406              	  BASIC: BIT(expr)
 2407              	  expr must be between 0..31 and is used 
 2408              	  to create 1 bit mask at that position
 2409              	*******************************************/
 2410 0102 00BF     	    _FUNC bitmask
 2411 0104 00B5FFF7 	    _CALL func_args
 2411      FEFF5DF8 
 2411      04EB
 2412 010e 0128     	    cmp r0,#1 
 2413 0110 7FF4FEAF 	    bne syntax_error 
 2414 0114 5CF8040B 	    _POP r0
 2415 0118 4FF00101 	    mov r1,#1
 2416 011c 01FA00F1 	    lsl r1,r0 
 2417 0120 4FF00F00 	9:  mov r0,#TK_INTGR
 2418 0124 7047     	    _RET 
 2419              	
 2420              	  
 2421              	  /*********************************
 2422              	   BASIC: BRES adr, mask   
 2423              	   reset bits [adr]= [adr] & ~mask  
 2424              	   input:
 2425              	     none 
 2426              	    output;
 2427              	      none 
 2428              	    use:
 2429              	      T1   temp
 2430              	      T2   temp 
 2431              	*******************************/     
 2432 0126 00BF     	  _FUNC bit_reset
 2433 0128 00B5FFF7 	    _CALL arg_list 
 2433      FEFF5DF8 
 2433      04EB
 2434 0132 0228     	    cmp r0,#2 
 2435 0134 01D0     	    beq 1f 
 2436 0136 FFF7FEBF 	    b syntax_error 
 2437 013a 5CF8041B 	1:  _POP r1 //mask 
 2438 013e 5CF8040B 	    _POP r0 //address 
 2439 0142 D0F80090 	    ldr T2,[r0] 
 2440 0146 81F0FF31 	    eor r1,#-1 // ~mask 
ARM GAS  tinyBasic.s 			page 69


 2441 014a 01EA0901 	    and r1,T2
 2442 014e 0160     	    str r1,[r0]
 2443 0150 7047     	    _RET  
 2444              	
 2445              	
 2446              	/*********************************
 2447              	   BASIC: BSET adr, mask   
 2448              	   reset bits [adr]= [adr] & ~mask  
 2449              	   input:
 2450              	      none 
 2451              	    output;
 2452              	      none 
 2453              	    use:
 2454              	      T1   temp
 2455              	      T2   temp  
 2456              	*******************************/     
 2457 0152 00BF     	    _FUNC bit_set
 2458 0154 00B5FFF7 	    _CALL arg_list 
 2458      FEFF5DF8 
 2458      04EB
 2459 015e 0228     	    cmp r0,#2 
 2460 0160 01D0     	    beq 1f 
 2461 0162 FFF7FEBF 	    b syntax_error 
 2462 0166 5CF8041B 	1:  _POP r1 //mask 
 2463 016a 5CF8040B 	    _POP r0 //address 
 2464 016e D0F80090 	    ldr T2,[r0] 
 2465 0172 41EA0901 	    orr r1,T2
 2466 0176 0160     	    str r1,[r0]
 2467 0178 7047     	    _RET 
 2468              	
 2469              	  /*********************************
 2470              	   BASIC: BTOGL adr, mask   
 2471              	   reset bits [adr]= [adr] & ~mask  
 2472              	   input:
 2473              	     r0    adr 
 2474              	     r1    mask 
 2475              	    output;
 2476              	      none 
 2477              	    use:
 2478              	      T1   temp
 2479              	      T2   temp  
 2480              	*******************************/     
 2481 017a 00BF     	  _FUNC bit_toggle
 2482 017c 00B5FFF7 	    _CALL arg_list 
 2482      FEFF5DF8 
 2482      04EB
 2483 0186 0228     	    cmp r0,#2 
 2484 0188 01D0     	    beq 1f 
 2485 018a FFF7FEBF 	    b syntax_error 
 2486 018e 5CF8041B 	1:  _POP r1 //mask 
 2487 0192 5CF8040B 	    _POP r0 //address 
 2488 0196 D0F80090 	    ldr T2,[r0] 
 2489 019a 81EA0901 	    eor r1,T2
 2490 019e 0160     	    str r1,[r0]
 2491 01a0 7047     	    _RET  
 2492              	
 2493              	/********************************
ARM GAS  tinyBasic.s 			page 70


 2494              	  BASIC: BTEST(addr,bit)
 2495              	  return bit state at address
 2496              	********************************/
 2497 01a2 00BF     	    _FUNC bit_test
 2498 01a4 00B5FFF7 	    _CALL func_args
 2498      FEFF5DF8 
 2498      04EB
 2499 01ae 0228     	    cmp r0,#2 
 2500 01b0 7FF4FEAF 	    bne syntax_error 
 2501 01b4 5CF8041B 	    _POP r1
 2502 01b8 4FF00100 	    mov r0,#1
 2503 01bc 01F01F01 	    and r1,#31  
 2504 01c0 21B1     	1:  cbz r1, 2f
 2505 01c2 4FEA4000 	    lsl r0,#1
 2506 01c6 A1F10101 	    sub r1,#1
 2507 01ca F9E7     	    b 1b 
 2508 01cc 5CF8041B 	2:  _POP r1
 2509 01d0 0968     	    ldr r1,[r1]
 2510 01d2 01EA0001 	    and r1,r0 
 2511 01d6 09B1     	    cbz r1,9f 
 2512 01d8 4FF00101 	    mov r1,#1
 2513 01dc 4FF00F00 	9:  mov r0,#TK_INTGR    
 2514 01e0 7047     	    _RET 
 2515              	
 2516              	/*********************************
 2517              	  BASIC: CHAR(expr)
 2518              	  convert expr in character 
 2519              	********************************/
 2520 01e2 00BF     	    _FUNC char
 2521 01e4 00B5FFF7 	    _CALL func_args
 2521      FEFF5DF8 
 2521      04EB
 2522 01ee 0128     	    cmp r0,#1
 2523 01f0 7FF4FEAF 	    bne syntax_error 
 2524 01f4 5CF8041B 	    _POP r1 
 2525 01f8 01F07F01 	    and r1,#127 
 2526 01fc 4FF00300 	    mov r0,#TK_CHAR
 2527 0200 7047     	    _RET 
 2528              	
 2529              	/**************************
 2530              	  BASIC: DATALN expr 
 2531              	  set data pointer to line#
 2532              	  specified by expr. 
 2533              	  if line# not valid program 
 2534              	  end with error.
 2535              	  use:
 2536              	
 2537              	**************************/
 2538 0202 00BF     	    _FUNC data_line
 2539 0204 206C10F0 	    _RTO // run time only 
 2539      010F03D1 
 2539      4FF00700 
 2539      FFF7FEBF 
 2540 0214 00B5FFF7 	    _CALL expression 
 2540      FEFF5DF8 
 2540      04EB
 2541 021e 0F28     	    cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 71


 2542 0220 7FF4FEAF 	    bne syntax_error
 2543 0224 0846     	    mov r0,r1 
 2544 0226 00B5FFF7 	    _CALL search_lineno
 2544      FEFF5DF8 
 2544      04EB
 2545 0230 0029     	    cmp r1,#0
 2546 0232 03D0     	    beq 1f 
 2547 0234 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2548 0238 FFF7FEBF 	    b syntax_error 
 2549 023c C178     	1:  ldrb r1,[r0,#3]
 2550 023e 0B29     	    cmp r1,#TK_CMD 
 2551 0240 F8D1     	    bne 0b
 2552 0242 0179     	    ldrb r1,[r0,#4]
 2553 0244 0D29     	    cmp r1,#DATA_IDX 
 2554 0246 F5D1     	    bne 0b  
 2555 0248 E060     	    str r0,[UPP,#DATAPTR]
 2556 024a 8178     	    ldrb r1,[r0,#2]
 2557 024c 6161     	    str r1,[UPP,#DATALEN]
 2558 024e 4FF00501 	    mov r1,#5 // position of first data item  
 2559 0252 2161     	    str r1,[UPP,#DATA]
 2560 0254 7047     	    _RET 
 2561              	
 2562              	/*****************************
 2563              	  BASIC: READ 
 2564              	  read next data item 
 2565              	  the value can be assigned to
 2566              	  variable or used in expression
 2567              	*****************************/
 2568 0256 00BF     	    _FUNC read
 2569 0258 206C10F0 	    _RTO
 2569      010F03D1 
 2569      4FF00700 
 2569      FFF7FEBF 
 2570 0268 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2571 026a E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2572 026c 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2573 026e 8242     	    cmp r2,r0
 2574 0270 0ED0     	    beq seek_next
 2575 0272 885C     	1:  ldrb r0,[r1,r2]
 2576 0274 02F10102 	    add r2,#1
 2577 0278 0028     	    cmp r0,#TK_NONE
 2578 027a 09D0     	    beq seek_next
 2579 027c 0828     	    cmp r0,#TK_COMMA
 2580 027e F8D0     	    beq 1b  
 2581 0280 0F28     	    cmp r0,#TK_INTGR 
 2582 0282 7FF4FEAF 	    bne syntax_error  
 2583 0286 8958     	    ldr r1,[r1,r2]
 2584 0288 02F10402 	    add r2,#4
 2585 028c 2261     	    str r2,[UPP,#DATA]
 2586 028e 12E0     	    b 9f  
 2587              	seek_next: // is next line data ?
 2588 0290 8878     	    ldrb r0,[R1,#2]
 2589 0292 0144     	    add r1,r0 
 2590 0294 C878     	    ldrb r0,[R1,#3]
 2591 0296 0B28     	    cmp r0,#TK_CMD
 2592 0298 09D1     	    bne 2f 
 2593 029a 0879     	    ldrb r0,[r1,#4]
ARM GAS  tinyBasic.s 			page 72


 2594 029c 0D28     	    cmp r0,#DATA_IDX 
 2595 029e 06D1     	    bne 2f 
 2596 02a0 E160     	    str r1,[UPP,#DATAPTR]
 2597 02a2 8878     	    ldrb r0,[r1,#2]
 2598 02a4 6061     	    str  r0,[UPP,#DATALEN]
 2599 02a6 4FF00502 	    mov r2,#5 
 2600 02aa 2261     	    str r2,[UPP,#DATA]
 2601 02ac E1E7     	    b 1b 
 2602 02ae 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2603 02b2 FFF7FEBF 	    b tb_error 
 2604 02b6 7047     	9:  _RET 
 2605              	
 2606              	/********************************
 2607              	  BASIC: RESTORE 
 2608              	  seek first data line 
 2609              	********************************/
 2610              	    _FUNC restore
 2611 02b8 206C10F0 	    _RTO 
 2611      010F03D1 
 2611      4FF00700 
 2611      FFF7FEBF 
 2612 02c8 216B     	    ldr r1,[UPP,#TXTBGN]
 2613 02ca 606B     	1:  ldr r0,[UPP,#TXTEND]
 2614 02cc 0FD0     	    beq no_data_line 
 2615 02ce 0879     	    ldrb r0,[r1,#4]
 2616 02d0 0D28     	    cmp r0,#DATA_IDX
 2617 02d2 09D1     	    bne try_next_line
 2618 02d4 C878     	    ldrb r0,[r1,#3]
 2619 02d6 0B28     	    cmp r0,#TK_CMD
 2620 02d8 06D1     	    bne try_next_line
 2621              	// this a the first data line 
 2622 02da E160     	    str r1,[UPP,#DATAPTR]
 2623 02dc 8878     	    ldrb r0,[r1,#2]
 2624 02de 6061     	    str r0,[UPP,#DATALEN]
 2625 02e0 4FF00500 	    mov r0,#5 
 2626 02e4 2061     	    str r0,[UPP,#DATA]
 2627 02e6 07E0     	    b 9f
 2628              	try_next_line:
 2629 02e8 8878     	    ldrb r0,[r1,#2]
 2630 02ea 0144     	    add r1,r0 
 2631 02ec EDE7     	    b 1b 
 2632              	no_data_line:
 2633 02ee 80EA0000 	    eor r0,r0 
 2634 02f2 E060     	    str r0,[UPP,#DATAPTR]
 2635 02f4 2061     	    str r0,[UPP,#DATA]
 2636 02f6 6061     	    str r0,[UPP,#DATALEN]
 2637 02f8 7047     	9:  _RET 
 2638              	
 2639              	/***********************************
 2640              	  BASIC: DEC 
 2641              	  switch base to decimal 
 2642              	***********************************/
 2643 02fa 00BF     	    _FUNC dec_base
 2644 02fc 4FF00A00 	    mov r0,#10
 2645 0300 A061     	    str r0,[UPP,#BASE]
 2646 0302 7047     	    _RET 
 2647              	
ARM GAS  tinyBasic.s 			page 73


 2648              	/***************************************
 2649              	  BASIC: DO 
 2650              	  initialize a DO..UNTIL loop 
 2651              	***************************************/
 2652              	    _FUNC do_loop
 2653 0304 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2654 0308 7047     	    _RET 
 2655              	
 2656              	
 2657              	/****************************************
 2658              	  BASIC: DUMP adr, count 
 2659              	    command line only  
 2660              	    print memory content in hexadecimal 
 2661              	    16 bytes per row 
 2662              	    ouput:
 2663              	      none 
 2664              	    use:
 2665              	      r2   byte counter  
 2666              	****************************************/
 2667 030a 00BF     	    _FUNC dump 
 2668 030c 04B4     	    push {r2}
 2669 030e 226C     	    ldr r2,[UPP,#FLAGS]
 2670 0310 12F0010F 	    tst r2,#FRUN 
 2671 0314 03D0     	    beq 0f
 2672 0316 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2673 031a FFF7FEBF 	    b tb_error  
 2674 031e 00B5FFF7 	0:  _CALL arg_list 
 2674      FEFF5DF8 
 2674      04EB
 2675 0328 0228     	    cmp r0,#2
 2676 032a 7FF4FEAF 	    bne syntax_error 
 2677 032e 5CF8042B 	    _POP r2   // count 
 2678 0332 5CF8040B 	    _POP  r0  // adr 
 2679              	dump01:
 2680 0336 00B500F0 	    _CALL print_dump_header 
 2680      0EF85DF8 
 2680      04EB
 2681 0340 4FF01001 	1:  mov r1,#16
 2682 0344 00B5FFF7 	    _CALL prt_row 
 2682      FEFF5DF8 
 2682      04EB
 2683 034e 103A     	    subs r2,#16 
 2684 0350 F6D5     	    bpl 1b 
 2685 0352 04BC     	2:  pop {r2}
 2686 0354 7047     	    _RET 
 2687              	
 2688              	/********************************
 2689              	   print_dump_header
 2690              	********************************/
 2691 0356 00BF     	    _FUNC print_dump_header
 2692 0358 2DE90103 	    push {r0,T1,T2}
 2693 035c 4FF00C00 	    mov r0,#12 
 2694 0360 00B5FFF7 	    _CALL cursor_x 
 2694      FEFF5DF8 
 2694      04EB
 2695 036a 4FF00000 	    mov r0,#0
 2696 036e 4FF01009 	    mov T2,#16
ARM GAS  tinyBasic.s 			page 74


 2697 0372 8046     	1:  mov T1,r0 
 2698 0374 00B5FFF7 	    _CALL print_hex 
 2698      FEFF5DF8 
 2698      04EB
 2699 037e 08F10100 	    add r0,T1,#1  
 2700 0382 4845     	    cmp r0,T2 
 2701 0384 F5D4     	    bmi 1b 
 2702 0386 00B5FFF7 	    _CALL cr
 2702      FEFF5DF8 
 2702      04EB
 2703 0390 4FF03D00 	    mov r0,#'='
 2704 0394 4FF04F08 	    mov T1,#79
 2705 0398 00B5FFF7 	2:  _CALL uart_putc
 2705      FEFF5DF8 
 2705      04EB
 2706 03a2 B8F10108 	    subs T1,#1 
 2707 03a6 F7D1     	    bne 2b     
 2708 03a8 00B5FFF7 	    _CALL cr
 2708      FEFF5DF8 
 2708      04EB
 2709 03b2 BDE80103 	    pop {r0,T1,T2}
 2710 03b6 7047     	    _RET 
 2711              	
 2712              	
 2713              	/*******************************
 2714              	  BASIC: END 
 2715              	  exit program 
 2716              	******************************/ 
 2717              	    _FUNC cmd_end
 2718 03b8 FFF7FEBF 	    b warm_start 
 2719 03bc 7047     	    _RET 
 2720              	
 2721              	/**************************************************
 2722              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2723              	  introdure FOR...NEXT loop 
 2724              	**************************************************/
 2725 03be 00BF     	    _FUNC for
 2726 03c0 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2727 03c4 4FF00107 	    mov INCR,#1
 2728 03c8 00B5FFF7 	    _CALL next_token
 2728      FEFF5DF8 
 2728      04EB
 2729 03d2 0428     	    cmp r0,#TK_VAR
 2730 03d4 7FF4FEAF 	    bne syntax_error
 2731 03d8 02B4     	    push {r1} 
 2732 03da 00B500F0 	    _CALL let_var 
 2732      4DF95DF8 
 2732      04EB
 2733 03e4 20BC     	    pop {VADR}
 2734 03e6 4FEA8505 	    lsl VADR,#2
 2735 03ea 2544     	    add VADR,UPP 
 2736 03ec 05F16005 	    add VADR,#VARS 
 2737 03f0 7047     	    _RET 
 2738              	
 2739              	/***************************************
 2740              	  BASIC: TO expr 
 2741              	  set limit of FOR...NEXT loop 
ARM GAS  tinyBasic.s 			page 75


 2742              	**************************************/
 2743 03f2 00BF     	    _FUNC to
 2744 03f4 00B5FFF7 	    _CALL expression 
 2744      FEFF5DF8 
 2744      04EB
 2745 03fe 0F28     	    cmp r0,#TK_INTGR
 2746 0400 7FF4FEAF 	    bne syntax_error 
 2747 0404 0E46     	    mov LIMIT,r1
 2748              	    // save loop back parameters 
 2749 0406 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2750 040a 7047     	    _RET 
 2751              	
 2752              	/********************************************
 2753              	  BASIC: STEP expr 
 2754              	  set increment for FOR...NEXT loop 
 2755              	********************************************/
 2756              	    _FUNC step
 2757 040c 00B5FFF7 	    _CALL expression 
 2757      FEFF5DF8 
 2757      04EB
 2758 0416 0F28     	    cmp r0,#TK_INTGR
 2759 0418 7FF4FEAF 	    bne syntax_error 
 2760 041c 0F46     	    mov INCR,r1
 2761              	    // replace parameters left by TO
 2762 041e 8CE8000C 	    stmia DP, {IN,BPTR}
 2763 0422 7047     	    _RET 
 2764              	
 2765              	/********************************************
 2766              	  BASIC: NEXT var 
 2767              	  incrment FOR...NEXT loop variable
 2768              	  exit if variable cross LIMIT 
 2769              	********************************************/
 2770              	    _FUNC next
 2771 0424 00B5FFF7 	    _CALL next_token 
 2771      FEFF5DF8 
 2771      04EB
 2772 042e 0428     	    cmp r0,#TK_VAR 
 2773 0430 7FF4FEAF 	    bne syntax_error 
 2774 0434 4FEA8101 	    lsl r1,#2 
 2775 0438 2144     	    add r1,UPP 
 2776 043a 01F16001 	    add r1,#VARS 
 2777 043e A942     	    cmp r1,VADR
 2778 0440 7FF4FEAF 	    bne syntax_error 
 2779 0444 2868     	    ldr r0,[VADR]
 2780 0446 3844     	    add r0,INCR 
 2781 0448 2860     	    str r0,[VADR]
 2782 044a 002F     	    cmp INCR,#0
 2783 044c 02D4     	    bmi 2f
 2784 044e B042     	    cmp r0,LIMIT 
 2785 0450 02DC     	    bgt 8f  
 2786 0452 07E0     	    b 9f  
 2787 0454 B042     	2:  cmp r0,LIMIT 
 2788 0456 05DA     	    bge 9f  
 2789              	8: // exit for...next
 2790              	  //  drop branch parameters
 2791 0458 4FF00800 	    _DROP 2
 2791      8444
ARM GAS  tinyBasic.s 			page 76


 2792              	  // restore outer loop parameters
 2793 045e BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2794 0462 7047     	    _RET 
 2795 0464 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2796 0468 9BF80200 	    ldrb r0,[BPTR,#2]
 2797 046c 6060     	    str r0,[UPP,#COUNT]
 2798 046e 00B5FFF7 	    _CALL show_trace 
 2798      FEFF5DF8 
 2798      04EB
 2799 0478 7047     	    _RET 
 2800              	
 2801              	/*********************************
 2802              	  BASIC: GOSUB expr 
 2803              	  call a subroutine at line# 
 2804              	*********************************/
 2805 047a 00BF     	    _FUNC gosub
 2806 047c 00B5FFF7 	    _CALL expression
 2806      FEFF5DF8 
 2806      04EB
 2807 0486 0F28     	    cmp r0,#TK_INTGR 
 2808 0488 7FF4FEAF 	    bne syntax_error 
 2809 048c 0846     	    mov r0,r1 
 2810 048e 00B5FFF7 	    _CALL search_lineno  
 2810      FEFF5DF8 
 2810      04EB
 2811 0498 19B1     	    cbz r1,1f 
 2812 049a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2813 049e FFF7FEBF 	    b tb_error 
 2814 04a2 2CE9000C 	1:  stmdb DP!,{IN,BPTR}
 2815 04a6 8346     	    mov BPTR,r0 
 2816 04a8 4FF0030A 	    mov IN,#3 
 2817 04ac 9BF80200 	    ldrb r0,[BPTR,#2]
 2818 04b0 6060     	    str r0,[UPP,#COUNT]
 2819 04b2 00B5FFF7 	    _CALL show_trace 
 2819      FEFF5DF8 
 2819      04EB
 2820 04bc 7047     	    _RET 
 2821              	
 2822              	/**********************************
 2823              	  BASIC: RETURN 
 2824              	  leave a subroutine 
 2825              	*********************************/
 2826 04be 00BF     	    _FUNC return 
 2827 04c0 BCE8000C 	    ldmia DP!,{IN,BPTR}
 2828 04c4 9BF80200 	    ldrb r0,[BPTR,#2]
 2829 04c8 6060     	    str r0,[UPP,#COUNT]
 2830 04ca 00B5FFF7 	    _CALL show_trace 
 2830      FEFF5DF8 
 2830      04EB
 2831 04d4 7047     	    _RET 
 2832              	
 2833              	/**********************************
 2834              	  BASIC: GOTO expr 
 2835              	  go to line # 
 2836              	  use:
 2837              	
 2838              	**********************************/
ARM GAS  tinyBasic.s 			page 77


 2839 04d6 00BF     	    _FUNC goto
 2840 04d8 00B5FFF7 	    _CALL expression 
 2840      FEFF5DF8 
 2840      04EB
 2841 04e2 0F28     	    cmp r0,#TK_INTGR 
 2842 04e4 7FF4FEAF 	    bne syntax_error 
 2843 04e8 71B1     	    cbz r1,9f 
 2844 04ea 0846     	1:  mov r0,r1 
 2845 04ec 00B5FFF7 	    _CALL search_lineno 
 2845      FEFF5DF8 
 2845      04EB
 2846 04f6 19B1     	    cbz r1,2f 
 2847 04f8 4FF00500 	    mov r0,#ERR_NO_LINE 
 2848 04fc FFF7FEBF 	    b tb_error 
 2849 0500 8346     	2:  mov BPTR,r0
 2850 0502 9BF80200 	    ldrb r0,[BPTR,#2]
 2851 0506 6060     	    str r0,[UPP,#COUNT]
 2852 0508 4FF0030A 	9:  mov IN,#3
 2853 050c 00B5FFF7 	    _CALL show_trace 
 2853      FEFF5DF8 
 2853      04EB
 2854 0516 7047     	    _RET 
 2855              	
 2856              	/***************************************
 2857              	  BASIC: HEX 
 2858              	  set numeric base to hexadecimal 
 2859              	***************************************/
 2860              	    _FUNC hex_base
 2861 0518 4FF01000 	    mov r0,#16 
 2862 051c A061     	    str r0,[UPP,#BASE]
 2863 051e 7047     	    _RET 
 2864              	
 2865              	/**********************************************
 2866              	  BASIC: IF relation THEN statement
 2867              	  execute statement only if relation is true
 2868              	*********************************************/
 2869              	    _FUNC if
 2870 0520 00B5FFF7 	    _CALL relation 
 2870      FEFF5DF8 
 2870      04EB
 2871 052a 09B9     	    cbnz r1,9f 
 2872 052c D4F804A0 	    ldr IN,[UPP,#COUNT]
 2873 0530 7047     	9:  _RET 
 2874              	
 2875              	/*******************************************************
 2876              	  BASIC: THEN statement
 2877              	  statements following THEN are executed if relation is !=0
 2878              	  optional, retained for compatibility.
 2879              	******************************************************/
 2880 0532 00BF     	    _FUNC then 
 2881              	// do nothing 
 2882 0534 7047     	    _RET
 2883              	
 2884              	/****************************************
 2885              	  BASIC: INPUT [string]var [,[string]var]+
 2886              	  prompt user for variable value
 2887              	***************************************/
ARM GAS  tinyBasic.s 			page 78


 2888 0536 00BF     	     _FUNC input_var
 2889 0538 2DE90401 	    push {r2,T1}
 2890 053c 00B5FFF7 	1:  _CALL next_token 
 2890      FEFF5DF8 
 2890      04EB
 2891 0546 0228     	    cmp r0,#2
 2892 0548 67D4     	    bmi 8f 
 2893 054a 0228     	    cmp r0,#TK_QSTR 
 2894 054c 12D1     	    bne 2f 
 2895 054e 0846     	    mov r0,r1
 2896 0550 DFF8D810 	    ldr r1,str_buffer
 2897 0554 00B5FFF7 	    _CALL strcpy
 2897      FEFF5DF8 
 2897      04EB
 2898 055e 4FF00400 	    mov r0,#TK_VAR   
 2899 0562 00B5FFF7 	    _CALL expect 
 2899      FEFF5DF8 
 2899      04EB
 2900 056c 8846     	    mov T1,r1 
 2901 056e DFF8BC00 	    ldr r0,str_buffer 
 2902 0572 08E0     	    b 3f 
 2903 0574 0428     	2:  cmp r0,#TK_VAR 
 2904 0576 7FF4FEAF 	    bne syntax_error     
 2905 057a 8846     	    mov T1,r1 
 2906 057c 01F14100 	    add r0,r1,#'A' 
 2907 0580 2A49     	    ldr r1,str_buffer
 2908 0582 0880     	    strh r0,[r1]
 2909 0584 0846     	    mov r0,r1 
 2910 0586 00B5FFF7 	3:  _CALL uart_puts  
 2910      FEFF5DF8 
 2910      04EB
 2911 0590 4FF03D00 	    mov r0,#'='
 2912 0594 00B5FFF7 	    _CALL uart_putc
 2912      FEFF5DF8 
 2912      04EB
 2913 059e DFF88800 	    ldr r0,input_buffer
 2914 05a2 4FF02201 	    mov r1,#34 
 2915 05a6 00B5FFF7 	    _CALL readln
 2915      FEFF5DF8 
 2915      04EB
 2916 05b0 31B3     	    cbz r1,6f
 2917 05b2 0178     	    ldrb r1,[r0]
 2918 05b4 01B4     	    push {r0}
 2919 05b6 0846     	    mov r0,r1
 2920 05b8 00B5FFF7 	    _CALL is_alpha 
 2920      FEFF5DF8 
 2920      04EB
 2921 05c2 01BC     	    pop {r0}
 2922 05c4 02D0     	    beq 3f 
 2923 05c6 01F05F01 	    and r1,#0x5f // uppercase  
 2924 05ca 19E0     	    b 6f 
 2925 05cc 2429     	3:  cmp r1,#'$'
 2926 05ce 04D1     	    bne 3f 
 2927 05d0 4FF01001 	    mov r1,#16
 2928 05d4 00F10100 	    add r0,#1  
 2929 05d8 08E0     	    b 5f 
 2930 05da 2629     	3:  cmp r1,#'&' 
ARM GAS  tinyBasic.s 			page 79


 2931 05dc 04D1     	    bne 4f 
 2932 05de 4FF00201 	    mov r1,#2
 2933 05e2 00F10100 	    add r0,#1 
 2934 05e6 01E0     	    b 5f 
 2935 05e8 4FF00A01 	4:  mov r1,#10 
 2936 05ec 00B5FFF7 	5:  _CALL atoi 
 2936      FEFF5DF8 
 2936      04EB
 2937 05f6 18B9     	    cbnz r0,6f
 2938 05f8 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 2939 05fc FFF7FEBF 	    b tb_error
 2940 0600 4046     	6:  mov r0,T1 
 2941 0602 00B5FFF7 	    _CALL set_var
 2941      FEFF5DF8 
 2941      04EB
 2942 060c 00B5FFF7 	    _CALL next_token
 2942      FEFF5DF8 
 2942      04EB
 2943 0616 0828     	    cmp r0,#TK_COMMA 
 2944 0618 90D0     	    beq 1b 
 2945 061a D4F800A0 	8:  _UNGET_TOKEN          
 2945      D4F808B0 
 2946 0622 BDE80401 	9:  pop {r2,T1}       
 2947 0626 7047     	    _RET 
 2948 0628 00000000 	input_buffer: .word _tib 
 2949 062c 00000000 	str_buffer: .word _pad 
 2950              	
 2951              	
 2952              	/*****************************************
 2953              	  BASIC: INVERT(expr)
 2954              	  return 1's complement of expr
 2955              	****************************************/
 2956              	    _FUNC invert
 2957 0630 00B5FFF7 	    _CALL func_args
 2957      FEFF5DF8 
 2957      04EB
 2958 063a 0128     	    cmp r0,#1 
 2959 063c 7FF4FEAF 	    bne syntax_error
 2960 0640 5CF8041B 	    _POP r1  
 2961 0644 6FEA0101 	    mvn r1,r1
 2962 0648 4FF00F00 	    mov r0,#TK_INTGR
 2963 064c 7047     	    _RET 
 2964              	
 2965              	/*************************************
 2966              	  BASIC: KEY 
 2967              	  wait for a character from console
 2968              	*************************************/
 2969 064e 00BF     	    _FUNC key
 2970 0650 00B5FFF7 	    _CALL uart_getc
 2970      FEFF5DF8 
 2970      04EB
 2971 065a 0146     	    mov r1,r0
 2972 065c 4FF00300 	    mov r0,#TK_CHAR 
 2973 0660 7047     	    _RET  
 2974              	
 2975              	/******************************
 2976              	  BASIC: [LET] var=expr 
ARM GAS  tinyBasic.s 			page 80


 2977              	         [LET] @(expr)=expr
 2978              	  input:
 2979              	    none 
 2980              	  output:
 2981              	    none 
 2982              	  use:
 2983              	
 2984              	****************************/         
 2985 0662 00BF     	    _FUNC let
 2986 0664 00B5FFF7 	    _CALL next_token 
 2986      FEFF5DF8 
 2986      04EB
 2987 066e 0428     	    cmp r0,#TK_VAR
 2988 0670 03D0     	    beq let_var 
 2989 0672 0528     	    cmp r0,#TK_ARRAY 
 2990 0674 07D0     	    beq let_array 
 2991 0676 FFF7FEBF 	    b syntax_error 
 2992              	let_var:
 2993 067a 4FEA8101 	    lsl r1,#2
 2994 067e 04F16000 	    add r0,UPP,#VARS
 2995 0682 0844     	    add r0,r1
 2996 0684 1FE0     	    b 1f 
 2997              	let_array: 
 2998 0686 4FF00600 	    mov r0,#TK_LPAREN
 2999 068a 00B5FFF7 	    _CALL expect 
 2999      FEFF5DF8 
 2999      04EB
 3000 0694 00B5FFF7 	    _CALL expression
 3000      FEFF5DF8 
 3000      04EB
 3001 069e 0F28     	    cmp r0,#TK_INTGR 
 3002 06a0 7FF4FEAF 	    bne syntax_error
 3003 06a4 4CF8041D 	    _PUSH r1 
 3004 06a8 4FF00700 	    mov r0,#TK_RPAREN
 3005 06ac 00B5FFF7 	    _CALL expect 
 3005      FEFF5DF8 
 3005      04EB
 3006 06b6 5CF8041B 	    _POP r1 
 3007 06ba D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3008 06be 4FEA8101 	    lsl r1,#2 
 3009 06c2 A0EB0100 	    sub r0,r1 
 3010 06c6 4CF8040D 	1:  _PUSH r0 
 3011 06ca 4FF03200 	    mov r0,#TK_EQUAL 
 3012 06ce 00B5FFF7 	    _CALL expect 
 3012      FEFF5DF8 
 3012      04EB
 3013 06d8 00B5FFF7 	    _CALL expression   
 3013      FEFF5DF8 
 3013      04EB
 3014 06e2 0F28     	    cmp r0,#TK_INTGR
 3015 06e4 7FF4FEAF 	    bne syntax_error   
 3016 06e8 5CF8040B 	2:  _POP r0 
 3017 06ec 0160     	    str r1,[r0]
 3018 06ee 7047     	    _RET  
 3019              	
 3020              	/***************************************
 3021              	  BASIC: LIST [[first]-last]
ARM GAS  tinyBasic.s 			page 81


 3022              	  use:
 3023              	    r2   first line# 
 3024              	    r3   last line#
 3025              	    T1   *line 
 3026              	    T2   TXTEND 
 3027              	**************************************/  
 3028              	    _FUNC list
 3029 06f0 206C10F0 	    _CLO
 3029      010F03D0 
 3029      4FF00700 
 3029      FFF7FEBF 
 3030 0700 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3031 0704 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3032 0708 B8F80020 	    ldrh r2,[T1]
 3033 070c 4FF40043 	    mov r3,#32768
 3034 0710 00B5FFF7 	    _CALL next_token 
 3034      FEFF5DF8 
 3034      04EB
 3035 071a 10B3     	    cbz r0,6f 
 3036 071c 0F28     	    cmp r0,#TK_INTGR
 3037 071e 09D1     	    bne 1f 
 3038 0720 0A46     	    mov r2,r1 // first line
 3039 0722 00B5FFF7 	    _CALL next_token
 3039      FEFF5DF8 
 3039      04EB
 3040 072c 0028     	    cmp r0,#TK_NONE 
 3041 072e 01D1     	    bne 1f 
 3042 0730 1346     	    mov r3,r2 
 3043 0732 0CE0     	    b 4f 
 3044 0734 1128     	1:  cmp r0,#TK_MINUS 
 3045 0736 7FF4FEAF 	    bne syntax_error 
 3046 073a 00B5FFF7 	    _CALL next_token 
 3046      FEFF5DF8 
 3046      04EB
 3047 0744 18B1     	    cbz r0,4f 
 3048 0746 0F28     	    cmp r0,#TK_INTGR
 3049 0748 7FF4FEAF 	    bne syntax_error  
 3050 074c 0B46     	    mov r3,r1 
 3051              	4:  // skip lines below r2 
 3052 074e B8F80000 	    ldrh r0,[T1]
 3053 0752 9042     	    cmp r0,r2 
 3054 0754 05D5     	    bpl 6f 
 3055 0756 98F80200 	    ldrb r0,[T1,#2]
 3056 075a 8044     	    add T1,r0
 3057 075c C845     	    cmp T1,T2 
 3058 075e F6D4     	    bmi 4b
 3059 0760 1AE0     	    b 9f 
 3060 0762 C845     	6:  cmp T1,T2  
 3061 0764 18D5     	    bpl 9f
 3062 0766 4046     	    mov r0,T1   
 3063 0768 DFF83010 	    ldr r1,out_buff 
 3064 076c 00B5FFF7 	    _CALL decompile_line 
 3064      FEFF5DF8 
 3064      04EB
 3065 0776 00B5FFF7 	    _CALL uart_puts 
 3065      FEFF5DF8 
 3065      04EB
ARM GAS  tinyBasic.s 			page 82


 3066 0780 00B5FFF7 	    _CALL cr 
 3066      FEFF5DF8 
 3066      04EB
 3067 078a 98F80200 	    ldrb r0,[T1,#2]
 3068 078e 8044     	    add T1,r0
 3069 0790 B8F80000 	    ldrh r0,[T1]
 3070 0794 9842     	    cmp r0,r3 
 3071 0796 E4DD     	    ble 6b 
 3072 0798 FFF7FEBF 	9:  b warm_start 
 3073 079c 00000000 	out_buff: .word _tib 
 3074              	
 3075              	/********************************
 3076              	  BASIC: LOG2(expr)
 3077              	  return log base 2 of expr 
 3078              	********************************/
 3079              	    _FUNC log2
 3080 07a0 00B5FFF7 	    _CALL func_args
 3080      FEFF5DF8 
 3080      04EB
 3081 07aa 0128     	    cmp r0,#1 
 3082 07ac 7FF4FEAF 	    bne syntax_error
 3083 07b0 5CF8040B 	    _POP r0 
 3084 07b4 B0FA80F1 	    clz r1,r0 
 3085 07b8 C1F11F01 	    rsb r1,#31
 3086 07bc 4FF00F00 	9:  mov r0,#TK_INTGR
 3087 07c0 7047     	    _RET 
 3088              	
 3089              	
 3090              	/****************************************
 3091              	  BASIC: LSHIFT(expr1,expr2)
 3092              	  shift right expr1 of expr2 bits 
 3093              	****************************************/
 3094 07c2 00BF     	    _FUNC lshift
 3095 07c4 00B5FFF7 	    _CALL func_args
 3095      FEFF5DF8 
 3095      04EB
 3096 07ce 0228     	    cmp r0,#2
 3097 07d0 7FF4FEAF 	    bne syntax_error 
 3098 07d4 BCE80300 	    ldmia DP!,{r0,r1}
 3099 07d8 01FA00F1 	    lsl r1,r0 
 3100 07dc 4FF00F00 	    mov r0,#TK_INTGR
 3101 07e0 7047     	    _RET 
 3102              	
 3103              	/***********************************
 3104              	  BASIC: NEW 
 3105              	  delete existing program in memory
 3106              	  and clear variables and RAM 
 3107              	***********************************/
 3108 07e2 00BF     	    _FUNC new
 3109 07e4 206C10F0 	    _CLO 
 3109      010F03D0 
 3109      4FF00700 
 3109      FFF7FEBF 
 3110 07f4 00B5FFF7 	    _CALL clear_basic 
 3110      FEFF5DF8 
 3110      04EB
 3111 07fe FFF7FEBF 	    b warm_start   
ARM GAS  tinyBasic.s 			page 83


 3112              	
 3113              	/************************************
 3114              	  BASIC: NOT relation  
 3115              	  invert logical value or relation
 3116              	************************************/
 3117 0802 00BF     	      _FUNC func_not
 3118 0804 00B5FFF7 	      _CALL relation 
 3118      FEFF5DF8 
 3118      04EB
 3119 080e 11B1     	      cbz r1,8f 
 3120 0810 81EA0101 	      eor r1,r1
 3121 0814 01E0     	      b 9f 
 3122 0816 4FF0FF31 	  8:  mov r1,#-1
 3123 081a 7047     	  9:  _RET 
 3124              	
 3125              	/******************************************
 3126              	  BASIC: OR(expr1,expr2)
 3127              	  binary OR between 2 expressions
 3128              	******************************************/
 3129              	    _FUNC bit_or
 3130 081c 00B5FFF7 	    _CALL func_args
 3130      FEFF5DF8 
 3130      04EB
 3131 0826 0228     	    cmp r0,#2
 3132 0828 7FF4FEAF 	    bne syntax_error
 3133 082c 5CF8040B 	    _POP r0 
 3134 0830 5CF8041B 	    _POP r1
 3135 0834 41EA0001 	    orr r1,r0 
 3136 0838 4FF00F00 	    mov r0,#TK_INTGR
 3137 083c 7047     	    _RET 
 3138              	
 3139              	/****************************************
 3140              	  BASIC: INP(\c) 
 3141              	  read gpio_idr (16 bits value) 
 3142              	***************************************/
 3143 083e 00BF     	    _FUNC inp 
 3144 0840 4FF00600 	    mov r0,#TK_LPAREN 
 3145 0844 00B5FFF7 	    _CALL expect 
 3145      FEFF5DF8 
 3145      04EB
 3146 084e 4FF00300 	    mov r0,#TK_CHAR 
 3147 0852 00B5FFF7 	    _CALL expect
 3147      FEFF5DF8 
 3147      04EB
 3148 085c 0846     	    mov r0,r1 
 3149 085e 00B5FFF7 	    _CALL upper 
 3149      FEFF5DF8 
 3149      04EB
 3150 0868 0246     	    mov r2,r0 
 3151 086a 4FF00700 	    mov r0,#TK_RPAREN
 3152 086e 00B5FFF7 	    _CALL expect 
 3152      FEFF5DF8 
 3152      04EB
 3153 0878 A2F14102 	    sub r2,#'A' 
 3154 087c 4FF48061 	    mov r1,0x400 
 3155 0880 02FB01F1 	    mul r1,r2
 3156 0884 40F60802 	    _MOV32 r2,(GPIOA_BASE_ADR+GPIO_IDR)
ARM GAS  tinyBasic.s 			page 84


 3156      C4F20102 
 3157 088c 0A44     	    add r2,r1 
 3158 088e 1168     	    ldr r1,[r2]
 3159 0890 4FF00F00 	    mov r0,#TK_INTGR
 3160 0894 7047     	    _RET 
 3161              	
 3162              	
 3163              	/****************************************
 3164              	  BASIC: OUT \c,expr1[,\c,expr2] 
 3165              	  output to gpio_odr expr lower 16 bits
 3166              	***************************************/
 3167 0896 00BF     	    _FUNC out
 3168 0898 4FF00300 	1:  mov r0,#TK_CHAR 
 3169 089c 00B5FFF7 	    _CALL expect 
 3169      FEFF5DF8 
 3169      04EB
 3170 08a6 0846     	    mov r0,r1
 3171 08a8 00B5FFF7 	    _CALL upper
 3171      FEFF5DF8 
 3171      04EB
 3172 08b2 0246     	    mov r2,r0 
 3173 08b4 4FF00800 	    mov r0,#TK_COMMA 
 3174 08b8 00B5FFF7 	    _CALL expect 
 3174      FEFF5DF8 
 3174      04EB
 3175 08c2 00B5FFF7 	    _CALL expression 
 3175      FEFF5DF8 
 3175      04EB
 3176 08cc A2F14102 	    sub r2,#'A'
 3177 08d0 4FF48063 	    mov r3,#0x400 
 3178 08d4 03FB02F2 	    mul r2,r3 
 3179 08d8 40F60C03 	    _MOV32 r3,(GPIOA_BASE_ADR+GPIO_ODR) // GPIO_ODR 
 3179      C4F20103 
 3180 08e0 1A44     	    add r2,r3
 3181 08e2 1180     	    strh r1,[r2]
 3182 08e4 00B5FFF7 	    _CALL next_token
 3182      FEFF5DF8 
 3182      04EB
 3183 08ee 0828     	    cmp r0,#TK_COMMA
 3184 08f0 D2D0     	    beq 1b 
 3185 08f2 D4F800A0 	    _UNGET_TOKEN
 3185      D4F808B0 
 3186 08fa 7047     	    _RET 
 3187              	
 3188              	/****************************************
 3189              	  BASIC: PAD 
 3190              	  return pad buffer address 
 3191              	****************************************/
 3192              	    _FUNC pad_ref
 3193 08fc 0149     	    ldr r1,pad_adr  
 3194 08fe 4FF00F00 	    mov r0,#TK_INTGR 
 3195 0902 7047     	    _RET 
 3196 0904 00000000 	pad_adr: .word _pad 
 3197              	
 3198              	/***********************
 3199              	  BASIC: PAUSE expr 
 3200              	  suspend execution for 
ARM GAS  tinyBasic.s 			page 85


 3201              	  expr milliseconds 
 3202              	************************/
 3203              	    _FUNC pause
 3204 0908 00B5FFF7 	    _CALL expression 
 3204      FEFF5DF8 
 3204      04EB
 3205 0912 0F28     	    cmp r0,#TK_INTGR 
 3206 0914 7FF4FEAF 	    bne syntax_error 
 3207 0918 E069     	    ldr r0,[UPP,#TICKS]
 3208 091a 0844     	    add r0,r1 
 3209 091c E169     	1:  ldr r1,[UPP,#TICKS]
 3210 091e 8842     	    cmp r0,r1 
 3211 0920 FCD1     	    bne 1b     
 3212 0922 7047     	    _RET 
 3213              	
 3214              	/***************************************************
 3215              	  BASIC: PMODE \c,pin,mode[,opt] 
 3216              	  configure a digital pin for input|output
 3217              	  paramters:
 3218              	    \c    port letter
 3219              	    pin   pin {0..15} 
 3220              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3221              	    for input mode:
 3222              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3223              	    for output mode:
 3224              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3225              	  use:
 3226              	    r2  opt
 3227              	    r3  mode 
 3228              	    T1  pin  
 3229              	    T2  port      
 3230              	***************************************************/
 3231              	      _FUNC pin_mode
 3232 0924 4FF00300 	      mov r0,#TK_CHAR 
 3233 0928 00B5FFF7 	      _CALL expect
 3233      FEFF5DF8 
 3233      04EB
 3234 0932 0846     	      mov r0,r1 
 3235 0934 00B5FFF7 	      _CALL upper 
 3235      FEFF5DF8 
 3235      04EB
 3236 093e A0F14109 	      sub T2,r0,#'A'
 3237 0942 4FF00800 	      mov r0,#TK_COMMA
 3238 0946 00B5FFF7 	      _CALL expect 
 3238      FEFF5DF8 
 3238      04EB
 3239 0950 00B5FFF7 	      _CALL arg_list
 3239      FEFF5DF8 
 3239      04EB
 3240 095a 0228     	      cmp r0,#2 
 3241 095c 3FF5FEAF 	      bmi syntax_error
 3242 0960 0428     	      cmp r0,#4
 3243 0962 01D4     	      bmi 1f 
 3244 0964 FFF7FEBF 	      b syntax_error
 3245 0968 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3246 096c 0228     	      cmp r0,#2
 3247 096e 02D0     	      beq 2f 
ARM GAS  tinyBasic.s 			page 86


 3248              	// 3 parameters, pin,mode,opt  
 3249 0970 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3250 0974 01E0     	    b 4f  
 3251              	2: // 2 parameters, pin,mode 
 3252 0976 BCE80801 	    ldmia DP!,{r3,T1}
 3253 097a 4FF48060 	4:  mov r0,#0x400 
 3254 097e 00FB09F9 	    mul T2,r0 
 3255 0982 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3255      C4F20100 
 3256 098a 8144     	    add T2,r0 // port base address 
 3257              	// if input mode set pull in ODR 
 3258 098c 83B9     	    cbnz r3,2f 
 3259 098e 022A     	    cmp r2,#2
 3260 0990 0ED4     	    bmi 2f 
 3261 0992 4FF00100 	    mov r0,#1 
 3262 0996 4146     	    mov r1,T1 
 3263 0998 032A     	    cmp r2,#3 
 3264 099a 01D0     	    beq 1f
 3265 099c 01F11001 	    add r1,#16 //reset bit 
 3266 09a0 00FA01F0 	1:  lsl r0,r1
 3267 09a4 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3268 09a8 032A     	    cmp r2,#3 
 3269 09aa 01D4     	    bmi 2f 
 3270 09ac A2F10102 	    sub r2,#1
 3271              	2: // set CNF|MODE bits GPIO_CRx 
 3272 09b0 B8F1080F 	    cmp T1,#8 
 3273 09b4 03D4     	    bmi 3f 
 3274 09b6 A8F10808 	    sub T1,#8 
 3275 09ba 09F10409 	    add T2,#4 //CRH 
 3276 09be 4FF00F00 	3:  mov r0,#15   
 3277 09c2 4FEA8801 	    lsl r1,T1,#2 
 3278 09c6 00FA01F0 	    lsl r0,r1
 3279 09ca 6FEA0000 	    mvn r0,r0 // bitmask 
 3280 09ce D9F80010 	    ldr r1,[T2]
 3281 09d2 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3282              	// combine opt|mode     
 3283 09d6 4FEA8200 	    lsl r0,r2,#2 
 3284 09da 40EA0300 	    orr r0,r3 // OPT|MODE 
 3285 09de 4FEA8803 	    lsl r3,T1,#2 
 3286 09e2 00FA03F0 	    lsl r0,r3
 3287 09e6 41EA0001 	    orr r1,r0   
 3288 09ea C9F80010 	    str r1,[T2] // mode and option set
 3289 09ee 7047     	    _RET 
 3290              	
 3291              	
 3292              	/*****************************************
 3293              	  BASIC: PEEK8 (expr)  
 3294              	  return byte value at address 
 3295              	*****************************************/
 3296              	    _FUNC peek8
 3297 09f0 00B5FFF7 	    _CALL func_args  
 3297      FEFF5DF8 
 3297      04EB
 3298 09fa 0128     	    cmp r0,#1
 3299 09fc 3FF5FEAF 	    bmi syntax_error
 3300 0a00 5CF8041B 	    _POP r1 
 3301 0a04 0978     	    ldrb r1,[r1]
ARM GAS  tinyBasic.s 			page 87


 3302 0a06 4FF00F00 	    mov r0,#TK_INTGR     
 3303 0a0a 7047     	    _RET 
 3304              	
 3305              	/*****************************************
 3306              	  BASIC: PEEK16 (expr)  
 3307              	  return byte value at address 
 3308              	*****************************************/
 3309              	    _FUNC peek16
 3310 0a0c 00B5FFF7 	    _CALL func_args  
 3310      FEFF5DF8 
 3310      04EB
 3311 0a16 0128     	    cmp r0,#1
 3312 0a18 3FF5FEAF 	    bmi syntax_error
 3313 0a1c 5CF8041B 	    _POP r1 
 3314 0a20 0988     	    ldrh r1,[r1]
 3315 0a22 4FF00F00 	    mov r0,#TK_INTGR     
 3316 0a26 7047     	    _RET 
 3317              	
 3318              	/*****************************************
 3319              	  BASIC: PEEK32 (expr)  
 3320              	  return byte value at address 
 3321              	*****************************************/
 3322              	    _FUNC peek32
 3323 0a28 00B5FFF7 	    _CALL func_args  
 3323      FEFF5DF8 
 3323      04EB
 3324 0a32 0128     	    cmp r0,#1
 3325 0a34 3FF5FEAF 	    bmi syntax_error
 3326 0a38 5CF8041B 	    _POP r1 
 3327 0a3c 0968     	    ldr r1,[r1]
 3328 0a3e 4FF00F00 	    mov r0,#TK_INTGR     
 3329 0a42 7047     	    _RET 
 3330              	
 3331              	
 3332              	/**********************************
 3333              	  BASIC: POKE8 addr,byte
 3334              	  store byte at addr   
 3335              	**********************************/
 3336              	    _FUNC poke8
 3337 0a44 00B5FFF7 	    _CALL arg_list
 3337      FEFF5DF8 
 3337      04EB
 3338 0a4e 0228     	    cmp r0,#2 
 3339 0a50 7FF4FEAF 	    bne syntax_error
 3340 0a54 BCE80300 	    ldmia DP!,{r0,r1} 
 3341 0a58 0870     	    strb r0,[r1]
 3342 0a5a 7047     	    _RET 
 3343              	
 3344              	/**********************************
 3345              	  BASIC: POKE16 addr,hword
 3346              	  store hword at addr   
 3347              	**********************************/
 3348              	    _FUNC poke16
 3349 0a5c 00B5FFF7 	    _CALL arg_list
 3349      FEFF5DF8 
 3349      04EB
 3350 0a66 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 88


 3351 0a68 7FF4FEAF 	    bne syntax_error
 3352 0a6c BCE80300 	    ldmia DP!,{r0,r1} 
 3353 0a70 0880     	    strh r0,[r1]
 3354 0a72 7047     	    _RET 
 3355              	
 3356              	/**********************************
 3357              	  BASIC: POKE32 addr,word
 3358              	  store word at addr   
 3359              	**********************************/
 3360              	    _FUNC poke32
 3361 0a74 00B5FFF7 	    _CALL arg_list 
 3361      FEFF5DF8 
 3361      04EB
 3362 0a7e 0228     	    cmp r0,#2 
 3363 0a80 7FF4FEAF 	    bne syntax_error
 3364 0a84 BCE80300 	    ldmia DP!,{r0,r1} 
 3365 0a88 0860     	    str r0,[r1]
 3366 0a8a 7047     	    _RET 
 3367              	
 3368              	
 3369              	
 3370              	/****************************
 3371              	  BASIC: PRINT|? arg_list 
 3372              	  print list of arguments 
 3373              	****************************/
 3374              	    _FUNC print
 3375 0a8c 88EA0808 	    eor T1,T1 
 3376 0a90 00B5FFF7 	0:  _CALL expression
 3376      FEFF5DF8 
 3376      04EB
 3377 0a9a 0F28     	    cmp r0,#TK_INTGR
 3378 0a9c 07D1     	    bne 1f 
 3379 0a9e 0846     	    mov r0,r1
 3380 0aa0 A169     	    ldr r1,[UPP,#BASE]
 3381 0aa2 00B5FFF7 	    _CALL print_int
 3381      FEFF5DF8 
 3381      04EB
 3382 0aac 3EE0     	    b 8f  
 3383 0aae 00B5FFF7 	1:  _CALL next_token
 3383      FEFF5DF8 
 3383      04EB
 3384 0ab8 0128     	    cmp r0,#TK_COLON 
 3385 0aba 00DC     	    bgt 2f
 3386 0abc 4DE0     	    b unget_exit 
 3387 0abe 0228     	2:  cmp r0,#TK_QSTR 
 3388 0ac0 06D1     	    bne 3f
 3389 0ac2 0846     	    mov r0,r1 
 3390 0ac4 00B5FFF7 	    _CALL uart_puts  
 3390      FEFF5DF8 
 3390      04EB
 3391 0ace 2DE0     	    b 8f 
 3392 0ad0 0D28     	3:  cmp r0,#TK_CFUNC
 3393 0ad2 05D1     	    bne 4f
 3394 0ad4 0846     	    mov r0,r1
 3395 0ad6 00B5FFF7 	    _CALL execute 
 3395      FEFF5DF8 
 3395      04EB
ARM GAS  tinyBasic.s 			page 89


 3396 0ae0 0328     	4:  cmp r0,#TK_CHAR 
 3397 0ae2 06D1     	    bne 5f 
 3398 0ae4 0846     	    mov r0,r1 
 3399 0ae6 00B5FFF7 	    _CALL uart_putc 
 3399      FEFF5DF8 
 3399      04EB
 3400 0af0 1CE0     	    b 8f 
 3401 0af2 0A28     	5:  cmp r0,#TK_SHARP
 3402 0af4 09D1     	    bne 6f 
 3403 0af6 00B5FFF7 	   _CALL next_token
 3403      FEFF5DF8 
 3403      04EB
 3404 0b00 0F28     	    cmp r0,#TK_INTGR  
 3405 0b02 7FF4FEAF 	    bne syntax_error 
 3406 0b06 6164     	    str r1,[UPP,#TAB_WIDTH]
 3407 0b08 10E0     	    b 8f 
 3408 0b0a 0B28     	6:  cmp r0,#TK_CMD 
 3409 0b0c 25D1     	    bne unget_exit  
 3410 0b0e 4429     	    cmp r1,#TAB_IDX 
 3411 0b10 05D1     	    bne 6f
 3412 0b12 00B500F0 	    _CALL tab 
 3412      8AFA5DF8 
 3412      04EB
 3413 0b1c 06E0     	    b 8f 
 3414 0b1e 3D29     	6:  cmp r1,#SPC_IDX  
 3415 0b20 1BD1     	    bne unget_exit
 3416 0b22 00B500F0 	    _CALL spc   
 3416      48FA5DF8 
 3416      04EB
 3417 0b2c 88EA0808 	8:  eor T1,T1  
 3418 0b30 00B5FFF7 	    _CALL next_token
 3418      FEFF5DF8 
 3418      04EB
 3419 0b3a 90B1     	    cbz r0, print_exit  
 3420 0b3c 0828     	    cmp r0,#TK_COMMA 
 3421 0b3e 02D1     	    bne 8f 
 3422 0b40 4FF0FF38 	    mov T1,#-1
 3423 0b44 A4E7     	    b 0b
 3424 0b46 0928     	8:  cmp r0,#TK_SEMIC 
 3425 0b48 07D1     	    bne unget_exit 
 3426 0b4a 00B5FFF7 	    _CALL tabulation 
 3426      FEFF5DF8 
 3426      04EB
 3427 0b54 4FF0FF38 	    mov T1,#-1
 3428 0b58 9AE7     	    b 0b
 3429              	unget_exit:         
 3430 0b5a D4F800A0 	   _UNGET_TOKEN 
 3430      D4F808B0 
 3431              	print_exit:
 3432 0b62 18EA0808 	    ands T1,T1 
 3433 0b66 04D1     	    bne 9f
 3434 0b68 00B5FFF7 	    _CALL cr 
 3434      FEFF5DF8 
 3434      04EB
 3435 0b72 7047     	9:  _RET 
 3436              	
 3437              	/**************************************
ARM GAS  tinyBasic.s 			page 90


 3438              	  BASIC: QKEY
 3439              	  check if key pressed 
 3440              	**************************************/ 
 3441              	    _FUNC qkey
 3442 0b74 4FF00001 	    mov r1,#0
 3443 0b78 00B5FFF7 	    _CALL uart_qkey
 3443      FEFF5DF8 
 3443      04EB
 3444 0b82 01D0     	    beq 9f 
 3445 0b84 4FF0FF31 	    mov r1,#-1 
 3446 0b88 4FF00F00 	9:  mov r0,#TK_INTGR
 3447 0b8c 7047     	    _RET 
 3448              	
 3449              	/******************************************
 3450              	  BASIC RANDOM(expr)
 3451              	  generate random number between 0..expr-1
 3452              	******************************************/
 3453 0b8e 00BF     	    _FUNC random
 3454 0b90 00B5FFF7 	    _CALL func_args 
 3454      FEFF5DF8 
 3454      04EB
 3455 0b9a 0128     	    cmp r0,#1
 3456 0b9c 7FF4FEAF 	    bne syntax_error 
 3457 0ba0 606A     	    ldr r0,[UPP,#SEED]
 3458 0ba2 4FEA4031 	    lsl r1,r0,#13
 3459 0ba6 81EA0001 	    eor r1,r0
 3460 0baa 4FEA5140 	    lsr r0,r1,#17
 3461 0bae 81EA0001 	    eor r1,r0
 3462 0bb2 4FEA4110 	    lsl r0,r1,#5
 3463 0bb6 81EA0001 	    eor r1,r0
 3464 0bba 6162     	    str r1,[UPP,#SEED]
 3465 0bbc 5CF8040B 	    _POP r0 
 3466 0bc0 B1FBF0F2 	    udiv r2,r1,r0  
 3467 0bc4 00FB02F2 	    mul r2,r0 
 3468 0bc8 A1EB0201 	    sub r1,r2 
 3469 0bcc 4FF00F00 	    mov r0,#TK_INTGR
 3470 0bd0 7047     	    _RET 
 3471              	
 3472              	/****************************************
 3473              	  BASIC: RSHIFT(expr1,expr2)
 3474              	  shift left expr1 de expr2 bits 
 3475              	****************************************/
 3476 0bd2 00BF     	    _FUNC rshift
 3477 0bd4 00B5FFF7 	    _CALL func_args
 3477      FEFF5DF8 
 3477      04EB
 3478 0bde 0228     	    cmp r0,#2 
 3479 0be0 7FF4FEAF 	    bne syntax_error
 3480 0be4 BCE80300 	    ldmia DP!,{r0,r1}
 3481 0be8 21FA00F1 	    lsr r1,r0  
 3482 0bec 4FF00F00 	    mov r0,#TK_INTGR
 3483 0bf0 7047     	    _RET 
 3484              	
 3485              	/****************************
 3486              	  BASIC: RUN 
 3487              	  execute program in memory
 3488              	****************************/
ARM GAS  tinyBasic.s 			page 91


 3489 0bf2 00BF     	    _FUNC run
 3490 0bf4 206C10F0 	    _CLO 
 3490      010F03D0 
 3490      4FF00700 
 3490      FFF7FEBF 
 3491 0c04 206B     	    ldr r0,[UPP,#TXTBGN]
 3492 0c06 616B     	    ldr r1,[UPP,#TXTEND]
 3493 0c08 8842     	    cmp r0,r1
 3494 0c0a 20D0     	    beq 9f
 3495 0c0c 216C     	    ldr r1,[UPP,#FLAGS]
 3496 0c0e 11F0080F 	    tst r1,#FSTOP
 3497 0c12 09D0     	    beq 1f
 3498 0c14 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3499 0c18 6060     	    str r0,[UPP,#COUNT]
 3500 0c1a 206C     	    ldr r0,[UPP,#FLAGS]
 3501 0c1c 4FF00901 	    mov r1,#FRUN+FSTOP
 3502 0c20 80EA0100 	    eor r0,r1
 3503 0c24 2064     	    str r0,[UPP,#FLAGS] 
 3504 0c26 12E0     	    b 9f  
 3505 0c28 8178     	1:  ldrb r1,[r0,#2]
 3506 0c2a 6160     	    str r1,[UPP,#COUNT]
 3507 0c2c 8346     	    mov BPTR,r0 
 3508 0c2e 4FF0030A 	    mov IN,#3
 3509              	    // reset dataline pointers 
 3510 0c32 80EA0000 	    eor r0,r0 
 3511 0c36 E060     	    str r0,[UPP,#DATAPTR]
 3512 0c38 2061     	    str r0,[UPP,#DATA]
 3513 0c3a 6061     	    str r0,[UPP,#DATALEN] 
 3514 0c3c 206C     	    ldr r0,[UPP,#FLAGS]
 3515 0c3e 40F00100 	    orr r0,#FRUN 
 3516 0c42 2064     	    str r0,[UPP,#FLAGS]
 3517 0c44 00B5FFF7 	    _CALL show_trace 
 3517      FEFF5DF8 
 3517      04EB
 3518 0c4e 7047     	9:  _RET 
 3519              	
 3520              	/**********************************
 3521              	        FILE SYSTEM 
 3522              	**********************************/
 3523              	
 3524              	/*********************************
 3525              	  search_free 
 3526              	  search first free PAGE in fs
 3527              	  a PAGE is free if first word is
 3528              	  -1
 3529              	  input:
 3530              	    none 
 3531              	  output:
 3532              	    r0    addr|0
 3533              	  use:
 3534              	*********************************/
 3535              	    _FUNC search_free 
 3536 0c50 06B4     	    push {r1,r2}
 3537 0c52 DFF86410 	    ldr r1,fs_addr 
 3538 0c56 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3538      C0F60202 
 3539 0c5e 0868     	1:  ldr r0,[r1]
ARM GAS  tinyBasic.s 			page 92


 3540 0c60 B0F1FF3F 	    cmp r0,#-1
 3541 0c64 03D0     	    beq 8f 
 3542 0c66 01F58061 	    add r1,#PAGE_SIZE
 3543 0c6a 9142     	    cmp r1,r2 
 3544 0c6c F7D4     	    bmi 1b 
 3545 0c6e 0846     	8:  mov r0,r1 
 3546 0c70 06BC     	    pop {r1,r2}   
 3547 0c72 7047     	    _RET 
 3548              	
 3549              	/*********************************
 3550              	  search_file 
 3551              	  search for a file name 
 3552              	  in file system.
 3553              	  input: 
 3554              	    r0   .asciz target name
 3555              	  output:
 3556              	    r0    0 || address found 
 3557              	  use:
 3558              	   r0     temp 
 3559              	   r1     *file_name 
 3560              	   r2     *fs  
 3561              	   r3     target   
 3562              	**********************************/
 3563              	    _FUNC search_file 
 3564 0c74 0EB4     	    push {r1,r2,r3}
 3565 0c76 DFF84020 	    ldr r2,fs_addr
 3566 0c7a 0346     	    mov r3,r0  
 3567              	cmp_loop:
 3568 0c7c 1068     	    ldr r0,[r2]
 3569 0c7e B0F1FF3F 	    cmp r0,#-1
 3570 0c82 80EA0000 	    eor r0,r0
 3571 0c86 15D0     	    beq 9f // reached end of fs 
 3572 0c88 1846     	1:  mov r0,r3
 3573 0c8a 02F10201 	    add r1,r2,#2
 3574 0c8e 00B5FFF7 	    _CALL strcmp
 3574      FEFF5DF8 
 3574      04EB
 3575 0c98 08B9     	    cbnz r0,2f
 3576 0c9a 1046     	    mov r0,r2 
 3577 0c9c 0AE0     	    b 9f   
 3578 0c9e 1088     	2:  ldrh r0,[r2] // name length
 3579 0ca0 0244     	    add r2,r0 
 3580 0ca2 1088     	    ldrh r0,[r2]
 3581 0ca4 1044     	    add r0,r2
 3582 0ca6 00B5FFF7 	    _CALL page_align 
 3582      FEFF5DF8 
 3582      04EB
 3583 0cb0 0246     	    mov r2,r0   
 3584 0cb2 E3E7     	    b cmp_loop 
 3585 0cb4 0EBC     	9:  pop {r1,r2,r3}
 3586 0cb6 7047     	    _RET 
 3587              	
 3588 0cb8 00000000 	fs_addr: .word FILE_SYSTEM
 3589              	
 3590              	/*************************************
 3591              	  BASIC: DIR 
 3592              	  list files stored in fs 
ARM GAS  tinyBasic.s 			page 93


 3593              	  use:
 3594              	    r0  temp 
 3595              	    r1  temp
 3596              	    r2  file count
 3597              	    r3  data size
 3598              	    T1  *fs  
 3599              	*************************************/
 3600              	    _FUNC directory
 3601 0cbc 206C10F0 	    _CLO 
 3601      010F03D0 
 3601      4FF00700 
 3601      FFF7FEBF 
 3602 0ccc 82EA0202 	    eor r2,r2 
 3603 0cd0 5FF81C80 	    ldr T1,fs_addr 
 3604 0cd4 D8F80000 	1:  ldr r0,[T1] // name length 
 3605 0cd8 B0F1FF3F 	    cmp r0,#-1
 3606 0cdc 2AD0     	    beq no_more_file
 3607 0cde 00F00F03 	    and r3,r0,#15
 3608 0ce2 08F10200 	    add r0,T1,#2
 3609 0ce6 00B5FFF7 	    _CALL uart_puts 
 3609      FEFF5DF8 
 3609      04EB
 3610 0cf0 4FF01000 	    mov r0,#16 
 3611 0cf4 00B5FFF7 	    _CALL cursor_x 
 3611      FEFF5DF8 
 3611      04EB
 3612 0cfe 9844     	    add T1,r3 
 3613 0d00 B8F80030 	    ldrh r3,[T1]
 3614 0d04 1846     	    mov r0,r3 
 3615 0d06 4FF00A01 	    mov r1,#10 
 3616 0d0a 00B5FFF7 	    _CALL print_int
 3616      FEFF5DF8 
 3616      04EB
 3617 0d14 00B5FFF7 	    _CALL cr  
 3617      FEFF5DF8 
 3617      04EB
 3618 0d1e 08EB0300 	    add r0,T1,r3 
 3619 0d22 00B5FFF7 	    _CALL page_align
 3619      FEFF5DF8 
 3619      04EB
 3620 0d2c 8046     	    mov T1,r0 
 3621 0d2e 02F10102 	    add r2,#1 
 3622 0d32 CFE7     	    b 1b  
 3623              	no_more_file:
 3624 0d34 00B5FFF7 	    _CALL cr
 3624      FEFF5DF8 
 3624      04EB
 3625 0d3e 4FF01000 	    mov r0,#16
 3626 0d42 00B5FFF7 	    _CALL cursor_x  
 3626      FEFF5DF8 
 3626      04EB
 3627 0d4c 1046     	    mov r0,r2 
 3628 0d4e 4FF00A01 	    mov r1,#10 
 3629 0d52 00B5FFF7 	    _CALL print_int 
 3629      FEFF5DF8 
 3629      04EB
 3630 0d5c DFF84404 	    ldr r0,=fcount 
ARM GAS  tinyBasic.s 			page 94


 3631 0d60 00B5FFF7 	    _CALL uart_puts 
 3631      FEFF5DF8 
 3631      04EB
 3632 0d6a 7047     	    _RET 
 3633 0d6c 66696C65 	fcount:  .asciz "files\n"
 3633      730A00
 3634              	
 3635              	/*************************************
 3636              	  BASIC: FORGET ["name"]
 3637              	  delete file and all following 
 3638              	  if no name given delete all files 
 3639              	************************************/
 3640 0d73 00       	    _FUNC forget
 3641 0d74 2DE90802 	    push {r3,T2}
 3642 0d78 5FF8C490 	    ldr T2,fs_addr 
 3643 0d7c E36A     	    ldr r3,[UPP,#FSFREE]
 3644 0d7e 00B5FFF7 	    _CALL next_token
 3644      FEFF5DF8 
 3644      04EB
 3645 0d88 38B1     	    cbz r0,1f // no name 
 3646 0d8a 0846     	    mov r0,r1
 3647 0d8c 00B5FFF7 	    _CALL search_file
 3647      71FF5DF8 
 3647      04EB
 3648 0d96 58B1     	    cbz r0,9f 
 3649 0d98 8146     	    mov T2,r0 
 3650 0d9a 9945     	1:  cmp T2,r3 
 3651 0d9c 08D5     	    bpl 9f 
 3652 0d9e 4846     	    mov r0,T2 
 3653 0da0 00B5FFF7 	    _CALL erase_page
 3653      FEFF5DF8 
 3653      04EB
 3654 0daa 09F58069 	    add T2,#PAGE_SIZE
 3655 0dae F4E7     	    b 1b 
 3656 0db0 00B5FFF7 	9:  _CALL search_free
 3656      4DFF5DF8 
 3656      04EB
 3657 0dba BDE80802 	    pop {r3,T2} 
 3658 0dbe 7047     	    _RET 
 3659              	
 3660              	/**********************************
 3661              	  BASIC LOAD "name" 
 3662              	  load file in RAM for execution
 3663              	  use:
 3664              	    r0   temp
 3665              	    r1   src
 3666              	    r2   dest 
 3667              	    r3   count 
 3668              	**********************************/
 3669              	    _FUNC load
 3670 0dc0 206C10F0 	    _CLO 
 3670      010F03D0 
 3670      4FF00700 
 3670      FFF7FEBF 
 3671 0dd0 00B5FFF7 	    _CALL next_token 
 3671      FEFF5DF8 
 3671      04EB
ARM GAS  tinyBasic.s 			page 95


 3672 0dda 0228     	    cmp r0,#TK_QSTR 
 3673 0ddc 7FF4FEAF 	    bne syntax_error 
 3674 0de0 0846     	    mov r0,r1 
 3675 0de2 00B5FFF7 	    _CALL search_file 
 3675      46FF5DF8 
 3675      04EB
 3676 0dec 18B9     	    cbnz r0, 1f 
 3677 0dee 4FF00900 	    mov r0,#ERR_NOT_FILE
 3678 0df2 FFF7FEBF 	    b tb_error 
 3679 0df6 0146     	1:  mov r1,r0 
 3680 0df8 0888     	    ldrh r0,[r1]
 3681 0dfa 0144     	    add r1,r0 // data size field  
 3682 0dfc 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3683 0e00 226B     	    ldr r2,[UPP,#TXTBGN]
 3684 0e02 02EB0300 	    add r0,r2,r3  
 3685 0e06 6063     	    str r0,[UPP,#TXTEND]
 3686 0e08 03F10103 	    add r3,#1
 3687 0e0c 4FEA5303 	    lsr r3,#1
 3688              	2:  // load file data 
 3689 0e10 31F8020B 	    ldrh r0,[r1],#2
 3690 0e14 22F8020B 	    strh r0,[r2],#2 
 3691 0e18 013B     	    subs r3,#1 
 3692 0e1a F9D1     	    bne 2b 
 3693              	// report file size 
 3694 0e1c E248     	    ldr r0,=fsize 
 3695 0e1e 00B5FFF7 	    _CALL uart_puts
 3695      FEFF5DF8 
 3695      04EB
 3696 0e28 606B     	    ldr r0,[UPP,#TXTEND]
 3697 0e2a 236B     	    ldr r3,[UPP,#TXTBGN]
 3698 0e2c A0EB0300 	    sub r0,r3 
 3699 0e30 4FF00A01 	    mov r1,#10 
 3700 0e34 00B5FFF7 	    _CALL print_int 
 3700      FEFF5DF8 
 3700      04EB
 3701 0e3e DB48     	    ldr r0,=data_bytes 
 3702 0e40 00B5FFF7 	    _CALL uart_puts      
 3702      FEFF5DF8 
 3702      04EB
 3703 0e4a 7047     	    _RET 
 3704              	
 3705              	
 3706              	/*********************************
 3707              	  BASIC: SAVE "name" 
 3708              	  save program in flash memory
 3709              	  file structure:
 3710              	    .hword name_length 
 3711              	    .asciz name
 3712              	    .palign 1  
 3713              	    .hword data_length 
 3714              	    .byte  file data (variable length)  
 3715              	  use:
 3716              	    r0  temp 
 3717              	    r1  temp
 3718              	    r2  *flash 
 3719              	    r3  *ram  
 3720              	    T1  temp   
ARM GAS  tinyBasic.s 			page 96


 3721              	********************************/
 3722              	    _FUNC save
 3723 0e4c 206C10F0 	    _CLO 
 3723      010F03D0 
 3723      4FF00700 
 3723      FFF7FEBF 
 3724 0e5c 606B     	    ldr r0,[UPP,#TXTEND]
 3725 0e5e 216B     	    ldr r1,[UPP,#TXTBGN]
 3726 0e60 8842     	    cmp r0,r1
 3727 0e62 03D1     	    bne 0f 
 3728 0e64 4FF00D00 	    mov r0,#ERR_NO_PROG
 3729 0e68 FFF7FEBF 	    b tb_error 
 3730 0e6c 00B5FFF7 	0:  _CALL next_token 
 3730      FEFF5DF8 
 3730      04EB
 3731 0e76 0228     	    cmp r0,#TK_QSTR
 3732 0e78 7FF4FEAF 	    bne syntax_error 
 3733              	// check for existing 
 3734 0e7c 0B46     	    mov r3,r1 // save name 
 3735 0e7e 1846     	    mov r0,r3  
 3736 0e80 00B5FFF7 	    _CALL search_file
 3736      F7FE5DF8 
 3736      04EB
 3737 0e8a 18B1     	    cbz r0,new_file 
 3738 0e8c 4FF00800 	    mov r0,#ERR_DUPLICATE
 3739 0e90 FFF7FEBF 	    b tb_error 
 3740              	new_file:
 3741 0e94 4FF00100 	    mov r0,#1 
 3742 0e98 00B5FFF7 	    _CALL unlock 
 3742      FEFF5DF8 
 3742      04EB
 3743 0ea2 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3744 0ea4 1846     	    mov r0,r3 // *name 
 3745 0ea6 00B5FFF7 	    _CALL strlen 
 3745      FEFF5DF8 
 3745      04EB
 3746 0eb0 00F10400 	    add r0,#4  
 3747 0eb4 20F00100 	    and r0,#-2 //even size
 3748 0eb8 A0F10208 	    sub T1,r0,#2  // name length counter   
 3749 0ebc 1146     	1:  mov r1,r2  
 3750 0ebe 00B5FFF7 	    _CALL hword_write   
 3750      FEFF5DF8 
 3750      04EB
 3751 0ec8 02F10202 	    add r2,#2  
 3752              	// write file name      
 3753 0ecc 33F8020B 	2:  ldrh r0,[r3],#2 
 3754 0ed0 1146     	    mov r1,r2 
 3755 0ed2 00B5FFF7 	    _CALL hword_write
 3755      FEFF5DF8 
 3755      04EB
 3756 0edc 02F10202 	    add r2,#2
 3757 0ee0 B8F10208 	    subs T1,#2
 3758 0ee4 F2D1     	    bne 2b
 3759              	// write data size 
 3760 0ee6 606B     	    ldr r0,[UPP,#TXTEND]
 3761 0ee8 236B     	    ldr r3,[UPP,#TXTBGN]
 3762 0eea A0EB0300 	    sub r0,r3
ARM GAS  tinyBasic.s 			page 97


 3763 0eee 8046     	    mov T1,r0
 3764 0ef0 1146     	    mov r1,r2 
 3765 0ef2 00B5FFF7 	    _CALL hword_write
 3765      FEFF5DF8 
 3765      04EB
 3766 0efc 02F10202 	    add r2,#2 
 3767              	// write data 
 3768 0f00 08F10108 	    add T1,#1 
 3769 0f04 4FEA5808 	    lsr T1,#1 // .hword to write 
 3770 0f08 33F8020B 	3:  ldrh r0,[r3],#2
 3771 0f0c 1146     	    mov r1,r2
 3772 0f0e 00B5FFF7 	    _CALL hword_write 
 3772      FEFF5DF8 
 3772      04EB
 3773 0f18 02F10202 	    add r2,#2 
 3774 0f1c B8F10108 	    subs T1,#1 
 3775 0f20 F2D1     	    bne 3b
 3776 0f22 4FF00000 	    mov r0,#0 
 3777 0f26 00B5FFF7 	    _CALL unlock
 3777      FEFF5DF8 
 3777      04EB
 3778              	// update FSFREE     
 3779 0f30 606B     	    ldr r0,[UPP,#TXTEND]
 3780 0f32 216B     	    ldr r1,[UPP,#TXTBGN]
 3781 0f34 A0EB0100 	    sub r0,r1 
 3782 0f38 8046     	    mov T1,r0 
 3783 0f3a E16A     	    ldr r1,[UPP,#FSFREE]
 3784 0f3c 0844     	    add r0,r1 
 3785 0f3e 00B5FFF7 	    _CALL page_align
 3785      FEFF5DF8 
 3785      04EB
 3786 0f48 E062     	    str r0,[UPP,#FSFREE]
 3787 0f4a 9748     	    ldr r0,=fsize
 3788 0f4c 00B5FFF7 	    _CALL uart_puts
 3788      FEFF5DF8 
 3788      04EB
 3789 0f56 4046     	    mov r0,T1 
 3790 0f58 4FF00A01 	    mov r1,#10 
 3791 0f5c 00B5FFF7 	    _CALL print_int 
 3791      FEFF5DF8 
 3791      04EB
 3792 0f66 9148     	    ldr r0,=data_bytes 
 3793 0f68 00B5FFF7 	    _CALL uart_puts  
 3793      FEFF5DF8 
 3793      04EB
 3794 0f72 7047     	    _RET 
 3795 0f74 66696C65 	fsize: .asciz "file size: "
 3795      2073697A 
 3795      653A2000 
 3796 0f80 62797465 	data_bytes: .asciz "bytes"
 3796      7300
 3797              	
 3798              	
 3799              	/*******************************
 3800              	  BASIC: SIZE 
 3801              	  return RAM free bytes 
 3802              	*******************************/
ARM GAS  tinyBasic.s 			page 98


 3803 0f86 00BF     	    _FUNC size
 3804 0f88 606B     	    ldr r0,[UPP,#TXTEND]
 3805 0f8a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3806 0f8e A1EB0001 	    sub r1,R0
 3807 0f92 4FF00F00 	    mov r0,#TK_INTGR
 3808 0f96 7047     	    _RET  
 3809              	
 3810              	/*********************************
 3811              	  BASIC: SLEEP 
 3812              	  place MCU lowest power mode 
 3813              	  wait for external interrpt or
 3814              	  reset.
 3815              	*********************************/
 3816              	    _FUNC sleep
 3817 0f98 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3817      CEF20000 
 3818 0fa0 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3819 0fa4 0160     	    str r1,[r0]
 3820 0fa6 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3820      C4F20000 
 3821 0fae 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3822 0fb2 0160     	    str r1,[r0]
 3823 0fb4 20BF     	    wfe 
 3824 0fb6 7047     	    _RET 
 3825              	
 3826              	/************************************
 3827              	  BASIC: SPC(expr)
 3828              	  mov cursor right expr spaces 
 3829              	***********************************/
 3830              	    _FUNC spc 
 3831 0fb8 00B5FFF7 	    _CALL func_args
 3831      FEFF5DF8 
 3831      04EB
 3832 0fc2 0128     	    cmp r0,#1
 3833 0fc4 7FF4FEAF 	    bne syntax_error 
 3834 0fc8 5CF8040B 	    _POP r0 
 3835 0fcc 00B5FFF7 	    _CALL spaces 
 3835      FEFF5DF8 
 3835      04EB
 3836 0fd6 7047     	    _RET 
 3837              	
 3838              	    _FUNC spi_read
 3839 0fd8 7047     	    _RET 
 3840              	
 3841 0fda 00BF     	    _FUNC spi_enable
 3842 0fdc 7047     	    _RET 
 3843              	
 3844 0fde 00BF     	    _FUNC spi_select
 3845 0fe0 7047     	    _RET 
 3846              	
 3847 0fe2 00BF     	    _FUNC spi_write
 3848 0fe4 7047     	    _RET 
 3849              	
 3850              	/******************************
 3851              	  BASIC: STOP 
 3852              	  stop program executre but 
 3853              	  keep execution state for 
ARM GAS  tinyBasic.s 			page 99


 3854              	  resume 
 3855              	******************************/
 3856 0fe6 00BF     	    _FUNC stop
 3857 0fe8 206C10F0 	    _RTO 
 3857      010F03D1 
 3857      4FF00700 
 3857      FFF7FEBF 
 3858 0ff8 6068     	    ldr r0,[UPP,#COUNT]
 3859 0ffa 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3860 0ffe 206C     	    ldr r0,[UPP,#FLAGS]
 3861 1000 4FF00901 	    mov r1,#FRUN+FSTOP
 3862 1004 80EA0100 	    eor r0,r1
 3863 1008 2064     	    str r0,[UPP,#FLAGS]
 3864 100a 8AEA0A0A 	    eor IN,IN 
 3865 100e 8BEA0B0B 	    eor BPTR,BPTR 
 3866 1012 C4F804A0 	    str IN,[UPP,#COUNT]
 3867 1016 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3868 101a C4F808A0 	    str IN,[UPP,#BASICPTR]
 3869 101e 4FF4A040 	    _MOV32 r0,RAM_END
 3869      C2F20000 
 3870 1026 8546     	    mov sp,r0
 3871 1028 FFF7FEBF 	    b cmd_line 
 3872              	
 3873              	
 3874              	/**************************
 3875              	  BASIC: TAB(expr)
 3876              	  move cursor column expr 
 3877              	**************************/
 3878              	    _FUNC tab 
 3879 102c 00B5FFF7 	    _CALL func_args
 3879      FEFF5DF8 
 3879      04EB
 3880 1036 0128     	    cmp r0,#1 
 3881 1038 7FF4FEAF 	    bne syntax_error 
 3882 103c 5CF8040B 	    _POP r0 
 3883 1040 00B5FFF7 	    _CALL cursor_x 
 3883      FEFF5DF8 
 3883      04EB
 3884 104a 7047     	    _RET 
 3885              	
 3886              	/**************************
 3887              	  BASIC: TICKS 
 3888              	  return msec counter
 3889              	**************************/  
 3890              	    _FUNC get_ticks
 3891 104c E169     	    ldr r1,[UPP,#TICKS]
 3892 104e 4FF00F00 	    mov r0,#TK_INTGR
 3893 1052 7047     	    _RET  
 3894              	
 3895              	/*************************
 3896              	  BASIC: TIMER expr 
 3897              	  set countdown timer 
 3898              	************************/
 3899              	    _FUNC set_timer
 3900 1054 00B5FFF7 	    _CALL expression 
 3900      FEFF5DF8 
 3900      04EB
ARM GAS  tinyBasic.s 			page 100


 3901 105e 0F28     	    cmp r0,#TK_INTGR
 3902 1060 7FF4FEAF 	    bne syntax_error 
 3903 1064 2162     	    str r1,[UPP,#TIMER]
 3904 1066 7047     	    _RET 
 3905              	
 3906              	/***************************
 3907              	  BASIC: TIMEOUT
 3908              	  check for timer expiration 
 3909              	  return -1 true || 0 false
 3910              	****************************/
 3911              	    _FUNC timeout
 3912 1068 81EA0101 	    eor r1,r1 
 3913 106c 206A     	    ldr r0,[UPP,#TIMER]
 3914 106e 08B9     	    cbnz r0,9f 
 3915 1070 6FEA0101 	    mvn r1,r1 
 3916 1074 4FF00F00 	9:  mov r0,#TK_INTGR    
 3917 1078 7047     	    _RET 
 3918              	
 3919 107a 00BF     	    _FUNC tone
 3920 107c 7047     	    _RET 
 3921              	
 3922              	/****************************************
 3923              	  BASIC: TRACE n 
 3924              	  enable execution trace 
 3925              	  0   ddisable
 3926              	  1   show current line#
 3927              	  2  show line#+data_stack
 3928              	  3  show line#+data_stack+main_stack 
 3929              	***************************************/
 3930 107e 00BF     	    _FUNC trace 
 3931 1080 00B5FFF7 	    _CALL next_token 
 3931      FEFF5DF8 
 3931      04EB
 3932 108a 0F28     	    cmp r0,#TK_INTGR  
 3933 108c 7FF4FEAF 	    bne syntax_error 
 3934 1090 01F00301 	    and r1,#3 
 3935 1094 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 3936 1098 7047     	    _RET 
 3937              	
 3938              	
 3939              	/***************************
 3940              	  BASIC: UBOUND 
 3941              	  return last indice of @
 3942              	  output:
 3943              	    r0  TK_INTGR 
 3944              	    r1  +int 
 3945              	**************************/
 3946 109a 00BF     	    _FUNC ubound
 3947 109c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3948 10a0 606B     	    ldr r0,[UPP,#TXTEND]
 3949 10a2 A1EB0001 	    sub r1,r0 
 3950 10a6 4FEA9101 	    lsr r1,#2
 3951 10aa 4FF00F00 	    mov r0,#TK_INTGR 
 3952 10ae 7047     	    _RET 
 3953              	
 3954              	/****************************
 3955              	  BASIC: UFLASH 
ARM GAS  tinyBasic.s 			page 101


 3956              	  return user flash address
 3957              	*****************************/
 3958              	    _FUNC uflash
 3959 10b0 3F49     	    ldr r1,=user
 3960 10b2 4FF00F00 	    mov r0,#TK_INTGR 
 3961 10b6 7047     	    _RET 
 3962              	
 3963              	
 3964              	/************************************
 3965              	  BASIC: UNTIL relation 
 3966              	  close a DO..UNTIL loop 
 3967              	  loop until relation come true 
 3968              	************************************/
 3969              	    _FUNC until
 3970 10b8 00B5FFF7 	    _CALL relation 
 3970      FEFF5DF8 
 3970      04EB
 3971 10c2 11B1     	    cbz r1,9f
 3972 10c4 0CF1080C 	    add DP,#8
 3973 10c8 7047     	    _RET  
 3974 10ca 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 3975 10ce 9BF80200 	    ldrb r0,[BPTR,#2]
 3976 10d2 6060     	    str r0,[UPP,#COUNT]
 3977 10d4 7047     	    _RET 
 3978              	
 3979 10d6 00BF     	    _FUNC usr
 3980 10d8 7047     	    _RET  
 3981              	
 3982              	/*************************************
 3983              	  BASIC: WAIT addr,expr1[,expr2] 
 3984              	  wait until *addr&expr1 is not null 
 3985              	  or until (*addr&expr1)^expr2 is null 
 3986              	***************************************/
 3987 10da 00BF     	    _FUNC wait
 3988 10dc 00B5FFF7 	    _CALL arg_list 
 3988      FEFF5DF8 
 3988      04EB
 3989 10e6 0228     	    cmp r0,#2
 3990 10e8 03D0     	    beq 2f 
 3991 10ea 0328     	    cmp r0,#3
 3992 10ec 07D0     	    beq 4f
 3993 10ee FFF7FEBF 	    b syntax_error 
 3994 10f2 BCE80300 	2:  ldmia DP!,{r0,r1}
 3995 10f6 0A88     	3:  ldrh r2,[r1]
 3996 10f8 0240     	    ands r2,r0 
 3997 10fa FCD0     	    beq 3b 
 3998 10fc 06E0     	    b 9f 
 3999 10fe BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4000 1102 1388     	5:  ldrh r3,[r2]
 4001 1104 83EA0003 	    eor r3,r0
 4002 1108 0B40     	    ands r3,r1 
 4003 110a FAD0     	    beq 5b 
 4004 110c 7047     	9:  _RET 
 4005              	
 4006              	/*********************************************
 4007              	  BASIC: WORDS 
 4008              	  print list of BASIC WORDS in dictionary 
ARM GAS  tinyBasic.s 			page 102


 4009              	  use:
 4010              	    r0,r1,T1,T2  
 4011              	********************************************/
 4012 110e 00BF     	    _FUNC words
 4013 1110 206C10F0 	    _CLO 
 4013      010F03D0 
 4013      4FF00700 
 4013      FFF7FEBF 
 4014 1120 DFF89080 	    ldr T1,=kword_dict
 4015 1124 89EA0909 	    eor T2,T2 
 4016              	1:  
 4017 1128 4046     	    mov r0,T1
 4018 112a 00B5FFF7 	    _CALL strlen
 4018      FEFF5DF8 
 4018      04EB
 4019 1134 E0B1     	    cbz r0,9f 
 4020 1136 8144     	    add T2,r0 
 4021 1138 B9F1500F 	    cmp T2,#80 
 4022 113c 06D4     	    bmi 2f
 4023 113e 89EA0909 	    eor T2,T2  
 4024 1142 00B5FFF7 	    _CALL cr 
 4024      FEFF5DF8 
 4024      04EB
 4025 114c 4046     	2:  mov r0,T1 
 4026 114e 00B5FFF7 	    _CALL uart_puts 
 4026      FEFF5DF8 
 4026      04EB
 4027 1158 4FF02000 	    mov r0,#SPACE
 4028 115c 09F10109 	    add T2,#1  
 4029 1160 00B5FFF7 	    _CALL uart_putc 
 4029      FEFF5DF8 
 4029      04EB
 4030 116a 58F80C8C 	    ldr T1,[T1,#-12]
 4031 116e DBE7     	    b 1b 
 4032 1170 7047     	9:  _RET 
 4033              	
 4034 1172 00BF     	    _FUNC write
 4035 1174 7047     	    _RET 
 4036              	
 4037              	/**************************************
 4038              	  BASIC: XOR(expr1,expr2)
 4039              	  binary exclusive or between 2 expressions
 4040              	**************************************/
 4041 1176 00BF     	    _FUNC bit_xor
 4042 1178 00B5FFF7 	    _CALL func_args
 4042      FEFF5DF8 
 4042      04EB
 4043 1182 0228     	    cmp r0,#2
 4044 1184 7FF4FEAF 	    bne syntax_error
 4045 1188 5CF8040B 	    _POP r0
 4046 118c 5CF8041B 	    _POP r1 
 4047 1190 81EA0001 	    eor r1,r0 
 4048 1194 4FF00F00 	    mov r0,#TK_INTGR
 4049 1198 7047     	    _RET 
 4050              	
 4051 119a 00BF     	    _FUNC transmit
 4052 119c 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 103


 4053              	
 4054 119e 00BF     	    _FUNC receive
 4055 11a0 7047     	    _RET  
 4056              	
 4057 11a2 0000     	  .section .rodata.user
 4058              	  .p2align 10 
 4059              	user:
 4060 0000 55534552 	  .ascii "USER"
 4061              	
 4062              	/*************************************************
 4063              	   extra FLASH memory not used by Tiny BASIC
 4064              	   is used to save BASIC programs.
 4065              	************************************************/
 4066 0004 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 4066      00000000 
 4066      00000000 
 4066      00000000 
 4066      00000000 
 4067              	  .section .rodata.fs
 4068              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 104


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 105


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 106


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 107


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 INP
      tbi_macros.inc:38     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:53     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:54     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:55     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:56     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:57     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:58     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:59     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:60     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:61     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:62     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:63     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:64     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:65     *ABS*:0000000000000011 TK_MINUS
ARM GAS  tinyBasic.s 			page 108


      tbi_macros.inc:66     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:67     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:68     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:76     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:77     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:78     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:79     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:80     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:81     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:84     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:85     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:86     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:87     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:88     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:93     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:94     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:95     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:96     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:98     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:99     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:100    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:102    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:103    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:104    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:105    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:106    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:107    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:108    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:115    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:117    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:123    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:140    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:141    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:142    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:143    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:144    *ABS*:0000000000000010 DATA
      tbi_macros.inc:145    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:146    *ABS*:0000000000000018 BASE
      tbi_macros.inc:147    *ABS*:000000000000001c TICKS
      tbi_macros.inc:148    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:149    *ABS*:0000000000000024 SEED
      tbi_macros.inc:150    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:151    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:152    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:153    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:154    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:155    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:156    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:157    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:158    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:159    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:160    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:161    *ABS*:0000000000000060 VARS
ARM GAS  tinyBasic.s 			page 109


      tbi_macros.inc:162    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:163    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:164    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:165    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:168    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:169    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:170    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:171    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:172    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:173    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:174    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:176    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:178    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:179    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATA_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATALN_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DEC_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DIR_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DO_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 FOR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FORGET_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 GOSUB_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 GOTO_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 HEX_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 IF_IDX
       cmd_index.inc:51     *ABS*:000000000000001a INP_IDX
       cmd_index.inc:52     *ABS*:000000000000001b INPUT_IDX
       cmd_index.inc:53     *ABS*:000000000000001c INVERT_IDX
       cmd_index.inc:54     *ABS*:000000000000001d KEY_IDX
       cmd_index.inc:55     *ABS*:000000000000001e LET_IDX
       cmd_index.inc:56     *ABS*:000000000000001f LIST_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 LOAD_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LOG2_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LSHIFT_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 NEW_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 NEXT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 NOT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 OR_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 OUT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 PAD_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 PAUSE_IDX
       cmd_index.inc:67     *ABS*:000000000000002a PMODE_IDX
ARM GAS  tinyBasic.s 			page 110


       cmd_index.inc:68     *ABS*:000000000000002b PEEK8_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PEEK16_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PEEK32_IDX
       cmd_index.inc:71     *ABS*:000000000000002e POKE8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f POKE16_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 POKE32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PRT_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 QKEY_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 READ_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 REM_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 REST_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 RET_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 RND_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 RSHIFT_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 RUN_IDX
       cmd_index.inc:83     *ABS*:000000000000003a SAVE_IDX
       cmd_index.inc:84     *ABS*:000000000000003b SIZE_IDX
       cmd_index.inc:85     *ABS*:000000000000003c SLEEP_IDX
       cmd_index.inc:86     *ABS*:000000000000003d SPC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e SPIRD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f SPIEN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SPISEL_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SPIWR_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 STEP_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STOP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 TAB_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 THEN_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TICKS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 TIMER_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TMROUT_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TO_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TONE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TRACE_IDX
       cmd_index.inc:101    *ABS*:000000000000004c UBOUND_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UFLASH_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UNTIL_IDX
       cmd_index.inc:104    *ABS*:000000000000004f USR_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WAIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WORDS_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 WRITE_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XOR_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 XTRMT_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:295    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
ARM GAS  tinyBasic.s 			page 111


         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:000000000000018c data_stack
         tinyBasic.s:241    .text:000000000000018c $d
         tinyBasic.s:247    .text:000000000000019c show_main_stack
         tinyBasic.s:262    .text:00000000000001e2 main_stack
         tinyBasic.s:262    .text:00000000000001e2 $d
         tinyBasic.s:267    .text:00000000000001ec show_trace
         tinyBasic.s:323    .text:000000000000024c search_lineno
         tinyBasic.s:354    .text:000000000000026c delete_line
         tinyBasic.s:379    .text:0000000000000298 create_gap
         tinyBasic.s:404    .text:00000000000002c0 insert_line
         tinyBasic.s:443    .text:0000000000000310 compile
         tinyBasic.s:1584   .text:0000000000000cec pad
         tinyBasic.s:683    .text:0000000000000548 parse_int
         tinyBasic.s:1248   .text:00000000000009b0 tb_error
         tinyBasic.s:519    .text:00000000000003b0 comp_token
         tinyBasic.s:593    .text:000000000000049c store_r0
         tinyBasic.s:777    .text:00000000000005e8 skip
         tinyBasic.s:796    .text:0000000000000600 upper
         tinyBasic.s:627    .text:00000000000004dc is_special
         tinyBasic.s:649    .text:0000000000000520 token_ofs
         tinyBasic.s:534    .text:00000000000003f0 tok_idx0
         tinyBasic.s:596    .text:00000000000004a2 try_number
         tinyBasic.s:538    .text:00000000000003f2 single
         tinyBasic.s:644    .text:0000000000000511 tok_single
         tinyBasic.s:542    .text:00000000000003fa lt
         tinyBasic.s:548    .text:0000000000000408 gt
         tinyBasic.s:561    .text:000000000000042c bkslash
         tinyBasic.s:610    .text:00000000000004d6 token_exit
         tinyBasic.s:568    .text:0000000000000442 prt_cmd
         tinyBasic.s:574    .text:0000000000000454 quote
         tinyBasic.s:716    .text:0000000000000580 parse_quote
         tinyBasic.s:579    .text:0000000000000468 tick
         tinyBasic.s:991    .text:0000000000000708 parse_keyword
         tinyBasic.s:641    .text:00000000000004fc char_list
         tinyBasic.s:642    .text:00000000000004fc $d
         tinyBasic.s:650    .text:0000000000000520 $d
         tinyBasic.s:667    .text:0000000000000548 $t
         tinyBasic.s:950    .text:00000000000006bc atoi
         tinyBasic.s:747    .text:00000000000005b4 get_escaped_char
         tinyBasic.s:764    .text:00000000000005de escaped
         tinyBasic.s:764    .text:00000000000005de $d
         tinyBasic.s:777    .text:00000000000005e6 $t
         tinyBasic.s:814    .text:0000000000000610 is_digit
         tinyBasic.s:838    .text:000000000000062c is_hex
         tinyBasic.s:863    .text:0000000000000650 is_bit
         tinyBasic.s:884    .text:000000000000066c is_alpha
         tinyBasic.s:909    .text:000000000000068c is_num
         tinyBasic.s:930    .text:00000000000006a4 is_alnum
         tinyBasic.s:1233   .text:00000000000009a8 syntax_error
         tinyBasic.s:2265   .rodata.dictionary:0000000000000658 kword_dict
         tinyBasic.s:1400   .text:0000000000000b2c search_dict
         tinyBasic.s:1042   .text:0000000000000790 cmd_name
         tinyBasic.s:1068   .text:00000000000007b4 decompile_line
         tinyBasic.s:1085   .text:00000000000007fa decomp_loop
         tinyBasic.s:1678   .text:0000000000000d94 next_token
         tinyBasic.s:1190   .text:0000000000000959 single_char
ARM GAS  tinyBasic.s 			page 112


         tinyBasic.s:1186   .text:0000000000000950 ge_str
         tinyBasic.s:1187   .text:0000000000000953 le_str
         tinyBasic.s:1188   .text:0000000000000956 ne_str
         tinyBasic.s:1186   .text:0000000000000950 $d
         tinyBasic.s:1210   .text:0000000000000990 modulo
         tinyBasic.s:1210   .text:0000000000000990 $t
         tinyBasic.s:1281   .text:0000000000000a40 compile_error
         tinyBasic.s:1252   .text:00000000000009b8 rt_error
         tinyBasic.s:1296   .text:0000000000000a92 rt_error_msg
         tinyBasic.s:1300   .text:0000000000000ab2 err_msg
         tinyBasic.s:1297   .text:0000000000000aa3 token_at_msg
         tinyBasic.s:2679   .text.basic:0000000000000336 dump01
         tinyBasic.s:1597   .text:0000000000000cfc warm_start
         tinyBasic.s:1296   .text:0000000000000a92 $d
         tinyBasic.s:1308   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1309   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1310   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1311   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1312   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1313   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1314   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1315   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1316   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1317   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1318   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1319   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1320   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1321   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1322   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1323   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1325   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1326   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1327   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1337   .text:0000000000000af6 $t
         tinyBasic.s:1337   .text:0000000000000af8 skip_line
         tinyBasic.s:1354   .text:0000000000000b00 BTGL
         tinyBasic.s:1372   .text:0000000000000b04 kword_cmp
         tinyBasic.s:1438   .text:0000000000000b6a cold_start
         tinyBasic.s:1461   .text:0000000000000bc8 src_addr
         tinyBasic.s:1463   .text:0000000000000bcc dest_addr
         tinyBasic.s:1583   .text:0000000000000ce8 tib
         tinyBasic.s:1465   .text:0000000000000bd0 sysvar_size
         tinyBasic.s:1476   .text:0000000000000bd4 prt_version
         tinyBasic.s:1532   .text:0000000000000c78 clear_basic
         tinyBasic.s:3535   .text.basic:0000000000000c50 search_free
         tinyBasic.s:1462   .text:0000000000000bc8 $d
         tinyBasic.s:2141   .rodata:0000000000000000 uzero
         tinyBasic.s:2166   .rodata:00000000000000d0 ulast
         tinyBasic.s:1476   .text:0000000000000bd4 $t
         tinyBasic.s:1499   .text:0000000000000c38 version_msg
         tinyBasic.s:1501   .text:0000000000000c58 version
         tinyBasic.s:1500   .text:0000000000000c38 $d
         tinyBasic.s:1516   .text:0000000000000c5c clear_vars
         tinyBasic.s:1566   .text:0000000000000cbc warm_init
         tinyBasic.s:1582   .text:0000000000000ce4 dstack
         tinyBasic.s:1581   .text:0000000000000ce0 mstack
         tinyBasic.s:1581   .text:0000000000000ce0 $d
ARM GAS  tinyBasic.s 			page 113


         tinyBasic.s:1585   .text:0000000000000cf0 array
         tinyBasic.s:1586   .text:0000000000000cf4 ready
         tinyBasic.s:1617   .text:0000000000000d14 cmd_line
         tinyBasic.s:1629   .text:0000000000000d48 interpreter
         tinyBasic.s:1662   .text:0000000000000d88 execute
         tinyBasic.s:2992   .text.basic:000000000000067a let_var
         tinyBasic.s:2997   .text.basic:0000000000000686 let_array
         tinyBasic.s:2274   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1684   .text:0000000000000da2 end_of_line
         tinyBasic.s:1688   .text:0000000000000dac next_line
         tinyBasic.s:1735   .text:0000000000000e2c tok_jmp
         tinyBasic.s:1736   .text:0000000000000e2c $d
         tinyBasic.s:1750   .text:0000000000000e6c $t
         tinyBasic.s:1765   .text:0000000000000e6c expect
         tinyBasic.s:1784   .text:0000000000000e88 func_args
         tinyBasic.s:1804   .text:0000000000000eb4 arg_list
         tinyBasic.s:1962   .text:0000000000001054 expression
         tinyBasic.s:1838   .text:0000000000000ef4 factor
         tinyBasic.s:2070   .text:0000000000001140 get_array_element
         tinyBasic.s:2108   .text:0000000000001168 get_var
         tinyBasic.s:1911   .text:0000000000000fd8 term
         tinyBasic.s:2004   .text:00000000000010bc relation
         tinyBasic.s:2051   .text:0000000000001136 relop_jmp
         tinyBasic.s:2023   .text:0000000000001106 rel_idx0
         tinyBasic.s:2024   .text:0000000000001106 rel_eq
         tinyBasic.s:2041   .text:000000000000111c rel_false
         tinyBasic.s:2027   .text:000000000000110a rel_lt
         tinyBasic.s:2030   .text:000000000000110e rel_le
         tinyBasic.s:2033   .text:0000000000001112 rel_gt
         tinyBasic.s:2036   .text:0000000000001116 rel_ge
         tinyBasic.s:2039   .text:000000000000111a rel_diff
         tinyBasic.s:2052   .text:0000000000001136 $d
         tinyBasic.s:2090   .text:0000000000001154 set_array_element
         tinyBasic.s:2126   .text:0000000000001178 set_var
         tinyBasic.s:4068   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2162   .rodata:0000000000000050 $d
         tinyBasic.s:2174   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2173   *ABS*:0000000000000000 link
         tinyBasic.s:2266   .rodata.dictionary:0000000000000658 LINK
         tinyBasic.s:2175   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2261   .rodata.dictionary:000000000000064c first_link
         tinyBasic.s:2308   .text.basic:0000000000000000 abs
         tinyBasic.s:2320   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2323   .text.basic:000000000000002c analog_read
         tinyBasic.s:2330   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2345   .text.basic:0000000000000054 ascii
         tinyBasic.s:2362   .text.basic:0000000000000098 autorun
         tinyBasic.s:2370   .text.basic:000000000000009c awu
         tinyBasic.s:2410   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2432   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2457   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2497   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2481   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2520   .text.basic:00000000000001e4 char
         tinyBasic.s:2538   .text.basic:0000000000000204 data_line
         tinyBasic.s:2643   .text.basic:00000000000002fc dec_base
         tinyBasic.s:3600   .text.basic:0000000000000cbc directory
ARM GAS  tinyBasic.s 			page 114


         tinyBasic.s:2652   .text.basic:0000000000000304 do_loop
         tinyBasic.s:2667   .text.basic:000000000000030c dump
         tinyBasic.s:2717   .text.basic:00000000000003b8 cmd_end
         tinyBasic.s:2725   .text.basic:00000000000003c0 for
         tinyBasic.s:3640   .text.basic:0000000000000d74 forget
         tinyBasic.s:2805   .text.basic:000000000000047c gosub
         tinyBasic.s:2839   .text.basic:00000000000004d8 goto
         tinyBasic.s:2860   .text.basic:0000000000000518 hex_base
         tinyBasic.s:2869   .text.basic:0000000000000520 if
         tinyBasic.s:3143   .text.basic:0000000000000840 inp
         tinyBasic.s:2888   .text.basic:0000000000000538 input_var
         tinyBasic.s:2956   .text.basic:0000000000000630 invert
         tinyBasic.s:2969   .text.basic:0000000000000650 key
         tinyBasic.s:2985   .text.basic:0000000000000664 let
         tinyBasic.s:3028   .text.basic:00000000000006f0 list
         tinyBasic.s:3669   .text.basic:0000000000000dc0 load
         tinyBasic.s:3079   .text.basic:00000000000007a0 log2
         tinyBasic.s:3094   .text.basic:00000000000007c4 lshift
         tinyBasic.s:3108   .text.basic:00000000000007e4 new
         tinyBasic.s:2770   .text.basic:0000000000000424 next
         tinyBasic.s:3117   .text.basic:0000000000000804 func_not
         tinyBasic.s:3129   .text.basic:000000000000081c bit_or
         tinyBasic.s:3167   .text.basic:0000000000000898 out
         tinyBasic.s:3192   .text.basic:00000000000008fc pad_ref
         tinyBasic.s:3203   .text.basic:0000000000000908 pause
         tinyBasic.s:3231   .text.basic:0000000000000924 pin_mode
         tinyBasic.s:3296   .text.basic:00000000000009f0 peek8
         tinyBasic.s:3309   .text.basic:0000000000000a0c peek16
         tinyBasic.s:3322   .text.basic:0000000000000a28 peek32
         tinyBasic.s:3336   .text.basic:0000000000000a44 poke8
         tinyBasic.s:3348   .text.basic:0000000000000a5c poke16
         tinyBasic.s:3360   .text.basic:0000000000000a74 poke32
         tinyBasic.s:3374   .text.basic:0000000000000a8c print
         tinyBasic.s:3441   .text.basic:0000000000000b74 qkey
         tinyBasic.s:2568   .text.basic:0000000000000258 read
         tinyBasic.s:2610   .text.basic:00000000000002b8 restore
         tinyBasic.s:2826   .text.basic:00000000000004c0 return
         tinyBasic.s:3453   .text.basic:0000000000000b90 random
         tinyBasic.s:3476   .text.basic:0000000000000bd4 rshift
         tinyBasic.s:3489   .text.basic:0000000000000bf4 run
         tinyBasic.s:3722   .text.basic:0000000000000e4c save
         tinyBasic.s:3803   .text.basic:0000000000000f88 size
         tinyBasic.s:3816   .text.basic:0000000000000f98 sleep
         tinyBasic.s:3830   .text.basic:0000000000000fb8 spc
         tinyBasic.s:3838   .text.basic:0000000000000fd8 spi_read
         tinyBasic.s:3841   .text.basic:0000000000000fdc spi_enable
         tinyBasic.s:3844   .text.basic:0000000000000fe0 spi_select
         tinyBasic.s:3847   .text.basic:0000000000000fe4 spi_write
         tinyBasic.s:2756   .text.basic:000000000000040c step
         tinyBasic.s:3856   .text.basic:0000000000000fe8 stop
         tinyBasic.s:3878   .text.basic:000000000000102c tab
         tinyBasic.s:2880   .text.basic:0000000000000534 then
         tinyBasic.s:3890   .text.basic:000000000000104c get_ticks
         tinyBasic.s:3899   .text.basic:0000000000001054 set_timer
         tinyBasic.s:3911   .text.basic:0000000000001068 timeout
         tinyBasic.s:2743   .text.basic:00000000000003f4 to
         tinyBasic.s:3919   .text.basic:000000000000107c tone
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:3930   .text.basic:0000000000001080 trace
         tinyBasic.s:3946   .text.basic:000000000000109c ubound
         tinyBasic.s:3958   .text.basic:00000000000010b0 uflash
         tinyBasic.s:3969   .text.basic:00000000000010b8 until
         tinyBasic.s:3979   .text.basic:00000000000010d8 usr
         tinyBasic.s:3987   .text.basic:00000000000010dc wait
         tinyBasic.s:4012   .text.basic:0000000000001110 words
         tinyBasic.s:4034   .text.basic:0000000000001174 write
         tinyBasic.s:4041   .text.basic:0000000000001178 bit_xor
         tinyBasic.s:4051   .text.basic:000000000000119c transmit
         tinyBasic.s:4054   .text.basic:00000000000011a0 receive
         tinyBasic.s:2308   .text.basic:0000000000000000 $t
         tinyBasic.s:2587   .text.basic:0000000000000290 seek_next
         tinyBasic.s:2632   .text.basic:00000000000002ee no_data_line
         tinyBasic.s:2628   .text.basic:00000000000002e8 try_next_line
         tinyBasic.s:2691   .text.basic:0000000000000358 print_dump_header
         tinyBasic.s:2949   .text.basic:000000000000062c str_buffer
         tinyBasic.s:2948   .text.basic:0000000000000628 input_buffer
         tinyBasic.s:2948   .text.basic:0000000000000628 $d
         tinyBasic.s:2956   .text.basic:0000000000000630 $t
         tinyBasic.s:3073   .text.basic:000000000000079c out_buff
         tinyBasic.s:3073   .text.basic:000000000000079c $d
         tinyBasic.s:3079   .text.basic:00000000000007a0 $t
         tinyBasic.s:3196   .text.basic:0000000000000904 pad_adr
         tinyBasic.s:3196   .text.basic:0000000000000904 $d
         tinyBasic.s:3203   .text.basic:0000000000000908 $t
         tinyBasic.s:3429   .text.basic:0000000000000b5a unget_exit
         tinyBasic.s:3431   .text.basic:0000000000000b62 print_exit
         tinyBasic.s:3588   .text.basic:0000000000000cb8 fs_addr
         tinyBasic.s:3563   .text.basic:0000000000000c74 search_file
         tinyBasic.s:3567   .text.basic:0000000000000c7c cmp_loop
         tinyBasic.s:3588   .text.basic:0000000000000cb8 $d
         tinyBasic.s:3600   .text.basic:0000000000000cbc $t
         tinyBasic.s:3623   .text.basic:0000000000000d34 no_more_file
         tinyBasic.s:3633   .text.basic:0000000000000d6c fcount
         tinyBasic.s:3633   .text.basic:0000000000000d6c $d
         tinyBasic.s:3795   .text.basic:0000000000000f74 fsize
         tinyBasic.s:3796   .text.basic:0000000000000f80 data_bytes
         tinyBasic.s:3740   .text.basic:0000000000000e94 new_file
         tinyBasic.s:3795   .text.basic:0000000000000f74 $d
         tinyBasic.s:3803   .text.basic:0000000000000f86 $t
         tinyBasic.s:4059   .rodata.user:0000000000000000 user
         tinyBasic.s:4058   .rodata.user:0000000000000000 $d
         tinyBasic.s:4057   .text.basic:00000000000011a2 $d
         tinyBasic.s:4068   .text.basic:00000000000011a4 $d
         tinyBasic.s:4068   .text:0000000000001188 $d
         tinyBasic.s:247    .text:0000000000000199 $d
         tinyBasic.s:247    .text:000000000000019a $t
         tinyBasic.s:267    .text:00000000000001eb $d
         tinyBasic.s:267    .text:00000000000001ec $t
         tinyBasic.s:648    .text:000000000000051f $d
         tinyBasic.s:1503   .text:0000000000000c59 $d
         tinyBasic.s:1503   .text:0000000000000c5a $t
         tinyBasic.s:1597   .text:0000000000000cfb $d
         tinyBasic.s:1597   .text:0000000000000cfc $t
         tinyBasic.s:2070   .text:000000000000113d $d
         tinyBasic.s:2070   .text:000000000000113e $t
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:3640   .text.basic:0000000000000d73 $d
         tinyBasic.s:3640   .text.basic:0000000000000d74 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_getc
tabulation
uart_qkey
page_align
erase_page
unlock
hword_write
