ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 13


  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 14


 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 15


 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 16


 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
 238              	  BASIC: DUMP adr, count 
 239              	    command line only  
 240              	    print memory content in hexadecimal 
 241              	    16 bytes per row 
 242              	    ouput:
 243              	      none 
 244              	    use:
 245              	      r2   byte counter  
 246              	****************************************/
 247              	    _FUNC dump 
 248 0150 04B4     	    push {r2}
 249 0152 226C     	    ldr r2,[UPP,#FLAGS]
 250 0154 12F0010F 	    tst r2,#FRUN 
 251 0158 02D0     	    beq 0f
 252 015a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 253 015e B7E2     	    b tb_error  
 254 0160 00B500F0 	0:  _CALL arg_list 
 254      33FD5DF8 
 254      04EB
 255 016a 0228     	    cmp r0,#2
 256 016c 40F0AC82 	    bne syntax_error 
 257 0170 5CF8042B 	    _POP r2   // count 
ARM GAS  tinyBasic.s 			page 17


 258 0174 5CF8040B 	    _POP  r0  // adr 
 259 0178 4FF01001 	1:  mov r1,#16
 260 017c 00B5FFF7 	    _CALL prt_row 
 260      A3FF5DF8 
 260      04EB
 261 0186 103A     	    subs r2,#16 
 262 0188 F6D5     	    bpl 1b 
 263 018a 04BC     	2:  pop {r2}
 264 018c 7047     	    _RET 
 265              	
 266              	/***************************************
 267              	    search_lineno 
 268              	    localize BASIC line from its number 
 269              	    input:
 270              	      r0   line# 
 271              	    output: 
 272              	      r0   adr where found || adr new to be inserted 
 273              	      r1   0 found || !0 not found  
 274              	    use:
 275              	      r0   scan address 
 276              	      r1   temp   
 277              	      r2   address end of text
 278              	      r3   target line#
 279              	****************************************/    
 280 018e 00BF     	    _FUNC search_lineno
 281 0190 0CB4     	    push {r2,r3} 
 282 0192 0346     	    mov r3,r0 // target 
 283 0194 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 284 0196 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 285 0198 9042     	1:  cmp r0,r2 
 286 019a 05D0     	    beq  8f
 287 019c 0188     	    ldrh r1,[r0]
 288 019e C91A     	    subs r1,r3 
 289 01a0 04D5     	    bpl 9f 
 290 01a2 8178     	    ldrb r1,[r0,#2]
 291 01a4 0844     	    add r0,r1
 292 01a6 F7E7     	    b 1b 
 293 01a8 4FF0FF31 	8:  mov r1,#-1 
 294 01ac 0CBC     	9:  pop {r2,r3}
 295 01ae 7047     	    _RET 
 296              	
 297              	
 298              	/********************************************
 299              	    delete_line 
 300              	    delete BASIC line at addr 
 301              	    input:
 302              	      r0    address line to delete 
 303              	    output:
 304              	      r0    same as input 
 305              	    use: 
 306              	      r1    dest adr
 307              	      r2    bytes to move 
 308              	      T1    length line to delete 
 309              	      T2    txtend 
 310              	********************************************/
 311              	    _FUNC delete_line 
 312 01b0 2DE90703 	    push {r0,r1,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 313 01b4 0146     	    mov r1,r0 // dest 
 314 01b6 91F80280 	    ldrb T1,[r1,#2] // line length 
 315 01ba 4044     	    add r0,T1  // src
 316 01bc D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01c0 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 318 01c4 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01ce A9EB0809 	    sub T2,T1 // txtend-count 
 320 01d2 C4F83490 	    str T2,[UPP,#TXTEND] 
 321 01d6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 322 01da 7047     	    _RET 
 323              	
 324              	/******************************************
 325              	    create_gap 
 326              	    create a gap in text area to insert new line 
 327              	    input:
 328              	      r0    adr 
 329              	      r1    length 
 330              	    output:
 331              	      r0    adr 
 332              	    use:
 333              	      T1    length 
 334              	      T2    txtend 
 335              	************************************************/
 336              	    _FUNC create_gap 
 337 01dc 2DE90503 	    push {r0,r2,T1,T2}
 338 01e0 8846     	    mov T1,R1
 339 01e2 0144     	    add r1,r0  // dest 
 340 01e4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 341 01e8 A9EB0002 	    sub r2,T2,r0 
 342 01ec 00B5FFF7 	    _CALL cmove
 342      FEFF5DF8 
 342      04EB
 343 01f6 C144     	    add T2,T1 
 344 01f8 C4F83490 	    str T2,[UPP,#TXTEND]
 345 01fc BDE80503 	    pop {r0,r2,T1,T2}
 346 0200 7047     	    _RET 
 347              	
 348              	/************************************************
 349              	    insert_line 
 350              	    insert BASIC line in text area 
 351              	    first search if line with same number exist 
 352              	    replace if so. 
 353              	    input:
 354              	      r0    *buffer to insert 
 355              	    output:
 356              	      none 
 357              	    use: 
 358              	      T1     *buffer
 359              	      T2     temp  
 360              	************************************************/ 
 361 0202 00BF     	    _FUNC insert_line 
 362 0204 2DE90203 	    push {r1,T1,T2}
 363 0208 8046     	    mov T1,r0 
 364 020a B8F80000 	    ldrh r0,[T1]
 365 020e 00B5FFF7 	    _CALL search_lineno 
ARM GAS  tinyBasic.s 			page 19


 365      BEFF5DF8 
 365      04EB
 366 0218 49B9     	    cbnz  r1, 1f // line# doesn't exist
 367              	// already exist 
 368 021a 00B5FFF7 	    _CALL delete_line // delete old one 
 368      C8FF5DF8 
 368      04EB
 369 0224 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 370 0228 B9F1040F 	    cmp T2,#4 // empty line length==4  
 371 022c 0ED0     	    beq 9f
 372              	1: //insert new line 
 373 022e 98F80210 	    ldrb r1,[T1,#2]
 374 0232 00B5FFF7 	    _CALL create_gap 
 374      D2FF5DF8 
 374      04EB
 375 023c 0146     	    mov r1,r0
 376 023e 4046     	    mov r0,T1 
 377 0240 8278     	    ldrb r2,[r0,#2]
 378 0242 00B5FFF7 	    _CALL cmove 
 378      FEFF5DF8 
 378      04EB
 379 024c BDE80203 	9:  pop {r1,T1,T2}
 380 0250 7047     	    _RET 
 381              	
 382              	/*********************************
 383              	    compile 
 384              	    tokenize source line save it 
 385              	    in pas buffer.
 386              	    compiled line format: 
 387              	      line_no  2 bytes {0...32767}
 388              	      count    1 byte  
 389              	      tokens   variable length 
 390              	  input:
 391              	     r0   *text buffer 
 392              	     r1   *text length   
 393              	  output:
 394              	    r0    0 stored | -1 immediate 
 395              	  use:
 396              	    r3    tib index   
 397              	    T1    tib
 398              	    T2    pad
 399              	***********************************/
 400 0252 00BF     	    _FUNC compile
 401 0254 8046     	    mov T1, r0  // source text buffer 
 402 0256 6160     	    str r1,[UPP,#COUNT] // save line length 
 403 0258 DFF8B897 	    ldr T2,pad // tokens buffer
 404 025c 83EA0303 	    eor r3,r3 // source index  
 405 0260 206C     	    ldr r0,[UPP,#FLAGS]
 406 0262 40F02000 	    orr r0,#FCOMP
 407 0266 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 408 0268 80EA0000 	    eor r0,r0     
 409 026c 29F8020B 	    strh r0,[T2],#2   // line no 
 410 0270 09F8010B 	    strb r0,[T2],#1 // length 
 411 0274 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 412 0276 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 413 027a 00B500F0 	    _CALL parse_int 
 413      00F95DF8 
ARM GAS  tinyBasic.s 			page 20


 413      04EB
 414 0284 07D0     	    beq 2f 
 415              	// this is a line number     
 416 0286 0129     	    cmp r1,#1 
 417 0288 02D5     	    bpl 1f 
 418 028a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 419 028e 1FE2     	    b tb_error  
 420              	1:  // write line # to pad 
 421 0290 29F8031C 	    strh r1,[T2,#-3]
 422 0294 2360     	    str r3,[UPP,#IN_SAVED]
 423              	2:  // check for pad full 
 424 0296 C145     	    cmp T2,T1
 425 0298 02DB     	    blt 3f 
 426 029a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 427 029e 17E2     	    b tb_error 
 428 02a0 00B500F0 	3:  _CALL comp_token 
 428      21F85DF8 
 428      04EB
 429 02aa 0028     	    cmp r0,#TK_NONE 
 430 02ac 01D0     	    beq 4f 
 431 02ae 2360     	    str r3,[UPP,#IN_SAVED]
 432 02b0 F1E7     	    b 2b 
 433              	4: // compilation completed 
 434 02b2 DFF86037 	    ldr r3,pad 
 435 02b6 A9EB0300 	    sub r0,T2,r3 // line length 
 436 02ba 9870     	    strb r0,[r3,#2]
 437 02bc 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 438 02be 1888     	    ldrh r0,[r3] // line number 
 439 02c0 38B1     	    cbz r0,8f  
 440              	// insert line in text buffer 
 441 02c2 1846     	    mov r0,r3 
 442 02c4 00B5FFF7 	    _CALL insert_line 
 442      9DFF5DF8 
 442      04EB
 443 02ce 4040     	    eors r0,r0 
 444 02d0 08E0     	    b 9f 
 445 02d2 9B46     	8:  mov BPTR,r3 // *token_list 
 446 02d4 4FF0030A 	    mov IN,#3
 447 02d8 206C     	    ldr r0,[UPP,#FLAGS]
 448 02da A0F12000 	    sub r0,#FCOMP
 449 02de 2064     	    str r0,[UPP,#FLAGS]
 450 02e0 5FF0FF30 	    movs r0,#-1 
 451 02e4 7047     	9:  _RET 
 452              	
 453              	/*********************************************
 454              	    compile next token from source 
 455              	    input: 
 456              	      r3 		tib index  
 457              	      T1    tib adr
 458              	      T2    insert point in pad  
 459              	    output:
 460              	      r0     token attribute 
 461              	      r1 		token value
 462              	      r3     tib index updated    
 463              	      T2     updated 
 464              	      use:
 465              	**********************************************/
ARM GAS  tinyBasic.s 			page 21


 466              	    .macro _case c, next  
 467              	    cmp r0,#\c 
 468              	    bne \next
 469              	    .endm 
 470              	
 471 02e6 00BF     	    _FUNC comp_token 
 472 02e8 40B4     	    push {r6}
 473 02ea 18F80300 	    ldrb r0,[T1,r3]
 474 02ee 0040     	    ands r0,r0 
 475 02f0 70D0     	    beq store_r0  // reached end of text  
 476 02f2 4FF02000 	    mov r0,#SPACE 
 477 02f6 00B500F0 	    _CALL skip  // skip spaces 
 477      2EF95DF8 
 477      04EB
 478 0300 18F80300 	    ldrb r0,[T1,r3]
 479 0304 0040     	    ands r0,r0 
 480 0306 65D0     	    beq store_r0  // reached end of text 
 481 0308 03F10103 	    add r3,#1 
 482 030c 00B500F0 	    _CALL upper 
 482      2FF95DF8 
 482      04EB
 483 0316 00B500F0 	    _CALL is_special
 483      7CF85DF8 
 483      04EB
 484 0320 DFF8806B 	    ldr r6,=token_ofs
 485 0324 D6E811F0 	    tbh [r6,r1] 
 486              	tok_idx0:     
 487              	//  not special char.  
 488 0328 57E0     	    b try_number 
 489              	// single char token with no value 
 490              	single: 
 491 032a DFF87C6B 	    ldr r6,=tok_single
 492 032e 705C     	    ldrb r0,[r6,r1] 
 493 0330 50E0     	    b store_r0  
 494              	lt:
 495 0332 4FF03400 	    mov r0,#TK_LT
 496 0336 18F80310 	    ldrb r1,[T1,r3]
 497 033a 3E29     	    cmp r1,#'>' 
 498 033c 06D0     	    beq 1f
 499 033e 0AE0     	    b 2f 
 500              	gt:
 501 0340 4FF03100 	    mov r0,#TK_GT 
 502 0344 18F80310 	    ldrb r1,[T1,r3]
 503 0348 3C29     	    cmp r1,#'<'
 504 034a 04D1     	    bne 2f  
 505 034c 03F10103 	1:  add r3,#1
 506 0350 4FF03500 	    mov r0,#TK_NE  
 507 0354 3EE0     	    b store_r0
 508 0356 3D29     	2:  cmp r1,#'=' 
 509 0358 3CD1     	    bne store_r0  
 510 035a 03F10103 	    add r3,#1
 511 035e 00F10200 	    add r0,#2
 512 0362 37E0     	    b store_r0       
 513              	bkslash:
 514 0364 18F80310 	    ldrb r1,[T1,r3]
 515 0368 03F10103 	    add r3,#1
 516 036c 4FF00300 	    mov r0,#TK_CHAR 
ARM GAS  tinyBasic.s 			page 22


 517 0370 09F8010B 	    strb r0,[T2],#1
 518 0374 09F8011B 	    strb r1,[T2],#1
 519 0378 49E0     	    b token_exit 
 520              	prt_cmd: 
 521 037a 4FF00A00 	    mov r0,#TK_CMD 
 522 037e 4FF03A01 	    mov r1,#PRT_IDX
 523 0382 09F8010B 	    strb r0,[T2],#1
 524 0386 09F8011B 	    strb r1,[T2],#1
 525 038a 40E0     	    b token_exit 
 526              	quote:
 527 038c 4FF00200 	    mov r0,#TK_QSTR 
 528 0390 09F8010B 	    strb r0,[T2],#1
 529 0394 00B500F0 	    _CALL parse_quote
 529      ABF85DF8 
 529      04EB
 530 039e 36E0     	    b token_exit
 531              	tick: 
 532              	// copy comment in pad 
 533 03a0 4FF00A00 	    mov r0,#TK_CMD 
 534 03a4 4FF04701 	    mov r1,#REM_IDX 
 535 03a8 09F8010B 	    strb r0,[T2],#1 
 536 03ac 09F8011B 	    strb r1,[T2],#1
 537 03b0 08EB0300 	    add r0,T1,r3 
 538 03b4 4946     	    mov r1,T2 
 539 03b6 00B5FFF7 	    _CALL strcpy 
 539      FEFF5DF8 
 539      04EB
 540 03c0 00B5FFF7 	    _CALL strlen 
 540      FEFF5DF8 
 540      04EB
 541 03ca 8144     	    add T2,r0
 542 03cc 09F10109 	    add T2,#1
 543 03d0 6368     	    ldr r3,[UPP,#COUNT]
 544 03d2 1CE0     	    b token_exit
 545              	store_r0: 
 546 03d4 09F8010B 	    strb r0,[T2],#1
 547 03d8 19E0     	    b token_exit 
 548              	try_number:
 549 03da A3F10103 	    sub r3,#1
 550 03de 00B500F0 	    _CALL parse_int  
 550      4EF85DF8 
 550      04EB
 551 03e8 04D0     	    beq 1f 
 552 03ea 09F8010B 	    strb r0,[T2],#1 
 553 03ee 49F8041B 	    str r1,[T2],#4
 554 03f2 0CE0     	    b token_exit 
 555 03f4 00B500F0 	1:  _CALL parse_keyword 
 555      15F95DF8 
 555      04EB
 556 03fe 0428     	    cmp r0,#TK_VAR 
 557 0400 01D0     	    beq 2f 
 558 0402 4729     	    cmp r1,#REM_IDX 
 559 0404 CCD0     	    beq tick
 560 0406 09F8010B 	2:  strb r0,[T2],#1 
 561 040a 09F8011B 	    strb r1,[T2],#1
 562              	token_exit:
 563 040e 40BC     	    pop {r6}
ARM GAS  tinyBasic.s 			page 23


 564 0410 7047     	    _RET 
 565              	
 566              	/****************************
 567              	    is_special  
 568              	    check for non alphanum
 569              	    input:
 570              	      r0    character to scan 
 571              	    output:
 572              	      r0    character 
 573              	      r1    0 || index 
 574              	    use: 
 575              	      r1    scan index 
 576              	      r2    temp 
 577              	      r3    char_list 
 578              	*****************************/
 579 0412 00BF     	    _FUNC is_special 
 580 0414 0CB4     	    push {r2,r3}
 581 0416 4FF00101 	    mov r1,#1
 582 041a DFF8903A 	    ldr r3,=char_list 
 583 041e 5A5C     	1:  ldrb r2,[r3,r1]
 584 0420 22B1     	    cbz r2,8f 
 585 0422 8242     	    cmp r2,r0 
 586 0424 04D0     	    beq 9f 
 587 0426 01F10101 	    add r1,#1 
 588 042a F8E7     	    b 1b
 589 042c 81EA0101 	8:  eor r1,r1     
 590 0430 0CBC     	9:  pop {r2,r3}
 591 0432 7047     	    _RET 
 592              	
 593              	char_list:
 594 0434 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 594      293A232D 
 594      2B2A2F25 
 594      3D3C3E5C 
 594      3F272200 
 595              	
 596              	tok_single:
 597 0448 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 597      070109
 598 044f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 598      2232
 599              	  
 600 0455 0000BF   	  .p2align 2
 601              	token_ofs:
 602 0458 0000     	  .hword  0 // not found
 603              	  // TK_COMMA...TK_EQUAL , 12 
 604 045a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 604      01000100 
 605 0462 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 605      01000100 
 606 046a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 606      01000100 
 607              	  // '<','>'
 608 0472 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 609              	  // '\'
 610 0476 1E00     	  .hword  (bkslash-tok_idx0)/2
 611              	  // '?' 
ARM GAS  tinyBasic.s 			page 24


 612 0478 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 613              	  // "'"  
 614 047a 3C00     	  .hword  (tick-tok_idx0)/2 
 615              	  // '"' quote 
 616 047c 3200     	  .hword (quote-tok_idx0)/2
 617              	
 618 047e 00BF     	  .p2align 2
 619              	
 620              	/****************************
 621              	    parse_int 
 622              	    parse an integer from text
 623              	    if not valid integer 
 624              	    r1 return *buffer else 
 625              	    *buffer is incremented after integer 
 626              	  input:
 627              	    r0   *buffer 
 628              	  output:
 629              	    r0   TK_INTGR|TK_NONE
 630              	    r1   int|0   
 631              	  use:
 632              	    r0   char 
 633              	    r1   save r3 
 634              	    r2   int
 635              	    r6   base 
 636              	    r7   digit count 
 637              	    r3   tib index   
 638              	    T1   *tib 
 639              	    T2   *pad  
 640              	*****************************/
 641              	    _FUNC parse_int 
 642 0480 C0B4     	    push {r6,r7}
 643 0482 82EA0202 	    eor r2,r2 // int 
 644 0486 1946     	    mov r1,r3 
 645 0488 4FF00A06 	    mov r6,#10 // default base 
 646 048c 87EA0707 	    eor r7,r7 // digit count 
 647 0490 18F80300 	    ldrb r0,[T1,r3]
 648 0494 03F10103 	    add r3,#1 
 649 0498 2428     	    cmp r0,'$' 
 650 049a 02D1     	    bne 2f 
 651 049c 4FF01006 	    mov r6,#16 // hexadecimal number 
 652 04a0 03E0     	    b 3f  
 653 04a2 2628     	2:  cmp r0,#'&' 
 654 04a4 05D1     	    bne 4f
 655 04a6 4FF00206 	    mov r6,#2 //binary number  
 656 04aa 18F80300 	3:  ldrb r0,[T1,r3]
 657 04ae 03F10103 	    add r3,#1
 658 04b2 00B500F0 	4:  _CALL upper 
 658      5CF85DF8 
 658      04EB
 659 04bc 4128     	    cmp r0,#'A'
 660 04be 00D4     	    bmi 5f
 661 04c0 0738     	    subs r0,#7  
 662 04c2 3038     	5:  subs r0,#'0' 
 663 04c4 07D4     	    bmi 6f // not digit   
 664 04c6 B042     	    cmp r0,r6 
 665 04c8 05D5     	    bpl 6f // not digit 
 666 04ca 06FB02F2 	    mul r2,r6 
ARM GAS  tinyBasic.s 			page 25


 667 04ce 0244     	    add r2,r0
 668 04d0 07F10107 	    add r7,#1  
 669 04d4 E9E7     	    b 3b
 670 04d6 A3F10103 	6:  sub r3,#1  // unget last char
 671 04da 1FB1     	    cbz r7, 7f 
 672 04dc 4FF00E00 	    mov r0,#TK_INTGR  
 673 04e0 1146     	    mov r1,r2 
 674 04e2 02E0     	    b 9f 
 675              	7: // not a number 
 676 04e4 0B46     	    mov r3,r1 // restore r3 
 677 04e6 80EA0000 	    eor r0,r0 // TK_NONE 
 678 04ea 0040     	9:  ands r0,r0 // to set zero flag 
 679 04ec C0BC     	    pop {r6,r7}
 680 04ee 7047     	    _RET 
 681              	
 682              	/*********************************************
 683              	    parse_quote 
 684              	    parse quoted string 
 685              	    input: 
 686              	      r3 		tib index  
 687              	      T1    tib adr
 688              	      T2    insert point in pad  
 689              	    output:
 690              	      r0     token attribute 
 691              	      r1 		*str 
 692              	      r3     tib index updated    
 693              	      T2     updated 
 694              	      use:
 695              	*********************************************/
 696              	    _FUNC parse_quote
 697 04f0 4DF8049D 	    push {T2} 
 698 04f4 18F80300 	1:  ldrb r0,[T1,r3]
 699 04f8 03F10103 	    add r3,#1 
 700 04fc 2228     	    cmp r0,#'"'
 701 04fe 09D0     	    beq 9f 
 702 0500 5C28     	    cmp r0,#'\\'
 703 0502 04D1     	    bne 2f 
 704 0504 00B500F0 	    _CALL get_escaped_char 
 704      0DF85DF8 
 704      04EB
 705 050e 09F8010B 	2:  strb r0,[T2],#1
 706 0512 EFE7     	    b 1b 
 707 0514 80EA0000 	9:  eor  r0,r0
 708 0518 09F8010B 	    strb r0,[T2],#1
 709 051c 4FF00200 	    mov r0,#TK_QSTR
 710 0520 02BC     	    pop {r1}
 711 0522 7047     	    _RET 
 712              	
 713              	/**********************************************
 714              	    get_escaped_char 
 715              	    convert "\c" in quoted string 
 716              	    input:
 717              	      r0 
 718              	      r3   index 
 719              	      T1   tib 
 720              	    output:
 721              	      r0   replacement char
ARM GAS  tinyBasic.s 			page 26


 722              	      r3   updated 
 723              	    use:
 724              	      r1   *table 
 725              	      r2   temp 
 726              	**********************************************/
 727              	    _FUNC get_escaped_char 
 728 0524 06B4     	    push {r1,r2}
 729 0526 18F80300 	    ldrb r0,[T1,r3]
 730 052a 03F10103 	    add r3,#1
 731 052e 2228     	    cmp r0,#'"' 
 732 0530 0BD0     	    beq 9f 
 733 0532 DFF87C19 	1:  ldr r1,=escaped 
 734 0536 11F8012B 	2:  ldrb r2,[r1],#1
 735 053a 12B1     	    cbz r2,6f 
 736 053c 8242     	    cmp r2,r0 
 737 053e 02D0     	    beq 7f 
 738 0540 F9E7     	    b 2b
 739 0542 A0F10702 	6:  sub r2,r0,#7     
 740 0546 02F10700 	7:  add r0,r2,#7
 741 054a 06BC     	9:  pop {r1,r2}   
 742 054c 7047     	    _RET
 743              	
 744 054e 6162746E 	escaped: .asciz "abtnvfr"
 744      76667200 
 745              	
 746              	/*********************************************
 747              	   skip character in TIB 
 748              	   input:
 749              	      r0    character to skip 
 750              	      r3    tib index 
 751              	      T1    tib adr
 752              	    output: 
 753              	      r3    updated
 754              	    use:
 755              	      r1     
 756              	**********************************************/   
 757 0556 00BF     	    _FUNC skip
 758 0558 02B4     	    push {r1} 
 759 055a 18F80310 	1:  ldrb r1,[T1,r3]
 760 055e 8142     	    cmp r1,r0
 761 0560 02D1     	    bne 2f
 762 0562 03F10103 	    add r3,#1 
 763 0566 F8E7     	    b 1b 
 764 0568 2360     	2:  str r3,[UPP,#IN_SAVED]
 765 056a 02BC     	    pop {r1}
 766 056c 7047     	    _RET
 767              	
 768              	/********************************************
 769              	    upper
 770              	    convert character in upper case 
 771              	    input: 
 772              	      r0   character 
 773              	    output:
 774              	      r0   upper case character 
 775              	*********************************************/
 776 056e 00BF     	    _FUNC upper 
 777 0570 6128     	    cmp r0,#'a' 
ARM GAS  tinyBasic.s 			page 27


 778 0572 03DB     	    blt 9f 
 779 0574 7A28     	    cmp r0,#'z' 
 780 0576 01DC     	    bgt 9f 
 781 0578 00F05F00 	    and r0,#0x5f 
 782 057c 7047     	9:  _RET 
 783              	
 784              	/***************************************
 785              	   is_digit 
 786              	   check if char is decimal digit.
 787              	   convert to decimal digit.
 788              	   input:
 789              	      r0    char 
 790              	   output:
 791              	      r0    if !Z then converted digit 
 792              	      Z     0 true | 1 false  
 793              	***************************************/
 794 057e 00BF     	    _GBL_FUNC is_digit 
 795 0580 02B4     	    push {r1} 
 796 0582 81EA0101 	    eor r1,r1 
 797 0586 3028     	    cmp r0,#'0' 
 798 0588 05DB     	    blt 9f
 799 058a 3A28     	    cmp r0,'9'+1
 800 058c 03D5     	    bpl 9f 
 801 058e 4FF0FF31 	    mov r1,#-1
 802 0592 A0F13000 	    sub r0,#'0'  
 803              	9:   
 804 0596 0940     	    ands r1,r1
 805 0598 02BC     	    pop {r1} 
 806 059a 7047     	    _RET 
 807              	
 808              	/***************************************
 809              	    is_hex 
 810              	    check for hexadecimal digit 
 811              	    convert to hex digit.
 812              	    input:
 813              	      r0    
 814              	    output:
 815              	      r0     if !Z then converted digit 
 816              	      Z      0 true | 1 false         
 817              	***************************************/
 818              	    _FUNC is_hex 
 819 059c 02B4     	    push {r1}
 820 059e 4FF0FF31 	    mov r1,#-1 
 821 05a2 4128     	    cmp r0,#'A' 
 822 05a4 01D4     	    bmi 1f 
 823 05a6 A0F10700 	    sub r0,#7 
 824 05aa A0F13000 	1:  sub r0,#'0'
 825 05ae 01D4     	    bmi 2f 
 826 05b0 1028     	    cmp r0,#16
 827 05b2 01D4     	    bmi 9f 
 828 05b4 81EA0101 	2:  eor r1,r1  
 829 05b8 0940     	9:  ands r1,r1 
 830 05ba 02BC     	    pop {r1}
 831 05bc 7047     	    _RET 
 832              	
 833              	/***************************************
 834              	    is_bit 
ARM GAS  tinyBasic.s 			page 28


 835              	    check if char is '0'|'1' 
 836              	    convert to binary digit. 
 837              	    input:
 838              	      r0    
 839              	    output:
 840              	      r0     if !Z then converted digit 
 841              	      Z      0 true | 1 false         
 842              	***************************************/
 843 05be 00BF     	    _FUNC is_bit
 844 05c0 02B4     	    push  {r1}
 845 05c2 4FF0FF31 	    mov r1,#-1 
 846 05c6 A0F13000 	    sub r0,#'0' 
 847 05ca 01D4     	    bmi 2f 
 848 05cc 0229     	    cmp r1,#2
 849 05ce 01D4     	    bmi 9f 
 850 05d0 81EA0101 	2:  eor r1,r1 
 851 05d4 0940     	9:  ands r1,r1 
 852 05d6 02BC     	    pop {r1}
 853 05d8 7047     	    _RET 
 854              	
 855              	/***************************************
 856              	    is_alpha 
 857              	    check if character is {A..Z} 
 858              	  input:
 859              	    r0   character 
 860              	  output: 
 861              	    r0    same character 
 862              	    Z    0 true | 1 false  
 863              	****************************************/
 864 05da 00BF     	    _FUNC is_alpha
 865 05dc 02B4     	    push {r1} 
 866 05de 4FF0FF31 	    mov r1,#-1 
 867 05e2 4128     	    cmp r0,#'A' 
 868 05e4 01DB     	    blt 8f 
 869 05e6 5B28     	    cmp r0,#'Z'+1 
 870 05e8 01D4     	    bmi 9f 
 871 05ea 81EA0101 	8:  eor r1,r1  
 872 05ee 0940     	9:  ands r1,r1 
 873 05f0 02BC     	    pop {r1}
 874 05f2 7047     	    _RET 
 875              	
 876              	/***************************************
 877              	    is_num 
 878              	    check if character is {0..9} 
 879              	  input:
 880              	    r0   character 
 881              	  output: 
 882              	    r0    same character 
 883              	    Z    0 true | 1 false  
 884              	****************************************/
 885              	    _FUNC is_num 
 886 05f4 02B4     	    push {r1} 
 887 05f6 4FF0FF31 	    mov r1,#-1 
 888 05fa 3028     	    cmp r0,#'0' 
 889 05fc 01DB     	    blt 8f 
 890 05fe 3A28     	    cmp r0,#'9'+1 
 891 0600 01D4     	    bmi 9f 
ARM GAS  tinyBasic.s 			page 29


 892 0602 81EA0101 	8:  eor r1,r1  
 893 0606 0940     	9:  ands r1,r1 
 894 0608 02BC     	    pop {r1}
 895 060a 7047     	    _RET 
 896              	
 897              	/*****************************************
 898              	    is_alnum 
 899              	    check if character is alphanumeric 
 900              	    input:
 901              	      r0 
 902              	    output:
 903              	      r0     same 
 904              	      Z      1 false | 0 true 
 905              	*****************************************/
 906              	    _FUNC is_alnum 
 907 060c 00B5FFF7 	    _CALL is_alpha 
 907      E5FF5DF8 
 907      04EB
 908 0616 04D1     	    bne 9f 
 909 0618 00B5FFF7 	    _CALL is_num 
 909      EBFF5DF8 
 909      04EB
 910 0622 7047     	9:  _RET 
 911              	
 912              	
 913              	/*****************************************
 914              	    parse_keyword 
 915              	    parse work and ckeck if in dictionary 
 916              	    input:
 917              	      r0    first character 
 918              	      r3    tib index 
 919              	      t1    tib 
 920              	      t2    pad 
 921              	    output:
 922              	      r3    updated 
 923              	      t1    updated 
 924              	      t2    updated   
 925              	    use:
 926              	    
 927              	*****************************************/
 928              	    _FUNC parse_keyword 
 929 0624 4DF8049D 	    push {T2}
 930 0628 18F80300 	    ldrb r0,[T1,r3]
 931 062c 03F10103 	    add r3,#1
 932 0630 F8B1     	    cbz r0,2f 
 933 0632 00B5FFF7 	    _CALL upper 
 933      9CFF5DF8 
 933      04EB
 934 063c 00B5FFF7 	    _CALL is_alpha 
 934      CDFF5DF8 
 934      04EB
 935 0646 3FD0     	    beq syntax_error 
 936 0648 09F8010B 	    strb r0,[T2],#1
 937 064c 18F80300 	1:  ldrb r0,[T1,r3]
 938 0650 03F10103 	    add r3,#1 
 939 0654 68B1     	    cbz r0,2f 
 940 0656 00B5FFF7 	    _CALL upper 
ARM GAS  tinyBasic.s 			page 30


 940      8AFF5DF8 
 940      04EB
 941 0660 00B5FFF7 	    _CALL is_alnum
 941      D3FF5DF8 
 941      04EB
 942 066a 02D0     	    beq 2f 
 943 066c 09F8010B 	    strb r0,[T2],#1
 944 0670 ECE7     	    b 1b 
 945 0672 A3F10103 	2:  sub r3,#1
 946 0676 80EA0000 	    eor r0,r0
 947 067a 89F80000 	    strb r0,[T2] 
 948 067e 0098     	    ldr r0,[sp]
 949 0680 4178     	    ldrb r1,[r0,#1] 
 950 0682 29B9     	    cbnz r1,3f
 951 0684 0178     	    ldrb r1,[r0]
 952 0686 A1F14101 	    sub r1,#'A'
 953 068a 4FF00400 	    mov r0,#TK_VAR
 954 068e 08E0     	    b 9f 
 955 0690 DFF82018 	3:  ldr r1,=kword_dict  
 956 0694 00B500F0 	    _CALL search_dict 
 956      D1F85DF8 
 956      04EB
 957 069e 00B9     	    cbnz r0,9f 
 958 06a0 12E0     	    b syntax_error 
 959 06a2 5DF8049B 	9:  pop {T2}
 960 06a6 7047     	    _RET 
 961              	
 962              	
 963              	/*******************
 964              	    DECOMPILER 
 965              	*******************/
 966              	
 967              	/**********************************
 968              	    cmd_name 
 969              	    reverse dictionary search 
 970              	    from CMD_IDX to NAME 
 971              	  input:
 972              	    r0    CMD_IDX 
 973              	  output:
 974              	    r0    *NAME | 0 
 975              	  use:
 976              	    r1    dictionary link
 977              	    r2    tmp 
 978              	**********************************/
 979              	    _FUNC cmd_name
 980 06a8 06B4     	    push {r1,r2}
 981 06aa DFF80818 	    ldr r1,=kword_dict  
 982 06ae 0A78     	1:  ldrb r2,[r1]
 983 06b0 3AB1     	    cbz r2,3f 
 984 06b2 51F8082C 	    ldr r2,[r1,#-8] // cmd_idx field 
 985 06b6 9042     	    cmp r0,r2 
 986 06b8 02D0     	    beq 2f 
 987 06ba 51F80C1C 	    ldr r1,[r1,#-12] // link field 
 988 06be F6E7     	    b 1b
 989 06c0 0A46     	2:  mov r2,r1
 990 06c2 1046     	3:  mov r0,r2 
 991 06c4 06BC     	    pop {r1,r2}
ARM GAS  tinyBasic.s 			page 31


 992 06c6 7047     	    _RET 
 993              	
 994              	
 995              	/**********************************
 996              	      BASIC commands 
 997              	**********************************/
 998              	
 999              	/*********************************
 1000              	    syntax_error 
 1001              	    display syntax error message and 
 1002              	    abort program 
 1003              	  input:
 1004              	    none  
 1005              	  output: 
 1006              	    none 
 1007              	  use:
 1008              	*********************************/
 1009              	    _FUNC syntax_error 
 1010 06c8 4FF00200 	    mov r0,#ERR_SYNTAX
 1011 06cc 00E0     	    b tb_error 
 1012              	
 1013              	/*********************************
 1014              	    tb_error 
 1015              	    display BASIC error and 
 1016              	    abort program. 
 1017              	  input:
 1018              	    r0    error code   
 1019              	  output: 
 1020              	    none 
 1021              	  use:
 1022              	    r1    temp 
 1023              	*********************************/
 1024 06ce 00BF     	    _FUNC tb_error 
 1025 06d0 216C     	    ldr r1,[UPP,#FLAGS]
 1026 06d2 11F0200F 	    tst r1,#FCOMP
 1027 06d6 43D1     	    bne compile_error
 1028              	rt_error:
 1029 06d8 01B4     	    push {r0}
 1030 06da DFF8DC07 	    ldr r0,=rt_error_msg 
 1031 06de 00B5FFF7 	    _CALL uart_puts 
 1031      FEFF5DF8 
 1031      04EB
 1032 06e8 01BC     	    pop {r0}
 1033 06ea DFF8D017 	    ldr r1,=err_msg  
 1034 06ee 4FEA8000 	    lsl r0,#2 
 1035 06f2 0858     	    ldr r0,[r1,r0]
 1036 06f4 00B5FFF7 	    _CALL uart_puts
 1036      FEFF5DF8 
 1036      04EB
 1037 06fe D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1038 0702 BBF80000 	    ldrh r0,[BPTR]
 1039 0706 4FF00A01 	    mov r1,#10
 1040 070a 00B5FFF7 	    _CALL print_int 
 1040      FEFF5DF8 
 1040      04EB
 1041 0714 4FF02C00 	    mov r0,#',' 
 1042 0718 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 32


 1042      FEFF5DF8 
 1042      04EB
 1043 0722 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1044 0726 00B500F0 	    _CALL next_token
 1044      C6F95DF8 
 1044      04EB
 1045 0730 02B4     	    push {r1}
 1046 0732 4FF00A01 	    mov r1,#10 
 1047 0736 00B5FFF7 	    _CALL print_int 
 1047      FEFF5DF8 
 1047      04EB
 1048 0740 4FF02C00 	    mov r0,#',' 
 1049 0744 00B5FFF7 	    _CALL uart_putc 
 1049      FEFF5DF8 
 1049      04EB
 1050 074e 01BC     	    pop {r0}
 1051 0750 4FF00A01 	    mov r1,#10 
 1052 0754 00B5FFF7 	    _CALL print_int 
 1052      FEFF5DF8 
 1052      04EB
 1053 075e 61E1     	    b warm_start 
 1054              	compile_error:
 1055 0760 DFF85817 	    ldr r1,=err_msg 
 1056 0764 4FEA8000 	    lsl r0,#2 
 1057 0768 0858     	    ldr r0,[r1,r0]
 1058 076a 00B5FFF7 	    _CALL uart_puts
 1058      FEFF5DF8 
 1058      04EB
 1059 0774 A068     	    ldr r0,[UPP,#BASICPTR]
 1060 0776 00B5FFF7 	    _CALL uart_puts
 1060      FEFF5DF8 
 1060      04EB
 1061 0780 4FF00D00 	    mov r0,#CR 
 1062 0784 00B5FFF7 	    _CALL uart_putc  
 1062      FEFF5DF8 
 1062      04EB
 1063 078e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1064 0790 00B5FFF7 	    _CALL spaces 
 1064      FEFF5DF8 
 1064      04EB
 1065 079a 4FF05E00 	    mov r0,#'^' 
 1066 079e 00B5FFF7 	    _CALL uart_putc
 1066      FEFF5DF8 
 1066      04EB
 1067 07a8 4FF00D00 	    mov r0,#CR 
 1068 07ac 00B5FFF7 	    _CALL uart_putc   
 1068      FEFF5DF8 
 1068      04EB
 1069 07b6 35E1     	    b  warm_start  
 1070              	    
 1071              	rt_error_msg:
 1072 07b8 0A52756E 	  .asciz "\nRuntime error\n"
 1072      74696D65 
 1072      20657272 
 1072      6F720A00 
 1073              	
 1074              	err_msg:
ARM GAS  tinyBasic.s 			page 33


 1075 07c8 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1075      00000000 
 1075      0D000000 
 1075      1B000000 
 1075      34000000 
 1076 07e0 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1076      6F000000 
 1076      89000000 
 1076      9A000000 
 1076      AB000000 
 1077 07f4 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1077      EA000000 
 1077      FA000000 
 1077      0E010000 
 1077      21010000 
 1078              	
 1079              	    .section .rodata.tb_error 
 1080              	
 1081 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1081      72792066 
 1081      756C6C0A 
 1081      00
 1082 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1082      61782065 
 1082      72726F72 
 1082      0A00
 1083 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1083      206F7065 
 1083      72617469 
 1083      6F6E206F 
 1083      76657266 
 1084 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1084      73696F6E 
 1084      20627920 
 1084      300A00
 1085 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1085      6C696420 
 1085      6C696E65 
 1085      206E756D 
 1085      6265722E 
 1086 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1086      74696D65 
 1086      206F6E6C 
 1086      79207573 
 1086      6167652E 
 1087 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1087      616E6420 
 1087      6C696E65 
 1087      206F6E6C 
 1087      79207573 
 1088 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1088      69636174 
 1088      65206E61 
 1088      6D652E0A 
 1088      00
 1089 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1089      206E6F74 
ARM GAS  tinyBasic.s 			page 34


 1089      20666F75 
 1089      6E642E0A 
 1089      00
 1090 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1090      76616C75 
 1090      652E0A00 
 1091 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1091      20696E20 
 1091      65787465 
 1091      6E646564 
 1091      206D656D 
 1092 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1092      61746120 
 1092      666F756E 
 1092      642E0A00 
 1093 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1093      726F6772 
 1093      616D2069 
 1093      6E205241 
 1093      4D210A00 
 1094 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1094      20737973 
 1094      74656D20 
 1094      66756C6C 
 1094      2E0A00
 1095 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1095      65722066 
 1095      756C6C0A 
 1095      00
 1096              	
 1097 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1097      2074696D 
 1097      65206572 
 1097      726F722C 
 1097      2000
 1098 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1098      70696C65 
 1098      20657272 
 1098      6F722C20 
 1098      00
 1099 0151 6C617374 	tk_id: .asciz "last token id: "
 1099      20746F6B 
 1099      656E2069 
 1099      643A2000 
 1100              	
 1101              	
 1102              	    .section  .text , "ax", %progbits 
 1103              	
 1104              	/*********************************
 1105              	   skip_line 
 1106              	   data and remark line are skipped
 1107              	   by the interpreter 
 1108              	***********************************/
 1109              	    _FUNC skip_line 
 1110 0808 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1111 080c 7047     	    _RET 
 1112              	
ARM GAS  tinyBasic.s 			page 35


 1113              	
 1114              	/*********************************
 1115              	   BASIC: BTGL adr, mask   
 1116              	   toggle bits [adr]=[adr]^mask  
 1117              	   input:
 1118              	     r0    adr 
 1119              	     r1    mask 
 1120              	    output;
 1121              	      none 
 1122              	    use:
 1123              	      T1   temp
 1124              	      T2   temp  
 1125              	*******************************/     
 1126 080e 00BF     	    _FUNC BTGL 
 1127              	
 1128 0810 7047     	    _RET 
 1129              	
 1130              	/***************************************
 1131              	   kword_cmp
 1132              	   compare keyword to dict entry
 1133              	  input:
 1134              	    r0  keyword 
 1135              	    r1  dict entry 
 1136              	    r2  character count 
 1137              	  output:
 1138              	    r0  0 not same | -1 same 
 1139              	  use:
 1140              	    r6   result  
 1141              	    T1   char 1
 1142              	    T2   char 2
 1143              	**************************************/   
 1144 0812 00BF     	    _FUNC kword_cmp 
 1145 0814 2DE94003 	    push {r6,T1,T2}
 1146 0818 4FF0FF36 	    mov r6,#-1 
 1147 081c 4AB1     	1:  cbz r2,9f       
 1148 081e 10F8018B 	    ldrb T1,[r0],#1
 1149 0822 11F8019B 	    ldrb T2,[r1],#1
 1150 0826 A2F10102 	    sub r2,#1
 1151 082a C845     	    cmp T1,T2
 1152 082c F6D0     	    beq 1b 
 1153 082e 86EA0606 	    eor r6,r6  
 1154 0832 3046     	9:  mov r0,r6
 1155 0834 BDE84003 	    pop {r6,T1,T2}
 1156 0838 7047     	    _RET 
 1157              	
 1158              	/***********************************************
 1159              	    search_dict 
 1160              	    search keyword in dictionary
 1161              	   input:
 1162              	  	 r0   keyword 
 1163              	     r1		dictionary first name field address  
 1164              	   output:
 1165              	     r0 		token attribute 
 1166              	     r1		  cmd_index if r0!=TK_NONE  
 1167              	   use:
 1168              	     r3   length keyword 
 1169              	     T1   keyword
ARM GAS  tinyBasic.s 			page 36


 1170              	     T2   link  
 1171              	**********************************************/
 1172 083a 00BF     	  _FUNC search_dict
 1173 083c 2DE90C03 	  push {r2,r3,T1,T2}
 1174 0840 8046     	  mov T1,r0 
 1175 0842 00B5FFF7 	  _CALL strlen 
 1175      FEFF5DF8 
 1175      04EB
 1176 084c 0346     	  mov r3,r0  
 1177              	1:  
 1178 084e 8946     	   mov T2,r1  // keep for linking   
 1179 0850 0878     	   ldrb r0,[r1] 
 1180 0852 78B1     	   cbz r0,9f // null byte, end of dictionary
 1181 0854 4046     	   mov r0,T1
 1182 0856 1A46     	   mov r2,r3   
 1183 0858 00B5FFF7 	   _CALL kword_cmp  
 1183      DBFF5DF8 
 1183      04EB
 1184 0862 18B9     	   cbnz r0,2f 
 1185 0864 4946     	   mov r1,T2
 1186 0866 51F80C1C 	   ldr r1,[r1,#-12]
 1187 086a F0E7     	   b 1b   
 1188              	2: // found
 1189 086c 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1190 0870 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1191 0874 BDE80C03 	9: pop {r2,r3,T1,T2}
 1192 0878 7047     	   _RET 
 1193              	
 1194              	/********************************************
 1195              	    bc_to_name 
 1196              	    search bytecode in dictionary and 
 1197              	    return its name 
 1198              	  input:
 1199              	    r0    keyword bytecode 
 1200              	  ouput:
 1201              	    r0    name string 
 1202              	  use:
 1203              	    T1    link 
 1204              	    T2    tmp 
 1205              	*********************************************/
 1206 087a 00BF     	    _FUNC bc_to_name 
 1207 087c 2DE90003 	    push {T1,T2}
 1208 0880 DFF83086 	    ldr T1,=kword_dict 
 1209 0884 58F8089C 	1:  ldr T2,[T1,#-8]
 1210 0888 8145     	    cmp T2,r0 
 1211 088a 04D0     	    beq 2f 
 1212 088c 58F80C8C 	    ldr T1,[T1,#-12]
 1213 0890 B8F1000F 	    cmp T1,#0
 1214 0894 F6D1     	    bne 1b  
 1215 0896 4046     	2:  mov r0,T1 
 1216 0898 BDE80003 	    pop {T1,T2}
 1217 089c 7047     	    _RET
 1218              	
 1219              	
 1220              	/**************************
 1221              	    INTERPRETER 
 1222              	*************************/
ARM GAS  tinyBasic.s 			page 37


 1223              	
 1224              	/*********************************
 1225              	   cold_start 
 1226              	   initialize BASIC interpreter 
 1227              	   never leave 
 1228              	   input:
 1229              	     none 
 1230              	   output:
 1231              	    none 
 1232              	*********************************/
 1233              	  .type cold_start, %function 
 1234              	  .global cold_start 
 1235              	cold_start: 
 1236 089e 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1236      C2F20004 
 1237 08a6 DFF84400 	    ldr r0,src_addr 
 1238 08aa 1149     	    ldr r1,dest_addr
 1239 08ac 0968     	    ldr r1,[r1] 
 1240 08ae 0C44     	    add UPP,r1 // system variables base address   
 1241              	// clear RAM
 1242 08b0 2046     	    mov r0,UPP  
 1243 08b2 DFF85C11 	    ldr r1,tib 
 1244 08b6 82EA0202 	    eor r2,r2 
 1245 08ba 40F8042B 	1:  str r2,[r0],#4 
 1246 08be 8842     	    cmp r0,r1 
 1247 08c0 FBD4     	    bmi 1b 
 1248              	//copy initialized system variables to ram 
 1249 08c2 DFF82800 	    ldr r0,src_addr 
 1250 08c6 2146     	    mov r1,UPP 
 1251 08c8 DFF82820 	    ldr r2,sysvar_size
 1252 08cc 00B5FFF7 	    _CALL cmove
 1252      FEFF5DF8 
 1252      04EB
 1253 08d6 00B500F0 	    _CALL prt_version
 1253      0EF85DF8 
 1253      04EB
 1254 08e0 00B500F0 	    _CALL clear_basic  
 1254      5DF85DF8 
 1254      04EB
 1255 08ea 9BE0     	    b warm_start    
 1256              	src_addr:
 1257 08ec 00000000 	  .word uzero
 1258              	dest_addr:
 1259 08f0 00000000 	  .word vectors_size
 1260 08f4 CC000000 	sysvar_size: .word ulast-uzero 
 1261              	
 1262              	/************************************
 1263              	    print firmware version 
 1264              	    input: 
 1265              	      none 
 1266              	    output:
 1267              	      none 
 1268              	    use:
 1269              	      r0 
 1270              	***********************************/
 1271              	    _FUNC prt_version 
 1272 08f8 DFF8C405 	    ldr r0,=version_msg 
ARM GAS  tinyBasic.s 			page 38


 1273 08fc 00B5FFF7 	    _CALL uart_puts
 1273      FEFF5DF8 
 1273      04EB
 1274 0906 9FF87800 	    ldrb r0,version 
 1275 090a 4FEA1010 	    lsr r0,#4 
 1276 090e 00F13000 	    add r0,#'0' 
 1277 0912 3A28     	    cmp r0,#'9'+1 
 1278 0914 01D4     	    bmi 1f 
 1279 0916 00F10700 	    add r0,#7 
 1280              	  1:
 1281 091a 00B5FFF7 	    _CALL uart_putc 
 1281      FEFF5DF8 
 1281      04EB
 1282 0924 4FF02E00 	    mov r0,#'. 
 1283 0928 00B5FFF7 	    _CALL uart_putc 
 1283      FEFF5DF8 
 1283      04EB
 1284 0932 9FF84C00 	    ldrb r0,version 
 1285 0936 00F00F00 	    and r0,#15 
 1286 093a 00F13000 	    add r0,'0' 
 1287 093e 3A28     	    cmp r0,#'9'+1 
 1288 0940 01D4     	    bmi 1f 
 1289 0942 00F10700 	    add r0,#7
 1290              	  1: 
 1291 0946 00B5FFF7 	    _CALL uart_putc 
 1291      FEFF5DF8 
 1291      04EB
 1292 0950 4FF00D00 	    mov r0,#CR 
 1293 0954 00B5FFF7 	    _CALL uart_putc 
 1293      FEFF5DF8 
 1293      04EB
 1294 095e 7047     	    _RET  
 1295              	version_msg:
 1296 0960 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1296      65207069 
 1296      6C6C2074 
 1296      696E7920 
 1296      42415349 
 1297              	version:
 1298 0980 10       	    .byte 0x10 
 1299 0981 0000BF   	    .p2align 2 
 1300              	
 1301              	
 1302              	/*****************************
 1303              	    clear_vars 
 1304              	    initialize variables to 0
 1305              	  input:
 1306              	    none 
 1307              	  output:
 1308              	    none 
 1309              	  use:
 1310              	    r0,r1,r2 
 1311              	*****************************/
 1312              	    _FUNC clear_vars 
 1313 0984 07B4     	    push {r0,r1,r2}
 1314 0986 80EA0000 	    eor r0,r0 
 1315 098a 04F16001 	    add r1,UPP,#VARS
ARM GAS  tinyBasic.s 			page 39


 1316 098e 4FF01A02 	    mov r2,#26
 1317 0992 41F8040B 	1:  str r0,[r1],#4 
 1318 0996 013A     	    subs r2,#1
 1319 0998 FBD1     	    bne 1b  
 1320 099a 07BC     	    pop {r0,r1,r2}
 1321 099c 7047     	    _RET 
 1322              	
 1323              	/*****************************
 1324              	   clear_basic 
 1325              	   reset BASIC system variables 
 1326              	   and clear variables and RAM 
 1327              	*****************************/
 1328 099e 00BF     	    _FUNC clear_basic
 1329 09a0 80EA0000 	  	eor r0,r0
 1330 09a4 2064     	    str r0,[UPP,#FLAGS] 
 1331 09a6 6060     	    str r0,[UPP,#COUNT]
 1332 09a8 2060     	    str r0,[UPP,#IN_SAVED]
 1333 09aa A060     	    str r0,[UPP,#BASICPTR]
 1334 09ac E060     	    str r0,[UPP,#DATAPTR]
 1335 09ae 2061     	    str r0,[UPP,#DATA]
 1336 09b0 6061     	    str r0,[UPP,#DATALEN]
 1337 09b2 04F1CC00 	    add r0,UPP,#BASIC_START 
 1338 09b6 00F11000 	    add r0,#16 
 1339 09ba 6FF00F01 	    mvn r1,#15
 1340 09be 00EA0100 	    and r0,r1 
 1341 09c2 2063     	    str r0,[UPP,#TXTBGN]
 1342 09c4 6063     	    str r0,[UPP,#TXTEND]
 1343 09c6 00B5FFF7 	    _CALL clear_vars
 1343      DCFF5DF8 
 1343      04EB
 1344 09d0 206B     	    ldr r0,[UPP,#TXTBGN]
 1345 09d2 DFF83C10 	    ldr r1,tib 
 1346 09d6 82EA0202 	    eor r2,r2 
 1347 09da 40F8042B 	1:  str r2,[r0],#4
 1348 09de 8842     	    cmp r0,r1 
 1349 09e0 FBD4     	    bmi 1b 
 1350 09e2 7047     	    _RET  
 1351              	
 1352              	/***********************************
 1353              	   warm_init 
 1354              	   initialize interpreter context 
 1355              	  input:
 1356              	    none
 1357              	  output:
 1358              	    none 
 1359              	  use:
 1360              	    r0 
 1361              	***********************************/
 1362              	warm_init:
 1363              	// reset data stack       
 1364 09e4 DFF824C0 	    ldr DP,dstack 
 1365 09e8 4FF0000A 	    mov IN,#0 // BASIC line index 
 1366 09ec 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1367 09f0 80EA0000 	    eor r0,r0 
 1368 09f4 6060     	    str r0,[UPP,#COUNT]  
 1369 09f6 2064     	    str r0,[UPP,#FLAGS]
 1370 09f8 A063     	    str r0,[UPP,#LOOP_DEPTH] 
ARM GAS  tinyBasic.s 			page 40


 1371 09fa 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1372 09fe 6064     	    str r0,[UPP,#TAB_WIDTH]
 1373 0a00 4FF00A00 	    mov r0,#10 // default base decimal 
 1374 0a04 A061     	    str r0,[UPP,#BASE]
 1375 0a06 7047     	    _RET  
 1376              	
 1377 0a08 00000000 	mstack: .word _mstack 
 1378 0a0c 00000000 	dstack: .word _dstack 
 1379 0a10 00000000 	tib: .word _tib 
 1380 0a14 00000000 	pad: .word _pad 
 1381 0a18 FCFFFFFF 	array: .word _pad - 4 
 1382 0a1c 0A524541 	ready: .asciz "\nREADY" 
 1382      445900
 1383              	
 1384              	/**********************************
 1385              	    warm_start 
 1386              	    start BASIC interpreter doesn't  
 1387              	    reset variables and code space 
 1388              	  input:
 1389              	    none 
 1390              	  output:
 1391              	    none 
 1392              	**********************************/
 1393 0a23 00       	    _FUNC warm_start 
 1394              	// initialise parameters stack
 1395 0a24 FFF7DEFF 	    bl warm_init
 1396              	// reset main stack 
 1397 0a28 5FF82400 	    ldr r0,mstack
 1398 0a2c 8546     	    mov sp,r0 
 1399 0a2e DFF89404 	    ldr r0,=ready 
 1400 0a32 00B5FFF7 	    _CALL uart_puts 
 1400      FEFF5DF8 
 1400      04EB
 1401              	// fall in cmd_line 
 1402              	
 1403              	/**********************************
 1404              	   cmd_line 
 1405              	   shell command line 
 1406              	   input:
 1407              	      none 
 1408              	   output:
 1409              	      none 
 1410              	   use:
 1411              	
 1412              	***********************************/
 1413              	    _FUNC cmd_line 
 1414 0a3c 4FF00D00 	    mov r0,#CR 
 1415 0a40 00B5FFF7 	    _CALL uart_putc 
 1415      FEFF5DF8 
 1415      04EB
 1416 0a4a 5FF83C00 	1:  ldr r0,tib
 1417 0a4e 4FF05001 	    mov r1,#TIB_SIZE 
 1418 0a52 00B5FFF7 	    _CALL readln 
 1418      FEFF5DF8 
 1418      04EB
 1419 0a5c 0940     	    ands r1,r1 // empty line 
 1420 0a5e F4D0     	    beq 1b 
ARM GAS  tinyBasic.s 			page 41


 1421 0a60 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1421      F7FB5DF8 
 1421      04EB
 1422 0a6a EED0     	    beq 1b  // tokens stored in text area 
 1423              	// interpret tokenized line 
 1424              	interpreter:
 1425 0a6c 00B500F0 	  _CALL next_token 
 1425      23F85DF8 
 1425      04EB
 1426 0a76 0028     	  cmp r0,#TK_NONE 
 1427 0a78 F8D0     	  beq interpreter   
 1428 0a7a 0A28     	  cmp r0,#TK_CMD 
 1429 0a7c 03D1     	  bne 2f
 1430 0a7e 0846     	  mov r0,r1 
 1431 0a80 00F014F8 	  bl execute  
 1432 0a84 F2E7     	  b interpreter   
 1433              	2: 
 1434 0a86 0428     	  cmp r0,#TK_VAR 
 1435 0a88 05D1     	  bne 3f 
 1436 0a8a 00B500F0 	  _CALL let_var 
 1436      B3F95DF8 
 1436      04EB
 1437 0a94 EAE7     	  b interpreter 
 1438              	3: 
 1439 0a96 0528     	  cmp r0,#TK_ARRAY 
 1440 0a98 05D1     	  bne 4f
 1441 0a9a 00B500F0 	  _CALL let_array 
 1441      B9F95DF8 
 1441      04EB
 1442 0aa4 E2E7     	  b interpreter
 1443              	4: 
 1444 0aa6 0128     	  cmp r0,#TK_COLON
 1445 0aa8 E0D0     	  beq interpreter
 1446 0aaa 0DE6     	  b syntax_error
 1447              	
 1448              	/*****************************
 1449              	    execute 
 1450              	    execute a BASIC routine from 
 1451              	    its token value 
 1452              	  input:
 1453              	    r0  BASIC SUB|FUNC token  
 1454              	  output: 
 1455              	    depend on SUB|FUNc
 1456              	*****************************/
 1457              	    _FUNC execute 
 1458 0aac DFF81814 	    ldr r1,=fn_table 
 1459 0ab0 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1460 0ab4 0047     	    bx r0 
 1461              	
 1462              	/*************************************
 1463              	  next_token 
 1464              	  extract next token from token list 
 1465              	  input:
 1466              	    none 
 1467              	  output:
 1468              	    r0    token attribute
 1469              	    r1    token value if there is one 
ARM GAS  tinyBasic.s 			page 42


 1470              	  use:
 1471              	    T1    exit token type  
 1472              	****************************/
 1473 0ab6 00BF     	    _FUNC next_token 
 1474 0ab8 4DF8048D 	    push {T1}
 1475 0abc 88EA0808 	    eor T1,T1 // TK_NONE 
 1476 0ac0 6068     	    ldr r0,[UPP,#COUNT]
 1477 0ac2 8245     	    cmp IN,r0 
 1478 0ac4 0FD4     	    bmi 0f
 1479              	new_line:
 1480 0ac6 BBF80010 	    ldrh r1,[BPTR] // line #
 1481 0aca 01B9     	    cbnz r1, end_of_line  // command line
 1482 0acc AAE7     	    b warm_start
 1483              	end_of_line:        
 1484 0ace 8344     	    add BPTR,r0 // next line 
 1485 0ad0 606B     	    ldr r0,[UPP,#TXTEND]
 1486 0ad2 8345     	    cmp BPTR,r0 
 1487 0ad4 A6D5     	    bpl warm_start // end of program
 1488 0ad6 9BF80200 	    ldrb r0,[BPTR,#2]
 1489 0ada 6060     	    str r0,[UPP,#COUNT] 
 1490 0adc 4FF0030A 	    mov IN,#3
 1491 0ae0 4FF00100 	    mov r0,#TK_COLON 
 1492 0ae4 2AE0     	    b 9f    
 1493              	0: 
 1494 0ae6 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1495 0aea C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1496 0aee 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1497 0af2 0AF1010A 	    add IN,#1  
 1498 0af6 8046     	    mov T1,r0 
 1499 0af8 00F03F00 	    and r0,#0x3f // limit mask 
 1500 0afc F349     	    ldr r1,=tok_jmp 
 1501 0afe D1E800F0 	    tbb [r1,r0]
 1502              	1: // pc reference point 
 1503 0b02 1BE0     	    b 9f 
 1504              	2: // .byte param
 1505 0b04 1BF80A10 	    ldrb r1,[BPTR,IN]
 1506 0b08 0AF1010A 	    add IN,#1 
 1507 0b0c 16E0     	    b 9f 
 1508              	3: // .hword param 
 1509 0b0e 3BF80A10 	    ldrh r1,[BPTR,IN]
 1510 0b12 0AF1020A 	    add IN,#2 
 1511 0b16 11E0     	    b 9f 
 1512              	4: // .word param  
 1513 0b18 5BF80A10 	    ldr r1,[BPTR,IN]
 1514 0b1c 0AF1040A 	    add IN,#4
 1515 0b20 0CE0     	    b 9f 
 1516              	5: // .asciz param 
 1517 0b22 0BEB0A01 	    add r1,BPTR,IN 
 1518 0b26 0846     	    mov r0,r1  
 1519 0b28 00B5FFF7 	    _CALL strlen 
 1519      FEFF5DF8 
 1519      04EB
 1520 0b32 8244     	    add IN,r0
 1521 0b34 0AF1010A 	    add IN,#1
 1522 0b38 00E0     	    b 9f  
 1523              	8: // syntax error 
 1524 0b3a C5E5     	    b syntax_error 
ARM GAS  tinyBasic.s 			page 43


 1525 0b3c 4046     	9:  mov r0,T1  
 1526 0b3e 5DF8048B 	    pop {T1}
 1527 0b42 7047     	    _RET
 1528              	
 1529              	  .p2align 2
 1530              	tok_jmp: // token id  tbb offset 
 1531 0b44 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1532 0b46 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1533 0b4a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1534 0b4e 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1535 0b52 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1536 0b56 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1536      1C
 1537 0b5b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1537      1C1C
 1538 0b61 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1539 0b64 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1540 0b67 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1540      1C1C1C1C 
 1541 0b6f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1541      1C1C
 1542 0b75 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1542      1D1D
 1543 0b7b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1543      1C1C1C1C 
 1543      1C
 1544              	
 1545              	  .p2align 2 
 1546              	
 1547              	/*********************************
 1548              	    expect 
 1549              	    check if next token is of 
 1550              	    expected type. If not 
 1551              	    call syntax_error  
 1552              	  input:
 1553              	      r0   token attribute
 1554              	  output:
 1555              	      r0  token attribute 
 1556              	      r1  token value
 1557              	  use:
 1558              	      T1   
 1559              	**********************************/
 1560              	    _FUNC expect 
 1561 0b84 4DF8048D 	    push {T1}
 1562 0b88 8046     	    mov T1,r0 
 1563 0b8a 00B5FFF7 	    _CALL next_token 
 1563      94FF5DF8 
 1563      04EB
 1564 0b94 4045     	    cmp r0,T1  
 1565 0b96 7FF497AD 	    bne syntax_error 
 1566 0b9a 5DF8048B 	    pop {T1}
 1567 0b9e 7047     	    _RET 
 1568              	
 1569              	/***********************************
 1570              	    func_args 
 1571              	    get function arguments list 
 1572              	  input:
ARM GAS  tinyBasic.s 			page 44


 1573              	    none 
 1574              	  output:
 1575              	    r0    arg. count 
 1576              	  use:
 1577              	
 1578              	************************************/
 1579              	    _FUNC func_args 
 1580 0ba0 4FF00600 	    mov r0,#TK_LPAREN 
 1581 0ba4 00B5FFF7 	    _CALL expect 
 1581      EDFF5DF8 
 1581      04EB
 1582 0bae 00B500F0 	    _CALL arg_list 
 1582      0CF85DF8 
 1582      04EB
 1583 0bb8 01B4     	    push {r0}
 1584 0bba 4FF00700 	    mov r0,#TK_RPAREN 
 1585 0bbe 00B5FFF7 	    _CALL expect 
 1585      E0FF5DF8 
 1585      04EB
 1586 0bc8 01BC     	    pop {r0}
 1587 0bca 7047     	    _RET 
 1588              	
 1589              	/**********************************
 1590              	    arg_list 
 1591              	    get arguments list on dstack 
 1592              	  input:
 1593              	    none 
 1594              	  output:
 1595              	    r0    arg count
 1596              	  use:
 1597              	    T1    tmp count  
 1598              	***********************************/
 1599              	    _FUNC arg_list 
 1600 0bcc 4DF8048D 	    push {T1}
 1601 0bd0 88EA0808 	    eor T1,T1 
 1602 0bd4 00B500F0 	1:  _CALL expression 
 1602      CBF85DF8 
 1602      04EB
 1603 0bde 0028     	    cmp R0,#TK_NONE 
 1604 0be0 10D0     	    beq 9f 
 1605 0be2 0E28     	    cmp r0,#TK_INTGR
 1606 0be4 0ED1     	    bne 9f 
 1607 0be6 4CF8041D 	    _PUSH r1 
 1608 0bea 08F10108 	    add T1,#1 
 1609 0bee 00B5FFF7 	    _CALL next_token 
 1609      62FF5DF8 
 1609      04EB
 1610 0bf8 0828     	    cmp r0,#TK_COMMA 
 1611 0bfa EBD0     	    beq 1b 
 1612 0bfc D4F800A0 	    _UNGET_TOKEN 
 1612      D4F808B0 
 1613 0c04 4046     	9:  mov r0,T1 
 1614 0c06 5DF8048B 	    pop {T1}
 1615 0c0a 7047     	    _RET 
 1616              	
 1617              	/***********************************
 1618              	 factor
ARM GAS  tinyBasic.s 			page 45


 1619              	 arithmetick factor parser 
 1620              	 factor ::= ['+'|'-'|e]  var | @ |
 1621              				 integer | function |
 1622              				 '('expression')' 
 1623              	  input: 
 1624              	    none 
 1625              	  output:
 1626              	    r0   token attribute 
 1627              	    r1   token value 
 1628              	  use:
 1629              	    r2   temp 
 1630              	    T1   sign 
 1631              	    T2   exit token attribute 
 1632              	***********************************/
 1633              	    _FUNC factor 
 1634 0c0c 2DE90403 	    push {r2,T1,T2}
 1635 0c10 4FF00E09 	    mov T2,#TK_INTGR 
 1636 0c14 4FF00108 	    mov T1,#1 // default sign +  
 1637 0c18 00B5FFF7 	    _CALL next_token
 1637      4DFF5DF8 
 1637      04EB
 1638 0c22 0246     	    mov r2,r0 
 1639 0c24 00F03000 	    and r0,#TK_GRP_MASK 
 1640 0c28 1028     	    cmp r0,#TK_GRP_ADD
 1641 0c2a 1046     	    mov r0,r2
 1642 0c2c 08D1     	    bne 1f 
 1643 0c2e 1028     	    cmp r0,#TK_PLUS 
 1644 0c30 01D0     	    beq 0f 
 1645 0c32 4FF0FF38 	    mov T1,#-1 // minus sign 
 1646 0c36 00B5FFF7 	0:  _CALL next_token
 1646      3EFF5DF8 
 1646      04EB
 1647 0c40 0E28     	1:  cmp r0,#TK_INTGR 
 1648 0c42 50D0     	    beq 8f 
 1649 0c44 0528     	    cmp r0,#TK_ARRAY 
 1650 0c46 1ED1     	    bne 2f 
 1651 0c48 4FF00600 	    mov r0,#TK_LPAREN 
 1652 0c4c 00B5FFF7 	    _CALL expect 
 1652      99FF5DF8 
 1652      04EB
 1653 0c56 00B500F0 	    _CALL expression
 1653      8AF85DF8 
 1653      04EB
 1654 0c60 0E28     	    cmp r0,#TK_INTGR
 1655 0c62 7FF431AD 	    bne syntax_error
 1656 0c66 8146     	    mov T2,r0
 1657 0c68 0A46     	    mov r2,r1  
 1658 0c6a 4FF00700 	    mov r0,#TK_RPAREN
 1659 0c6e 00B5FFF7 	    _CALL expect 
 1659      88FF5DF8 
 1659      04EB
 1660 0c78 1046     	    mov r0,r2 
 1661 0c7a 00B500F0 	    _CALL get_array_element 
 1661      EEF85DF8 
 1661      04EB
 1662 0c84 2FE0     	    b 8f
 1663 0c86 0628     	2:  cmp r0,#TK_LPAREN 
ARM GAS  tinyBasic.s 			page 46


 1664 0c88 12D1     	    bne 3f 
 1665 0c8a 00B500F0 	    _CALL expression 
 1665      70F85DF8 
 1665      04EB
 1666 0c94 0E28     	    cmp r0,#TK_INTGR 
 1667 0c96 7FF417AD 	    bne syntax_error
 1668 0c9a 8146     	    mov T2,r0
 1669 0c9c 0A46     	    mov r2,r1   
 1670 0c9e 4FF00700 	    mov r0,#TK_RPAREN
 1671 0ca2 00B5FFF7 	    _CALL expect 
 1671      6EFF5DF8 
 1671      04EB
 1672 0cac 1146     	    mov r1,r2 
 1673 0cae 1AE0     	    b 8f       
 1674 0cb0 0428     	3:  cmp r0,#TK_VAR 
 1675 0cb2 06D1     	    bne 4f
 1676 0cb4 0846     	    mov r0,r1  
 1677 0cb6 00B500F0 	    _CALL get_var 
 1677      E4F85DF8 
 1677      04EB
 1678 0cc0 11E0     	    b 8f 
 1679 0cc2 0B28     	4:  cmp r0,#TK_IFUNC 
 1680 0cc4 01D0     	    beq 5f 
 1681 0cc6 0C28     	    cmp r0,#TK_CFUNC 
 1682 0cc8 06D1     	    bne 6f 
 1683 0cca 0846     	5:  mov r0,r1  
 1684 0ccc 00B5FFF7 	    _CALL execute
 1684      EDFE5DF8 
 1684      04EB
 1685 0cd6 06E0     	    b 8f 
 1686 0cd8 D4F800A0 	6:  _UNGET_TOKEN      
 1686      D4F808B0 
 1687 0ce0 4FF00000 	    mov r0,#TK_NONE
 1688 0ce4 03E0     	    b 9f  
 1689 0ce6 08FB01F1 	8:  mul r1,T1 
 1690 0cea 5FEA0900 	    movs r0,T2 
 1691 0cee BDE80403 	9:  pop {r2,T1,T2}   
 1692 0cf2 7047     	    _RET 
 1693              	
 1694              	
 1695              	/*****************************************
 1696              	    term 
 1697              	    term parser 
 1698              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1699              	    output:
 1700              	      r0  	token attribute 
 1701              	      r1		integer
 1702              	    use:
 1703              	      r2    first operand 
 1704              	      r3    temp 
 1705              	      T1    operator 
 1706              	      T2    exit token attribute 
 1707              	******************************************/
 1708              	     _FUNC term 
 1709 0cf4 2DE90C03 	    push {r2,r3,T1,T2}
 1710 0cf8 4FF00009 	    mov T2,#TK_NONE 
 1711 0cfc 00B5FFF7 	    _CALL factor
ARM GAS  tinyBasic.s 			page 47


 1711      85FF5DF8 
 1711      04EB
 1712 0d06 60B3     	    cbz r0, 9f  // no factor   
 1713 0d08 8146     	    mov T2,r0  // TK_INTGR 
 1714 0d0a 0A46     	    mov r2,r1 // first factor    
 1715 0d0c 00B5FFF7 	0:  _CALL next_token
 1715      D3FE5DF8 
 1715      04EB
 1716 0d16 0346     	    mov r3,r0   
 1717 0d18 00F03000 	    and r0,#TK_GRP_MASK 
 1718 0d1c 2028     	    cmp r0,#TK_GRP_MULT
 1719 0d1e 04D0     	    beq 1f
 1720 0d20 D4F800A0 	    _UNGET_TOKEN
 1720      D4F808B0 
 1721 0d28 1BE0     	    b 9f 
 1722 0d2a 9846     	1:  mov T1,r3 
 1723 0d2c 00B5FFF7 	    _CALL factor  
 1723      6DFF5DF8 
 1723      04EB
 1724 0d36 3FF4C7AC 	    beq syntax_error 
 1725 0d3a B8F1200F 	    cmp T1,#TK_MULT
 1726 0d3e 02D1     	    bne 2f 
 1727              	// multiplication
 1728 0d40 01FB02F2 	    mul r2,r1
 1729 0d44 E2E7     	    b 0b  
 1730 0d46 B8F1210F 	2:  cmp T1,#TK_DIV 
 1731 0d4a 02D1     	    bne 3f
 1732              	// division
 1733 0d4c 92FBF1F2 	    sdiv r2,r2,r1
 1734 0d50 DCE7     	    b 0b  
 1735              	3: // modulo
 1736 0d52 1046     	    mov r0,r2 
 1737 0d54 92FBF1F2 	    sdiv r2,r2,r1 
 1738 0d58 01FB02F2 	    mul  r2,r1 
 1739 0d5c A0EB0202 	    sub  r2,r0,r2
 1740 0d60 D4E7     	    b 0b  
 1741 0d62 1146     	9:  mov r1,r2 
 1742 0d64 5FEA0900 	    movs r0,T2 
 1743 0d68 BDE80C03 	    pop {r2,r3,T1,T2}
 1744 0d6c 7047     	    _RET 
 1745              	
 1746              	/*****************************************
 1747              	    expression 
 1748              	    arithmetic expression parser 
 1749              	    expression ::= term [['+'|'-'] term]*
 1750              	    result range {-32768..32767}
 1751              	    output:
 1752              	      r0    TK_NONE || TK_INTGR 
 1753              	      r1 	  integer
 1754              	    use:
 1755              	      r2  left operand 
 1756              	      T1  operator 
 1757              	      T2  exit token attribute
 1758              	******************************************/
 1759 0d6e 00BF     	    _FUNC expression 
 1760 0d70 2DE90403 	    push {r2,t1,t2}
 1761 0d74 4FF00009 	    mov T2,#TK_NONE
ARM GAS  tinyBasic.s 			page 48


 1762 0d78 82EA0202 	    eor r2,r2 // zero 
 1763 0d7c 00B5FFF7 	    _CALL term 
 1763      B9FF5DF8 
 1763      04EB
 1764 0d86 21D0     	    beq 9f  // no term  
 1765 0d88 0A46     	    mov r2,r1 // first term
 1766 0d8a 4FF00E09 	    mov T2,#TK_INTGR    
 1767 0d8e 00B5FFF7 	1:  _CALL next_token 
 1767      92FE5DF8 
 1767      04EB
 1768 0d98 8046     	    mov T1,r0 // token attribute 
 1769 0d9a 00F03000 	    and r0,#TK_GRP_MASK 
 1770 0d9e 1028     	    cmp r0,#TK_GRP_ADD 
 1771 0da0 04D0     	    beq 3f 
 1772 0da2 D4F800A0 	    _UNGET_TOKEN
 1772      D4F808B0 
 1773 0daa 0FE0     	    b 9f  
 1774 0dac 00B5FFF7 	3:  _CALL term 
 1774      A1FF5DF8 
 1774      04EB
 1775 0db6 0E28     	    cmp r0,#TK_INTGR 
 1776 0db8 7FF486AC 	    bne syntax_error 
 1777 0dbc B8F1100F 	    cmp T1,#TK_PLUS 
 1778 0dc0 02D0     	    beq 4f 
 1779 0dc2 A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1780 0dc6 E2E7     	    b 1b 
 1781 0dc8 0A44     	4:  add r2,r2,r1 // N1+N2
 1782 0dca E0E7     	    b 1b
 1783 0dcc 4846     	9:  mov r0,T2 
 1784 0dce 1146     	    mov r1,r2 
 1785 0dd0 BDE80403 	    pop {r2,t1,t2}
 1786 0dd4 7047     	    _RET 
 1787              	
 1788              	
 1789              	/**********************************************
 1790              	    relation parser 
 1791              	    rel ::= expr1 rel_op expr2
 1792              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1793              	    relation return  integer , zero is false 
 1794              	    output:
 1795              	        r0	TK_INTGR  
 1796              	        r1	integer 
 1797              	    use:
 1798              	        r2   first operand 
 1799              	        T1   relop   
 1800              	**********************************************/
 1801 0dd6 00BF     	    _FUNC relation 
 1802 0dd8 2DE90401 	    push {r2,T1}
 1803 0ddc 00B5FFF7 	    _CALL expression 
 1803      C7FF5DF8 
 1803      04EB
 1804 0de6 0E28     	    cmp r0,#TK_INTGR 
 1805 0de8 7FF46EAC 	    bne syntax_error 
 1806 0dec 0A46     	    mov r2,r1  // first operand  
 1807 0dee 00B5FFF7 	    _CALL next_token 
 1807      62FE5DF8 
 1807      04EB
ARM GAS  tinyBasic.s 			page 49


 1808 0df8 8046     	    mov T1,r0  // relop  
 1809 0dfa 00F03000 	    and r0,#TK_GRP_MASK 
 1810 0dfe 3028     	    cmp r0,#TK_GRP_RELOP 
 1811 0e00 1DD1     	    bne 8f  // single operand 
 1812 0e02 00B5FFF7 	    _CALL expression 
 1812      B4FF5DF8 
 1812      04EB
 1813 0e0c 0E28     	    cmp r0,#TK_INTGR 
 1814 0e0e 7FF45BAC 	    bne syntax_error 
 1815 0e12 8A42     	    cmp r2,r1 // compare operands  
 1816 0e14 4FF0FF31 	    mov r1,#-1 
 1817 0e18 2D4A     	    ldr r2,=relop_jmp
 1818 0e1a 08F00708 	    and T1,#7 // {1..6}
 1819 0e1e D2E808F0 	    tbb [r2,T1]    
 1820              	rel_idx0:
 1821              	rel_eq:
 1822 0e22 11D0     	    beq 9f 
 1823 0e24 08E0     	    b rel_false
 1824              	rel_lt: 
 1825 0e26 0FDB     	    blt 9f   
 1826 0e28 06E0     	    b rel_false 
 1827              	rel_le:
 1828 0e2a 0DDD     	    ble 9f  
 1829 0e2c 04E0     	    b rel_false 
 1830              	rel_gt:
 1831 0e2e 0BDC     	    bgt 9f  
 1832 0e30 02E0     	    b rel_false  
 1833              	rel_ge:
 1834 0e32 09DA     	    bge 9f  
 1835 0e34 00E0     	    b rel_false  
 1836              	rel_diff:
 1837 0e36 07D1     	    bne 9f 
 1838              	rel_false:    
 1839 0e38 81EA0101 	    eor r1,r1  // false
 1840 0e3c 04E0     	    b 9f  
 1841 0e3e D4F800A0 	8:  _UNGET_TOKEN 
 1841      D4F808B0 
 1842 0e46 1146     	    mov r1,r2    
 1843 0e48 4FF00E00 	9:  mov r0,#TK_INTGR
 1844 0e4c BDE80401 	    pop {r2,T1}
 1845 0e50 7047     	    _RET 
 1846              	
 1847              	
 1848              	relop_jmp: 
 1849 0e52 00       	  .byte 0 
 1850 0e53 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1851 0e54 00       	  .byte 0 // =
 1852 0e55 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1853 0e56 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1854 0e57 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1855 0e58 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1856              	
 1857              	
 1858              	/***********************************
 1859              	    get_array_element
 1860              	    return value of @(n)
 1861              	  input:
ARM GAS  tinyBasic.s 			page 50


 1862              	    r0    indice 
 1863              	  output:
 1864              	    r0   TK_INTGR
 1865              	    r1   value  
 1866              	************************************/
 1867 0e59 0000BF   	    _FUNC get_array_element 
 1868 0e5c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1869 0e60 4FEA8000 	    lsl r0,#2 
 1870 0e64 C0EB0100 	    rsb r0,r1 
 1871 0e68 0168     	    ldr r1,[r0]
 1872 0e6a 4FF00E00 	    mov r0,#TK_INTGR 
 1873 0e6e 7047     	    _RET 
 1874              	
 1875              	
 1876              	/***********************************
 1877              	    set_array_element 
 1878              	    set value of array element 
 1879              	  input:
 1880              	    r0   index 
 1881              	    r1   new value 
 1882              	  output:
 1883              	    none
 1884              	  use:
 1885              	    r2    array pointer 
 1886              	**********************************/
 1887              	    _FUNC set_array_element 
 1888 0e70 04B4     	    push {r2}
 1889 0e72 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1890 0e76 4FEA8000 	    lsl r0,#2 
 1891 0e7a A1EB0001 	    sub r1,r0 
 1892 0e7e 0960     	    str r1,[r1]
 1893 0e80 04BC     	    pop {r2}
 1894 0e82 7047     	    _RET 
 1895              	
 1896              	/***********************************
 1897              	   get_var 
 1898              	   get variable value 
 1899              	  input:
 1900              	     r0    variable index {0..25}
 1901              	  output:
 1902              	     r0    TK_INTGR
 1903              	     r1    value 
 1904              	**********************************/
 1905              	    _FUNC get_var 
 1906 0e84 04F16001 	    add r1,UPP,#VARS
 1907 0e88 4FEA8000 	    lsl r0,#2 
 1908 0e8c 0958     	    ldr r1,[r1,r0]
 1909 0e8e 4FF00E00 	    mov r0,#TK_INTGR
 1910 0e92 7047     	    _RET 
 1911              	
 1912              	/*********************************
 1913              	    set_var 
 1914              	    set variable value 
 1915              	  input:
 1916              	     r0    variable index {0..25}
 1917              	     r1    new value 
 1918              	  output:
ARM GAS  tinyBasic.s 			page 51


 1919              	    none 
 1920              	  use:
 1921              	    r2   vars pointer 
 1922              	*********************************/
 1923              	    _FUNC set_var 
 1924 0e94 04B4     	    push {r2}
 1925 0e96 226E     	    ldr r2,[UPP,#VARS]
 1926 0e98 4FEA8000 	    lsl r0,#2
 1927 0e9c 1150     	    str r1,[r2,r0]
 1928 0e9e 04BC     	    pop {r2}
 1929 0ea0 7047     	    _RET 
 1930              	
 1931              	/******************************
 1932              	    CONSTANTS data
 1933              	******************************/
 1934              	
 1935 0ea2 0000     	  .section .rodata 
 1936              	
 1937              	// system variables initial value 
 1938              	uzero:
 1939 0000 00000000 	  .word 0 // IN_SAVED
 1940 0004 00000000 	  .word 0 // COUNT
 1941 0008 00000000 	  .word 0 // BASICPTR
 1942 000c 00000000 	  .word 0 // DATAPTR
 1943 0010 00000000 	  .word 0 // DATA
 1944 0014 00000000 	  .word 0 // DATALEN
 1945 0018 0A000000 	  .word 10 // BASE
 1946 001c 00000000 	  .word 0 // TICKS
 1947 0020 00000000 	  .word 0 // TIMER
 1948 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 1949 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 1950 002c 00000000 	  .word 0 // FFREE
 1951 0030 CC000000 	  .word ulast-uzero // TXTBGN
 1952 0034 CC000000 	  .word ulast-uzero // TXTEND
 1953 0038 00000000 	  .word 0 //LOOP_DEPTH
 1954 003c 00000000 	  .word 0 // ARRAY_SIZE
 1955 0040 00000000 	  .word 0 // FLAGS
 1956 0044 04000000 	  .word 4 // TAB_WIDTH
 1957 0048 00000000 	  .word 0 // RX_HEAD
 1958 004c 00000000 	  .word 0 // RX_TAIL
 1959 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 1959      00000000 
 1959      00000000 
 1959      00000000 
 1960 0060 00000000 	  .space VARS_SIZE,0 // VARS
 1960      00000000 
 1960      00000000 
 1960      00000000 
 1960      00000000 
 1961 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 1962              	ulast:
 1963              	
 1964              	  .section .rodata.dictionary 
 1965              	
 1966              	// keep alphabetic order for BASIC names from Z-A
 1967              	// this sort order is for for WORDS cmd output. 	
 1968              	
ARM GAS  tinyBasic.s 			page 52


 1969              		.equ link, 0
 1970              	kword_end:
 1971 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1971      00000000 
 1971      00000000 
 1971      00000000 
 1972 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1972      64000000 
 1972      0A000000 
 1972      5854524D 
 1972      54000000 
 1973 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1973      65000000 
 1973      0A000000 
 1973      58524356 
 1973      00000000 
 1974 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1974      63000000 
 1974      0B000000 
 1974      584F5200 
 1975 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1975      62000000 
 1975      0A000000 
 1975      57524954 
 1975      45000000 
 1976 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1976      61000000 
 1976      0A000000 
 1976      574F5244 
 1976      53000000 
 1977 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1977      60000000 
 1977      0A000000 
 1977      57414954 
 1977      00000000 
 1978 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1978      5F000000 
 1978      0B000000 
 1978      55535200 
 1979 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1979      5E000000 
 1979      0A000000 
 1979      554E5449 
 1979      4C000000 
 1980 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1980      5D000000 
 1980      0B000000 
 1980      55464C41 
 1980      53480000 
 1981 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1981      5C000000 
 1981      0B000000 
 1981      55424F55 
 1981      4E440000 
 1982 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1982      5B000000 
 1982      0A000000 
ARM GAS  tinyBasic.s 			page 53


 1982      544F4E45 
 1982      00000000 
 1983 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1983      5A000000 
 1983      0A000000 
 1983      544F0000 
 1984 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1984      58000000 
 1984      0A000000 
 1984      54494D45 
 1984      52000000 
 1985 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1985      59000000 
 1985      0B000000 
 1985      54494D45 
 1985      4F555400 
 1986 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1986      57000000 
 1986      0B000000 
 1986      5449434B 
 1986      53000000 
 1987 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1987      56000000 
 1987      0A000000 
 1987      53544F50 
 1987      00000000 
 1988 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1988      55000000 
 1988      0A000000 
 1988      53544550 
 1988      00000000 
 1989 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1989      54000000 
 1989      0A000000 
 1989      53504957 
 1989      52000000 
 1990 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1990      53000000 
 1990      0A000000 
 1990      53504953 
 1990      454C0000 
 1991 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1991      51000000 
 1991      0B000000 
 1991      53504952 
 1991      44000000 
 1992 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1992      52000000 
 1992      0A000000 
 1992      53504945 
 1992      4E000000 
 1993 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1993      50000000 
 1993      0A000000 
 1993      534C4545 
 1993      50000000 
 1994 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
ARM GAS  tinyBasic.s 			page 54


 1994      4F000000 
 1994      0B000000 
 1994      53495A45 
 1994      00000000 
 1995 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1995      4E000000 
 1995      0A000000 
 1995      53484F57 
 1995      00000000 
 1996 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1996      4D000000 
 1996      0A000000 
 1996      53415645 
 1996      00000000 
 1997 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1997      4C000000 
 1997      0A000000 
 1997      52554E00 
 1998 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1998      4B000000 
 1998      0B000000 
 1998      52534849 
 1998      46540000 
 1999 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1999      4A000000 
 1999      0B000000 
 1999      524E4400 
 2000 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2000      49000000 
 2000      0A000000 
 2000      52455455 
 2000      524E0000 
 2001 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2001      48000000 
 2001      0A000000 
 2001      52455354 
 2001      4F524500 
 2002 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2002      47000000 
 2002      0A000000 
 2002      52454D41 
 2002      524B0000 
 2003 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 2003      46000000 
 2003      0A000000 
 2003      5245424F 
 2003      4F540000 
 2004 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2004      45000000 
 2004      0B000000 
 2004      52454144 
 2004      00000000 
 2005 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2005      44000000 
 2005      0B000000 
 2005      514B4559 
 2005      00000000 
ARM GAS  tinyBasic.s 			page 55


 2006 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 2006      43000000 
 2006      0B000000 
 2006      50525449 
 2006      00000000 
 2007 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 2007      42000000 
 2007      0B000000 
 2007      50525448 
 2007      00000000 
 2008 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 2008      41000000 
 2008      0B000000 
 2008      50525447 
 2008      00000000 
 2009 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 2009      40000000 
 2009      0B000000 
 2009      50525446 
 2009      00000000 
 2010 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 2010      3F000000 
 2010      0B000000 
 2010      50525445 
 2010      00000000 
 2011 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 2011      3E000000 
 2011      0B000000 
 2011      50525444 
 2011      00000000 
 2012 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 2012      3D000000 
 2012      0B000000 
 2012      50525443 
 2012      00000000 
 2013 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2013      3C000000 
 2013      0B000000 
 2013      50525442 
 2013      00000000 
 2014 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2014      3B000000 
 2014      0B000000 
 2014      50525441 
 2014      00000000 
 2015 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2015      3A000000 
 2015      0A000000 
 2015      5052494E 
 2015      54000000 
 2016 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2016      39000000 
 2016      0B000000 
 2016      504F5554 
 2016      00000000 
 2017 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2017      38000000 
ARM GAS  tinyBasic.s 			page 56


 2017      0A000000 
 2017      504F4B45 
 2017      00000000 
 2018 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2018      35000000 
 2018      0A000000 
 2018      504D4F44 
 2018      45000000 
 2019 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2019      37000000 
 2019      0B000000 
 2019      50494E50 
 2019      00000000 
 2020 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2020      36000000 
 2020      0B000000 
 2020      5045454B 
 2020      00000000 
 2021 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2021      34000000 
 2021      0A000000 
 2021      50415553 
 2021      45000000 
 2022 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2022      33000000 
 2022      0B000000 
 2022      50414400 
 2023 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2023      32000000 
 2023      0B000000 
 2023      4F520000 
 2024 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2024      31000000 
 2024      0B000000 
 2024      4F445200 
 2025 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2025      30000000 
 2025      0B000000 
 2025      4E4F5400 
 2026 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2026      2E000000 
 2026      0A000000 
 2026      4E455854 
 2026      00000000 
 2027 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2027      2F000000 
 2027      0A000000 
 2027      4E455700 
 2028 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2028      2D000000 
 2028      0B000000 
 2028      4D554C44 
 2028      49560000 
 2029 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2029      2C000000 
 2029      0B000000 
 2029      4C534849 
ARM GAS  tinyBasic.s 			page 57


 2029      46540000 
 2030 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2030      2B000000 
 2030      0B000000 
 2030      4C4F4700 
 2031 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2031      2A000000 
 2031      0A000000 
 2031      4C4F4144 
 2031      00000000 
 2032 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2032      29000000 
 2032      0A000000 
 2032      4C495354 
 2032      00000000 
 2033 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2033      28000000 
 2033      0A000000 
 2033      4C455400 
 2034 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2034      27000000 
 2034      0B000000 
 2034      4B455900 
 2035 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2035      26000000 
 2035      0A000000 
 2035      49574447 
 2035      52454600 
 2036 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2036      25000000 
 2036      0A000000 
 2036      49574447 
 2036      454E0000 
 2037 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2037      24000000 
 2037      0B000000 
 2037      494E5645 
 2037      52540000 
 2038 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2038      23000000 
 2038      0A000000 
 2038      494E5055 
 2038      54000000 
 2039 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2039      22000000 
 2039      0A000000 
 2039      49460000 
 2040 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2040      21000000 
 2040      0B000000 
 2040      49445200 
 2041 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2041      20000000 
 2041      0A000000 
 2041      48455800 
 2042 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2042      1F000000 
ARM GAS  tinyBasic.s 			page 58


 2042      0B000000 
 2042      4750494F 
 2042      00000000 
 2043 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2043      1E000000 
 2043      0A000000 
 2043      474F544F 
 2043      00000000 
 2044 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2044      1D000000 
 2044      0A000000 
 2044      474F5355 
 2044      42000000 
 2045 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2045      1C000000 
 2045      0A000000 
 2045      464F5247 
 2045      45540000 
 2046 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2046      1B000000 
 2046      0A000000 
 2046      464F5200 
 2047 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 2047      1A000000 
 2047      0A000000 
 2047      46435055 
 2047      00000000 
 2048 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2048      18000000 
 2048      0A000000 
 2048      454E4400 
 2049 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2049      19000000 
 2049      0B000000 
 2049      45455052 
 2049      4F4D0000 
 2050 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2050      17000000 
 2050      0A000000 
 2050      44575249 
 2050      54450000 
 2051 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2051      66000000 
 2051      0A000000 
 2051      44554D50 
 2051      00000000 
 2052 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2052      16000000 
 2052      0B000000 
 2052      44524541 
 2052      44000000 
 2053 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2053      15000000 
 2053      0A000000 
 2053      444F0000 
 2054 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2054      14000000 
ARM GAS  tinyBasic.s 			page 59


 2054      0A000000 
 2054      44495200 
 2055 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2055      13000000 
 2055      0A000000 
 2055      44454300 
 2056 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2056      12000000 
 2056      0B000000 
 2056      44445200 
 2057 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2057      11000000 
 2057      0A000000 
 2057      44415441 
 2057      4C4E0000 
 2058 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2058      10000000 
 2058      0A000000 
 2058      44415441 
 2058      00000000 
 2059 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2059      0F000000 
 2059      0B000000 
 2059      43524C00 
 2060 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2060      0E000000 
 2060      0B000000 
 2060      43524800 
 2061 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2061      0D000000 
 2061      0C000000 
 2061      43484152 
 2061      00000000 
 2062 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2062      0C000000 
 2062      0A000000 
 2062      42594500 
 2063 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2063      0B000000 
 2063      0A000000 
 2063      42544F47 
 2063      4C000000 
 2064 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2064      0A000000 
 2064      0B000000 
 2064      42544553 
 2064      54000000 
 2065 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2065      09000000 
 2065      0A000000 
 2065      42534554 
 2065      00000000 
 2066 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2066      08000000 
 2066      0A000000 
 2066      42524553 
 2066      00000000 
ARM GAS  tinyBasic.s 			page 60


 2067 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2067      07000000 
 2067      0B000000 
 2067      42495400 
 2068 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2068      06000000 
 2068      0A000000 
 2068      41575500 
 2069 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2069      05000000 
 2069      0A000000 
 2069      4155544F 
 2069      52554E00 
 2070 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2070      04000000 
 2070      0B000000 
 2070      41534300 
 2071 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2071      03000000 
 2071      0B000000 
 2071      414E4400 
 2072 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2072      02000000 
 2072      0B000000 
 2072      41444352 
 2072      45414400 
 2073 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2073      01000000 
 2073      0A000000 
 2073      4144434F 
 2073      4E000000 
 2074              	first_link: 
 2075 0794 8C070000 	  .word LINK 
 2076 0798 00000000 	  .word ABS_IDX 
 2077 079c 0B000000 	  .word TK_IFUNC
 2078              	kword_dict: // first name field 
 2079              	  .equ LINK,. 
 2080 07a0 41425300 	  .asciz "ABS" 
 2081              	  .p2align 2 
 2082              	
 2083              	    .section .rodata.fn_tabld 
 2084              	
 2085              	//comands and fonctions address table 	
 2086              	fn_table:
 2087 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2087      00000000 
 2087      00000000 
 2087      00000000 
 2087      00000000 
 2088 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2088      00000000 
 2088      00000000 
 2088      00000000 
 2088      00000000 
 2089 003c 00000000 		.word const_cr1,skip_line,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_writ
 2089      00000000 
 2089      00000000 
ARM GAS  tinyBasic.s 			page 61


 2089      00000000 
 2089      00000000 
 2090 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2090      00000000 
 2090      00000000 
 2090      00000000 
 2090      00000000 
 2091 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2091      00000000 
 2091      00000000 
 2091      00000000 
 2091      00000000 
 2092 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2092      00000000 
 2092      00000000 
 2092      00000000 
 2092      00000000 
 2093 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2094 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2094      00000000 
 2094      00000000 
 2094      00000000 
 2094      00000000 
 2095 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,skip_line // 64..71 
 2095      00000000 
 2095      00000000 
 2095      00000000 
 2095      00000000 
 2096 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2096      00000000 
 2096      00000000 
 2096      00000000 
 2096      00000000 
 2097 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2097      00000000 
 2097      00000000 
 2097      00000000 
 2097      00000000 
 2098 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2098      00000000 
 2098      00000000 
 2098      00000000 
 2098      00000000 
 2099 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2099      00000000 
 2099      00000000 
 2099      00000000 
 2099      00000000 
 2100 019c 00000000 		.word 0 
 2101              	
 2102              	
 2103              	/**********************************
 2104              	    BASIC commands and functions 
ARM GAS  tinyBasic.s 			page 62


 2105              	**********************************/
 2106              	
 2107              	    .section .text.basic , "ax", %progbits 
 2108              	
 2109              	
 2110              	/*******************************
 2111              	  BASIC:  ABS expr 
 2112              	  input:
 2113              	    none 
 2114              	  output:
 2115              	    r0    token type 
 2116              	    r1    abs(expr)
 2117              	  use:
 2118              	    none 
 2119              	******************************/
 2120              	    _FUNC abs 
 2121 0000 00B5FFF7 	    _CALL arg_list
 2121      FEFF5DF8 
 2121      04EB
 2122 000a 0128     	    cmp r0,#1 
 2123 000c 01D0     	    beq 1f 
 2124 000e FFF7FEBF 	    b syntax_error 
 2125 0012 5CF8041B 	1:  _POP r1 
 2126 0016 11F0004F 	    tst r1,#(1<<31)
 2127 001a 01D0     	    beq 9f
 2128 001c C1F10001 	    rsb r1,#0 
 2129 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2130 0024 7047     	   _RET 
 2131              	
 2132 0026 00BF     	    _FUNC power_adc
 2133 0028 7047     	    _RET
 2134              	
 2135 002a 00BF     	    _FUNC analog_read
 2136 002c 7047     	    _RET
 2137              	
 2138 002e 00BF     	    _FUNC bit_and
 2139 0030 7047     	    _RET
 2140              	
 2141 0032 00BF     	    _FUNC ascii
 2142 0034 7047     	    _RET
 2143              	
 2144 0036 00BF     	    _FUNC autorun
 2145 0038 7047     	    _RET
 2146              	
 2147 003a 00BF     	    _FUNC awu
 2148 003c 7047     	    _RET
 2149              	
 2150 003e 00BF     	    _FUNC bitmask
 2151 0040 7047     	    _RET 
 2152              	
 2153              	  
 2154              	  /*********************************
 2155              	   BASIC: BRES adr, mask   
 2156              	   reset bits [adr]= [adr] & ~mask  
 2157              	   input:
 2158              	     none 
 2159              	    output;
ARM GAS  tinyBasic.s 			page 63


 2160              	      none 
 2161              	    use:
 2162              	      T1   temp
 2163              	      T2   temp 
 2164              	*******************************/     
 2165 0042 00BF     	  _FUNC bit_reset
 2166 0044 00B5FFF7 	    _CALL arg_list 
 2166      FEFF5DF8 
 2166      04EB
 2167 004e 0228     	    cmp r0,#2 
 2168 0050 01D0     	    beq 1f 
 2169 0052 FFF7FEBF 	    b syntax_error 
 2170 0056 5CF8041B 	1:  _POP r1 //mask 
 2171 005a 5CF8040B 	    _POP r0 //address 
 2172 005e D0F80090 	    ldr T2,[r0] 
 2173 0062 81F0FF31 	    eor r1,#-1 // ~mask 
 2174 0066 01EA0901 	    and r1,T2
 2175 006a 0160     	    str r1,[r0]
 2176 006c 7047     	    _RET  
 2177              	
 2178              	
 2179              	/*********************************
 2180              	   BASIC: BSET adr, mask   
 2181              	   reset bits [adr]= [adr] & ~mask  
 2182              	   input:
 2183              	      none 
 2184              	    output;
 2185              	      none 
 2186              	    use:
 2187              	      T1   temp
 2188              	      T2   temp  
 2189              	*******************************/     
 2190 006e 00BF     	    _FUNC bit_set
 2191 0070 00B5FFF7 	    _CALL arg_list 
 2191      FEFF5DF8 
 2191      04EB
 2192 007a 0228     	    cmp r0,#2 
 2193 007c 01D0     	    beq 1f 
 2194 007e FFF7FEBF 	    b syntax_error 
 2195 0082 5CF8041B 	1:  _POP r1 //mask 
 2196 0086 5CF8040B 	    _POP r0 //address 
 2197 008a D0F80090 	    ldr T2,[r0] 
 2198 008e 41EA0901 	    orr r1,T2
 2199 0092 0160     	    str r1,[r0]
 2200 0094 7047     	    _RET 
 2201              	
 2202              	  /*********************************
 2203              	   BASIC: BTOGL adr, mask   
 2204              	   reset bits [adr]= [adr] & ~mask  
 2205              	   input:
 2206              	     r0    adr 
 2207              	     r1    mask 
 2208              	    output;
 2209              	      none 
 2210              	    use:
 2211              	      T1   temp
 2212              	      T2   temp  
ARM GAS  tinyBasic.s 			page 64


 2213              	*******************************/     
 2214 0096 00BF     	  _FUNC bit_toggle
 2215 0098 00B5FFF7 	    _CALL arg_list 
 2215      FEFF5DF8 
 2215      04EB
 2216 00a2 0228     	    cmp r0,#2 
 2217 00a4 01D0     	    beq 1f 
 2218 00a6 FFF7FEBF 	    b syntax_error 
 2219 00aa 5CF8041B 	1:  _POP r1 //mask 
 2220 00ae 5CF8040B 	    _POP r0 //address 
 2221 00b2 D0F80090 	    ldr T2,[r0] 
 2222 00b6 81EA0901 	    eor r1,T2
 2223 00ba 0160     	    str r1,[r0]
 2224 00bc 7047     	    _RET  
 2225              	
 2226 00be 00BF     	    _FUNC bit_test
 2227 00c0 7047     	    _RET 
 2228              	
 2229 00c2 00BF     	    _FUNC bye
 2230 00c4 7047     	    _RET 
 2231              	
 2232 00c6 00BF     	    _FUNC char
 2233 00c8 7047     	    _RET 
 2234              	
 2235 00ca 00BF     	    _FUNC const_cr2
 2236 00cc 7047     	    _RET  
 2237              	
 2238 00ce 00BF     	    _FUNC const_cr1
 2239 00d0 7047     	    _RET 
 2240              	
 2241              	
 2242              	/**************************
 2243              	  BASIC: DATALN expr 
 2244              	  set data pointer to line#
 2245              	  specified by expr. 
 2246              	  if line# not valid program 
 2247              	  end with error.
 2248              	  use:
 2249              	
 2250              	**************************/
 2251 00d2 00BF     	    _FUNC data_line
 2252 00d4 206C10F0 	    _RTO // run time only 
 2252      010F03D1 
 2252      4FF00700 
 2252      FFF7FEBF 
 2253 00e4 00B5FFF7 	    _CALL expression 
 2253      FEFF5DF8 
 2253      04EB
 2254 00ee 0E28     	    cmp r0,#TK_INTGR
 2255 00f0 7FF4FEAF 	    bne syntax_error
 2256 00f4 0846     	    mov r0,r1 
 2257 00f6 00B5FFF7 	    _CALL search_lineno
 2257      FEFF5DF8 
 2257      04EB
 2258 0100 0029     	    cmp r1,#0
 2259 0102 03D0     	    beq 1f 
 2260 0104 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
ARM GAS  tinyBasic.s 			page 65


 2261 0108 FFF7FEBF 	    b syntax_error 
 2262 010c C178     	1:  ldrb r1,[r0,#3]
 2263 010e 0A29     	    cmp r1,#TK_CMD 
 2264 0110 F8D1     	    bne 0b
 2265 0112 0179     	    ldrb r1,[r0,#4]
 2266 0114 1029     	    cmp r1,#DATA_IDX 
 2267 0116 F5D1     	    bne 0b  
 2268 0118 E060     	    str r0,[UPP,#DATAPTR]
 2269 011a 8178     	    ldrb r1,[r0,#2]
 2270 011c 6161     	    str r1,[UPP,#DATALEN]
 2271 011e 4FF00501 	    mov r1,#5 // position of first data item  
 2272 0122 2161     	    str r1,[UPP,#DATA]
 2273 0124 7047     	    _RET 
 2274              	
 2275              	/*****************************
 2276              	  BASIC: READ 
 2277              	  read next data item 
 2278              	  the value can be assigned to
 2279              	  variable or used in expression
 2280              	*****************************/
 2281 0126 00BF     	    _FUNC read
 2282 0128 206C10F0 	    _RTO
 2282      010F03D1 
 2282      4FF00700 
 2282      FFF7FEBF 
 2283 0138 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2284 013a E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2285 013c 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2286 013e 8242     	    cmp r2,r0
 2287 0140 0ED0     	    beq seek_next
 2288 0142 885C     	1:  ldrb r0,[r1,r2]
 2289 0144 02F10102 	    add r2,#1
 2290 0148 0028     	    cmp r0,#TK_NONE
 2291 014a 09D0     	    beq seek_next
 2292 014c 0828     	    cmp r0,#TK_COMMA
 2293 014e F8D0     	    beq 1b  
 2294 0150 0E28     	    cmp r0,#TK_INTGR 
 2295 0152 7FF4FEAF 	    bne syntax_error  
 2296 0156 8958     	    ldr r1,[r1,r2]
 2297 0158 02F10402 	    add r2,#4
 2298 015c 2261     	    str r2,[UPP,#DATA]
 2299 015e 12E0     	    b 9f  
 2300              	seek_next: // is next line data ?
 2301 0160 8878     	    ldrb r0,[R1,#2]
 2302 0162 0144     	    add r1,r0 
 2303 0164 C878     	    ldrb r0,[R1,#3]
 2304 0166 0A28     	    cmp r0,#TK_CMD
 2305 0168 09D1     	    bne 2f 
 2306 016a 0879     	    ldrb r0,[r1,#4]
 2307 016c 1028     	    cmp r0,#DATA_IDX 
 2308 016e 06D1     	    bne 2f 
 2309 0170 E160     	    str r1,[UPP,#DATAPTR]
 2310 0172 8878     	    ldrb r0,[r1,#2]
 2311 0174 6061     	    str  r0,[UPP,#DATALEN]
 2312 0176 4FF00502 	    mov r2,#5 
 2313 017a 2261     	    str r2,[UPP,#DATA]
 2314 017c E1E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 66


 2315 017e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2316 0182 FFF7FEBF 	    b tb_error 
 2317 0186 7047     	9:  _RET 
 2318              	
 2319              	/********************************
 2320              	  BASIC: RESTORE 
 2321              	  seek first data line 
 2322              	********************************/
 2323              	    _FUNC restore
 2324 0188 206C10F0 	    _RTO 
 2324      010F03D1 
 2324      4FF00700 
 2324      FFF7FEBF 
 2325 0198 216B     	    ldr r1,[UPP,#TXTBGN]
 2326 019a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2327 019c 0FD0     	    beq no_data_line 
 2328 019e 0879     	    ldrb r0,[r1,#4]
 2329 01a0 1028     	    cmp r0,#DATA_IDX
 2330 01a2 09D1     	    bne try_next_line
 2331 01a4 C878     	    ldrb r0,[r1,#3]
 2332 01a6 0A28     	    cmp r0,#TK_CMD
 2333 01a8 06D1     	    bne try_next_line
 2334              	// this a the first data line 
 2335 01aa E160     	    str r1,[UPP,#DATAPTR]
 2336 01ac 8878     	    ldrb r0,[r1,#2]
 2337 01ae 6061     	    str r0,[UPP,#DATALEN]
 2338 01b0 4FF00500 	    mov r0,#5 
 2339 01b4 2061     	    str r0,[UPP,#DATA]
 2340 01b6 07E0     	    b 9f
 2341              	try_next_line:
 2342 01b8 8878     	    ldrb r0,[r1,#2]
 2343 01ba 0144     	    add r1,r0 
 2344 01bc EDE7     	    b 1b 
 2345              	no_data_line:
 2346 01be 80EA0000 	    eor r0,r0 
 2347 01c2 E060     	    str r0,[UPP,#DATAPTR]
 2348 01c4 2061     	    str r0,[UPP,#DATA]
 2349 01c6 6061     	    str r0,[UPP,#DATALEN]
 2350 01c8 7047     	9:  _RET 
 2351              	
 2352 01ca 00BF     	    _FUNC const_ddr
 2353 01cc 7047     	    _RET 
 2354              	
 2355 01ce 00BF     	    _FUNC dec_base
 2356 01d0 7047     	    _RET 
 2357              	
 2358 01d2 00BF     	    _FUNC directory
 2359 01d4 7047     	    _RET 
 2360              	
 2361 01d6 00BF     	    _FUNC do_loop
 2362 01d8 7047     	    _RET 
 2363              	
 2364 01da 00BF     	    _FUNC digital_read
 2365 01dc 7047     	    _RET 
 2366              	
 2367 01de 00BF     	    _FUNC digital_write
 2368 01e0 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 67


 2369              	
 2370              	/*******************************
 2371              	  BASIC: END 
 2372              	  exit program 
 2373              	******************************/ 
 2374 01e2 00BF     	    _FUNC cmd_end
 2375 01e4 FFF7FEBF 	    b warm_start 
 2376 01e8 7047     	    _RET 
 2377              	
 2378 01ea 00BF     	    _FUNC const_eeprom_base
 2379 01ec 7047     	    _RET 
 2380              	
 2381 01ee 00BF     	    _FUNC fcpu
 2382 01f0 7047     	    _RET 
 2383              	
 2384 01f2 00BF     	    _FUNC forget
 2385 01f4 7047     	    _RET 
 2386              	
 2387              	/**************************************************
 2388              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2389              	  introdure FOR...NEXT loop 
 2390              	**************************************************/
 2391 01f6 00BF     	    _FUNC for
 2392 01f8 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2393 01fc 4FF00107 	    mov INCR,#1
 2394 0200 00B5FFF7 	    _CALL next_token
 2394      FEFF5DF8 
 2394      04EB
 2395 020a 0428     	    cmp r0,#TK_VAR
 2396 020c 7FF4FEAF 	    bne syntax_error
 2397 0210 02B4     	    push {r1} 
 2398 0212 00B500F0 	    _CALL let_var 
 2398      A9F85DF8 
 2398      04EB
 2399 021c 20BC     	    pop {VADR}
 2400 021e 4FEA8505 	    lsl VADR,#2
 2401 0222 2544     	    add VADR,UPP 
 2402 0224 05F16005 	    add VADR,#VARS 
 2403 0228 7047     	    _RET 
 2404              	
 2405              	/***************************************
 2406              	  BASIC: TO expr 
 2407              	  set limit of FOR...NEXT loop 
 2408              	**************************************/
 2409 022a 00BF     	    _FUNC to
 2410 022c 00B5FFF7 	    _CALL expression 
 2410      FEFF5DF8 
 2410      04EB
 2411 0236 0E28     	    cmp r0,#TK_INTGR
 2412 0238 7FF4FEAF 	    bne syntax_error 
 2413 023c 0E46     	    mov LIMIT,r1
 2414              	    // save loop back parameters 
 2415 023e 6068     	    ldr r0,[UPP,#COUNT]
 2416 0240 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2417 0244 7047     	    _RET 
 2418              	
 2419              	/********************************************
ARM GAS  tinyBasic.s 			page 68


 2420              	  BASIC: STEP expr 
 2421              	  set increment for FOR...NEXT loop 
 2422              	********************************************/
 2423 0246 00BF     	    _FUNC step
 2424 0248 00B5FFF7 	    _CALL expression 
 2424      FEFF5DF8 
 2424      04EB
 2425 0252 0E28     	    cmp r0,#TK_INTGR
 2426 0254 7FF4FEAF 	    bne syntax_error 
 2427 0258 0F46     	    mov INCR,r1
 2428              	    // replace parameters left by TO
 2429 025a 6068     	    ldr r0,[UPP,#COUNT]
 2430 025c 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2431 0260 7047     	    _RET 
 2432              	
 2433              	/********************************************
 2434              	  BASIC: NEXT var 
 2435              	  incrment FOR...NEXT loop variable
 2436              	  exit if variable cross LIMIT 
 2437              	********************************************/
 2438 0262 00BF     	    _FUNC next
 2439 0264 00B5FFF7 	    _CALL next_token 
 2439      FEFF5DF8 
 2439      04EB
 2440 026e 0428     	    cmp r0,#TK_VAR 
 2441 0270 7FF4FEAF 	    bne syntax_error 
 2442 0274 4FEA8101 	    lsl r1,#2 
 2443 0278 2144     	    add r1,UPP 
 2444 027a 01F16001 	    add r1,#VARS 
 2445 027e A942     	    cmp r1,VADR
 2446 0280 7FF4FEAF 	    bne syntax_error 
 2447 0284 2868     	    ldr r0,[VADR]
 2448 0286 3844     	    add r0,INCR 
 2449 0288 2860     	    str r0,[VADR]
 2450 028a 002F     	    cmp INCR,#0
 2451 028c 02D4     	    bmi 2f
 2452 028e B042     	    cmp r0,LIMIT 
 2453 0290 02DC     	    bgt 8f  
 2454 0292 07E0     	    b 9f  
 2455 0294 B042     	2:  cmp r0,LIMIT 
 2456 0296 05DA     	    bge 9f  
 2457              	8: // exit for...next
 2458              	  //  drop branch parameters
 2459 0298 4FF00C00 	    _DROP 3
 2459      8444
 2460              	  // restore outer loop parameters
 2461 029e BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2462 02a2 7047     	    _RET 
 2463 02a4 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2464 02a8 6060     	    str r0,[UPP,#COUNT]
 2465 02aa 7047     	    _RET 
 2466              	
 2467              	/*********************************
 2468              	  BASIC: GOSUB expr 
 2469              	  call a subroutine at line# 
 2470              	*********************************/
 2471              	    _FUNC gosub
ARM GAS  tinyBasic.s 			page 69


 2472 02ac 00B5FFF7 	    _CALL expression
 2472      FEFF5DF8 
 2472      04EB
 2473 02b6 0E28     	    cmp r0,#TK_INTGR 
 2474 02b8 7FF4FEAF 	    bne syntax_error 
 2475 02bc 0846     	    mov r0,r1 
 2476 02be 00B5FFF7 	    _CALL search_lineno  
 2476      FEFF5DF8 
 2476      04EB
 2477 02c8 19B1     	    cbz r1,1f 
 2478 02ca 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2479 02ce FFF7FEBF 	    b tb_error 
 2480 02d2 6168     	1:  ldr r1,[UPP,#COUNT]
 2481 02d4 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2482 02d8 8346     	    mov BPTR,r0 
 2483 02da 4FF0030A 	    mov IN,#3 
 2484 02de 9BF80200 	    ldrb r0,[BPTR,#2]
 2485 02e2 6060     	    str r0,[UPP,#COUNT]
 2486 02e4 7047     	    _RET 
 2487              	
 2488              	/**********************************
 2489              	  BASIC: RETURN 
 2490              	  leave a subroutine 
 2491              	*********************************/
 2492 02e6 00BF     	    _FUNC return 
 2493 02e8 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2494 02ec 6060     	    str r0,[UPP,#COUNT]
 2495 02ee 7047     	    _RET 
 2496              	
 2497              	/**********************************
 2498              	  BASIC: GOTO expr 
 2499              	  go to line # 
 2500              	  use:
 2501              	
 2502              	**********************************/
 2503              	    _FUNC goto
 2504 02f0 00B5FFF7 	    _CALL expression 
 2504      FEFF5DF8 
 2504      04EB
 2505 02fa 0E28     	    cmp r0,#TK_INTGR 
 2506 02fc 7FF4FEAF 	    bne syntax_error 
 2507 0300 59B1     	    cbz r1,9f 
 2508 0302 0846     	1:  mov r0,r1 
 2509 0304 00B5FFF7 	    _CALL search_lineno 
 2509      FEFF5DF8 
 2509      04EB
 2510 030e 19B1     	    cbz r1,2f 
 2511 0310 4FF00500 	    mov r0,#ERR_NO_LINE 
 2512 0314 FFF7FEBF 	    b tb_error 
 2513 0318 8346     	2:  mov BPTR,r0 
 2514 031a 4FF0030A 	9:  mov IN,#3 
 2515 031e 7047     	    _RET 
 2516              	
 2517              	    _FUNC gpio
 2518 0320 7047     	    _RET  
 2519              	
 2520 0322 00BF     	    _FUNC hex_base
ARM GAS  tinyBasic.s 			page 70


 2521 0324 7047     	    _RET 
 2522              	
 2523 0326 00BF     	    _FUNC const_idr
 2524 0328 7047     	    _RET 
 2525              	
 2526              	/**********************************************
 2527              	  BASIC: IF relation : statement
 2528              	  execute statement only if relation is true
 2529              	*********************************************/
 2530 032a 00BF     	    _FUNC if
 2531 032c 00B5FFF7 	    _CALL relation 
 2531      FEFF5DF8 
 2531      04EB
 2532 0336 09B9     	    cbnz r1,9f 
 2533 0338 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2534 033c 7047     	9:  _RET 
 2535              	
 2536 033e 00BF     	    _FUNC input_var
 2537 0340 7047     	    _RET 
 2538              	
 2539 0342 00BF     	    _FUNC invert
 2540 0344 7047     	    _RET 
 2541              	
 2542 0346 00BF     	    _FUNC enable_iwdg
 2543 0348 7047     	    _RET 
 2544              	
 2545 034a 00BF     	    _FUNC refresh_iwdg
 2546 034c 7047     	    _RET 
 2547              	
 2548 034e 00BF     	    _FUNC key
 2549 0350 7047     	    _RET  
 2550              	
 2551              	/******************************
 2552              	  BASIC: [let] var=expr 
 2553              	         [let] @(expr)=expr
 2554              	  input:
 2555              	    none 
 2556              	  output:
 2557              	    none 
 2558              	  use:
 2559              	
 2560              	****************************/         
 2561 0352 00BF     	    _FUNC let
 2562 0354 00B5FFF7 	    _CALL next_token 
 2562      FEFF5DF8 
 2562      04EB
 2563 035e 0428     	    cmp r0,#TK_VAR
 2564 0360 03D0     	    beq let_var 
 2565 0362 0528     	    cmp r0,#TK_ARRAY 
 2566 0364 07D0     	    beq let_array 
 2567 0366 FFF7FEBF 	    b syntax_error 
 2568              	let_var:
 2569 036a 4FEA8101 	    lsl r1,#2
 2570 036e 04F16000 	    add r0,UPP,#VARS
 2571 0372 0844     	    add r0,r1
 2572 0374 1FE0     	    b 1f 
 2573              	let_array: 
ARM GAS  tinyBasic.s 			page 71


 2574 0376 4FF00600 	    mov r0,#TK_LPAREN
 2575 037a 00B5FFF7 	    _CALL expect 
 2575      FEFF5DF8 
 2575      04EB
 2576 0384 00B5FFF7 	    _CALL expression
 2576      FEFF5DF8 
 2576      04EB
 2577 038e 0E28     	    cmp r0,#TK_INTGR 
 2578 0390 7FF4FEAF 	    bne syntax_error
 2579 0394 4CF8041D 	    _PUSH r1 
 2580 0398 4FF00700 	    mov r0,#TK_RPAREN
 2581 039c 00B5FFF7 	    _CALL expect 
 2581      FEFF5DF8 
 2581      04EB
 2582 03a6 5CF8041B 	    _POP r1 
 2583 03aa D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2584 03ae 4FEA8101 	    lsl r1,#2 
 2585 03b2 A0EB0100 	    sub r0,r1 
 2586 03b6 4CF8040D 	1:  _PUSH r0 
 2587 03ba 4FF03200 	    mov r0,#TK_EQUAL 
 2588 03be 00B5FFF7 	    _CALL expect 
 2588      FEFF5DF8 
 2588      04EB
 2589 03c8 00B5FFF7 	    _CALL expression   
 2589      FEFF5DF8 
 2589      04EB
 2590 03d2 0E28     	    cmp r0,#TK_INTGR
 2591 03d4 7FF4FEAF 	    bne syntax_error   
 2592 03d8 5CF8040B 	2:  _POP r0 
 2593 03dc 0160     	    str r1,[r0]
 2594 03de 7047     	    _RET  
 2595              	
 2596              	/***************************************
 2597              	  BASIC: LIST [[first,]last]
 2598              	  use:
 2599              	    T1 
 2600              	**************************************/  
 2601              	    _FUNC list
 2602 03e0 206C10F0 	    _CLO
 2602      010F03D0 
 2602      4FF00700 
 2602      FFF7FEBF 
 2603 03f0 4DF8048D 	    push {T1} 
 2604              	//  _CALL arg_list 
 2605 03f4 D4F830B0 	    ldr BPTR,[UPP,#TXTBGN]
 2606 03f8 D4F83480 	    ldr T1,[UPP,#TXTEND]
 2607 03fc C345     	1:  cmp BPTR,T1 
 2608 03fe 09D5     	    bpl 9f
 2609 0400 5846     	    mov r0,BPTR  
 2610 0402 00B500F0 	    _CALL print_basic_line
 2610      08F85DF8 
 2610      04EB
 2611 040c 9BF80200 	    ldrb r0,[BPTR,#2]
 2612 0410 8344     	    add BPTR,r0 
 2613 0412 F3E7     	    b 1b
 2614 0414 FFF7FEBF 	9:  b warm_start 
 2615              	
ARM GAS  tinyBasic.s 			page 72


 2616              	/****************************
 2617              	  decotonize and print line 
 2618              	  input:
 2619              	    BPTR   line address 
 2620              	  output:
 2621              	    none:
 2622              	  use:
 2623              	    r0,r1 
 2624              	****************************/
 2625              	    _FUNC print_basic_line 
 2626 0418 03B4     	    push {r0,r1}
 2627 041a 4FF0000A 	    mov IN,#0
 2628 041e 3BF80A00 	    ldrh r0,[BPTR,IN]
 2629 0422 0AF1020A 	    add IN,#2
 2630 0426 4FF00A01 	    mov r1,#10 
 2631 042a 00B5FFF7 	    _CALL print_int
 2631      FEFF5DF8 
 2631      04EB
 2632 0434 1BF80A00 	    ldrb r0, [BPTR,IN]
 2633 0438 0AF1010A 	    add IN,#1 
 2634 043c 6060     	    str r0,[UPP,#COUNT]
 2635              	token_loop:  
 2636 043e 00B5FFF7 	    _CALL next_token
 2636      FEFF5DF8 
 2636      04EB
 2637 0448 0028     	    cmp r0,#TK_NONE 
 2638 044a 00F08880 	    beq 9f  
 2639 044e 0E28     	    cmp r0,#TK_INTGR 
 2640 0450 07D1     	    bne 2f 
 2641 0452 0846     	    mov r0,r1 
 2642 0454 A169     	    ldr r1,[UPP,#BASE]
 2643 0456 00B5FFF7 	    _CALL print_int 
 2643      FEFF5DF8 
 2643      04EB
 2644 0460 EDE7     	    b token_loop 
 2645 0462 0328     	2:  cmp r0,#TK_CHAR 
 2646 0464 0ED1     	    bne 3f 
 2647 0466 01F14100 	    add r0,r1,#'A' 
 2648 046a 00B5FFF7 	    _CALL uart_putc
 2648      FEFF5DF8 
 2648      04EB
 2649 0474 4FF02000 	    mov r0,#SPACE 
 2650 0478 00B5FFF7 	    _CALL uart_putc
 2650      FEFF5DF8 
 2650      04EB
 2651 0482 DCE7     	    b token_loop 
 2652 0484 0228     	3:  cmp r0,#TK_QSTR 
 2653 0486 14D1     	    bne 4f 
 2654 0488 4FF02200 	    mov r0,#'"'
 2655 048c 00B5FFF7 	    _CALL uart_putc 
 2655      FEFF5DF8 
 2655      04EB
 2656 0496 0846     	    mov r0,r1 
 2657 0498 00B5FFF7 	    _CALL uart_puts
 2657      FEFF5DF8 
 2657      04EB
 2658 04a2 4FF02200 	    mov r0,#'"'
ARM GAS  tinyBasic.s 			page 73


 2659 04a6 00B5FFF7 	    _CALL uart_putc 
 2659      FEFF5DF8 
 2659      04EB
 2660 04b0 C5E7     	    b token_loop
 2661 04b2 0A28     	4:  cmp r0,#TK_CMD
 2662 04b4 38D4     	    bmi 5f 
 2663 04b6 0E28     	    cmp r0,#TK_INTGR 
 2664 04b8 36D5     	    bpl 5f
 2665 04ba 4FF02000 	    mov r0,#SPACE 
 2666 04be 00B5FFF7 	    _CALL uart_putc  
 2666      FEFF5DF8 
 2666      04EB
 2667 04c8 0846     	    mov r0,r1
 2668 04ca 3A28     	    cmp r0,#PRT_IDX 
 2669 04cc 07D1     	    bne 1f  
 2670 04ce 4FF03F00 	    mov r0,#'?'
 2671 04d2 00B5FFF7 	    _CALL uart_putc 
 2671      FEFF5DF8 
 2671      04EB
 2672 04dc 1CE0     	    b 3f 
 2673 04de 4728     	1:  cmp r0,#REM_IDX
 2674 04e0 10D1     	    bne 1f
 2675 04e2 4FF02700 	    mov r0,#'\''
 2676 04e6 00B5FFF7 	    _CALL uart_putc 
 2676      FEFF5DF8 
 2676      04EB
 2677 04f0 0BEB0A00 	    add r0,BPTR,IN  
 2678 04f4 00B5FFF7 	    _CALL uart_puts 
 2678      FEFF5DF8 
 2678      04EB
 2679 04fe D4F804A0 	    ldr IN,[UPP,#COUNT]
 2680 0502 2CE0     	    b 9f 
 2681 0504 00B5FFF7 	1:  _CALL bc_to_name
 2681      FEFF5DF8 
 2681      04EB
 2682 050e 00B5FFF7 	2:  _CALL uart_puts
 2682      FEFF5DF8 
 2682      04EB
 2683 0518 4FF02000 	3:  mov r0,#SPACE 
 2684 051c 00B5FFF7 	    _CALL uart_putc 
 2684      FEFF5DF8 
 2684      04EB
 2685 0526 8AE7     	    b token_loop
 2686 0528 01B4     	5:  push {r0}
 2687 052a DFF8D416 	    ldr r1,=single_char 
 2688 052e 085C     	    ldrb r0,[r1,r0]
 2689 0530 02BC     	    pop {r1}
 2690 0532 28B1     	    cbz r0,6f 
 2691 0534 00B5FFF7 	    _CALL uart_putc
 2691      FEFF5DF8 
 2691      04EB
 2692 053e 7EE7     	    b token_loop
 2693 0540 3329     	6:  cmp r1,#TK_GE 
 2694 0542 02D1     	    bne 7f 
 2695 0544 DFF8BC06 	    ldr r0,=ge_str
 2696 0548 E1E7     	    b 2b 
 2697 054a 3629     	7:  cmp r1,#TK_LE 
ARM GAS  tinyBasic.s 			page 74


 2698 054c 02D1     	    bne 8f
 2699 054e DFF8B806 	    ldr r0,=le_str
 2700 0552 DCE7     	    b 2b
 2701 0554 3529     	8:  cmp r1,#TK_NE 
 2702 0556 02D1     	    bne 9f 
 2703 0558 DFF8B006 	    ldr r0,=ne_str 
 2704 055c D7E7     	    b 2b 
 2705 055e 4FF00D00 	9:  mov r0,#CR 
 2706 0562 00B5FFF7 	    _CALL uart_putc 
 2706      FEFF5DF8 
 2706      04EB
 2707 056c 03BC     	    pop {r0,r1}
 2708 056e 7047     	    _RET 
 2709              	
 2710 0570 3E3D00   	ge_str: .asciz ">="
 2711 0573 3C3D00   	le_str: .asciz "<="
 2712 0576 3C3E00   	ne_str: .asciz "<>"
 2713              	
 2714              	single_char:
 2715 0579 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 2715      00402829 
 2715      2C23
 2716 0583 00000000 	  .space 6
 2716      0000
 2717 0589 2B2D     	  .byte '+','-'
 2718 058b 00000000 	  .space 14
 2718      00000000 
 2718      00000000 
 2718      0000
 2719 0599 2A2F25   	  .byte '*','/','%'
 2720 059c 00000000 	  .space 14
 2720      00000000 
 2720      00000000 
 2720      0000
 2721 05aa 3E3D003C 	  .byte '>','=',0,'<',0,0
 2721      0000
 2722              	
 2723              	
 2724              	    _FUNC load
 2725 05b0 7047     	    _RET 
 2726              	
 2727 05b2 00BF     	    _FUNC log2
 2728 05b4 7047     	    _RET 
 2729              	
 2730 05b6 00BF     	    _FUNC lshift
 2731 05b8 7047     	    _RET 
 2732              	
 2733 05ba 00BF     	    _FUNC muldiv
 2734 05bc 7047     	    _RET 
 2735              	
 2736              	/***********************************
 2737              	  BASIC: NEW 
 2738              	  delete existing program in memory
 2739              	  and clear variables and RAM 
 2740              	***********************************/
 2741 05be 00BF     	    _FUNC new
 2742 05c0 206C10F0 	    _CLO 
ARM GAS  tinyBasic.s 			page 75


 2742      010F03D0 
 2742      4FF00700 
 2742      FFF7FEBF 
 2743 05d0 00B5FFF7 	    _CALL clear_basic 
 2743      FEFF5DF8 
 2743      04EB
 2744 05da FFF7FEBF 	    b warm_start   
 2745              	
 2746              	/************************************
 2747              	  BASIC: NOT relation  
 2748              	  invert logical value or relation
 2749              	************************************/
 2750 05de 00BF     	      _FUNC func_not
 2751 05e0 00B5FFF7 	      _CALL relation 
 2751      FEFF5DF8 
 2751      04EB
 2752 05ea 11B1     	      cbz r1,8f 
 2753 05ec 81EA0101 	      eor r1,r1
 2754 05f0 01E0     	      b 9f 
 2755 05f2 4FF0FF31 	  8:  mov r1,#-1
 2756 05f6 7047     	  9:  _RET 
 2757              	
 2758              	    _FUNC const_odr
 2759 05f8 7047     	    _RET 
 2760              	
 2761 05fa 00BF     	    _FUNC bit_or
 2762 05fc 7047     	    _RET 
 2763              	
 2764 05fe 00BF     	    _FUNC pad_ref
 2765 0600 7047     	    _RET 
 2766              	
 2767              	/***********************
 2768              	  BASIC: PAUSE expr 
 2769              	  suspend execution for 
 2770              	  expr milliseconds 
 2771              	************************/
 2772 0602 00BF     	    _FUNC pause
 2773 0604 00B5FFF7 	    _CALL expression 
 2773      FEFF5DF8 
 2773      04EB
 2774 060e 0E28     	    cmp r0,#TK_INTGR 
 2775 0610 7FF4FEAF 	    bne syntax_error 
 2776 0614 E069     	    ldr r0,[UPP,#TICKS]
 2777 0616 0844     	    add r0,r1 
 2778 0618 E169     	1:  ldr r1,[UPP,#TICKS]
 2779 061a 8842     	    cmp r0,r1 
 2780 061c FCD1     	    bne 1b     
 2781 061e 7047     	    _RET 
 2782              	
 2783              	    _FUNC pin_mode
 2784 0620 7047     	    _RET 
 2785              	
 2786 0622 00BF     	    _FUNC peek
 2787 0624 7047     	    _RET 
 2788              	
 2789 0626 00BF     	    _FUNC const_input
 2790 0628 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 76


 2791              	
 2792 062a 00BF     	    _FUNC poke
 2793 062c 7047     	    _RET 
 2794              	
 2795 062e 00BF     	    _FUNC const_output
 2796 0630 7047     	    _RET 
 2797              	
 2798              	/****************************
 2799              	  BASIC: PRINT|? arg_list 
 2800              	  print list of arguments 
 2801              	****************************/
 2802 0632 00BF     	    _FUNC print
 2803 0634 88EA0808 	    eor T1,T1 // no comma 
 2804 0638 00B5FFF7 	0:  _CALL expression
 2804      FEFF5DF8 
 2804      04EB
 2805 0642 0E28     	    cmp r0,#TK_INTGR
 2806 0644 07D1     	    bne 1f 
 2807 0646 0846     	    mov r0,r1
 2808 0648 A169     	    ldr r1,[UPP,#BASE]
 2809 064a 00B5FFF7 	    _CALL print_int
 2809      FEFF5DF8 
 2809      04EB
 2810 0654 2BE0     	    b 6f 
 2811 0656 00B5FFF7 	1:  _CALL next_token
 2811      FEFF5DF8 
 2811      04EB
 2812 0660 0128     	    cmp r0,#TK_COLON 
 2813 0662 04DC     	    bgt 2f
 2814 0664 D4F800A0 	    _UNGET_TOKEN 
 2814      D4F808B0 
 2815 066c 2AE0     	    b print_exit
 2816 066e 88EA0808 	2:  eor T1, T1 
 2817 0672 0228     	    cmp r0,#TK_QSTR 
 2818 0674 06D1     	    bne 4f
 2819 0676 0846     	    mov r0,r1 
 2820 0678 00B5FFF7 	    _CALL uart_puts  
 2820      FEFF5DF8 
 2820      04EB
 2821 0682 14E0     	    b 6f 
 2822 0684 0328     	4:  cmp r0,#TK_CHAR 
 2823 0686 06D1     	    bne 5f 
 2824 0688 0846     	    mov r0,r1 
 2825 068a 00B5FFF7 	    _CALL uart_putc 
 2825      FEFF5DF8 
 2825      04EB
 2826 0694 0BE0     	    b 6f 
 2827 0696 0928     	5:  cmp r0,#TK_SHARP
 2828 0698 7FF4FEAF 	    bne syntax_error 
 2829 069c 00B5FFF7 	    _CALL next_token 
 2829      FEFF5DF8 
 2829      04EB
 2830 06a6 0E28     	    cmp r0,#TK_INTGR 
 2831 06a8 7FF4FEAF 	    bne syntax_error 
 2832 06ac 6164     	    str r1,[UPP,#TAB_WIDTH]
 2833 06ae 00B5FFF7 	6:  _CALL next_token 
 2833      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 77


 2833      04EB
 2834 06b8 0828     	    cmp r0,#TK_COMMA 
 2835 06ba BDD0     	    beq 0b
 2836 06bc D4F800A0 	    _UNGET_TOKEN 
 2836      D4F808B0 
 2837              	print_exit:
 2838 06c4 18EA0808 	      ands T1,T1 
 2839 06c8 06D1     	      bne 9f
 2840 06ca 4FF00D00 	      mov r0,#CR 
 2841 06ce 00B5FFF7 	      _CALL uart_putc 
 2841      FEFF5DF8 
 2841      04EB
 2842 06d8 7047     	  9:  _RET 
 2843              	
 2844 06da 00BF     	    _FUNC const_porta
 2845 06dc 7047     	    _RET 
 2846              	
 2847 06de 00BF     	    _FUNC const_portb
 2848 06e0 7047     	    _RET 
 2849              	
 2850 06e2 00BF     	    _FUNC const_portc
 2851 06e4 7047     	    _RET 
 2852              	
 2853 06e6 00BF     	    _FUNC const_portd
 2854 06e8 7047     	    _RET 
 2855              	
 2856 06ea 00BF     	    _FUNC const_porte
 2857 06ec 7047     	    _RET  
 2858              	
 2859 06ee 00BF     	    _FUNC const_portf
 2860 06f0 7047     	    _RET 
 2861              	
 2862 06f2 00BF     	    _FUNC const_portg
 2863 06f4 7047     	    _RET 
 2864              	
 2865 06f6 00BF     	    _FUNC const_porth
 2866 06f8 7047     	    _RET 
 2867              	
 2868 06fa 00BF     	    _FUNC const_porti
 2869 06fc 7047     	    _RET 
 2870              	
 2871 06fe 00BF     	    _FUNC qkey
 2872 0700 7047     	    _RET 
 2873              	
 2874 0702 00BF     	    _FUNC  random
 2875 0704 7047     	    _RET 
 2876              	
 2877 0706 00BF     	    _FUNC rshift
 2878 0708 7047     	    _RET 
 2879              	
 2880              	/****************************
 2881              	  BASIC: RUN 
 2882              	  execute program in memory
 2883              	****************************/
 2884 070a 00BF     	    _FUNC run
 2885 070c 206C10F0 	    _CLO 
 2885      010F03D0 
ARM GAS  tinyBasic.s 			page 78


 2885      4FF00700 
 2885      FFF7FEBF 
 2886 071c 206B     	    ldr r0,[UPP,#TXTBGN]
 2887 071e 616B     	    ldr r1,[UPP,#TXTEND]
 2888 0720 8842     	    cmp r0,r1
 2889 0722 0DD0     	    beq 9f 
 2890 0724 8178     	    ldrb r1,[r0,#2]
 2891 0726 6160     	    str r1,[UPP,#COUNT]
 2892 0728 8346     	    mov BPTR,r0 
 2893 072a 4FF0030A 	    mov IN,#3
 2894              	    // reset dataline pointers 
 2895 072e 80EA0000 	    eor r0,r0 
 2896 0732 E060     	    str r0,[UPP,#DATAPTR]
 2897 0734 2061     	    str r0,[UPP,#DATA]
 2898 0736 6061     	    str r0,[UPP,#DATALEN] 
 2899 0738 206C     	    ldr r0,[UPP,#FLAGS]
 2900 073a 40F00100 	    orr r0,#FRUN 
 2901 073e 2064     	    str r0,[UPP,#FLAGS]
 2902 0740 7047     	9:  _RET 
 2903              	
 2904 0742 00BF     	    _FUNC save
 2905 0744 7047     	    _RET 
 2906              	
 2907 0746 00BF     	    _FUNC show
 2908 0748 7047     	    _RET 
 2909              	
 2910 074a 00BF     	    _FUNC size
 2911 074c 7047     	    _RET  
 2912              	
 2913 074e 00BF     	    _FUNC sleep
 2914 0750 7047     	    _RET 
 2915              	
 2916 0752 00BF     	    _FUNC spi_read
 2917 0754 7047     	    _RET 
 2918              	
 2919 0756 00BF     	    _FUNC spi_enable
 2920 0758 7047     	    _RET 
 2921              	
 2922 075a 00BF     	    _FUNC spi_select
 2923 075c 7047     	    _RET 
 2924              	
 2925 075e 00BF     	    _FUNC spi_write
 2926 0760 7047     	    _RET 
 2927              	
 2928 0762 00BF     	    _FUNC stop
 2929 0764 7047     	    _RET 
 2930              	
 2931              	/**************************
 2932              	  BASIC: TICKS 
 2933              	  return msec counter
 2934              	**************************/  
 2935 0766 00BF     	    _FUNC get_ticks
 2936 0768 E169     	    ldr r1,[UPP,#TICKS]
 2937 076a 4FF00E00 	    mov r0,#TK_INTGR
 2938 076e 7047     	    _RET  
 2939              	
 2940              	/*************************
ARM GAS  tinyBasic.s 			page 79


 2941              	  BASIC: TIMER expr 
 2942              	  set countdown timer 
 2943              	************************/
 2944              	    _FUNC set_timer
 2945 0770 00B5FFF7 	    _CALL expression 
 2945      FEFF5DF8 
 2945      04EB
 2946 077a 0E28     	    cmp r0,#TK_INTGR
 2947 077c 7FF4FEAF 	    bne syntax_error 
 2948 0780 2162     	    str r1,[UPP,#TIMER]
 2949 0782 7047     	    _RET 
 2950              	
 2951              	/***************************
 2952              	  BASIC: TIMEOUT
 2953              	  check for timer expiration 
 2954              	  return -1 true || 0 false
 2955              	****************************/
 2956              	    _FUNC timeout
 2957 0784 81EA0101 	    eor r1,r1 
 2958 0788 206A     	    ldr r0,[UPP,#TIMER]
 2959 078a 08B9     	    cbnz r0,9f 
 2960 078c 6FEA0101 	    mvn r1,r1 
 2961 0790 4FF00E00 	9:  mov r0,#TK_INTGR    
 2962 0794 7047     	    _RET 
 2963              	
 2964 0796 00BF     	    _FUNC tone
 2965 0798 7047     	    _RET 
 2966              	
 2967              	/***************************
 2968              	  BASIC: UBOUND 
 2969              	  return last indice of @
 2970              	  output:
 2971              	    r0  TK_INTGR 
 2972              	    r1  +int 
 2973              	**************************/
 2974 079a 00BF     	    _FUNC ubound
 2975 079c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2976 07a0 606B     	    ldr r0,[UPP,#TXTEND]
 2977 07a2 A1EB0001 	    sub r1,r0 
 2978 07a6 4FEA9101 	    lsr r1,#2
 2979 07aa 4FF00E00 	    mov r0,#TK_INTGR 
 2980 07ae 7047     	    _RET 
 2981              	
 2982              	    _FUNC uflash
 2983 07b0 7047     	    _RET 
 2984              	
 2985 07b2 00BF     	    _FUNC until
 2986 07b4 7047     	    _RET 
 2987              	
 2988 07b6 00BF     	    _FUNC usr
 2989 07b8 7047     	    _RET  
 2990              	
 2991 07ba 00BF     	    _FUNC wait
 2992 07bc 7047     	    _RET 
 2993              	
 2994              	/*********************************************
 2995              	  BASIC: WORDS 
ARM GAS  tinyBasic.s 			page 80


 2996              	  print list of BASIC WORDS in dictionary 
 2997              	  use:
 2998              	    r0,r1,T1,T2  
 2999              	********************************************/
 3000 07be 00BF     	    _FUNC words
 3001 07c0 206C10F0 	    _CLO 
 3001      010F03D0 
 3001      4FF00700 
 3001      FFF7FEBF 
 3002 07d0 DFF83C84 	    ldr T1,=kword_dict
 3003 07d4 89EA0909 	    eor T2,T2 
 3004              	1:  
 3005 07d8 4046     	    mov r0,T1
 3006 07da 00B5FFF7 	    _CALL strlen
 3006      FEFF5DF8 
 3006      04EB
 3007 07e4 F0B1     	    cbz r0,9f 
 3008 07e6 8144     	    add T2,r0 
 3009 07e8 B9F1500F 	    cmp T2,#80 
 3010 07ec 08D4     	    bmi 2f
 3011 07ee 89EA0909 	    eor T2,T2  
 3012 07f2 4FF00D00 	    mov r0,#CR 
 3013 07f6 00B5FFF7 	    _CALL uart_putc 
 3013      FEFF5DF8 
 3013      04EB
 3014 0800 4046     	2:  mov r0,T1 
 3015 0802 00B5FFF7 	    _CALL uart_puts 
 3015      FEFF5DF8 
 3015      04EB
 3016 080c 4FF02000 	    mov r0,#SPACE
 3017 0810 09F10109 	    add T2,#1  
 3018 0814 00B5FFF7 	    _CALL uart_putc 
 3018      FEFF5DF8 
 3018      04EB
 3019 081e 58F80C8C 	    ldr T1,[T1,#-12]
 3020 0822 D9E7     	    b 1b 
 3021 0824 7047     	9:  _RET 
 3022              	
 3023 0826 00BF     	    _FUNC write
 3024 0828 7047     	    _RET 
 3025              	
 3026 082a 00BF     	    _FUNC bit_xor
 3027 082c 7047     	    _RET 
 3028              	
 3029 082e 00BF     	    _FUNC transmit
 3030 0830 7047     	    _RET 
 3031              	
 3032 0832 00BF     	    _FUNC receive
 3033 0834 7047     	    _RET  
 3034              	
 3035              	
 3036              	/*************************************************
 3037              	   extra FLASH memory not used by Tiny BASIC
 3038              	   is used to save BASIC programs.
 3039              	************************************************/
 3040 0836 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3040      0080AFF3 
ARM GAS  tinyBasic.s 			page 81


 3040      00800000 
 3040      00000000 
 3040      00000000 
 3041              	  .section .fs
 3042              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 82


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 83


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 84


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 85


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 86


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 87


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 88


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:247    .text:0000000000000150 dump
         tinyBasic.s:1024   .text:00000000000006d0 tb_error
         tinyBasic.s:1599   .text:0000000000000bcc arg_list
         tinyBasic.s:1009   .text:00000000000006c8 syntax_error
         tinyBasic.s:280    .text:0000000000000190 search_lineno
         tinyBasic.s:311    .text:00000000000001b0 delete_line
         tinyBasic.s:336    .text:00000000000001dc create_gap
         tinyBasic.s:361    .text:0000000000000204 insert_line
         tinyBasic.s:400    .text:0000000000000254 compile
         tinyBasic.s:1380   .text:0000000000000a14 pad
         tinyBasic.s:641    .text:0000000000000480 parse_int
         tinyBasic.s:471    .text:00000000000002e8 comp_token
         tinyBasic.s:545    .text:00000000000003d4 store_r0
         tinyBasic.s:757    .text:0000000000000558 skip
         tinyBasic.s:776    .text:0000000000000570 upper
         tinyBasic.s:579    .text:0000000000000414 is_special
         tinyBasic.s:601    .text:0000000000000458 token_ofs
         tinyBasic.s:486    .text:0000000000000328 tok_idx0
         tinyBasic.s:548    .text:00000000000003da try_number
         tinyBasic.s:490    .text:000000000000032a single
         tinyBasic.s:596    .text:0000000000000448 tok_single
         tinyBasic.s:494    .text:0000000000000332 lt
ARM GAS  tinyBasic.s 			page 89


         tinyBasic.s:500    .text:0000000000000340 gt
         tinyBasic.s:513    .text:0000000000000364 bkslash
         tinyBasic.s:562    .text:000000000000040e token_exit
         tinyBasic.s:520    .text:000000000000037a prt_cmd
         tinyBasic.s:526    .text:000000000000038c quote
         tinyBasic.s:696    .text:00000000000004f0 parse_quote
         tinyBasic.s:531    .text:00000000000003a0 tick
         tinyBasic.s:928    .text:0000000000000624 parse_keyword
         tinyBasic.s:593    .text:0000000000000434 char_list
         tinyBasic.s:594    .text:0000000000000434 $d
         tinyBasic.s:602    .text:0000000000000458 $d
         tinyBasic.s:618    .text:000000000000047e $t
         tinyBasic.s:727    .text:0000000000000524 get_escaped_char
         tinyBasic.s:744    .text:000000000000054e escaped
         tinyBasic.s:744    .text:000000000000054e $d
         tinyBasic.s:757    .text:0000000000000556 $t
         tinyBasic.s:794    .text:0000000000000580 is_digit
         tinyBasic.s:818    .text:000000000000059c is_hex
         tinyBasic.s:843    .text:00000000000005c0 is_bit
         tinyBasic.s:864    .text:00000000000005dc is_alpha
         tinyBasic.s:885    .text:00000000000005f4 is_num
         tinyBasic.s:906    .text:000000000000060c is_alnum
         tinyBasic.s:2078   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1172   .text:000000000000083c search_dict
         tinyBasic.s:979    .text:00000000000006a8 cmd_name
         tinyBasic.s:1054   .text:0000000000000760 compile_error
         tinyBasic.s:1028   .text:00000000000006d8 rt_error
         tinyBasic.s:1071   .text:00000000000007b8 rt_error_msg
         tinyBasic.s:1074   .text:00000000000007c8 err_msg
         tinyBasic.s:1473   .text:0000000000000ab8 next_token
         tinyBasic.s:1393   .text:0000000000000a24 warm_start
         tinyBasic.s:1072   .text:00000000000007b8 $d
         tinyBasic.s:1081   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1082   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1083   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1084   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1085   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1086   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1087   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1088   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1089   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1090   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1091   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1092   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1093   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1094   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1095   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1097   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1098   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1099   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1109   .text:0000000000000808 $t
         tinyBasic.s:1109   .text:0000000000000808 skip_line
         tinyBasic.s:1126   .text:0000000000000810 BTGL
         tinyBasic.s:1144   .text:0000000000000814 kword_cmp
         tinyBasic.s:1206   .text:000000000000087c bc_to_name
         tinyBasic.s:1235   .text:000000000000089e cold_start
         tinyBasic.s:1256   .text:00000000000008ec src_addr
ARM GAS  tinyBasic.s 			page 90


         tinyBasic.s:1258   .text:00000000000008f0 dest_addr
         tinyBasic.s:1379   .text:0000000000000a10 tib
         tinyBasic.s:1260   .text:00000000000008f4 sysvar_size
         tinyBasic.s:1271   .text:00000000000008f8 prt_version
         tinyBasic.s:1328   .text:00000000000009a0 clear_basic
         tinyBasic.s:1257   .text:00000000000008ec $d
         tinyBasic.s:1938   .rodata:0000000000000000 uzero
         tinyBasic.s:1962   .rodata:00000000000000cc ulast
         tinyBasic.s:1271   .text:00000000000008f8 $t
         tinyBasic.s:1295   .text:0000000000000960 version_msg
         tinyBasic.s:1297   .text:0000000000000980 version
         tinyBasic.s:1296   .text:0000000000000960 $d
         tinyBasic.s:1312   .text:0000000000000984 clear_vars
         tinyBasic.s:1362   .text:00000000000009e4 warm_init
         tinyBasic.s:1378   .text:0000000000000a0c dstack
         tinyBasic.s:1377   .text:0000000000000a08 mstack
         tinyBasic.s:1377   .text:0000000000000a08 $d
         tinyBasic.s:1381   .text:0000000000000a18 array
         tinyBasic.s:1382   .text:0000000000000a1c ready
         tinyBasic.s:1413   .text:0000000000000a3c cmd_line
         tinyBasic.s:1424   .text:0000000000000a6c interpreter
         tinyBasic.s:1457   .text:0000000000000aac execute
         tinyBasic.s:2568   .text.basic:000000000000036a let_var
         tinyBasic.s:2573   .text.basic:0000000000000376 let_array
         tinyBasic.s:2086   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1479   .text:0000000000000ac6 new_line
         tinyBasic.s:1483   .text:0000000000000ace end_of_line
         tinyBasic.s:1530   .text:0000000000000b44 tok_jmp
         tinyBasic.s:1531   .text:0000000000000b44 $d
         tinyBasic.s:1545   .text:0000000000000b84 $t
         tinyBasic.s:1560   .text:0000000000000b84 expect
         tinyBasic.s:1579   .text:0000000000000ba0 func_args
         tinyBasic.s:1759   .text:0000000000000d70 expression
         tinyBasic.s:1633   .text:0000000000000c0c factor
         tinyBasic.s:1867   .text:0000000000000e5c get_array_element
         tinyBasic.s:1905   .text:0000000000000e84 get_var
         tinyBasic.s:1708   .text:0000000000000cf4 term
         tinyBasic.s:1801   .text:0000000000000dd8 relation
         tinyBasic.s:1848   .text:0000000000000e52 relop_jmp
         tinyBasic.s:1820   .text:0000000000000e22 rel_idx0
         tinyBasic.s:1821   .text:0000000000000e22 rel_eq
         tinyBasic.s:1838   .text:0000000000000e38 rel_false
         tinyBasic.s:1824   .text:0000000000000e26 rel_lt
         tinyBasic.s:1827   .text:0000000000000e2a rel_le
         tinyBasic.s:1830   .text:0000000000000e2e rel_gt
         tinyBasic.s:1833   .text:0000000000000e32 rel_ge
         tinyBasic.s:1836   .text:0000000000000e36 rel_diff
         tinyBasic.s:1849   .text:0000000000000e52 $d
         tinyBasic.s:1887   .text:0000000000000e70 set_array_element
         tinyBasic.s:1923   .text:0000000000000e94 set_var
         tinyBasic.s:3042   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1959   .rodata:0000000000000050 $d
         tinyBasic.s:1969   *ABS*:0000000000000000 link
         tinyBasic.s:1970   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2079   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:1971   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2074   .rodata.dictionary:0000000000000794 first_link
ARM GAS  tinyBasic.s 			page 91


         tinyBasic.s:2120   .text.basic:0000000000000000 abs
         tinyBasic.s:2132   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2135   .text.basic:000000000000002c analog_read
         tinyBasic.s:2138   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2141   .text.basic:0000000000000034 ascii
         tinyBasic.s:2144   .text.basic:0000000000000038 autorun
         tinyBasic.s:2147   .text.basic:000000000000003c awu
         tinyBasic.s:2150   .text.basic:0000000000000040 bitmask
         tinyBasic.s:2165   .text.basic:0000000000000044 bit_reset
         tinyBasic.s:2190   .text.basic:0000000000000070 bit_set
         tinyBasic.s:2226   .text.basic:00000000000000c0 bit_test
         tinyBasic.s:2214   .text.basic:0000000000000098 bit_toggle
         tinyBasic.s:2229   .text.basic:00000000000000c4 bye
         tinyBasic.s:2232   .text.basic:00000000000000c8 char
         tinyBasic.s:2235   .text.basic:00000000000000cc const_cr2
         tinyBasic.s:2238   .text.basic:00000000000000d0 const_cr1
         tinyBasic.s:2251   .text.basic:00000000000000d4 data_line
         tinyBasic.s:2352   .text.basic:00000000000001cc const_ddr
         tinyBasic.s:2355   .text.basic:00000000000001d0 dec_base
         tinyBasic.s:2358   .text.basic:00000000000001d4 directory
         tinyBasic.s:2361   .text.basic:00000000000001d8 do_loop
         tinyBasic.s:2364   .text.basic:00000000000001dc digital_read
         tinyBasic.s:2367   .text.basic:00000000000001e0 digital_write
         tinyBasic.s:2374   .text.basic:00000000000001e4 cmd_end
         tinyBasic.s:2378   .text.basic:00000000000001ec const_eeprom_base
         tinyBasic.s:2381   .text.basic:00000000000001f0 fcpu
         tinyBasic.s:2391   .text.basic:00000000000001f8 for
         tinyBasic.s:2384   .text.basic:00000000000001f4 forget
         tinyBasic.s:2471   .text.basic:00000000000002ac gosub
         tinyBasic.s:2503   .text.basic:00000000000002f0 goto
         tinyBasic.s:2517   .text.basic:0000000000000320 gpio
         tinyBasic.s:2520   .text.basic:0000000000000324 hex_base
         tinyBasic.s:2523   .text.basic:0000000000000328 const_idr
         tinyBasic.s:2530   .text.basic:000000000000032c if
         tinyBasic.s:2536   .text.basic:0000000000000340 input_var
         tinyBasic.s:2539   .text.basic:0000000000000344 invert
         tinyBasic.s:2542   .text.basic:0000000000000348 enable_iwdg
         tinyBasic.s:2545   .text.basic:000000000000034c refresh_iwdg
         tinyBasic.s:2548   .text.basic:0000000000000350 key
         tinyBasic.s:2561   .text.basic:0000000000000354 let
         tinyBasic.s:2601   .text.basic:00000000000003e0 list
         tinyBasic.s:2724   .text.basic:00000000000005b0 load
         tinyBasic.s:2727   .text.basic:00000000000005b4 log2
         tinyBasic.s:2730   .text.basic:00000000000005b8 lshift
         tinyBasic.s:2733   .text.basic:00000000000005bc muldiv
         tinyBasic.s:2438   .text.basic:0000000000000264 next
         tinyBasic.s:2741   .text.basic:00000000000005c0 new
         tinyBasic.s:2750   .text.basic:00000000000005e0 func_not
         tinyBasic.s:2758   .text.basic:00000000000005f8 const_odr
         tinyBasic.s:2761   .text.basic:00000000000005fc bit_or
         tinyBasic.s:2764   .text.basic:0000000000000600 pad_ref
         tinyBasic.s:2772   .text.basic:0000000000000604 pause
         tinyBasic.s:2783   .text.basic:0000000000000620 pin_mode
         tinyBasic.s:2786   .text.basic:0000000000000624 peek
         tinyBasic.s:2789   .text.basic:0000000000000628 const_input
         tinyBasic.s:2792   .text.basic:000000000000062c poke
         tinyBasic.s:2795   .text.basic:0000000000000630 const_output
ARM GAS  tinyBasic.s 			page 92


         tinyBasic.s:2802   .text.basic:0000000000000634 print
         tinyBasic.s:2844   .text.basic:00000000000006dc const_porta
         tinyBasic.s:2847   .text.basic:00000000000006e0 const_portb
         tinyBasic.s:2850   .text.basic:00000000000006e4 const_portc
         tinyBasic.s:2853   .text.basic:00000000000006e8 const_portd
         tinyBasic.s:2856   .text.basic:00000000000006ec const_porte
         tinyBasic.s:2859   .text.basic:00000000000006f0 const_portf
         tinyBasic.s:2862   .text.basic:00000000000006f4 const_portg
         tinyBasic.s:2865   .text.basic:00000000000006f8 const_porth
         tinyBasic.s:2868   .text.basic:00000000000006fc const_porti
         tinyBasic.s:2871   .text.basic:0000000000000700 qkey
         tinyBasic.s:2281   .text.basic:0000000000000128 read
         tinyBasic.s:2323   .text.basic:0000000000000188 restore
         tinyBasic.s:2492   .text.basic:00000000000002e8 return
         tinyBasic.s:2874   .text.basic:0000000000000704 random
         tinyBasic.s:2877   .text.basic:0000000000000708 rshift
         tinyBasic.s:2884   .text.basic:000000000000070c run
         tinyBasic.s:2904   .text.basic:0000000000000744 save
         tinyBasic.s:2907   .text.basic:0000000000000748 show
         tinyBasic.s:2910   .text.basic:000000000000074c size
         tinyBasic.s:2913   .text.basic:0000000000000750 sleep
         tinyBasic.s:2916   .text.basic:0000000000000754 spi_read
         tinyBasic.s:2919   .text.basic:0000000000000758 spi_enable
         tinyBasic.s:2922   .text.basic:000000000000075c spi_select
         tinyBasic.s:2925   .text.basic:0000000000000760 spi_write
         tinyBasic.s:2423   .text.basic:0000000000000248 step
         tinyBasic.s:2928   .text.basic:0000000000000764 stop
         tinyBasic.s:2935   .text.basic:0000000000000768 get_ticks
         tinyBasic.s:2944   .text.basic:0000000000000770 set_timer
         tinyBasic.s:2956   .text.basic:0000000000000784 timeout
         tinyBasic.s:2409   .text.basic:000000000000022c to
         tinyBasic.s:2964   .text.basic:0000000000000798 tone
         tinyBasic.s:2974   .text.basic:000000000000079c ubound
         tinyBasic.s:2982   .text.basic:00000000000007b0 uflash
         tinyBasic.s:2985   .text.basic:00000000000007b4 until
         tinyBasic.s:2988   .text.basic:00000000000007b8 usr
         tinyBasic.s:2991   .text.basic:00000000000007bc wait
         tinyBasic.s:3000   .text.basic:00000000000007c0 words
         tinyBasic.s:3023   .text.basic:0000000000000828 write
         tinyBasic.s:3026   .text.basic:000000000000082c bit_xor
         tinyBasic.s:3029   .text.basic:0000000000000830 transmit
         tinyBasic.s:3032   .text.basic:0000000000000834 receive
         tinyBasic.s:2120   .text.basic:0000000000000000 $t
         tinyBasic.s:2300   .text.basic:0000000000000160 seek_next
         tinyBasic.s:2345   .text.basic:00000000000001be no_data_line
         tinyBasic.s:2341   .text.basic:00000000000001b8 try_next_line
         tinyBasic.s:2625   .text.basic:0000000000000418 print_basic_line
         tinyBasic.s:2635   .text.basic:000000000000043e token_loop
         tinyBasic.s:2714   .text.basic:0000000000000579 single_char
         tinyBasic.s:2710   .text.basic:0000000000000570 ge_str
         tinyBasic.s:2711   .text.basic:0000000000000573 le_str
         tinyBasic.s:2712   .text.basic:0000000000000576 ne_str
         tinyBasic.s:2710   .text.basic:0000000000000570 $d
         tinyBasic.s:2724   .text.basic:00000000000005b0 $t
         tinyBasic.s:2837   .text.basic:00000000000006c4 print_exit
         tinyBasic.s:3042   .text.basic:0000000000000c00 $d
         tinyBasic.s:1935   .text:0000000000000ea2 $d
ARM GAS  tinyBasic.s 			page 93


         tinyBasic.s:3042   .text:0000000000000ea4 $d
         tinyBasic.s:600    .text:0000000000000455 $d
         tinyBasic.s:600    .text:0000000000000456 $t
         tinyBasic.s:1299   .text:0000000000000981 $d
         tinyBasic.s:1299   .text:0000000000000982 $t
         tinyBasic.s:1393   .text:0000000000000a23 $d
         tinyBasic.s:1393   .text:0000000000000a24 $t
         tinyBasic.s:1867   .text:0000000000000e59 $d
         tinyBasic.s:1867   .text:0000000000000e5a $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
