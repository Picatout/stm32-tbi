ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	
  19              	.syntax unified
  20              	  .cpu cortex-m3
  21              	  .fpu softvfp
  22              	  .thumb
  23              	
  24              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
ARM GAS  tinyBasic.s 			page 2


  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
ARM GAS  tinyBasic.s 			page 3


  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  25              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  tinyBasic.s 			page 4


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
ARM GAS  tinyBasic.s 			page 5


  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  26              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	// keyword types 
  30              	  .equ F_CMD,0x20     // command keyword
ARM GAS  tinyBasic.s 			page 6


  31              	  .equ F_IFUNC,0x40 // integer function keyword
  32              	  .equ F_CFUNC,0x80 // character function keyword
  33              	  .equ F_CONST,0xC0 // function keyword that return a constant
  34              	
  35              	//--------------------------------------
  36              	//   constantes related to Arduino 
  37              	//   API mapping 
  38              	//-------------------------------------
  39              	  .equ INP,0
  40              	  .equ OUTP,1 
  41              	
  42              	//--------------------------------------
  43              	//       token attribute
  44              	//--------------------------------------
  45              	// bits 4:5 identify token group 
  46              	// 0x0n -> miscelinous 
  47              	// 0x1n -> +|- operators 
  48              	// 0x2n -> *|/|% operators
  49              	// 0x3n -> relational operators 
  50              	  .equ TK_CMD,128      // BASIC command   
  51              	  .equ TK_IFUNC,129    // BASIC integer function
  52              	  .equ TK_CFUNC,130    // BASIC character function
  53              	  .equ TK_CONST,131    // BASIC constant 
  54              	  .equ TK_INTGR,132
  55              	  .equ TK_VAR,133
  56              	  .equ TK_NONE,0       // not a token 
  57              	  .equ TK_COLON,1      // command separator ':' 
  58              	  .equ TK_QSTR,2     // quoted string  
  59              	  .equ TK_CHAR,3       // ASCII character 
  60              	  .equ TK_ARRAY,6     // array variable '@' 
  61              	  .equ TK_LPAREN,7     // left parenthesis '('
  62              	  .equ TK_RPAREN,8     // right parenthesis ')'
  63              	  .equ TK_COMMA,9     // item separator ',' 
  64              	  .equ TK_SHARP,0xa     // print colon width '#' 
  65              	  .equ TK_PLUS,0x10    // addition operator '+'
  66              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  67              	  .equ TK_MULT,0x20    // multiplication operator '*'
  68              	  .equ TK_DIV,0x21     // division operator '/'
  69              	  .equ TK_MOD,0x22     // modulo operator '%'
  70              	
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  79              	  .equ TK_GE,0x33      // relation operator '>,'
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<,'
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
ARM GAS  tinyBasic.s 			page 7


  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	
 111              	//--------------------------------------
 112              	//   assembler flags 
 113              	//-------------------------------------
 114              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 115              	
 116              	.equ CELL_SIZE,4 
 117              	
 118              	
 119              	//-------------------------------
 120              	//  macros used to help debugging
 121              	//-------------------------------
 122              	  .equ DEBUG,0
 123              	
 124              	/***************************
 125              	  SYSTEM variables offset 
 126              	  from UPP  
 127              	***************************/ 
 128              	  .equ IN,0    // low byte of in.w 
 129              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
 130              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 131              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 132              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 133              	  .equ DATA,DATAPTR+4 // index to next data item 
 134              	  .equ DATALEN, DATA+4 // length of data line 
 135              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 136              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 137              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 138              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 139              	  .equ FSPTR,SEED+4 //  pointer used by file system
 140              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 141              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 142              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 143              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 144              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
ARM GAS  tinyBasic.s 			page 8


 145              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 146              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 147              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 148              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 149              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 150              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 151              	  .equ CELLL,4 // size of integer 
 152              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 153              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 154              	
 155              	/***********************************************
 156              	*       MACROS
 157              	***********************************************/
 158              		.macro _CALL fn /* low level routine call */ 
 159              	 	PUSH {LR}
 160              		BL \fn  
 161              	  POP {LR}
 162              		.endm
 163              		
 164              		.macro	_RET /* return from subroutine */
 165              		BX	LR
 166              		.endm
 167              	
 168              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 169              		MOV \REG, #\LITERAL&0xffff
 170              		MOVT \REG, #\LITERAL>>16
 171              		.endm
 172              	
 173              	 	.macro	_DOLIT  value /*long literals */
 174              		BL	DOLIT
 175              		.word \value 
 176              		.endm
 177              	
 178              	// function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	------------------------------
 195              	 format:
 196              	   link:    
 197              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 198              	   cmd_name: 31 characters max 
 199              	   cmd_index: 2 bytes 
 200              	**********************************/
 201              		.macro _dict_entry len,name,cmd_idx 
ARM GAS  tinyBasic.s 			page 9


 202              		.p2align 2 
 203              	  .word LINK 
 204              	  .word \cmd_idx 
 205              		.equ LINK,.
 206              		.byte \len 	
 207              		.ascii "\name"
 208              		.p2align 2 
 209              		.endm 
 210              	
  27              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
ARM GAS  tinyBasic.s 			page 10


  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
ARM GAS  tinyBasic.s 			page 11


 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  28              	
  29              	    .section  .text , "ax", %progbits 
  30              	
  31              	/* flags used by BASIC interpreter */ 
  32              		.equ FRUN,0 // flags run code in variable flags
  33              		.equ FTRAP,1 // inside trap handler 
  34              		.equ FLOOP,2 // FOR loop in preparation 
  35              		.equ FSLEEP,3 // halt produit par la commande SLEEP 
  36              		.equ FBREAK,4 // break point flag 
  37              		.equ FCOMP,5  // compiling flags 
  38              	
  39              		.equ FAUTORUN,6// auto start program running 
  40              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
  41              	  
  42              	    .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
  43              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
  44              	
  45              	
  46              	
  47              	
  48              	
  49              	/**********************************
  50              	   strlen 
  51              	   return length of asciz 
  52              	   input:
  53              	      r0    *asciz 
  54              	   output:
  55              	      r0   length 
  56              	   use:
  57              	      r8   counter 
  58              	      r1   temp 
  59              	*********************************/
  60              	    _GBL_FUNC strlen 
  61 0000 2DE90201 	    push {r1,r8}
  62 0004 88EA0808 	    eor r8,r8 
ARM GAS  tinyBasic.s 			page 12


  63 0008 10F8011B 	1:  ldrb r1,[r0],#1 
  64 000c 11B1     	    cbz r1,9f  
  65 000e 08F10108 	    add r8,#1 
  66 0012 F9E7     	    b 1b 
  67 0014 4046     	9:  mov r0,r8 
  68 0016 BDE80201 	    pop {r1,r8}
  69 001a 7047     	    _RET     
  70              	
  71              	
  72              	/******************************
  73              	   cmove 
  74              	   move n characters 
  75              	   input:
  76              	    r0      src 
  77              	    r1      dest 
  78              	    r8      count 
  79              	  output:
  80              	    none:
  81              	  use: 
  82              	    r6     temp   
  83              	******************************/
  84              	    _GBL_FUNC cmove
  85 001c 40B4     	    push {r6} 
  86 001e 18EA0808 	1:  ands r8,r8
  87 0022 12D0     	    beq 9f 
  88 0024 8842     	    cmp r0,r1 
  89 0026 07D4     	    bmi move_from_end 
  90              	move_from_low: // move from low address toward high 
  91 0028 10F8016B 	    ldrb r6,[r0],#1
  92 002c 01F8016B 	    strb r6,[r1],#1
  93 0030 B8F10108 	    subs r8,#1
  94 0034 F8D1     	    bne move_from_low
  95 0036 08E0     	    b 9f 
  96              	move_from_end: // move from high address toward low 
  97 0038 4044     	    add r0,r0,r8 
  98 003a 4144     	    add r1,r1,r8     
  99 003c 10F8016D 	3:  ldrb r6,[r0,#-1]!
 100 0040 01F8016D 	    strb r6,[r1,#-1]!
 101 0044 B8F10108 	    subs r8,#1
 102 0048 F8D1     	    bne 3b 
 103 004a 40BC     	9:  pop {r6}
 104 004c 7047     	    _RET
 105              	
 106              	
 107              	/*********************************
 108              	  cp_cstr 
 109              	  compare 2 counted strings 
 110              	  input:
 111              	    r0  *str1 
 112              	    r1  *str2
 113              	    r8  length 
 114              	  output:
 115              	    r0  <0 str1<str2 
 116              	        0  str1==str2 
 117              	        >0  str1>str2  
 118              	  use:
 119              	    r9  *str1
ARM GAS  tinyBasic.s 			page 13


 120              	    r10 temp
 121              	    r11 temp    
 122              	*********************************/
 123 004e 00BF     	  _FUNC cp_cstr
 124 0050 2DE9000E 	  push {r9,r10,r11}
 125 0054 8146     	  mov r9, r0 
 126 0056 19F801AB 	  ldrb r10,[r9],#1 // length 
 127 005a B8EB0A00 	  subs r0,r8,r10 
 128 005e 09D1     	  bne 2f 
 129              	1:
 130 0060 19F801AB 	  ldrb r10,[r9],#1
 131 0064 11F801BB 	  ldrb r11,[r1],#1 
 132 0068 BAEB0B00 	  subs r0,r10,r11  
 133 006c 02D1     	  bne 2f // not same length       
 134 006e B8F10108 	  subs r8,#1 
 135 0072 F5D1     	  bne 1b 
 136              	2: 
 137 0074 BDE8000E 	  pop {r9,r10,r11}
 138 0078 7047     	  _RET 
 139              	
 140              	//---------------------------------
 141              	// dictionary search 
 142              	// input:
 143              	//	 r0   target name
 144              	//   r1		dictionary first link address  
 145              	// output:
 146              	//  r0 		TK_CMD|TK_IFUNC|TK_CONST|TK_NONE 
 147              	//  r1		cmd_index if r0!=TK_NONE  
 148              	// use:
 149              	//  r8   length dictionary name 
 150              	//---------------------------------
 151 007a 00BF     	  _FUNC search_dict
 152 007c 4DF8048D 	  push {r8}
 153 0080 03B4     	  push {r0,r1}
 154              	1:
 155 0082 11F8010B 	  ldrb r0,[r1],#1 
 156 0086 0043     	  orrs r0,r0
 157 0088 13D0     	  beq 9f // end of dictinary 
 158 008a 00F01F08 	  and r8,r0,#0x1f 
 159 008e 0098     	  ldr r0,[sp]  
 160 0090 00B5FFF7 	  _CALL cp_cstr 
 160      DDFF5DF8 
 160      04EB
 161 009a 04D0     	  beq 2f 
 162 009c 0199     	  ldr r1,[sp,#4]
 163 009e 51F8081C 	  ldr r1,[r1,#-8]
 164 00a2 0191     	  str r1,[sp,#4]
 165 00a4 EDE7     	  b 1b   
 166              	2: // found
 167 00a6 0199     	  ldr r1,[sp,#4]
 168 00a8 0878     	  ldrb r0,[r1]
 169 00aa 4FEA5010 	  lsr r0,#5    // token type 
 170 00ae 51F8041C 	  ldr r1,[r1,#-4]  // command index 
 171 00b2 02B0     	9: add sp,#8  // drop pushed r0,r1
 172 00b4 5DF8048B 	   pop {r8}
 173 00b8 7047     	   _RET 
 174              	
ARM GAS  tinyBasic.s 			page 14


 175              	/*********************************
 176              	   cold_init 
 177              	   initialize BASIC interpreter 
 178              	   input:
 179              	     r1    destination address 
 180              	   output:
 181              	    none 
 182              	   use:
 183              	     r0,r1,r8 
 184              	*********************************/
 185 00ba 00BF     	    _GBL_FUNC cold_init
 186 00bc 2DE90301 	    push {r0,r1,r8}
 187              	//copy system variables to ram 
 188 00c0 0848     	    ldr r0,src_addr 
 189 00c2 0B46     	    mov r3,r1 // UPP  
 190 00c4 A0EB0108 	    sub r8,r0,r1 
 191 00c8 4DF8048D 	    push {r8} // map offset 
 192 00cc 4FF0D008 	    mov r8,#ulast-uzero
 193 00d0 00B5FFF7 	    _CALL cmove  
 193      FEFF5DF8 
 193      04EB
 194 00da 5DF8048B 	    pop {r8}
 195 00de BDE80301 	    pop {r0,r1,r8}
 196 00e2 7047     	    _RET 
 197              	src_addr:
 198 00e4 00000000 	  .word uzero
 199              	
 200              	
 201              	  .section .rodata 
 202              	
 203              	// system variables initial value 
 204              	uzero:
 205 0000 00000000 	  .word 0 // IN
 206 0004 00000000 	  .word 0 // IN_SAVED
 207 0008 00000000 	  .word 0 // COUNT
 208 000c 00000000 	  .word 0 // BASICPTR
 209 0010 00000000 	  .word 0 // DATAPTR
 210 0014 00000000 	  .word 0 // DATA
 211 0018 00000000 	  .word 0 // DATALEN
 212 001c 0A000000 	  .word 10 // BASE
 213 0020 00000000 	  .word 0 // TICKS
 214 0024 00000000 	  .word 0 // TIMER
 215 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 216 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 217 0030 00000000 	  .word 0 // FFREE
 218 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 219 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 220 003c 00000000 	  .word 0 //LOOP_DEPTH
 221 0040 00000000 	  .word 0 // ARRAY_SIZE
 222 0044 00000000 	  .word 0 // FLAGS
 223 0048 04000000 	  .word 4 // TAB_WIDTH
 224 004c 00000000 	  .word 0 // RX_HEAD
 225 0050 00000000 	  .word 0 // RX_TAIL
 226 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 226      00000000 
 226      00000000 
 226      00000000 
ARM GAS  tinyBasic.s 			page 15


 227 0064 00000000 	  .space VARS_SIZE,0 // VARS
 227      00000000 
 227      00000000 
 227      00000000 
 227      00000000 
 228 00cc 00000000 	  .space 4, 0 // padding 
 229              	ulast:
 230              	
 231              	  .section .rodata.dictionary 
 232              	
 233              	// keep alphabetic order for BASIC names from Z-A
 234              	// this sort order is for for WORDS cmd output. 	
 235              	
 236              		.equ link, 0
 237              	kword_end:
 238 0000 00000000 	  .word link,0
 238      00000000 
 239              	  .equ LINK, .
 240 0008 00000000 	  .word 0
 241              	  .p2align 2  
 242 000c 08000000 	  _dict_entry 5+F_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 242      64000000 
 242      25585452 
 242      4D540000 
 243 001c 14000000 	  _dict_entry 4+F_CMD,XRCV,XRCV_IDX // xmodem receive
 243      65000000 
 243      24585243 
 243      56000000 
 244 002c 24000000 	  _dict_entry 3+F_IFUNC,XOR,XOR_IDX //bit_xor
 244      63000000 
 244      43584F52 
 245 0038 34000000 	  _dict_entry 5+F_CMD,WRITE,WRITE_IDX //write  
 245      62000000 
 245      25575249 
 245      54450000 
 246 0048 40000000 	  _dict_entry 5+F_CMD,WORDS,WORDS_IDX //words 
 246      61000000 
 246      25574F52 
 246      44530000 
 247 0058 50000000 	  _dict_entry 4+F_CMD,WAIT,WAIT_IDX //wait 
 247      60000000 
 247      24574149 
 247      54000000 
 248 0068 60000000 	  _dict_entry 3+F_IFUNC,USR,USR_IDX //usr
 248      5F000000 
 248      43555352 
 249 0074 70000000 	  _dict_entry 5+F_CMD,UNTIL,UNTIL_IDX //until 
 249      5E000000 
 249      25554E54 
 249      494C0000 
 250 0084 7C000000 	  _dict_entry 6+F_IFUNC,UFLASH,UFLASH_IDX //uflash 
 250      5D000000 
 250      4655464C 
 250      41534800 
 251 0094 8C000000 	  _dict_entry 6+F_IFUNC,UBOUND,UBOUND_IDX //ubound
 251      5C000000 
 251      4655424F 
ARM GAS  tinyBasic.s 			page 16


 251      554E4400 
 252 00a4 9C000000 	  _dict_entry 4+F_CMD,TONE,TONE_IDX //tone  
 252      5B000000 
 252      24544F4E 
 252      45000000 
 253 00b4 AC000000 	  _dict_entry 2+F_CMD,TO,TO_IDX //to
 253      5A000000 
 253      22544F00 
 254 00c0 BC000000 	  _dict_entry 5+F_CMD,TIMER,TIMER_IDX //set_timer
 254      58000000 
 254      2554494D 
 254      45520000 
 255 00d0 C8000000 	  _dict_entry 7+F_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 255      59000000 
 255      4754494D 
 255      454F5554 
 256 00e0 D8000000 	  _dict_entry 5+F_IFUNC,TICKS,TICKS_IDX //get_ticks
 256      57000000 
 256      45544943 
 256      4B530000 
 257 00f0 E8000000 	  _dict_entry 4+F_CMD,STOP,STOP_IDX //stop 
 257      56000000 
 257      2453544F 
 257      50000000 
 258 0100 F8000000 	  _dict_entry 4+F_CMD,STEP,STEP_IDX //step 
 258      55000000 
 258      24535445 
 258      50000000 
 259 0110 08010000 	  _dict_entry 5+F_CMD,SPIWR,SPIWR_IDX //spi_write
 259      54000000 
 259      25535049 
 259      57520000 
 260 0120 18010000 	  _dict_entry 6+F_CMD,SPISEL,SPISEL_IDX //spi_select
 260      53000000 
 260      26535049 
 260      53454C00 
 261 0130 28010000 	  _dict_entry 5+F_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 261      51000000 
 261      45535049 
 261      52440000 
 262 0140 38010000 	  _dict_entry 5+F_CMD,SPIEN,SPIEN_IDX //spi_enable 
 262      52000000 
 262      25535049 
 262      454E0000 
 263 0150 48010000 	  _dict_entry 5+F_CMD,SLEEP,SLEEP_IDX //sleep 
 263      50000000 
 263      25534C45 
 263      45500000 
 264 0160 58010000 	  _dict_entry 4+F_IFUNC,SIZE,SIZE_IDX //size
 264      4F000000 
 264      4453495A 
 264      45000000 
 265 0170 68010000 	  _dict_entry 4+F_CMD,SHOW,SHOW_IDX //show 
 265      4E000000 
 265      2453484F 
 265      57000000 
 266 0180 78010000 	  _dict_entry 4+F_CMD,SAVE,SAVE_IDX //save
ARM GAS  tinyBasic.s 			page 17


 266      4D000000 
 266      24534156 
 266      45000000 
 267 0190 88010000 	  _dict_entry 3+F_CMD,RUN,RUN_IDX //run
 267      4C000000 
 267      2352554E 
 268 019c 98010000 	  _dict_entry 6+F_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 268      4B000000 
 268      46525348 
 268      49465400 
 269 01ac A4010000 	  _dict_entry 3+F_IFUNC,RND,RND_IDX //random 
 269      4A000000 
 269      43524E44 
 270 01b8 B4010000 	  _dict_entry 6+F_CMD,RETURN,RET_IDX //return 
 270      49000000 
 270      26524554 
 270      55524E00 
 271 01c8 C0010000 	  _dict_entry 7+F_CMD,RESTORE,REST_IDX //restore 
 271      48000000 
 271      27524553 
 271      544F5245 
 272 01d8 D0010000 	  _dict_entry 6+F_CMD,REMARK,REM_IDX //remark 
 272      47000000 
 272      2652454D 
 272      41524B00 
 273 01e8 E0010000 	  _dict_entry 6+F_CMD,REBOOT,RBT_IDX //cold_start
 273      46000000 
 273      26524542 
 273      4F4F5400 
 274 01f8 F0010000 	  _dict_entry 4+F_IFUNC,READ,READ_IDX //read  
 274      45000000 
 274      44524541 
 274      44000000 
 275 0208 00020000 	  _dict_entry 4+F_IFUNC,QKEY,QKEY_IDX //qkey  
 275      44000000 
 275      44514B45 
 275      59000000 
 276 0218 10020000 	  _dict_entry 4+F_IFUNC,PRTI,PRTI_IDX //const_porti 
 276      43000000 
 276      44505254 
 276      49000000 
 277 0228 20020000 	  _dict_entry 4+F_IFUNC,PRTH,PRTH_IDX //const_porth 
 277      42000000 
 277      44505254 
 277      48000000 
 278 0238 30020000 	  _dict_entry 4+F_IFUNC,PRTG,PRTG_IDX //const_portg 
 278      41000000 
 278      44505254 
 278      47000000 
 279 0248 40020000 	  _dict_entry 4+F_IFUNC,PRTF,PRTF_IDX //const_portf
 279      40000000 
 279      44505254 
 279      46000000 
 280 0258 50020000 	  _dict_entry 4+F_IFUNC,PRTE,PRTE_IDX //const_porte
 280      3F000000 
 280      44505254 
 280      45000000 
ARM GAS  tinyBasic.s 			page 18


 281 0268 60020000 	  _dict_entry 4+F_IFUNC,PRTD,PRTD_IDX //const_portd
 281      3E000000 
 281      44505254 
 281      44000000 
 282 0278 70020000 	  _dict_entry 4+F_IFUNC,PRTC,PRTC_IDX //const_portc
 282      3D000000 
 282      44505254 
 282      43000000 
 283 0288 80020000 	  _dict_entry 4+F_IFUNC,PRTB,PRTB_IDX //const_portb
 283      3C000000 
 283      44505254 
 283      42000000 
 284 0298 90020000 	  _dict_entry 4+F_IFUNC,PRTA,PRTA_IDX //const_porta 
 284      3B000000 
 284      44505254 
 284      41000000 
 285 02a8 A0020000 	  _dict_entry 5+F_CMD,PRINT,PRT_IDX //print 
 285      3A000000 
 285      25505249 
 285      4E540000 
 286 02b8 B0020000 	  _dict_entry 4+F_IFUNC,POUT,POUT_IDX //const_output
 286      39000000 
 286      44504F55 
 286      54000000 
 287 02c8 C0020000 	  _dict_entry 4+F_CMD,POKE,POKE_IDX //poke 
 287      38000000 
 287      24504F4B 
 287      45000000 
 288 02d8 D0020000 	  _dict_entry 5+F_CMD,PMODE,PMODE_IDX //pin_mode 
 288      35000000 
 288      25504D4F 
 288      44450000 
 289 02e8 E0020000 	  _dict_entry 4+F_IFUNC,PINP,PINP_IDX //const_input
 289      37000000 
 289      4450494E 
 289      50000000 
 290 02f8 F0020000 	  _dict_entry 4+F_IFUNC,PEEK,PEEK_IDX //peek 
 290      36000000 
 290      44504545 
 290      4B000000 
 291 0308 00030000 	  _dict_entry 5+F_CMD,PAUSE,PAUSE_IDX //pause 
 291      34000000 
 291      25504155 
 291      53450000 
 292 0318 10030000 	  _dict_entry 3+F_IFUNC,PAD,PAD_IDX //pad_ref 
 292      33000000 
 292      43504144 
 293 0324 20030000 	  _dict_entry 2+F_IFUNC,OR,OR_IDX //bit_or
 293      32000000 
 293      424F5200 
 294 0330 2C030000 	  _dict_entry 3+F_IFUNC,ODR,ODR_IDX //const_odr 
 294      31000000 
 294      434F4452 
 295 033c 38030000 	  _dict_entry 3+F_IFUNC,NOT,NOT_IDX //func_not 
 295      30000000 
 295      434E4F54 
 296 0348 44030000 	  _dict_entry 4+F_CMD,NEXT,NEXT_IDX //next 
ARM GAS  tinyBasic.s 			page 19


 296      2E000000 
 296      244E4558 
 296      54000000 
 297 0358 50030000 	  _dict_entry 3+F_CMD,NEW,NEW_IDX //new
 297      2F000000 
 297      234E4557 
 298 0364 60030000 	  _dict_entry 6+F_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 298      2D000000 
 298      464D554C 
 298      44495600 
 299 0374 6C030000 	  _dict_entry 6+F_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 299      2C000000 
 299      464C5348 
 299      49465400 
 300 0384 7C030000 	  _dict_entry 3+F_IFUNC,LOG,LOG_IDX //log2 
 300      2B000000 
 300      434C4F47 
 301 0390 8C030000 	  _dict_entry 4+F_CMD,LOAD,LOAD_IDX //load 
 301      2A000000 
 301      244C4F41 
 301      44000000 
 302 03a0 98030000 	  _dict_entry 4+F_CMD,LIST,LIST_IDX //list
 302      29000000 
 302      244C4953 
 302      54000000 
 303 03b0 A8030000 	  _dict_entry 3+F_CMD,LET,LET_IDX //let 
 303      28000000 
 303      234C4554 
 304 03bc B8030000 	  _dict_entry 3+F_IFUNC,KEY,KEY_IDX //key 
 304      27000000 
 304      434B4559 
 305 03c8 C4030000 	  _dict_entry 7+F_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 305      26000000 
 305      27495744 
 305      47524546 
 306 03d8 D0030000 	  _dict_entry 6+F_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 306      25000000 
 306      26495744 
 306      47454E00 
 307 03e8 E0030000 	  _dict_entry 6+F_IFUNC,INVERT,INVERT_IDX //invert 
 307      24000000 
 307      46494E56 
 307      45525400 
 308 03f8 F0030000 	  _dict_entry 5+F_CMD,INPUT,INPUT_IDX //input_var  
 308      23000000 
 308      25494E50 
 308      55540000 
 309 0408 00040000 	  _dict_entry 2+F_CMD,IF,IF_IDX //if 
 309      22000000 
 309      22494600 
 310 0414 10040000 	  _dict_entry 3+F_IFUNC,IDR,IDR_IDX //const_idr 
 310      21000000 
 310      43494452 
 311 0420 1C040000 	  _dict_entry 3+F_CMD,HEX,HEX_IDX //hex_base
 311      20000000 
 311      23484558 
 312 042c 28040000 	  _dict_entry 4+F_IFUNC,GPIO,GPIO_IDX //gpio 
ARM GAS  tinyBasic.s 			page 20


 312      1F000000 
 312      44475049 
 312      4F000000 
 313 043c 34040000 	  _dict_entry 4+F_CMD,GOTO,GOTO_IDX //goto 
 313      1E000000 
 313      24474F54 
 313      4F000000 
 314 044c 44040000 	  _dict_entry 5+F_CMD,GOSUB,GOSUB_IDX //gosub 
 314      1D000000 
 314      25474F53 
 314      55420000 
 315 045c 54040000 	  _dict_entry 6+F_CMD,FORGET,FORGET_IDX //forget 
 315      1C000000 
 315      26464F52 
 315      47455400 
 316 046c 64040000 	  _dict_entry 3+F_CMD,FOR,FOR_IDX //for 
 316      1B000000 
 316      23464F52 
 317 0478 74040000 	  _dict_entry 4+F_CMD,FCPU,FCPU_IDX //fcpu 
 317      1A000000 
 317      24464350 
 317      55000000 
 318 0488 80040000 	  _dict_entry 3+F_CMD,END,END_IDX //cmd_end  
 318      18000000 
 318      23454E44 
 319 0494 90040000 	  _dict_entry 6+F_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 319      19000000 
 319      46454550 
 319      524F4D00 
 320 04a4 9C040000 	  _dict_entry 6+F_CMD,DWRITE,DWRITE_IDX //digital_write
 320      17000000 
 320      26445752 
 320      49544500 
 321 04b4 AC040000 	  _dict_entry 5+F_IFUNC,DREAD,DREAD_IDX //digital_read
 321      16000000 
 321      45445245 
 321      41440000 
 322 04c4 BC040000 	  _dict_entry 2+F_CMD,DO,DO_IDX //do_loop
 322      15000000 
 322      22444F00 
 323 04d0 CC040000 	  _dict_entry 3+F_CMD,DIR,DIR_IDX //directory 
 323      14000000 
 323      23444952 
 324 04dc D8040000 	  _dict_entry 3+F_CMD,DEC,DEC_IDX //dec_base
 324      13000000 
 324      23444543 
 325 04e8 E4040000 	  _dict_entry 3+F_IFUNC,DDR,DDR_IDX //const_ddr 
 325      12000000 
 325      43444452 
 326 04f4 F0040000 	  _dict_entry 6+F_CMD,DATALN,DATALN_IDX //data_line  
 326      11000000 
 326      26444154 
 326      414C4E00 
 327 0504 FC040000 	  _dict_entry 4+F_CMD,DATA,DATA_IDX //data  
 327      10000000 
 327      24444154 
 327      41000000 
ARM GAS  tinyBasic.s 			page 21


 328 0514 0C050000 	  _dict_entry 3+F_IFUNC,CRL,CRL_IDX //const_cr1 
 328      0F000000 
 328      4343524C 
 329 0520 1C050000 	  _dict_entry 3+F_IFUNC,CRH,CRH_IDX //const_cr2 
 329      0E000000 
 329      43435248 
 330 052c 28050000 	  _dict_entry 4+F_CFUNC,CHAR,CHAR_IDX //char
 330      0D000000 
 330      84434841 
 330      52000000 
 331 053c 34050000 	  _dict_entry 3+F_CMD,BYE,BYE_IDX //bye 
 331      0C000000 
 331      23425945 
 332 0548 44050000 	  _dict_entry 5+F_CMD,BTOGL,BTOGL_IDX //bit_toggle
 332      0B000000 
 332      2542544F 
 332      474C0000 
 333 0558 50050000 	  _dict_entry 5+F_IFUNC,BTEST,BTEST_IDX //bit_test 
 333      0A000000 
 333      45425445 
 333      53540000 
 334 0568 60050000 	  _dict_entry 4+F_CMD,BSET,BSET_IDX //bit_set 
 334      09000000 
 334      24425345 
 334      54000000 
 335 0578 70050000 	  _dict_entry 4+F_CMD,BRES,BRES_IDX //bit_reset
 335      08000000 
 335      24425245 
 335      53000000 
 336 0588 80050000 	  _dict_entry 3+F_IFUNC,BIT,BIT_IDX //bitmask
 336      07000000 
 336      43424954 
 337 0594 90050000 	  _dict_entry 3+F_CMD,AWU,AWU_IDX //awu 
 337      06000000 
 337      23415755 
 338 05a0 9C050000 	  _dict_entry 7+F_CMD,AUTORUN,AUTORUN_IDX //autorun
 338      05000000 
 338      27415554 
 338      4F52554E 
 339 05b0 A8050000 	  _dict_entry 3+F_IFUNC,ASC,ASC_IDX //ascii
 339      04000000 
 339      43415343 
 340 05bc B8050000 	  _dict_entry 3+F_IFUNC,AND,AND_IDX //bit_and
 340      03000000 
 340      43414E44 
 341 05c8 C4050000 	  _dict_entry 7+F_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 341      02000000 
 341      47414443 
 341      52454144 
 342 05d8 D0050000 	  _dict_entry 5+F_CMD,ADCON,ADCON_IDX //power_adc 
 342      01000000 
 342      25414443 
 342      4F4E0000 
 343              	first_link: 
 344 05e8 E0050000 	  .word LINK 
 345 05ec 00000000 	  .word ABS_IDX 
 346              	  .equ LINK,. 
ARM GAS  tinyBasic.s 			page 22


 347              	kword_dict: // first name field 
 348 05f0 43       	  .byte 3+F_IFUNC
 349 05f1 414253   	  .ascii "ABS" 
 350              	  .p2align 2 
 351              	
 352              	//comands and fonctions address table 	
 353              	code_addr:
 354              	/*
 355              		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 356              		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 357              		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 358              		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 359              		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 360              		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 361              		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 362              		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 363              		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 364              		.word restore,return, random,rshift,run,save,show,size // 72..79
 365              		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 366              		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 367              		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 368              	*/ 
 369 05f4 00000000 		.word 0 
 370              	
 371              	/*************************************************
 372              	   extra FLASH memory not used by Tiny BASIC
 373              	   is used to save BASIC programs.
 374              	************************************************/
 375 05f8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 375      00000000 
 375      00000000 
 375      00000000 
 375      00000000 
 376              	  .section .fs
 377              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 23


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 24


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 25


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 26


      tbi_macros.inc:27     *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:30     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:31     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:32     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:33     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:39     *ABS*:0000000000000000 INP
      tbi_macros.inc:40     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:50     *ABS*:0000000000000080 TK_CMD
      tbi_macros.inc:51     *ABS*:0000000000000081 TK_IFUNC
      tbi_macros.inc:52     *ABS*:0000000000000082 TK_CFUNC
      tbi_macros.inc:53     *ABS*:0000000000000083 TK_CONST
      tbi_macros.inc:54     *ABS*:0000000000000084 TK_INTGR
      tbi_macros.inc:55     *ABS*:0000000000000085 TK_VAR
      tbi_macros.inc:56     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:57     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:58     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:59     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:60     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:61     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:62     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:63     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:64     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:65     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:66     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:67     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:68     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:69     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:114    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:116    *ABS*:0000000000000004 CELL_SIZE
ARM GAS  tinyBasic.s 			page 27


      tbi_macros.inc:122    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:128    *ABS*:0000000000000000 IN
      tbi_macros.inc:129    *ABS*:0000000000000004 IN_SAVED
      tbi_macros.inc:130    *ABS*:0000000000000008 COUNT
      tbi_macros.inc:131    *ABS*:000000000000000c BASICPTR
      tbi_macros.inc:132    *ABS*:0000000000000010 DATAPTR
      tbi_macros.inc:133    *ABS*:0000000000000014 DATA
      tbi_macros.inc:134    *ABS*:0000000000000018 DATALEN
      tbi_macros.inc:135    *ABS*:000000000000001c BASE
      tbi_macros.inc:136    *ABS*:0000000000000020 TICKS
      tbi_macros.inc:137    *ABS*:0000000000000024 TIMER
      tbi_macros.inc:138    *ABS*:0000000000000028 SEED
      tbi_macros.inc:139    *ABS*:000000000000002c FSPTR
      tbi_macros.inc:140    *ABS*:0000000000000030 FFREE
      tbi_macros.inc:141    *ABS*:0000000000000034 TXTBGN
      tbi_macros.inc:142    *ABS*:0000000000000038 TXTEND
      tbi_macros.inc:143    *ABS*:000000000000003c LOOP_DEPTH
      tbi_macros.inc:144    *ABS*:0000000000000040 ARRAY_SIZE
      tbi_macros.inc:145    *ABS*:0000000000000044 FLAGS
      tbi_macros.inc:147    *ABS*:000000000000004c RX_HEAD
      tbi_macros.inc:148    *ABS*:0000000000000050 RX_TAIL
      tbi_macros.inc:149    *ABS*:0000000000000054 RX_QUEUE
      tbi_macros.inc:150    *ABS*:0000000000000064 VARS
      tbi_macros.inc:151    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:152    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:153    *ABS*:00000000000000cc FREE_RAM
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
ARM GAS  tinyBasic.s 			page 28


       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
ARM GAS  tinyBasic.s 			page 29


       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:32     *ABS*:0000000000000000 FRUN
         tinyBasic.s:33     *ABS*:0000000000000001 FTRAP
         tinyBasic.s:34     *ABS*:0000000000000002 FLOOP
         tinyBasic.s:35     *ABS*:0000000000000003 FSLEEP
         tinyBasic.s:36     *ABS*:0000000000000004 FBREAK
         tinyBasic.s:37     *ABS*:0000000000000005 FCOMP
         tinyBasic.s:39     *ABS*:0000000000000006 FAUTORUN
         tinyBasic.s:40     *ABS*:0000000008001c00 AUTORUN_NAME
         tinyBasic.s:42     *ABS*:0000000000000006 FIRST_DATA_ITEM
         tinyBasic.s:43     *ABS*:0000000000007fff MAX_LINENO
         tinyBasic.s:60     .text:0000000000000000 strlen
         tinyBasic.s:60     .text:0000000000000000 $t
         tinyBasic.s:84     .text:000000000000001c cmove
         tinyBasic.s:96     .text:0000000000000038 move_from_end
         tinyBasic.s:90     .text:0000000000000028 move_from_low
         tinyBasic.s:123    .text:0000000000000050 cp_cstr
         tinyBasic.s:151    .text:000000000000007c search_dict
         tinyBasic.s:185    .text:00000000000000bc cold_init
         tinyBasic.s:197    .text:00000000000000e4 src_addr
         tinyBasic.s:229    .rodata:00000000000000d0 ulast
         tinyBasic.s:204    .rodata:0000000000000000 uzero
         tinyBasic.s:198    .text:00000000000000e4 $d
         tinyBasic.s:377    .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:226    .rodata:0000000000000054 $d
         tinyBasic.s:236    *ABS*:0000000000000000 link
         tinyBasic.s:237    .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:346    .rodata.dictionary:00000000000005f0 LINK
         tinyBasic.s:241    .rodata.dictionary:000000000000000c $d
         tinyBasic.s:343    .rodata.dictionary:00000000000005e8 first_link
         tinyBasic.s:347    .rodata.dictionary:00000000000005f0 kword_dict
         tinyBasic.s:353    .rodata.dictionary:00000000000005f4 code_addr

NO UNDEFINED SYMBOLS
