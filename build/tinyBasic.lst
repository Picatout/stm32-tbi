ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, 102 
 128              	    .equ THEN_IDX,103
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
ARM GAS  tinyBasic.s 			page 13


  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
ARM GAS  tinyBasic.s 			page 14


 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
ARM GAS  tinyBasic.s 			page 15


 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00C00 	    mov r0,#12
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
ARM GAS  tinyBasic.s 			page 16


 208 0118 03BC     	    pop {r0,r1}
 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _GBL_FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
ARM GAS  tinyBasic.s 			page 17


 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 314 01b0 8846     	    mov T1,R1
 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      FEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
ARM GAS  tinyBasic.s 			page 19


 361              	    in pas buffer.
 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF8E899 	    ldr T2,pad // tokens buffer
 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      00F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e 27E3     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e 1FE3     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      21F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF89039 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
ARM GAS  tinyBasic.s 			page 20


 414 028e 1888     	    ldrh r0,[r3] // line number 
 415 0290 38B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 1846     	    mov r0,r3 
 418 0294 00B5FFF7 	    _CALL insert_line 
 418      9DFF5DF8 
 418      04EB
 419 029e 4040     	    eors r0,r0 
 420 02a0 08E0     	    b 9f 
 421 02a2 9B46     	8:  mov BPTR,r3 // *token_list 
 422 02a4 4FF0030A 	    mov IN,#3
 423 02a8 206C     	    ldr r0,[UPP,#FLAGS]
 424 02aa A0F12000 	    sub r0,#FCOMP
 425 02ae 2064     	    str r0,[UPP,#FLAGS]
 426 02b0 5FF0FF30 	    movs r0,#-1 
 427 02b4 7047     	9:  _RET 
 428              	
 429              	/*********************************************
 430              	    compile next token from source 
 431              	    input: 
 432              	      r3 		tib index  
 433              	      T1    tib adr
 434              	      T2    insert point in pad  
 435              	    output:
 436              	      r0     token attribute 
 437              	      r1 		token value
 438              	      r3     tib index updated    
 439              	      T2     updated 
 440              	      use:
 441              	**********************************************/
 442              	    .macro _case c, next  
 443              	    cmp r0,#\c 
 444              	    bne \next
 445              	    .endm 
 446              	
 447 02b6 00BF     	    _FUNC comp_token 
 448 02b8 40B4     	    push {r6}
 449 02ba 18F80300 	    ldrb r0,[T1,r3]
 450 02be 0040     	    ands r0,r0 
 451 02c0 70D0     	    beq store_r0  // reached end of text  
 452 02c2 4FF02000 	    mov r0,#SPACE 
 453 02c6 00B500F0 	    _CALL skip  // skip spaces 
 453      12F95DF8 
 453      04EB
 454 02d0 18F80300 	    ldrb r0,[T1,r3]
 455 02d4 0040     	    ands r0,r0 
 456 02d6 65D0     	    beq store_r0  // reached end of text 
 457 02d8 03F10103 	    add r3,#1 
 458 02dc 00B500F0 	    _CALL upper 
 458      13F95DF8 
 458      04EB
 459 02e6 00B500F0 	    _CALL is_special
 459      7CF85DF8 
 459      04EB
 460 02f0 DFF8AC6D 	    ldr r6,=token_ofs
 461 02f4 D6E811F0 	    tbh [r6,r1] 
 462              	tok_idx0:     
ARM GAS  tinyBasic.s 			page 21


 463              	//  not special char.  
 464 02f8 57E0     	    b try_number 
 465              	// single char token with no value 
 466              	single: 
 467 02fa DFF8A86D 	    ldr r6,=tok_single
 468 02fe 705C     	    ldrb r0,[r6,r1] 
 469 0300 50E0     	    b store_r0  
 470              	lt:
 471 0302 4FF03400 	    mov r0,#TK_LT
 472 0306 18F80310 	    ldrb r1,[T1,r3]
 473 030a 3E29     	    cmp r1,#'>' 
 474 030c 06D0     	    beq 1f
 475 030e 0AE0     	    b 2f 
 476              	gt:
 477 0310 4FF03100 	    mov r0,#TK_GT 
 478 0314 18F80310 	    ldrb r1,[T1,r3]
 479 0318 3C29     	    cmp r1,#'<'
 480 031a 04D1     	    bne 2f  
 481 031c 03F10103 	1:  add r3,#1
 482 0320 4FF03500 	    mov r0,#TK_NE  
 483 0324 3EE0     	    b store_r0
 484 0326 3D29     	2:  cmp r1,#'=' 
 485 0328 3CD1     	    bne store_r0  
 486 032a 03F10103 	    add r3,#1
 487 032e 00F10200 	    add r0,#2
 488 0332 37E0     	    b store_r0       
 489              	bkslash:
 490 0334 18F80310 	    ldrb r1,[T1,r3]
 491 0338 03F10103 	    add r3,#1
 492 033c 4FF00300 	    mov r0,#TK_CHAR 
 493 0340 09F8010B 	    strb r0,[T2],#1
 494 0344 09F8011B 	    strb r1,[T2],#1
 495 0348 49E0     	    b token_exit 
 496              	prt_cmd: 
 497 034a 4FF00A00 	    mov r0,#TK_CMD 
 498 034e 4FF03A01 	    mov r1,#PRT_IDX
 499 0352 09F8010B 	    strb r0,[T2],#1
 500 0356 09F8011B 	    strb r1,[T2],#1
 501 035a 40E0     	    b token_exit 
 502              	quote:
 503 035c 4FF00200 	    mov r0,#TK_QSTR 
 504 0360 09F8010B 	    strb r0,[T2],#1
 505 0364 00B500F0 	    _CALL parse_quote
 505      8FF85DF8 
 505      04EB
 506 036e 36E0     	    b token_exit
 507              	tick: 
 508              	// copy comment in pad 
 509 0370 4FF00A00 	    mov r0,#TK_CMD 
 510 0374 4FF04701 	    mov r1,#REM_IDX 
 511 0378 09F8010B 	    strb r0,[T2],#1 
 512 037c 09F8011B 	    strb r1,[T2],#1
 513 0380 08EB0300 	    add r0,T1,r3 
 514 0384 4946     	    mov r1,T2 
 515 0386 00B5FFF7 	    _CALL strcpy 
 515      FEFF5DF8 
 515      04EB
ARM GAS  tinyBasic.s 			page 22


 516 0390 00B5FFF7 	    _CALL strlen 
 516      FEFF5DF8 
 516      04EB
 517 039a 8144     	    add T2,r0
 518 039c 09F10109 	    add T2,#1
 519 03a0 6368     	    ldr r3,[UPP,#COUNT]
 520 03a2 1CE0     	    b token_exit
 521              	store_r0: 
 522 03a4 09F8010B 	    strb r0,[T2],#1
 523 03a8 19E0     	    b token_exit 
 524              	try_number:
 525 03aa A3F10103 	    sub r3,#1
 526 03ae 00B500F0 	    _CALL parse_int  
 526      4EF85DF8 
 526      04EB
 527 03b8 04D0     	    beq 1f 
 528 03ba 09F8010B 	    strb r0,[T2],#1 
 529 03be 49F8041B 	    str r1,[T2],#4
 530 03c2 0CE0     	    b token_exit 
 531 03c4 00B500F0 	1:  _CALL parse_keyword 
 531      1FF95DF8 
 531      04EB
 532 03ce 0428     	    cmp r0,#TK_VAR 
 533 03d0 01D0     	    beq 2f 
 534 03d2 4729     	    cmp r1,#REM_IDX 
 535 03d4 CCD0     	    beq tick
 536 03d6 09F8010B 	2:  strb r0,[T2],#1 
 537 03da 09F8011B 	    strb r1,[T2],#1
 538              	token_exit:
 539 03de 40BC     	    pop {r6}
 540 03e0 7047     	    _RET 
 541              	
 542              	/****************************
 543              	    is_special  
 544              	    check for non alphanum
 545              	    input:
 546              	      r0    character to scan 
 547              	    output:
 548              	      r0    character 
 549              	      r1    0 || index 
 550              	    use: 
 551              	      r1    scan index 
 552              	      r2    temp 
 553              	      r3    char_list 
 554              	*****************************/
 555 03e2 00BF     	    _FUNC is_special 
 556 03e4 0CB4     	    push {r2,r3}
 557 03e6 4FF00101 	    mov r1,#1
 558 03ea DFF8BC3C 	    ldr r3,=char_list 
 559 03ee 5A5C     	1:  ldrb r2,[r3,r1]
 560 03f0 22B1     	    cbz r2,8f 
 561 03f2 8242     	    cmp r2,r0 
 562 03f4 04D0     	    beq 9f 
 563 03f6 01F10101 	    add r1,#1 
 564 03fa F8E7     	    b 1b
 565 03fc 81EA0101 	8:  eor r1,r1     
 566 0400 0CBC     	9:  pop {r2,r3}
ARM GAS  tinyBasic.s 			page 23


 567 0402 7047     	    _RET 
 568              	
 569              	char_list:
 570 0404 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 570      293A232D 
 570      2B2A2F25 
 570      3D3C3E5C 
 570      3F272200 
 571              	
 572              	tok_single:
 573 0418 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 573      070109
 574 041f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 574      2232
 575              	  
 576 0425 0000BF   	  .p2align 2
 577              	token_ofs:
 578 0428 0000     	  .hword  0 // not found
 579              	  // TK_COMMA...TK_EQUAL , 12 
 580 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 580      01000100 
 581 0432 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 581      01000100 
 582 043a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 582      01000100 
 583              	  // '<','>'
 584 0442 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 585              	  // '\'
 586 0446 1E00     	  .hword  (bkslash-tok_idx0)/2
 587              	  // '?' 
 588 0448 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 589              	  // "'"  
 590 044a 3C00     	  .hword  (tick-tok_idx0)/2 
 591              	  // '"' quote 
 592 044c 3200     	  .hword (quote-tok_idx0)/2
 593              	
 594 044e 00BF     	  .p2align 2
 595              	
 596              	/****************************
 597              	    parse_int 
 598              	    parse an integer from text
 599              	    if not valid integer 
 600              	    r1 return *buffer else 
 601              	    *buffer is incremented after integer 
 602              	  input:
 603              	    r0   *buffer 
 604              	  output:
 605              	    r0   TK_INTGR|TK_NONE
 606              	    r1   int|0   
 607              	  use:
 608              	    r3   tib index updated     
 609              	*****************************/
 610              	    _FUNC parse_int 
 611 0450 4FF00A01 	    mov r1,#10 // default base 
 612 0454 18F80300 	    ldrb r0,[T1,r3]
 613 0458 2428     	    cmp r0,'$' 
 614 045a 02D1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 24


 615 045c 4FF01001 	    mov r1,#16 // hexadecimal number 
 616 0460 03E0     	    b 3f  
 617 0462 2628     	2:  cmp r0,#'&' 
 618 0464 03D1     	    bne 4f
 619 0466 4FF00201 	    mov r1,#2 //binary number  
 620 046a 03F10103 	3:  add r3,#1
 621 046e 03EB0800 	4:  add r0,r3,T1 
 622 0472 00B5FFF7 	    _CALL atoi 
 622      FEFF5DF8 
 622      04EB
 623 047c 10B1     	    cbz r0,9f
 624 047e 0344     	    add r3,r0
 625 0480 4FF00E00 	    mov r0,#TK_INTGR
 626 0484 0040     	9:  ands r0,r0   
 627 0486 7047     	    _RET 
 628              	
 629              	/*********************************************
 630              	    parse_quote 
 631              	    parse quoted string 
 632              	    input: 
 633              	      r3 		tib index  
 634              	      T1    tib adr
 635              	      T2    insert point in pad  
 636              	    output:
 637              	      r0     token attribute 
 638              	      r1 		*str 
 639              	      r3     tib index updated    
 640              	      T2     updated 
 641              	      use:
 642              	*********************************************/
 643              	    _FUNC parse_quote
 644 0488 4DF8049D 	    push {T2} 
 645 048c 18F80300 	1:  ldrb r0,[T1,r3]
 646 0490 03F10103 	    add r3,#1 
 647 0494 2228     	    cmp r0,#'"'
 648 0496 09D0     	    beq 9f 
 649 0498 5C28     	    cmp r0,#'\\'
 650 049a 04D1     	    bne 2f 
 651 049c 00B500F0 	    _CALL get_escaped_char 
 651      0DF85DF8 
 651      04EB
 652 04a6 09F8010B 	2:  strb r0,[T2],#1
 653 04aa EFE7     	    b 1b 
 654 04ac 80EA0000 	9:  eor  r0,r0
 655 04b0 09F8010B 	    strb r0,[T2],#1
 656 04b4 4FF00200 	    mov r0,#TK_QSTR
 657 04b8 02BC     	    pop {r1}
 658 04ba 7047     	    _RET 
 659              	
 660              	/**********************************************
 661              	    get_escaped_char 
 662              	    convert "\c" in quoted string 
 663              	    input:
 664              	      r0 
 665              	      r3   index 
 666              	      T1   tib 
 667              	    output:
ARM GAS  tinyBasic.s 			page 25


 668              	      r0   replacement char
 669              	      r3   updated 
 670              	    use:
 671              	      r1   *table 
 672              	      r2   temp 
 673              	**********************************************/
 674              	    _FUNC get_escaped_char 
 675 04bc 06B4     	    push {r1,r2}
 676 04be 18F80300 	    ldrb r0,[T1,r3]
 677 04c2 03F10103 	    add r3,#1
 678 04c6 2228     	    cmp r0,#'"' 
 679 04c8 0BD0     	    beq 9f 
 680 04ca DFF8E01B 	1:  ldr r1,=escaped 
 681 04ce 11F8012B 	2:  ldrb r2,[r1],#1
 682 04d2 12B1     	    cbz r2,6f 
 683 04d4 8242     	    cmp r2,r0 
 684 04d6 02D0     	    beq 7f 
 685 04d8 F9E7     	    b 2b
 686 04da A0F10702 	6:  sub r2,r0,#7     
 687 04de 02F10700 	7:  add r0,r2,#7
 688 04e2 06BC     	9:  pop {r1,r2}   
 689 04e4 7047     	    _RET
 690              	
 691 04e6 6162746E 	escaped: .asciz "abtnvfr"
 691      76667200 
 692              	
 693              	/*********************************************
 694              	   skip character in TIB 
 695              	   input:
 696              	      r0    character to skip 
 697              	      r3    tib index 
 698              	      T1    tib adr
 699              	    output: 
 700              	      r3    updated
 701              	    use:
 702              	      r1     
 703              	**********************************************/   
 704 04ee 00BF     	    _FUNC skip
 705 04f0 02B4     	    push {r1} 
 706 04f2 18F80310 	1:  ldrb r1,[T1,r3]
 707 04f6 8142     	    cmp r1,r0
 708 04f8 02D1     	    bne 2f
 709 04fa 03F10103 	    add r3,#1 
 710 04fe F8E7     	    b 1b 
 711 0500 2360     	2:  str r3,[UPP,#IN_SAVED]
 712 0502 02BC     	    pop {r1}
 713 0504 7047     	    _RET
 714              	
 715              	/********************************************
 716              	    upper
 717              	    convert character in upper case 
 718              	    input: 
 719              	      r0   character 
 720              	    output:
 721              	      r0   upper case character 
 722              	*********************************************/
 723 0506 00BF     	    _FUNC upper 
ARM GAS  tinyBasic.s 			page 26


 724 0508 6128     	    cmp r0,#'a' 
 725 050a 03DB     	    blt 9f 
 726 050c 7A28     	    cmp r0,#'z' 
 727 050e 01DC     	    bgt 9f 
 728 0510 00F05F00 	    and r0,#0x5f 
 729 0514 7047     	9:  _RET 
 730              	
 731              	/***************************************
 732              	   is_digit 
 733              	   check if char is decimal digit.
 734              	   convert to decimal digit.
 735              	   input:
 736              	      r0    char 
 737              	   output:
 738              	      r0    if !Z then converted digit 
 739              	      Z     0 true | 1 false  
 740              	***************************************/
 741 0516 00BF     	    _GBL_FUNC is_digit 
 742 0518 02B4     	    push {r1} 
 743 051a 81EA0101 	    eor r1,r1 
 744 051e 3028     	    cmp r0,#'0' 
 745 0520 05DB     	    blt 9f
 746 0522 3A28     	    cmp r0,'9'+1
 747 0524 03D5     	    bpl 9f 
 748 0526 4FF0FF31 	    mov r1,#-1
 749 052a A0F13000 	    sub r0,#'0'  
 750              	9:   
 751 052e 0940     	    ands r1,r1
 752 0530 02BC     	    pop {r1} 
 753 0532 7047     	    _RET 
 754              	
 755              	/***************************************
 756              	    is_hex 
 757              	    check for hexadecimal digit 
 758              	    convert to hex digit.
 759              	    input:
 760              	      r0    
 761              	    output:
 762              	      r0     if !Z then converted digit 
 763              	      Z      0 true | 1 false         
 764              	***************************************/
 765              	    _FUNC is_hex 
 766 0534 02B4     	    push {r1}
 767 0536 4FF0FF31 	    mov r1,#-1 
 768 053a 4128     	    cmp r0,#'A' 
 769 053c 01D4     	    bmi 1f 
 770 053e A0F10700 	    sub r0,#7 
 771 0542 A0F13000 	1:  sub r0,#'0'
 772 0546 01D4     	    bmi 2f 
 773 0548 1028     	    cmp r0,#16
 774 054a 01D4     	    bmi 9f 
 775 054c 81EA0101 	2:  eor r1,r1  
 776 0550 0940     	9:  ands r1,r1 
 777 0552 02BC     	    pop {r1}
 778 0554 7047     	    _RET 
 779              	
 780              	/***************************************
ARM GAS  tinyBasic.s 			page 27


 781              	    is_bit 
 782              	    check if char is '0'|'1' 
 783              	    convert to binary digit. 
 784              	    input:
 785              	      r0    
 786              	    output:
 787              	      r0     if !Z then converted digit 
 788              	      Z      0 true | 1 false         
 789              	***************************************/
 790 0556 00BF     	    _FUNC is_bit
 791 0558 02B4     	    push  {r1}
 792 055a 4FF0FF31 	    mov r1,#-1 
 793 055e A0F13000 	    sub r0,#'0' 
 794 0562 01D4     	    bmi 2f 
 795 0564 0229     	    cmp r1,#2
 796 0566 01D4     	    bmi 9f 
 797 0568 81EA0101 	2:  eor r1,r1 
 798 056c 0940     	9:  ands r1,r1 
 799 056e 02BC     	    pop {r1}
 800 0570 7047     	    _RET 
 801              	
 802              	/***************************************
 803              	    is_alpha 
 804              	    check if character is {A..Z} 
 805              	  input:
 806              	    r0   character 
 807              	  output: 
 808              	    r0    same character 
 809              	    Z    0 true | 1 false  
 810              	****************************************/
 811 0572 00BF     	    _FUNC is_alpha
 812 0574 02B4     	    push {r1} 
 813 0576 4FF0FF31 	    mov r1,#-1 
 814 057a 4128     	    cmp r0,#'A' 
 815 057c 01DB     	    blt 8f 
 816 057e 5B28     	    cmp r0,#'Z'+1 
 817 0580 01D4     	    bmi 9f 
 818 0582 81EA0101 	8:  eor r1,r1  
 819 0586 0940     	9:  ands r1,r1 
 820 0588 02BC     	    pop {r1}
 821 058a 7047     	    _RET 
 822              	
 823              	/***************************************
 824              	    is_num 
 825              	    check if character is {0..9} 
 826              	  input:
 827              	    r0   character 
 828              	  output: 
 829              	    r0    same character 
 830              	    Z    0 true | 1 false  
 831              	****************************************/
 832              	    _FUNC is_num 
 833 058c 02B4     	    push {r1} 
 834 058e 4FF0FF31 	    mov r1,#-1 
 835 0592 3028     	    cmp r0,#'0' 
 836 0594 01DB     	    blt 8f 
 837 0596 3A28     	    cmp r0,#'9'+1 
ARM GAS  tinyBasic.s 			page 28


 838 0598 01D4     	    bmi 9f 
 839 059a 81EA0101 	8:  eor r1,r1  
 840 059e 0940     	9:  ands r1,r1 
 841 05a0 02BC     	    pop {r1}
 842 05a2 7047     	    _RET 
 843              	
 844              	/*****************************************
 845              	    is_alnum 
 846              	    check if character is alphanumeric 
 847              	    input:
 848              	      r0 
 849              	    output:
 850              	      r0     same 
 851              	      Z      1 false | 0 true 
 852              	*****************************************/
 853              	    _FUNC is_alnum 
 854 05a4 00B5FFF7 	    _CALL is_alpha 
 854      E5FF5DF8 
 854      04EB
 855 05ae 04D1     	    bne 9f 
 856 05b0 00B5FFF7 	    _CALL is_num 
 856      EBFF5DF8 
 856      04EB
 857 05ba 7047     	9:  _RET 
 858              	
 859              	/******************************************
 860              	    atoi 
 861              	    convert ascii to integer 
 862              	    input:
 863              	      r0   *buffer 
 864              	      r1   base 
 865              	    output:
 866              	      r0   0 no integer found 
 867              	      r1   integer
 868              	    use:
 869              	      r2   base  
 870              	      T1   *buffer 
 871              	      T2   digit count  
 872              	******************************************/
 873              	    _GBL_FUNC atoi 
 874 05bc 2DE90403 	    push {r2,T1,T2}
 875 05c0 8046     	    mov T1,r0  // *buffer 
 876 05c2 0A46     	    mov r2,r1  // base  
 877 05c4 81EA0101 	    eor r1,r1  // converted integer 
 878 05c8 89EA0909 	    eor T2,T2  // digit count 
 879 05cc 18F8010B 	1:  ldrb r0,[T1],#1
 880 05d0 00B5FFF7 	    _CALL upper 
 880      99FF5DF8 
 880      04EB
 881 05da 3028     	    cmp r0,#'0'
 882 05dc 0FD4     	    bmi 8f
 883 05de 3A28     	    cmp r0,#'9'+1 
 884 05e0 03D4     	    bmi 2f 
 885 05e2 4128     	    cmp r0,#'A'
 886 05e4 0BD4     	    bmi 8f 
 887 05e6 A0F10700 	    sub r0,#7 
 888 05ea A0F13000 	2:  sub r0,#'0' 
ARM GAS  tinyBasic.s 			page 29


 889 05ee 9042     	    cmp r0,r2
 890 05f0 05D5     	    bpl 8f  
 891 05f2 02FB01F1 	    mul r1,r2 
 892 05f6 0144     	    add r1,r0
 893 05f8 09F10109 	    add T2,#1
 894 05fc E6E7     	    b 1b 
 895 05fe 4846     	8:  mov r0,T2  
 896 0600 BDE80403 	    pop {r2,T1,T2}
 897 0604 7047     	    _RET 
 898              	
 899              	/*****************************************
 900              	    parse_keyword 
 901              	    parse work and ckeck if in dictionary 
 902              	    input:
 903              	      r0    first character 
 904              	      r3    tib index 
 905              	      t1    tib 
 906              	      t2    pad 
 907              	    output:
 908              	      r3    updated 
 909              	      t1    updated 
 910              	      t2    updated   
 911              	    use:
 912              	    
 913              	*****************************************/
 914 0606 00BF     	    _FUNC parse_keyword 
 915 0608 4DF8049D 	    push {T2}
 916 060c 18F80300 	    ldrb r0,[T1,r3]
 917 0610 03F10103 	    add r3,#1
 918 0614 00B3     	    cbz r0,2f 
 919 0616 00B5FFF7 	    _CALL upper 
 919      76FF5DF8 
 919      04EB
 920 0620 00B5FFF7 	    _CALL is_alpha 
 920      A7FF5DF8 
 920      04EB
 921 062a 00F03D81 	    beq syntax_error 
 922 062e 09F8010B 	    strb r0,[T2],#1
 923 0632 18F80300 	1:  ldrb r0,[T1,r3]
 924 0636 03F10103 	    add r3,#1 
 925 063a 68B1     	    cbz r0,2f 
 926 063c 00B5FFF7 	    _CALL upper 
 926      63FF5DF8 
 926      04EB
 927 0646 00B5FFF7 	    _CALL is_alnum
 927      ACFF5DF8 
 927      04EB
 928 0650 02D0     	    beq 2f 
 929 0652 09F8010B 	    strb r0,[T2],#1
 930 0656 ECE7     	    b 1b 
 931 0658 A3F10103 	2:  sub r3,#1
 932 065c 80EA0000 	    eor r0,r0
 933 0660 89F80000 	    strb r0,[T2] 
 934 0664 0098     	    ldr r0,[sp]
 935 0666 4178     	    ldrb r1,[r0,#1] 
 936 0668 29B9     	    cbnz r1,3f
 937 066a 0178     	    ldrb r1,[r0]
ARM GAS  tinyBasic.s 			page 30


 938 066c A1F14101 	    sub r1,#'A'
 939 0670 4FF00400 	    mov r0,#TK_VAR
 940 0674 08E0     	    b 9f 
 941 0676 DFF8381A 	3:  ldr r1,=kword_dict  
 942 067a 00B500F0 	    _CALL search_dict 
 942      F0F95DF8 
 942      04EB
 943 0684 00B9     	    cbnz r0,9f 
 944 0686 0FE1     	    b syntax_error 
 945 0688 5DF8049B 	9:  pop {T2}
 946 068c 7047     	    _RET 
 947              	
 948              	
 949              	/*******************
 950              	    DECOMPILER 
 951              	*******************/
 952              	
 953              	/********************************************
 954              	    cmd_name 
 955              	    search bytecode in dictionary and 
 956              	    return its name 
 957              	  input:
 958              	    r0    keyword bytecode 
 959              	  ouput:
 960              	    r0    name string 
 961              	  use:
 962              	    T1    link 
 963              	    T2    tmp 
 964              	*********************************************/
 965 068e 00BF     	    _FUNC cmd_name 
 966 0690 2DE90003 	    push {T1,T2}
 967 0694 DFF8188A 	    ldr T1,=kword_dict 
 968 0698 58F8089C 	1:  ldr T2,[T1,#-8]
 969 069c 8145     	    cmp T2,r0 
 970 069e 04D0     	    beq 2f 
 971 06a0 58F80C8C 	    ldr T1,[T1,#-12]
 972 06a4 B8F1000F 	    cmp T1,#0
 973 06a8 F6D1     	    bne 1b  
 974 06aa 4046     	2:  mov r0,T1 
 975 06ac BDE80003 	    pop {T1,T2}
 976 06b0 7047     	    _RET
 977              	
 978              	/*****************************
 979              	  decompile_line 
 980              	  detokenize BASIC line 
 981              	  input:
 982              	    r0  *token list 
 983              	    r1  *output buffer 
 984              	  output:
 985              	    r0  *output buffer (.asciz) 
 986              	  use:
 987              	    T1  *output buffer
 988              	    BPTR  *token list
 989              	    IN  offset in token list  
 990              	******************************/
 991 06b2 00BF     	    _GBL_FUNC decompile_line
 992 06b4 2DE90201 	    push {r1,T1} 
ARM GAS  tinyBasic.s 			page 31


 993 06b8 8346     	    mov BPTR,r0 
 994 06ba 4FF0000A 	    mov IN,#0
 995 06be 8846     	    mov T1,r1 
 996 06c0 3BF80A00 	    ldrh r0,[BPTR,IN]
 997 06c4 0AF1020A 	    add IN,#2 
 998 06c8 4FF00A01 	    mov r1,#10 
 999 06cc 00B5FFF7 	    _CALL itoa
 999      FEFF5DF8 
 999      04EB
 1000 06d6 4146     	    mov r1,T1
 1001 06d8 00B5FFF7 	    _CALL strcpy
 1001      FEFF5DF8 
 1001      04EB
 1002 06e2 4046     	    mov r0,T1 
 1003 06e4 00B5FFF7 	    _CALL strlen
 1003      FEFF5DF8 
 1003      04EB
 1004 06ee 8044     	    add T1,r0 
 1005 06f0 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1006 06f4 0AF1010A 	    add IN,#1 
 1007 06f8 6060     	    str r0,[UPP,#COUNT]
 1008              	decomp_loop:
 1009 06fa 00B500F0 	    _CALL next_token
 1009      DCFA5DF8 
 1009      04EB
 1010 0704 0028     	    cmp r0,#TK_NONE 
 1011 0706 00F09B80 	    beq 9f  
 1012 070a 0E28     	    cmp r0,#TK_INTGR 
 1013 070c 15D1     	    bne 1f 
 1014 070e 0846     	    mov r0,r1 
 1015 0710 A169     	    ldr r1,[UPP,#BASE]
 1016 0712 00B5FFF7 	    _CALL itoa
 1016      FEFF5DF8 
 1016      04EB
 1017 071c 01B4     	    push {r0}
 1018 071e 4146     	    mov r1,T1 
 1019 0720 00B5FFF7 	    _CALL strcpy
 1019      FEFF5DF8 
 1019      04EB
 1020 072a 01BC     	    pop {r0} 
 1021 072c 00B5FFF7 	    _CALL strlen
 1021      FEFF5DF8 
 1021      04EB
 1022 0736 8044     	    add T1,r0 
 1023 0738 DFE7     	    b decomp_loop 
 1024 073a 0428     	1:  cmp r0,#TK_VAR 
 1025 073c 04D1     	    bne 2f 
 1026 073e 01F14100 	    add r0,r1,'A'
 1027 0742 08F8010B 	    strb r0,[T1],#1 
 1028 0746 D8E7     	    b decomp_loop 
 1029 0748 0328     	2:  cmp r0,#TK_CHAR 
 1030 074a 0AD1     	    bne 3f 
 1031 074c 4FF05C00 	    mov r0,#'\\'
 1032 0750 08F8010B 	    strb r0,[T1],#1
 1033 0754 08F8011B 	    strb r1,[T1],#1
 1034 0758 4FF02000 	    mov r0,#SPACE 
 1035 075c 08F8010B 	    strb r0,[T1],#1
ARM GAS  tinyBasic.s 			page 32


 1036 0760 CBE7     	    b decomp_loop 
 1037 0762 0228     	3:  cmp r0,#TK_QSTR 
 1038 0764 17D1     	    bne 4f 
 1039 0766 4FF02200 	    mov r0,#'"'
 1040 076a 08F8010B 	    strb r0,[T1],#1 
 1041 076e 0846     	    mov r0,r1
 1042 0770 02B4     	    push {r1}
 1043 0772 4146     	    mov r1,T1  
 1044 0774 00B5FFF7 	    _CALL strcpy
 1044      FEFF5DF8 
 1044      04EB
 1045 077e 01BC     	    pop {r0}
 1046 0780 00B5FFF7 	    _CALL strlen 
 1046      FEFF5DF8 
 1046      04EB
 1047 078a 8044     	    add T1,r0 
 1048 078c 4FF02200 	    mov r0,#'"'
 1049 0790 08F8010B 	    strb r0,[T1],#1 
 1050 0794 B1E7     	    b decomp_loop
 1051 0796 0A28     	4:  cmp r0,#TK_CMD
 1052 0798 3AD4     	    bmi 5f 
 1053 079a 0E28     	    cmp r0,#TK_INTGR 
 1054 079c 38D5     	    bpl 5f
 1055 079e 4FF02000 	    mov r0,#SPACE 
 1056 07a2 08F8010B 	    strb r0,[T1],#1  
 1057 07a6 0846     	    mov r0,r1
 1058 07a8 3A28     	    cmp r0,#PRT_IDX 
 1059 07aa 04D1     	    bne 1f  
 1060 07ac 4FF03F00 	    mov r0,#'?'
 1061 07b0 08F8010B 	    strb r0,[T1],#1 
 1062 07b4 27E0     	    b 3f 
 1063 07b6 4728     	1:  cmp r0,#REM_IDX
 1064 07b8 12D1     	    bne 1f
 1065 07ba 4FF02700 	    mov r0,#'\''
 1066 07be 08F8010B 	    strb r0,[T1],#1 
 1067 07c2 0BEB0A00 	    add r0,BPTR,IN
 1068 07c6 4146     	    mov r1,T1   
 1069 07c8 00B5FFF7 	    _CALL strcpy
 1069      FEFF5DF8 
 1069      04EB
 1070 07d2 80EA0000 	    eor r0,r0 
 1071 07d6 88F80000 	    strb r0,[T1]  
 1072 07da D4F804A0 	    ldr IN,[UPP,#COUNT]
 1073 07de 2FE0     	    b 9f 
 1074 07e0 00B5FFF7 	1:  _CALL cmd_name
 1074      55FF5DF8 
 1074      04EB
 1075 07ea 01B4     	2:  push {r0}
 1076 07ec 4146     	    mov r1,T1 
 1077 07ee 00B5FFF7 	    _CALL strcpy 
 1077      FEFF5DF8 
 1077      04EB
 1078 07f8 01BC     	    pop {r0}
 1079 07fa 00B5FFF7 	    _CALL strlen 
 1079      FEFF5DF8 
 1079      04EB
 1080 0804 8044     	    add T1,r0 
ARM GAS  tinyBasic.s 			page 33


 1081 0806 4FF02000 	3:  mov r0,#SPACE 
 1082 080a 08F8010B 	    strb r0,[T1],#1 
 1083 080e 74E7     	    b decomp_loop
 1084 0810 01B4     	5:  push {r0}
 1085 0812 DFF8A018 	    ldr r1,=single_char 
 1086 0816 085C     	    ldrb r0,[r1,r0]
 1087 0818 02BC     	    pop {r1}
 1088 081a 10B1     	    cbz r0,6f 
 1089 081c 08F8010B 	    strb r0,[T1],#1 
 1090 0820 6BE7     	    b decomp_loop
 1091 0822 3329     	6:  cmp r1,#TK_GE 
 1092 0824 02D1     	    bne 7f 
 1093 0826 DFF89008 	    ldr r0,=ge_str
 1094 082a DEE7     	    b 2b 
 1095 082c 3629     	7:  cmp r1,#TK_LE 
 1096 082e 02D1     	    bne 8f
 1097 0830 DFF88808 	    ldr r0,=le_str
 1098 0834 D9E7     	    b 2b
 1099 0836 3529     	8:  cmp r1,#TK_NE 
 1100 0838 02D1     	    bne 9f 
 1101 083a DFF88408 	    ldr r0,=ne_str 
 1102 083e D4E7     	    b 2b 
 1103 0840 80EA0000 	9:  eor r0,r0 
 1104 0844 88F80000 	    strb r0,[T1]
 1105 0848 BDE80101 	    pop {r0,T1}
 1106 084c 7047     	    _RET 
 1107              	
 1108 084e 3E3D00   	ge_str: .asciz ">="
 1109 0851 3C3D00   	le_str: .asciz "<="
 1110 0854 3C3E00   	ne_str: .asciz "<>"
 1111              	
 1112              	single_char:
 1113 0857 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1113      00402829 
 1113      2C23
 1114 0861 00000000 	  .space 6
 1114      0000
 1115 0867 2B2D     	  .byte '+','-'
 1116 0869 00000000 	  .space 14
 1116      00000000 
 1116      00000000 
 1116      0000
 1117 0877 2A2F25   	  .byte '*','/','%'
 1118 087a 00000000 	  .space 14
 1118      00000000 
 1118      00000000 
 1118      0000
 1119 0888 3E3D003C 	  .byte '>','=',0,'<',0,0
 1119      0000
 1120              	
 1121              	
 1122              	/**********************************
 1123              	  modulo 
 1124              	  compute r0 mod r1
 1125              	  input:
 1126              	    r0   dividend
 1127              	    r1   divisor 
ARM GAS  tinyBasic.s 			page 34


 1128              	  output:
 1129              	    r0   TK_INTGR 
 1130              	    r1   r0 mod r1 
 1131              	*********************************/
 1132 088e 00BF     	    _GBL_FUNC modulo 
 1133 0890 01B4     	    push {r0}
 1134 0892 B0FBF1F0 	    udiv r0,r1 
 1135 0896 01FB00F0 	    mul  r0,r1 
 1136 089a 02BC     	    pop {r1}
 1137 089c A1EB0001 	    sub r1,r0
 1138 08a0 4FF00E00 	    mov r0,#TK_INTGR
 1139 08a4 7047     	    _RET 
 1140              	
 1141              	/**********************************
 1142              	      BASIC commands 
 1143              	**********************************/
 1144              	
 1145              	/*********************************
 1146              	    syntax_error 
 1147              	    display syntax error message and 
 1148              	    abort program 
 1149              	  input:
 1150              	    none  
 1151              	  output: 
 1152              	    none 
 1153              	  use:
 1154              	*********************************/
 1155 08a6 00BF     	    _FUNC syntax_error 
 1156 08a8 4FF00200 	    mov r0,#ERR_SYNTAX
 1157 08ac 00E0     	    b tb_error 
 1158              	
 1159              	/*********************************
 1160              	    tb_error 
 1161              	    display BASIC error and 
 1162              	    abort program. 
 1163              	  input:
 1164              	    r0    error code   
 1165              	  output: 
 1166              	    none 
 1167              	  use:
 1168              	    r1    temp 
 1169              	*********************************/
 1170 08ae 00BF     	    _FUNC tb_error 
 1171 08b0 216C     	    ldr r1,[UPP,#FLAGS]
 1172 08b2 11F0200F 	    tst r1,#FCOMP
 1173 08b6 56D1     	    bne compile_error
 1174              	rt_error:
 1175 08b8 01B4     	    push {r0}
 1176 08ba DFF80808 	    ldr r0,=rt_error_msg 
 1177 08be 00B5FFF7 	    _CALL uart_puts 
 1177      FEFF5DF8 
 1177      04EB
 1178 08c8 01BC     	    pop {r0}
 1179 08ca DFF8FC17 	    ldr r1,=err_msg  
 1180 08ce 4FEA8000 	    lsl r0,#2 
 1181 08d2 0858     	    ldr r0,[r1,r0]
 1182 08d4 00B5FFF7 	    _CALL uart_puts
ARM GAS  tinyBasic.s 			page 35


 1182      FEFF5DF8 
 1182      04EB
 1183              	// print line number     
 1184 08de D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1185 08e2 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1186 08e6 DFF8E407 	    ldr r0,=lineno_msg 
 1187 08ea 00B5FFF7 	    _CALL uart_puts
 1187      FEFF5DF8 
 1187      04EB
 1188 08f4 BBF80000 	    ldrh r0,[BPTR]
 1189 08f8 4FF00A01 	    mov r1,#10
 1190 08fc 00B5FFF7 	    _CALL print_int 
 1190      FEFF5DF8 
 1190      04EB
 1191              	// line address 
 1192 0906 DFF8C807 	    ldr r0,=line_adr_msg 
 1193 090a 00B5FFF7 	    _CALL uart_puts 
 1193      FEFF5DF8 
 1193      04EB
 1194 0914 5846     	    mov r0,BPTR 
 1195 0916 4FF01001 	    MOV r1,#16
 1196 091a 00B5FFF7 	    _CALL print_int
 1196      FEFF5DF8 
 1196      04EB
 1197              	// print error offset on line      
 1198 0924 DFF8AC07 	    ldr r0,=token_at_msg 
 1199 0928 00B5FFF7 	    _CALL uart_puts 
 1199      FEFF5DF8 
 1199      04EB
 1200 0932 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1201 0936 5046     	    mov r0,IN 
 1202 0938 4FF01001 	    mov r1,#16 
 1203 093c 00B5FFF7 	    _CALL print_int
 1203      FEFF5DF8 
 1203      04EB
 1204 0946 4FF00D00 	    mov r0,#CR 
 1205 094a 00B5FFF7 	    _CALL uart_putc
 1205      FEFF5DF8 
 1205      04EB
 1206              	// dump tokenize line 
 1207 0954 5846     	    mov r0,BPTR
 1208 0956 8278     	    ldrb r2,[r0,#2]
 1209 0958 04B4     	    push {r2}
 1210 095a 00B500F0 	    _CALL dump01 
 1210      79F95DF8 
 1210      04EB
 1211 0964 5EE1     	    b warm_start 
 1212              	compile_error:
 1213 0966 DFF86017 	    ldr r1,=err_msg 
 1214 096a 4FEA8000 	    lsl r0,#2 
 1215 096e 0858     	    ldr r0,[r1,r0]
 1216 0970 00B5FFF7 	    _CALL uart_puts
 1216      FEFF5DF8 
 1216      04EB
 1217 097a A068     	    ldr r0,[UPP,#BASICPTR]
 1218 097c 00B5FFF7 	    _CALL uart_puts
 1218      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 36


 1218      04EB
 1219 0986 4FF00D00 	    mov r0,#CR 
 1220 098a 00B5FFF7 	    _CALL uart_putc  
 1220      FEFF5DF8 
 1220      04EB
 1221 0994 2068     	    ldr r0,[UPP,#IN_SAVED]
 1222 0996 00B5FFF7 	    _CALL spaces 
 1222      FEFF5DF8 
 1222      04EB
 1223 09a0 4FF05E00 	    mov r0,#'^' 
 1224 09a4 00B5FFF7 	    _CALL uart_putc
 1224      FEFF5DF8 
 1224      04EB
 1225 09ae 4FF00D00 	    mov r0,#CR 
 1226 09b2 00B5FFF7 	    _CALL uart_putc   
 1226      FEFF5DF8 
 1226      04EB
 1227 09bc 32E1     	    b  warm_start  
 1228              	    
 1229 09be 0A52756E 	rt_error_msg: .asciz "\nRuntime error\n"
 1229      74696D65 
 1229      20657272 
 1229      6F720A00 
 1230 09ce 6C696E65 	lineno_msg:   .asciz "line: "
 1230      3A2000
 1231 09d5 2C616464 	line_adr_msg:   .asciz ",address: "
 1231      72657373 
 1231      3A2000
 1232 09e0 2C6F6666 	token_at_msg: .asciz ",offset: "
 1232      7365743A 
 1232      2000
 1233              	
 1234              	err_msg:
 1235 09ea 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1235      00000000 
 1235      0D000000 
 1235      1B000000 
 1235      34000000 
 1236 0a02 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1236      6F000000 
 1236      89000000 
 1236      9A000000 
 1236      AB000000 
 1237 0a16 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1237      EA000000 
 1237      FA000000 
 1237      0E010000 
 1237      21010000 
 1238              	
 1239              	    .section .rodata.tb_error 
 1240              	
 1241 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1241      72792066 
 1241      756C6C0A 
 1241      00
 1242 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1242      61782065 
ARM GAS  tinyBasic.s 			page 37


 1242      72726F72 
 1242      0A00
 1243 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1243      206F7065 
 1243      72617469 
 1243      6F6E206F 
 1243      76657266 
 1244 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1244      73696F6E 
 1244      20627920 
 1244      300A00
 1245 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1245      6C696420 
 1245      6C696E65 
 1245      206E756D 
 1245      6265722E 
 1246 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1246      74696D65 
 1246      206F6E6C 
 1246      79207573 
 1246      6167652E 
 1247 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1247      616E6420 
 1247      6C696E65 
 1247      206F6E6C 
 1247      79207573 
 1248 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1248      69636174 
 1248      65206E61 
 1248      6D652E0A 
 1248      00
 1249 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1249      206E6F74 
 1249      20666F75 
 1249      6E642E0A 
 1249      00
 1250 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1250      76616C75 
 1250      652E0A00 
 1251 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1251      20696E20 
 1251      65787465 
 1251      6E646564 
 1251      206D656D 
 1252 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1252      61746120 
 1252      666F756E 
 1252      642E0A00 
 1253 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1253      726F6772 
 1253      616D2069 
 1253      6E205241 
 1253      4D210A00 
 1254 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1254      20737973 
 1254      74656D20 
 1254      66756C6C 
ARM GAS  tinyBasic.s 			page 38


 1254      2E0A00
 1255 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1255      65722066 
 1255      756C6C0A 
 1255      00
 1256              	
 1257 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1257      2074696D 
 1257      65206572 
 1257      726F722C 
 1257      2000
 1258 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1258      70696C65 
 1258      20657272 
 1258      6F722C20 
 1258      00
 1259 0151 6C617374 	tk_id: .asciz "last token id: "
 1259      20746F6B 
 1259      656E2069 
 1259      643A2000 
 1260              	
 1261              	
 1262              	    .section  .text , "ax", %progbits 
 1263              	
 1264              	/*********************************
 1265              	   skip_line 
 1266              	   data and remark line are skipped
 1267              	   by the interpreter 
 1268              	***********************************/
 1269 0a2a 00BF     	    _FUNC skip_line 
 1270 0a2c D4F804A0 	    ldr IN,[UPP,#COUNT]
 1271 0a30 7047     	    _RET 
 1272              	
 1273              	
 1274              	/*********************************
 1275              	   BASIC: BTGL adr, mask   
 1276              	   toggle bits [adr]=[adr]^mask  
 1277              	   input:
 1278              	     r0    adr 
 1279              	     r1    mask 
 1280              	    output;
 1281              	      none 
 1282              	    use:
 1283              	      T1   temp
 1284              	      T2   temp  
 1285              	*******************************/     
 1286 0a32 00BF     	    _FUNC BTGL 
 1287              	
 1288 0a34 7047     	    _RET 
 1289              	
 1290              	/***************************************
 1291              	   kword_cmp
 1292              	   compare keyword to dict entry
 1293              	  input:
 1294              	    r0  keyword 
 1295              	    r1  dict entry 
 1296              	    r2  character count 
ARM GAS  tinyBasic.s 			page 39


 1297              	  output:
 1298              	    r0  0 not same | -1 same 
 1299              	  use:
 1300              	    r6   result  
 1301              	    T1   char 1
 1302              	    T2   char 2
 1303              	**************************************/   
 1304 0a36 00BF     	    _FUNC kword_cmp 
 1305 0a38 2DE94003 	    push {r6,T1,T2}
 1306 0a3c 4FF0FF36 	    mov r6,#-1 
 1307 0a40 4AB1     	1:  cbz r2,9f       
 1308 0a42 10F8018B 	    ldrb T1,[r0],#1
 1309 0a46 11F8019B 	    ldrb T2,[r1],#1
 1310 0a4a A2F10102 	    sub r2,#1
 1311 0a4e C845     	    cmp T1,T2
 1312 0a50 F6D0     	    beq 1b 
 1313 0a52 86EA0606 	    eor r6,r6  
 1314 0a56 3046     	9:  mov r0,r6
 1315 0a58 BDE84003 	    pop {r6,T1,T2}
 1316 0a5c 7047     	    _RET 
 1317              	
 1318              	/***********************************************
 1319              	    search_dict 
 1320              	    search keyword in dictionary
 1321              	   input:
 1322              	  	 r0   keyword 
 1323              	     r1		dictionary first name field address  
 1324              	   output:
 1325              	     r0 		token attribute 
 1326              	     r1		  cmd_index if r0!=TK_NONE  
 1327              	   use:
 1328              	     r3   length keyword 
 1329              	     T1   keyword
 1330              	     T2   link  
 1331              	**********************************************/
 1332 0a5e 00BF     	  _FUNC search_dict
 1333 0a60 2DE90C03 	  push {r2,r3,T1,T2}
 1334 0a64 8046     	  mov T1,r0 
 1335 0a66 00B5FFF7 	  _CALL strlen 
 1335      FEFF5DF8 
 1335      04EB
 1336 0a70 0346     	  mov r3,r0  
 1337              	1:  
 1338 0a72 8946     	   mov T2,r1  // keep for linking   
 1339 0a74 0878     	   ldrb r0,[r1] 
 1340 0a76 78B1     	   cbz r0,9f // null byte, end of dictionary
 1341 0a78 4046     	   mov r0,T1
 1342 0a7a 1A46     	   mov r2,r3   
 1343 0a7c 00B5FFF7 	   _CALL kword_cmp  
 1343      DBFF5DF8 
 1343      04EB
 1344 0a86 18B9     	   cbnz r0,2f 
 1345 0a88 4946     	   mov r1,T2
 1346 0a8a 51F80C1C 	   ldr r1,[r1,#-12]
 1347 0a8e F0E7     	   b 1b   
 1348              	2: // found
 1349 0a90 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
ARM GAS  tinyBasic.s 			page 40


 1350 0a94 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1351 0a98 BDE80C03 	9: pop {r2,r3,T1,T2}
 1352 0a9c 7047     	   _RET 
 1353              	
 1354              	
 1355              	/**************************
 1356              	    INTERPRETER 
 1357              	*************************/
 1358              	
 1359              	/*********************************
 1360              	   cold_start 
 1361              	   initialize BASIC interpreter 
 1362              	   never leave 
 1363              	   input:
 1364              	     none 
 1365              	   output:
 1366              	    none 
 1367              	*********************************/
 1368              	  .type cold_start, %function 
 1369              	  .global cold_start 
 1370              	cold_start: 
 1371 0a9e 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1371      C2F20004 
 1372 0aa6 DFF84400 	    ldr r0,src_addr 
 1373 0aaa 1149     	    ldr r1,dest_addr
 1374 0aac 0968     	    ldr r1,[r1] 
 1375 0aae 0C44     	    add UPP,r1 // system variables base address   
 1376              	// clear RAM
 1377 0ab0 2046     	    mov r0,UPP  
 1378 0ab2 DFF85C11 	    ldr r1,tib 
 1379 0ab6 82EA0202 	    eor r2,r2 
 1380 0aba 40F8042B 	1:  str r2,[r0],#4 
 1381 0abe 8842     	    cmp r0,r1 
 1382 0ac0 FBD4     	    bmi 1b 
 1383              	//copy initialized system variables to ram 
 1384 0ac2 DFF82800 	    ldr r0,src_addr 
 1385 0ac6 2146     	    mov r1,UPP 
 1386 0ac8 DFF82820 	    ldr r2,sysvar_size
 1387 0acc 00B5FFF7 	    _CALL cmove
 1387      FEFF5DF8 
 1387      04EB
 1388 0ad6 00B500F0 	    _CALL prt_version
 1388      0EF85DF8 
 1388      04EB
 1389 0ae0 00B500F0 	    _CALL clear_basic  
 1389      5DF85DF8 
 1389      04EB
 1390 0aea 9BE0     	    b warm_start    
 1391              	src_addr:
 1392 0aec 00000000 	  .word uzero
 1393              	dest_addr:
 1394 0af0 00000000 	  .word vectors_size
 1395 0af4 CC000000 	sysvar_size: .word ulast-uzero 
 1396              	
 1397              	/************************************
 1398              	    print firmware version 
 1399              	    input: 
ARM GAS  tinyBasic.s 			page 41


 1400              	      none 
 1401              	    output:
 1402              	      none 
 1403              	    use:
 1404              	      r0 
 1405              	***********************************/
 1406              	    _FUNC prt_version 
 1407 0af8 DFF8DC05 	    ldr r0,=version_msg 
 1408 0afc 00B5FFF7 	    _CALL uart_puts
 1408      FEFF5DF8 
 1408      04EB
 1409 0b06 9FF87800 	    ldrb r0,version 
 1410 0b0a 4FEA1010 	    lsr r0,#4 
 1411 0b0e 00F13000 	    add r0,#'0' 
 1412 0b12 3A28     	    cmp r0,#'9'+1 
 1413 0b14 01D4     	    bmi 1f 
 1414 0b16 00F10700 	    add r0,#7 
 1415              	  1:
 1416 0b1a 00B5FFF7 	    _CALL uart_putc 
 1416      FEFF5DF8 
 1416      04EB
 1417 0b24 4FF02E00 	    mov r0,#'. 
 1418 0b28 00B5FFF7 	    _CALL uart_putc 
 1418      FEFF5DF8 
 1418      04EB
 1419 0b32 9FF84C00 	    ldrb r0,version 
 1420 0b36 00F00F00 	    and r0,#15 
 1421 0b3a 00F13000 	    add r0,'0' 
 1422 0b3e 3A28     	    cmp r0,#'9'+1 
 1423 0b40 01D4     	    bmi 1f 
 1424 0b42 00F10700 	    add r0,#7
 1425              	  1: 
 1426 0b46 00B5FFF7 	    _CALL uart_putc 
 1426      FEFF5DF8 
 1426      04EB
 1427 0b50 4FF00D00 	    mov r0,#CR 
 1428 0b54 00B5FFF7 	    _CALL uart_putc 
 1428      FEFF5DF8 
 1428      04EB
 1429 0b5e 7047     	    _RET  
 1430              	version_msg:
 1431 0b60 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1431      65207069 
 1431      6C6C2074 
 1431      696E7920 
 1431      42415349 
 1432              	version:
 1433 0b80 10       	    .byte 0x10 
 1434 0b81 0000BF   	    .p2align 2 
 1435              	
 1436              	
 1437              	/*****************************
 1438              	    clear_vars 
 1439              	    initialize variables to 0
 1440              	  input:
 1441              	    none 
 1442              	  output:
ARM GAS  tinyBasic.s 			page 42


 1443              	    none 
 1444              	  use:
 1445              	    r0,r1,r2 
 1446              	*****************************/
 1447              	    _FUNC clear_vars 
 1448 0b84 07B4     	    push {r0,r1,r2}
 1449 0b86 80EA0000 	    eor r0,r0 
 1450 0b8a 04F16001 	    add r1,UPP,#VARS
 1451 0b8e 4FF01A02 	    mov r2,#26
 1452 0b92 41F8040B 	1:  str r0,[r1],#4 
 1453 0b96 013A     	    subs r2,#1
 1454 0b98 FBD1     	    bne 1b  
 1455 0b9a 07BC     	    pop {r0,r1,r2}
 1456 0b9c 7047     	    _RET 
 1457              	
 1458              	/*****************************
 1459              	   clear_basic 
 1460              	   reset BASIC system variables 
 1461              	   and clear variables and RAM 
 1462              	*****************************/
 1463 0b9e 00BF     	    _FUNC clear_basic
 1464 0ba0 80EA0000 	  	eor r0,r0
 1465 0ba4 2064     	    str r0,[UPP,#FLAGS] 
 1466 0ba6 6060     	    str r0,[UPP,#COUNT]
 1467 0ba8 2060     	    str r0,[UPP,#IN_SAVED]
 1468 0baa A060     	    str r0,[UPP,#BASICPTR]
 1469 0bac E060     	    str r0,[UPP,#DATAPTR]
 1470 0bae 2061     	    str r0,[UPP,#DATA]
 1471 0bb0 6061     	    str r0,[UPP,#DATALEN]
 1472 0bb2 04F1CC00 	    add r0,UPP,#BASIC_START 
 1473 0bb6 00F11000 	    add r0,#16 
 1474 0bba 6FF00F01 	    mvn r1,#15
 1475 0bbe 00EA0100 	    and r0,r1 
 1476 0bc2 2063     	    str r0,[UPP,#TXTBGN]
 1477 0bc4 6063     	    str r0,[UPP,#TXTEND]
 1478 0bc6 00B5FFF7 	    _CALL clear_vars
 1478      DCFF5DF8 
 1478      04EB
 1479 0bd0 206B     	    ldr r0,[UPP,#TXTBGN]
 1480 0bd2 DFF83C10 	    ldr r1,tib 
 1481 0bd6 82EA0202 	    eor r2,r2 
 1482 0bda 40F8042B 	1:  str r2,[r0],#4
 1483 0bde 8842     	    cmp r0,r1 
 1484 0be0 FBD4     	    bmi 1b 
 1485 0be2 7047     	    _RET  
 1486              	
 1487              	/***********************************
 1488              	   warm_init 
 1489              	   initialize interpreter context 
 1490              	  input:
 1491              	    none
 1492              	  output:
 1493              	    none 
 1494              	  use:
 1495              	    r0 
 1496              	***********************************/
 1497              	warm_init:
ARM GAS  tinyBasic.s 			page 43


 1498              	// reset data stack       
 1499 0be4 DFF824C0 	    ldr DP,dstack 
 1500 0be8 4FF0000A 	    mov IN,#0 // BASIC line index 
 1501 0bec 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1502 0bf0 80EA0000 	    eor r0,r0 
 1503 0bf4 6060     	    str r0,[UPP,#COUNT]  
 1504 0bf6 2064     	    str r0,[UPP,#FLAGS]
 1505 0bf8 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1506 0bfa 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1507 0bfe 6064     	    str r0,[UPP,#TAB_WIDTH]
 1508 0c00 4FF00A00 	    mov r0,#10 // default base decimal 
 1509 0c04 A061     	    str r0,[UPP,#BASE]
 1510 0c06 7047     	    _RET  
 1511              	
 1512 0c08 00000000 	mstack: .word _mstack 
 1513 0c0c 00000000 	dstack: .word _dstack 
 1514 0c10 00000000 	tib: .word _tib 
 1515 0c14 00000000 	pad: .word _pad 
 1516 0c18 FCFFFFFF 	array: .word _pad - 4 
 1517 0c1c 0A524541 	ready: .asciz "\nREADY" 
 1517      445900
 1518              	
 1519              	/**********************************
 1520              	    warm_start 
 1521              	    start BASIC interpreter doesn't  
 1522              	    reset variables and code space 
 1523              	  input:
 1524              	    none 
 1525              	  output:
 1526              	    none 
 1527              	**********************************/
 1528 0c23 00       	    _FUNC warm_start 
 1529              	// initialise parameters stack
 1530 0c24 FFF7DEFF 	    bl warm_init
 1531              	// reset main stack 
 1532 0c28 5FF82400 	    ldr r0,mstack
 1533 0c2c 8546     	    mov sp,r0 
 1534 0c2e DFF8AC04 	    ldr r0,=ready 
 1535 0c32 00B5FFF7 	    _CALL uart_puts 
 1535      FEFF5DF8 
 1535      04EB
 1536              	// fall in cmd_line 
 1537              	
 1538              	/**********************************
 1539              	   cmd_line 
 1540              	   shell command line 
 1541              	   input:
 1542              	      none 
 1543              	   output:
 1544              	      none 
 1545              	   use:
 1546              	
 1547              	***********************************/
 1548              	    _FUNC cmd_line 
 1549 0c3c 4FF00D00 	    mov r0,#CR 
 1550 0c40 00B5FFF7 	    _CALL uart_putc 
 1550      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 44


 1550      04EB
 1551 0c4a 5FF83C00 	1:  ldr r0,tib
 1552 0c4e 4FF05001 	    mov r1,#TIB_SIZE 
 1553 0c52 00B5FFF7 	    _CALL readln 
 1553      FEFF5DF8 
 1553      04EB
 1554 0c5c 0940     	    ands r1,r1 // empty line 
 1555 0c5e F4D0     	    beq 1b 
 1556 0c60 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1556      DFFA5DF8 
 1556      04EB
 1557 0c6a EED0     	    beq 1b  // tokens stored in text area 
 1558              	// interpret tokenized line 
 1559              	interpreter:
 1560 0c6c 00B500F0 	  _CALL next_token 
 1560      23F85DF8 
 1560      04EB
 1561 0c76 0028     	  cmp r0,#TK_NONE 
 1562 0c78 F8D0     	  beq interpreter   
 1563 0c7a 0A28     	  cmp r0,#TK_CMD 
 1564 0c7c 03D1     	  bne 2f
 1565 0c7e 0846     	  mov r0,r1 
 1566 0c80 00F014F8 	  bl execute  
 1567 0c84 F2E7     	  b interpreter   
 1568              	2: 
 1569 0c86 0428     	  cmp r0,#TK_VAR 
 1570 0c88 05D1     	  bne 3f 
 1571 0c8a 00B500F0 	  _CALL let_var 
 1571      85FA5DF8 
 1571      04EB
 1572 0c94 EAE7     	  b interpreter 
 1573              	3: 
 1574 0c96 0528     	  cmp r0,#TK_ARRAY 
 1575 0c98 05D1     	  bne 4f
 1576 0c9a 00B500F0 	  _CALL let_array 
 1576      8BFA5DF8 
 1576      04EB
 1577 0ca4 E2E7     	  b interpreter
 1578              	4: 
 1579 0ca6 0128     	  cmp r0,#TK_COLON
 1580 0ca8 E0D0     	  beq interpreter
 1581 0caa FDE5     	  b syntax_error
 1582              	
 1583              	/*****************************
 1584              	    execute 
 1585              	    execute a BASIC routine from 
 1586              	    its token value 
 1587              	  input:
 1588              	    r0  BASIC SUB|FUNC token  
 1589              	  output: 
 1590              	    depend on SUB|FUNc
 1591              	*****************************/
 1592              	    _FUNC execute 
 1593 0cac DFF83014 	    ldr r1,=fn_table 
 1594 0cb0 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1595 0cb4 0047     	    bx r0 
 1596              	
ARM GAS  tinyBasic.s 			page 45


 1597              	/*************************************
 1598              	  next_token 
 1599              	  extract next token from token list 
 1600              	  input:
 1601              	    none 
 1602              	  output:
 1603              	    r0    token attribute
 1604              	    r1    token value if there is one 
 1605              	  use:
 1606              	    T1    exit token type  
 1607              	****************************/
 1608 0cb6 00BF     	    _FUNC next_token 
 1609 0cb8 4DF8048D 	    push {T1}
 1610 0cbc 88EA0808 	    eor T1,T1 // TK_NONE 
 1611 0cc0 6068     	    ldr r0,[UPP,#COUNT]
 1612 0cc2 8245     	    cmp IN,r0 
 1613 0cc4 0FD4     	    bmi 0f
 1614              	new_line:
 1615 0cc6 BBF80010 	    ldrh r1,[BPTR] // line #
 1616 0cca 01B9     	    cbnz r1, end_of_line  // command line
 1617 0ccc AAE7     	    b warm_start
 1618              	end_of_line:        
 1619 0cce 8344     	    add BPTR,r0 // next line 
 1620 0cd0 606B     	    ldr r0,[UPP,#TXTEND]
 1621 0cd2 8345     	    cmp BPTR,r0 
 1622 0cd4 A6D5     	    bpl warm_start // end of program
 1623 0cd6 9BF80200 	    ldrb r0,[BPTR,#2]
 1624 0cda 6060     	    str r0,[UPP,#COUNT] 
 1625 0cdc 4FF0030A 	    mov IN,#3
 1626 0ce0 4FF00100 	    mov r0,#TK_COLON 
 1627 0ce4 2AE0     	    b 9f    
 1628              	0: 
 1629 0ce6 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1630 0cea C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1631 0cee 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1632 0cf2 0AF1010A 	    add IN,#1  
 1633 0cf6 8046     	    mov T1,r0 
 1634 0cf8 00F03F00 	    and r0,#0x3f // limit mask 
 1635 0cfc F949     	    ldr r1,=tok_jmp 
 1636 0cfe D1E800F0 	    tbb [r1,r0]
 1637              	1: // pc reference point 
 1638 0d02 1BE0     	    b 9f 
 1639              	2: // .byte param
 1640 0d04 1BF80A10 	    ldrb r1,[BPTR,IN]
 1641 0d08 0AF1010A 	    add IN,#1 
 1642 0d0c 16E0     	    b 9f 
 1643              	3: // .hword param 
 1644 0d0e 3BF80A10 	    ldrh r1,[BPTR,IN]
 1645 0d12 0AF1020A 	    add IN,#2 
 1646 0d16 11E0     	    b 9f 
 1647              	4: // .word param  
 1648 0d18 5BF80A10 	    ldr r1,[BPTR,IN]
 1649 0d1c 0AF1040A 	    add IN,#4
 1650 0d20 0CE0     	    b 9f 
 1651              	5: // .asciz param 
 1652 0d22 0BEB0A01 	    add r1,BPTR,IN 
 1653 0d26 0846     	    mov r0,r1  
ARM GAS  tinyBasic.s 			page 46


 1654 0d28 00B5FFF7 	    _CALL strlen 
 1654      FEFF5DF8 
 1654      04EB
 1655 0d32 8244     	    add IN,r0
 1656 0d34 0AF1010A 	    add IN,#1
 1657 0d38 00E0     	    b 9f  
 1658              	8: // syntax error 
 1659 0d3a B5E5     	    b syntax_error 
 1660 0d3c 4046     	9:  mov r0,T1  
 1661 0d3e 5DF8048B 	    pop {T1}
 1662 0d42 7047     	    _RET
 1663              	
 1664              	  .p2align 2
 1665              	tok_jmp: // token id  tbb offset 
 1666 0d44 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1667 0d46 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1668 0d4a 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1669 0d4e 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1670 0d52 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1671 0d56 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1671      1C
 1672 0d5b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1672      1C1C
 1673 0d61 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1674 0d64 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1675 0d67 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1675      1C1C1C1C 
 1676 0d6f 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1676      1C1C
 1677 0d75 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1677      1D1D
 1678 0d7b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1678      1C1C1C1C 
 1678      1C
 1679              	
 1680              	  .p2align 2 
 1681              	
 1682              	/*********************************
 1683              	    expect 
 1684              	    check if next token is of 
 1685              	    expected type. If not 
 1686              	    call syntax_error  
 1687              	  input:
 1688              	      r0   token attribute
 1689              	  output:
 1690              	      r0  token attribute 
 1691              	      r1  token value
 1692              	  use:
 1693              	      T1   
 1694              	**********************************/
 1695              	    _FUNC expect 
 1696 0d84 4DF8048D 	    push {T1}
 1697 0d88 8046     	    mov T1,r0 
 1698 0d8a 00B5FFF7 	    _CALL next_token 
 1698      94FF5DF8 
 1698      04EB
 1699 0d94 4045     	    cmp r0,T1  
ARM GAS  tinyBasic.s 			page 47


 1700 0d96 7FF487AD 	    bne syntax_error 
 1701 0d9a 5DF8048B 	    pop {T1}
 1702 0d9e 7047     	    _RET 
 1703              	
 1704              	/***********************************
 1705              	    func_args 
 1706              	    get function arguments list 
 1707              	  input:
 1708              	    none 
 1709              	  output:
 1710              	    r0    arg. count 
 1711              	  use:
 1712              	
 1713              	************************************/
 1714              	    _FUNC func_args 
 1715 0da0 4FF00600 	    mov r0,#TK_LPAREN 
 1716 0da4 00B5FFF7 	    _CALL expect 
 1716      EDFF5DF8 
 1716      04EB
 1717 0dae 00B500F0 	    _CALL arg_list 
 1717      0CF85DF8 
 1717      04EB
 1718 0db8 01B4     	    push {r0}
 1719 0dba 4FF00700 	    mov r0,#TK_RPAREN 
 1720 0dbe 00B5FFF7 	    _CALL expect 
 1720      E0FF5DF8 
 1720      04EB
 1721 0dc8 01BC     	    pop {r0}
 1722 0dca 7047     	    _RET 
 1723              	
 1724              	/**********************************
 1725              	    arg_list 
 1726              	    get arguments list on dstack 
 1727              	  input:
 1728              	    none 
 1729              	  output:
 1730              	    r0    arg count
 1731              	  use:
 1732              	    T1    tmp count  
 1733              	***********************************/
 1734              	    _FUNC arg_list 
 1735 0dcc 4DF8048D 	    push {T1}
 1736 0dd0 88EA0808 	    eor T1,T1 
 1737 0dd4 00B500F0 	1:  _CALL expression 
 1737      C9F85DF8 
 1737      04EB
 1738 0dde 0028     	    cmp R0,#TK_NONE 
 1739 0de0 10D0     	    beq 9f 
 1740 0de2 0E28     	    cmp r0,#TK_INTGR
 1741 0de4 0ED1     	    bne 9f 
 1742 0de6 4CF8041D 	    _PUSH r1 
 1743 0dea 08F10108 	    add T1,#1 
 1744 0dee 00B5FFF7 	    _CALL next_token 
 1744      62FF5DF8 
 1744      04EB
 1745 0df8 0828     	    cmp r0,#TK_COMMA 
 1746 0dfa EBD0     	    beq 1b 
ARM GAS  tinyBasic.s 			page 48


 1747 0dfc D4F800A0 	    _UNGET_TOKEN 
 1747      D4F808B0 
 1748 0e04 4046     	9:  mov r0,T1 
 1749 0e06 5DF8048B 	    pop {T1}
 1750 0e0a 7047     	    _RET 
 1751              	
 1752              	/***********************************
 1753              	 factor
 1754              	 arithmetick factor parser 
 1755              	 factor ::= ['+'|'-'|e]  var | @ |
 1756              				 integer | function |
 1757              				 '('expression')' 
 1758              	  input: 
 1759              	    none 
 1760              	  output:
 1761              	    r0   token attribute 
 1762              	    r1   token value 
 1763              	  use:
 1764              	    r2   temp 
 1765              	    T1   sign 
 1766              	    T2   exit token attribute 
 1767              	***********************************/
 1768              	    _FUNC factor 
 1769 0e0c 2DE90403 	    push {r2,T1,T2}
 1770 0e10 4FF00E09 	    mov T2,#TK_INTGR 
 1771 0e14 4FF00108 	    mov T1,#1 // default sign +  
 1772 0e18 00B5FFF7 	    _CALL next_token
 1772      4DFF5DF8 
 1772      04EB
 1773 0e22 0246     	    mov r2,r0 
 1774 0e24 00F03000 	    and r0,#TK_GRP_MASK 
 1775 0e28 1028     	    cmp r0,#TK_GRP_ADD
 1776 0e2a 1046     	    mov r0,r2
 1777 0e2c 08D1     	    bne 1f 
 1778 0e2e 1028     	    cmp r0,#TK_PLUS 
 1779 0e30 01D0     	    beq 0f 
 1780 0e32 4FF0FF38 	    mov T1,#-1 // minus sign 
 1781 0e36 00B5FFF7 	0:  _CALL next_token
 1781      3EFF5DF8 
 1781      04EB
 1782 0e40 0E28     	1:  cmp r0,#TK_INTGR 
 1783 0e42 4ED0     	    beq 8f 
 1784 0e44 0528     	    cmp r0,#TK_ARRAY 
 1785 0e46 1ED1     	    bne 2f 
 1786 0e48 4FF00600 	    mov r0,#TK_LPAREN 
 1787 0e4c 00B5FFF7 	    _CALL expect 
 1787      99FF5DF8 
 1787      04EB
 1788 0e56 00B500F0 	    _CALL expression
 1788      88F85DF8 
 1788      04EB
 1789 0e60 0E28     	    cmp r0,#TK_INTGR
 1790 0e62 7FF421AD 	    bne syntax_error
 1791 0e66 8146     	    mov T2,r0
 1792 0e68 0A46     	    mov r2,r1  
 1793 0e6a 4FF00700 	    mov r0,#TK_RPAREN
 1794 0e6e 00B5FFF7 	    _CALL expect 
ARM GAS  tinyBasic.s 			page 49


 1794      88FF5DF8 
 1794      04EB
 1795 0e78 1046     	    mov r0,r2 
 1796 0e7a 00B500F0 	    _CALL get_array_element 
 1796      ECF85DF8 
 1796      04EB
 1797 0e84 2DE0     	    b 8f
 1798 0e86 0628     	2:  cmp r0,#TK_LPAREN 
 1799 0e88 12D1     	    bne 3f 
 1800 0e8a 00B500F0 	    _CALL expression 
 1800      6EF85DF8 
 1800      04EB
 1801 0e94 0E28     	    cmp r0,#TK_INTGR 
 1802 0e96 7FF407AD 	    bne syntax_error
 1803 0e9a 8146     	    mov T2,r0
 1804 0e9c 0A46     	    mov r2,r1   
 1805 0e9e 4FF00700 	    mov r0,#TK_RPAREN
 1806 0ea2 00B5FFF7 	    _CALL expect 
 1806      6EFF5DF8 
 1806      04EB
 1807 0eac 1146     	    mov r1,r2 
 1808 0eae 18E0     	    b 8f       
 1809 0eb0 0428     	3:  cmp r0,#TK_VAR 
 1810 0eb2 06D1     	    bne 4f
 1811 0eb4 0846     	    mov r0,r1  
 1812 0eb6 00B500F0 	    _CALL get_var 
 1812      E2F85DF8 
 1812      04EB
 1813 0ec0 0FE0     	    b 8f 
 1814 0ec2 0B28     	4:  cmp r0,#TK_IFUNC 
 1815 0ec4 06D1     	    bne 6f 
 1816 0ec6 0846     	5:  mov r0,r1  
 1817 0ec8 00B5FFF7 	    _CALL execute
 1817      EFFE5DF8 
 1817      04EB
 1818 0ed2 06E0     	    b 8f 
 1819 0ed4 D4F800A0 	6:  _UNGET_TOKEN      
 1819      D4F808B0 
 1820 0edc 4FF00000 	    mov r0,#TK_NONE
 1821 0ee0 03E0     	    b 9f  
 1822 0ee2 08FB01F1 	8:  mul r1,T1 
 1823 0ee6 5FEA0900 	    movs r0,T2 
 1824 0eea BDE80403 	9:  pop {r2,T1,T2}   
 1825 0eee 7047     	    _RET 
 1826              	
 1827              	
 1828              	/*****************************************
 1829              	    term 
 1830              	    term parser 
 1831              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1832              	    output:
 1833              	      r0  	token attribute 
 1834              	      r1		integer
 1835              	    use:
 1836              	      r2    first operand 
 1837              	      r3    temp 
 1838              	      T1    operator 
ARM GAS  tinyBasic.s 			page 50


 1839              	      T2    exit token attribute 
 1840              	******************************************/
 1841              	     _FUNC term 
 1842 0ef0 2DE90C03 	    push {r2,r3,T1,T2}
 1843 0ef4 4FF00009 	    mov T2,#TK_NONE 
 1844 0ef8 00B5FFF7 	    _CALL factor
 1844      87FF5DF8 
 1844      04EB
 1845 0f02 60B3     	    cbz r0, 9f  // no factor   
 1846 0f04 8146     	    mov T2,r0  // TK_INTGR 
 1847 0f06 0A46     	    mov r2,r1 // first factor    
 1848 0f08 00B5FFF7 	0:  _CALL next_token
 1848      D5FE5DF8 
 1848      04EB
 1849 0f12 0346     	    mov r3,r0   
 1850 0f14 00F03000 	    and r0,#TK_GRP_MASK 
 1851 0f18 2028     	    cmp r0,#TK_GRP_MULT
 1852 0f1a 04D0     	    beq 1f
 1853 0f1c D4F800A0 	    _UNGET_TOKEN
 1853      D4F808B0 
 1854 0f24 1BE0     	    b 9f 
 1855 0f26 9846     	1:  mov T1,r3 
 1856 0f28 00B5FFF7 	    _CALL factor  
 1856      6FFF5DF8 
 1856      04EB
 1857 0f32 3FF4B9AC 	    beq syntax_error 
 1858 0f36 B8F1200F 	    cmp T1,#TK_MULT
 1859 0f3a 02D1     	    bne 2f 
 1860              	// multiplication
 1861 0f3c 01FB02F2 	    mul r2,r1
 1862 0f40 E2E7     	    b 0b  
 1863 0f42 B8F1210F 	2:  cmp T1,#TK_DIV 
 1864 0f46 02D1     	    bne 3f
 1865              	// division
 1866 0f48 92FBF1F2 	    sdiv r2,r2,r1
 1867 0f4c DCE7     	    b 0b  
 1868              	3: // modulo
 1869 0f4e 1046     	    mov r0,r2 
 1870 0f50 92FBF1F2 	    sdiv r2,r2,r1 
 1871 0f54 01FB02F2 	    mul  r2,r1 
 1872 0f58 A0EB0202 	    sub  r2,r0,r2
 1873 0f5c D4E7     	    b 0b  
 1874 0f5e 1146     	9:  mov r1,r2 
 1875 0f60 5FEA0900 	    movs r0,T2 
 1876 0f64 BDE80C03 	    pop {r2,r3,T1,T2}
 1877 0f68 7047     	    _RET 
 1878              	
 1879              	/*****************************************
 1880              	    expression 
 1881              	    arithmetic expression parser 
 1882              	    expression ::= term [['+'|'-'] term]*
 1883              	    result range {-32768..32767}
 1884              	    output:
 1885              	      r0    TK_NONE || TK_INTGR 
 1886              	      r1 	  integer
 1887              	    use:
 1888              	      r2  left operand 
ARM GAS  tinyBasic.s 			page 51


 1889              	      T1  operator 
 1890              	      T2  exit token attribute
 1891              	******************************************/
 1892 0f6a 00BF     	    _FUNC expression 
 1893 0f6c 2DE90403 	    push {r2,t1,t2}
 1894 0f70 4FF00009 	    mov T2,#TK_NONE
 1895 0f74 82EA0202 	    eor r2,r2 // zero 
 1896 0f78 00B5FFF7 	    _CALL term 
 1896      B9FF5DF8 
 1896      04EB
 1897 0f82 21D0     	    beq 9f  // no term  
 1898 0f84 0A46     	    mov r2,r1 // first term
 1899 0f86 4FF00E09 	    mov T2,#TK_INTGR    
 1900 0f8a 00B5FFF7 	1:  _CALL next_token 
 1900      94FE5DF8 
 1900      04EB
 1901 0f94 8046     	    mov T1,r0 // token attribute 
 1902 0f96 00F03000 	    and r0,#TK_GRP_MASK 
 1903 0f9a 1028     	    cmp r0,#TK_GRP_ADD 
 1904 0f9c 04D0     	    beq 3f 
 1905 0f9e D4F800A0 	    _UNGET_TOKEN
 1905      D4F808B0 
 1906 0fa6 0FE0     	    b 9f  
 1907 0fa8 00B5FFF7 	3:  _CALL term 
 1907      A1FF5DF8 
 1907      04EB
 1908 0fb2 0E28     	    cmp r0,#TK_INTGR 
 1909 0fb4 7FF478AC 	    bne syntax_error 
 1910 0fb8 B8F1100F 	    cmp T1,#TK_PLUS 
 1911 0fbc 02D0     	    beq 4f 
 1912 0fbe A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1913 0fc2 E2E7     	    b 1b 
 1914 0fc4 0A44     	4:  add r2,r2,r1 // N1+N2
 1915 0fc6 E0E7     	    b 1b
 1916 0fc8 4846     	9:  mov r0,T2 
 1917 0fca 1146     	    mov r1,r2 
 1918 0fcc BDE80403 	    pop {r2,t1,t2}
 1919 0fd0 7047     	    _RET 
 1920              	
 1921              	
 1922              	/**********************************************
 1923              	    relation parser 
 1924              	    rel ::= expr1 rel_op expr2
 1925              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1926              	    relation return  integer , zero is false 
 1927              	    output:
 1928              	        r0	TK_INTGR  
 1929              	        r1	integer 
 1930              	    use:
 1931              	        r2   first operand 
 1932              	        T1   relop   
 1933              	**********************************************/
 1934 0fd2 00BF     	    _FUNC relation 
 1935 0fd4 2DE90401 	    push {r2,T1}
 1936 0fd8 00B5FFF7 	    _CALL expression 
 1936      C7FF5DF8 
 1936      04EB
ARM GAS  tinyBasic.s 			page 52


 1937 0fe2 0E28     	    cmp r0,#TK_INTGR 
 1938 0fe4 7FF460AC 	    bne syntax_error 
 1939 0fe8 0A46     	    mov r2,r1  // first operand  
 1940 0fea 00B5FFF7 	    _CALL next_token 
 1940      64FE5DF8 
 1940      04EB
 1941 0ff4 8046     	    mov T1,r0  // relop  
 1942 0ff6 00F03000 	    and r0,#TK_GRP_MASK 
 1943 0ffa 3028     	    cmp r0,#TK_GRP_RELOP 
 1944 0ffc 1DD1     	    bne 8f  // single operand 
 1945 0ffe 00B5FFF7 	    _CALL expression 
 1945      B4FF5DF8 
 1945      04EB
 1946 1008 0E28     	    cmp r0,#TK_INTGR 
 1947 100a 7FF44DAC 	    bne syntax_error 
 1948 100e 8A42     	    cmp r2,r1 // compare operands  
 1949 1010 4FF0FF31 	    mov r1,#-1 
 1950 1014 344A     	    ldr r2,=relop_jmp
 1951 1016 08F00708 	    and T1,#7 // {1..6}
 1952 101a D2E808F0 	    tbb [r2,T1]    
 1953              	rel_idx0:
 1954              	rel_eq:
 1955 101e 11D0     	    beq 9f 
 1956 1020 08E0     	    b rel_false
 1957              	rel_lt: 
 1958 1022 0FDB     	    blt 9f   
 1959 1024 06E0     	    b rel_false 
 1960              	rel_le:
 1961 1026 0DDD     	    ble 9f  
 1962 1028 04E0     	    b rel_false 
 1963              	rel_gt:
 1964 102a 0BDC     	    bgt 9f  
 1965 102c 02E0     	    b rel_false  
 1966              	rel_ge:
 1967 102e 09DA     	    bge 9f  
 1968 1030 00E0     	    b rel_false  
 1969              	rel_diff:
 1970 1032 07D1     	    bne 9f 
 1971              	rel_false:    
 1972 1034 81EA0101 	    eor r1,r1  // false
 1973 1038 04E0     	    b 9f  
 1974 103a D4F800A0 	8:  _UNGET_TOKEN 
 1974      D4F808B0 
 1975 1042 1146     	    mov r1,r2    
 1976 1044 4FF00E00 	9:  mov r0,#TK_INTGR
 1977 1048 BDE80401 	    pop {r2,T1}
 1978 104c 7047     	    _RET 
 1979              	
 1980              	
 1981              	relop_jmp: 
 1982 104e 00       	  .byte 0 
 1983 104f 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1984 1050 00       	  .byte 0 // =
 1985 1051 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1986 1052 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1987 1053 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1988 1054 04       	  .byte (rel_le-rel_idx0)/2  // <=
ARM GAS  tinyBasic.s 			page 53


 1989              	
 1990              	
 1991              	/***********************************
 1992              	    get_array_element
 1993              	    return value of @(n)
 1994              	  input:
 1995              	    r0    indice 
 1996              	  output:
 1997              	    r0   TK_INTGR
 1998              	    r1   value  
 1999              	************************************/
 2000 1055 0000BF   	    _FUNC get_array_element 
 2001 1058 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2002 105c 4FEA8000 	    lsl r0,#2 
 2003 1060 C0EB0100 	    rsb r0,r1 
 2004 1064 0168     	    ldr r1,[r0]
 2005 1066 4FF00E00 	    mov r0,#TK_INTGR 
 2006 106a 7047     	    _RET 
 2007              	
 2008              	
 2009              	/***********************************
 2010              	    set_array_element 
 2011              	    set value of array element 
 2012              	  input:
 2013              	    r0   index 
 2014              	    r1   new value 
 2015              	  output:
 2016              	    none
 2017              	  use:
 2018              	    r2    array pointer 
 2019              	**********************************/
 2020              	    _FUNC set_array_element 
 2021 106c 04B4     	    push {r2}
 2022 106e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2023 1072 4FEA8000 	    lsl r0,#2 
 2024 1076 A1EB0001 	    sub r1,r0 
 2025 107a 0960     	    str r1,[r1]
 2026 107c 04BC     	    pop {r2}
 2027 107e 7047     	    _RET 
 2028              	
 2029              	/***********************************
 2030              	   get_var 
 2031              	   get variable value 
 2032              	  input:
 2033              	     r0    variable index {0..25}
 2034              	  output:
 2035              	     r0    TK_INTGR
 2036              	     r1    value 
 2037              	**********************************/
 2038              	    _FUNC get_var 
 2039 1080 04F16001 	    add r1,UPP,#VARS
 2040 1084 4FEA8000 	    lsl r0,#2 
 2041 1088 0958     	    ldr r1,[r1,r0]
 2042 108a 4FF00E00 	    mov r0,#TK_INTGR
 2043 108e 7047     	    _RET 
 2044              	
 2045              	/*********************************
ARM GAS  tinyBasic.s 			page 54


 2046              	    set_var 
 2047              	    set variable value 
 2048              	  input:
 2049              	     r0    variable index {0..25}
 2050              	     r1    new value 
 2051              	  output:
 2052              	    none 
 2053              	  use:
 2054              	    r2   vars pointer 
 2055              	*********************************/
 2056              	    _FUNC set_var 
 2057 1090 04B4     	    push {r2}
 2058 1092 226E     	    ldr r2,[UPP,#VARS]
 2059 1094 4FEA8000 	    lsl r0,#2
 2060 1098 1150     	    str r1,[r2,r0]
 2061 109a 04BC     	    pop {r2}
 2062 109c 7047     	    _RET 
 2063              	
 2064              	/******************************
 2065              	    CONSTANTS data
 2066              	******************************/
 2067              	
 2068 109e 0000     	  .section .rodata 
 2069              	
 2070              	// system variables initial value 
 2071              	uzero:
 2072 0000 00000000 	  .word 0 // IN_SAVED
 2073 0004 00000000 	  .word 0 // COUNT
 2074 0008 00000000 	  .word 0 // BASICPTR
 2075 000c 00000000 	  .word 0 // DATAPTR
 2076 0010 00000000 	  .word 0 // DATA
 2077 0014 00000000 	  .word 0 // DATALEN
 2078 0018 0A000000 	  .word 10 // BASE
 2079 001c 00000000 	  .word 0 // TICKS
 2080 0020 00000000 	  .word 0 // TIMER
 2081 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2082 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2083 002c 00000000 	  .word 0 // FFREE
 2084 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2085 0034 CC000000 	  .word ulast-uzero // TXTEND
 2086 0038 00000000 	  .word 0 //LOOP_DEPTH
 2087 003c 00000000 	  .word 0 // ARRAY_SIZE
 2088 0040 00000000 	  .word 0 // FLAGS
 2089 0044 04000000 	  .word 4 // TAB_WIDTH
 2090 0048 00000000 	  .word 0 // RX_HEAD
 2091 004c 00000000 	  .word 0 // RX_TAIL
 2092 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2092      00000000 
 2092      00000000 
 2092      00000000 
 2093 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2093      00000000 
 2094 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2095              	ulast:
ARM GAS  tinyBasic.s 			page 55


 2096              	
 2097              	  .section .rodata.dictionary 
 2098              	
 2099              	// keep alphabetic order for BASIC names from Z-A
 2100              	// this sort order is for for WORDS cmd output. 	
 2101              	
 2102              		.equ link, 0
 2103              	kword_end:
 2104 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2104      00000000 
 2104      00000000 
 2104      00000000 
 2105 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2105      64000000 
 2105      0A000000 
 2105      5854524D 
 2105      54000000 
 2106 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2106      65000000 
 2106      0A000000 
 2106      58524356 
 2106      00000000 
 2107 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2107      63000000 
 2107      0B000000 
 2107      584F5200 
 2108 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2108      62000000 
 2108      0A000000 
 2108      57524954 
 2108      45000000 
 2109 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2109      61000000 
 2109      0A000000 
 2109      574F5244 
 2109      53000000 
 2110 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2110      60000000 
 2110      0A000000 
 2110      57414954 
 2110      00000000 
 2111 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2111      5F000000 
 2111      0B000000 
 2111      55535200 
 2112 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2112      5E000000 
 2112      0A000000 
 2112      554E5449 
 2112      4C000000 
 2113 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2113      5D000000 
 2113      0B000000 
 2113      55464C41 
 2113      53480000 
 2114 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2114      5C000000 
ARM GAS  tinyBasic.s 			page 56


 2114      0B000000 
 2114      55424F55 
 2114      4E440000 
 2115 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2115      5B000000 
 2115      0A000000 
 2115      544F4E45 
 2115      00000000 
 2116 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2116      5A000000 
 2116      0A000000 
 2116      544F0000 
 2117 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2117      58000000 
 2117      0A000000 
 2117      54494D45 
 2117      52000000 
 2118 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2118      59000000 
 2118      0B000000 
 2118      54494D45 
 2118      4F555400 
 2119 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2119      57000000 
 2119      0B000000 
 2119      5449434B 
 2119      53000000 
 2120 0130 28010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2120      67000000 
 2120      0A000000 
 2120      5448454E 
 2120      00000000 
 2121 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2121      56000000 
 2121      0A000000 
 2121      53544F50 
 2121      00000000 
 2122 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2122      55000000 
 2122      0A000000 
 2122      53544550 
 2122      00000000 
 2123 016c 64010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2123      54000000 
 2123      0A000000 
 2123      53504957 
 2123      52000000 
 2124 0180 78010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2124      53000000 
 2124      0A000000 
 2124      53504953 
 2124      454C0000 
 2125 0194 8C010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2125      51000000 
 2125      0B000000 
 2125      53504952 
 2125      44000000 
ARM GAS  tinyBasic.s 			page 57


 2126 01a8 A0010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2126      52000000 
 2126      0A000000 
 2126      53504945 
 2126      4E000000 
 2127 01bc B4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2127      50000000 
 2127      0A000000 
 2127      534C4545 
 2127      50000000 
 2128 01d0 C8010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2128      4F000000 
 2128      0B000000 
 2128      53495A45 
 2128      00000000 
 2129 01e4 DC010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2129      4E000000 
 2129      0A000000 
 2129      53484F57 
 2129      00000000 
 2130 01f8 F0010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2130      4D000000 
 2130      0A000000 
 2130      53415645 
 2130      00000000 
 2131 020c 04020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2131      4C000000 
 2131      0A000000 
 2131      52554E00 
 2132 021c 18020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2132      4B000000 
 2132      0B000000 
 2132      52534849 
 2132      46540000 
 2133 0230 28020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2133      4A000000 
 2133      0B000000 
 2133      524E4400 
 2134 0240 3C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2134      49000000 
 2134      0A000000 
 2134      52455455 
 2134      524E0000 
 2135 0254 4C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2135      48000000 
 2135      0A000000 
 2135      52455354 
 2135      4F524500 
 2136 0268 60020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2136      47000000 
 2136      0A000000 
 2136      52454D41 
 2136      524B0000 
 2137 027c 74020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 2137      46000000 
 2137      0A000000 
 2137      5245424F 
ARM GAS  tinyBasic.s 			page 58


 2137      4F540000 
 2138 0290 88020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2138      45000000 
 2138      0B000000 
 2138      52454144 
 2138      00000000 
 2139 02a4 9C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2139      44000000 
 2139      0B000000 
 2139      514B4559 
 2139      00000000 
 2140 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 2140      43000000 
 2140      0B000000 
 2140      50525449 
 2140      00000000 
 2141 02cc C4020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 2141      42000000 
 2141      0B000000 
 2141      50525448 
 2141      00000000 
 2142 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 2142      41000000 
 2142      0B000000 
 2142      50525447 
 2142      00000000 
 2143 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 2143      40000000 
 2143      0B000000 
 2143      50525446 
 2143      00000000 
 2144 0308 00030000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 2144      3F000000 
 2144      0B000000 
 2144      50525445 
 2144      00000000 
 2145 031c 14030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 2145      3E000000 
 2145      0B000000 
 2145      50525444 
 2145      00000000 
 2146 0330 28030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 2146      3D000000 
 2146      0B000000 
 2146      50525443 
 2146      00000000 
 2147 0344 3C030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2147      3C000000 
 2147      0B000000 
 2147      50525442 
 2147      00000000 
 2148 0358 50030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2148      3B000000 
 2148      0B000000 
 2148      50525441 
 2148      00000000 
 2149 036c 64030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
ARM GAS  tinyBasic.s 			page 59


 2149      3A000000 
 2149      0A000000 
 2149      5052494E 
 2149      54000000 
 2150 0380 78030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2150      39000000 
 2150      0B000000 
 2150      504F5554 
 2150      00000000 
 2151 0394 8C030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2151      38000000 
 2151      0A000000 
 2151      504F4B45 
 2151      00000000 
 2152 03a8 A0030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2152      35000000 
 2152      0A000000 
 2152      504D4F44 
 2152      45000000 
 2153 03bc B4030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2153      37000000 
 2153      0B000000 
 2153      50494E50 
 2153      00000000 
 2154 03d0 C8030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2154      36000000 
 2154      0B000000 
 2154      5045454B 
 2154      00000000 
 2155 03e4 DC030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2155      34000000 
 2155      0A000000 
 2155      50415553 
 2155      45000000 
 2156 03f8 F0030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2156      33000000 
 2156      0B000000 
 2156      50414400 
 2157 0408 04040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2157      32000000 
 2157      0B000000 
 2157      4F520000 
 2158 0418 14040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2158      31000000 
 2158      0B000000 
 2158      4F445200 
 2159 0428 24040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2159      30000000 
 2159      0B000000 
 2159      4E4F5400 
 2160 0438 34040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2160      2E000000 
 2160      0A000000 
 2160      4E455854 
 2160      00000000 
 2161 044c 44040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2161      2F000000 
ARM GAS  tinyBasic.s 			page 60


 2161      0A000000 
 2161      4E455700 
 2162 045c 58040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2162      2D000000 
 2162      0B000000 
 2162      4D554C44 
 2162      49560000 
 2163 0470 68040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2163      2C000000 
 2163      0B000000 
 2163      4C534849 
 2163      46540000 
 2164 0484 7C040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2164      2B000000 
 2164      0B000000 
 2164      4C4F4700 
 2165 0494 90040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2165      2A000000 
 2165      0A000000 
 2165      4C4F4144 
 2165      00000000 
 2166 04a8 A0040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2166      29000000 
 2166      0A000000 
 2166      4C495354 
 2166      00000000 
 2167 04bc B4040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2167      28000000 
 2167      0A000000 
 2167      4C455400 
 2168 04cc C8040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2168      27000000 
 2168      0B000000 
 2168      4B455900 
 2169 04dc D8040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2169      26000000 
 2169      0A000000 
 2169      49574447 
 2169      52454600 
 2170 04f0 E8040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2170      25000000 
 2170      0A000000 
 2170      49574447 
 2170      454E0000 
 2171 0504 FC040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2171      24000000 
 2171      0B000000 
 2171      494E5645 
 2171      52540000 
 2172 0518 10050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2172      23000000 
 2172      0A000000 
 2172      494E5055 
 2172      54000000 
 2173 052c 24050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2173      22000000 
 2173      0A000000 
ARM GAS  tinyBasic.s 			page 61


 2173      49460000 
 2174 053c 38050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2174      21000000 
 2174      0B000000 
 2174      49445200 
 2175 054c 48050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2175      20000000 
 2175      0A000000 
 2175      48455800 
 2176 055c 58050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2176      1F000000 
 2176      0B000000 
 2176      4750494F 
 2176      00000000 
 2177 0570 68050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2177      1E000000 
 2177      0A000000 
 2177      474F544F 
 2177      00000000 
 2178 0584 7C050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2178      1D000000 
 2178      0A000000 
 2178      474F5355 
 2178      42000000 
 2179 0598 90050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2179      1C000000 
 2179      0A000000 
 2179      464F5247 
 2179      45540000 
 2180 05ac A4050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2180      1B000000 
 2180      0A000000 
 2180      464F5200 
 2181 05bc B8050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 2181      1A000000 
 2181      0A000000 
 2181      46435055 
 2181      00000000 
 2182 05d0 C8050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2182      18000000 
 2182      0A000000 
 2182      454E4400 
 2183 05e0 DC050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2183      19000000 
 2183      0B000000 
 2183      45455052 
 2183      4F4D0000 
 2184 05f4 EC050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2184      17000000 
 2184      0A000000 
 2184      44575249 
 2184      54450000 
 2185 0608 00060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2185      66000000 
 2185      0A000000 
 2185      44554D50 
 2185      00000000 
ARM GAS  tinyBasic.s 			page 62


 2186 061c 14060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2186      16000000 
 2186      0B000000 
 2186      44524541 
 2186      44000000 
 2187 0630 28060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2187      15000000 
 2187      0A000000 
 2187      444F0000 
 2188 0640 3C060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2188      14000000 
 2188      0A000000 
 2188      44495200 
 2189 0650 4C060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2189      13000000 
 2189      0A000000 
 2189      44454300 
 2190 0660 5C060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2190      12000000 
 2190      0B000000 
 2190      44445200 
 2191 0670 6C060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2191      11000000 
 2191      0A000000 
 2191      44415441 
 2191      4C4E0000 
 2192 0684 7C060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2192      10000000 
 2192      0A000000 
 2192      44415441 
 2192      00000000 
 2193 0698 90060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2193      0F000000 
 2193      0B000000 
 2193      43524C00 
 2194 06a8 A4060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2194      0E000000 
 2194      0B000000 
 2194      43524800 
 2195 06b8 B4060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2195      0D000000 
 2195      0C000000 
 2195      43484152 
 2195      00000000 
 2196 06cc C4060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2196      0C000000 
 2196      0A000000 
 2196      42594500 
 2197 06dc D8060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2197      0B000000 
 2197      0A000000 
 2197      42544F47 
 2197      4C000000 
 2198 06f0 E8060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2198      0A000000 
 2198      0B000000 
 2198      42544553 
ARM GAS  tinyBasic.s 			page 63


 2198      54000000 
 2199 0704 FC060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2199      09000000 
 2199      0A000000 
 2199      42534554 
 2199      00000000 
 2200 0718 10070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2200      08000000 
 2200      0A000000 
 2200      42524553 
 2200      00000000 
 2201 072c 24070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2201      07000000 
 2201      0B000000 
 2201      42495400 
 2202 073c 38070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2202      06000000 
 2202      0A000000 
 2202      41575500 
 2203 074c 48070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2203      05000000 
 2203      0A000000 
 2203      4155544F 
 2203      52554E00 
 2204 0760 58070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2204      04000000 
 2204      0B000000 
 2204      41534300 
 2205 0770 6C070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2205      03000000 
 2205      0B000000 
 2205      414E4400 
 2206 0780 7C070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2206      02000000 
 2206      0B000000 
 2206      41444352 
 2206      45414400 
 2207 0794 8C070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2207      01000000 
 2207      0A000000 
 2207      4144434F 
 2207      4E000000 
 2208              	first_link: 
 2209 07a8 A0070000 	  .word LINK 
 2210 07ac 00000000 	  .word ABS_IDX 
 2211 07b0 0B000000 	  .word TK_IFUNC
 2212              	kword_dict: // first name field 
 2213              	  .equ LINK,. 
 2214 07b4 41425300 	  .asciz "ABS" 
 2215              	  .p2align 2 
 2216              	
 2217              	    .section .rodata.fn_tabld 
 2218              	
 2219              	//comands and fonctions address table 	
 2220              	fn_table:
 2221 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2221      00000000 
ARM GAS  tinyBasic.s 			page 64


 2221      00000000 
 2221      00000000 
 2221      00000000 
 2222 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2222      00000000 
 2222      00000000 
 2222      00000000 
 2222      00000000 
 2223 003c 00000000 		.word const_cr1,skip_line,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_writ
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2224 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2225 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2225      00000000 
 2225      00000000 
 2225      00000000 
 2225      00000000 
 2226 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2226      00000000 
 2226      00000000 
 2226      00000000 
 2226      00000000 
 2227 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2227      00000000 
 2227      00000000 
 2227      00000000 
 2227      00000000 
 2228 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2228      00000000 
 2228      00000000 
 2228      00000000 
 2228      00000000 
 2229 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,skip_line // 64..71 
 2229      00000000 
 2229      00000000 
 2229      00000000 
 2229      00000000 
 2230 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2230      00000000 
 2230      00000000 
 2230      00000000 
 2230      00000000 
 2231 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2231      00000000 
 2231      00000000 
 2231      00000000 
 2231      00000000 
 2232 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2232      00000000 
 2232      00000000 
 2232      00000000 
ARM GAS  tinyBasic.s 			page 65


 2232      00000000 
 2233 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump,then // 96..103 
 2233      00000000 
 2233      00000000 
 2233      00000000 
 2233      00000000 
 2234 01a0 00000000 		.word 0 
 2235              	
 2236              	
 2237              	/**********************************
 2238              	    BASIC commands and functions 
 2239              	**********************************/
 2240              	
 2241              	    .section .text.basic , "ax", %progbits 
 2242              	
 2243              	
 2244              	/*******************************
 2245              	  BASIC:  ABS expr 
 2246              	  input:
 2247              	    none 
 2248              	  output:
 2249              	    r0    token type 
 2250              	    r1    abs(expr)
 2251              	  use:
 2252              	    none 
 2253              	******************************/
 2254              	    _FUNC abs 
 2255 0000 00B5FFF7 	    _CALL arg_list
 2255      FEFF5DF8 
 2255      04EB
 2256 000a 0128     	    cmp r0,#1 
 2257 000c 01D0     	    beq 1f 
 2258 000e FFF7FEBF 	    b syntax_error 
 2259 0012 5CF8041B 	1:  _POP r1 
 2260 0016 11F0004F 	    tst r1,#(1<<31)
 2261 001a 01D0     	    beq 9f
 2262 001c C1F10001 	    rsb r1,#0 
 2263 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2264 0024 7047     	   _RET 
 2265              	
 2266 0026 00BF     	    _FUNC power_adc
 2267 0028 7047     	    _RET
 2268              	
 2269 002a 00BF     	    _FUNC analog_read
 2270 002c 7047     	    _RET
 2271              	
 2272              	/************************************
 2273              	  BASIC: AND(expr1,expr2)
 2274              	  logical ANND bit to between expr1,expr2
 2275              	************************************/
 2276 002e 00BF     	    _FUNC bit_and
 2277 0030 00B5FFF7 	    _CALL func_args 
 2277      FEFF5DF8 
 2277      04EB
 2278 003a 0228     	    cmp r0,#2 
 2279 003c 7FF4FEAF 	    bne syntax_error 
 2280 0040 5CF8040B 	    _POP r0 
ARM GAS  tinyBasic.s 			page 66


 2281 0044 5CF8041B 	    _POP r1 
 2282 0048 01EA0001 	    and r1,r0 
 2283 004c 4FF00E00 	    mov r0,#TK_INTGR
 2284 0050 7047     	    _RET
 2285              	
 2286              	/*******************************************
 2287              	  BASIC: ASC(string|char)
 2288              	  return ASCII code of char of first char 
 2289              	  of string 
 2290              	*******************************************/
 2291 0052 00BF     	    _FUNC ascii
 2292 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2293 0058 00B5FFF7 	    _CALL expect 
 2293      FEFF5DF8 
 2293      04EB
 2294 0062 00B5FFF7 	    _CALL next_token 
 2294      FEFF5DF8 
 2294      04EB
 2295 006c 0228     	    cmp r0,#TK_QSTR
 2296 006e 03D0     	    beq 2f 
 2297 0070 0328     	    cmp r0,#TK_CHAR 
 2298 0072 7FF4FEAF 	    bne syntax_error 
 2299 0076 00E0     	    b 9f 
 2300 0078 0978     	2:  ldrb r1,[r1]
 2301 007a 4CF8041D 	9:  _PUSH r1 
 2302 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2303 0082 00B5FFF7 	    _CALL expect 
 2303      FEFF5DF8 
 2303      04EB
 2304 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2305 0090 5CF8041B 	    _POP r1 
 2306 0094 7047     	    _RET
 2307              	
 2308 0096 00BF     	    _FUNC autorun
 2309 0098 7047     	    _RET
 2310              	
 2311 009a 00BF     	    _FUNC awu
 2312 009c 7047     	    _RET
 2313              	
 2314              	/********************************************
 2315              	  BASIC: BIT(expr)
 2316              	  expr must be between 0..31 and is used 
 2317              	  to create 1 bit mask at that position
 2318              	*******************************************/
 2319 009e 00BF     	    _FUNC bitmask
 2320 00a0 00B5FFF7 	    _CALL func_args
 2320      FEFF5DF8 
 2320      04EB
 2321 00aa 0128     	    cmp r0,#1 
 2322 00ac 7FF4FEAF 	    bne syntax_error 
 2323 00b0 5CF8040B 	    _POP r0
 2324 00b4 4FF00101 	    mov r1,#1
 2325 00b8 20B1     	1:  cbz r0,9f 
 2326 00ba 4FEA4101 	    lsl r1,#1
 2327 00be A0F10100 	    sub r0,#1
 2328 00c2 F9E7     	    b 1b 
 2329 00c4 4FF00E00 	9:  mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 67


 2330 00c8 7047     	    _RET 
 2331              	
 2332              	  
 2333              	  /*********************************
 2334              	   BASIC: BRES adr, mask   
 2335              	   reset bits [adr]= [adr] & ~mask  
 2336              	   input:
 2337              	     none 
 2338              	    output;
 2339              	      none 
 2340              	    use:
 2341              	      T1   temp
 2342              	      T2   temp 
 2343              	*******************************/     
 2344 00ca 00BF     	  _FUNC bit_reset
 2345 00cc 00B5FFF7 	    _CALL arg_list 
 2345      FEFF5DF8 
 2345      04EB
 2346 00d6 0228     	    cmp r0,#2 
 2347 00d8 01D0     	    beq 1f 
 2348 00da FFF7FEBF 	    b syntax_error 
 2349 00de 5CF8041B 	1:  _POP r1 //mask 
 2350 00e2 5CF8040B 	    _POP r0 //address 
 2351 00e6 D0F80090 	    ldr T2,[r0] 
 2352 00ea 81F0FF31 	    eor r1,#-1 // ~mask 
 2353 00ee 01EA0901 	    and r1,T2
 2354 00f2 0160     	    str r1,[r0]
 2355 00f4 7047     	    _RET  
 2356              	
 2357              	
 2358              	/*********************************
 2359              	   BASIC: BSET adr, mask   
 2360              	   reset bits [adr]= [adr] & ~mask  
 2361              	   input:
 2362              	      none 
 2363              	    output;
 2364              	      none 
 2365              	    use:
 2366              	      T1   temp
 2367              	      T2   temp  
 2368              	*******************************/     
 2369 00f6 00BF     	    _FUNC bit_set
 2370 00f8 00B5FFF7 	    _CALL arg_list 
 2370      FEFF5DF8 
 2370      04EB
 2371 0102 0228     	    cmp r0,#2 
 2372 0104 01D0     	    beq 1f 
 2373 0106 FFF7FEBF 	    b syntax_error 
 2374 010a 5CF8041B 	1:  _POP r1 //mask 
 2375 010e 5CF8040B 	    _POP r0 //address 
 2376 0112 D0F80090 	    ldr T2,[r0] 
 2377 0116 41EA0901 	    orr r1,T2
 2378 011a 0160     	    str r1,[r0]
 2379 011c 7047     	    _RET 
 2380              	
 2381              	  /*********************************
 2382              	   BASIC: BTOGL adr, mask   
ARM GAS  tinyBasic.s 			page 68


 2383              	   reset bits [adr]= [adr] & ~mask  
 2384              	   input:
 2385              	     r0    adr 
 2386              	     r1    mask 
 2387              	    output;
 2388              	      none 
 2389              	    use:
 2390              	      T1   temp
 2391              	      T2   temp  
 2392              	*******************************/     
 2393 011e 00BF     	  _FUNC bit_toggle
 2394 0120 00B5FFF7 	    _CALL arg_list 
 2394      FEFF5DF8 
 2394      04EB
 2395 012a 0228     	    cmp r0,#2 
 2396 012c 01D0     	    beq 1f 
 2397 012e FFF7FEBF 	    b syntax_error 
 2398 0132 5CF8041B 	1:  _POP r1 //mask 
 2399 0136 5CF8040B 	    _POP r0 //address 
 2400 013a D0F80090 	    ldr T2,[r0] 
 2401 013e 81EA0901 	    eor r1,T2
 2402 0142 0160     	    str r1,[r0]
 2403 0144 7047     	    _RET  
 2404              	
 2405              	/********************************
 2406              	  BASIC: BTEST(addr,bit)
 2407              	  return bit state at address
 2408              	********************************/
 2409 0146 00BF     	    _FUNC bit_test
 2410 0148 00B5FFF7 	    _CALL func_args
 2410      FEFF5DF8 
 2410      04EB
 2411 0152 0228     	    cmp r0,#2 
 2412 0154 7FF4FEAF 	    bne syntax_error 
 2413 0158 5CF8041B 	    _POP r1
 2414 015c 4FF00100 	    mov r0,#1
 2415 0160 01F01F01 	    and r1,#31  
 2416 0164 21B1     	1:  cbz r1, 2f
 2417 0166 4FEA4000 	    lsl r0,#1
 2418 016a A1F10101 	    sub r1,#1
 2419 016e F9E7     	    b 1b 
 2420 0170 5CF8041B 	2:  _POP r1
 2421 0174 0968     	    ldr r1,[r1]
 2422 0176 01EA0001 	    and r1,r0 
 2423 017a 09B1     	    cbz r1,9f 
 2424 017c 4FF00101 	    mov r1,#1
 2425 0180 4FF00E00 	9:  mov r0,#TK_INTGR    
 2426 0184 7047     	    _RET 
 2427              	
 2428 0186 00BF     	    _FUNC bye
 2429 0188 7047     	    _RET 
 2430              	
 2431              	/*********************************
 2432              	  BASIC: CHAR(expr)
 2433              	  convert expr in character 
 2434              	********************************/
 2435 018a 00BF     	    _FUNC char
ARM GAS  tinyBasic.s 			page 69


 2436 018c 00B5FFF7 	    _CALL func_args
 2436      FEFF5DF8 
 2436      04EB
 2437 0196 0128     	    cmp r0,#1
 2438 0198 7FF4FEAF 	    bne syntax_error 
 2439 019c 5CF8041B 	    _POP r1 
 2440 01a0 01F07F01 	    and r1,#127 
 2441 01a4 4FF00300 	    mov r0,#TK_CHAR
 2442 01a8 7047     	    _RET 
 2443              	
 2444 01aa 00BF     	    _FUNC const_cr2
 2445 01ac 7047     	    _RET  
 2446              	
 2447 01ae 00BF     	    _FUNC const_cr1
 2448 01b0 7047     	    _RET 
 2449              	
 2450              	
 2451              	/**************************
 2452              	  BASIC: DATALN expr 
 2453              	  set data pointer to line#
 2454              	  specified by expr. 
 2455              	  if line# not valid program 
 2456              	  end with error.
 2457              	  use:
 2458              	
 2459              	**************************/
 2460 01b2 00BF     	    _FUNC data_line
 2461 01b4 206C10F0 	    _RTO // run time only 
 2461      010F03D1 
 2461      4FF00700 
 2461      FFF7FEBF 
 2462 01c4 00B5FFF7 	    _CALL expression 
 2462      FEFF5DF8 
 2462      04EB
 2463 01ce 0E28     	    cmp r0,#TK_INTGR
 2464 01d0 7FF4FEAF 	    bne syntax_error
 2465 01d4 0846     	    mov r0,r1 
 2466 01d6 00B5FFF7 	    _CALL search_lineno
 2466      FEFF5DF8 
 2466      04EB
 2467 01e0 0029     	    cmp r1,#0
 2468 01e2 03D0     	    beq 1f 
 2469 01e4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2470 01e8 FFF7FEBF 	    b syntax_error 
 2471 01ec C178     	1:  ldrb r1,[r0,#3]
 2472 01ee 0A29     	    cmp r1,#TK_CMD 
 2473 01f0 F8D1     	    bne 0b
 2474 01f2 0179     	    ldrb r1,[r0,#4]
 2475 01f4 1029     	    cmp r1,#DATA_IDX 
 2476 01f6 F5D1     	    bne 0b  
 2477 01f8 E060     	    str r0,[UPP,#DATAPTR]
 2478 01fa 8178     	    ldrb r1,[r0,#2]
 2479 01fc 6161     	    str r1,[UPP,#DATALEN]
 2480 01fe 4FF00501 	    mov r1,#5 // position of first data item  
 2481 0202 2161     	    str r1,[UPP,#DATA]
 2482 0204 7047     	    _RET 
 2483              	
ARM GAS  tinyBasic.s 			page 70


 2484              	/*****************************
 2485              	  BASIC: READ 
 2486              	  read next data item 
 2487              	  the value can be assigned to
 2488              	  variable or used in expression
 2489              	*****************************/
 2490 0206 00BF     	    _FUNC read
 2491 0208 206C10F0 	    _RTO
 2491      010F03D1 
 2491      4FF00700 
 2491      FFF7FEBF 
 2492 0218 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2493 021a E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2494 021c 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2495 021e 8242     	    cmp r2,r0
 2496 0220 0ED0     	    beq seek_next
 2497 0222 885C     	1:  ldrb r0,[r1,r2]
 2498 0224 02F10102 	    add r2,#1
 2499 0228 0028     	    cmp r0,#TK_NONE
 2500 022a 09D0     	    beq seek_next
 2501 022c 0828     	    cmp r0,#TK_COMMA
 2502 022e F8D0     	    beq 1b  
 2503 0230 0E28     	    cmp r0,#TK_INTGR 
 2504 0232 7FF4FEAF 	    bne syntax_error  
 2505 0236 8958     	    ldr r1,[r1,r2]
 2506 0238 02F10402 	    add r2,#4
 2507 023c 2261     	    str r2,[UPP,#DATA]
 2508 023e 12E0     	    b 9f  
 2509              	seek_next: // is next line data ?
 2510 0240 8878     	    ldrb r0,[R1,#2]
 2511 0242 0144     	    add r1,r0 
 2512 0244 C878     	    ldrb r0,[R1,#3]
 2513 0246 0A28     	    cmp r0,#TK_CMD
 2514 0248 09D1     	    bne 2f 
 2515 024a 0879     	    ldrb r0,[r1,#4]
 2516 024c 1028     	    cmp r0,#DATA_IDX 
 2517 024e 06D1     	    bne 2f 
 2518 0250 E160     	    str r1,[UPP,#DATAPTR]
 2519 0252 8878     	    ldrb r0,[r1,#2]
 2520 0254 6061     	    str  r0,[UPP,#DATALEN]
 2521 0256 4FF00502 	    mov r2,#5 
 2522 025a 2261     	    str r2,[UPP,#DATA]
 2523 025c E1E7     	    b 1b 
 2524 025e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2525 0262 FFF7FEBF 	    b tb_error 
 2526 0266 7047     	9:  _RET 
 2527              	
 2528              	/********************************
 2529              	  BASIC: RESTORE 
 2530              	  seek first data line 
 2531              	********************************/
 2532              	    _FUNC restore
 2533 0268 206C10F0 	    _RTO 
 2533      010F03D1 
 2533      4FF00700 
 2533      FFF7FEBF 
 2534 0278 216B     	    ldr r1,[UPP,#TXTBGN]
ARM GAS  tinyBasic.s 			page 71


 2535 027a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2536 027c 0FD0     	    beq no_data_line 
 2537 027e 0879     	    ldrb r0,[r1,#4]
 2538 0280 1028     	    cmp r0,#DATA_IDX
 2539 0282 09D1     	    bne try_next_line
 2540 0284 C878     	    ldrb r0,[r1,#3]
 2541 0286 0A28     	    cmp r0,#TK_CMD
 2542 0288 06D1     	    bne try_next_line
 2543              	// this a the first data line 
 2544 028a E160     	    str r1,[UPP,#DATAPTR]
 2545 028c 8878     	    ldrb r0,[r1,#2]
 2546 028e 6061     	    str r0,[UPP,#DATALEN]
 2547 0290 4FF00500 	    mov r0,#5 
 2548 0294 2061     	    str r0,[UPP,#DATA]
 2549 0296 07E0     	    b 9f
 2550              	try_next_line:
 2551 0298 8878     	    ldrb r0,[r1,#2]
 2552 029a 0144     	    add r1,r0 
 2553 029c EDE7     	    b 1b 
 2554              	no_data_line:
 2555 029e 80EA0000 	    eor r0,r0 
 2556 02a2 E060     	    str r0,[UPP,#DATAPTR]
 2557 02a4 2061     	    str r0,[UPP,#DATA]
 2558 02a6 6061     	    str r0,[UPP,#DATALEN]
 2559 02a8 7047     	9:  _RET 
 2560              	
 2561 02aa 00BF     	    _FUNC const_ddr
 2562 02ac 7047     	    _RET 
 2563              	
 2564              	/***********************************
 2565              	  BASIC: DEC 
 2566              	  switch base to decimal 
 2567              	***********************************/
 2568 02ae 00BF     	    _FUNC dec_base
 2569 02b0 4FF00A00 	    mov r0,#10
 2570 02b4 A061     	    str r0,[UPP,#BASE]
 2571 02b6 7047     	    _RET 
 2572              	
 2573              	    _FUNC directory
 2574 02b8 7047     	    _RET 
 2575              	
 2576              	/***************************************
 2577              	  BASIC: DO 
 2578              	  initialize a DO..UNTIL loop 
 2579              	***************************************/
 2580 02ba 00BF     	    _FUNC do_loop
 2581 02bc 6068     	    ldr r0,[UPP,#COUNT]
 2582 02be 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 2583 02c2 7047     	    _RET 
 2584              	
 2585              	    _FUNC digital_read
 2586 02c4 7047     	    _RET 
 2587              	
 2588 02c6 00BF     	    _FUNC digital_write
 2589 02c8 7047     	    _RET  
 2590              	
 2591              	
ARM GAS  tinyBasic.s 			page 72


 2592              	/****************************************
 2593              	  BASIC: DUMP adr, count 
 2594              	    command line only  
 2595              	    print memory content in hexadecimal 
 2596              	    16 bytes per row 
 2597              	    ouput:
 2598              	      none 
 2599              	    use:
 2600              	      r2   byte counter  
 2601              	****************************************/
 2602 02ca 00BF     	    _FUNC dump 
 2603 02cc 04B4     	    push {r2}
 2604 02ce 226C     	    ldr r2,[UPP,#FLAGS]
 2605 02d0 12F0010F 	    tst r2,#FRUN 
 2606 02d4 03D0     	    beq 0f
 2607 02d6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2608 02da FFF7FEBF 	    b tb_error  
 2609 02de 00B5FFF7 	0:  _CALL arg_list 
 2609      FEFF5DF8 
 2609      04EB
 2610 02e8 0228     	    cmp r0,#2
 2611 02ea 7FF4FEAF 	    bne syntax_error 
 2612 02ee 5CF8042B 	    _POP r2   // count 
 2613 02f2 5CF8040B 	    _POP  r0  // adr 
 2614              	dump01:
 2615 02f6 00B500F0 	    _CALL print_dump_header 
 2615      0EF85DF8 
 2615      04EB
 2616 0300 4FF01001 	1:  mov r1,#16
 2617 0304 00B5FFF7 	    _CALL prt_row 
 2617      FEFF5DF8 
 2617      04EB
 2618 030e 103A     	    subs r2,#16 
 2619 0310 F6D5     	    bpl 1b 
 2620 0312 04BC     	2:  pop {r2}
 2621 0314 7047     	    _RET 
 2622              	
 2623              	/********************************
 2624              	   print_dump_header
 2625              	********************************/
 2626 0316 00BF     	    _FUNC print_dump_header
 2627 0318 2DE90103 	    push {r0,T1,T2}
 2628 031c 4FF00C00 	    mov r0,#12 
 2629 0320 00B5FFF7 	    _CALL spaces
 2629      FEFF5DF8 
 2629      04EB
 2630 032a 4FF00000 	    mov r0,#0
 2631 032e 4FF01009 	    mov T2,#16
 2632 0332 8046     	1:  mov T1,r0 
 2633 0334 00B5FFF7 	    _CALL print_hex 
 2633      FEFF5DF8 
 2633      04EB
 2634 033e 08F10100 	    add r0,T1,#1  
 2635 0342 4845     	    cmp r0,T2 
 2636 0344 F5D4     	    bmi 1b 
 2637 0346 4FF00D00 	    mov r0,#CR 
 2638 034a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 73


 2638      FEFF5DF8 
 2638      04EB
 2639 0354 4FF03D00 	    mov r0,#'='
 2640 0358 4FF04F08 	    mov T1,#79
 2641 035c 00B5FFF7 	2:  _CALL uart_putc
 2641      FEFF5DF8 
 2641      04EB
 2642 0366 B8F10108 	    subs T1,#1 
 2643 036a F7D1     	    bne 2b     
 2644 036c 4FF00D00 	    mov r0,#CR 
 2645 0370 00B5FFF7 	    _CALL uart_putc 
 2645      FEFF5DF8 
 2645      04EB
 2646 037a BDE80103 	    pop {r0,T1,T2}
 2647 037e 7047     	    _RET 
 2648              	
 2649              	
 2650              	/*******************************
 2651              	  BASIC: END 
 2652              	  exit program 
 2653              	******************************/ 
 2654              	    _FUNC cmd_end
 2655 0380 FFF7FEBF 	    b warm_start 
 2656 0384 7047     	    _RET 
 2657              	
 2658 0386 00BF     	    _FUNC const_eeprom_base
 2659 0388 7047     	    _RET 
 2660              	
 2661 038a 00BF     	    _FUNC fcpu
 2662 038c 7047     	    _RET 
 2663              	
 2664 038e 00BF     	    _FUNC forget
 2665 0390 7047     	    _RET 
 2666              	
 2667              	/**************************************************
 2668              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2669              	  introdure FOR...NEXT loop 
 2670              	**************************************************/
 2671 0392 00BF     	    _FUNC for
 2672 0394 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2673 0398 4FF00107 	    mov INCR,#1
 2674 039c 00B5FFF7 	    _CALL next_token
 2674      FEFF5DF8 
 2674      04EB
 2675 03a6 0428     	    cmp r0,#TK_VAR
 2676 03a8 7FF4FEAF 	    bne syntax_error
 2677 03ac 02B4     	    push {r1} 
 2678 03ae 00B500F0 	    _CALL let_var 
 2678      ADF85DF8 
 2678      04EB
 2679 03b8 20BC     	    pop {VADR}
 2680 03ba 4FEA8505 	    lsl VADR,#2
 2681 03be 2544     	    add VADR,UPP 
 2682 03c0 05F16005 	    add VADR,#VARS 
 2683 03c4 7047     	    _RET 
 2684              	
 2685              	/***************************************
ARM GAS  tinyBasic.s 			page 74


 2686              	  BASIC: TO expr 
 2687              	  set limit of FOR...NEXT loop 
 2688              	**************************************/
 2689 03c6 00BF     	    _FUNC to
 2690 03c8 00B5FFF7 	    _CALL expression 
 2690      FEFF5DF8 
 2690      04EB
 2691 03d2 0E28     	    cmp r0,#TK_INTGR
 2692 03d4 7FF4FEAF 	    bne syntax_error 
 2693 03d8 0E46     	    mov LIMIT,r1
 2694              	    // save loop back parameters 
 2695 03da 6068     	    ldr r0,[UPP,#COUNT]
 2696 03dc 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2697 03e0 7047     	    _RET 
 2698              	
 2699              	/********************************************
 2700              	  BASIC: STEP expr 
 2701              	  set increment for FOR...NEXT loop 
 2702              	********************************************/
 2703 03e2 00BF     	    _FUNC step
 2704 03e4 00B5FFF7 	    _CALL expression 
 2704      FEFF5DF8 
 2704      04EB
 2705 03ee 0E28     	    cmp r0,#TK_INTGR
 2706 03f0 7FF4FEAF 	    bne syntax_error 
 2707 03f4 0F46     	    mov INCR,r1
 2708              	    // replace parameters left by TO
 2709 03f6 6068     	    ldr r0,[UPP,#COUNT]
 2710 03f8 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2711 03fc 7047     	    _RET 
 2712              	
 2713              	/********************************************
 2714              	  BASIC: NEXT var 
 2715              	  incrment FOR...NEXT loop variable
 2716              	  exit if variable cross LIMIT 
 2717              	********************************************/
 2718 03fe 00BF     	    _FUNC next
 2719 0400 00B5FFF7 	    _CALL next_token 
 2719      FEFF5DF8 
 2719      04EB
 2720 040a 0428     	    cmp r0,#TK_VAR 
 2721 040c 7FF4FEAF 	    bne syntax_error 
 2722 0410 4FEA8101 	    lsl r1,#2 
 2723 0414 2144     	    add r1,UPP 
 2724 0416 01F16001 	    add r1,#VARS 
 2725 041a A942     	    cmp r1,VADR
 2726 041c 7FF4FEAF 	    bne syntax_error 
 2727 0420 2868     	    ldr r0,[VADR]
 2728 0422 3844     	    add r0,INCR 
 2729 0424 2860     	    str r0,[VADR]
 2730 0426 002F     	    cmp INCR,#0
 2731 0428 02D4     	    bmi 2f
 2732 042a B042     	    cmp r0,LIMIT 
 2733 042c 02DC     	    bgt 8f  
 2734 042e 07E0     	    b 9f  
 2735 0430 B042     	2:  cmp r0,LIMIT 
 2736 0432 05DA     	    bge 9f  
ARM GAS  tinyBasic.s 			page 75


 2737              	8: // exit for...next
 2738              	  //  drop branch parameters
 2739 0434 4FF00C00 	    _DROP 3
 2739      8444
 2740              	  // restore outer loop parameters
 2741 043a BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2742 043e 7047     	    _RET 
 2743 0440 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2744 0444 6060     	    str r0,[UPP,#COUNT]
 2745 0446 7047     	    _RET 
 2746              	
 2747              	/*********************************
 2748              	  BASIC: GOSUB expr 
 2749              	  call a subroutine at line# 
 2750              	*********************************/
 2751              	    _FUNC gosub
 2752 0448 00B5FFF7 	    _CALL expression
 2752      FEFF5DF8 
 2752      04EB
 2753 0452 0E28     	    cmp r0,#TK_INTGR 
 2754 0454 7FF4FEAF 	    bne syntax_error 
 2755 0458 0846     	    mov r0,r1 
 2756 045a 00B5FFF7 	    _CALL search_lineno  
 2756      FEFF5DF8 
 2756      04EB
 2757 0464 19B1     	    cbz r1,1f 
 2758 0466 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2759 046a FFF7FEBF 	    b tb_error 
 2760 046e 6168     	1:  ldr r1,[UPP,#COUNT]
 2761 0470 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2762 0474 8346     	    mov BPTR,r0 
 2763 0476 4FF0030A 	    mov IN,#3 
 2764 047a 9BF80200 	    ldrb r0,[BPTR,#2]
 2765 047e 6060     	    str r0,[UPP,#COUNT]
 2766 0480 7047     	    _RET 
 2767              	
 2768              	/**********************************
 2769              	  BASIC: RETURN 
 2770              	  leave a subroutine 
 2771              	*********************************/
 2772 0482 00BF     	    _FUNC return 
 2773 0484 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2774 0488 6060     	    str r0,[UPP,#COUNT]
 2775 048a 7047     	    _RET 
 2776              	
 2777              	/**********************************
 2778              	  BASIC: GOTO expr 
 2779              	  go to line # 
 2780              	  use:
 2781              	
 2782              	**********************************/
 2783              	    _FUNC goto
 2784 048c 00B5FFF7 	    _CALL expression 
 2784      FEFF5DF8 
 2784      04EB
 2785 0496 0E28     	    cmp r0,#TK_INTGR 
 2786 0498 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 76


 2787 049c 59B1     	    cbz r1,9f 
 2788 049e 0846     	1:  mov r0,r1 
 2789 04a0 00B5FFF7 	    _CALL search_lineno 
 2789      FEFF5DF8 
 2789      04EB
 2790 04aa 19B1     	    cbz r1,2f 
 2791 04ac 4FF00500 	    mov r0,#ERR_NO_LINE 
 2792 04b0 FFF7FEBF 	    b tb_error 
 2793 04b4 8346     	2:  mov BPTR,r0 
 2794 04b6 4FF0030A 	9:  mov IN,#3 
 2795 04ba 7047     	    _RET 
 2796              	
 2797              	    _FUNC gpio
 2798 04bc 7047     	    _RET  
 2799              	
 2800              	/***************************************
 2801              	  BASIC: HEX 
 2802              	  set numeric base to hexadecimal 
 2803              	***************************************/
 2804 04be 00BF     	    _FUNC hex_base
 2805 04c0 4FF01000 	    mov r0,#16 
 2806 04c4 A061     	    str r0,[UPP,#BASE]
 2807 04c6 7047     	    _RET 
 2808              	
 2809              	    _FUNC const_idr
 2810 04c8 7047     	    _RET 
 2811              	
 2812              	/**********************************************
 2813              	  BASIC: IF relation THEN statement
 2814              	  execute statement only if relation is true
 2815              	*********************************************/
 2816 04ca 00BF     	    _FUNC if
 2817 04cc 00B5FFF7 	    _CALL relation 
 2817      FEFF5DF8 
 2817      04EB
 2818 04d6 09B9     	    cbnz r1,9f 
 2819 04d8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2820 04dc 7047     	9:  _RET 
 2821              	
 2822              	/*******************************************************
 2823              	  BASIC: THEN statement
 2824              	  following statement are executed if relation is !=0
 2825              	  optional, retained for compatibility.
 2826              	******************************************************/
 2827 04de 00BF     	    _FUNC then 
 2828              	// do nothing 
 2829 04e0 7047     	    _RET
 2830              	
 2831 04e2 00BF     	    _FUNC input_var
 2832 04e4 7047     	    _RET 
 2833              	
 2834 04e6 00BF     	    _FUNC invert
 2835 04e8 7047     	    _RET 
 2836              	
 2837 04ea 00BF     	    _FUNC enable_iwdg
 2838 04ec 7047     	    _RET 
 2839              	
ARM GAS  tinyBasic.s 			page 77


 2840 04ee 00BF     	    _FUNC refresh_iwdg
 2841 04f0 7047     	    _RET 
 2842              	
 2843 04f2 00BF     	    _FUNC key
 2844 04f4 7047     	    _RET  
 2845              	
 2846              	/******************************
 2847              	  BASIC: [let] var=expr 
 2848              	         [let] @(expr)=expr
 2849              	  input:
 2850              	    none 
 2851              	  output:
 2852              	    none 
 2853              	  use:
 2854              	
 2855              	****************************/         
 2856 04f6 00BF     	    _FUNC let
 2857 04f8 00B5FFF7 	    _CALL next_token 
 2857      FEFF5DF8 
 2857      04EB
 2858 0502 0428     	    cmp r0,#TK_VAR
 2859 0504 03D0     	    beq let_var 
 2860 0506 0528     	    cmp r0,#TK_ARRAY 
 2861 0508 07D0     	    beq let_array 
 2862 050a FFF7FEBF 	    b syntax_error 
 2863              	let_var:
 2864 050e 4FEA8101 	    lsl r1,#2
 2865 0512 04F16000 	    add r0,UPP,#VARS
 2866 0516 0844     	    add r0,r1
 2867 0518 1FE0     	    b 1f 
 2868              	let_array: 
 2869 051a 4FF00600 	    mov r0,#TK_LPAREN
 2870 051e 00B5FFF7 	    _CALL expect 
 2870      FEFF5DF8 
 2870      04EB
 2871 0528 00B5FFF7 	    _CALL expression
 2871      FEFF5DF8 
 2871      04EB
 2872 0532 0E28     	    cmp r0,#TK_INTGR 
 2873 0534 7FF4FEAF 	    bne syntax_error
 2874 0538 4CF8041D 	    _PUSH r1 
 2875 053c 4FF00700 	    mov r0,#TK_RPAREN
 2876 0540 00B5FFF7 	    _CALL expect 
 2876      FEFF5DF8 
 2876      04EB
 2877 054a 5CF8041B 	    _POP r1 
 2878 054e D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2879 0552 4FEA8101 	    lsl r1,#2 
 2880 0556 A0EB0100 	    sub r0,r1 
 2881 055a 4CF8040D 	1:  _PUSH r0 
 2882 055e 4FF03200 	    mov r0,#TK_EQUAL 
 2883 0562 00B5FFF7 	    _CALL expect 
 2883      FEFF5DF8 
 2883      04EB
 2884 056c 00B5FFF7 	    _CALL expression   
 2884      FEFF5DF8 
 2884      04EB
ARM GAS  tinyBasic.s 			page 78


 2885 0576 0E28     	    cmp r0,#TK_INTGR
 2886 0578 7FF4FEAF 	    bne syntax_error   
 2887 057c 5CF8040B 	2:  _POP r0 
 2888 0580 0160     	    str r1,[r0]
 2889 0582 7047     	    _RET  
 2890              	
 2891              	/***************************************
 2892              	  BASIC: LIST [[first]-last]
 2893              	  use:
 2894              	    r2   first line# 
 2895              	    r3   last line#
 2896              	    T1   *line 
 2897              	    T2   TXTEND 
 2898              	**************************************/  
 2899              	    _FUNC list
 2900 0584 206C10F0 	    _CLO
 2900      010F03D0 
 2900      4FF00700 
 2900      FFF7FEBF 
 2901 0594 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 2902 0598 D4F83490 	    ldr T2,[UPP,#TXTEND]
 2903 059c B8F80020 	    ldrh r2,[T1]
 2904 05a0 4FF40043 	    mov r3,#32768
 2905 05a4 00B5FFF7 	    _CALL next_token 
 2905      FEFF5DF8 
 2905      04EB
 2906 05ae E8B1     	    cbz r0,6f 
 2907 05b0 0E28     	    cmp r0,#TK_INTGR
 2908 05b2 06D1     	    bne 1f 
 2909 05b4 0A46     	    mov r2,r1 // first line
 2910 05b6 00B5FFF7 	    _CALL next_token
 2910      FEFF5DF8 
 2910      04EB
 2911 05c0 60B1     	    cbz r0,4f
 2912 05c2 1128     	1:  cmp r0,#TK_MINUS 
 2913 05c4 7FF4FEAF 	    bne syntax_error 
 2914 05c8 00B5FFF7 	    _CALL next_token 
 2914      FEFF5DF8 
 2914      04EB
 2915 05d2 18B1     	    cbz r0,4f 
 2916 05d4 0E28     	    cmp r0,#TK_INTGR
 2917 05d6 7FF4FEAF 	    bne syntax_error  
 2918 05da 0B46     	    mov r3,r1 
 2919              	4:  // skip lines below r2 
 2920 05dc B8F80000 	    ldrh r0,[T1]
 2921 05e0 9042     	    cmp r0,r2 
 2922 05e2 03D5     	    bpl 6f 
 2923 05e4 98F80200 	    ldrb r0,[T1,#2]
 2924 05e8 8044     	    add T1,r0
 2925 05ea F7E7     	    b 4b 
 2926 05ec C845     	6:  cmp T1,T2  
 2927 05ee 1AD5     	    bpl 9f
 2928 05f0 4046     	    mov r0,T1   
 2929 05f2 DFF83610 	    ldr r1,out_buff 
 2930 05f6 00B5FFF7 	    _CALL decompile_line 
 2930      FEFF5DF8 
 2930      04EB
ARM GAS  tinyBasic.s 			page 79


 2931 0600 00B5FFF7 	    _CALL uart_puts 
 2931      FEFF5DF8 
 2931      04EB
 2932 060a 4FF00D00 	    mov r0,#CR 
 2933 060e 00B5FFF7 	    _CALL uart_putc 
 2933      FEFF5DF8 
 2933      04EB
 2934 0618 98F80200 	    ldrb r0,[T1,#2]
 2935 061c 8044     	    add T1,r0
 2936 061e 98F80000 	    ldrb r0,[T1]
 2937 0622 9842     	    cmp r0,r3 
 2938 0624 E2DD     	    ble 6b 
 2939 0626 FFF7FEBF 	9:  b warm_start 
 2940 062a 00000000 	out_buff: .word _tib 
 2941              	
 2942 062e 00BF     	    _FUNC load
 2943 0630 7047     	    _RET 
 2944              	
 2945 0632 00BF     	    _FUNC log2
 2946 0634 7047     	    _RET 
 2947              	
 2948 0636 00BF     	    _FUNC lshift
 2949 0638 7047     	    _RET 
 2950              	
 2951 063a 00BF     	    _FUNC muldiv
 2952 063c 7047     	    _RET 
 2953              	
 2954              	/***********************************
 2955              	  BASIC: NEW 
 2956              	  delete existing program in memory
 2957              	  and clear variables and RAM 
 2958              	***********************************/
 2959 063e 00BF     	    _FUNC new
 2960 0640 206C10F0 	    _CLO 
 2960      010F03D0 
 2960      4FF00700 
 2960      FFF7FEBF 
 2961 0650 00B5FFF7 	    _CALL clear_basic 
 2961      FEFF5DF8 
 2961      04EB
 2962 065a FFF7FEBF 	    b warm_start   
 2963              	
 2964              	/************************************
 2965              	  BASIC: NOT relation  
 2966              	  invert logical value or relation
 2967              	************************************/
 2968 065e 00BF     	      _FUNC func_not
 2969 0660 00B5FFF7 	      _CALL relation 
 2969      FEFF5DF8 
 2969      04EB
 2970 066a 11B1     	      cbz r1,8f 
 2971 066c 81EA0101 	      eor r1,r1
 2972 0670 01E0     	      b 9f 
 2973 0672 4FF0FF31 	  8:  mov r1,#-1
 2974 0676 7047     	  9:  _RET 
 2975              	
 2976              	    _FUNC const_odr
ARM GAS  tinyBasic.s 			page 80


 2977 0678 7047     	    _RET 
 2978              	
 2979              	/******************************************
 2980              	  BASIC: OR(expr1,expr2)
 2981              	  binary OR between 2 expressions
 2982              	******************************************/
 2983 067a 00BF     	    _FUNC bit_or
 2984 067c 00B5FFF7 	    _CALL func_args
 2984      FEFF5DF8 
 2984      04EB
 2985 0686 0228     	    cmp r0,#2
 2986 0688 7FF4FEAF 	    bne syntax_error
 2987 068c 5CF8040B 	    _POP r0 
 2988 0690 5CF8041B 	    _POP r1
 2989 0694 41EA0001 	    orr r1,r0 
 2990 0698 4FF00E00 	    mov r0,#TK_INTGR
 2991 069c 7047     	    _RET 
 2992              	
 2993 069e 00BF     	    _FUNC pad_ref
 2994 06a0 7047     	    _RET 
 2995              	
 2996              	/***********************
 2997              	  BASIC: PAUSE expr 
 2998              	  suspend execution for 
 2999              	  expr milliseconds 
 3000              	************************/
 3001 06a2 00BF     	    _FUNC pause
 3002 06a4 00B5FFF7 	    _CALL expression 
 3002      FEFF5DF8 
 3002      04EB
 3003 06ae 0E28     	    cmp r0,#TK_INTGR 
 3004 06b0 7FF4FEAF 	    bne syntax_error 
 3005 06b4 E069     	    ldr r0,[UPP,#TICKS]
 3006 06b6 0844     	    add r0,r1 
 3007 06b8 E169     	1:  ldr r1,[UPP,#TICKS]
 3008 06ba 8842     	    cmp r0,r1 
 3009 06bc FCD1     	    bne 1b     
 3010 06be 7047     	    _RET 
 3011              	
 3012              	    _FUNC pin_mode
 3013 06c0 7047     	    _RET 
 3014              	
 3015 06c2 00BF     	    _FUNC peek
 3016 06c4 7047     	    _RET 
 3017              	
 3018 06c6 00BF     	    _FUNC const_input
 3019 06c8 7047     	    _RET  
 3020              	
 3021 06ca 00BF     	    _FUNC poke
 3022 06cc 7047     	    _RET 
 3023              	
 3024 06ce 00BF     	    _FUNC const_output
 3025 06d0 7047     	    _RET 
 3026              	
 3027              	/****************************
 3028              	  BASIC: PRINT|? arg_list 
 3029              	  print list of arguments 
ARM GAS  tinyBasic.s 			page 81


 3030              	****************************/
 3031 06d2 00BF     	    _FUNC print
 3032 06d4 88EA0808 	    eor T1,T1 
 3033 06d8 00B5FFF7 	0:  _CALL expression
 3033      FEFF5DF8 
 3033      04EB
 3034 06e2 0E28     	    cmp r0,#TK_INTGR
 3035 06e4 07D1     	    bne 1f 
 3036 06e6 0846     	    mov r0,r1
 3037 06e8 A169     	    ldr r1,[UPP,#BASE]
 3038 06ea 00B5FFF7 	    _CALL print_int
 3038      FEFF5DF8 
 3038      04EB
 3039 06f4 3DE0     	    b 8f 
 3040 06f6 00B5FFF7 	1:  _CALL next_token
 3040      FEFF5DF8 
 3040      04EB
 3041 0700 0128     	    cmp r0,#TK_COLON 
 3042 0702 04DC     	    bgt 2f
 3043 0704 D4F800A0 	    _UNGET_TOKEN 
 3043      D4F808B0 
 3044 070c 41E0     	    b print_exit
 3045 070e 0228     	2:  cmp r0,#TK_QSTR 
 3046 0710 06D1     	    bne 4f
 3047 0712 0846     	    mov r0,r1 
 3048 0714 00B5FFF7 	    _CALL uart_puts  
 3048      FEFF5DF8 
 3048      04EB
 3049 071e 28E0     	    b 8f 
 3050 0720 0C28     	4:  cmp r0,#TK_CFUNC
 3051 0722 05D1     	    bne 5f
 3052 0724 0846     	    mov r0,r1
 3053 0726 00B5FFF7 	    _CALL execute 
 3053      FEFF5DF8 
 3053      04EB
 3054 0730 0328     	5:  cmp r0,#TK_CHAR 
 3055 0732 06D1     	    bne 6f 
 3056 0734 0846     	    mov r0,r1 
 3057 0736 00B5FFF7 	    _CALL uart_putc 
 3057      FEFF5DF8 
 3057      04EB
 3058 0740 17E0     	    b 8f 
 3059 0742 0928     	6:  cmp r0,#TK_SHARP
 3060 0744 04D0     	    beq 6f 
 3061 0746 D4F800A0 	    _UNGET_TOKEN
 3061      D4F808B0 
 3062 074e 20E0     	    b print_exit  
 3063 0750 00B5FFF7 	6:  _CALL next_token
 3063      FEFF5DF8 
 3063      04EB
 3064 075a 0928     	    cmp r0,#TK_SHARP 
 3065 075c 05D1     	    bne 7f
 3066 075e 00B5FFF7 	    _CALL tabulation 
 3066      FEFF5DF8 
 3066      04EB
 3067 0768 03E0     	    b 8f 
 3068 076a 0E28     	7:  cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 82


 3069 076c 7FF4FEAF 	    bne syntax_error 
 3070 0770 6164     	    str r1,[UPP,#TAB_WIDTH]
 3071 0772 88EA0808 	8:  eor T1,T1 
 3072 0776 00B5FFF7 	    _CALL next_token 
 3072      FEFF5DF8 
 3072      04EB
 3073 0780 0828     	    cmp r0,#TK_COMMA 
 3074 0782 02D1     	    bne 8f 
 3075 0784 4FF0FF38 	    mov T1,#-1
 3076 0788 A6D0     	    beq 0b
 3077 078a D4F800A0 	8: _UNGET_TOKEN 
 3077      D4F808B0 
 3078              	print_exit:
 3079 0792 18EA0808 	    ands T1,T1 
 3080 0796 06D1     	    bne 9f
 3081 0798 4FF00D00 	    mov r0,#CR 
 3082 079c 00B5FFF7 	    _CALL uart_putc 
 3082      FEFF5DF8 
 3082      04EB
 3083 07a6 7047     	9:  _RET 
 3084              	
 3085              	    _FUNC const_porta
 3086 07a8 7047     	    _RET 
 3087              	
 3088 07aa 00BF     	    _FUNC const_portb
 3089 07ac 7047     	    _RET 
 3090              	
 3091 07ae 00BF     	    _FUNC const_portc
 3092 07b0 7047     	    _RET 
 3093              	
 3094 07b2 00BF     	    _FUNC const_portd
 3095 07b4 7047     	    _RET 
 3096              	
 3097 07b6 00BF     	    _FUNC const_porte
 3098 07b8 7047     	    _RET  
 3099              	
 3100 07ba 00BF     	    _FUNC const_portf
 3101 07bc 7047     	    _RET 
 3102              	
 3103 07be 00BF     	    _FUNC const_portg
 3104 07c0 7047     	    _RET 
 3105              	
 3106 07c2 00BF     	    _FUNC const_porth
 3107 07c4 7047     	    _RET 
 3108              	
 3109 07c6 00BF     	    _FUNC const_porti
 3110 07c8 7047     	    _RET 
 3111              	
 3112              	/**************************************
 3113              	  BASIC: QKEY
 3114              	  check if key pressed 
 3115              	**************************************/ 
 3116 07ca 00BF     	    _FUNC qkey
 3117 07cc 4FF00001 	    mov r1,#0
 3118 07d0 00B5FFF7 	    _CALL uart_qkey
 3118      FEFF5DF8 
 3118      04EB
ARM GAS  tinyBasic.s 			page 83


 3119 07da 01D0     	    beq 9f 
 3120 07dc 4FF0FF31 	    mov r1,#-1 
 3121 07e0 4FF00E00 	9:  mov r0,#TK_INTGR
 3122 07e4 7047     	    _RET 
 3123              	
 3124              	/******************************************
 3125              	  BASIC RANDOM(expr)
 3126              	  generate random number between 0..expr-1
 3127              	******************************************/
 3128 07e6 00BF     	    _FUNC random
 3129 07e8 00B5FFF7 	    _CALL func_args 
 3129      FEFF5DF8 
 3129      04EB
 3130 07f2 0128     	    cmp r0,#1
 3131 07f4 7FF4FEAF 	    bne syntax_error 
 3132 07f8 606A     	    ldr r0,[UPP,#SEED]
 3133 07fa 4FEA4031 	    lsl r1,r0,#13
 3134 07fe 81EA0001 	    eor r1,r0
 3135 0802 4FEA5140 	    lsr r0,r1,#17
 3136 0806 81EA0001 	    eor r1,r0
 3137 080a 4FEA4110 	    lsl r0,r1,#5
 3138 080e 81EA0001 	    eor r1,r0
 3139 0812 6162     	    str r1,[UPP,#SEED]
 3140 0814 5CF8040B 	    _POP r0 
 3141 0818 B1FBF0F2 	    udiv r2,r1,r0  
 3142 081c 00FB02F2 	    mul r2,r0 
 3143 0820 A1EB0201 	    sub r1,r2 
 3144 0824 4FF00E00 	    mov r0,#TK_INTGR
 3145 0828 7047     	    _RET 
 3146              	
 3147 082a 00BF     	    _FUNC rshift
 3148 082c 7047     	    _RET 
 3149              	
 3150              	/****************************
 3151              	  BASIC: RUN 
 3152              	  execute program in memory
 3153              	****************************/
 3154 082e 00BF     	    _FUNC run
 3155 0830 206C10F0 	    _CLO 
 3155      010F03D0 
 3155      4FF00700 
 3155      FFF7FEBF 
 3156 0840 206B     	    ldr r0,[UPP,#TXTBGN]
 3157 0842 616B     	    ldr r1,[UPP,#TXTEND]
 3158 0844 8842     	    cmp r0,r1
 3159 0846 0DD0     	    beq 9f 
 3160 0848 8178     	    ldrb r1,[r0,#2]
 3161 084a 6160     	    str r1,[UPP,#COUNT]
 3162 084c 8346     	    mov BPTR,r0 
 3163 084e 4FF0030A 	    mov IN,#3
 3164              	    // reset dataline pointers 
 3165 0852 80EA0000 	    eor r0,r0 
 3166 0856 E060     	    str r0,[UPP,#DATAPTR]
 3167 0858 2061     	    str r0,[UPP,#DATA]
 3168 085a 6061     	    str r0,[UPP,#DATALEN] 
 3169 085c 206C     	    ldr r0,[UPP,#FLAGS]
 3170 085e 40F00100 	    orr r0,#FRUN 
ARM GAS  tinyBasic.s 			page 84


 3171 0862 2064     	    str r0,[UPP,#FLAGS]
 3172 0864 7047     	9:  _RET 
 3173              	
 3174 0866 00BF     	    _FUNC save
 3175 0868 7047     	    _RET 
 3176              	
 3177 086a 00BF     	    _FUNC show
 3178 086c 7047     	    _RET 
 3179              	
 3180 086e 00BF     	    _FUNC size
 3181 0870 7047     	    _RET  
 3182              	
 3183 0872 00BF     	    _FUNC sleep
 3184 0874 7047     	    _RET 
 3185              	
 3186 0876 00BF     	    _FUNC spi_read
 3187 0878 7047     	    _RET 
 3188              	
 3189 087a 00BF     	    _FUNC spi_enable
 3190 087c 7047     	    _RET 
 3191              	
 3192 087e 00BF     	    _FUNC spi_select
 3193 0880 7047     	    _RET 
 3194              	
 3195 0882 00BF     	    _FUNC spi_write
 3196 0884 7047     	    _RET 
 3197              	
 3198 0886 00BF     	    _FUNC stop
 3199 0888 7047     	    _RET 
 3200              	
 3201              	/**************************
 3202              	  BASIC: TICKS 
 3203              	  return msec counter
 3204              	**************************/  
 3205 088a 00BF     	    _FUNC get_ticks
 3206 088c E169     	    ldr r1,[UPP,#TICKS]
 3207 088e 4FF00E00 	    mov r0,#TK_INTGR
 3208 0892 7047     	    _RET  
 3209              	
 3210              	/*************************
 3211              	  BASIC: TIMER expr 
 3212              	  set countdown timer 
 3213              	************************/
 3214              	    _FUNC set_timer
 3215 0894 00B5FFF7 	    _CALL expression 
 3215      FEFF5DF8 
 3215      04EB
 3216 089e 0E28     	    cmp r0,#TK_INTGR
 3217 08a0 7FF4FEAF 	    bne syntax_error 
 3218 08a4 2162     	    str r1,[UPP,#TIMER]
 3219 08a6 7047     	    _RET 
 3220              	
 3221              	/***************************
 3222              	  BASIC: TIMEOUT
 3223              	  check for timer expiration 
 3224              	  return -1 true || 0 false
 3225              	****************************/
ARM GAS  tinyBasic.s 			page 85


 3226              	    _FUNC timeout
 3227 08a8 81EA0101 	    eor r1,r1 
 3228 08ac 206A     	    ldr r0,[UPP,#TIMER]
 3229 08ae 08B9     	    cbnz r0,9f 
 3230 08b0 6FEA0101 	    mvn r1,r1 
 3231 08b4 4FF00E00 	9:  mov r0,#TK_INTGR    
 3232 08b8 7047     	    _RET 
 3233              	
 3234 08ba 00BF     	    _FUNC tone
 3235 08bc 7047     	    _RET 
 3236              	
 3237              	/***************************
 3238              	  BASIC: UBOUND 
 3239              	  return last indice of @
 3240              	  output:
 3241              	    r0  TK_INTGR 
 3242              	    r1  +int 
 3243              	**************************/
 3244 08be 00BF     	    _FUNC ubound
 3245 08c0 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3246 08c4 606B     	    ldr r0,[UPP,#TXTEND]
 3247 08c6 A1EB0001 	    sub r1,r0 
 3248 08ca 4FEA9101 	    lsr r1,#2
 3249 08ce 4FF00E00 	    mov r0,#TK_INTGR 
 3250 08d2 7047     	    _RET 
 3251              	
 3252              	    _FUNC uflash
 3253 08d4 7047     	    _RET 
 3254              	
 3255              	/************************************
 3256              	  BASIC: UNTIL relation 
 3257              	  close a DO..UNTIL loop 
 3258              	  loop until relation come true 
 3259              	************************************/
 3260 08d6 00BF     	    _FUNC until
 3261 08d8 00B5FFF7 	    _CALL relation 
 3261      FEFF5DF8 
 3261      04EB
 3262 08e2 11B1     	    cbz r1,9f
 3263 08e4 0CF10C0C 	    add DP,#12
 3264 08e8 7047     	    _RET  
 3265 08ea 9CE8010C 	9:  ldmia DP,{r0,IN,BPTR}
 3266 08ee 6060     	    str r0,[UPP,#COUNT]
 3267 08f0 7047     	    _RET 
 3268              	
 3269 08f2 00BF     	    _FUNC usr
 3270 08f4 7047     	    _RET  
 3271              	
 3272 08f6 00BF     	    _FUNC wait
 3273 08f8 7047     	    _RET 
 3274              	
 3275              	/*********************************************
 3276              	  BASIC: WORDS 
 3277              	  print list of BASIC WORDS in dictionary 
 3278              	  use:
 3279              	    r0,r1,T1,T2  
 3280              	********************************************/
ARM GAS  tinyBasic.s 			page 86


 3281 08fa 00BF     	    _FUNC words
 3282 08fc 206C10F0 	    _CLO 
 3282      010F03D0 
 3282      4FF00700 
 3282      FFF7FEBF 
 3283 090c DFF8F082 	    ldr T1,=kword_dict
 3284 0910 89EA0909 	    eor T2,T2 
 3285              	1:  
 3286 0914 4046     	    mov r0,T1
 3287 0916 00B5FFF7 	    _CALL strlen
 3287      FEFF5DF8 
 3287      04EB
 3288 0920 F0B1     	    cbz r0,9f 
 3289 0922 8144     	    add T2,r0 
 3290 0924 B9F1500F 	    cmp T2,#80 
 3291 0928 08D4     	    bmi 2f
 3292 092a 89EA0909 	    eor T2,T2  
 3293 092e 4FF00D00 	    mov r0,#CR 
 3294 0932 00B5FFF7 	    _CALL uart_putc 
 3294      FEFF5DF8 
 3294      04EB
 3295 093c 4046     	2:  mov r0,T1 
 3296 093e 00B5FFF7 	    _CALL uart_puts 
 3296      FEFF5DF8 
 3296      04EB
 3297 0948 4FF02000 	    mov r0,#SPACE
 3298 094c 09F10109 	    add T2,#1  
 3299 0950 00B5FFF7 	    _CALL uart_putc 
 3299      FEFF5DF8 
 3299      04EB
 3300 095a 58F80C8C 	    ldr T1,[T1,#-12]
 3301 095e D9E7     	    b 1b 
 3302 0960 7047     	9:  _RET 
 3303              	
 3304 0962 00BF     	    _FUNC write
 3305 0964 7047     	    _RET 
 3306              	
 3307              	/**************************************
 3308              	  BASIC: XOR(expr1,expr2)
 3309              	  binary exclusive or between 2 expressions
 3310              	**************************************/
 3311 0966 00BF     	    _FUNC bit_xor
 3312 0968 00B5FFF7 	    _CALL func_args
 3312      FEFF5DF8 
 3312      04EB
 3313 0972 0228     	    cmp r0,#2
 3314 0974 7FF4FEAF 	    bne syntax_error
 3315 0978 5CF8040B 	    _POP r0
 3316 097c 5CF8041B 	    _POP r1 
 3317 0980 81EA0001 	    eor r1,r0 
 3318 0984 4FF00E00 	    mov r0,#TK_INTGR
 3319 0988 7047     	    _RET 
 3320              	
 3321 098a 00BF     	    _FUNC transmit
 3322 098c 7047     	    _RET 
 3323              	
 3324 098e 00BF     	    _FUNC receive
ARM GAS  tinyBasic.s 			page 87


 3325 0990 7047     	    _RET  
 3326              	
 3327              	
 3328              	/*************************************************
 3329              	   extra FLASH memory not used by Tiny BASIC
 3330              	   is used to save BASIC programs.
 3331              	************************************************/
 3332 0992 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3332      0080AFF3 
 3332      0080AFF3 
 3332      0080AFF3 
 3332      0080AFF3 
 3333              	  .section .fs
 3334              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 88


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 89


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 90


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 91


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 92


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 93


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 94


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
       cmd_index.inc:128    *ABS*:0000000000000067 THEN_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1515   .text:0000000000000c14 pad
         tinyBasic.s:610    .text:0000000000000450 parse_int
         tinyBasic.s:1170   .text:00000000000008b0 tb_error
         tinyBasic.s:447    .text:00000000000002b8 comp_token
         tinyBasic.s:521    .text:00000000000003a4 store_r0
         tinyBasic.s:704    .text:00000000000004f0 skip
         tinyBasic.s:723    .text:0000000000000508 upper
         tinyBasic.s:555    .text:00000000000003e4 is_special
         tinyBasic.s:577    .text:0000000000000428 token_ofs
         tinyBasic.s:462    .text:00000000000002f8 tok_idx0
         tinyBasic.s:524    .text:00000000000003aa try_number
         tinyBasic.s:466    .text:00000000000002fa single
         tinyBasic.s:572    .text:0000000000000418 tok_single
         tinyBasic.s:470    .text:0000000000000302 lt
         tinyBasic.s:476    .text:0000000000000310 gt
         tinyBasic.s:489    .text:0000000000000334 bkslash
ARM GAS  tinyBasic.s 			page 95


         tinyBasic.s:538    .text:00000000000003de token_exit
         tinyBasic.s:496    .text:000000000000034a prt_cmd
         tinyBasic.s:502    .text:000000000000035c quote
         tinyBasic.s:643    .text:0000000000000488 parse_quote
         tinyBasic.s:507    .text:0000000000000370 tick
         tinyBasic.s:914    .text:0000000000000608 parse_keyword
         tinyBasic.s:569    .text:0000000000000404 char_list
         tinyBasic.s:570    .text:0000000000000404 $d
         tinyBasic.s:578    .text:0000000000000428 $d
         tinyBasic.s:594    .text:000000000000044e $t
         tinyBasic.s:873    .text:00000000000005bc atoi
         tinyBasic.s:674    .text:00000000000004bc get_escaped_char
         tinyBasic.s:691    .text:00000000000004e6 escaped
         tinyBasic.s:691    .text:00000000000004e6 $d
         tinyBasic.s:704    .text:00000000000004ee $t
         tinyBasic.s:741    .text:0000000000000518 is_digit
         tinyBasic.s:765    .text:0000000000000534 is_hex
         tinyBasic.s:790    .text:0000000000000558 is_bit
         tinyBasic.s:811    .text:0000000000000574 is_alpha
         tinyBasic.s:832    .text:000000000000058c is_num
         tinyBasic.s:853    .text:00000000000005a4 is_alnum
         tinyBasic.s:1155   .text:00000000000008a8 syntax_error
         tinyBasic.s:2212   .rodata.dictionary:00000000000007b4 kword_dict
         tinyBasic.s:1332   .text:0000000000000a60 search_dict
         tinyBasic.s:965    .text:0000000000000690 cmd_name
         tinyBasic.s:991    .text:00000000000006b4 decompile_line
         tinyBasic.s:1008   .text:00000000000006fa decomp_loop
         tinyBasic.s:1608   .text:0000000000000cb8 next_token
         tinyBasic.s:1112   .text:0000000000000857 single_char
         tinyBasic.s:1108   .text:000000000000084e ge_str
         tinyBasic.s:1109   .text:0000000000000851 le_str
         tinyBasic.s:1110   .text:0000000000000854 ne_str
         tinyBasic.s:1108   .text:000000000000084e $d
         tinyBasic.s:1132   .text:0000000000000890 modulo
         tinyBasic.s:1132   .text:000000000000088e $t
         tinyBasic.s:1212   .text:0000000000000966 compile_error
         tinyBasic.s:1174   .text:00000000000008b8 rt_error
         tinyBasic.s:1229   .text:00000000000009be rt_error_msg
         tinyBasic.s:1234   .text:00000000000009ea err_msg
         tinyBasic.s:1230   .text:00000000000009ce lineno_msg
         tinyBasic.s:1231   .text:00000000000009d5 line_adr_msg
         tinyBasic.s:1232   .text:00000000000009e0 token_at_msg
         tinyBasic.s:2614   .text.basic:00000000000002f6 dump01
         tinyBasic.s:1528   .text:0000000000000c24 warm_start
         tinyBasic.s:1229   .text:00000000000009be $d
         tinyBasic.s:1241   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1242   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1243   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1244   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1245   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1246   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1247   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1248   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1249   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1250   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1251   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1252   .rodata.tb_error:00000000000000ea err_no_data
ARM GAS  tinyBasic.s 			page 96


         tinyBasic.s:1253   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1254   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1255   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1257   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1258   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1259   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1269   .text:0000000000000a2a $t
         tinyBasic.s:1269   .text:0000000000000a2c skip_line
         tinyBasic.s:1286   .text:0000000000000a34 BTGL
         tinyBasic.s:1304   .text:0000000000000a38 kword_cmp
         tinyBasic.s:1370   .text:0000000000000a9e cold_start
         tinyBasic.s:1391   .text:0000000000000aec src_addr
         tinyBasic.s:1393   .text:0000000000000af0 dest_addr
         tinyBasic.s:1514   .text:0000000000000c10 tib
         tinyBasic.s:1395   .text:0000000000000af4 sysvar_size
         tinyBasic.s:1406   .text:0000000000000af8 prt_version
         tinyBasic.s:1463   .text:0000000000000ba0 clear_basic
         tinyBasic.s:1392   .text:0000000000000aec $d
         tinyBasic.s:2071   .rodata:0000000000000000 uzero
         tinyBasic.s:2095   .rodata:00000000000000cc ulast
         tinyBasic.s:1406   .text:0000000000000af8 $t
         tinyBasic.s:1430   .text:0000000000000b60 version_msg
         tinyBasic.s:1432   .text:0000000000000b80 version
         tinyBasic.s:1431   .text:0000000000000b60 $d
         tinyBasic.s:1447   .text:0000000000000b84 clear_vars
         tinyBasic.s:1497   .text:0000000000000be4 warm_init
         tinyBasic.s:1513   .text:0000000000000c0c dstack
         tinyBasic.s:1512   .text:0000000000000c08 mstack
         tinyBasic.s:1512   .text:0000000000000c08 $d
         tinyBasic.s:1516   .text:0000000000000c18 array
         tinyBasic.s:1517   .text:0000000000000c1c ready
         tinyBasic.s:1548   .text:0000000000000c3c cmd_line
         tinyBasic.s:1559   .text:0000000000000c6c interpreter
         tinyBasic.s:1592   .text:0000000000000cac execute
         tinyBasic.s:2863   .text.basic:000000000000050e let_var
         tinyBasic.s:2868   .text.basic:000000000000051a let_array
         tinyBasic.s:2220   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1614   .text:0000000000000cc6 new_line
         tinyBasic.s:1618   .text:0000000000000cce end_of_line
         tinyBasic.s:1665   .text:0000000000000d44 tok_jmp
         tinyBasic.s:1666   .text:0000000000000d44 $d
         tinyBasic.s:1680   .text:0000000000000d84 $t
         tinyBasic.s:1695   .text:0000000000000d84 expect
         tinyBasic.s:1714   .text:0000000000000da0 func_args
         tinyBasic.s:1734   .text:0000000000000dcc arg_list
         tinyBasic.s:1892   .text:0000000000000f6c expression
         tinyBasic.s:1768   .text:0000000000000e0c factor
         tinyBasic.s:2000   .text:0000000000001058 get_array_element
         tinyBasic.s:2038   .text:0000000000001080 get_var
         tinyBasic.s:1841   .text:0000000000000ef0 term
         tinyBasic.s:1934   .text:0000000000000fd4 relation
         tinyBasic.s:1981   .text:000000000000104e relop_jmp
         tinyBasic.s:1953   .text:000000000000101e rel_idx0
         tinyBasic.s:1954   .text:000000000000101e rel_eq
         tinyBasic.s:1971   .text:0000000000001034 rel_false
         tinyBasic.s:1957   .text:0000000000001022 rel_lt
         tinyBasic.s:1960   .text:0000000000001026 rel_le
ARM GAS  tinyBasic.s 			page 97


         tinyBasic.s:1963   .text:000000000000102a rel_gt
         tinyBasic.s:1966   .text:000000000000102e rel_ge
         tinyBasic.s:1969   .text:0000000000001032 rel_diff
         tinyBasic.s:1982   .text:000000000000104e $d
         tinyBasic.s:2020   .text:000000000000106c set_array_element
         tinyBasic.s:2056   .text:0000000000001090 set_var
         tinyBasic.s:3334   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2092   .rodata:0000000000000050 $d
         tinyBasic.s:2102   *ABS*:0000000000000000 link
         tinyBasic.s:2103   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2213   .rodata.dictionary:00000000000007b4 LINK
         tinyBasic.s:2104   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2208   .rodata.dictionary:00000000000007a8 first_link
         tinyBasic.s:2254   .text.basic:0000000000000000 abs
         tinyBasic.s:2266   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2269   .text.basic:000000000000002c analog_read
         tinyBasic.s:2276   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2291   .text.basic:0000000000000054 ascii
         tinyBasic.s:2308   .text.basic:0000000000000098 autorun
         tinyBasic.s:2311   .text.basic:000000000000009c awu
         tinyBasic.s:2319   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2344   .text.basic:00000000000000cc bit_reset
         tinyBasic.s:2369   .text.basic:00000000000000f8 bit_set
         tinyBasic.s:2409   .text.basic:0000000000000148 bit_test
         tinyBasic.s:2393   .text.basic:0000000000000120 bit_toggle
         tinyBasic.s:2428   .text.basic:0000000000000188 bye
         tinyBasic.s:2435   .text.basic:000000000000018c char
         tinyBasic.s:2444   .text.basic:00000000000001ac const_cr2
         tinyBasic.s:2447   .text.basic:00000000000001b0 const_cr1
         tinyBasic.s:2460   .text.basic:00000000000001b4 data_line
         tinyBasic.s:2561   .text.basic:00000000000002ac const_ddr
         tinyBasic.s:2568   .text.basic:00000000000002b0 dec_base
         tinyBasic.s:2573   .text.basic:00000000000002b8 directory
         tinyBasic.s:2580   .text.basic:00000000000002bc do_loop
         tinyBasic.s:2585   .text.basic:00000000000002c4 digital_read
         tinyBasic.s:2588   .text.basic:00000000000002c8 digital_write
         tinyBasic.s:2654   .text.basic:0000000000000380 cmd_end
         tinyBasic.s:2658   .text.basic:0000000000000388 const_eeprom_base
         tinyBasic.s:2661   .text.basic:000000000000038c fcpu
         tinyBasic.s:2671   .text.basic:0000000000000394 for
         tinyBasic.s:2664   .text.basic:0000000000000390 forget
         tinyBasic.s:2751   .text.basic:0000000000000448 gosub
         tinyBasic.s:2783   .text.basic:000000000000048c goto
         tinyBasic.s:2797   .text.basic:00000000000004bc gpio
         tinyBasic.s:2804   .text.basic:00000000000004c0 hex_base
         tinyBasic.s:2809   .text.basic:00000000000004c8 const_idr
         tinyBasic.s:2816   .text.basic:00000000000004cc if
         tinyBasic.s:2831   .text.basic:00000000000004e4 input_var
         tinyBasic.s:2834   .text.basic:00000000000004e8 invert
         tinyBasic.s:2837   .text.basic:00000000000004ec enable_iwdg
         tinyBasic.s:2840   .text.basic:00000000000004f0 refresh_iwdg
         tinyBasic.s:2843   .text.basic:00000000000004f4 key
         tinyBasic.s:2856   .text.basic:00000000000004f8 let
         tinyBasic.s:2899   .text.basic:0000000000000584 list
         tinyBasic.s:2942   .text.basic:0000000000000630 load
         tinyBasic.s:2945   .text.basic:0000000000000634 log2
         tinyBasic.s:2948   .text.basic:0000000000000638 lshift
ARM GAS  tinyBasic.s 			page 98


         tinyBasic.s:2951   .text.basic:000000000000063c muldiv
         tinyBasic.s:2718   .text.basic:0000000000000400 next
         tinyBasic.s:2959   .text.basic:0000000000000640 new
         tinyBasic.s:2968   .text.basic:0000000000000660 func_not
         tinyBasic.s:2976   .text.basic:0000000000000678 const_odr
         tinyBasic.s:2983   .text.basic:000000000000067c bit_or
         tinyBasic.s:2993   .text.basic:00000000000006a0 pad_ref
         tinyBasic.s:3001   .text.basic:00000000000006a4 pause
         tinyBasic.s:3012   .text.basic:00000000000006c0 pin_mode
         tinyBasic.s:3015   .text.basic:00000000000006c4 peek
         tinyBasic.s:3018   .text.basic:00000000000006c8 const_input
         tinyBasic.s:3021   .text.basic:00000000000006cc poke
         tinyBasic.s:3024   .text.basic:00000000000006d0 const_output
         tinyBasic.s:3031   .text.basic:00000000000006d4 print
         tinyBasic.s:3085   .text.basic:00000000000007a8 const_porta
         tinyBasic.s:3088   .text.basic:00000000000007ac const_portb
         tinyBasic.s:3091   .text.basic:00000000000007b0 const_portc
         tinyBasic.s:3094   .text.basic:00000000000007b4 const_portd
         tinyBasic.s:3097   .text.basic:00000000000007b8 const_porte
         tinyBasic.s:3100   .text.basic:00000000000007bc const_portf
         tinyBasic.s:3103   .text.basic:00000000000007c0 const_portg
         tinyBasic.s:3106   .text.basic:00000000000007c4 const_porth
         tinyBasic.s:3109   .text.basic:00000000000007c8 const_porti
         tinyBasic.s:3116   .text.basic:00000000000007cc qkey
         tinyBasic.s:2490   .text.basic:0000000000000208 read
         tinyBasic.s:2532   .text.basic:0000000000000268 restore
         tinyBasic.s:2772   .text.basic:0000000000000484 return
         tinyBasic.s:3128   .text.basic:00000000000007e8 random
         tinyBasic.s:3147   .text.basic:000000000000082c rshift
         tinyBasic.s:3154   .text.basic:0000000000000830 run
         tinyBasic.s:3174   .text.basic:0000000000000868 save
         tinyBasic.s:3177   .text.basic:000000000000086c show
         tinyBasic.s:3180   .text.basic:0000000000000870 size
         tinyBasic.s:3183   .text.basic:0000000000000874 sleep
         tinyBasic.s:3186   .text.basic:0000000000000878 spi_read
         tinyBasic.s:3189   .text.basic:000000000000087c spi_enable
         tinyBasic.s:3192   .text.basic:0000000000000880 spi_select
         tinyBasic.s:3195   .text.basic:0000000000000884 spi_write
         tinyBasic.s:2703   .text.basic:00000000000003e4 step
         tinyBasic.s:3198   .text.basic:0000000000000888 stop
         tinyBasic.s:3205   .text.basic:000000000000088c get_ticks
         tinyBasic.s:3214   .text.basic:0000000000000894 set_timer
         tinyBasic.s:3226   .text.basic:00000000000008a8 timeout
         tinyBasic.s:2689   .text.basic:00000000000003c8 to
         tinyBasic.s:3234   .text.basic:00000000000008bc tone
         tinyBasic.s:3244   .text.basic:00000000000008c0 ubound
         tinyBasic.s:3252   .text.basic:00000000000008d4 uflash
         tinyBasic.s:3260   .text.basic:00000000000008d8 until
         tinyBasic.s:3269   .text.basic:00000000000008f4 usr
         tinyBasic.s:3272   .text.basic:00000000000008f8 wait
         tinyBasic.s:3281   .text.basic:00000000000008fc words
         tinyBasic.s:3304   .text.basic:0000000000000964 write
         tinyBasic.s:3311   .text.basic:0000000000000968 bit_xor
         tinyBasic.s:3321   .text.basic:000000000000098c transmit
         tinyBasic.s:3324   .text.basic:0000000000000990 receive
         tinyBasic.s:2602   .text.basic:00000000000002cc dump
         tinyBasic.s:2827   .text.basic:00000000000004e0 then
ARM GAS  tinyBasic.s 			page 99


         tinyBasic.s:2254   .text.basic:0000000000000000 $t
         tinyBasic.s:2509   .text.basic:0000000000000240 seek_next
         tinyBasic.s:2554   .text.basic:000000000000029e no_data_line
         tinyBasic.s:2550   .text.basic:0000000000000298 try_next_line
         tinyBasic.s:2626   .text.basic:0000000000000318 print_dump_header
         tinyBasic.s:2940   .text.basic:000000000000062a out_buff
         tinyBasic.s:2940   .text.basic:000000000000062a $d
         tinyBasic.s:2942   .text.basic:000000000000062e $t
         tinyBasic.s:3078   .text.basic:0000000000000792 print_exit
         tinyBasic.s:3334   .text.basic:0000000000000c00 $d
         tinyBasic.s:2068   .text:000000000000109e $d
         tinyBasic.s:3334   .text:00000000000010a0 $d
         tinyBasic.s:576    .text:0000000000000425 $d
         tinyBasic.s:576    .text:0000000000000426 $t
         tinyBasic.s:1434   .text:0000000000000b81 $d
         tinyBasic.s:1434   .text:0000000000000b82 $t
         tinyBasic.s:1528   .text:0000000000000c23 $d
         tinyBasic.s:1528   .text:0000000000000c24 $t
         tinyBasic.s:2000   .text:0000000000001055 $d
         tinyBasic.s:2000   .text:0000000000001056 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_qkey
