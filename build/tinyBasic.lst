ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, 102 
 128              	    .equ THEN_IDX,103
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
ARM GAS  tinyBasic.s 			page 13


  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
ARM GAS  tinyBasic.s 			page 14


 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
ARM GAS  tinyBasic.s 			page 15


 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count
 186              	      T1    tab_width  
 187              	****************************************/
 188              	    _FUNC prt_row 
 189 00c8 2DE90F01 	    push {r0,r1,r2,r3,T1}
 190 00cc 0246     	    mov r2,r0
 191 00ce D4F84480 	    ldr T1,[UPP,#TAB_WIDTH]
 192 00d2 4FF00A00 	    mov r0,#10
 193 00d6 6064     	    str r0,[UPP,#TAB_WIDTH]
 194 00d8 1046     	    mov r0,r2 
 195 00da 0B46     	    mov r3,r1  
 196 00dc 4FF01001 	    mov r1,#16 
 197 00e0 00B5FFF7 	    _CALL print_int 
 197      FEFF5DF8 
 197      04EB
 198 00ea 00B5FFF7 	    _CALL tabulation
 198      FEFF5DF8 
 198      04EB
 199 00f4 C4F84480 	    str T1,[UPP,#TAB_WIDTH]
 200              	// print bytes values in hexadecimal 
 201 00f8 12F8010B 	1:  ldrb r0,[r2],#1 
 202 00fc 00B5FFF7 	    _CALL print_hex
 202      FEFF5DF8 
 202      04EB
 203 0106 013B     	    subs r3,#1 
 204 0108 F6D1     	    bne 1b 
 205 010a 4FF00200 	    mov r0,#2 
 206 010e 00B5FFF7 	    _CALL spaces
 206      FEFF5DF8 
 206      04EB
 207              	// print characters      
ARM GAS  tinyBasic.s 			page 16


 208 0118 03BC     	    pop {r0,r1}
 209 011a 00B500F0 	    _CALL prt_chars 
 209      0EF85DF8 
 209      04EB
 210 0124 4FF00D00 	    mov r0,#CR 
 211 0128 00B5FFF7 	    _CALL uart_putc 
 211      FEFF5DF8 
 211      04EB
 212 0132 1046     	    mov r0,r2
 213 0134 BDE80C01 	    pop {r2,r3,T1}      
 214 0138 7047     	    _RET 
 215              	
 216              	/************************************
 217              	    prt_chars 
 218              	    print n ascii character starting 
 219              	    at address 
 220              	    input: 
 221              	      r0    address 
 222              	      r1    count 
 223              	    output:
 224              	      r0    address + count
 225              	    use:
 226              	      r2    address 
 227              	***********************************/
 228 013a 00BF     	    _FUNC prt_chars 
 229 013c 04B4     	    push {r2}
 230 013e 0246     	    mov r2,r0
 231 0140 12F8010B 	1:  ldrb r0,[r2],#1 
 232 0144 2028     	    cmp r0,#SPACE 
 233 0146 01D5     	    bpl 2f 
 234 0148 4FF05F00 	    mov r0,#'_' 
 235 014c 00B5FFF7 	2:  _CALL uart_putc
 235      FEFF5DF8 
 235      04EB
 236 0156 0139     	    subs r1,#1 
 237 0158 F2D1     	    bne 1b 
 238 015a 1046     	    mov r0,r2 
 239 015c 04BC     	    pop {r2}
 240 015e 7047     	    _RET 
 241              	
 242              	/***************************************
 243              	    search_lineno 
 244              	    localize BASIC line from its number 
 245              	    input:
 246              	      r0   line# 
 247              	    output: 
 248              	      r0   adr where found || adr new to be inserted 
 249              	      r1   0 found || !0 not found  
 250              	    use:
 251              	      r0   scan address 
 252              	      r1   temp   
 253              	      r2   address end of text
 254              	      r3   target line#
 255              	****************************************/    
 256              	    _GBL_FUNC search_lineno
 257 0160 0CB4     	    push {r2,r3} 
 258 0162 0346     	    mov r3,r0 // target 
ARM GAS  tinyBasic.s 			page 17


 259 0164 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 260 0166 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 261 0168 9042     	1:  cmp r0,r2 
 262 016a 05D0     	    beq  8f
 263 016c 0188     	    ldrh r1,[r0]
 264 016e C91A     	    subs r1,r3 
 265 0170 04D5     	    bpl 9f 
 266 0172 8178     	    ldrb r1,[r0,#2]
 267 0174 0844     	    add r0,r1
 268 0176 F7E7     	    b 1b 
 269 0178 4FF0FF31 	8:  mov r1,#-1 
 270 017c 0CBC     	9:  pop {r2,r3}
 271 017e 7047     	    _RET 
 272              	
 273              	
 274              	/********************************************
 275              	    delete_line 
 276              	    delete BASIC line at addr 
 277              	    input:
 278              	      r0    address line to delete 
 279              	    output:
 280              	      r0    same as input 
 281              	    use: 
 282              	      r1    dest adr
 283              	      r2    bytes to move 
 284              	      T1    length line to delete 
 285              	      T2    txtend 
 286              	********************************************/
 287              	    _FUNC delete_line 
 288 0180 2DE90703 	    push {r0,r1,r2,T1,T2}
 289 0184 0146     	    mov r1,r0 // dest 
 290 0186 91F80280 	    ldrb T1,[r1,#2] // line length 
 291 018a 4044     	    add r0,T1  // src
 292 018c D4F83490 	    ldr T2,[UPP,#TXTEND]
 293 0190 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 294 0194 00B5FFF7 	    _CALL cmove
 294      FEFF5DF8 
 294      04EB
 295 019e A9EB0809 	    sub T2,T1 // txtend-count 
 296 01a2 C4F83490 	    str T2,[UPP,#TXTEND] 
 297 01a6 BDE80703 	    pop {r0,r1,r2,T1,T2}
 298 01aa 7047     	    _RET 
 299              	
 300              	/******************************************
 301              	    create_gap 
 302              	    create a gap in text area to insert new line 
 303              	    input:
 304              	      r0    adr 
 305              	      r1    length 
 306              	    output:
 307              	      r0    adr 
 308              	    use:
 309              	      T1    length 
 310              	      T2    txtend 
 311              	************************************************/
 312              	    _FUNC create_gap 
 313 01ac 2DE90503 	    push {r0,r2,T1,T2}
ARM GAS  tinyBasic.s 			page 18


 314 01b0 8846     	    mov T1,R1
 315 01b2 0144     	    add r1,r0  // dest 
 316 01b4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 317 01b8 A9EB0002 	    sub r2,T2,r0 
 318 01bc 00B5FFF7 	    _CALL cmove
 318      FEFF5DF8 
 318      04EB
 319 01c6 C144     	    add T2,T1 
 320 01c8 C4F83490 	    str T2,[UPP,#TXTEND]
 321 01cc BDE80503 	    pop {r0,r2,T1,T2}
 322 01d0 7047     	    _RET 
 323              	
 324              	/************************************************
 325              	    insert_line 
 326              	    insert BASIC line in text area 
 327              	    first search if line with same number exist 
 328              	    replace if so. 
 329              	    input:
 330              	      r0    *buffer to insert 
 331              	    output:
 332              	      none 
 333              	    use: 
 334              	      T1     *buffer
 335              	      T2     temp  
 336              	************************************************/ 
 337 01d2 00BF     	    _FUNC insert_line 
 338 01d4 2DE90203 	    push {r1,T1,T2}
 339 01d8 8046     	    mov T1,r0 
 340 01da B8F80000 	    ldrh r0,[T1]
 341 01de 00B5FFF7 	    _CALL search_lineno 
 341      FEFF5DF8 
 341      04EB
 342 01e8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 343              	// already exist 
 344 01ea 00B5FFF7 	    _CALL delete_line // delete old one 
 344      C8FF5DF8 
 344      04EB
 345 01f4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 346 01f8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 347 01fc 0ED0     	    beq 9f
 348              	1: //insert new line 
 349 01fe 98F80210 	    ldrb r1,[T1,#2]
 350 0202 00B5FFF7 	    _CALL create_gap 
 350      D2FF5DF8 
 350      04EB
 351 020c 0146     	    mov r1,r0
 352 020e 4046     	    mov r0,T1 
 353 0210 8278     	    ldrb r2,[r0,#2]
 354 0212 00B5FFF7 	    _CALL cmove 
 354      FEFF5DF8 
 354      04EB
 355 021c BDE80203 	9:  pop {r1,T1,T2}
 356 0220 7047     	    _RET 
 357              	
 358              	/*********************************
 359              	    compile 
 360              	    tokenize source line save it 
ARM GAS  tinyBasic.s 			page 19


 361              	    in pas buffer.
 362              	    compiled line format: 
 363              	      line_no  2 bytes {0...32767}
 364              	      count    1 byte  
 365              	      tokens   variable length 
 366              	  input:
 367              	     r0   *text buffer 
 368              	     r1   *text length   
 369              	  output:
 370              	    r0    0 stored | -1 immediate 
 371              	  use:
 372              	    r3    tib index   
 373              	    T1    tib
 374              	    T2    pad
 375              	***********************************/
 376 0222 00BF     	    _FUNC compile
 377 0224 8046     	    mov T1, r0  // source text buffer 
 378 0226 6160     	    str r1,[UPP,#COUNT] // save line length 
 379 0228 DFF89499 	    ldr T2,pad // tokens buffer
 380 022c 83EA0303 	    eor r3,r3 // source index  
 381 0230 206C     	    ldr r0,[UPP,#FLAGS]
 382 0232 40F02000 	    orr r0,#FCOMP
 383 0236 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 384 0238 80EA0000 	    eor r0,r0     
 385 023c 29F8020B 	    strh r0,[T2],#2   // line no 
 386 0240 09F8010B 	    strb r0,[T2],#1 // length 
 387 0244 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 388 0246 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 389 024a 00B500F0 	    _CALL parse_int 
 389      00F95DF8 
 389      04EB
 390 0254 07D0     	    beq 2f 
 391              	// this is a line number     
 392 0256 0129     	    cmp r1,#1 
 393 0258 02D5     	    bpl 1f 
 394 025a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 395 025e 1FE3     	    b tb_error  
 396              	1:  // write line # to pad 
 397 0260 29F8031C 	    strh r1,[T2,#-3]
 398 0264 2360     	    str r3,[UPP,#IN_SAVED]
 399              	2:  // check for pad full 
 400 0266 C145     	    cmp T2,T1
 401 0268 02DB     	    blt 3f 
 402 026a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 403 026e 17E3     	    b tb_error 
 404 0270 00B500F0 	3:  _CALL comp_token 
 404      21F85DF8 
 404      04EB
 405 027a 0028     	    cmp r0,#TK_NONE 
 406 027c 01D0     	    beq 4f 
 407 027e 2360     	    str r3,[UPP,#IN_SAVED]
 408 0280 F1E7     	    b 2b 
 409              	4: // compilation completed 
 410 0282 DFF83C39 	    ldr r3,pad 
 411 0286 A9EB0300 	    sub r0,T2,r3 // line length 
 412 028a 9870     	    strb r0,[r3,#2]
 413 028c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
ARM GAS  tinyBasic.s 			page 20


 414 028e 1888     	    ldrh r0,[r3] // line number 
 415 0290 38B1     	    cbz r0,8f  
 416              	// insert line in text buffer 
 417 0292 1846     	    mov r0,r3 
 418 0294 00B5FFF7 	    _CALL insert_line 
 418      9DFF5DF8 
 418      04EB
 419 029e 4040     	    eors r0,r0 
 420 02a0 08E0     	    b 9f 
 421 02a2 9B46     	8:  mov BPTR,r3 // *token_list 
 422 02a4 4FF0030A 	    mov IN,#3
 423 02a8 206C     	    ldr r0,[UPP,#FLAGS]
 424 02aa A0F12000 	    sub r0,#FCOMP
 425 02ae 2064     	    str r0,[UPP,#FLAGS]
 426 02b0 5FF0FF30 	    movs r0,#-1 
 427 02b4 7047     	9:  _RET 
 428              	
 429              	/*********************************************
 430              	    compile next token from source 
 431              	    input: 
 432              	      r3 		tib index  
 433              	      T1    tib adr
 434              	      T2    insert point in pad  
 435              	    output:
 436              	      r0     token attribute 
 437              	      r1 		token value
 438              	      r3     tib index updated    
 439              	      T2     updated 
 440              	      use:
 441              	**********************************************/
 442              	    .macro _case c, next  
 443              	    cmp r0,#\c 
 444              	    bne \next
 445              	    .endm 
 446              	
 447 02b6 00BF     	    _FUNC comp_token 
 448 02b8 40B4     	    push {r6}
 449 02ba 18F80300 	    ldrb r0,[T1,r3]
 450 02be 0040     	    ands r0,r0 
 451 02c0 70D0     	    beq store_r0  // reached end of text  
 452 02c2 4FF02000 	    mov r0,#SPACE 
 453 02c6 00B500F0 	    _CALL skip  // skip spaces 
 453      12F95DF8 
 453      04EB
 454 02d0 18F80300 	    ldrb r0,[T1,r3]
 455 02d4 0040     	    ands r0,r0 
 456 02d6 65D0     	    beq store_r0  // reached end of text 
 457 02d8 03F10103 	    add r3,#1 
 458 02dc 00B500F0 	    _CALL upper 
 458      13F95DF8 
 458      04EB
 459 02e6 00B500F0 	    _CALL is_special
 459      7CF85DF8 
 459      04EB
 460 02f0 DFF8586D 	    ldr r6,=token_ofs
 461 02f4 D6E811F0 	    tbh [r6,r1] 
 462              	tok_idx0:     
ARM GAS  tinyBasic.s 			page 21


 463              	//  not special char.  
 464 02f8 57E0     	    b try_number 
 465              	// single char token with no value 
 466              	single: 
 467 02fa DFF8546D 	    ldr r6,=tok_single
 468 02fe 705C     	    ldrb r0,[r6,r1] 
 469 0300 50E0     	    b store_r0  
 470              	lt:
 471 0302 4FF03400 	    mov r0,#TK_LT
 472 0306 18F80310 	    ldrb r1,[T1,r3]
 473 030a 3E29     	    cmp r1,#'>' 
 474 030c 06D0     	    beq 1f
 475 030e 0AE0     	    b 2f 
 476              	gt:
 477 0310 4FF03100 	    mov r0,#TK_GT 
 478 0314 18F80310 	    ldrb r1,[T1,r3]
 479 0318 3C29     	    cmp r1,#'<'
 480 031a 04D1     	    bne 2f  
 481 031c 03F10103 	1:  add r3,#1
 482 0320 4FF03500 	    mov r0,#TK_NE  
 483 0324 3EE0     	    b store_r0
 484 0326 3D29     	2:  cmp r1,#'=' 
 485 0328 3CD1     	    bne store_r0  
 486 032a 03F10103 	    add r3,#1
 487 032e 00F10200 	    add r0,#2
 488 0332 37E0     	    b store_r0       
 489              	bkslash:
 490 0334 18F80310 	    ldrb r1,[T1,r3]
 491 0338 03F10103 	    add r3,#1
 492 033c 4FF00300 	    mov r0,#TK_CHAR 
 493 0340 09F8010B 	    strb r0,[T2],#1
 494 0344 09F8011B 	    strb r1,[T2],#1
 495 0348 49E0     	    b token_exit 
 496              	prt_cmd: 
 497 034a 4FF00A00 	    mov r0,#TK_CMD 
 498 034e 4FF03A01 	    mov r1,#PRT_IDX
 499 0352 09F8010B 	    strb r0,[T2],#1
 500 0356 09F8011B 	    strb r1,[T2],#1
 501 035a 40E0     	    b token_exit 
 502              	quote:
 503 035c 4FF00200 	    mov r0,#TK_QSTR 
 504 0360 09F8010B 	    strb r0,[T2],#1
 505 0364 00B500F0 	    _CALL parse_quote
 505      8FF85DF8 
 505      04EB
 506 036e 36E0     	    b token_exit
 507              	tick: 
 508              	// copy comment in pad 
 509 0370 4FF00A00 	    mov r0,#TK_CMD 
 510 0374 4FF04701 	    mov r1,#REM_IDX 
 511 0378 09F8010B 	    strb r0,[T2],#1 
 512 037c 09F8011B 	    strb r1,[T2],#1
 513 0380 08EB0300 	    add r0,T1,r3 
 514 0384 4946     	    mov r1,T2 
 515 0386 00B5FFF7 	    _CALL strcpy 
 515      FEFF5DF8 
 515      04EB
ARM GAS  tinyBasic.s 			page 22


 516 0390 00B5FFF7 	    _CALL strlen 
 516      FEFF5DF8 
 516      04EB
 517 039a 8144     	    add T2,r0
 518 039c 09F10109 	    add T2,#1
 519 03a0 6368     	    ldr r3,[UPP,#COUNT]
 520 03a2 1CE0     	    b token_exit
 521              	store_r0: 
 522 03a4 09F8010B 	    strb r0,[T2],#1
 523 03a8 19E0     	    b token_exit 
 524              	try_number:
 525 03aa A3F10103 	    sub r3,#1
 526 03ae 00B500F0 	    _CALL parse_int  
 526      4EF85DF8 
 526      04EB
 527 03b8 04D0     	    beq 1f 
 528 03ba 09F8010B 	    strb r0,[T2],#1 
 529 03be 49F8041B 	    str r1,[T2],#4
 530 03c2 0CE0     	    b token_exit 
 531 03c4 00B500F0 	1:  _CALL parse_keyword 
 531      1FF95DF8 
 531      04EB
 532 03ce 0428     	    cmp r0,#TK_VAR 
 533 03d0 01D0     	    beq 2f 
 534 03d2 4729     	    cmp r1,#REM_IDX 
 535 03d4 CCD0     	    beq tick
 536 03d6 09F8010B 	2:  strb r0,[T2],#1 
 537 03da 09F8011B 	    strb r1,[T2],#1
 538              	token_exit:
 539 03de 40BC     	    pop {r6}
 540 03e0 7047     	    _RET 
 541              	
 542              	/****************************
 543              	    is_special  
 544              	    check for non alphanum
 545              	    input:
 546              	      r0    character to scan 
 547              	    output:
 548              	      r0    character 
 549              	      r1    0 || index 
 550              	    use: 
 551              	      r1    scan index 
 552              	      r2    temp 
 553              	      r3    char_list 
 554              	*****************************/
 555 03e2 00BF     	    _FUNC is_special 
 556 03e4 0CB4     	    push {r2,r3}
 557 03e6 4FF00101 	    mov r1,#1
 558 03ea DFF8683C 	    ldr r3,=char_list 
 559 03ee 5A5C     	1:  ldrb r2,[r3,r1]
 560 03f0 22B1     	    cbz r2,8f 
 561 03f2 8242     	    cmp r2,r0 
 562 03f4 04D0     	    beq 9f 
 563 03f6 01F10101 	    add r1,#1 
 564 03fa F8E7     	    b 1b
 565 03fc 81EA0101 	8:  eor r1,r1     
 566 0400 0CBC     	9:  pop {r2,r3}
ARM GAS  tinyBasic.s 			page 23


 567 0402 7047     	    _RET 
 568              	
 569              	char_list:
 570 0404 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 570      293A232D 
 570      2B2A2F25 
 570      3D3C3E5C 
 570      3F272200 
 571              	
 572              	tok_single:
 573 0418 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 573      070109
 574 041f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 574      2232
 575              	  
 576 0425 0000BF   	  .p2align 2
 577              	token_ofs:
 578 0428 0000     	  .hword  0 // not found
 579              	  // TK_COMMA...TK_EQUAL , 12 
 580 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 580      01000100 
 581 0432 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 581      01000100 
 582 043a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 582      01000100 
 583              	  // '<','>'
 584 0442 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 585              	  // '\'
 586 0446 1E00     	  .hword  (bkslash-tok_idx0)/2
 587              	  // '?' 
 588 0448 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 589              	  // "'"  
 590 044a 3C00     	  .hword  (tick-tok_idx0)/2 
 591              	  // '"' quote 
 592 044c 3200     	  .hword (quote-tok_idx0)/2
 593              	
 594 044e 00BF     	  .p2align 2
 595              	
 596              	/****************************
 597              	    parse_int 
 598              	    parse an integer from text
 599              	    if not valid integer 
 600              	    r1 return *buffer else 
 601              	    *buffer is incremented after integer 
 602              	  input:
 603              	    r0   *buffer 
 604              	  output:
 605              	    r0   TK_INTGR|TK_NONE
 606              	    r1   int|0   
 607              	  use:
 608              	    r3   tib index updated     
 609              	*****************************/
 610              	    _FUNC parse_int 
 611 0450 4FF00A01 	    mov r1,#10 // default base 
 612 0454 18F80300 	    ldrb r0,[T1,r3]
 613 0458 2428     	    cmp r0,'$' 
 614 045a 02D1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 24


 615 045c 4FF01001 	    mov r1,#16 // hexadecimal number 
 616 0460 03E0     	    b 3f  
 617 0462 2628     	2:  cmp r0,#'&' 
 618 0464 03D1     	    bne 4f
 619 0466 4FF00201 	    mov r1,#2 //binary number  
 620 046a 03F10103 	3:  add r3,#1
 621 046e 03EB0800 	4:  add r0,r3,T1 
 622 0472 00B5FFF7 	    _CALL atoi 
 622      FEFF5DF8 
 622      04EB
 623 047c 10B1     	    cbz r0,9f
 624 047e 0344     	    add r3,r0
 625 0480 4FF00E00 	    mov r0,#TK_INTGR
 626 0484 0040     	9:  ands r0,r0   
 627 0486 7047     	    _RET 
 628              	
 629              	/*********************************************
 630              	    parse_quote 
 631              	    parse quoted string 
 632              	    input: 
 633              	      r3 		tib index  
 634              	      T1    tib adr
 635              	      T2    insert point in pad  
 636              	    output:
 637              	      r0     token attribute 
 638              	      r1 		*str 
 639              	      r3     tib index updated    
 640              	      T2     updated 
 641              	      use:
 642              	*********************************************/
 643              	    _FUNC parse_quote
 644 0488 4DF8049D 	    push {T2} 
 645 048c 18F80300 	1:  ldrb r0,[T1,r3]
 646 0490 03F10103 	    add r3,#1 
 647 0494 2228     	    cmp r0,#'"'
 648 0496 09D0     	    beq 9f 
 649 0498 5C28     	    cmp r0,#'\\'
 650 049a 04D1     	    bne 2f 
 651 049c 00B500F0 	    _CALL get_escaped_char 
 651      0DF85DF8 
 651      04EB
 652 04a6 09F8010B 	2:  strb r0,[T2],#1
 653 04aa EFE7     	    b 1b 
 654 04ac 80EA0000 	9:  eor  r0,r0
 655 04b0 09F8010B 	    strb r0,[T2],#1
 656 04b4 4FF00200 	    mov r0,#TK_QSTR
 657 04b8 02BC     	    pop {r1}
 658 04ba 7047     	    _RET 
 659              	
 660              	/**********************************************
 661              	    get_escaped_char 
 662              	    convert "\c" in quoted string 
 663              	    input:
 664              	      r0 
 665              	      r3   index 
 666              	      T1   tib 
 667              	    output:
ARM GAS  tinyBasic.s 			page 25


 668              	      r0   replacement char
 669              	      r3   updated 
 670              	    use:
 671              	      r1   *table 
 672              	      r2   temp 
 673              	**********************************************/
 674              	    _FUNC get_escaped_char 
 675 04bc 06B4     	    push {r1,r2}
 676 04be 18F80300 	    ldrb r0,[T1,r3]
 677 04c2 03F10103 	    add r3,#1
 678 04c6 2228     	    cmp r0,#'"' 
 679 04c8 0BD0     	    beq 9f 
 680 04ca DFF88C1B 	1:  ldr r1,=escaped 
 681 04ce 11F8012B 	2:  ldrb r2,[r1],#1
 682 04d2 12B1     	    cbz r2,6f 
 683 04d4 8242     	    cmp r2,r0 
 684 04d6 02D0     	    beq 7f 
 685 04d8 F9E7     	    b 2b
 686 04da A0F10702 	6:  sub r2,r0,#7     
 687 04de 02F10700 	7:  add r0,r2,#7
 688 04e2 06BC     	9:  pop {r1,r2}   
 689 04e4 7047     	    _RET
 690              	
 691 04e6 6162746E 	escaped: .asciz "abtnvfr"
 691      76667200 
 692              	
 693              	/*********************************************
 694              	   skip character in TIB 
 695              	   input:
 696              	      r0    character to skip 
 697              	      r3    tib index 
 698              	      T1    tib adr
 699              	    output: 
 700              	      r3    updated
 701              	    use:
 702              	      r1     
 703              	**********************************************/   
 704 04ee 00BF     	    _FUNC skip
 705 04f0 02B4     	    push {r1} 
 706 04f2 18F80310 	1:  ldrb r1,[T1,r3]
 707 04f6 8142     	    cmp r1,r0
 708 04f8 02D1     	    bne 2f
 709 04fa 03F10103 	    add r3,#1 
 710 04fe F8E7     	    b 1b 
 711 0500 2360     	2:  str r3,[UPP,#IN_SAVED]
 712 0502 02BC     	    pop {r1}
 713 0504 7047     	    _RET
 714              	
 715              	/********************************************
 716              	    upper
 717              	    convert character in upper case 
 718              	    input: 
 719              	      r0   character 
 720              	    output:
 721              	      r0   upper case character 
 722              	*********************************************/
 723 0506 00BF     	    _FUNC upper 
ARM GAS  tinyBasic.s 			page 26


 724 0508 6128     	    cmp r0,#'a' 
 725 050a 03DB     	    blt 9f 
 726 050c 7A28     	    cmp r0,#'z' 
 727 050e 01DC     	    bgt 9f 
 728 0510 00F05F00 	    and r0,#0x5f 
 729 0514 7047     	9:  _RET 
 730              	
 731              	/***************************************
 732              	   is_digit 
 733              	   check if char is decimal digit.
 734              	   convert to decimal digit.
 735              	   input:
 736              	      r0    char 
 737              	   output:
 738              	      r0    if !Z then converted digit 
 739              	      Z     0 true | 1 false  
 740              	***************************************/
 741 0516 00BF     	    _GBL_FUNC is_digit 
 742 0518 02B4     	    push {r1} 
 743 051a 81EA0101 	    eor r1,r1 
 744 051e 3028     	    cmp r0,#'0' 
 745 0520 05DB     	    blt 9f
 746 0522 3A28     	    cmp r0,'9'+1
 747 0524 03D5     	    bpl 9f 
 748 0526 4FF0FF31 	    mov r1,#-1
 749 052a A0F13000 	    sub r0,#'0'  
 750              	9:   
 751 052e 0940     	    ands r1,r1
 752 0530 02BC     	    pop {r1} 
 753 0532 7047     	    _RET 
 754              	
 755              	/***************************************
 756              	    is_hex 
 757              	    check for hexadecimal digit 
 758              	    convert to hex digit.
 759              	    input:
 760              	      r0    
 761              	    output:
 762              	      r0     if !Z then converted digit 
 763              	      Z      0 true | 1 false         
 764              	***************************************/
 765              	    _FUNC is_hex 
 766 0534 02B4     	    push {r1}
 767 0536 4FF0FF31 	    mov r1,#-1 
 768 053a 4128     	    cmp r0,#'A' 
 769 053c 01D4     	    bmi 1f 
 770 053e A0F10700 	    sub r0,#7 
 771 0542 A0F13000 	1:  sub r0,#'0'
 772 0546 01D4     	    bmi 2f 
 773 0548 1028     	    cmp r0,#16
 774 054a 01D4     	    bmi 9f 
 775 054c 81EA0101 	2:  eor r1,r1  
 776 0550 0940     	9:  ands r1,r1 
 777 0552 02BC     	    pop {r1}
 778 0554 7047     	    _RET 
 779              	
 780              	/***************************************
ARM GAS  tinyBasic.s 			page 27


 781              	    is_bit 
 782              	    check if char is '0'|'1' 
 783              	    convert to binary digit. 
 784              	    input:
 785              	      r0    
 786              	    output:
 787              	      r0     if !Z then converted digit 
 788              	      Z      0 true | 1 false         
 789              	***************************************/
 790 0556 00BF     	    _FUNC is_bit
 791 0558 02B4     	    push  {r1}
 792 055a 4FF0FF31 	    mov r1,#-1 
 793 055e A0F13000 	    sub r0,#'0' 
 794 0562 01D4     	    bmi 2f 
 795 0564 0229     	    cmp r1,#2
 796 0566 01D4     	    bmi 9f 
 797 0568 81EA0101 	2:  eor r1,r1 
 798 056c 0940     	9:  ands r1,r1 
 799 056e 02BC     	    pop {r1}
 800 0570 7047     	    _RET 
 801              	
 802              	/***************************************
 803              	    is_alpha 
 804              	    check if character is {A..Z} 
 805              	  input:
 806              	    r0   character 
 807              	  output: 
 808              	    r0    same character 
 809              	    Z    0 true | 1 false  
 810              	****************************************/
 811 0572 00BF     	    _FUNC is_alpha
 812 0574 02B4     	    push {r1} 
 813 0576 4FF0FF31 	    mov r1,#-1 
 814 057a 4128     	    cmp r0,#'A' 
 815 057c 01DB     	    blt 8f 
 816 057e 5B28     	    cmp r0,#'Z'+1 
 817 0580 01D4     	    bmi 9f 
 818 0582 81EA0101 	8:  eor r1,r1  
 819 0586 0940     	9:  ands r1,r1 
 820 0588 02BC     	    pop {r1}
 821 058a 7047     	    _RET 
 822              	
 823              	/***************************************
 824              	    is_num 
 825              	    check if character is {0..9} 
 826              	  input:
 827              	    r0   character 
 828              	  output: 
 829              	    r0    same character 
 830              	    Z    0 true | 1 false  
 831              	****************************************/
 832              	    _FUNC is_num 
 833 058c 02B4     	    push {r1} 
 834 058e 4FF0FF31 	    mov r1,#-1 
 835 0592 3028     	    cmp r0,#'0' 
 836 0594 01DB     	    blt 8f 
 837 0596 3A28     	    cmp r0,#'9'+1 
ARM GAS  tinyBasic.s 			page 28


 838 0598 01D4     	    bmi 9f 
 839 059a 81EA0101 	8:  eor r1,r1  
 840 059e 0940     	9:  ands r1,r1 
 841 05a0 02BC     	    pop {r1}
 842 05a2 7047     	    _RET 
 843              	
 844              	/*****************************************
 845              	    is_alnum 
 846              	    check if character is alphanumeric 
 847              	    input:
 848              	      r0 
 849              	    output:
 850              	      r0     same 
 851              	      Z      1 false | 0 true 
 852              	*****************************************/
 853              	    _FUNC is_alnum 
 854 05a4 00B5FFF7 	    _CALL is_alpha 
 854      E5FF5DF8 
 854      04EB
 855 05ae 04D1     	    bne 9f 
 856 05b0 00B5FFF7 	    _CALL is_num 
 856      EBFF5DF8 
 856      04EB
 857 05ba 7047     	9:  _RET 
 858              	
 859              	/******************************************
 860              	    atoi 
 861              	    convert ascii to integer 
 862              	    input:
 863              	      r0   *buffer 
 864              	      r1   base 
 865              	    output:
 866              	      r0   0 no integer found 
 867              	      r1   integer
 868              	    use:
 869              	      r2   base  
 870              	      T1   *buffer 
 871              	      T2   digit count  
 872              	******************************************/
 873              	    _GBL_FUNC atoi 
 874 05bc 2DE90403 	    push {r2,T1,T2}
 875 05c0 8046     	    mov T1,r0  // *buffer 
 876 05c2 0A46     	    mov r2,r1  // base  
 877 05c4 81EA0101 	    eor r1,r1  // converted integer 
 878 05c8 89EA0909 	    eor T2,T2  // digit count 
 879 05cc 18F8010B 	1:  ldrb r0,[T1],#1
 880 05d0 00B5FFF7 	    _CALL upper 
 880      99FF5DF8 
 880      04EB
 881 05da 3028     	    cmp r0,#'0'
 882 05dc 0FD4     	    bmi 8f
 883 05de 3A28     	    cmp r0,#'9'+1 
 884 05e0 03D4     	    bmi 2f 
 885 05e2 4128     	    cmp r0,#'A'
 886 05e4 0BD4     	    bmi 8f 
 887 05e6 A0F10700 	    sub r0,#7 
 888 05ea A0F13000 	2:  sub r0,#'0' 
ARM GAS  tinyBasic.s 			page 29


 889 05ee 9042     	    cmp r0,r2
 890 05f0 05D5     	    bpl 8f  
 891 05f2 02FB01F1 	    mul r1,r2 
 892 05f6 0144     	    add r1,r0
 893 05f8 09F10109 	    add T2,#1
 894 05fc E6E7     	    b 1b 
 895 05fe 4846     	8:  mov r0,T2  
 896 0600 BDE80403 	    pop {r2,T1,T2}
 897 0604 7047     	    _RET 
 898              	
 899              	/*****************************************
 900              	    parse_keyword 
 901              	    parse work and ckeck if in dictionary 
 902              	    input:
 903              	      r0    first character 
 904              	      r3    tib index 
 905              	      t1    tib 
 906              	      t2    pad 
 907              	    output:
 908              	      r3    updated 
 909              	      t1    updated 
 910              	      t2    updated   
 911              	    use:
 912              	    
 913              	*****************************************/
 914 0606 00BF     	    _FUNC parse_keyword 
 915 0608 4DF8049D 	    push {T2}
 916 060c 18F80300 	    ldrb r0,[T1,r3]
 917 0610 03F10103 	    add r3,#1
 918 0614 00B3     	    cbz r0,2f 
 919 0616 00B5FFF7 	    _CALL upper 
 919      76FF5DF8 
 919      04EB
 920 0620 00B5FFF7 	    _CALL is_alpha 
 920      A7FF5DF8 
 920      04EB
 921 062a 00F03581 	    beq syntax_error 
 922 062e 09F8010B 	    strb r0,[T2],#1
 923 0632 18F80300 	1:  ldrb r0,[T1,r3]
 924 0636 03F10103 	    add r3,#1 
 925 063a 68B1     	    cbz r0,2f 
 926 063c 00B5FFF7 	    _CALL upper 
 926      63FF5DF8 
 926      04EB
 927 0646 00B5FFF7 	    _CALL is_alnum
 927      ACFF5DF8 
 927      04EB
 928 0650 02D0     	    beq 2f 
 929 0652 09F8010B 	    strb r0,[T2],#1
 930 0656 ECE7     	    b 1b 
 931 0658 A3F10103 	2:  sub r3,#1
 932 065c 80EA0000 	    eor r0,r0
 933 0660 89F80000 	    strb r0,[T2] 
 934 0664 0098     	    ldr r0,[sp]
 935 0666 4178     	    ldrb r1,[r0,#1] 
 936 0668 29B9     	    cbnz r1,3f
 937 066a 0178     	    ldrb r1,[r0]
ARM GAS  tinyBasic.s 			page 30


 938 066c A1F14101 	    sub r1,#'A'
 939 0670 4FF00400 	    mov r0,#TK_VAR
 940 0674 08E0     	    b 9f 
 941 0676 DFF8E419 	3:  ldr r1,=kword_dict  
 942 067a 00B500F0 	    _CALL search_dict 
 942      C6F95DF8 
 942      04EB
 943 0684 00B9     	    cbnz r0,9f 
 944 0686 07E1     	    b syntax_error 
 945 0688 5DF8049B 	9:  pop {T2}
 946 068c 7047     	    _RET 
 947              	
 948              	
 949              	/*******************
 950              	    DECOMPILER 
 951              	*******************/
 952              	
 953              	/********************************************
 954              	    cmd_name 
 955              	    search bytecode in dictionary and 
 956              	    return its name 
 957              	  input:
 958              	    r0    keyword bytecode 
 959              	  ouput:
 960              	    r0    name string 
 961              	  use:
 962              	    T1    link 
 963              	    T2    tmp 
 964              	*********************************************/
 965 068e 00BF     	    _FUNC cmd_name 
 966 0690 2DE90003 	    push {T1,T2}
 967 0694 DFF8C489 	    ldr T1,=kword_dict 
 968 0698 58F8089C 	1:  ldr T2,[T1,#-8]
 969 069c 8145     	    cmp T2,r0 
 970 069e 04D0     	    beq 2f 
 971 06a0 58F80C8C 	    ldr T1,[T1,#-12]
 972 06a4 B8F1000F 	    cmp T1,#0
 973 06a8 F6D1     	    bne 1b  
 974 06aa 4046     	2:  mov r0,T1 
 975 06ac BDE80003 	    pop {T1,T2}
 976 06b0 7047     	    _RET
 977              	
 978              	/*****************************
 979              	  decompile_line 
 980              	  detokenize BASIC line 
 981              	  input:
 982              	    r0  *token list 
 983              	    r1  *output buffer 
 984              	  output:
 985              	    r0  *output buffer (.asciz) 
 986              	  use:
 987              	    T1  *output buffer
 988              	    BPTR  *token list
 989              	    IN  offset in token list  
 990              	******************************/
 991 06b2 00BF     	    _GBL_FUNC decompile_line
 992 06b4 2DE90201 	    push {r1,T1} 
ARM GAS  tinyBasic.s 			page 31


 993 06b8 8346     	    mov BPTR,r0 
 994 06ba 4FF0000A 	    mov IN,#0
 995 06be 8846     	    mov T1,r1 
 996 06c0 3BF80A00 	    ldrh r0,[BPTR,IN]
 997 06c4 0AF1020A 	    add IN,#2 
 998 06c8 4FF00A01 	    mov r1,#10 
 999 06cc 00B5FFF7 	    _CALL itoa
 999      FEFF5DF8 
 999      04EB
 1000 06d6 4146     	    mov r1,T1
 1001 06d8 00B5FFF7 	    _CALL strcpy
 1001      FEFF5DF8 
 1001      04EB
 1002 06e2 4046     	    mov r0,T1 
 1003 06e4 00B5FFF7 	    _CALL strlen
 1003      FEFF5DF8 
 1003      04EB
 1004 06ee 8044     	    add T1,r0 
 1005 06f0 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1006 06f4 0AF1010A 	    add IN,#1 
 1007 06f8 6060     	    str r0,[UPP,#COUNT]
 1008              	decomp_loop:
 1009 06fa 00B500F0 	    _CALL next_token
 1009      B2FA5DF8 
 1009      04EB
 1010 0704 0028     	    cmp r0,#TK_NONE 
 1011 0706 00F09480 	    beq 9f  
 1012 070a 0E28     	    cmp r0,#TK_INTGR 
 1013 070c 15D1     	    bne 2f 
 1014 070e 0846     	    mov r0,r1 
 1015 0710 A169     	    ldr r1,[UPP,#BASE]
 1016 0712 00B5FFF7 	    _CALL itoa
 1016      FEFF5DF8 
 1016      04EB
 1017 071c 01B4     	    push {r0}
 1018 071e 4146     	    mov r1,T1 
 1019 0720 00B5FFF7 	    _CALL strcpy
 1019      FEFF5DF8 
 1019      04EB
 1020 072a 01BC     	    pop {r0} 
 1021 072c 00B5FFF7 	    _CALL strlen
 1021      FEFF5DF8 
 1021      04EB
 1022 0736 8044     	    add T1,r0 
 1023 0738 DFE7     	    b decomp_loop 
 1024 073a 0328     	2:  cmp r0,#TK_CHAR 
 1025 073c 0AD1     	    bne 3f 
 1026 073e 4FF05C00 	    mov r0,#'\\'
 1027 0742 08F8010B 	    strb r0,[T1],#1
 1028 0746 08F8011B 	    strb r1,[T1],#1
 1029 074a 4FF02000 	    mov r0,#SPACE 
 1030 074e 08F8010B 	    strb r0,[T1],#1
 1031 0752 D2E7     	    b decomp_loop 
 1032 0754 0228     	3:  cmp r0,#TK_QSTR 
 1033 0756 17D1     	    bne 4f 
 1034 0758 4FF02200 	    mov r0,#'"'
 1035 075c 08F8010B 	    strb r0,[T1],#1 
ARM GAS  tinyBasic.s 			page 32


 1036 0760 0846     	    mov r0,r1
 1037 0762 02B4     	    push {r1}
 1038 0764 4146     	    mov r1,T1  
 1039 0766 00B5FFF7 	    _CALL strcpy
 1039      FEFF5DF8 
 1039      04EB
 1040 0770 01BC     	    pop {r0}
 1041 0772 00B5FFF7 	    _CALL strlen 
 1041      FEFF5DF8 
 1041      04EB
 1042 077c 8044     	    add T1,r0 
 1043 077e 4FF02200 	    mov r0,#'"'
 1044 0782 08F8010B 	    strb r0,[T1],#1 
 1045 0786 B8E7     	    b decomp_loop
 1046 0788 0A28     	4:  cmp r0,#TK_CMD
 1047 078a 3AD4     	    bmi 5f 
 1048 078c 0E28     	    cmp r0,#TK_INTGR 
 1049 078e 38D5     	    bpl 5f
 1050 0790 4FF02000 	    mov r0,#SPACE 
 1051 0794 08F8010B 	    strb r0,[T1],#1  
 1052 0798 0846     	    mov r0,r1
 1053 079a 3A28     	    cmp r0,#PRT_IDX 
 1054 079c 04D1     	    bne 1f  
 1055 079e 4FF03F00 	    mov r0,#'?'
 1056 07a2 08F8010B 	    strb r0,[T1],#1 
 1057 07a6 27E0     	    b 3f 
 1058 07a8 4728     	1:  cmp r0,#REM_IDX
 1059 07aa 12D1     	    bne 1f
 1060 07ac 4FF02700 	    mov r0,#'\''
 1061 07b0 08F8010B 	    strb r0,[T1],#1 
 1062 07b4 0BEB0A00 	    add r0,BPTR,IN
 1063 07b8 4146     	    mov r1,T1   
 1064 07ba 00B5FFF7 	    _CALL strcpy
 1064      FEFF5DF8 
 1064      04EB
 1065 07c4 80EA0000 	    eor r0,r0 
 1066 07c8 88F80000 	    strb r0,[T1]  
 1067 07cc D4F804A0 	    ldr IN,[UPP,#COUNT]
 1068 07d0 2FE0     	    b 9f 
 1069 07d2 00B5FFF7 	1:  _CALL cmd_name
 1069      5CFF5DF8 
 1069      04EB
 1070 07dc 01B4     	2:  push {r0}
 1071 07de 4146     	    mov r1,T1 
 1072 07e0 00B5FFF7 	    _CALL strcpy 
 1072      FEFF5DF8 
 1072      04EB
 1073 07ea 01BC     	    pop {r0}
 1074 07ec 00B5FFF7 	    _CALL strlen 
 1074      FEFF5DF8 
 1074      04EB
 1075 07f6 8044     	    add T1,r0 
 1076 07f8 4FF02000 	3:  mov r0,#SPACE 
 1077 07fc 08F8010B 	    strb r0,[T1],#1 
 1078 0800 7BE7     	    b decomp_loop
 1079 0802 01B4     	5:  push {r0}
 1080 0804 DFF85818 	    ldr r1,=single_char 
ARM GAS  tinyBasic.s 			page 33


 1081 0808 085C     	    ldrb r0,[r1,r0]
 1082 080a 02BC     	    pop {r1}
 1083 080c 10B1     	    cbz r0,6f 
 1084 080e 08F8010B 	    strb r0,[T1],#1 
 1085 0812 72E7     	    b decomp_loop
 1086 0814 3329     	6:  cmp r1,#TK_GE 
 1087 0816 02D1     	    bne 7f 
 1088 0818 DFF84808 	    ldr r0,=ge_str
 1089 081c DEE7     	    b 2b 
 1090 081e 3629     	7:  cmp r1,#TK_LE 
 1091 0820 02D1     	    bne 8f
 1092 0822 DFF84408 	    ldr r0,=le_str
 1093 0826 D9E7     	    b 2b
 1094 0828 3529     	8:  cmp r1,#TK_NE 
 1095 082a 02D1     	    bne 9f 
 1096 082c DFF83C08 	    ldr r0,=ne_str 
 1097 0830 D4E7     	    b 2b 
 1098 0832 80EA0000 	9:  eor r0,r0 
 1099 0836 88F80000 	    strb r0,[T1]
 1100 083a BDE80101 	    pop {r0,T1}
 1101 083e 7047     	    _RET 
 1102              	
 1103 0840 3E3D00   	ge_str: .asciz ">="
 1104 0843 3C3D00   	le_str: .asciz "<="
 1105 0846 3C3E00   	ne_str: .asciz "<>"
 1106              	
 1107              	single_char:
 1108 0849 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1108      00402829 
 1108      2C23
 1109 0853 00000000 	  .space 6
 1109      0000
 1110 0859 2B2D     	  .byte '+','-'
 1111 085b 00000000 	  .space 14
 1111      00000000 
 1111      00000000 
 1111      0000
 1112 0869 2A2F25   	  .byte '*','/','%'
 1113 086c 00000000 	  .space 14
 1113      00000000 
 1113      00000000 
 1113      0000
 1114 087a 3E3D003C 	  .byte '>','=',0,'<',0,0
 1114      0000
 1115              	
 1116              	
 1117              	/**********************************
 1118              	  modulo 
 1119              	  compute r0 mod r1
 1120              	  input:
 1121              	    r0   dividend
 1122              	    r1   divisor 
 1123              	  output:
 1124              	    r0   TK_INTGR 
 1125              	    r1   r0 mod r1 
 1126              	*********************************/
 1127              	    _GBL_FUNC modulo 
ARM GAS  tinyBasic.s 			page 34


 1128 0880 01B4     	    push {r0}
 1129 0882 B0FBF1F0 	    udiv r0,r1 
 1130 0886 01FB00F0 	    mul  r0,r1 
 1131 088a 02BC     	    pop {r1}
 1132 088c A1EB0001 	    sub r1,r0
 1133 0890 4FF00E00 	    mov r0,#TK_INTGR
 1134 0894 7047     	    _RET 
 1135              	
 1136              	/**********************************
 1137              	      BASIC commands 
 1138              	**********************************/
 1139              	
 1140              	/*********************************
 1141              	    syntax_error 
 1142              	    display syntax error message and 
 1143              	    abort program 
 1144              	  input:
 1145              	    none  
 1146              	  output: 
 1147              	    none 
 1148              	  use:
 1149              	*********************************/
 1150 0896 00BF     	    _FUNC syntax_error 
 1151 0898 4FF00200 	    mov r0,#ERR_SYNTAX
 1152 089c 00E0     	    b tb_error 
 1153              	
 1154              	/*********************************
 1155              	    tb_error 
 1156              	    display BASIC error and 
 1157              	    abort program. 
 1158              	  input:
 1159              	    r0    error code   
 1160              	  output: 
 1161              	    none 
 1162              	  use:
 1163              	    r1    temp 
 1164              	*********************************/
 1165 089e 00BF     	    _FUNC tb_error 
 1166 08a0 216C     	    ldr r1,[UPP,#FLAGS]
 1167 08a2 11F0200F 	    tst r1,#FCOMP
 1168 08a6 43D1     	    bne compile_error
 1169              	rt_error:
 1170 08a8 01B4     	    push {r0}
 1171 08aa DFF8C407 	    ldr r0,=rt_error_msg 
 1172 08ae 00B5FFF7 	    _CALL uart_puts 
 1172      FEFF5DF8 
 1172      04EB
 1173 08b8 01BC     	    pop {r0}
 1174 08ba DFF8B817 	    ldr r1,=err_msg  
 1175 08be 4FEA8000 	    lsl r0,#2 
 1176 08c2 0858     	    ldr r0,[r1,r0]
 1177 08c4 00B5FFF7 	    _CALL uart_puts
 1177      FEFF5DF8 
 1177      04EB
 1178 08ce D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1179 08d2 BBF80000 	    ldrh r0,[BPTR]
 1180 08d6 4FF00A01 	    mov r1,#10
ARM GAS  tinyBasic.s 			page 35


 1181 08da 00B5FFF7 	    _CALL print_int 
 1181      FEFF5DF8 
 1181      04EB
 1182 08e4 4FF02C00 	    mov r0,#',' 
 1183 08e8 00B5FFF7 	    _CALL uart_putc 
 1183      FEFF5DF8 
 1183      04EB
 1184 08f2 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1185 08f6 00B500F0 	    _CALL next_token
 1185      B4F95DF8 
 1185      04EB
 1186 0900 02B4     	    push {r1}
 1187 0902 4FF00A01 	    mov r1,#10 
 1188 0906 00B5FFF7 	    _CALL print_int 
 1188      FEFF5DF8 
 1188      04EB
 1189 0910 4FF02C00 	    mov r0,#',' 
 1190 0914 00B5FFF7 	    _CALL uart_putc 
 1190      FEFF5DF8 
 1190      04EB
 1191 091e 01BC     	    pop {r0}
 1192 0920 4FF00A01 	    mov r1,#10 
 1193 0924 00B5FFF7 	    _CALL print_int 
 1193      FEFF5DF8 
 1193      04EB
 1194 092e 4FE1     	    b warm_start 
 1195              	compile_error:
 1196 0930 DFF84017 	    ldr r1,=err_msg 
 1197 0934 4FEA8000 	    lsl r0,#2 
 1198 0938 0858     	    ldr r0,[r1,r0]
 1199 093a 00B5FFF7 	    _CALL uart_puts
 1199      FEFF5DF8 
 1199      04EB
 1200 0944 A068     	    ldr r0,[UPP,#BASICPTR]
 1201 0946 00B5FFF7 	    _CALL uart_puts
 1201      FEFF5DF8 
 1201      04EB
 1202 0950 4FF00D00 	    mov r0,#CR 
 1203 0954 00B5FFF7 	    _CALL uart_putc  
 1203      FEFF5DF8 
 1203      04EB
 1204 095e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1205 0960 00B5FFF7 	    _CALL spaces 
 1205      FEFF5DF8 
 1205      04EB
 1206 096a 4FF05E00 	    mov r0,#'^' 
 1207 096e 00B5FFF7 	    _CALL uart_putc
 1207      FEFF5DF8 
 1207      04EB
 1208 0978 4FF00D00 	    mov r0,#CR 
 1209 097c 00B5FFF7 	    _CALL uart_putc   
 1209      FEFF5DF8 
 1209      04EB
 1210 0986 23E1     	    b  warm_start  
 1211              	    
 1212              	rt_error_msg:
 1213 0988 0A52756E 	  .asciz "\nRuntime error\n"
ARM GAS  tinyBasic.s 			page 36


 1213      74696D65 
 1213      20657272 
 1213      6F720A00 
 1214              	
 1215              	err_msg:
 1216 0998 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1216      00000000 
 1216      0D000000 
 1216      1B000000 
 1216      34000000 
 1217 09b0 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1217      6F000000 
 1217      89000000 
 1217      9A000000 
 1217      AB000000 
 1218 09c4 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1218      EA000000 
 1218      FA000000 
 1218      0E010000 
 1218      21010000 
 1219              	
 1220              	    .section .rodata.tb_error 
 1221              	
 1222 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1222      72792066 
 1222      756C6C0A 
 1222      00
 1223 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1223      61782065 
 1223      72726F72 
 1223      0A00
 1224 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1224      206F7065 
 1224      72617469 
 1224      6F6E206F 
 1224      76657266 
 1225 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1225      73696F6E 
 1225      20627920 
 1225      300A00
 1226 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1226      6C696420 
 1226      6C696E65 
 1226      206E756D 
 1226      6265722E 
 1227 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1227      74696D65 
 1227      206F6E6C 
 1227      79207573 
 1227      6167652E 
 1228 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1228      616E6420 
 1228      6C696E65 
 1228      206F6E6C 
 1228      79207573 
 1229 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1229      69636174 
ARM GAS  tinyBasic.s 			page 37


 1229      65206E61 
 1229      6D652E0A 
 1229      00
 1230 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1230      206E6F74 
 1230      20666F75 
 1230      6E642E0A 
 1230      00
 1231 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1231      76616C75 
 1231      652E0A00 
 1232 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1232      20696E20 
 1232      65787465 
 1232      6E646564 
 1232      206D656D 
 1233 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1233      61746120 
 1233      666F756E 
 1233      642E0A00 
 1234 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1234      726F6772 
 1234      616D2069 
 1234      6E205241 
 1234      4D210A00 
 1235 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1235      20737973 
 1235      74656D20 
 1235      66756C6C 
 1235      2E0A00
 1236 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1236      65722066 
 1236      756C6C0A 
 1236      00
 1237              	
 1238 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1238      2074696D 
 1238      65206572 
 1238      726F722C 
 1238      2000
 1239 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1239      70696C65 
 1239      20657272 
 1239      6F722C20 
 1239      00
 1240 0151 6C617374 	tk_id: .asciz "last token id: "
 1240      20746F6B 
 1240      656E2069 
 1240      643A2000 
 1241              	
 1242              	
 1243              	    .section  .text , "ax", %progbits 
 1244              	
 1245              	/*********************************
 1246              	   skip_line 
 1247              	   data and remark line are skipped
 1248              	   by the interpreter 
ARM GAS  tinyBasic.s 			page 38


 1249              	***********************************/
 1250              	    _FUNC skip_line 
 1251 09d8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1252 09dc 7047     	    _RET 
 1253              	
 1254              	
 1255              	/*********************************
 1256              	   BASIC: BTGL adr, mask   
 1257              	   toggle bits [adr]=[adr]^mask  
 1258              	   input:
 1259              	     r0    adr 
 1260              	     r1    mask 
 1261              	    output;
 1262              	      none 
 1263              	    use:
 1264              	      T1   temp
 1265              	      T2   temp  
 1266              	*******************************/     
 1267 09de 00BF     	    _FUNC BTGL 
 1268              	
 1269 09e0 7047     	    _RET 
 1270              	
 1271              	/***************************************
 1272              	   kword_cmp
 1273              	   compare keyword to dict entry
 1274              	  input:
 1275              	    r0  keyword 
 1276              	    r1  dict entry 
 1277              	    r2  character count 
 1278              	  output:
 1279              	    r0  0 not same | -1 same 
 1280              	  use:
 1281              	    r6   result  
 1282              	    T1   char 1
 1283              	    T2   char 2
 1284              	**************************************/   
 1285 09e2 00BF     	    _FUNC kword_cmp 
 1286 09e4 2DE94003 	    push {r6,T1,T2}
 1287 09e8 4FF0FF36 	    mov r6,#-1 
 1288 09ec 4AB1     	1:  cbz r2,9f       
 1289 09ee 10F8018B 	    ldrb T1,[r0],#1
 1290 09f2 11F8019B 	    ldrb T2,[r1],#1
 1291 09f6 A2F10102 	    sub r2,#1
 1292 09fa C845     	    cmp T1,T2
 1293 09fc F6D0     	    beq 1b 
 1294 09fe 86EA0606 	    eor r6,r6  
 1295 0a02 3046     	9:  mov r0,r6
 1296 0a04 BDE84003 	    pop {r6,T1,T2}
 1297 0a08 7047     	    _RET 
 1298              	
 1299              	/***********************************************
 1300              	    search_dict 
 1301              	    search keyword in dictionary
 1302              	   input:
 1303              	  	 r0   keyword 
 1304              	     r1		dictionary first name field address  
 1305              	   output:
ARM GAS  tinyBasic.s 			page 39


 1306              	     r0 		token attribute 
 1307              	     r1		  cmd_index if r0!=TK_NONE  
 1308              	   use:
 1309              	     r3   length keyword 
 1310              	     T1   keyword
 1311              	     T2   link  
 1312              	**********************************************/
 1313 0a0a 00BF     	  _FUNC search_dict
 1314 0a0c 2DE90C03 	  push {r2,r3,T1,T2}
 1315 0a10 8046     	  mov T1,r0 
 1316 0a12 00B5FFF7 	  _CALL strlen 
 1316      FEFF5DF8 
 1316      04EB
 1317 0a1c 0346     	  mov r3,r0  
 1318              	1:  
 1319 0a1e 8946     	   mov T2,r1  // keep for linking   
 1320 0a20 0878     	   ldrb r0,[r1] 
 1321 0a22 78B1     	   cbz r0,9f // null byte, end of dictionary
 1322 0a24 4046     	   mov r0,T1
 1323 0a26 1A46     	   mov r2,r3   
 1324 0a28 00B5FFF7 	   _CALL kword_cmp  
 1324      DBFF5DF8 
 1324      04EB
 1325 0a32 18B9     	   cbnz r0,2f 
 1326 0a34 4946     	   mov r1,T2
 1327 0a36 51F80C1C 	   ldr r1,[r1,#-12]
 1328 0a3a F0E7     	   b 1b   
 1329              	2: // found
 1330 0a3c 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1331 0a40 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1332 0a44 BDE80C03 	9: pop {r2,r3,T1,T2}
 1333 0a48 7047     	   _RET 
 1334              	
 1335              	
 1336              	/**************************
 1337              	    INTERPRETER 
 1338              	*************************/
 1339              	
 1340              	/*********************************
 1341              	   cold_start 
 1342              	   initialize BASIC interpreter 
 1343              	   never leave 
 1344              	   input:
 1345              	     none 
 1346              	   output:
 1347              	    none 
 1348              	*********************************/
 1349              	  .type cold_start, %function 
 1350              	  .global cold_start 
 1351              	cold_start: 
 1352 0a4a 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1352      C2F20004 
 1353 0a52 DFF84400 	    ldr r0,src_addr 
 1354 0a56 1149     	    ldr r1,dest_addr
 1355 0a58 0968     	    ldr r1,[r1] 
 1356 0a5a 0C44     	    add UPP,r1 // system variables base address   
 1357              	// clear RAM
ARM GAS  tinyBasic.s 			page 40


 1358 0a5c 2046     	    mov r0,UPP  
 1359 0a5e DFF85C11 	    ldr r1,tib 
 1360 0a62 82EA0202 	    eor r2,r2 
 1361 0a66 40F8042B 	1:  str r2,[r0],#4 
 1362 0a6a 8842     	    cmp r0,r1 
 1363 0a6c FBD4     	    bmi 1b 
 1364              	//copy initialized system variables to ram 
 1365 0a6e DFF82800 	    ldr r0,src_addr 
 1366 0a72 2146     	    mov r1,UPP 
 1367 0a74 DFF82820 	    ldr r2,sysvar_size
 1368 0a78 00B5FFF7 	    _CALL cmove
 1368      FEFF5DF8 
 1368      04EB
 1369 0a82 00B500F0 	    _CALL prt_version
 1369      0EF85DF8 
 1369      04EB
 1370 0a8c 00B500F0 	    _CALL clear_basic  
 1370      5DF85DF8 
 1370      04EB
 1371 0a96 9BE0     	    b warm_start    
 1372              	src_addr:
 1373 0a98 00000000 	  .word uzero
 1374              	dest_addr:
 1375 0a9c 00000000 	  .word vectors_size
 1376 0aa0 CC000000 	sysvar_size: .word ulast-uzero 
 1377              	
 1378              	/************************************
 1379              	    print firmware version 
 1380              	    input: 
 1381              	      none 
 1382              	    output:
 1383              	      none 
 1384              	    use:
 1385              	      r0 
 1386              	***********************************/
 1387              	    _FUNC prt_version 
 1388 0aa4 DFF8D005 	    ldr r0,=version_msg 
 1389 0aa8 00B5FFF7 	    _CALL uart_puts
 1389      FEFF5DF8 
 1389      04EB
 1390 0ab2 9FF87800 	    ldrb r0,version 
 1391 0ab6 4FEA1010 	    lsr r0,#4 
 1392 0aba 00F13000 	    add r0,#'0' 
 1393 0abe 3A28     	    cmp r0,#'9'+1 
 1394 0ac0 01D4     	    bmi 1f 
 1395 0ac2 00F10700 	    add r0,#7 
 1396              	  1:
 1397 0ac6 00B5FFF7 	    _CALL uart_putc 
 1397      FEFF5DF8 
 1397      04EB
 1398 0ad0 4FF02E00 	    mov r0,#'. 
 1399 0ad4 00B5FFF7 	    _CALL uart_putc 
 1399      FEFF5DF8 
 1399      04EB
 1400 0ade 9FF84C00 	    ldrb r0,version 
 1401 0ae2 00F00F00 	    and r0,#15 
 1402 0ae6 00F13000 	    add r0,'0' 
ARM GAS  tinyBasic.s 			page 41


 1403 0aea 3A28     	    cmp r0,#'9'+1 
 1404 0aec 01D4     	    bmi 1f 
 1405 0aee 00F10700 	    add r0,#7
 1406              	  1: 
 1407 0af2 00B5FFF7 	    _CALL uart_putc 
 1407      FEFF5DF8 
 1407      04EB
 1408 0afc 4FF00D00 	    mov r0,#CR 
 1409 0b00 00B5FFF7 	    _CALL uart_putc 
 1409      FEFF5DF8 
 1409      04EB
 1410 0b0a 7047     	    _RET  
 1411              	version_msg:
 1412 0b0c 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1412      65207069 
 1412      6C6C2074 
 1412      696E7920 
 1412      42415349 
 1413              	version:
 1414 0b2c 10       	    .byte 0x10 
 1415 0b2d 0000BF   	    .p2align 2 
 1416              	
 1417              	
 1418              	/*****************************
 1419              	    clear_vars 
 1420              	    initialize variables to 0
 1421              	  input:
 1422              	    none 
 1423              	  output:
 1424              	    none 
 1425              	  use:
 1426              	    r0,r1,r2 
 1427              	*****************************/
 1428              	    _FUNC clear_vars 
 1429 0b30 07B4     	    push {r0,r1,r2}
 1430 0b32 80EA0000 	    eor r0,r0 
 1431 0b36 04F16001 	    add r1,UPP,#VARS
 1432 0b3a 4FF01A02 	    mov r2,#26
 1433 0b3e 41F8040B 	1:  str r0,[r1],#4 
 1434 0b42 013A     	    subs r2,#1
 1435 0b44 FBD1     	    bne 1b  
 1436 0b46 07BC     	    pop {r0,r1,r2}
 1437 0b48 7047     	    _RET 
 1438              	
 1439              	/*****************************
 1440              	   clear_basic 
 1441              	   reset BASIC system variables 
 1442              	   and clear variables and RAM 
 1443              	*****************************/
 1444 0b4a 00BF     	    _FUNC clear_basic
 1445 0b4c 80EA0000 	  	eor r0,r0
 1446 0b50 2064     	    str r0,[UPP,#FLAGS] 
 1447 0b52 6060     	    str r0,[UPP,#COUNT]
 1448 0b54 2060     	    str r0,[UPP,#IN_SAVED]
 1449 0b56 A060     	    str r0,[UPP,#BASICPTR]
 1450 0b58 E060     	    str r0,[UPP,#DATAPTR]
 1451 0b5a 2061     	    str r0,[UPP,#DATA]
ARM GAS  tinyBasic.s 			page 42


 1452 0b5c 6061     	    str r0,[UPP,#DATALEN]
 1453 0b5e 04F1CC00 	    add r0,UPP,#BASIC_START 
 1454 0b62 00F11000 	    add r0,#16 
 1455 0b66 6FF00F01 	    mvn r1,#15
 1456 0b6a 00EA0100 	    and r0,r1 
 1457 0b6e 2063     	    str r0,[UPP,#TXTBGN]
 1458 0b70 6063     	    str r0,[UPP,#TXTEND]
 1459 0b72 00B5FFF7 	    _CALL clear_vars
 1459      DCFF5DF8 
 1459      04EB
 1460 0b7c 206B     	    ldr r0,[UPP,#TXTBGN]
 1461 0b7e DFF83C10 	    ldr r1,tib 
 1462 0b82 82EA0202 	    eor r2,r2 
 1463 0b86 40F8042B 	1:  str r2,[r0],#4
 1464 0b8a 8842     	    cmp r0,r1 
 1465 0b8c FBD4     	    bmi 1b 
 1466 0b8e 7047     	    _RET  
 1467              	
 1468              	/***********************************
 1469              	   warm_init 
 1470              	   initialize interpreter context 
 1471              	  input:
 1472              	    none
 1473              	  output:
 1474              	    none 
 1475              	  use:
 1476              	    r0 
 1477              	***********************************/
 1478              	warm_init:
 1479              	// reset data stack       
 1480 0b90 DFF824C0 	    ldr DP,dstack 
 1481 0b94 4FF0000A 	    mov IN,#0 // BASIC line index 
 1482 0b98 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1483 0b9c 80EA0000 	    eor r0,r0 
 1484 0ba0 6060     	    str r0,[UPP,#COUNT]  
 1485 0ba2 2064     	    str r0,[UPP,#FLAGS]
 1486 0ba4 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1487 0ba6 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1488 0baa 6064     	    str r0,[UPP,#TAB_WIDTH]
 1489 0bac 4FF00A00 	    mov r0,#10 // default base decimal 
 1490 0bb0 A061     	    str r0,[UPP,#BASE]
 1491 0bb2 7047     	    _RET  
 1492              	
 1493 0bb4 00000000 	mstack: .word _mstack 
 1494 0bb8 00000000 	dstack: .word _dstack 
 1495 0bbc 00000000 	tib: .word _tib 
 1496 0bc0 00000000 	pad: .word _pad 
 1497 0bc4 FCFFFFFF 	array: .word _pad - 4 
 1498 0bc8 0A524541 	ready: .asciz "\nREADY" 
 1498      445900
 1499              	
 1500              	/**********************************
 1501              	    warm_start 
 1502              	    start BASIC interpreter doesn't  
 1503              	    reset variables and code space 
 1504              	  input:
 1505              	    none 
ARM GAS  tinyBasic.s 			page 43


 1506              	  output:
 1507              	    none 
 1508              	**********************************/
 1509 0bcf 00       	    _FUNC warm_start 
 1510              	// initialise parameters stack
 1511 0bd0 FFF7DEFF 	    bl warm_init
 1512              	// reset main stack 
 1513 0bd4 5FF82400 	    ldr r0,mstack
 1514 0bd8 8546     	    mov sp,r0 
 1515 0bda DFF8A004 	    ldr r0,=ready 
 1516 0bde 00B5FFF7 	    _CALL uart_puts 
 1516      FEFF5DF8 
 1516      04EB
 1517              	// fall in cmd_line 
 1518              	
 1519              	/**********************************
 1520              	   cmd_line 
 1521              	   shell command line 
 1522              	   input:
 1523              	      none 
 1524              	   output:
 1525              	      none 
 1526              	   use:
 1527              	
 1528              	***********************************/
 1529              	    _FUNC cmd_line 
 1530 0be8 4FF00D00 	    mov r0,#CR 
 1531 0bec 00B5FFF7 	    _CALL uart_putc 
 1531      FEFF5DF8 
 1531      04EB
 1532 0bf6 5FF83C00 	1:  ldr r0,tib
 1533 0bfa 4FF05001 	    mov r1,#TIB_SIZE 
 1534 0bfe 00B5FFF7 	    _CALL readln 
 1534      FEFF5DF8 
 1534      04EB
 1535 0c08 0940     	    ands r1,r1 // empty line 
 1536 0c0a F4D0     	    beq 1b 
 1537 0c0c 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1537      09FB5DF8 
 1537      04EB
 1538 0c16 EED0     	    beq 1b  // tokens stored in text area 
 1539              	// interpret tokenized line 
 1540              	interpreter:
 1541 0c18 00B500F0 	  _CALL next_token 
 1541      23F85DF8 
 1541      04EB
 1542 0c22 0028     	  cmp r0,#TK_NONE 
 1543 0c24 F8D0     	  beq interpreter   
 1544 0c26 0A28     	  cmp r0,#TK_CMD 
 1545 0c28 03D1     	  bne 2f
 1546 0c2a 0846     	  mov r0,r1 
 1547 0c2c 00F014F8 	  bl execute  
 1548 0c30 F2E7     	  b interpreter   
 1549              	2: 
 1550 0c32 0428     	  cmp r0,#TK_VAR 
 1551 0c34 05D1     	  bne 3f 
 1552 0c36 00B500F0 	  _CALL let_var 
ARM GAS  tinyBasic.s 			page 44


 1552      4BFA5DF8 
 1552      04EB
 1553 0c40 EAE7     	  b interpreter 
 1554              	3: 
 1555 0c42 0528     	  cmp r0,#TK_ARRAY 
 1556 0c44 05D1     	  bne 4f
 1557 0c46 00B500F0 	  _CALL let_array 
 1557      51FA5DF8 
 1557      04EB
 1558 0c50 E2E7     	  b interpreter
 1559              	4: 
 1560 0c52 0128     	  cmp r0,#TK_COLON
 1561 0c54 E0D0     	  beq interpreter
 1562 0c56 1FE6     	  b syntax_error
 1563              	
 1564              	/*****************************
 1565              	    execute 
 1566              	    execute a BASIC routine from 
 1567              	    its token value 
 1568              	  input:
 1569              	    r0  BASIC SUB|FUNC token  
 1570              	  output: 
 1571              	    depend on SUB|FUNc
 1572              	*****************************/
 1573              	    _FUNC execute 
 1574 0c58 DFF82414 	    ldr r1,=fn_table 
 1575 0c5c 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1576 0c60 0047     	    bx r0 
 1577              	
 1578              	/*************************************
 1579              	  next_token 
 1580              	  extract next token from token list 
 1581              	  input:
 1582              	    none 
 1583              	  output:
 1584              	    r0    token attribute
 1585              	    r1    token value if there is one 
 1586              	  use:
 1587              	    T1    exit token type  
 1588              	****************************/
 1589 0c62 00BF     	    _FUNC next_token 
 1590 0c64 4DF8048D 	    push {T1}
 1591 0c68 88EA0808 	    eor T1,T1 // TK_NONE 
 1592 0c6c 6068     	    ldr r0,[UPP,#COUNT]
 1593 0c6e 8245     	    cmp IN,r0 
 1594 0c70 0FD4     	    bmi 0f
 1595              	new_line:
 1596 0c72 BBF80010 	    ldrh r1,[BPTR] // line #
 1597 0c76 01B9     	    cbnz r1, end_of_line  // command line
 1598 0c78 AAE7     	    b warm_start
 1599              	end_of_line:        
 1600 0c7a 8344     	    add BPTR,r0 // next line 
 1601 0c7c 606B     	    ldr r0,[UPP,#TXTEND]
 1602 0c7e 8345     	    cmp BPTR,r0 
 1603 0c80 A6D5     	    bpl warm_start // end of program
 1604 0c82 9BF80200 	    ldrb r0,[BPTR,#2]
 1605 0c86 6060     	    str r0,[UPP,#COUNT] 
ARM GAS  tinyBasic.s 			page 45


 1606 0c88 4FF0030A 	    mov IN,#3
 1607 0c8c 4FF00100 	    mov r0,#TK_COLON 
 1608 0c90 2AE0     	    b 9f    
 1609              	0: 
 1610 0c92 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1611 0c96 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1612 0c9a 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1613 0c9e 0AF1010A 	    add IN,#1  
 1614 0ca2 8046     	    mov T1,r0 
 1615 0ca4 00F03F00 	    and r0,#0x3f // limit mask 
 1616 0ca8 F649     	    ldr r1,=tok_jmp 
 1617 0caa D1E800F0 	    tbb [r1,r0]
 1618              	1: // pc reference point 
 1619 0cae 1BE0     	    b 9f 
 1620              	2: // .byte param
 1621 0cb0 1BF80A10 	    ldrb r1,[BPTR,IN]
 1622 0cb4 0AF1010A 	    add IN,#1 
 1623 0cb8 16E0     	    b 9f 
 1624              	3: // .hword param 
 1625 0cba 3BF80A10 	    ldrh r1,[BPTR,IN]
 1626 0cbe 0AF1020A 	    add IN,#2 
 1627 0cc2 11E0     	    b 9f 
 1628              	4: // .word param  
 1629 0cc4 5BF80A10 	    ldr r1,[BPTR,IN]
 1630 0cc8 0AF1040A 	    add IN,#4
 1631 0ccc 0CE0     	    b 9f 
 1632              	5: // .asciz param 
 1633 0cce 0BEB0A01 	    add r1,BPTR,IN 
 1634 0cd2 0846     	    mov r0,r1  
 1635 0cd4 00B5FFF7 	    _CALL strlen 
 1635      FEFF5DF8 
 1635      04EB
 1636 0cde 8244     	    add IN,r0
 1637 0ce0 0AF1010A 	    add IN,#1
 1638 0ce4 00E0     	    b 9f  
 1639              	8: // syntax error 
 1640 0ce6 D7E5     	    b syntax_error 
 1641 0ce8 4046     	9:  mov r0,T1  
 1642 0cea 5DF8048B 	    pop {T1}
 1643 0cee 7047     	    _RET
 1644              	
 1645              	  .p2align 2
 1646              	tok_jmp: // token id  tbb offset 
 1647 0cf0 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1648 0cf2 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1649 0cf6 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1650 0cfa 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1651 0cfe 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1652 0d02 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1652      1C
 1653 0d07 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1653      1C1C
 1654 0d0d 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1655 0d10 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1656 0d13 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1656      1C1C1C1C 
 1657 0d1b 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
ARM GAS  tinyBasic.s 			page 46


 1657      1C1C
 1658 0d21 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1658      1D1D
 1659 0d27 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1659      1C1C1C1C 
 1659      1C
 1660              	
 1661              	  .p2align 2 
 1662              	
 1663              	/*********************************
 1664              	    expect 
 1665              	    check if next token is of 
 1666              	    expected type. If not 
 1667              	    call syntax_error  
 1668              	  input:
 1669              	      r0   token attribute
 1670              	  output:
 1671              	      r0  token attribute 
 1672              	      r1  token value
 1673              	  use:
 1674              	      T1   
 1675              	**********************************/
 1676              	    _FUNC expect 
 1677 0d30 4DF8048D 	    push {T1}
 1678 0d34 8046     	    mov T1,r0 
 1679 0d36 00B5FFF7 	    _CALL next_token 
 1679      94FF5DF8 
 1679      04EB
 1680 0d40 4045     	    cmp r0,T1  
 1681 0d42 7FF4A9AD 	    bne syntax_error 
 1682 0d46 5DF8048B 	    pop {T1}
 1683 0d4a 7047     	    _RET 
 1684              	
 1685              	/***********************************
 1686              	    func_args 
 1687              	    get function arguments list 
 1688              	  input:
 1689              	    none 
 1690              	  output:
 1691              	    r0    arg. count 
 1692              	  use:
 1693              	
 1694              	************************************/
 1695              	    _FUNC func_args 
 1696 0d4c 4FF00600 	    mov r0,#TK_LPAREN 
 1697 0d50 00B5FFF7 	    _CALL expect 
 1697      EDFF5DF8 
 1697      04EB
 1698 0d5a 00B500F0 	    _CALL arg_list 
 1698      0CF85DF8 
 1698      04EB
 1699 0d64 01B4     	    push {r0}
 1700 0d66 4FF00700 	    mov r0,#TK_RPAREN 
 1701 0d6a 00B5FFF7 	    _CALL expect 
 1701      E0FF5DF8 
 1701      04EB
 1702 0d74 01BC     	    pop {r0}
ARM GAS  tinyBasic.s 			page 47


 1703 0d76 7047     	    _RET 
 1704              	
 1705              	/**********************************
 1706              	    arg_list 
 1707              	    get arguments list on dstack 
 1708              	  input:
 1709              	    none 
 1710              	  output:
 1711              	    r0    arg count
 1712              	  use:
 1713              	    T1    tmp count  
 1714              	***********************************/
 1715              	    _FUNC arg_list 
 1716 0d78 4DF8048D 	    push {T1}
 1717 0d7c 88EA0808 	    eor T1,T1 
 1718 0d80 00B500F0 	1:  _CALL expression 
 1718      C9F85DF8 
 1718      04EB
 1719 0d8a 0028     	    cmp R0,#TK_NONE 
 1720 0d8c 10D0     	    beq 9f 
 1721 0d8e 0E28     	    cmp r0,#TK_INTGR
 1722 0d90 0ED1     	    bne 9f 
 1723 0d92 4CF8041D 	    _PUSH r1 
 1724 0d96 08F10108 	    add T1,#1 
 1725 0d9a 00B5FFF7 	    _CALL next_token 
 1725      62FF5DF8 
 1725      04EB
 1726 0da4 0828     	    cmp r0,#TK_COMMA 
 1727 0da6 EBD0     	    beq 1b 
 1728 0da8 D4F800A0 	    _UNGET_TOKEN 
 1728      D4F808B0 
 1729 0db0 4046     	9:  mov r0,T1 
 1730 0db2 5DF8048B 	    pop {T1}
 1731 0db6 7047     	    _RET 
 1732              	
 1733              	/***********************************
 1734              	 factor
 1735              	 arithmetick factor parser 
 1736              	 factor ::= ['+'|'-'|e]  var | @ |
 1737              				 integer | function |
 1738              				 '('expression')' 
 1739              	  input: 
 1740              	    none 
 1741              	  output:
 1742              	    r0   token attribute 
 1743              	    r1   token value 
 1744              	  use:
 1745              	    r2   temp 
 1746              	    T1   sign 
 1747              	    T2   exit token attribute 
 1748              	***********************************/
 1749              	    _FUNC factor 
 1750 0db8 2DE90403 	    push {r2,T1,T2}
 1751 0dbc 4FF00E09 	    mov T2,#TK_INTGR 
 1752 0dc0 4FF00108 	    mov T1,#1 // default sign +  
 1753 0dc4 00B5FFF7 	    _CALL next_token
 1753      4DFF5DF8 
ARM GAS  tinyBasic.s 			page 48


 1753      04EB
 1754 0dce 0246     	    mov r2,r0 
 1755 0dd0 00F03000 	    and r0,#TK_GRP_MASK 
 1756 0dd4 1028     	    cmp r0,#TK_GRP_ADD
 1757 0dd6 1046     	    mov r0,r2
 1758 0dd8 08D1     	    bne 1f 
 1759 0dda 1028     	    cmp r0,#TK_PLUS 
 1760 0ddc 01D0     	    beq 0f 
 1761 0dde 4FF0FF38 	    mov T1,#-1 // minus sign 
 1762 0de2 00B5FFF7 	0:  _CALL next_token
 1762      3EFF5DF8 
 1762      04EB
 1763 0dec 0E28     	1:  cmp r0,#TK_INTGR 
 1764 0dee 4ED0     	    beq 8f 
 1765 0df0 0528     	    cmp r0,#TK_ARRAY 
 1766 0df2 1ED1     	    bne 2f 
 1767 0df4 4FF00600 	    mov r0,#TK_LPAREN 
 1768 0df8 00B5FFF7 	    _CALL expect 
 1768      99FF5DF8 
 1768      04EB
 1769 0e02 00B500F0 	    _CALL expression
 1769      88F85DF8 
 1769      04EB
 1770 0e0c 0E28     	    cmp r0,#TK_INTGR
 1771 0e0e 7FF443AD 	    bne syntax_error
 1772 0e12 8146     	    mov T2,r0
 1773 0e14 0A46     	    mov r2,r1  
 1774 0e16 4FF00700 	    mov r0,#TK_RPAREN
 1775 0e1a 00B5FFF7 	    _CALL expect 
 1775      88FF5DF8 
 1775      04EB
 1776 0e24 1046     	    mov r0,r2 
 1777 0e26 00B500F0 	    _CALL get_array_element 
 1777      ECF85DF8 
 1777      04EB
 1778 0e30 2DE0     	    b 8f
 1779 0e32 0628     	2:  cmp r0,#TK_LPAREN 
 1780 0e34 12D1     	    bne 3f 
 1781 0e36 00B500F0 	    _CALL expression 
 1781      6EF85DF8 
 1781      04EB
 1782 0e40 0E28     	    cmp r0,#TK_INTGR 
 1783 0e42 7FF429AD 	    bne syntax_error
 1784 0e46 8146     	    mov T2,r0
 1785 0e48 0A46     	    mov r2,r1   
 1786 0e4a 4FF00700 	    mov r0,#TK_RPAREN
 1787 0e4e 00B5FFF7 	    _CALL expect 
 1787      6EFF5DF8 
 1787      04EB
 1788 0e58 1146     	    mov r1,r2 
 1789 0e5a 18E0     	    b 8f       
 1790 0e5c 0428     	3:  cmp r0,#TK_VAR 
 1791 0e5e 06D1     	    bne 4f
 1792 0e60 0846     	    mov r0,r1  
 1793 0e62 00B500F0 	    _CALL get_var 
 1793      E2F85DF8 
 1793      04EB
ARM GAS  tinyBasic.s 			page 49


 1794 0e6c 0FE0     	    b 8f 
 1795 0e6e 0B28     	4:  cmp r0,#TK_IFUNC 
 1796 0e70 06D1     	    bne 6f 
 1797 0e72 0846     	5:  mov r0,r1  
 1798 0e74 00B5FFF7 	    _CALL execute
 1798      EFFE5DF8 
 1798      04EB
 1799 0e7e 06E0     	    b 8f 
 1800 0e80 D4F800A0 	6:  _UNGET_TOKEN      
 1800      D4F808B0 
 1801 0e88 4FF00000 	    mov r0,#TK_NONE
 1802 0e8c 03E0     	    b 9f  
 1803 0e8e 08FB01F1 	8:  mul r1,T1 
 1804 0e92 5FEA0900 	    movs r0,T2 
 1805 0e96 BDE80403 	9:  pop {r2,T1,T2}   
 1806 0e9a 7047     	    _RET 
 1807              	
 1808              	
 1809              	/*****************************************
 1810              	    term 
 1811              	    term parser 
 1812              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1813              	    output:
 1814              	      r0  	token attribute 
 1815              	      r1		integer
 1816              	    use:
 1817              	      r2    first operand 
 1818              	      r3    temp 
 1819              	      T1    operator 
 1820              	      T2    exit token attribute 
 1821              	******************************************/
 1822              	     _FUNC term 
 1823 0e9c 2DE90C03 	    push {r2,r3,T1,T2}
 1824 0ea0 4FF00009 	    mov T2,#TK_NONE 
 1825 0ea4 00B5FFF7 	    _CALL factor
 1825      87FF5DF8 
 1825      04EB
 1826 0eae 60B3     	    cbz r0, 9f  // no factor   
 1827 0eb0 8146     	    mov T2,r0  // TK_INTGR 
 1828 0eb2 0A46     	    mov r2,r1 // first factor    
 1829 0eb4 00B5FFF7 	0:  _CALL next_token
 1829      D5FE5DF8 
 1829      04EB
 1830 0ebe 0346     	    mov r3,r0   
 1831 0ec0 00F03000 	    and r0,#TK_GRP_MASK 
 1832 0ec4 2028     	    cmp r0,#TK_GRP_MULT
 1833 0ec6 04D0     	    beq 1f
 1834 0ec8 D4F800A0 	    _UNGET_TOKEN
 1834      D4F808B0 
 1835 0ed0 1BE0     	    b 9f 
 1836 0ed2 9846     	1:  mov T1,r3 
 1837 0ed4 00B5FFF7 	    _CALL factor  
 1837      6FFF5DF8 
 1837      04EB
 1838 0ede 3FF4DBAC 	    beq syntax_error 
 1839 0ee2 B8F1200F 	    cmp T1,#TK_MULT
 1840 0ee6 02D1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 50


 1841              	// multiplication
 1842 0ee8 01FB02F2 	    mul r2,r1
 1843 0eec E2E7     	    b 0b  
 1844 0eee B8F1210F 	2:  cmp T1,#TK_DIV 
 1845 0ef2 02D1     	    bne 3f
 1846              	// division
 1847 0ef4 92FBF1F2 	    sdiv r2,r2,r1
 1848 0ef8 DCE7     	    b 0b  
 1849              	3: // modulo
 1850 0efa 1046     	    mov r0,r2 
 1851 0efc 92FBF1F2 	    sdiv r2,r2,r1 
 1852 0f00 01FB02F2 	    mul  r2,r1 
 1853 0f04 A0EB0202 	    sub  r2,r0,r2
 1854 0f08 D4E7     	    b 0b  
 1855 0f0a 1146     	9:  mov r1,r2 
 1856 0f0c 5FEA0900 	    movs r0,T2 
 1857 0f10 BDE80C03 	    pop {r2,r3,T1,T2}
 1858 0f14 7047     	    _RET 
 1859              	
 1860              	/*****************************************
 1861              	    expression 
 1862              	    arithmetic expression parser 
 1863              	    expression ::= term [['+'|'-'] term]*
 1864              	    result range {-32768..32767}
 1865              	    output:
 1866              	      r0    TK_NONE || TK_INTGR 
 1867              	      r1 	  integer
 1868              	    use:
 1869              	      r2  left operand 
 1870              	      T1  operator 
 1871              	      T2  exit token attribute
 1872              	******************************************/
 1873 0f16 00BF     	    _FUNC expression 
 1874 0f18 2DE90403 	    push {r2,t1,t2}
 1875 0f1c 4FF00009 	    mov T2,#TK_NONE
 1876 0f20 82EA0202 	    eor r2,r2 // zero 
 1877 0f24 00B5FFF7 	    _CALL term 
 1877      B9FF5DF8 
 1877      04EB
 1878 0f2e 21D0     	    beq 9f  // no term  
 1879 0f30 0A46     	    mov r2,r1 // first term
 1880 0f32 4FF00E09 	    mov T2,#TK_INTGR    
 1881 0f36 00B5FFF7 	1:  _CALL next_token 
 1881      94FE5DF8 
 1881      04EB
 1882 0f40 8046     	    mov T1,r0 // token attribute 
 1883 0f42 00F03000 	    and r0,#TK_GRP_MASK 
 1884 0f46 1028     	    cmp r0,#TK_GRP_ADD 
 1885 0f48 04D0     	    beq 3f 
 1886 0f4a D4F800A0 	    _UNGET_TOKEN
 1886      D4F808B0 
 1887 0f52 0FE0     	    b 9f  
 1888 0f54 00B5FFF7 	3:  _CALL term 
 1888      A1FF5DF8 
 1888      04EB
 1889 0f5e 0E28     	    cmp r0,#TK_INTGR 
 1890 0f60 7FF49AAC 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 51


 1891 0f64 B8F1100F 	    cmp T1,#TK_PLUS 
 1892 0f68 02D0     	    beq 4f 
 1893 0f6a A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1894 0f6e E2E7     	    b 1b 
 1895 0f70 0A44     	4:  add r2,r2,r1 // N1+N2
 1896 0f72 E0E7     	    b 1b
 1897 0f74 4846     	9:  mov r0,T2 
 1898 0f76 1146     	    mov r1,r2 
 1899 0f78 BDE80403 	    pop {r2,t1,t2}
 1900 0f7c 7047     	    _RET 
 1901              	
 1902              	
 1903              	/**********************************************
 1904              	    relation parser 
 1905              	    rel ::= expr1 rel_op expr2
 1906              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1907              	    relation return  integer , zero is false 
 1908              	    output:
 1909              	        r0	TK_INTGR  
 1910              	        r1	integer 
 1911              	    use:
 1912              	        r2   first operand 
 1913              	        T1   relop   
 1914              	**********************************************/
 1915 0f7e 00BF     	    _FUNC relation 
 1916 0f80 2DE90401 	    push {r2,T1}
 1917 0f84 00B5FFF7 	    _CALL expression 
 1917      C7FF5DF8 
 1917      04EB
 1918 0f8e 0E28     	    cmp r0,#TK_INTGR 
 1919 0f90 7FF482AC 	    bne syntax_error 
 1920 0f94 0A46     	    mov r2,r1  // first operand  
 1921 0f96 00B5FFF7 	    _CALL next_token 
 1921      64FE5DF8 
 1921      04EB
 1922 0fa0 8046     	    mov T1,r0  // relop  
 1923 0fa2 00F03000 	    and r0,#TK_GRP_MASK 
 1924 0fa6 3028     	    cmp r0,#TK_GRP_RELOP 
 1925 0fa8 1DD1     	    bne 8f  // single operand 
 1926 0faa 00B5FFF7 	    _CALL expression 
 1926      B4FF5DF8 
 1926      04EB
 1927 0fb4 0E28     	    cmp r0,#TK_INTGR 
 1928 0fb6 7FF46FAC 	    bne syntax_error 
 1929 0fba 8A42     	    cmp r2,r1 // compare operands  
 1930 0fbc 4FF0FF31 	    mov r1,#-1 
 1931 0fc0 314A     	    ldr r2,=relop_jmp
 1932 0fc2 08F00708 	    and T1,#7 // {1..6}
 1933 0fc6 D2E808F0 	    tbb [r2,T1]    
 1934              	rel_idx0:
 1935              	rel_eq:
 1936 0fca 11D0     	    beq 9f 
 1937 0fcc 08E0     	    b rel_false
 1938              	rel_lt: 
 1939 0fce 0FDB     	    blt 9f   
 1940 0fd0 06E0     	    b rel_false 
 1941              	rel_le:
ARM GAS  tinyBasic.s 			page 52


 1942 0fd2 0DDD     	    ble 9f  
 1943 0fd4 04E0     	    b rel_false 
 1944              	rel_gt:
 1945 0fd6 0BDC     	    bgt 9f  
 1946 0fd8 02E0     	    b rel_false  
 1947              	rel_ge:
 1948 0fda 09DA     	    bge 9f  
 1949 0fdc 00E0     	    b rel_false  
 1950              	rel_diff:
 1951 0fde 07D1     	    bne 9f 
 1952              	rel_false:    
 1953 0fe0 81EA0101 	    eor r1,r1  // false
 1954 0fe4 04E0     	    b 9f  
 1955 0fe6 D4F800A0 	8:  _UNGET_TOKEN 
 1955      D4F808B0 
 1956 0fee 1146     	    mov r1,r2    
 1957 0ff0 4FF00E00 	9:  mov r0,#TK_INTGR
 1958 0ff4 BDE80401 	    pop {r2,T1}
 1959 0ff8 7047     	    _RET 
 1960              	
 1961              	
 1962              	relop_jmp: 
 1963 0ffa 00       	  .byte 0 
 1964 0ffb 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1965 0ffc 00       	  .byte 0 // =
 1966 0ffd 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1967 0ffe 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1968 0fff 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1969 1000 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1970              	
 1971              	
 1972              	/***********************************
 1973              	    get_array_element
 1974              	    return value of @(n)
 1975              	  input:
 1976              	    r0    indice 
 1977              	  output:
 1978              	    r0   TK_INTGR
 1979              	    r1   value  
 1980              	************************************/
 1981 1001 0000BF   	    _FUNC get_array_element 
 1982 1004 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1983 1008 4FEA8000 	    lsl r0,#2 
 1984 100c C0EB0100 	    rsb r0,r1 
 1985 1010 0168     	    ldr r1,[r0]
 1986 1012 4FF00E00 	    mov r0,#TK_INTGR 
 1987 1016 7047     	    _RET 
 1988              	
 1989              	
 1990              	/***********************************
 1991              	    set_array_element 
 1992              	    set value of array element 
 1993              	  input:
 1994              	    r0   index 
 1995              	    r1   new value 
 1996              	  output:
 1997              	    none
ARM GAS  tinyBasic.s 			page 53


 1998              	  use:
 1999              	    r2    array pointer 
 2000              	**********************************/
 2001              	    _FUNC set_array_element 
 2002 1018 04B4     	    push {r2}
 2003 101a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2004 101e 4FEA8000 	    lsl r0,#2 
 2005 1022 A1EB0001 	    sub r1,r0 
 2006 1026 0960     	    str r1,[r1]
 2007 1028 04BC     	    pop {r2}
 2008 102a 7047     	    _RET 
 2009              	
 2010              	/***********************************
 2011              	   get_var 
 2012              	   get variable value 
 2013              	  input:
 2014              	     r0    variable index {0..25}
 2015              	  output:
 2016              	     r0    TK_INTGR
 2017              	     r1    value 
 2018              	**********************************/
 2019              	    _FUNC get_var 
 2020 102c 04F16001 	    add r1,UPP,#VARS
 2021 1030 4FEA8000 	    lsl r0,#2 
 2022 1034 0958     	    ldr r1,[r1,r0]
 2023 1036 4FF00E00 	    mov r0,#TK_INTGR
 2024 103a 7047     	    _RET 
 2025              	
 2026              	/*********************************
 2027              	    set_var 
 2028              	    set variable value 
 2029              	  input:
 2030              	     r0    variable index {0..25}
 2031              	     r1    new value 
 2032              	  output:
 2033              	    none 
 2034              	  use:
 2035              	    r2   vars pointer 
 2036              	*********************************/
 2037              	    _FUNC set_var 
 2038 103c 04B4     	    push {r2}
 2039 103e 226E     	    ldr r2,[UPP,#VARS]
 2040 1040 4FEA8000 	    lsl r0,#2
 2041 1044 1150     	    str r1,[r2,r0]
 2042 1046 04BC     	    pop {r2}
 2043 1048 7047     	    _RET 
 2044              	
 2045              	/******************************
 2046              	    CONSTANTS data
 2047              	******************************/
 2048              	
 2049 104a 0000     	  .section .rodata 
 2050              	
 2051              	// system variables initial value 
 2052              	uzero:
 2053 0000 00000000 	  .word 0 // IN_SAVED
 2054 0004 00000000 	  .word 0 // COUNT
ARM GAS  tinyBasic.s 			page 54


 2055 0008 00000000 	  .word 0 // BASICPTR
 2056 000c 00000000 	  .word 0 // DATAPTR
 2057 0010 00000000 	  .word 0 // DATA
 2058 0014 00000000 	  .word 0 // DATALEN
 2059 0018 0A000000 	  .word 10 // BASE
 2060 001c 00000000 	  .word 0 // TICKS
 2061 0020 00000000 	  .word 0 // TIMER
 2062 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2063 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2064 002c 00000000 	  .word 0 // FFREE
 2065 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2066 0034 CC000000 	  .word ulast-uzero // TXTEND
 2067 0038 00000000 	  .word 0 //LOOP_DEPTH
 2068 003c 00000000 	  .word 0 // ARRAY_SIZE
 2069 0040 00000000 	  .word 0 // FLAGS
 2070 0044 04000000 	  .word 4 // TAB_WIDTH
 2071 0048 00000000 	  .word 0 // RX_HEAD
 2072 004c 00000000 	  .word 0 // RX_TAIL
 2073 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2073      00000000 
 2073      00000000 
 2073      00000000 
 2074 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2074      00000000 
 2074      00000000 
 2074      00000000 
 2074      00000000 
 2075 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2076              	ulast:
 2077              	
 2078              	  .section .rodata.dictionary 
 2079              	
 2080              	// keep alphabetic order for BASIC names from Z-A
 2081              	// this sort order is for for WORDS cmd output. 	
 2082              	
 2083              		.equ link, 0
 2084              	kword_end:
 2085 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2085      00000000 
 2085      00000000 
 2085      00000000 
 2086 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2086      64000000 
 2086      0A000000 
 2086      5854524D 
 2086      54000000 
 2087 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2087      65000000 
 2087      0A000000 
 2087      58524356 
 2087      00000000 
 2088 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2088      63000000 
 2088      0B000000 
 2088      584F5200 
 2089 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2089      62000000 
ARM GAS  tinyBasic.s 			page 55


 2089      0A000000 
 2089      57524954 
 2089      45000000 
 2090 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2090      61000000 
 2090      0A000000 
 2090      574F5244 
 2090      53000000 
 2091 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2091      60000000 
 2091      0A000000 
 2091      57414954 
 2091      00000000 
 2092 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2092      5F000000 
 2092      0B000000 
 2092      55535200 
 2093 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2093      5E000000 
 2093      0A000000 
 2093      554E5449 
 2093      4C000000 
 2094 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2094      5D000000 
 2094      0B000000 
 2094      55464C41 
 2094      53480000 
 2095 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2095      5C000000 
 2095      0B000000 
 2095      55424F55 
 2095      4E440000 
 2096 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2096      5B000000 
 2096      0A000000 
 2096      544F4E45 
 2096      00000000 
 2097 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2097      5A000000 
 2097      0A000000 
 2097      544F0000 
 2098 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2098      58000000 
 2098      0A000000 
 2098      54494D45 
 2098      52000000 
 2099 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2099      59000000 
 2099      0B000000 
 2099      54494D45 
 2099      4F555400 
 2100 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2100      57000000 
 2100      0B000000 
 2100      5449434B 
 2100      53000000 
 2101 0130 28010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
ARM GAS  tinyBasic.s 			page 56


 2101      67000000 
 2101      0A000000 
 2101      5448454E 
 2101      00000000 
 2102 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2102      56000000 
 2102      0A000000 
 2102      53544F50 
 2102      00000000 
 2103 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2103      55000000 
 2103      0A000000 
 2103      53544550 
 2103      00000000 
 2104 016c 64010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2104      54000000 
 2104      0A000000 
 2104      53504957 
 2104      52000000 
 2105 0180 78010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2105      53000000 
 2105      0A000000 
 2105      53504953 
 2105      454C0000 
 2106 0194 8C010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2106      51000000 
 2106      0B000000 
 2106      53504952 
 2106      44000000 
 2107 01a8 A0010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2107      52000000 
 2107      0A000000 
 2107      53504945 
 2107      4E000000 
 2108 01bc B4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2108      50000000 
 2108      0A000000 
 2108      534C4545 
 2108      50000000 
 2109 01d0 C8010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2109      4F000000 
 2109      0B000000 
 2109      53495A45 
 2109      00000000 
 2110 01e4 DC010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2110      4E000000 
 2110      0A000000 
 2110      53484F57 
 2110      00000000 
 2111 01f8 F0010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2111      4D000000 
 2111      0A000000 
 2111      53415645 
 2111      00000000 
 2112 020c 04020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2112      4C000000 
 2112      0A000000 
ARM GAS  tinyBasic.s 			page 57


 2112      52554E00 
 2113 021c 18020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2113      4B000000 
 2113      0B000000 
 2113      52534849 
 2113      46540000 
 2114 0230 28020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2114      4A000000 
 2114      0B000000 
 2114      524E4400 
 2115 0240 3C020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2115      49000000 
 2115      0A000000 
 2115      52455455 
 2115      524E0000 
 2116 0254 4C020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2116      48000000 
 2116      0A000000 
 2116      52455354 
 2116      4F524500 
 2117 0268 60020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2117      47000000 
 2117      0A000000 
 2117      52454D41 
 2117      524B0000 
 2118 027c 74020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 2118      46000000 
 2118      0A000000 
 2118      5245424F 
 2118      4F540000 
 2119 0290 88020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2119      45000000 
 2119      0B000000 
 2119      52454144 
 2119      00000000 
 2120 02a4 9C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2120      44000000 
 2120      0B000000 
 2120      514B4559 
 2120      00000000 
 2121 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 2121      43000000 
 2121      0B000000 
 2121      50525449 
 2121      00000000 
 2122 02cc C4020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 2122      42000000 
 2122      0B000000 
 2122      50525448 
 2122      00000000 
 2123 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 2123      41000000 
 2123      0B000000 
 2123      50525447 
 2123      00000000 
 2124 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 2124      40000000 
ARM GAS  tinyBasic.s 			page 58


 2124      0B000000 
 2124      50525446 
 2124      00000000 
 2125 0308 00030000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 2125      3F000000 
 2125      0B000000 
 2125      50525445 
 2125      00000000 
 2126 031c 14030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 2126      3E000000 
 2126      0B000000 
 2126      50525444 
 2126      00000000 
 2127 0330 28030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 2127      3D000000 
 2127      0B000000 
 2127      50525443 
 2127      00000000 
 2128 0344 3C030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2128      3C000000 
 2128      0B000000 
 2128      50525442 
 2128      00000000 
 2129 0358 50030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2129      3B000000 
 2129      0B000000 
 2129      50525441 
 2129      00000000 
 2130 036c 64030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2130      3A000000 
 2130      0A000000 
 2130      5052494E 
 2130      54000000 
 2131 0380 78030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2131      39000000 
 2131      0B000000 
 2131      504F5554 
 2131      00000000 
 2132 0394 8C030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2132      38000000 
 2132      0A000000 
 2132      504F4B45 
 2132      00000000 
 2133 03a8 A0030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2133      35000000 
 2133      0A000000 
 2133      504D4F44 
 2133      45000000 
 2134 03bc B4030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2134      37000000 
 2134      0B000000 
 2134      50494E50 
 2134      00000000 
 2135 03d0 C8030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2135      36000000 
 2135      0B000000 
 2135      5045454B 
ARM GAS  tinyBasic.s 			page 59


 2135      00000000 
 2136 03e4 DC030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2136      34000000 
 2136      0A000000 
 2136      50415553 
 2136      45000000 
 2137 03f8 F0030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2137      33000000 
 2137      0B000000 
 2137      50414400 
 2138 0408 04040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2138      32000000 
 2138      0B000000 
 2138      4F520000 
 2139 0418 14040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2139      31000000 
 2139      0B000000 
 2139      4F445200 
 2140 0428 24040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2140      30000000 
 2140      0B000000 
 2140      4E4F5400 
 2141 0438 34040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2141      2E000000 
 2141      0A000000 
 2141      4E455854 
 2141      00000000 
 2142 044c 44040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2142      2F000000 
 2142      0A000000 
 2142      4E455700 
 2143 045c 58040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2143      2D000000 
 2143      0B000000 
 2143      4D554C44 
 2143      49560000 
 2144 0470 68040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2144      2C000000 
 2144      0B000000 
 2144      4C534849 
 2144      46540000 
 2145 0484 7C040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2145      2B000000 
 2145      0B000000 
 2145      4C4F4700 
 2146 0494 90040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2146      2A000000 
 2146      0A000000 
 2146      4C4F4144 
 2146      00000000 
 2147 04a8 A0040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2147      29000000 
 2147      0A000000 
 2147      4C495354 
 2147      00000000 
 2148 04bc B4040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2148      28000000 
ARM GAS  tinyBasic.s 			page 60


 2148      0A000000 
 2148      4C455400 
 2149 04cc C8040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2149      27000000 
 2149      0B000000 
 2149      4B455900 
 2150 04dc D8040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2150      26000000 
 2150      0A000000 
 2150      49574447 
 2150      52454600 
 2151 04f0 E8040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2151      25000000 
 2151      0A000000 
 2151      49574447 
 2151      454E0000 
 2152 0504 FC040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2152      24000000 
 2152      0B000000 
 2152      494E5645 
 2152      52540000 
 2153 0518 10050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2153      23000000 
 2153      0A000000 
 2153      494E5055 
 2153      54000000 
 2154 052c 24050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2154      22000000 
 2154      0A000000 
 2154      49460000 
 2155 053c 38050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2155      21000000 
 2155      0B000000 
 2155      49445200 
 2156 054c 48050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2156      20000000 
 2156      0A000000 
 2156      48455800 
 2157 055c 58050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2157      1F000000 
 2157      0B000000 
 2157      4750494F 
 2157      00000000 
 2158 0570 68050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2158      1E000000 
 2158      0A000000 
 2158      474F544F 
 2158      00000000 
 2159 0584 7C050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2159      1D000000 
 2159      0A000000 
 2159      474F5355 
 2159      42000000 
 2160 0598 90050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2160      1C000000 
 2160      0A000000 
 2160      464F5247 
ARM GAS  tinyBasic.s 			page 61


 2160      45540000 
 2161 05ac A4050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2161      1B000000 
 2161      0A000000 
 2161      464F5200 
 2162 05bc B8050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 2162      1A000000 
 2162      0A000000 
 2162      46435055 
 2162      00000000 
 2163 05d0 C8050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2163      18000000 
 2163      0A000000 
 2163      454E4400 
 2164 05e0 DC050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2164      19000000 
 2164      0B000000 
 2164      45455052 
 2164      4F4D0000 
 2165 05f4 EC050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2165      17000000 
 2165      0A000000 
 2165      44575249 
 2165      54450000 
 2166 0608 00060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2166      66000000 
 2166      0A000000 
 2166      44554D50 
 2166      00000000 
 2167 061c 14060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2167      16000000 
 2167      0B000000 
 2167      44524541 
 2167      44000000 
 2168 0630 28060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2168      15000000 
 2168      0A000000 
 2168      444F0000 
 2169 0640 3C060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2169      14000000 
 2169      0A000000 
 2169      44495200 
 2170 0650 4C060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2170      13000000 
 2170      0A000000 
 2170      44454300 
 2171 0660 5C060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2171      12000000 
 2171      0B000000 
 2171      44445200 
 2172 0670 6C060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2172      11000000 
 2172      0A000000 
 2172      44415441 
 2172      4C4E0000 
 2173 0684 7C060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2173      10000000 
ARM GAS  tinyBasic.s 			page 62


 2173      0A000000 
 2173      44415441 
 2173      00000000 
 2174 0698 90060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2174      0F000000 
 2174      0B000000 
 2174      43524C00 
 2175 06a8 A4060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2175      0E000000 
 2175      0B000000 
 2175      43524800 
 2176 06b8 B4060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2176      0D000000 
 2176      0C000000 
 2176      43484152 
 2176      00000000 
 2177 06cc C4060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2177      0C000000 
 2177      0A000000 
 2177      42594500 
 2178 06dc D8060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2178      0B000000 
 2178      0A000000 
 2178      42544F47 
 2178      4C000000 
 2179 06f0 E8060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2179      0A000000 
 2179      0B000000 
 2179      42544553 
 2179      54000000 
 2180 0704 FC060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2180      09000000 
 2180      0A000000 
 2180      42534554 
 2180      00000000 
 2181 0718 10070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2181      08000000 
 2181      0A000000 
 2181      42524553 
 2181      00000000 
 2182 072c 24070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2182      07000000 
 2182      0B000000 
 2182      42495400 
 2183 073c 38070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2183      06000000 
 2183      0A000000 
 2183      41575500 
 2184 074c 48070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2184      05000000 
 2184      0A000000 
 2184      4155544F 
 2184      52554E00 
 2185 0760 58070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2185      04000000 
 2185      0B000000 
 2185      41534300 
ARM GAS  tinyBasic.s 			page 63


 2186 0770 6C070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2186      03000000 
 2186      0B000000 
 2186      414E4400 
 2187 0780 7C070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2187      02000000 
 2187      0B000000 
 2187      41444352 
 2187      45414400 
 2188 0794 8C070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2188      01000000 
 2188      0A000000 
 2188      4144434F 
 2188      4E000000 
 2189              	first_link: 
 2190 07a8 A0070000 	  .word LINK 
 2191 07ac 00000000 	  .word ABS_IDX 
 2192 07b0 0B000000 	  .word TK_IFUNC
 2193              	kword_dict: // first name field 
 2194              	  .equ LINK,. 
 2195 07b4 41425300 	  .asciz "ABS" 
 2196              	  .p2align 2 
 2197              	
 2198              	    .section .rodata.fn_tabld 
 2199              	
 2200              	//comands and fonctions address table 	
 2201              	fn_table:
 2202 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2204 003c 00000000 		.word const_cr1,skip_line,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_writ
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2204      00000000 
 2205 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2205      00000000 
 2205      00000000 
 2205      00000000 
 2205      00000000 
 2206 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2207 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2207      00000000 
 2207      00000000 
 2207      00000000 
 2207      00000000 
ARM GAS  tinyBasic.s 			page 64


 2208 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2209 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2210 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,skip_line // 64..71 
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2211 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2211      00000000 
 2212 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2212      00000000 
 2212      00000000 
 2212      00000000 
 2212      00000000 
 2213 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2213      00000000 
 2213      00000000 
 2213      00000000 
 2213      00000000 
 2214 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump,then // 96..103 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2215 01a0 00000000 		.word 0 
 2216              	
 2217              	
 2218              	/**********************************
 2219              	    BASIC commands and functions 
 2220              	**********************************/
 2221              	
 2222              	    .section .text.basic , "ax", %progbits 
 2223              	
 2224              	
 2225              	/*******************************
 2226              	  BASIC:  ABS expr 
 2227              	  input:
 2228              	    none 
 2229              	  output:
 2230              	    r0    token type 
 2231              	    r1    abs(expr)
 2232              	  use:
 2233              	    none 
 2234              	******************************/
 2235              	    _FUNC abs 
 2236 0000 00B5FFF7 	    _CALL arg_list
ARM GAS  tinyBasic.s 			page 65


 2236      FEFF5DF8 
 2236      04EB
 2237 000a 0128     	    cmp r0,#1 
 2238 000c 01D0     	    beq 1f 
 2239 000e FFF7FEBF 	    b syntax_error 
 2240 0012 5CF8041B 	1:  _POP r1 
 2241 0016 11F0004F 	    tst r1,#(1<<31)
 2242 001a 01D0     	    beq 9f
 2243 001c C1F10001 	    rsb r1,#0 
 2244 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2245 0024 7047     	   _RET 
 2246              	
 2247 0026 00BF     	    _FUNC power_adc
 2248 0028 7047     	    _RET
 2249              	
 2250 002a 00BF     	    _FUNC analog_read
 2251 002c 7047     	    _RET
 2252              	
 2253              	/************************************
 2254              	  BASIC: AND(expr1,expr2)
 2255              	  logical ANND bit to between expr1,expr2
 2256              	************************************/
 2257 002e 00BF     	    _FUNC bit_and
 2258 0030 00B5FFF7 	    _CALL func_args 
 2258      FEFF5DF8 
 2258      04EB
 2259 003a 0228     	    cmp r0,#2 
 2260 003c 7FF4FEAF 	    bne syntax_error 
 2261 0040 5CF8040B 	    _POP r0 
 2262 0044 5CF8041B 	    _POP r1 
 2263 0048 01EA0001 	    and r1,r0 
 2264 004c 4FF00E00 	    mov r0,#TK_INTGR
 2265 0050 7047     	    _RET
 2266              	
 2267              	/*******************************************
 2268              	  BASIC: ASC(string|char)
 2269              	  return ASCII code of char of first char 
 2270              	  of string 
 2271              	*******************************************/
 2272 0052 00BF     	    _FUNC ascii
 2273 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2274 0058 00B5FFF7 	    _CALL expect 
 2274      FEFF5DF8 
 2274      04EB
 2275 0062 00B5FFF7 	    _CALL next_token 
 2275      FEFF5DF8 
 2275      04EB
 2276 006c 0228     	    cmp r0,#TK_QSTR
 2277 006e 03D0     	    beq 2f 
 2278 0070 0328     	    cmp r0,#TK_CHAR 
 2279 0072 7FF4FEAF 	    bne syntax_error 
 2280 0076 00E0     	    b 9f 
 2281 0078 0978     	2:  ldrb r1,[r1]
 2282 007a 4CF8041D 	9:  _PUSH r1 
 2283 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2284 0082 00B5FFF7 	    _CALL expect 
 2284      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 66


 2284      04EB
 2285 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2286 0090 5CF8041B 	    _POP r1 
 2287 0094 7047     	    _RET
 2288              	
 2289 0096 00BF     	    _FUNC autorun
 2290 0098 7047     	    _RET
 2291              	
 2292 009a 00BF     	    _FUNC awu
 2293 009c 7047     	    _RET
 2294              	
 2295              	/********************************************
 2296              	  BASIC: BIT(expr)
 2297              	  expr must be between 0..31 and is used 
 2298              	  to create 1 bit mask at that position
 2299              	*******************************************/
 2300 009e 00BF     	    _FUNC bitmask
 2301 00a0 00B5FFF7 	    _CALL func_args
 2301      FEFF5DF8 
 2301      04EB
 2302 00aa 0128     	    cmp r0,#1 
 2303 00ac 7FF4FEAF 	    bne syntax_error 
 2304 00b0 5CF8040B 	    _POP r0
 2305 00b4 4FF00101 	    mov r1,#1
 2306 00b8 20B1     	1:  cbz r0,9f 
 2307 00ba 4FEA4101 	    lsl r1,#1
 2308 00be A0F10100 	    sub r0,#1
 2309 00c2 F9E7     	    b 1b 
 2310 00c4 4FF00E00 	9:  mov r0,#TK_INTGR
 2311 00c8 7047     	    _RET 
 2312              	
 2313              	  
 2314              	  /*********************************
 2315              	   BASIC: BRES adr, mask   
 2316              	   reset bits [adr]= [adr] & ~mask  
 2317              	   input:
 2318              	     none 
 2319              	    output;
 2320              	      none 
 2321              	    use:
 2322              	      T1   temp
 2323              	      T2   temp 
 2324              	*******************************/     
 2325 00ca 00BF     	  _FUNC bit_reset
 2326 00cc 00B5FFF7 	    _CALL arg_list 
 2326      FEFF5DF8 
 2326      04EB
 2327 00d6 0228     	    cmp r0,#2 
 2328 00d8 01D0     	    beq 1f 
 2329 00da FFF7FEBF 	    b syntax_error 
 2330 00de 5CF8041B 	1:  _POP r1 //mask 
 2331 00e2 5CF8040B 	    _POP r0 //address 
 2332 00e6 D0F80090 	    ldr T2,[r0] 
 2333 00ea 81F0FF31 	    eor r1,#-1 // ~mask 
 2334 00ee 01EA0901 	    and r1,T2
 2335 00f2 0160     	    str r1,[r0]
 2336 00f4 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 67


 2337              	
 2338              	
 2339              	/*********************************
 2340              	   BASIC: BSET adr, mask   
 2341              	   reset bits [adr]= [adr] & ~mask  
 2342              	   input:
 2343              	      none 
 2344              	    output;
 2345              	      none 
 2346              	    use:
 2347              	      T1   temp
 2348              	      T2   temp  
 2349              	*******************************/     
 2350 00f6 00BF     	    _FUNC bit_set
 2351 00f8 00B5FFF7 	    _CALL arg_list 
 2351      FEFF5DF8 
 2351      04EB
 2352 0102 0228     	    cmp r0,#2 
 2353 0104 01D0     	    beq 1f 
 2354 0106 FFF7FEBF 	    b syntax_error 
 2355 010a 5CF8041B 	1:  _POP r1 //mask 
 2356 010e 5CF8040B 	    _POP r0 //address 
 2357 0112 D0F80090 	    ldr T2,[r0] 
 2358 0116 41EA0901 	    orr r1,T2
 2359 011a 0160     	    str r1,[r0]
 2360 011c 7047     	    _RET 
 2361              	
 2362              	  /*********************************
 2363              	   BASIC: BTOGL adr, mask   
 2364              	   reset bits [adr]= [adr] & ~mask  
 2365              	   input:
 2366              	     r0    adr 
 2367              	     r1    mask 
 2368              	    output;
 2369              	      none 
 2370              	    use:
 2371              	      T1   temp
 2372              	      T2   temp  
 2373              	*******************************/     
 2374 011e 00BF     	  _FUNC bit_toggle
 2375 0120 00B5FFF7 	    _CALL arg_list 
 2375      FEFF5DF8 
 2375      04EB
 2376 012a 0228     	    cmp r0,#2 
 2377 012c 01D0     	    beq 1f 
 2378 012e FFF7FEBF 	    b syntax_error 
 2379 0132 5CF8041B 	1:  _POP r1 //mask 
 2380 0136 5CF8040B 	    _POP r0 //address 
 2381 013a D0F80090 	    ldr T2,[r0] 
 2382 013e 81EA0901 	    eor r1,T2
 2383 0142 0160     	    str r1,[r0]
 2384 0144 7047     	    _RET  
 2385              	
 2386              	/********************************
 2387              	  BASIC: BTEST(addr,bit)
 2388              	  return bit state at address
 2389              	********************************/
ARM GAS  tinyBasic.s 			page 68


 2390 0146 00BF     	    _FUNC bit_test
 2391 0148 00B5FFF7 	    _CALL func_args
 2391      FEFF5DF8 
 2391      04EB
 2392 0152 0228     	    cmp r0,#2 
 2393 0154 7FF4FEAF 	    bne syntax_error 
 2394 0158 5CF8041B 	    _POP r1
 2395 015c 4FF00100 	    mov r0,#1
 2396 0160 01F01F01 	    and r1,#31  
 2397 0164 21B1     	1:  cbz r1, 2f
 2398 0166 4FEA4000 	    lsl r0,#1
 2399 016a A1F10101 	    sub r1,#1
 2400 016e F9E7     	    b 1b 
 2401 0170 5CF8041B 	2:  _POP r1
 2402 0174 0968     	    ldr r1,[r1]
 2403 0176 01EA0001 	    and r1,r0 
 2404 017a 09B1     	    cbz r1,9f 
 2405 017c 4FF00101 	    mov r1,#1
 2406 0180 4FF00E00 	9:  mov r0,#TK_INTGR    
 2407 0184 7047     	    _RET 
 2408              	
 2409 0186 00BF     	    _FUNC bye
 2410 0188 7047     	    _RET 
 2411              	
 2412              	/*********************************
 2413              	  BASIC: CHAR(expr)
 2414              	  convert expr in character 
 2415              	********************************/
 2416 018a 00BF     	    _FUNC char
 2417 018c 00B5FFF7 	    _CALL func_args
 2417      FEFF5DF8 
 2417      04EB
 2418 0196 0128     	    cmp r0,#1
 2419 0198 7FF4FEAF 	    bne syntax_error 
 2420 019c 5CF8041B 	    _POP r1 
 2421 01a0 01F07F01 	    and r1,#127 
 2422 01a4 4FF00300 	    mov r0,#TK_CHAR
 2423 01a8 7047     	    _RET 
 2424              	
 2425 01aa 00BF     	    _FUNC const_cr2
 2426 01ac 7047     	    _RET  
 2427              	
 2428 01ae 00BF     	    _FUNC const_cr1
 2429 01b0 7047     	    _RET 
 2430              	
 2431              	
 2432              	/**************************
 2433              	  BASIC: DATALN expr 
 2434              	  set data pointer to line#
 2435              	  specified by expr. 
 2436              	  if line# not valid program 
 2437              	  end with error.
 2438              	  use:
 2439              	
 2440              	**************************/
 2441 01b2 00BF     	    _FUNC data_line
 2442 01b4 206C10F0 	    _RTO // run time only 
ARM GAS  tinyBasic.s 			page 69


 2442      010F03D1 
 2442      4FF00700 
 2442      FFF7FEBF 
 2443 01c4 00B5FFF7 	    _CALL expression 
 2443      FEFF5DF8 
 2443      04EB
 2444 01ce 0E28     	    cmp r0,#TK_INTGR
 2445 01d0 7FF4FEAF 	    bne syntax_error
 2446 01d4 0846     	    mov r0,r1 
 2447 01d6 00B5FFF7 	    _CALL search_lineno
 2447      FEFF5DF8 
 2447      04EB
 2448 01e0 0029     	    cmp r1,#0
 2449 01e2 03D0     	    beq 1f 
 2450 01e4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2451 01e8 FFF7FEBF 	    b syntax_error 
 2452 01ec C178     	1:  ldrb r1,[r0,#3]
 2453 01ee 0A29     	    cmp r1,#TK_CMD 
 2454 01f0 F8D1     	    bne 0b
 2455 01f2 0179     	    ldrb r1,[r0,#4]
 2456 01f4 1029     	    cmp r1,#DATA_IDX 
 2457 01f6 F5D1     	    bne 0b  
 2458 01f8 E060     	    str r0,[UPP,#DATAPTR]
 2459 01fa 8178     	    ldrb r1,[r0,#2]
 2460 01fc 6161     	    str r1,[UPP,#DATALEN]
 2461 01fe 4FF00501 	    mov r1,#5 // position of first data item  
 2462 0202 2161     	    str r1,[UPP,#DATA]
 2463 0204 7047     	    _RET 
 2464              	
 2465              	/*****************************
 2466              	  BASIC: READ 
 2467              	  read next data item 
 2468              	  the value can be assigned to
 2469              	  variable or used in expression
 2470              	*****************************/
 2471 0206 00BF     	    _FUNC read
 2472 0208 206C10F0 	    _RTO
 2472      010F03D1 
 2472      4FF00700 
 2472      FFF7FEBF 
 2473 0218 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2474 021a E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2475 021c 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2476 021e 8242     	    cmp r2,r0
 2477 0220 0ED0     	    beq seek_next
 2478 0222 885C     	1:  ldrb r0,[r1,r2]
 2479 0224 02F10102 	    add r2,#1
 2480 0228 0028     	    cmp r0,#TK_NONE
 2481 022a 09D0     	    beq seek_next
 2482 022c 0828     	    cmp r0,#TK_COMMA
 2483 022e F8D0     	    beq 1b  
 2484 0230 0E28     	    cmp r0,#TK_INTGR 
 2485 0232 7FF4FEAF 	    bne syntax_error  
 2486 0236 8958     	    ldr r1,[r1,r2]
 2487 0238 02F10402 	    add r2,#4
 2488 023c 2261     	    str r2,[UPP,#DATA]
 2489 023e 12E0     	    b 9f  
ARM GAS  tinyBasic.s 			page 70


 2490              	seek_next: // is next line data ?
 2491 0240 8878     	    ldrb r0,[R1,#2]
 2492 0242 0144     	    add r1,r0 
 2493 0244 C878     	    ldrb r0,[R1,#3]
 2494 0246 0A28     	    cmp r0,#TK_CMD
 2495 0248 09D1     	    bne 2f 
 2496 024a 0879     	    ldrb r0,[r1,#4]
 2497 024c 1028     	    cmp r0,#DATA_IDX 
 2498 024e 06D1     	    bne 2f 
 2499 0250 E160     	    str r1,[UPP,#DATAPTR]
 2500 0252 8878     	    ldrb r0,[r1,#2]
 2501 0254 6061     	    str  r0,[UPP,#DATALEN]
 2502 0256 4FF00502 	    mov r2,#5 
 2503 025a 2261     	    str r2,[UPP,#DATA]
 2504 025c E1E7     	    b 1b 
 2505 025e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2506 0262 FFF7FEBF 	    b tb_error 
 2507 0266 7047     	9:  _RET 
 2508              	
 2509              	/********************************
 2510              	  BASIC: RESTORE 
 2511              	  seek first data line 
 2512              	********************************/
 2513              	    _FUNC restore
 2514 0268 206C10F0 	    _RTO 
 2514      010F03D1 
 2514      4FF00700 
 2514      FFF7FEBF 
 2515 0278 216B     	    ldr r1,[UPP,#TXTBGN]
 2516 027a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2517 027c 0FD0     	    beq no_data_line 
 2518 027e 0879     	    ldrb r0,[r1,#4]
 2519 0280 1028     	    cmp r0,#DATA_IDX
 2520 0282 09D1     	    bne try_next_line
 2521 0284 C878     	    ldrb r0,[r1,#3]
 2522 0286 0A28     	    cmp r0,#TK_CMD
 2523 0288 06D1     	    bne try_next_line
 2524              	// this a the first data line 
 2525 028a E160     	    str r1,[UPP,#DATAPTR]
 2526 028c 8878     	    ldrb r0,[r1,#2]
 2527 028e 6061     	    str r0,[UPP,#DATALEN]
 2528 0290 4FF00500 	    mov r0,#5 
 2529 0294 2061     	    str r0,[UPP,#DATA]
 2530 0296 07E0     	    b 9f
 2531              	try_next_line:
 2532 0298 8878     	    ldrb r0,[r1,#2]
 2533 029a 0144     	    add r1,r0 
 2534 029c EDE7     	    b 1b 
 2535              	no_data_line:
 2536 029e 80EA0000 	    eor r0,r0 
 2537 02a2 E060     	    str r0,[UPP,#DATAPTR]
 2538 02a4 2061     	    str r0,[UPP,#DATA]
 2539 02a6 6061     	    str r0,[UPP,#DATALEN]
 2540 02a8 7047     	9:  _RET 
 2541              	
 2542 02aa 00BF     	    _FUNC const_ddr
 2543 02ac 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 71


 2544              	
 2545              	/***********************************
 2546              	  BASIC: DEC 
 2547              	  switch base to decimal 
 2548              	***********************************/
 2549 02ae 00BF     	    _FUNC dec_base
 2550 02b0 4FF00A00 	    mov r0,#10
 2551 02b4 A061     	    str r0,[UPP,#BASE]
 2552 02b6 7047     	    _RET 
 2553              	
 2554              	    _FUNC directory
 2555 02b8 7047     	    _RET 
 2556              	
 2557              	/***************************************
 2558              	  BASIC: DO 
 2559              	  initialize a DO..UNTIL loop 
 2560              	***************************************/
 2561 02ba 00BF     	    _FUNC do_loop
 2562 02bc 6068     	    ldr r0,[UPP,#COUNT]
 2563 02be 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 2564 02c2 7047     	    _RET 
 2565              	
 2566              	    _FUNC digital_read
 2567 02c4 7047     	    _RET 
 2568              	
 2569 02c6 00BF     	    _FUNC digital_write
 2570 02c8 7047     	    _RET  
 2571              	
 2572              	
 2573              	/****************************************
 2574              	  BASIC: DUMP adr, count 
 2575              	    command line only  
 2576              	    print memory content in hexadecimal 
 2577              	    16 bytes per row 
 2578              	    ouput:
 2579              	      none 
 2580              	    use:
 2581              	      r2   byte counter  
 2582              	****************************************/
 2583 02ca 00BF     	    _FUNC dump 
 2584 02cc 04B4     	    push {r2}
 2585 02ce 226C     	    ldr r2,[UPP,#FLAGS]
 2586 02d0 12F0010F 	    tst r2,#FRUN 
 2587 02d4 03D0     	    beq 0f
 2588 02d6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2589 02da FFF7FEBF 	    b tb_error  
 2590 02de 00B5FFF7 	0:  _CALL arg_list 
 2590      FEFF5DF8 
 2590      04EB
 2591 02e8 0228     	    cmp r0,#2
 2592 02ea 7FF4FEAF 	    bne syntax_error 
 2593 02ee 5CF8042B 	    _POP r2   // count 
 2594 02f2 5CF8040B 	    _POP  r0  // adr 
 2595 02f6 4FF01001 	1:  mov r1,#16
 2596 02fa 00B5FFF7 	    _CALL prt_row 
 2596      FEFF5DF8 
 2596      04EB
ARM GAS  tinyBasic.s 			page 72


 2597 0304 103A     	    subs r2,#16 
 2598 0306 F6D5     	    bpl 1b 
 2599 0308 04BC     	2:  pop {r2}
 2600 030a 7047     	    _RET 
 2601              	
 2602              	
 2603              	/*******************************
 2604              	  BASIC: END 
 2605              	  exit program 
 2606              	******************************/ 
 2607              	    _FUNC cmd_end
 2608 030c FFF7FEBF 	    b warm_start 
 2609 0310 7047     	    _RET 
 2610              	
 2611 0312 00BF     	    _FUNC const_eeprom_base
 2612 0314 7047     	    _RET 
 2613              	
 2614 0316 00BF     	    _FUNC fcpu
 2615 0318 7047     	    _RET 
 2616              	
 2617 031a 00BF     	    _FUNC forget
 2618 031c 7047     	    _RET 
 2619              	
 2620              	/**************************************************
 2621              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2622              	  introdure FOR...NEXT loop 
 2623              	**************************************************/
 2624 031e 00BF     	    _FUNC for
 2625 0320 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2626 0324 4FF00107 	    mov INCR,#1
 2627 0328 00B5FFF7 	    _CALL next_token
 2627      FEFF5DF8 
 2627      04EB
 2628 0332 0428     	    cmp r0,#TK_VAR
 2629 0334 7FF4FEAF 	    bne syntax_error
 2630 0338 02B4     	    push {r1} 
 2631 033a 00B500F0 	    _CALL let_var 
 2631      ADF85DF8 
 2631      04EB
 2632 0344 20BC     	    pop {VADR}
 2633 0346 4FEA8505 	    lsl VADR,#2
 2634 034a 2544     	    add VADR,UPP 
 2635 034c 05F16005 	    add VADR,#VARS 
 2636 0350 7047     	    _RET 
 2637              	
 2638              	/***************************************
 2639              	  BASIC: TO expr 
 2640              	  set limit of FOR...NEXT loop 
 2641              	**************************************/
 2642 0352 00BF     	    _FUNC to
 2643 0354 00B5FFF7 	    _CALL expression 
 2643      FEFF5DF8 
 2643      04EB
 2644 035e 0E28     	    cmp r0,#TK_INTGR
 2645 0360 7FF4FEAF 	    bne syntax_error 
 2646 0364 0E46     	    mov LIMIT,r1
 2647              	    // save loop back parameters 
ARM GAS  tinyBasic.s 			page 73


 2648 0366 6068     	    ldr r0,[UPP,#COUNT]
 2649 0368 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2650 036c 7047     	    _RET 
 2651              	
 2652              	/********************************************
 2653              	  BASIC: STEP expr 
 2654              	  set increment for FOR...NEXT loop 
 2655              	********************************************/
 2656 036e 00BF     	    _FUNC step
 2657 0370 00B5FFF7 	    _CALL expression 
 2657      FEFF5DF8 
 2657      04EB
 2658 037a 0E28     	    cmp r0,#TK_INTGR
 2659 037c 7FF4FEAF 	    bne syntax_error 
 2660 0380 0F46     	    mov INCR,r1
 2661              	    // replace parameters left by TO
 2662 0382 6068     	    ldr r0,[UPP,#COUNT]
 2663 0384 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2664 0388 7047     	    _RET 
 2665              	
 2666              	/********************************************
 2667              	  BASIC: NEXT var 
 2668              	  incrment FOR...NEXT loop variable
 2669              	  exit if variable cross LIMIT 
 2670              	********************************************/
 2671 038a 00BF     	    _FUNC next
 2672 038c 00B5FFF7 	    _CALL next_token 
 2672      FEFF5DF8 
 2672      04EB
 2673 0396 0428     	    cmp r0,#TK_VAR 
 2674 0398 7FF4FEAF 	    bne syntax_error 
 2675 039c 4FEA8101 	    lsl r1,#2 
 2676 03a0 2144     	    add r1,UPP 
 2677 03a2 01F16001 	    add r1,#VARS 
 2678 03a6 A942     	    cmp r1,VADR
 2679 03a8 7FF4FEAF 	    bne syntax_error 
 2680 03ac 2868     	    ldr r0,[VADR]
 2681 03ae 3844     	    add r0,INCR 
 2682 03b0 2860     	    str r0,[VADR]
 2683 03b2 002F     	    cmp INCR,#0
 2684 03b4 02D4     	    bmi 2f
 2685 03b6 B042     	    cmp r0,LIMIT 
 2686 03b8 02DC     	    bgt 8f  
 2687 03ba 07E0     	    b 9f  
 2688 03bc B042     	2:  cmp r0,LIMIT 
 2689 03be 05DA     	    bge 9f  
 2690              	8: // exit for...next
 2691              	  //  drop branch parameters
 2692 03c0 4FF00C00 	    _DROP 3
 2692      8444
 2693              	  // restore outer loop parameters
 2694 03c6 BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2695 03ca 7047     	    _RET 
 2696 03cc 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2697 03d0 6060     	    str r0,[UPP,#COUNT]
 2698 03d2 7047     	    _RET 
 2699              	
ARM GAS  tinyBasic.s 			page 74


 2700              	/*********************************
 2701              	  BASIC: GOSUB expr 
 2702              	  call a subroutine at line# 
 2703              	*********************************/
 2704              	    _FUNC gosub
 2705 03d4 00B5FFF7 	    _CALL expression
 2705      FEFF5DF8 
 2705      04EB
 2706 03de 0E28     	    cmp r0,#TK_INTGR 
 2707 03e0 7FF4FEAF 	    bne syntax_error 
 2708 03e4 0846     	    mov r0,r1 
 2709 03e6 00B5FFF7 	    _CALL search_lineno  
 2709      FEFF5DF8 
 2709      04EB
 2710 03f0 19B1     	    cbz r1,1f 
 2711 03f2 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2712 03f6 FFF7FEBF 	    b tb_error 
 2713 03fa 6168     	1:  ldr r1,[UPP,#COUNT]
 2714 03fc 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2715 0400 8346     	    mov BPTR,r0 
 2716 0402 4FF0030A 	    mov IN,#3 
 2717 0406 9BF80200 	    ldrb r0,[BPTR,#2]
 2718 040a 6060     	    str r0,[UPP,#COUNT]
 2719 040c 7047     	    _RET 
 2720              	
 2721              	/**********************************
 2722              	  BASIC: RETURN 
 2723              	  leave a subroutine 
 2724              	*********************************/
 2725 040e 00BF     	    _FUNC return 
 2726 0410 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2727 0414 6060     	    str r0,[UPP,#COUNT]
 2728 0416 7047     	    _RET 
 2729              	
 2730              	/**********************************
 2731              	  BASIC: GOTO expr 
 2732              	  go to line # 
 2733              	  use:
 2734              	
 2735              	**********************************/
 2736              	    _FUNC goto
 2737 0418 00B5FFF7 	    _CALL expression 
 2737      FEFF5DF8 
 2737      04EB
 2738 0422 0E28     	    cmp r0,#TK_INTGR 
 2739 0424 7FF4FEAF 	    bne syntax_error 
 2740 0428 59B1     	    cbz r1,9f 
 2741 042a 0846     	1:  mov r0,r1 
 2742 042c 00B5FFF7 	    _CALL search_lineno 
 2742      FEFF5DF8 
 2742      04EB
 2743 0436 19B1     	    cbz r1,2f 
 2744 0438 4FF00500 	    mov r0,#ERR_NO_LINE 
 2745 043c FFF7FEBF 	    b tb_error 
 2746 0440 8346     	2:  mov BPTR,r0 
 2747 0442 4FF0030A 	9:  mov IN,#3 
 2748 0446 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 75


 2749              	
 2750              	    _FUNC gpio
 2751 0448 7047     	    _RET  
 2752              	
 2753              	/***************************************
 2754              	  BASIC: HEX 
 2755              	  set numeric base to hexadecimal 
 2756              	***************************************/
 2757 044a 00BF     	    _FUNC hex_base
 2758 044c 4FF01000 	    mov r0,#16 
 2759 0450 A061     	    str r0,[UPP,#BASE]
 2760 0452 7047     	    _RET 
 2761              	
 2762              	    _FUNC const_idr
 2763 0454 7047     	    _RET 
 2764              	
 2765              	/**********************************************
 2766              	  BASIC: IF relation THEN statement
 2767              	  execute statement only if relation is true
 2768              	*********************************************/
 2769 0456 00BF     	    _FUNC if
 2770 0458 00B5FFF7 	    _CALL relation 
 2770      FEFF5DF8 
 2770      04EB
 2771 0462 09B9     	    cbnz r1,9f 
 2772 0464 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2773 0468 7047     	9:  _RET 
 2774              	
 2775              	/*******************************************************
 2776              	  BASIC: THEN statement
 2777              	  following statement are executed if relation is !=0
 2778              	  optional, retained for compatibility.
 2779              	******************************************************/
 2780 046a 00BF     	    _FUNC then 
 2781              	// do nothing 
 2782 046c 7047     	    _RET
 2783              	
 2784 046e 00BF     	    _FUNC input_var
 2785 0470 7047     	    _RET 
 2786              	
 2787 0472 00BF     	    _FUNC invert
 2788 0474 7047     	    _RET 
 2789              	
 2790 0476 00BF     	    _FUNC enable_iwdg
 2791 0478 7047     	    _RET 
 2792              	
 2793 047a 00BF     	    _FUNC refresh_iwdg
 2794 047c 7047     	    _RET 
 2795              	
 2796 047e 00BF     	    _FUNC key
 2797 0480 7047     	    _RET  
 2798              	
 2799              	/******************************
 2800              	  BASIC: [let] var=expr 
 2801              	         [let] @(expr)=expr
 2802              	  input:
 2803              	    none 
ARM GAS  tinyBasic.s 			page 76


 2804              	  output:
 2805              	    none 
 2806              	  use:
 2807              	
 2808              	****************************/         
 2809 0482 00BF     	    _FUNC let
 2810 0484 00B5FFF7 	    _CALL next_token 
 2810      FEFF5DF8 
 2810      04EB
 2811 048e 0428     	    cmp r0,#TK_VAR
 2812 0490 03D0     	    beq let_var 
 2813 0492 0528     	    cmp r0,#TK_ARRAY 
 2814 0494 07D0     	    beq let_array 
 2815 0496 FFF7FEBF 	    b syntax_error 
 2816              	let_var:
 2817 049a 4FEA8101 	    lsl r1,#2
 2818 049e 04F16000 	    add r0,UPP,#VARS
 2819 04a2 0844     	    add r0,r1
 2820 04a4 1FE0     	    b 1f 
 2821              	let_array: 
 2822 04a6 4FF00600 	    mov r0,#TK_LPAREN
 2823 04aa 00B5FFF7 	    _CALL expect 
 2823      FEFF5DF8 
 2823      04EB
 2824 04b4 00B5FFF7 	    _CALL expression
 2824      FEFF5DF8 
 2824      04EB
 2825 04be 0E28     	    cmp r0,#TK_INTGR 
 2826 04c0 7FF4FEAF 	    bne syntax_error
 2827 04c4 4CF8041D 	    _PUSH r1 
 2828 04c8 4FF00700 	    mov r0,#TK_RPAREN
 2829 04cc 00B5FFF7 	    _CALL expect 
 2829      FEFF5DF8 
 2829      04EB
 2830 04d6 5CF8041B 	    _POP r1 
 2831 04da D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2832 04de 4FEA8101 	    lsl r1,#2 
 2833 04e2 A0EB0100 	    sub r0,r1 
 2834 04e6 4CF8040D 	1:  _PUSH r0 
 2835 04ea 4FF03200 	    mov r0,#TK_EQUAL 
 2836 04ee 00B5FFF7 	    _CALL expect 
 2836      FEFF5DF8 
 2836      04EB
 2837 04f8 00B5FFF7 	    _CALL expression   
 2837      FEFF5DF8 
 2837      04EB
 2838 0502 0E28     	    cmp r0,#TK_INTGR
 2839 0504 7FF4FEAF 	    bne syntax_error   
 2840 0508 5CF8040B 	2:  _POP r0 
 2841 050c 0160     	    str r1,[r0]
 2842 050e 7047     	    _RET  
 2843              	
 2844              	/***************************************
 2845              	  BASIC: LIST [[first]-last]
 2846              	  use:
 2847              	    r2   first line# 
 2848              	    r3   last line#
ARM GAS  tinyBasic.s 			page 77


 2849              	    T1   *line 
 2850              	    T2   TXTEND 
 2851              	**************************************/  
 2852              	    _FUNC list
 2853 0510 206C10F0 	    _CLO
 2853      010F03D0 
 2853      4FF00700 
 2853      FFF7FEBF 
 2854 0520 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 2855 0524 D4F83490 	    ldr T2,[UPP,#TXTEND]
 2856 0528 B8F80020 	    ldrh r2,[T1]
 2857 052c 4FF40043 	    mov r3,#32768
 2858 0530 00B5FFF7 	    _CALL next_token 
 2858      FEFF5DF8 
 2858      04EB
 2859 053a E8B1     	    cbz r0,6f 
 2860 053c 0E28     	    cmp r0,#TK_INTGR
 2861 053e 06D1     	    bne 1f 
 2862 0540 0A46     	    mov r2,r1 // first line
 2863 0542 00B5FFF7 	    _CALL next_token
 2863      FEFF5DF8 
 2863      04EB
 2864 054c 60B1     	    cbz r0,4f
 2865 054e 1128     	1:  cmp r0,#TK_MINUS 
 2866 0550 7FF4FEAF 	    bne syntax_error 
 2867 0554 00B5FFF7 	    _CALL next_token 
 2867      FEFF5DF8 
 2867      04EB
 2868 055e 18B1     	    cbz r0,4f 
 2869 0560 0E28     	    cmp r0,#TK_INTGR
 2870 0562 7FF4FEAF 	    bne syntax_error  
 2871 0566 0B46     	    mov r3,r1 
 2872              	4:  // skip lines below r2 
 2873 0568 B8F80000 	    ldrh r0,[T1]
 2874 056c 9042     	    cmp r0,r2 
 2875 056e 03D5     	    bpl 6f 
 2876 0570 98F80200 	    ldrb r0,[T1,#2]
 2877 0574 8044     	    add T1,r0
 2878 0576 F7E7     	    b 4b 
 2879 0578 C845     	6:  cmp T1,T2  
 2880 057a 1AD5     	    bpl 9f
 2881 057c 4046     	    mov r0,T1   
 2882 057e DFF83610 	    ldr r1,out_buff 
 2883 0582 00B5FFF7 	    _CALL decompile_line 
 2883      FEFF5DF8 
 2883      04EB
 2884 058c 00B5FFF7 	    _CALL uart_puts 
 2884      FEFF5DF8 
 2884      04EB
 2885 0596 4FF00D00 	    mov r0,#CR 
 2886 059a 00B5FFF7 	    _CALL uart_putc 
 2886      FEFF5DF8 
 2886      04EB
 2887 05a4 98F80200 	    ldrb r0,[T1,#2]
 2888 05a8 8044     	    add T1,r0
 2889 05aa 98F80000 	    ldrb r0,[T1]
 2890 05ae 9842     	    cmp r0,r3 
ARM GAS  tinyBasic.s 			page 78


 2891 05b0 E2DD     	    ble 6b 
 2892 05b2 FFF7FEBF 	9:  b warm_start 
 2893 05b6 00000000 	out_buff: .word _tib 
 2894              	
 2895 05ba 00BF     	    _FUNC load
 2896 05bc 7047     	    _RET 
 2897              	
 2898 05be 00BF     	    _FUNC log2
 2899 05c0 7047     	    _RET 
 2900              	
 2901 05c2 00BF     	    _FUNC lshift
 2902 05c4 7047     	    _RET 
 2903              	
 2904 05c6 00BF     	    _FUNC muldiv
 2905 05c8 7047     	    _RET 
 2906              	
 2907              	/***********************************
 2908              	  BASIC: NEW 
 2909              	  delete existing program in memory
 2910              	  and clear variables and RAM 
 2911              	***********************************/
 2912 05ca 00BF     	    _FUNC new
 2913 05cc 206C10F0 	    _CLO 
 2913      010F03D0 
 2913      4FF00700 
 2913      FFF7FEBF 
 2914 05dc 00B5FFF7 	    _CALL clear_basic 
 2914      FEFF5DF8 
 2914      04EB
 2915 05e6 FFF7FEBF 	    b warm_start   
 2916              	
 2917              	/************************************
 2918              	  BASIC: NOT relation  
 2919              	  invert logical value or relation
 2920              	************************************/
 2921 05ea 00BF     	      _FUNC func_not
 2922 05ec 00B5FFF7 	      _CALL relation 
 2922      FEFF5DF8 
 2922      04EB
 2923 05f6 11B1     	      cbz r1,8f 
 2924 05f8 81EA0101 	      eor r1,r1
 2925 05fc 01E0     	      b 9f 
 2926 05fe 4FF0FF31 	  8:  mov r1,#-1
 2927 0602 7047     	  9:  _RET 
 2928              	
 2929              	    _FUNC const_odr
 2930 0604 7047     	    _RET 
 2931              	
 2932              	/******************************************
 2933              	  BASIC: OR(expr1,expr2)
 2934              	  binary OR between 2 expressions
 2935              	******************************************/
 2936 0606 00BF     	    _FUNC bit_or
 2937 0608 00B5FFF7 	    _CALL func_args
 2937      FEFF5DF8 
 2937      04EB
 2938 0612 0228     	    cmp r0,#2
ARM GAS  tinyBasic.s 			page 79


 2939 0614 7FF4FEAF 	    bne syntax_error
 2940 0618 5CF8040B 	    _POP r0 
 2941 061c 5CF8041B 	    _POP r1
 2942 0620 41EA0001 	    orr r1,r0 
 2943 0624 4FF00E00 	    mov r0,#TK_INTGR
 2944 0628 7047     	    _RET 
 2945              	
 2946 062a 00BF     	    _FUNC pad_ref
 2947 062c 7047     	    _RET 
 2948              	
 2949              	/***********************
 2950              	  BASIC: PAUSE expr 
 2951              	  suspend execution for 
 2952              	  expr milliseconds 
 2953              	************************/
 2954 062e 00BF     	    _FUNC pause
 2955 0630 00B5FFF7 	    _CALL expression 
 2955      FEFF5DF8 
 2955      04EB
 2956 063a 0E28     	    cmp r0,#TK_INTGR 
 2957 063c 7FF4FEAF 	    bne syntax_error 
 2958 0640 E069     	    ldr r0,[UPP,#TICKS]
 2959 0642 0844     	    add r0,r1 
 2960 0644 E169     	1:  ldr r1,[UPP,#TICKS]
 2961 0646 8842     	    cmp r0,r1 
 2962 0648 FCD1     	    bne 1b     
 2963 064a 7047     	    _RET 
 2964              	
 2965              	    _FUNC pin_mode
 2966 064c 7047     	    _RET 
 2967              	
 2968 064e 00BF     	    _FUNC peek
 2969 0650 7047     	    _RET 
 2970              	
 2971 0652 00BF     	    _FUNC const_input
 2972 0654 7047     	    _RET  
 2973              	
 2974 0656 00BF     	    _FUNC poke
 2975 0658 7047     	    _RET 
 2976              	
 2977 065a 00BF     	    _FUNC const_output
 2978 065c 7047     	    _RET 
 2979              	
 2980              	/****************************
 2981              	  BASIC: PRINT|? arg_list 
 2982              	  print list of arguments 
 2983              	****************************/
 2984 065e 00BF     	    _FUNC print
 2985 0660 4FF0FF38 	0:  mov T1,#-1
 2986 0664 00B5FFF7 	    _CALL expression
 2986      FEFF5DF8 
 2986      04EB
 2987 066e 0E28     	    cmp r0,#TK_INTGR
 2988 0670 0CD1     	    bne 1f 
 2989 0672 0846     	    mov r0,r1
 2990 0674 A169     	    ldr r1,[UPP,#BASE]
 2991 0676 00B5FFF7 	    _CALL print_int
ARM GAS  tinyBasic.s 			page 80


 2991      FEFF5DF8 
 2991      04EB
 2992 0680 00B5FFF7 	    _CALL tabulation 
 2992      FEFF5DF8 
 2992      04EB
 2993 068a 36E0     	    b 7f 
 2994 068c 00B5FFF7 	1:  _CALL next_token
 2994      FEFF5DF8 
 2994      04EB
 2995 0696 0128     	    cmp r0,#TK_COLON 
 2996 0698 04DC     	    bgt 2f
 2997 069a D4F800A0 	    _UNGET_TOKEN 
 2997      D4F808B0 
 2998 06a2 37E0     	    b print_exit
 2999 06a4 0228     	2:  cmp r0,#TK_QSTR 
 3000 06a6 06D1     	    bne 4f
 3001 06a8 0846     	    mov r0,r1 
 3002 06aa 00B5FFF7 	    _CALL uart_puts  
 3002      FEFF5DF8 
 3002      04EB
 3003 06b4 21E0     	    b 7f 
 3004 06b6 0C28     	4:  cmp r0,#TK_CFUNC
 3005 06b8 05D1     	    bne 5f
 3006 06ba 0846     	    mov r0,r1
 3007 06bc 00B5FFF7 	    _CALL execute 
 3007      FEFF5DF8 
 3007      04EB
 3008 06c6 0328     	5:  cmp r0,#TK_CHAR 
 3009 06c8 06D1     	    bne 6f 
 3010 06ca 0846     	    mov r0,r1 
 3011 06cc 00B5FFF7 	    _CALL uart_putc 
 3011      FEFF5DF8 
 3011      04EB
 3012 06d6 10E0     	    b 7f 
 3013 06d8 0928     	6:  cmp r0,#TK_SHARP
 3014 06da 04D0     	    beq 6f 
 3015 06dc D4F800A0 	    _UNGET_TOKEN
 3015      D4F808B0 
 3016 06e4 16E0     	    b print_exit  
 3017 06e6 00B5FFF7 	6:  _CALL next_token 
 3017      FEFF5DF8 
 3017      04EB
 3018 06f0 0E28     	    cmp r0,#TK_INTGR 
 3019 06f2 7FF4FEAF 	    bne syntax_error 
 3020 06f6 6164     	    str r1,[UPP,#TAB_WIDTH]
 3021 06f8 FFE7     	    b 8f 
 3022              	7:  
 3023 06fa 88EA0808 	8:  eor T1,T1 
 3024 06fe 00B5FFF7 	    _CALL next_token 
 3024      FEFF5DF8 
 3024      04EB
 3025 0708 0828     	    cmp r0,#TK_COMMA 
 3026 070a A9D0     	    beq 0b
 3027 070c D4F800A0 	    _UNGET_TOKEN 
 3027      D4F808B0 
 3028              	print_exit:
 3029 0714 18EA0808 	    ands T1,T1 
ARM GAS  tinyBasic.s 			page 81


 3030 0718 06D1     	    bne 9f
 3031 071a 4FF00D00 	    mov r0,#CR 
 3032 071e 00B5FFF7 	    _CALL uart_putc 
 3032      FEFF5DF8 
 3032      04EB
 3033 0728 7047     	9:  _RET 
 3034              	
 3035 072a 00BF     	    _FUNC const_porta
 3036 072c 7047     	    _RET 
 3037              	
 3038 072e 00BF     	    _FUNC const_portb
 3039 0730 7047     	    _RET 
 3040              	
 3041 0732 00BF     	    _FUNC const_portc
 3042 0734 7047     	    _RET 
 3043              	
 3044 0736 00BF     	    _FUNC const_portd
 3045 0738 7047     	    _RET 
 3046              	
 3047 073a 00BF     	    _FUNC const_porte
 3048 073c 7047     	    _RET  
 3049              	
 3050 073e 00BF     	    _FUNC const_portf
 3051 0740 7047     	    _RET 
 3052              	
 3053 0742 00BF     	    _FUNC const_portg
 3054 0744 7047     	    _RET 
 3055              	
 3056 0746 00BF     	    _FUNC const_porth
 3057 0748 7047     	    _RET 
 3058              	
 3059 074a 00BF     	    _FUNC const_porti
 3060 074c 7047     	    _RET 
 3061              	
 3062              	/**************************************
 3063              	  BASIC: QKEY
 3064              	  check if key pressed 
 3065              	**************************************/ 
 3066 074e 00BF     	    _FUNC qkey
 3067 0750 4FF00001 	    mov r1,#0
 3068 0754 00B5FFF7 	    _CALL uart_qkey
 3068      FEFF5DF8 
 3068      04EB
 3069 075e 01D0     	    beq 9f 
 3070 0760 4FF0FF31 	    mov r1,#-1 
 3071 0764 4FF00E00 	9:  mov r0,#TK_INTGR
 3072 0768 7047     	    _RET 
 3073              	
 3074              	/******************************************
 3075              	  BASIC RANDOM(expr)
 3076              	  generate random number between 0..expr-1
 3077              	******************************************/
 3078 076a 00BF     	    _FUNC random
 3079 076c 00B5FFF7 	    _CALL func_args 
 3079      FEFF5DF8 
 3079      04EB
 3080 0776 0128     	    cmp r0,#1
ARM GAS  tinyBasic.s 			page 82


 3081 0778 7FF4FEAF 	    bne syntax_error 
 3082 077c 606A     	    ldr r0,[UPP,#SEED]
 3083 077e 4FEA4031 	    lsl r1,r0,#13
 3084 0782 81EA0001 	    eor r1,r0
 3085 0786 4FEA5140 	    lsr r0,r1,#17
 3086 078a 81EA0001 	    eor r1,r0
 3087 078e 4FEA4110 	    lsl r0,r1,#5
 3088 0792 81EA0001 	    eor r1,r0
 3089 0796 6162     	    str r1,[UPP,#SEED]
 3090 0798 5CF8040B 	    _POP r0 
 3091 079c B1FBF0F2 	    udiv r2,r1,r0  
 3092 07a0 00FB02F2 	    mul r2,r0 
 3093 07a4 A1EB0201 	    sub r1,r2 
 3094 07a8 4FF00E00 	    mov r0,#TK_INTGR
 3095 07ac 7047     	    _RET 
 3096              	
 3097 07ae 00BF     	    _FUNC rshift
 3098 07b0 7047     	    _RET 
 3099              	
 3100              	/****************************
 3101              	  BASIC: RUN 
 3102              	  execute program in memory
 3103              	****************************/
 3104 07b2 00BF     	    _FUNC run
 3105 07b4 206C10F0 	    _CLO 
 3105      010F03D0 
 3105      4FF00700 
 3105      FFF7FEBF 
 3106 07c4 206B     	    ldr r0,[UPP,#TXTBGN]
 3107 07c6 616B     	    ldr r1,[UPP,#TXTEND]
 3108 07c8 8842     	    cmp r0,r1
 3109 07ca 0DD0     	    beq 9f 
 3110 07cc 8178     	    ldrb r1,[r0,#2]
 3111 07ce 6160     	    str r1,[UPP,#COUNT]
 3112 07d0 8346     	    mov BPTR,r0 
 3113 07d2 4FF0030A 	    mov IN,#3
 3114              	    // reset dataline pointers 
 3115 07d6 80EA0000 	    eor r0,r0 
 3116 07da E060     	    str r0,[UPP,#DATAPTR]
 3117 07dc 2061     	    str r0,[UPP,#DATA]
 3118 07de 6061     	    str r0,[UPP,#DATALEN] 
 3119 07e0 206C     	    ldr r0,[UPP,#FLAGS]
 3120 07e2 40F00100 	    orr r0,#FRUN 
 3121 07e6 2064     	    str r0,[UPP,#FLAGS]
 3122 07e8 7047     	9:  _RET 
 3123              	
 3124 07ea 00BF     	    _FUNC save
 3125 07ec 7047     	    _RET 
 3126              	
 3127 07ee 00BF     	    _FUNC show
 3128 07f0 7047     	    _RET 
 3129              	
 3130 07f2 00BF     	    _FUNC size
 3131 07f4 7047     	    _RET  
 3132              	
 3133 07f6 00BF     	    _FUNC sleep
 3134 07f8 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 83


 3135              	
 3136 07fa 00BF     	    _FUNC spi_read
 3137 07fc 7047     	    _RET 
 3138              	
 3139 07fe 00BF     	    _FUNC spi_enable
 3140 0800 7047     	    _RET 
 3141              	
 3142 0802 00BF     	    _FUNC spi_select
 3143 0804 7047     	    _RET 
 3144              	
 3145 0806 00BF     	    _FUNC spi_write
 3146 0808 7047     	    _RET 
 3147              	
 3148 080a 00BF     	    _FUNC stop
 3149 080c 7047     	    _RET 
 3150              	
 3151              	/**************************
 3152              	  BASIC: TICKS 
 3153              	  return msec counter
 3154              	**************************/  
 3155 080e 00BF     	    _FUNC get_ticks
 3156 0810 E169     	    ldr r1,[UPP,#TICKS]
 3157 0812 4FF00E00 	    mov r0,#TK_INTGR
 3158 0816 7047     	    _RET  
 3159              	
 3160              	/*************************
 3161              	  BASIC: TIMER expr 
 3162              	  set countdown timer 
 3163              	************************/
 3164              	    _FUNC set_timer
 3165 0818 00B5FFF7 	    _CALL expression 
 3165      FEFF5DF8 
 3165      04EB
 3166 0822 0E28     	    cmp r0,#TK_INTGR
 3167 0824 7FF4FEAF 	    bne syntax_error 
 3168 0828 2162     	    str r1,[UPP,#TIMER]
 3169 082a 7047     	    _RET 
 3170              	
 3171              	/***************************
 3172              	  BASIC: TIMEOUT
 3173              	  check for timer expiration 
 3174              	  return -1 true || 0 false
 3175              	****************************/
 3176              	    _FUNC timeout
 3177 082c 81EA0101 	    eor r1,r1 
 3178 0830 206A     	    ldr r0,[UPP,#TIMER]
 3179 0832 08B9     	    cbnz r0,9f 
 3180 0834 6FEA0101 	    mvn r1,r1 
 3181 0838 4FF00E00 	9:  mov r0,#TK_INTGR    
 3182 083c 7047     	    _RET 
 3183              	
 3184 083e 00BF     	    _FUNC tone
 3185 0840 7047     	    _RET 
 3186              	
 3187              	/***************************
 3188              	  BASIC: UBOUND 
 3189              	  return last indice of @
ARM GAS  tinyBasic.s 			page 84


 3190              	  output:
 3191              	    r0  TK_INTGR 
 3192              	    r1  +int 
 3193              	**************************/
 3194 0842 00BF     	    _FUNC ubound
 3195 0844 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3196 0848 606B     	    ldr r0,[UPP,#TXTEND]
 3197 084a A1EB0001 	    sub r1,r0 
 3198 084e 4FEA9101 	    lsr r1,#2
 3199 0852 4FF00E00 	    mov r0,#TK_INTGR 
 3200 0856 7047     	    _RET 
 3201              	
 3202              	    _FUNC uflash
 3203 0858 7047     	    _RET 
 3204              	
 3205              	/************************************
 3206              	  BASIC: UNTIL relation 
 3207              	  close a DO..UNTIL loop 
 3208              	  loop until relation come true 
 3209              	************************************/
 3210 085a 00BF     	    _FUNC until
 3211 085c 00B5FFF7 	    _CALL relation 
 3211      FEFF5DF8 
 3211      04EB
 3212 0866 11B1     	    cbz r1,9f
 3213 0868 0CF10C0C 	    add DP,#12
 3214 086c 7047     	    _RET  
 3215 086e 9CE8010C 	9:  ldmia DP,{r0,IN,BPTR}
 3216 0872 6060     	    str r0,[UPP,#COUNT]
 3217 0874 7047     	    _RET 
 3218              	
 3219 0876 00BF     	    _FUNC usr
 3220 0878 7047     	    _RET  
 3221              	
 3222 087a 00BF     	    _FUNC wait
 3223 087c 7047     	    _RET 
 3224              	
 3225              	/*********************************************
 3226              	  BASIC: WORDS 
 3227              	  print list of BASIC WORDS in dictionary 
 3228              	  use:
 3229              	    r0,r1,T1,T2  
 3230              	********************************************/
 3231 087e 00BF     	    _FUNC words
 3232 0880 206C10F0 	    _CLO 
 3232      010F03D0 
 3232      4FF00700 
 3232      FFF7FEBF 
 3233 0890 DFF86C83 	    ldr T1,=kword_dict
 3234 0894 89EA0909 	    eor T2,T2 
 3235              	1:  
 3236 0898 4046     	    mov r0,T1
 3237 089a 00B5FFF7 	    _CALL strlen
 3237      FEFF5DF8 
 3237      04EB
 3238 08a4 F0B1     	    cbz r0,9f 
 3239 08a6 8144     	    add T2,r0 
ARM GAS  tinyBasic.s 			page 85


 3240 08a8 B9F1500F 	    cmp T2,#80 
 3241 08ac 08D4     	    bmi 2f
 3242 08ae 89EA0909 	    eor T2,T2  
 3243 08b2 4FF00D00 	    mov r0,#CR 
 3244 08b6 00B5FFF7 	    _CALL uart_putc 
 3244      FEFF5DF8 
 3244      04EB
 3245 08c0 4046     	2:  mov r0,T1 
 3246 08c2 00B5FFF7 	    _CALL uart_puts 
 3246      FEFF5DF8 
 3246      04EB
 3247 08cc 4FF02000 	    mov r0,#SPACE
 3248 08d0 09F10109 	    add T2,#1  
 3249 08d4 00B5FFF7 	    _CALL uart_putc 
 3249      FEFF5DF8 
 3249      04EB
 3250 08de 58F80C8C 	    ldr T1,[T1,#-12]
 3251 08e2 D9E7     	    b 1b 
 3252 08e4 7047     	9:  _RET 
 3253              	
 3254 08e6 00BF     	    _FUNC write
 3255 08e8 7047     	    _RET 
 3256              	
 3257              	/**************************************
 3258              	  BASIC: XOR(expr1,expr2)
 3259              	  binary exclusive or between 2 expressions
 3260              	**************************************/
 3261 08ea 00BF     	    _FUNC bit_xor
 3262 08ec 00B5FFF7 	    _CALL func_args
 3262      FEFF5DF8 
 3262      04EB
 3263 08f6 0228     	    cmp r0,#2
 3264 08f8 7FF4FEAF 	    bne syntax_error
 3265 08fc 5CF8040B 	    _POP r0
 3266 0900 5CF8041B 	    _POP r1 
 3267 0904 81EA0001 	    eor r1,r0 
 3268 0908 4FF00E00 	    mov r0,#TK_INTGR
 3269 090c 7047     	    _RET 
 3270              	
 3271 090e 00BF     	    _FUNC transmit
 3272 0910 7047     	    _RET 
 3273              	
 3274 0912 00BF     	    _FUNC receive
 3275 0914 7047     	    _RET  
 3276              	
 3277              	
 3278              	/*************************************************
 3279              	   extra FLASH memory not used by Tiny BASIC
 3280              	   is used to save BASIC programs.
 3281              	************************************************/
 3282 0916 00BFAFF3 	  .p2align 10  // align to 1KB, smallest erasable segment 
 3282      0080AFF3 
 3282      0080AFF3 
 3282      0080AFF3 
 3282      0080AFF3 
 3283              	  .section .fs
 3284              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 86


ARM GAS  tinyBasic.s 			page 87


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 88


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 89


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 90


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 91


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 92


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 93


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
       cmd_index.inc:128    *ABS*:0000000000000067 THEN_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:188    .text:00000000000000c8 prt_row
         tinyBasic.s:228    .text:000000000000013c prt_chars
         tinyBasic.s:256    .text:0000000000000160 search_lineno
         tinyBasic.s:287    .text:0000000000000180 delete_line
         tinyBasic.s:312    .text:00000000000001ac create_gap
         tinyBasic.s:337    .text:00000000000001d4 insert_line
         tinyBasic.s:376    .text:0000000000000224 compile
         tinyBasic.s:1496   .text:0000000000000bc0 pad
         tinyBasic.s:610    .text:0000000000000450 parse_int
         tinyBasic.s:1165   .text:00000000000008a0 tb_error
         tinyBasic.s:447    .text:00000000000002b8 comp_token
         tinyBasic.s:521    .text:00000000000003a4 store_r0
         tinyBasic.s:704    .text:00000000000004f0 skip
         tinyBasic.s:723    .text:0000000000000508 upper
         tinyBasic.s:555    .text:00000000000003e4 is_special
         tinyBasic.s:577    .text:0000000000000428 token_ofs
         tinyBasic.s:462    .text:00000000000002f8 tok_idx0
         tinyBasic.s:524    .text:00000000000003aa try_number
         tinyBasic.s:466    .text:00000000000002fa single
         tinyBasic.s:572    .text:0000000000000418 tok_single
         tinyBasic.s:470    .text:0000000000000302 lt
         tinyBasic.s:476    .text:0000000000000310 gt
         tinyBasic.s:489    .text:0000000000000334 bkslash
ARM GAS  tinyBasic.s 			page 94


         tinyBasic.s:538    .text:00000000000003de token_exit
         tinyBasic.s:496    .text:000000000000034a prt_cmd
         tinyBasic.s:502    .text:000000000000035c quote
         tinyBasic.s:643    .text:0000000000000488 parse_quote
         tinyBasic.s:507    .text:0000000000000370 tick
         tinyBasic.s:914    .text:0000000000000608 parse_keyword
         tinyBasic.s:569    .text:0000000000000404 char_list
         tinyBasic.s:570    .text:0000000000000404 $d
         tinyBasic.s:578    .text:0000000000000428 $d
         tinyBasic.s:594    .text:000000000000044e $t
         tinyBasic.s:873    .text:00000000000005bc atoi
         tinyBasic.s:674    .text:00000000000004bc get_escaped_char
         tinyBasic.s:691    .text:00000000000004e6 escaped
         tinyBasic.s:691    .text:00000000000004e6 $d
         tinyBasic.s:704    .text:00000000000004ee $t
         tinyBasic.s:741    .text:0000000000000518 is_digit
         tinyBasic.s:765    .text:0000000000000534 is_hex
         tinyBasic.s:790    .text:0000000000000558 is_bit
         tinyBasic.s:811    .text:0000000000000574 is_alpha
         tinyBasic.s:832    .text:000000000000058c is_num
         tinyBasic.s:853    .text:00000000000005a4 is_alnum
         tinyBasic.s:1150   .text:0000000000000898 syntax_error
         tinyBasic.s:2193   .rodata.dictionary:00000000000007b4 kword_dict
         tinyBasic.s:1313   .text:0000000000000a0c search_dict
         tinyBasic.s:965    .text:0000000000000690 cmd_name
         tinyBasic.s:991    .text:00000000000006b4 decompile_line
         tinyBasic.s:1008   .text:00000000000006fa decomp_loop
         tinyBasic.s:1589   .text:0000000000000c64 next_token
         tinyBasic.s:1107   .text:0000000000000849 single_char
         tinyBasic.s:1103   .text:0000000000000840 ge_str
         tinyBasic.s:1104   .text:0000000000000843 le_str
         tinyBasic.s:1105   .text:0000000000000846 ne_str
         tinyBasic.s:1103   .text:0000000000000840 $d
         tinyBasic.s:1127   .text:0000000000000880 modulo
         tinyBasic.s:1127   .text:0000000000000880 $t
         tinyBasic.s:1195   .text:0000000000000930 compile_error
         tinyBasic.s:1169   .text:00000000000008a8 rt_error
         tinyBasic.s:1212   .text:0000000000000988 rt_error_msg
         tinyBasic.s:1215   .text:0000000000000998 err_msg
         tinyBasic.s:1509   .text:0000000000000bd0 warm_start
         tinyBasic.s:1213   .text:0000000000000988 $d
         tinyBasic.s:1222   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1223   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1224   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1225   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1226   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1227   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1228   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1229   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1230   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1231   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1232   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1233   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1234   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1235   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1236   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1238   .rodata.tb_error:000000000000012e rt_msg
ARM GAS  tinyBasic.s 			page 95


         tinyBasic.s:1239   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1240   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1250   .text:00000000000009d8 $t
         tinyBasic.s:1250   .text:00000000000009d8 skip_line
         tinyBasic.s:1267   .text:00000000000009e0 BTGL
         tinyBasic.s:1285   .text:00000000000009e4 kword_cmp
         tinyBasic.s:1351   .text:0000000000000a4a cold_start
         tinyBasic.s:1372   .text:0000000000000a98 src_addr
         tinyBasic.s:1374   .text:0000000000000a9c dest_addr
         tinyBasic.s:1495   .text:0000000000000bbc tib
         tinyBasic.s:1376   .text:0000000000000aa0 sysvar_size
         tinyBasic.s:1387   .text:0000000000000aa4 prt_version
         tinyBasic.s:1444   .text:0000000000000b4c clear_basic
         tinyBasic.s:1373   .text:0000000000000a98 $d
         tinyBasic.s:2052   .rodata:0000000000000000 uzero
         tinyBasic.s:2076   .rodata:00000000000000cc ulast
         tinyBasic.s:1387   .text:0000000000000aa4 $t
         tinyBasic.s:1411   .text:0000000000000b0c version_msg
         tinyBasic.s:1413   .text:0000000000000b2c version
         tinyBasic.s:1412   .text:0000000000000b0c $d
         tinyBasic.s:1428   .text:0000000000000b30 clear_vars
         tinyBasic.s:1478   .text:0000000000000b90 warm_init
         tinyBasic.s:1494   .text:0000000000000bb8 dstack
         tinyBasic.s:1493   .text:0000000000000bb4 mstack
         tinyBasic.s:1493   .text:0000000000000bb4 $d
         tinyBasic.s:1497   .text:0000000000000bc4 array
         tinyBasic.s:1498   .text:0000000000000bc8 ready
         tinyBasic.s:1529   .text:0000000000000be8 cmd_line
         tinyBasic.s:1540   .text:0000000000000c18 interpreter
         tinyBasic.s:1573   .text:0000000000000c58 execute
         tinyBasic.s:2816   .text.basic:000000000000049a let_var
         tinyBasic.s:2821   .text.basic:00000000000004a6 let_array
         tinyBasic.s:2201   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1595   .text:0000000000000c72 new_line
         tinyBasic.s:1599   .text:0000000000000c7a end_of_line
         tinyBasic.s:1646   .text:0000000000000cf0 tok_jmp
         tinyBasic.s:1647   .text:0000000000000cf0 $d
         tinyBasic.s:1661   .text:0000000000000d30 $t
         tinyBasic.s:1676   .text:0000000000000d30 expect
         tinyBasic.s:1695   .text:0000000000000d4c func_args
         tinyBasic.s:1715   .text:0000000000000d78 arg_list
         tinyBasic.s:1873   .text:0000000000000f18 expression
         tinyBasic.s:1749   .text:0000000000000db8 factor
         tinyBasic.s:1981   .text:0000000000001004 get_array_element
         tinyBasic.s:2019   .text:000000000000102c get_var
         tinyBasic.s:1822   .text:0000000000000e9c term
         tinyBasic.s:1915   .text:0000000000000f80 relation
         tinyBasic.s:1962   .text:0000000000000ffa relop_jmp
         tinyBasic.s:1934   .text:0000000000000fca rel_idx0
         tinyBasic.s:1935   .text:0000000000000fca rel_eq
         tinyBasic.s:1952   .text:0000000000000fe0 rel_false
         tinyBasic.s:1938   .text:0000000000000fce rel_lt
         tinyBasic.s:1941   .text:0000000000000fd2 rel_le
         tinyBasic.s:1944   .text:0000000000000fd6 rel_gt
         tinyBasic.s:1947   .text:0000000000000fda rel_ge
         tinyBasic.s:1950   .text:0000000000000fde rel_diff
         tinyBasic.s:1963   .text:0000000000000ffa $d
ARM GAS  tinyBasic.s 			page 96


         tinyBasic.s:2001   .text:0000000000001018 set_array_element
         tinyBasic.s:2037   .text:000000000000103c set_var
         tinyBasic.s:3284   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2073   .rodata:0000000000000050 $d
         tinyBasic.s:2083   *ABS*:0000000000000000 link
         tinyBasic.s:2084   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2194   .rodata.dictionary:00000000000007b4 LINK
         tinyBasic.s:2085   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2189   .rodata.dictionary:00000000000007a8 first_link
         tinyBasic.s:2235   .text.basic:0000000000000000 abs
         tinyBasic.s:2247   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2250   .text.basic:000000000000002c analog_read
         tinyBasic.s:2257   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2272   .text.basic:0000000000000054 ascii
         tinyBasic.s:2289   .text.basic:0000000000000098 autorun
         tinyBasic.s:2292   .text.basic:000000000000009c awu
         tinyBasic.s:2300   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2325   .text.basic:00000000000000cc bit_reset
         tinyBasic.s:2350   .text.basic:00000000000000f8 bit_set
         tinyBasic.s:2390   .text.basic:0000000000000148 bit_test
         tinyBasic.s:2374   .text.basic:0000000000000120 bit_toggle
         tinyBasic.s:2409   .text.basic:0000000000000188 bye
         tinyBasic.s:2416   .text.basic:000000000000018c char
         tinyBasic.s:2425   .text.basic:00000000000001ac const_cr2
         tinyBasic.s:2428   .text.basic:00000000000001b0 const_cr1
         tinyBasic.s:2441   .text.basic:00000000000001b4 data_line
         tinyBasic.s:2542   .text.basic:00000000000002ac const_ddr
         tinyBasic.s:2549   .text.basic:00000000000002b0 dec_base
         tinyBasic.s:2554   .text.basic:00000000000002b8 directory
         tinyBasic.s:2561   .text.basic:00000000000002bc do_loop
         tinyBasic.s:2566   .text.basic:00000000000002c4 digital_read
         tinyBasic.s:2569   .text.basic:00000000000002c8 digital_write
         tinyBasic.s:2607   .text.basic:000000000000030c cmd_end
         tinyBasic.s:2611   .text.basic:0000000000000314 const_eeprom_base
         tinyBasic.s:2614   .text.basic:0000000000000318 fcpu
         tinyBasic.s:2624   .text.basic:0000000000000320 for
         tinyBasic.s:2617   .text.basic:000000000000031c forget
         tinyBasic.s:2704   .text.basic:00000000000003d4 gosub
         tinyBasic.s:2736   .text.basic:0000000000000418 goto
         tinyBasic.s:2750   .text.basic:0000000000000448 gpio
         tinyBasic.s:2757   .text.basic:000000000000044c hex_base
         tinyBasic.s:2762   .text.basic:0000000000000454 const_idr
         tinyBasic.s:2769   .text.basic:0000000000000458 if
         tinyBasic.s:2784   .text.basic:0000000000000470 input_var
         tinyBasic.s:2787   .text.basic:0000000000000474 invert
         tinyBasic.s:2790   .text.basic:0000000000000478 enable_iwdg
         tinyBasic.s:2793   .text.basic:000000000000047c refresh_iwdg
         tinyBasic.s:2796   .text.basic:0000000000000480 key
         tinyBasic.s:2809   .text.basic:0000000000000484 let
         tinyBasic.s:2852   .text.basic:0000000000000510 list
         tinyBasic.s:2895   .text.basic:00000000000005bc load
         tinyBasic.s:2898   .text.basic:00000000000005c0 log2
         tinyBasic.s:2901   .text.basic:00000000000005c4 lshift
         tinyBasic.s:2904   .text.basic:00000000000005c8 muldiv
         tinyBasic.s:2671   .text.basic:000000000000038c next
         tinyBasic.s:2912   .text.basic:00000000000005cc new
         tinyBasic.s:2921   .text.basic:00000000000005ec func_not
ARM GAS  tinyBasic.s 			page 97


         tinyBasic.s:2929   .text.basic:0000000000000604 const_odr
         tinyBasic.s:2936   .text.basic:0000000000000608 bit_or
         tinyBasic.s:2946   .text.basic:000000000000062c pad_ref
         tinyBasic.s:2954   .text.basic:0000000000000630 pause
         tinyBasic.s:2965   .text.basic:000000000000064c pin_mode
         tinyBasic.s:2968   .text.basic:0000000000000650 peek
         tinyBasic.s:2971   .text.basic:0000000000000654 const_input
         tinyBasic.s:2974   .text.basic:0000000000000658 poke
         tinyBasic.s:2977   .text.basic:000000000000065c const_output
         tinyBasic.s:2984   .text.basic:0000000000000660 print
         tinyBasic.s:3035   .text.basic:000000000000072c const_porta
         tinyBasic.s:3038   .text.basic:0000000000000730 const_portb
         tinyBasic.s:3041   .text.basic:0000000000000734 const_portc
         tinyBasic.s:3044   .text.basic:0000000000000738 const_portd
         tinyBasic.s:3047   .text.basic:000000000000073c const_porte
         tinyBasic.s:3050   .text.basic:0000000000000740 const_portf
         tinyBasic.s:3053   .text.basic:0000000000000744 const_portg
         tinyBasic.s:3056   .text.basic:0000000000000748 const_porth
         tinyBasic.s:3059   .text.basic:000000000000074c const_porti
         tinyBasic.s:3066   .text.basic:0000000000000750 qkey
         tinyBasic.s:2471   .text.basic:0000000000000208 read
         tinyBasic.s:2513   .text.basic:0000000000000268 restore
         tinyBasic.s:2725   .text.basic:0000000000000410 return
         tinyBasic.s:3078   .text.basic:000000000000076c random
         tinyBasic.s:3097   .text.basic:00000000000007b0 rshift
         tinyBasic.s:3104   .text.basic:00000000000007b4 run
         tinyBasic.s:3124   .text.basic:00000000000007ec save
         tinyBasic.s:3127   .text.basic:00000000000007f0 show
         tinyBasic.s:3130   .text.basic:00000000000007f4 size
         tinyBasic.s:3133   .text.basic:00000000000007f8 sleep
         tinyBasic.s:3136   .text.basic:00000000000007fc spi_read
         tinyBasic.s:3139   .text.basic:0000000000000800 spi_enable
         tinyBasic.s:3142   .text.basic:0000000000000804 spi_select
         tinyBasic.s:3145   .text.basic:0000000000000808 spi_write
         tinyBasic.s:2656   .text.basic:0000000000000370 step
         tinyBasic.s:3148   .text.basic:000000000000080c stop
         tinyBasic.s:3155   .text.basic:0000000000000810 get_ticks
         tinyBasic.s:3164   .text.basic:0000000000000818 set_timer
         tinyBasic.s:3176   .text.basic:000000000000082c timeout
         tinyBasic.s:2642   .text.basic:0000000000000354 to
         tinyBasic.s:3184   .text.basic:0000000000000840 tone
         tinyBasic.s:3194   .text.basic:0000000000000844 ubound
         tinyBasic.s:3202   .text.basic:0000000000000858 uflash
         tinyBasic.s:3210   .text.basic:000000000000085c until
         tinyBasic.s:3219   .text.basic:0000000000000878 usr
         tinyBasic.s:3222   .text.basic:000000000000087c wait
         tinyBasic.s:3231   .text.basic:0000000000000880 words
         tinyBasic.s:3254   .text.basic:00000000000008e8 write
         tinyBasic.s:3261   .text.basic:00000000000008ec bit_xor
         tinyBasic.s:3271   .text.basic:0000000000000910 transmit
         tinyBasic.s:3274   .text.basic:0000000000000914 receive
         tinyBasic.s:2583   .text.basic:00000000000002cc dump
         tinyBasic.s:2780   .text.basic:000000000000046c then
         tinyBasic.s:2235   .text.basic:0000000000000000 $t
         tinyBasic.s:2490   .text.basic:0000000000000240 seek_next
         tinyBasic.s:2535   .text.basic:000000000000029e no_data_line
         tinyBasic.s:2531   .text.basic:0000000000000298 try_next_line
ARM GAS  tinyBasic.s 			page 98


         tinyBasic.s:2893   .text.basic:00000000000005b6 out_buff
         tinyBasic.s:2893   .text.basic:00000000000005b6 $d
         tinyBasic.s:2895   .text.basic:00000000000005ba $t
         tinyBasic.s:3028   .text.basic:0000000000000714 print_exit
         tinyBasic.s:3284   .text.basic:0000000000000c00 $d
         tinyBasic.s:2049   .text:000000000000104a $d
         tinyBasic.s:3284   .text:000000000000104c $d
         tinyBasic.s:576    .text:0000000000000425 $d
         tinyBasic.s:576    .text:0000000000000426 $t
         tinyBasic.s:1415   .text:0000000000000b2d $d
         tinyBasic.s:1415   .text:0000000000000b2e $t
         tinyBasic.s:1509   .text:0000000000000bcf $d
         tinyBasic.s:1509   .text:0000000000000bd0 $t
         tinyBasic.s:1981   .text:0000000000001001 $d
         tinyBasic.s:1981   .text:0000000000001002 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
tabulation
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
uart_qkey
