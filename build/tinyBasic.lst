ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
 190              	
 191              	/*   ADC1 registers */
 192              	.equ ADC1_BASE_ADR, 0x40012400
 193              	.equ ADC_SR,0
 194              	.equ ADC_CR1,0X4
 195              	.equ ADC_CR2,0X8
 196              	.equ ADC_SMPR1,0XC
 197              	.equ ADC_SMPR2,0X10
 198              	.equ ADC_JOFR1,0X14
 199              	.equ ADC_JOFR2,0X18
 200              	.equ ADC_JOFR3,0X1C
 201              	.equ ADC_JOFR4,0X20
ARM GAS  tinyBasic.s 			page 5


 202              	.equ ADC_HTR,0X24
 203              	.equ ADC_LTR,0X28
 204              	.equ ADC_SQR1,0X2C
 205              	.equ ADC_SQR2,0X30
 206              	.equ ADC_SQR3,0X34
 207              	.equ ADC_JSQR,0X38
 208              	.equ ADC_JDR1,0X3C
 209              	.equ ADC_JDR2,0X40
 210              	.equ ADC_JDR3,0X44
 211              	.equ ADC_JDR4,0X48
 212              	.equ ADC_DR,0X4C
 213              	
 214              	/* timer registers */
 215              	.equ TIMER1_BASE_ADR,0X40012C00
 216              	.equ TIMER2_BASE_ADR,0x40000000
 217              	.equ TIMER3_BASE_ADR,0x40000400
 218              	.equ TIMER4_BASE_ADR,0x40000800
 219              	
 220              	.equ TIM_CR1,0
 221              	.equ TIM_CR2,4
 222              	.equ TIM_SMCR,8
 223              	.equ TIM_DIER,0xc
 224              	.equ TIM_SR,0X10
 225              	.equ TIM_EGR,0X14
 226              	.equ TIM_CCMR1,0X18
 227              	.equ TIM_CCMR2,0X1C
 228              	.equ TIM_CCER,0X20
 229              	.equ TIM_CNT,0X24
 230              	.equ TIM_PSC,0X28
 231              	.equ TIM_ARR,0X2C
 232              	.equ TIM_CCR1,0X34
 233              	.equ TIM_CCR2,0X38
 234              	.equ TIM_DCR,0X48
 235              	.equ TIM_DMAR,0X4C
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
ARM GAS  tinyBasic.s 			page 6


  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
ARM GAS  tinyBasic.s 			page 7


  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
ARM GAS  tinyBasic.s 			page 8


  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
ARM GAS  tinyBasic.s 			page 9


 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
ARM GAS  tinyBasic.s 			page 10


 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
ARM GAS  tinyBasic.s 			page 11


 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AWU_IDX,ASC_IDX+1 //
  31              	    .equ BIT_IDX,AWU_IDX+1 //
  32              	    .equ BRES_IDX,BIT_IDX+1 // 
  33              	    .equ BSET_IDX,BRES_IDX+1 // 
  34              	    .equ BTEST_IDX,BSET_IDX+1 // 
  35              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  36              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  37              	    .equ CLS_IDX,CHAR_IDX+1 //
  38              	    .equ CONST_IDX,CLS_IDX+1 //
  39              	    .equ DATA_IDX,CONST_IDX+1 // 
  40              	    .equ DEC_IDX,DATA_IDX+1 // 
  41              	    .equ DIR_IDX,DEC_IDX+1 // 
  42              	    .equ DO_IDX,DIR_IDX+1 // 
  43              	    .equ DROP_IDX,DO_IDX+1
  44              	    .equ DUMP_IDX, DROP_IDX+1 
  45              	    .equ END_IDX,DUMP_IDX+1 // 
  46              	    .equ ERASE_IDX,END_IDX+1 
  47              	    .equ FOR_IDX, ERASE_IDX+1 // 
  48              	    .equ FORGET_IDX, FOR_IDX+1 // 
  49              	    .equ FREE_IDX, FORGET_IDX+1 // 
  50              	    .equ GET_IDX,FREE_IDX+1
  51              	    .equ GOSUB_IDX, GET_IDX+1 // 
  52              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  53              	    .equ HEX_IDX, GOTO_IDX+1 // 
  54              	    .equ IF_IDX, HEX_IDX+1 // 
  55              	    .equ IN_IDX,IF_IDX+1
  56              	    .equ INPUT_IDX, IN_IDX+1 // 
  57              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  58              	    .equ KEY_IDX, INVERT_IDX+1 // 
  59              	    .equ LET_IDX, KEY_IDX+1 // 
  60              	    .equ LIST_IDX, LET_IDX+1 // 
  61              	    .equ LOAD_IDX, LIST_IDX+1 // 
  62              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  63              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  64              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  65              	    .equ NEXT_IDX, NEW_IDX+1 // 
  66              	    .equ NOT_IDX, NEXT_IDX+1 // 
  67              	    .equ OR_IDX, NOT_IDX+1 // 
  68              	    .equ OUT_IDX,OR_IDX+1
  69              	    .equ PAD_IDX, OUT_IDX+1 // 
  70              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  71              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  72              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  73              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  74              	    .equ PEEK32_IDX, PEEK16_IDX+1
  75              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  76              	    .equ POKE16_IDX,POKE8_IDX+1 
  77              	    .equ POKE32_IDX,POKE16_IDX+1
  78              	    .equ POP_IDX,POKE32_IDX+1
  79              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  80              	    .equ PUSH_IDX,PRT_IDX+1
  81              	    .equ PUT_IDX,PUSH_IDX+1
  82              	    .equ QKEY_IDX, PUT_IDX+1 // 
  83              	    .equ READ_IDX, QKEY_IDX+1 // 
  84              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  85              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
ARM GAS  tinyBasic.s 			page 13


  86              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  87              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  88              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  89              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  90              	    .equ SAVE_IDX, RUN_IDX+1 // 
  91              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  92              	    .equ SERVO_POS_IDX,SERVO_INIT_IDX+1
  93              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  94              	    .equ SPC_IDX,SLEEP_IDX+1 //
  95              	    .equ STEP_IDX, SPC_IDX+1 // 
  96              	    .equ STOP_IDX, STEP_IDX+1 // 
  97              	    .equ STORE_IDX,STOP_IDX+1
  98              	    .equ TAB_IDX, STORE_IDX+1 //
  99              	    .equ THEN_IDX,TAB_IDX+1
 100              	    .equ TICKS_IDX, THEN_IDX+1 // 
 101              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 102              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 103              	    .equ TO_IDX, TMROUT_IDX+1 // 
 104              	    .equ TONE_IDX,TO_IDX+1
 105              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 106              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 107              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 108              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 109              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 110              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 111              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 112              	    .equ XOR_IDX, WORDS_IDX+1 //
 113              	    .equ XPOS_IDX,XOR_IDX+1 //
 114              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 115              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
ARM GAS  tinyBasic.s 			page 14


  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
ARM GAS  tinyBasic.s 			page 15


 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 16


 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
ARM GAS  tinyBasic.s 			page 17


 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
ARM GAS  tinyBasic.s 			page 18


 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
ARM GAS  tinyBasic.s 			page 19


 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      F9FD5DF8 
 318      04EB
 319 0256 1A28     	    cmp r0,TK_LABEL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      32F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      0DFF5DF8 
 325      04EB
 326 027a 1B28     	    cmp r0,#TK_INTGR 
 327 027c 40F0EC83 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 E4E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
ARM GAS  tinyBasic.s 			page 20


 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  TK_INTGR 
 344              	    r1  constant value  
 345              	  use:
 346              	    r2   *list 
 347              	    r3   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 0CB4     	    push {r2,r3} 
 351 029a 626B     	    ldr r2,[UPP,#TXTEND]
 352 029c D4F8D030 	    ldr r3,[UPP,#HERE] 
 353 02a0 9A42     	1:  cmp r2,r3 
 354 02a2 0BD5     	    bpl 8f 
 355 02a4 52F8041B 	    ldr r1,[r2],#4
 356 02a8 8842     	    cmp r0,r1 
 357 02aa 02D0     	    beq 2f 
 358 02ac 02F10402 	    add r2,#4
 359 02b0 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b2 1168     	    ldr r1,[r2]
 362 02b4 4FF01B00 	    mov r0,#TK_INTGR 
 363 02b8 0CBC     	    pop {r2,r3}
 364 02ba 7047     	    _RET
 365              	8:  // that constant doesn't exist 
 366 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 367 02c0 CEE3     	    b tb_error      
 368              	
 369              	
 370              	/***************************************
 371              	    search_label 
 372              	    search target label 
 373              	    input:
 374              	      r1    target label 
 375              	    output:
 376              	      r0    address or 0 
 377              	    use:
 378              	      r2    line address link 
 379              	      r3    search limit 
 380              	****************************************/
 381 02c2 00BF     	    _FUNC search_label 
 382 02c4 0CB4     	    push {r2,r3}
 383 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 384 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 385 02ca 9A42     	1:  cmp r2,r3
 386 02cc 0AD0     	    beq 8f 
 387 02ce D078     	    ldrb r0,[r2,#3]
 388 02d0 1A28     	    cmp  r0,#TK_LABEL 
 389 02d2 02D0     	    beq 4f 
 390 02d4 9078     	2:  ldrb r0,[r2,#2]
 391 02d6 0244     	    add r2,r0 
 392 02d8 F7E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 21


 393              	4:  // compare label 
 394 02da 5068     	    ldr r0,[R2,#4]
 395 02dc 8142     	    cmp r1,r0 
 396 02de F9D1     	    bne 2b 
 397              	    // found label 
 398 02e0 1046     	    mov r0,r2 
 399 02e2 01E0     	    b 9f
 400 02e4 80EA0000 	8:  eor r0,r0 
 401 02e8 0CBC     	9:  pop {r2,r3}
 402 02ea 7047     	    _RET 
 403              	
 404              	
 405              	/***************************************
 406              	    search_lineno 
 407              	    localize BASIC line from its number 
 408              	    input:
 409              	      r0   line# 
 410              	    output: 
 411              	      r0   adr where found || adr new to be inserted 
 412              	      r1   0 found || !0 not found  
 413              	    use:
 414              	      r0   scan address 
 415              	      r1   temp   
 416              	      r2   address end of text
 417              	      r3   target line#
 418              	****************************************/    
 419              	    _GBL_FUNC search_lineno
 420 02ec 0CB4     	    push {r2,r3} 
 421 02ee 0346     	    mov r3,r0 // target 
 422 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 423 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 424 02f4 9042     	1:  cmp r0,r2 
 425 02f6 05D0     	    beq  8f
 426 02f8 0188     	    ldrh r1,[r0]
 427 02fa C91A     	    subs r1,r3 
 428 02fc 04D5     	    bpl 9f 
 429 02fe 8178     	    ldrb r1,[r0,#2]
 430 0300 0844     	    add r0,r1
 431 0302 F7E7     	    b 1b 
 432 0304 4FF0FF31 	8:  mov r1,#-1 
 433 0308 0CBC     	9:  pop {r2,r3}
 434 030a 7047     	    _RET 
 435              	
 436              	
 437              	/********************************************
 438              	    delete_line 
 439              	    delete BASIC line at addr 
 440              	    input:
 441              	      r0    address line to delete 
 442              	    output:
 443              	      r0    same as input 
 444              	    use: 
 445              	      r1    dest adr
 446              	      r2    bytes to move 
 447              	      T1    length line to delete 
 448              	      T2    txtend 
 449              	********************************************/
ARM GAS  tinyBasic.s 			page 22


 450              	    _FUNC delete_line 
 451 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
 452 0310 0146     	    mov r1,r0 // dest 
 453 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 454 0316 4044     	    add r0,T1  // src
 455 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 456 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 457 0320 00B5FFF7 	    _CALL cmove
 457      FEFF5DF8 
 457      04EB
 458 032a A9EB0809 	    sub T2,T1 // txtend-count 
 459 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 460 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 461 0336 7047     	    _RET 
 462              	
 463              	/******************************************
 464              	    create_gap 
 465              	    create a gap in text area to insert new line 
 466              	    input:
 467              	      r0    adr 
 468              	      r1    length 
 469              	    output:
 470              	      r0    adr 
 471              	    use:
 472              	      T1    length 
 473              	      T2    txtend 
 474              	************************************************/
 475              	    _FUNC create_gap 
 476 0338 2DE90503 	    push {r0,r2,T1,T2}
 477 033c 8846     	    mov T1,R1
 478 033e 0144     	    add r1,r0  // dest 
 479 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 480 0344 A9EB0002 	    sub r2,T2,r0 
 481 0348 00B5FFF7 	    _CALL cmove
 481      FEFF5DF8 
 481      04EB
 482 0352 C144     	    add T2,T1 
 483 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 484 0358 BDE80503 	    pop {r0,r2,T1,T2}
 485 035c 7047     	    _RET 
 486              	
 487              	/************************************************
 488              	    insert_line 
 489              	    insert BASIC line in text area 
 490              	    first search if line with same number exist 
 491              	    replace if so. 
 492              	    input:
 493              	      r0    *buffer to insert 
 494              	    output:
 495              	      none 
 496              	    use: 
 497              	      T1     *buffer
 498              	      T2     temp  
 499              	************************************************/ 
 500 035e 00BF     	    _FUNC insert_line 
 501 0360 2DE90203 	    push {r1,T1,T2}
 502 0364 8046     	    mov T1,r0 
ARM GAS  tinyBasic.s 			page 23


 503 0366 B8F80000 	    ldrh r0,[T1]
 504 036a 00B5FFF7 	    _CALL search_lineno 
 504      FEFF5DF8 
 504      04EB
 505 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 506              	// already exist 
 507 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 507      C8FF5DF8 
 507      04EB
 508 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 509 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 510 0388 0ED0     	    beq 9f
 511              	1: //insert new line 
 512 038a 98F80210 	    ldrb r1,[T1,#2]
 513 038e 00B5FFF7 	    _CALL create_gap 
 513      D2FF5DF8 
 513      04EB
 514 0398 0146     	    mov r1,r0
 515 039a 4046     	    mov r0,T1 
 516 039c 8278     	    ldrb r2,[r0,#2]
 517 039e 00B5FFF7 	    _CALL cmove 
 517      FEFF5DF8 
 517      04EB
 518 03a8 BDE80203 	9:  pop {r1,T1,T2}
 519 03ac 7047     	    _RET 
 520              	
 521              	/*********************************
 522              	    compile 
 523              	    tokenize source line save it 
 524              	    in pas buffer.
 525              	    compiled line format: 
 526              	      line_no  2 bytes {0...32767}
 527              	      count    1 byte  
 528              	      tokens   variable length 
 529              	  input:
 530              	     r0   *text buffer 
 531              	     r1   *text length   
 532              	  output:
 533              	    r0    0 stored | -1 immediate 
 534              	  use:
 535              	    r3    tib index   
 536              	    T1    tib
 537              	    T2    pad
 538              	***********************************/
 539 03ae 00BF     	    _FUNC compile
 540 03b0 8046     	    mov T1, r0  // source text buffer 
 541 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 542 03b4 DFF8E899 	    ldr T2,pad // tokens buffer
 543 03b8 83EA0303 	    eor r3,r3 // source index  
 544 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 545 03be 40F02000 	    orr r0,#FCOMP
 546 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 547 03c4 80EA0000 	    eor r0,r0     
 548 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 549 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 550 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 551 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
ARM GAS  tinyBasic.s 			page 24


 552 03d6 00B500F0 	    _CALL parse_int 
 552      6EF95DF8 
 552      04EB
 553 03e0 0AD0     	    beq 2f 
 554              	// this is a line number     
 555 03e2 0129     	    cmp r1,#1 
 556 03e4 02D5     	    bpl 1f 
 557 03e6 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 558 03ea 39E3     	    b tb_error  
 559 03ec B1F5803F 	1:  cmp r1,#65536
 560 03f0 F9D5     	    bpl 0b 
 561              	    // write line # to pad 
 562 03f2 29F8031C 	    strh r1,[T2,#-3]
 563 03f6 2360     	    str r3,[UPP,#IN_SAVED]
 564              	2:  // check for pad full 
 565 03f8 C145     	    cmp T2,T1
 566 03fa 02DB     	    blt 3f 
 567 03fc 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 568 0400 2EE3     	    b tb_error 
 569 0402 00B500F0 	3:  _CALL comp_token 
 569      28F85DF8 
 569      04EB
 570 040c 0028     	    cmp r0,#TK_NONE 
 571 040e 01D0     	    beq 4f 
 572 0410 2360     	    str r3,[UPP,#IN_SAVED]
 573 0412 F1E7     	    b 2b 
 574              	4: // compilation completed 
 575 0414 DFF88839 	    ldr r3,pad 
 576 0418 A9EB0300 	    sub r0,T2,r3 // line length 
 577 041c 9870     	    strb r0,[r3,#2]
 578 041e 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 579 0420 1888     	    ldrh r0,[r3] // line number 
 580 0422 70B1     	    cbz r0,8f  
 581              	// insert line in text buffer 
 582 0424 206C     	    ldr r0,[UPP,#FLAGS]
 583 0426 10F0080F 	    tst r0,#FSTOP
 584 042a 02D0     	    beq 7f 
 585 042c 4FF01000 	    mov r0,#ERR_CANT_PROG 
 586 0430 16E3     	    b tb_error 
 587 0432 1846     	7:  mov r0,r3 
 588 0434 00B5FFF7 	    _CALL insert_line 
 588      93FF5DF8 
 588      04EB
 589 043e 4040     	    eors r0,r0 
 590 0440 08E0     	    b 9f 
 591 0442 9B46     	8:  mov BPTR,r3 // *token_list 
 592 0444 4FF0030A 	    mov IN,#3
 593 0448 206C     	    ldr r0,[UPP,#FLAGS]
 594 044a A0F12000 	    sub r0,#FCOMP
 595 044e 2064     	    str r0,[UPP,#FLAGS]
 596 0450 5FF0FF30 	    movs r0,#-1 
 597 0454 7047     	9:  _RET 
 598              	
 599              	/*********************************************
 600              	    compile next token from source 
 601              	    input: 
 602              	      r3 		tib index  
ARM GAS  tinyBasic.s 			page 25


 603              	      T1    tib adr
 604              	      T2    insert point in pad  
 605              	    output:
 606              	      r0     token attribute 
 607              	      r1 		token value
 608              	      r3     tib index updated    
 609              	      T2     updated 
 610              	      use:
 611              	**********************************************/
 612 0456 00BF     	    _FUNC comp_token 
 613 0458 40B4     	    push {r6}
 614 045a 18F80300 	    ldrb r0,[T1,r3]
 615 045e 0040     	    ands r0,r0 
 616 0460 7DD0     	    beq store_r0  // reached end of text  
 617 0462 4FF02000 	    mov r0,#SPACE 
 618 0466 00B500F0 	    _CALL skip  // skip spaces 
 618      76F95DF8 
 618      04EB
 619 0470 18F80300 	    ldrb r0,[T1,r3]
 620 0474 0040     	    ands r0,r0 
 621 0476 72D0     	    beq store_r0  // reached end of text 
 622 0478 03F10103 	    add r3,#1
 623 047c 00B500F0 	    _CALL is_letter 
 623      9FF95DF8 
 623      04EB
 624 0486 0BD1     	    bne 1f
 625 0488 A3F10103 	    sub r3,#1 
 626 048c 00B500F0 	    _CALL comp_label // parse and compile label 
 626      AFF85DF8 
 626      04EB
 627 0496 1728     	    cmp r0,#TK_CMD 
 628 0498 71D1     	    bne token_exit 
 629 049a 3B29     	    cmp r1,#REM_IDX 
 630 049c 4DD0     	    beq tick2 
 631 049e 6EE0     	    b token_exit 
 632 04a0 00B500F0 	1:  _CALL is_special
 632      6FF85DF8 
 632      04EB
 633 04aa DFF8046D 	    ldr r6,=token_ofs
 634 04ae D6E811F0 	    tbh [r6,r1] 
 635              	tok_idx0:     
 636              	//  not special char.  
 637 04b2 57E0     	    b try_number 
 638              	// single char token with no value 
 639              	single: 
 640 04b4 DFF8FC6C 	    ldr r6,=tok_single
 641 04b8 705C     	    ldrb r0,[r6,r1] 
 642 04ba 50E0     	    b store_r0
 643              	lt:
 644 04bc 4FF00F00 	    mov r0,#TK_LT
 645 04c0 18F80310 	    ldrb r1,[T1,r3]
 646 04c4 3E29     	    cmp r1,#'>' 
 647 04c6 06D0     	    beq 1f
 648 04c8 0AE0     	    b 2f 
 649              	gt:
 650 04ca 4FF00E00 	    mov r0,#TK_GT 
 651 04ce 18F80310 	    ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 26


 652 04d2 3C29     	    cmp r1,#'<'
 653 04d4 04D1     	    bne 2f  
 654 04d6 03F10103 	1:  add r3,#1
 655 04da 4FF01200 	    mov r0,#TK_NE  
 656 04de 3EE0     	    b store_r0
 657 04e0 3D29     	2:  cmp r1,#'=' 
 658 04e2 3CD1     	    bne store_r0  
 659 04e4 03F10103 	    add r3,#1
 660 04e8 00F10200 	    add r0,#2
 661 04ec 37E0     	    b store_r0       
 662              	bkslash:
 663 04ee 18F80310 	    ldrb r1,[T1,r3]
 664 04f2 03F10103 	    add r3,#1
 665 04f6 4FF01300 	    mov r0,#TK_CHAR 
 666 04fa 09F8010B 	    strb r0,[T2],#1
 667 04fe 09F8011B 	    strb r1,[T2],#1
 668 0502 3CE0     	    b token_exit 
 669              	prt_cmd: 
 670 0504 4FF01700 	    mov r0,#TK_CMD 
 671 0508 4FF03601 	    mov r1,#PRT_IDX
 672 050c 09F8010B 	    strb r0,[T2],#1
 673 0510 09F8011B 	    strb r1,[T2],#1
 674 0514 33E0     	    b token_exit 
 675              	quote:
 676 0516 4FF01C00 	    mov r0,#TK_QSTR 
 677 051a 09F8010B 	    strb r0,[T2],#1
 678 051e 00B500F0 	    _CALL parse_quote
 678      E6F85DF8 
 678      04EB
 679 0528 29E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 052a 4FF01700 	    mov r0,#TK_CMD 
 683 052e 4FF03B01 	    mov r1,#REM_IDX 
 684 0532 09F8010B 	    strb r0,[T2],#1 
 685 0536 09F8011B 	    strb r1,[T2],#1
 686              	tick2:
 687 053a 08EB0300 	    add r0,T1,r3 
 688 053e 4946     	    mov r1,T2 
 689 0540 00B5FFF7 	    _CALL strcpy 
 689      FEFF5DF8 
 689      04EB
 690 054a 00B5FFF7 	    _CALL strlen 
 690      FEFF5DF8 
 690      04EB
 691 0554 8144     	    add T2,r0
 692 0556 09F10109 	    add T2,#1
 693 055a 6368     	    ldr r3,[UPP,#COUNT]
 694 055c 0FE0     	    b token_exit
 695              	store_r0: 
 696 055e 09F8010B 	    strb r0,[T2],#1
 697 0562 0CE0     	    b token_exit 
 698              	try_number:
 699 0564 A3F10103 	    sub r3,#1
 700 0568 00B500F0 	    _CALL parse_int  
 700      A5F85DF8 
 700      04EB
ARM GAS  tinyBasic.s 			page 27


 701 0572 00F07182 	    beq syntax_error  
 702 0576 09F8010B 	    strb r0,[T2],#1 
 703 057a 49F8041B 	    str r1,[T2],#4
 704              	token_exit:
 705 057e 40BC     	    pop {r6}
 706 0580 7047     	    _RET 
 707              	
 708              	
 709              	/****************************
 710              	    is_special  
 711              	    check for non alphanum
 712              	    input:
 713              	      r0    character to scan 
 714              	    output:
 715              	      r0    character 
 716              	      r1    0 || index 
 717              	    use: 
 718              	      r1    scan index 
 719              	      r2    temp 
 720              	      r3    char_list 
 721              	*****************************/
 722 0582 00BF     	    _FUNC is_special 
 723 0584 0CB4     	    push {r2,r3}
 724 0586 4FF00101 	    mov r1,#1
 725 058a DFF82C3C 	    ldr r3,=char_list 
 726 058e 5A5C     	1:  ldrb r2,[r3,r1]
 727 0590 22B1     	    cbz r2,8f 
 728 0592 8242     	    cmp r2,r0 
 729 0594 04D0     	    beq 9f 
 730 0596 01F10101 	    add r1,#1 
 731 059a F8E7     	    b 1b
 732 059c 81EA0101 	8:  eor r1,r1     
 733 05a0 0CBC     	9:  pop {r2,r3}
 734 05a2 7047     	    _RET 
 735              	
 736              	char_list:
 737 05a4 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 737      28293A23 
 737      2D2B2A2F 
 737      253D3C3E 
 737      5C3F2722 
 738              	
 739              	tok_single:
 740 05b9 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 740      050601
 741 05c0 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 741      0A0B0D
 742              	
 743 05c7 00       	  .p2align 2
 744              	token_ofs:
 745 05c8 0000     	  .hword  0 // not found
 746              	  // TK_COMMA...TK_EQUAL , 13 
 747 05ca 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
ARM GAS  tinyBasic.s 			page 28


 749      01000100 
 750 05e2 0100     	  .hword  (single-tok_idx0)/2    
 751              	  // '<','>'
 752 05e4 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 753              	  // '\'
 754 05e8 1E00     	  .hword  (bkslash-tok_idx0)/2
 755              	  // '?' 
 756 05ea 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 757              	  // "'"  
 758 05ec 3C00     	  .hword  (tick-tok_idx0)/2 
 759              	  // '"' quote 
 760 05ee 3200     	  .hword (quote-tok_idx0)/2
 761              	
 762              	  .p2align 2
 763              	
 764              	/****************************
 765              	    comp_label
 766              	    compile a label 
 767              	    it can be a target|keyword|
 768              	    variable| user constant  
 769              	    label form: [A..Z]+
 770              	    input:
 771              	      *buffer 
 772              	    output:
 773              	      r0  token type 
 774              	      r1  token value 
 775              	      T2  updated 
 776              	      R3  updated
 777              	    use:
 778              	****************************/
 779              	    _FUNC comp_label
 780 05f0 24B4     	    push {r2,r5}
 781 05f2 4DF8049D 	    push {T2}
 782 05f6 82EA0202 	    eor r2,r2
 783 05fa 4FF00605 	    mov r5,#6 
 784 05fe 18F80300 	0:  ldrb r0,[T1,r3]
 785 0602 5F28     	    cmp r0,#'_'
 786 0604 0AD0     	    beq 2f
 787 0606 00B500F0 	1:  _CALL is_letter 
 787      DAF85DF8 
 787      04EB
 788 0610 09D1     	    bne 3f // not letter 
 789 0612 00B500F0 	    _CALL upper 
 789      ACF85DF8 
 789      04EB
 790 061c 09F8010B 	2:  strb r0,[T2],#1
 791 0620 03F10103 	    add r3,#1
 792 0624 EBE7     	    b 0b 
 793 0626 80EA0000 	3:  eor r0,r0 
 794 062a 89F80000 	    strb r0,[T2]
 795              	// is this a variable ?
 796 062e 5DF8049B 	    pop {T2}
 797 0632 99F80100 	    ldrb r0,[T2,#1]
 798 0636 30B9     	    cbnz r0,3f // length >1 not variable 
 799 0638 99F80010 	    ldrb r1,[T2]
 800 063c A1F14101 	    sub r1,#'A' 
 801 0640 4FF01400 	    mov r0,#TK_VAR
ARM GAS  tinyBasic.s 			page 29


 802 0644 1CE0     	    b 8f 
 803              	3:  // try keyword 
 804 0646 4846     	    mov r0,T2 
 805 0648 DFF8701B 	    ldr r1,=kword_dict  
 806 064c 00B500F0 	    _CALL search_dict 
 806      C5FA5DF8 
 806      04EB
 807 0656 30B1     	    cbz r0,4f
 808 0658 1828     	    cmp r0,TK_SCONST  
 809 065a 11D1     	    bne 8f
 810              	    //system constant  
 811 065c 09F8010B 	    strb r0,[T2],#1
 812 0660 49F8041B 	    str r1,[T2],#4
 813 0664 10E0     	    b 9f 
 814              	4: // must be a label 
 815 0666 4846     	    mov r0,T2 
 816 0668 00B500F0 	    _CALL compress_label
 816      0FF85DF8 
 816      04EB
 817 0672 4FF01A00 	    mov r0,#TK_LABEL
 818 0676 09F8010B 	    strb r0,[T2],#1
 819 067a 49F8041B 	    str r1,[T2],#4
 820 067e 03E0     	    b 9f 
 821 0680 09F8010B 	8:  strb r0,[T2],#1
 822 0684 09F8011B 	    strb r1,[T2],#1          
 823 0688 24BC     	9:  pop {r2,r5}
 824 068a 7047     	    _RET 
 825              	
 826              	/********************************
 827              	    compress_label 
 828              	    compress label in integer 
 829              	    maximum 6 character, 
 830              	    ignore extras characters 
 831              	    input:
 832              	      r0  *label 
 833              	    output:
 834              	      r1   compressed label 
 835              	********************************/
 836              	    _FUNC compress_label
 837 068c 0CB4     	    push {r2,r3}
 838 068e 82EA0202 	    eor r2,r2 // compress value
 839 0692 4FF00603 	    mov r3,#6 // max characters 
 840 0696 10F8011B 	1:  ldrb r1,[r0],#1 
 841 069a 51B1     	    cbz r1,3f
 842 069c 5F29     	    cmp r1,#'_'
 843 069e 01D1     	    bne 2f 
 844 06a0 A1F10401 	    sub r1,#4  
 845 06a4 A1F14001 	2:  sub r1,#'@'
 846 06a8 4FEA4212 	    lsl r2,#5
 847 06ac 0A44     	    add r2,r1
 848 06ae 013B     	    subs r3,#1 
 849 06b0 F1D1     	    bne 1b 
 850 06b2 1146     	3:  mov r1,r2     
 851 06b4 0CBC     	    pop {r2,r3}
 852 06b6 7047     	    _RET 
 853              	
 854              	
ARM GAS  tinyBasic.s 			page 30


 855              	/****************************
 856              	    parse_int 
 857              	    parse an integer from text
 858              	    if not valid integer 
 859              	    r1 return *buffer else 
 860              	    *buffer is incremented after integer 
 861              	  input:
 862              	    r0   *buffer 
 863              	  output:
 864              	    r0   TK_INTGR|TK_NONE
 865              	    r1   int|0   
 866              	  use:
 867              	    r3   tib index updated     
 868              	*****************************/
 869              	    _FUNC parse_int 
 870 06b8 4FF00A01 	    mov r1,#10 // default base 
 871 06bc 18F80300 	    ldrb r0,[T1,r3]
 872 06c0 2428     	    cmp r0,'$' 
 873 06c2 02D1     	    bne 2f 
 874 06c4 4FF01001 	    mov r1,#16 // hexadecimal number 
 875 06c8 03E0     	    b 3f  
 876 06ca 2628     	2:  cmp r0,#'&' 
 877 06cc 03D1     	    bne 4f
 878 06ce 4FF00201 	    mov r1,#2 //binary number  
 879 06d2 03F10103 	3:  add r3,#1
 880 06d6 03EB0800 	4:  add r0,r3,T1 
 881 06da 00B5FFF7 	    _CALL atoi 
 881      FEFF5DF8 
 881      04EB
 882 06e4 10B1     	    cbz r0,9f
 883 06e6 0344     	    add r3,r0
 884 06e8 4FF01B00 	    mov r0,#TK_INTGR
 885 06ec 0040     	9:  ands r0,r0   
 886 06ee 7047     	    _RET 
 887              	
 888              	/*********************************************
 889              	    parse_quote 
 890              	    parse quoted string 
 891              	    input: 
 892              	      r3 		tib index  
 893              	      T1    tib adr
 894              	      T2    insert point in pad  
 895              	    output:
 896              	      r0     token attribute 
 897              	      r1 		*str 
 898              	      r3     tib index updated    
 899              	      T2     updated 
 900              	      use:
 901              	*********************************************/
 902              	    _FUNC parse_quote
 903 06f0 4DF8049D 	    push {T2} 
 904 06f4 18F80300 	1:  ldrb r0,[T1,r3]
 905 06f8 03F10103 	    add r3,#1 
 906 06fc 2228     	    cmp r0,#'"'
 907 06fe 09D0     	    beq 9f 
 908 0700 5C28     	    cmp r0,#'\\'
 909 0702 04D1     	    bne 2f 
ARM GAS  tinyBasic.s 			page 31


 910 0704 00B500F0 	    _CALL get_escaped_char 
 910      0DF85DF8 
 910      04EB
 911 070e 09F8010B 	2:  strb r0,[T2],#1
 912 0712 EFE7     	    b 1b 
 913 0714 80EA0000 	9:  eor  r0,r0
 914 0718 09F8010B 	    strb r0,[T2],#1
 915 071c 4FF01C00 	    mov r0,#TK_QSTR
 916 0720 02BC     	    pop {r1}
 917 0722 7047     	    _RET 
 918              	
 919              	/**********************************************
 920              	    get_escaped_char 
 921              	    convert "\c" in quoted string 
 922              	    input:
 923              	      r0 
 924              	      r3   index 
 925              	      T1   tib 
 926              	    output:
 927              	      r0   replacement char
 928              	      r3   updated 
 929              	    use:
 930              	      r1   *table 
 931              	      r2   temp 
 932              	**********************************************/
 933              	    _FUNC get_escaped_char 
 934 0724 06B4     	    push {r1,r2}
 935 0726 18F80300 	    ldrb r0,[T1,r3]
 936 072a 03F10103 	    add r3,#1
 937 072e 2228     	    cmp r0,#'"' 
 938 0730 0BD0     	    beq 9f 
 939 0732 DFF88C1A 	1:  ldr r1,=escaped 
 940 0736 11F8012B 	2:  ldrb r2,[r1],#1
 941 073a 12B1     	    cbz r2,6f 
 942 073c 8242     	    cmp r2,r0 
 943 073e 02D0     	    beq 7f 
 944 0740 F9E7     	    b 2b
 945 0742 A0F10702 	6:  sub r2,r0,#7     
 946 0746 02F10700 	7:  add r0,r2,#7
 947 074a 06BC     	9:  pop {r1,r2}   
 948 074c 7047     	    _RET
 949              	
 950 074e 6162746E 	escaped: .asciz "abtnvfr"
 950      76667200 
 951              	
 952              	/*********************************************
 953              	   skip character in TIB 
 954              	   input:
 955              	      r0    character to skip 
 956              	      r3    tib index 
 957              	      T1    tib adr
 958              	    output: 
 959              	      r3    updated
 960              	    use:
 961              	      r1     
 962              	**********************************************/   
 963 0756 00BF     	    _FUNC skip
ARM GAS  tinyBasic.s 			page 32


 964 0758 02B4     	    push {r1} 
 965 075a 18F80310 	1:  ldrb r1,[T1,r3]
 966 075e 8142     	    cmp r1,r0
 967 0760 02D1     	    bne 2f
 968 0762 03F10103 	    add r3,#1 
 969 0766 F8E7     	    b 1b 
 970 0768 2360     	2:  str r3,[UPP,#IN_SAVED]
 971 076a 02BC     	    pop {r1}
 972 076c 7047     	    _RET
 973              	
 974              	/********************************************
 975              	    upper
 976              	    convert character in upper case 
 977              	    input: 
 978              	      r0   character 
 979              	    output:
 980              	      r0   upper case character 
 981              	*********************************************/
 982 076e 00BF     	    _FUNC upper 
 983 0770 6128     	    cmp r0,#'a' 
 984 0772 03DB     	    blt 9f 
 985 0774 7A28     	    cmp r0,#'z' 
 986 0776 01DC     	    bgt 9f 
 987 0778 00F05F00 	    and r0,#0x5f 
 988 077c 7047     	9:  _RET 
 989              	
 990              	/***************************************
 991              	   is_digit 
 992              	   check if char is decimal digit.
 993              	   convert to decimal digit.
 994              	   input:
 995              	      r0    char 
 996              	   output:
 997              	      r0        if Z then converted digit else not changed
 998              	      Z flag    1 true | 0 false  
 999              	***************************************/
 1000 077e 00BF     	    _GBL_FUNC is_digit 
 1001 0780 02B4     	    push {r1} 
 1002 0782 4FF0FF31 	    mov r1,#-1   
 1003 0786 3028     	    cmp r0,#'0' 
 1004 0788 05DB     	    blt 9f
 1005 078a 3A28     	    cmp r0,'9'+1
 1006 078c 03D5     	    bpl 9f 
 1007 078e 81EA0101 	    eor r1,r1 
 1008 0792 A0F13000 	    sub r0,#'0'  
 1009              	9:   
 1010 0796 0940     	    ands r1,r1
 1011 0798 02BC     	    pop {r1} 
 1012 079a 7047     	    _RET 
 1013              	
 1014              	/***************************************
 1015              	    is_hex 
 1016              	    check for hexadecimal digit 
 1017              	    convert to hex digit.
 1018              	    input:
 1019              	      r0    
 1020              	    output:
ARM GAS  tinyBasic.s 			page 33


 1021              	      r0         if Z then converted digit 
 1022              	      Z  flag    1 true | 0 false         
 1023              	***************************************/
 1024              	    _FUNC is_hex 
 1025 079c 02B4     	    push {r1}
 1026 079e 80EA0000 	    eor r0,r0 
 1027 07a2 4128     	    cmp r0,#'A' 
 1028 07a4 01D4     	    bmi 1f 
 1029 07a6 A0F10700 	    sub r0,#7 
 1030 07aa A0F13000 	1:  sub r0,#'0'
 1031 07ae 01D4     	    bmi 2f 
 1032 07b0 1028     	    cmp r0,#16
 1033 07b2 01D4     	    bmi 9f 
 1034 07b4 6FEA0101 	2:  mvn r1,r1  
 1035 07b8 0940     	9:  ands r1,r1 
 1036 07ba 02BC     	    pop {r1}
 1037 07bc 7047     	    _RET 
 1038              	
 1039              	/***************************************
 1040              	    is_letter 
 1041              	    check if character is {a..z,A..Z,_} 
 1042              	  input:
 1043              	    r0   character 
 1044              	  output: 
 1045              	    r0       same character 
 1046              	    Z flag   1 true | 0 false  
 1047              	****************************************/
 1048 07be 00BF     	    _FUNC is_letter
 1049 07c0 02B4     	    push {r1} 
 1050 07c2 81EA0101 	    eor r1,r1 
 1051 07c6 4128     	    cmp r0,#'A' 
 1052 07c8 05D4     	    bmi 8f 
 1053 07ca 5B28     	    cmp r0,#'Z'+1 
 1054 07cc 05D4     	    bmi 9f
 1055 07ce 6128     	    cmp r0,#'a' 
 1056 07d0 01D4     	    bmi 8f 
 1057 07d2 7B28     	    cmp r0,#'z'+1
 1058 07d4 01D4     	    bmi 9f  
 1059 07d6 6FEA0101 	8:  mvn r1,r1  
 1060 07da 0940     	9:  ands r1,r1 
 1061 07dc 02BC     	    pop {r1}
 1062 07de 7047     	    _RET 
 1063              	
 1064              	
 1065              	/******************************************
 1066              	    atoi 
 1067              	    convert ascii to integer 
 1068              	    input:
 1069              	      r0   *buffer 
 1070              	      r1   base 
 1071              	    output:
 1072              	      r0   0 no integer found 
 1073              	      r1   integer
 1074              	    use:
 1075              	      r2   base  
 1076              	      T1   *buffer 
 1077              	      T2   digit count  
ARM GAS  tinyBasic.s 			page 34


 1078              	******************************************/
 1079              	    _GBL_FUNC atoi 
 1080 07e0 2DE90403 	    push {r2,T1,T2}
 1081 07e4 8046     	    mov T1,r0  // *buffer 
 1082 07e6 0A46     	    mov r2,r1  // base  
 1083 07e8 81EA0101 	    eor r1,r1  // converted integer 
 1084 07ec 89EA0909 	    eor T2,T2  // digit count 
 1085 07f0 18F8010B 	1:  ldrb r0,[T1],#1
 1086 07f4 00B5FFF7 	    _CALL upper 
 1086      BBFF5DF8 
 1086      04EB
 1087 07fe 3028     	    cmp r0,#'0'
 1088 0800 0FD4     	    bmi 8f
 1089 0802 3A28     	    cmp r0,#'9'+1 
 1090 0804 03D4     	    bmi 2f 
 1091 0806 4128     	    cmp r0,#'A'
 1092 0808 0BD4     	    bmi 8f 
 1093 080a A0F10700 	    sub r0,#7 
 1094 080e A0F13000 	2:  sub r0,#'0' 
 1095 0812 9042     	    cmp r0,r2
 1096 0814 05D5     	    bpl 8f  
 1097 0816 02FB01F1 	    mul r1,r2 
 1098 081a 0144     	    add r1,r0
 1099 081c 09F10109 	    add T2,#1
 1100 0820 E6E7     	    b 1b 
 1101 0822 4846     	8:  mov r0,T2  
 1102 0824 BDE80403 	    pop {r2,T1,T2}
 1103 0828 7047     	    _RET 
 1104              	
 1105              	
 1106              	
 1107              	/*******************
 1108              	    DECOMPILER 
 1109              	*******************/
 1110              	
 1111              	/********************************************
 1112              	    cmd_name 
 1113              	    search bytecode in dictionary and 
 1114              	    return its name 
 1115              	  input:
 1116              	    r0    token type 
 1117              	    r1    keyword bytecode 
 1118              	  ouput:
 1119              	    r0    name string 
 1120              	  use:
 1121              	    T1    link 
 1122              	    T2    tmp 
 1123              	*********************************************/
 1124 082a 00BF     	    _FUNC cmd_name 
 1125 082c 2DE90003 	    push {T1,T2}
 1126 0830 DFF88889 	    ldr T1,=kword_dict 
 1127 0834 58F8049C 	1:  ldr T2,[T1,#-4]
 1128 0838 8145     	    cmp T2,r0 
 1129 083a 03D1     	    bne 3f 
 1130 083c 58F8089C 	    ldr T2,[T1,#-8]
 1131 0840 8945     	    cmp T2,r1 
 1132 0842 04D0     	    beq 2f 
ARM GAS  tinyBasic.s 			page 35


 1133 0844 58F80C8C 	3:  ldr T1,[T1,#-12]
 1134 0848 B8F1000F 	    cmp T1,#0
 1135 084c F2D1     	    bne 1b  
 1136 084e 4046     	2:  mov r0,T1 
 1137 0850 BDE80003 	    pop {T1,T2}
 1138 0854 7047     	    _RET
 1139              	
 1140              	/*****************************
 1141              	  decompile_line 
 1142              	  detokenize BASIC line 
 1143              	  input:
 1144              	    r0  *token list 
 1145              	    r1  *output buffer 
 1146              	  output:
 1147              	    r0  *output buffer (.asciz) 
 1148              	  use:
 1149              	    T1  *output buffer
 1150              	    BPTR  *token list
 1151              	    IN  offset in token list  
 1152              	******************************/
 1153 0856 00BF     	    _GBL_FUNC decompile_line
 1154 0858 2DE90E01 	    push {r1,r2,r3,T1} 
 1155 085c 8346     	    mov BPTR,r0 
 1156 085e 4FF0000A 	    mov IN,#0
 1157 0862 8846     	    mov T1,r1 
 1158 0864 3BF80A00 	    ldrh r0,[BPTR,IN]
 1159 0868 0AF1020A 	    add IN,#2 
 1160 086c 4FF00A01 	    mov r1,#10 
 1161 0870 00B5FFF7 	    _CALL itoa
 1161      FEFF5DF8 
 1161      04EB
 1162 087a 4146     	    mov r1,T1
 1163 087c 00B5FFF7 	    _CALL strcpy
 1163      FEFF5DF8 
 1163      04EB
 1164 0886 4046     	    mov r0,T1 
 1165 0888 00B5FFF7 	    _CALL strlen
 1165      FEFF5DF8 
 1165      04EB
 1166 0892 8044     	    add T1,r0 
 1167 0894 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1168 0898 0AF1010A 	    add IN,#1 
 1169 089c 6060     	    str r0,[UPP,#COUNT]
 1170              	decomp_loop:
 1171 089e 00B500F0 	    _CALL next_token
 1171      D0FA5DF8 
 1171      04EB
 1172 08a8 0028     	    cmp r0,#TK_NONE 
 1173 08aa 00F0AD80 	    beq 9f
 1174 08ae 1028     	    cmp r0,#TK_GE 
 1175 08b0 05D5     	    bpl 1f 
 1176 08b2 DFF81019 	    ldr r1,=single_char 
 1177 08b6 085C     	    ldrb r0,[r1,r0]
 1178 08b8 08F8010B 	    strb r0,[T1],#1 
 1179 08bc EFE7     	    b decomp_loop
 1180              	1: 
 1181 08be 1328     	    cmp r0,#TK_CHAR  
ARM GAS  tinyBasic.s 			page 36


 1182 08c0 14D5     	    bpl 2f 
 1183 08c2 A0F11000 	    sub r0,#TK_GE
 1184 08c6 4FEA8000 	    lsl r0,#2 
 1185 08ca DFF8FC18 	    ldr r1,=relop_str 
 1186 08ce 0858     	    ldr r0,[r1,r0]
 1187 08d0 4146     	    mov r1,T1 
 1188 08d2 00B5FFF7 	    _CALL strcpy 
 1188      FEFF5DF8 
 1188      04EB
 1189 08dc 4046     	    mov r0,T1 
 1190 08de 00B5FFF7 	    _CALL strlen 
 1190      FEFF5DF8 
 1190      04EB
 1191 08e8 8044     	    add T1,r0 
 1192 08ea D8E7     	    b decomp_loop
 1193 08ec 1328     	2:  cmp r0,#TK_CHAR 
 1194 08ee 06D1     	    bne 3f 
 1195 08f0 4FF05C00 	    mov r0,#'\\'
 1196 08f4 08F8010B 	    strb r0,[T1],#1
 1197 08f8 08F8011B 	    strb r1,[T1],#1
 1198              	//    mov r0,#SPACE 
 1199              	//    strb r0,[T1],#1
 1200 08fc CFE7     	    b decomp_loop 
 1201 08fe 1428     	3:  cmp r0,#TK_VAR 
 1202 0900 08D1     	    bne 4f 
 1203 0902 01F14100 	    add r0,r1,'A'
 1204 0906 08F8010B 	    strb r0,[T1],#1 
 1205 090a 4FF02000 	    mov r0,#SPACE 
 1206 090e 08F8010B 	    strb r0,[T1],#1
 1207 0912 C4E7     	    b decomp_loop 
 1208 0914 1A28     	4:  cmp r0,#TK_LABEL 
 1209 0916 2BD5     	    bpl 5f   
 1210 0918 03B4     	    push {r0,r1}
 1211              	//    mov r0,r1 
 1212 091a 00B5FFF7 	    _CALL cmd_name
 1212      86FF5DF8 
 1212      04EB
 1213 0924 4146     	    mov r1,T1 
 1214 0926 00B5FFF7 	    _CALL strcpy 
 1214      FEFF5DF8 
 1214      04EB
 1215 0930 4046     	    mov r0,T1 
 1216 0932 00B5FFF7 	    _CALL strlen 
 1216      FEFF5DF8 
 1216      04EB
 1217 093c 8044     	    add T1,r0
 1218 093e 03BC     	    pop {r0,r1}
 1219 0940 4FF02000 	    mov r0,#SPACE 
 1220 0944 08F8010B 	    strb r0,[T1],#1 
 1221 0948 3B29     	    cmp r1,#REM_IDX
 1222 094a A8D1     	    bne decomp_loop 
 1223 094c 0BEB0A00 	    add r0,BPTR,IN
 1224 0950 4146     	    mov r1,T1   
 1225 0952 00B5FFF7 	    _CALL strcpy
 1225      FEFF5DF8 
 1225      04EB
 1226 095c 4046     	    mov r0,T1 
ARM GAS  tinyBasic.s 			page 37


 1227 095e 00B5FFF7 	    _CALL strlen
 1227      FEFF5DF8 
 1227      04EB
 1228 0968 8044     	    add T1,r0
 1229 096a D4F804A0 	    ldr IN,[UPP,#COUNT]
 1230 096e 4BE0     	    b 9f 
 1231 0970 1B28     	5:  cmp r0,#TK_INTGR
 1232 0972 14D1     	    bne 6f  
 1233 0974 0846     	    mov r0,r1 
 1234 0976 A169     	    ldr r1,[UPP,#BASE]
 1235 0978 00B5FFF7 	    _CALL itoa
 1235      FEFF5DF8 
 1235      04EB
 1236 0982 4146     	    mov r1,T1 
 1237 0984 00B5FFF7 	    _CALL strcpy
 1237      FEFF5DF8 
 1237      04EB
 1238 098e 4046     	    mov r0,T1 
 1239 0990 00B5FFF7 	    _CALL strlen
 1239      FEFF5DF8 
 1239      04EB
 1240 099a 8044     	    add T1,r0 
 1241 099c 7FE7     	    b decomp_loop 
 1242 099e 1A28     	6:  cmp r0,#TK_LABEL
 1243 09a0 1BD1     	    bne 7f
 1244 09a2 4FF01902 	    mov r2,#25
 1245 09a6 4FF6FF73 	    mov r3,#0xffff 
 1246 09aa C3F6FF73 	    movt r3,#0x3fff 
 1247 09ae 01EA0301 	0:  and r1,r3 
 1248 09b2 4FEA5313 	    lsr r3,#5 
 1249 09b6 31FA02F0 	    lsrs r0,r1,r2 
 1250 09ba 07D0     	    beq 2f
 1251 09bc 00F14000 	    add r0,#'@'
 1252 09c0 5B28     	    cmp r0,#'['
 1253 09c2 01D1     	    bne 1f
 1254 09c4 00F10400 	    add r0,#4 
 1255 09c8 08F8010B 	1:  strb r0,[T1],#1
 1256 09cc 053A     	2:  subs r2,#5 
 1257 09ce EEDA     	    bge 0b
 1258 09d0 4FF02000 	    mov r0,#SPACE 
 1259 09d4 08F8010B 	    strb r0,[T1],#1  
 1260 09d8 61E7     	    b decomp_loop
 1261 09da 4FF02200 	7:  mov r0,#'"'
 1262 09de 08F8010B 	    strb r0,[T1],#1 
 1263 09e2 0846     	    mov r0,r1
 1264 09e4 4146     	    mov r1,T1  
 1265 09e6 00B5FFF7 	    _CALL strcpy
 1265      FEFF5DF8 
 1265      04EB
 1266 09f0 4046     	    mov r0,T1 
 1267 09f2 00B5FFF7 	    _CALL strlen 
 1267      FEFF5DF8 
 1267      04EB
 1268 09fc 8044     	    add T1,r0 
 1269 09fe 4FF02200 	    mov r0,#'"'
 1270 0a02 08F8010B 	    strb r0,[T1],#1 
 1271 0a06 4AE7     	    b decomp_loop
ARM GAS  tinyBasic.s 			page 38


 1272 0a08 80EA0000 	9:  eor r0,r0 
 1273 0a0c 88F80000 	    strb r0,[T1]
 1274 0a10 BDE80E01 	    pop {r1,r2,r3,T1}
 1275 0a14 0846     	    mov r0,r1 
 1276 0a16 7047     	    _RET 
 1277              	
 1278 0a18 240A0000 	relop_str: .word ge_str,le_str,ne_str 
 1278      270A0000 
 1278      2A0A0000 
 1279 0a24 3E3D00   	ge_str: .asciz ">="
 1280 0a27 3C3D00   	le_str: .asciz "<="
 1281 0a2a 3C3E00   	ne_str: .asciz "<>"
 1282              	
 1283              	single_char:
 1284 0a2d 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1284      2328292B 
 1284      2D2A2F25 
 1285 0a39 403D3E3C 	  .byte '@','=', '>', '<' 
 1286              	
 1287              	
 1288              	
 1289              	
 1290              	/**********************************
 1291              	  modulo 
 1292              	  compute r0 mod r1
 1293              	  input:
 1294              	    r0   dividend
 1295              	    r1   divisor 
 1296              	  output:
 1297              	    r0   TK_INTGR 
 1298              	    r1   r0 mod r1 
 1299              	*********************************/
 1300 0a3d 0000BF   	    _GBL_FUNC modulo 
 1301 0a40 01B4     	    push {r0}
 1302 0a42 B0FBF1F0 	    udiv r0,r1 
 1303 0a46 01FB00F0 	    mul  r0,r1 
 1304 0a4a 02BC     	    pop {r1}
 1305 0a4c A1EB0001 	    sub r1,r0
 1306 0a50 4FF01B00 	    mov r0,#TK_INTGR
 1307 0a54 7047     	    _RET 
 1308              	
 1309              	/**********************************
 1310              	      BASIC commands 
 1311              	**********************************/
 1312              	
 1313              	/*********************************
 1314              	    syntax_error 
 1315              	    display syntax error message and 
 1316              	    abort program 
 1317              	  input:
 1318              	    none  
 1319              	  output: 
 1320              	    none 
 1321              	  use:
 1322              	*********************************/
 1323 0a56 00BF     	    _FUNC syntax_error 
 1324 0a58 4FF00200 	    mov r0,#ERR_SYNTAX
ARM GAS  tinyBasic.s 			page 39


 1325 0a5c 00E0     	    b tb_error 
 1326              	
 1327              	/*********************************
 1328              	    tb_error 
 1329              	    display BASIC error and 
 1330              	    abort program. 
 1331              	  input:
 1332              	    r0    error code   
 1333              	  output: 
 1334              	    none 
 1335              	  use:
 1336              	    r1    temp 
 1337              	*********************************/
 1338 0a5e 00BF     	    _FUNC tb_error 
 1339 0a60 216C     	    ldr r1,[UPP,#FLAGS]
 1340 0a62 11F0200F 	    tst r1,#FCOMP
 1341 0a66 43D1     	    bne compile_error
 1342              	rt_error:
 1343 0a68 5246     	    mov r2,IN 
 1344 0a6a 01B4     	    push {r0}
 1345 0a6c DFF85C07 	    ldr r0,=rt_error_msg 
 1346 0a70 00B5FFF7 	    _CALL uart_puts 
 1346      FEFF5DF8 
 1346      04EB
 1347 0a7a 01BC     	    pop {r0}
 1348 0a7c DFF85017 	    ldr r1,=err_msg  
 1349 0a80 4FEA8000 	    lsl r0,#2 
 1350 0a84 0858     	    ldr r0,[r1,r0]
 1351 0a86 00B5FFF7 	    _CALL uart_puts
 1351      FEFF5DF8 
 1351      04EB
 1352              	// decompile and print faulty line      
 1353 0a90 5846     	    mov r0,BPTR
 1354 0a92 5246     	    mov r2,IN  
 1355 0a94 DFF80813 	    ldr r1,pad 
 1356 0a98 00B5FFF7 	    _CALL decompile_line
 1356      FEFF5DF8 
 1356      04EB
 1357 0aa2 00B5FFF7 	    _CALL uart_puts 
 1357      FEFF5DF8 
 1357      04EB
 1358 0aac 00B5FFF7 	    _CALL cr 
 1358      FEFF5DF8 
 1358      04EB
 1359              	// print error offset on line      
 1360 0ab6 DFF81C07 	    ldr r0,=token_at_msg 
 1361 0aba 00B5FFF7 	    _CALL uart_puts 
 1361      FEFF5DF8 
 1361      04EB
 1362 0ac4 1046     	    mov r0,r2 
 1363 0ac6 4FF01001 	    mov r1,#16 
 1364 0aca 00B5FFF7 	    _CALL print_int
 1364      FEFF5DF8 
 1364      04EB
 1365 0ad4 00B5FFF7 	    _CALL cr
 1365      FEFF5DF8 
 1365      04EB
ARM GAS  tinyBasic.s 			page 40


 1366              	// dump tokenize line 
 1367 0ade 5846     	    mov r0,BPTR
 1368 0ae0 8278     	    ldrb r2,[r0,#2]
 1369 0ae2 00B500F0 	    _CALL dump01 
 1369      24FA5DF8 
 1369      04EB
 1370 0aec FFF7FEBF 	    b warm_start 
 1371              	compile_error:
 1372 0af0 DFF8DC16 	    ldr r1,=err_msg 
 1373 0af4 4FEA8000 	    lsl r0,#2 
 1374 0af8 0858     	    ldr r0,[r1,r0]
 1375 0afa 00B5FFF7 	    _CALL uart_puts
 1375      FEFF5DF8 
 1375      04EB
 1376 0b04 A068     	    ldr r0,[UPP,#BASICPTR]
 1377 0b06 00B5FFF7 	    _CALL uart_puts
 1377      FEFF5DF8 
 1377      04EB
 1378 0b10 00B5FFF7 	    _CALL cr
 1378      FEFF5DF8 
 1378      04EB
 1379 0b1a 2068     	    ldr r0,[UPP,#IN_SAVED]
 1380 0b1c 00B5FFF7 	    _CALL spaces 
 1380      FEFF5DF8 
 1380      04EB
 1381 0b26 4FF05E00 	    mov r0,#'^' 
 1382 0b2a 00B5FFF7 	    _CALL uart_putc
 1382      FEFF5DF8 
 1382      04EB
 1383 0b34 00B5FFF7 	    _CALL cr
 1383      FEFF5DF8 
 1383      04EB
 1384 0b3e FFF7FEBF 	    b  warm_start  
 1385              	    
 1386 0b42 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1386      74696D65 
 1386      20657272 
 1386      6F723A20 
 1386      00
 1387 0b53 746F6B65 	token_at_msg: .asciz "token offset: "
 1387      6E206F66 
 1387      66736574 
 1387      3A2000
 1388              	
 1389              	
 1390              	err_msg:
 1391 0b62 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1391      00000000 
 1391      0D000000 
 1391      1B000000 
 1391      34000000 
 1392 0b7a 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1392      6F000000 
 1392      89000000 
 1392      9A000000 
 1392      AB000000 
 1393 0b8e B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ARM GAS  tinyBasic.s 			page 41


 1393      EA000000 
 1393      FA000000 
 1393      0E010000 
 1393      21010000 
 1394 0ba2 2E010000 	   .word err_cant_prog 
 1395              	
 1396              	    .section .rodata.tb_error 
 1397              	
 1398 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1398      72792066 
 1398      756C6C0A 
 1398      00
 1399 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1399      61782065 
 1399      72726F72 
 1399      0A00
 1400 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1400      206F7065 
 1400      72617469 
 1400      6F6E206F 
 1400      76657266 
 1401 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1401      73696F6E 
 1401      20627920 
 1401      300A00
 1402 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1402      6C696420 
 1402      6C696E65 
 1402      206E756D 
 1402      6265722E 
 1403 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1403      74696D65 
 1403      206F6E6C 
 1403      79207573 
 1403      6167652E 
 1404 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1404      616E6420 
 1404      6C696E65 
 1404      206F6E6C 
 1404      79207573 
 1405 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1405      69636174 
 1405      65206E61 
 1405      6D652E0A 
 1405      00
 1406 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1406      206E6F74 
 1406      20666F75 
 1406      6E642E0A 
 1406      00
 1407 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1407      76616C75 
 1407      652E0A00 
 1408 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1408      20696E20 
 1408      65787465 
 1408      6E646564 
ARM GAS  tinyBasic.s 			page 42


 1408      206D656D 
 1409 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1409      61746120 
 1409      666F756E 
 1409      642E0A00 
 1410 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1410      726F6772 
 1410      616D2069 
 1410      6E205241 
 1410      4D210A00 
 1411 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1411      20737973 
 1411      74656D20 
 1411      66756C6C 
 1411      2E0A00
 1412 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1412      65722066 
 1412      756C6C0A 
 1412      00
 1413 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1413      74206D6F 
 1413      64696679 
 1413      2070726F 
 1413      6772616D 
 1414              	
 1415 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1415      2074696D 
 1415      65206572 
 1415      726F722C 
 1415      2000
 1416 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1416      70696C65 
 1416      20657272 
 1416      6F722C20 
 1416      00
 1417 018d 6C617374 	tk_id: .asciz "last token id: "
 1417      20746F6B 
 1417      656E2069 
 1417      643A2000 
 1418              	
 1419              	
 1420              	    .section  .text , "ax", %progbits 
 1421              	
 1422              	/*********************************
 1423              	   skip_line 
 1424              	   data and remark line are skipped
 1425              	   by the interpreter 
 1426              	***********************************/
 1427 0ba6 00BF     	    _FUNC skip_line 
 1428 0ba8 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1429 0bac 7047     	    _RET 
 1430              	
 1431              	
 1432              	/*********************************
 1433              	   BASIC: BTGL adr, mask   
 1434              	   toggle bits [adr]=[adr]^mask  
 1435              	   input:
ARM GAS  tinyBasic.s 			page 43


 1436              	     r0    adr 
 1437              	     r1    mask 
 1438              	    output;
 1439              	      none 
 1440              	    use:
 1441              	      T1   temp
 1442              	      T2   temp  
 1443              	*******************************/     
 1444 0bae 00BF     	    _FUNC BTGL 
 1445              	
 1446 0bb0 7047     	    _RET 
 1447              	
 1448              	/***************************************
 1449              	   kword_cmp
 1450              	   compare keyword to dict entry
 1451              	  input:
 1452              	    r0  keyword 
 1453              	    r1  dict entry 
 1454              	    r2  character count 
 1455              	  output:
 1456              	    r0  0 not same | -1 same 
 1457              	  use:
 1458              	    r6   result  
 1459              	    T1   char 1
 1460              	    T2   char 2
 1461              	**************************************/   
 1462 0bb2 00BF     	    _FUNC kword_cmp 
 1463 0bb4 2DE94003 	    push {r6,T1,T2}
 1464 0bb8 4FF0FF36 	    mov r6,#-1 
 1465 0bbc 4AB1     	1:  cbz r2,9f       
 1466 0bbe 10F8018B 	    ldrb T1,[r0],#1
 1467 0bc2 11F8019B 	    ldrb T2,[r1],#1
 1468 0bc6 A2F10102 	    sub r2,#1
 1469 0bca C845     	    cmp T1,T2
 1470 0bcc F6D0     	    beq 1b 
 1471 0bce 86EA0606 	    eor r6,r6  
 1472 0bd2 3046     	9:  mov r0,r6
 1473 0bd4 BDE84003 	    pop {r6,T1,T2}
 1474 0bd8 7047     	    _RET 
 1475              	
 1476              	/***********************************************
 1477              	    search_dict 
 1478              	    search keyword in dictionary
 1479              	   input:
 1480              	  	 r0   keyword 
 1481              	     r1		dictionary first name field address  
 1482              	   output:
 1483              	     r0 		token attribute 
 1484              	     r1		  cmd_index if r0!=TK_NONE  
 1485              	   use:
 1486              	     r3   length keyword 
 1487              	     T1   keyword
 1488              	     T2   link  
 1489              	**********************************************/
 1490 0bda 00BF     	  _FUNC search_dict
 1491 0bdc 2DE90C03 	  push {r2,r3,T1,T2}
 1492 0be0 8046     	  mov T1,r0 
ARM GAS  tinyBasic.s 			page 44


 1493 0be2 00B5FFF7 	  _CALL strlen 
 1493      FEFF5DF8 
 1493      04EB
 1494 0bec 0346     	  mov r3,r0  
 1495              	1:  
 1496 0bee 8946     	   mov T2,r1  // keep for linking   
 1497 0bf0 0878     	   ldrb r0,[r1] 
 1498 0bf2 78B1     	   cbz r0,9f // null byte, end of dictionary
 1499 0bf4 4046     	   mov r0,T1
 1500 0bf6 1A46     	   mov r2,r3   
 1501 0bf8 00B5FFF7 	   _CALL kword_cmp  
 1501      DBFF5DF8 
 1501      04EB
 1502 0c02 18B9     	   cbnz r0,2f 
 1503 0c04 4946     	   mov r1,T2
 1504 0c06 51F80C1C 	   ldr r1,[r1,#-12]
 1505 0c0a F0E7     	   b 1b   
 1506              	2: // found
 1507 0c0c 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1508 0c10 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1509 0c14 BDE80C03 	9: pop {r2,r3,T1,T2}
 1510 0c18 7047     	   _RET 
 1511              	
 1512              	
 1513              	/**************************
 1514              	    INTERPRETER 
 1515              	*************************/
 1516              	
 1517              	/*********************************
 1518              	   cold_start 
 1519              	   initialize BASIC interpreter 
 1520              	   never leave 
 1521              	   input:
 1522              	     none 
 1523              	   output:
 1524              	    none 
 1525              	*********************************/
 1526              	  .type cold_start, %function 
 1527              	  .global cold_start 
 1528              	cold_start: 
 1529 0c1a 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1529      C2F20004 
 1530 0c22 DFF85400 	    ldr r0,src_addr 
 1531 0c26 DFF85410 	    ldr r1,dest_addr
 1532 0c2a 0968     	    ldr r1,[r1] 
 1533 0c2c 0C44     	    add UPP,r1 // system variables base address   
 1534              	// clear RAM
 1535 0c2e 2046     	    mov r0,UPP  
 1536 0c30 DFF86811 	    ldr r1,tib 
 1537 0c34 82EA0202 	    eor r2,r2 
 1538 0c38 40F8042B 	1:  str r2,[r0],#4 
 1539 0c3c 8842     	    cmp r0,r1 
 1540 0c3e FBD4     	    bmi 1b 
 1541              	//copy initialized system variables to ram 
 1542 0c40 DFF83400 	    ldr r0,src_addr 
 1543 0c44 2146     	    mov r1,UPP 
 1544 0c46 DFF83820 	    ldr r2,sysvar_size
ARM GAS  tinyBasic.s 			page 45


 1545 0c4a 00B5FFF7 	    _CALL cmove
 1545      FEFF5DF8 
 1545      04EB
 1546 0c54 00B500F0 	    _CALL prt_version
 1546      15F85DF8 
 1546      04EB
 1547 0c5e 00B500F0 	    _CALL clear_basic 
 1547      62F85DF8 
 1547      04EB
 1548 0c68 00B5FFF7 	    _CALL search_free 
 1548      FEFF5DF8 
 1548      04EB
 1549 0c72 E062     	    str r0,[UPP,#FSFREE] 
 1550 0c74 FFF7FEBF 	    b warm_start    
 1551              	src_addr:
 1552 0c78 00000000 	  .word uzero
 1553              	dest_addr:
 1554 0c7c 00000000 	  .word vectors_size
 1555 0c80 D4000000 	sysvar_size: .word ulast-uzero 
 1556              	
 1557              	/************************************
 1558              	    print firmware version 
 1559              	    input: 
 1560              	      none 
 1561              	    output:
 1562              	      none 
 1563              	    use:
 1564              	      r0 
 1565              	***********************************/
 1566              	    _FUNC prt_version 
 1567 0c84 DFF85005 	    ldr r0,=version_msg 
 1568 0c88 00B5FFF7 	    _CALL uart_puts
 1568      FEFF5DF8 
 1568      04EB
 1569 0c92 9FF87400 	    ldrb r0,version 
 1570 0c96 4FEA1010 	    lsr r0,#4 
 1571 0c9a 00F13000 	    add r0,#'0' 
 1572 0c9e 3A28     	    cmp r0,#'9'+1 
 1573 0ca0 01D4     	    bmi 1f 
 1574 0ca2 00F10700 	    add r0,#7 
 1575              	  1:
 1576 0ca6 00B5FFF7 	    _CALL uart_putc 
 1576      FEFF5DF8 
 1576      04EB
 1577 0cb0 4FF02E00 	    mov r0,#'. 
 1578 0cb4 00B5FFF7 	    _CALL uart_putc 
 1578      FEFF5DF8 
 1578      04EB
 1579 0cbe 9FF84800 	    ldrb r0,version 
 1580 0cc2 00F00F00 	    and r0,#15 
 1581 0cc6 00F13000 	    add r0,'0' 
 1582 0cca 3A28     	    cmp r0,#'9'+1 
 1583 0ccc 01D4     	    bmi 1f 
 1584 0cce 00F10700 	    add r0,#7
 1585              	  1: 
 1586 0cd2 00B5FFF7 	    _CALL uart_putc 
 1586      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 46


 1586      04EB
 1587 0cdc 00B5FFF7 	    _CALL cr
 1587      FEFF5DF8 
 1587      04EB
 1588 0ce6 7047     	    _RET  
 1589              	version_msg:
 1590 0ce8 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1590      65207069 
 1590      6C6C2074 
 1590      696E7920 
 1590      42415349 
 1591              	version:
 1592 0d08 10       	    .byte 0x10 
 1593 0d09 0000BF   	    .p2align 2 
 1594              	
 1595              	
 1596              	/*****************************
 1597              	    clear_vars 
 1598              	    initialize variables to 0
 1599              	  input:
 1600              	    none 
 1601              	  output:
 1602              	    none 
 1603              	  use:
 1604              	    r0,r1,r2 
 1605              	*****************************/
 1606              	    _FUNC clear_vars 
 1607 0d0c 07B4     	    push {r0,r1,r2}
 1608 0d0e 80EA0000 	    eor r0,r0 
 1609 0d12 04F16001 	    add r1,UPP,#VARS
 1610 0d16 4FF01A02 	    mov r2,#26
 1611 0d1a 41F8040B 	1:  str r0,[r1],#4 
 1612 0d1e 013A     	    subs r2,#1
 1613 0d20 FBD1     	    bne 1b  
 1614 0d22 07BC     	    pop {r0,r1,r2}
 1615 0d24 7047     	    _RET 
 1616              	
 1617              	/*****************************
 1618              	   clear_basic 
 1619              	   reset BASIC system variables 
 1620              	   and clear variables and RAM 
 1621              	*****************************/
 1622 0d26 00BF     	    _FUNC clear_basic
 1623 0d28 80EA0000 	  	eor r0,r0
 1624 0d2c 2064     	    str r0,[UPP,#FLAGS] 
 1625 0d2e 6060     	    str r0,[UPP,#COUNT]
 1626 0d30 2060     	    str r0,[UPP,#IN_SAVED]
 1627 0d32 A060     	    str r0,[UPP,#BASICPTR]
 1628 0d34 E060     	    str r0,[UPP,#DATAPTR]
 1629 0d36 2061     	    str r0,[UPP,#DATA]
 1630 0d38 6061     	    str r0,[UPP,#DATALEN]
 1631 0d3a 04F1D000 	    add r0,UPP,#BASIC_START 
 1632 0d3e 00F11000 	    add r0,#16 
 1633 0d42 6FF00F01 	    mvn r1,#15
 1634 0d46 00EA0100 	    and r0,r1 
 1635 0d4a 2063     	    str r0,[UPP,#TXTBGN]
 1636 0d4c 6063     	    str r0,[UPP,#TXTEND]
ARM GAS  tinyBasic.s 			page 47


 1637 0d4e C4F8D000 	    str r0,[UPP,#HERE]
 1638 0d52 00B5FFF7 	    _CALL clear_vars
 1638      DAFF5DF8 
 1638      04EB
 1639 0d5c 206B     	    ldr r0,[UPP,#TXTBGN]
 1640 0d5e DFF83C10 	    ldr r1,tib 
 1641 0d62 82EA0202 	    eor r2,r2 
 1642 0d66 40F8042B 	1:  str r2,[r0],#4
 1643 0d6a 8842     	    cmp r0,r1 
 1644 0d6c FBD4     	    bmi 1b 
 1645 0d6e 7047     	    _RET  
 1646              	
 1647              	/***********************************
 1648              	   warm_init 
 1649              	   initialize interpreter context 
 1650              	  input:
 1651              	    none
 1652              	  output:
 1653              	    none 
 1654              	  use:
 1655              	    r0 
 1656              	***********************************/
 1657              	warm_init:
 1658              	// reset data stack       
 1659 0d70 DFF824C0 	    ldr DP,dstack 
 1660 0d74 4FF0000A 	    mov IN,#0 // BASIC line index 
 1661 0d78 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1662 0d7c 80EA0000 	    eor r0,r0 
 1663 0d80 6060     	    str r0,[UPP,#COUNT]  
 1664 0d82 2064     	    str r0,[UPP,#FLAGS]
 1665 0d84 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1666 0d86 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1667 0d8a 6064     	    str r0,[UPP,#TAB_WIDTH]
 1668 0d8c 4FF00A00 	    mov r0,#10 // default base decimal 
 1669 0d90 A061     	    str r0,[UPP,#BASE]
 1670 0d92 7047     	    _RET  
 1671              	
 1672 0d94 00000000 	mstack: .word _mstack 
 1673 0d98 00000000 	dstack: .word _dstack 
 1674 0d9c 00000000 	tib: .word _tib 
 1675 0da0 00000000 	pad: .word _pad 
 1676 0da4 FCFFFFFF 	array: .word _pad - 4 
 1677 0da8 0A524541 	ready: .asciz "\nREADY" 
 1677      445900
 1678              	
 1679              	/**********************************
 1680              	    warm_start 
 1681              	    start BASIC interpreter doesn't  
 1682              	    reset variables and code space 
 1683              	  input:
 1684              	    none 
 1685              	  output:
 1686              	    none 
 1687              	**********************************/
 1688 0daf 00       	    _GBL_FUNC warm_start 
 1689              	// initialise parameters stack
 1690 0db0 FFF7DEFF 	    bl warm_init
ARM GAS  tinyBasic.s 			page 48


 1691              	// reset main stack 
 1692 0db4 5FF82400 	    ldr r0,mstack
 1693 0db8 8546     	    mov sp,r0 
 1694 0dba DFF82004 	    ldr r0,=ready 
 1695 0dbe 00B5FFF7 	    _CALL uart_puts 
 1695      FEFF5DF8 
 1695      04EB
 1696              	// fall in cmd_line 
 1697              	
 1698              	/**********************************
 1699              	   cmd_line 
 1700              	   shell command line 
 1701              	   input:
 1702              	      none 
 1703              	   output:
 1704              	      none 
 1705              	   use:
 1706              	
 1707              	***********************************/
 1708              	    _FUNC cmd_line 
 1709 0dc8 00B5FFF7 	    _CALL cr
 1709      FEFF5DF8 
 1709      04EB
 1710 0dd2 80EA0000 	    eor r0,r0 
 1711 0dd6 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1712 0dda 5FF84000 	1:  ldr r0,tib
 1713 0dde 4FF05001 	    mov r1,#TIB_SIZE 
 1714 0de2 00B5FFF7 	    _CALL readln 
 1714      FEFF5DF8 
 1714      04EB
 1715 0dec 0940     	    ands r1,r1 // empty line 
 1716 0dee F4D0     	    beq 1b 
 1717 0df0 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1717      DDFA5DF8 
 1717      04EB
 1718 0dfa EED0     	    beq 1b  // tokens stored in text area 
 1719              	// interpret tokenized line 
 1720              	interpreter:
 1721 0dfc 00B500F0 	  _CALL next_token 
 1721      21F85DF8 
 1721      04EB
 1722 0e06 0228     	  cmp r0,#2
 1723 0e08 F8D4     	  bmi interpreter    
 1724 0e0a 1A28     	  cmp r0,#TK_LABEL 
 1725 0e0c F6D0     	  beq interpreter 
 1726 0e0e 1728     	  cmp r0,#TK_CMD 
 1727 0e10 03D1     	  bne 2f
 1728 0e12 0846     	  mov r0,r1 
 1729 0e14 00F012F8 	  bl execute  
 1730 0e18 F0E7     	  b interpreter   
 1731              	2: 
 1732 0e1a 1428     	  cmp r0,#TK_VAR 
 1733 0e1c 05D1     	  bne 3f 
 1734 0e1e 00B500F0 	  _CALL let_var 
 1734      CDFB5DF8 
 1734      04EB
 1735 0e28 E8E7     	  b interpreter 
ARM GAS  tinyBasic.s 			page 49


 1736              	3: 
 1737 0e2a 0C28     	  cmp r0,#TK_ARRAY 
 1738 0e2c 05D1     	  bne 4f
 1739 0e2e 00B500F0 	  _CALL let_array 
 1739      D3FB5DF8 
 1739      04EB
 1740 0e38 E0E7     	  b interpreter
 1741              	4: 
 1742 0e3a 0DE6     	  b syntax_error
 1743              	
 1744              	/*****************************
 1745              	    execute 
 1746              	    execute a BASIC routine from 
 1747              	    its token value 
 1748              	  input:
 1749              	    r0  BASIC SUB|FUNC token  
 1750              	  output: 
 1751              	    depend on SUB|FUNc
 1752              	*****************************/
 1753              	    _FUNC execute 
 1754 0e3c E849     	    ldr r1,=fn_table 
 1755 0e3e 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1756 0e42 0047     	    bx r0 
 1757              	
 1758              	/*************************************
 1759              	  next_token 
 1760              	  extract next token from token list 
 1761              	  input:
 1762              	    none 
 1763              	  output:
 1764              	    r0    token attribute
 1765              	    r1    token value if there is one 
 1766              	  use:
 1767              	    T1    exit token type  
 1768              	****************************/
 1769              	    _FUNC next_token 
 1770 0e44 6068     	    ldr r0,[UPP,#COUNT]
 1771 0e46 8245     	    cmp IN,r0 
 1772 0e48 11D4     	    bmi 0f
 1773              	// reached end of line skip to next one 
 1774 0e4a 8344     	    add BPTR,r0 // next line 
 1775 0e4c 606B     	    ldr r0,[UPP,#TXTEND]
 1776 0e4e 8345     	    cmp BPTR,r0 
 1777 0e50 7FF5FEAF 	    bpl warm_start // end of program
 1778 0e54 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1779 0e58 6060     	    str r0,[UPP,#COUNT] 
 1780 0e5a 4FF0030A 	    mov IN,#3
 1781 0e5e 00B5FFF7 	    _CALL show_trace
 1781      C4F95DF8 
 1781      04EB
 1782 0e68 80EA0000 	    eor r0,r0
 1783 0e6c 7047     	    _RET 
 1784              	0: 
 1785 0e6e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1786 0e72 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1787 0e76 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1788 0e7a 0AF1010A 	    add IN,#1  
ARM GAS  tinyBasic.s 			page 50


 1789 0e7e 1328     	    cmp r0,#TK_CHAR 
 1790 0e80 1AD4     	    bmi 9f // these tokens have no value  
 1791 0e82 1828     	    cmp r0,#TK_SCONST 
 1792 0e84 04D5     	    bpl 1f
 1793              	    // tokens with .byte value 
 1794 0e86 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1795 0e8a 0AF1010A 	    add IN,#1 
 1796 0e8e 7047     	    _RET  
 1797 0e90 1C28     	1:  cmp r0,#TK_QSTR 
 1798 0e92 0DD1     	    bne 2f 
 1799 0e94 0BEB0A01 	    add r1,BPTR,IN
 1800 0e98 0846     	    mov r0,r1 
 1801 0e9a 00B5FFF7 	    _CALL strlen 
 1801      FEFF5DF8 
 1801      04EB
 1802 0ea4 8244     	    add IN,r0 
 1803 0ea6 0AF1010A 	    add IN,#1
 1804 0eaa 4FF01C00 	    mov r0,#TK_QSTR 
 1805 0eae 7047     	    _RET  
 1806              	2:  // .word value 
 1807 0eb0 5BF80A10 	    ldr r1,[BPTR,IN] 
 1808 0eb4 0AF1040A 	    add IN,#4 
 1809 0eb8 7047     	9:  _RET
 1810              	
 1811              	
 1812              	/*********************************
 1813              	    expect 
 1814              	    check if next token is of 
 1815              	    expected type. If not 
 1816              	    call syntax_error  
 1817              	  input:
 1818              	      r0   token attribute
 1819              	  output:
 1820              	      r0  token attribute 
 1821              	      r1  token value
 1822              	  use:
 1823              	      T1   
 1824              	**********************************/
 1825 0eba 00BF     	    _FUNC expect 
 1826 0ebc 4DF8048D 	    push {T1}
 1827 0ec0 8046     	    mov T1,r0 
 1828 0ec2 00B5FFF7 	    _CALL next_token 
 1828      BEFF5DF8 
 1828      04EB
 1829 0ecc 4045     	    cmp r0,T1  
 1830 0ece 7FF4C3AD 	    bne syntax_error 
 1831 0ed2 5DF8048B 	    pop {T1}
 1832 0ed6 7047     	    _RET 
 1833              	
 1834              	/***********************************
 1835              	    func_args 
 1836              	    get function arguments list 
 1837              	  input:
 1838              	    none 
 1839              	  output:
 1840              	    r0    arg. count 
 1841              	  use:
ARM GAS  tinyBasic.s 			page 51


 1842              	
 1843              	************************************/
 1844              	    _FUNC func_args 
 1845 0ed8 4FF00500 	    mov r0,#TK_LPAREN 
 1846 0edc 00B5FFF7 	    _CALL expect 
 1846      EDFF5DF8 
 1846      04EB
 1847 0ee6 00B500F0 	    _CALL arg_list 
 1847      0CF85DF8 
 1847      04EB
 1848 0ef0 01B4     	    push {r0}
 1849 0ef2 4FF00600 	    mov r0,#TK_RPAREN 
 1850 0ef6 00B5FFF7 	    _CALL expect 
 1850      E0FF5DF8 
 1850      04EB
 1851 0f00 01BC     	    pop {r0}
 1852 0f02 7047     	    _RET 
 1853              	
 1854              	/**********************************
 1855              	    arg_list 
 1856              	    get arguments list on dstack 
 1857              	  input:
 1858              	    none 
 1859              	  output:
 1860              	    r0    arg count
 1861              	  use:
 1862              	    T1    tmp count  
 1863              	***********************************/
 1864              	    _FUNC arg_list 
 1865 0f04 4DF8048D 	    push {T1}
 1866 0f08 88EA0808 	    eor T1,T1 
 1867 0f0c 00B500F0 	1:  _CALL expression 
 1867      BFF85DF8 
 1867      04EB
 1868 0f16 1B28     	    cmp R0,#TK_INTGR  
 1869 0f18 0AD1     	    bne 2f
 1870 0f1a 4CF8041D 	    _PUSH r1 
 1871 0f1e 08F10108 	    add T1,#1 
 1872 0f22 00B5FFF7 	    _CALL next_token 
 1872      8EFF5DF8 
 1872      04EB
 1873 0f2c 0228     	    cmp r0,#TK_COMMA 
 1874 0f2e EDD0     	    beq 1b 
 1875 0f30 D4F800A0 	2:  _UNGET_TOKEN 
 1875      D4F808B0 
 1876 0f38 4046     	9:  mov r0,T1 
 1877 0f3a 5DF8048B 	    pop {T1}
 1878 0f3e 7047     	    _RET 
 1879              	
 1880              	
 1881              	/***********************************
 1882              	 factor
 1883              	 arithmetick factor parser 
 1884              	 factor ::= ['+'|'-'|e]  var | @ |
 1885              				 integer | function |
 1886              				 '('expression')' 
 1887              	  input: 
ARM GAS  tinyBasic.s 			page 52


 1888              	    none 
 1889              	  output:
 1890              	    r0   token attribute 
 1891              	    r1   token value 
 1892              	  use:
 1893              	    r2   temp 
 1894              	    r3   sign 
 1895              	***********************************/
 1896              	    _FUNC factor 
 1897 0f40 0CB4     	    push {r2,r3}
 1898 0f42 00B5FFF7 	    _CALL next_token
 1898      7EFF5DF8 
 1898      04EB
 1899 0f4c 4FF00103 	    mov r3,#1 // default sign +  
 1900 0f50 0828     	    cmp r0,#TK_MINUS  
 1901 0f52 06D1     	    bne 1f 
 1902 0f54 4FF0FF33 	    mov r3,#-1 // minus sign 
 1903 0f58 00B5FFF7 	0:  _CALL next_token
 1903      73FF5DF8 
 1903      04EB
 1904 0f62 1B28     	1:  cmp r0,#TK_INTGR 
 1905 0f64 55D0     	    beq 8f 
 1906 0f66 0C28     	    cmp r0,#TK_ARRAY 
 1907 0f68 1DD1     	    bne 2f 
 1908 0f6a 4FF00500 	    mov r0,#TK_LPAREN 
 1909 0f6e 00B5FFF7 	    _CALL expect 
 1909      A4FF5DF8 
 1909      04EB
 1910 0f78 00B500F0 	    _CALL expression
 1910      89F85DF8 
 1910      04EB
 1911 0f82 1B28     	    cmp r0,#TK_INTGR
 1912 0f84 7FF468AD 	    bne syntax_error
 1913 0f88 0A46     	    mov r2,r1  
 1914 0f8a 4FF00600 	    mov r0,#TK_RPAREN
 1915 0f8e 00B5FFF7 	    _CALL expect 
 1915      94FF5DF8 
 1915      04EB
 1916 0f98 1046     	    mov r0,r2 
 1917 0f9a 00B500F0 	    _CALL get_array_element 
 1917      E4F85DF8 
 1917      04EB
 1918 0fa4 35E0     	    b 8f
 1919 0fa6 0528     	2:  cmp r0,#TK_LPAREN 
 1920 0fa8 13D1     	    bne 3f 
 1921 0faa 00B500F0 	    _CALL expression 
 1921      70F85DF8 
 1921      04EB
 1922 0fb4 1B28     	    cmp r0,#TK_INTGR 
 1923 0fb6 7FF44FAD 	    bne syntax_error
 1924 0fba 0A46     	    mov r2,r1   
 1925 0fbc 4FF00600 	    mov r0,#TK_RPAREN
 1926 0fc0 00B5FFF7 	    _CALL expect 
 1926      7BFF5DF8 
 1926      04EB
 1927 0fca 1146     	    mov r1,r2 
 1928 0fcc 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 53


 1929 0fd0 1FE0     	    b 8f       
 1930 0fd2 1428     	3:  cmp r0,#TK_VAR 
 1931 0fd4 06D1     	    bne 4f
 1932 0fd6 0846     	    mov r0,r1  
 1933 0fd8 00B500F0 	    _CALL get_var 
 1933      D9F85DF8 
 1933      04EB
 1934 0fe2 16E0     	    b 8f 
 1935 0fe4 1528     	4:  cmp r0,#TK_IFUNC 
 1936 0fe6 06D1     	    bne 6f 
 1937 0fe8 0846     	5:  mov r0,r1  
 1938 0fea 00B5FFF7 	    _CALL execute
 1938      26FF5DF8 
 1938      04EB
 1939 0ff4 0DE0     	    b 8f 
 1940 0ff6 1A28     	6:  cmp r0,#TK_LABEL
 1941 0ff8 07D1     	    bne 7f 
 1942 0ffa 41F00040 	    orr r0,r1,#(1<<31) 
 1943 0ffe 00B5FFF7 	    _CALL search_const
 1943      4AF95DF8 
 1943      04EB
 1944 1008 03E0     	    b 8f 
 1945 100a 1828     	7:  cmp r0,#TK_SCONST 
 1946 100c 03D1     	    bne 9f 
 1947 100e 4FF01B00 	    mov r0,#TK_INTGR
 1948 1012 03FB01F1 	8:  mul r1,r3 
 1949 1016 0CBC     	9:  pop {r2,r3}   
 1950 1018 7047     	    _RET 
 1951              	
 1952              	
 1953              	/*****************************************
 1954              	    term 
 1955              	    term parser 
 1956              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1957              	    output:
 1958              	      r0  	token attribute 
 1959              	      r1		integer
 1960              	    use:
 1961              	      r2    first factor 
 1962              	      r3    operator *|/|%
 1963              	******************************************/
 1964 101a 00BF     	    _FUNC term 
 1965 101c 00B5FFF7 	    _CALL factor
 1965      8FFF5DF8 
 1965      04EB
 1966 1026 1B28     	    cmp r0,#TK_INTGR
 1967 1028 00D0     	    beq 0f 
 1968 102a 7047     	    _RET // not a factor    
 1969 102c 0CB4     	0:  push {r2,r3}
 1970 102e 0A46     	    mov r2,r1 // first factor    
 1971 1030 00B5FFF7 	0:  _CALL next_token
 1971      07FF5DF8 
 1971      04EB
 1972 103a 0346     	    mov r3,r0  // operator 
 1973 103c 0928     	    cmp r0,TK_MULT
 1974 103e 01D4     	    bmi 1f 
 1975 1040 0C28     	    cmp r0,#TK_MOD+1
ARM GAS  tinyBasic.s 			page 54


 1976 1042 06D4     	    bmi 2f
 1977 1044 D4F800A0 	1:  _UNGET_TOKEN
 1977      D4F808B0 
 1978 104c 4FF01B00 	    mov r0,#TK_INTGR
 1979 1050 1AE0     	    b 9f 
 1980 1052 00B5FFF7 	2:  _CALL factor
 1980      74FF5DF8 
 1980      04EB
 1981 105c 1B28     	    cmp r0,#TK_INTGR
 1982 105e 7FF4FBAC 	    bne syntax_error 
 1983 1062 092B     	    cmp r3,#TK_MULT
 1984 1064 02D1     	    bne 3f 
 1985              	// multiplication
 1986 1066 01FB02F2 	    mul r2,r1
 1987 106a E1E7     	    b 0b  
 1988 106c B8F10A0F 	3:  cmp T1,#TK_DIV 
 1989 1070 02D1     	    bne 4f
 1990              	// division
 1991 1072 92FBF1F2 	    sdiv r2,r2,r1
 1992 1076 DBE7     	    b 0b  
 1993              	4: // modulo
 1994 1078 1046     	    mov r0,r2 
 1995 107a 92FBF1F2 	    sdiv r2,r2,r1 
 1996 107e 01FB02F2 	    mul  r2,r1 
 1997 1082 A0EB0202 	    sub  r2,r0,r2
 1998 1086 D3E7     	    b 0b  
 1999 1088 1146     	9:  mov r1,r2 
 2000 108a 0CBC     	    pop {r2,r3}
 2001 108c 7047     	    _RET 
 2002              	
 2003              	
 2004              	/*****************************************
 2005              	    expression 
 2006              	    arithmetic expression parser 
 2007              	    expression ::= term [['+'|'-'] term]*
 2008              	    result range {-32768..32767}
 2009              	    output:
 2010              	      r0    TK_NONE || TK_INTGR 
 2011              	      r1 	  integer
 2012              	    use:
 2013              	      r2  left term 
 2014              	      r3  operator +|-
 2015              	******************************************/
 2016 108e 00BF     	    _FUNC expression 
 2017 1090 00B5FFF7 	    _CALL term 
 2017      C3FF5DF8 
 2017      04EB
 2018 109a 1B28     	    cmp r0,#TK_INTGR 
 2019 109c 00D0     	    beq 0f 
 2020 109e 7047     	    _RET   
 2021 10a0 0CB4     	0:  push {r2,r3}
 2022 10a2 0A46     	    mov r2,r1 // first term
 2023 10a4 00B5FFF7 	1:  _CALL next_token 
 2023      CDFE5DF8 
 2023      04EB
 2024 10ae 0346     	    mov r3,r0 //  +|-
 2025 10b0 0728     	    cmp r0,#TK_PLUS 
ARM GAS  tinyBasic.s 			page 55


 2026 10b2 08D0     	    beq 3f 
 2027 10b4 0828     	    cmp r0,#TK_MINUS  
 2028 10b6 06D0     	    beq 3f
 2029 10b8 D4F800A0 	    _UNGET_TOKEN 
 2029      D4F808B0 
 2030 10c0 4FF01B00 	    mov r0,#TK_INTGR
 2031 10c4 0EE0     	    b 9f 
 2032 10c6 00B5FFF7 	3:  _CALL term 
 2032      A8FF5DF8 
 2032      04EB
 2033 10d0 1B28     	    cmp r0,#TK_INTGR 
 2034 10d2 7FF4C1AC 	    bne syntax_error 
 2035 10d6 072B     	    cmp r3,#TK_PLUS 
 2036 10d8 02D0     	    beq 4f 
 2037 10da A2EB0102 	    sub r2,r1 // term1-term2  
 2038 10de E1E7     	    b 1b 
 2039 10e0 0A44     	4:  add r2,r1 // term1+term2
 2040 10e2 DFE7     	    b 1b
 2041 10e4 1146     	9:  mov r1,r2 
 2042 10e6 0CBC     	    pop {r2,r3}
 2043 10e8 7047     	    _RET 
 2044              	
 2045              	
 2046              	/**********************************************
 2047              	    relation
 2048              	    rel ::= expr1 rel_op expr2
 2049              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2050              	    relation return  integer , zero is false 
 2051              	    output:
 2052              	        r0	TK_INTGR  
 2053              	        r1	integer 
 2054              	    use:
 2055              	        r2   first operand 
 2056              	        r3   relop   
 2057              	**********************************************/
 2058 10ea 00BF     	    _FUNC relation 
 2059 10ec 0CB4     	    push {r2,r3}
 2060 10ee 00B5FFF7 	    _CALL expression 
 2060      CEFF5DF8 
 2060      04EB
 2061 10f8 1B28     	    cmp r0,#TK_INTGR 
 2062 10fa 7FF4ADAC 	    bne syntax_error 
 2063 10fe 0A46     	    mov r2,r1  // first operand  
 2064 1100 00B5FFF7 	    _CALL next_token 
 2064      9FFE5DF8 
 2064      04EB
 2065 110a A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2066 110e 0D28     	    cmp r0,#TK_EQUAL 
 2067 1110 1DD4     	    bmi 8f 
 2068 1112 1328     	    cmp r0,#TK_NE+1
 2069 1114 1BD5     	    bpl 8f 
 2070 1116 00B5FFF7 	    _CALL expression 
 2070      BAFF5DF8 
 2070      04EB
 2071 1120 1B28     	    cmp r0,#TK_INTGR 
 2072 1122 7FF499AC 	    bne syntax_error 
 2073 1126 8A42     	    cmp r2,r1 // compare operands  
ARM GAS  tinyBasic.s 			page 56


 2074 1128 4FF0FF31 	    mov r1,#-1 
 2075 112c 2D4A     	    ldr r2,=relop_jmp
 2076 112e D2E803F0 	    tbb [r2,r3]    
 2077              	rel_idx0:
 2078              	rel_eq:
 2079 1132 11D0     	    beq 9f 
 2080 1134 08E0     	    b rel_false
 2081              	rel_gt:
 2082 1136 0FDC     	    bgt 9f  
 2083 1138 06E0     	    b rel_false  
 2084              	rel_ge:
 2085 113a 0DDA     	    bge 9f  
 2086 113c 04E0     	    b rel_false  
 2087              	rel_lt: 
 2088 113e 0BDB     	    blt 9f   
 2089 1140 02E0     	    b rel_false 
 2090              	rel_le:
 2091 1142 09DD     	    ble 9f  
 2092 1144 00E0     	    b rel_false 
 2093              	rel_ne:
 2094 1146 07D1     	    bne 9f 
 2095              	rel_false:    
 2096 1148 81EA0101 	    eor r1,r1  // false
 2097 114c 04E0     	    b 9f  
 2098 114e D4F800A0 	8:  _UNGET_TOKEN 
 2098      D4F808B0 
 2099 1156 1146     	    mov r1,r2    
 2100 1158 4FF01B00 	9:  mov r0,#TK_INTGR
 2101 115c 0CBC     	    pop {r2,r3}
 2102 115e 7047     	    _RET 
 2103              	
 2104              	
 2105              	relop_jmp: 
 2106 1160 00       	  .byte 0 // =  
 2107 1161 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2108 1162 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2109 1163 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2110 1164 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2111 1165 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2112              	
 2113              	
 2114              	/***********************************
 2115              	    get_array_element
 2116              	    return value of @(n)
 2117              	  input:
 2118              	    r0    indice 
 2119              	  output:
 2120              	    r0   TK_INTGR
 2121              	    r1   value  
 2122              	************************************/
 2123 1166 00BF     	    _FUNC get_array_element 
 2124 1168 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2125 116c 4FEA8000 	    lsl r0,#2 
 2126 1170 C0EB0100 	    rsb r0,r1 
 2127 1174 0168     	    ldr r1,[r0]
 2128 1176 4FF01B00 	    mov r0,#TK_INTGR 
 2129 117a 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 57


 2130              	
 2131              	
 2132              	/***********************************
 2133              	    set_array_element 
 2134              	    set value of array element 
 2135              	  input:
 2136              	    r0   index 
 2137              	    r1   new value 
 2138              	  output:
 2139              	    none
 2140              	  use:
 2141              	    r2    array pointer 
 2142              	**********************************/
 2143              	    _FUNC set_array_element 
 2144 117c 04B4     	    push {r2}
 2145 117e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2146 1182 4FEA8000 	    lsl r0,#2 
 2147 1186 A1EB0001 	    sub r1,r0 
 2148 118a 0960     	    str r1,[r1]
 2149 118c 04BC     	    pop {r2}
 2150 118e 7047     	    _RET 
 2151              	
 2152              	/***********************************
 2153              	   get_var 
 2154              	   get variable value 
 2155              	  input:
 2156              	     r0    variable index {0..25}
 2157              	  output:
 2158              	     r0    TK_INTGR
 2159              	     r1    value 
 2160              	**********************************/
 2161              	    _FUNC get_var 
 2162 1190 04F16001 	    add r1,UPP,#VARS
 2163 1194 4FEA8000 	    lsl r0,#2 
 2164 1198 0958     	    ldr r1,[r1,r0]
 2165 119a 4FF01B00 	    mov r0,#TK_INTGR
 2166 119e 7047     	    _RET 
 2167              	
 2168              	/*********************************
 2169              	    set_var 
 2170              	    set variable value 
 2171              	  input:
 2172              	     r0    variable index {0..25}
 2173              	     r1    new value 
 2174              	  output:
 2175              	    none 
 2176              	  use:
 2177              	    r2   vars pointer 
 2178              	*********************************/
 2179              	    _FUNC set_var 
 2180 11a0 04B4     	    push {r2}
 2181 11a2 04F16002 	    add r2,UPP,#VARS
 2182 11a6 4FEA8000 	    lsl r0,#2
 2183 11aa 1150     	    str r1,[r2,r0]
 2184 11ac 04BC     	    pop {r2}
 2185 11ae 7047     	    _RET 
 2186              	
ARM GAS  tinyBasic.s 			page 58


 2187              	/******************************
 2188              	    CONSTANTS data
 2189              	******************************/
 2190              	
 2191              	  .section .rodata 
 2192              	
 2193              	// system variables initial value 
 2194              	uzero:
 2195 0000 00000000 	  .word 0 // IN_SAVED
 2196 0004 00000000 	  .word 0 // COUNT
 2197 0008 00000000 	  .word 0 // BASICPTR
 2198 000c 00000000 	  .word 0 // DATAPTR
 2199 0010 00000000 	  .word 0 // DATA
 2200 0014 00000000 	  .word 0 // DATALEN
 2201 0018 0A000000 	  .word 10 // BASE
 2202 001c 00000000 	  .word 0 // TICKS
 2203 0020 00000000 	  .word 0 // TIMER
 2204 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2205 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2206 002c 00000000 	  .word 0 // FSFREE
 2207 0030 00000000 	  .word 0 // TXTBGN
 2208 0034 00000000 	  .word 0 // TXTEND
 2209 0038 00000000 	  .word 0 //LOOP_DEPTH
 2210 003c 00000000 	  .word 0 // ARRAY_SIZE
 2211 0040 00000000 	  .word 0 // FLAGS
 2212 0044 04000000 	  .word 4 // TAB_WIDTH
 2213 0048 00000000 	  .word 0 // RX_HEAD
 2214 004c 00000000 	  .word 0 // RX_TAIL
 2215 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2217 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2218 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2219 00d0 00000000 	  .word 0 // HERE 
 2220              	ulast:
 2221              	
 2222              	  .section .rodata.dictionary 
 2223              	
 2224              	// keep alphabetic order for BASIC names from Z-A
 2225              	// this sort order is for for WORDS cmd output. 	
 2226              	  .type kword_end, %object
 2227              		.equ link, 0
 2228              	kword_end:
 2229 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2229      00000000 
 2229      00000000 
 2229      00000000 
 2230 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2230      59000000 
 2230      15000000 
 2230      59504F53 
ARM GAS  tinyBasic.s 			page 59


 2230      00000000 
 2231 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2231      58000000 
 2231      15000000 
 2231      58504F53 
 2231      00000000 
 2232 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2232      57000000 
 2232      15000000 
 2232      584F5200 
 2233 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2233      56000000 
 2233      17000000 
 2233      574F5244 
 2233      53000000 
 2234 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2234      55000000 
 2234      17000000 
 2234      57414954 
 2234      00000000 
 2235 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2235      54000000 
 2235      17000000 
 2235      554E5449 
 2235      4C000000 
 2236 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2236      53000000 
 2236      15000000 
 2236      55464C41 
 2236      53480000 
 2237 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2237      52000000 
 2237      15000000 
 2237      55424F55 
 2237      4E440000 
 2238 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2238      51000000 
 2238      17000000 
 2238      54524143 
 2238      45000000 
 2239 00c0 B8000000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2239      50000000 
 2239      17000000 
 2239      544F4E45 
 2239      5F494E49 
 2240 00d8 CC000000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2240      4F000000 
 2240      17000000 
 2240      544F4E45 
 2240      00000000 
 2241 00ec E4000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2241      4E000000 
 2241      17000000 
 2241      544F0000 
 2242 00fc F8000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2242      4C000000 
 2242      17000000 
ARM GAS  tinyBasic.s 			page 60


 2242      54494D45 
 2242      52000000 
 2243 0110 08010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2243      4D000000 
 2243      15000000 
 2243      54494D45 
 2243      4F555400 
 2244 0124 1C010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2244      4B000000 
 2244      15000000 
 2244      5449434B 
 2244      53000000 
 2245 0138 30010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2245      4A000000 
 2245      17000000 
 2245      5448454E 
 2245      00000000 
 2246 014c 44010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2246      49000000 
 2246      17000000 
 2246      54414200 
 2247 015c 58010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2247      48000000 
 2247      17000000 
 2247      53544F52 
 2247      45000000 
 2248 0170 68010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2248      47000000 
 2248      17000000 
 2248      53544F50 
 2248      00000000 
 2249 0184 7C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2249      46000000 
 2249      17000000 
 2249      53544550 
 2249      00000000 
 2250 0198 90010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2250      45000000 
 2250      17000000 
 2250      53504300 
 2251 01a8 A4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2251      44000000 
 2251      17000000 
 2251      534C4545 
 2251      50000000 
 2252 01bc B4010000 	  _dict_entry TK_SCONST,SERVO_D,0xd   
 2252      0D000000 
 2252      18000000 
 2252      53455256 
 2252      4F5F4400 
 2253 01d0 C8010000 	  _dict_entry TK_SCONST,SERVO_C,0xc 
 2253      0C000000 
 2253      18000000 
 2253      53455256 
 2253      4F5F4300 
 2254 01e4 DC010000 	  _dict_entry TK_SCONST,SERVO_B,0xb 
 2254      0B000000 
ARM GAS  tinyBasic.s 			page 61


 2254      18000000 
 2254      53455256 
 2254      4F5F4200 
 2255 01f8 F0010000 	  _dict_entry TK_SCONST,SERVO_A,0xa 
 2255      0A000000 
 2255      18000000 
 2255      53455256 
 2255      4F5F4100 
 2256 020c 04020000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2256      43000000 
 2256      17000000 
 2256      53455256 
 2256      4F5F504F 
 2257 0224 18020000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2257      42000000 
 2257      17000000 
 2257      53455256 
 2257      4F5F494E 
 2258 023c 30020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2258      41000000 
 2258      17000000 
 2258      53415645 
 2258      00000000 
 2259 0250 48020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2259      40000000 
 2259      17000000 
 2259      52554E00 
 2260 0260 5C020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2260      3F000000 
 2260      15000000 
 2260      52534849 
 2260      46540000 
 2261 0274 6C020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2261      3E000000 
 2261      15000000 
 2261      524E4400 
 2262 0284 80020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2262      3D000000 
 2262      17000000 
 2262      52455455 
 2262      524E0000 
 2263 0298 90020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2263      3C000000 
 2263      17000000 
 2263      52455354 
 2263      4F524500 
 2264 02ac A4020000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2264      3B000000 
 2264      17000000 
 2264      52454D00 
 2265 02bc B8020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2265      3A000000 
 2265      15000000 
 2265      52454144 
 2265      00000000 
 2266 02d0 C8020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2266      39000000 
ARM GAS  tinyBasic.s 			page 62


 2266      15000000 
 2266      514B4559 
 2266      00000000 
 2267 02e4 DC020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2267      38000000 
 2267      17000000 
 2267      50555400 
 2268 02f4 F0020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2268      37000000 
 2268      17000000 
 2268      50555348 
 2268      00000000 
 2269 0308 00030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2269      36000000 
 2269      17000000 
 2269      5052494E 
 2269      54000000 
 2270 031c 14030000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2270      35000000 
 2270      15000000 
 2270      504F5000 
 2271 032c 28030000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2271      34000000 
 2271      17000000 
 2271      504F4B45 
 2271      57000000 
 2272 0340 38030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2272      33000000 
 2272      17000000 
 2272      504F4B45 
 2272      48000000 
 2273 0354 4C030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2273      32000000 
 2273      17000000 
 2273      504F4B45 
 2273      42000000 
 2274 0368 60030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2274      2E000000 
 2274      17000000 
 2274      504D4F44 
 2274      45000000 
 2275 037c 74030000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2275      31000000 
 2275      15000000 
 2275      5045454B 
 2275      57000000 
 2276 0390 88030000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2276      30000000 
 2276      15000000 
 2276      5045454B 
 2276      48000000 
 2277 03a4 9C030000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2277      2F000000 
 2277      15000000 
 2277      5045454B 
 2277      42000000 
 2278 03b8 B0030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
ARM GAS  tinyBasic.s 			page 63


 2278      2D000000 
 2278      17000000 
 2278      50415553 
 2278      45000000 
 2279 03cc C4030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2279      2C000000 
 2279      15000000 
 2279      50414400 
 2280 03dc D8030000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2280      01000000 
 2280      18000000 
 2280      4F555450 
 2280      55545F50 
 2281 03f4 E8030000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2281      06000000 
 2281      18000000 
 2281      4F555450 
 2281      55545F4F 
 2282 040c 00040000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2282      0A000000 
 2282      18000000 
 2282      4F555450 
 2282      55545F41 
 2283 0424 18040000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2283      0E000000 
 2283      18000000 
 2283      4F555450 
 2283      55545F41 
 2284 043c 30040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2284      2B000000 
 2284      17000000 
 2284      4F555400 
 2285 044c 48040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2285      2A000000 
 2285      15000000 
 2285      4F520000 
 2286 045c 58040000 	  _dict_entry TK_SCONST,ON,1
 2286      01000000 
 2286      18000000 
 2286      4F4E0000 
 2287 046c 68040000 	  _dict_entry TK_SCONST,OFF,0 
 2287      00000000 
 2287      18000000 
 2287      4F464600 
 2288 047c 78040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2288      29000000 
 2288      15000000 
 2288      4E4F5400 
 2289 048c 88040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2289      28000000 
 2289      17000000 
 2289      4E455854 
 2289      00000000 
 2290 04a0 98040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2290      27000000 
 2290      17000000 
 2290      4E455700 
ARM GAS  tinyBasic.s 			page 64


 2291 04b0 AC040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2291      26000000 
 2291      15000000 
 2291      4C534849 
 2291      46540000 
 2292 04c4 BC040000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2292      25000000 
 2292      17000000 
 2292      4C4F4341 
 2292      54450000 
 2293 04d8 D0040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2293      24000000 
 2293      17000000 
 2293      4C4F4144 
 2293      00000000 
 2294 04ec E4040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2294      23000000 
 2294      17000000 
 2294      4C495354 
 2294      00000000 
 2295 0500 F8040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2295      22000000 
 2295      17000000 
 2295      4C455400 
 2296 0510 0C050000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2296      21000000 
 2296      16000000 
 2296      4B455900 
 2297 0520 1C050000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2297      20000000 
 2297      15000000 
 2297      494E5645 
 2297      52540000 
 2298 0534 2C050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2298      11000000 
 2298      18000000 
 2298      494E5055 
 2298      545F5055 
 2299 054c 40050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2299      10000000 
 2299      18000000 
 2299      494E5055 
 2299      545F5044 
 2300 0564 58050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2300      04000000 
 2300      18000000 
 2300      494E5055 
 2300      545F464C 
 2301 057c 70050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2301      00000000 
 2301      18000000 
 2301      494E5055 
 2301      545F414E 
 2302 0594 88050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2302      1F000000 
 2302      17000000 
 2302      494E5055 
ARM GAS  tinyBasic.s 			page 65


 2302      54000000 
 2303 05a8 A0050000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2303      1E000000 
 2303      15000000 
 2303      494E0000 
 2304 05b8 B4050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2304      1D000000 
 2304      17000000 
 2304      49460000 
 2305 05c8 C4050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2305      1C000000 
 2305      17000000 
 2305      48455800 
 2306 05d8 D4050000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2306      00100140 
 2306      18000000 
 2306      4750494F 
 2306      43000000 
 2307 05ec E4050000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2307      000C0140 
 2307      18000000 
 2307      4750494F 
 2307      42000000 
 2308 0600 F8050000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2308      00080140 
 2308      18000000 
 2308      4750494F 
 2308      41000000 
 2309 0614 0C060000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2309      1B000000 
 2309      17000000 
 2309      474F544F 
 2309      00000000 
 2310 0628 20060000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2310      1A000000 
 2310      17000000 
 2310      474F5355 
 2310      42000000 
 2311 063c 34060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2311      19000000 
 2311      15000000 
 2311      47455400 
 2312 064c 48060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2312      18000000 
 2312      15000000 
 2312      46524545 
 2312      00000000 
 2313 0660 58060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2313      17000000 
 2313      17000000 
 2313      464F5247 
 2313      45540000 
 2314 0674 6C060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2314      16000000 
 2314      17000000 
 2314      464F5200 
 2315 0684 80060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
ARM GAS  tinyBasic.s 			page 66


 2315      15000000 
 2315      17000000 
 2315      45524153 
 2315      45000000 
 2316 0698 90060000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2316      14000000 
 2316      17000000 
 2316      454E4400 
 2317 06a8 A4060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2317      13000000 
 2317      17000000 
 2317      44554D50 
 2317      00000000 
 2318 06bc B4060000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2318      12000000 
 2318      17000000 
 2318      44524F50 
 2318      00000000 
 2319 06d0 C8060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2319      11000000 
 2319      17000000 
 2319      444F0000 
 2320 06e0 DC060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2320      10000000 
 2320      17000000 
 2320      44495200 
 2321 06f0 EC060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2321      0F000000 
 2321      17000000 
 2321      44454300 
 2322 0700 FC060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2322      0E000000 
 2322      17000000 
 2322      44415441 
 2322      00000000 
 2323 0714 0C070000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2323      0D000000 
 2323      17000000 
 2323      434F4E53 
 2323      54000000 
 2324 0728 20070000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2324      0C000000 
 2324      17000000 
 2324      434C5300 
 2325 0738 34070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2325      0B000000 
 2325      16000000 
 2325      43484152 
 2325      00000000 
 2326 074c 44070000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2326      0A000000 
 2326      17000000 
 2326      42544F47 
 2326      4C000000 
 2327 0760 58070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2327      09000000 
 2327      15000000 
ARM GAS  tinyBasic.s 			page 67


 2327      42544553 
 2327      54000000 
 2328 0774 6C070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2328      08000000 
 2328      17000000 
 2328      42534554 
 2328      00000000 
 2329 0788 80070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2329      07000000 
 2329      17000000 
 2329      42524553 
 2329      00000000 
 2330 079c 94070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2330      06000000 
 2330      15000000 
 2330      42495400 
 2331 07ac A8070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2331      05000000 
 2331      17000000 
 2331      41575500 
 2332 07bc B8070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2332      04000000 
 2332      15000000 
 2332      41534300 
 2333 07cc C8070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2333      03000000 
 2333      15000000 
 2333      414E4400 
 2334 07dc D8070000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2334      02000000 
 2334      17000000 
 2334      41444300 
 2335 07ec E8070000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2335      01000000 
 2335      15000000 
 2335      414E4100 
 2336              	first_link: 
 2337 07fc F8070000 	  .word LINK 
 2338 0800 00000000 	  .word ABS_IDX 
 2339 0804 15000000 	  .word TK_IFUNC
 2340              	kword_dict: // first name field 
 2341              	  .equ LINK,. 
 2342 0808 41425300 	  .asciz "ABS" 
 2343              	  .p2align 2 
 2344              	
 2345              	    .section .rodata.fn_tabld 
 2346              	
 2347              	//comands and fonctions address table
 2348              	  .type fn_table, %object
 2349              	fn_table:
 2350 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,awu,bitmask 
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2351 001c 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2351      00000000 
ARM GAS  tinyBasic.s 			page 68


 2351      00000000 
 2351      00000000 
 2351      00000000 
 2352 0038 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2353 0050 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2354 0070 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2355 0088 00000000 		.word let,list,load,locate,lshift,new,next
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2356 00a4 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2356      00000000 
 2356      00000000 
 2356      00000000 
 2356      00000000 
 2357 00c8 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2358 00e4 00000000 		.word qkey,read,skip_line
 2358      00000000 
 2358      00000000 
 2359 00f0 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_pos 
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2360 0110 00000000 		.word sleep,spc,step,stop,store,tab
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2361 0128 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace,ubound,uflash,until
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2362 0154 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2362      00000000 
 2362      00000000 
 2362      00000000 
 2362      00000000 
 2363 0168 00000000 		.word 0 
ARM GAS  tinyBasic.s 			page 69


 2364              	
 2365              	
 2366              	/**********************************
 2367              	    BASIC commands and functions 
 2368              	**********************************/
 2369              	
 2370              	    .section .text.basic , "ax", %progbits 
 2371              	
 2372              	
 2373              	/*******************************
 2374              	  BASIC:  ABS expr 
 2375              	  input:
 2376              	    none 
 2377              	  output:
 2378              	    r0    token type 
 2379              	    r1    abs(expr)
 2380              	  use:
 2381              	    none 
 2382              	******************************/
 2383              	    _FUNC abs 
 2384 0000 00B5FFF7 	    _CALL arg_list
 2384      FEFF5DF8 
 2384      04EB
 2385 000a 0128     	    cmp r0,#1 
 2386 000c 01D0     	    beq 1f 
 2387 000e FFF7FEBF 	    b syntax_error 
 2388 0012 5CF8041B 	1:  _POP r1 
 2389 0016 11F0004F 	    tst r1,#(1<<31)
 2390 001a 01D0     	    beq 9f
 2391 001c C1F10001 	    rsb r1,#0 
 2392 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2393 0024 7047     	   _RET 
 2394              	
 2395 0026 00BF     	    _FUNC power_adc
 2396 0028 7047     	    _RET
 2397              	
 2398              	/*************************************
 2399              	  BASIC: ANA(pin)
 2400              	  read analog input 
 2401              	*************************************/
 2402 002a 00BF     	    _FUNC analog_read
 2403 002c 00B5FFF7 	    _CALL func_args
 2403      FEFF5DF8 
 2403      04EB
 2404 0036 0128     	    cmp r0,#1 
 2405 0038 7FF4FEAF 	    bne syntax_error 
 2406 003c 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2406      C4F20101 
 2407 0044 5CF8042B 	    _POP r2 // channel
 2408 0048 02F01F02 	    and r2,#31
 2409 004c 4A63     	    str r2,[r1,#ADC_SQR3]
 2410              	// start conversion 
 2411 004e 8868     	    ldr r0,[r1,#ADC_CR2]
 2412 0050 8860     	    str r0,[r1,#ADC_CR2]
 2413              	adc_loop:
 2414 0052 0868     	    ldr r0,[R1,#ADC_SR]
 2415 0054 10F0020F 	    tst r0,#2 // EOC bit test 
ARM GAS  tinyBasic.s 			page 70


 2416 0058 FBD0     	    beq adc_loop
 2417 005a C96C     	    ldr r1,[r1,#ADC_DR]
 2418 005c 4FF01B00 	    mov r0,#TK_INTGR    
 2419 0060 7047     	    _RET
 2420              	
 2421              	/***********************************
 2422              	  BASIC: ADC ON|OFF
 2423              	  enable|disable analog digital converter 
 2424              	  freq -> of conversion
 2425              	*****************************************/
 2426 0062 00BF     	    _FUNC adc 
 2427 0064 00B5FFF7 	    _CALL arg_list 
 2427      FEFF5DF8 
 2427      04EB
 2428 006e 0128     	    cmp r0,#1 
 2429 0070 7FF4FEAF 	    bne syntax_error 
 2430 0074 5CF8041B 	    _POP r1 
 2431 0078 89B1     	1:  cbz r1,adc_off 
 2432              	adc_on:
 2433 007a 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2433      C4F20201 
 2434 0082 8869     	    ldr r0,[r1,RCC_APB2ENR]
 2435 0084 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2436 0088 8861     	    str r0,[r1,RCC_APB2ENR]
 2437 008a 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2437      C4F20101 
 2438 0092 4FF00100 	    _MOV32 r0,1+(1<<23)
 2438      C0F28100 
 2439 009a 8860     	    str r0,[r1,ADC_CR2]
 2440 009c 7047     	    _RET 
 2441              	adc_off:
 2442 009e 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2442      C4F20101 
 2443 00a6 80EA0000 	    eor r0,r0 
 2444 00aa 8860     	    str r0,[r1,ADC_CR2]
 2445 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2445      C4F20201 
 2446 00b4 8869     	    ldr r0,[r1,RCC_APB2ENR]
 2447 00b6 6FF00902 	    mvn r2,#9 
 2448 00ba 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2449 00be 8861     	    str r0,[r1,RCC_APB2ENR]
 2450 00c0 7047     	    _RET 
 2451              	
 2452              	
 2453              	/************************************
 2454              	  BASIC: AND(expr1,expr2)
 2455              	  logical ANND bit to between expr1,expr2
 2456              	************************************/
 2457 00c2 00BF     	    _FUNC bit_and
 2458 00c4 00B5FFF7 	    _CALL func_args 
 2458      FEFF5DF8 
 2458      04EB
 2459 00ce 0228     	    cmp r0,#2 
 2460 00d0 7FF4FEAF 	    bne syntax_error 
 2461 00d4 5CF8040B 	    _POP r0 
 2462 00d8 5CF8041B 	    _POP r1 
 2463 00dc 01EA0001 	    and r1,r0 
ARM GAS  tinyBasic.s 			page 71


 2464 00e0 4FF01B00 	    mov r0,#TK_INTGR
 2465 00e4 7047     	    _RET
 2466              	
 2467              	/*******************************************
 2468              	  BASIC: ASC(string|char)
 2469              	  return ASCII code of char of first char 
 2470              	  of string 
 2471              	*******************************************/
 2472 00e6 00BF     	    _FUNC ascii
 2473 00e8 4FF00500 	    mov r0,#TK_LPAREN 
 2474 00ec 00B5FFF7 	    _CALL expect 
 2474      FEFF5DF8 
 2474      04EB
 2475 00f6 00B5FFF7 	    _CALL next_token 
 2475      FEFF5DF8 
 2475      04EB
 2476 0100 1C28     	    cmp r0,#TK_QSTR
 2477 0102 0AD0     	    beq 2f 
 2478 0104 1328     	    cmp r0,#TK_CHAR 
 2479 0106 00D1     	    bne 1f  
 2480 0108 08E0     	    b 9f
 2481 010a 1628     	1:  cmp r0,#TK_CFUNC 
 2482 010c 0846     	    mov r0,r1 
 2483 010e 00B5FFF7 	    _CALL execute
 2483      FEFF5DF8 
 2483      04EB
 2484 0118 00E0     	    b 9f      
 2485 011a 0978     	2:  ldrb r1,[r1]
 2486 011c 4CF8041D 	9:  _PUSH r1 
 2487 0120 4FF00600 	    mov r0,#TK_RPAREN 
 2488 0124 00B5FFF7 	    _CALL expect 
 2488      FEFF5DF8 
 2488      04EB
 2489 012e 4FF01B00 	    mov r0,#TK_INTGR 
 2490 0132 5CF8041B 	    _POP r1 
 2491 0136 7047     	    _RET
 2492              	
 2493              	    _FUNC autorun
 2494 0138 7047     	    _RET
 2495              	
 2496              	/*******************************************
 2497              	  BASIC: AWU time_sleep  
 2498              	  enable LSI and IWDG and place MCU in 
 2499              	  deep sleep. IDWG wakeup MCU 
 2500              	******************************************/
 2501 013a 00BF     	    _FUNC awu
 2502 013c 00B5FFF7 	    _CALL arg_list
 2502      FEFF5DF8 
 2502      04EB
 2503 0146 0128     	    cmp r0,#1 
 2504 0148 7FF4FEAF 	    bne syntax_error 
 2505 014c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2505      C4F20201 
 2506 0154 486A     	    ldr r0,[r1,#RCC_CSR]
 2507              	// enable LSI 
 2508 0156 80F00100 	    eor r0,#1
 2509 015a 4862     	    str r0,[r1,#RCC_CSR]
ARM GAS  tinyBasic.s 			page 72


 2510              	// wait for LSIRDY 
 2511 015c 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2512 015e 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2513 0162 FBD0     	    beq 1b 
 2514              	// configure IWDG
 2515              	// compute values for IWDG_PR and IWDG_RLR 
 2516 0164 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2517 0168 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2518 016c 03FB02F2 	    mul r2,r3 
 2519 0170 83EA0303 	    eor r3,r3
 2520 0174 B2F5005F 	2:  cmp r2,#8192 
 2521 0178 04D4     	    bmi 3f 
 2522 017a 4FEA5202 	    lsr r2,#1 
 2523 017e 03F10103 	    add r3,#1
 2524 0182 F7E7     	    b 2b
 2525              	// initialize IWDG      
 2526 0184 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2526      C4F20001 
 2527 018c 45F25550 	    mov r0,0x5555 // enable register writing
 2528 0190 0860     	    str r0,[r1,#IWDG_KR]
 2529 0192 4B60     	    str r3,[r1,#IWDG_PR]
 2530 0194 8A60     	    str r2,[r1,#IWDG_RLR]
 2531 0196 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2532 019a 0860     	    str r0,[r1,#IWDG_KR]
 2533 019c 00F0FCBF 	    b sleep // place MCU in deep sleep
 2534 01a0 7047     	    _RET
 2535              	
 2536              	/********************************************
 2537              	  BASIC: BIT(expr)
 2538              	  expr must be between 0..31 and is used 
 2539              	  to create 1 bit mask at that position
 2540              	*******************************************/
 2541 01a2 00BF     	    _FUNC bitmask
 2542 01a4 00B5FFF7 	    _CALL func_args
 2542      FEFF5DF8 
 2542      04EB
 2543 01ae 0128     	    cmp r0,#1 
 2544 01b0 7FF4FEAF 	    bne syntax_error 
 2545 01b4 5CF8040B 	    _POP r0
 2546 01b8 4FF00101 	    mov r1,#1
 2547 01bc 01FA00F1 	    lsl r1,r0 
 2548 01c0 4FF01B00 	9:  mov r0,#TK_INTGR
 2549 01c4 7047     	    _RET 
 2550              	
 2551              	  
 2552              	  /*********************************
 2553              	   BASIC: BRES adr, mask   
 2554              	   reset bits [adr]= [adr] & ~mask  
 2555              	   input:
 2556              	     none 
 2557              	    output;
 2558              	      none 
 2559              	    use:
 2560              	      T1   temp
 2561              	      T2   temp 
 2562              	*******************************/     
 2563 01c6 00BF     	  _FUNC bit_reset
ARM GAS  tinyBasic.s 			page 73


 2564 01c8 00B5FFF7 	    _CALL arg_list 
 2564      FEFF5DF8 
 2564      04EB
 2565 01d2 0228     	    cmp r0,#2 
 2566 01d4 01D0     	    beq 1f 
 2567 01d6 FFF7FEBF 	    b syntax_error 
 2568 01da 5CF8041B 	1:  _POP r1 //mask 
 2569 01de 5CF8040B 	    _POP r0 //address 
 2570 01e2 D0F80090 	    ldr T2,[r0] 
 2571 01e6 81F0FF31 	    eor r1,#-1 // ~mask 
 2572 01ea 01EA0901 	    and r1,T2
 2573 01ee 0160     	    str r1,[r0]
 2574 01f0 7047     	    _RET  
 2575              	
 2576              	
 2577              	/*********************************
 2578              	   BASIC: BSET adr, mask   
 2579              	   reset bits [adr]= [adr] & ~mask  
 2580              	   input:
 2581              	      none 
 2582              	    output;
 2583              	      none 
 2584              	    use:
 2585              	      T1   temp
 2586              	      T2   temp  
 2587              	*******************************/     
 2588 01f2 00BF     	    _FUNC bit_set
 2589 01f4 00B5FFF7 	    _CALL arg_list 
 2589      FEFF5DF8 
 2589      04EB
 2590 01fe 0228     	    cmp r0,#2 
 2591 0200 01D0     	    beq 1f 
 2592 0202 FFF7FEBF 	    b syntax_error 
 2593 0206 5CF8041B 	1:  _POP r1 //mask 
 2594 020a 5CF8040B 	    _POP r0 //address 
 2595 020e D0F80090 	    ldr T2,[r0] 
 2596 0212 41EA0901 	    orr r1,T2
 2597 0216 0160     	    str r1,[r0]
 2598 0218 7047     	    _RET 
 2599              	
 2600              	  /*********************************
 2601              	   BASIC: BTOGL adr, mask   
 2602              	   reset bits [adr]= [adr] & ~mask  
 2603              	   input:
 2604              	     r0    adr 
 2605              	     r1    mask 
 2606              	    output;
 2607              	      none 
 2608              	    use:
 2609              	      T1   temp
 2610              	      T2   temp  
 2611              	*******************************/     
 2612 021a 00BF     	  _FUNC bit_toggle
 2613 021c 00B5FFF7 	    _CALL arg_list 
 2613      FEFF5DF8 
 2613      04EB
 2614 0226 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 74


 2615 0228 01D0     	    beq 1f 
 2616 022a FFF7FEBF 	    b syntax_error 
 2617 022e 5CF8041B 	1:  _POP r1 //mask 
 2618 0232 5CF8040B 	    _POP r0 //address 
 2619 0236 D0F80090 	    ldr T2,[r0] 
 2620 023a 81EA0901 	    eor r1,T2
 2621 023e 0160     	    str r1,[r0]
 2622 0240 7047     	    _RET  
 2623              	
 2624              	/********************************
 2625              	  BASIC: BTEST(addr,bit)
 2626              	  return bit state at address
 2627              	********************************/
 2628 0242 00BF     	    _FUNC bit_test
 2629 0244 00B5FFF7 	    _CALL func_args
 2629      FEFF5DF8 
 2629      04EB
 2630 024e 0228     	    cmp r0,#2 
 2631 0250 7FF4FEAF 	    bne syntax_error 
 2632 0254 5CF8041B 	    _POP r1
 2633 0258 4FF00100 	    mov r0,#1
 2634 025c 01F01F01 	    and r1,#31  
 2635 0260 21B1     	1:  cbz r1, 2f
 2636 0262 4FEA4000 	    lsl r0,#1
 2637 0266 A1F10101 	    sub r1,#1
 2638 026a F9E7     	    b 1b 
 2639 026c 5CF8041B 	2:  _POP r1
 2640 0270 0968     	    ldr r1,[r1]
 2641 0272 01EA0001 	    and r1,r0 
 2642 0276 09B1     	    cbz r1,9f 
 2643 0278 4FF00101 	    mov r1,#1
 2644 027c 4FF01B00 	9:  mov r0,#TK_INTGR    
 2645 0280 7047     	    _RET 
 2646              	
 2647              	/********************************
 2648              	  BASIC: CLS 
 2649              	  clear terminal screen move cursor 
 2650              	  home 
 2651              	************************************/
 2652 0282 00BF     	    _FUNC cls 
 2653 0284 00B5FFF7 	    _CALL clear_screen
 2653      FEFF5DF8 
 2653      04EB
 2654 028e 7047     	    _RET 
 2655              	
 2656              	/*********************************
 2657              	  BASIC: CHAR(expr)
 2658              	  convert expr in character 
 2659              	********************************/
 2660              	    _FUNC char
 2661 0290 00B5FFF7 	    _CALL func_args
 2661      FEFF5DF8 
 2661      04EB
 2662 029a 0128     	    cmp r0,#1
 2663 029c 7FF4FEAF 	    bne syntax_error 
 2664 02a0 5CF8041B 	    _POP r1 
 2665 02a4 01F07F01 	    and r1,#127 
ARM GAS  tinyBasic.s 			page 75


 2666 02a8 4FF01300 	    mov r0,#TK_CHAR
 2667 02ac 7047     	    _RET 
 2668              	
 2669              	/**********************************
 2670              	  BASIC: CONST label=expr [,!label=expr]
 2671              	  define constants constants are 
 2672              	  store at end of BASIC code.
 2673              	  use:
 2674              	    T1   *location 
 2675              	    T2   *bound 
 2676              	*********************************/
 2677 02ae 00BF     	    _FUNC const
 2678 02b0 206C10F0 	    _RTO 
 2678      010F03D1 
 2678      4FF00700 
 2678      FFF7FEBF 
 2679 02c0 D4F8D080 	    ldr T1,[UPP,#HERE]
 2680 02c4 DFF8F896 	    ldr T2,pad_adr  
 2681 02c8 C845     	1:  cmp T1,T2 
 2682 02ca 03D4     	    bmi 2f 
 2683 02cc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2684 02d0 FFF7FEBF 	    b tb_error 
 2685 02d4 00B5FFF7 	2:  _CALL next_token 
 2685      FEFF5DF8 
 2685      04EB
 2686 02de 1A28     	    cmp r0,#TK_LABEL 
 2687 02e0 7FF4FEAF 	    bne syntax_error 
 2688 02e4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2689 02e8 4CF8041D 	    _PUSH r1 
 2690 02ec 4FF00D00 	    mov r0,#TK_EQUAL
 2691 02f0 00B5FFF7 	    _CALL expect
 2691      FEFF5DF8 
 2691      04EB
 2692 02fa 00B5FFF7 	    _CALL expression  
 2692      FEFF5DF8 
 2692      04EB
 2693 0304 1B28     	    cmp r0,#TK_INTGR
 2694 0306 7FF4FEAF 	    bne syntax_error
 2695 030a 5CF8040B 	    _POP r0 
 2696 030e 48F8040B 	    str r0,[T1],#4
 2697 0312 48F8041B 	    str r1,[T1],#4 
 2698 0316 C4F8D080 	    str T1,[UPP,#HERE]
 2699 031a 00B5FFF7 	    _CALL next_token
 2699      FEFF5DF8 
 2699      04EB
 2700 0324 0228     	    cmp r0,#TK_COMMA 
 2701 0326 CFD0     	    beq 1b 
 2702 0328 D4F800A0 	    _UNGET_TOKEN
 2702      D4F808B0 
 2703              	9:  
 2704 0330 7047     	    _RET 
 2705              	
 2706              	/*****************************
 2707              	  BASIC: READ 
 2708              	  read next data item 
 2709              	  the value can be assigned to
 2710              	  variable or used in expression
ARM GAS  tinyBasic.s 			page 76


 2711              	*****************************/
 2712 0332 00BF     	    _FUNC read
 2713 0334 206C10F0 	    _RTO
 2713      010F03D1 
 2713      4FF00700 
 2713      FFF7FEBF 
 2714 0344 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2715 0346 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2716 0348 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2717 034a 8242     	    cmp r2,r0
 2718 034c 18D0     	    beq seek_next
 2719 034e 4FF00103 	1:  mov r3,#1 
 2720 0352 885C     	    ldrb r0,[r1,r2]
 2721 0354 02F10102 	    add r2,#1
 2722 0358 0028     	    cmp r0,#TK_NONE
 2723 035a 11D0     	    beq seek_next
 2724 035c 0828     	    cmp r0,#TK_MINUS 
 2725 035e 05D1     	    bne 2f 
 2726 0360 4FF0FF33 	    mov r3,#-1
 2727 0364 885C     	    ldrb r0,[r1,r2]
 2728 0366 02F10102 	    add r2,#1
 2729 036a 01E0     	    b 3f  
 2730 036c 0228     	2:  cmp r0,#TK_COMMA
 2731 036e EED0     	    beq 1b  
 2732 0370 1B28     	3:  cmp r0,#TK_INTGR 
 2733 0372 7FF4FEAF 	    bne syntax_error  
 2734 0376 8958     	    ldr r1,[r1,r2]
 2735 0378 02F10402 	    add r2,#4
 2736 037c 2261     	    str r2,[UPP,#DATA]
 2737 037e 12E0     	    b 9f  
 2738              	seek_next: // is next line data ?
 2739 0380 8878     	    ldrb r0,[R1,#2]
 2740 0382 0144     	    add r1,r0 
 2741 0384 C878     	    ldrb r0,[R1,#3]
 2742 0386 1728     	    cmp r0,#TK_CMD
 2743 0388 09D1     	    bne 2f 
 2744 038a 0879     	    ldrb r0,[r1,#4]
 2745 038c 0E28     	    cmp r0,#DATA_IDX 
 2746 038e 06D1     	    bne 2f 
 2747 0390 E160     	    str r1,[UPP,#DATAPTR]
 2748 0392 8878     	    ldrb r0,[r1,#2]
 2749 0394 6061     	    str  r0,[UPP,#DATALEN]
 2750 0396 4FF00502 	    mov r2,#5 
 2751 039a 2261     	    str r2,[UPP,#DATA]
 2752 039c D7E7     	    b 1b 
 2753 039e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2754 03a2 FFF7FEBF 	    b tb_error 
 2755 03a6 7047     	9:  _RET 
 2756              	
 2757              	/********************************
 2758              	  BASIC: RESTORE [line#]
 2759              	  set data pointer to first data line 
 2760              	  or a specified line number 
 2761              	********************************/
 2762              	    _FUNC restore
 2763 03a8 206C10F0 	    _RTO 
 2763      010F03D1 
ARM GAS  tinyBasic.s 			page 77


 2763      4FF00700 
 2763      FFF7FEBF 
 2764 03b8 00B5FFF7 	    _CALL next_token 
 2764      FEFF5DF8 
 2764      04EB
 2765 03c2 1B28     	    cmp r0,#TK_INTGR 
 2766 03c4 05D0     	    beq 0f 
 2767 03c6 D4F800A0 	    _UNGET_TOKEN
 2767      D4F808B0 
 2768 03ce 4FF00001 	    mov r1,#0 
 2769 03d2 40F61763 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2770 03d6 0A46     	    mov r2,r1 
 2771 03d8 216B     	    ldr r1,[UPP,#TXTBGN]
 2772 03da D4F83480 	    ldr T1,[UPP,#TXTEND]
 2773 03de 4145     	1:  cmp r1,T1 
 2774 03e0 11D5     	    bpl no_data_line 
 2775 03e2 B1F80300 	    ldrh r0,[r1,#3]
 2776 03e6 9842     	    cmp r0,r3 
 2777 03e8 0AD1     	    bne try_next_line
 2778              	// this is a data line
 2779 03ea 12B1     	    cbz r2,2f 
 2780 03ec 0888     	    ldrh r0,[r1]
 2781 03ee 9042     	    cmp r0,r2 
 2782 03f0 06D1     	    bne try_next_line
 2783 03f2 E160     	2:  str r1,[UPP,#DATAPTR]
 2784 03f4 8878     	    ldrb r0,[r1,#2]
 2785 03f6 6061     	    str r0,[UPP,#DATALEN]
 2786 03f8 4FF00500 	    mov r0,#5 
 2787 03fc 2061     	    str r0,[UPP,#DATA]
 2788 03fe 07E0     	    b 9f
 2789              	try_next_line:
 2790 0400 8878     	    ldrb r0,[r1,#2]
 2791 0402 0144     	    add r1,r0 
 2792 0404 EBE7     	    b 1b 
 2793              	no_data_line:
 2794 0406 80EA0000 	    eor r0,r0 
 2795 040a E060     	    str r0,[UPP,#DATAPTR]
 2796 040c 2061     	    str r0,[UPP,#DATA]
 2797 040e 6061     	    str r0,[UPP,#DATALEN]
 2798 0410 7047     	9:  _RET 
 2799              	
 2800              	/***********************************
 2801              	  BASIC: DEC 
 2802              	  switch base to decimal 
 2803              	***********************************/
 2804 0412 00BF     	    _FUNC dec_base
 2805 0414 4FF00A00 	    mov r0,#10
 2806 0418 A061     	    str r0,[UPP,#BASE]
 2807 041a 7047     	    _RET 
 2808              	
 2809              	/***************************************
 2810              	  BASIC: DO 
 2811              	  initialize a DO..UNTIL loop 
 2812              	***************************************/
 2813              	    _FUNC do_loop
 2814 041c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2815 0420 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 78


 2816              	
 2817              	
 2818              	/****************************************
 2819              	  BASIC: DUMP adr, count 
 2820              	    command line only  
 2821              	    print memory content in hexadecimal 
 2822              	    16 bytes per row 
 2823              	    ouput:
 2824              	      none 
 2825              	    use:
 2826              	      r2   byte counter  
 2827              	****************************************/
 2828 0422 00BF     	    _FUNC dump 
 2829 0424 206C10F0 	    _CLO 
 2829      010F03D0 
 2829      4FF00700 
 2829      FFF7FEBF 
 2830 0434 00B5FFF7 	    _CALL arg_list 
 2830      FEFF5DF8 
 2830      04EB
 2831 043e 0228     	    cmp r0,#2
 2832 0440 7FF4FEAF 	    bne syntax_error 
 2833 0444 5CF8042B 	    _POP r2   // count 
 2834 0448 5CF8040B 	    _POP  r0  // adr
 2835              	dump01:
 2836 044c 00B500F0 	    _CALL print_dump_header 
 2836      0DF85DF8 
 2836      04EB
 2837 0456 4FF01001 	1:  mov r1,#16
 2838 045a 00B5FFF7 	    _CALL prt_row 
 2838      FEFF5DF8 
 2838      04EB
 2839 0464 103A     	    subs r2,#16 
 2840 0466 F6D5     	    bpl 1b 
 2841 0468 7047     	    _RET 
 2842              	
 2843              	/********************************
 2844              	   print_dump_header
 2845              	********************************/
 2846 046a 00BF     	    _FUNC print_dump_header
 2847 046c 2DE90103 	    push {r0,T1,T2}
 2848 0470 4FF00C00 	    mov r0,#12 
 2849 0474 00B5FFF7 	    _CALL cursor_x 
 2849      FEFF5DF8 
 2849      04EB
 2850 047e 4FF00000 	    mov r0,#0
 2851 0482 4FF01009 	    mov T2,#16
 2852 0486 8046     	1:  mov T1,r0 
 2853 0488 00B5FFF7 	    _CALL print_hex 
 2853      FEFF5DF8 
 2853      04EB
 2854 0492 08F10100 	    add r0,T1,#1  
 2855 0496 4845     	    cmp r0,T2 
 2856 0498 F5D4     	    bmi 1b 
 2857 049a 00B5FFF7 	    _CALL cr
 2857      FEFF5DF8 
 2857      04EB
ARM GAS  tinyBasic.s 			page 79


 2858 04a4 4FF03D00 	    mov r0,#'='
 2859 04a8 4FF04F08 	    mov T1,#79
 2860 04ac 00B5FFF7 	2:  _CALL uart_putc
 2860      FEFF5DF8 
 2860      04EB
 2861 04b6 B8F10108 	    subs T1,#1 
 2862 04ba F7D1     	    bne 2b     
 2863 04bc 00B5FFF7 	    _CALL cr
 2863      FEFF5DF8 
 2863      04EB
 2864 04c6 BDE80103 	    pop {r0,T1,T2}
 2865 04ca 7047     	    _RET 
 2866              	
 2867              	
 2868              	/*******************************
 2869              	  BASIC: END 
 2870              	  exit program 
 2871              	******************************/ 
 2872              	    _FUNC cmd_end
 2873 04cc FFF7FEBF 	    b warm_start 
 2874 04d0 7047     	    _RET 
 2875              	
 2876              	/*******************************************
 2877              	  BASIC: STORE adr, value 
 2878              	  write value to user space in flash memory 
 2879              	*********************************************/
 2880 04d2 00BF     	    _FUNC store 
 2881 04d4 00B5FFF7 	    _CALL arg_list 
 2881      FEFF5DF8 
 2881      04EB
 2882 04de 0228     	    cmp r0,#2 
 2883 04e0 7FF4FEAF 	    bne syntax_error 
 2884 04e4 BCE80300 	    ldmia DP!,{r0,r1}
 2885 04e8 DFF83020 	    ldr r2,user_space
 2886 04ec 9142     	    cmp r1,r2 
 2887 04ee 03D5     	    bpl 1f 
 2888 04f0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2889 04f4 FFF7FEBF 	    b tb_error 
 2890 04f8 02F58062 	1:  add r2,#1024 
 2891 04fc 9142     	    cmp r1,r2 
 2892 04fe F7D5     	    bpl 0b 
 2893 0500 00B5FFF7 	    _CALL flash_store 
 2893      FEFF5DF8 
 2893      04EB
 2894 050a 7047     	    _RET 
 2895              	
 2896              	/**************************************************
 2897              	  BASIC: ERASE 
 2898              	  erase user space page 
 2899              	*************************************************/
 2900              	    _FUNC erase 
 2901 050c DFF80C00 	    ldr r0,user_space 
 2902 0510 00B5FFF7 	    _CALL erase_page 
 2902      FEFF5DF8 
 2902      04EB
 2903 051a 7047     	    _RET 
 2904 051c 00000000 	user_space: .word user 
ARM GAS  tinyBasic.s 			page 80


 2905              	
 2906              	
 2907              	/**************************************************
 2908              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2909              	  introdure FOR...NEXT loop 
 2910              	**************************************************/
 2911              	    _FUNC for
 2912 0520 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2913 0524 4FF00107 	    mov INCR,#1
 2914 0528 00B5FFF7 	    _CALL next_token
 2914      FEFF5DF8 
 2914      04EB
 2915 0532 1428     	    cmp r0,#TK_VAR
 2916 0534 7FF4FEAF 	    bne syntax_error
 2917 0538 02B4     	    push {r1} 
 2918 053a 00B500F0 	    _CALL let_var 
 2918      2FF95DF8 
 2918      04EB
 2919 0544 20BC     	    pop {VADR}
 2920 0546 4FEA8505 	    lsl VADR,#2
 2921 054a 2544     	    add VADR,UPP 
 2922 054c 05F16005 	    add VADR,#VARS 
 2923 0550 7047     	    _RET 
 2924              	
 2925              	/***************************************
 2926              	  BASIC: TO expr 
 2927              	  set limit of FOR...NEXT loop 
 2928              	**************************************/
 2929 0552 00BF     	    _FUNC to
 2930 0554 00B5FFF7 	    _CALL expression 
 2930      FEFF5DF8 
 2930      04EB
 2931 055e 1B28     	    cmp r0,#TK_INTGR
 2932 0560 7FF4FEAF 	    bne syntax_error 
 2933 0564 0E46     	    mov LIMIT,r1
 2934              	    // save loop back parameters 
 2935 0566 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2936 056a 7047     	    _RET 
 2937              	
 2938              	/********************************************
 2939              	  BASIC: STEP expr 
 2940              	  set increment for FOR...NEXT loop 
 2941              	********************************************/
 2942              	    _FUNC step
 2943 056c 00B5FFF7 	    _CALL expression 
 2943      FEFF5DF8 
 2943      04EB
 2944 0576 1B28     	    cmp r0,#TK_INTGR
 2945 0578 7FF4FEAF 	    bne syntax_error 
 2946 057c 0F46     	    mov INCR,r1
 2947              	    // replace parameters left by TO
 2948 057e 8CE8000C 	    stmia DP, {IN,BPTR}
 2949 0582 7047     	    _RET 
 2950              	
 2951              	/********************************************
 2952              	  BASIC: NEXT var 
 2953              	  incrment FOR...NEXT loop variable
ARM GAS  tinyBasic.s 			page 81


 2954              	  exit if variable cross LIMIT 
 2955              	********************************************/
 2956              	    _FUNC next
 2957 0584 00B5FFF7 	    _CALL next_token 
 2957      FEFF5DF8 
 2957      04EB
 2958 058e 1428     	    cmp r0,#TK_VAR 
 2959 0590 7FF4FEAF 	    bne syntax_error 
 2960 0594 4FEA8101 	    lsl r1,#2 
 2961 0598 2144     	    add r1,UPP 
 2962 059a 01F16001 	    add r1,#VARS 
 2963 059e A942     	    cmp r1,VADR
 2964 05a0 7FF4FEAF 	    bne syntax_error 
 2965 05a4 2868     	    ldr r0,[VADR]
 2966 05a6 3844     	    add r0,INCR 
 2967 05a8 2860     	    str r0,[VADR]
 2968 05aa 002F     	    cmp INCR,#0
 2969 05ac 02D4     	    bmi 2f
 2970 05ae B042     	    cmp r0,LIMIT 
 2971 05b0 02DC     	    bgt 8f  
 2972 05b2 07E0     	    b 9f  
 2973 05b4 B042     	2:  cmp r0,LIMIT 
 2974 05b6 05DA     	    bge 9f  
 2975              	8: // exit for...next
 2976              	  //  drop branch parameters
 2977 05b8 4FF00800 	    _DROP 2
 2977      8444
 2978              	  // restore outer loop parameters
 2979 05be BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2980 05c2 7047     	    _RET 
 2981 05c4 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2982 05c8 9BF80200 	    ldrb r0,[BPTR,#2]
 2983 05cc 6060     	    str r0,[UPP,#COUNT]
 2984 05ce 00B5FFF7 	    _CALL show_trace 
 2984      FEFF5DF8 
 2984      04EB
 2985 05d8 7047     	    _RET 
 2986              	
 2987              	
 2988              	/*********************************
 2989              	  BASIC: GOSUB expr 
 2990              	  call a subroutine at line# 
 2991              	*********************************/
 2992 05da 00BF     	    _FUNC gosub
 2993 05dc 00B5FFF7 	    _CALL search_target 
 2993      FEFF5DF8 
 2993      04EB
 2994 05e6 2DE9000C 	    push {IN,BPTR}
 2995              	target:
 2996 05ea 8346     	    mov BPTR,r0 
 2997 05ec 4FF0030A 	    mov IN,#3 
 2998 05f0 9BF80200 	    ldrb r0,[BPTR,#2]
 2999 05f4 6060     	    str r0,[UPP,#COUNT]
 3000 05f6 00B5FFF7 	    _CALL show_trace 
 3000      FEFF5DF8 
 3000      04EB
 3001 0600 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 82


 3002              	
 3003              	/**********************************
 3004              	  BASIC: RETURN 
 3005              	  leave a subroutine 
 3006              	*********************************/
 3007 0602 00BF     	    _FUNC return 
 3008 0604 BDE8000C 	    pop {IN,BPTR}
 3009 0608 9BF80200 	    ldrb r0,[BPTR,#2]
 3010 060c 6060     	    str r0,[UPP,#COUNT]
 3011 060e 00B5FFF7 	    _CALL show_trace 
 3011      FEFF5DF8 
 3011      04EB
 3012 0618 7047     	    _RET 
 3013              	
 3014              	/**********************************
 3015              	  BASIC: GOTO expr 
 3016              	  go to line # | label 
 3017              	**********************************/
 3018 061a 00BF     	    _FUNC goto
 3019 061c 00B5FFF7 	    _CALL search_target 
 3019      FEFF5DF8 
 3019      04EB
 3020 0626 E0E7     	    b target  
 3021              	
 3022              	/***************************************
 3023              	  BASIC: HEX 
 3024              	  set numeric base to hexadecimal 
 3025              	***************************************/
 3026              	    _FUNC hex_base
 3027 0628 4FF01000 	    mov r0,#16 
 3028 062c A061     	    str r0,[UPP,#BASE]
 3029 062e 7047     	    _RET 
 3030              	
 3031              	/**********************************************
 3032              	  BASIC: IF relation THEN statement
 3033              	  execute statement only if relation is true
 3034              	*********************************************/
 3035              	    _FUNC if
 3036 0630 00B5FFF7 	    _CALL relation 
 3036      FEFF5DF8 
 3036      04EB
 3037 063a 09B9     	    cbnz r1,9f 
 3038 063c D4F804A0 	    ldr IN,[UPP,#COUNT]
 3039 0640 7047     	9:  _RET 
 3040              	
 3041              	/*******************************************************
 3042              	  BASIC: THEN statement
 3043              	  statements following THEN are executed if relation is !=0
 3044              	  optional, retained for compatibility.
 3045              	******************************************************/
 3046 0642 00BF     	    _FUNC then 
 3047              	// do nothing 
 3048 0644 7047     	    _RET
 3049              	
 3050              	/****************************************
 3051              	  BASIC: INPUT [string]var [,[string]var]+
 3052              	  prompt user for variable value
ARM GAS  tinyBasic.s 			page 83


 3053              	  use:
 3054              	    r2   
 3055              	    T1   variable indice 
 3056              	***************************************/
 3057 0646 00BF     	     _FUNC input_var
 3058 0648 2DE90401 	    push {r2,T1}
 3059 064c 00B5FFF7 	1:  _CALL next_token 
 3059      FEFF5DF8 
 3059      04EB
 3060 0656 0228     	    cmp r0,#2
 3061 0658 71D4     	    bmi 8f 
 3062 065a 1C28     	    cmp r0,#TK_QSTR 
 3063 065c 11D1     	    bne 2f 
 3064 065e 0846     	    mov r0,r1
 3065 0660 DFF8EC10 	    ldr r1,str_buffer
 3066 0664 00B5FFF7 	    _CALL strcpy
 3066      FEFF5DF8 
 3066      04EB
 3067 066e 4FF01400 	    mov r0,#TK_VAR   
 3068 0672 00B5FFF7 	    _CALL expect 
 3068      FEFF5DF8 
 3068      04EB
 3069 067c 8846     	    mov T1,r1 
 3070 067e 3448     	    ldr r0,str_buffer 
 3071 0680 08E0     	    b 3f 
 3072 0682 1428     	2:  cmp r0,#TK_VAR 
 3073 0684 7FF4FEAF 	    bne syntax_error     
 3074 0688 8846     	    mov T1,r1 
 3075 068a 01F14100 	    add r0,r1,#'A' 
 3076 068e 3049     	    ldr r1,str_buffer
 3077 0690 0880     	    strh r0,[r1]
 3078 0692 0846     	    mov r0,r1 
 3079 0694 00B5FFF7 	3:  _CALL uart_puts  
 3079      FEFF5DF8 
 3079      04EB
 3080 069e 4FF03D00 	    mov r0,#'='
 3081 06a2 00B5FFF7 	    _CALL uart_putc
 3081      FEFF5DF8 
 3081      04EB
 3082 06ac DFF89C00 	    ldr r0,input_buffer
 3083 06b0 4FF02201 	    mov r1,#34 
 3084 06b4 00B5FFF7 	    _CALL readln
 3084      FEFF5DF8 
 3084      04EB
 3085 06be 79B3     	    cbz r1,6f
 3086 06c0 0178     	    ldrb r1,[r0]
 3087 06c2 01B4     	    push {r0}
 3088 06c4 0846     	    mov r0,r1
 3089 06c6 00B5FFF7 	    _CALL is_letter 
 3089      FEFF5DF8 
 3089      04EB
 3090 06d0 01BC     	    pop {r0}
 3091 06d2 02D1     	    bne 3f 
 3092 06d4 01F05F01 	    and r1,#0x5f // uppercase  
 3093 06d8 24E0     	    b 7f 
 3094 06da 4FF00102 	3:  mov r2,#1
 3095 06de 2D29     	    cmp r1,#'-'
ARM GAS  tinyBasic.s 			page 84


 3096 06e0 04D1     	    bne 3f 
 3097 06e2 4FF0FF32 	    mov r2,#-1 
 3098 06e6 00F10100 	    add r0,#1 
 3099 06ea 0DE0     	    b 4f  
 3100 06ec 2429     	3:  cmp r1,#'$'
 3101 06ee 04D1     	    bne 3f 
 3102 06f0 4FF01001 	    mov r1,#16
 3103 06f4 00F10100 	    add r0,#1  
 3104 06f8 08E0     	    b 5f 
 3105 06fa 2629     	3:  cmp r1,#'&' 
 3106 06fc 04D1     	    bne 4f 
 3107 06fe 4FF00201 	    mov r1,#2
 3108 0702 00F10100 	    add r0,#1 
 3109 0706 01E0     	    b 5f 
 3110 0708 4FF00A01 	4:  mov r1,#10 
 3111 070c 00B5FFF7 	5:  _CALL atoi 
 3111      FEFF5DF8 
 3111      04EB
 3112 0716 18B9     	    cbnz r0,6f
 3113 0718 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3114 071c FFF7FEBF 	    b tb_error
 3115 0720 02FB01F1 	6:  mul r1,r2 
 3116 0724 4046     	7:  mov r0,T1 
 3117 0726 00B5FFF7 	    _CALL set_var
 3117      FEFF5DF8 
 3117      04EB
 3118 0730 00B5FFF7 	    _CALL next_token
 3118      FEFF5DF8 
 3118      04EB
 3119 073a 0228     	    cmp r0,#TK_COMMA 
 3120 073c 86D0     	    beq 1b 
 3121 073e D4F800A0 	8:  _UNGET_TOKEN          
 3121      D4F808B0 
 3122 0746 BDE80401 	9:  pop {r2,T1}       
 3123 074a 7047     	    _RET 
 3124 074c 00000000 	input_buffer: .word _tib 
 3125 0750 00000000 	str_buffer: .word _pad 
 3126              	
 3127              	
 3128              	/*****************************************
 3129              	  BASIC: INVERT(expr)
 3130              	  return 1's complement of expr
 3131              	****************************************/
 3132              	    _FUNC invert
 3133 0754 00B5FFF7 	    _CALL func_args
 3133      FEFF5DF8 
 3133      04EB
 3134 075e 0128     	    cmp r0,#1 
 3135 0760 7FF4FEAF 	    bne syntax_error
 3136 0764 5CF8041B 	    _POP r1  
 3137 0768 6FEA0101 	    mvn r1,r1
 3138 076c 4FF01B00 	    mov r0,#TK_INTGR
 3139 0770 7047     	    _RET 
 3140              	
 3141              	/*************************************
 3142              	  BASIC: KEY 
 3143              	  wait for a character from console
ARM GAS  tinyBasic.s 			page 85


 3144              	*************************************/
 3145 0772 00BF     	    _FUNC key
 3146 0774 00B5FFF7 	    _CALL uart_getc
 3146      FEFF5DF8 
 3146      04EB
 3147 077e 0146     	    mov r1,r0
 3148 0780 4FF01300 	    mov r0,#TK_CHAR 
 3149 0784 7047     	    _RET  
 3150              	
 3151              	/******************************
 3152              	  BASIC: [LET] var=expr 
 3153              	         [LET] @(expr)=expr
 3154              	  input:
 3155              	    none 
 3156              	  output:
 3157              	    none 
 3158              	  use:
 3159              	
 3160              	****************************/         
 3161 0786 00BF     	    _FUNC let
 3162 0788 00B5FFF7 	    _CALL next_token 
 3162      FEFF5DF8 
 3162      04EB
 3163 0792 1428     	    cmp r0,#TK_VAR
 3164 0794 03D0     	    beq let_var 
 3165 0796 0C28     	    cmp r0,#TK_ARRAY 
 3166 0798 07D0     	    beq let_array 
 3167 079a FFF7FEBF 	    b syntax_error 
 3168              	let_var:
 3169 079e 4FEA8101 	    lsl r1,#2
 3170 07a2 04F16000 	    add r0,UPP,#VARS
 3171 07a6 0844     	    add r0,r1
 3172 07a8 1FE0     	    b 1f 
 3173              	let_array: 
 3174 07aa 4FF00500 	    mov r0,#TK_LPAREN
 3175 07ae 00B5FFF7 	    _CALL expect 
 3175      FEFF5DF8 
 3175      04EB
 3176 07b8 00B5FFF7 	    _CALL expression
 3176      FEFF5DF8 
 3176      04EB
 3177 07c2 1B28     	    cmp r0,#TK_INTGR 
 3178 07c4 7FF4FEAF 	    bne syntax_error
 3179 07c8 4CF8041D 	    _PUSH r1 
 3180 07cc 4FF00600 	    mov r0,#TK_RPAREN
 3181 07d0 00B5FFF7 	    _CALL expect 
 3181      FEFF5DF8 
 3181      04EB
 3182 07da 5CF8041B 	    _POP r1 
 3183 07de D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3184 07e2 4FEA8101 	    lsl r1,#2 
 3185 07e6 A0EB0100 	    sub r0,r1 
 3186 07ea 4CF8040D 	1:  _PUSH r0 
 3187 07ee 4FF00D00 	    mov r0,#TK_EQUAL 
 3188 07f2 00B5FFF7 	    _CALL expect 
 3188      FEFF5DF8 
 3188      04EB
ARM GAS  tinyBasic.s 			page 86


 3189 07fc 00B5FFF7 	    _CALL expression   
 3189      FEFF5DF8 
 3189      04EB
 3190 0806 1B28     	    cmp r0,#TK_INTGR
 3191 0808 7FF4FEAF 	    bne syntax_error   
 3192 080c 5CF8040B 	2:  _POP r0 
 3193 0810 0160     	    str r1,[r0]
 3194 0812 7047     	    _RET  
 3195              	
 3196              	/***************************************
 3197              	  BASIC: LIST [[first]-last]
 3198              	  use:
 3199              	    r2   first line# 
 3200              	    r3   last line#
 3201              	    T1   *line 
 3202              	    T2   TXTEND 
 3203              	**************************************/  
 3204              	    _FUNC list
 3205 0814 206C10F0 	    _CLO
 3205      010F03D0 
 3205      4FF00700 
 3205      FFF7FEBF 
 3206 0824 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3207 0828 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3208 082c B8F80020 	    ldrh r2,[T1]
 3209 0830 4FF6FF73 	    mov r3,#65535 
 3210 0834 00B5FFF7 	    _CALL next_token 
 3210      FEFF5DF8 
 3210      04EB
 3211 083e 10B3     	    cbz r0,6f 
 3212 0840 1B28     	    cmp r0,#TK_INTGR
 3213 0842 09D1     	    bne 1f 
 3214 0844 0A46     	    mov r2,r1 // first line
 3215 0846 00B5FFF7 	    _CALL next_token
 3215      FEFF5DF8 
 3215      04EB
 3216 0850 0028     	    cmp r0,#TK_NONE 
 3217 0852 01D1     	    bne 1f 
 3218 0854 1346     	    mov r3,r2 
 3219 0856 0CE0     	    b 4f 
 3220 0858 0828     	1:  cmp r0,#TK_MINUS 
 3221 085a 7FF4FEAF 	    bne syntax_error 
 3222 085e 00B5FFF7 	    _CALL next_token 
 3222      FEFF5DF8 
 3222      04EB
 3223 0868 18B1     	    cbz r0,4f 
 3224 086a 1B28     	    cmp r0,#TK_INTGR
 3225 086c 7FF4FEAF 	    bne syntax_error  
 3226 0870 0B46     	    mov r3,r1 
 3227              	4:  // skip lines below r2 
 3228 0872 B8F80000 	    ldrh r0,[T1]
 3229 0876 9042     	    cmp r0,r2 
 3230 0878 05D5     	    bpl 6f 
 3231 087a 98F80200 	    ldrb r0,[T1,#2]
 3232 087e 8044     	    add T1,r0
 3233 0880 C845     	    cmp T1,T2 
 3234 0882 F6D4     	    bmi 4b
ARM GAS  tinyBasic.s 			page 87


 3235 0884 1AE0     	    b 9f 
 3236 0886 C845     	6:  cmp T1,T2  
 3237 0888 18D5     	    bpl 9f
 3238 088a 4046     	    mov r0,T1   
 3239 088c DFF83010 	    ldr r1,out_buff 
 3240 0890 00B5FFF7 	    _CALL decompile_line 
 3240      FEFF5DF8 
 3240      04EB
 3241 089a 00B5FFF7 	    _CALL uart_puts 
 3241      FEFF5DF8 
 3241      04EB
 3242 08a4 00B5FFF7 	    _CALL cr 
 3242      FEFF5DF8 
 3242      04EB
 3243 08ae 98F80200 	    ldrb r0,[T1,#2]
 3244 08b2 8044     	    add T1,r0
 3245 08b4 B8F80000 	    ldrh r0,[T1]
 3246 08b8 9842     	    cmp r0,r3 
 3247 08ba E4DD     	    ble 6b 
 3248 08bc FFF7FEBF 	9:  b warm_start 
 3249 08c0 00000000 	out_buff: .word _tib 
 3250              	
 3251              	/********************************
 3252              	  BASIC: LOCATE line,col
 3253              	  return log base 2 of expr 
 3254              	********************************/
 3255              	    _FUNC locate
 3256 08c4 00B5FFF7 	    _CALL arg_list 
 3256      FEFF5DF8 
 3256      04EB
 3257 08ce 0228     	    cmp r0,#2 
 3258 08d0 7FF4FEAF 	    bne syntax_error
 3259 08d4 5CF8041B 	    _POP r1
 3260 08d8 5CF8040B 	    _POP r0  
 3261 08dc 00B5FFF7 	    _CALL set_curpos 
 3261      FEFF5DF8 
 3261      04EB
 3262 08e6 7047     	    _RET 
 3263              	
 3264              	
 3265              	/****************************************
 3266              	  BASIC: LSHIFT(expr1,expr2)
 3267              	  shift right expr1 of expr2 bits 
 3268              	****************************************/
 3269              	    _FUNC lshift
 3270 08e8 00B5FFF7 	    _CALL func_args
 3270      FEFF5DF8 
 3270      04EB
 3271 08f2 0228     	    cmp r0,#2
 3272 08f4 7FF4FEAF 	    bne syntax_error 
 3273 08f8 BCE80300 	    ldmia DP!,{r0,r1}
 3274 08fc 01FA00F1 	    lsl r1,r0 
 3275 0900 4FF01B00 	    mov r0,#TK_INTGR
 3276 0904 7047     	    _RET 
 3277              	
 3278              	/***********************************
 3279              	  BASIC: NEW 
ARM GAS  tinyBasic.s 			page 88


 3280              	  delete existing program in memory
 3281              	  and clear variables and RAM 
 3282              	***********************************/
 3283 0906 00BF     	    _FUNC new
 3284 0908 206C10F0 	    _CLO 
 3284      010F03D0 
 3284      4FF00700 
 3284      FFF7FEBF 
 3285 0918 00B5FFF7 	    _CALL clear_basic 
 3285      FEFF5DF8 
 3285      04EB
 3286 0922 FFF7FEBF 	    b warm_start   
 3287              	
 3288              	/************************************
 3289              	  BASIC: NOT relation  
 3290              	  invert logical value or relation
 3291              	************************************/
 3292 0926 00BF     	      _FUNC func_not
 3293 0928 00B5FFF7 	      _CALL relation 
 3293      FEFF5DF8 
 3293      04EB
 3294 0932 11B1     	      cbz r1,8f 
 3295 0934 81EA0101 	      eor r1,r1
 3296 0938 01E0     	      b 9f 
 3297 093a 4FF0FF31 	  8:  mov r1,#-1
 3298 093e 7047     	  9:  _RET 
 3299              	
 3300              	/******************************************
 3301              	  BASIC: OR(expr1,expr2)
 3302              	  binary OR between 2 expressions
 3303              	******************************************/
 3304              	    _FUNC bit_or
 3305 0940 00B5FFF7 	    _CALL func_args
 3305      FEFF5DF8 
 3305      04EB
 3306 094a 0228     	    cmp r0,#2
 3307 094c 7FF4FEAF 	    bne syntax_error
 3308 0950 5CF8040B 	    _POP r0 
 3309 0954 5CF8041B 	    _POP r1
 3310 0958 41EA0001 	    orr r1,r0 
 3311 095c 4FF01B00 	    mov r0,#TK_INTGR
 3312 0960 7047     	    _RET 
 3313              	
 3314              	/****************************************
 3315              	  BASIC: IN(gpio,pin) 
 3316              	  read gpio_idr selected pin  
 3317              	***************************************/
 3318 0962 00BF     	    _FUNC pin_input 
 3319 0964 00B5FFF7 	    _CALL func_args 
 3319      FEFF5DF8 
 3319      04EB
 3320 096e 0228     	    cmp r0,#2 
 3321 0970 7FF4FEAF 	    bne syntax_error  
 3322 0974 BCE80300 	    ldmia DP!,{r0,r1}
 3323 0978 4FF00802 	    mov r2,#GPIO_IDR 
 3324 097c 8A58     	    ldr r2,[r1,r2]
 3325 097e 00F00F00 	    and r0,#15 
ARM GAS  tinyBasic.s 			page 89


 3326 0982 22FA00F2 	    lsr r2,r0 
 3327 0986 02F00101 	    and r1,r2,#1 
 3328 098a 4FF01B00 	    mov r0,#TK_INTGR
 3329 098e 7047     	    _RET 
 3330              	
 3331              	
 3332              	/****************************************
 3333              	  BASIC: OUT gpio,pin,value 
 3334              	   output to gpio_odr
 3335              	***************************************/
 3336              	    _FUNC out
 3337 0990 00B5FFF7 	    _CALL arg_list 
 3337      FEFF5DF8 
 3337      04EB
 3338 099a 0328     	    cmp r0,#3 
 3339 099c 7FF4FEAF 	    bne syntax_error 
 3340 09a0 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3341 09a4 08B9     	    cbnz r0,1f 
 3342 09a6 01F11001 	    add r1,#16 
 3343 09aa 4FF00100 	1:  mov r0,#1 
 3344 09ae 00FA01F0 	    lsl r0,r1 
 3345 09b2 1061     	    str r0,[r2,#GPIO_BSRR]    
 3346 09b4 7047     	    _RET 
 3347              	
 3348              	
 3349              	/****************************************
 3350              	  BASIC: PAD 
 3351              	  return pad buffer address 
 3352              	****************************************/
 3353 09b6 00BF     	    _FUNC pad_ref
 3354 09b8 0149     	    ldr r1,pad_adr  
 3355 09ba 4FF01B00 	    mov r0,#TK_INTGR 
 3356 09be 7047     	    _RET 
 3357 09c0 00000000 	pad_adr: .word _pad 
 3358              	
 3359              	/***********************
 3360              	  BASIC: PAUSE expr 
 3361              	  suspend execution for 
 3362              	  expr milliseconds 
 3363              	************************/
 3364              	    _FUNC pause
 3365 09c4 00B5FFF7 	    _CALL expression 
 3365      FEFF5DF8 
 3365      04EB
 3366 09ce 1B28     	    cmp r0,#TK_INTGR 
 3367 09d0 7FF4FEAF 	    bne syntax_error 
 3368 09d4 E069     	    ldr r0,[UPP,#TICKS]
 3369 09d6 0844     	    add r0,r1 
 3370 09d8 E169     	1:  ldr r1,[UPP,#TICKS]
 3371 09da 8842     	    cmp r0,r1 
 3372 09dc FCD1     	    bne 1b     
 3373 09de 7047     	    _RET 
 3374              	
 3375              	/***************************************************
 3376              	  BASIC: PMODE GPIOx,pin,mode
 3377              	  configure a digital pin for input|output
 3378              	  paramters:
ARM GAS  tinyBasic.s 			page 90


 3379              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3380              	    pin      pin {0..15} 
 3381              	    mode 
 3382              	    for input mode:
 3383              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3384              	    for output mode:
 3385              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3386              	***************************************************/
 3387              	    _FUNC pin_mode
 3388 09e0 00B5FFF7 	    _CALL arg_list
 3388      FEFF5DF8 
 3388      04EB
 3389 09ea 0328     	    cmp r0,#3 
 3390 09ec 7FF4FEAF 	    bne syntax_error 
 3391 09f0 5CF8042B 	    _POP r2 // mode 
 3392 09f4 5CF8041B 	    _POP r1 // pin 
 3393 09f8 5CF8040B 	    _POP r0 // gpio 
 3394 09fc 00B500F0 	    _CALL gpio_config 
 3394      03F85DF8 
 3394      04EB
 3395 0a06 7047     	    _RET 
 3396              	
 3397              	/**********************************
 3398              	  gpio_config 
 3399              	  Configure gpio mode 
 3400              	  input:
 3401              	    r0   GPIOx 
 3402              	    r1   pin 
 3403              	    r2   mode 
 3404              	  output:
 3405              	    none 
 3406              	  use:
 3407              	    r3,T1 
 3408              	**********************************/
 3409              	    _FUNC gpio_config
 3410 0a08 2DE90801 	    push {r3,T1}
 3411 0a0c 8046     	    mov T1,r0 
 3412 0a0e 80EA0000 	    eor r0,r0 
 3413 0a12 102A     	    cmp r2,#16
 3414 0a14 04D4     	    bmi 0f
 3415 0a16 5FEA7202 	    rors r2,#1  
 3416 0a1a 01D3     	    bcc 0f 
 3417 0a1c 4FF00100 	    mov r0,#1
 3418 0a20 00FA01F0 	0:  lsl r0,r1
 3419 0a24 9081     	    strh r0,[r2,#GPIO_ODR]
 3420 0a26 0829     	1:  cmp r1,#8
 3421 0a28 03D4     	    bmi 2f 
 3422 0a2a 08F10408 	    add T1,#4 // CRH
 3423 0a2e A1F10801 	    sub r1,#8 
 3424              	2:  
 3425 0a32 4FEA8101 	    lsl r1,#2 
 3426 0a36 4FF00F00 	    mov r0,#15
 3427 0a3a 00FA01F0 	    lsl r0,r1
 3428 0a3e 6FEA0000 	    mvn r0,r0 
 3429 0a42 D8F80030 	    ldr r3,[T1]
 3430 0a46 03EA0003 	    and r3,r0 
 3431 0a4a 02FA01F2 	    lsl r2,r1
ARM GAS  tinyBasic.s 			page 91


 3432 0a4e 43EA0203 	    orr r3,r2 
 3433 0a52 C8F80030 	    str r3,[T1]
 3434 0a56 BDE80801 	    pop {r3,T1}
 3435 0a5a 7047     	    _RET 
 3436              	
 3437              	
 3438              	/*****************************************
 3439              	  BASIC: PEEKB (expr)  
 3440              	  return byte value at address 
 3441              	*****************************************/
 3442              	    _FUNC peek8
 3443 0a5c 00B5FFF7 	    _CALL func_args  
 3443      FEFF5DF8 
 3443      04EB
 3444 0a66 0128     	    cmp r0,#1
 3445 0a68 3FF5FEAF 	    bmi syntax_error
 3446 0a6c 5CF8041B 	    _POP r1 
 3447 0a70 0978     	    ldrb r1,[r1]
 3448 0a72 4FF01B00 	    mov r0,#TK_INTGR     
 3449 0a76 7047     	    _RET 
 3450              	
 3451              	/*****************************************
 3452              	  BASIC: PEEKH (expr)  
 3453              	  return byte value at address 
 3454              	*****************************************/
 3455              	    _FUNC peek16
 3456 0a78 00B5FFF7 	    _CALL func_args  
 3456      FEFF5DF8 
 3456      04EB
 3457 0a82 0128     	    cmp r0,#1
 3458 0a84 3FF5FEAF 	    bmi syntax_error
 3459 0a88 5CF8041B 	    _POP r1 
 3460 0a8c 0988     	    ldrh r1,[r1]
 3461 0a8e 4FF01B00 	    mov r0,#TK_INTGR     
 3462 0a92 7047     	    _RET 
 3463              	
 3464              	/*****************************************
 3465              	  BASIC: PEEKW (expr)  
 3466              	  return byte value at address 
 3467              	*****************************************/
 3468              	    _FUNC peek32
 3469 0a94 00B5FFF7 	    _CALL func_args  
 3469      FEFF5DF8 
 3469      04EB
 3470 0a9e 0128     	    cmp r0,#1
 3471 0aa0 3FF5FEAF 	    bmi syntax_error
 3472 0aa4 5CF8041B 	    _POP r1 
 3473 0aa8 0968     	    ldr r1,[r1]
 3474 0aaa 4FF01B00 	    mov r0,#TK_INTGR     
 3475 0aae 7047     	    _RET 
 3476              	
 3477              	
 3478              	/**********************************
 3479              	  BASIC: POKE8 addr,byte
 3480              	  store byte at addr   
 3481              	**********************************/
 3482              	    _FUNC poke8
ARM GAS  tinyBasic.s 			page 92


 3483 0ab0 00B5FFF7 	    _CALL arg_list
 3483      FEFF5DF8 
 3483      04EB
 3484 0aba 0228     	    cmp r0,#2 
 3485 0abc 7FF4FEAF 	    bne syntax_error
 3486 0ac0 BCE80300 	    ldmia DP!,{r0,r1} 
 3487 0ac4 0870     	    strb r0,[r1]
 3488 0ac6 7047     	    _RET 
 3489              	
 3490              	/**********************************
 3491              	  BASIC: POKE16 addr,hword
 3492              	  store hword at addr   
 3493              	**********************************/
 3494              	    _FUNC poke16
 3495 0ac8 00B5FFF7 	    _CALL arg_list
 3495      FEFF5DF8 
 3495      04EB
 3496 0ad2 0228     	    cmp r0,#2 
 3497 0ad4 7FF4FEAF 	    bne syntax_error
 3498 0ad8 BCE80300 	    ldmia DP!,{r0,r1} 
 3499 0adc 0880     	    strh r0,[r1]
 3500 0ade 7047     	    _RET 
 3501              	
 3502              	/**********************************
 3503              	  BASIC: POKE32 addr,word
 3504              	  store word at addr   
 3505              	**********************************/
 3506              	    _FUNC poke32
 3507 0ae0 00B5FFF7 	    _CALL arg_list 
 3507      FEFF5DF8 
 3507      04EB
 3508 0aea 0228     	    cmp r0,#2 
 3509 0aec 7FF4FEAF 	    bne syntax_error
 3510 0af0 BCE80300 	    ldmia DP!,{r0,r1} 
 3511 0af4 0860     	    str r0,[r1]
 3512 0af6 7047     	    _RET 
 3513              	
 3514              	
 3515              	
 3516              	/****************************
 3517              	  BASIC: PRINT|? arg_list 
 3518              	  print list of arguments 
 3519              	****************************/
 3520              	    _FUNC print
 3521 0af8 206C     	    ldr r0,[UPP,#FLAGS]
 3522 0afa 40F08000 	    orr r0,#FPRINT 
 3523 0afe 2064     	    str r0,[UPP,#FLAGS]
 3524 0b00 88EA0808 	    eor T1,T1 
 3525 0b04 00B5FFF7 	0:  _CALL expression
 3525      FEFF5DF8 
 3525      04EB
 3526 0b0e 1B28     	    cmp r0,#TK_INTGR
 3527 0b10 07D1     	    bne 1f 
 3528 0b12 0846     	    mov r0,r1
 3529 0b14 A169     	    ldr r1,[UPP,#BASE]
 3530 0b16 00B5FFF7 	    _CALL print_int
 3530      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 93


 3530      04EB
 3531 0b20 39E0     	    b 8f  
 3532 0b22 0128     	1:  cmp r0,#TK_COLON 
 3533 0b24 00DC     	    bgt 2f
 3534 0b26 4DE0     	    b unget_exit 
 3535 0b28 1C28     	2:  cmp r0,#TK_QSTR 
 3536 0b2a 06D1     	    bne 3f
 3537 0b2c 0846     	    mov r0,r1 
 3538 0b2e 00B5FFF7 	    _CALL uart_puts  
 3538      FEFF5DF8 
 3538      04EB
 3539 0b38 2DE0     	    b 8f 
 3540 0b3a 1628     	3:  cmp r0,#TK_CFUNC
 3541 0b3c 05D1     	    bne 4f
 3542 0b3e 0846     	    mov r0,r1
 3543 0b40 00B5FFF7 	    _CALL execute 
 3543      FEFF5DF8 
 3543      04EB
 3544 0b4a 1328     	4:  cmp r0,#TK_CHAR 
 3545 0b4c 06D1     	    bne 5f 
 3546 0b4e 0846     	    mov r0,r1 
 3547 0b50 00B5FFF7 	    _CALL uart_putc 
 3547      FEFF5DF8 
 3547      04EB
 3548 0b5a 1CE0     	    b 8f 
 3549 0b5c 0428     	5:  cmp r0,#TK_SHARP
 3550 0b5e 09D1     	    bne 6f 
 3551 0b60 00B5FFF7 	   _CALL next_token
 3551      FEFF5DF8 
 3551      04EB
 3552 0b6a 1B28     	    cmp r0,#TK_INTGR  
 3553 0b6c 7FF4FEAF 	    bne syntax_error 
 3554 0b70 6164     	    str r1,[UPP,#TAB_WIDTH]
 3555 0b72 10E0     	    b 8f 
 3556 0b74 1728     	6:  cmp r0,#TK_CMD 
 3557 0b76 25D1     	    bne unget_exit  
 3558 0b78 4929     	    cmp r1,#TAB_IDX 
 3559 0b7a 05D1     	    bne 6f
 3560 0b7c 00B500F0 	    _CALL tab 
 3560      59FB5DF8 
 3560      04EB
 3561 0b86 06E0     	    b 8f 
 3562 0b88 4529     	6:  cmp r1,#SPC_IDX  
 3563 0b8a 1BD1     	    bne unget_exit
 3564 0b8c 00B500F0 	    _CALL spc   
 3564      13FB5DF8 
 3564      04EB
 3565 0b96 88EA0808 	8:  eor T1,T1  
 3566 0b9a 00B5FFF7 	    _CALL next_token
 3566      FEFF5DF8 
 3566      04EB
 3567 0ba4 90B1     	    cbz r0, print_exit  
 3568 0ba6 0228     	    cmp r0,#TK_COMMA 
 3569 0ba8 02D1     	    bne 8f 
 3570 0baa 4FF0FF38 	    mov T1,#-1
 3571 0bae A9E7     	    b 0b
 3572 0bb0 0328     	8:  cmp r0,#TK_SEMIC 
ARM GAS  tinyBasic.s 			page 94


 3573 0bb2 07D1     	    bne unget_exit 
 3574 0bb4 00B5FFF7 	    _CALL tabulation 
 3574      FEFF5DF8 
 3574      04EB
 3575 0bbe 4FF0FF38 	    mov T1,#-1
 3576 0bc2 9FE7     	    b 0b
 3577              	unget_exit:         
 3578 0bc4 D4F800A0 	   _UNGET_TOKEN 
 3578      D4F808B0 
 3579              	print_exit:
 3580 0bcc 18EA0808 	    ands T1,T1 
 3581 0bd0 08D1     	    bne 9f
 3582 0bd2 00B5FFF7 	    _CALL cr
 3582      FEFF5DF8 
 3582      04EB
 3583 0bdc 206C     	    ldr r0,[UPP,#FLAGS]
 3584 0bde 80F08000 	    eor r0,#FPRINT 
 3585 0be2 2064     	    str r0,[UPP,#FLAGS] 
 3586 0be4 7047     	9:  _RET 
 3587              	
 3588              	/**************************************
 3589              	  BASIC: QKEY
 3590              	  check if key pressed 
 3591              	**************************************/ 
 3592 0be6 00BF     	    _FUNC qkey
 3593 0be8 4FF00001 	    mov r1,#0
 3594 0bec 00B5FFF7 	    _CALL uart_qkey
 3594      FEFF5DF8 
 3594      04EB
 3595 0bf6 01D0     	    beq 9f 
 3596 0bf8 4FF0FF31 	    mov r1,#-1 
 3597 0bfc 4FF01B00 	9:  mov r0,#TK_INTGR
 3598 0c00 7047     	    _RET 
 3599              	
 3600              	/******************************************
 3601              	  BASIC RANDOM(expr)
 3602              	  generate random number between 0..expr-1
 3603              	******************************************/
 3604 0c02 00BF     	    _FUNC random
 3605 0c04 00B5FFF7 	    _CALL func_args 
 3605      FEFF5DF8 
 3605      04EB
 3606 0c0e 0128     	    cmp r0,#1
 3607 0c10 7FF4FEAF 	    bne syntax_error 
 3608 0c14 606A     	    ldr r0,[UPP,#SEED]
 3609 0c16 4FEA4031 	    lsl r1,r0,#13
 3610 0c1a 81EA0001 	    eor r1,r0
 3611 0c1e 4FEA5140 	    lsr r0,r1,#17
 3612 0c22 81EA0001 	    eor r1,r0
 3613 0c26 4FEA4110 	    lsl r0,r1,#5
 3614 0c2a 81EA0001 	    eor r1,r0
 3615 0c2e 6162     	    str r1,[UPP,#SEED]
 3616 0c30 5CF8040B 	    _POP r0 
 3617 0c34 B1FBF0F2 	    udiv r2,r1,r0  
 3618 0c38 00FB02F2 	    mul r2,r0 
 3619 0c3c A1EB0201 	    sub r1,r2 
 3620 0c40 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 95


 3621 0c44 7047     	    _RET 
 3622              	
 3623              	/****************************************
 3624              	  BASIC: RSHIFT(expr1,expr2)
 3625              	  shift left expr1 de expr2 bits 
 3626              	****************************************/
 3627 0c46 00BF     	    _FUNC rshift
 3628 0c48 00B5FFF7 	    _CALL func_args
 3628      FEFF5DF8 
 3628      04EB
 3629 0c52 0228     	    cmp r0,#2 
 3630 0c54 7FF4FEAF 	    bne syntax_error
 3631 0c58 BCE80300 	    ldmia DP!,{r0,r1}
 3632 0c5c 21FA00F1 	    lsr r1,r0  
 3633 0c60 4FF01B00 	    mov r0,#TK_INTGR
 3634 0c64 7047     	    _RET 
 3635              	
 3636              	/****************************
 3637              	  BASIC: RUN 
 3638              	  execute program in memory
 3639              	****************************/
 3640 0c66 00BF     	    _FUNC run
 3641 0c68 206C10F0 	    _CLO 
 3641      010F03D0 
 3641      4FF00700 
 3641      FFF7FEBF 
 3642 0c78 206B     	    ldr r0,[UPP,#TXTBGN]
 3643 0c7a 616B     	    ldr r1,[UPP,#TXTEND]
 3644 0c7c C4F8D010 	    str r1,[UPP,#HERE]
 3645 0c80 8842     	    cmp r0,r1
 3646 0c82 21D0     	    beq 9f
 3647 0c84 216C     	    ldr r1,[UPP,#FLAGS]
 3648 0c86 11F0080F 	    tst r1,#FSTOP
 3649 0c8a 09D0     	    beq 1f
 3650 0c8c BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3651 0c90 6060     	    str r0,[UPP,#COUNT]
 3652 0c92 206C     	    ldr r0,[UPP,#FLAGS]
 3653 0c94 4FF00901 	    mov r1,#FRUN+FSTOP
 3654 0c98 80EA0100 	    eor r0,r1
 3655 0c9c 2064     	    str r0,[UPP,#FLAGS] 
 3656 0c9e 13E0     	    b 9f  
 3657 0ca0 8178     	1:  ldrb r1,[r0,#2]
 3658 0ca2 6160     	    str r1,[UPP,#COUNT]
 3659 0ca4 8346     	    mov BPTR,r0 
 3660 0ca6 4FF0030A 	    mov IN,#3
 3661 0caa 606B     	    ldr r0,[UPP,#TXTEND]
 3662              	    // reset dataline pointers 
 3663 0cac 80EA0000 	    eor r0,r0 
 3664 0cb0 E060     	    str r0,[UPP,#DATAPTR]
 3665 0cb2 2061     	    str r0,[UPP,#DATA]
 3666 0cb4 6061     	    str r0,[UPP,#DATALEN] 
 3667 0cb6 206C     	    ldr r0,[UPP,#FLAGS]
 3668 0cb8 40F00100 	    orr r0,#FRUN 
 3669 0cbc 2064     	    str r0,[UPP,#FLAGS]
 3670 0cbe 00B5FFF7 	    _CALL show_trace 
 3670      FEFF5DF8 
 3670      04EB
ARM GAS  tinyBasic.s 			page 96


 3671 0cc8 7047     	9:  _RET 
 3672              	
 3673              	/**********************************
 3674              	        FILE SYSTEM 
 3675              	**********************************/
 3676              	
 3677              	/*********************************
 3678              	  search_free 
 3679              	  search first free PAGE in fs
 3680              	  a PAGE is free if first word is
 3681              	  -1
 3682              	  input:
 3683              	    none 
 3684              	  output:
 3685              	    r0    addr|0
 3686              	  use:
 3687              	*********************************/
 3688 0cca 00BF     	    _FUNC search_free 
 3689 0ccc 06B4     	    push {r1,r2}
 3690 0cce DFF86410 	    ldr r1,fs_addr 
 3691 0cd2 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3691      C0F60202 
 3692 0cda 0868     	1:  ldr r0,[r1]
 3693 0cdc B0F1FF3F 	    cmp r0,#-1
 3694 0ce0 03D0     	    beq 8f 
 3695 0ce2 01F58061 	    add r1,#PAGE_SIZE
 3696 0ce6 9142     	    cmp r1,r2 
 3697 0ce8 F7D4     	    bmi 1b 
 3698 0cea 0846     	8:  mov r0,r1 
 3699 0cec 06BC     	    pop {r1,r2}   
 3700 0cee 7047     	    _RET 
 3701              	
 3702              	/*********************************
 3703              	  search_file 
 3704              	  search for a file name 
 3705              	  in file system.
 3706              	  input: 
 3707              	    r0   .asciz target name
 3708              	  output:
 3709              	    r0    0 || address found 
 3710              	  use:
 3711              	   r0     temp 
 3712              	   r1     *file_name 
 3713              	   r2     *fs  
 3714              	   r3     target   
 3715              	**********************************/
 3716              	    _FUNC search_file 
 3717 0cf0 0EB4     	    push {r1,r2,r3}
 3718 0cf2 DFF84020 	    ldr r2,fs_addr
 3719 0cf6 0346     	    mov r3,r0  
 3720              	cmp_loop:
 3721 0cf8 1068     	    ldr r0,[r2]
 3722 0cfa B0F1FF3F 	    cmp r0,#-1
 3723 0cfe 80EA0000 	    eor r0,r0
 3724 0d02 15D0     	    beq 9f // reached end of fs 
 3725 0d04 1846     	1:  mov r0,r3
 3726 0d06 02F10201 	    add r1,r2,#2
ARM GAS  tinyBasic.s 			page 97


 3727 0d0a 00B5FFF7 	    _CALL strcmp
 3727      FEFF5DF8 
 3727      04EB
 3728 0d14 08B9     	    cbnz r0,2f
 3729 0d16 1046     	    mov r0,r2 
 3730 0d18 0AE0     	    b 9f   
 3731 0d1a 1088     	2:  ldrh r0,[r2] // name length
 3732 0d1c 0244     	    add r2,r0 
 3733 0d1e 1088     	    ldrh r0,[r2]
 3734 0d20 1044     	    add r0,r2
 3735 0d22 00B5FFF7 	    _CALL page_align 
 3735      FEFF5DF8 
 3735      04EB
 3736 0d2c 0246     	    mov r2,r0   
 3737 0d2e E3E7     	    b cmp_loop 
 3738 0d30 0EBC     	9:  pop {r1,r2,r3}
 3739 0d32 7047     	    _RET 
 3740              	
 3741 0d34 00000000 	fs_addr: .word FILE_SYSTEM
 3742              	
 3743              	/*************************************
 3744              	  BASIC: DIR 
 3745              	  list files stored in fs 
 3746              	  use:
 3747              	    r0  temp 
 3748              	    r1  temp
 3749              	    r2  file count
 3750              	    r3  data size
 3751              	    T1  *fs  
 3752              	*************************************/
 3753              	    _FUNC directory
 3754 0d38 206C10F0 	    _CLO 
 3754      010F03D0 
 3754      4FF00700 
 3754      FFF7FEBF 
 3755 0d48 82EA0202 	    eor r2,r2 
 3756 0d4c 5FF81C80 	    ldr T1,fs_addr 
 3757 0d50 D8F80000 	1:  ldr r0,[T1] // name length 
 3758 0d54 B0F1FF3F 	    cmp r0,#-1
 3759 0d58 2AD0     	    beq no_more_file
 3760 0d5a 00F00F03 	    and r3,r0,#15
 3761 0d5e 08F10200 	    add r0,T1,#2
 3762 0d62 00B5FFF7 	    _CALL uart_puts 
 3762      FEFF5DF8 
 3762      04EB
 3763 0d6c 4FF01000 	    mov r0,#16 
 3764 0d70 00B5FFF7 	    _CALL cursor_x 
 3764      FEFF5DF8 
 3764      04EB
 3765 0d7a 9844     	    add T1,r3 
 3766 0d7c B8F80030 	    ldrh r3,[T1]
 3767 0d80 1846     	    mov r0,r3 
 3768 0d82 4FF00A01 	    mov r1,#10 
 3769 0d86 00B5FFF7 	    _CALL print_int
 3769      FEFF5DF8 
 3769      04EB
 3770 0d90 00B5FFF7 	    _CALL cr  
ARM GAS  tinyBasic.s 			page 98


 3770      FEFF5DF8 
 3770      04EB
 3771 0d9a 08EB0300 	    add r0,T1,r3 
 3772 0d9e 00B5FFF7 	    _CALL page_align
 3772      FEFF5DF8 
 3772      04EB
 3773 0da8 8046     	    mov T1,r0 
 3774 0daa 02F10102 	    add r2,#1 
 3775 0dae CFE7     	    b 1b  
 3776              	no_more_file:
 3777 0db0 00B5FFF7 	    _CALL cr
 3777      FEFF5DF8 
 3777      04EB
 3778 0dba 4FF01000 	    mov r0,#16
 3779 0dbe 00B5FFF7 	    _CALL cursor_x  
 3779      FEFF5DF8 
 3779      04EB
 3780 0dc8 1046     	    mov r0,r2 
 3781 0dca 4FF00A01 	    mov r1,#10 
 3782 0dce 00B5FFF7 	    _CALL print_int 
 3782      FEFF5DF8 
 3782      04EB
 3783 0dd8 DFF86807 	    ldr r0,=fcount 
 3784 0ddc 00B5FFF7 	    _CALL uart_puts 
 3784      FEFF5DF8 
 3784      04EB
 3785 0de6 7047     	    _RET 
 3786 0de8 66696C65 	fcount:  .asciz "files\n"
 3786      730A00
 3787              	
 3788              	/*************************************
 3789              	  BASIC: FORGET ["name"]
 3790              	  delete file and all following 
 3791              	  if no name given delete all files 
 3792              	************************************/
 3793 0def 00       	    _FUNC forget
 3794 0df0 2DE90802 	    push {r3,T2}
 3795 0df4 5FF8C490 	    ldr T2,fs_addr 
 3796 0df8 E36A     	    ldr r3,[UPP,#FSFREE]
 3797 0dfa 00B5FFF7 	    _CALL next_token
 3797      FEFF5DF8 
 3797      04EB
 3798 0e04 38B1     	    cbz r0,1f // no name 
 3799 0e06 0846     	    mov r0,r1
 3800 0e08 00B5FFF7 	    _CALL search_file
 3800      71FF5DF8 
 3800      04EB
 3801 0e12 58B1     	    cbz r0,9f 
 3802 0e14 8146     	    mov T2,r0 
 3803 0e16 9945     	1:  cmp T2,r3 
 3804 0e18 08D5     	    bpl 9f 
 3805 0e1a 4846     	    mov r0,T2 
 3806 0e1c 00B5FFF7 	    _CALL erase_page
 3806      FEFF5DF8 
 3806      04EB
 3807 0e26 09F58069 	    add T2,#PAGE_SIZE
 3808 0e2a F4E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 99


 3809 0e2c 00B5FFF7 	9:  _CALL search_free
 3809      4DFF5DF8 
 3809      04EB
 3810 0e36 BDE80802 	    pop {r3,T2} 
 3811 0e3a 7047     	    _RET 
 3812              	
 3813              	/**********************************
 3814              	  BASIC LOAD "name" 
 3815              	  load file in RAM for execution
 3816              	  use:
 3817              	    r0   temp
 3818              	    r1   src
 3819              	    r2   dest 
 3820              	    r3   count 
 3821              	**********************************/
 3822              	    _FUNC load
 3823 0e3c 206C10F0 	    _CLO 
 3823      010F03D0 
 3823      4FF00700 
 3823      FFF7FEBF 
 3824 0e4c 00B5FFF7 	    _CALL next_token 
 3824      FEFF5DF8 
 3824      04EB
 3825 0e56 1C28     	    cmp r0,#TK_QSTR 
 3826 0e58 7FF4FEAF 	    bne syntax_error 
 3827 0e5c 0846     	    mov r0,r1 
 3828 0e5e 00B5FFF7 	    _CALL search_file 
 3828      46FF5DF8 
 3828      04EB
 3829 0e68 18B9     	    cbnz r0, 1f 
 3830 0e6a 4FF00900 	    mov r0,#ERR_NOT_FILE
 3831 0e6e FFF7FEBF 	    b tb_error 
 3832 0e72 0146     	1:  mov r1,r0 
 3833 0e74 0888     	    ldrh r0,[r1]
 3834 0e76 0144     	    add r1,r0 // data size field  
 3835 0e78 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3836 0e7c 226B     	    ldr r2,[UPP,#TXTBGN]
 3837 0e7e 02EB0300 	    add r0,r2,r3  
 3838 0e82 6063     	    str r0,[UPP,#TXTEND]
 3839 0e84 03F10103 	    add r3,#1
 3840 0e88 4FEA5303 	    lsr r3,#1
 3841              	2:  // load file data 
 3842 0e8c 31F8020B 	    ldrh r0,[r1],#2
 3843 0e90 22F8020B 	    strh r0,[r2],#2 
 3844 0e94 013B     	    subs r3,#1 
 3845 0e96 F9D1     	    bne 2b 
 3846              	// report file size 
 3847 0e98 DFF8AC06 	    ldr r0,=fsize 
 3848 0e9c 00B5FFF7 	    _CALL uart_puts
 3848      FEFF5DF8 
 3848      04EB
 3849 0ea6 606B     	    ldr r0,[UPP,#TXTEND]
 3850 0ea8 236B     	    ldr r3,[UPP,#TXTBGN]
 3851 0eaa A0EB0300 	    sub r0,r3 
 3852 0eae 4FF00A01 	    mov r1,#10 
 3853 0eb2 00B5FFF7 	    _CALL print_int 
 3853      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 100


 3853      04EB
 3854 0ebc DFF88C06 	    ldr r0,=data_bytes 
 3855 0ec0 00B5FFF7 	    _CALL uart_puts      
 3855      FEFF5DF8 
 3855      04EB
 3856 0eca 7047     	    _RET 
 3857              	
 3858              	
 3859              	/*********************************
 3860              	  BASIC: SAVE "name" 
 3861              	  save program in flash memory
 3862              	  file structure:
 3863              	    .hword name_length 
 3864              	    .asciz name
 3865              	    .palign 1  
 3866              	    .hword data_length 
 3867              	    .byte  file data (variable length)  
 3868              	  use:
 3869              	    r0  temp 
 3870              	    r1  temp
 3871              	    r2  *flash 
 3872              	    r3  *ram  
 3873              	    T1  temp   
 3874              	********************************/
 3875              	    _FUNC save
 3876 0ecc 206C10F0 	    _CLO 
 3876      010F03D0 
 3876      4FF00700 
 3876      FFF7FEBF 
 3877 0edc 606B     	    ldr r0,[UPP,#TXTEND]
 3878 0ede 216B     	    ldr r1,[UPP,#TXTBGN]
 3879 0ee0 8842     	    cmp r0,r1
 3880 0ee2 03D1     	    bne 0f 
 3881 0ee4 4FF00D00 	    mov r0,#ERR_NO_PROG
 3882 0ee8 FFF7FEBF 	    b tb_error 
 3883 0eec 00B5FFF7 	0:  _CALL next_token 
 3883      FEFF5DF8 
 3883      04EB
 3884 0ef6 1C28     	    cmp r0,#TK_QSTR
 3885 0ef8 7FF4FEAF 	    bne syntax_error 
 3886              	// check for existing 
 3887 0efc 0B46     	    mov r3,r1 // save name 
 3888 0efe 1846     	    mov r0,r3  
 3889 0f00 00B5FFF7 	    _CALL search_file
 3889      F5FE5DF8 
 3889      04EB
 3890 0f0a 18B1     	    cbz r0,new_file 
 3891 0f0c 4FF00800 	    mov r0,#ERR_DUPLICATE
 3892 0f10 FFF7FEBF 	    b tb_error 
 3893              	new_file:
 3894 0f14 4FF00100 	    mov r0,#1 
 3895 0f18 00B5FFF7 	    _CALL unlock 
 3895      FEFF5DF8 
 3895      04EB
 3896 0f22 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3897 0f24 1846     	    mov r0,r3 // *name 
 3898 0f26 00B5FFF7 	    _CALL strlen 
ARM GAS  tinyBasic.s 			page 101


 3898      FEFF5DF8 
 3898      04EB
 3899 0f30 00F10400 	    add r0,#4  
 3900 0f34 20F00100 	    and r0,#-2 //even size
 3901 0f38 A0F10208 	    sub T1,r0,#2  // name length counter   
 3902 0f3c 1146     	1:  mov r1,r2  
 3903 0f3e 00B5FFF7 	    _CALL hword_write   
 3903      FEFF5DF8 
 3903      04EB
 3904 0f48 02F10202 	    add r2,#2  
 3905              	// write file name      
 3906 0f4c 33F8020B 	2:  ldrh r0,[r3],#2 
 3907 0f50 1146     	    mov r1,r2 
 3908 0f52 00B5FFF7 	    _CALL hword_write
 3908      FEFF5DF8 
 3908      04EB
 3909 0f5c 02F10202 	    add r2,#2
 3910 0f60 B8F10208 	    subs T1,#2
 3911 0f64 F2D1     	    bne 2b
 3912              	// write data size 
 3913 0f66 606B     	    ldr r0,[UPP,#TXTEND]
 3914 0f68 236B     	    ldr r3,[UPP,#TXTBGN]
 3915 0f6a A0EB0300 	    sub r0,r3
 3916 0f6e 8046     	    mov T1,r0
 3917 0f70 1146     	    mov r1,r2 
 3918 0f72 00B5FFF7 	    _CALL hword_write
 3918      FEFF5DF8 
 3918      04EB
 3919 0f7c 02F10202 	    add r2,#2 
 3920              	// write data 
 3921 0f80 08F10108 	    add T1,#1 
 3922 0f84 4FEA5808 	    lsr T1,#1 // .hword to write 
 3923 0f88 33F8020B 	3:  ldrh r0,[r3],#2
 3924 0f8c 1146     	    mov r1,r2
 3925 0f8e 00B5FFF7 	    _CALL hword_write 
 3925      FEFF5DF8 
 3925      04EB
 3926 0f98 02F10202 	    add r2,#2 
 3927 0f9c B8F10108 	    subs T1,#1 
 3928 0fa0 F2D1     	    bne 3b
 3929 0fa2 4FF00000 	    mov r0,#0 
 3930 0fa6 00B5FFF7 	    _CALL unlock
 3930      FEFF5DF8 
 3930      04EB
 3931              	// update FSFREE     
 3932 0fb0 606B     	    ldr r0,[UPP,#TXTEND]
 3933 0fb2 216B     	    ldr r1,[UPP,#TXTBGN]
 3934 0fb4 A0EB0100 	    sub r0,r1 
 3935 0fb8 8046     	    mov T1,r0 
 3936 0fba E16A     	    ldr r1,[UPP,#FSFREE]
 3937 0fbc 0844     	    add r0,r1 
 3938 0fbe 00B5FFF7 	    _CALL page_align
 3938      FEFF5DF8 
 3938      04EB
 3939 0fc8 E062     	    str r0,[UPP,#FSFREE]
 3940 0fca DFF87C05 	    ldr r0,=fsize
 3941 0fce 00B5FFF7 	    _CALL uart_puts
ARM GAS  tinyBasic.s 			page 102


 3941      FEFF5DF8 
 3941      04EB
 3942 0fd8 4046     	    mov r0,T1 
 3943 0fda 4FF00A01 	    mov r1,#10 
 3944 0fde 00B5FFF7 	    _CALL print_int 
 3944      FEFF5DF8 
 3944      04EB
 3945 0fe8 DFF86005 	    ldr r0,=data_bytes 
 3946 0fec 00B5FFF7 	    _CALL uart_puts  
 3946      FEFF5DF8 
 3946      04EB
 3947 0ff6 7047     	    _RET 
 3948 0ff8 66696C65 	fsize: .asciz "file size: "
 3948      2073697A 
 3948      653A2000 
 3949 1004 62797465 	data_bytes: .asciz "bytes"
 3949      7300
 3950              	
 3951              	
 3952              	/*******************************
 3953              	  BASIC: FREE 
 3954              	  return RAM free bytes 
 3955              	*******************************/
 3956 100a 00BF     	    _FUNC free
 3957 100c D4F8D000 	    ldr r0,[UPP,#HERE]
 3958 1010 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3959 1014 A1EB0001 	    sub r1,r0
 3960 1018 4FF01B00 	    mov r0,#TK_INTGR
 3961 101c 7047     	    _RET  
 3962              	
 3963              	/*********************************
 3964              	  BASIC: SERVO_INIT SERVO_x 
 3965              	  initialize servo motor A,B,C or D
 3966              	  A -> PWM2/1 pin A15
 3967              	  B -> PWM2/2 pin B3 
 3968              	  C -> PWM3/1 pin B4 
 3969              	  D -> PWM3/2 pin B5
 3970              	************************************/
 3971 101e 00BF     	    _FUNC servo_init 
 3972 1020 00B5FFF7 	    _CALL expression 
 3972      FEFF5DF8 
 3972      04EB
 3973 102a 1B28     	    cmp r0,#TK_INTGR  
 3974 102c 7FF4FEAF 	    bne syntax_error 
 3975 1030 0A29     	    cmp r1,#0xa 
 3976 1032 03D5     	    bpl 1f 
 3977 1034 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 3978 1038 FFF7FEBF 	    b tb_error 
 3979 103c 0E29     	1:  cmp r1,#0xe
 3980 103e F9D5     	    bpl 0b 
 3981              	  // configure port pin
 3982 1040 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3982      C4F20100 
 3983 1048 02B4     	    push {r1}
 3984 104a 0A29     	    cmp r1,#0xa 
 3985 104c 01D0     	    beq 1f 
 3986 104e 00F58060 	    add r0,#0X400 // GPIOB 
ARM GAS  tinyBasic.s 			page 103


 3987 1052 4FF00A02 	1:  mov r2,#0xa // OUTPUT_AFPP 
 3988 1056 A1F10A01 	    sub r1,0xa 
 3989 105a 11B9     	    cbnz r1,1f 
 3990 105c 4FF00F01 	    mov r1,#15 
 3991 1060 01E0     	    b 2f 
 3992 1062 01F10201 	1:  add r1,#2
 3993 1066 00B5FFF7 	2:  _CALL gpio_config 
 3993      CEFC5DF8 
 3993      04EB
 3994 1070 02BC     	    pop {r1}
 3995 1072 4FF48052 	    _MOV32 r2,RCC_BASE_ADR 
 3995      C4F20202 
 3996 107a D369     	    ldr r3,[r2,#RCC_APB1ENR]
 3997 107c 0C29     	    cmp r1,#0xc 
 3998 107e 11D5     	    bpl setup_pwm3 
 3999              	// setup pwm2 ch1|ch2
 4000 1080 43F00103 	    orr r3,#1
 4001 1084 D361     	    str r3,[r2,#RCC_APB1ENR]
 4002 1086 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 4002      C4F20102 
 4003 108e 5368     	    ldr r3,[r2,#AFIO_MAPR]
 4004 1090 4FF44070 	    mov r0,#(3<<8)
 4005 1094 43EA0003 	    orr r3,r0
 4006 1098 5360     	    str r3,[r2,#AFIO_MAPR]
 4007 109a 4FF00002 	    _MOV32 r2,TIMER2_BASE_ADR
 4007      C4F20002 
 4008 10a2 14E0     	    b 2f 
 4009              	setup_pwm3: // ch1|ch2 
 4010 10a4 43F00203 	    orr r3,#2
 4011 10a8 D361     	    str r3,[r2,#RCC_APB1ENR]
 4012 10aa 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 4012      C4F20102 
 4013 10b2 5368     	    ldr r3,[r2,#AFIO_MAPR]
 4014 10b4 6FF44060 	    mvn r0,#3<<10 
 4015 10b8 03EA0003 	    and r3,r0 
 4016 10bc 4FF40060 	    mov r0,#2<<10
 4017 10c0 43EA0003 	    orr r3,r0 
 4018 10c4 5360     	    str r3,[r2,#AFIO_MAPR]
 4019 10c6 4FF48062 	    _MOV32 r2,TIMER3_BASE_ADR
 4019      C4F20002 
 4020 10ce A1F10A01 	2:  sub r1,#0xa 
 4021 10d2 0229     	    cmp r1,#2 
 4022 10d4 01D4     	    bmi 3f 
 4023 10d6 A1F10201 	    sub r1,#2
 4024              	3:  //set prescaler to 32
 4025 10da 4FF01F00 	    mov r0,#31 
 4026 10de 1085     	    strh r0,[r2,#TIM_PSC]
 4027              	    // set autoreload to 45000
 4028 10e0 4AF6C870 	    _MOV32 r0,45000
 4028      C0F20000 
 4029 10e8 9085     	    strh r0,[r2,#TIM_ARR]
 4030              	    // set compare value for 1500Âµsec 
 4031 10ea 40F62F50 	    mov r0,#3375
 4032 10ee 09B1     	    cbz r1,3f 
 4033 10f0 1087     	    strh r0,[r2,#TIM_CCR2]
 4034 10f2 00E0     	    b 4f 
 4035 10f4 9086     	3:  strh r0,[r2,#TIM_CCR1]
ARM GAS  tinyBasic.s 			page 104


 4036              	    // set mode 
 4037 10f6 4FF06800 	4:  mov r0,#(0xd<<3)
 4038 10fa 4FF47F48 	    mov T1,#0xff00 
 4039 10fe 19B1     	    cbz r1,4f 
 4040 1100 4FEA0020 	    lsl r0,#8
 4041 1104 4FEA1828 	    lsr T1,#8  
 4042 1108 138B     	4:  ldrh r3,[r2,#TIM_CCMR1]
 4043 110a 03EA0803 	    and r3,T1 
 4044 110e 43EA0003 	    orr r3,r0 
 4045 1112 1383     	    strh r3,[r2,#TIM_CCMR1]
 4046              	    // enable OC output 
 4047 1114 4FF00100 	    mov r0,#1 
 4048 1118 09B1     	    cbz r1,5f 
 4049 111a 4FEA0010 	    lsl r0,#4 
 4050 111e 138C     	5:  ldrh r3,[r2,#TIM_CCER]
 4051 1120 43EA0003 	    orr r3,r0 
 4052 1124 1384     	    strh r3,[r2,#TIM_CCER]
 4053              	    // enable counter 
 4054 1126 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4055 112a 1388     	    ldrh r3,[r2,TIM_CR1]
 4056 112c 43EA0003 	    orr r3,r0
 4057 1130 1380     	    strh r3,[r2,TIM_CR1]
 4058              	    // generate a reload event 
 4059 1132 4FF00100 	    mov r0,#1 
 4060 1136 9082     	    strh r0,[r2,TIM_EGR]
 4061 1138 7047     	    _RET 
 4062              	
 4063              	
 4064              	/*********************************
 4065              	  BASIC: SERVO_POS SERVO_x,expr 
 4066              	  set servo position 
 4067              	*********************************/
 4068 113a 00BF     	    _FUNC servo_pos 
 4069 113c 00B5FFF7 	    _CALL arg_list 
 4069      FEFF5DF8 
 4069      04EB
 4070 1146 0228     	    cmp r0,#2
 4071 1148 7FF4FEAF 	    bne syntax_error 
 4072 114c BCE80600 	    ldmia DP!,{r1,r2} // value, channel 
 4073 1150 A2F10A02 	    sub r2,#0xa 
 4074 1154 022A     	    cmp r2,#2 
 4075 1156 04D5     	    bpl 3f // timer 3 channels 
 4076              	// timer 2 channels 
 4077 1158 4FF00003 	    _MOV32 r3,TIMER2_BASE_ADR
 4077      C4F20003 
 4078 1160 05E0     	    b 4f 
 4079 1162 4FF48063 	3:  _MOV32 r3,TIMER3_BASE_ADR
 4079      C4F20003 
 4080 116a A2F10202 	    sub r2,#2 
 4081 116e 4AF6C870 	4:  _MOV32 r0,45000
 4081      C0F20000 
 4082 1176 01FB00F0 	    mul r0,r1 
 4083 117a 44F62061 	    _MOV32 r1,20000
 4083      C0F20001 
 4084 1182 B0FBF1F0 	    udiv r0,r1 
 4085 1186 0AB1     	    cbz r2,6f 
 4086 1188 1887     	    strh r0,[r3,#TIM_CCR2]
ARM GAS  tinyBasic.s 			page 105


 4087 118a 00E0     	    b 7f 
 4088 118c 9886     	6:  strh r0,[r3,#TIM_CCR1]
 4089 118e 4FF00600 	7:  mov r0,#6 
 4090 1192 9882     	    strh r0,[r3,#TIM_EGR]
 4091 1194 7047     	    _RET 
 4092              	
 4093              	
 4094              	/*********************************
 4095              	  BASIC: SLEEP 
 4096              	  place MCU lowest power mode 
 4097              	  wait for external interrpt or
 4098              	  reset.
 4099              	*********************************/
 4100 1196 00BF     	    _FUNC sleep
 4101 1198 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4101      CEF20000 
 4102 11a0 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4103 11a4 0160     	    str r1,[r0]
 4104 11a6 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4104      C4F20000 
 4105 11ae 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4106 11b2 0160     	    str r1,[r0]
 4107 11b4 20BF     	    wfe 
 4108 11b6 7047     	    _RET 
 4109              	
 4110              	/************************************
 4111              	  BASIC: SPC(expr)
 4112              	  mov cursor right expr spaces 
 4113              	***********************************/
 4114              	    _FUNC spc 
 4115 11b8 00B5FFF7 	    _CALL func_args 
 4115      FEFF5DF8 
 4115      04EB
 4116 11c2 0128     	    cmp r0,#1
 4117 11c4 7FF4FEAF 	    bne syntax_error 
 4118 11c8 206C     	    ldr r0,[UPP,#FLAGS]
 4119 11ca 10F0800F 	    tst r0,#FPRINT 
 4120 11ce 5CF8040B 	    _POP r0 
 4121 11d2 04D0     	    beq 9f 
 4122 11d4 00B5FFF7 	    _CALL spaces 
 4122      FEFF5DF8 
 4122      04EB
 4123 11de 7047     	9:  _RET 
 4124              	
 4125              	    _FUNC spi_read
 4126 11e0 7047     	    _RET 
 4127              	
 4128 11e2 00BF     	    _FUNC spi_enable
 4129 11e4 7047     	    _RET 
 4130              	
 4131 11e6 00BF     	    _FUNC spi_select
 4132 11e8 7047     	    _RET 
 4133              	
 4134 11ea 00BF     	    _FUNC spi_write
 4135 11ec 7047     	    _RET 
 4136              	
 4137              	/******************************
ARM GAS  tinyBasic.s 			page 106


 4138              	  BASIC: STOP 
 4139              	  stop program executre but 
 4140              	  keep execution state for 
 4141              	  resume 
 4142              	******************************/
 4143 11ee 00BF     	    _FUNC stop
 4144 11f0 206C10F0 	    _RTO 
 4144      010F03D1 
 4144      4FF00700 
 4144      FFF7FEBF 
 4145 1200 6068     	    ldr r0,[UPP,#COUNT]
 4146 1202 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4147 1206 206C     	    ldr r0,[UPP,#FLAGS]
 4148 1208 4FF00901 	    mov r1,#FRUN+FSTOP
 4149 120c 80EA0100 	    eor r0,r1
 4150 1210 2064     	    str r0,[UPP,#FLAGS]
 4151 1212 8AEA0A0A 	    eor IN,IN 
 4152 1216 8BEA0B0B 	    eor BPTR,BPTR 
 4153 121a C4F804A0 	    str IN,[UPP,#COUNT]
 4154 121e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4155 1222 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4156 1226 4FF4A040 	    _MOV32 r0,RAM_END
 4156      C2F20000 
 4157 122e 8546     	    mov sp,r0
 4158 1230 FFF7FEBF 	    b cmd_line 
 4159              	
 4160              	
 4161              	/**************************
 4162              	  BASIC: TAB(expr)
 4163              	  move cursor column expr 
 4164              	**************************/
 4165              	    _FUNC tab 
 4166 1234 00B5FFF7 	    _CALL func_args  
 4166      FEFF5DF8 
 4166      04EB
 4167 123e 0128     	    cmp r0,#1 
 4168 1240 7FF4FEAF 	    bne syntax_error 
 4169 1244 206C     	    ldr r0,[UPP,#FLAGS]
 4170 1246 10F0800F 	    tst r0,#FPRINT
 4171 124a 5CF8040B 	    _POP r0 
 4172 124e 04D0     	    beq 9f 
 4173 1250 00B5FFF7 	    _CALL cursor_x 
 4173      FEFF5DF8 
 4173      04EB
 4174 125a 7047     	9:  _RET 
 4175              	
 4176              	
 4177              	/**************************
 4178              	  BASIC: TICKS 
 4179              	  return msec counter
 4180              	**************************/  
 4181              	    _FUNC get_ticks
 4182 125c E169     	    ldr r1,[UPP,#TICKS]
 4183 125e 4FF01B00 	    mov r0,#TK_INTGR
 4184 1262 7047     	    _RET  
 4185              	
 4186              	/*************************
ARM GAS  tinyBasic.s 			page 107


 4187              	  BASIC: TIMER expr 
 4188              	  set countdown timer 
 4189              	************************/
 4190              	    _FUNC set_timer
 4191 1264 00B5FFF7 	    _CALL expression 
 4191      FEFF5DF8 
 4191      04EB
 4192 126e 1B28     	    cmp r0,#TK_INTGR
 4193 1270 7FF4FEAF 	    bne syntax_error 
 4194 1274 2162     	    str r1,[UPP,#TIMER]
 4195 1276 7047     	    _RET 
 4196              	
 4197              	/***************************
 4198              	  BASIC: TIMEOUT
 4199              	  check for timer expiration 
 4200              	  return -1 true || 0 false
 4201              	****************************/
 4202              	    _FUNC timeout
 4203 1278 81EA0101 	    eor r1,r1 
 4204 127c 206A     	    ldr r0,[UPP,#TIMER]
 4205 127e 08B9     	    cbnz r0,9f 
 4206 1280 6FEA0101 	    mvn r1,r1 
 4207 1284 4FF01B00 	9:  mov r0,#TK_INTGR    
 4208 1288 7047     	    _RET 
 4209              	
 4210              	/****************************************
 4211              	  BASIC:  TONE freq, duration 
 4212              	  play a tone with frequency freq and duration
 4213              	  in milliseconds
 4214              	***********************************************/
 4215 128a 00BF     	    _FUNC tone
 4216 128c 00B5FFF7 	    _CALL arg_list 
 4216      FEFF5DF8 
 4216      04EB
 4217 1296 0228     	    cmp r0,#2 
 4218 1298 7FF4FEAF 	    bne syntax_error
 4219 129c 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4219      C4F20002 
 4220 12a4 DCF80400 	    ldr r0,[DP,#4] // freq
 4221 12a8 4AF62021 	    _MOV32 r1,4500000
 4221      C0F24401 
 4222 12b0 B1FBF0F1 	    udiv r1,r0 
 4223 12b4 9185     	    strh r1,[r2,#TIM_ARR]
 4224 12b6 4FEA5101 	    lsr r1,#1 
 4225 12ba 9186     	    strh r1,[r2,#TIM_CCR1]
 4226 12bc 4FF00100 	    mov r0,#1
 4227 12c0 1084     	    strh r0,[r2,#TIM_CCER]
 4228 12c2 1080     	    strh r0,[r2,#TIM_CR1]
 4229 12c4 908A     	    ldrh r0,[r2,#TIM_EGR]
 4230 12c6 40F00200 	    orr r0,#2 
 4231 12ca 9082     	    strh r0,[r2,#TIM_EGR] 
 4232 12cc BCE80300 	    ldmia DP!,{r0,r1}
 4233              	    // pause duration  
 4234 12d0 E169     	    ldr r1,[UPP,#TICKS]
 4235 12d2 0844     	    add r0,r1 
 4236 12d4 E169     	1:  ldr r1,[UPP,#TICKS]
 4237 12d6 8142     	    cmp r1,r0 
ARM GAS  tinyBasic.s 			page 108


 4238 12d8 FCD4     	    bmi 1b 
 4239              	    // stop tone 
 4240 12da 1088     	    ldrh r0,[R2,#TIM_CR1]
 4241 12dc 80F00100 	    eor r0,#1 
 4242 12e0 1080     	    strh r0,[R2,#TIM_CR1]     
 4243 12e2 7047     	    _RET 
 4244              	
 4245              	/************************************
 4246              	  BASIC: TONE_INIT 
 4247              	  initialize tone_generator
 4248              	  output on GPIOB:6 
 4249              	************************************/
 4250              	    _FUNC tone_init 
 4251              	    // configure pin 
 4252 12e4 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4252      C4F20100 
 4253 12ec 4FF00601 	    mov r1,#6 // gpio pin 
 4254 12f0 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4255 12f4 00B5FFF7 	    _CALL gpio_config
 4255      87FB5DF8 
 4255      04EB
 4256              	    // enable timer4 clock 
 4257 12fe 4FF48052 	    _MOV32 r2,RCC_BASE_ADR
 4257      C4F20202 
 4258 1306 4FF00400 	    mov r0,#(1<<2)
 4259 130a D169     	    ldr r1,[R2,#RCC_APB1ENR]
 4260 130c 40EA0100 	    orr r0,r1 
 4261 1310 D061     	    str r0,[R2,#RCC_APB1ENR]
 4262              	    // configure TIMER4 in PWM mode 
 4263 1312 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4263      C4F20002 
 4264              	    // prescale divisor 16 
 4265 131a 4FF00F00 	    mov r0,#15 
 4266 131e 9062     	    str r0,[r2,#TIM_PSC]
 4267              	    // pwm mode 6
 4268 1320 138B     	    ldrh r3,[r2,#TIM_CCMR1]
 4269 1322 4FF0FF00 	    mov r0,#255
 4270 1326 6FEA0000 	    mvn r0,r0 
 4271 132a 03EA0003 	    and r3,r0 // clear bit field 
 4272 132e 4FF06800 	    mov r0,#0x68
 4273 1332 43EA0003 	    orr r3,r0  
 4274 1336 1383     	    strh r3,[R2,#TIM_CCMR1]     
 4275 1338 7047     	    _RET 
 4276              	
 4277              	
 4278              	/****************************************
 4279              	  BASIC: TRACE n 
 4280              	  enable execution trace 
 4281              	  0   ddisable
 4282              	  1   show current line#
 4283              	  2  show line#+data_stack
 4284              	  3  show line#+data_stack+main_stack 
 4285              	***************************************/
 4286 133a 00BF     	    _FUNC trace 
 4287 133c 00B5FFF7 	    _CALL next_token 
 4287      FEFF5DF8 
 4287      04EB
ARM GAS  tinyBasic.s 			page 109


 4288 1346 1B28     	    cmp r0,#TK_INTGR  
 4289 1348 7FF4FEAF 	    bne syntax_error 
 4290 134c 01F00301 	    and r1,#3 
 4291 1350 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4292 1354 7047     	    _RET 
 4293              	
 4294              	
 4295              	/***************************
 4296              	  BASIC: UBOUND 
 4297              	  return last indice of @
 4298              	  output:
 4299              	    r0  TK_INTGR 
 4300              	    r1  +int 
 4301              	**************************/
 4302 1356 00BF     	    _FUNC ubound
 4303 1358 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4304 135c D4F8D000 	    ldr r0,[UPP,#HERE]
 4305 1360 A1EB0001 	    sub r1,r0 
 4306 1364 4FEA9101 	    lsr r1,#2
 4307 1368 4FF01B00 	    mov r0,#TK_INTGR 
 4308 136c 7047     	    _RET 
 4309              	
 4310              	/****************************
 4311              	  BASIC: UFLASH 
 4312              	  return user flash address
 4313              	*****************************/
 4314 136e 00BF     	    _FUNC uflash
 4315 1370 7749     	    ldr r1,=user
 4316 1372 4FF01B00 	    mov r0,#TK_INTGR 
 4317 1376 7047     	    _RET 
 4318              	
 4319              	
 4320              	/************************************
 4321              	  BASIC: UNTIL relation 
 4322              	  close a DO..UNTIL loop 
 4323              	  loop until relation come true 
 4324              	************************************/
 4325              	    _FUNC until
 4326 1378 00B5FFF7 	    _CALL relation 
 4326      FEFF5DF8 
 4326      04EB
 4327 1382 11B1     	    cbz r1,9f
 4328 1384 0CF1080C 	    add DP,#8
 4329 1388 7047     	    _RET  
 4330 138a 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4331 138e 9BF80200 	    ldrb r0,[BPTR,#2]
 4332 1392 6060     	    str r0,[UPP,#COUNT]
 4333 1394 7047     	    _RET 
 4334              	
 4335              	/*************************************
 4336              	  BASIC: WAIT addr,expr1[,expr2] 
 4337              	  wait until *addr&expr1 is not null 
 4338              	  or until (*addr&expr1)^expr2 is null 
 4339              	***************************************/
 4340 1396 00BF     	    _FUNC wait
 4341 1398 00B5FFF7 	    _CALL arg_list 
 4341      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 110


 4341      04EB
 4342 13a2 0228     	    cmp r0,#2
 4343 13a4 03D0     	    beq 2f 
 4344 13a6 0328     	    cmp r0,#3
 4345 13a8 07D0     	    beq 4f
 4346 13aa FFF7FEBF 	    b syntax_error 
 4347 13ae BCE80300 	2:  ldmia DP!,{r0,r1}
 4348 13b2 0A88     	3:  ldrh r2,[r1]
 4349 13b4 0240     	    ands r2,r0 
 4350 13b6 FCD0     	    beq 3b 
 4351 13b8 06E0     	    b 9f 
 4352 13ba BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4353 13be 1388     	5:  ldrh r3,[r2]
 4354 13c0 83EA0003 	    eor r3,r0
 4355 13c4 0B40     	    ands r3,r1 
 4356 13c6 FAD0     	    beq 5b 
 4357 13c8 7047     	9:  _RET 
 4358              	
 4359              	/*********************************************
 4360              	  BASIC: WORDS 
 4361              	  print list of BASIC WORDS in dictionary 
 4362              	  use:
 4363              	    r0,r1,r2,T1,T2  
 4364              	********************************************/
 4365 13ca 00BF     	    _FUNC words
 4366 13cc 206C10F0 	    _CLO 
 4366      010F03D0 
 4366      4FF00700 
 4366      FFF7FEBF 
 4367 13dc DFF87481 	    ldr T1,=kword_dict
 4368 13e0 89EA0909 	    eor T2,T2
 4369 13e4 82EA0202 	    eor r2,r2  
 4370              	1:  
 4371 13e8 4046     	    mov r0,T1
 4372 13ea 00B5FFF7 	    _CALL strlen
 4372      FEFF5DF8 
 4372      04EB
 4373 13f4 F0B1     	    cbz r0,4f 
 4374 13f6 8144     	    add T2,r0 
 4375 13f8 B9F1500F 	    cmp T2,#80 
 4376 13fc 06D4     	    bmi 2f
 4377 13fe 89EA0909 	    eor T2,T2  
 4378 1402 00B5FFF7 	    _CALL cr 
 4378      FEFF5DF8 
 4378      04EB
 4379 140c 4046     	2:  mov r0,T1 
 4380 140e 00B5FFF7 	    _CALL uart_puts 
 4380      FEFF5DF8 
 4380      04EB
 4381 1418 4FF02000 	    mov r0,#SPACE
 4382 141c 09F10109 	    add T2,#1  
 4383 1420 00B5FFF7 	    _CALL uart_putc
 4383      FEFF5DF8 
 4383      04EB
 4384 142a 02F10102 	    add r2,#1 
 4385 142e 58F80C8C 	    ldr T1,[T1,#-12]
 4386 1432 D9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 111


 4387 1434 19EA0909 	4:  ands T2,T2
 4388 1438 04D0     	    beq 5f 
 4389 143a 00B5FFF7 	    _CALL cr 
 4389      FEFF5DF8 
 4389      04EB
 4390 1444 1046     	5:  mov r0,r2 
 4391 1446 4FF00A01 	    mov r1,#10
 4392 144a 00B5FFF7 	    _CALL print_int 
 4392      FEFF5DF8 
 4392      04EB
 4393 1454 4048     	    ldr r0,=dict_words
 4394 1456 00B5FFF7 	    _CALL uart_puts  
 4394      FEFF5DF8 
 4394      04EB
 4395 1460 7047     	9:  _RET 
 4396              	
 4397 1462 776F7264 	dict_words: .asciz "words in dictionary" 
 4397      7320696E 
 4397      20646963 
 4397      74696F6E 
 4397      61727900 
 4398              	
 4399              	
 4400              	/**************************************
 4401              	  BASIC: XOR(expr1,expr2)
 4402              	  binary exclusive or between 2 expressions
 4403              	**************************************/
 4404 1476 00BF     	    _FUNC bit_xor
 4405 1478 00B5FFF7 	    _CALL func_args
 4405      FEFF5DF8 
 4405      04EB
 4406 1482 0228     	    cmp r0,#2
 4407 1484 7FF4FEAF 	    bne syntax_error
 4408 1488 5CF8040B 	    _POP r0
 4409 148c 5CF8041B 	    _POP r1 
 4410 1490 81EA0001 	    eor r1,r0 
 4411 1494 4FF01B00 	    mov r0,#TK_INTGR
 4412 1498 7047     	    _RET 
 4413              	
 4414              	/***************************************
 4415              	    BASIC: XPOS 
 4416              	    report cursor column on terminal 
 4417              	***************************************/
 4418 149a 00BF     	    _FUNC xpos 
 4419 149c 00B5FFF7 	    _CALL get_curpos
 4419      FEFF5DF8 
 4419      04EB
 4420 14a6 4FF01B00 	    mov r0,#TK_INTGR
 4421 14aa 7047     	    _RET 
 4422              	
 4423              	/***********************************
 4424              	    BASIC: YPOS 
 4425              	    report cursor line on terminal 
 4426              	***********************************/
 4427              	    _FUNC ypos 
 4428 14ac 00B5FFF7 	    _CALL get_curpos 
 4428      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 112


 4428      04EB
 4429 14b6 0146     	    mov r1,r0 
 4430 14b8 4FF01B00 	    mov r0,#TK_INTGR
 4431 14bc 7047     	    _RET 
 4432              	
 4433              	
 4434              	/**********************************
 4435              	     argument stack manipulation
 4436              	**********************************/
 4437              	
 4438              	/**********************************
 4439              	  BASIC PUSH expr[,expr] 
 4440              	  push integers on stack 
 4441              	*********************************/
 4442 14be 00BF     	    _FUNC cmd_push 
 4443 14c0 00B5FFF7 	    _CALL arg_list
 4443      FEFF5DF8 
 4443      04EB
 4444 14ca 7047     	    _RET 
 4445              	
 4446              	/********************************
 4447              	  BASIC: POP 
 4448              	  pop an integer out of stack 
 4449              	********************************/    
 4450              	    _FUNC fn_pop 
 4451 14cc 5CF8041B 	    _POP r1 
 4452 14d0 4FF01B00 	    mov r0,#TK_INTGR 
 4453 14d4 7047     	    _RET 
 4454              	
 4455              	/*******************************
 4456              	  BASIC: DROP n 
 4457              	  discard n integer from stack
 4458              	*******************************/
 4459 14d6 00BF     	    _FUNC drop 
 4460 14d8 00B5FFF7 	    _CALL expression 
 4460      FEFF5DF8 
 4460      04EB
 4461 14e2 1B28     	    cmp r0,#TK_INTGR 
 4462 14e4 7FF4FEAF 	    bne syntax_error 
 4463 14e8 4FF00400 	    mov r0,#4 
 4464 14ec 01FB00F0 	    mul r0,r1 
 4465 14f0 8444     	    add DP,r0 
 4466 14f2 7047     	    _RET 
 4467              	
 4468              	/********************************
 4469              	  BASIC: GET(expr) 
 4470              	  retreive nth element from stack 
 4471              	********************************/
 4472              	    _FUNC get 
 4473 14f4 00B5FFF7 	    _CALL func_args
 4473      FEFF5DF8 
 4473      04EB
 4474 14fe 0128     	    cmp r0,#1 
 4475 1500 7FF4FEAF 	    bne syntax_error 
 4476 1504 5CF8040B 	    _POP r0
 4477 1508 4FF00401 	    mov r1,#4 
 4478 150c 01FB00F0 	    mul r0,r1 
ARM GAS  tinyBasic.s 			page 113


 4479 1510 5CF80010 	    ldr r1,[DP,r0]
 4480 1514 4FF01B00 	    mov r0,#TK_INTGR
 4481 1518 7047     	    _RET 
 4482              	
 4483              	/*************************************
 4484              	  BASIC: PUT value,n  
 4485              	  store value at nth position on stack
 4486              	**************************************/
 4487 151a 00BF     	    _FUNC put
 4488 151c 00B5FFF7 	    _CALL arg_list 
 4488      FEFF5DF8 
 4488      04EB
 4489 1526 0228     	    cmp r0,#2 
 4490 1528 7FF4FEAF 	    bne syntax_error 
 4491 152c 5CF8040B 	    _POP r0 
 4492 1530 4FF00401 	    mov r1,#4 
 4493 1534 01FB00F0 	    mul r0,r1 
 4494 1538 5CF8041B 	    _POP r1
 4495 153c 4CF80010 	    str r1,[DP,r0]
 4496 1540 7047     	    _RET 
 4497              	
 4498              	
 4499 1542 0000     	  .section .rodata.user
 4500              	  .p2align 10 
 4501              	user:
 4502 0000 FFFFFFFF 	  .space 1024,255
 4502      FFFFFFFF 
 4502      FFFFFFFF 
 4502      FFFFFFFF 
 4502      FFFFFFFF 
 4503              	
 4504              	/*************************************************
 4505              	   extra FLASH memory not used by Tiny BASIC
 4506              	   is used to save BASIC programs.
 4507              	************************************************/
 4508              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4509              	  .section .rodata.fs
 4510              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 114


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 115


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 116


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:192    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:193    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:194    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:195    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:196    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:197    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:198    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:199    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:200    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:201    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:202    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:203    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:204    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:205    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:206    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:207    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:208    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:209    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:210    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:211    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:212    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:215    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:216    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:217    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:218    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:220    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:221    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:222    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:223    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:224    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:225    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:226    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:227    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:228    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:229    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:230    *ABS*:0000000000000028 TIM_PSC
ARM GAS  tinyBasic.s 			page 117


       stm32f103.inc:231    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:232    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:233    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:234    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:235    *ABS*:000000000000004c TIM_DMAR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
ARM GAS  tinyBasic.s 			page 118


           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
ARM GAS  tinyBasic.s 			page 119


      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AWU_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BIT_IDX
ARM GAS  tinyBasic.s 			page 120


       cmd_index.inc:32     *ABS*:0000000000000007 BRES_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BSET_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BTEST_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTOGL_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CHAR_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CLS_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CONST_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DATA_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DEC_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DIR_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DO_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DROP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DUMP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 END_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 ERASE_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FOR_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FORGET_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FREE_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GET_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOSUB_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOTO_IDX
       cmd_index.inc:53     *ABS*:000000000000001c HEX_IDX
       cmd_index.inc:54     *ABS*:000000000000001d IF_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IN_IDX
       cmd_index.inc:56     *ABS*:000000000000001f INPUT_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INVERT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 KEY_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LET_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LIST_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LOAD_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOCATE_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LSHIFT_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NEW_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEXT_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NOT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a OR_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OUT_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PAD_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAUSE_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PMODE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK8_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK16_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK32_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE8_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE16_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE32_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POP_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PRT_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PUSH_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUT_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 QKEY_IDX
       cmd_index.inc:83     *ABS*:000000000000003a READ_IDX
       cmd_index.inc:84     *ABS*:000000000000003b REM_IDX
       cmd_index.inc:85     *ABS*:000000000000003c REST_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RET_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RND_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RSHIFT_IDX
ARM GAS  tinyBasic.s 			page 121


       cmd_index.inc:89     *ABS*:0000000000000040 RUN_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SAVE_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SERVO_INIT_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SERVO_POS_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SLEEP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SPC_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 STEP_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 STOP_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 STORE_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TAB_IDX
       cmd_index.inc:99     *ABS*:000000000000004a THEN_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TICKS_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TIMER_IDX
       cmd_index.inc:102    *ABS*:000000000000004d TMROUT_IDX
       cmd_index.inc:103    *ABS*:000000000000004e TO_IDX
       cmd_index.inc:104    *ABS*:000000000000004f TONE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 TONE_INIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TRACE_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 UBOUND_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 UFLASH_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 UNTIL_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 WAIT_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 WORDS_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 XOR_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 XPOS_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1769   .text:0000000000000e44 next_token
         tinyBasic.s:381    .text:00000000000002c4 search_label
         tinyBasic.s:2016   .text:0000000000001090 expression
         tinyBasic.s:1323   .text:0000000000000a58 syntax_error
         tinyBasic.s:419    .text:00000000000002ec search_lineno
         tinyBasic.s:1338   .text:0000000000000a60 tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:450    .text:000000000000030c delete_line
         tinyBasic.s:475    .text:0000000000000338 create_gap
ARM GAS  tinyBasic.s 			page 122


         tinyBasic.s:500    .text:0000000000000360 insert_line
         tinyBasic.s:539    .text:00000000000003b0 compile
         tinyBasic.s:1675   .text:0000000000000da0 pad
         tinyBasic.s:869    .text:00000000000006b8 parse_int
         tinyBasic.s:612    .text:0000000000000458 comp_token
         tinyBasic.s:695    .text:000000000000055e store_r0
         tinyBasic.s:963    .text:0000000000000758 skip
         tinyBasic.s:1048   .text:00000000000007c0 is_letter
         tinyBasic.s:779    .text:00000000000005f0 comp_label
         tinyBasic.s:704    .text:000000000000057e token_exit
         tinyBasic.s:686    .text:000000000000053a tick2
         tinyBasic.s:722    .text:0000000000000584 is_special
         tinyBasic.s:744    .text:00000000000005c8 token_ofs
         tinyBasic.s:635    .text:00000000000004b2 tok_idx0
         tinyBasic.s:698    .text:0000000000000564 try_number
         tinyBasic.s:639    .text:00000000000004b4 single
         tinyBasic.s:739    .text:00000000000005b9 tok_single
         tinyBasic.s:643    .text:00000000000004bc lt
         tinyBasic.s:649    .text:00000000000004ca gt
         tinyBasic.s:662    .text:00000000000004ee bkslash
         tinyBasic.s:669    .text:0000000000000504 prt_cmd
         tinyBasic.s:675    .text:0000000000000516 quote
         tinyBasic.s:902    .text:00000000000006f0 parse_quote
         tinyBasic.s:680    .text:000000000000052a tick
         tinyBasic.s:736    .text:00000000000005a4 char_list
         tinyBasic.s:737    .text:00000000000005a4 $d
         tinyBasic.s:745    .text:00000000000005c8 $d
         tinyBasic.s:762    .text:00000000000005f0 $t
         tinyBasic.s:982    .text:0000000000000770 upper
         tinyBasic.s:2340   .rodata.dictionary:0000000000000808 kword_dict
         tinyBasic.s:1490   .text:0000000000000bdc search_dict
         tinyBasic.s:836    .text:000000000000068c compress_label
         tinyBasic.s:1079   .text:00000000000007e0 atoi
         tinyBasic.s:933    .text:0000000000000724 get_escaped_char
         tinyBasic.s:950    .text:000000000000074e escaped
         tinyBasic.s:950    .text:000000000000074e $d
         tinyBasic.s:963    .text:0000000000000756 $t
         tinyBasic.s:1000   .text:0000000000000780 is_digit
         tinyBasic.s:1024   .text:000000000000079c is_hex
         tinyBasic.s:1124   .text:000000000000082c cmd_name
         tinyBasic.s:1153   .text:0000000000000858 decompile_line
         tinyBasic.s:1170   .text:000000000000089e decomp_loop
         tinyBasic.s:1283   .text:0000000000000a2d single_char
         tinyBasic.s:1278   .text:0000000000000a18 relop_str
         tinyBasic.s:1278   .text:0000000000000a18 $d
         tinyBasic.s:1279   .text:0000000000000a24 ge_str
         tinyBasic.s:1280   .text:0000000000000a27 le_str
         tinyBasic.s:1281   .text:0000000000000a2a ne_str
         tinyBasic.s:1300   .text:0000000000000a40 modulo
         tinyBasic.s:1371   .text:0000000000000af0 compile_error
         tinyBasic.s:1342   .text:0000000000000a68 rt_error
         tinyBasic.s:1386   .text:0000000000000b42 rt_error_msg
         tinyBasic.s:1390   .text:0000000000000b62 err_msg
         tinyBasic.s:1387   .text:0000000000000b53 token_at_msg
         tinyBasic.s:2835   .text.basic:000000000000044c dump01
         tinyBasic.s:1688   .text:0000000000000db0 warm_start
         tinyBasic.s:1386   .text:0000000000000b42 $d
ARM GAS  tinyBasic.s 			page 123


         tinyBasic.s:1398   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1399   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1400   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1401   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1402   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1403   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1404   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1405   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1406   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1407   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1408   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1409   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1410   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1411   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1412   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1413   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1415   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1416   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1417   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1427   .text:0000000000000ba6 $t
         tinyBasic.s:1427   .text:0000000000000ba8 skip_line
         tinyBasic.s:1444   .text:0000000000000bb0 BTGL
         tinyBasic.s:1462   .text:0000000000000bb4 kword_cmp
         tinyBasic.s:1528   .text:0000000000000c1a cold_start
         tinyBasic.s:1551   .text:0000000000000c78 src_addr
         tinyBasic.s:1553   .text:0000000000000c7c dest_addr
         tinyBasic.s:1674   .text:0000000000000d9c tib
         tinyBasic.s:1555   .text:0000000000000c80 sysvar_size
         tinyBasic.s:1566   .text:0000000000000c84 prt_version
         tinyBasic.s:1622   .text:0000000000000d28 clear_basic
         tinyBasic.s:3688   .text.basic:0000000000000ccc search_free
         tinyBasic.s:1552   .text:0000000000000c78 $d
         tinyBasic.s:2194   .rodata:0000000000000000 uzero
         tinyBasic.s:2220   .rodata:00000000000000d4 ulast
         tinyBasic.s:1566   .text:0000000000000c84 $t
         tinyBasic.s:1589   .text:0000000000000ce8 version_msg
         tinyBasic.s:1591   .text:0000000000000d08 version
         tinyBasic.s:1590   .text:0000000000000ce8 $d
         tinyBasic.s:1606   .text:0000000000000d0c clear_vars
         tinyBasic.s:1657   .text:0000000000000d70 warm_init
         tinyBasic.s:1673   .text:0000000000000d98 dstack
         tinyBasic.s:1672   .text:0000000000000d94 mstack
         tinyBasic.s:1672   .text:0000000000000d94 $d
         tinyBasic.s:1676   .text:0000000000000da4 array
         tinyBasic.s:1677   .text:0000000000000da8 ready
         tinyBasic.s:1708   .text:0000000000000dc8 cmd_line
         tinyBasic.s:1720   .text:0000000000000dfc interpreter
         tinyBasic.s:1753   .text:0000000000000e3c execute
         tinyBasic.s:3168   .text.basic:000000000000079e let_var
         tinyBasic.s:3173   .text.basic:00000000000007aa let_array
         tinyBasic.s:2349   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1825   .text:0000000000000ebc expect
         tinyBasic.s:1844   .text:0000000000000ed8 func_args
         tinyBasic.s:1864   .text:0000000000000f04 arg_list
         tinyBasic.s:1896   .text:0000000000000f40 factor
         tinyBasic.s:2123   .text:0000000000001168 get_array_element
         tinyBasic.s:2161   .text:0000000000001190 get_var
ARM GAS  tinyBasic.s 			page 124


         tinyBasic.s:1964   .text:000000000000101c term
         tinyBasic.s:2058   .text:00000000000010ec relation
         tinyBasic.s:2105   .text:0000000000001160 relop_jmp
         tinyBasic.s:2077   .text:0000000000001132 rel_idx0
         tinyBasic.s:2078   .text:0000000000001132 rel_eq
         tinyBasic.s:2095   .text:0000000000001148 rel_false
         tinyBasic.s:2081   .text:0000000000001136 rel_gt
         tinyBasic.s:2084   .text:000000000000113a rel_ge
         tinyBasic.s:2087   .text:000000000000113e rel_lt
         tinyBasic.s:2090   .text:0000000000001142 rel_le
         tinyBasic.s:2093   .text:0000000000001146 rel_ne
         tinyBasic.s:2106   .text:0000000000001160 $d
         tinyBasic.s:2123   .text:0000000000001166 $t
         tinyBasic.s:2143   .text:000000000000117c set_array_element
         tinyBasic.s:2179   .text:00000000000011a0 set_var
         tinyBasic.s:4510   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2215   .rodata:0000000000000050 $d
         tinyBasic.s:2228   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2227   *ABS*:0000000000000000 link
         tinyBasic.s:2341   .rodata.dictionary:0000000000000808 LINK
         tinyBasic.s:2229   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2336   .rodata.dictionary:00000000000007fc first_link
         tinyBasic.s:2383   .text.basic:0000000000000000 abs
         tinyBasic.s:2402   .text.basic:000000000000002c analog_read
         tinyBasic.s:2426   .text.basic:0000000000000064 adc
         tinyBasic.s:2457   .text.basic:00000000000000c4 bit_and
         tinyBasic.s:2472   .text.basic:00000000000000e8 ascii
         tinyBasic.s:2501   .text.basic:000000000000013c awu
         tinyBasic.s:2541   .text.basic:00000000000001a4 bitmask
         tinyBasic.s:2563   .text.basic:00000000000001c8 bit_reset
         tinyBasic.s:2588   .text.basic:00000000000001f4 bit_set
         tinyBasic.s:2628   .text.basic:0000000000000244 bit_test
         tinyBasic.s:2612   .text.basic:000000000000021c bit_toggle
         tinyBasic.s:2660   .text.basic:0000000000000290 char
         tinyBasic.s:2652   .text.basic:0000000000000284 cls
         tinyBasic.s:2677   .text.basic:00000000000002b0 const
         tinyBasic.s:2804   .text.basic:0000000000000414 dec_base
         tinyBasic.s:3753   .text.basic:0000000000000d38 directory
         tinyBasic.s:2813   .text.basic:000000000000041c do_loop
         tinyBasic.s:4459   .text.basic:00000000000014d8 drop
         tinyBasic.s:2828   .text.basic:0000000000000424 dump
         tinyBasic.s:2872   .text.basic:00000000000004cc cmd_end
         tinyBasic.s:2900   .text.basic:000000000000050c erase
         tinyBasic.s:2911   .text.basic:0000000000000520 for
         tinyBasic.s:3793   .text.basic:0000000000000df0 forget
         tinyBasic.s:3956   .text.basic:000000000000100c free
         tinyBasic.s:4472   .text.basic:00000000000014f4 get
         tinyBasic.s:2992   .text.basic:00000000000005dc gosub
         tinyBasic.s:3018   .text.basic:000000000000061c goto
         tinyBasic.s:3026   .text.basic:0000000000000628 hex_base
         tinyBasic.s:3035   .text.basic:0000000000000630 if
         tinyBasic.s:3318   .text.basic:0000000000000964 pin_input
         tinyBasic.s:3057   .text.basic:0000000000000648 input_var
         tinyBasic.s:3132   .text.basic:0000000000000754 invert
         tinyBasic.s:3145   .text.basic:0000000000000774 key
         tinyBasic.s:3161   .text.basic:0000000000000788 let
         tinyBasic.s:3204   .text.basic:0000000000000814 list
ARM GAS  tinyBasic.s 			page 125


         tinyBasic.s:3822   .text.basic:0000000000000e3c load
         tinyBasic.s:3255   .text.basic:00000000000008c4 locate
         tinyBasic.s:3269   .text.basic:00000000000008e8 lshift
         tinyBasic.s:3283   .text.basic:0000000000000908 new
         tinyBasic.s:2956   .text.basic:0000000000000584 next
         tinyBasic.s:3292   .text.basic:0000000000000928 func_not
         tinyBasic.s:3304   .text.basic:0000000000000940 bit_or
         tinyBasic.s:3336   .text.basic:0000000000000990 out
         tinyBasic.s:3353   .text.basic:00000000000009b8 pad_ref
         tinyBasic.s:3364   .text.basic:00000000000009c4 pause
         tinyBasic.s:3387   .text.basic:00000000000009e0 pin_mode
         tinyBasic.s:3442   .text.basic:0000000000000a5c peek8
         tinyBasic.s:3455   .text.basic:0000000000000a78 peek16
         tinyBasic.s:3468   .text.basic:0000000000000a94 peek32
         tinyBasic.s:3482   .text.basic:0000000000000ab0 poke8
         tinyBasic.s:3494   .text.basic:0000000000000ac8 poke16
         tinyBasic.s:3506   .text.basic:0000000000000ae0 poke32
         tinyBasic.s:4450   .text.basic:00000000000014cc fn_pop
         tinyBasic.s:3520   .text.basic:0000000000000af8 print
         tinyBasic.s:4442   .text.basic:00000000000014c0 cmd_push
         tinyBasic.s:4487   .text.basic:000000000000151c put
         tinyBasic.s:3592   .text.basic:0000000000000be8 qkey
         tinyBasic.s:2712   .text.basic:0000000000000334 read
         tinyBasic.s:2762   .text.basic:00000000000003a8 restore
         tinyBasic.s:3007   .text.basic:0000000000000604 return
         tinyBasic.s:3604   .text.basic:0000000000000c04 random
         tinyBasic.s:3627   .text.basic:0000000000000c48 rshift
         tinyBasic.s:3640   .text.basic:0000000000000c68 run
         tinyBasic.s:3875   .text.basic:0000000000000ecc save
         tinyBasic.s:3971   .text.basic:0000000000001020 servo_init
         tinyBasic.s:4068   .text.basic:000000000000113c servo_pos
         tinyBasic.s:4100   .text.basic:0000000000001198 sleep
         tinyBasic.s:4114   .text.basic:00000000000011b8 spc
         tinyBasic.s:2942   .text.basic:000000000000056c step
         tinyBasic.s:4143   .text.basic:00000000000011f0 stop
         tinyBasic.s:2880   .text.basic:00000000000004d4 store
         tinyBasic.s:4165   .text.basic:0000000000001234 tab
         tinyBasic.s:3046   .text.basic:0000000000000644 then
         tinyBasic.s:4181   .text.basic:000000000000125c get_ticks
         tinyBasic.s:4190   .text.basic:0000000000001264 set_timer
         tinyBasic.s:4202   .text.basic:0000000000001278 timeout
         tinyBasic.s:2929   .text.basic:0000000000000554 to
         tinyBasic.s:4215   .text.basic:000000000000128c tone
         tinyBasic.s:4250   .text.basic:00000000000012e4 tone_init
         tinyBasic.s:4286   .text.basic:000000000000133c trace
         tinyBasic.s:4302   .text.basic:0000000000001358 ubound
         tinyBasic.s:4314   .text.basic:0000000000001370 uflash
         tinyBasic.s:4325   .text.basic:0000000000001378 until
         tinyBasic.s:4340   .text.basic:0000000000001398 wait
         tinyBasic.s:4365   .text.basic:00000000000013cc words
         tinyBasic.s:4404   .text.basic:0000000000001478 bit_xor
         tinyBasic.s:4418   .text.basic:000000000000149c xpos
         tinyBasic.s:4427   .text.basic:00000000000014ac ypos
         tinyBasic.s:2383   .text.basic:0000000000000000 $t
         tinyBasic.s:2395   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2413   .text.basic:0000000000000052 adc_loop
         tinyBasic.s:2441   .text.basic:000000000000009e adc_off
ARM GAS  tinyBasic.s 			page 126


         tinyBasic.s:2432   .text.basic:000000000000007a adc_on
         tinyBasic.s:2493   .text.basic:0000000000000138 autorun
         tinyBasic.s:3357   .text.basic:00000000000009c0 pad_adr
         tinyBasic.s:2738   .text.basic:0000000000000380 seek_next
         tinyBasic.s:2793   .text.basic:0000000000000406 no_data_line
         tinyBasic.s:2789   .text.basic:0000000000000400 try_next_line
         tinyBasic.s:2846   .text.basic:000000000000046c print_dump_header
         tinyBasic.s:2904   .text.basic:000000000000051c user_space
         tinyBasic.s:2904   .text.basic:000000000000051c $d
         tinyBasic.s:4501   .rodata.user:0000000000000000 user
         tinyBasic.s:2911   .text.basic:0000000000000520 $t
         tinyBasic.s:2995   .text.basic:00000000000005ea target
         tinyBasic.s:3125   .text.basic:0000000000000750 str_buffer
         tinyBasic.s:3124   .text.basic:000000000000074c input_buffer
         tinyBasic.s:3124   .text.basic:000000000000074c $d
         tinyBasic.s:3132   .text.basic:0000000000000754 $t
         tinyBasic.s:3249   .text.basic:00000000000008c0 out_buff
         tinyBasic.s:3249   .text.basic:00000000000008c0 $d
         tinyBasic.s:3255   .text.basic:00000000000008c4 $t
         tinyBasic.s:3357   .text.basic:00000000000009c0 $d
         tinyBasic.s:3364   .text.basic:00000000000009c4 $t
         tinyBasic.s:3409   .text.basic:0000000000000a08 gpio_config
         tinyBasic.s:3577   .text.basic:0000000000000bc4 unget_exit
         tinyBasic.s:3579   .text.basic:0000000000000bcc print_exit
         tinyBasic.s:3741   .text.basic:0000000000000d34 fs_addr
         tinyBasic.s:3716   .text.basic:0000000000000cf0 search_file
         tinyBasic.s:3720   .text.basic:0000000000000cf8 cmp_loop
         tinyBasic.s:3741   .text.basic:0000000000000d34 $d
         tinyBasic.s:3753   .text.basic:0000000000000d38 $t
         tinyBasic.s:3776   .text.basic:0000000000000db0 no_more_file
         tinyBasic.s:3786   .text.basic:0000000000000de8 fcount
         tinyBasic.s:3786   .text.basic:0000000000000de8 $d
         tinyBasic.s:3948   .text.basic:0000000000000ff8 fsize
         tinyBasic.s:3949   .text.basic:0000000000001004 data_bytes
         tinyBasic.s:3893   .text.basic:0000000000000f14 new_file
         tinyBasic.s:3948   .text.basic:0000000000000ff8 $d
         tinyBasic.s:3956   .text.basic:000000000000100a $t
         tinyBasic.s:4009   .text.basic:00000000000010a4 setup_pwm3
         tinyBasic.s:4125   .text.basic:00000000000011e0 spi_read
         tinyBasic.s:4128   .text.basic:00000000000011e4 spi_enable
         tinyBasic.s:4131   .text.basic:00000000000011e8 spi_select
         tinyBasic.s:4134   .text.basic:00000000000011ec spi_write
         tinyBasic.s:4397   .text.basic:0000000000001462 dict_words
         tinyBasic.s:4397   .text.basic:0000000000001462 $d
         tinyBasic.s:4404   .text.basic:0000000000001476 $t
         tinyBasic.s:4500   .rodata.user:0000000000000000 $d
         tinyBasic.s:4499   .text.basic:0000000000001542 $d
         tinyBasic.s:4510   .text.basic:0000000000001544 $d
         tinyBasic.s:4510   .text:00000000000011b0 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:743    .text:00000000000005c7 $d
         tinyBasic.s:1300   .text:0000000000000a3d $d
         tinyBasic.s:1300   .text:0000000000000a3e $t
         tinyBasic.s:1593   .text:0000000000000d09 $d
ARM GAS  tinyBasic.s 			page 127


         tinyBasic.s:1593   .text:0000000000000d0a $t
         tinyBasic.s:1688   .text:0000000000000daf $d
         tinyBasic.s:1688   .text:0000000000000db0 $t
         tinyBasic.s:3793   .text.basic:0000000000000def $d
         tinyBasic.s:3793   .text.basic:0000000000000df0 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
get_curpos
