ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
ARM GAS  tinyBasic.s 			page 7


  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
ARM GAS  tinyBasic.s 			page 9


 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 10


 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
ARM GAS  tinyBasic.s 			page 11


  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
ARM GAS  tinyBasic.s 			page 12


  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
 127              	    .equ DUMP_IDX, XRCV_IDX+1 
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 13


  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 14


 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 15


 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
ARM GAS  tinyBasic.s 			page 16


 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/***************************************
 238              	    search_lineno 
 239              	    localize BASIC line from its number 
 240              	    input:
 241              	      r0   line# 
 242              	    output: 
 243              	      r0   adr where found || adr new to be inserted 
 244              	      r1   0 found || !0 not found  
 245              	    use:
 246              	      r0   scan address 
 247              	      r1   temp   
 248              	      r2   address end of text
 249              	      r3   target line#
 250              	****************************************/    
 251              	    _FUNC search_lineno
 252 0150 0CB4     	    push {r2,r3} 
 253 0152 0346     	    mov r3,r0 // target 
 254 0154 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 255 0156 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 256 0158 9042     	1:  cmp r0,r2 
 257 015a 05D0     	    beq  8f
 258 015c 0188     	    ldrh r1,[r0]
 259 015e C91A     	    subs r1,r3 
ARM GAS  tinyBasic.s 			page 17


 260 0160 04D5     	    bpl 9f 
 261 0162 8178     	    ldrb r1,[r0,#2]
 262 0164 0844     	    add r0,r1
 263 0166 F7E7     	    b 1b 
 264 0168 4FF0FF31 	8:  mov r1,#-1 
 265 016c 0CBC     	9:  pop {r2,r3}
 266 016e 7047     	    _RET 
 267              	
 268              	
 269              	/********************************************
 270              	    delete_line 
 271              	    delete BASIC line at addr 
 272              	    input:
 273              	      r0    address line to delete 
 274              	    output:
 275              	      r0    same as input 
 276              	    use: 
 277              	      r1    dest adr
 278              	      r2    bytes to move 
 279              	      T1    length line to delete 
 280              	      T2    txtend 
 281              	********************************************/
 282              	    _FUNC delete_line 
 283 0170 2DE90703 	    push {r0,r1,r2,T1,T2}
 284 0174 0146     	    mov r1,r0 // dest 
 285 0176 91F80280 	    ldrb T1,[r1,#2] // line length 
 286 017a 4044     	    add r0,T1  // src
 287 017c D4F83490 	    ldr T2,[UPP,#TXTEND]
 288 0180 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 289 0184 00B5FFF7 	    _CALL cmove
 289      FEFF5DF8 
 289      04EB
 290 018e A9EB0809 	    sub T2,T1 // txtend-count 
 291 0192 C4F83490 	    str T2,[UPP,#TXTEND] 
 292 0196 BDE80703 	    pop {r0,r1,r2,T1,T2}
 293 019a 7047     	    _RET 
 294              	
 295              	/******************************************
 296              	    create_gap 
 297              	    create a gap in text area to insert new line 
 298              	    input:
 299              	      r0    adr 
 300              	      r1    length 
 301              	    output:
 302              	      r0    adr 
 303              	    use:
 304              	      T1    length 
 305              	      T2    txtend 
 306              	************************************************/
 307              	    _FUNC create_gap 
 308 019c 2DE90503 	    push {r0,r2,T1,T2}
 309 01a0 8846     	    mov T1,R1
 310 01a2 0144     	    add r1,r0  // dest 
 311 01a4 D4F83490 	    ldr T2,[UPP,#TXTEND]
 312 01a8 A9EB0002 	    sub r2,T2,r0 
 313 01ac 00B5FFF7 	    _CALL cmove
 313      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 18


 313      04EB
 314 01b6 C144     	    add T2,T1 
 315 01b8 C4F83490 	    str T2,[UPP,#TXTEND]
 316 01bc BDE80503 	    pop {r0,r2,T1,T2}
 317 01c0 7047     	    _RET 
 318              	
 319              	/************************************************
 320              	    insert_line 
 321              	    insert BASIC line in text area 
 322              	    first search if line with same number exist 
 323              	    replace if so. 
 324              	    input:
 325              	      r0    *buffer to insert 
 326              	    output:
 327              	      none 
 328              	    use: 
 329              	      T1     *buffer
 330              	      T2     temp  
 331              	************************************************/ 
 332 01c2 00BF     	    _FUNC insert_line 
 333 01c4 2DE90203 	    push {r1,T1,T2}
 334 01c8 8046     	    mov T1,r0 
 335 01ca B8F80000 	    ldrh r0,[T1]
 336 01ce 00B5FFF7 	    _CALL search_lineno 
 336      BEFF5DF8 
 336      04EB
 337 01d8 49B9     	    cbnz  r1, 1f // line# doesn't exist
 338              	// already exist 
 339 01da 00B5FFF7 	    _CALL delete_line // delete old one 
 339      C8FF5DF8 
 339      04EB
 340 01e4 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 341 01e8 B9F1040F 	    cmp T2,#4 // empty line length==4  
 342 01ec 0ED0     	    beq 9f
 343              	1: //insert new line 
 344 01ee 98F80210 	    ldrb r1,[T1,#2]
 345 01f2 00B5FFF7 	    _CALL create_gap 
 345      D2FF5DF8 
 345      04EB
 346 01fc 0146     	    mov r1,r0
 347 01fe 4046     	    mov r0,T1 
 348 0200 8278     	    ldrb r2,[r0,#2]
 349 0202 00B5FFF7 	    _CALL cmove 
 349      FEFF5DF8 
 349      04EB
 350 020c BDE80203 	9:  pop {r1,T1,T2}
 351 0210 7047     	    _RET 
 352              	
 353              	/*********************************
 354              	    compile 
 355              	    tokenize source line save it 
 356              	    in pas buffer.
 357              	    compiled line format: 
 358              	      line_no  2 bytes {0...32767}
 359              	      count    1 byte  
 360              	      tokens   variable length 
 361              	  input:
ARM GAS  tinyBasic.s 			page 19


 362              	     r0   *text buffer 
 363              	     r1   *text length   
 364              	  output:
 365              	    r0    0 stored | -1 immediate 
 366              	  use:
 367              	    r3    tib index   
 368              	    T1    tib
 369              	    T2    pad
 370              	***********************************/
 371 0212 00BF     	    _FUNC compile
 372 0214 8046     	    mov T1, r0  // source text buffer 
 373 0216 6160     	    str r1,[UPP,#COUNT] // save line length 
 374 0218 DFF83499 	    ldr T2,pad // tokens buffer
 375 021c 83EA0303 	    eor r3,r3 // source index  
 376 0220 206C     	    ldr r0,[UPP,#FLAGS]
 377 0222 40F02000 	    orr r0,#FCOMP
 378 0226 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 379 0228 80EA0000 	    eor r0,r0     
 380 022c 29F8020B 	    strh r0,[T2],#2   // line no 
 381 0230 09F8010B 	    strb r0,[T2],#1 // length 
 382 0234 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 383 0236 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 384 023a 00B500F0 	    _CALL parse_int 
 384      00F95DF8 
 384      04EB
 385 0244 07D0     	    beq 2f 
 386              	// this is a line number     
 387 0246 0129     	    cmp r1,#1 
 388 0248 02D5     	    bpl 1f 
 389 024a 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 390 024e EFE2     	    b tb_error  
 391              	1:  // write line # to pad 
 392 0250 29F8031C 	    strh r1,[T2,#-3]
 393 0254 2360     	    str r3,[UPP,#IN_SAVED]
 394              	2:  // check for pad full 
 395 0256 C145     	    cmp T2,T1
 396 0258 02DB     	    blt 3f 
 397 025a 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 398 025e E7E2     	    b tb_error 
 399 0260 00B500F0 	3:  _CALL comp_token 
 399      21F85DF8 
 399      04EB
 400 026a 0028     	    cmp r0,#TK_NONE 
 401 026c 01D0     	    beq 4f 
 402 026e 2360     	    str r3,[UPP,#IN_SAVED]
 403 0270 F1E7     	    b 2b 
 404              	4: // compilation completed 
 405 0272 DFF8DC38 	    ldr r3,pad 
 406 0276 A9EB0300 	    sub r0,T2,r3 // line length 
 407 027a 9870     	    strb r0,[r3,#2]
 408 027c 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 409 027e 1888     	    ldrh r0,[r3] // line number 
 410 0280 38B1     	    cbz r0,8f  
 411              	// insert line in text buffer 
 412 0282 1846     	    mov r0,r3 
 413 0284 00B5FFF7 	    _CALL insert_line 
 413      9DFF5DF8 
ARM GAS  tinyBasic.s 			page 20


 413      04EB
 414 028e 4040     	    eors r0,r0 
 415 0290 08E0     	    b 9f 
 416 0292 9B46     	8:  mov BPTR,r3 // *token_list 
 417 0294 4FF0030A 	    mov IN,#3
 418 0298 206C     	    ldr r0,[UPP,#FLAGS]
 419 029a A0F12000 	    sub r0,#FCOMP
 420 029e 2064     	    str r0,[UPP,#FLAGS]
 421 02a0 5FF0FF30 	    movs r0,#-1 
 422 02a4 7047     	9:  _RET 
 423              	
 424              	/*********************************************
 425              	    compile next token from source 
 426              	    input: 
 427              	      r3 		tib index  
 428              	      T1    tib adr
 429              	      T2    insert point in pad  
 430              	    output:
 431              	      r0     token attribute 
 432              	      r1 		token value
 433              	      r3     tib index updated    
 434              	      T2     updated 
 435              	      use:
 436              	**********************************************/
 437              	    .macro _case c, next  
 438              	    cmp r0,#\c 
 439              	    bne \next
 440              	    .endm 
 441              	
 442 02a6 00BF     	    _FUNC comp_token 
 443 02a8 40B4     	    push {r6}
 444 02aa 18F80300 	    ldrb r0,[T1,r3]
 445 02ae 0040     	    ands r0,r0 
 446 02b0 70D0     	    beq store_r0  // reached end of text  
 447 02b2 4FF02000 	    mov r0,#SPACE 
 448 02b6 00B500F0 	    _CALL skip  // skip spaces 
 448      2EF95DF8 
 448      04EB
 449 02c0 18F80300 	    ldrb r0,[T1,r3]
 450 02c4 0040     	    ands r0,r0 
 451 02c6 65D0     	    beq store_r0  // reached end of text 
 452 02c8 03F10103 	    add r3,#1 
 453 02cc 00B500F0 	    _CALL upper 
 453      2FF95DF8 
 453      04EB
 454 02d6 00B500F0 	    _CALL is_special
 454      7CF85DF8 
 454      04EB
 455 02e0 DFF8FC6C 	    ldr r6,=token_ofs
 456 02e4 D6E811F0 	    tbh [r6,r1] 
 457              	tok_idx0:     
 458              	//  not special char.  
 459 02e8 57E0     	    b try_number 
 460              	// single char token with no value 
 461              	single: 
 462 02ea DFF8F86C 	    ldr r6,=tok_single
 463 02ee 705C     	    ldrb r0,[r6,r1] 
ARM GAS  tinyBasic.s 			page 21


 464 02f0 50E0     	    b store_r0  
 465              	lt:
 466 02f2 4FF03400 	    mov r0,#TK_LT
 467 02f6 18F80310 	    ldrb r1,[T1,r3]
 468 02fa 3E29     	    cmp r1,#'>' 
 469 02fc 06D0     	    beq 1f
 470 02fe 0AE0     	    b 2f 
 471              	gt:
 472 0300 4FF03100 	    mov r0,#TK_GT 
 473 0304 18F80310 	    ldrb r1,[T1,r3]
 474 0308 3C29     	    cmp r1,#'<'
 475 030a 04D1     	    bne 2f  
 476 030c 03F10103 	1:  add r3,#1
 477 0310 4FF03500 	    mov r0,#TK_NE  
 478 0314 3EE0     	    b store_r0
 479 0316 3D29     	2:  cmp r1,#'=' 
 480 0318 3CD1     	    bne store_r0  
 481 031a 03F10103 	    add r3,#1
 482 031e 00F10200 	    add r0,#2
 483 0322 37E0     	    b store_r0       
 484              	bkslash:
 485 0324 18F80310 	    ldrb r1,[T1,r3]
 486 0328 03F10103 	    add r3,#1
 487 032c 4FF00300 	    mov r0,#TK_CHAR 
 488 0330 09F8010B 	    strb r0,[T2],#1
 489 0334 09F8011B 	    strb r1,[T2],#1
 490 0338 49E0     	    b token_exit 
 491              	prt_cmd: 
 492 033a 4FF00A00 	    mov r0,#TK_CMD 
 493 033e 4FF03A01 	    mov r1,#PRT_IDX
 494 0342 09F8010B 	    strb r0,[T2],#1
 495 0346 09F8011B 	    strb r1,[T2],#1
 496 034a 40E0     	    b token_exit 
 497              	quote:
 498 034c 4FF00200 	    mov r0,#TK_QSTR 
 499 0350 09F8010B 	    strb r0,[T2],#1
 500 0354 00B500F0 	    _CALL parse_quote
 500      ABF85DF8 
 500      04EB
 501 035e 36E0     	    b token_exit
 502              	tick: 
 503              	// copy comment in pad 
 504 0360 4FF00A00 	    mov r0,#TK_CMD 
 505 0364 4FF04701 	    mov r1,#REM_IDX 
 506 0368 09F8010B 	    strb r0,[T2],#1 
 507 036c 09F8011B 	    strb r1,[T2],#1
 508 0370 08EB0300 	    add r0,T1,r3 
 509 0374 4946     	    mov r1,T2 
 510 0376 00B5FFF7 	    _CALL strcpy 
 510      FEFF5DF8 
 510      04EB
 511 0380 00B5FFF7 	    _CALL strlen 
 511      FEFF5DF8 
 511      04EB
 512 038a 8144     	    add T2,r0
 513 038c 09F10109 	    add T2,#1
 514 0390 6368     	    ldr r3,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 22


 515 0392 1CE0     	    b token_exit
 516              	store_r0: 
 517 0394 09F8010B 	    strb r0,[T2],#1
 518 0398 19E0     	    b token_exit 
 519              	try_number:
 520 039a A3F10103 	    sub r3,#1
 521 039e 00B500F0 	    _CALL parse_int  
 521      4EF85DF8 
 521      04EB
 522 03a8 04D0     	    beq 1f 
 523 03aa 09F8010B 	    strb r0,[T2],#1 
 524 03ae 49F8041B 	    str r1,[T2],#4
 525 03b2 0CE0     	    b token_exit 
 526 03b4 00B500F0 	1:  _CALL parse_keyword 
 526      15F95DF8 
 526      04EB
 527 03be 0428     	    cmp r0,#TK_VAR 
 528 03c0 01D0     	    beq 2f 
 529 03c2 4729     	    cmp r1,#REM_IDX 
 530 03c4 CCD0     	    beq tick
 531 03c6 09F8010B 	2:  strb r0,[T2],#1 
 532 03ca 09F8011B 	    strb r1,[T2],#1
 533              	token_exit:
 534 03ce 40BC     	    pop {r6}
 535 03d0 7047     	    _RET 
 536              	
 537              	/****************************
 538              	    is_special  
 539              	    check for non alphanum
 540              	    input:
 541              	      r0    character to scan 
 542              	    output:
 543              	      r0    character 
 544              	      r1    0 || index 
 545              	    use: 
 546              	      r1    scan index 
 547              	      r2    temp 
 548              	      r3    char_list 
 549              	*****************************/
 550 03d2 00BF     	    _FUNC is_special 
 551 03d4 0CB4     	    push {r2,r3}
 552 03d6 4FF00101 	    mov r1,#1
 553 03da DFF80C3C 	    ldr r3,=char_list 
 554 03de 5A5C     	1:  ldrb r2,[r3,r1]
 555 03e0 22B1     	    cbz r2,8f 
 556 03e2 8242     	    cmp r2,r0 
 557 03e4 04D0     	    beq 9f 
 558 03e6 01F10101 	    add r1,#1 
 559 03ea F8E7     	    b 1b
 560 03ec 81EA0101 	8:  eor r1,r1     
 561 03f0 0CBC     	9:  pop {r2,r3}
 562 03f2 7047     	    _RET 
 563              	
 564              	char_list:
 565 03f4 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\""
 565      293A232D 
 565      2B2A2F25 
ARM GAS  tinyBasic.s 			page 23


 565      3D3C3E5C 
 565      3F272200 
 566              	
 567              	tok_single:
 568 0408 00080506 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 568      070109
 569 040f 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 569      2232
 570              	  
 571 0415 0000BF   	  .p2align 2
 572              	token_ofs:
 573 0418 0000     	  .hword  0 // not found
 574              	  // TK_COMMA...TK_EQUAL , 12 
 575 041a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 575      01000100 
 576 0422 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 576      01000100 
 577 042a 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 577      01000100 
 578              	  // '<','>'
 579 0432 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 580              	  // '\'
 581 0436 1E00     	  .hword  (bkslash-tok_idx0)/2
 582              	  // '?' 
 583 0438 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 584              	  // "'"  
 585 043a 3C00     	  .hword  (tick-tok_idx0)/2 
 586              	  // '"' quote 
 587 043c 3200     	  .hword (quote-tok_idx0)/2
 588              	
 589 043e 00BF     	  .p2align 2
 590              	
 591              	/****************************
 592              	    parse_int 
 593              	    parse an integer from text
 594              	    if not valid integer 
 595              	    r1 return *buffer else 
 596              	    *buffer is incremented after integer 
 597              	  input:
 598              	    r0   *buffer 
 599              	  output:
 600              	    r0   TK_INTGR|TK_NONE
 601              	    r1   int|0   
 602              	  use:
 603              	    r0   char 
 604              	    r1   save r3 
 605              	    r2   int
 606              	    r6   base 
 607              	    r7   digit count 
 608              	    r3   tib index   
 609              	    T1   *tib 
 610              	    T2   *pad  
 611              	*****************************/
 612              	    _FUNC parse_int 
 613 0440 C0B4     	    push {r6,r7}
 614 0442 82EA0202 	    eor r2,r2 // int 
 615 0446 1946     	    mov r1,r3 
ARM GAS  tinyBasic.s 			page 24


 616 0448 4FF00A06 	    mov r6,#10 // default base 
 617 044c 87EA0707 	    eor r7,r7 // digit count 
 618 0450 18F80300 	    ldrb r0,[T1,r3]
 619 0454 03F10103 	    add r3,#1 
 620 0458 2428     	    cmp r0,'$' 
 621 045a 02D1     	    bne 2f 
 622 045c 4FF01006 	    mov r6,#16 // hexadecimal number 
 623 0460 03E0     	    b 3f  
 624 0462 2628     	2:  cmp r0,#'&' 
 625 0464 05D1     	    bne 4f
 626 0466 4FF00206 	    mov r6,#2 //binary number  
 627 046a 18F80300 	3:  ldrb r0,[T1,r3]
 628 046e 03F10103 	    add r3,#1
 629 0472 00B500F0 	4:  _CALL upper 
 629      5CF85DF8 
 629      04EB
 630 047c 4128     	    cmp r0,#'A'
 631 047e 00D4     	    bmi 5f
 632 0480 0738     	    subs r0,#7  
 633 0482 3038     	5:  subs r0,#'0' 
 634 0484 07D4     	    bmi 6f // not digit   
 635 0486 B042     	    cmp r0,r6 
 636 0488 05D5     	    bpl 6f // not digit 
 637 048a 06FB02F2 	    mul r2,r6 
 638 048e 0244     	    add r2,r0
 639 0490 07F10107 	    add r7,#1  
 640 0494 E9E7     	    b 3b
 641 0496 A3F10103 	6:  sub r3,#1  // unget last char
 642 049a 1FB1     	    cbz r7, 7f 
 643 049c 4FF00E00 	    mov r0,#TK_INTGR  
 644 04a0 1146     	    mov r1,r2 
 645 04a2 02E0     	    b 9f 
 646              	7: // not a number 
 647 04a4 0B46     	    mov r3,r1 // restore r3 
 648 04a6 80EA0000 	    eor r0,r0 // TK_NONE 
 649 04aa 0040     	9:  ands r0,r0 // to set zero flag 
 650 04ac C0BC     	    pop {r6,r7}
 651 04ae 7047     	    _RET 
 652              	
 653              	/*********************************************
 654              	    parse_quote 
 655              	    parse quoted string 
 656              	    input: 
 657              	      r3 		tib index  
 658              	      T1    tib adr
 659              	      T2    insert point in pad  
 660              	    output:
 661              	      r0     token attribute 
 662              	      r1 		*str 
 663              	      r3     tib index updated    
 664              	      T2     updated 
 665              	      use:
 666              	*********************************************/
 667              	    _FUNC parse_quote
 668 04b0 4DF8049D 	    push {T2} 
 669 04b4 18F80300 	1:  ldrb r0,[T1,r3]
 670 04b8 03F10103 	    add r3,#1 
ARM GAS  tinyBasic.s 			page 25


 671 04bc 2228     	    cmp r0,#'"'
 672 04be 09D0     	    beq 9f 
 673 04c0 5C28     	    cmp r0,#'\\'
 674 04c2 04D1     	    bne 2f 
 675 04c4 00B500F0 	    _CALL get_escaped_char 
 675      0DF85DF8 
 675      04EB
 676 04ce 09F8010B 	2:  strb r0,[T2],#1
 677 04d2 EFE7     	    b 1b 
 678 04d4 80EA0000 	9:  eor  r0,r0
 679 04d8 09F8010B 	    strb r0,[T2],#1
 680 04dc 4FF00200 	    mov r0,#TK_QSTR
 681 04e0 02BC     	    pop {r1}
 682 04e2 7047     	    _RET 
 683              	
 684              	/**********************************************
 685              	    get_escaped_char 
 686              	    convert "\c" in quoted string 
 687              	    input:
 688              	      r0 
 689              	      r3   index 
 690              	      T1   tib 
 691              	    output:
 692              	      r0   replacement char
 693              	      r3   updated 
 694              	    use:
 695              	      r1   *table 
 696              	      r2   temp 
 697              	**********************************************/
 698              	    _FUNC get_escaped_char 
 699 04e4 06B4     	    push {r1,r2}
 700 04e6 18F80300 	    ldrb r0,[T1,r3]
 701 04ea 03F10103 	    add r3,#1
 702 04ee 2228     	    cmp r0,#'"' 
 703 04f0 0BD0     	    beq 9f 
 704 04f2 DFF8F81A 	1:  ldr r1,=escaped 
 705 04f6 11F8012B 	2:  ldrb r2,[r1],#1
 706 04fa 12B1     	    cbz r2,6f 
 707 04fc 8242     	    cmp r2,r0 
 708 04fe 02D0     	    beq 7f 
 709 0500 F9E7     	    b 2b
 710 0502 A0F10702 	6:  sub r2,r0,#7     
 711 0506 02F10700 	7:  add r0,r2,#7
 712 050a 06BC     	9:  pop {r1,r2}   
 713 050c 7047     	    _RET
 714              	
 715 050e 6162746E 	escaped: .asciz "abtnvfr"
 715      76667200 
 716              	
 717              	/*********************************************
 718              	   skip character in TIB 
 719              	   input:
 720              	      r0    character to skip 
 721              	      r3    tib index 
 722              	      T1    tib adr
 723              	    output: 
 724              	      r3    updated
ARM GAS  tinyBasic.s 			page 26


 725              	    use:
 726              	      r1     
 727              	**********************************************/   
 728 0516 00BF     	    _FUNC skip
 729 0518 02B4     	    push {r1} 
 730 051a 18F80310 	1:  ldrb r1,[T1,r3]
 731 051e 8142     	    cmp r1,r0
 732 0520 02D1     	    bne 2f
 733 0522 03F10103 	    add r3,#1 
 734 0526 F8E7     	    b 1b 
 735 0528 2360     	2:  str r3,[UPP,#IN_SAVED]
 736 052a 02BC     	    pop {r1}
 737 052c 7047     	    _RET
 738              	
 739              	/********************************************
 740              	    upper
 741              	    convert character in upper case 
 742              	    input: 
 743              	      r0   character 
 744              	    output:
 745              	      r0   upper case character 
 746              	*********************************************/
 747 052e 00BF     	    _FUNC upper 
 748 0530 6128     	    cmp r0,#'a' 
 749 0532 03DB     	    blt 9f 
 750 0534 7A28     	    cmp r0,#'z' 
 751 0536 01DC     	    bgt 9f 
 752 0538 00F05F00 	    and r0,#0x5f 
 753 053c 7047     	9:  _RET 
 754              	
 755              	/***************************************
 756              	   is_digit 
 757              	   check if char is decimal digit.
 758              	   convert to decimal digit.
 759              	   input:
 760              	      r0    char 
 761              	   output:
 762              	      r0    if !Z then converted digit 
 763              	      Z     0 true | 1 false  
 764              	***************************************/
 765 053e 00BF     	    _GBL_FUNC is_digit 
 766 0540 02B4     	    push {r1} 
 767 0542 81EA0101 	    eor r1,r1 
 768 0546 3028     	    cmp r0,#'0' 
 769 0548 05DB     	    blt 9f
 770 054a 3A28     	    cmp r0,'9'+1
 771 054c 03D5     	    bpl 9f 
 772 054e 4FF0FF31 	    mov r1,#-1
 773 0552 A0F13000 	    sub r0,#'0'  
 774              	9:   
 775 0556 0940     	    ands r1,r1
 776 0558 02BC     	    pop {r1} 
 777 055a 7047     	    _RET 
 778              	
 779              	/***************************************
 780              	    is_hex 
 781              	    check for hexadecimal digit 
ARM GAS  tinyBasic.s 			page 27


 782              	    convert to hex digit.
 783              	    input:
 784              	      r0    
 785              	    output:
 786              	      r0     if !Z then converted digit 
 787              	      Z      0 true | 1 false         
 788              	***************************************/
 789              	    _FUNC is_hex 
 790 055c 02B4     	    push {r1}
 791 055e 4FF0FF31 	    mov r1,#-1 
 792 0562 4128     	    cmp r0,#'A' 
 793 0564 01D4     	    bmi 1f 
 794 0566 A0F10700 	    sub r0,#7 
 795 056a A0F13000 	1:  sub r0,#'0'
 796 056e 01D4     	    bmi 2f 
 797 0570 1028     	    cmp r0,#16
 798 0572 01D4     	    bmi 9f 
 799 0574 81EA0101 	2:  eor r1,r1  
 800 0578 0940     	9:  ands r1,r1 
 801 057a 02BC     	    pop {r1}
 802 057c 7047     	    _RET 
 803              	
 804              	/***************************************
 805              	    is_bit 
 806              	    check if char is '0'|'1' 
 807              	    convert to binary digit. 
 808              	    input:
 809              	      r0    
 810              	    output:
 811              	      r0     if !Z then converted digit 
 812              	      Z      0 true | 1 false         
 813              	***************************************/
 814 057e 00BF     	    _FUNC is_bit
 815 0580 02B4     	    push  {r1}
 816 0582 4FF0FF31 	    mov r1,#-1 
 817 0586 A0F13000 	    sub r0,#'0' 
 818 058a 01D4     	    bmi 2f 
 819 058c 0229     	    cmp r1,#2
 820 058e 01D4     	    bmi 9f 
 821 0590 81EA0101 	2:  eor r1,r1 
 822 0594 0940     	9:  ands r1,r1 
 823 0596 02BC     	    pop {r1}
 824 0598 7047     	    _RET 
 825              	
 826              	/***************************************
 827              	    is_alpha 
 828              	    check if character is {A..Z} 
 829              	  input:
 830              	    r0   character 
 831              	  output: 
 832              	    r0    same character 
 833              	    Z    0 true | 1 false  
 834              	****************************************/
 835 059a 00BF     	    _FUNC is_alpha
 836 059c 02B4     	    push {r1} 
 837 059e 4FF0FF31 	    mov r1,#-1 
 838 05a2 4128     	    cmp r0,#'A' 
ARM GAS  tinyBasic.s 			page 28


 839 05a4 01DB     	    blt 8f 
 840 05a6 5B28     	    cmp r0,#'Z'+1 
 841 05a8 01D4     	    bmi 9f 
 842 05aa 81EA0101 	8:  eor r1,r1  
 843 05ae 0940     	9:  ands r1,r1 
 844 05b0 02BC     	    pop {r1}
 845 05b2 7047     	    _RET 
 846              	
 847              	/***************************************
 848              	    is_num 
 849              	    check if character is {0..9} 
 850              	  input:
 851              	    r0   character 
 852              	  output: 
 853              	    r0    same character 
 854              	    Z    0 true | 1 false  
 855              	****************************************/
 856              	    _FUNC is_num 
 857 05b4 02B4     	    push {r1} 
 858 05b6 4FF0FF31 	    mov r1,#-1 
 859 05ba 3028     	    cmp r0,#'0' 
 860 05bc 01DB     	    blt 8f 
 861 05be 3A28     	    cmp r0,#'9'+1 
 862 05c0 01D4     	    bmi 9f 
 863 05c2 81EA0101 	8:  eor r1,r1  
 864 05c6 0940     	9:  ands r1,r1 
 865 05c8 02BC     	    pop {r1}
 866 05ca 7047     	    _RET 
 867              	
 868              	/*****************************************
 869              	    is_alnum 
 870              	    check if character is alphanumeric 
 871              	    input:
 872              	      r0 
 873              	    output:
 874              	      r0     same 
 875              	      Z      1 false | 0 true 
 876              	*****************************************/
 877              	    _FUNC is_alnum 
 878 05cc 00B5FFF7 	    _CALL is_alpha 
 878      E5FF5DF8 
 878      04EB
 879 05d6 04D1     	    bne 9f 
 880 05d8 00B5FFF7 	    _CALL is_num 
 880      EBFF5DF8 
 880      04EB
 881 05e2 7047     	9:  _RET 
 882              	
 883              	
 884              	/*****************************************
 885              	    parse_keyword 
 886              	    parse work and ckeck if in dictionary 
 887              	    input:
 888              	      r0    first character 
 889              	      r3    tib index 
 890              	      t1    tib 
 891              	      t2    pad 
ARM GAS  tinyBasic.s 			page 29


 892              	    output:
 893              	      r3    updated 
 894              	      t1    updated 
 895              	      t2    updated   
 896              	    use:
 897              	    
 898              	*****************************************/
 899              	    _FUNC parse_keyword 
 900 05e4 4DF8049D 	    push {T2}
 901 05e8 18F80300 	    ldrb r0,[T1,r3]
 902 05ec 03F10103 	    add r3,#1
 903 05f0 00B3     	    cbz r0,2f 
 904 05f2 00B5FFF7 	    _CALL upper 
 904      9CFF5DF8 
 904      04EB
 905 05fc 00B5FFF7 	    _CALL is_alpha 
 905      CDFF5DF8 
 905      04EB
 906 0606 00F00F81 	    beq syntax_error 
 907 060a 09F8010B 	    strb r0,[T2],#1
 908 060e 18F80300 	1:  ldrb r0,[T1,r3]
 909 0612 03F10103 	    add r3,#1 
 910 0616 68B1     	    cbz r0,2f 
 911 0618 00B5FFF7 	    _CALL upper 
 911      89FF5DF8 
 911      04EB
 912 0622 00B5FFF7 	    _CALL is_alnum
 912      D2FF5DF8 
 912      04EB
 913 062c 02D0     	    beq 2f 
 914 062e 09F8010B 	    strb r0,[T2],#1
 915 0632 ECE7     	    b 1b 
 916 0634 A3F10103 	2:  sub r3,#1
 917 0638 80EA0000 	    eor r0,r0
 918 063c 89F80000 	    strb r0,[T2] 
 919 0640 0098     	    ldr r0,[sp]
 920 0642 4178     	    ldrb r1,[r0,#1] 
 921 0644 29B9     	    cbnz r1,3f
 922 0646 0178     	    ldrb r1,[r0]
 923 0648 A1F14101 	    sub r1,#'A'
 924 064c 4FF00400 	    mov r0,#TK_VAR
 925 0650 08E0     	    b 9f 
 926 0652 DFF89C19 	3:  ldr r1,=kword_dict  
 927 0656 00B500F0 	    _CALL search_dict 
 927      A0F95DF8 
 927      04EB
 928 0660 00B9     	    cbnz r0,9f 
 929 0662 E1E0     	    b syntax_error 
 930 0664 5DF8049B 	9:  pop {T2}
 931 0668 7047     	    _RET 
 932              	
 933              	
 934              	/*******************
 935              	    DECOMPILER 
 936              	*******************/
 937              	
 938              	/********************************************
ARM GAS  tinyBasic.s 			page 30


 939              	    cmd_name 
 940              	    search bytecode in dictionary and 
 941              	    return its name 
 942              	  input:
 943              	    r0    keyword bytecode 
 944              	  ouput:
 945              	    r0    name string 
 946              	  use:
 947              	    T1    link 
 948              	    T2    tmp 
 949              	*********************************************/
 950 066a 00BF     	    _FUNC cmd_name 
 951 066c 2DE90003 	    push {T1,T2}
 952 0670 DFF87C89 	    ldr T1,=kword_dict 
 953 0674 58F8089C 	1:  ldr T2,[T1,#-8]
 954 0678 8145     	    cmp T2,r0 
 955 067a 04D0     	    beq 2f 
 956 067c 58F80C8C 	    ldr T1,[T1,#-12]
 957 0680 B8F1000F 	    cmp T1,#0
 958 0684 F6D1     	    bne 1b  
 959 0686 4046     	2:  mov r0,T1 
 960 0688 BDE80003 	    pop {T1,T2}
 961 068c 7047     	    _RET
 962              	
 963              	/****************************
 964              	  detokenize and print line 
 965              	  input:
 966              	    BPTR   line address 
 967              	  output:
 968              	    none:
 969              	  use:
 970              	    r0,r1 
 971              	****************************/
 972 068e 00BF     	    _FUNC print_basic_line 
 973 0690 03B4     	    push {r0,r1}
 974 0692 4FF0000A 	    mov IN,#0
 975 0696 3BF80A00 	    ldrh r0,[BPTR,IN]
 976 069a 0AF1020A 	    add IN,#2
 977 069e 4FF00A01 	    mov r1,#10 
 978 06a2 00B5FFF7 	    _CALL print_int
 978      FEFF5DF8 
 978      04EB
 979 06ac 1BF80A00 	    ldrb r0, [BPTR,IN]
 980 06b0 0AF1010A 	    add IN,#1 
 981 06b4 6060     	    str r0,[UPP,#COUNT]
 982              	token_loop:  
 983 06b6 00B500F0 	    _CALL next_token
 983      9CFA5DF8 
 983      04EB
 984 06c0 0028     	    cmp r0,#TK_NONE 
 985 06c2 00F08880 	    beq 9f  
 986 06c6 0E28     	    cmp r0,#TK_INTGR 
 987 06c8 07D1     	    bne 2f 
 988 06ca 0846     	    mov r0,r1 
 989 06cc A169     	    ldr r1,[UPP,#BASE]
 990 06ce 00B5FFF7 	    _CALL print_int 
 990      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 31


 990      04EB
 991 06d8 EDE7     	    b token_loop 
 992 06da 0328     	2:  cmp r0,#TK_CHAR 
 993 06dc 0ED1     	    bne 3f 
 994 06de 01F14100 	    add r0,r1,#'A' 
 995 06e2 00B5FFF7 	    _CALL uart_putc
 995      FEFF5DF8 
 995      04EB
 996 06ec 4FF02000 	    mov r0,#SPACE 
 997 06f0 00B5FFF7 	    _CALL uart_putc
 997      FEFF5DF8 
 997      04EB
 998 06fa DCE7     	    b token_loop 
 999 06fc 0228     	3:  cmp r0,#TK_QSTR 
 1000 06fe 14D1     	    bne 4f 
 1001 0700 4FF02200 	    mov r0,#'"'
 1002 0704 00B5FFF7 	    _CALL uart_putc 
 1002      FEFF5DF8 
 1002      04EB
 1003 070e 0846     	    mov r0,r1 
 1004 0710 00B5FFF7 	    _CALL uart_puts
 1004      FEFF5DF8 
 1004      04EB
 1005 071a 4FF02200 	    mov r0,#'"'
 1006 071e 00B5FFF7 	    _CALL uart_putc 
 1006      FEFF5DF8 
 1006      04EB
 1007 0728 C5E7     	    b token_loop
 1008 072a 0A28     	4:  cmp r0,#TK_CMD
 1009 072c 38D4     	    bmi 5f 
 1010 072e 0E28     	    cmp r0,#TK_INTGR 
 1011 0730 36D5     	    bpl 5f
 1012 0732 4FF02000 	    mov r0,#SPACE 
 1013 0736 00B5FFF7 	    _CALL uart_putc  
 1013      FEFF5DF8 
 1013      04EB
 1014 0740 0846     	    mov r0,r1
 1015 0742 3A28     	    cmp r0,#PRT_IDX 
 1016 0744 07D1     	    bne 1f  
 1017 0746 4FF03F00 	    mov r0,#'?'
 1018 074a 00B5FFF7 	    _CALL uart_putc 
 1018      FEFF5DF8 
 1018      04EB
 1019 0754 1CE0     	    b 3f 
 1020 0756 4728     	1:  cmp r0,#REM_IDX
 1021 0758 10D1     	    bne 1f
 1022 075a 4FF02700 	    mov r0,#'\''
 1023 075e 00B5FFF7 	    _CALL uart_putc 
 1023      FEFF5DF8 
 1023      04EB
 1024 0768 0BEB0A00 	    add r0,BPTR,IN  
 1025 076c 00B5FFF7 	    _CALL uart_puts 
 1025      FEFF5DF8 
 1025      04EB
 1026 0776 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1027 077a 2CE0     	    b 9f 
 1028 077c 00B5FFF7 	1:  _CALL cmd_name
ARM GAS  tinyBasic.s 			page 32


 1028      75FF5DF8 
 1028      04EB
 1029 0786 00B5FFF7 	2:  _CALL uart_puts
 1029      FEFF5DF8 
 1029      04EB
 1030 0790 4FF02000 	3:  mov r0,#SPACE 
 1031 0794 00B5FFF7 	    _CALL uart_putc 
 1031      FEFF5DF8 
 1031      04EB
 1032 079e 8AE7     	    b token_loop
 1033 07a0 01B4     	5:  push {r0}
 1034 07a2 DFF85018 	    ldr r1,=single_char 
 1035 07a6 085C     	    ldrb r0,[r1,r0]
 1036 07a8 02BC     	    pop {r1}
 1037 07aa 28B1     	    cbz r0,6f 
 1038 07ac 00B5FFF7 	    _CALL uart_putc
 1038      FEFF5DF8 
 1038      04EB
 1039 07b6 7EE7     	    b token_loop
 1040 07b8 3329     	6:  cmp r1,#TK_GE 
 1041 07ba 02D1     	    bne 7f 
 1042 07bc DFF83808 	    ldr r0,=ge_str
 1043 07c0 E1E7     	    b 2b 
 1044 07c2 3629     	7:  cmp r1,#TK_LE 
 1045 07c4 02D1     	    bne 8f
 1046 07c6 DFF83408 	    ldr r0,=le_str
 1047 07ca DCE7     	    b 2b
 1048 07cc 3529     	8:  cmp r1,#TK_NE 
 1049 07ce 02D1     	    bne 9f 
 1050 07d0 DFF82C08 	    ldr r0,=ne_str 
 1051 07d4 D7E7     	    b 2b 
 1052 07d6 4FF00D00 	9:  mov r0,#CR 
 1053 07da 00B5FFF7 	    _CALL uart_putc 
 1053      FEFF5DF8 
 1053      04EB
 1054 07e4 03BC     	    pop {r0,r1}
 1055 07e6 7047     	    _RET 
 1056              	
 1057 07e8 3E3D00   	ge_str: .asciz ">="
 1058 07eb 3C3D00   	le_str: .asciz "<="
 1059 07ee 3C3E00   	ne_str: .asciz "<>"
 1060              	
 1061              	single_char:
 1062 07f1 003A0000 	  .byte 0,':',0,0,0,'@','(',')',',','#' // 0..9
 1062      00402829 
 1062      2C23
 1063 07fb 00000000 	  .space 6
 1063      0000
 1064 0801 2B2D     	  .byte '+','-'
 1065 0803 00000000 	  .space 14
 1065      00000000 
 1065      00000000 
 1065      0000
 1066 0811 2A2F25   	  .byte '*','/','%'
 1067 0814 00000000 	  .space 14
 1067      00000000 
 1067      00000000 
ARM GAS  tinyBasic.s 			page 33


 1067      0000
 1068 0822 3E3D003C 	  .byte '>','=',0,'<',0,0
 1068      0000
 1069              	
 1070              	
 1071              	/**********************************
 1072              	      BASIC commands 
 1073              	**********************************/
 1074              	
 1075              	/*********************************
 1076              	    syntax_error 
 1077              	    display syntax error message and 
 1078              	    abort program 
 1079              	  input:
 1080              	    none  
 1081              	  output: 
 1082              	    none 
 1083              	  use:
 1084              	*********************************/
 1085              	    _FUNC syntax_error 
 1086 0828 4FF00200 	    mov r0,#ERR_SYNTAX
 1087 082c 00E0     	    b tb_error 
 1088              	
 1089              	/*********************************
 1090              	    tb_error 
 1091              	    display BASIC error and 
 1092              	    abort program. 
 1093              	  input:
 1094              	    r0    error code   
 1095              	  output: 
 1096              	    none 
 1097              	  use:
 1098              	    r1    temp 
 1099              	*********************************/
 1100 082e 00BF     	    _FUNC tb_error 
 1101 0830 216C     	    ldr r1,[UPP,#FLAGS]
 1102 0832 11F0200F 	    tst r1,#FCOMP
 1103 0836 43D1     	    bne compile_error
 1104              	rt_error:
 1105 0838 01B4     	    push {r0}
 1106 083a DFF8C807 	    ldr r0,=rt_error_msg 
 1107 083e 00B5FFF7 	    _CALL uart_puts 
 1107      FEFF5DF8 
 1107      04EB
 1108 0848 01BC     	    pop {r0}
 1109 084a DFF8BC17 	    ldr r1,=err_msg  
 1110 084e 4FEA8000 	    lsl r0,#2 
 1111 0852 0858     	    ldr r0,[r1,r0]
 1112 0854 00B5FFF7 	    _CALL uart_puts
 1112      FEFF5DF8 
 1112      04EB
 1113 085e D4F808B0 	    ldr BPTR,[UPP,#BASICPTR]
 1114 0862 BBF80000 	    ldrh r0,[BPTR]
 1115 0866 4FF00A01 	    mov r1,#10
 1116 086a 00B5FFF7 	    _CALL print_int 
 1116      FEFF5DF8 
 1116      04EB
ARM GAS  tinyBasic.s 			page 34


 1117 0874 4FF02C00 	    mov r0,#',' 
 1118 0878 00B5FFF7 	    _CALL uart_putc 
 1118      FEFF5DF8 
 1118      04EB
 1119 0882 D4F800A0 	    ldr IN,[UPP,#IN_SAVED]
 1120 0886 00B500F0 	    _CALL next_token
 1120      B4F95DF8 
 1120      04EB
 1121 0890 02B4     	    push {r1}
 1122 0892 4FF00A01 	    mov r1,#10 
 1123 0896 00B5FFF7 	    _CALL print_int 
 1123      FEFF5DF8 
 1123      04EB
 1124 08a0 4FF02C00 	    mov r0,#',' 
 1125 08a4 00B5FFF7 	    _CALL uart_putc 
 1125      FEFF5DF8 
 1125      04EB
 1126 08ae 01BC     	    pop {r0}
 1127 08b0 4FF00A01 	    mov r1,#10 
 1128 08b4 00B5FFF7 	    _CALL print_int 
 1128      FEFF5DF8 
 1128      04EB
 1129 08be 4FE1     	    b warm_start 
 1130              	compile_error:
 1131 08c0 DFF84417 	    ldr r1,=err_msg 
 1132 08c4 4FEA8000 	    lsl r0,#2 
 1133 08c8 0858     	    ldr r0,[r1,r0]
 1134 08ca 00B5FFF7 	    _CALL uart_puts
 1134      FEFF5DF8 
 1134      04EB
 1135 08d4 A068     	    ldr r0,[UPP,#BASICPTR]
 1136 08d6 00B5FFF7 	    _CALL uart_puts
 1136      FEFF5DF8 
 1136      04EB
 1137 08e0 4FF00D00 	    mov r0,#CR 
 1138 08e4 00B5FFF7 	    _CALL uart_putc  
 1138      FEFF5DF8 
 1138      04EB
 1139 08ee 2068     	    ldr r0,[UPP,#IN_SAVED]
 1140 08f0 00B5FFF7 	    _CALL spaces 
 1140      FEFF5DF8 
 1140      04EB
 1141 08fa 4FF05E00 	    mov r0,#'^' 
 1142 08fe 00B5FFF7 	    _CALL uart_putc
 1142      FEFF5DF8 
 1142      04EB
 1143 0908 4FF00D00 	    mov r0,#CR 
 1144 090c 00B5FFF7 	    _CALL uart_putc   
 1144      FEFF5DF8 
 1144      04EB
 1145 0916 23E1     	    b  warm_start  
 1146              	    
 1147              	rt_error_msg:
 1148 0918 0A52756E 	  .asciz "\nRuntime error\n"
 1148      74696D65 
 1148      20657272 
 1148      6F720A00 
ARM GAS  tinyBasic.s 			page 35


 1149              	
 1150              	err_msg:
 1151 0928 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1151      00000000 
 1151      0D000000 
 1151      1B000000 
 1151      34000000 
 1152 0940 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1152      6F000000 
 1152      89000000 
 1152      9A000000 
 1152      AB000000 
 1153 0954 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1153      EA000000 
 1153      FA000000 
 1153      0E010000 
 1153      21010000 
 1154              	
 1155              	    .section .rodata.tb_error 
 1156              	
 1157 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1157      72792066 
 1157      756C6C0A 
 1157      00
 1158 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1158      61782065 
 1158      72726F72 
 1158      0A00
 1159 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1159      206F7065 
 1159      72617469 
 1159      6F6E206F 
 1159      76657266 
 1160 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1160      73696F6E 
 1160      20627920 
 1160      300A00
 1161 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1161      6C696420 
 1161      6C696E65 
 1161      206E756D 
 1161      6265722E 
 1162 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1162      74696D65 
 1162      206F6E6C 
 1162      79207573 
 1162      6167652E 
 1163 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1163      616E6420 
 1163      6C696E65 
 1163      206F6E6C 
 1163      79207573 
 1164 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1164      69636174 
 1164      65206E61 
 1164      6D652E0A 
 1164      00
ARM GAS  tinyBasic.s 			page 36


 1165 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1165      206E6F74 
 1165      20666F75 
 1165      6E642E0A 
 1165      00
 1166 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1166      76616C75 
 1166      652E0A00 
 1167 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1167      20696E20 
 1167      65787465 
 1167      6E646564 
 1167      206D656D 
 1168 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1168      61746120 
 1168      666F756E 
 1168      642E0A00 
 1169 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1169      726F6772 
 1169      616D2069 
 1169      6E205241 
 1169      4D210A00 
 1170 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1170      20737973 
 1170      74656D20 
 1170      66756C6C 
 1170      2E0A00
 1171 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1171      65722066 
 1171      756C6C0A 
 1171      00
 1172              	
 1173 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1173      2074696D 
 1173      65206572 
 1173      726F722C 
 1173      2000
 1174 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1174      70696C65 
 1174      20657272 
 1174      6F722C20 
 1174      00
 1175 0151 6C617374 	tk_id: .asciz "last token id: "
 1175      20746F6B 
 1175      656E2069 
 1175      643A2000 
 1176              	
 1177              	
 1178              	    .section  .text , "ax", %progbits 
 1179              	
 1180              	/*********************************
 1181              	   skip_line 
 1182              	   data and remark line are skipped
 1183              	   by the interpreter 
 1184              	***********************************/
 1185              	    _FUNC skip_line 
 1186 0968 D4F804A0 	    ldr IN,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 37


 1187 096c 7047     	    _RET 
 1188              	
 1189              	
 1190              	/*********************************
 1191              	   BASIC: BTGL adr, mask   
 1192              	   toggle bits [adr]=[adr]^mask  
 1193              	   input:
 1194              	     r0    adr 
 1195              	     r1    mask 
 1196              	    output;
 1197              	      none 
 1198              	    use:
 1199              	      T1   temp
 1200              	      T2   temp  
 1201              	*******************************/     
 1202 096e 00BF     	    _FUNC BTGL 
 1203              	
 1204 0970 7047     	    _RET 
 1205              	
 1206              	/***************************************
 1207              	   kword_cmp
 1208              	   compare keyword to dict entry
 1209              	  input:
 1210              	    r0  keyword 
 1211              	    r1  dict entry 
 1212              	    r2  character count 
 1213              	  output:
 1214              	    r0  0 not same | -1 same 
 1215              	  use:
 1216              	    r6   result  
 1217              	    T1   char 1
 1218              	    T2   char 2
 1219              	**************************************/   
 1220 0972 00BF     	    _FUNC kword_cmp 
 1221 0974 2DE94003 	    push {r6,T1,T2}
 1222 0978 4FF0FF36 	    mov r6,#-1 
 1223 097c 4AB1     	1:  cbz r2,9f       
 1224 097e 10F8018B 	    ldrb T1,[r0],#1
 1225 0982 11F8019B 	    ldrb T2,[r1],#1
 1226 0986 A2F10102 	    sub r2,#1
 1227 098a C845     	    cmp T1,T2
 1228 098c F6D0     	    beq 1b 
 1229 098e 86EA0606 	    eor r6,r6  
 1230 0992 3046     	9:  mov r0,r6
 1231 0994 BDE84003 	    pop {r6,T1,T2}
 1232 0998 7047     	    _RET 
 1233              	
 1234              	/***********************************************
 1235              	    search_dict 
 1236              	    search keyword in dictionary
 1237              	   input:
 1238              	  	 r0   keyword 
 1239              	     r1		dictionary first name field address  
 1240              	   output:
 1241              	     r0 		token attribute 
 1242              	     r1		  cmd_index if r0!=TK_NONE  
 1243              	   use:
ARM GAS  tinyBasic.s 			page 38


 1244              	     r3   length keyword 
 1245              	     T1   keyword
 1246              	     T2   link  
 1247              	**********************************************/
 1248 099a 00BF     	  _FUNC search_dict
 1249 099c 2DE90C03 	  push {r2,r3,T1,T2}
 1250 09a0 8046     	  mov T1,r0 
 1251 09a2 00B5FFF7 	  _CALL strlen 
 1251      FEFF5DF8 
 1251      04EB
 1252 09ac 0346     	  mov r3,r0  
 1253              	1:  
 1254 09ae 8946     	   mov T2,r1  // keep for linking   
 1255 09b0 0878     	   ldrb r0,[r1] 
 1256 09b2 78B1     	   cbz r0,9f // null byte, end of dictionary
 1257 09b4 4046     	   mov r0,T1
 1258 09b6 1A46     	   mov r2,r3   
 1259 09b8 00B5FFF7 	   _CALL kword_cmp  
 1259      DBFF5DF8 
 1259      04EB
 1260 09c2 18B9     	   cbnz r0,2f 
 1261 09c4 4946     	   mov r1,T2
 1262 09c6 51F80C1C 	   ldr r1,[r1,#-12]
 1263 09ca F0E7     	   b 1b   
 1264              	2: // found
 1265 09cc 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1266 09d0 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1267 09d4 BDE80C03 	9: pop {r2,r3,T1,T2}
 1268 09d8 7047     	   _RET 
 1269              	
 1270              	
 1271              	/**************************
 1272              	    INTERPRETER 
 1273              	*************************/
 1274              	
 1275              	/*********************************
 1276              	   cold_start 
 1277              	   initialize BASIC interpreter 
 1278              	   never leave 
 1279              	   input:
 1280              	     none 
 1281              	   output:
 1282              	    none 
 1283              	*********************************/
 1284              	  .type cold_start, %function 
 1285              	  .global cold_start 
 1286              	cold_start: 
 1287 09da 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1287      C2F20004 
 1288 09e2 DFF84400 	    ldr r0,src_addr 
 1289 09e6 1149     	    ldr r1,dest_addr
 1290 09e8 0968     	    ldr r1,[r1] 
 1291 09ea 0C44     	    add UPP,r1 // system variables base address   
 1292              	// clear RAM
 1293 09ec 2046     	    mov r0,UPP  
 1294 09ee DFF85C11 	    ldr r1,tib 
 1295 09f2 82EA0202 	    eor r2,r2 
ARM GAS  tinyBasic.s 			page 39


 1296 09f6 40F8042B 	1:  str r2,[r0],#4 
 1297 09fa 8842     	    cmp r0,r1 
 1298 09fc FBD4     	    bmi 1b 
 1299              	//copy initialized system variables to ram 
 1300 09fe DFF82800 	    ldr r0,src_addr 
 1301 0a02 2146     	    mov r1,UPP 
 1302 0a04 DFF82820 	    ldr r2,sysvar_size
 1303 0a08 00B5FFF7 	    _CALL cmove
 1303      FEFF5DF8 
 1303      04EB
 1304 0a12 00B500F0 	    _CALL prt_version
 1304      0EF85DF8 
 1304      04EB
 1305 0a1c 00B500F0 	    _CALL clear_basic  
 1305      5DF85DF8 
 1305      04EB
 1306 0a26 9BE0     	    b warm_start    
 1307              	src_addr:
 1308 0a28 00000000 	  .word uzero
 1309              	dest_addr:
 1310 0a2c 00000000 	  .word vectors_size
 1311 0a30 CC000000 	sysvar_size: .word ulast-uzero 
 1312              	
 1313              	/************************************
 1314              	    print firmware version 
 1315              	    input: 
 1316              	      none 
 1317              	    output:
 1318              	      none 
 1319              	    use:
 1320              	      r0 
 1321              	***********************************/
 1322              	    _FUNC prt_version 
 1323 0a34 DFF8D405 	    ldr r0,=version_msg 
 1324 0a38 00B5FFF7 	    _CALL uart_puts
 1324      FEFF5DF8 
 1324      04EB
 1325 0a42 9FF87800 	    ldrb r0,version 
 1326 0a46 4FEA1010 	    lsr r0,#4 
 1327 0a4a 00F13000 	    add r0,#'0' 
 1328 0a4e 3A28     	    cmp r0,#'9'+1 
 1329 0a50 01D4     	    bmi 1f 
 1330 0a52 00F10700 	    add r0,#7 
 1331              	  1:
 1332 0a56 00B5FFF7 	    _CALL uart_putc 
 1332      FEFF5DF8 
 1332      04EB
 1333 0a60 4FF02E00 	    mov r0,#'. 
 1334 0a64 00B5FFF7 	    _CALL uart_putc 
 1334      FEFF5DF8 
 1334      04EB
 1335 0a6e 9FF84C00 	    ldrb r0,version 
 1336 0a72 00F00F00 	    and r0,#15 
 1337 0a76 00F13000 	    add r0,'0' 
 1338 0a7a 3A28     	    cmp r0,#'9'+1 
 1339 0a7c 01D4     	    bmi 1f 
 1340 0a7e 00F10700 	    add r0,#7
ARM GAS  tinyBasic.s 			page 40


 1341              	  1: 
 1342 0a82 00B5FFF7 	    _CALL uart_putc 
 1342      FEFF5DF8 
 1342      04EB
 1343 0a8c 4FF00D00 	    mov r0,#CR 
 1344 0a90 00B5FFF7 	    _CALL uart_putc 
 1344      FEFF5DF8 
 1344      04EB
 1345 0a9a 7047     	    _RET  
 1346              	version_msg:
 1347 0a9c 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1347      65207069 
 1347      6C6C2074 
 1347      696E7920 
 1347      42415349 
 1348              	version:
 1349 0abc 10       	    .byte 0x10 
 1350 0abd 0000BF   	    .p2align 2 
 1351              	
 1352              	
 1353              	/*****************************
 1354              	    clear_vars 
 1355              	    initialize variables to 0
 1356              	  input:
 1357              	    none 
 1358              	  output:
 1359              	    none 
 1360              	  use:
 1361              	    r0,r1,r2 
 1362              	*****************************/
 1363              	    _FUNC clear_vars 
 1364 0ac0 07B4     	    push {r0,r1,r2}
 1365 0ac2 80EA0000 	    eor r0,r0 
 1366 0ac6 04F16001 	    add r1,UPP,#VARS
 1367 0aca 4FF01A02 	    mov r2,#26
 1368 0ace 41F8040B 	1:  str r0,[r1],#4 
 1369 0ad2 013A     	    subs r2,#1
 1370 0ad4 FBD1     	    bne 1b  
 1371 0ad6 07BC     	    pop {r0,r1,r2}
 1372 0ad8 7047     	    _RET 
 1373              	
 1374              	/*****************************
 1375              	   clear_basic 
 1376              	   reset BASIC system variables 
 1377              	   and clear variables and RAM 
 1378              	*****************************/
 1379 0ada 00BF     	    _FUNC clear_basic
 1380 0adc 80EA0000 	  	eor r0,r0
 1381 0ae0 2064     	    str r0,[UPP,#FLAGS] 
 1382 0ae2 6060     	    str r0,[UPP,#COUNT]
 1383 0ae4 2060     	    str r0,[UPP,#IN_SAVED]
 1384 0ae6 A060     	    str r0,[UPP,#BASICPTR]
 1385 0ae8 E060     	    str r0,[UPP,#DATAPTR]
 1386 0aea 2061     	    str r0,[UPP,#DATA]
 1387 0aec 6061     	    str r0,[UPP,#DATALEN]
 1388 0aee 04F1CC00 	    add r0,UPP,#BASIC_START 
 1389 0af2 00F11000 	    add r0,#16 
ARM GAS  tinyBasic.s 			page 41


 1390 0af6 6FF00F01 	    mvn r1,#15
 1391 0afa 00EA0100 	    and r0,r1 
 1392 0afe 2063     	    str r0,[UPP,#TXTBGN]
 1393 0b00 6063     	    str r0,[UPP,#TXTEND]
 1394 0b02 00B5FFF7 	    _CALL clear_vars
 1394      DCFF5DF8 
 1394      04EB
 1395 0b0c 206B     	    ldr r0,[UPP,#TXTBGN]
 1396 0b0e DFF83C10 	    ldr r1,tib 
 1397 0b12 82EA0202 	    eor r2,r2 
 1398 0b16 40F8042B 	1:  str r2,[r0],#4
 1399 0b1a 8842     	    cmp r0,r1 
 1400 0b1c FBD4     	    bmi 1b 
 1401 0b1e 7047     	    _RET  
 1402              	
 1403              	/***********************************
 1404              	   warm_init 
 1405              	   initialize interpreter context 
 1406              	  input:
 1407              	    none
 1408              	  output:
 1409              	    none 
 1410              	  use:
 1411              	    r0 
 1412              	***********************************/
 1413              	warm_init:
 1414              	// reset data stack       
 1415 0b20 DFF824C0 	    ldr DP,dstack 
 1416 0b24 4FF0000A 	    mov IN,#0 // BASIC line index 
 1417 0b28 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1418 0b2c 80EA0000 	    eor r0,r0 
 1419 0b30 6060     	    str r0,[UPP,#COUNT]  
 1420 0b32 2064     	    str r0,[UPP,#FLAGS]
 1421 0b34 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1422 0b36 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1423 0b3a 6064     	    str r0,[UPP,#TAB_WIDTH]
 1424 0b3c 4FF00A00 	    mov r0,#10 // default base decimal 
 1425 0b40 A061     	    str r0,[UPP,#BASE]
 1426 0b42 7047     	    _RET  
 1427              	
 1428 0b44 00000000 	mstack: .word _mstack 
 1429 0b48 00000000 	dstack: .word _dstack 
 1430 0b4c 00000000 	tib: .word _tib 
 1431 0b50 00000000 	pad: .word _pad 
 1432 0b54 FCFFFFFF 	array: .word _pad - 4 
 1433 0b58 0A524541 	ready: .asciz "\nREADY" 
 1433      445900
 1434              	
 1435              	/**********************************
 1436              	    warm_start 
 1437              	    start BASIC interpreter doesn't  
 1438              	    reset variables and code space 
 1439              	  input:
 1440              	    none 
 1441              	  output:
 1442              	    none 
 1443              	**********************************/
ARM GAS  tinyBasic.s 			page 42


 1444 0b5f 00       	    _FUNC warm_start 
 1445              	// initialise parameters stack
 1446 0b60 FFF7DEFF 	    bl warm_init
 1447              	// reset main stack 
 1448 0b64 5FF82400 	    ldr r0,mstack
 1449 0b68 8546     	    mov sp,r0 
 1450 0b6a DFF8A404 	    ldr r0,=ready 
 1451 0b6e 00B5FFF7 	    _CALL uart_puts 
 1451      FEFF5DF8 
 1451      04EB
 1452              	// fall in cmd_line 
 1453              	
 1454              	/**********************************
 1455              	   cmd_line 
 1456              	   shell command line 
 1457              	   input:
 1458              	      none 
 1459              	   output:
 1460              	      none 
 1461              	   use:
 1462              	
 1463              	***********************************/
 1464              	    _FUNC cmd_line 
 1465 0b78 4FF00D00 	    mov r0,#CR 
 1466 0b7c 00B5FFF7 	    _CALL uart_putc 
 1466      FEFF5DF8 
 1466      04EB
 1467 0b86 5FF83C00 	1:  ldr r0,tib
 1468 0b8a 4FF05001 	    mov r1,#TIB_SIZE 
 1469 0b8e 00B5FFF7 	    _CALL readln 
 1469      FEFF5DF8 
 1469      04EB
 1470 0b98 0940     	    ands r1,r1 // empty line 
 1471 0b9a F4D0     	    beq 1b 
 1472 0b9c 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1472      39FB5DF8 
 1472      04EB
 1473 0ba6 EED0     	    beq 1b  // tokens stored in text area 
 1474              	// interpret tokenized line 
 1475              	interpreter:
 1476 0ba8 00B500F0 	  _CALL next_token 
 1476      23F85DF8 
 1476      04EB
 1477 0bb2 0028     	  cmp r0,#TK_NONE 
 1478 0bb4 F8D0     	  beq interpreter   
 1479 0bb6 0A28     	  cmp r0,#TK_CMD 
 1480 0bb8 03D1     	  bne 2f
 1481 0bba 0846     	  mov r0,r1 
 1482 0bbc 00F014F8 	  bl execute  
 1483 0bc0 F2E7     	  b interpreter   
 1484              	2: 
 1485 0bc2 0428     	  cmp r0,#TK_VAR 
 1486 0bc4 05D1     	  bne 3f 
 1487 0bc6 00B500F0 	  _CALL let_var 
 1487      21FA5DF8 
 1487      04EB
 1488 0bd0 EAE7     	  b interpreter 
ARM GAS  tinyBasic.s 			page 43


 1489              	3: 
 1490 0bd2 0528     	  cmp r0,#TK_ARRAY 
 1491 0bd4 05D1     	  bne 4f
 1492 0bd6 00B500F0 	  _CALL let_array 
 1492      27FA5DF8 
 1492      04EB
 1493 0be0 E2E7     	  b interpreter
 1494              	4: 
 1495 0be2 0128     	  cmp r0,#TK_COLON
 1496 0be4 E0D0     	  beq interpreter
 1497 0be6 1FE6     	  b syntax_error
 1498              	
 1499              	/*****************************
 1500              	    execute 
 1501              	    execute a BASIC routine from 
 1502              	    its token value 
 1503              	  input:
 1504              	    r0  BASIC SUB|FUNC token  
 1505              	  output: 
 1506              	    depend on SUB|FUNc
 1507              	*****************************/
 1508              	    _FUNC execute 
 1509 0be8 DFF82814 	    ldr r1,=fn_table 
 1510 0bec 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1511 0bf0 0047     	    bx r0 
 1512              	
 1513              	/*************************************
 1514              	  next_token 
 1515              	  extract next token from token list 
 1516              	  input:
 1517              	    none 
 1518              	  output:
 1519              	    r0    token attribute
 1520              	    r1    token value if there is one 
 1521              	  use:
 1522              	    T1    exit token type  
 1523              	****************************/
 1524 0bf2 00BF     	    _FUNC next_token 
 1525 0bf4 4DF8048D 	    push {T1}
 1526 0bf8 88EA0808 	    eor T1,T1 // TK_NONE 
 1527 0bfc 6068     	    ldr r0,[UPP,#COUNT]
 1528 0bfe 8245     	    cmp IN,r0 
 1529 0c00 0FD4     	    bmi 0f
 1530              	new_line:
 1531 0c02 BBF80010 	    ldrh r1,[BPTR] // line #
 1532 0c06 01B9     	    cbnz r1, end_of_line  // command line
 1533 0c08 AAE7     	    b warm_start
 1534              	end_of_line:        
 1535 0c0a 8344     	    add BPTR,r0 // next line 
 1536 0c0c 606B     	    ldr r0,[UPP,#TXTEND]
 1537 0c0e 8345     	    cmp BPTR,r0 
 1538 0c10 A6D5     	    bpl warm_start // end of program
 1539 0c12 9BF80200 	    ldrb r0,[BPTR,#2]
 1540 0c16 6060     	    str r0,[UPP,#COUNT] 
 1541 0c18 4FF0030A 	    mov IN,#3
 1542 0c1c 4FF00100 	    mov r0,#TK_COLON 
 1543 0c20 2AE0     	    b 9f    
ARM GAS  tinyBasic.s 			page 44


 1544              	0: 
 1545 0c22 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1546 0c26 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1547 0c2a 1BF80A00 	    ldrb r0,[BPTR,IN] // token attribute
 1548 0c2e 0AF1010A 	    add IN,#1  
 1549 0c32 8046     	    mov T1,r0 
 1550 0c34 00F03F00 	    and r0,#0x3f // limit mask 
 1551 0c38 F749     	    ldr r1,=tok_jmp 
 1552 0c3a D1E800F0 	    tbb [r1,r0]
 1553              	1: // pc reference point 
 1554 0c3e 1BE0     	    b 9f 
 1555              	2: // .byte param
 1556 0c40 1BF80A10 	    ldrb r1,[BPTR,IN]
 1557 0c44 0AF1010A 	    add IN,#1 
 1558 0c48 16E0     	    b 9f 
 1559              	3: // .hword param 
 1560 0c4a 3BF80A10 	    ldrh r1,[BPTR,IN]
 1561 0c4e 0AF1020A 	    add IN,#2 
 1562 0c52 11E0     	    b 9f 
 1563              	4: // .word param  
 1564 0c54 5BF80A10 	    ldr r1,[BPTR,IN]
 1565 0c58 0AF1040A 	    add IN,#4
 1566 0c5c 0CE0     	    b 9f 
 1567              	5: // .asciz param 
 1568 0c5e 0BEB0A01 	    add r1,BPTR,IN 
 1569 0c62 0846     	    mov r0,r1  
 1570 0c64 00B5FFF7 	    _CALL strlen 
 1570      FEFF5DF8 
 1570      04EB
 1571 0c6e 8244     	    add IN,r0
 1572 0c70 0AF1010A 	    add IN,#1
 1573 0c74 00E0     	    b 9f  
 1574              	8: // syntax error 
 1575 0c76 D7E5     	    b syntax_error 
 1576 0c78 4046     	9:  mov r0,T1  
 1577 0c7a 5DF8048B 	    pop {T1}
 1578 0c7e 7047     	    _RET
 1579              	
 1580              	  .p2align 2
 1581              	tok_jmp: // token id  tbb offset 
 1582 0c80 1D1D     	  .byte (9b-1b)/2,(9b-1b)/2   // 0x0..0x1  TK_NONE, TK_COLON
 1583 0c82 1001011D 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(9b-1b)/2 // 0x2..0x5 TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1584 0c86 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x6..0x9 TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1585 0c8a 01010101 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // 0xa..0xd TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1586 0c8e 0B1C1D1D 	  .byte (4b-1b)/2,(8b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0xe..0x11 TK_INTGR,TK_BAD,TK_PLUS,TK_MINUS  
 1587 0c92 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x12..0x16
 1587      1C
 1588 0c97 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 //0x17..0x1c
 1588      1C1C
 1589 0c9d 1C1C1C   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x1d..0x1f
 1590 0ca0 1D1D1D   	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x20..0x22  TK_MULT,TK_DIV,TK_MOD 
 1591 0ca3 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x23..0x
 1591      1C1C1C1C 
 1592 0cab 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // 0x2b..0x30 
 1592      1C1C
 1593 0cb1 1D1D1D1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // 0x31..0x36  TK_GT..TK_LE    
 1593      1D1D
ARM GAS  tinyBasic.s 			page 45


 1594 0cb7 1C1C1C1C 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 /
 1594      1C1C1C1C 
 1594      1C
 1595              	
 1596              	  .p2align 2 
 1597              	
 1598              	/*********************************
 1599              	    expect 
 1600              	    check if next token is of 
 1601              	    expected type. If not 
 1602              	    call syntax_error  
 1603              	  input:
 1604              	      r0   token attribute
 1605              	  output:
 1606              	      r0  token attribute 
 1607              	      r1  token value
 1608              	  use:
 1609              	      T1   
 1610              	**********************************/
 1611              	    _FUNC expect 
 1612 0cc0 4DF8048D 	    push {T1}
 1613 0cc4 8046     	    mov T1,r0 
 1614 0cc6 00B5FFF7 	    _CALL next_token 
 1614      94FF5DF8 
 1614      04EB
 1615 0cd0 4045     	    cmp r0,T1  
 1616 0cd2 7FF4A9AD 	    bne syntax_error 
 1617 0cd6 5DF8048B 	    pop {T1}
 1618 0cda 7047     	    _RET 
 1619              	
 1620              	/***********************************
 1621              	    func_args 
 1622              	    get function arguments list 
 1623              	  input:
 1624              	    none 
 1625              	  output:
 1626              	    r0    arg. count 
 1627              	  use:
 1628              	
 1629              	************************************/
 1630              	    _FUNC func_args 
 1631 0cdc 4FF00600 	    mov r0,#TK_LPAREN 
 1632 0ce0 00B5FFF7 	    _CALL expect 
 1632      EDFF5DF8 
 1632      04EB
 1633 0cea 00B500F0 	    _CALL arg_list 
 1633      0CF85DF8 
 1633      04EB
 1634 0cf4 01B4     	    push {r0}
 1635 0cf6 4FF00700 	    mov r0,#TK_RPAREN 
 1636 0cfa 00B5FFF7 	    _CALL expect 
 1636      E0FF5DF8 
 1636      04EB
 1637 0d04 01BC     	    pop {r0}
 1638 0d06 7047     	    _RET 
 1639              	
 1640              	/**********************************
ARM GAS  tinyBasic.s 			page 46


 1641              	    arg_list 
 1642              	    get arguments list on dstack 
 1643              	  input:
 1644              	    none 
 1645              	  output:
 1646              	    r0    arg count
 1647              	  use:
 1648              	    T1    tmp count  
 1649              	***********************************/
 1650              	    _FUNC arg_list 
 1651 0d08 4DF8048D 	    push {T1}
 1652 0d0c 88EA0808 	    eor T1,T1 
 1653 0d10 00B500F0 	1:  _CALL expression 
 1653      CBF85DF8 
 1653      04EB
 1654 0d1a 0028     	    cmp R0,#TK_NONE 
 1655 0d1c 10D0     	    beq 9f 
 1656 0d1e 0E28     	    cmp r0,#TK_INTGR
 1657 0d20 0ED1     	    bne 9f 
 1658 0d22 4CF8041D 	    _PUSH r1 
 1659 0d26 08F10108 	    add T1,#1 
 1660 0d2a 00B5FFF7 	    _CALL next_token 
 1660      62FF5DF8 
 1660      04EB
 1661 0d34 0828     	    cmp r0,#TK_COMMA 
 1662 0d36 EBD0     	    beq 1b 
 1663 0d38 D4F800A0 	    _UNGET_TOKEN 
 1663      D4F808B0 
 1664 0d40 4046     	9:  mov r0,T1 
 1665 0d42 5DF8048B 	    pop {T1}
 1666 0d46 7047     	    _RET 
 1667              	
 1668              	/***********************************
 1669              	 factor
 1670              	 arithmetick factor parser 
 1671              	 factor ::= ['+'|'-'|e]  var | @ |
 1672              				 integer | function |
 1673              				 '('expression')' 
 1674              	  input: 
 1675              	    none 
 1676              	  output:
 1677              	    r0   token attribute 
 1678              	    r1   token value 
 1679              	  use:
 1680              	    r2   temp 
 1681              	    T1   sign 
 1682              	    T2   exit token attribute 
 1683              	***********************************/
 1684              	    _FUNC factor 
 1685 0d48 2DE90403 	    push {r2,T1,T2}
 1686 0d4c 4FF00E09 	    mov T2,#TK_INTGR 
 1687 0d50 4FF00108 	    mov T1,#1 // default sign +  
 1688 0d54 00B5FFF7 	    _CALL next_token
 1688      4DFF5DF8 
 1688      04EB
 1689 0d5e 0246     	    mov r2,r0 
 1690 0d60 00F03000 	    and r0,#TK_GRP_MASK 
ARM GAS  tinyBasic.s 			page 47


 1691 0d64 1028     	    cmp r0,#TK_GRP_ADD
 1692 0d66 1046     	    mov r0,r2
 1693 0d68 08D1     	    bne 1f 
 1694 0d6a 1028     	    cmp r0,#TK_PLUS 
 1695 0d6c 01D0     	    beq 0f 
 1696 0d6e 4FF0FF38 	    mov T1,#-1 // minus sign 
 1697 0d72 00B5FFF7 	0:  _CALL next_token
 1697      3EFF5DF8 
 1697      04EB
 1698 0d7c 0E28     	1:  cmp r0,#TK_INTGR 
 1699 0d7e 50D0     	    beq 8f 
 1700 0d80 0528     	    cmp r0,#TK_ARRAY 
 1701 0d82 1ED1     	    bne 2f 
 1702 0d84 4FF00600 	    mov r0,#TK_LPAREN 
 1703 0d88 00B5FFF7 	    _CALL expect 
 1703      99FF5DF8 
 1703      04EB
 1704 0d92 00B500F0 	    _CALL expression
 1704      8AF85DF8 
 1704      04EB
 1705 0d9c 0E28     	    cmp r0,#TK_INTGR
 1706 0d9e 7FF443AD 	    bne syntax_error
 1707 0da2 8146     	    mov T2,r0
 1708 0da4 0A46     	    mov r2,r1  
 1709 0da6 4FF00700 	    mov r0,#TK_RPAREN
 1710 0daa 00B5FFF7 	    _CALL expect 
 1710      88FF5DF8 
 1710      04EB
 1711 0db4 1046     	    mov r0,r2 
 1712 0db6 00B500F0 	    _CALL get_array_element 
 1712      EEF85DF8 
 1712      04EB
 1713 0dc0 2FE0     	    b 8f
 1714 0dc2 0628     	2:  cmp r0,#TK_LPAREN 
 1715 0dc4 12D1     	    bne 3f 
 1716 0dc6 00B500F0 	    _CALL expression 
 1716      70F85DF8 
 1716      04EB
 1717 0dd0 0E28     	    cmp r0,#TK_INTGR 
 1718 0dd2 7FF429AD 	    bne syntax_error
 1719 0dd6 8146     	    mov T2,r0
 1720 0dd8 0A46     	    mov r2,r1   
 1721 0dda 4FF00700 	    mov r0,#TK_RPAREN
 1722 0dde 00B5FFF7 	    _CALL expect 
 1722      6EFF5DF8 
 1722      04EB
 1723 0de8 1146     	    mov r1,r2 
 1724 0dea 1AE0     	    b 8f       
 1725 0dec 0428     	3:  cmp r0,#TK_VAR 
 1726 0dee 06D1     	    bne 4f
 1727 0df0 0846     	    mov r0,r1  
 1728 0df2 00B500F0 	    _CALL get_var 
 1728      E4F85DF8 
 1728      04EB
 1729 0dfc 11E0     	    b 8f 
 1730 0dfe 0B28     	4:  cmp r0,#TK_IFUNC 
 1731 0e00 01D0     	    beq 5f 
ARM GAS  tinyBasic.s 			page 48


 1732 0e02 0C28     	    cmp r0,#TK_CFUNC 
 1733 0e04 06D1     	    bne 6f 
 1734 0e06 0846     	5:  mov r0,r1  
 1735 0e08 00B5FFF7 	    _CALL execute
 1735      EDFE5DF8 
 1735      04EB
 1736 0e12 06E0     	    b 8f 
 1737 0e14 D4F800A0 	6:  _UNGET_TOKEN      
 1737      D4F808B0 
 1738 0e1c 4FF00000 	    mov r0,#TK_NONE
 1739 0e20 03E0     	    b 9f  
 1740 0e22 08FB01F1 	8:  mul r1,T1 
 1741 0e26 5FEA0900 	    movs r0,T2 
 1742 0e2a BDE80403 	9:  pop {r2,T1,T2}   
 1743 0e2e 7047     	    _RET 
 1744              	
 1745              	
 1746              	/*****************************************
 1747              	    term 
 1748              	    term parser 
 1749              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1750              	    output:
 1751              	      r0  	token attribute 
 1752              	      r1		integer
 1753              	    use:
 1754              	      r2    first operand 
 1755              	      r3    temp 
 1756              	      T1    operator 
 1757              	      T2    exit token attribute 
 1758              	******************************************/
 1759              	     _FUNC term 
 1760 0e30 2DE90C03 	    push {r2,r3,T1,T2}
 1761 0e34 4FF00009 	    mov T2,#TK_NONE 
 1762 0e38 00B5FFF7 	    _CALL factor
 1762      85FF5DF8 
 1762      04EB
 1763 0e42 60B3     	    cbz r0, 9f  // no factor   
 1764 0e44 8146     	    mov T2,r0  // TK_INTGR 
 1765 0e46 0A46     	    mov r2,r1 // first factor    
 1766 0e48 00B5FFF7 	0:  _CALL next_token
 1766      D3FE5DF8 
 1766      04EB
 1767 0e52 0346     	    mov r3,r0   
 1768 0e54 00F03000 	    and r0,#TK_GRP_MASK 
 1769 0e58 2028     	    cmp r0,#TK_GRP_MULT
 1770 0e5a 04D0     	    beq 1f
 1771 0e5c D4F800A0 	    _UNGET_TOKEN
 1771      D4F808B0 
 1772 0e64 1BE0     	    b 9f 
 1773 0e66 9846     	1:  mov T1,r3 
 1774 0e68 00B5FFF7 	    _CALL factor  
 1774      6DFF5DF8 
 1774      04EB
 1775 0e72 3FF4D9AC 	    beq syntax_error 
 1776 0e76 B8F1200F 	    cmp T1,#TK_MULT
 1777 0e7a 02D1     	    bne 2f 
 1778              	// multiplication
ARM GAS  tinyBasic.s 			page 49


 1779 0e7c 01FB02F2 	    mul r2,r1
 1780 0e80 E2E7     	    b 0b  
 1781 0e82 B8F1210F 	2:  cmp T1,#TK_DIV 
 1782 0e86 02D1     	    bne 3f
 1783              	// division
 1784 0e88 92FBF1F2 	    sdiv r2,r2,r1
 1785 0e8c DCE7     	    b 0b  
 1786              	3: // modulo
 1787 0e8e 1046     	    mov r0,r2 
 1788 0e90 92FBF1F2 	    sdiv r2,r2,r1 
 1789 0e94 01FB02F2 	    mul  r2,r1 
 1790 0e98 A0EB0202 	    sub  r2,r0,r2
 1791 0e9c D4E7     	    b 0b  
 1792 0e9e 1146     	9:  mov r1,r2 
 1793 0ea0 5FEA0900 	    movs r0,T2 
 1794 0ea4 BDE80C03 	    pop {r2,r3,T1,T2}
 1795 0ea8 7047     	    _RET 
 1796              	
 1797              	/*****************************************
 1798              	    expression 
 1799              	    arithmetic expression parser 
 1800              	    expression ::= term [['+'|'-'] term]*
 1801              	    result range {-32768..32767}
 1802              	    output:
 1803              	      r0    TK_NONE || TK_INTGR 
 1804              	      r1 	  integer
 1805              	    use:
 1806              	      r2  left operand 
 1807              	      T1  operator 
 1808              	      T2  exit token attribute
 1809              	******************************************/
 1810 0eaa 00BF     	    _FUNC expression 
 1811 0eac 2DE90403 	    push {r2,t1,t2}
 1812 0eb0 4FF00009 	    mov T2,#TK_NONE
 1813 0eb4 82EA0202 	    eor r2,r2 // zero 
 1814 0eb8 00B5FFF7 	    _CALL term 
 1814      B9FF5DF8 
 1814      04EB
 1815 0ec2 21D0     	    beq 9f  // no term  
 1816 0ec4 0A46     	    mov r2,r1 // first term
 1817 0ec6 4FF00E09 	    mov T2,#TK_INTGR    
 1818 0eca 00B5FFF7 	1:  _CALL next_token 
 1818      92FE5DF8 
 1818      04EB
 1819 0ed4 8046     	    mov T1,r0 // token attribute 
 1820 0ed6 00F03000 	    and r0,#TK_GRP_MASK 
 1821 0eda 1028     	    cmp r0,#TK_GRP_ADD 
 1822 0edc 04D0     	    beq 3f 
 1823 0ede D4F800A0 	    _UNGET_TOKEN
 1823      D4F808B0 
 1824 0ee6 0FE0     	    b 9f  
 1825 0ee8 00B5FFF7 	3:  _CALL term 
 1825      A1FF5DF8 
 1825      04EB
 1826 0ef2 0E28     	    cmp r0,#TK_INTGR 
 1827 0ef4 7FF498AC 	    bne syntax_error 
 1828 0ef8 B8F1100F 	    cmp T1,#TK_PLUS 
ARM GAS  tinyBasic.s 			page 50


 1829 0efc 02D0     	    beq 4f 
 1830 0efe A2EB0102 	    sub r2,r2,r1 // N1-N2  
 1831 0f02 E2E7     	    b 1b 
 1832 0f04 0A44     	4:  add r2,r2,r1 // N1+N2
 1833 0f06 E0E7     	    b 1b
 1834 0f08 4846     	9:  mov r0,T2 
 1835 0f0a 1146     	    mov r1,r2 
 1836 0f0c BDE80403 	    pop {r2,t1,t2}
 1837 0f10 7047     	    _RET 
 1838              	
 1839              	
 1840              	/**********************************************
 1841              	    relation parser 
 1842              	    rel ::= expr1 rel_op expr2
 1843              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 1844              	    relation return  integer , zero is false 
 1845              	    output:
 1846              	        r0	TK_INTGR  
 1847              	        r1	integer 
 1848              	    use:
 1849              	        r2   first operand 
 1850              	        T1   relop   
 1851              	**********************************************/
 1852 0f12 00BF     	    _FUNC relation 
 1853 0f14 2DE90401 	    push {r2,T1}
 1854 0f18 00B5FFF7 	    _CALL expression 
 1854      C7FF5DF8 
 1854      04EB
 1855 0f22 0E28     	    cmp r0,#TK_INTGR 
 1856 0f24 7FF480AC 	    bne syntax_error 
 1857 0f28 0A46     	    mov r2,r1  // first operand  
 1858 0f2a 00B5FFF7 	    _CALL next_token 
 1858      62FE5DF8 
 1858      04EB
 1859 0f34 8046     	    mov T1,r0  // relop  
 1860 0f36 00F03000 	    and r0,#TK_GRP_MASK 
 1861 0f3a 3028     	    cmp r0,#TK_GRP_RELOP 
 1862 0f3c 1DD1     	    bne 8f  // single operand 
 1863 0f3e 00B5FFF7 	    _CALL expression 
 1863      B4FF5DF8 
 1863      04EB
 1864 0f48 0E28     	    cmp r0,#TK_INTGR 
 1865 0f4a 7FF46DAC 	    bne syntax_error 
 1866 0f4e 8A42     	    cmp r2,r1 // compare operands  
 1867 0f50 4FF0FF31 	    mov r1,#-1 
 1868 0f54 314A     	    ldr r2,=relop_jmp
 1869 0f56 08F00708 	    and T1,#7 // {1..6}
 1870 0f5a D2E808F0 	    tbb [r2,T1]    
 1871              	rel_idx0:
 1872              	rel_eq:
 1873 0f5e 11D0     	    beq 9f 
 1874 0f60 08E0     	    b rel_false
 1875              	rel_lt: 
 1876 0f62 0FDB     	    blt 9f   
 1877 0f64 06E0     	    b rel_false 
 1878              	rel_le:
 1879 0f66 0DDD     	    ble 9f  
ARM GAS  tinyBasic.s 			page 51


 1880 0f68 04E0     	    b rel_false 
 1881              	rel_gt:
 1882 0f6a 0BDC     	    bgt 9f  
 1883 0f6c 02E0     	    b rel_false  
 1884              	rel_ge:
 1885 0f6e 09DA     	    bge 9f  
 1886 0f70 00E0     	    b rel_false  
 1887              	rel_diff:
 1888 0f72 07D1     	    bne 9f 
 1889              	rel_false:    
 1890 0f74 81EA0101 	    eor r1,r1  // false
 1891 0f78 04E0     	    b 9f  
 1892 0f7a D4F800A0 	8:  _UNGET_TOKEN 
 1892      D4F808B0 
 1893 0f82 1146     	    mov r1,r2    
 1894 0f84 4FF00E00 	9:  mov r0,#TK_INTGR
 1895 0f88 BDE80401 	    pop {r2,T1}
 1896 0f8c 7047     	    _RET 
 1897              	
 1898              	
 1899              	relop_jmp: 
 1900 0f8e 00       	  .byte 0 
 1901 0f8f 06       	  .byte (rel_gt-rel_idx0)/2 // > 
 1902 0f90 00       	  .byte 0 // =
 1903 0f91 08       	  .byte (rel_ge-rel_idx0)/2 // >= 
 1904 0f92 02       	  .byte (rel_lt-rel_idx0)/2 // <
 1905 0f93 0A       	  .byte (rel_diff-rel_idx0)/2 // <>
 1906 0f94 04       	  .byte (rel_le-rel_idx0)/2  // <=
 1907              	
 1908              	
 1909              	/***********************************
 1910              	    get_array_element
 1911              	    return value of @(n)
 1912              	  input:
 1913              	    r0    indice 
 1914              	  output:
 1915              	    r0   TK_INTGR
 1916              	    r1   value  
 1917              	************************************/
 1918 0f95 0000BF   	    _FUNC get_array_element 
 1919 0f98 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1920 0f9c 4FEA8000 	    lsl r0,#2 
 1921 0fa0 C0EB0100 	    rsb r0,r1 
 1922 0fa4 0168     	    ldr r1,[r0]
 1923 0fa6 4FF00E00 	    mov r0,#TK_INTGR 
 1924 0faa 7047     	    _RET 
 1925              	
 1926              	
 1927              	/***********************************
 1928              	    set_array_element 
 1929              	    set value of array element 
 1930              	  input:
 1931              	    r0   index 
 1932              	    r1   new value 
 1933              	  output:
 1934              	    none
 1935              	  use:
ARM GAS  tinyBasic.s 			page 52


 1936              	    r2    array pointer 
 1937              	**********************************/
 1938              	    _FUNC set_array_element 
 1939 0fac 04B4     	    push {r2}
 1940 0fae D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 1941 0fb2 4FEA8000 	    lsl r0,#2 
 1942 0fb6 A1EB0001 	    sub r1,r0 
 1943 0fba 0960     	    str r1,[r1]
 1944 0fbc 04BC     	    pop {r2}
 1945 0fbe 7047     	    _RET 
 1946              	
 1947              	/***********************************
 1948              	   get_var 
 1949              	   get variable value 
 1950              	  input:
 1951              	     r0    variable index {0..25}
 1952              	  output:
 1953              	     r0    TK_INTGR
 1954              	     r1    value 
 1955              	**********************************/
 1956              	    _FUNC get_var 
 1957 0fc0 04F16001 	    add r1,UPP,#VARS
 1958 0fc4 4FEA8000 	    lsl r0,#2 
 1959 0fc8 0958     	    ldr r1,[r1,r0]
 1960 0fca 4FF00E00 	    mov r0,#TK_INTGR
 1961 0fce 7047     	    _RET 
 1962              	
 1963              	/*********************************
 1964              	    set_var 
 1965              	    set variable value 
 1966              	  input:
 1967              	     r0    variable index {0..25}
 1968              	     r1    new value 
 1969              	  output:
 1970              	    none 
 1971              	  use:
 1972              	    r2   vars pointer 
 1973              	*********************************/
 1974              	    _FUNC set_var 
 1975 0fd0 04B4     	    push {r2}
 1976 0fd2 226E     	    ldr r2,[UPP,#VARS]
 1977 0fd4 4FEA8000 	    lsl r0,#2
 1978 0fd8 1150     	    str r1,[r2,r0]
 1979 0fda 04BC     	    pop {r2}
 1980 0fdc 7047     	    _RET 
 1981              	
 1982              	/******************************
 1983              	    CONSTANTS data
 1984              	******************************/
 1985              	
 1986 0fde 0000     	  .section .rodata 
 1987              	
 1988              	// system variables initial value 
 1989              	uzero:
 1990 0000 00000000 	  .word 0 // IN_SAVED
 1991 0004 00000000 	  .word 0 // COUNT
 1992 0008 00000000 	  .word 0 // BASICPTR
ARM GAS  tinyBasic.s 			page 53


 1993 000c 00000000 	  .word 0 // DATAPTR
 1994 0010 00000000 	  .word 0 // DATA
 1995 0014 00000000 	  .word 0 // DATALEN
 1996 0018 0A000000 	  .word 10 // BASE
 1997 001c 00000000 	  .word 0 // TICKS
 1998 0020 00000000 	  .word 0 // TIMER
 1999 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2000 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2001 002c 00000000 	  .word 0 // FFREE
 2002 0030 CC000000 	  .word ulast-uzero // TXTBGN
 2003 0034 CC000000 	  .word ulast-uzero // TXTEND
 2004 0038 00000000 	  .word 0 //LOOP_DEPTH
 2005 003c 00000000 	  .word 0 // ARRAY_SIZE
 2006 0040 00000000 	  .word 0 // FLAGS
 2007 0044 04000000 	  .word 4 // TAB_WIDTH
 2008 0048 00000000 	  .word 0 // RX_HEAD
 2009 004c 00000000 	  .word 0 // RX_TAIL
 2010 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2010      00000000 
 2010      00000000 
 2010      00000000 
 2011 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2011      00000000 
 2011      00000000 
 2011      00000000 
 2011      00000000 
 2012 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2013              	ulast:
 2014              	
 2015              	  .section .rodata.dictionary 
 2016              	
 2017              	// keep alphabetic order for BASIC names from Z-A
 2018              	// this sort order is for for WORDS cmd output. 	
 2019              	
 2020              		.equ link, 0
 2021              	kword_end:
 2022 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2022      00000000 
 2022      00000000 
 2022      00000000 
 2023 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 2023      64000000 
 2023      0A000000 
 2023      5854524D 
 2023      54000000 
 2024 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 2024      65000000 
 2024      0A000000 
 2024      58524356 
 2024      00000000 
 2025 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2025      63000000 
 2025      0B000000 
 2025      584F5200 
 2026 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 2026      62000000 
 2026      0A000000 
ARM GAS  tinyBasic.s 			page 54


 2026      57524954 
 2026      45000000 
 2027 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2027      61000000 
 2027      0A000000 
 2027      574F5244 
 2027      53000000 
 2028 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2028      60000000 
 2028      0A000000 
 2028      57414954 
 2028      00000000 
 2029 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 2029      5F000000 
 2029      0B000000 
 2029      55535200 
 2030 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2030      5E000000 
 2030      0A000000 
 2030      554E5449 
 2030      4C000000 
 2031 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2031      5D000000 
 2031      0B000000 
 2031      55464C41 
 2031      53480000 
 2032 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2032      5C000000 
 2032      0B000000 
 2032      55424F55 
 2032      4E440000 
 2033 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 2033      5B000000 
 2033      0A000000 
 2033      544F4E45 
 2033      00000000 
 2034 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2034      5A000000 
 2034      0A000000 
 2034      544F0000 
 2035 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2035      58000000 
 2035      0A000000 
 2035      54494D45 
 2035      52000000 
 2036 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2036      59000000 
 2036      0B000000 
 2036      54494D45 
 2036      4F555400 
 2037 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2037      57000000 
 2037      0B000000 
 2037      5449434B 
 2037      53000000 
 2038 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2038      56000000 
ARM GAS  tinyBasic.s 			page 55


 2038      0A000000 
 2038      53544F50 
 2038      00000000 
 2039 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2039      55000000 
 2039      0A000000 
 2039      53544550 
 2039      00000000 
 2040 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 2040      54000000 
 2040      0A000000 
 2040      53504957 
 2040      52000000 
 2041 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 2041      53000000 
 2041      0A000000 
 2041      53504953 
 2041      454C0000 
 2042 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 2042      51000000 
 2042      0B000000 
 2042      53504952 
 2042      44000000 
 2043 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 2043      52000000 
 2043      0A000000 
 2043      53504945 
 2043      4E000000 
 2044 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2044      50000000 
 2044      0A000000 
 2044      534C4545 
 2044      50000000 
 2045 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 2045      4F000000 
 2045      0B000000 
 2045      53495A45 
 2045      00000000 
 2046 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 2046      4E000000 
 2046      0A000000 
 2046      53484F57 
 2046      00000000 
 2047 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2047      4D000000 
 2047      0A000000 
 2047      53415645 
 2047      00000000 
 2048 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2048      4C000000 
 2048      0A000000 
 2048      52554E00 
 2049 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2049      4B000000 
 2049      0B000000 
 2049      52534849 
 2049      46540000 
ARM GAS  tinyBasic.s 			page 56


 2050 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2050      4A000000 
 2050      0B000000 
 2050      524E4400 
 2051 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2051      49000000 
 2051      0A000000 
 2051      52455455 
 2051      524E0000 
 2052 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2052      48000000 
 2052      0A000000 
 2052      52455354 
 2052      4F524500 
 2053 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 2053      47000000 
 2053      0A000000 
 2053      52454D41 
 2053      524B0000 
 2054 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 2054      46000000 
 2054      0A000000 
 2054      5245424F 
 2054      4F540000 
 2055 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2055      45000000 
 2055      0B000000 
 2055      52454144 
 2055      00000000 
 2056 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 2056      44000000 
 2056      0B000000 
 2056      514B4559 
 2056      00000000 
 2057 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 2057      43000000 
 2057      0B000000 
 2057      50525449 
 2057      00000000 
 2058 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 2058      42000000 
 2058      0B000000 
 2058      50525448 
 2058      00000000 
 2059 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 2059      41000000 
 2059      0B000000 
 2059      50525447 
 2059      00000000 
 2060 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 2060      40000000 
 2060      0B000000 
 2060      50525446 
 2060      00000000 
 2061 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 2061      3F000000 
 2061      0B000000 
ARM GAS  tinyBasic.s 			page 57


 2061      50525445 
 2061      00000000 
 2062 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 2062      3E000000 
 2062      0B000000 
 2062      50525444 
 2062      00000000 
 2063 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 2063      3D000000 
 2063      0B000000 
 2063      50525443 
 2063      00000000 
 2064 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 2064      3C000000 
 2064      0B000000 
 2064      50525442 
 2064      00000000 
 2065 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
 2065      3B000000 
 2065      0B000000 
 2065      50525441 
 2065      00000000 
 2066 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2066      3A000000 
 2066      0A000000 
 2066      5052494E 
 2066      54000000 
 2067 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 2067      39000000 
 2067      0B000000 
 2067      504F5554 
 2067      00000000 
 2068 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 2068      38000000 
 2068      0A000000 
 2068      504F4B45 
 2068      00000000 
 2069 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 2069      35000000 
 2069      0A000000 
 2069      504D4F44 
 2069      45000000 
 2070 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 2070      37000000 
 2070      0B000000 
 2070      50494E50 
 2070      00000000 
 2071 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 2071      36000000 
 2071      0B000000 
 2071      5045454B 
 2071      00000000 
 2072 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2072      34000000 
 2072      0A000000 
 2072      50415553 
 2072      45000000 
ARM GAS  tinyBasic.s 			page 58


 2073 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2073      33000000 
 2073      0B000000 
 2073      50414400 
 2074 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2074      32000000 
 2074      0B000000 
 2074      4F520000 
 2075 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 2075      31000000 
 2075      0B000000 
 2075      4F445200 
 2076 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2076      30000000 
 2076      0B000000 
 2076      4E4F5400 
 2077 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2077      2E000000 
 2077      0A000000 
 2077      4E455854 
 2077      00000000 
 2078 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2078      2F000000 
 2078      0A000000 
 2078      4E455700 
 2079 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 2079      2D000000 
 2079      0B000000 
 2079      4D554C44 
 2079      49560000 
 2080 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2080      2C000000 
 2080      0B000000 
 2080      4C534849 
 2080      46540000 
 2081 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 2081      2B000000 
 2081      0B000000 
 2081      4C4F4700 
 2082 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2082      2A000000 
 2082      0A000000 
 2082      4C4F4144 
 2082      00000000 
 2083 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2083      29000000 
 2083      0A000000 
 2083      4C495354 
 2083      00000000 
 2084 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2084      28000000 
 2084      0A000000 
 2084      4C455400 
 2085 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2085      27000000 
 2085      0B000000 
 2085      4B455900 
ARM GAS  tinyBasic.s 			page 59


 2086 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 2086      26000000 
 2086      0A000000 
 2086      49574447 
 2086      52454600 
 2087 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 2087      25000000 
 2087      0A000000 
 2087      49574447 
 2087      454E0000 
 2088 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2088      24000000 
 2088      0B000000 
 2088      494E5645 
 2088      52540000 
 2089 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 2089      23000000 
 2089      0A000000 
 2089      494E5055 
 2089      54000000 
 2090 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2090      22000000 
 2090      0A000000 
 2090      49460000 
 2091 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 2091      21000000 
 2091      0B000000 
 2091      49445200 
 2092 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2092      20000000 
 2092      0A000000 
 2092      48455800 
 2093 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 2093      1F000000 
 2093      0B000000 
 2093      4750494F 
 2093      00000000 
 2094 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2094      1E000000 
 2094      0A000000 
 2094      474F544F 
 2094      00000000 
 2095 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2095      1D000000 
 2095      0A000000 
 2095      474F5355 
 2095      42000000 
 2096 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2096      1C000000 
 2096      0A000000 
 2096      464F5247 
 2096      45540000 
 2097 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2097      1B000000 
 2097      0A000000 
 2097      464F5200 
 2098 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
ARM GAS  tinyBasic.s 			page 60


 2098      1A000000 
 2098      0A000000 
 2098      46435055 
 2098      00000000 
 2099 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2099      18000000 
 2099      0A000000 
 2099      454E4400 
 2100 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 2100      19000000 
 2100      0B000000 
 2100      45455052 
 2100      4F4D0000 
 2101 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 2101      17000000 
 2101      0A000000 
 2101      44575249 
 2101      54450000 
 2102 05f4 EC050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2102      66000000 
 2102      0A000000 
 2102      44554D50 
 2102      00000000 
 2103 0608 00060000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 2103      16000000 
 2103      0B000000 
 2103      44524541 
 2103      44000000 
 2104 061c 14060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2104      15000000 
 2104      0A000000 
 2104      444F0000 
 2105 062c 28060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2105      14000000 
 2105      0A000000 
 2105      44495200 
 2106 063c 38060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2106      13000000 
 2106      0A000000 
 2106      44454300 
 2107 064c 48060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 2107      12000000 
 2107      0B000000 
 2107      44445200 
 2108 065c 58060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2108      11000000 
 2108      0A000000 
 2108      44415441 
 2108      4C4E0000 
 2109 0670 68060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2109      10000000 
 2109      0A000000 
 2109      44415441 
 2109      00000000 
 2110 0684 7C060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 2110      0F000000 
 2110      0B000000 
ARM GAS  tinyBasic.s 			page 61


 2110      43524C00 
 2111 0694 90060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 2111      0E000000 
 2111      0B000000 
 2111      43524800 
 2112 06a4 A0060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2112      0D000000 
 2112      0C000000 
 2112      43484152 
 2112      00000000 
 2113 06b8 B0060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 2113      0C000000 
 2113      0A000000 
 2113      42594500 
 2114 06c8 C4060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2114      0B000000 
 2114      0A000000 
 2114      42544F47 
 2114      4C000000 
 2115 06dc D4060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2115      0A000000 
 2115      0B000000 
 2115      42544553 
 2115      54000000 
 2116 06f0 E8060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2116      09000000 
 2116      0A000000 
 2116      42534554 
 2116      00000000 
 2117 0704 FC060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2117      08000000 
 2117      0A000000 
 2117      42524553 
 2117      00000000 
 2118 0718 10070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2118      07000000 
 2118      0B000000 
 2118      42495400 
 2119 0728 24070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2119      06000000 
 2119      0A000000 
 2119      41575500 
 2120 0738 34070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 2120      05000000 
 2120      0A000000 
 2120      4155544F 
 2120      52554E00 
 2121 074c 44070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2121      04000000 
 2121      0B000000 
 2121      41534300 
 2122 075c 58070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2122      03000000 
 2122      0B000000 
 2122      414E4400 
 2123 076c 68070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 2123      02000000 
ARM GAS  tinyBasic.s 			page 62


 2123      0B000000 
 2123      41444352 
 2123      45414400 
 2124 0780 78070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 2124      01000000 
 2124      0A000000 
 2124      4144434F 
 2124      4E000000 
 2125              	first_link: 
 2126 0794 8C070000 	  .word LINK 
 2127 0798 00000000 	  .word ABS_IDX 
 2128 079c 0B000000 	  .word TK_IFUNC
 2129              	kword_dict: // first name field 
 2130              	  .equ LINK,. 
 2131 07a0 41425300 	  .asciz "ABS" 
 2132              	  .p2align 2 
 2133              	
 2134              	    .section .rodata.fn_tabld 
 2135              	
 2136              	//comands and fonctions address table 	
 2137              	fn_table:
 2138 0000 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 2138      00000000 
 2138      00000000 
 2138      00000000 
 2138      00000000 
 2139 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 2139      00000000 
 2139      00000000 
 2139      00000000 
 2139      00000000 
 2140 003c 00000000 		.word const_cr1,skip_line,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_writ
 2140      00000000 
 2140      00000000 
 2140      00000000 
 2140      00000000 
 2141 0060 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 2141      00000000 
 2141      00000000 
 2141      00000000 
 2141      00000000 
 2142 0080 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 2142      00000000 
 2142      00000000 
 2142      00000000 
 2142      00000000 
 2143 00a0 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 2143      00000000 
 2143      00000000 
 2143      00000000 
 2143      00000000 
 2144 00c0 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 2144      00000000 
 2144      00000000 
 2144      00000000 
 2144      00000000 
 2145 00e0 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
ARM GAS  tinyBasic.s 			page 63


 2145      00000000 
 2145      00000000 
 2145      00000000 
 2145      00000000 
 2146 0100 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,skip_line // 64..71 
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2147 0120 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 2147      00000000 
 2147      00000000 
 2147      00000000 
 2147      00000000 
 2148 0140 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 2148      00000000 
 2148      00000000 
 2148      00000000 
 2148      00000000 
 2149 0160 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 2149      00000000 
 2149      00000000 
 2149      00000000 
 2149      00000000 
 2150 0180 00000000 		.word wait,words,write,bit_xor,transmit,receive,dump // 96..102 
 2150      00000000 
 2150      00000000 
 2150      00000000 
 2150      00000000 
 2151 019c 00000000 		.word 0 
 2152              	
 2153              	
 2154              	/**********************************
 2155              	    BASIC commands and functions 
 2156              	**********************************/
 2157              	
 2158              	    .section .text.basic , "ax", %progbits 
 2159              	
 2160              	
 2161              	/*******************************
 2162              	  BASIC:  ABS expr 
 2163              	  input:
 2164              	    none 
 2165              	  output:
 2166              	    r0    token type 
 2167              	    r1    abs(expr)
 2168              	  use:
 2169              	    none 
 2170              	******************************/
 2171              	    _FUNC abs 
 2172 0000 00B5FFF7 	    _CALL arg_list
 2172      FEFF5DF8 
 2172      04EB
 2173 000a 0128     	    cmp r0,#1 
 2174 000c 01D0     	    beq 1f 
 2175 000e FFF7FEBF 	    b syntax_error 
 2176 0012 5CF8041B 	1:  _POP r1 
ARM GAS  tinyBasic.s 			page 64


 2177 0016 11F0004F 	    tst r1,#(1<<31)
 2178 001a 01D0     	    beq 9f
 2179 001c C1F10001 	    rsb r1,#0 
 2180 0020 4FF00E00 	9:  mov r0,#TK_INTGR
 2181 0024 7047     	   _RET 
 2182              	
 2183 0026 00BF     	    _FUNC power_adc
 2184 0028 7047     	    _RET
 2185              	
 2186 002a 00BF     	    _FUNC analog_read
 2187 002c 7047     	    _RET
 2188              	
 2189              	/************************************
 2190              	  BASIC: AND(expr1,expr2)
 2191              	  logical ANND bit to between expr1,expr2
 2192              	************************************/
 2193 002e 00BF     	    _FUNC bit_and
 2194 0030 00B5FFF7 	    _CALL func_args 
 2194      FEFF5DF8 
 2194      04EB
 2195 003a 0228     	    cmp r0,#2 
 2196 003c 7FF4FEAF 	    bne syntax_error 
 2197 0040 5CF8040B 	    _POP r0 
 2198 0044 5CF8041B 	    _POP r1 
 2199 0048 01EA0001 	    and r1,r0 
 2200 004c 4FF00E00 	    mov r0,#TK_INTGR
 2201 0050 7047     	    _RET
 2202              	
 2203              	/*******************************************
 2204              	  BASIC: ASC(string|char)
 2205              	  return ASCII code of char of first char 
 2206              	  of string 
 2207              	*******************************************/
 2208 0052 00BF     	    _FUNC ascii
 2209 0054 4FF00600 	    mov r0,#TK_LPAREN 
 2210 0058 00B5FFF7 	    _CALL expect 
 2210      FEFF5DF8 
 2210      04EB
 2211 0062 00B5FFF7 	    _CALL next_token 
 2211      FEFF5DF8 
 2211      04EB
 2212 006c 0228     	    cmp r0,#TK_QSTR
 2213 006e 03D0     	    beq 2f 
 2214 0070 0328     	    cmp r0,#TK_CHAR 
 2215 0072 7FF4FEAF 	    bne syntax_error 
 2216 0076 00E0     	    b 9f 
 2217 0078 0978     	2:  ldrb r1,[r1]
 2218 007a 4CF8041D 	9:  _PUSH r1 
 2219 007e 4FF00700 	    mov r0,#TK_RPAREN 
 2220 0082 00B5FFF7 	    _CALL expect 
 2220      FEFF5DF8 
 2220      04EB
 2221 008c 4FF00E00 	    mov r0,#TK_INTGR 
 2222 0090 5CF8041B 	    _POP r1 
 2223 0094 7047     	    _RET
 2224              	
 2225 0096 00BF     	    _FUNC autorun
ARM GAS  tinyBasic.s 			page 65


 2226 0098 7047     	    _RET
 2227              	
 2228 009a 00BF     	    _FUNC awu
 2229 009c 7047     	    _RET
 2230              	
 2231 009e 00BF     	    _FUNC bitmask
 2232 00a0 7047     	    _RET 
 2233              	
 2234              	  
 2235              	  /*********************************
 2236              	   BASIC: BRES adr, mask   
 2237              	   reset bits [adr]= [adr] & ~mask  
 2238              	   input:
 2239              	     none 
 2240              	    output;
 2241              	      none 
 2242              	    use:
 2243              	      T1   temp
 2244              	      T2   temp 
 2245              	*******************************/     
 2246 00a2 00BF     	  _FUNC bit_reset
 2247 00a4 00B5FFF7 	    _CALL arg_list 
 2247      FEFF5DF8 
 2247      04EB
 2248 00ae 0228     	    cmp r0,#2 
 2249 00b0 01D0     	    beq 1f 
 2250 00b2 FFF7FEBF 	    b syntax_error 
 2251 00b6 5CF8041B 	1:  _POP r1 //mask 
 2252 00ba 5CF8040B 	    _POP r0 //address 
 2253 00be D0F80090 	    ldr T2,[r0] 
 2254 00c2 81F0FF31 	    eor r1,#-1 // ~mask 
 2255 00c6 01EA0901 	    and r1,T2
 2256 00ca 0160     	    str r1,[r0]
 2257 00cc 7047     	    _RET  
 2258              	
 2259              	
 2260              	/*********************************
 2261              	   BASIC: BSET adr, mask   
 2262              	   reset bits [adr]= [adr] & ~mask  
 2263              	   input:
 2264              	      none 
 2265              	    output;
 2266              	      none 
 2267              	    use:
 2268              	      T1   temp
 2269              	      T2   temp  
 2270              	*******************************/     
 2271 00ce 00BF     	    _FUNC bit_set
 2272 00d0 00B5FFF7 	    _CALL arg_list 
 2272      FEFF5DF8 
 2272      04EB
 2273 00da 0228     	    cmp r0,#2 
 2274 00dc 01D0     	    beq 1f 
 2275 00de FFF7FEBF 	    b syntax_error 
 2276 00e2 5CF8041B 	1:  _POP r1 //mask 
 2277 00e6 5CF8040B 	    _POP r0 //address 
 2278 00ea D0F80090 	    ldr T2,[r0] 
ARM GAS  tinyBasic.s 			page 66


 2279 00ee 41EA0901 	    orr r1,T2
 2280 00f2 0160     	    str r1,[r0]
 2281 00f4 7047     	    _RET 
 2282              	
 2283              	  /*********************************
 2284              	   BASIC: BTOGL adr, mask   
 2285              	   reset bits [adr]= [adr] & ~mask  
 2286              	   input:
 2287              	     r0    adr 
 2288              	     r1    mask 
 2289              	    output;
 2290              	      none 
 2291              	    use:
 2292              	      T1   temp
 2293              	      T2   temp  
 2294              	*******************************/     
 2295 00f6 00BF     	  _FUNC bit_toggle
 2296 00f8 00B5FFF7 	    _CALL arg_list 
 2296      FEFF5DF8 
 2296      04EB
 2297 0102 0228     	    cmp r0,#2 
 2298 0104 01D0     	    beq 1f 
 2299 0106 FFF7FEBF 	    b syntax_error 
 2300 010a 5CF8041B 	1:  _POP r1 //mask 
 2301 010e 5CF8040B 	    _POP r0 //address 
 2302 0112 D0F80090 	    ldr T2,[r0] 
 2303 0116 81EA0901 	    eor r1,T2
 2304 011a 0160     	    str r1,[r0]
 2305 011c 7047     	    _RET  
 2306              	
 2307              	/********************************
 2308              	  BASIC: BTEST(addr,bit)
 2309              	  return bit state at address
 2310              	********************************/
 2311 011e 00BF     	    _FUNC bit_test
 2312 0120 00B5FFF7 	    _CALL func_args
 2312      FEFF5DF8 
 2312      04EB
 2313 012a 0228     	    cmp r0,#2 
 2314 012c 7FF4FEAF 	    bne syntax_error 
 2315 0130 5CF8041B 	    _POP r1
 2316 0134 4FF00100 	    mov r0,#1
 2317 0138 01F01F01 	    and r1,#31  
 2318 013c 21B1     	1:  cbz r1, 2f
 2319 013e 4FEA4000 	    lsl r0,#1
 2320 0142 A1F10101 	    sub r1,#1
 2321 0146 F9E7     	    b 1b 
 2322 0148 5CF8041B 	2:  _POP r1
 2323 014c 0968     	    ldr r1,[r1]
 2324 014e 01EA0001 	    and r1,r0 
 2325 0152 09B1     	    cbz r1,9f 
 2326 0154 4FF00101 	    mov r1,#1
 2327 0158 4FF00E00 	9:  mov r0,#TK_INTGR    
 2328 015c 7047     	    _RET 
 2329              	
 2330 015e 00BF     	    _FUNC bye
 2331 0160 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 67


 2332              	
 2333 0162 00BF     	    _FUNC char
 2334 0164 7047     	    _RET 
 2335              	
 2336 0166 00BF     	    _FUNC const_cr2
 2337 0168 7047     	    _RET  
 2338              	
 2339 016a 00BF     	    _FUNC const_cr1
 2340 016c 7047     	    _RET 
 2341              	
 2342              	
 2343              	/**************************
 2344              	  BASIC: DATALN expr 
 2345              	  set data pointer to line#
 2346              	  specified by expr. 
 2347              	  if line# not valid program 
 2348              	  end with error.
 2349              	  use:
 2350              	
 2351              	**************************/
 2352 016e 00BF     	    _FUNC data_line
 2353 0170 206C10F0 	    _RTO // run time only 
 2353      010F03D1 
 2353      4FF00700 
 2353      FFF7FEBF 
 2354 0180 00B5FFF7 	    _CALL expression 
 2354      FEFF5DF8 
 2354      04EB
 2355 018a 0E28     	    cmp r0,#TK_INTGR
 2356 018c 7FF4FEAF 	    bne syntax_error
 2357 0190 0846     	    mov r0,r1 
 2358 0192 00B5FFF7 	    _CALL search_lineno
 2358      FEFF5DF8 
 2358      04EB
 2359 019c 0029     	    cmp r1,#0
 2360 019e 03D0     	    beq 1f 
 2361 01a0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2362 01a4 FFF7FEBF 	    b syntax_error 
 2363 01a8 C178     	1:  ldrb r1,[r0,#3]
 2364 01aa 0A29     	    cmp r1,#TK_CMD 
 2365 01ac F8D1     	    bne 0b
 2366 01ae 0179     	    ldrb r1,[r0,#4]
 2367 01b0 1029     	    cmp r1,#DATA_IDX 
 2368 01b2 F5D1     	    bne 0b  
 2369 01b4 E060     	    str r0,[UPP,#DATAPTR]
 2370 01b6 8178     	    ldrb r1,[r0,#2]
 2371 01b8 6161     	    str r1,[UPP,#DATALEN]
 2372 01ba 4FF00501 	    mov r1,#5 // position of first data item  
 2373 01be 2161     	    str r1,[UPP,#DATA]
 2374 01c0 7047     	    _RET 
 2375              	
 2376              	/*****************************
 2377              	  BASIC: READ 
 2378              	  read next data item 
 2379              	  the value can be assigned to
 2380              	  variable or used in expression
 2381              	*****************************/
ARM GAS  tinyBasic.s 			page 68


 2382 01c2 00BF     	    _FUNC read
 2383 01c4 206C10F0 	    _RTO
 2383      010F03D1 
 2383      4FF00700 
 2383      FFF7FEBF 
 2384 01d4 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2385 01d6 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2386 01d8 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2387 01da 8242     	    cmp r2,r0
 2388 01dc 0ED0     	    beq seek_next
 2389 01de 885C     	1:  ldrb r0,[r1,r2]
 2390 01e0 02F10102 	    add r2,#1
 2391 01e4 0028     	    cmp r0,#TK_NONE
 2392 01e6 09D0     	    beq seek_next
 2393 01e8 0828     	    cmp r0,#TK_COMMA
 2394 01ea F8D0     	    beq 1b  
 2395 01ec 0E28     	    cmp r0,#TK_INTGR 
 2396 01ee 7FF4FEAF 	    bne syntax_error  
 2397 01f2 8958     	    ldr r1,[r1,r2]
 2398 01f4 02F10402 	    add r2,#4
 2399 01f8 2261     	    str r2,[UPP,#DATA]
 2400 01fa 12E0     	    b 9f  
 2401              	seek_next: // is next line data ?
 2402 01fc 8878     	    ldrb r0,[R1,#2]
 2403 01fe 0144     	    add r1,r0 
 2404 0200 C878     	    ldrb r0,[R1,#3]
 2405 0202 0A28     	    cmp r0,#TK_CMD
 2406 0204 09D1     	    bne 2f 
 2407 0206 0879     	    ldrb r0,[r1,#4]
 2408 0208 1028     	    cmp r0,#DATA_IDX 
 2409 020a 06D1     	    bne 2f 
 2410 020c E160     	    str r1,[UPP,#DATAPTR]
 2411 020e 8878     	    ldrb r0,[r1,#2]
 2412 0210 6061     	    str  r0,[UPP,#DATALEN]
 2413 0212 4FF00502 	    mov r2,#5 
 2414 0216 2261     	    str r2,[UPP,#DATA]
 2415 0218 E1E7     	    b 1b 
 2416 021a 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2417 021e FFF7FEBF 	    b tb_error 
 2418 0222 7047     	9:  _RET 
 2419              	
 2420              	/********************************
 2421              	  BASIC: RESTORE 
 2422              	  seek first data line 
 2423              	********************************/
 2424              	    _FUNC restore
 2425 0224 206C10F0 	    _RTO 
 2425      010F03D1 
 2425      4FF00700 
 2425      FFF7FEBF 
 2426 0234 216B     	    ldr r1,[UPP,#TXTBGN]
 2427 0236 606B     	1:  ldr r0,[UPP,#TXTEND]
 2428 0238 0FD0     	    beq no_data_line 
 2429 023a 0879     	    ldrb r0,[r1,#4]
 2430 023c 1028     	    cmp r0,#DATA_IDX
 2431 023e 09D1     	    bne try_next_line
 2432 0240 C878     	    ldrb r0,[r1,#3]
ARM GAS  tinyBasic.s 			page 69


 2433 0242 0A28     	    cmp r0,#TK_CMD
 2434 0244 06D1     	    bne try_next_line
 2435              	// this a the first data line 
 2436 0246 E160     	    str r1,[UPP,#DATAPTR]
 2437 0248 8878     	    ldrb r0,[r1,#2]
 2438 024a 6061     	    str r0,[UPP,#DATALEN]
 2439 024c 4FF00500 	    mov r0,#5 
 2440 0250 2061     	    str r0,[UPP,#DATA]
 2441 0252 07E0     	    b 9f
 2442              	try_next_line:
 2443 0254 8878     	    ldrb r0,[r1,#2]
 2444 0256 0144     	    add r1,r0 
 2445 0258 EDE7     	    b 1b 
 2446              	no_data_line:
 2447 025a 80EA0000 	    eor r0,r0 
 2448 025e E060     	    str r0,[UPP,#DATAPTR]
 2449 0260 2061     	    str r0,[UPP,#DATA]
 2450 0262 6061     	    str r0,[UPP,#DATALEN]
 2451 0264 7047     	9:  _RET 
 2452              	
 2453 0266 00BF     	    _FUNC const_ddr
 2454 0268 7047     	    _RET 
 2455              	
 2456 026a 00BF     	    _FUNC dec_base
 2457 026c 7047     	    _RET 
 2458              	
 2459 026e 00BF     	    _FUNC directory
 2460 0270 7047     	    _RET 
 2461              	
 2462 0272 00BF     	    _FUNC do_loop
 2463 0274 7047     	    _RET 
 2464              	
 2465 0276 00BF     	    _FUNC digital_read
 2466 0278 7047     	    _RET 
 2467              	
 2468 027a 00BF     	    _FUNC digital_write
 2469 027c 7047     	    _RET  
 2470              	
 2471              	
 2472              	/****************************************
 2473              	  BASIC: DUMP adr, count 
 2474              	    command line only  
 2475              	    print memory content in hexadecimal 
 2476              	    16 bytes per row 
 2477              	    ouput:
 2478              	      none 
 2479              	    use:
 2480              	      r2   byte counter  
 2481              	****************************************/
 2482 027e 00BF     	    _FUNC dump 
 2483 0280 04B4     	    push {r2}
 2484 0282 226C     	    ldr r2,[UPP,#FLAGS]
 2485 0284 12F0010F 	    tst r2,#FRUN 
 2486 0288 03D0     	    beq 0f
 2487 028a 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2488 028e FFF7FEBF 	    b tb_error  
 2489 0292 00B5FFF7 	0:  _CALL arg_list 
ARM GAS  tinyBasic.s 			page 70


 2489      FEFF5DF8 
 2489      04EB
 2490 029c 0228     	    cmp r0,#2
 2491 029e 7FF4FEAF 	    bne syntax_error 
 2492 02a2 5CF8042B 	    _POP r2   // count 
 2493 02a6 5CF8040B 	    _POP  r0  // adr 
 2494 02aa 4FF01001 	1:  mov r1,#16
 2495 02ae 00B5FFF7 	    _CALL prt_row 
 2495      FEFF5DF8 
 2495      04EB
 2496 02b8 103A     	    subs r2,#16 
 2497 02ba F6D5     	    bpl 1b 
 2498 02bc 04BC     	2:  pop {r2}
 2499 02be 7047     	    _RET 
 2500              	
 2501              	
 2502              	/*******************************
 2503              	  BASIC: END 
 2504              	  exit program 
 2505              	******************************/ 
 2506              	    _FUNC cmd_end
 2507 02c0 FFF7FEBF 	    b warm_start 
 2508 02c4 7047     	    _RET 
 2509              	
 2510 02c6 00BF     	    _FUNC const_eeprom_base
 2511 02c8 7047     	    _RET 
 2512              	
 2513 02ca 00BF     	    _FUNC fcpu
 2514 02cc 7047     	    _RET 
 2515              	
 2516 02ce 00BF     	    _FUNC forget
 2517 02d0 7047     	    _RET 
 2518              	
 2519              	/**************************************************
 2520              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2521              	  introdure FOR...NEXT loop 
 2522              	**************************************************/
 2523 02d2 00BF     	    _FUNC for
 2524 02d4 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2525 02d8 4FF00107 	    mov INCR,#1
 2526 02dc 00B5FFF7 	    _CALL next_token
 2526      FEFF5DF8 
 2526      04EB
 2527 02e6 0428     	    cmp r0,#TK_VAR
 2528 02e8 7FF4FEAF 	    bne syntax_error
 2529 02ec 02B4     	    push {r1} 
 2530 02ee 00B500F0 	    _CALL let_var 
 2530      A9F85DF8 
 2530      04EB
 2531 02f8 20BC     	    pop {VADR}
 2532 02fa 4FEA8505 	    lsl VADR,#2
 2533 02fe 2544     	    add VADR,UPP 
 2534 0300 05F16005 	    add VADR,#VARS 
 2535 0304 7047     	    _RET 
 2536              	
 2537              	/***************************************
 2538              	  BASIC: TO expr 
ARM GAS  tinyBasic.s 			page 71


 2539              	  set limit of FOR...NEXT loop 
 2540              	**************************************/
 2541 0306 00BF     	    _FUNC to
 2542 0308 00B5FFF7 	    _CALL expression 
 2542      FEFF5DF8 
 2542      04EB
 2543 0312 0E28     	    cmp r0,#TK_INTGR
 2544 0314 7FF4FEAF 	    bne syntax_error 
 2545 0318 0E46     	    mov LIMIT,r1
 2546              	    // save loop back parameters 
 2547 031a 6068     	    ldr r0,[UPP,#COUNT]
 2548 031c 2CE9010C 	    stmdb r12!,{r0,IN,BPTR}
 2549 0320 7047     	    _RET 
 2550              	
 2551              	/********************************************
 2552              	  BASIC: STEP expr 
 2553              	  set increment for FOR...NEXT loop 
 2554              	********************************************/
 2555 0322 00BF     	    _FUNC step
 2556 0324 00B5FFF7 	    _CALL expression 
 2556      FEFF5DF8 
 2556      04EB
 2557 032e 0E28     	    cmp r0,#TK_INTGR
 2558 0330 7FF4FEAF 	    bne syntax_error 
 2559 0334 0F46     	    mov INCR,r1
 2560              	    // replace parameters left by TO
 2561 0336 6068     	    ldr r0,[UPP,#COUNT]
 2562 0338 8CE8010C 	    stmia r12, {r0,IN,BPTR}
 2563 033c 7047     	    _RET 
 2564              	
 2565              	/********************************************
 2566              	  BASIC: NEXT var 
 2567              	  incrment FOR...NEXT loop variable
 2568              	  exit if variable cross LIMIT 
 2569              	********************************************/
 2570 033e 00BF     	    _FUNC next
 2571 0340 00B5FFF7 	    _CALL next_token 
 2571      FEFF5DF8 
 2571      04EB
 2572 034a 0428     	    cmp r0,#TK_VAR 
 2573 034c 7FF4FEAF 	    bne syntax_error 
 2574 0350 4FEA8101 	    lsl r1,#2 
 2575 0354 2144     	    add r1,UPP 
 2576 0356 01F16001 	    add r1,#VARS 
 2577 035a A942     	    cmp r1,VADR
 2578 035c 7FF4FEAF 	    bne syntax_error 
 2579 0360 2868     	    ldr r0,[VADR]
 2580 0362 3844     	    add r0,INCR 
 2581 0364 2860     	    str r0,[VADR]
 2582 0366 002F     	    cmp INCR,#0
 2583 0368 02D4     	    bmi 2f
 2584 036a B042     	    cmp r0,LIMIT 
 2585 036c 02DC     	    bgt 8f  
 2586 036e 07E0     	    b 9f  
 2587 0370 B042     	2:  cmp r0,LIMIT 
 2588 0372 05DA     	    bge 9f  
 2589              	8: // exit for...next
ARM GAS  tinyBasic.s 			page 72


 2590              	  //  drop branch parameters
 2591 0374 4FF00C00 	    _DROP 3
 2591      8444
 2592              	  // restore outer loop parameters
 2593 037a BCE8E000 	    ldmia r12!,{VADR,LIMIT,INCR}
 2594 037e 7047     	    _RET 
 2595 0380 9CE8010C 	9:  ldmia r12,{r0,IN,BPTR}
 2596 0384 6060     	    str r0,[UPP,#COUNT]
 2597 0386 7047     	    _RET 
 2598              	
 2599              	/*********************************
 2600              	  BASIC: GOSUB expr 
 2601              	  call a subroutine at line# 
 2602              	*********************************/
 2603              	    _FUNC gosub
 2604 0388 00B5FFF7 	    _CALL expression
 2604      FEFF5DF8 
 2604      04EB
 2605 0392 0E28     	    cmp r0,#TK_INTGR 
 2606 0394 7FF4FEAF 	    bne syntax_error 
 2607 0398 0846     	    mov r0,r1 
 2608 039a 00B5FFF7 	    _CALL search_lineno  
 2608      FEFF5DF8 
 2608      04EB
 2609 03a4 19B1     	    cbz r1,1f 
 2610 03a6 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 2611 03aa FFF7FEBF 	    b tb_error 
 2612 03ae 6168     	1:  ldr r1,[UPP,#COUNT]
 2613 03b0 2CE9020C 	    stmdb r12!,{r1,IN,BPTR}
 2614 03b4 8346     	    mov BPTR,r0 
 2615 03b6 4FF0030A 	    mov IN,#3 
 2616 03ba 9BF80200 	    ldrb r0,[BPTR,#2]
 2617 03be 6060     	    str r0,[UPP,#COUNT]
 2618 03c0 7047     	    _RET 
 2619              	
 2620              	/**********************************
 2621              	  BASIC: RETURN 
 2622              	  leave a subroutine 
 2623              	*********************************/
 2624 03c2 00BF     	    _FUNC return 
 2625 03c4 BCE8010C 	    ldmia r12!,{r0,IN,BPTR}
 2626 03c8 6060     	    str r0,[UPP,#COUNT]
 2627 03ca 7047     	    _RET 
 2628              	
 2629              	/**********************************
 2630              	  BASIC: GOTO expr 
 2631              	  go to line # 
 2632              	  use:
 2633              	
 2634              	**********************************/
 2635              	    _FUNC goto
 2636 03cc 00B5FFF7 	    _CALL expression 
 2636      FEFF5DF8 
 2636      04EB
 2637 03d6 0E28     	    cmp r0,#TK_INTGR 
 2638 03d8 7FF4FEAF 	    bne syntax_error 
 2639 03dc 59B1     	    cbz r1,9f 
ARM GAS  tinyBasic.s 			page 73


 2640 03de 0846     	1:  mov r0,r1 
 2641 03e0 00B5FFF7 	    _CALL search_lineno 
 2641      FEFF5DF8 
 2641      04EB
 2642 03ea 19B1     	    cbz r1,2f 
 2643 03ec 4FF00500 	    mov r0,#ERR_NO_LINE 
 2644 03f0 FFF7FEBF 	    b tb_error 
 2645 03f4 8346     	2:  mov BPTR,r0 
 2646 03f6 4FF0030A 	9:  mov IN,#3 
 2647 03fa 7047     	    _RET 
 2648              	
 2649              	    _FUNC gpio
 2650 03fc 7047     	    _RET  
 2651              	
 2652 03fe 00BF     	    _FUNC hex_base
 2653 0400 7047     	    _RET 
 2654              	
 2655 0402 00BF     	    _FUNC const_idr
 2656 0404 7047     	    _RET 
 2657              	
 2658              	/**********************************************
 2659              	  BASIC: IF relation : statement
 2660              	  execute statement only if relation is true
 2661              	*********************************************/
 2662 0406 00BF     	    _FUNC if
 2663 0408 00B5FFF7 	    _CALL relation 
 2663      FEFF5DF8 
 2663      04EB
 2664 0412 09B9     	    cbnz r1,9f 
 2665 0414 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2666 0418 7047     	9:  _RET 
 2667              	
 2668 041a 00BF     	    _FUNC input_var
 2669 041c 7047     	    _RET 
 2670              	
 2671 041e 00BF     	    _FUNC invert
 2672 0420 7047     	    _RET 
 2673              	
 2674 0422 00BF     	    _FUNC enable_iwdg
 2675 0424 7047     	    _RET 
 2676              	
 2677 0426 00BF     	    _FUNC refresh_iwdg
 2678 0428 7047     	    _RET 
 2679              	
 2680 042a 00BF     	    _FUNC key
 2681 042c 7047     	    _RET  
 2682              	
 2683              	/******************************
 2684              	  BASIC: [let] var=expr 
 2685              	         [let] @(expr)=expr
 2686              	  input:
 2687              	    none 
 2688              	  output:
 2689              	    none 
 2690              	  use:
 2691              	
 2692              	****************************/         
ARM GAS  tinyBasic.s 			page 74


 2693 042e 00BF     	    _FUNC let
 2694 0430 00B5FFF7 	    _CALL next_token 
 2694      FEFF5DF8 
 2694      04EB
 2695 043a 0428     	    cmp r0,#TK_VAR
 2696 043c 03D0     	    beq let_var 
 2697 043e 0528     	    cmp r0,#TK_ARRAY 
 2698 0440 07D0     	    beq let_array 
 2699 0442 FFF7FEBF 	    b syntax_error 
 2700              	let_var:
 2701 0446 4FEA8101 	    lsl r1,#2
 2702 044a 04F16000 	    add r0,UPP,#VARS
 2703 044e 0844     	    add r0,r1
 2704 0450 1FE0     	    b 1f 
 2705              	let_array: 
 2706 0452 4FF00600 	    mov r0,#TK_LPAREN
 2707 0456 00B5FFF7 	    _CALL expect 
 2707      FEFF5DF8 
 2707      04EB
 2708 0460 00B5FFF7 	    _CALL expression
 2708      FEFF5DF8 
 2708      04EB
 2709 046a 0E28     	    cmp r0,#TK_INTGR 
 2710 046c 7FF4FEAF 	    bne syntax_error
 2711 0470 4CF8041D 	    _PUSH r1 
 2712 0474 4FF00700 	    mov r0,#TK_RPAREN
 2713 0478 00B5FFF7 	    _CALL expect 
 2713      FEFF5DF8 
 2713      04EB
 2714 0482 5CF8041B 	    _POP r1 
 2715 0486 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 2716 048a 4FEA8101 	    lsl r1,#2 
 2717 048e A0EB0100 	    sub r0,r1 
 2718 0492 4CF8040D 	1:  _PUSH r0 
 2719 0496 4FF03200 	    mov r0,#TK_EQUAL 
 2720 049a 00B5FFF7 	    _CALL expect 
 2720      FEFF5DF8 
 2720      04EB
 2721 04a4 00B5FFF7 	    _CALL expression   
 2721      FEFF5DF8 
 2721      04EB
 2722 04ae 0E28     	    cmp r0,#TK_INTGR
 2723 04b0 7FF4FEAF 	    bne syntax_error   
 2724 04b4 5CF8040B 	2:  _POP r0 
 2725 04b8 0160     	    str r1,[r0]
 2726 04ba 7047     	    _RET  
 2727              	
 2728              	/***************************************
 2729              	  BASIC: LIST [[first,]last]
 2730              	  use:
 2731              	    T1 
 2732              	**************************************/  
 2733              	    _FUNC list
 2734 04bc 206C10F0 	    _CLO
 2734      010F03D0 
 2734      4FF00700 
 2734      FFF7FEBF 
ARM GAS  tinyBasic.s 			page 75


 2735 04cc 4DF8048D 	    push {T1} 
 2736              	//  _CALL arg_list 
 2737 04d0 D4F830B0 	    ldr BPTR,[UPP,#TXTBGN]
 2738 04d4 D4F83480 	    ldr T1,[UPP,#TXTEND]
 2739 04d8 C345     	1:  cmp BPTR,T1 
 2740 04da 09D5     	    bpl 9f
 2741 04dc 5846     	    mov r0,BPTR  
 2742 04de 00B5FFF7 	    _CALL print_basic_line
 2742      FEFF5DF8 
 2742      04EB
 2743 04e8 9BF80200 	    ldrb r0,[BPTR,#2]
 2744 04ec 8344     	    add BPTR,r0 
 2745 04ee F3E7     	    b 1b
 2746 04f0 FFF7FEBF 	9:  b warm_start 
 2747              	
 2748              	    _FUNC load
 2749 04f4 7047     	    _RET 
 2750              	
 2751 04f6 00BF     	    _FUNC log2
 2752 04f8 7047     	    _RET 
 2753              	
 2754 04fa 00BF     	    _FUNC lshift
 2755 04fc 7047     	    _RET 
 2756              	
 2757 04fe 00BF     	    _FUNC muldiv
 2758 0500 7047     	    _RET 
 2759              	
 2760              	/***********************************
 2761              	  BASIC: NEW 
 2762              	  delete existing program in memory
 2763              	  and clear variables and RAM 
 2764              	***********************************/
 2765 0502 00BF     	    _FUNC new
 2766 0504 206C10F0 	    _CLO 
 2766      010F03D0 
 2766      4FF00700 
 2766      FFF7FEBF 
 2767 0514 00B5FFF7 	    _CALL clear_basic 
 2767      FEFF5DF8 
 2767      04EB
 2768 051e FFF7FEBF 	    b warm_start   
 2769              	
 2770              	/************************************
 2771              	  BASIC: NOT relation  
 2772              	  invert logical value or relation
 2773              	************************************/
 2774 0522 00BF     	      _FUNC func_not
 2775 0524 00B5FFF7 	      _CALL relation 
 2775      FEFF5DF8 
 2775      04EB
 2776 052e 11B1     	      cbz r1,8f 
 2777 0530 81EA0101 	      eor r1,r1
 2778 0534 01E0     	      b 9f 
 2779 0536 4FF0FF31 	  8:  mov r1,#-1
 2780 053a 7047     	  9:  _RET 
 2781              	
 2782              	    _FUNC const_odr
ARM GAS  tinyBasic.s 			page 76


 2783 053c 7047     	    _RET 
 2784              	
 2785              	/******************************************
 2786              	  BASIC: OR(expr1,expr2)
 2787              	  binary OR between 2 expressions
 2788              	******************************************/
 2789 053e 00BF     	    _FUNC bit_or
 2790 0540 00B5FFF7 	    _CALL func_args
 2790      FEFF5DF8 
 2790      04EB
 2791 054a 0228     	    cmp r0,#2
 2792 054c 7FF4FEAF 	    bne syntax_error
 2793 0550 5CF8040B 	    _POP r0 
 2794 0554 5CF8041B 	    _POP r1
 2795 0558 41EA0001 	    orr r1,r0 
 2796 055c 4FF00E00 	    mov r0,#TK_INTGR
 2797 0560 7047     	    _RET 
 2798              	
 2799 0562 00BF     	    _FUNC pad_ref
 2800 0564 7047     	    _RET 
 2801              	
 2802              	/***********************
 2803              	  BASIC: PAUSE expr 
 2804              	  suspend execution for 
 2805              	  expr milliseconds 
 2806              	************************/
 2807 0566 00BF     	    _FUNC pause
 2808 0568 00B5FFF7 	    _CALL expression 
 2808      FEFF5DF8 
 2808      04EB
 2809 0572 0E28     	    cmp r0,#TK_INTGR 
 2810 0574 7FF4FEAF 	    bne syntax_error 
 2811 0578 E069     	    ldr r0,[UPP,#TICKS]
 2812 057a 0844     	    add r0,r1 
 2813 057c E169     	1:  ldr r1,[UPP,#TICKS]
 2814 057e 8842     	    cmp r0,r1 
 2815 0580 FCD1     	    bne 1b     
 2816 0582 7047     	    _RET 
 2817              	
 2818              	    _FUNC pin_mode
 2819 0584 7047     	    _RET 
 2820              	
 2821 0586 00BF     	    _FUNC peek
 2822 0588 7047     	    _RET 
 2823              	
 2824 058a 00BF     	    _FUNC const_input
 2825 058c 7047     	    _RET  
 2826              	
 2827 058e 00BF     	    _FUNC poke
 2828 0590 7047     	    _RET 
 2829              	
 2830 0592 00BF     	    _FUNC const_output
 2831 0594 7047     	    _RET 
 2832              	
 2833              	/****************************
 2834              	  BASIC: PRINT|? arg_list 
 2835              	  print list of arguments 
ARM GAS  tinyBasic.s 			page 77


 2836              	****************************/
 2837 0596 00BF     	    _FUNC print
 2838 0598 4FF0FF38 	0:  mov T1,#-1
 2839 059c 00B5FFF7 	    _CALL expression
 2839      FEFF5DF8 
 2839      04EB
 2840 05a6 0E28     	    cmp r0,#TK_INTGR
 2841 05a8 07D1     	    bne 1f 
 2842 05aa 0846     	    mov r0,r1
 2843 05ac A169     	    ldr r1,[UPP,#BASE]
 2844 05ae 00B5FFF7 	    _CALL print_int
 2844      FEFF5DF8 
 2844      04EB
 2845 05b8 2BE0     	    b 6f 
 2846 05ba 00B5FFF7 	1:  _CALL next_token
 2846      FEFF5DF8 
 2846      04EB
 2847 05c4 0128     	    cmp r0,#TK_COLON 
 2848 05c6 04DC     	    bgt 2f
 2849 05c8 D4F800A0 	    _UNGET_TOKEN 
 2849      D4F808B0 
 2850 05d0 2CE0     	    b print_exit
 2851 05d2 88EA0808 	2:  eor T1, T1 
 2852 05d6 0228     	    cmp r0,#TK_QSTR 
 2853 05d8 06D1     	    bne 4f
 2854 05da 0846     	    mov r0,r1 
 2855 05dc 00B5FFF7 	    _CALL uart_puts  
 2855      FEFF5DF8 
 2855      04EB
 2856 05e6 14E0     	    b 6f 
 2857 05e8 0328     	4:  cmp r0,#TK_CHAR 
 2858 05ea 06D1     	    bne 5f 
 2859 05ec 0846     	    mov r0,r1 
 2860 05ee 00B5FFF7 	    _CALL uart_putc 
 2860      FEFF5DF8 
 2860      04EB
 2861 05f8 0BE0     	    b 6f 
 2862 05fa 0928     	5:  cmp r0,#TK_SHARP
 2863 05fc 7FF4FEAF 	    bne syntax_error 
 2864 0600 00B5FFF7 	    _CALL next_token 
 2864      FEFF5DF8 
 2864      04EB
 2865 060a 0E28     	    cmp r0,#TK_INTGR 
 2866 060c 7FF4FEAF 	    bne syntax_error 
 2867 0610 6164     	    str r1,[UPP,#TAB_WIDTH]
 2868 0612 88EA0808 	6:  eor T1,T1 
 2869 0616 00B5FFF7 	    _CALL next_token 
 2869      FEFF5DF8 
 2869      04EB
 2870 0620 0828     	    cmp r0,#TK_COMMA 
 2871 0622 B9D0     	    beq 0b
 2872 0624 D4F800A0 	    _UNGET_TOKEN 
 2872      D4F808B0 
 2873              	print_exit:
 2874 062c 18EA0808 	      ands T1,T1 
 2875 0630 06D1     	      bne 9f
 2876 0632 4FF00D00 	      mov r0,#CR 
ARM GAS  tinyBasic.s 			page 78


 2877 0636 00B5FFF7 	      _CALL uart_putc 
 2877      FEFF5DF8 
 2877      04EB
 2878 0640 7047     	  9:  _RET 
 2879              	
 2880 0642 00BF     	    _FUNC const_porta
 2881 0644 7047     	    _RET 
 2882              	
 2883 0646 00BF     	    _FUNC const_portb
 2884 0648 7047     	    _RET 
 2885              	
 2886 064a 00BF     	    _FUNC const_portc
 2887 064c 7047     	    _RET 
 2888              	
 2889 064e 00BF     	    _FUNC const_portd
 2890 0650 7047     	    _RET 
 2891              	
 2892 0652 00BF     	    _FUNC const_porte
 2893 0654 7047     	    _RET  
 2894              	
 2895 0656 00BF     	    _FUNC const_portf
 2896 0658 7047     	    _RET 
 2897              	
 2898 065a 00BF     	    _FUNC const_portg
 2899 065c 7047     	    _RET 
 2900              	
 2901 065e 00BF     	    _FUNC const_porth
 2902 0660 7047     	    _RET 
 2903              	
 2904 0662 00BF     	    _FUNC const_porti
 2905 0664 7047     	    _RET 
 2906              	
 2907 0666 00BF     	    _FUNC qkey
 2908 0668 7047     	    _RET 
 2909              	
 2910              	/******************************************
 2911              	  BASIC RANDOM(expr)
 2912              	  generate random number between 0..expr-1
 2913              	******************************************/
 2914 066a 00BF     	    _FUNC random
 2915 066c 00B5FFF7 	    _CALL func_args 
 2915      FEFF5DF8 
 2915      04EB
 2916 0676 0128     	    cmp r0,#1
 2917 0678 7FF4FEAF 	    bne syntax_error 
 2918 067c 606A     	    ldr r0,[UPP,#SEED]
 2919 067e 4FEA4031 	    lsl r1,r0,#13
 2920 0682 81EA0001 	    eor r1,r0
 2921 0686 4FEA5140 	    lsr r0,r1,#17
 2922 068a 81EA0001 	    eor r1,r0
 2923 068e 4FEA4110 	    lsl r0,r1,#5
 2924 0692 81EA0001 	    eor r1,r0
 2925 0696 6162     	    str r1,[UPP,#SEED]
 2926 0698 5CF8040B 	    _POP r0 
 2927 069c B1FBF0F2 	    udiv r2,r1,r0  
 2928 06a0 00FB02F2 	    mul r2,r0 
 2929 06a4 A1EB0201 	    sub r1,r2 
ARM GAS  tinyBasic.s 			page 79


 2930 06a8 4FF00E00 	    mov r0,#TK_INTGR
 2931 06ac 7047     	    _RET 
 2932              	
 2933 06ae 00BF     	    _FUNC rshift
 2934 06b0 7047     	    _RET 
 2935              	
 2936              	/****************************
 2937              	  BASIC: RUN 
 2938              	  execute program in memory
 2939              	****************************/
 2940 06b2 00BF     	    _FUNC run
 2941 06b4 206C10F0 	    _CLO 
 2941      010F03D0 
 2941      4FF00700 
 2941      FFF7FEBF 
 2942 06c4 206B     	    ldr r0,[UPP,#TXTBGN]
 2943 06c6 616B     	    ldr r1,[UPP,#TXTEND]
 2944 06c8 8842     	    cmp r0,r1
 2945 06ca 0DD0     	    beq 9f 
 2946 06cc 8178     	    ldrb r1,[r0,#2]
 2947 06ce 6160     	    str r1,[UPP,#COUNT]
 2948 06d0 8346     	    mov BPTR,r0 
 2949 06d2 4FF0030A 	    mov IN,#3
 2950              	    // reset dataline pointers 
 2951 06d6 80EA0000 	    eor r0,r0 
 2952 06da E060     	    str r0,[UPP,#DATAPTR]
 2953 06dc 2061     	    str r0,[UPP,#DATA]
 2954 06de 6061     	    str r0,[UPP,#DATALEN] 
 2955 06e0 206C     	    ldr r0,[UPP,#FLAGS]
 2956 06e2 40F00100 	    orr r0,#FRUN 
 2957 06e6 2064     	    str r0,[UPP,#FLAGS]
 2958 06e8 7047     	9:  _RET 
 2959              	
 2960 06ea 00BF     	    _FUNC save
 2961 06ec 7047     	    _RET 
 2962              	
 2963 06ee 00BF     	    _FUNC show
 2964 06f0 7047     	    _RET 
 2965              	
 2966 06f2 00BF     	    _FUNC size
 2967 06f4 7047     	    _RET  
 2968              	
 2969 06f6 00BF     	    _FUNC sleep
 2970 06f8 7047     	    _RET 
 2971              	
 2972 06fa 00BF     	    _FUNC spi_read
 2973 06fc 7047     	    _RET 
 2974              	
 2975 06fe 00BF     	    _FUNC spi_enable
 2976 0700 7047     	    _RET 
 2977              	
 2978 0702 00BF     	    _FUNC spi_select
 2979 0704 7047     	    _RET 
 2980              	
 2981 0706 00BF     	    _FUNC spi_write
 2982 0708 7047     	    _RET 
 2983              	
ARM GAS  tinyBasic.s 			page 80


 2984 070a 00BF     	    _FUNC stop
 2985 070c 7047     	    _RET 
 2986              	
 2987              	/**************************
 2988              	  BASIC: TICKS 
 2989              	  return msec counter
 2990              	**************************/  
 2991 070e 00BF     	    _FUNC get_ticks
 2992 0710 E169     	    ldr r1,[UPP,#TICKS]
 2993 0712 4FF00E00 	    mov r0,#TK_INTGR
 2994 0716 7047     	    _RET  
 2995              	
 2996              	/*************************
 2997              	  BASIC: TIMER expr 
 2998              	  set countdown timer 
 2999              	************************/
 3000              	    _FUNC set_timer
 3001 0718 00B5FFF7 	    _CALL expression 
 3001      FEFF5DF8 
 3001      04EB
 3002 0722 0E28     	    cmp r0,#TK_INTGR
 3003 0724 7FF4FEAF 	    bne syntax_error 
 3004 0728 2162     	    str r1,[UPP,#TIMER]
 3005 072a 7047     	    _RET 
 3006              	
 3007              	/***************************
 3008              	  BASIC: TIMEOUT
 3009              	  check for timer expiration 
 3010              	  return -1 true || 0 false
 3011              	****************************/
 3012              	    _FUNC timeout
 3013 072c 81EA0101 	    eor r1,r1 
 3014 0730 206A     	    ldr r0,[UPP,#TIMER]
 3015 0732 08B9     	    cbnz r0,9f 
 3016 0734 6FEA0101 	    mvn r1,r1 
 3017 0738 4FF00E00 	9:  mov r0,#TK_INTGR    
 3018 073c 7047     	    _RET 
 3019              	
 3020 073e 00BF     	    _FUNC tone
 3021 0740 7047     	    _RET 
 3022              	
 3023              	/***************************
 3024              	  BASIC: UBOUND 
 3025              	  return last indice of @
 3026              	  output:
 3027              	    r0  TK_INTGR 
 3028              	    r1  +int 
 3029              	**************************/
 3030 0742 00BF     	    _FUNC ubound
 3031 0744 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3032 0748 606B     	    ldr r0,[UPP,#TXTEND]
 3033 074a A1EB0001 	    sub r1,r0 
 3034 074e 4FEA9101 	    lsr r1,#2
 3035 0752 4FF00E00 	    mov r0,#TK_INTGR 
 3036 0756 7047     	    _RET 
 3037              	
 3038              	    _FUNC uflash
ARM GAS  tinyBasic.s 			page 81


 3039 0758 7047     	    _RET 
 3040              	
 3041 075a 00BF     	    _FUNC until
 3042 075c 7047     	    _RET 
 3043              	
 3044 075e 00BF     	    _FUNC usr
 3045 0760 7047     	    _RET  
 3046              	
 3047 0762 00BF     	    _FUNC wait
 3048 0764 7047     	    _RET 
 3049              	
 3050              	/*********************************************
 3051              	  BASIC: WORDS 
 3052              	  print list of BASIC WORDS in dictionary 
 3053              	  use:
 3054              	    r0,r1,T1,T2  
 3055              	********************************************/
 3056 0766 00BF     	    _FUNC words
 3057 0768 206C10F0 	    _CLO 
 3057      010F03D0 
 3057      4FF00700 
 3057      FFF7FEBF 
 3058 0778 DFF88480 	    ldr T1,=kword_dict
 3059 077c 89EA0909 	    eor T2,T2 
 3060              	1:  
 3061 0780 4046     	    mov r0,T1
 3062 0782 00B5FFF7 	    _CALL strlen
 3062      FEFF5DF8 
 3062      04EB
 3063 078c F0B1     	    cbz r0,9f 
 3064 078e 8144     	    add T2,r0 
 3065 0790 B9F1500F 	    cmp T2,#80 
 3066 0794 08D4     	    bmi 2f
 3067 0796 89EA0909 	    eor T2,T2  
 3068 079a 4FF00D00 	    mov r0,#CR 
 3069 079e 00B5FFF7 	    _CALL uart_putc 
 3069      FEFF5DF8 
 3069      04EB
 3070 07a8 4046     	2:  mov r0,T1 
 3071 07aa 00B5FFF7 	    _CALL uart_puts 
 3071      FEFF5DF8 
 3071      04EB
 3072 07b4 4FF02000 	    mov r0,#SPACE
 3073 07b8 09F10109 	    add T2,#1  
 3074 07bc 00B5FFF7 	    _CALL uart_putc 
 3074      FEFF5DF8 
 3074      04EB
 3075 07c6 58F80C8C 	    ldr T1,[T1,#-12]
 3076 07ca D9E7     	    b 1b 
 3077 07cc 7047     	9:  _RET 
 3078              	
 3079 07ce 00BF     	    _FUNC write
 3080 07d0 7047     	    _RET 
 3081              	
 3082              	/**************************************
 3083              	  BASIC: XOR(expr1,expr2)
 3084              	  binary exclusive or between 2 expressions
ARM GAS  tinyBasic.s 			page 82


 3085              	**************************************/
 3086 07d2 00BF     	    _FUNC bit_xor
 3087 07d4 00B5FFF7 	    _CALL func_args
 3087      FEFF5DF8 
 3087      04EB
 3088 07de 0228     	    cmp r0,#2
 3089 07e0 7FF4FEAF 	    bne syntax_error
 3090 07e4 5CF8040B 	    _POP r0
 3091 07e8 5CF8041B 	    _POP r1 
 3092 07ec 81EA0001 	    eor r1,r0 
 3093 07f0 4FF00E00 	    mov r0,#TK_INTGR
 3094 07f4 7047     	    _RET 
 3095              	
 3096 07f6 00BF     	    _FUNC transmit
 3097 07f8 7047     	    _RET 
 3098              	
 3099 07fa 00BF     	    _FUNC receive
 3100 07fc 7047     	    _RET  
 3101              	
 3102              	
 3103              	/*************************************************
 3104              	   extra FLASH memory not used by Tiny BASIC
 3105              	   is used to save BASIC programs.
 3106              	************************************************/
 3107 07fe 00BF     	  .p2align 10  // align to 1KB, smallest erasable segment 
 3108              	  .section .fs
 3109              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 83


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 84


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 85


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 86


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  tinyBasic.s 			page 87


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
ARM GAS  tinyBasic.s 			page 88


       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
ARM GAS  tinyBasic.s 			page 89


       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
       cmd_index.inc:127    *ABS*:0000000000000066 DUMP_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:251    .text:0000000000000150 search_lineno
         tinyBasic.s:282    .text:0000000000000170 delete_line
         tinyBasic.s:307    .text:000000000000019c create_gap
         tinyBasic.s:332    .text:00000000000001c4 insert_line
         tinyBasic.s:371    .text:0000000000000214 compile
         tinyBasic.s:1431   .text:0000000000000b50 pad
         tinyBasic.s:612    .text:0000000000000440 parse_int
         tinyBasic.s:1100   .text:0000000000000830 tb_error
         tinyBasic.s:442    .text:00000000000002a8 comp_token
         tinyBasic.s:516    .text:0000000000000394 store_r0
         tinyBasic.s:728    .text:0000000000000518 skip
         tinyBasic.s:747    .text:0000000000000530 upper
         tinyBasic.s:550    .text:00000000000003d4 is_special
         tinyBasic.s:572    .text:0000000000000418 token_ofs
         tinyBasic.s:457    .text:00000000000002e8 tok_idx0
         tinyBasic.s:519    .text:000000000000039a try_number
         tinyBasic.s:461    .text:00000000000002ea single
         tinyBasic.s:567    .text:0000000000000408 tok_single
         tinyBasic.s:465    .text:00000000000002f2 lt
         tinyBasic.s:471    .text:0000000000000300 gt
         tinyBasic.s:484    .text:0000000000000324 bkslash
         tinyBasic.s:533    .text:00000000000003ce token_exit
ARM GAS  tinyBasic.s 			page 90


         tinyBasic.s:491    .text:000000000000033a prt_cmd
         tinyBasic.s:497    .text:000000000000034c quote
         tinyBasic.s:667    .text:00000000000004b0 parse_quote
         tinyBasic.s:502    .text:0000000000000360 tick
         tinyBasic.s:899    .text:00000000000005e4 parse_keyword
         tinyBasic.s:564    .text:00000000000003f4 char_list
         tinyBasic.s:565    .text:00000000000003f4 $d
         tinyBasic.s:573    .text:0000000000000418 $d
         tinyBasic.s:589    .text:000000000000043e $t
         tinyBasic.s:698    .text:00000000000004e4 get_escaped_char
         tinyBasic.s:715    .text:000000000000050e escaped
         tinyBasic.s:715    .text:000000000000050e $d
         tinyBasic.s:728    .text:0000000000000516 $t
         tinyBasic.s:765    .text:0000000000000540 is_digit
         tinyBasic.s:789    .text:000000000000055c is_hex
         tinyBasic.s:814    .text:0000000000000580 is_bit
         tinyBasic.s:835    .text:000000000000059c is_alpha
         tinyBasic.s:856    .text:00000000000005b4 is_num
         tinyBasic.s:877    .text:00000000000005cc is_alnum
         tinyBasic.s:1085   .text:0000000000000828 syntax_error
         tinyBasic.s:2129   .rodata.dictionary:00000000000007a0 kword_dict
         tinyBasic.s:1248   .text:000000000000099c search_dict
         tinyBasic.s:950    .text:000000000000066c cmd_name
         tinyBasic.s:972    .text:0000000000000690 print_basic_line
         tinyBasic.s:982    .text:00000000000006b6 token_loop
         tinyBasic.s:1524   .text:0000000000000bf4 next_token
         tinyBasic.s:1061   .text:00000000000007f1 single_char
         tinyBasic.s:1057   .text:00000000000007e8 ge_str
         tinyBasic.s:1058   .text:00000000000007eb le_str
         tinyBasic.s:1059   .text:00000000000007ee ne_str
         tinyBasic.s:1057   .text:00000000000007e8 $d
         tinyBasic.s:1085   .text:0000000000000828 $t
         tinyBasic.s:1130   .text:00000000000008c0 compile_error
         tinyBasic.s:1104   .text:0000000000000838 rt_error
         tinyBasic.s:1147   .text:0000000000000918 rt_error_msg
         tinyBasic.s:1150   .text:0000000000000928 err_msg
         tinyBasic.s:1444   .text:0000000000000b60 warm_start
         tinyBasic.s:1148   .text:0000000000000918 $d
         tinyBasic.s:1157   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1158   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1159   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1160   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1161   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1162   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1163   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1164   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1165   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1166   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1167   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1168   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1169   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1170   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1171   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1173   .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:1174   .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:1175   .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:1185   .text:0000000000000968 $t
ARM GAS  tinyBasic.s 			page 91


         tinyBasic.s:1185   .text:0000000000000968 skip_line
         tinyBasic.s:1202   .text:0000000000000970 BTGL
         tinyBasic.s:1220   .text:0000000000000974 kword_cmp
         tinyBasic.s:1286   .text:00000000000009da cold_start
         tinyBasic.s:1307   .text:0000000000000a28 src_addr
         tinyBasic.s:1309   .text:0000000000000a2c dest_addr
         tinyBasic.s:1430   .text:0000000000000b4c tib
         tinyBasic.s:1311   .text:0000000000000a30 sysvar_size
         tinyBasic.s:1322   .text:0000000000000a34 prt_version
         tinyBasic.s:1379   .text:0000000000000adc clear_basic
         tinyBasic.s:1308   .text:0000000000000a28 $d
         tinyBasic.s:1989   .rodata:0000000000000000 uzero
         tinyBasic.s:2013   .rodata:00000000000000cc ulast
         tinyBasic.s:1322   .text:0000000000000a34 $t
         tinyBasic.s:1346   .text:0000000000000a9c version_msg
         tinyBasic.s:1348   .text:0000000000000abc version
         tinyBasic.s:1347   .text:0000000000000a9c $d
         tinyBasic.s:1363   .text:0000000000000ac0 clear_vars
         tinyBasic.s:1413   .text:0000000000000b20 warm_init
         tinyBasic.s:1429   .text:0000000000000b48 dstack
         tinyBasic.s:1428   .text:0000000000000b44 mstack
         tinyBasic.s:1428   .text:0000000000000b44 $d
         tinyBasic.s:1432   .text:0000000000000b54 array
         tinyBasic.s:1433   .text:0000000000000b58 ready
         tinyBasic.s:1464   .text:0000000000000b78 cmd_line
         tinyBasic.s:1475   .text:0000000000000ba8 interpreter
         tinyBasic.s:1508   .text:0000000000000be8 execute
         tinyBasic.s:2700   .text.basic:0000000000000446 let_var
         tinyBasic.s:2705   .text.basic:0000000000000452 let_array
         tinyBasic.s:2137   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1530   .text:0000000000000c02 new_line
         tinyBasic.s:1534   .text:0000000000000c0a end_of_line
         tinyBasic.s:1581   .text:0000000000000c80 tok_jmp
         tinyBasic.s:1582   .text:0000000000000c80 $d
         tinyBasic.s:1596   .text:0000000000000cc0 $t
         tinyBasic.s:1611   .text:0000000000000cc0 expect
         tinyBasic.s:1630   .text:0000000000000cdc func_args
         tinyBasic.s:1650   .text:0000000000000d08 arg_list
         tinyBasic.s:1810   .text:0000000000000eac expression
         tinyBasic.s:1684   .text:0000000000000d48 factor
         tinyBasic.s:1918   .text:0000000000000f98 get_array_element
         tinyBasic.s:1956   .text:0000000000000fc0 get_var
         tinyBasic.s:1759   .text:0000000000000e30 term
         tinyBasic.s:1852   .text:0000000000000f14 relation
         tinyBasic.s:1899   .text:0000000000000f8e relop_jmp
         tinyBasic.s:1871   .text:0000000000000f5e rel_idx0
         tinyBasic.s:1872   .text:0000000000000f5e rel_eq
         tinyBasic.s:1889   .text:0000000000000f74 rel_false
         tinyBasic.s:1875   .text:0000000000000f62 rel_lt
         tinyBasic.s:1878   .text:0000000000000f66 rel_le
         tinyBasic.s:1881   .text:0000000000000f6a rel_gt
         tinyBasic.s:1884   .text:0000000000000f6e rel_ge
         tinyBasic.s:1887   .text:0000000000000f72 rel_diff
         tinyBasic.s:1900   .text:0000000000000f8e $d
         tinyBasic.s:1938   .text:0000000000000fac set_array_element
         tinyBasic.s:1974   .text:0000000000000fd0 set_var
         tinyBasic.s:3109   .fs:0000000000000000 FILE_SYSTEM
ARM GAS  tinyBasic.s 			page 92


         tinyBasic.s:2010   .rodata:0000000000000050 $d
         tinyBasic.s:2020   *ABS*:0000000000000000 link
         tinyBasic.s:2021   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2130   .rodata.dictionary:00000000000007a0 LINK
         tinyBasic.s:2022   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2125   .rodata.dictionary:0000000000000794 first_link
         tinyBasic.s:2171   .text.basic:0000000000000000 abs
         tinyBasic.s:2183   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2186   .text.basic:000000000000002c analog_read
         tinyBasic.s:2193   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2208   .text.basic:0000000000000054 ascii
         tinyBasic.s:2225   .text.basic:0000000000000098 autorun
         tinyBasic.s:2228   .text.basic:000000000000009c awu
         tinyBasic.s:2231   .text.basic:00000000000000a0 bitmask
         tinyBasic.s:2246   .text.basic:00000000000000a4 bit_reset
         tinyBasic.s:2271   .text.basic:00000000000000d0 bit_set
         tinyBasic.s:2311   .text.basic:0000000000000120 bit_test
         tinyBasic.s:2295   .text.basic:00000000000000f8 bit_toggle
         tinyBasic.s:2330   .text.basic:0000000000000160 bye
         tinyBasic.s:2333   .text.basic:0000000000000164 char
         tinyBasic.s:2336   .text.basic:0000000000000168 const_cr2
         tinyBasic.s:2339   .text.basic:000000000000016c const_cr1
         tinyBasic.s:2352   .text.basic:0000000000000170 data_line
         tinyBasic.s:2453   .text.basic:0000000000000268 const_ddr
         tinyBasic.s:2456   .text.basic:000000000000026c dec_base
         tinyBasic.s:2459   .text.basic:0000000000000270 directory
         tinyBasic.s:2462   .text.basic:0000000000000274 do_loop
         tinyBasic.s:2465   .text.basic:0000000000000278 digital_read
         tinyBasic.s:2468   .text.basic:000000000000027c digital_write
         tinyBasic.s:2506   .text.basic:00000000000002c0 cmd_end
         tinyBasic.s:2510   .text.basic:00000000000002c8 const_eeprom_base
         tinyBasic.s:2513   .text.basic:00000000000002cc fcpu
         tinyBasic.s:2523   .text.basic:00000000000002d4 for
         tinyBasic.s:2516   .text.basic:00000000000002d0 forget
         tinyBasic.s:2603   .text.basic:0000000000000388 gosub
         tinyBasic.s:2635   .text.basic:00000000000003cc goto
         tinyBasic.s:2649   .text.basic:00000000000003fc gpio
         tinyBasic.s:2652   .text.basic:0000000000000400 hex_base
         tinyBasic.s:2655   .text.basic:0000000000000404 const_idr
         tinyBasic.s:2662   .text.basic:0000000000000408 if
         tinyBasic.s:2668   .text.basic:000000000000041c input_var
         tinyBasic.s:2671   .text.basic:0000000000000420 invert
         tinyBasic.s:2674   .text.basic:0000000000000424 enable_iwdg
         tinyBasic.s:2677   .text.basic:0000000000000428 refresh_iwdg
         tinyBasic.s:2680   .text.basic:000000000000042c key
         tinyBasic.s:2693   .text.basic:0000000000000430 let
         tinyBasic.s:2733   .text.basic:00000000000004bc list
         tinyBasic.s:2748   .text.basic:00000000000004f4 load
         tinyBasic.s:2751   .text.basic:00000000000004f8 log2
         tinyBasic.s:2754   .text.basic:00000000000004fc lshift
         tinyBasic.s:2757   .text.basic:0000000000000500 muldiv
         tinyBasic.s:2570   .text.basic:0000000000000340 next
         tinyBasic.s:2765   .text.basic:0000000000000504 new
         tinyBasic.s:2774   .text.basic:0000000000000524 func_not
         tinyBasic.s:2782   .text.basic:000000000000053c const_odr
         tinyBasic.s:2789   .text.basic:0000000000000540 bit_or
         tinyBasic.s:2799   .text.basic:0000000000000564 pad_ref
ARM GAS  tinyBasic.s 			page 93


         tinyBasic.s:2807   .text.basic:0000000000000568 pause
         tinyBasic.s:2818   .text.basic:0000000000000584 pin_mode
         tinyBasic.s:2821   .text.basic:0000000000000588 peek
         tinyBasic.s:2824   .text.basic:000000000000058c const_input
         tinyBasic.s:2827   .text.basic:0000000000000590 poke
         tinyBasic.s:2830   .text.basic:0000000000000594 const_output
         tinyBasic.s:2837   .text.basic:0000000000000598 print
         tinyBasic.s:2880   .text.basic:0000000000000644 const_porta
         tinyBasic.s:2883   .text.basic:0000000000000648 const_portb
         tinyBasic.s:2886   .text.basic:000000000000064c const_portc
         tinyBasic.s:2889   .text.basic:0000000000000650 const_portd
         tinyBasic.s:2892   .text.basic:0000000000000654 const_porte
         tinyBasic.s:2895   .text.basic:0000000000000658 const_portf
         tinyBasic.s:2898   .text.basic:000000000000065c const_portg
         tinyBasic.s:2901   .text.basic:0000000000000660 const_porth
         tinyBasic.s:2904   .text.basic:0000000000000664 const_porti
         tinyBasic.s:2907   .text.basic:0000000000000668 qkey
         tinyBasic.s:2382   .text.basic:00000000000001c4 read
         tinyBasic.s:2424   .text.basic:0000000000000224 restore
         tinyBasic.s:2624   .text.basic:00000000000003c4 return
         tinyBasic.s:2914   .text.basic:000000000000066c random
         tinyBasic.s:2933   .text.basic:00000000000006b0 rshift
         tinyBasic.s:2940   .text.basic:00000000000006b4 run
         tinyBasic.s:2960   .text.basic:00000000000006ec save
         tinyBasic.s:2963   .text.basic:00000000000006f0 show
         tinyBasic.s:2966   .text.basic:00000000000006f4 size
         tinyBasic.s:2969   .text.basic:00000000000006f8 sleep
         tinyBasic.s:2972   .text.basic:00000000000006fc spi_read
         tinyBasic.s:2975   .text.basic:0000000000000700 spi_enable
         tinyBasic.s:2978   .text.basic:0000000000000704 spi_select
         tinyBasic.s:2981   .text.basic:0000000000000708 spi_write
         tinyBasic.s:2555   .text.basic:0000000000000324 step
         tinyBasic.s:2984   .text.basic:000000000000070c stop
         tinyBasic.s:2991   .text.basic:0000000000000710 get_ticks
         tinyBasic.s:3000   .text.basic:0000000000000718 set_timer
         tinyBasic.s:3012   .text.basic:000000000000072c timeout
         tinyBasic.s:2541   .text.basic:0000000000000308 to
         tinyBasic.s:3020   .text.basic:0000000000000740 tone
         tinyBasic.s:3030   .text.basic:0000000000000744 ubound
         tinyBasic.s:3038   .text.basic:0000000000000758 uflash
         tinyBasic.s:3041   .text.basic:000000000000075c until
         tinyBasic.s:3044   .text.basic:0000000000000760 usr
         tinyBasic.s:3047   .text.basic:0000000000000764 wait
         tinyBasic.s:3056   .text.basic:0000000000000768 words
         tinyBasic.s:3079   .text.basic:00000000000007d0 write
         tinyBasic.s:3086   .text.basic:00000000000007d4 bit_xor
         tinyBasic.s:3096   .text.basic:00000000000007f8 transmit
         tinyBasic.s:3099   .text.basic:00000000000007fc receive
         tinyBasic.s:2482   .text.basic:0000000000000280 dump
         tinyBasic.s:2171   .text.basic:0000000000000000 $t
         tinyBasic.s:2401   .text.basic:00000000000001fc seek_next
         tinyBasic.s:2446   .text.basic:000000000000025a no_data_line
         tinyBasic.s:2442   .text.basic:0000000000000254 try_next_line
         tinyBasic.s:2873   .text.basic:000000000000062c print_exit
         tinyBasic.s:3109   .text.basic:0000000000000800 $d
         tinyBasic.s:1986   .text:0000000000000fde $d
         tinyBasic.s:3109   .text:0000000000000fe0 $d
ARM GAS  tinyBasic.s 			page 94


         tinyBasic.s:571    .text:0000000000000415 $d
         tinyBasic.s:571    .text:0000000000000416 $t
         tinyBasic.s:1350   .text:0000000000000abd $d
         tinyBasic.s:1350   .text:0000000000000abe $t
         tinyBasic.s:1444   .text:0000000000000b5f $d
         tinyBasic.s:1444   .text:0000000000000b60 $t
         tinyBasic.s:1918   .text:0000000000000f95 $d
         tinyBasic.s:1918   .text:0000000000000f96 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_mstack
_dstack
_tib
_pad
readln
