ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* GPIO input|output CNF|MODE values */
  86              	   .equ OUTPUT_PP,1
  87              	   .equ OUTPUT_OD,6
ARM GAS  tinyBasic.s 			page 3


  88              	   .equ OUTPUT_AFPP,0xa 
  89              	   .equ OUTPUT_AFOD,0xe
  90              	   .equ INPUT_ANA,0
  91              	   .equ INPUT_FLOAT,4
  92              	   .equ INPUT_PD,16 
  93              	   .equ INPUT_PU,17   
  94              	
  95              	   /* AFIO base address */
  96              	   .equ AFIO_BASE_ADR, 0x40010000
  97              	   
  98              	   /* AFIO registers offset */
  99              	   .equ AFIO_EVCR,0
 100              	   .equ AFIO_MAPR,4
 101              	   .equ AFIO_EXTICR1,8
 102              	   .equ AFIO_EXTICR2,12 
 103              	   .equ AFIO_EXTICR3,16
 104              	   .equ AFIO_EXTICR4,20
 105              	   .equ AFIO_MAPR2,28
 106              	   
 107              	    /* USART1 registers */
 108              	    .equ USART1_BASE_ADR, 0x40013800
 109              	    /* USARTx registers offset */
 110              	    .equ USART_SR, 0
 111              	    .equ USART_DR,4
 112              	    .equ USART_BRR,8
 113              	    .equ USART_CR1,12
 114              	    .equ USART_CR2,16
 115              	    .equ USART_CR3,20
 116              	    .equ USART_GTPR,24
 117              	
 118              	   /* systick */
 119              	    .equ STK_BASE_ADR, 0xE000E010
 120              	    /* registers offset */
 121              	    .equ STK_CTL, 0
 122              	    .equ STK_LOAD, 4
 123              	    .equ STK_VAL, 8
 124              	    .equ STK_CALIB, 12
 125              	
 126              	   /* system control block */
 127              	   .equ SCB_BASE_ADR, 0xE000ED00
 128              	   /* registers offset */
 129              	   .equ SCB_CPUID, 0
 130              	   .equ SCB_ICSR, 4 
 131              	   .equ SCB_VTOR, 8
 132              	   .equ SCB_AIRCR, 12
 133              	   .equ SCB_SCR, 16
 134              	   .equ SCB_CCR, 20
 135              	   .equ SCB_SHPR1,24
 136              	   .equ SCB_SHPR2,28
 137              	   .equ SCB_SHPR3,32
 138              	   .equ SCB_SHCRS,36
 139              	   .equ SCB_CFSR,40
 140              	   .equ SCB_HFSR,44
 141              	   .equ SCB_MMAR,52
 142              	   .equ SCB_BFAR,56
 143              	   // key to to write in SCB_AIRCR 
 144              	   .equ SCB_VECTKEY,0x5fa 
ARM GAS  tinyBasic.s 			page 4


 145              	   
 146              	   /* NVIC block */
 147              	   .equ NVIC_BASE_ADR, 0xE000E100
 148              	   .equ NVIC_ISER0, 0
 149              	   .equ NVIC_ISER1, 4
 150              	   .equ NVIC_ISER2, 8
 151              	   .equ NVIC_ICER0, 0x80
 152              	   .equ NVIC_ICER1, 0x84 
 153              	   .equ NVIC_ICER2, 0x88 
 154              	   .equ NVIC_ISPR0, 0x100
 155              	   .equ NVIC_ISPR1, 0x104
 156              	   .equ NVIC_ISPR2, 0x108 
 157              	   .equ NVIC_ICPR0, 0x180
 158              	   .equ NVIC_ICPR1, 0x184
 159              	   .equ NVIC_ICPR2, 0x188
 160              	   .equ NVIC_IABR0, 0x200
 161              	   .equ NVIC_IABR1, 0x204
 162              	   .equ NVIC_IABR2, 0x208
 163              	   .equ NVIC_IPR_BASE, 0x300 
 164              	
 165              	/* system control register */
 166              	.equ SCR_BASE_ADR,0xE000ED10
 167              	.equ SCR_SLEEPONEXIT,(1<<1)
 168              	.equ SCR_SLEEPDEEP,(1<<2)
 169              	.equ SCR_SEVONPEND,(1<<4)
 170              	
 171              	/* power control register */
 172              	.equ PWR_CR_ADR,0x40007000
 173              	.equ PWR_CR_LPDS,(1<<0)
 174              	.equ PWR_CR_PDDS,(1<<1)
 175              	.equ PWR_CR_CWUF,(1<<2)
 176              	.equ PWR_CR_CSBF,(1<<3)
 177              	.equ PWR_CR_PVDE,(1<<4)
 178              	.equ PWR_CR_PLS,(1<<5)
 179              	.equ PWR_CR_DBP,(1<<8)
 180              	
 181              	/* power control and statut register */
 182              	.equ PWR_CSR_ADR,0x40007004 
 183              	.equ PWR_CSR_WUF,(1<<0)
 184              	.equ PWR_CSR_SBF,(1<<1)
 185              	.equ PWR_CSR_PVDO,(1<<2)
 186              	.equ PWR_CSR_EWUP,(1<<8)
 187              	
 188              	/* Window watchdog (WWDG) */
 189              	.equ WWDG_BASE_ADR,0x40002C00
 190              	.equ WWDG_CR,0
 191              	.equ WWDG_CFR,4
 192              	.equ WWDG_SR,8
 193              	
 194              	/* Independent watchdog (IWDG) */
 195              	.equ IWDG_BASE_ADR,0x40003000
 196              	.equ IWDG_KR,0 
 197              	.equ IWDG_PR,4
 198              	.equ IWDG_RLR,8
 199              	.equ IWDG_SR,12
 200              	
 201              	/*   ADC1 registers */
ARM GAS  tinyBasic.s 			page 5


 202              	.equ ADC1_BASE_ADR, 0x40012400
 203              	.equ ADC_SR,0
 204              	.equ ADC_CR1,0X4
 205              	.equ ADC_CR2,0X8
 206              	.equ ADC_SMPR1,0XC
 207              	.equ ADC_SMPR2,0X10
 208              	.equ ADC_JOFR1,0X14
 209              	.equ ADC_JOFR2,0X18
 210              	.equ ADC_JOFR3,0X1C
 211              	.equ ADC_JOFR4,0X20
 212              	.equ ADC_HTR,0X24
 213              	.equ ADC_LTR,0X28
 214              	.equ ADC_SQR1,0X2C
 215              	.equ ADC_SQR2,0X30
 216              	.equ ADC_SQR3,0X34
 217              	.equ ADC_JSQR,0X38
 218              	.equ ADC_JDR1,0X3C
 219              	.equ ADC_JDR2,0X40
 220              	.equ ADC_JDR3,0X44
 221              	.equ ADC_JDR4,0X48
 222              	.equ ADC_DR,0X4C
 223              	
 224              	/* timer registers */
 225              	.equ TIMER1_BASE_ADR,0X40012C00
 226              	.equ TIMER2_BASE_ADR,0x40000000
 227              	.equ TIMER3_BASE_ADR,0x40000400
 228              	.equ TIMER4_BASE_ADR,0x40000800
 229              	
 230              	.equ TIM_CR1,0
 231              	.equ TIM_CR2,4
 232              	.equ TIM_SMCR,8
 233              	.equ TIM_DIER,0xc
 234              	.equ TIM_SR,0X10
 235              	.equ TIM_EGR,0X14
 236              	.equ TIM_CCMR1,0X18
 237              	.equ TIM_CCMR2,0X1C
 238              	.equ TIM_CCER,0X20
 239              	.equ TIM_CNT,0X24
 240              	.equ TIM_PSC,0X28
 241              	.equ TIM_ARR,0X2C
 242              	.equ TIM_CCR1,0X34
 243              	.equ TIM_CCR2,0X38
 244              	.equ TIM_DCR,0X48
 245              	.equ TIM_DMAR,0X4C
 246              	
 247              	/* SPI registers */
 248              	.equ SPI1_BASE_ADR, 0x40013000
 249              	.equ SPI2_BASE_ADR, 0x40003800
 250              	
 251              	.equ SPI_CR1, 0
 252              	.equ SPI_CR2, 4
 253              	.equ SPI_SR,  8
 254              	.equ SPI_DR,  12
 255              	.equ SPI_CRCPR, 16
 256              	.equ SPI_RXCRCR, 20
 257              	.equ SPI_TXCRCR, 24
  28              	  .include "ascii.inc"
ARM GAS  tinyBasic.s 			page 6


   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
ARM GAS  tinyBasic.s 			page 7


  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
ARM GAS  tinyBasic.s 			page 8


  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
ARM GAS  tinyBasic.s 			page 9


  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
ARM GAS  tinyBasic.s 			page 10


 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
ARM GAS  tinyBasic.s 			page 11


 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
ARM GAS  tinyBasic.s 			page 12


   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
ARM GAS  tinyBasic.s 			page 13


  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ READ_IDX, QKEY_IDX+1 // 
  85              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  86              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  87              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  88              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  89              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  90              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  91              	    .equ SAVE_IDX, RUN_IDX+1 // 
  92              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  93              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  94              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  95              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  96              	    .equ SPC_IDX,SLEEP_IDX+1 //
  97              	    .equ SPI_DSEL_IDX,SPC_IDX+1 // 
  98              	    .equ SPI_INIT_IDX,SPI_DSEL_IDX+1 //
  99              	    .equ SPI_READ_IDX,SPI_INIT_IDX+1 //
 100              	    .equ SPI_SELECT_IDX,SPI_READ_IDX+1 //
 101              	    .equ SPI_WRITE_IDX,SPI_SELECT_IDX+1 //
 102              	    .equ STEP_IDX, SPI_WRITE_IDX+1 // 
 103              	    .equ STOP_IDX, STEP_IDX+1 // 
 104              	    .equ STORE_IDX,STOP_IDX+1
 105              	    .equ TAB_IDX, STORE_IDX+1 //
 106              	    .equ THEN_IDX,TAB_IDX+1
 107              	    .equ TICKS_IDX, THEN_IDX+1 // 
 108              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 109              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 110              	    .equ TO_IDX, TMROUT_IDX+1 // 
 111              	    .equ TONE_IDX,TO_IDX+1
 112              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 113              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 114              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 115              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 116              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 117              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 118              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 119              	    .equ XOR_IDX, WORDS_IDX+1 //
 120              	    .equ XPOS_IDX,XOR_IDX+1 //
ARM GAS  tinyBasic.s 			page 14


 121              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 122              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
ARM GAS  tinyBasic.s 			page 15


  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
ARM GAS  tinyBasic.s 			page 16


 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
ARM GAS  tinyBasic.s 			page 17


 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 18


 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
ARM GAS  tinyBasic.s 			page 19


 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	0:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D4     	    bmi 1f 
 303 0234 7F28     	    cmp r0,#127 
 304 0236 01D4     	    bmi 2f 
 305 0238 4FF05F00 	1:  mov r0,#'_' 
 306 023c 00B5FFF7 	2:  _CALL uart_putc
 306      FEFF5DF8 
 306      04EB
 307 0246 0139     	    subs r1,#1 
 308 0248 F0D1     	    bne 0b 
 309 024a 1046     	    mov r0,r2 
 310 024c 04BC     	    pop {r2}
 311 024e 7047     	    _RET 
 312              	
 313              	
 314              	/*********************************
 315              	    search_target 
ARM GAS  tinyBasic.s 			page 20


 316              	    search for goto, gosub target
 317              	    target is line number | label  
 318              	*********************************/
 319              	    _FUNC search_target
 320 0250 00B500F0 	    _CALL next_token 
 320      01FE5DF8 
 320      04EB
 321 025a 1A28     	    cmp r0,TK_LABEL 
 322 025c 06D1     	    bne 2f 
 323 025e 00B500F0 	    _CALL search_label
 323      32F85DF8 
 323      04EB
 324 0268 A0B1     	    cbz r0,8f  
 325 026a 16E0     	    b 9f 
 326 026c D4F800A0 	2:  _UNGET_TOKEN
 326      D4F808B0 
 327 0274 00B500F0 	    _CALL expression 
 327      13FF5DF8 
 327      04EB
 328 027e 1B28     	    cmp r0,#TK_INTGR 
 329 0280 40F0EE83 	    bne syntax_error 
 330 0284 48B1     	    cbz r0,9f 
 331 0286 0846     	    mov r0,r1 
 332 0288 00B5FFF7 	    _CALL search_lineno 
 332      FEFF5DF8 
 332      04EB
 333 0292 11B1     	    cbz r1,9f 
 334 0294 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 335 0298 E6E3     	    b tb_error 
 336 029a 7047     	9:  _RET 
 337              	
 338              	
 339              	/***************************************
 340              	  search_const 
 341              	  search for constant 
 342              	  input:
 343              	    r0  constant label 
 344              	  output:
 345              	    r0  TK_INTGR 
 346              	    r1  constant value  
 347              	  use:
 348              	    r2   *list 
 349              	    r3   BOUND 
 350              	***************************************/
 351              	    _FUNC search_const
 352 029c 0CB4     	    push {r2,r3} 
 353 029e 626B     	    ldr r2,[UPP,#TXTEND]
 354 02a0 D4F8D030 	    ldr r3,[UPP,#HERE] 
 355 02a4 9A42     	1:  cmp r2,r3 
 356 02a6 0BD5     	    bpl 8f 
 357 02a8 52F8041B 	    ldr r1,[r2],#4
 358 02ac 8842     	    cmp r0,r1 
 359 02ae 02D0     	    beq 2f 
 360 02b0 02F10402 	    add r2,#4
 361 02b4 F6E7     	    b 1b 
 362              	2:  // found 
 363 02b6 1168     	    ldr r1,[r2]
ARM GAS  tinyBasic.s 			page 21


 364 02b8 4FF01B00 	    mov r0,#TK_INTGR 
 365 02bc 0CBC     	    pop {r2,r3}
 366 02be 7047     	    _RET
 367              	8:  // that constant doesn't exist 
 368 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 369 02c4 D0E3     	    b tb_error      
 370              	
 371              	
 372              	/***************************************
 373              	    search_label 
 374              	    search target label 
 375              	    input:
 376              	      r1    target label 
 377              	    output:
 378              	      r0    address or 0 
 379              	    use:
 380              	      r2    line address link 
 381              	      r3    search limit 
 382              	****************************************/
 383 02c6 00BF     	    _FUNC search_label 
 384 02c8 0CB4     	    push {r2,r3}
 385 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 386 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 387 02ce 9A42     	1:  cmp r2,r3
 388 02d0 0AD0     	    beq 8f 
 389 02d2 D078     	    ldrb r0,[r2,#3]
 390 02d4 1A28     	    cmp  r0,#TK_LABEL 
 391 02d6 02D0     	    beq 4f 
 392 02d8 9078     	2:  ldrb r0,[r2,#2]
 393 02da 0244     	    add r2,r0 
 394 02dc F7E7     	    b 1b 
 395              	4:  // compare label 
 396 02de 5068     	    ldr r0,[R2,#4]
 397 02e0 8142     	    cmp r1,r0 
 398 02e2 F9D1     	    bne 2b 
 399              	    // found label 
 400 02e4 1046     	    mov r0,r2 
 401 02e6 01E0     	    b 9f
 402 02e8 80EA0000 	8:  eor r0,r0 
 403 02ec 0CBC     	9:  pop {r2,r3}
 404 02ee 7047     	    _RET 
 405              	
 406              	
 407              	/***************************************
 408              	    search_lineno 
 409              	    localize BASIC line from its number 
 410              	    input:
 411              	      r0   line# 
 412              	    output: 
 413              	      r0   adr where found || adr new to be inserted 
 414              	      r1   0 found || !0 not found  
 415              	    use:
 416              	      r0   scan address 
 417              	      r1   temp   
 418              	      r2   address end of text
 419              	      r3   target line#
 420              	****************************************/    
ARM GAS  tinyBasic.s 			page 22


 421              	    _GBL_FUNC search_lineno
 422 02f0 0CB4     	    push {r2,r3} 
 423 02f2 0346     	    mov r3,r0 // target 
 424 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 425 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 426 02f8 9042     	1:  cmp r0,r2 
 427 02fa 05D0     	    beq  8f
 428 02fc 0188     	    ldrh r1,[r0]
 429 02fe C91A     	    subs r1,r3 
 430 0300 04D5     	    bpl 9f 
 431 0302 8178     	    ldrb r1,[r0,#2]
 432 0304 0844     	    add r0,r1
 433 0306 F7E7     	    b 1b 
 434 0308 4FF0FF31 	8:  mov r1,#-1 
 435 030c 0CBC     	9:  pop {r2,r3}
 436 030e 7047     	    _RET 
 437              	
 438              	
 439              	/********************************************
 440              	    delete_line 
 441              	    delete BASIC line at addr 
 442              	    input:
 443              	      r0    address line to delete 
 444              	    output:
 445              	      r0    same as input 
 446              	    use: 
 447              	      r1    dest adr
 448              	      r2    bytes to move 
 449              	      T1    length line to delete 
 450              	      T2    txtend 
 451              	********************************************/
 452              	    _FUNC delete_line 
 453 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 454 0314 0146     	    mov r1,r0 // dest 
 455 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 456 031a 4044     	    add r0,T1  // src
 457 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 458 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 459 0324 00B5FFF7 	    _CALL cmove
 459      FEFF5DF8 
 459      04EB
 460 032e A9EB0809 	    sub T2,T1 // txtend-count 
 461 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 462 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 463 033a 7047     	    _RET 
 464              	
 465              	/******************************************
 466              	    create_gap 
 467              	    create a gap in text area to insert new line 
 468              	    input:
 469              	      r0    adr 
 470              	      r1    length 
 471              	    output:
 472              	      r0    adr 
 473              	    use:
 474              	      T1    length 
 475              	      T2    txtend 
ARM GAS  tinyBasic.s 			page 23


 476              	************************************************/
 477              	    _FUNC create_gap 
 478 033c 2DE90503 	    push {r0,r2,T1,T2}
 479 0340 8846     	    mov T1,R1
 480 0342 0144     	    add r1,r0  // dest 
 481 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 482 0348 A9EB0002 	    sub r2,T2,r0 
 483 034c 00B5FFF7 	    _CALL cmove
 483      FEFF5DF8 
 483      04EB
 484 0356 C144     	    add T2,T1 
 485 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 486 035c C4F8D090 	    str T2,[upp,#HERE]
 487 0360 BDE80503 	    pop {r0,r2,T1,T2}
 488 0364 7047     	    _RET 
 489              	
 490              	/************************************************
 491              	    insert_line 
 492              	    insert BASIC line in text area 
 493              	    first search if line with same number exist 
 494              	    replace if so. 
 495              	    input:
 496              	      r0    *buffer to insert 
 497              	    output:
 498              	      none 
 499              	    use: 
 500              	      T1     *buffer
 501              	      T2     temp  
 502              	************************************************/ 
 503 0366 00BF     	    _FUNC insert_line 
 504 0368 2DE90203 	    push {r1,T1,T2}
 505 036c 8046     	    mov T1,r0 
 506 036e B8F80000 	    ldrh r0,[T1]
 507 0372 00B5FFF7 	    _CALL search_lineno 
 507      FEFF5DF8 
 507      04EB
 508 037c 49B9     	    cbnz  r1, 1f // line# doesn't exist
 509              	// already exist 
 510 037e 00B5FFF7 	    _CALL delete_line // delete old one 
 510      C6FF5DF8 
 510      04EB
 511 0388 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 512 038c B9F1040F 	    cmp T2,#4 // empty line length==4  
 513 0390 0ED0     	    beq 9f
 514              	1: //insert new line 
 515 0392 98F80210 	    ldrb r1,[T1,#2]
 516 0396 00B5FFF7 	    _CALL create_gap 
 516      D0FF5DF8 
 516      04EB
 517 03a0 0146     	    mov r1,r0
 518 03a2 4046     	    mov r0,T1 
 519 03a4 8278     	    ldrb r2,[r0,#2]
 520 03a6 00B5FFF7 	    _CALL cmove 
 520      FEFF5DF8 
 520      04EB
 521 03b0 BDE80203 	9:  pop {r1,T1,T2}
 522 03b4 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 24


 523              	
 524              	/*********************************
 525              	    compile 
 526              	    tokenize source line save it 
 527              	    in pas buffer.
 528              	    compiled line format: 
 529              	      line_no  2 bytes {0...32767}
 530              	      count    1 byte  
 531              	      tokens   variable length 
 532              	  input:
 533              	     r0   *text buffer 
 534              	     r1   *text length   
 535              	  output:
 536              	    r0    0 stored | -1 immediate 
 537              	  use:
 538              	    r3    tib index   
 539              	    T1    tib
 540              	    T2    pad
 541              	***********************************/
 542 03b6 00BF     	    _FUNC compile
 543 03b8 8046     	    mov T1, r0  // source text buffer 
 544 03ba 6160     	    str r1,[UPP,#COUNT] // save line length 
 545 03bc DFF8F499 	    ldr T2,pad // tokens buffer
 546 03c0 83EA0303 	    eor r3,r3 // source index  
 547 03c4 206C     	    ldr r0,[UPP,#FLAGS]
 548 03c6 40F02000 	    orr r0,#FCOMP
 549 03ca 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 550 03cc 80EA0000 	    eor r0,r0     
 551 03d0 29F8020B 	    strh r0,[T2],#2   // line no 
 552 03d4 09F8010B 	    strb r0,[T2],#1 // length 
 553 03d8 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 554 03da C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 555 03de 00B500F0 	    _CALL parse_int 
 555      6EF95DF8 
 555      04EB
 556 03e8 0AD0     	    beq 2f 
 557              	// this is a line number     
 558 03ea 0129     	    cmp r1,#1 
 559 03ec 02D5     	    bpl 1f 
 560 03ee 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 561 03f2 39E3     	    b tb_error  
 562 03f4 B1F5803F 	1:  cmp r1,#65536
 563 03f8 F9D5     	    bpl 0b 
 564              	    // write line # to pad 
 565 03fa 29F8031C 	    strh r1,[T2,#-3]
 566 03fe 2360     	    str r3,[UPP,#IN_SAVED]
 567              	2:  // check for pad full 
 568 0400 C145     	    cmp T2,T1
 569 0402 02DB     	    blt 3f 
 570 0404 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 571 0408 2EE3     	    b tb_error 
 572 040a 00B500F0 	3:  _CALL comp_token 
 572      28F85DF8 
 572      04EB
 573 0414 0028     	    cmp r0,#TK_NONE 
 574 0416 01D0     	    beq 4f 
 575 0418 2360     	    str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 25


 576 041a F1E7     	    b 2b 
 577              	4: // compilation completed 
 578 041c DFF89439 	    ldr r3,pad 
 579 0420 A9EB0300 	    sub r0,T2,r3 // line length 
 580 0424 9870     	    strb r0,[r3,#2]
 581 0426 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 582 0428 1888     	    ldrh r0,[r3] // line number 
 583 042a 70B1     	    cbz r0,8f  
 584              	// insert line in text buffer 
 585 042c 206C     	    ldr r0,[UPP,#FLAGS]
 586 042e 10F0080F 	    tst r0,#FSTOP
 587 0432 02D0     	    beq 7f 
 588 0434 4FF01000 	    mov r0,#ERR_CANT_PROG 
 589 0438 16E3     	    b tb_error 
 590 043a 1846     	7:  mov r0,r3 
 591 043c 00B5FFF7 	    _CALL insert_line 
 591      93FF5DF8 
 591      04EB
 592 0446 4040     	    eors r0,r0 
 593 0448 08E0     	    b 9f 
 594 044a 9B46     	8:  mov BPTR,r3 // *token_list 
 595 044c 4FF0030A 	    mov IN,#3
 596 0450 206C     	    ldr r0,[UPP,#FLAGS]
 597 0452 A0F12000 	    sub r0,#FCOMP
 598 0456 2064     	    str r0,[UPP,#FLAGS]
 599 0458 5FF0FF30 	    movs r0,#-1 
 600 045c 7047     	9:  _RET 
 601              	
 602              	/*********************************************
 603              	    compile next token from source 
 604              	    input: 
 605              	      r3 		tib index  
 606              	      T1    tib adr
 607              	      T2    insert point in pad  
 608              	    output:
 609              	      r0     token attribute 
 610              	      r1 		token value
 611              	      r3     tib index updated    
 612              	      T2     updated 
 613              	      use:
 614              	**********************************************/
 615 045e 00BF     	    _FUNC comp_token 
 616 0460 40B4     	    push {r6}
 617 0462 18F80300 	    ldrb r0,[T1,r3]
 618 0466 0040     	    ands r0,r0 
 619 0468 7DD0     	    beq store_r0  // reached end of text  
 620 046a 4FF02000 	    mov r0,#SPACE 
 621 046e 00B500F0 	    _CALL skip  // skip spaces 
 621      76F95DF8 
 621      04EB
 622 0478 18F80300 	    ldrb r0,[T1,r3]
 623 047c 0040     	    ands r0,r0 
 624 047e 72D0     	    beq store_r0  // reached end of text 
 625 0480 03F10103 	    add r3,#1
 626 0484 00B500F0 	    _CALL is_letter 
 626      9FF95DF8 
 626      04EB
ARM GAS  tinyBasic.s 			page 26


 627 048e 0BD1     	    bne 1f
 628 0490 A3F10103 	    sub r3,#1 
 629 0494 00B500F0 	    _CALL comp_label // parse and compile label 
 629      AFF85DF8 
 629      04EB
 630 049e 1728     	    cmp r0,#TK_CMD 
 631 04a0 71D1     	    bne token_exit 
 632 04a2 3C29     	    cmp r1,#REM_IDX 
 633 04a4 4DD0     	    beq tick2 
 634 04a6 6EE0     	    b token_exit 
 635 04a8 00B500F0 	1:  _CALL is_special
 635      6FF85DF8 
 635      04EB
 636 04b2 DFF80C6D 	    ldr r6,=token_ofs
 637 04b6 D6E811F0 	    tbh [r6,r1] 
 638              	tok_idx0:     
 639              	//  not special char.  
 640 04ba 57E0     	    b try_number 
 641              	// single char token with no value 
 642              	single: 
 643 04bc DFF8046D 	    ldr r6,=tok_single
 644 04c0 705C     	    ldrb r0,[r6,r1] 
 645 04c2 50E0     	    b store_r0
 646              	lt:
 647 04c4 4FF00F00 	    mov r0,#TK_LT
 648 04c8 18F80310 	    ldrb r1,[T1,r3]
 649 04cc 3E29     	    cmp r1,#'>' 
 650 04ce 06D0     	    beq 1f
 651 04d0 0AE0     	    b 2f 
 652              	gt:
 653 04d2 4FF00E00 	    mov r0,#TK_GT 
 654 04d6 18F80310 	    ldrb r1,[T1,r3]
 655 04da 3C29     	    cmp r1,#'<'
 656 04dc 04D1     	    bne 2f  
 657 04de 03F10103 	1:  add r3,#1
 658 04e2 4FF01200 	    mov r0,#TK_NE  
 659 04e6 3EE0     	    b store_r0
 660 04e8 3D29     	2:  cmp r1,#'=' 
 661 04ea 3CD1     	    bne store_r0  
 662 04ec 03F10103 	    add r3,#1
 663 04f0 00F10200 	    add r0,#2
 664 04f4 37E0     	    b store_r0       
 665              	bkslash:
 666 04f6 18F80310 	    ldrb r1,[T1,r3]
 667 04fa 03F10103 	    add r3,#1
 668 04fe 4FF01300 	    mov r0,#TK_CHAR 
 669 0502 09F8010B 	    strb r0,[T2],#1
 670 0506 09F8011B 	    strb r1,[T2],#1
 671 050a 3CE0     	    b token_exit 
 672              	prt_cmd: 
 673 050c 4FF01700 	    mov r0,#TK_CMD 
 674 0510 4FF03701 	    mov r1,#PRT_IDX
 675 0514 09F8010B 	    strb r0,[T2],#1
 676 0518 09F8011B 	    strb r1,[T2],#1
 677 051c 33E0     	    b token_exit 
 678              	quote:
 679 051e 4FF01C00 	    mov r0,#TK_QSTR 
ARM GAS  tinyBasic.s 			page 27


 680 0522 09F8010B 	    strb r0,[T2],#1
 681 0526 00B500F0 	    _CALL parse_quote
 681      E6F85DF8 
 681      04EB
 682 0530 29E0     	    b token_exit
 683              	tick: 
 684              	// copy comment in pad 
 685 0532 4FF01700 	    mov r0,#TK_CMD 
 686 0536 4FF03C01 	    mov r1,#REM_IDX 
 687 053a 09F8010B 	    strb r0,[T2],#1 
 688 053e 09F8011B 	    strb r1,[T2],#1
 689              	tick2:
 690 0542 08EB0300 	    add r0,T1,r3 
 691 0546 4946     	    mov r1,T2 
 692 0548 00B5FFF7 	    _CALL strcpy 
 692      FEFF5DF8 
 692      04EB
 693 0552 00B5FFF7 	    _CALL strlen 
 693      FEFF5DF8 
 693      04EB
 694 055c 8144     	    add T2,r0
 695 055e 09F10109 	    add T2,#1
 696 0562 6368     	    ldr r3,[UPP,#COUNT]
 697 0564 0FE0     	    b token_exit
 698              	store_r0: 
 699 0566 09F8010B 	    strb r0,[T2],#1
 700 056a 0CE0     	    b token_exit 
 701              	try_number:
 702 056c A3F10103 	    sub r3,#1
 703 0570 00B500F0 	    _CALL parse_int  
 703      A5F85DF8 
 703      04EB
 704 057a 00F07182 	    beq syntax_error  
 705 057e 09F8010B 	    strb r0,[T2],#1 
 706 0582 49F8041B 	    str r1,[T2],#4
 707              	token_exit:
 708 0586 40BC     	    pop {r6}
 709 0588 7047     	    _RET 
 710              	
 711              	
 712              	/****************************
 713              	    is_special  
 714              	    check for non alphanum
 715              	    input:
 716              	      r0    character to scan 
 717              	    output:
 718              	      r0    character 
 719              	      r1    0 || index 
 720              	    use: 
 721              	      r1    scan index 
 722              	      r2    temp 
 723              	      r3    char_list 
 724              	*****************************/
 725 058a 00BF     	    _FUNC is_special 
 726 058c 0CB4     	    push {r2,r3}
 727 058e 4FF00101 	    mov r1,#1
 728 0592 DFF8343C 	    ldr r3,=char_list 
ARM GAS  tinyBasic.s 			page 28


 729 0596 5A5C     	1:  ldrb r2,[r3,r1]
 730 0598 22B1     	    cbz r2,8f 
 731 059a 8242     	    cmp r2,r0 
 732 059c 04D0     	    beq 9f 
 733 059e 01F10101 	    add r1,#1 
 734 05a2 F8E7     	    b 1b
 735 05a4 81EA0101 	8:  eor r1,r1     
 736 05a8 0CBC     	9:  pop {r2,r3}
 737 05aa 7047     	    _RET 
 738              	
 739              	char_list:
 740 05ac 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 740      28293A23 
 740      2D2B2A2F 
 740      253D3C3E 
 740      5C3F2722 
 741              	
 742              	tok_single:
 743 05c1 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 743      050601
 744 05c8 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 744      0A0B0D
 745              	
 746 05cf 00       	  .p2align 2
 747              	token_ofs:
 748 05d0 0000     	  .hword  0 // not found
 749              	  // TK_COMMA...TK_EQUAL , 13 
 750 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 750      01000100 
 751 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 751      01000100 
 752 05e2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 752      01000100 
 753 05ea 0100     	  .hword  (single-tok_idx0)/2    
 754              	  // '<','>'
 755 05ec 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 756              	  // '\'
 757 05f0 1E00     	  .hword  (bkslash-tok_idx0)/2
 758              	  // '?' 
 759 05f2 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 760              	  // "'"  
 761 05f4 3C00     	  .hword  (tick-tok_idx0)/2 
 762              	  // '"' quote 
 763 05f6 3200     	  .hword (quote-tok_idx0)/2
 764              	
 765              	  .p2align 2
 766              	
 767              	/****************************
 768              	    comp_label
 769              	    compile a label 
 770              	    it can be a target|keyword|
 771              	    variable| user constant  
 772              	    label form: [A..Z]+
 773              	    input:
 774              	      *buffer 
 775              	    output:
 776              	      r0  token type 
ARM GAS  tinyBasic.s 			page 29


 777              	      r1  token value 
 778              	      T2  updated 
 779              	      R3  updated
 780              	    use:
 781              	****************************/
 782              	    _FUNC comp_label
 783 05f8 24B4     	    push {r2,r5}
 784 05fa 4DF8049D 	    push {T2}
 785 05fe 82EA0202 	    eor r2,r2
 786 0602 4FF00605 	    mov r5,#6 
 787 0606 18F80300 	0:  ldrb r0,[T1,r3]
 788 060a 5F28     	    cmp r0,#'_'
 789 060c 0AD0     	    beq 2f
 790 060e 00B500F0 	1:  _CALL is_letter 
 790      DAF85DF8 
 790      04EB
 791 0618 09D1     	    bne 3f // not letter 
 792 061a 00B500F0 	    _CALL upper 
 792      ACF85DF8 
 792      04EB
 793 0624 09F8010B 	2:  strb r0,[T2],#1
 794 0628 03F10103 	    add r3,#1
 795 062c EBE7     	    b 0b 
 796 062e 80EA0000 	3:  eor r0,r0 
 797 0632 89F80000 	    strb r0,[T2]
 798              	// is this a variable ?
 799 0636 5DF8049B 	    pop {T2}
 800 063a 99F80100 	    ldrb r0,[T2,#1]
 801 063e 30B9     	    cbnz r0,3f // length >1 not variable 
 802 0640 99F80010 	    ldrb r1,[T2]
 803 0644 A1F14101 	    sub r1,#'A' 
 804 0648 4FF01400 	    mov r0,#TK_VAR
 805 064c 1CE0     	    b 8f 
 806              	3:  // try keyword 
 807 064e 4846     	    mov r0,T2 
 808 0650 DFF8781B 	    ldr r1,=kword_dict  
 809 0654 00B500F0 	    _CALL search_dict 
 809      C5FA5DF8 
 809      04EB
 810 065e 30B1     	    cbz r0,4f
 811 0660 1828     	    cmp r0,TK_SCONST  
 812 0662 11D1     	    bne 8f
 813              	    //system constant  
 814 0664 09F8010B 	    strb r0,[T2],#1
 815 0668 49F8041B 	    str r1,[T2],#4
 816 066c 10E0     	    b 9f 
 817              	4: // must be a label 
 818 066e 4846     	    mov r0,T2 
 819 0670 00B500F0 	    _CALL compress_label
 819      0FF85DF8 
 819      04EB
 820 067a 4FF01A00 	    mov r0,#TK_LABEL
 821 067e 09F8010B 	    strb r0,[T2],#1
 822 0682 49F8041B 	    str r1,[T2],#4
 823 0686 03E0     	    b 9f 
 824 0688 09F8010B 	8:  strb r0,[T2],#1
 825 068c 09F8011B 	    strb r1,[T2],#1          
ARM GAS  tinyBasic.s 			page 30


 826 0690 24BC     	9:  pop {r2,r5}
 827 0692 7047     	    _RET 
 828              	
 829              	/********************************
 830              	    compress_label 
 831              	    compress label in integer 
 832              	    maximum 6 character, 
 833              	    ignore extras characters 
 834              	    input:
 835              	      r0  *label 
 836              	    output:
 837              	      r1   compressed label 
 838              	********************************/
 839              	    _FUNC compress_label
 840 0694 0CB4     	    push {r2,r3}
 841 0696 82EA0202 	    eor r2,r2 // compress value
 842 069a 4FF00603 	    mov r3,#6 // max characters 
 843 069e 10F8011B 	1:  ldrb r1,[r0],#1 
 844 06a2 51B1     	    cbz r1,3f
 845 06a4 5F29     	    cmp r1,#'_'
 846 06a6 01D1     	    bne 2f 
 847 06a8 A1F10401 	    sub r1,#4  
 848 06ac A1F14001 	2:  sub r1,#'@'
 849 06b0 4FEA4212 	    lsl r2,#5
 850 06b4 0A44     	    add r2,r1
 851 06b6 013B     	    subs r3,#1 
 852 06b8 F1D1     	    bne 1b 
 853 06ba 1146     	3:  mov r1,r2     
 854 06bc 0CBC     	    pop {r2,r3}
 855 06be 7047     	    _RET 
 856              	
 857              	
 858              	/****************************
 859              	    parse_int 
 860              	    parse an integer from text
 861              	    if not valid integer 
 862              	    r1 return *buffer else 
 863              	    *buffer is incremented after integer 
 864              	  input:
 865              	    r0   *buffer 
 866              	  output:
 867              	    r0   TK_INTGR|TK_NONE
 868              	    r1   int|0   
 869              	  use:
 870              	    r3   tib index updated     
 871              	*****************************/
 872              	    _FUNC parse_int 
 873 06c0 4FF00A01 	    mov r1,#10 // default base 
 874 06c4 18F80300 	    ldrb r0,[T1,r3]
 875 06c8 2428     	    cmp r0,'$' 
 876 06ca 02D1     	    bne 2f 
 877 06cc 4FF01001 	    mov r1,#16 // hexadecimal number 
 878 06d0 03E0     	    b 3f  
 879 06d2 2628     	2:  cmp r0,#'&' 
 880 06d4 03D1     	    bne 4f
 881 06d6 4FF00201 	    mov r1,#2 //binary number  
 882 06da 03F10103 	3:  add r3,#1
ARM GAS  tinyBasic.s 			page 31


 883 06de 03EB0800 	4:  add r0,r3,T1 
 884 06e2 00B5FFF7 	    _CALL atoi 
 884      FEFF5DF8 
 884      04EB
 885 06ec 10B1     	    cbz r0,9f
 886 06ee 0344     	    add r3,r0
 887 06f0 4FF01B00 	    mov r0,#TK_INTGR
 888 06f4 0040     	9:  ands r0,r0   
 889 06f6 7047     	    _RET 
 890              	
 891              	/*********************************************
 892              	    parse_quote 
 893              	    parse quoted string 
 894              	    input: 
 895              	      r3 		tib index  
 896              	      T1    tib adr
 897              	      T2    insert point in pad  
 898              	    output:
 899              	      r0     token attribute 
 900              	      r1 		*str 
 901              	      r3     tib index updated    
 902              	      T2     updated 
 903              	      use:
 904              	*********************************************/
 905              	    _FUNC parse_quote
 906 06f8 4DF8049D 	    push {T2} 
 907 06fc 18F80300 	1:  ldrb r0,[T1,r3]
 908 0700 03F10103 	    add r3,#1 
 909 0704 2228     	    cmp r0,#'"'
 910 0706 09D0     	    beq 9f 
 911 0708 5C28     	    cmp r0,#'\\'
 912 070a 04D1     	    bne 2f 
 913 070c 00B500F0 	    _CALL get_escaped_char 
 913      0DF85DF8 
 913      04EB
 914 0716 09F8010B 	2:  strb r0,[T2],#1
 915 071a EFE7     	    b 1b 
 916 071c 80EA0000 	9:  eor  r0,r0
 917 0720 09F8010B 	    strb r0,[T2],#1
 918 0724 4FF01C00 	    mov r0,#TK_QSTR
 919 0728 02BC     	    pop {r1}
 920 072a 7047     	    _RET 
 921              	
 922              	/**********************************************
 923              	    get_escaped_char 
 924              	    convert "\c" in quoted string 
 925              	    input:
 926              	      r0 
 927              	      r3   index 
 928              	      T1   tib 
 929              	    output:
 930              	      r0   replacement char
 931              	      r3   updated 
 932              	    use:
 933              	      r1   *table 
 934              	      r2   temp 
 935              	**********************************************/
ARM GAS  tinyBasic.s 			page 32


 936              	    _FUNC get_escaped_char 
 937 072c 06B4     	    push {r1,r2}
 938 072e 18F80300 	    ldrb r0,[T1,r3]
 939 0732 03F10103 	    add r3,#1
 940 0736 2228     	    cmp r0,#'"' 
 941 0738 0BD0     	    beq 9f 
 942 073a DFF8941A 	1:  ldr r1,=escaped 
 943 073e 11F8012B 	2:  ldrb r2,[r1],#1
 944 0742 12B1     	    cbz r2,6f 
 945 0744 8242     	    cmp r2,r0 
 946 0746 02D0     	    beq 7f 
 947 0748 F9E7     	    b 2b
 948 074a A0F10702 	6:  sub r2,r0,#7     
 949 074e 02F10700 	7:  add r0,r2,#7
 950 0752 06BC     	9:  pop {r1,r2}   
 951 0754 7047     	    _RET
 952              	
 953 0756 6162746E 	escaped: .asciz "abtnvfr"
 953      76667200 
 954              	
 955              	/*********************************************
 956              	   skip character in TIB 
 957              	   input:
 958              	      r0    character to skip 
 959              	      r3    tib index 
 960              	      T1    tib adr
 961              	    output: 
 962              	      r3    updated
 963              	    use:
 964              	      r1     
 965              	**********************************************/   
 966 075e 00BF     	    _FUNC skip
 967 0760 02B4     	    push {r1} 
 968 0762 18F80310 	1:  ldrb r1,[T1,r3]
 969 0766 8142     	    cmp r1,r0
 970 0768 02D1     	    bne 2f
 971 076a 03F10103 	    add r3,#1 
 972 076e F8E7     	    b 1b 
 973 0770 2360     	2:  str r3,[UPP,#IN_SAVED]
 974 0772 02BC     	    pop {r1}
 975 0774 7047     	    _RET
 976              	
 977              	/********************************************
 978              	    upper
 979              	    convert character in upper case 
 980              	    input: 
 981              	      r0   character 
 982              	    output:
 983              	      r0   upper case character 
 984              	*********************************************/
 985 0776 00BF     	    _FUNC upper 
 986 0778 6128     	    cmp r0,#'a' 
 987 077a 03DB     	    blt 9f 
 988 077c 7A28     	    cmp r0,#'z' 
 989 077e 01DC     	    bgt 9f 
 990 0780 00F05F00 	    and r0,#0x5f 
 991 0784 7047     	9:  _RET 
ARM GAS  tinyBasic.s 			page 33


 992              	
 993              	/***************************************
 994              	   is_digit 
 995              	   check if char is decimal digit.
 996              	   convert to decimal digit.
 997              	   input:
 998              	      r0    char 
 999              	   output:
 1000              	      r0        if Z then converted digit else not changed
 1001              	      Z flag    1 true | 0 false  
 1002              	***************************************/
 1003 0786 00BF     	    _GBL_FUNC is_digit 
 1004 0788 02B4     	    push {r1} 
 1005 078a 4FF0FF31 	    mov r1,#-1   
 1006 078e 3028     	    cmp r0,#'0' 
 1007 0790 05DB     	    blt 9f
 1008 0792 3A28     	    cmp r0,'9'+1
 1009 0794 03D5     	    bpl 9f 
 1010 0796 81EA0101 	    eor r1,r1 
 1011 079a A0F13000 	    sub r0,#'0'  
 1012              	9:   
 1013 079e 0940     	    ands r1,r1
 1014 07a0 02BC     	    pop {r1} 
 1015 07a2 7047     	    _RET 
 1016              	
 1017              	/***************************************
 1018              	    is_hex 
 1019              	    check for hexadecimal digit 
 1020              	    convert to hex digit.
 1021              	    input:
 1022              	      r0    
 1023              	    output:
 1024              	      r0         if Z then converted digit 
 1025              	      Z  flag    1 true | 0 false         
 1026              	***************************************/
 1027              	    _FUNC is_hex 
 1028 07a4 02B4     	    push {r1}
 1029 07a6 80EA0000 	    eor r0,r0 
 1030 07aa 4128     	    cmp r0,#'A' 
 1031 07ac 01D4     	    bmi 1f 
 1032 07ae A0F10700 	    sub r0,#7 
 1033 07b2 A0F13000 	1:  sub r0,#'0'
 1034 07b6 01D4     	    bmi 2f 
 1035 07b8 1028     	    cmp r0,#16
 1036 07ba 01D4     	    bmi 9f 
 1037 07bc 6FEA0101 	2:  mvn r1,r1  
 1038 07c0 0940     	9:  ands r1,r1 
 1039 07c2 02BC     	    pop {r1}
 1040 07c4 7047     	    _RET 
 1041              	
 1042              	/***************************************
 1043              	    is_letter 
 1044              	    check if character is {a..z,A..Z,_} 
 1045              	  input:
 1046              	    r0   character 
 1047              	  output: 
 1048              	    r0       same character 
ARM GAS  tinyBasic.s 			page 34


 1049              	    Z flag   1 true | 0 false  
 1050              	****************************************/
 1051 07c6 00BF     	    _FUNC is_letter
 1052 07c8 02B4     	    push {r1} 
 1053 07ca 81EA0101 	    eor r1,r1 
 1054 07ce 4128     	    cmp r0,#'A' 
 1055 07d0 05D4     	    bmi 8f 
 1056 07d2 5B28     	    cmp r0,#'Z'+1 
 1057 07d4 05D4     	    bmi 9f
 1058 07d6 6128     	    cmp r0,#'a' 
 1059 07d8 01D4     	    bmi 8f 
 1060 07da 7B28     	    cmp r0,#'z'+1
 1061 07dc 01D4     	    bmi 9f  
 1062 07de 6FEA0101 	8:  mvn r1,r1  
 1063 07e2 0940     	9:  ands r1,r1 
 1064 07e4 02BC     	    pop {r1}
 1065 07e6 7047     	    _RET 
 1066              	
 1067              	
 1068              	/******************************************
 1069              	    atoi 
 1070              	    convert ascii to integer 
 1071              	    input:
 1072              	      r0   *buffer 
 1073              	      r1   base 
 1074              	    output:
 1075              	      r0   0 no integer found 
 1076              	      r1   integer
 1077              	    use:
 1078              	      r2   base  
 1079              	      T1   *buffer 
 1080              	      T2   digit count  
 1081              	******************************************/
 1082              	    _GBL_FUNC atoi 
 1083 07e8 2DE90403 	    push {r2,T1,T2}
 1084 07ec 8046     	    mov T1,r0  // *buffer 
 1085 07ee 0A46     	    mov r2,r1  // base  
 1086 07f0 81EA0101 	    eor r1,r1  // converted integer 
 1087 07f4 89EA0909 	    eor T2,T2  // digit count 
 1088 07f8 18F8010B 	1:  ldrb r0,[T1],#1
 1089 07fc 00B5FFF7 	    _CALL upper 
 1089      BBFF5DF8 
 1089      04EB
 1090 0806 3028     	    cmp r0,#'0'
 1091 0808 0FD4     	    bmi 8f
 1092 080a 3A28     	    cmp r0,#'9'+1 
 1093 080c 03D4     	    bmi 2f 
 1094 080e 4128     	    cmp r0,#'A'
 1095 0810 0BD4     	    bmi 8f 
 1096 0812 A0F10700 	    sub r0,#7 
 1097 0816 A0F13000 	2:  sub r0,#'0' 
 1098 081a 9042     	    cmp r0,r2
 1099 081c 05D5     	    bpl 8f  
 1100 081e 02FB01F1 	    mul r1,r2 
 1101 0822 0144     	    add r1,r0
 1102 0824 09F10109 	    add T2,#1
 1103 0828 E6E7     	    b 1b 
ARM GAS  tinyBasic.s 			page 35


 1104 082a 4846     	8:  mov r0,T2  
 1105 082c BDE80403 	    pop {r2,T1,T2}
 1106 0830 7047     	    _RET 
 1107              	
 1108              	
 1109              	
 1110              	/*******************
 1111              	    DECOMPILER 
 1112              	*******************/
 1113              	
 1114              	/********************************************
 1115              	    cmd_name 
 1116              	    search bytecode in dictionary and 
 1117              	    return its name 
 1118              	  input:
 1119              	    r0    token type 
 1120              	    r1    keyword bytecode 
 1121              	  ouput:
 1122              	    r0    name string 
 1123              	  use:
 1124              	    T1    link 
 1125              	    T2    tmp 
 1126              	*********************************************/
 1127 0832 00BF     	    _FUNC cmd_name 
 1128 0834 2DE90003 	    push {T1,T2}
 1129 0838 DFF89089 	    ldr T1,=kword_dict 
 1130 083c 58F8049C 	1:  ldr T2,[T1,#-4]
 1131 0840 8145     	    cmp T2,r0 
 1132 0842 03D1     	    bne 3f 
 1133 0844 58F8089C 	    ldr T2,[T1,#-8]
 1134 0848 8945     	    cmp T2,r1 
 1135 084a 04D0     	    beq 2f 
 1136 084c 58F80C8C 	3:  ldr T1,[T1,#-12]
 1137 0850 B8F1000F 	    cmp T1,#0
 1138 0854 F2D1     	    bne 1b  
 1139 0856 4046     	2:  mov r0,T1 
 1140 0858 BDE80003 	    pop {T1,T2}
 1141 085c 7047     	    _RET
 1142              	
 1143              	/*****************************
 1144              	  decompile_line 
 1145              	  detokenize BASIC line 
 1146              	  input:
 1147              	    r0  *token list 
 1148              	    r1  *output buffer 
 1149              	  output:
 1150              	    r0  *output buffer (.asciz) 
 1151              	  use:
 1152              	    T1  *output buffer
 1153              	    BPTR  *token list
 1154              	    IN  offset in token list  
 1155              	******************************/
 1156 085e 00BF     	    _GBL_FUNC decompile_line
 1157 0860 2DE90E01 	    push {r1,r2,r3,T1} 
 1158 0864 8346     	    mov BPTR,r0 
 1159 0866 4FF0000A 	    mov IN,#0
 1160 086a 8846     	    mov T1,r1 
ARM GAS  tinyBasic.s 			page 36


 1161 086c 3BF80A00 	    ldrh r0,[BPTR,IN]
 1162 0870 0AF1020A 	    add IN,#2 
 1163 0874 4FF00A01 	    mov r1,#10 
 1164 0878 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 0882 4146     	    mov r1,T1
 1166 0884 00B5FFF7 	    _CALL strcpy
 1166      FEFF5DF8 
 1166      04EB
 1167 088e 4046     	    mov r0,T1 
 1168 0890 00B5FFF7 	    _CALL strlen
 1168      FEFF5DF8 
 1168      04EB
 1169 089a 8044     	    add T1,r0 
 1170 089c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1171 08a0 0AF1010A 	    add IN,#1 
 1172 08a4 6060     	    str r0,[UPP,#COUNT]
 1173              	decomp_loop:
 1174 08a6 00B500F0 	    _CALL next_token
 1174      D6FA5DF8 
 1174      04EB
 1175 08b0 0028     	    cmp r0,#TK_NONE 
 1176 08b2 00F0AD80 	    beq 9f
 1177 08b6 1028     	    cmp r0,#TK_GE 
 1178 08b8 05D5     	    bpl 1f 
 1179 08ba DFF81819 	    ldr r1,=single_char 
 1180 08be 085C     	    ldrb r0,[r1,r0]
 1181 08c0 08F8010B 	    strb r0,[T1],#1 
 1182 08c4 EFE7     	    b decomp_loop
 1183              	1: 
 1184 08c6 1328     	    cmp r0,#TK_CHAR  
 1185 08c8 14D5     	    bpl 2f 
 1186 08ca A0F11000 	    sub r0,#TK_GE
 1187 08ce 4FEA8000 	    lsl r0,#2 
 1188 08d2 DFF80419 	    ldr r1,=relop_str 
 1189 08d6 0858     	    ldr r0,[r1,r0]
 1190 08d8 4146     	    mov r1,T1 
 1191 08da 00B5FFF7 	    _CALL strcpy 
 1191      FEFF5DF8 
 1191      04EB
 1192 08e4 4046     	    mov r0,T1 
 1193 08e6 00B5FFF7 	    _CALL strlen 
 1193      FEFF5DF8 
 1193      04EB
 1194 08f0 8044     	    add T1,r0 
 1195 08f2 D8E7     	    b decomp_loop
 1196 08f4 1328     	2:  cmp r0,#TK_CHAR 
 1197 08f6 06D1     	    bne 3f 
 1198 08f8 4FF05C00 	    mov r0,#'\\'
 1199 08fc 08F8010B 	    strb r0,[T1],#1
 1200 0900 08F8011B 	    strb r1,[T1],#1
 1201              	//    mov r0,#SPACE 
 1202              	//    strb r0,[T1],#1
 1203 0904 CFE7     	    b decomp_loop 
 1204 0906 1428     	3:  cmp r0,#TK_VAR 
 1205 0908 08D1     	    bne 4f 
ARM GAS  tinyBasic.s 			page 37


 1206 090a 01F14100 	    add r0,r1,'A'
 1207 090e 08F8010B 	    strb r0,[T1],#1 
 1208 0912 4FF02000 	    mov r0,#SPACE 
 1209 0916 08F8010B 	    strb r0,[T1],#1
 1210 091a C4E7     	    b decomp_loop 
 1211 091c 1A28     	4:  cmp r0,#TK_LABEL 
 1212 091e 2BD5     	    bpl 5f   
 1213 0920 03B4     	    push {r0,r1}
 1214              	//    mov r0,r1 
 1215 0922 00B5FFF7 	    _CALL cmd_name
 1215      86FF5DF8 
 1215      04EB
 1216 092c 4146     	    mov r1,T1 
 1217 092e 00B5FFF7 	    _CALL strcpy 
 1217      FEFF5DF8 
 1217      04EB
 1218 0938 4046     	    mov r0,T1 
 1219 093a 00B5FFF7 	    _CALL strlen 
 1219      FEFF5DF8 
 1219      04EB
 1220 0944 8044     	    add T1,r0
 1221 0946 03BC     	    pop {r0,r1}
 1222 0948 4FF02000 	    mov r0,#SPACE 
 1223 094c 08F8010B 	    strb r0,[T1],#1 
 1224 0950 3C29     	    cmp r1,#REM_IDX
 1225 0952 A8D1     	    bne decomp_loop 
 1226 0954 0BEB0A00 	    add r0,BPTR,IN
 1227 0958 4146     	    mov r1,T1   
 1228 095a 00B5FFF7 	    _CALL strcpy
 1228      FEFF5DF8 
 1228      04EB
 1229 0964 4046     	    mov r0,T1 
 1230 0966 00B5FFF7 	    _CALL strlen
 1230      FEFF5DF8 
 1230      04EB
 1231 0970 8044     	    add T1,r0
 1232 0972 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1233 0976 4BE0     	    b 9f 
 1234 0978 1B28     	5:  cmp r0,#TK_INTGR
 1235 097a 14D1     	    bne 6f  
 1236 097c 0846     	    mov r0,r1 
 1237 097e A169     	    ldr r1,[UPP,#BASE]
 1238 0980 00B5FFF7 	    _CALL itoa
 1238      FEFF5DF8 
 1238      04EB
 1239 098a 4146     	    mov r1,T1 
 1240 098c 00B5FFF7 	    _CALL strcpy
 1240      FEFF5DF8 
 1240      04EB
 1241 0996 4046     	    mov r0,T1 
 1242 0998 00B5FFF7 	    _CALL strlen
 1242      FEFF5DF8 
 1242      04EB
 1243 09a2 8044     	    add T1,r0 
 1244 09a4 7FE7     	    b decomp_loop 
 1245 09a6 1A28     	6:  cmp r0,#TK_LABEL
 1246 09a8 1BD1     	    bne 7f
ARM GAS  tinyBasic.s 			page 38


 1247 09aa 4FF01902 	    mov r2,#25
 1248 09ae 4FF6FF73 	    mov r3,#0xffff 
 1249 09b2 C3F6FF73 	    movt r3,#0x3fff 
 1250 09b6 01EA0301 	0:  and r1,r3 
 1251 09ba 4FEA5313 	    lsr r3,#5 
 1252 09be 31FA02F0 	    lsrs r0,r1,r2 
 1253 09c2 07D0     	    beq 2f
 1254 09c4 00F14000 	    add r0,#'@'
 1255 09c8 5B28     	    cmp r0,#'['
 1256 09ca 01D1     	    bne 1f
 1257 09cc 00F10400 	    add r0,#4 
 1258 09d0 08F8010B 	1:  strb r0,[T1],#1
 1259 09d4 053A     	2:  subs r2,#5 
 1260 09d6 EEDA     	    bge 0b
 1261 09d8 4FF02000 	    mov r0,#SPACE 
 1262 09dc 08F8010B 	    strb r0,[T1],#1  
 1263 09e0 61E7     	    b decomp_loop
 1264 09e2 4FF02200 	7:  mov r0,#'"'
 1265 09e6 08F8010B 	    strb r0,[T1],#1 
 1266 09ea 0846     	    mov r0,r1
 1267 09ec 4146     	    mov r1,T1  
 1268 09ee 00B5FFF7 	    _CALL strcpy
 1268      FEFF5DF8 
 1268      04EB
 1269 09f8 4046     	    mov r0,T1 
 1270 09fa 00B5FFF7 	    _CALL strlen 
 1270      FEFF5DF8 
 1270      04EB
 1271 0a04 8044     	    add T1,r0 
 1272 0a06 4FF02200 	    mov r0,#'"'
 1273 0a0a 08F8010B 	    strb r0,[T1],#1 
 1274 0a0e 4AE7     	    b decomp_loop
 1275 0a10 80EA0000 	9:  eor r0,r0 
 1276 0a14 88F80000 	    strb r0,[T1]
 1277 0a18 BDE80E01 	    pop {r1,r2,r3,T1}
 1278 0a1c 0846     	    mov r0,r1 
 1279 0a1e 7047     	    _RET 
 1280              	
 1281 0a20 2C0A0000 	relop_str: .word ge_str,le_str,ne_str 
 1281      2F0A0000 
 1281      320A0000 
 1282 0a2c 3E3D00   	ge_str: .asciz ">="
 1283 0a2f 3C3D00   	le_str: .asciz "<="
 1284 0a32 3C3E00   	ne_str: .asciz "<>"
 1285              	
 1286              	single_char:
 1287 0a35 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1287      2328292B 
 1287      2D2A2F25 
 1288 0a41 403D3E3C 	  .byte '@','=', '>', '<' 
 1289              	
 1290              	
 1291              	
 1292              	
 1293              	/**********************************
 1294              	  modulo 
 1295              	  compute r0 mod r1
ARM GAS  tinyBasic.s 			page 39


 1296              	  input:
 1297              	    r0   dividend
 1298              	    r1   divisor 
 1299              	  output:
 1300              	    r0   TK_INTGR 
 1301              	    r1   r0 mod r1 
 1302              	*********************************/
 1303 0a45 0000BF   	    _GBL_FUNC modulo 
 1304 0a48 01B4     	    push {r0}
 1305 0a4a B0FBF1F0 	    udiv r0,r1 
 1306 0a4e 01FB00F0 	    mul  r0,r1 
 1307 0a52 02BC     	    pop {r1}
 1308 0a54 A1EB0001 	    sub r1,r0
 1309 0a58 4FF01B00 	    mov r0,#TK_INTGR
 1310 0a5c 7047     	    _RET 
 1311              	
 1312              	/**********************************
 1313              	      BASIC commands 
 1314              	**********************************/
 1315              	
 1316              	/*********************************
 1317              	    syntax_error 
 1318              	    display syntax error message and 
 1319              	    abort program 
 1320              	  input:
 1321              	    none  
 1322              	  output: 
 1323              	    none 
 1324              	  use:
 1325              	*********************************/
 1326 0a5e 00BF     	    _FUNC syntax_error 
 1327 0a60 4FF00200 	    mov r0,#ERR_SYNTAX
 1328 0a64 00E0     	    b tb_error 
 1329              	
 1330              	/*********************************
 1331              	    tb_error 
 1332              	    display BASIC error and 
 1333              	    abort program. 
 1334              	  input:
 1335              	    r0    error code   
 1336              	  output: 
 1337              	    none 
 1338              	  use:
 1339              	    r1    temp 
 1340              	*********************************/
 1341 0a66 00BF     	    _FUNC tb_error 
 1342 0a68 216C     	    ldr r1,[UPP,#FLAGS]
 1343 0a6a 11F0200F 	    tst r1,#FCOMP
 1344 0a6e 43D1     	    bne compile_error
 1345              	rt_error:
 1346 0a70 5246     	    mov r2,IN 
 1347 0a72 01B4     	    push {r0}
 1348 0a74 DFF86407 	    ldr r0,=rt_error_msg 
 1349 0a78 00B5FFF7 	    _CALL uart_puts 
 1349      FEFF5DF8 
 1349      04EB
 1350 0a82 01BC     	    pop {r0}
ARM GAS  tinyBasic.s 			page 40


 1351 0a84 DFF85817 	    ldr r1,=err_msg  
 1352 0a88 4FEA8000 	    lsl r0,#2 
 1353 0a8c 0858     	    ldr r0,[r1,r0]
 1354 0a8e 00B5FFF7 	    _CALL uart_puts
 1354      FEFF5DF8 
 1354      04EB
 1355              	// decompile and print faulty line      
 1356 0a98 5846     	    mov r0,BPTR
 1357 0a9a 5246     	    mov r2,IN  
 1358 0a9c DFF81413 	    ldr r1,pad 
 1359 0aa0 00B5FFF7 	    _CALL decompile_line
 1359      FEFF5DF8 
 1359      04EB
 1360 0aaa 00B5FFF7 	    _CALL uart_puts 
 1360      FEFF5DF8 
 1360      04EB
 1361 0ab4 00B5FFF7 	    _CALL cr 
 1361      FEFF5DF8 
 1361      04EB
 1362              	// print error offset on line      
 1363 0abe DFF82407 	    ldr r0,=token_at_msg 
 1364 0ac2 00B5FFF7 	    _CALL uart_puts 
 1364      FEFF5DF8 
 1364      04EB
 1365 0acc 1046     	    mov r0,r2 
 1366 0ace 4FF01001 	    mov r1,#16 
 1367 0ad2 00B5FFF7 	    _CALL print_int
 1367      FEFF5DF8 
 1367      04EB
 1368 0adc 00B5FFF7 	    _CALL cr
 1368      FEFF5DF8 
 1368      04EB
 1369              	// dump tokenize line 
 1370 0ae6 5846     	    mov r0,BPTR
 1371 0ae8 8278     	    ldrb r2,[r0,#2]
 1372 0aea 00B500F0 	    _CALL dump01 
 1372      32FA5DF8 
 1372      04EB
 1373 0af4 FFF7FEBF 	    b warm_start 
 1374              	compile_error:
 1375 0af8 DFF8E416 	    ldr r1,=err_msg 
 1376 0afc 4FEA8000 	    lsl r0,#2 
 1377 0b00 0858     	    ldr r0,[r1,r0]
 1378 0b02 00B5FFF7 	    _CALL uart_puts
 1378      FEFF5DF8 
 1378      04EB
 1379 0b0c A068     	    ldr r0,[UPP,#BASICPTR]
 1380 0b0e 00B5FFF7 	    _CALL uart_puts
 1380      FEFF5DF8 
 1380      04EB
 1381 0b18 00B5FFF7 	    _CALL cr
 1381      FEFF5DF8 
 1381      04EB
 1382 0b22 2068     	    ldr r0,[UPP,#IN_SAVED]
 1383 0b24 00B5FFF7 	    _CALL spaces 
 1383      FEFF5DF8 
 1383      04EB
ARM GAS  tinyBasic.s 			page 41


 1384 0b2e 4FF05E00 	    mov r0,#'^' 
 1385 0b32 00B5FFF7 	    _CALL uart_putc
 1385      FEFF5DF8 
 1385      04EB
 1386 0b3c 00B5FFF7 	    _CALL cr
 1386      FEFF5DF8 
 1386      04EB
 1387 0b46 FFF7FEBF 	    b  warm_start  
 1388              	    
 1389 0b4a 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1389      74696D65 
 1389      20657272 
 1389      6F723A20 
 1389      00
 1390 0b5b 746F6B65 	token_at_msg: .asciz "token offset: "
 1390      6E206F66 
 1390      66736574 
 1390      3A2000
 1391              	
 1392              	
 1393              	err_msg:
 1394 0b6a 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1394      00000000 
 1394      0D000000 
 1394      1B000000 
 1394      34000000 
 1395 0b82 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1395      6F000000 
 1395      89000000 
 1395      9A000000 
 1395      AB000000 
 1396 0b96 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1396      EA000000 
 1396      FA000000 
 1396      0E010000 
 1396      21010000 
 1397 0baa 2E010000 	   .word err_cant_prog 
 1398              	
 1399              	    .section .rodata.tb_error 
 1400              	
 1401 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1401      72792066 
 1401      756C6C0A 
 1401      00
 1402 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1402      61782065 
 1402      72726F72 
 1402      0A00
 1403 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1403      206F7065 
 1403      72617469 
 1403      6F6E206F 
 1403      76657266 
 1404 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1404      73696F6E 
 1404      20627920 
 1404      300A00
ARM GAS  tinyBasic.s 			page 42


 1405 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1405      6C696420 
 1405      6C696E65 
 1405      206E756D 
 1405      6265722E 
 1406 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1406      74696D65 
 1406      206F6E6C 
 1406      79207573 
 1406      6167652E 
 1407 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1407      616E6420 
 1407      6C696E65 
 1407      206F6E6C 
 1407      79207573 
 1408 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1408      69636174 
 1408      65206E61 
 1408      6D652E0A 
 1408      00
 1409 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1409      206E6F74 
 1409      20666F75 
 1409      6E642E0A 
 1409      00
 1410 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1410      76616C75 
 1410      652E0A00 
 1411 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1411      20696E20 
 1411      65787465 
 1411      6E646564 
 1411      206D656D 
 1412 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1412      61746120 
 1412      666F756E 
 1412      642E0A00 
 1413 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1413      726F6772 
 1413      616D2069 
 1413      6E205241 
 1413      4D210A00 
 1414 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1414      20737973 
 1414      74656D20 
 1414      66756C6C 
 1414      2E0A00
 1415 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1415      65722066 
 1415      756C6C0A 
 1415      00
 1416 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1416      74206D6F 
 1416      64696679 
 1416      2070726F 
 1416      6772616D 
 1417              	
ARM GAS  tinyBasic.s 			page 43


 1418 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1418      2074696D 
 1418      65206572 
 1418      726F722C 
 1418      2000
 1419 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1419      70696C65 
 1419      20657272 
 1419      6F722C20 
 1419      00
 1420 018d 6C617374 	tk_id: .asciz "last token id: "
 1420      20746F6B 
 1420      656E2069 
 1420      643A2000 
 1421              	
 1422              	
 1423              	    .section  .text , "ax", %progbits 
 1424              	
 1425              	/*********************************
 1426              	   skip_line 
 1427              	   data and remark line are skipped
 1428              	   by the interpreter 
 1429              	***********************************/
 1430 0bae 00BF     	    _FUNC skip_line 
 1431 0bb0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1432 0bb4 7047     	    _RET 
 1433              	
 1434              	
 1435              	/*********************************
 1436              	   BASIC: BTGL adr, mask   
 1437              	   toggle bits [adr]=[adr]^mask  
 1438              	   input:
 1439              	     r0    adr 
 1440              	     r1    mask 
 1441              	    output;
 1442              	      none 
 1443              	    use:
 1444              	      T1   temp
 1445              	      T2   temp  
 1446              	*******************************/     
 1447 0bb6 00BF     	    _FUNC BTGL 
 1448              	
 1449 0bb8 7047     	    _RET 
 1450              	
 1451              	/***************************************
 1452              	   kword_cmp
 1453              	   compare keyword to dict entry
 1454              	  input:
 1455              	    r0  keyword 
 1456              	    r1  dict entry 
 1457              	    r2  character count 
 1458              	  output:
 1459              	    r0  0 not same | -1 same 
 1460              	  use:
 1461              	    r6   result  
 1462              	    T1   char 1
 1463              	    T2   char 2
ARM GAS  tinyBasic.s 			page 44


 1464              	**************************************/   
 1465 0bba 00BF     	    _FUNC kword_cmp 
 1466 0bbc 2DE94003 	    push {r6,T1,T2}
 1467 0bc0 4FF0FF36 	    mov r6,#-1 
 1468 0bc4 4AB1     	1:  cbz r2,9f       
 1469 0bc6 10F8018B 	    ldrb T1,[r0],#1
 1470 0bca 11F8019B 	    ldrb T2,[r1],#1
 1471 0bce A2F10102 	    sub r2,#1
 1472 0bd2 C845     	    cmp T1,T2
 1473 0bd4 F6D0     	    beq 1b 
 1474 0bd6 86EA0606 	    eor r6,r6  
 1475 0bda 3046     	9:  mov r0,r6
 1476 0bdc BDE84003 	    pop {r6,T1,T2}
 1477 0be0 7047     	    _RET 
 1478              	
 1479              	/***********************************************
 1480              	    search_dict 
 1481              	    search keyword in dictionary
 1482              	   input:
 1483              	  	 r0   keyword 
 1484              	     r1		dictionary first name field address  
 1485              	   output:
 1486              	     r0 		token attribute 
 1487              	     r1		  cmd_index if r0!=TK_NONE  
 1488              	   use:
 1489              	     r3   length keyword 
 1490              	     T1   keyword
 1491              	     T2   link  
 1492              	**********************************************/
 1493 0be2 00BF     	  _FUNC search_dict
 1494 0be4 2DE90C03 	  push {r2,r3,T1,T2}
 1495 0be8 8046     	  mov T1,r0 
 1496 0bea 00B5FFF7 	  _CALL strlen 
 1496      FEFF5DF8 
 1496      04EB
 1497 0bf4 0346     	  mov r3,r0  
 1498              	1:  
 1499 0bf6 8946     	   mov T2,r1  // keep for linking   
 1500 0bf8 0878     	   ldrb r0,[r1] 
 1501 0bfa 78B1     	   cbz r0,9f // null byte, end of dictionary
 1502 0bfc 4046     	   mov r0,T1
 1503 0bfe 1A46     	   mov r2,r3   
 1504 0c00 00B5FFF7 	   _CALL kword_cmp  
 1504      DBFF5DF8 
 1504      04EB
 1505 0c0a 18B9     	   cbnz r0,2f 
 1506 0c0c 4946     	   mov r1,T2
 1507 0c0e 51F80C1C 	   ldr r1,[r1,#-12]
 1508 0c12 F0E7     	   b 1b   
 1509              	2: // found
 1510 0c14 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1511 0c18 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1512 0c1c BDE80C03 	9: pop {r2,r3,T1,T2}
 1513 0c20 7047     	   _RET 
 1514              	
 1515              	
 1516              	/**************************
ARM GAS  tinyBasic.s 			page 45


 1517              	    INTERPRETER 
 1518              	*************************/
 1519              	
 1520              	/*********************************
 1521              	   cold_start 
 1522              	   initialize BASIC interpreter 
 1523              	   never leave 
 1524              	   input:
 1525              	     none 
 1526              	   output:
 1527              	    none 
 1528              	*********************************/
 1529              	  .type cold_start, %function 
 1530              	  .global cold_start 
 1531              	cold_start: 
 1532 0c22 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1532      C2F20004 
 1533 0c2a DFF85E00 	    ldr r0,src_addr 
 1534 0c2e DFF85E10 	    ldr r1,dest_addr
 1535 0c32 0968     	    ldr r1,[r1] 
 1536 0c34 0C44     	    add UPP,r1 // system variables base address   
 1537              	// clear RAM
 1538 0c36 2046     	    mov r0,UPP  
 1539 0c38 DFF87411 	    ldr r1,tib 
 1540 0c3c 82EA0202 	    eor r2,r2 
 1541 0c40 40F8042B 	1:  str r2,[r0],#4 
 1542 0c44 8842     	    cmp r0,r1 
 1543 0c46 FBD4     	    bmi 1b 
 1544              	//copy initialized system variables to ram 
 1545 0c48 DFF83E00 	    ldr r0,src_addr 
 1546 0c4c 2146     	    mov r1,UPP 
 1547 0c4e DFF84220 	    ldr r2,sysvar_size
 1548 0c52 00B5FFF7 	    _CALL cmove
 1548      FEFF5DF8 
 1548      04EB
 1549 0c5c 00B500F0 	    _CALL prt_version
 1549      1BF85DF8 
 1549      04EB
 1550 0c66 00B500F0 	    _CALL clear_basic 
 1550      68F85DF8 
 1550      04EB
 1551 0c70 00B5FFF7 	    _CALL search_free 
 1551      FEFF5DF8 
 1551      04EB
 1552 0c7a E062     	    str r0,[UPP,#FSFREE]
 1553 0c7c 00B5FFF7 	    _CALL exec_autorun  
 1553      FEFF5DF8 
 1553      04EB
 1554 0c86 FFF7FEBF 	    b warm_start    
 1555              	src_addr:
 1556 0c8a 00000000 	  .word uzero
 1557              	dest_addr:
 1558 0c8e 00000000 	  .word vectors_size
 1559 0c92 D4000000 	sysvar_size: .word ulast-uzero 
 1560              	
 1561              	/************************************
 1562              	    print firmware version 
ARM GAS  tinyBasic.s 			page 46


 1563              	    input: 
 1564              	      none 
 1565              	    output:
 1566              	      none 
 1567              	    use:
 1568              	      r0 
 1569              	***********************************/
 1570 0c96 00BF     	    _FUNC prt_version 
 1571 0c98 DFF84C05 	    ldr r0,=version_msg 
 1572 0c9c 00B5FFF7 	    _CALL uart_puts
 1572      FEFF5DF8 
 1572      04EB
 1573 0ca6 9FF87400 	    ldrb r0,version 
 1574 0caa 4FEA1010 	    lsr r0,#4 
 1575 0cae 00F13000 	    add r0,#'0' 
 1576 0cb2 3A28     	    cmp r0,#'9'+1 
 1577 0cb4 01D4     	    bmi 1f 
 1578 0cb6 00F10700 	    add r0,#7 
 1579              	  1:
 1580 0cba 00B5FFF7 	    _CALL uart_putc 
 1580      FEFF5DF8 
 1580      04EB
 1581 0cc4 4FF02E00 	    mov r0,#'. 
 1582 0cc8 00B5FFF7 	    _CALL uart_putc 
 1582      FEFF5DF8 
 1582      04EB
 1583 0cd2 9FF84800 	    ldrb r0,version 
 1584 0cd6 00F00F00 	    and r0,#15 
 1585 0cda 00F13000 	    add r0,'0' 
 1586 0cde 3A28     	    cmp r0,#'9'+1 
 1587 0ce0 01D4     	    bmi 1f 
 1588 0ce2 00F10700 	    add r0,#7
 1589              	  1: 
 1590 0ce6 00B5FFF7 	    _CALL uart_putc 
 1590      FEFF5DF8 
 1590      04EB
 1591 0cf0 00B5FFF7 	    _CALL cr
 1591      FEFF5DF8 
 1591      04EB
 1592 0cfa 7047     	    _RET  
 1593              	version_msg:
 1594 0cfc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1594      65207069 
 1594      6C6C2074 
 1594      696E7920 
 1594      42415349 
 1595              	version:
 1596 0d1c 10       	    .byte 0x10 
 1597 0d1d 0000BF   	    .p2align 2 
 1598              	
 1599              	
 1600              	/*****************************
 1601              	    clear_vars 
 1602              	    initialize variables to 0
 1603              	  input:
 1604              	    none 
 1605              	  output:
ARM GAS  tinyBasic.s 			page 47


 1606              	    none 
 1607              	  use:
 1608              	    r0,r1,r2 
 1609              	*****************************/
 1610              	    _FUNC clear_vars 
 1611 0d20 07B4     	    push {r0,r1,r2}
 1612 0d22 80EA0000 	    eor r0,r0 
 1613 0d26 04F16001 	    add r1,UPP,#VARS
 1614 0d2a 4FF01A02 	    mov r2,#26
 1615 0d2e 41F8040B 	1:  str r0,[r1],#4 
 1616 0d32 013A     	    subs r2,#1
 1617 0d34 FBD1     	    bne 1b  
 1618 0d36 07BC     	    pop {r0,r1,r2}
 1619 0d38 7047     	    _RET 
 1620              	
 1621              	/*****************************
 1622              	   clear_basic 
 1623              	   reset BASIC system variables 
 1624              	   and clear variables and RAM 
 1625              	*****************************/
 1626 0d3a 00BF     	    _FUNC clear_basic
 1627 0d3c 80EA0000 	  	eor r0,r0
 1628 0d40 2064     	    str r0,[UPP,#FLAGS] 
 1629 0d42 6060     	    str r0,[UPP,#COUNT]
 1630 0d44 2060     	    str r0,[UPP,#IN_SAVED]
 1631 0d46 A060     	    str r0,[UPP,#BASICPTR]
 1632 0d48 E060     	    str r0,[UPP,#DATAPTR]
 1633 0d4a 2061     	    str r0,[UPP,#DATA]
 1634 0d4c 6061     	    str r0,[UPP,#DATALEN]
 1635 0d4e 04F1D000 	    add r0,UPP,#BASIC_START 
 1636 0d52 00F11000 	    add r0,#16 
 1637 0d56 6FF00F01 	    mvn r1,#15
 1638 0d5a 00EA0100 	    and r0,r1 
 1639 0d5e 2063     	    str r0,[UPP,#TXTBGN]
 1640 0d60 6063     	    str r0,[UPP,#TXTEND]
 1641 0d62 C4F8D000 	    str r0,[UPP,#HERE]
 1642 0d66 00B5FFF7 	    _CALL clear_vars
 1642      DAFF5DF8 
 1642      04EB
 1643 0d70 206B     	    ldr r0,[UPP,#TXTBGN]
 1644 0d72 DFF83C10 	    ldr r1,tib 
 1645 0d76 82EA0202 	    eor r2,r2 
 1646 0d7a 40F8042B 	1:  str r2,[r0],#4
 1647 0d7e 8842     	    cmp r0,r1 
 1648 0d80 FBD4     	    bmi 1b 
 1649 0d82 7047     	    _RET  
 1650              	
 1651              	/***********************************
 1652              	   warm_init 
 1653              	   initialize interpreter context 
 1654              	  input:
 1655              	    none
 1656              	  output:
 1657              	    none 
 1658              	  use:
 1659              	    r0 
 1660              	***********************************/
ARM GAS  tinyBasic.s 			page 48


 1661              	warm_init:
 1662              	// reset data stack       
 1663 0d84 DFF824C0 	    ldr DP,dstack 
 1664 0d88 4FF0000A 	    mov IN,#0 // BASIC line index 
 1665 0d8c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1666 0d90 80EA0000 	    eor r0,r0 
 1667 0d94 6060     	    str r0,[UPP,#COUNT]  
 1668 0d96 2064     	    str r0,[UPP,#FLAGS]
 1669 0d98 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1670 0d9a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1671 0d9e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1672 0da0 4FF00A00 	    mov r0,#10 // default base decimal 
 1673 0da4 A061     	    str r0,[UPP,#BASE]
 1674 0da6 7047     	    _RET  
 1675              	
 1676 0da8 00000000 	mstack: .word _mstack 
 1677 0dac 00000000 	dstack: .word _dstack 
 1678 0db0 00000000 	tib: .word _tib 
 1679 0db4 00000000 	pad: .word _pad 
 1680 0db8 FCFFFFFF 	array: .word _pad - 4 
 1681 0dbc 0A524541 	ready: .asciz "\nREADY" 
 1681      445900
 1682              	
 1683              	/**********************************
 1684              	    warm_start 
 1685              	    start BASIC interpreter doesn't  
 1686              	    reset variables and code space 
 1687              	  input:
 1688              	    none 
 1689              	  output:
 1690              	    none 
 1691              	**********************************/
 1692 0dc3 00       	    _GBL_FUNC warm_start 
 1693              	// initialise parameters stack
 1694 0dc4 FFF7DEFF 	    bl warm_init
 1695              	// reset main stack 
 1696 0dc8 5FF82400 	    ldr r0,mstack
 1697 0dcc 8546     	    mov sp,r0 
 1698 0dce DFF81C04 	    ldr r0,=ready 
 1699 0dd2 00B5FFF7 	    _CALL uart_puts 
 1699      FEFF5DF8 
 1699      04EB
 1700              	// fall in cmd_line 
 1701              	
 1702              	/**********************************
 1703              	   cmd_line 
 1704              	   shell command line 
 1705              	   input:
 1706              	      none 
 1707              	   output:
 1708              	      none 
 1709              	   use:
 1710              	
 1711              	***********************************/
 1712              	    _FUNC cmd_line 
 1713 0ddc 00B5FFF7 	    _CALL cr
 1713      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 49


 1713      04EB
 1714 0de6 80EA0000 	    eor r0,r0 
 1715 0dea C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1716 0dee 5FF84000 	1:  ldr r0,tib
 1717 0df2 4FF05001 	    mov r1,#TIB_SIZE 
 1718 0df6 00B5FFF7 	    _CALL readln 
 1718      FEFF5DF8 
 1718      04EB
 1719 0e00 0940     	    ands r1,r1 // empty line 
 1720 0e02 F4D0     	    beq 1b 
 1721 0e04 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1721      D7FA5DF8 
 1721      04EB
 1722 0e0e EED0     	    beq 1b  // tokens stored in text area 
 1723              	// interpret tokenized line 
 1724              	interpreter:
 1725 0e10 00B500F0 	  _CALL next_token 
 1725      21F85DF8 
 1725      04EB
 1726 0e1a 0228     	  cmp r0,#2
 1727 0e1c F8D4     	  bmi interpreter    
 1728 0e1e 1A28     	  cmp r0,#TK_LABEL 
 1729 0e20 F6D0     	  beq interpreter 
 1730 0e22 1728     	  cmp r0,#TK_CMD 
 1731 0e24 03D1     	  bne 2f
 1732 0e26 0846     	  mov r0,r1 
 1733 0e28 00F012F8 	  bl execute  
 1734 0e2c F0E7     	  b interpreter   
 1735              	2: 
 1736 0e2e 1428     	  cmp r0,#TK_VAR 
 1737 0e30 05D1     	  bne 3f 
 1738 0e32 00B500F0 	  _CALL let_var 
 1738      D7FB5DF8 
 1738      04EB
 1739 0e3c E8E7     	  b interpreter 
 1740              	3: 
 1741 0e3e 0C28     	  cmp r0,#TK_ARRAY 
 1742 0e40 05D1     	  bne 4f
 1743 0e42 00B500F0 	  _CALL let_array 
 1743      DDFB5DF8 
 1743      04EB
 1744 0e4c E0E7     	  b interpreter
 1745              	4: 
 1746 0e4e 07E6     	  b syntax_error
 1747              	
 1748              	/*****************************
 1749              	    execute 
 1750              	    execute a BASIC routine from 
 1751              	    its token value 
 1752              	  input:
 1753              	    r0  BASIC SUB|FUNC token  
 1754              	  output: 
 1755              	    depend on SUB|FUNc
 1756              	*****************************/
 1757              	    _FUNC execute 
 1758 0e50 E749     	    ldr r1,=fn_table 
 1759 0e52 51F82000 	    ldr r0,[r1,r0,lsl #2]
ARM GAS  tinyBasic.s 			page 50


 1760 0e56 0047     	    bx r0 
 1761              	
 1762              	/*************************************
 1763              	  next_token 
 1764              	  extract next token from token list 
 1765              	  input:
 1766              	    none 
 1767              	  output:
 1768              	    r0    token attribute
 1769              	    r1    token value if there is one 
 1770              	  use:
 1771              	    T1    exit token type  
 1772              	****************************/
 1773              	    _FUNC next_token 
 1774 0e58 6068     	    ldr r0,[UPP,#COUNT]
 1775 0e5a 8245     	    cmp IN,r0 
 1776 0e5c 11D4     	    bmi 0f
 1777              	// reached end of line skip to next one 
 1778 0e5e 8344     	    add BPTR,r0 // next line 
 1779 0e60 606B     	    ldr r0,[UPP,#TXTEND]
 1780 0e62 8345     	    cmp BPTR,r0 
 1781 0e64 7FF5FEAF 	    bpl warm_start // end of program
 1782 0e68 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1783 0e6c 6060     	    str r0,[UPP,#COUNT] 
 1784 0e6e 4FF0030A 	    mov IN,#3
 1785 0e72 00B5FFF7 	    _CALL show_trace
 1785      BAF95DF8 
 1785      04EB
 1786 0e7c 80EA0000 	    eor r0,r0
 1787 0e80 7047     	    _RET 
 1788              	0: 
 1789 0e82 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1790 0e86 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1791 0e8a 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1792 0e8e 0AF1010A 	    add IN,#1  
 1793 0e92 1328     	    cmp r0,#TK_CHAR 
 1794 0e94 1AD4     	    bmi 9f // these tokens have no value  
 1795 0e96 1828     	    cmp r0,#TK_SCONST 
 1796 0e98 04D5     	    bpl 1f
 1797              	    // tokens with .byte value 
 1798 0e9a 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1799 0e9e 0AF1010A 	    add IN,#1 
 1800 0ea2 7047     	    _RET  
 1801 0ea4 1C28     	1:  cmp r0,#TK_QSTR 
 1802 0ea6 0DD1     	    bne 2f 
 1803 0ea8 0BEB0A01 	    add r1,BPTR,IN
 1804 0eac 0846     	    mov r0,r1 
 1805 0eae 00B5FFF7 	    _CALL strlen 
 1805      FEFF5DF8 
 1805      04EB
 1806 0eb8 8244     	    add IN,r0 
 1807 0eba 0AF1010A 	    add IN,#1
 1808 0ebe 4FF01C00 	    mov r0,#TK_QSTR 
 1809 0ec2 7047     	    _RET  
 1810              	2:  // .word value 
 1811 0ec4 5BF80A10 	    ldr r1,[BPTR,IN] 
 1812 0ec8 0AF1040A 	    add IN,#4 
ARM GAS  tinyBasic.s 			page 51


 1813 0ecc 7047     	9:  _RET
 1814              	
 1815              	
 1816              	/*********************************
 1817              	    expect 
 1818              	    check if next token is of 
 1819              	    expected type. If not 
 1820              	    call syntax_error  
 1821              	  input:
 1822              	      r0   token attribute
 1823              	  output:
 1824              	      r0  token attribute 
 1825              	      r1  token value
 1826              	  use:
 1827              	      T1   
 1828              	**********************************/
 1829 0ece 00BF     	    _FUNC expect 
 1830 0ed0 4DF8048D 	    push {T1}
 1831 0ed4 8046     	    mov T1,r0 
 1832 0ed6 00B5FFF7 	    _CALL next_token 
 1832      BEFF5DF8 
 1832      04EB
 1833 0ee0 4045     	    cmp r0,T1  
 1834 0ee2 7FF4BDAD 	    bne syntax_error 
 1835 0ee6 5DF8048B 	    pop {T1}
 1836 0eea 7047     	    _RET 
 1837              	
 1838              	/***********************************
 1839              	    func_args 
 1840              	    get function arguments list 
 1841              	  input:
 1842              	    none 
 1843              	  output:
 1844              	    r0    arg. count 
 1845              	  use:
 1846              	
 1847              	************************************/
 1848              	    _FUNC func_args 
 1849 0eec 4FF00500 	    mov r0,#TK_LPAREN 
 1850 0ef0 00B5FFF7 	    _CALL expect 
 1850      EDFF5DF8 
 1850      04EB
 1851 0efa 00B500F0 	    _CALL arg_list 
 1851      0CF85DF8 
 1851      04EB
 1852 0f04 01B4     	    push {r0}
 1853 0f06 4FF00600 	    mov r0,#TK_RPAREN 
 1854 0f0a 00B5FFF7 	    _CALL expect 
 1854      E0FF5DF8 
 1854      04EB
 1855 0f14 01BC     	    pop {r0}
 1856 0f16 7047     	    _RET 
 1857              	
 1858              	/**********************************
 1859              	    arg_list 
 1860              	    get arguments list on dstack 
 1861              	  input:
ARM GAS  tinyBasic.s 			page 52


 1862              	    none 
 1863              	  output:
 1864              	    r0    arg count
 1865              	  use:
 1866              	    T1    tmp count  
 1867              	***********************************/
 1868              	    _FUNC arg_list 
 1869 0f18 4DF8048D 	    push {T1}
 1870 0f1c 88EA0808 	    eor T1,T1 
 1871 0f20 00B500F0 	1:  _CALL expression 
 1871      BDF85DF8 
 1871      04EB
 1872 0f2a 1B28     	    cmp R0,#TK_INTGR  
 1873 0f2c 0AD1     	    bne 2f
 1874 0f2e 4CF8041D 	    _PUSH r1 
 1875 0f32 08F10108 	    add T1,#1 
 1876 0f36 00B5FFF7 	    _CALL next_token 
 1876      8EFF5DF8 
 1876      04EB
 1877 0f40 0228     	    cmp r0,#TK_COMMA 
 1878 0f42 EDD0     	    beq 1b 
 1879 0f44 D4F800A0 	2:  _UNGET_TOKEN 
 1879      D4F808B0 
 1880 0f4c 4046     	9:  mov r0,T1 
 1881 0f4e 5DF8048B 	    pop {T1}
 1882 0f52 7047     	    _RET 
 1883              	
 1884              	
 1885              	/***********************************
 1886              	 factor
 1887              	 arithmetick factor parser 
 1888              	 factor ::= ['+'|'-'|e]  var | @ |
 1889              				 integer | function |
 1890              				 '('expression')' 
 1891              	  input: 
 1892              	    none 
 1893              	  output:
 1894              	    r0   token attribute 
 1895              	    r1   token value 
 1896              	  use:
 1897              	    r2   temp 
 1898              	    r3   sign 
 1899              	***********************************/
 1900              	    _FUNC factor 
 1901 0f54 0CB4     	    push {r2,r3}
 1902 0f56 00B5FFF7 	    _CALL next_token
 1902      7EFF5DF8 
 1902      04EB
 1903 0f60 4FF00103 	    mov r3,#1 // default sign +  
 1904 0f64 0828     	    cmp r0,#TK_MINUS  
 1905 0f66 06D1     	    bne 1f 
 1906 0f68 4FF0FF33 	    mov r3,#-1 // minus sign 
 1907 0f6c 00B5FFF7 	0:  _CALL next_token
 1907      73FF5DF8 
 1907      04EB
 1908 0f76 1B28     	1:  cmp r0,#TK_INTGR 
 1909 0f78 55D0     	    beq 8f 
ARM GAS  tinyBasic.s 			page 53


 1910 0f7a 0C28     	    cmp r0,#TK_ARRAY 
 1911 0f7c 1DD1     	    bne 2f 
 1912 0f7e 4FF00500 	    mov r0,#TK_LPAREN 
 1913 0f82 00B5FFF7 	    _CALL expect 
 1913      A4FF5DF8 
 1913      04EB
 1914 0f8c 00B500F0 	    _CALL expression
 1914      87F85DF8 
 1914      04EB
 1915 0f96 1B28     	    cmp r0,#TK_INTGR
 1916 0f98 7FF462AD 	    bne syntax_error
 1917 0f9c 0A46     	    mov r2,r1  
 1918 0f9e 4FF00600 	    mov r0,#TK_RPAREN
 1919 0fa2 00B5FFF7 	    _CALL expect 
 1919      94FF5DF8 
 1919      04EB
 1920 0fac 1046     	    mov r0,r2 
 1921 0fae 00B500F0 	    _CALL get_array_element 
 1921      E2F85DF8 
 1921      04EB
 1922 0fb8 35E0     	    b 8f
 1923 0fba 0528     	2:  cmp r0,#TK_LPAREN 
 1924 0fbc 13D1     	    bne 3f 
 1925 0fbe 00B500F0 	    _CALL expression 
 1925      6EF85DF8 
 1925      04EB
 1926 0fc8 1B28     	    cmp r0,#TK_INTGR 
 1927 0fca 7FF449AD 	    bne syntax_error
 1928 0fce 0A46     	    mov r2,r1   
 1929 0fd0 4FF00600 	    mov r0,#TK_RPAREN
 1930 0fd4 00B5FFF7 	    _CALL expect 
 1930      7BFF5DF8 
 1930      04EB
 1931 0fde 1146     	    mov r1,r2 
 1932 0fe0 4FF01B00 	    mov r0,#TK_INTGR
 1933 0fe4 1FE0     	    b 8f       
 1934 0fe6 1428     	3:  cmp r0,#TK_VAR 
 1935 0fe8 06D1     	    bne 4f
 1936 0fea 0846     	    mov r0,r1  
 1937 0fec 00B500F0 	    _CALL get_var 
 1937      D7F85DF8 
 1937      04EB
 1938 0ff6 16E0     	    b 8f 
 1939 0ff8 1528     	4:  cmp r0,#TK_IFUNC 
 1940 0ffa 06D1     	    bne 6f 
 1941 0ffc 0846     	5:  mov r0,r1  
 1942 0ffe 00B5FFF7 	    _CALL execute
 1942      26FF5DF8 
 1942      04EB
 1943 1008 0DE0     	    b 8f 
 1944 100a 1A28     	6:  cmp r0,#TK_LABEL
 1945 100c 07D1     	    bne 7f 
 1946 100e 41F00040 	    orr r0,r1,#(1<<31) 
 1947 1012 00B5FFF7 	    _CALL search_const
 1947      42F95DF8 
 1947      04EB
 1948 101c 03E0     	    b 8f 
ARM GAS  tinyBasic.s 			page 54


 1949 101e 1828     	7:  cmp r0,#TK_SCONST 
 1950 1020 03D1     	    bne 9f 
 1951 1022 4FF01B00 	    mov r0,#TK_INTGR
 1952 1026 03FB01F1 	8:  mul r1,r3 
 1953 102a 0CBC     	9:  pop {r2,r3}   
 1954 102c 7047     	    _RET 
 1955              	
 1956              	
 1957              	/*****************************************
 1958              	    term 
 1959              	    term parser 
 1960              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1961              	    output:
 1962              	      r0  	token attribute 
 1963              	      r1		integer
 1964              	    use:
 1965              	      r2    first factor 
 1966              	      r3    operator *|/|%
 1967              	******************************************/
 1968 102e 00BF     	    _FUNC term 
 1969 1030 00B5FFF7 	    _CALL factor
 1969      8FFF5DF8 
 1969      04EB
 1970 103a 1B28     	    cmp r0,#TK_INTGR
 1971 103c 00D0     	    beq 0f 
 1972 103e 7047     	    _RET // not a factor    
 1973 1040 0CB4     	0:  push {r2,r3}
 1974 1042 0A46     	    mov r2,r1 // first factor    
 1975 1044 00B5FFF7 	0:  _CALL next_token
 1975      07FF5DF8 
 1975      04EB
 1976 104e 0346     	    mov r3,r0  // operator 
 1977 1050 0928     	    cmp r0,TK_MULT
 1978 1052 01D4     	    bmi 1f 
 1979 1054 0C28     	    cmp r0,#TK_MOD+1
 1980 1056 06D4     	    bmi 2f
 1981 1058 D4F800A0 	1:  _UNGET_TOKEN
 1981      D4F808B0 
 1982 1060 4FF01B00 	    mov r0,#TK_INTGR
 1983 1064 19E0     	    b 9f 
 1984 1066 00B5FFF7 	2:  _CALL factor
 1984      74FF5DF8 
 1984      04EB
 1985 1070 1B28     	    cmp r0,#TK_INTGR
 1986 1072 7FF4F5AC 	    bne syntax_error 
 1987 1076 092B     	    cmp r3,#TK_MULT
 1988 1078 02D1     	    bne 3f 
 1989              	// multiplication
 1990 107a 01FB02F2 	    mul r2,r1
 1991 107e E1E7     	    b 0b  
 1992 1080 0A2B     	3:  cmp r3,#TK_DIV 
 1993 1082 02D1     	    bne 4f
 1994              	// division
 1995 1084 92FBF1F2 	    sdiv r2,r2,r1
 1996 1088 DCE7     	    b 0b  
 1997              	4: // modulo
 1998 108a 1046     	    mov r0,r2 
ARM GAS  tinyBasic.s 			page 55


 1999 108c 92FBF1F2 	    sdiv r2,r2,r1 
 2000 1090 01FB02F2 	    mul  r2,r1 
 2001 1094 A0EB0202 	    sub  r2,r0,r2
 2002 1098 D4E7     	    b 0b  
 2003 109a 1146     	9:  mov r1,r2 
 2004 109c 0CBC     	    pop {r2,r3}
 2005 109e 7047     	    _RET 
 2006              	
 2007              	/*****************************************
 2008              	    expression 
 2009              	    arithmetic expression parser 
 2010              	    expression ::= term [['+'|'-'] term]*
 2011              	    result range {-32768..32767}
 2012              	    output:
 2013              	      r0    TK_NONE || TK_INTGR 
 2014              	      r1 	  integer
 2015              	    use:
 2016              	      r2  left term 
 2017              	      r3  operator +|-
 2018              	******************************************/
 2019              	    _FUNC expression 
 2020 10a0 00B5FFF7 	    _CALL term 
 2020      C5FF5DF8 
 2020      04EB
 2021 10aa 1B28     	    cmp r0,#TK_INTGR 
 2022 10ac 00D0     	    beq 0f 
 2023 10ae 7047     	    _RET   
 2024 10b0 0CB4     	0:  push {r2,r3}
 2025 10b2 0A46     	    mov r2,r1 // first term
 2026 10b4 00B5FFF7 	1:  _CALL next_token 
 2026      CFFE5DF8 
 2026      04EB
 2027 10be 0346     	    mov r3,r0 //  +|-
 2028 10c0 0728     	    cmp r0,#TK_PLUS 
 2029 10c2 08D0     	    beq 3f 
 2030 10c4 0828     	    cmp r0,#TK_MINUS  
 2031 10c6 06D0     	    beq 3f
 2032 10c8 D4F800A0 	    _UNGET_TOKEN 
 2032      D4F808B0 
 2033 10d0 4FF01B00 	    mov r0,#TK_INTGR
 2034 10d4 0EE0     	    b 9f 
 2035 10d6 00B5FFF7 	3:  _CALL term 
 2035      AAFF5DF8 
 2035      04EB
 2036 10e0 1B28     	    cmp r0,#TK_INTGR 
 2037 10e2 7FF4BDAC 	    bne syntax_error 
 2038 10e6 072B     	    cmp r3,#TK_PLUS 
 2039 10e8 02D0     	    beq 4f 
 2040 10ea A2EB0102 	    sub r2,r1 // term1-term2  
 2041 10ee E1E7     	    b 1b 
 2042 10f0 0A44     	4:  add r2,r1 // term1+term2
 2043 10f2 DFE7     	    b 1b
 2044 10f4 1146     	9:  mov r1,r2 
 2045 10f6 0CBC     	    pop {r2,r3}
 2046 10f8 7047     	    _RET 
 2047              	
 2048              	
ARM GAS  tinyBasic.s 			page 56


 2049              	/**********************************************
 2050              	    relation
 2051              	    rel ::= expr1 rel_op expr2
 2052              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2053              	    relation return  integer , zero is false 
 2054              	    output:
 2055              	        r0	TK_INTGR  
 2056              	        r1	integer 
 2057              	    use:
 2058              	        r2   first operand 
 2059              	        r3   relop   
 2060              	**********************************************/
 2061 10fa 00BF     	    _FUNC relation 
 2062 10fc 0CB4     	    push {r2,r3}
 2063 10fe 00B5FFF7 	    _CALL expression 
 2063      CEFF5DF8 
 2063      04EB
 2064 1108 1B28     	    cmp r0,#TK_INTGR 
 2065 110a 7FF4A9AC 	    bne syntax_error 
 2066 110e 0A46     	    mov r2,r1  // first operand  
 2067 1110 00B5FFF7 	    _CALL next_token 
 2067      A1FE5DF8 
 2067      04EB
 2068 111a A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2069 111e 0D28     	    cmp r0,#TK_EQUAL 
 2070 1120 1DD4     	    bmi 8f 
 2071 1122 1328     	    cmp r0,#TK_NE+1
 2072 1124 1BD5     	    bpl 8f 
 2073 1126 00B5FFF7 	    _CALL expression 
 2073      BAFF5DF8 
 2073      04EB
 2074 1130 1B28     	    cmp r0,#TK_INTGR 
 2075 1132 7FF495AC 	    bne syntax_error 
 2076 1136 8A42     	    cmp r2,r1 // compare operands  
 2077 1138 4FF0FF31 	    mov r1,#-1 
 2078 113c 2D4A     	    ldr r2,=relop_jmp
 2079 113e D2E803F0 	    tbb [r2,r3]    
 2080              	rel_idx0:
 2081              	rel_eq:
 2082 1142 11D0     	    beq 9f 
 2083 1144 08E0     	    b rel_false
 2084              	rel_gt:
 2085 1146 0FDC     	    bgt 9f  
 2086 1148 06E0     	    b rel_false  
 2087              	rel_ge:
 2088 114a 0DDA     	    bge 9f  
 2089 114c 04E0     	    b rel_false  
 2090              	rel_lt: 
 2091 114e 0BDB     	    blt 9f   
 2092 1150 02E0     	    b rel_false 
 2093              	rel_le:
 2094 1152 09DD     	    ble 9f  
 2095 1154 00E0     	    b rel_false 
 2096              	rel_ne:
 2097 1156 07D1     	    bne 9f 
 2098              	rel_false:    
 2099 1158 81EA0101 	    eor r1,r1  // false
ARM GAS  tinyBasic.s 			page 57


 2100 115c 04E0     	    b 9f  
 2101 115e D4F800A0 	8:  _UNGET_TOKEN 
 2101      D4F808B0 
 2102 1166 1146     	    mov r1,r2    
 2103 1168 4FF01B00 	9:  mov r0,#TK_INTGR
 2104 116c 0CBC     	    pop {r2,r3}
 2105 116e 7047     	    _RET 
 2106              	
 2107              	
 2108              	relop_jmp: 
 2109 1170 00       	  .byte 0 // =  
 2110 1171 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2111 1172 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2112 1173 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2113 1174 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2114 1175 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2115              	
 2116              	
 2117              	/***********************************
 2118              	    get_array_element
 2119              	    return value of @(n)
 2120              	  input:
 2121              	    r0    indice 
 2122              	  output:
 2123              	    r0   TK_INTGR
 2124              	    r1   value  
 2125              	************************************/
 2126 1176 00BF     	    _FUNC get_array_element 
 2127 1178 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2128 117c 4FEA8000 	    lsl r0,#2 
 2129 1180 C0EB0100 	    rsb r0,r1 
 2130 1184 0168     	    ldr r1,[r0]
 2131 1186 4FF01B00 	    mov r0,#TK_INTGR 
 2132 118a 7047     	    _RET 
 2133              	
 2134              	
 2135              	/***********************************
 2136              	    set_array_element 
 2137              	    set value of array element 
 2138              	  input:
 2139              	    r0   index 
 2140              	    r1   new value 
 2141              	  output:
 2142              	    none
 2143              	  use:
 2144              	    r2    array pointer 
 2145              	**********************************/
 2146              	    _FUNC set_array_element 
 2147 118c 04B4     	    push {r2}
 2148 118e D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2149 1192 4FEA8000 	    lsl r0,#2 
 2150 1196 A1EB0001 	    sub r1,r0 
 2151 119a 0960     	    str r1,[r1]
 2152 119c 04BC     	    pop {r2}
 2153 119e 7047     	    _RET 
 2154              	
 2155              	/***********************************
ARM GAS  tinyBasic.s 			page 58


 2156              	   get_var 
 2157              	   get variable value 
 2158              	  input:
 2159              	     r0    variable index {0..25}
 2160              	  output:
 2161              	     r0    TK_INTGR
 2162              	     r1    value 
 2163              	**********************************/
 2164              	    _FUNC get_var 
 2165 11a0 04F16001 	    add r1,UPP,#VARS
 2166 11a4 4FEA8000 	    lsl r0,#2 
 2167 11a8 0958     	    ldr r1,[r1,r0]
 2168 11aa 4FF01B00 	    mov r0,#TK_INTGR
 2169 11ae 7047     	    _RET 
 2170              	
 2171              	/*********************************
 2172              	    set_var 
 2173              	    set variable value 
 2174              	  input:
 2175              	     r0    variable index {0..25}
 2176              	     r1    new value 
 2177              	  output:
 2178              	    none 
 2179              	  use:
 2180              	    r2   vars pointer 
 2181              	*********************************/
 2182              	    _FUNC set_var 
 2183 11b0 04B4     	    push {r2}
 2184 11b2 04F16002 	    add r2,UPP,#VARS
 2185 11b6 4FEA8000 	    lsl r0,#2
 2186 11ba 1150     	    str r1,[r2,r0]
 2187 11bc 04BC     	    pop {r2}
 2188 11be 7047     	    _RET 
 2189              	
 2190              	/******************************
 2191              	    CONSTANTS data
 2192              	******************************/
 2193              	
 2194              	  .section .rodata 
 2195              	
 2196              	// system variables initial value 
 2197              	uzero:
 2198 0000 00000000 	  .word 0 // IN_SAVED
 2199 0004 00000000 	  .word 0 // COUNT
 2200 0008 00000000 	  .word 0 // BASICPTR
 2201 000c 00000000 	  .word 0 // DATAPTR
 2202 0010 00000000 	  .word 0 // DATA
 2203 0014 00000000 	  .word 0 // DATALEN
 2204 0018 0A000000 	  .word 10 // BASE
 2205 001c 00000000 	  .word 0 // TICKS
 2206 0020 00000000 	  .word 0 // TIMER
 2207 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2208 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2209 002c 00000000 	  .word 0 // FSFREE
 2210 0030 00000000 	  .word 0 // TXTBGN
 2211 0034 00000000 	  .word 0 // TXTEND
 2212 0038 00000000 	  .word 0 //LOOP_DEPTH
ARM GAS  tinyBasic.s 			page 59


 2213 003c 00000000 	  .word 0 // ARRAY_SIZE
 2214 0040 00000000 	  .word 0 // FLAGS
 2215 0044 04000000 	  .word 4 // TAB_WIDTH
 2216 0048 00000000 	  .word 0 // RX_HEAD
 2217 004c 00000000 	  .word 0 // RX_TAIL
 2218 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2219 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2220 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2221 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2222 00d0 00000000 	  .word 0 // HERE 
 2223              	ulast:
 2224              	
 2225              	  .section .rodata.dictionary 
 2226              	
 2227              	// keep alphabetic order for BASIC names from Z-A
 2228              	// this sort order is for for WORDS cmd output. 	
 2229              	  .type kword_end, %object
 2230              		.equ link, 0
 2231              	kword_end:
 2232 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2232      00000000 
 2232      00000000 
 2232      00000000 
 2233 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2233      60000000 
 2233      15000000 
 2233      59504F53 
 2233      00000000 
 2234 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2234      5F000000 
 2234      15000000 
 2234      58504F53 
 2234      00000000 
 2235 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2235      5E000000 
 2235      15000000 
 2235      584F5200 
 2236 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2236      5D000000 
 2236      17000000 
 2236      574F5244 
 2236      53000000 
 2237 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2237      5C000000 
 2237      17000000 
 2237      57414954 
 2237      00000000 
 2238 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2238      5B000000 
 2238      17000000 
ARM GAS  tinyBasic.s 			page 60


 2238      554E5449 
 2238      4C000000 
 2239 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2239      5A000000 
 2239      15000000 
 2239      55464C41 
 2239      53480000 
 2240 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2240      59000000 
 2240      15000000 
 2240      55424F55 
 2240      4E440000 
 2241 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2241      58000000 
 2241      17000000 
 2241      54524143 
 2241      45000000 
 2242 00c0 B8000000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2242      57000000 
 2242      17000000 
 2242      544F4E45 
 2242      5F494E49 
 2243 00d8 CC000000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2243      56000000 
 2243      17000000 
 2243      544F4E45 
 2243      00000000 
 2244 00ec E4000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2244      55000000 
 2244      17000000 
 2244      544F0000 
 2245 00fc F8000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2245      53000000 
 2245      17000000 
 2245      54494D45 
 2245      52000000 
 2246 0110 08010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2246      54000000 
 2246      15000000 
 2246      54494D45 
 2246      4F555400 
 2247 0124 1C010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2247      52000000 
 2247      15000000 
 2247      5449434B 
 2247      53000000 
 2248 0138 30010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2248      51000000 
 2248      17000000 
 2248      5448454E 
 2248      00000000 
 2249 014c 44010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2249      50000000 
 2249      17000000 
 2249      54414200 
 2250 015c 58010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2250      4F000000 
ARM GAS  tinyBasic.s 			page 61


 2250      17000000 
 2250      53544F52 
 2250      45000000 
 2251 0170 68010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2251      4E000000 
 2251      17000000 
 2251      53544F50 
 2251      00000000 
 2252 0184 7C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2252      4D000000 
 2252      17000000 
 2252      53544550 
 2252      00000000 
 2253 0198 90010000 	  _dict_entry TK_CMD,SPI_WRITE,SPI_WRITE_IDX // spi_write 
 2253      4C000000 
 2253      17000000 
 2253      5350495F 
 2253      57524954 
 2254 01b0 A4010000 	  _dict_entry TK_CMD,SPI_SEL,SPI_SELECT_IDX // spi_select
 2254      4B000000 
 2254      17000000 
 2254      5350495F 
 2254      53454C00 
 2255 01c4 BC010000 	  _dict_entry TK_IFUNC,SPI_READ,SPI_READ_IDX // spi_read
 2255      4A000000 
 2255      15000000 
 2255      5350495F 
 2255      52454144 
 2256 01dc D0010000 	  _dict_entry TK_CMD,SPI_INIT,SPI_INIT_IDX // spi_init 
 2256      49000000 
 2256      17000000 
 2256      5350495F 
 2256      494E4954 
 2257 01f4 E8010000 	  _dict_entry TK_CMD,SPI_DSEL,SPI_DSEL_IDX // spi_deselect 
 2257      48000000 
 2257      17000000 
 2257      5350495F 
 2257      4453454C 
 2258 020c 00020000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2258      47000000 
 2258      17000000 
 2258      53504300 
 2259 021c 18020000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2259      46000000 
 2259      17000000 
 2259      534C4545 
 2259      50000000 
 2260 0230 28020000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2260      45000000 
 2260      17000000 
 2260      53455256 
 2260      4F5F504F 
 2261 0248 3C020000 	  _dict_entry TK_CMD,SERVO_OFF,SERVO_OFF_IDX, // servo_off 
 2261      44000000 
 2261      17000000 
 2261      53455256 
 2261      4F5F4F46 
ARM GAS  tinyBasic.s 			page 62


 2262 0260 54020000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2262      43000000 
 2262      17000000 
 2262      53455256 
 2262      4F5F494E 
 2263 0278 6C020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2263      42000000 
 2263      17000000 
 2263      53415645 
 2263      00000000 
 2264 028c 84020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2264      41000000 
 2264      17000000 
 2264      52554E00 
 2265 029c 98020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2265      40000000 
 2265      15000000 
 2265      52534849 
 2265      46540000 
 2266 02b0 A8020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2266      3F000000 
 2266      15000000 
 2266      524E4400 
 2267 02c0 BC020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2267      3E000000 
 2267      17000000 
 2267      52455455 
 2267      524E0000 
 2268 02d4 CC020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2268      3D000000 
 2268      17000000 
 2268      52455354 
 2268      4F524500 
 2269 02e8 E0020000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2269      3C000000 
 2269      17000000 
 2269      52454D00 
 2270 02f8 F4020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2270      3B000000 
 2270      15000000 
 2270      52454144 
 2270      00000000 
 2271 030c 04030000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2271      3A000000 
 2271      15000000 
 2271      514B4559 
 2271      00000000 
 2272 0320 18030000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2272      39000000 
 2272      17000000 
 2272      50555400 
 2273 0330 2C030000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2273      38000000 
 2273      17000000 
 2273      50555348 
 2273      00000000 
 2274 0344 3C030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
ARM GAS  tinyBasic.s 			page 63


 2274      37000000 
 2274      17000000 
 2274      5052494E 
 2274      54000000 
 2275 0358 50030000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2275      36000000 
 2275      15000000 
 2275      504F5000 
 2276 0368 64030000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2276      35000000 
 2276      17000000 
 2276      504F4B45 
 2276      57000000 
 2277 037c 74030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2277      34000000 
 2277      17000000 
 2277      504F4B45 
 2277      48000000 
 2278 0390 88030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2278      33000000 
 2278      17000000 
 2278      504F4B45 
 2278      42000000 
 2279 03a4 9C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2279      2F000000 
 2279      17000000 
 2279      504D4F44 
 2279      45000000 
 2280 03b8 B0030000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2280      32000000 
 2280      15000000 
 2280      5045454B 
 2280      57000000 
 2281 03cc C4030000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2281      31000000 
 2281      15000000 
 2281      5045454B 
 2281      48000000 
 2282 03e0 D8030000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2282      30000000 
 2282      15000000 
 2282      5045454B 
 2282      42000000 
 2283 03f4 EC030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2283      2E000000 
 2283      17000000 
 2283      50415553 
 2283      45000000 
 2284 0408 00040000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2284      2D000000 
 2284      15000000 
 2284      50414400 
 2285 0418 14040000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2285      01000000 
 2285      18000000 
 2285      4F555450 
 2285      55545F50 
ARM GAS  tinyBasic.s 			page 64


 2286 0430 24040000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2286      06000000 
 2286      18000000 
 2286      4F555450 
 2286      55545F4F 
 2287 0448 3C040000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2287      0A000000 
 2287      18000000 
 2287      4F555450 
 2287      55545F41 
 2288 0460 54040000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2288      0E000000 
 2288      18000000 
 2288      4F555450 
 2288      55545F41 
 2289 0478 6C040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2289      2C000000 
 2289      17000000 
 2289      4F555400 
 2290 0488 84040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2290      2B000000 
 2290      15000000 
 2290      4F520000 
 2291 0498 94040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2291      2A000000 
 2291      15000000 
 2291      4E4F5400 
 2292 04a8 A4040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2292      29000000 
 2292      17000000 
 2292      4E455854 
 2292      00000000 
 2293 04bc B4040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2293      28000000 
 2293      17000000 
 2293      4E455700 
 2294 04cc C8040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2294      27000000 
 2294      15000000 
 2294      4C534849 
 2294      46540000 
 2295 04e0 D8040000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2295      26000000 
 2295      17000000 
 2295      4C4F4341 
 2295      54450000 
 2296 04f4 EC040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2296      25000000 
 2296      17000000 
 2296      4C4F4144 
 2296      00000000 
 2297 0508 00050000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2297      24000000 
 2297      17000000 
 2297      4C495354 
 2297      00000000 
 2298 051c 14050000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
ARM GAS  tinyBasic.s 			page 65


 2298      23000000 
 2298      17000000 
 2298      4C455400 
 2299 052c 28050000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2299      22000000 
 2299      16000000 
 2299      4B455900 
 2300 053c 38050000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2300      21000000 
 2300      15000000 
 2300      494E5645 
 2300      52540000 
 2301 0550 48050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2301      11000000 
 2301      18000000 
 2301      494E5055 
 2301      545F5055 
 2302 0568 5C050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2302      10000000 
 2302      18000000 
 2302      494E5055 
 2302      545F5044 
 2303 0580 74050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2303      04000000 
 2303      18000000 
 2303      494E5055 
 2303      545F464C 
 2304 0598 8C050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2304      00000000 
 2304      18000000 
 2304      494E5055 
 2304      545F414E 
 2305 05b0 A4050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2305      20000000 
 2305      17000000 
 2305      494E5055 
 2305      54000000 
 2306 05c4 BC050000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2306      1F000000 
 2306      15000000 
 2306      494E0000 
 2307 05d4 D0050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2307      1E000000 
 2307      17000000 
 2307      49460000 
 2308 05e4 E0050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2308      1D000000 
 2308      17000000 
 2308      48455800 
 2309 05f4 F0050000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2309      00100140 
 2309      18000000 
 2309      4750494F 
 2309      43000000 
 2310 0608 00060000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2310      000C0140 
 2310      18000000 
ARM GAS  tinyBasic.s 			page 66


 2310      4750494F 
 2310      42000000 
 2311 061c 14060000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2311      00080140 
 2311      18000000 
 2311      4750494F 
 2311      41000000 
 2312 0630 28060000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2312      1C000000 
 2312      17000000 
 2312      474F544F 
 2312      00000000 
 2313 0644 3C060000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2313      1B000000 
 2313      17000000 
 2313      474F5355 
 2313      42000000 
 2314 0658 50060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2314      1A000000 
 2314      15000000 
 2314      47455400 
 2315 0668 64060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2315      19000000 
 2315      15000000 
 2315      46524545 
 2315      00000000 
 2316 067c 74060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2316      18000000 
 2316      17000000 
 2316      464F5247 
 2316      45540000 
 2317 0690 88060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2317      17000000 
 2317      17000000 
 2317      464F5200 
 2318 06a0 9C060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2318      16000000 
 2318      17000000 
 2318      45524153 
 2318      45000000 
 2319 06b4 AC060000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2319      15000000 
 2319      17000000 
 2319      454E4400 
 2320 06c4 C0060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2320      14000000 
 2320      17000000 
 2320      44554D50 
 2320      00000000 
 2321 06d8 D0060000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2321      13000000 
 2321      17000000 
 2321      44524F50 
 2321      00000000 
 2322 06ec E4060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2322      12000000 
 2322      17000000 
ARM GAS  tinyBasic.s 			page 67


 2322      444F0000 
 2323 06fc F8060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2323      11000000 
 2323      17000000 
 2323      44495200 
 2324 070c 08070000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2324      10000000 
 2324      17000000 
 2324      44454300 
 2325 071c 18070000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2325      0F000000 
 2325      17000000 
 2325      44415441 
 2325      00000000 
 2326 0730 28070000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2326      0E000000 
 2326      17000000 
 2326      434F4E53 
 2326      54000000 
 2327 0744 3C070000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2327      0D000000 
 2327      17000000 
 2327      434C5300 
 2328 0754 50070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2328      0C000000 
 2328      16000000 
 2328      43484152 
 2328      00000000 
 2329 0768 60070000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2329      0B000000 
 2329      17000000 
 2329      42544F47 
 2329      4C000000 
 2330 077c 74070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2330      0A000000 
 2330      15000000 
 2330      42544553 
 2330      54000000 
 2331 0790 88070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2331      09000000 
 2331      17000000 
 2331      42534554 
 2331      00000000 
 2332 07a4 9C070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2332      08000000 
 2332      17000000 
 2332      42524553 
 2332      00000000 
 2333 07b8 B0070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2333      07000000 
 2333      15000000 
 2333      42495400 
 2334 07c8 C4070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2334      06000000 
 2334      17000000 
 2334      41575500 
 2335 07d8 D4070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX // autorun 
ARM GAS  tinyBasic.s 			page 68


 2335      05000000 
 2335      17000000 
 2335      4155544F 
 2335      52554E00 
 2336 07ec E4070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2336      04000000 
 2336      15000000 
 2336      41534300 
 2337 07fc F8070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2337      03000000 
 2337      15000000 
 2337      414E4400 
 2338 080c 08080000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2338      02000000 
 2338      17000000 
 2338      41444300 
 2339 081c 18080000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2339      01000000 
 2339      15000000 
 2339      414E4100 
 2340              	first_link: 
 2341 082c 28080000 	  .word LINK 
 2342 0830 00000000 	  .word ABS_IDX 
 2343 0834 15000000 	  .word TK_IFUNC
 2344              	kword_dict: // first name field 
 2345              	  .equ LINK,. 
 2346 0838 41425300 	  .asciz "ABS" 
 2347              	  .p2align 2 
 2348              	
 2349              	    .section .rodata.fn_tabld 
 2350              	
 2351              	//comands and fonctions address table
 2352              	  .type fn_table, %object
 2353              	fn_table:
 2354 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,autorun,awu,bitmask 
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2355 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2356 003c 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2356      00000000 
 2356      00000000 
 2356      00000000 
 2356      00000000 
 2357 0054 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2358 0074 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2358      00000000 
 2358      00000000 
ARM GAS  tinyBasic.s 			page 69


 2358      00000000 
 2358      00000000 
 2359 008c 00000000 		.word let,list,load,locate,lshift,new,next
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2360 00a8 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2361 00cc 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2362 00e8 00000000 		.word qkey,read,skip_line
 2362      00000000 
 2362      00000000 
 2363 00f4 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_off,servo_pos 
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2364 0118 00000000 		.word sleep,spc,spi_deselect,spi_init,spi_read,spi_select,spi_write,step,stop,store,tab
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2365 0144 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace,ubound,uflash,until
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2366 0170 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2367 0184 00000000 		.word 0 
 2368              	
 2369              	
 2370              	/**********************************
 2371              	    BASIC commands and functions 
 2372              	**********************************/
 2373              	
 2374              	    .section .text.basic , "ax", %progbits 
 2375              	
 2376              	
 2377              	/*******************************
 2378              	  BASIC:  ABS expr 
 2379              	  input:
 2380              	    none 
 2381              	  output:
 2382              	    r0    token type 
 2383              	    r1    abs(expr)
ARM GAS  tinyBasic.s 			page 70


 2384              	  use:
 2385              	    none 
 2386              	******************************/
 2387              	    _FUNC abs 
 2388 0000 00B5FFF7 	    _CALL arg_list
 2388      FEFF5DF8 
 2388      04EB
 2389 000a 0128     	    cmp r0,#1 
 2390 000c 01D0     	    beq 1f 
 2391 000e FFF7FEBF 	    b syntax_error 
 2392 0012 5CF8041B 	1:  _POP r1 
 2393 0016 11F0004F 	    tst r1,#(1<<31)
 2394 001a 01D0     	    beq 9f
 2395 001c C1F10001 	    rsb r1,#0 
 2396 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2397 0024 7047     	   _RET 
 2398              	
 2399              	/*************************************
 2400              	  BASIC: ANA(pin)
 2401              	  read analog input 
 2402              	*************************************/
 2403 0026 00BF     	    _FUNC analog_read
 2404 0028 00B5FFF7 	    _CALL func_args
 2404      FEFF5DF8 
 2404      04EB
 2405 0032 0128     	    cmp r0,#1 
 2406 0034 7FF4FEAF 	    bne syntax_error 
 2407 0038 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2407      C4F20101 
 2408 0040 5CF8042B 	    _POP r2 // channel
 2409 0044 02F01F02 	    and r2,#31
 2410 0048 4A63     	    str r2,[r1,#ADC_SQR3]
 2411              	// start conversion 
 2412 004a 8868     	    ldr r0,[r1,#ADC_CR2]
 2413 004c 8860     	    str r0,[r1,#ADC_CR2]
 2414              	adc_loop:
 2415 004e 0868     	    ldr r0,[R1,#ADC_SR]
 2416 0050 10F0020F 	    tst r0,#2 // EOC bit test 
 2417 0054 FBD0     	    beq adc_loop
 2418 0056 C96C     	    ldr r1,[r1,#ADC_DR]
 2419 0058 4FF01B00 	    mov r0,#TK_INTGR    
 2420 005c 7047     	    _RET
 2421              	
 2422              	/***********************************
 2423              	  BASIC: ADC 1|0
 2424              	  enable|disable analog digital converter 
 2425              	  freq -> of conversion
 2426              	*****************************************/
 2427 005e 00BF     	    _FUNC adc 
 2428 0060 00B5FFF7 	    _CALL arg_list 
 2428      FEFF5DF8 
 2428      04EB
 2429 006a 0128     	    cmp r0,#1 
 2430 006c 7FF4FEAF 	    bne syntax_error 
 2431 0070 5CF8041B 	    _POP r1 
 2432 0074 E9B1     	1:  cbz r1,adc_off 
 2433              	adc_on:
ARM GAS  tinyBasic.s 			page 71


 2434 0076 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2434      C4F20201 
 2435 007e 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2436 0080 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2437 0084 8861     	    str r0,[r1,#RCC_APB2ENR]
 2438 0086 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2438      C4F20101 
 2439 008e 4FF00100 	    _MOV32 r0,1+(1<<23)
 2439      C0F28100 
 2440 0096 8860     	    str r0,[r1,#ADC_CR2]
 2441 0098 42F21070 	    mov r0,#10000
 2442 009c 0138     	1:  subs r0,#1
 2443 009e FDD1     	    bne 1b 
 2444              	    // calibration
 2445 00a0 8868     	    ldr r0,[r1,#ADC_CR2]  
 2446 00a2 40F00400 	    orr r0,#(1<<2) // CAL bit 
 2447 00a6 8860     	    str r0,[r1,#ADC_CR2]
 2448 00a8 8868     	1:  ldr r0,[r1,#ADC_CR2]
 2449 00aa 10F0040F 	    tst r0,#(1<<2)
 2450 00ae FBD1     	    bne 1b     
 2451 00b0 7047     	    _RET 
 2452              	adc_off:
 2453 00b2 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2453      C4F20101 
 2454 00ba 80EA0000 	    eor r0,r0 
 2455 00be 8860     	    str r0,[r1,#ADC_CR2]
 2456 00c0 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2456      C4F20201 
 2457 00c8 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2458 00ca 6FF00902 	    mvn r2,#9 
 2459 00ce 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2460 00d2 8861     	    str r0,[r1,#RCC_APB2ENR]
 2461 00d4 7047     	    _RET 
 2462              	
 2463              	
 2464              	/************************************
 2465              	  BASIC: AND(expr1,expr2)
 2466              	  logical ANND bit to between expr1,expr2
 2467              	************************************/
 2468 00d6 00BF     	    _FUNC bit_and
 2469 00d8 00B5FFF7 	    _CALL func_args 
 2469      FEFF5DF8 
 2469      04EB
 2470 00e2 0228     	    cmp r0,#2 
 2471 00e4 7FF4FEAF 	    bne syntax_error 
 2472 00e8 5CF8040B 	    _POP r0 
 2473 00ec 5CF8041B 	    _POP r1 
 2474 00f0 01EA0001 	    and r1,r0 
 2475 00f4 4FF01B00 	    mov r0,#TK_INTGR
 2476 00f8 7047     	    _RET
 2477              	
 2478              	/*******************************************
 2479              	  BASIC: ASC(string|char)
 2480              	  return ASCII code of char of first char 
 2481              	  of string 
 2482              	*******************************************/
 2483 00fa 00BF     	    _FUNC ascii
ARM GAS  tinyBasic.s 			page 72


 2484 00fc 4FF00500 	    mov r0,#TK_LPAREN 
 2485 0100 00B5FFF7 	    _CALL expect 
 2485      FEFF5DF8 
 2485      04EB
 2486 010a 00B5FFF7 	    _CALL next_token 
 2486      FEFF5DF8 
 2486      04EB
 2487 0114 1C28     	    cmp r0,#TK_QSTR
 2488 0116 0AD0     	    beq 2f 
 2489 0118 1328     	    cmp r0,#TK_CHAR 
 2490 011a 00D1     	    bne 1f  
 2491 011c 08E0     	    b 9f
 2492 011e 1628     	1:  cmp r0,#TK_CFUNC 
 2493 0120 0846     	    mov r0,r1 
 2494 0122 00B5FFF7 	    _CALL execute
 2494      FEFF5DF8 
 2494      04EB
 2495 012c 00E0     	    b 9f      
 2496 012e 0978     	2:  ldrb r1,[r1]
 2497 0130 4CF8041D 	9:  _PUSH r1 
 2498 0134 4FF00600 	    mov r0,#TK_RPAREN 
 2499 0138 00B5FFF7 	    _CALL expect 
 2499      FEFF5DF8 
 2499      04EB
 2500 0142 4FF01B00 	    mov r0,#TK_INTGR 
 2501 0146 5CF8041B 	    _POP r1 
 2502 014a 7047     	    _RET
 2503              	
 2504              	/*******************************************
 2505              	  BASIC: AWU time_sleep  
 2506              	  enable LSI and IWDG and place MCU in 
 2507              	  deep sleep. IDWG wakeup MCU 
 2508              	******************************************/
 2509              	    _FUNC awu
 2510 014c 00B5FFF7 	    _CALL arg_list
 2510      FEFF5DF8 
 2510      04EB
 2511 0156 0128     	    cmp r0,#1 
 2512 0158 7FF4FEAF 	    bne syntax_error 
 2513 015c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2513      C4F20201 
 2514 0164 486A     	    ldr r0,[r1,#RCC_CSR]
 2515              	// enable LSI 
 2516 0166 80F00100 	    eor r0,#1
 2517 016a 4862     	    str r0,[r1,#RCC_CSR]
 2518              	// wait for LSIRDY 
 2519 016c 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2520 016e 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2521 0172 FBD0     	    beq 1b 
 2522              	// configure IWDG
 2523              	// compute values for IWDG_PR and IWDG_RLR 
 2524 0174 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2525 0178 4FF00A03 	    mov r3,#10
 2526 017c 03FB02F2 	    mul r2,r3 // milliseconds adjustment
 2527 0180 4FF6FF73 	    _MOV32 r3,0x3ffff 
 2527      C0F20303 
 2528 0188 02EA0302 	    and r2,r3 // r2 limit=0x3ffff
ARM GAS  tinyBasic.s 			page 73


 2529 018c 83EA0303 	    eor r3,r3
 2530 0190 B2F5805F 	2:  cmp r2,#4096 
 2531 0194 04D4     	    bmi 3f 
 2532 0196 4FEA5202 	    lsr r2,#1 
 2533 019a 03F10103 	    add r3,#1
 2534 019e F7E7     	    b 2b
 2535              	// initialize IWDG      
 2536 01a0 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2536      C4F20001 
 2537 01a8 45F25550 	    mov r0,0x5555 // enable register writing
 2538 01ac 0860     	    str r0,[r1,#IWDG_KR]
 2539 01ae 4B60     	    str r3,[r1,#IWDG_PR]
 2540 01b0 8A60     	    str r2,[r1,#IWDG_RLR]
 2541 01b2 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2542 01b6 0860     	    str r0,[r1,#IWDG_KR]
 2543 01b8 01F0FCB8 	    b sleep // place MCU in deep sleep
 2544 01bc 7047     	    _RET
 2545              	
 2546              	/********************************************
 2547              	  BASIC: BIT(expr)
 2548              	  expr must be between 0..31 and is used 
 2549              	  to create 1 bit mask at that position
 2550              	*******************************************/
 2551 01be 00BF     	    _FUNC bitmask
 2552 01c0 00B5FFF7 	    _CALL func_args
 2552      FEFF5DF8 
 2552      04EB
 2553 01ca 0128     	    cmp r0,#1 
 2554 01cc 7FF4FEAF 	    bne syntax_error 
 2555 01d0 5CF8040B 	    _POP r0
 2556 01d4 4FF00101 	    mov r1,#1
 2557 01d8 01FA00F1 	    lsl r1,r0 
 2558 01dc 4FF01B00 	9:  mov r0,#TK_INTGR
 2559 01e0 7047     	    _RET 
 2560              	
 2561              	  
 2562              	  /*********************************
 2563              	   BASIC: BRES adr, mask   
 2564              	   reset bits [adr]= [adr] & ~mask  
 2565              	   input:
 2566              	     none 
 2567              	    output;
 2568              	      none 
 2569              	    use:
 2570              	      T1   temp
 2571              	      T2   temp 
 2572              	*******************************/     
 2573 01e2 00BF     	  _FUNC bit_reset
 2574 01e4 00B5FFF7 	    _CALL arg_list 
 2574      FEFF5DF8 
 2574      04EB
 2575 01ee 0228     	    cmp r0,#2 
 2576 01f0 01D0     	    beq 1f 
 2577 01f2 FFF7FEBF 	    b syntax_error 
 2578 01f6 5CF8041B 	1:  _POP r1 //mask 
 2579 01fa 5CF8040B 	    _POP r0 //address 
 2580 01fe D0F80090 	    ldr T2,[r0] 
ARM GAS  tinyBasic.s 			page 74


 2581 0202 81F0FF31 	    eor r1,#-1 // ~mask 
 2582 0206 01EA0901 	    and r1,T2
 2583 020a 0160     	    str r1,[r0]
 2584 020c 7047     	    _RET  
 2585              	
 2586              	
 2587              	/*********************************
 2588              	   BASIC: BSET adr, mask   
 2589              	   reset bits [adr]= [adr] & ~mask  
 2590              	   input:
 2591              	      none 
 2592              	    output;
 2593              	      none 
 2594              	    use:
 2595              	      T1   temp
 2596              	      T2   temp  
 2597              	*******************************/     
 2598 020e 00BF     	    _FUNC bit_set
 2599 0210 00B5FFF7 	    _CALL arg_list 
 2599      FEFF5DF8 
 2599      04EB
 2600 021a 0228     	    cmp r0,#2 
 2601 021c 01D0     	    beq 1f 
 2602 021e FFF7FEBF 	    b syntax_error 
 2603 0222 5CF8041B 	1:  _POP r1 //mask 
 2604 0226 5CF8040B 	    _POP r0 //address 
 2605 022a D0F80090 	    ldr T2,[r0] 
 2606 022e 41EA0901 	    orr r1,T2
 2607 0232 0160     	    str r1,[r0]
 2608 0234 7047     	    _RET 
 2609              	
 2610              	  /*********************************
 2611              	   BASIC: BTOGL adr, mask   
 2612              	   reset bits [adr]= [adr] & ~mask  
 2613              	   input:
 2614              	     r0    adr 
 2615              	     r1    mask 
 2616              	    output;
 2617              	      none 
 2618              	    use:
 2619              	      T1   temp
 2620              	      T2   temp  
 2621              	*******************************/     
 2622 0236 00BF     	  _FUNC bit_toggle
 2623 0238 00B5FFF7 	    _CALL arg_list 
 2623      FEFF5DF8 
 2623      04EB
 2624 0242 0228     	    cmp r0,#2 
 2625 0244 01D0     	    beq 1f 
 2626 0246 FFF7FEBF 	    b syntax_error 
 2627 024a 5CF8041B 	1:  _POP r1 //mask 
 2628 024e 5CF8040B 	    _POP r0 //address 
 2629 0252 D0F80090 	    ldr T2,[r0] 
 2630 0256 81EA0901 	    eor r1,T2
 2631 025a 0160     	    str r1,[r0]
 2632 025c 7047     	    _RET  
 2633              	
ARM GAS  tinyBasic.s 			page 75


 2634              	/********************************
 2635              	  BASIC: BTEST(addr,bit)
 2636              	  return bit state at address
 2637              	********************************/
 2638 025e 00BF     	    _FUNC bit_test
 2639 0260 00B5FFF7 	    _CALL func_args
 2639      FEFF5DF8 
 2639      04EB
 2640 026a 0228     	    cmp r0,#2 
 2641 026c 7FF4FEAF 	    bne syntax_error 
 2642 0270 5CF8041B 	    _POP r1
 2643 0274 4FF00100 	    mov r0,#1
 2644 0278 01F01F01 	    and r1,#31  
 2645 027c 21B1     	1:  cbz r1, 2f
 2646 027e 4FEA4000 	    lsl r0,#1
 2647 0282 A1F10101 	    sub r1,#1
 2648 0286 F9E7     	    b 1b 
 2649 0288 5CF8041B 	2:  _POP r1
 2650 028c 0968     	    ldr r1,[r1]
 2651 028e 01EA0001 	    and r1,r0 
 2652 0292 09B1     	    cbz r1,9f 
 2653 0294 4FF00101 	    mov r1,#1
 2654 0298 4FF01B00 	9:  mov r0,#TK_INTGR    
 2655 029c 7047     	    _RET 
 2656              	
 2657              	/********************************
 2658              	  BASIC: CLS 
 2659              	  clear terminal screen move cursor 
 2660              	  home 
 2661              	************************************/
 2662 029e 00BF     	    _FUNC cls 
 2663 02a0 00B5FFF7 	    _CALL clear_screen
 2663      FEFF5DF8 
 2663      04EB
 2664 02aa 7047     	    _RET 
 2665              	
 2666              	/*********************************
 2667              	  BASIC: CHAR(expr)
 2668              	  convert expr in character 
 2669              	********************************/
 2670              	    _FUNC char
 2671 02ac 00B5FFF7 	    _CALL func_args
 2671      FEFF5DF8 
 2671      04EB
 2672 02b6 0128     	    cmp r0,#1
 2673 02b8 7FF4FEAF 	    bne syntax_error 
 2674 02bc 5CF8041B 	    _POP r1 
 2675 02c0 01F07F01 	    and r1,#127 
 2676 02c4 4FF01300 	    mov r0,#TK_CHAR
 2677 02c8 7047     	    _RET 
 2678              	
 2679              	/**********************************
 2680              	  BASIC: CONST label=expr [,!label=expr]
 2681              	  define constants constants are 
 2682              	  store at end of BASIC code.
 2683              	  use:
 2684              	    T1   *location 
ARM GAS  tinyBasic.s 			page 76


 2685              	    T2   *bound 
 2686              	*********************************/
 2687 02ca 00BF     	    _FUNC const
 2688 02cc 206C10F0 	    _RTO 
 2688      010F03D1 
 2688      4FF00700 
 2688      FFF7FEBF 
 2689 02dc D4F8D080 	    ldr T1,[UPP,#HERE]
 2690 02e0 DFF8F096 	    ldr T2,pad_adr  
 2691 02e4 C845     	1:  cmp T1,T2 
 2692 02e6 03D4     	    bmi 2f 
 2693 02e8 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2694 02ec FFF7FEBF 	    b tb_error 
 2695 02f0 00B5FFF7 	2:  _CALL next_token 
 2695      FEFF5DF8 
 2695      04EB
 2696 02fa 1A28     	    cmp r0,#TK_LABEL 
 2697 02fc 7FF4FEAF 	    bne syntax_error 
 2698 0300 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2699 0304 4CF8041D 	    _PUSH r1 
 2700 0308 4FF00D00 	    mov r0,#TK_EQUAL
 2701 030c 00B5FFF7 	    _CALL expect
 2701      FEFF5DF8 
 2701      04EB
 2702 0316 00B5FFF7 	    _CALL expression  
 2702      FEFF5DF8 
 2702      04EB
 2703 0320 1B28     	    cmp r0,#TK_INTGR
 2704 0322 7FF4FEAF 	    bne syntax_error
 2705 0326 5CF8040B 	    _POP r0 
 2706 032a 48F8040B 	    str r0,[T1],#4
 2707 032e 48F8041B 	    str r1,[T1],#4 
 2708 0332 C4F8D080 	    str T1,[UPP,#HERE]
 2709 0336 00B5FFF7 	    _CALL next_token
 2709      FEFF5DF8 
 2709      04EB
 2710 0340 0228     	    cmp r0,#TK_COMMA 
 2711 0342 CFD0     	    beq 1b 
 2712 0344 D4F800A0 	    _UNGET_TOKEN
 2712      D4F808B0 
 2713              	9:  
 2714 034c 7047     	    _RET 
 2715              	
 2716              	/*****************************
 2717              	  BASIC: READ 
 2718              	  read next data item 
 2719              	  the value can be assigned to
 2720              	  variable or used in expression
 2721              	*****************************/
 2722 034e 00BF     	    _FUNC read
 2723 0350 206C10F0 	    _RTO
 2723      010F03D1 
 2723      4FF00700 
 2723      FFF7FEBF 
 2724 0360 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2725 0362 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2726 0364 2269     	    ldr r2,[UPP,#DATA] // item on line  
ARM GAS  tinyBasic.s 			page 77


 2727 0366 8242     	    cmp r2,r0
 2728 0368 18D0     	    beq seek_next
 2729 036a 4FF00103 	1:  mov r3,#1 
 2730 036e 885C     	    ldrb r0,[r1,r2]
 2731 0370 02F10102 	    add r2,#1
 2732 0374 0028     	    cmp r0,#TK_NONE
 2733 0376 11D0     	    beq seek_next
 2734 0378 0828     	    cmp r0,#TK_MINUS 
 2735 037a 05D1     	    bne 2f 
 2736 037c 4FF0FF33 	    mov r3,#-1
 2737 0380 885C     	    ldrb r0,[r1,r2]
 2738 0382 02F10102 	    add r2,#1
 2739 0386 01E0     	    b 3f  
 2740 0388 0228     	2:  cmp r0,#TK_COMMA
 2741 038a EED0     	    beq 1b  
 2742 038c 1B28     	3:  cmp r0,#TK_INTGR 
 2743 038e 7FF4FEAF 	    bne syntax_error  
 2744 0392 8958     	    ldr r1,[r1,r2]
 2745 0394 02F10402 	    add r2,#4
 2746 0398 2261     	    str r2,[UPP,#DATA]
 2747 039a 12E0     	    b 9f  
 2748              	seek_next: // is next line data ?
 2749 039c 8878     	    ldrb r0,[R1,#2]
 2750 039e 0144     	    add r1,r0 
 2751 03a0 C878     	    ldrb r0,[R1,#3]
 2752 03a2 1728     	    cmp r0,#TK_CMD
 2753 03a4 09D1     	    bne 2f 
 2754 03a6 0879     	    ldrb r0,[r1,#4]
 2755 03a8 0F28     	    cmp r0,#DATA_IDX 
 2756 03aa 06D1     	    bne 2f 
 2757 03ac E160     	    str r1,[UPP,#DATAPTR]
 2758 03ae 8878     	    ldrb r0,[r1,#2]
 2759 03b0 6061     	    str  r0,[UPP,#DATALEN]
 2760 03b2 4FF00502 	    mov r2,#5 
 2761 03b6 2261     	    str r2,[UPP,#DATA]
 2762 03b8 D7E7     	    b 1b 
 2763 03ba 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2764 03be FFF7FEBF 	    b tb_error 
 2765 03c2 7047     	9:  _RET 
 2766              	
 2767              	/********************************
 2768              	  BASIC: RESTORE [line#]
 2769              	  set data pointer to first data line 
 2770              	  or a specified line number 
 2771              	********************************/
 2772              	    _FUNC restore
 2773 03c4 206C10F0 	    _RTO 
 2773      010F03D1 
 2773      4FF00700 
 2773      FFF7FEBF 
 2774 03d4 00B5FFF7 	    _CALL next_token 
 2774      FEFF5DF8 
 2774      04EB
 2775 03de 1B28     	    cmp r0,#TK_INTGR 
 2776 03e0 05D0     	    beq 0f 
 2777 03e2 D4F800A0 	    _UNGET_TOKEN
 2777      D4F808B0 
ARM GAS  tinyBasic.s 			page 78


 2778 03ea 4FF00001 	    mov r1,#0 
 2779 03ee 40F61773 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2780 03f2 0A46     	    mov r2,r1 
 2781 03f4 216B     	    ldr r1,[UPP,#TXTBGN]
 2782 03f6 D4F83480 	    ldr T1,[UPP,#TXTEND]
 2783 03fa 4145     	1:  cmp r1,T1 
 2784 03fc 11D5     	    bpl no_data_line 
 2785 03fe B1F80300 	    ldrh r0,[r1,#3]
 2786 0402 9842     	    cmp r0,r3 
 2787 0404 0AD1     	    bne try_next_line
 2788              	// this is a data line
 2789 0406 12B1     	    cbz r2,2f 
 2790 0408 0888     	    ldrh r0,[r1]
 2791 040a 9042     	    cmp r0,r2 
 2792 040c 06D1     	    bne try_next_line
 2793 040e E160     	2:  str r1,[UPP,#DATAPTR]
 2794 0410 8878     	    ldrb r0,[r1,#2]
 2795 0412 6061     	    str r0,[UPP,#DATALEN]
 2796 0414 4FF00500 	    mov r0,#5 
 2797 0418 2061     	    str r0,[UPP,#DATA]
 2798 041a 07E0     	    b 9f
 2799              	try_next_line:
 2800 041c 8878     	    ldrb r0,[r1,#2]
 2801 041e 0144     	    add r1,r0 
 2802 0420 EBE7     	    b 1b 
 2803              	no_data_line:
 2804 0422 80EA0000 	    eor r0,r0 
 2805 0426 E060     	    str r0,[UPP,#DATAPTR]
 2806 0428 2061     	    str r0,[UPP,#DATA]
 2807 042a 6061     	    str r0,[UPP,#DATALEN]
 2808 042c 7047     	9:  _RET 
 2809              	
 2810              	/***********************************
 2811              	  BASIC: DEC 
 2812              	  switch base to decimal 
 2813              	***********************************/
 2814 042e 00BF     	    _FUNC dec_base
 2815 0430 4FF00A00 	    mov r0,#10
 2816 0434 A061     	    str r0,[UPP,#BASE]
 2817 0436 7047     	    _RET 
 2818              	
 2819              	/***************************************
 2820              	  BASIC: DO 
 2821              	  initialize a DO..UNTIL loop 
 2822              	***************************************/
 2823              	    _FUNC do_loop
 2824 0438 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2825 043c 7047     	    _RET 
 2826              	
 2827              	
 2828              	/****************************************
 2829              	  BASIC: DUMP adr, count 
 2830              	    command line only  
 2831              	    print memory content in hexadecimal 
 2832              	    16 bytes per row 
 2833              	    ouput:
 2834              	      none 
ARM GAS  tinyBasic.s 			page 79


 2835              	    use:
 2836              	      r2   byte counter  
 2837              	****************************************/
 2838 043e 00BF     	    _FUNC dump 
 2839 0440 206C10F0 	    _CLO 
 2839      010F03D0 
 2839      4FF00700 
 2839      FFF7FEBF 
 2840 0450 00B5FFF7 	    _CALL arg_list 
 2840      FEFF5DF8 
 2840      04EB
 2841 045a 0228     	    cmp r0,#2
 2842 045c 7FF4FEAF 	    bne syntax_error 
 2843 0460 5CF8042B 	    _POP r2   // count 
 2844 0464 5CF8040B 	    _POP  r0  // adr
 2845              	dump01:
 2846 0468 00B500F0 	    _CALL print_dump_header 
 2846      0DF85DF8 
 2846      04EB
 2847 0472 4FF01001 	1:  mov r1,#16
 2848 0476 00B5FFF7 	    _CALL prt_row 
 2848      FEFF5DF8 
 2848      04EB
 2849 0480 103A     	    subs r2,#16 
 2850 0482 F6D5     	    bpl 1b 
 2851 0484 7047     	    _RET 
 2852              	
 2853              	/********************************
 2854              	   print_dump_header
 2855              	********************************/
 2856 0486 00BF     	    _FUNC print_dump_header
 2857 0488 2DE90103 	    push {r0,T1,T2}
 2858 048c 4FF00C00 	    mov r0,#12 
 2859 0490 00B5FFF7 	    _CALL cursor_x 
 2859      FEFF5DF8 
 2859      04EB
 2860 049a 4FF00000 	    mov r0,#0
 2861 049e 4FF01009 	    mov T2,#16
 2862 04a2 8046     	1:  mov T1,r0 
 2863 04a4 00B5FFF7 	    _CALL print_hex 
 2863      FEFF5DF8 
 2863      04EB
 2864 04ae 08F10100 	    add r0,T1,#1  
 2865 04b2 4845     	    cmp r0,T2 
 2866 04b4 F5D4     	    bmi 1b 
 2867 04b6 00B5FFF7 	    _CALL cr
 2867      FEFF5DF8 
 2867      04EB
 2868 04c0 4FF03D00 	    mov r0,#'='
 2869 04c4 4FF04F08 	    mov T1,#79
 2870 04c8 00B5FFF7 	2:  _CALL uart_putc
 2870      FEFF5DF8 
 2870      04EB
 2871 04d2 B8F10108 	    subs T1,#1 
 2872 04d6 F7D1     	    bne 2b     
 2873 04d8 00B5FFF7 	    _CALL cr
 2873      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 80


 2873      04EB
 2874 04e2 BDE80103 	    pop {r0,T1,T2}
 2875 04e6 7047     	    _RET 
 2876              	
 2877              	
 2878              	/*******************************
 2879              	  BASIC: END 
 2880              	  exit program 
 2881              	******************************/ 
 2882              	    _FUNC cmd_end
 2883 04e8 FFF7FEBF 	    b warm_start 
 2884 04ec 7047     	    _RET 
 2885              	
 2886              	/*******************************************
 2887              	  BASIC: STORE adr, value 
 2888              	  write value to user space in flash memory 
 2889              	*********************************************/
 2890 04ee 00BF     	    _FUNC store 
 2891 04f0 00B5FFF7 	    _CALL arg_list 
 2891      FEFF5DF8 
 2891      04EB
 2892 04fa 0228     	    cmp r0,#2 
 2893 04fc 7FF4FEAF 	    bne syntax_error 
 2894 0500 BCE80300 	    ldmia DP!,{r0,r1}
 2895 0504 DFF83020 	    ldr r2,user_space
 2896 0508 9142     	    cmp r1,r2 
 2897 050a 03D5     	    bpl 1f 
 2898 050c 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2899 0510 FFF7FEBF 	    b tb_error 
 2900 0514 02F58062 	1:  add r2,#1024 
 2901 0518 9142     	    cmp r1,r2 
 2902 051a F7D5     	    bpl 0b 
 2903 051c 00B5FFF7 	    _CALL flash_store 
 2903      FEFF5DF8 
 2903      04EB
 2904 0526 7047     	    _RET 
 2905              	
 2906              	/**************************************************
 2907              	  BASIC: ERASE 
 2908              	  erase user space page 
 2909              	*************************************************/
 2910              	    _FUNC erase 
 2911 0528 DFF80C00 	    ldr r0,user_space 
 2912 052c 00B5FFF7 	    _CALL erase_page 
 2912      FEFF5DF8 
 2912      04EB
 2913 0536 7047     	    _RET 
 2914 0538 00000000 	user_space: .word user 
 2915              	
 2916              	
 2917              	/**************************************************
 2918              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2919              	  introdure FOR...NEXT loop 
 2920              	**************************************************/
 2921              	    _FUNC for
 2922 053c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2923 0540 4FF00107 	    mov INCR,#1
ARM GAS  tinyBasic.s 			page 81


 2924 0544 00B5FFF7 	    _CALL next_token
 2924      FEFF5DF8 
 2924      04EB
 2925 054e 1428     	    cmp r0,#TK_VAR
 2926 0550 7FF4FEAF 	    bne syntax_error
 2927 0554 02B4     	    push {r1} 
 2928 0556 00B500F0 	    _CALL let_var 
 2928      2BF95DF8 
 2928      04EB
 2929 0560 20BC     	    pop {VADR}
 2930 0562 4FEA8505 	    lsl VADR,#2
 2931 0566 2544     	    add VADR,UPP 
 2932 0568 05F16005 	    add VADR,#VARS 
 2933 056c 7047     	    _RET 
 2934              	
 2935              	/***************************************
 2936              	  BASIC: TO expr 
 2937              	  set limit of FOR...NEXT loop 
 2938              	**************************************/
 2939 056e 00BF     	    _FUNC to
 2940 0570 00B5FFF7 	    _CALL expression 
 2940      FEFF5DF8 
 2940      04EB
 2941 057a 1B28     	    cmp r0,#TK_INTGR
 2942 057c 7FF4FEAF 	    bne syntax_error 
 2943 0580 0E46     	    mov LIMIT,r1
 2944              	    // save loop back parameters 
 2945 0582 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2946 0586 7047     	    _RET 
 2947              	
 2948              	/********************************************
 2949              	  BASIC: STEP expr 
 2950              	  set increment for FOR...NEXT loop 
 2951              	********************************************/
 2952              	    _FUNC step
 2953 0588 00B5FFF7 	    _CALL expression 
 2953      FEFF5DF8 
 2953      04EB
 2954 0592 1B28     	    cmp r0,#TK_INTGR
 2955 0594 7FF4FEAF 	    bne syntax_error 
 2956 0598 0F46     	    mov INCR,r1
 2957              	    // replace parameters left by TO
 2958 059a 8CE8000C 	    stmia DP, {IN,BPTR}
 2959 059e 7047     	    _RET 
 2960              	
 2961              	/********************************************
 2962              	  BASIC: NEXT var 
 2963              	  incrment FOR...NEXT loop variable
 2964              	  exit if variable cross LIMIT 
 2965              	********************************************/
 2966              	    _FUNC next
 2967 05a0 00B5FFF7 	    _CALL next_token 
 2967      FEFF5DF8 
 2967      04EB
 2968 05aa 1428     	    cmp r0,#TK_VAR 
 2969 05ac 7FF4FEAF 	    bne syntax_error 
 2970 05b0 4FEA8101 	    lsl r1,#2 
ARM GAS  tinyBasic.s 			page 82


 2971 05b4 2144     	    add r1,UPP 
 2972 05b6 01F16001 	    add r1,#VARS 
 2973 05ba A942     	    cmp r1,VADR
 2974 05bc 7FF4FEAF 	    bne syntax_error 
 2975 05c0 2868     	    ldr r0,[VADR]
 2976 05c2 3844     	    add r0,INCR 
 2977 05c4 2860     	    str r0,[VADR]
 2978 05c6 002F     	    cmp INCR,#0
 2979 05c8 02D4     	    bmi 2f
 2980 05ca B042     	    cmp r0,LIMIT 
 2981 05cc 02DC     	    bgt 8f  
 2982 05ce 07E0     	    b 9f  
 2983 05d0 B042     	2:  cmp r0,LIMIT 
 2984 05d2 05DA     	    bge 9f  
 2985              	8: // exit for...next
 2986              	  //  drop branch parameters
 2987 05d4 4FF00800 	    _DROP 2
 2987      8444
 2988              	  // restore outer loop parameters
 2989 05da BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2990 05de 7047     	    _RET 
 2991 05e0 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2992 05e4 9BF80200 	    ldrb r0,[BPTR,#2]
 2993 05e8 6060     	    str r0,[UPP,#COUNT]
 2994 05ea 00B5FFF7 	    _CALL show_trace 
 2994      FEFF5DF8 
 2994      04EB
 2995 05f4 7047     	    _RET 
 2996              	
 2997              	
 2998              	/*********************************
 2999              	  BASIC: GOSUB expr 
 3000              	  call a subroutine at line# 
 3001              	*********************************/
 3002 05f6 00BF     	    _FUNC gosub
 3003 05f8 00B5FFF7 	    _CALL search_target 
 3003      FEFF5DF8 
 3003      04EB
 3004 0602 2DE9000C 	    push {IN,BPTR}
 3005              	target:
 3006 0606 8346     	    mov BPTR,r0 
 3007 0608 4FF0030A 	    mov IN,#3 
 3008 060c 9BF80200 	    ldrb r0,[BPTR,#2]
 3009 0610 6060     	    str r0,[UPP,#COUNT]
 3010 0612 00B5FFF7 	    _CALL show_trace 
 3010      FEFF5DF8 
 3010      04EB
 3011 061c 7047     	    _RET 
 3012              	
 3013              	/**********************************
 3014              	  BASIC: RETURN 
 3015              	  leave a subroutine 
 3016              	*********************************/
 3017 061e 00BF     	    _FUNC return 
 3018 0620 BDE8000C 	    pop {IN,BPTR}
 3019 0624 9BF80200 	    ldrb r0,[BPTR,#2]
 3020 0628 6060     	    str r0,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 83


 3021 062a 00B5FFF7 	    _CALL show_trace 
 3021      FEFF5DF8 
 3021      04EB
 3022 0634 7047     	    _RET 
 3023              	
 3024              	/**********************************
 3025              	  BASIC: GOTO expr 
 3026              	  go to line # | label 
 3027              	**********************************/
 3028 0636 00BF     	    _FUNC goto
 3029 0638 00B5FFF7 	    _CALL search_target 
 3029      FEFF5DF8 
 3029      04EB
 3030 0642 E0E7     	    b target  
 3031              	
 3032              	/***************************************
 3033              	  BASIC: HEX 
 3034              	  set numeric base to hexadecimal 
 3035              	***************************************/
 3036              	    _FUNC hex_base
 3037 0644 4FF01000 	    mov r0,#16 
 3038 0648 A061     	    str r0,[UPP,#BASE]
 3039 064a 7047     	    _RET 
 3040              	
 3041              	/**********************************************
 3042              	  BASIC: IF relation THEN statement
 3043              	  execute statement only if relation is true
 3044              	*********************************************/
 3045              	    _FUNC if
 3046 064c 00B5FFF7 	    _CALL relation 
 3046      FEFF5DF8 
 3046      04EB
 3047 0656 09B9     	    cbnz r1,9f 
 3048 0658 D4F804A0 	    ldr IN,[UPP,#COUNT]
 3049 065c 7047     	9:  _RET 
 3050              	
 3051              	/*******************************************************
 3052              	  BASIC: THEN statement
 3053              	  statements following THEN are executed if relation is !=0
 3054              	  optional, retained for compatibility.
 3055              	******************************************************/
 3056 065e 00BF     	    _FUNC then 
 3057              	// do nothing 
 3058 0660 7047     	    _RET
 3059              	
 3060              	/****************************************
 3061              	  BASIC: INPUT [string]var [,[string]var]+
 3062              	  prompt user for variable value
 3063              	  use:
 3064              	    r2   
 3065              	    T1   variable indice 
 3066              	***************************************/
 3067 0662 00BF     	     _FUNC input_var
 3068              	//    push {r2,T1}
 3069 0664 00B5FFF7 	1:  _CALL next_token 
 3069      FEFF5DF8 
 3069      04EB
ARM GAS  tinyBasic.s 			page 84


 3070 066e 0228     	    cmp r0,#2
 3071 0670 71D4     	    bmi 8f 
 3072 0672 1C28     	    cmp r0,#TK_QSTR 
 3073 0674 11D1     	    bne 2f 
 3074 0676 0846     	    mov r0,r1
 3075 0678 DFF8E810 	    ldr r1,str_buffer
 3076 067c 00B5FFF7 	    _CALL strcpy
 3076      FEFF5DF8 
 3076      04EB
 3077 0686 4FF01400 	    mov r0,#TK_VAR   
 3078 068a 00B5FFF7 	    _CALL expect 
 3078      FEFF5DF8 
 3078      04EB
 3079 0694 8846     	    mov T1,r1 
 3080 0696 3348     	    ldr r0,str_buffer 
 3081 0698 08E0     	    b 3f 
 3082 069a 1428     	2:  cmp r0,#TK_VAR 
 3083 069c 7FF4FEAF 	    bne syntax_error     
 3084 06a0 8846     	    mov T1,r1 
 3085 06a2 01F14100 	    add r0,r1,#'A' 
 3086 06a6 2F49     	    ldr r1,str_buffer
 3087 06a8 0880     	    strh r0,[r1]
 3088 06aa 0846     	    mov r0,r1 
 3089 06ac 00B5FFF7 	3:  _CALL uart_puts  
 3089      FEFF5DF8 
 3089      04EB
 3090 06b6 4FF03D00 	    mov r0,#'='
 3091 06ba 00B5FFF7 	    _CALL uart_putc
 3091      FEFF5DF8 
 3091      04EB
 3092 06c4 DFF89800 	    ldr r0,input_buffer
 3093 06c8 4FF02201 	    mov r1,#34 
 3094 06cc 00B5FFF7 	    _CALL readln
 3094      FEFF5DF8 
 3094      04EB
 3095 06d6 79B3     	    cbz r1,6f
 3096 06d8 0178     	    ldrb r1,[r0]
 3097 06da 01B4     	    push {r0}
 3098 06dc 0846     	    mov r0,r1
 3099 06de 00B5FFF7 	    _CALL is_letter 
 3099      FEFF5DF8 
 3099      04EB
 3100 06e8 01BC     	    pop {r0}
 3101 06ea 02D1     	    bne 3f 
 3102 06ec 01F05F01 	    and r1,#0x5f // uppercase  
 3103 06f0 24E0     	    b 7f 
 3104 06f2 4FF00102 	3:  mov r2,#1
 3105 06f6 2D29     	    cmp r1,#'-'
 3106 06f8 04D1     	    bne 3f 
 3107 06fa 4FF0FF32 	    mov r2,#-1 
 3108 06fe 00F10100 	    add r0,#1 
 3109 0702 0DE0     	    b 4f  
 3110 0704 2429     	3:  cmp r1,#'$'
 3111 0706 04D1     	    bne 3f 
 3112 0708 4FF01001 	    mov r1,#16
 3113 070c 00F10100 	    add r0,#1  
 3114 0710 08E0     	    b 5f 
ARM GAS  tinyBasic.s 			page 85


 3115 0712 2629     	3:  cmp r1,#'&' 
 3116 0714 04D1     	    bne 4f 
 3117 0716 4FF00201 	    mov r1,#2
 3118 071a 00F10100 	    add r0,#1 
 3119 071e 01E0     	    b 5f 
 3120 0720 4FF00A01 	4:  mov r1,#10 
 3121 0724 00B5FFF7 	5:  _CALL atoi 
 3121      FEFF5DF8 
 3121      04EB
 3122 072e 18B9     	    cbnz r0,6f
 3123 0730 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3124 0734 FFF7FEBF 	    b tb_error
 3125 0738 02FB01F1 	6:  mul r1,r2 
 3126 073c 4046     	7:  mov r0,T1 
 3127 073e 00B5FFF7 	    _CALL set_var
 3127      FEFF5DF8 
 3127      04EB
 3128 0748 00B5FFF7 	    _CALL next_token
 3128      FEFF5DF8 
 3128      04EB
 3129 0752 0228     	    cmp r0,#TK_COMMA 
 3130 0754 86D0     	    beq 1b 
 3131 0756 D4F800A0 	8:  _UNGET_TOKEN          
 3131      D4F808B0 
 3132              	9:  // pop {r2,T1}       
 3133 075e 7047     	    _RET 
 3134 0760 00000000 	input_buffer: .word _tib 
 3135 0764 00000000 	str_buffer: .word _pad 
 3136              	
 3137              	
 3138              	/*****************************************
 3139              	  BASIC: INVERT(expr)
 3140              	  return 1's complement of expr
 3141              	****************************************/
 3142              	    _FUNC invert
 3143 0768 00B5FFF7 	    _CALL func_args
 3143      FEFF5DF8 
 3143      04EB
 3144 0772 0128     	    cmp r0,#1 
 3145 0774 7FF4FEAF 	    bne syntax_error
 3146 0778 5CF8041B 	    _POP r1  
 3147 077c 6FEA0101 	    mvn r1,r1
 3148 0780 4FF01B00 	    mov r0,#TK_INTGR
 3149 0784 7047     	    _RET 
 3150              	
 3151              	/*************************************
 3152              	  BASIC: KEY 
 3153              	  wait for a character from console
 3154              	*************************************/
 3155 0786 00BF     	    _FUNC key
 3156 0788 00B5FFF7 	    _CALL uart_getc
 3156      FEFF5DF8 
 3156      04EB
 3157 0792 0146     	    mov r1,r0
 3158 0794 4FF01300 	    mov r0,#TK_CHAR 
 3159 0798 7047     	    _RET  
 3160              	
ARM GAS  tinyBasic.s 			page 86


 3161              	/******************************
 3162              	  BASIC: [LET] var=expr 
 3163              	         [LET] @(expr)=expr
 3164              	  input:
 3165              	    none 
 3166              	  output:
 3167              	    none 
 3168              	  use:
 3169              	
 3170              	****************************/         
 3171 079a 00BF     	    _FUNC let
 3172 079c 00B5FFF7 	    _CALL next_token 
 3172      FEFF5DF8 
 3172      04EB
 3173 07a6 1428     	    cmp r0,#TK_VAR
 3174 07a8 03D0     	    beq let_var 
 3175 07aa 0C28     	    cmp r0,#TK_ARRAY 
 3176 07ac 07D0     	    beq let_array 
 3177 07ae FFF7FEBF 	    b syntax_error 
 3178              	let_var:
 3179 07b2 4FEA8101 	    lsl r1,#2
 3180 07b6 04F16000 	    add r0,UPP,#VARS
 3181 07ba 0844     	    add r0,r1
 3182 07bc 1FE0     	    b 1f 
 3183              	let_array: 
 3184 07be 4FF00500 	    mov r0,#TK_LPAREN
 3185 07c2 00B5FFF7 	    _CALL expect 
 3185      FEFF5DF8 
 3185      04EB
 3186 07cc 00B5FFF7 	    _CALL expression
 3186      FEFF5DF8 
 3186      04EB
 3187 07d6 1B28     	    cmp r0,#TK_INTGR 
 3188 07d8 7FF4FEAF 	    bne syntax_error
 3189 07dc 4CF8041D 	    _PUSH r1 
 3190 07e0 4FF00600 	    mov r0,#TK_RPAREN
 3191 07e4 00B5FFF7 	    _CALL expect 
 3191      FEFF5DF8 
 3191      04EB
 3192 07ee 5CF8041B 	    _POP r1 
 3193 07f2 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3194 07f6 4FEA8101 	    lsl r1,#2 
 3195 07fa A0EB0100 	    sub r0,r1 
 3196 07fe 4CF8040D 	1:  _PUSH r0 
 3197 0802 4FF00D00 	    mov r0,#TK_EQUAL 
 3198 0806 00B5FFF7 	    _CALL expect 
 3198      FEFF5DF8 
 3198      04EB
 3199 0810 00B5FFF7 	    _CALL expression   
 3199      FEFF5DF8 
 3199      04EB
 3200 081a 1B28     	    cmp r0,#TK_INTGR
 3201 081c 7FF4FEAF 	    bne syntax_error   
 3202 0820 5CF8040B 	2:  _POP r0 
 3203 0824 0160     	    str r1,[r0]
 3204 0826 7047     	    _RET  
 3205              	
ARM GAS  tinyBasic.s 			page 87


 3206              	/***************************************
 3207              	  BASIC: LIST [[first]-last]
 3208              	  use:
 3209              	    r2   first line# 
 3210              	    r3   last line#
 3211              	    T1   *line 
 3212              	    T2   TXTEND 
 3213              	**************************************/  
 3214              	    _FUNC list
 3215 0828 206C10F0 	    _CLO
 3215      010F03D0 
 3215      4FF00700 
 3215      FFF7FEBF 
 3216 0838 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3217 083c D4F83490 	    ldr T2,[UPP,#TXTEND]
 3218 0840 B8F80020 	    ldrh r2,[T1]
 3219 0844 4FF6FF73 	    mov r3,#65535 
 3220 0848 00B5FFF7 	    _CALL next_token 
 3220      FEFF5DF8 
 3220      04EB
 3221 0852 10B3     	    cbz r0,6f 
 3222 0854 1B28     	    cmp r0,#TK_INTGR
 3223 0856 09D1     	    bne 1f 
 3224 0858 0A46     	    mov r2,r1 // first line
 3225 085a 00B5FFF7 	    _CALL next_token
 3225      FEFF5DF8 
 3225      04EB
 3226 0864 0028     	    cmp r0,#TK_NONE 
 3227 0866 01D1     	    bne 1f 
 3228 0868 1346     	    mov r3,r2 
 3229 086a 0CE0     	    b 4f 
 3230 086c 0828     	1:  cmp r0,#TK_MINUS 
 3231 086e 7FF4FEAF 	    bne syntax_error 
 3232 0872 00B5FFF7 	    _CALL next_token 
 3232      FEFF5DF8 
 3232      04EB
 3233 087c 18B1     	    cbz r0,4f 
 3234 087e 1B28     	    cmp r0,#TK_INTGR
 3235 0880 7FF4FEAF 	    bne syntax_error  
 3236 0884 0B46     	    mov r3,r1 
 3237              	4:  // skip lines below r2 
 3238 0886 B8F80000 	    ldrh r0,[T1]
 3239 088a 9042     	    cmp r0,r2 
 3240 088c 05D5     	    bpl 6f 
 3241 088e 98F80200 	    ldrb r0,[T1,#2]
 3242 0892 8044     	    add T1,r0
 3243 0894 C845     	    cmp T1,T2 
 3244 0896 F6D4     	    bmi 4b
 3245 0898 1AE0     	    b 9f 
 3246 089a C845     	6:  cmp T1,T2  
 3247 089c 18D5     	    bpl 9f
 3248 089e 4046     	    mov r0,T1   
 3249 08a0 DFF83010 	    ldr r1,out_buff 
 3250 08a4 00B5FFF7 	    _CALL decompile_line 
 3250      FEFF5DF8 
 3250      04EB
 3251 08ae 00B5FFF7 	    _CALL uart_puts 
ARM GAS  tinyBasic.s 			page 88


 3251      FEFF5DF8 
 3251      04EB
 3252 08b8 00B5FFF7 	    _CALL cr 
 3252      FEFF5DF8 
 3252      04EB
 3253 08c2 98F80200 	    ldrb r0,[T1,#2]
 3254 08c6 8044     	    add T1,r0
 3255 08c8 B8F80000 	    ldrh r0,[T1]
 3256 08cc 9842     	    cmp r0,r3 
 3257 08ce E4DD     	    ble 6b 
 3258 08d0 FFF7FEBF 	9:  b warm_start 
 3259 08d4 00000000 	out_buff: .word _tib 
 3260              	
 3261              	/********************************
 3262              	  BASIC: LOCATE line,col
 3263              	  return log base 2 of expr 
 3264              	********************************/
 3265              	    _FUNC locate
 3266 08d8 00B5FFF7 	    _CALL arg_list 
 3266      FEFF5DF8 
 3266      04EB
 3267 08e2 0228     	    cmp r0,#2 
 3268 08e4 7FF4FEAF 	    bne syntax_error
 3269 08e8 5CF8041B 	    _POP r1
 3270 08ec 5CF8040B 	    _POP r0  
 3271 08f0 00B5FFF7 	    _CALL set_curpos 
 3271      FEFF5DF8 
 3271      04EB
 3272 08fa 7047     	    _RET 
 3273              	
 3274              	
 3275              	/****************************************
 3276              	  BASIC: LSHIFT(expr1,expr2)
 3277              	  shift right expr1 of expr2 bits 
 3278              	****************************************/
 3279              	    _FUNC lshift
 3280 08fc 00B5FFF7 	    _CALL func_args
 3280      FEFF5DF8 
 3280      04EB
 3281 0906 0228     	    cmp r0,#2
 3282 0908 7FF4FEAF 	    bne syntax_error 
 3283 090c BCE80300 	    ldmia DP!,{r0,r1}
 3284 0910 01FA00F1 	    lsl r1,r0 
 3285 0914 4FF01B00 	    mov r0,#TK_INTGR
 3286 0918 7047     	    _RET 
 3287              	
 3288              	/***********************************
 3289              	  BASIC: NEW 
 3290              	  delete existing program in memory
 3291              	  and clear variables and RAM 
 3292              	***********************************/
 3293 091a 00BF     	    _FUNC new
 3294 091c 206C10F0 	    _CLO 
 3294      010F03D0 
 3294      4FF00700 
 3294      FFF7FEBF 
 3295 092c 00B5FFF7 	    _CALL clear_basic 
ARM GAS  tinyBasic.s 			page 89


 3295      FEFF5DF8 
 3295      04EB
 3296 0936 FFF7FEBF 	    b warm_start   
 3297              	
 3298              	/************************************
 3299              	  BASIC: NOT relation  
 3300              	  invert logical value or relation
 3301              	************************************/
 3302 093a 00BF     	      _FUNC func_not
 3303 093c 00B5FFF7 	      _CALL relation 
 3303      FEFF5DF8 
 3303      04EB
 3304 0946 11B1     	      cbz r1,8f 
 3305 0948 81EA0101 	      eor r1,r1
 3306 094c 01E0     	      b 9f 
 3307 094e 4FF0FF31 	  8:  mov r1,#-1
 3308 0952 7047     	  9:  _RET 
 3309              	
 3310              	/******************************************
 3311              	  BASIC: OR(expr1,expr2)
 3312              	  binary OR between 2 expressions
 3313              	******************************************/
 3314              	    _FUNC bit_or
 3315 0954 00B5FFF7 	    _CALL func_args
 3315      FEFF5DF8 
 3315      04EB
 3316 095e 0228     	    cmp r0,#2
 3317 0960 7FF4FEAF 	    bne syntax_error
 3318 0964 5CF8040B 	    _POP r0 
 3319 0968 5CF8041B 	    _POP r1
 3320 096c 41EA0001 	    orr r1,r0 
 3321 0970 4FF01B00 	    mov r0,#TK_INTGR
 3322 0974 7047     	    _RET 
 3323              	
 3324              	/****************************************
 3325              	  BASIC: IN(gpio,pin) 
 3326              	  read gpio_idr selected pin  
 3327              	***************************************/
 3328 0976 00BF     	    _FUNC pin_input 
 3329 0978 00B5FFF7 	    _CALL func_args 
 3329      FEFF5DF8 
 3329      04EB
 3330 0982 0228     	    cmp r0,#2 
 3331 0984 7FF4FEAF 	    bne syntax_error  
 3332 0988 BCE80300 	    ldmia DP!,{r0,r1}
 3333 098c 4FF00802 	    mov r2,#GPIO_IDR 
 3334 0990 8A58     	    ldr r2,[r1,r2]
 3335 0992 00F00F00 	    and r0,#15 
 3336 0996 22FA00F2 	    lsr r2,r0 
 3337 099a 02F00101 	    and r1,r2,#1 
 3338 099e 4FF01B00 	    mov r0,#TK_INTGR
 3339 09a2 7047     	    _RET 
 3340              	
 3341              	
 3342              	/****************************************
 3343              	  BASIC: OUT gpio,pin,value 
 3344              	   output to gpio_odr
ARM GAS  tinyBasic.s 			page 90


 3345              	***************************************/
 3346              	    _FUNC out
 3347 09a4 00B5FFF7 	    _CALL arg_list 
 3347      FEFF5DF8 
 3347      04EB
 3348 09ae 0328     	    cmp r0,#3 
 3349 09b0 7FF4FEAF 	    bne syntax_error 
 3350 09b4 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3351 09b8 08B9     	    cbnz r0,1f 
 3352 09ba 01F11001 	    add r1,#16 
 3353 09be 4FF00100 	1:  mov r0,#1 
 3354 09c2 00FA01F0 	    lsl r0,r1 
 3355 09c6 1061     	    str r0,[r2,#GPIO_BSRR]    
 3356 09c8 7047     	    _RET 
 3357              	
 3358              	
 3359              	/****************************************
 3360              	  BASIC: PAD 
 3361              	  return pad buffer address 
 3362              	****************************************/
 3363 09ca 00BF     	    _FUNC pad_ref
 3364 09cc 0149     	    ldr r1,pad_adr  
 3365 09ce 4FF01B00 	    mov r0,#TK_INTGR 
 3366 09d2 7047     	    _RET 
 3367 09d4 00000000 	pad_adr: .word _pad 
 3368              	
 3369              	/***********************
 3370              	  BASIC: PAUSE expr 
 3371              	  suspend execution for 
 3372              	  expr milliseconds 
 3373              	************************/
 3374              	    _FUNC pause
 3375 09d8 00B5FFF7 	    _CALL expression 
 3375      FEFF5DF8 
 3375      04EB
 3376 09e2 1B28     	    cmp r0,#TK_INTGR 
 3377 09e4 7FF4FEAF 	    bne syntax_error 
 3378 09e8 E069     	    ldr r0,[UPP,#TICKS]
 3379 09ea 0844     	    add r0,r1 
 3380 09ec E169     	1:  ldr r1,[UPP,#TICKS]
 3381 09ee 8842     	    cmp r0,r1 
 3382 09f0 FCD1     	    bne 1b     
 3383 09f2 7047     	    _RET 
 3384              	
 3385              	/***************************************************
 3386              	  BASIC: PMODE GPIOx,pin,mode
 3387              	  configure a digital pin for input|output
 3388              	  paramters:
 3389              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3390              	    pin      pin {0..15} 
 3391              	    mode 
 3392              	    for input mode:
 3393              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3394              	    for output mode:
 3395              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3396              	***************************************************/
 3397              	    _FUNC pin_mode
ARM GAS  tinyBasic.s 			page 91


 3398 09f4 00B5FFF7 	    _CALL arg_list
 3398      FEFF5DF8 
 3398      04EB
 3399 09fe 0328     	    cmp r0,#3 
 3400 0a00 7FF4FEAF 	    bne syntax_error 
 3401 0a04 5CF8042B 	    _POP r2 // mode 
 3402 0a08 5CF8041B 	    _POP r1 // pin 
 3403 0a0c 5CF8040B 	    _POP r0 // gpio 
 3404 0a10 00B500F0 	    _CALL gpio_config 
 3404      03F85DF8 
 3404      04EB
 3405 0a1a 7047     	    _RET 
 3406              	
 3407              	/**********************************
 3408              	  gpio_config 
 3409              	  Configure gpio mode 
 3410              	  input:
 3411              	    r0   GPIOx 
 3412              	    r1   pin 
 3413              	    r2   mode 
 3414              	  output:
 3415              	    none 
 3416              	  use:
 3417              	    r3,T1 
 3418              	**********************************/
 3419              	    _FUNC gpio_config
 3420 0a1c 2DE90801 	    push {r3,T1}
 3421 0a20 8046     	    mov T1,r0 
 3422 0a22 80EA0000 	    eor r0,r0 
 3423 0a26 102A     	    cmp r2,#16
 3424 0a28 06D4     	    bmi 0f
 3425 0a2a 5FEA7202 	    rors r2,#1  
 3426 0a2e 02F00F02 	    and r2,#15
 3427 0a32 01D3     	    bcc 0f 
 3428 0a34 4FF00100 	    mov r0,#1
 3429 0a38 00FA01F0 	0:  lsl r0,r1
 3430 0a3c A8F81000 	    strh r0,[T1,#GPIO_BSRR]
 3431 0a40 0829     	1:  cmp r1,#8
 3432 0a42 03D4     	    bmi 2f 
 3433 0a44 08F10408 	    add T1,#4 // CRH
 3434 0a48 A1F10801 	    sub r1,#8 
 3435              	2:  
 3436 0a4c 4FEA8101 	    lsl r1,#2 
 3437 0a50 4FF00F00 	    mov r0,#15
 3438 0a54 00FA01F0 	    lsl r0,r1
 3439 0a58 6FEA0000 	    mvn r0,r0 
 3440 0a5c D8F80030 	    ldr r3,[T1]
 3441 0a60 03EA0003 	    and r3,r0 
 3442 0a64 02FA01F2 	    lsl r2,r1
 3443 0a68 43EA0203 	    orr r3,r2 
 3444 0a6c C8F80030 	    str r3,[T1]
 3445 0a70 BDE80801 	    pop {r3,T1}
 3446 0a74 7047     	    _RET 
 3447              	
 3448              	
 3449              	/*****************************************
 3450              	  BASIC: PEEKB (expr)  
ARM GAS  tinyBasic.s 			page 92


 3451              	  return byte value at address 
 3452              	*****************************************/
 3453 0a76 00BF     	    _FUNC peek8
 3454 0a78 00B5FFF7 	    _CALL func_args  
 3454      FEFF5DF8 
 3454      04EB
 3455 0a82 0128     	    cmp r0,#1
 3456 0a84 3FF5FEAF 	    bmi syntax_error
 3457 0a88 5CF8041B 	    _POP r1 
 3458 0a8c 0978     	    ldrb r1,[r1]
 3459 0a8e 4FF01B00 	    mov r0,#TK_INTGR     
 3460 0a92 7047     	    _RET 
 3461              	
 3462              	/*****************************************
 3463              	  BASIC: PEEKH (expr)  
 3464              	  return byte value at address 
 3465              	*****************************************/
 3466              	    _FUNC peek16
 3467 0a94 00B5FFF7 	    _CALL func_args  
 3467      FEFF5DF8 
 3467      04EB
 3468 0a9e 0128     	    cmp r0,#1
 3469 0aa0 3FF5FEAF 	    bmi syntax_error
 3470 0aa4 5CF8041B 	    _POP r1 
 3471 0aa8 0988     	    ldrh r1,[r1]
 3472 0aaa 4FF01B00 	    mov r0,#TK_INTGR     
 3473 0aae 7047     	    _RET 
 3474              	
 3475              	/*****************************************
 3476              	  BASIC: PEEKW (expr)  
 3477              	  return byte value at address 
 3478              	*****************************************/
 3479              	    _FUNC peek32
 3480 0ab0 00B5FFF7 	    _CALL func_args  
 3480      FEFF5DF8 
 3480      04EB
 3481 0aba 0128     	    cmp r0,#1
 3482 0abc 3FF5FEAF 	    bmi syntax_error
 3483 0ac0 5CF8041B 	    _POP r1 
 3484 0ac4 0968     	    ldr r1,[r1]
 3485 0ac6 4FF01B00 	    mov r0,#TK_INTGR     
 3486 0aca 7047     	    _RET 
 3487              	
 3488              	
 3489              	/**********************************
 3490              	  BASIC: POKE8 addr,byte
 3491              	  store byte at addr   
 3492              	**********************************/
 3493              	    _FUNC poke8
 3494 0acc 00B5FFF7 	    _CALL arg_list
 3494      FEFF5DF8 
 3494      04EB
 3495 0ad6 0228     	    cmp r0,#2 
 3496 0ad8 7FF4FEAF 	    bne syntax_error
 3497 0adc BCE80300 	    ldmia DP!,{r0,r1} 
 3498 0ae0 0870     	    strb r0,[r1]
 3499 0ae2 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 93


 3500              	
 3501              	/**********************************
 3502              	  BASIC: POKE16 addr,hword
 3503              	  store hword at addr   
 3504              	**********************************/
 3505              	    _FUNC poke16
 3506 0ae4 00B5FFF7 	    _CALL arg_list
 3506      FEFF5DF8 
 3506      04EB
 3507 0aee 0228     	    cmp r0,#2 
 3508 0af0 7FF4FEAF 	    bne syntax_error
 3509 0af4 BCE80300 	    ldmia DP!,{r0,r1} 
 3510 0af8 0880     	    strh r0,[r1]
 3511 0afa 7047     	    _RET 
 3512              	
 3513              	/**********************************
 3514              	  BASIC: POKE32 addr,word
 3515              	  store word at addr   
 3516              	**********************************/
 3517              	    _FUNC poke32
 3518 0afc 00B5FFF7 	    _CALL arg_list 
 3518      FEFF5DF8 
 3518      04EB
 3519 0b06 0228     	    cmp r0,#2 
 3520 0b08 7FF4FEAF 	    bne syntax_error
 3521 0b0c BCE80300 	    ldmia DP!,{r0,r1} 
 3522 0b10 0860     	    str r0,[r1]
 3523 0b12 7047     	    _RET 
 3524              	
 3525              	
 3526              	
 3527              	/****************************
 3528              	  BASIC: PRINT|? arg_list 
 3529              	  print list of arguments 
 3530              	****************************/
 3531              	    _FUNC print
 3532 0b14 206C     	    ldr r0,[UPP,#FLAGS]
 3533 0b16 40F08000 	    orr r0,#FPRINT 
 3534 0b1a 2064     	    str r0,[UPP,#FLAGS]
 3535 0b1c 88EA0808 	    eor T1,T1 
 3536 0b20 00B5FFF7 	0:  _CALL expression
 3536      FEFF5DF8 
 3536      04EB
 3537 0b2a 1B28     	    cmp r0,#TK_INTGR
 3538 0b2c 07D1     	    bne 1f 
 3539 0b2e 0846     	    mov r0,r1
 3540 0b30 A169     	    ldr r1,[UPP,#BASE]
 3541 0b32 00B5FFF7 	    _CALL print_int
 3541      FEFF5DF8 
 3541      04EB
 3542 0b3c 39E0     	    b 8f  
 3543 0b3e 0128     	1:  cmp r0,#TK_COLON 
 3544 0b40 00DC     	    bgt 2f
 3545 0b42 4DE0     	    b unget_exit 
 3546 0b44 1C28     	2:  cmp r0,#TK_QSTR 
 3547 0b46 06D1     	    bne 3f
 3548 0b48 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 94


 3549 0b4a 00B5FFF7 	    _CALL uart_puts  
 3549      FEFF5DF8 
 3549      04EB
 3550 0b54 2DE0     	    b 8f 
 3551 0b56 1628     	3:  cmp r0,#TK_CFUNC
 3552 0b58 05D1     	    bne 4f
 3553 0b5a 0846     	    mov r0,r1
 3554 0b5c 00B5FFF7 	    _CALL execute 
 3554      FEFF5DF8 
 3554      04EB
 3555 0b66 1328     	4:  cmp r0,#TK_CHAR 
 3556 0b68 06D1     	    bne 5f 
 3557 0b6a 0846     	    mov r0,r1 
 3558 0b6c 00B5FFF7 	    _CALL uart_putc 
 3558      FEFF5DF8 
 3558      04EB
 3559 0b76 1CE0     	    b 8f 
 3560 0b78 0428     	5:  cmp r0,#TK_SHARP
 3561 0b7a 09D1     	    bne 6f 
 3562 0b7c 00B5FFF7 	   _CALL next_token
 3562      FEFF5DF8 
 3562      04EB
 3563 0b86 1B28     	    cmp r0,#TK_INTGR  
 3564 0b88 7FF4FEAF 	    bne syntax_error 
 3565 0b8c 6164     	    str r1,[UPP,#TAB_WIDTH]
 3566 0b8e 10E0     	    b 8f 
 3567 0b90 1728     	6:  cmp r0,#TK_CMD 
 3568 0b92 25D1     	    bne unget_exit  
 3569 0b94 5029     	    cmp r1,#TAB_IDX 
 3570 0b96 05D1     	    bne 6f
 3571 0b98 00B500F0 	    _CALL tab 
 3571      47FD5DF8 
 3571      04EB
 3572 0ba2 06E0     	    b 8f 
 3573 0ba4 4729     	6:  cmp r1,#SPC_IDX  
 3574 0ba6 1BD1     	    bne unget_exit
 3575 0ba8 00B500F0 	    _CALL spc   
 3575      13FC5DF8 
 3575      04EB
 3576 0bb2 88EA0808 	8:  eor T1,T1  
 3577 0bb6 00B5FFF7 	    _CALL next_token
 3577      FEFF5DF8 
 3577      04EB
 3578 0bc0 90B1     	    cbz r0, print_exit  
 3579 0bc2 0228     	    cmp r0,#TK_COMMA 
 3580 0bc4 02D1     	    bne 8f 
 3581 0bc6 4FF0FF38 	    mov T1,#-1
 3582 0bca A9E7     	    b 0b
 3583 0bcc 0328     	8:  cmp r0,#TK_SEMIC 
 3584 0bce 07D1     	    bne unget_exit 
 3585 0bd0 00B5FFF7 	    _CALL tabulation 
 3585      FEFF5DF8 
 3585      04EB
 3586 0bda 4FF0FF38 	    mov T1,#-1
 3587 0bde 9FE7     	    b 0b
 3588              	unget_exit:         
 3589 0be0 D4F800A0 	   _UNGET_TOKEN 
ARM GAS  tinyBasic.s 			page 95


 3589      D4F808B0 
 3590              	print_exit:
 3591 0be8 18EA0808 	    ands T1,T1 
 3592 0bec 08D1     	    bne 9f
 3593 0bee 00B5FFF7 	    _CALL cr
 3593      FEFF5DF8 
 3593      04EB
 3594 0bf8 206C     	    ldr r0,[UPP,#FLAGS]
 3595 0bfa 80F08000 	    eor r0,#FPRINT 
 3596 0bfe 2064     	    str r0,[UPP,#FLAGS] 
 3597 0c00 7047     	9:  _RET 
 3598              	
 3599              	/**************************************
 3600              	  BASIC: QKEY
 3601              	  check if key pressed 
 3602              	**************************************/ 
 3603 0c02 00BF     	    _FUNC qkey
 3604 0c04 4FF00001 	    mov r1,#0
 3605 0c08 00B5FFF7 	    _CALL uart_qkey
 3605      FEFF5DF8 
 3605      04EB
 3606 0c12 01D0     	    beq 9f 
 3607 0c14 4FF0FF31 	    mov r1,#-1 
 3608 0c18 4FF01B00 	9:  mov r0,#TK_INTGR
 3609 0c1c 7047     	    _RET 
 3610              	
 3611              	/******************************************
 3612              	  BASIC RND(expr)
 3613              	  generate random number between 0..expr-1
 3614              	******************************************/
 3615 0c1e 00BF     	    _FUNC random
 3616 0c20 00B5FFF7 	    _CALL func_args 
 3616      FEFF5DF8 
 3616      04EB
 3617 0c2a 0128     	    cmp r0,#1
 3618 0c2c 7FF4FEAF 	    bne syntax_error
 3619 0c30 11F0004F 	    tst r1,#(1<<31)
 3620 0c34 03D0     	    beq 1f 
 3621 0c36 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 3622 0c3a FFF7FEBF 	    b tb_error 
 3623 0c3e 606A     	1:  ldr r0,[UPP,#SEED]
 3624 0c40 4FEA4031 	    lsl r1,r0,#13
 3625 0c44 81EA0001 	    eor r1,r0
 3626 0c48 4FEA5140 	    lsr r0,r1,#17
 3627 0c4c 81EA0001 	    eor r1,r0
 3628 0c50 4FEA4110 	    lsl r0,r1,#5
 3629 0c54 81EA0001 	    eor r1,r0
 3630 0c58 6162     	    str r1,[UPP,#SEED]
 3631 0c5a 5CF8040B 	    _POP r0 
 3632 0c5e B1FBF0F2 	    udiv r2,r1,r0  
 3633 0c62 00FB02F2 	    mul r2,r0 
 3634 0c66 A1EB0201 	    sub r1,r2 
 3635 0c6a 4FF01B00 	    mov r0,#TK_INTGR
 3636 0c6e 7047     	    _RET 
 3637              	
 3638              	/****************************************
 3639              	  BASIC: RSHIFT(expr1,expr2)
ARM GAS  tinyBasic.s 			page 96


 3640              	  shift left expr1 de expr2 bits 
 3641              	****************************************/
 3642              	    _FUNC rshift
 3643 0c70 00B5FFF7 	    _CALL func_args
 3643      FEFF5DF8 
 3643      04EB
 3644 0c7a 0228     	    cmp r0,#2 
 3645 0c7c 7FF4FEAF 	    bne syntax_error
 3646 0c80 BCE80300 	    ldmia DP!,{r0,r1}
 3647 0c84 21FA00F1 	    lsr r1,r0  
 3648 0c88 4FF01B00 	    mov r0,#TK_INTGR
 3649 0c8c 7047     	    _RET 
 3650              	
 3651              	/****************************
 3652              	  BASIC: RUN 
 3653              	  execute program in memory
 3654              	****************************/
 3655 0c8e 00BF     	    _FUNC run
 3656 0c90 206C10F0 	    _CLO 
 3656      010F03D0 
 3656      4FF00700 
 3656      FFF7FEBF 
 3657 0ca0 206B     	    ldr r0,[UPP,#TXTBGN]
 3658 0ca2 616B     	    ldr r1,[UPP,#TXTEND]
 3659 0ca4 C4F8D010 	    str r1,[UPP,#HERE]
 3660 0ca8 8842     	    cmp r0,r1
 3661 0caa 21D0     	    beq 9f
 3662 0cac 216C     	    ldr r1,[UPP,#FLAGS]
 3663 0cae 11F0080F 	    tst r1,#FSTOP
 3664 0cb2 09D0     	    beq 1f
 3665 0cb4 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3666 0cb8 6060     	    str r0,[UPP,#COUNT]
 3667 0cba 206C     	    ldr r0,[UPP,#FLAGS]
 3668 0cbc 4FF00901 	    mov r1,#FRUN+FSTOP
 3669 0cc0 80EA0100 	    eor r0,r1
 3670 0cc4 2064     	    str r0,[UPP,#FLAGS] 
 3671 0cc6 13E0     	    b 9f  
 3672 0cc8 8178     	1:  ldrb r1,[r0,#2]
 3673 0cca 6160     	    str r1,[UPP,#COUNT]
 3674 0ccc 8346     	    mov BPTR,r0 
 3675 0cce 4FF0030A 	    mov IN,#3
 3676 0cd2 606B     	    ldr r0,[UPP,#TXTEND]
 3677              	    // reset dataline pointers 
 3678 0cd4 80EA0000 	    eor r0,r0 
 3679 0cd8 E060     	    str r0,[UPP,#DATAPTR]
 3680 0cda 2061     	    str r0,[UPP,#DATA]
 3681 0cdc 6061     	    str r0,[UPP,#DATALEN] 
 3682 0cde 206C     	    ldr r0,[UPP,#FLAGS]
 3683 0ce0 40F00100 	    orr r0,#FRUN 
 3684 0ce4 2064     	    str r0,[UPP,#FLAGS]
 3685 0ce6 00B5FFF7 	    _CALL show_trace 
 3685      FEFF5DF8 
 3685      04EB
 3686 0cf0 7047     	9:  _RET 
 3687              	
 3688              	/**********************************
 3689              	        FILE SYSTEM 
ARM GAS  tinyBasic.s 			page 97


 3690              	**********************************/
 3691              	
 3692              	/*********************************
 3693              	  search_free 
 3694              	  search first free PAGE in fs
 3695              	  a PAGE is free if first word is
 3696              	  -1
 3697              	  input:
 3698              	    none 
 3699              	  output:
 3700              	    r0    addr|0
 3701              	  use:
 3702              	*********************************/
 3703 0cf2 00BF     	    _FUNC search_free 
 3704 0cf4 06B4     	    push {r1,r2}
 3705 0cf6 DFF86410 	    ldr r1,fs_addr 
 3706 0cfa 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3706      C0F60202 
 3707 0d02 0868     	1:  ldr r0,[r1]
 3708 0d04 B0F1FF3F 	    cmp r0,#-1
 3709 0d08 03D0     	    beq 8f 
 3710 0d0a 01F58061 	    add r1,#PAGE_SIZE
 3711 0d0e 9142     	    cmp r1,r2 
 3712 0d10 F7D4     	    bmi 1b 
 3713 0d12 0846     	8:  mov r0,r1 
 3714 0d14 06BC     	    pop {r1,r2}   
 3715 0d16 7047     	    _RET 
 3716              	
 3717              	/*********************************
 3718              	  search_file 
 3719              	  search for a file name 
 3720              	  in file system.
 3721              	  input: 
 3722              	    r0   .asciz target name
 3723              	  output:
 3724              	    r0    0 || address found 
 3725              	  use:
 3726              	   r0     temp 
 3727              	   r1     *file_name 
 3728              	   r2     *fs  
 3729              	   r3     target   
 3730              	**********************************/
 3731              	    _FUNC search_file 
 3732 0d18 0EB4     	    push {r1,r2,r3}
 3733 0d1a DFF84020 	    ldr r2,fs_addr
 3734 0d1e 0346     	    mov r3,r0  
 3735              	cmp_loop:
 3736 0d20 1068     	    ldr r0,[r2]
 3737 0d22 B0F1FF3F 	    cmp r0,#-1
 3738 0d26 80EA0000 	    eor r0,r0
 3739 0d2a 15D0     	    beq 9f // reached end of fs 
 3740 0d2c 1846     	1:  mov r0,r3
 3741 0d2e 02F10201 	    add r1,r2,#2
 3742 0d32 00B5FFF7 	    _CALL strcmp
 3742      FEFF5DF8 
 3742      04EB
 3743 0d3c 08B9     	    cbnz r0,2f
ARM GAS  tinyBasic.s 			page 98


 3744 0d3e 1046     	    mov r0,r2 
 3745 0d40 0AE0     	    b 9f   
 3746 0d42 1088     	2:  ldrh r0,[r2] // name length
 3747 0d44 0244     	    add r2,r0 
 3748 0d46 1088     	    ldrh r0,[r2]
 3749 0d48 1044     	    add r0,r2
 3750 0d4a 00B5FFF7 	    _CALL page_align 
 3750      FEFF5DF8 
 3750      04EB
 3751 0d54 0246     	    mov r2,r0   
 3752 0d56 E3E7     	    b cmp_loop 
 3753 0d58 0EBC     	9:  pop {r1,r2,r3}
 3754 0d5a 7047     	    _RET 
 3755              	
 3756 0d5c 00000000 	fs_addr: .word FILE_SYSTEM
 3757              	
 3758              	/*************************************
 3759              	  BASIC: DIR 
 3760              	  list files stored in fs 
 3761              	  use:
 3762              	    r0  temp 
 3763              	    r1  temp
 3764              	    r2  file count
 3765              	    r3  data size
 3766              	    T1  *fs  
 3767              	*************************************/
 3768              	    _FUNC directory
 3769 0d60 206C10F0 	    _CLO 
 3769      010F03D0 
 3769      4FF00700 
 3769      FFF7FEBF 
 3770 0d70 82EA0202 	    eor r2,r2 
 3771 0d74 5FF81C80 	    ldr T1,fs_addr 
 3772 0d78 D8F80000 	1:  ldr r0,[T1] // name length 
 3773 0d7c B0F1FF3F 	    cmp r0,#-1
 3774 0d80 2AD0     	    beq no_more_file
 3775 0d82 00F00F03 	    and r3,r0,#15
 3776 0d86 08F10200 	    add r0,T1,#2
 3777 0d8a 00B5FFF7 	    _CALL uart_puts 
 3777      FEFF5DF8 
 3777      04EB
 3778 0d94 4FF01000 	    mov r0,#16 
 3779 0d98 00B5FFF7 	    _CALL cursor_x 
 3779      FEFF5DF8 
 3779      04EB
 3780 0da2 9844     	    add T1,r3 
 3781 0da4 B8F80030 	    ldrh r3,[T1]
 3782 0da8 1846     	    mov r0,r3 
 3783 0daa 4FF00A01 	    mov r1,#10 
 3784 0dae 00B5FFF7 	    _CALL print_int
 3784      FEFF5DF8 
 3784      04EB
 3785 0db8 00B5FFF7 	    _CALL cr  
 3785      FEFF5DF8 
 3785      04EB
 3786 0dc2 08EB0300 	    add r0,T1,r3 
 3787 0dc6 00B5FFF7 	    _CALL page_align
ARM GAS  tinyBasic.s 			page 99


 3787      FEFF5DF8 
 3787      04EB
 3788 0dd0 8046     	    mov T1,r0 
 3789 0dd2 02F10102 	    add r2,#1 
 3790 0dd6 CFE7     	    b 1b  
 3791              	no_more_file:
 3792 0dd8 00B5FFF7 	    _CALL cr
 3792      FEFF5DF8 
 3792      04EB
 3793 0de2 4FF01000 	    mov r0,#16
 3794 0de6 00B5FFF7 	    _CALL cursor_x  
 3794      FEFF5DF8 
 3794      04EB
 3795 0df0 1046     	    mov r0,r2 
 3796 0df2 4FF00A01 	    mov r1,#10 
 3797 0df6 00B5FFF7 	    _CALL print_int 
 3797      FEFF5DF8 
 3797      04EB
 3798 0e00 DFF8280B 	    ldr r0,=fcount 
 3799 0e04 00B5FFF7 	    _CALL uart_puts 
 3799      FEFF5DF8 
 3799      04EB
 3800 0e0e 7047     	    _RET 
 3801 0e10 66696C65 	fcount:  .asciz "files\n"
 3801      730A00
 3802              	
 3803              	/*************************************
 3804              	  BASIC: FORGET ["name"]
 3805              	  delete file and all following 
 3806              	  if no name given delete all files 
 3807              	************************************/
 3808 0e17 00       	    _FUNC forget
 3809 0e18 2DE90802 	    push {r3,T2}
 3810 0e1c 5FF8C490 	    ldr T2,fs_addr 
 3811 0e20 E36A     	    ldr r3,[UPP,#FSFREE]
 3812 0e22 00B5FFF7 	    _CALL next_token
 3812      FEFF5DF8 
 3812      04EB
 3813 0e2c 38B1     	    cbz r0,1f // no name 
 3814 0e2e 0846     	    mov r0,r1
 3815 0e30 00B5FFF7 	    _CALL search_file
 3815      71FF5DF8 
 3815      04EB
 3816 0e3a 58B1     	    cbz r0,9f 
 3817 0e3c 8146     	    mov T2,r0 
 3818 0e3e 9945     	1:  cmp T2,r3 
 3819 0e40 08D5     	    bpl 9f 
 3820 0e42 4846     	    mov r0,T2 
 3821 0e44 00B5FFF7 	    _CALL erase_page
 3821      FEFF5DF8 
 3821      04EB
 3822 0e4e 09F58069 	    add T2,#PAGE_SIZE
 3823 0e52 F4E7     	    b 1b 
 3824 0e54 00B5FFF7 	9:  _CALL search_free
 3824      4DFF5DF8 
 3824      04EB
 3825 0e5e BDE80802 	    pop {r3,T2} 
ARM GAS  tinyBasic.s 			page 100


 3826 0e62 7047     	    _RET
 3827              	
 3828              	/**********************************
 3829              	  BASIC LOAD "name" 
 3830              	  load file in RAM for execution
 3831              	  use:
 3832              	    r0   temp
 3833              	    r1   src
 3834              	    r2   dest 
 3835              	    r3   count 
 3836              	**********************************/
 3837              	    _FUNC load
 3838 0e64 206C10F0 	    _CLO 
 3838      010F03D0 
 3838      4FF00700 
 3838      FFF7FEBF 
 3839 0e74 00B5FFF7 	    _CALL next_token 
 3839      FEFF5DF8 
 3839      04EB
 3840 0e7e 1C28     	    cmp r0,#TK_QSTR 
 3841 0e80 7FF4FEAF 	    bne syntax_error 
 3842 0e84 0846     	    mov r0,r1 
 3843              	load_autorun:     
 3844 0e86 00B5FFF7 	    _CALL search_file 
 3844      46FF5DF8 
 3844      04EB
 3845 0e90 18B9     	    cbnz r0, 1f 
 3846 0e92 4FF00900 	    mov r0,#ERR_NOT_FILE
 3847 0e96 FFF7FEBF 	    b tb_error 
 3848 0e9a 0146     	1:  mov r1,r0 
 3849 0e9c 0888     	    ldrh r0,[r1]
 3850 0e9e 0144     	    add r1,r0 // data size field  
 3851 0ea0 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3852 0ea4 226B     	    ldr r2,[UPP,#TXTBGN]
 3853 0ea6 02EB0300 	    add r0,r2,r3  
 3854 0eaa 6063     	    str r0,[UPP,#TXTEND]
 3855 0eac C4F8D000 	    str r0,[UPP,#HERE]
 3856 0eb0 03F10103 	    add r3,#1
 3857 0eb4 4FEA5303 	    lsr r3,#1
 3858              	2:  // load file data 
 3859 0eb8 31F8020B 	    ldrh r0,[r1],#2
 3860 0ebc 22F8020B 	    strh r0,[r2],#2 
 3861 0ec0 013B     	    subs r3,#1 
 3862 0ec2 F9D1     	    bne 2b 
 3863              	// report file size 
 3864 0ec4 DFF8680A 	    ldr r0,=fsize 
 3865 0ec8 00B5FFF7 	    _CALL uart_puts
 3865      FEFF5DF8 
 3865      04EB
 3866 0ed2 606B     	    ldr r0,[UPP,#TXTEND]
 3867 0ed4 236B     	    ldr r3,[UPP,#TXTBGN]
 3868 0ed6 A0EB0300 	    sub r0,r3 
 3869 0eda 4FF00A01 	    mov r1,#10 
 3870 0ede 00B5FFF7 	    _CALL print_int 
 3870      FEFF5DF8 
 3870      04EB
 3871 0ee8 DFF8480A 	    ldr r0,=data_bytes 
ARM GAS  tinyBasic.s 			page 101


 3872 0eec 00B5FFF7 	    _CALL uart_puts      
 3872      FEFF5DF8 
 3872      04EB
 3873 0ef6 7047     	    _RET 
 3874              	
 3875              	
 3876              	/*********************************
 3877              	  BASIC: SAVE "name" 
 3878              	  save program in flash memory
 3879              	  file structure:
 3880              	    .hword name_length 
 3881              	    .asciz name
 3882              	    .palign 1  
 3883              	    .hword data_length 
 3884              	    .byte  file data (variable length)  
 3885              	  use:
 3886              	    r0  temp 
 3887              	    r1  temp
 3888              	    r2  *flash 
 3889              	    r3  *ram  
 3890              	    T1  temp   
 3891              	********************************/
 3892              	    _FUNC save
 3893 0ef8 206C10F0 	    _CLO 
 3893      010F03D0 
 3893      4FF00700 
 3893      FFF7FEBF 
 3894 0f08 606B     	    ldr r0,[UPP,#TXTEND]
 3895 0f0a 216B     	    ldr r1,[UPP,#TXTBGN]
 3896 0f0c 8842     	    cmp r0,r1
 3897 0f0e 03D1     	    bne 0f 
 3898 0f10 4FF00D00 	    mov r0,#ERR_NO_PROG
 3899 0f14 FFF7FEBF 	    b tb_error 
 3900 0f18 00B5FFF7 	0:  _CALL next_token 
 3900      FEFF5DF8 
 3900      04EB
 3901 0f22 1C28     	    cmp r0,#TK_QSTR
 3902 0f24 7FF4FEAF 	    bne syntax_error 
 3903              	// check for existing 
 3904 0f28 0B46     	    mov r3,r1 // save name 
 3905 0f2a 1846     	    mov r0,r3  
 3906 0f2c 00B5FFF7 	    _CALL search_file
 3906      F3FE5DF8 
 3906      04EB
 3907 0f36 18B1     	    cbz r0,new_file 
 3908 0f38 4FF00800 	    mov r0,#ERR_DUPLICATE
 3909 0f3c FFF7FEBF 	    b tb_error 
 3910              	new_file:
 3911 0f40 4FF00100 	    mov r0,#1 
 3912 0f44 00B5FFF7 	    _CALL unlock 
 3912      FEFF5DF8 
 3912      04EB
 3913 0f4e E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3914 0f50 1846     	    mov r0,r3 // *name 
 3915 0f52 00B5FFF7 	    _CALL strlen 
 3915      FEFF5DF8 
 3915      04EB
ARM GAS  tinyBasic.s 			page 102


 3916 0f5c 00F10400 	    add r0,#4  
 3917 0f60 20F00100 	    and r0,#-2 //even size
 3918 0f64 A0F10208 	    sub T1,r0,#2  // name length counter   
 3919 0f68 1146     	1:  mov r1,r2  
 3920 0f6a 00B5FFF7 	    _CALL hword_write   
 3920      FEFF5DF8 
 3920      04EB
 3921 0f74 02F10202 	    add r2,#2  
 3922              	// write file name      
 3923 0f78 33F8020B 	2:  ldrh r0,[r3],#2 
 3924 0f7c 1146     	    mov r1,r2 
 3925 0f7e 00B5FFF7 	    _CALL hword_write
 3925      FEFF5DF8 
 3925      04EB
 3926 0f88 02F10202 	    add r2,#2
 3927 0f8c B8F10208 	    subs T1,#2
 3928 0f90 F2D1     	    bne 2b
 3929              	// write data size 
 3930 0f92 606B     	    ldr r0,[UPP,#TXTEND]
 3931 0f94 236B     	    ldr r3,[UPP,#TXTBGN]
 3932 0f96 A0EB0300 	    sub r0,r3
 3933 0f9a 8046     	    mov T1,r0
 3934 0f9c 1146     	    mov r1,r2 
 3935 0f9e 00B5FFF7 	    _CALL hword_write
 3935      FEFF5DF8 
 3935      04EB
 3936 0fa8 02F10202 	    add r2,#2 
 3937              	// write data 
 3938 0fac 08F10108 	    add T1,#1 
 3939 0fb0 4FEA5808 	    lsr T1,#1 // .hword to write 
 3940 0fb4 33F8020B 	3:  ldrh r0,[r3],#2
 3941 0fb8 1146     	    mov r1,r2
 3942 0fba 00B5FFF7 	    _CALL hword_write 
 3942      FEFF5DF8 
 3942      04EB
 3943 0fc4 02F10202 	    add r2,#2 
 3944 0fc8 B8F10108 	    subs T1,#1 
 3945 0fcc F2D1     	    bne 3b
 3946 0fce 4FF00000 	    mov r0,#0 
 3947 0fd2 00B5FFF7 	    _CALL unlock
 3947      FEFF5DF8 
 3947      04EB
 3948              	// update FSFREE     
 3949 0fdc 606B     	    ldr r0,[UPP,#TXTEND]
 3950 0fde 216B     	    ldr r1,[UPP,#TXTBGN]
 3951 0fe0 A0EB0100 	    sub r0,r1 
 3952 0fe4 8046     	    mov T1,r0 
 3953 0fe6 E16A     	    ldr r1,[UPP,#FSFREE]
 3954 0fe8 0844     	    add r0,r1 
 3955 0fea 00B5FFF7 	    _CALL page_align
 3955      FEFF5DF8 
 3955      04EB
 3956 0ff4 E062     	    str r0,[UPP,#FSFREE]
 3957 0ff6 DFF83809 	    ldr r0,=fsize
 3958 0ffa 00B5FFF7 	    _CALL uart_puts
 3958      FEFF5DF8 
 3958      04EB
ARM GAS  tinyBasic.s 			page 103


 3959 1004 4046     	    mov r0,T1 
 3960 1006 4FF00A01 	    mov r1,#10 
 3961 100a 00B5FFF7 	    _CALL print_int 
 3961      FEFF5DF8 
 3961      04EB
 3962 1014 DFF81C09 	    ldr r0,=data_bytes 
 3963 1018 00B5FFF7 	    _CALL uart_puts  
 3963      FEFF5DF8 
 3963      04EB
 3964 1022 7047     	    _RET 
 3965 1024 66696C65 	fsize: .asciz "file size: "
 3965      2073697A 
 3965      653A2000 
 3966 1030 62797465 	data_bytes: .asciz "bytes\n"
 3966      730A00
 3967              	
 3968              	
 3969              	/******************************
 3970              	  BASIC: AUTORUN ["name"]
 3971              	  set a file name to 
 3972              	  execute at boot up or if no 
 3973              	  argument cancel autorun file.
 3974              	  use:
 3975              	    T1 *ram buffer 
 3976              	*********************************/
 3977 1037 00       	    _FUNC autorun
 3978              	    // copy user page in RAM
 3979 1038 D4F83480 	    ldr T1,[UPP,#TXTEND]
 3980 103c 4FF00300 	    mov r0,#3
 3981 1040 8044     	    add T1,r0 
 3982 1042 6FEA0000 	    mvn r0,r0 
 3983 1046 08EA0008 	    and T1,r0 
 3984 104a 5FF87806 	    ldr r0,pad_adr  
 3985 104e A0EB0800 	    sub r0,T1 
 3986 1052 B0F5806F 	    cmp r0,#PAGE_SIZE 
 3987 1056 03D5     	    bpl 1f 
 3988 1058 4FF00100 	    mov r0,#ERR_MEM_FULL 
 3989 105c FFF7FEBF 	    b tb_error 
 3990 1060 DFF8D408 	1:  ldr r0,=user
 3991 1064 4146     	    mov r1,T1 
 3992 1066 4FF48062 	    mov r2,#PAGE_SIZE 
 3993 106a 00B5FFF7 	    _CALL cmove 
 3993      FEFF5DF8 
 3993      04EB
 3994              	    // erase page 
 3995 1074 DFF8C008 	    ldr r0,=user 
 3996 1078 00B5FFF7 	    _CALL erase_page
 3996      FEFF5DF8 
 3996      04EB
 3997              	    // check file name argument 
 3998 1082 00B5FFF7 	    _CALL next_token 
 3998      FEFF5DF8 
 3998      04EB
 3999 108c 1C28     	    cmp r0,#TK_QSTR 
 4000 108e 0DD0     	    beq 2f 
 4001 1090 D4F800A0 	    _UNGET_TOKEN
 4001      D4F808B0 
ARM GAS  tinyBasic.s 			page 104


 4002              	    // erase first 16 byte of page
 4003              	    // this cancel any existing autorun 
 4004 1098 4FF0FF30 	    mov r0,#-1
 4005 109c 4246     	    mov r2,T1
 4006 109e 4FF01001 	    mov r1,#16 
 4007 10a2 42F8040B 	1:  str r0,[r2],#4
 4008 10a6 0439     	    subs r1,#4
 4009 10a8 FBD1     	    bne 1b 
 4010 10aa 0BE0     	    b write_back 
 4011 10ac 4246     	2:  mov r2,T1
 4012 10ae DFF82600 	    ldr r0,arun_sign 
 4013 10b2 42F8040B 	    str r0,[r2],#4
 4014 10b6 0846     	    mov r0,r1 
 4015 10b8 1146     	    mov r1,r2 
 4016 10ba 00B5FFF7 	    _CALL strcpy 
 4016      FEFF5DF8 
 4016      04EB
 4017              	write_back:
 4018 10c4 4046     	    mov r0,T1
 4019 10c6 DFF87018 	    ldr r1,=user 
 4020 10ca 00B5FFF7 	    _CALL write_page
 4020      FEFF5DF8 
 4020      04EB
 4021 10d4 7047     	    _RET 
 4022 10d6 4152554E 	arun_sign: .ascii "ARUN" 
 4023              	
 4024              	/******************************
 4025              	    exec_autorun 
 4026              	    check for autorun file.
 4027              	    load and execute it.
 4028              	*****************************/
 4029 10da 00BF     	    _FUNC exec_autorun
 4030 10dc DFF85828 	    ldr r2,=user 
 4031 10e0 5FF80E10 	    ldr r1,arun_sign 
 4032 10e4 1068     	    ldr r0,[r2]
 4033 10e6 8842     	    cmp r0,r1 
 4034 10e8 0DD1     	    bne 9f 
 4035 10ea 02F10400 	    add r0,r2,#4
 4036 10ee 00B5FFF7 	    _CALL load_autorun 
 4036      C9FE5DF8 
 4036      04EB
 4037 10f8 00B5FFF7 	    _CALL run
 4037      C9FD5DF8 
 4037      04EB
 4038 1102 00F006BF 	    b interpreter  
 4039 1106 7047     	9:  _RET 
 4040              	
 4041              	/*******************************
 4042              	  BASIC: FREE 
 4043              	  return RAM free bytes 
 4044              	*******************************/
 4045              	    _FUNC free
 4046 1108 D4F8D000 	    ldr r0,[UPP,#HERE]
 4047 110c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4048 1110 A1EB0001 	    sub r1,r0
 4049 1114 4FF01B00 	    mov r0,#TK_INTGR
 4050 1118 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 105


 4051              	
 4052              	/*********************************
 4053              	  BASIC: SERVO_INIT n 
 4054              	  initialize servo motor 1,2,3,4
 4055              	  1 -> PWM2/1 pin A15
 4056              	  2 -> PWM2/2 pin B3 
 4057              	  3 -> PWM3/1 pin B4 
 4058              	  4 -> PWM3/2 pin B5
 4059              	  5 -> PMW4/3 pin B8
 4060              	  6 -> PWM4/4 pin B9
 4061              	  TIMER parameters are for Fclk=72Mhz 
 4062              	  period=20msec 
 4063              	  default pos = 1500ÂµSec 
 4064              	************************************/
 4065 111a 00BF     	    _FUNC servo_init 
 4066 111c 00B5FFF7 	    _CALL expression 
 4066      FEFF5DF8 
 4066      04EB
 4067 1126 1B28     	    cmp r0,#TK_INTGR  
 4068 1128 7FF4FEAF 	    bne syntax_error 
 4069 112c 0129     	    cmp r1,#1 
 4070 112e 03D5     	    bpl 1f 
 4071 1130 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4072 1134 FFF7FEBF 	    b tb_error 
 4073 1138 0729     	1:  cmp r1,#7
 4074 113a F9D5     	    bpl 0b
 4075 113c A1F10103 	    sub r3,r1,#1
 4076              	1:  // configure port pin
 4077 1140 DFF8F827 	    ldr r2,=servo_param
 4078 1144 4FEA0311 	    lsl r1,r3,#4
 4079 1148 0A44     	    add r2,r1  
 4080 114a 52F8040B 	    ldr r0,[r2],#4 //GPIOx_BASE_ADR
 4081 114e 1168     	    ldr r1,[r2]  // pin 
 4082 1150 4FF00E02 	    mov r2,#0xe // OUTPUT_AFOD  
 4083 1154 00B5FFF7 	    _CALL gpio_config 
 4083      61FC5DF8 
 4083      04EB
 4084 115e DFF8DC07 	    ldr r0,=servo_param 
 4085 1162 4FEA0311 	    lsl r1,r3,#4
 4086 1166 01F10801 	    add r1,#8
 4087 116a 0844     	    add r0,r1 
 4088 116c 50F8043B 	    ldr r3,[r0],#4
 4089 1170 0268     	    ldr r2,[r0]
 4090 1172 4FF02000 	    mov r0,#32
 4091 1176 4AF6C871 	    mov r1,#45000
 4092 117a 0CB4     	    push {r2,r3}
 4093 117c 00B500F0 	    _CALL pwm_config
 4093      5DF85DF8 
 4093      04EB
 4094 1186 06BC     	    pop {r1,r2}   
 4095              	    // remap TIMER2|3 pin 
 4096 1188 4FF00003 	    _MOV32 r3,AFIO_BASE_ADR
 4096      C4F20103 
 4097 1190 4FF00000 	    _MOV32 r0,TIMER2_BASE_ADR
 4097      C4F20000 
 4098 1198 8242     	    cmp r2,r0 
 4099 119a 04D0     	    beq remap_t2
ARM GAS  tinyBasic.s 			page 106


 4100 119c 00F58060 	    add r0,#0x400
 4101 11a0 8242     	    cmp r2,r0  
 4102 11a2 07D0     	    beq remap_t3 
 4103 11a4 12E0     	    b no_remap 
 4104              	remap_t2:
 4105 11a6 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4106 11a8 4FF44078 	    mov T1,#0x300 
 4107 11ac 40EA0800 	    orr r0,T1 
 4108 11b0 5860     	    str r0,[r3,#AFIO_MAPR]
 4109 11b2 0BE0     	    b no_remap 
 4110              	remap_t3: 
 4111 11b4 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4112 11b6 4FF44068 	    mov T1,0xc00 
 4113 11ba 6FEA0808 	    mvn T1,T1 
 4114 11be 00EA0800 	    and r0,T1 
 4115 11c2 4FF40068 	    mov T1,#0x800
 4116 11c6 40EA0800 	    orr r0,T1 
 4117 11ca 5860     	    str r0,[r3,#AFIO_MAPR]
 4118              	no_remap:
 4119 11cc 40F62F50 	     mov r0,#3375 
 4120 11d0 00B500F0 	    _CALL pwm_dc
 4120      7DF85DF8 
 4120      04EB
 4121 11da 7047     	    _RET 
 4122              	
 4123 11dc 00080140 	servo_param: .word GPIOA_BASE_ADR,15,TIMER2_BASE_ADR,1
 4123      0F000000 
 4123      00000040 
 4123      01000000 
 4124 11ec 000C0140 	            .word GPIOB_BASE_ADR,3,TIMER2_BASE_ADR,2
 4124      03000000 
 4124      00000040 
 4124      02000000 
 4125 11fc 000C0140 	            .word GPIOB_BASE_ADR,4,TIMER3_BASE_ADR,1
 4125      04000000 
 4125      00040040 
 4125      01000000 
 4126 120c 000C0140 	            .word GPIOB_BASE_ADR,5,TIMER3_BASE_ADR,2
 4126      05000000 
 4126      00040040 
 4126      02000000 
 4127 121c 000C0140 	            .word GPIOB_BASE_ADR,8,TIMER4_BASE_ADR,3
 4127      08000000 
 4127      00080040 
 4127      03000000 
 4128 122c 000C0140 	            .word GPIOB_BASE_ADR,9,TIMER4_BASE_ADR,4
 4128      09000000 
 4128      00080040 
 4128      04000000 
 4129              	
 4130              	/*********************************
 4131              	    pwm_config 
 4132              	    configure timer for pwm mode 6
 4133              	    Fck_int=72Mhz 
 4134              	    input:
 4135              	      r0   PSC
 4136              	      r1   ARR
ARM GAS  tinyBasic.s 			page 107


 4137              	      r2   channel  
 4138              	      r3   TIMER_BASE_ADR 
 4139              	    output:
 4140              	      none 
 4141              	    use:
 4142              	      T1,T2 
 4143              	*********************************/
 4144              	    _FUNC pwm_config
 4145 123c 2DE90003 	    push {T1,T2}
 4146 1240 1885     	    strh r0,[r3,#TIM_PSC]
 4147 1242 9985     	    strh r1,[r3,#TIM_ARR]
 4148 1244 80EA0000 	    eor r0,r0 // 0% duty cycle
 4149 1248 4FF03408 	    mov T1,#TIM_CCR1
 4150 124c 1146     	    mov r1,r2 
 4151 124e 0139     	1:  subs r1,r1,#1
 4152 1250 02D0     	    beq 2f 
 4153 1252 08F10408 	    add T1,#4
 4154 1256 FAE7     	    b 1b   
 4155 1258 23F80800 	2:  strh r0,[r3,T1] // duty cycle = 0.
 4156              	    // set counter mode 
 4157 125c 4FF47F40 	    mov r0,#0xff00 // mask to clear mode field
 4158 1260 4FF06808 	    mov T1,#0x68 // PWM mode 6, preload enabled  
 4159 1264 12F0010F 	    tst r2,#1 // odd channel?
 4160 1268 03D1     	    bne 1f 
 4161 126a 4FEA1020 	    lsr r0,#8  // shift mask for even channel
 4162 126e 4FEA0828 	    lsl T1,#8  // shift mode for even channel 
 4163 1272 4FF01809 	1:  mov  T2,#TIM_CCMR1  //channel 1,2
 4164 1276 032A     	    cmp r2,#3
 4165 1278 01D4     	    bmi 2f 
 4166 127a 4FF01C09 	    mov T2,#TIM_CCMR2 // channel 3,4
 4167 127e 33F80910 	2:  ldrh r1,[r3,T2]
 4168 1282 01EA0001 	    and r1,r0 // clear bit field
 4169 1286 41EA0801 	    orr r1,T1 // set mode
 4170 128a 23F80910 	    strh r1,[r3,T2]
 4171              	    // enable OC output 
 4172 128e 4FF00100 	    mov r0,#1 
 4173 1292 4FF00F08 	    mov T1,#15 
 4174 1296 1146     	    mov r1,r2  
 4175 1298 0139     	2:  subs r1,r1,#1 
 4176 129a 04D0     	    beq 3f 
 4177 129c 4FEA0010 	    lsl r0,#4
 4178 12a0 4FEA0818 	    lsl T1,#4
 4179 12a4 F8E7     	    b 2b
 4180 12a6 6FEA0808 	3:  mvn T1,T1 
 4181 12aa 198C     	    ldrh r1,[r3,#TIM_CCER]
 4182 12ac 01EA0801 	    and r1,T1 // clear bit field 
 4183 12b0 41EA0001 	    orr r1,r0 // set bit fiel new value 
 4184 12b4 1984     	    strh r1,[r3,#TIM_CCER]
 4185              	    // enable counter 
 4186 12b6 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4187 12ba 1988     	    ldrh r1,[r3,TIM_CR1]
 4188 12bc 41EA0001 	    orr r1,r0
 4189 12c0 1980     	    strh r1,[r3,TIM_CR1]
 4190              	    // generate a reload event 
 4191 12c2 4FF00100 	    mov r0,#1 
 4192 12c6 9882     	    strh r0,[r3,TIM_EGR]
 4193 12c8 BDE80003 	    pop {T1,T2}
ARM GAS  tinyBasic.s 			page 108


 4194 12cc 7047     	    _RET 
 4195              	
 4196              	/*********************************
 4197              	    pwm_dc 
 4198              	    set pwm duty cycle 
 4199              	    input:
 4200              	      r0   CCR value, i.e duty cycle 
 4201              	      r1   channel 
 4202              	      r2   TIMER_BASE_ADDR 
 4203              	    use:
 4204              	
 4205              	************************************/
 4206 12ce 00BF     	    _FUNC pwm_dc 
 4207 12d0 2DE90003 	    push {T1,T2}
 4208 12d4 8946     	    mov T2,r1 
 4209 12d6 4FF03408 	    mov T1,#TIM_CCR1 
 4210 12da 0139     	0:  subs r1,#1
 4211 12dc 02D0     	    beq 1f 
 4212 12de 08F10408 	    add T1,#4
 4213 12e2 FAE7     	    b 0b
 4214 12e4 22F80800 	1:  strh r0,[r2,T1]
 4215              	    // trigger an update even 
 4216 12e8 4FF00200 	    mov r0,#2
 4217 12ec B9F10109 	1:  subs T2,#1 
 4218 12f0 02D0     	    beq 2f 
 4219 12f2 4FEA4000 	    lsl r0,#1
 4220 12f6 F9E7     	    b 1b 
 4221 12f8 9082     	2:  strh r0,[r2,#TIM_EGR]
 4222 12fa BDE80003 	    pop {T1,T2}
 4223 12fe 7047     	    _RET 
 4224              	
 4225              	/*********************************
 4226              	  BASIC: SERVO_OFF channel 
 4227              	  disable servo-motor channel
 4228              	*********************************/
 4229              	    _FUNC servo_off 
 4230 1300 00B5FFF7 	    _CALL expression 
 4230      FEFF5DF8 
 4230      04EB
 4231 130a 1B28     	    cmp r0,#TK_INTGR
 4232 130c 7FF4FEAF 	    bne syntax_error
 4233 1310 0129     	    cmp r1,#1
 4234 1312 03D5     	    bpl 1f 
 4235 1314 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4236 1318 FFF7FEBF 	    b tb_error 
 4237 131c 0729     	1:  cmp r1,#7
 4238 131e F9D5     	    bpl 0b 
 4239 1320 A1F10101 	    sub r1,#1 // channel {0..5}
 4240 1324 4FEA0111 	    lsl r1,#4 // channel*16
 4241 1328 DFF81036 	    ldr r3,=servo_param 
 4242 132c 0B44     	    add r3,r1 
 4243              	    // reconfigure GPIO 
 4244 132e 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4245 1332 53F8041B 	    ldr r1,[r3],#4 // GPIO pin 
 4246 1336 4FF01002 	    mov r2,#16 // INPUT_PD mode 
 4247 133a 00B5FFF7 	    _CALL gpio_config
 4247      6EFB5DF8 
ARM GAS  tinyBasic.s 			page 109


 4247      04EB
 4248 1344 53F8040B 	    ldr r0,[r3],#4 // TIMER_BASE_ADDR
 4249 1348 1968     	    ldr r1,[r3] // oc channel 
 4250 134a A1F10101 	    sub r1,#1 
 4251 134e 4FEA0111 	    lsl r1,#4 
 4252 1352 4FF00F02 	    mov r2,#0xf 
 4253 1356 02FA01F2 	    lsl r2,r1 
 4254 135a 6FEA0202 	    mvn r2,r2 
 4255 135e 018C     	    ldrh r1,[r0,#TIM_CCER]
 4256 1360 01EA0201 	    and r1,r2 
 4257 1364 0184     	    strh r1,[r0,#TIM_CCER]
 4258 1366 7047     	    _RET 
 4259              	
 4260              	
 4261              	/*********************************
 4262              	  BASIC: SERVO_POS channel,value  
 4263              	  set servo position 
 4264              	*********************************/
 4265              	    _FUNC servo_pos 
 4266 1368 00B5FFF7 	    _CALL arg_list 
 4266      FEFF5DF8 
 4266      04EB
 4267 1372 0228     	    cmp r0,#2
 4268 1374 7FF4FEAF 	    bne syntax_error 
 4269 1378 DCF80410 	    ldr r1,[DP,#4] // servo channel 
 4270 137c 0729     	    cmp r1,#7
 4271 137e 03D4     	    bmi 1f 
 4272 1380 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 4273 1384 FFF7FEBF 	    b tb_error 
 4274 1388 DFF8B035 	1:  ldr r3,=servo_param 
 4275 138c 0139     	    subs r1,#1
 4276 138e 4FEA0111 	    lsl r1,#4
 4277 1392 01F10801 	    add r1,#8
 4278 1396 0B44     	    add r3,r1   
 4279 1398 53F8042B 	2:  ldr r2,[r3],#4 // TIMER_BASE_ADR
 4280 139c 1968     	    ldr r1,[r3] // oc channel 
 4281 139e 5CF8040B 	    _POP r0 // set value 
 4282 13a2 0CF1040C 	    add DP,#4 // drop servo channel 
 4283 13a6 00B5FFF7 	    _CALL pwm_dc 
 4283      92FF5DF8 
 4283      04EB
 4284 13b0 7047     	    _RET 
 4285              	
 4286              	
 4287              	/*********************************
 4288              	  BASIC: SLEEP 
 4289              	  place MCU lowest power mode 
 4290              	  wait for external interrpt or
 4291              	  reset.
 4292              	*********************************/
 4293 13b2 00BF     	    _FUNC sleep
 4294 13b4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4294      CEF20000 
 4295 13bc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4296 13c0 0160     	    str r1,[r0]
 4297 13c2 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4297      C4F20000 
ARM GAS  tinyBasic.s 			page 110


 4298 13ca 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4299 13ce 0160     	    str r1,[r0]
 4300 13d0 20BF     	    wfe 
 4301 13d2 7047     	    _RET 
 4302              	
 4303              	/************************************
 4304              	  BASIC: SPC(expr)
 4305              	  mov cursor right expr spaces 
 4306              	***********************************/
 4307              	    _FUNC spc 
 4308 13d4 00B5FFF7 	    _CALL func_args 
 4308      FEFF5DF8 
 4308      04EB
 4309 13de 0128     	    cmp r0,#1
 4310 13e0 7FF4FEAF 	    bne syntax_error 
 4311 13e4 206C     	    ldr r0,[UPP,#FLAGS]
 4312 13e6 10F0800F 	    tst r0,#FPRINT 
 4313 13ea 5CF8040B 	    _POP r0 
 4314 13ee 04D0     	    beq 9f 
 4315 13f0 00B5FFF7 	    _CALL spaces 
 4315      FEFF5DF8 
 4315      04EB
 4316 13fa 7047     	9:  _RET 
 4317              	
 4318              	/**********************************
 4319              	  BASIC: SPI_DSEL channel 
 4320              	  deselect SPI channel 
 4321              	**********************************/
 4322              	    _FUNC spi_deselect 
 4323 13fc 00B5FFF7 	    _CALL expression 
 4323      FEFF5DF8 
 4323      04EB
 4324 1406 1B28     	    cmp r0,#TK_INTGR
 4325 1408 7FF4FEAF 	    bne syntax_error 
 4326 140c DFF83035 	    ldr r3,=spi_param 
 4327 1410 A1F10101 	    sub r1,#1
 4328 1414 4FF01802 	    mov r2,#24
 4329 1418 02FB01F1 	    mul r1,r2
 4330 141c 0B44     	    add r3,r1
 4331 141e 1A46     	    mov r2,r3 
 4332 1420 1B68     	    ldr r3,[R3]
 4333 1422 1888     	    ldrh r0,[r3]
 4334              	    // clear SPI_CR1_SPE bit 
 4335 1424 6FF04001 	    mvn r1,#(1<<6) // SPE 
 4336 1428 00EA0100 	    and r0,r1
 4337 142c 1880     	    strh r0,[R3]
 4338              	    // set NSS output high 
 4339 142e 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR
 4340 1430 9168     	    ldr r1,[r2,#8] // NSS pin 
 4341 1432 4FF00100 	    mov r0,#1 
 4342 1436 00FA01F0 	    lsl r0,r1 
 4343 143a 1861     	    str r0,[R3,#GPIO_BSRR] 
 4344 143c 7047     	    _RET 
 4345              	
 4346              	/**********************************
 4347              	  BASIC: SPI_INIT  channel,BR 
 4348              	  enable SPI channel 1|2
ARM GAS  tinyBasic.s 			page 111


 4349              	*********************************/
 4350 143e 00BF     	    _FUNC spi_init 
 4351 1440 00B5FFF7 	    _CALL arg_list
 4351      FEFF5DF8 
 4351      04EB
 4352 144a 0228     	    cmp r0,#2 
 4353 144c 7FF4FEAF 	    bne syntax_error
 4354              	    // enable peripheral clock 
 4355 1450 BCE80003 	    ldmia DP!,{T1,T2} // T1=BR, T2=channel 
 4356 1454 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 4356      C4F20201 
 4357 145c 4FF01800 	    mov r0,#RCC_APB2ENR
 4358 1460 4FF48053 	    mov r3,#(1<<12) // SPI1EN bit 12 
 4359 1464 B9F1010F 	    cmp T2,#1
 4360 1468 03D0     	    beq 1f 
 4361 146a 00F10400 	    add r0,#4 //RCC_APB1ENR
 4362 146e 4FEA8303 	    lsl r3,#2 // SPI2EN bit 14 
 4363 1472 0A58     	1:  ldr r2,[r1,r0]
 4364 1474 42EA0302 	    orr r2,r3 
 4365 1478 0A50     	    str r2,[r1,r0]
 4366              	    // spi config 
 4367 147a DFF8C434 	    ldr r3,=spi_param 
 4368 147e A9F10101 	    sub r1,T2,#1 
 4369 1482 4FF01802 	    mov r2,#24
 4370 1486 02FB01F1 	    mul r1,r2
 4371 148a 0B44     	    add r3,r1 
 4372 148c 53F8041B 	    ldr r1,[r3],#4
 4373              	    // SPI_CR2
 4374 1490 4FF00400 	    mov r0,#(1<<2)
 4375 1494 8880     	    strh r0,[r1,#SPI_CR2] // SSOE
 4376              	    // SPI_CR1 as MSTR  
 4377 1496 4FEAC808 	    lsl T1,#3
 4378 149a 40EA0800 	    orr r0,T1 
 4379 149e 0880     	    strh r0,[r1,#SPI_CR1] 
 4380              	    // configure GPIO pins  
 4381 14a0 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4382 14a4 8046     	    mov T1,r0 
 4383 14a6 53F8041B 	    ldr r1,[r3],#4 // NSS pin 
 4384 14aa 8946     	    mov T2,r1 
 4385 14ac 4FF00102 	    mov r2,#OUTPUT_PP 
 4386 14b0 00B5FFF7 	    _CALL gpio_config //NSS  
 4386      B3FA5DF8 
 4386      04EB
 4387              	    // set NSS high 
 4388 14ba 4046     	    mov r0,T1 
 4389 14bc 4946     	    mov r1,T2 
 4390 14be 4FF00102 	    mov r2,#1 
 4391 14c2 02FA01F2 	    lsl r2,r1 
 4392 14c6 0261     	    str r2,[r0,#GPIO_BSRR]
 4393 14c8 4046     	    mov r0,T1 
 4394 14ca 53F8041B 	    ldr r1,[r3],#4 
 4395 14ce 4FF00A02 	    mov r2,#OUTPUT_AFPP 
 4396 14d2 00B5FFF7 	    _CALL gpio_config  // SCK
 4396      A2FA5DF8 
 4396      04EB
 4397 14dc 4046     	    mov r0,T1
 4398 14de 53F8041B 	    ldr r1,[r3],#4 
ARM GAS  tinyBasic.s 			page 112


 4399 14e2 4FF00402 	    mov r2,#INPUT_FLOAT
 4400 14e6 00B5FFF7 	    _CALL gpio_config  //MISO 
 4400      98FA5DF8 
 4400      04EB
 4401 14f0 4046     	    mov r0,T1 
 4402 14f2 1968     	    ldr r1,[R3] 
 4403 14f4 4FF00A02 	    mov r2,#OUTPUT_AFPP 
 4404 14f8 00B5FFF7 	    _CALL gpio_config // MOSI 
 4404      8FFA5DF8 
 4404      04EB
 4405 1502 7047     	    _RET 
 4406              	
 4407              	
 4408              	spi_param: 
 4409 1504 00300140 	  .word SPI1_BASE_ADR,GPIOA_BASE_ADR,4,5,6,7   // GPIO pins order NSS,SCK,MISO,MOSI
 4409      00080140 
 4409      04000000 
 4409      05000000 
 4409      06000000 
 4410 151c 00380040 	  .word SPI2_BASE_ADR,GPIOB_BASE_ADR,12,13,14,15 // GPIO pins order NSS,SCK,MISO,MOSI
 4410      000C0140 
 4410      0C000000 
 4410      0D000000 
 4410      0E000000 
 4411              	
 4412              	/***************************************
 4413              	  BASIC: SPI_READ channel 
 4414              	  read 1 byte from channel 
 4415              	  use:
 4416              	**************************************/
 4417              	    _FUNC spi_read
 4418 1534 00B5FFF7 	    _CALL expression
 4418      FEFF5DF8 
 4418      04EB
 4419 153e 1B28     	    cmp r0,#TK_INTGR
 4420 1540 7FF4FEAF 	    bne syntax_error
 4421 1544 A1F10101 	    sub r1,#1
 4422 1548 4FF01802 	    mov r2,#24
 4423 154c 02FB01F1 	    mul r1,r2 
 4424 1550 FB4B     	    ldr r3,=spi_param 
 4425 1552 0B44     	    add r3,r1 
 4426 1554 1B68     	    ldr r3,[R3]
 4427 1556 80EA0000 	    eor r0,r0 
 4428 155a 9881     	    strh r0,[r3,#SPI_DR]
 4429 155c 9868     	0:  ldr r0,[r3,#SPI_SR]
 4430 155e 10F0010F 	    tst r0,#1
 4431 1562 FBD0     	    beq 0b
 4432 1564 9989     	    ldrh r1,[r3,#SPI_DR]
 4433 1566 4FF01B00 	    mov r0,#TK_INTGR  
 4434 156a 7047     	    _RET 
 4435              	
 4436              	/********************************
 4437              	  BASIC: SPI_SELECT channel 
 4438              	  activate channel 
 4439              	  use:
 4440              	*******************************/
 4441              	    _FUNC spi_select
ARM GAS  tinyBasic.s 			page 113


 4442 156c 00B5FFF7 	    _CALL expression 
 4442      FEFF5DF8 
 4442      04EB
 4443 1576 1B28     	    cmp r0,#TK_INTGR
 4444 1578 7FF4FEAF 	    bne syntax_error
 4445 157c F04B     	    ldr r3,=spi_param 
 4446 157e A1F10101 	    sub r1,#1 
 4447 1582 4FF01802 	    mov r2,#24
 4448 1586 02FB01F1 	    mul r1,r2 
 4449 158a 0B44     	    add r3,r1 
 4450 158c 1A46     	    mov r2,r3 
 4451 158e 1B68     	    ldr r3,[R3]
 4452              	    // set SPI_CR1_SPE bit 
 4453 1590 1868     	    ldr r0,[R3,#SPI_CR1]
 4454 1592 4FF04001 	    mov r1,#(1<<6) // SPE 
 4455 1596 40EA0100 	    orr r0,r1 
 4456 159a 1860     	    str r0,[r3,#SPI_CR1] 
 4457              	    // set NSS low  
 4458 159c 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR 
 4459 159e 9168     	    ldr r1,[r2,#8] // GPIO PIN 
 4460 15a0 4FF48030 	    mov r0,#(1<<16) 
 4461 15a4 00FA01F0 	    lsl r0,r1 
 4462 15a8 1861     	    str r0,[R3,#GPIO_BSRR]
 4463 15aa 7047     	    _RET 
 4464              	
 4465              	/*******************************
 4466              	  BASIC: SPI_WRITE channel,count,*buffer 
 4467              	  write bytes to spi channel 
 4468              	  use:
 4469              	********************************/
 4470              	    _FUNC spi_write
 4471 15ac 00B5FFF7 	    _CALL arg_list 
 4471      FEFF5DF8 
 4471      04EB
 4472 15b6 0328     	    cmp r0,#3 
 4473 15b8 7FF4FEAF 	    bne syntax_error
 4474 15bc BCE80E00 	    ldmia DP!,{r1,r2,r3} // *buffer, count, channel 
 4475 15c0 A3F10100 	    sub r0,r3,#1 
 4476 15c4 4FF01803 	    mov r3,#24
 4477 15c8 03FB00F0 	    mul r0,r3  
 4478 15cc DC4B     	    ldr r3,=spi_param 
 4479 15ce 0344     	    add r3,r0 
 4480 15d0 1B68     	    ldr r3,[r3] //SPI_BASE_ADR 
 4481 15d2 11F8010B 	1:  ldrb r0,[r1],#1
 4482 15d6 9881     	    strh r0,[r3,#SPI_DR]
 4483 15d8 1889     	2:  ldrh r0,[r3,#SPI_SR]
 4484 15da 10F0020F 	    tst r0,#2
 4485 15de FBD0     	    beq 2b 
 4486 15e0 013A     	    subs r2,#1 
 4487 15e2 F6D1     	    bne 1b     
 4488 15e4 7047     	    _RET 
 4489              	
 4490              	/******************************
 4491              	  BASIC: STOP 
 4492              	  stop program executre but 
 4493              	  keep execution state for 
 4494              	  resume 
ARM GAS  tinyBasic.s 			page 114


 4495              	******************************/
 4496 15e6 00BF     	    _FUNC stop
 4497 15e8 206C10F0 	    _RTO 
 4497      010F03D1 
 4497      4FF00700 
 4497      FFF7FEBF 
 4498 15f8 6068     	    ldr r0,[UPP,#COUNT]
 4499 15fa 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4500 15fe 206C     	    ldr r0,[UPP,#FLAGS]
 4501 1600 4FF00901 	    mov r1,#FRUN+FSTOP
 4502 1604 80EA0100 	    eor r0,r1
 4503 1608 2064     	    str r0,[UPP,#FLAGS]
 4504 160a 8AEA0A0A 	    eor IN,IN 
 4505 160e 8BEA0B0B 	    eor BPTR,BPTR 
 4506 1612 C4F804A0 	    str IN,[UPP,#COUNT]
 4507 1616 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4508 161a C4F808A0 	    str IN,[UPP,#BASICPTR]
 4509 161e 4FF4A040 	    _MOV32 r0,RAM_END
 4509      C2F20000 
 4510 1626 8546     	    mov sp,r0
 4511 1628 FFF7FEBF 	    b cmd_line 
 4512              	
 4513              	
 4514              	/**************************
 4515              	  BASIC: TAB(expr)
 4516              	  move cursor column expr 
 4517              	**************************/
 4518              	    _FUNC tab 
 4519 162c 00B5FFF7 	    _CALL func_args  
 4519      FEFF5DF8 
 4519      04EB
 4520 1636 0128     	    cmp r0,#1 
 4521 1638 7FF4FEAF 	    bne syntax_error 
 4522 163c 206C     	    ldr r0,[UPP,#FLAGS]
 4523 163e 10F0800F 	    tst r0,#FPRINT
 4524 1642 5CF8040B 	    _POP r0 
 4525 1646 04D0     	    beq 9f 
 4526 1648 00B5FFF7 	    _CALL cursor_x 
 4526      FEFF5DF8 
 4526      04EB
 4527 1652 7047     	9:  _RET 
 4528              	
 4529              	
 4530              	/**************************
 4531              	  BASIC: TICKS 
 4532              	  return msec counter
 4533              	**************************/  
 4534              	    _FUNC get_ticks
 4535 1654 E169     	    ldr r1,[UPP,#TICKS]
 4536 1656 4FF01B00 	    mov r0,#TK_INTGR
 4537 165a 7047     	    _RET  
 4538              	
 4539              	/*************************
 4540              	  BASIC: TIMER expr 
 4541              	  set countdown timer 
 4542              	************************/
 4543              	    _FUNC set_timer
ARM GAS  tinyBasic.s 			page 115


 4544 165c 00B5FFF7 	    _CALL expression 
 4544      FEFF5DF8 
 4544      04EB
 4545 1666 1B28     	    cmp r0,#TK_INTGR
 4546 1668 7FF4FEAF 	    bne syntax_error 
 4547 166c 2162     	    str r1,[UPP,#TIMER]
 4548 166e 7047     	    _RET 
 4549              	
 4550              	/***************************
 4551              	  BASIC: TIMEOUT
 4552              	  check for timer expiration 
 4553              	  return -1 true || 0 false
 4554              	****************************/
 4555              	    _FUNC timeout
 4556 1670 81EA0101 	    eor r1,r1 
 4557 1674 206A     	    ldr r0,[UPP,#TIMER]
 4558 1676 08B9     	    cbnz r0,9f 
 4559 1678 6FEA0101 	    mvn r1,r1 
 4560 167c 4FF01B00 	9:  mov r0,#TK_INTGR    
 4561 1680 7047     	    _RET 
 4562              	
 4563              	/****************************************
 4564              	  BASIC:  TONE freq, duration 
 4565              	  play a tone with frequency freq and duration
 4566              	  in milliseconds
 4567              	***********************************************/
 4568 1682 00BF     	    _FUNC tone
 4569 1684 00B5FFF7 	    _CALL arg_list 
 4569      FEFF5DF8 
 4569      04EB
 4570 168e 0228     	    cmp r0,#2 
 4571 1690 7FF4FEAF 	    bne syntax_error
 4572 1694 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4572      C4F20002 
 4573 169c DCF80400 	    ldr r0,[DP,#4] // freq
 4574 16a0 4AF62021 	    _MOV32 r1,4500000
 4574      C0F24401 
 4575 16a8 B1FBF0F1 	    udiv r1,r0 
 4576 16ac 9185     	    strh r1,[r2,#TIM_ARR]
 4577 16ae 4FEA5101 	    lsr r1,#1 
 4578 16b2 9186     	    strh r1,[r2,#TIM_CCR1]
 4579 16b4 4FF00100 	    mov r0,#1
 4580 16b8 1084     	    strh r0,[r2,#TIM_CCER]
 4581 16ba 1080     	    strh r0,[r2,#TIM_CR1]
 4582 16bc 908A     	    ldrh r0,[r2,#TIM_EGR]
 4583 16be 40F00200 	    orr r0,#2 
 4584 16c2 9082     	    strh r0,[r2,#TIM_EGR] 
 4585 16c4 BCE80300 	    ldmia DP!,{r0,r1}
 4586              	    // pause duration  
 4587 16c8 E169     	    ldr r1,[UPP,#TICKS]
 4588 16ca 0844     	    add r0,r1 
 4589 16cc E169     	1:  ldr r1,[UPP,#TICKS]
 4590 16ce 8142     	    cmp r1,r0 
 4591 16d0 FCD4     	    bmi 1b 
 4592              	    // stop tone 
 4593 16d2 1088     	    ldrh r0,[R2,#TIM_CR1]
 4594 16d4 80F00100 	    eor r0,#1 
ARM GAS  tinyBasic.s 			page 116


 4595 16d8 1080     	    strh r0,[R2,#TIM_CR1]     
 4596 16da 7047     	    _RET 
 4597              	
 4598              	/************************************
 4599              	  BASIC: TONE_INIT 
 4600              	  initialize tone_generator
 4601              	  output on GPIOB:6 
 4602              	************************************/
 4603              	    _FUNC tone_init 
 4604              	    // configure pin 
 4605 16dc 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4605      C4F20100 
 4606 16e4 4FF00601 	    mov r1,#6 // gpio pin 
 4607 16e8 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4608 16ec 00B5FFF7 	    _CALL gpio_config
 4608      95F95DF8 
 4608      04EB
 4609              	    // configure TIMER4 in PWM mode 
 4610 16f6 4FF00F00 	    mov r0,#15 //PSC 
 4611 16fa 4FF6FF71 	    mov r1,#65535 // ARR 
 4612 16fe 4FF00102 	    mov r2,#1 // channel
 4613 1702 4FF40063 	    _MOV32 r3,TIMER4_BASE_ADR
 4613      C4F20003 
 4614 170a 9846     	    mov T1,r3
 4615 170c 00B5FFF7 	    _CALL pwm_config  
 4615      95FD5DF8 
 4615      04EB
 4616              	    // tone off 
 4617 1716 B8F80000 	    ldrh r0,[T1,#TIM_CR1]
 4618 171a 80F00100 	    eor r0,#1 
 4619 171e A8F80000 	    strh r0,[T1,#TIM_CR1]     
 4620 1722 7047     	    _RET 
 4621              	
 4622              	
 4623              	/****************************************
 4624              	  BASIC: TRACE n 
 4625              	  enable execution trace 
 4626              	  0   ddisable
 4627              	  1   show current line#
 4628              	  2  show line#+data_stack
 4629              	  3  show line#+data_stack+main_stack 
 4630              	***************************************/
 4631              	    _FUNC trace 
 4632 1724 00B5FFF7 	    _CALL next_token 
 4632      FEFF5DF8 
 4632      04EB
 4633 172e 1B28     	    cmp r0,#TK_INTGR  
 4634 1730 7FF4FEAF 	    bne syntax_error 
 4635 1734 01F00301 	    and r1,#3 
 4636 1738 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4637 173c 7047     	    _RET 
 4638              	
 4639              	
 4640              	/***************************
 4641              	  BASIC: UBOUND 
 4642              	  return last indice of @
 4643              	  output:
ARM GAS  tinyBasic.s 			page 117


 4644              	    r0  TK_INTGR 
 4645              	    r1  +int 
 4646              	**************************/
 4647 173e 00BF     	    _FUNC ubound
 4648 1740 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4649 1744 D4F8D000 	    ldr r0,[UPP,#HERE]
 4650 1748 A1EB0001 	    sub r1,r0 
 4651 174c 4FEA9101 	    lsr r1,#2
 4652 1750 4FF01B00 	    mov r0,#TK_INTGR 
 4653 1754 7047     	    _RET 
 4654              	
 4655              	/****************************
 4656              	  BASIC: UFLASH 
 4657              	  return user flash address
 4658              	*****************************/
 4659 1756 00BF     	    _FUNC uflash
 4660 1758 7749     	    ldr r1,=user
 4661 175a 4FF01B00 	    mov r0,#TK_INTGR 
 4662 175e 7047     	    _RET 
 4663              	
 4664              	
 4665              	/************************************
 4666              	  BASIC: UNTIL relation 
 4667              	  close a DO..UNTIL loop 
 4668              	  loop until relation come true 
 4669              	************************************/
 4670              	    _FUNC until
 4671 1760 00B5FFF7 	    _CALL relation 
 4671      FEFF5DF8 
 4671      04EB
 4672 176a 11B1     	    cbz r1,9f
 4673 176c 0CF1080C 	    add DP,#8
 4674 1770 7047     	    _RET  
 4675 1772 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4676 1776 9BF80200 	    ldrb r0,[BPTR,#2]
 4677 177a 6060     	    str r0,[UPP,#COUNT]
 4678 177c 7047     	    _RET 
 4679              	
 4680              	/*************************************
 4681              	  BASIC: WAIT addr,expr1[,expr2] 
 4682              	  wait until *addr&expr1 is not null 
 4683              	  or until (*addr&expr1)^expr2 is null 
 4684              	***************************************/
 4685 177e 00BF     	    _FUNC wait
 4686 1780 00B5FFF7 	    _CALL arg_list 
 4686      FEFF5DF8 
 4686      04EB
 4687 178a 0228     	    cmp r0,#2
 4688 178c 03D0     	    beq 2f 
 4689 178e 0328     	    cmp r0,#3
 4690 1790 07D0     	    beq 4f
 4691 1792 FFF7FEBF 	    b syntax_error 
 4692 1796 BCE80300 	2:  ldmia DP!,{r0,r1}
 4693 179a 0A88     	3:  ldrh r2,[r1]
 4694 179c 0240     	    ands r2,r0 
 4695 179e FCD0     	    beq 3b 
 4696 17a0 06E0     	    b 9f 
ARM GAS  tinyBasic.s 			page 118


 4697 17a2 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4698 17a6 1388     	5:  ldrh r3,[r2]
 4699 17a8 83EA0003 	    eor r3,r0
 4700 17ac 0B40     	    ands r3,r1 
 4701 17ae FAD0     	    beq 5b 
 4702 17b0 7047     	9:  _RET 
 4703              	
 4704              	/*********************************************
 4705              	  BASIC: WORDS 
 4706              	  print list of BASIC WORDS in dictionary 
 4707              	  use:
 4708              	    r0,r1,r2,T1,T2  
 4709              	********************************************/
 4710 17b2 00BF     	    _FUNC words
 4711 17b4 206C10F0 	    _CLO 
 4711      010F03D0 
 4711      4FF00700 
 4711      FFF7FEBF 
 4712 17c4 DFF87C81 	    ldr T1,=kword_dict
 4713 17c8 89EA0909 	    eor T2,T2
 4714 17cc 82EA0202 	    eor r2,r2  
 4715              	1:  
 4716 17d0 4046     	    mov r0,T1
 4717 17d2 00B5FFF7 	    _CALL strlen
 4717      FEFF5DF8 
 4717      04EB
 4718 17dc F0B1     	    cbz r0,4f 
 4719 17de 8144     	    add T2,r0 
 4720 17e0 B9F1500F 	    cmp T2,#80 
 4721 17e4 06D4     	    bmi 2f
 4722 17e6 89EA0909 	    eor T2,T2  
 4723 17ea 00B5FFF7 	    _CALL cr 
 4723      FEFF5DF8 
 4723      04EB
 4724 17f4 4046     	2:  mov r0,T1 
 4725 17f6 00B5FFF7 	    _CALL uart_puts 
 4725      FEFF5DF8 
 4725      04EB
 4726 1800 4FF02000 	    mov r0,#SPACE
 4727 1804 09F10109 	    add T2,#1  
 4728 1808 00B5FFF7 	    _CALL uart_putc
 4728      FEFF5DF8 
 4728      04EB
 4729 1812 02F10102 	    add r2,#1 
 4730 1816 58F80C8C 	    ldr T1,[T1,#-12]
 4731 181a D9E7     	    b 1b 
 4732 181c 19EA0909 	4:  ands T2,T2
 4733 1820 04D0     	    beq 5f 
 4734 1822 00B5FFF7 	    _CALL cr 
 4734      FEFF5DF8 
 4734      04EB
 4735 182c 1046     	5:  mov r0,r2 
 4736 182e 4FF00A01 	    mov r1,#10
 4737 1832 00B5FFF7 	    _CALL print_int 
 4737      FEFF5DF8 
 4737      04EB
 4738 183c 4248     	    ldr r0,=dict_words
ARM GAS  tinyBasic.s 			page 119


 4739 183e 00B5FFF7 	    _CALL uart_puts  
 4739      FEFF5DF8 
 4739      04EB
 4740 1848 7047     	9:  _RET 
 4741              	
 4742 184a 776F7264 	dict_words: .asciz "words in dictionary" 
 4742      7320696E 
 4742      20646963 
 4742      74696F6E 
 4742      61727900 
 4743              	
 4744              	
 4745              	/**************************************
 4746              	  BASIC: XOR(expr1,expr2)
 4747              	  binary exclusive or between 2 expressions
 4748              	**************************************/
 4749 185e 00BF     	    _FUNC bit_xor
 4750 1860 00B5FFF7 	    _CALL func_args
 4750      FEFF5DF8 
 4750      04EB
 4751 186a 0228     	    cmp r0,#2
 4752 186c 7FF4FEAF 	    bne syntax_error
 4753 1870 5CF8040B 	    _POP r0
 4754 1874 5CF8041B 	    _POP r1 
 4755 1878 81EA0001 	    eor r1,r0 
 4756 187c 4FF01B00 	    mov r0,#TK_INTGR
 4757 1880 7047     	    _RET 
 4758              	
 4759              	/***************************************
 4760              	    BASIC: XPOS 
 4761              	    report cursor column on terminal 
 4762              	***************************************/
 4763 1882 00BF     	    _FUNC xpos 
 4764 1884 00B5FFF7 	    _CALL get_curpos
 4764      FEFF5DF8 
 4764      04EB
 4765 188e 4FF01B00 	    mov r0,#TK_INTGR
 4766 1892 7047     	    _RET 
 4767              	
 4768              	/***********************************
 4769              	    BASIC: YPOS 
 4770              	    report cursor line on terminal 
 4771              	***********************************/
 4772              	    _FUNC ypos 
 4773 1894 00B5FFF7 	    _CALL get_curpos 
 4773      FEFF5DF8 
 4773      04EB
 4774 189e 0146     	    mov r1,r0 
 4775 18a0 4FF01B00 	    mov r0,#TK_INTGR
 4776 18a4 7047     	    _RET 
 4777              	
 4778              	
 4779              	/**********************************
 4780              	     argument stack manipulation
 4781              	**********************************/
 4782              	
 4783              	/**********************************
ARM GAS  tinyBasic.s 			page 120


 4784              	  BASIC PUSH expr[,expr] 
 4785              	  push integers on stack 
 4786              	*********************************/
 4787 18a6 00BF     	    _FUNC cmd_push 
 4788 18a8 00B5FFF7 	    _CALL arg_list
 4788      FEFF5DF8 
 4788      04EB
 4789 18b2 7047     	    _RET 
 4790              	
 4791              	/********************************
 4792              	  BASIC: POP 
 4793              	  pop an integer out of stack 
 4794              	********************************/    
 4795              	    _FUNC fn_pop 
 4796 18b4 5CF8041B 	    _POP r1 
 4797 18b8 4FF01B00 	    mov r0,#TK_INTGR 
 4798 18bc 7047     	    _RET 
 4799              	
 4800              	/*******************************
 4801              	  BASIC: DROP n 
 4802              	  discard n integer from stack
 4803              	*******************************/
 4804 18be 00BF     	    _FUNC drop 
 4805 18c0 00B5FFF7 	    _CALL expression 
 4805      FEFF5DF8 
 4805      04EB
 4806 18ca 1B28     	    cmp r0,#TK_INTGR 
 4807 18cc 7FF4FEAF 	    bne syntax_error 
 4808 18d0 4FF00400 	    mov r0,#4 
 4809 18d4 01FB00F0 	    mul r0,r1 
 4810 18d8 8444     	    add DP,r0 
 4811 18da 7047     	    _RET 
 4812              	
 4813              	/********************************
 4814              	  BASIC: GET(expr) 
 4815              	  retreive nth element from stack 
 4816              	********************************/
 4817              	    _FUNC get 
 4818 18dc 00B5FFF7 	    _CALL func_args
 4818      FEFF5DF8 
 4818      04EB
 4819 18e6 0128     	    cmp r0,#1 
 4820 18e8 7FF4FEAF 	    bne syntax_error 
 4821 18ec 5CF8040B 	    _POP r0
 4822 18f0 4FF00401 	    mov r1,#4 
 4823 18f4 01FB00F0 	    mul r0,r1 
 4824 18f8 5CF80010 	    ldr r1,[DP,r0]
 4825 18fc 4FF01B00 	    mov r0,#TK_INTGR
 4826 1900 7047     	    _RET 
 4827              	
 4828              	/*************************************
 4829              	  BASIC: PUT value,n  
 4830              	  store value at nth position on stack
 4831              	**************************************/
 4832 1902 00BF     	    _FUNC put
 4833 1904 00B5FFF7 	    _CALL arg_list 
 4833      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 121


 4833      04EB
 4834 190e 0228     	    cmp r0,#2 
 4835 1910 7FF4FEAF 	    bne syntax_error 
 4836 1914 5CF8040B 	    _POP r0 
 4837 1918 4FF00401 	    mov r1,#4 
 4838 191c 01FB00F0 	    mul r0,r1 
 4839 1920 5CF8041B 	    _POP r1
 4840 1924 4CF80010 	    str r1,[DP,r0]
 4841 1928 7047     	    _RET 
 4842              	
 4843              	
 4844 192a 0000     	  .section .rodata.user
 4845              	  .p2align 10 
 4846              	user:
 4847 0000 FFFFFFFF 	  .space 1024,255
 4847      FFFFFFFF 
 4847      FFFFFFFF 
 4847      FFFFFFFF 
 4847      FFFFFFFF 
 4848              	
 4849              	/*************************************************
 4850              	   extra FLASH memory not used by Tiny BASIC
 4851              	   is used to save BASIC programs.
 4852              	************************************************/
 4853              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4854              	  .section .rodata.fs
 4855              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 122


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:86     *ABS*:0000000000000001 OUTPUT_PP
       stm32f103.inc:87     *ABS*:0000000000000006 OUTPUT_OD
ARM GAS  tinyBasic.s 			page 123


       stm32f103.inc:88     *ABS*:000000000000000a OUTPUT_AFPP
       stm32f103.inc:89     *ABS*:000000000000000e OUTPUT_AFOD
       stm32f103.inc:90     *ABS*:0000000000000000 INPUT_ANA
       stm32f103.inc:91     *ABS*:0000000000000004 INPUT_FLOAT
       stm32f103.inc:92     *ABS*:0000000000000010 INPUT_PD
       stm32f103.inc:93     *ABS*:0000000000000011 INPUT_PU
       stm32f103.inc:96     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:99     *ABS*:0000000000000000 AFIO_EVCR
       stm32f103.inc:100    *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:101    *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:102    *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:103    *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:104    *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:105    *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:108    *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:110    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:111    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:112    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:113    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:114    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:115    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:116    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:119    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:121    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:122    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:123    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:124    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:127    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:129    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:130    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:131    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:132    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:133    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:134    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:135    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:136    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:137    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:138    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:139    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:140    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:141    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:142    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:144    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:147    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:148    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:149    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:150    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:151    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:152    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:153    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:154    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:155    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:156    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:157    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:158    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:159    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:160    *ABS*:0000000000000200 NVIC_IABR0
ARM GAS  tinyBasic.s 			page 124


       stm32f103.inc:161    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:162    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:163    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:166    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:167    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:168    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:169    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:172    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:176    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:177    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:178    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:179    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:182    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:183    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:184    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:185    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:186    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:189    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:190    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:191    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:192    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:195    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:196    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:197    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:198    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:199    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:202    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:203    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:204    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:205    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:206    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:207    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:208    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:209    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:210    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:211    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:212    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:213    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:214    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:215    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:216    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:217    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:218    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:219    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:220    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:221    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:222    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:225    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:226    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:227    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:228    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:230    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:231    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:232    *ABS*:0000000000000008 TIM_SMCR
ARM GAS  tinyBasic.s 			page 125


       stm32f103.inc:233    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:234    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:235    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:236    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:237    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:238    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:239    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:240    *ABS*:0000000000000028 TIM_PSC
       stm32f103.inc:241    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:242    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:243    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:244    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:245    *ABS*:000000000000004c TIM_DMAR
       stm32f103.inc:248    *ABS*:0000000040013000 SPI1_BASE_ADR
       stm32f103.inc:249    *ABS*:0000000040003800 SPI2_BASE_ADR
       stm32f103.inc:251    *ABS*:0000000000000000 SPI_CR1
       stm32f103.inc:252    *ABS*:0000000000000004 SPI_CR2
       stm32f103.inc:253    *ABS*:0000000000000008 SPI_SR
       stm32f103.inc:254    *ABS*:000000000000000c SPI_DR
       stm32f103.inc:255    *ABS*:0000000000000010 SPI_CRCPR
       stm32f103.inc:256    *ABS*:0000000000000014 SPI_RXCRCR
       stm32f103.inc:257    *ABS*:0000000000000018 SPI_TXCRCR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
ARM GAS  tinyBasic.s 			page 126


           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
ARM GAS  tinyBasic.s 			page 127


      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
ARM GAS  tinyBasic.s 			page 128


      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
ARM GAS  tinyBasic.s 			page 129


       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b READ_IDX
       cmd_index.inc:85     *ABS*:000000000000003c REM_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REST_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RET_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RND_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 RSHIFT_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RUN_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SAVE_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SERVO_INIT_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_OFF_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_POS_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SLEEP_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SPC_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 SPI_DSEL_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 SPI_INIT_IDX
       cmd_index.inc:99     *ABS*:000000000000004a SPI_READ_IDX
       cmd_index.inc:100    *ABS*:000000000000004b SPI_SELECT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c SPI_WRITE_IDX
       cmd_index.inc:102    *ABS*:000000000000004d STEP_IDX
       cmd_index.inc:103    *ABS*:000000000000004e STOP_IDX
       cmd_index.inc:104    *ABS*:000000000000004f STORE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 TAB_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 THEN_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 TICKS_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 TIMER_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 TMROUT_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 TO_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 TONE_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TONE_INIT_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TRACE_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 UBOUND_IDX
       cmd_index.inc:115    *ABS*:000000000000005a UFLASH_IDX
       cmd_index.inc:116    *ABS*:000000000000005b UNTIL_IDX
       cmd_index.inc:117    *ABS*:000000000000005c WAIT_IDX
       cmd_index.inc:118    *ABS*:000000000000005d WORDS_IDX
       cmd_index.inc:119    *ABS*:000000000000005e XOR_IDX
       cmd_index.inc:120    *ABS*:000000000000005f XPOS_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
ARM GAS  tinyBasic.s 			page 130


         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:319    .text:0000000000000250 search_target
         tinyBasic.s:1773   .text:0000000000000e58 next_token
         tinyBasic.s:383    .text:00000000000002c8 search_label
         tinyBasic.s:2019   .text:00000000000010a0 expression
         tinyBasic.s:1326   .text:0000000000000a60 syntax_error
         tinyBasic.s:421    .text:00000000000002f0 search_lineno
         tinyBasic.s:1341   .text:0000000000000a68 tb_error
         tinyBasic.s:351    .text:000000000000029c search_const
         tinyBasic.s:452    .text:0000000000000310 delete_line
         tinyBasic.s:477    .text:000000000000033c create_gap
         tinyBasic.s:503    .text:0000000000000368 insert_line
         tinyBasic.s:542    .text:00000000000003b8 compile
         tinyBasic.s:1679   .text:0000000000000db4 pad
         tinyBasic.s:872    .text:00000000000006c0 parse_int
         tinyBasic.s:615    .text:0000000000000460 comp_token
         tinyBasic.s:698    .text:0000000000000566 store_r0
         tinyBasic.s:966    .text:0000000000000760 skip
         tinyBasic.s:1051   .text:00000000000007c8 is_letter
         tinyBasic.s:782    .text:00000000000005f8 comp_label
         tinyBasic.s:707    .text:0000000000000586 token_exit
         tinyBasic.s:689    .text:0000000000000542 tick2
         tinyBasic.s:725    .text:000000000000058c is_special
         tinyBasic.s:747    .text:00000000000005d0 token_ofs
         tinyBasic.s:638    .text:00000000000004ba tok_idx0
         tinyBasic.s:701    .text:000000000000056c try_number
         tinyBasic.s:642    .text:00000000000004bc single
         tinyBasic.s:742    .text:00000000000005c1 tok_single
         tinyBasic.s:646    .text:00000000000004c4 lt
         tinyBasic.s:652    .text:00000000000004d2 gt
         tinyBasic.s:665    .text:00000000000004f6 bkslash
         tinyBasic.s:672    .text:000000000000050c prt_cmd
         tinyBasic.s:678    .text:000000000000051e quote
         tinyBasic.s:905    .text:00000000000006f8 parse_quote
         tinyBasic.s:683    .text:0000000000000532 tick
         tinyBasic.s:739    .text:00000000000005ac char_list
         tinyBasic.s:740    .text:00000000000005ac $d
         tinyBasic.s:748    .text:00000000000005d0 $d
         tinyBasic.s:765    .text:00000000000005f8 $t
         tinyBasic.s:985    .text:0000000000000778 upper
         tinyBasic.s:2344   .rodata.dictionary:0000000000000838 kword_dict
         tinyBasic.s:1493   .text:0000000000000be4 search_dict
         tinyBasic.s:839    .text:0000000000000694 compress_label
         tinyBasic.s:1082   .text:00000000000007e8 atoi
ARM GAS  tinyBasic.s 			page 131


         tinyBasic.s:936    .text:000000000000072c get_escaped_char
         tinyBasic.s:953    .text:0000000000000756 escaped
         tinyBasic.s:953    .text:0000000000000756 $d
         tinyBasic.s:966    .text:000000000000075e $t
         tinyBasic.s:1003   .text:0000000000000788 is_digit
         tinyBasic.s:1027   .text:00000000000007a4 is_hex
         tinyBasic.s:1127   .text:0000000000000834 cmd_name
         tinyBasic.s:1156   .text:0000000000000860 decompile_line
         tinyBasic.s:1173   .text:00000000000008a6 decomp_loop
         tinyBasic.s:1286   .text:0000000000000a35 single_char
         tinyBasic.s:1281   .text:0000000000000a20 relop_str
         tinyBasic.s:1281   .text:0000000000000a20 $d
         tinyBasic.s:1282   .text:0000000000000a2c ge_str
         tinyBasic.s:1283   .text:0000000000000a2f le_str
         tinyBasic.s:1284   .text:0000000000000a32 ne_str
         tinyBasic.s:1303   .text:0000000000000a48 modulo
         tinyBasic.s:1374   .text:0000000000000af8 compile_error
         tinyBasic.s:1345   .text:0000000000000a70 rt_error
         tinyBasic.s:1389   .text:0000000000000b4a rt_error_msg
         tinyBasic.s:1393   .text:0000000000000b6a err_msg
         tinyBasic.s:1390   .text:0000000000000b5b token_at_msg
         tinyBasic.s:2845   .text.basic:0000000000000468 dump01
         tinyBasic.s:1692   .text:0000000000000dc4 warm_start
         tinyBasic.s:1389   .text:0000000000000b4a $d
         tinyBasic.s:1401   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1402   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1403   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1404   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1405   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1406   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1407   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1408   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1409   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1410   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1411   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1412   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1413   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1414   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1415   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1416   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1418   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1419   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1420   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1430   .text:0000000000000bae $t
         tinyBasic.s:1430   .text:0000000000000bb0 skip_line
         tinyBasic.s:1447   .text:0000000000000bb8 BTGL
         tinyBasic.s:1465   .text:0000000000000bbc kword_cmp
         tinyBasic.s:1531   .text:0000000000000c22 cold_start
         tinyBasic.s:1555   .text:0000000000000c8a src_addr
         tinyBasic.s:1557   .text:0000000000000c8e dest_addr
         tinyBasic.s:1678   .text:0000000000000db0 tib
         tinyBasic.s:1559   .text:0000000000000c92 sysvar_size
         tinyBasic.s:1570   .text:0000000000000c98 prt_version
         tinyBasic.s:1626   .text:0000000000000d3c clear_basic
         tinyBasic.s:3703   .text.basic:0000000000000cf4 search_free
         tinyBasic.s:4029   .text.basic:00000000000010dc exec_autorun
         tinyBasic.s:1556   .text:0000000000000c8a $d
ARM GAS  tinyBasic.s 			page 132


         tinyBasic.s:2197   .rodata:0000000000000000 uzero
         tinyBasic.s:2223   .rodata:00000000000000d4 ulast
         tinyBasic.s:1570   .text:0000000000000c96 $t
         tinyBasic.s:1593   .text:0000000000000cfc version_msg
         tinyBasic.s:1595   .text:0000000000000d1c version
         tinyBasic.s:1594   .text:0000000000000cfc $d
         tinyBasic.s:1610   .text:0000000000000d20 clear_vars
         tinyBasic.s:1661   .text:0000000000000d84 warm_init
         tinyBasic.s:1677   .text:0000000000000dac dstack
         tinyBasic.s:1676   .text:0000000000000da8 mstack
         tinyBasic.s:1676   .text:0000000000000da8 $d
         tinyBasic.s:1680   .text:0000000000000db8 array
         tinyBasic.s:1681   .text:0000000000000dbc ready
         tinyBasic.s:1712   .text:0000000000000ddc cmd_line
         tinyBasic.s:1724   .text:0000000000000e10 interpreter
         tinyBasic.s:1757   .text:0000000000000e50 execute
         tinyBasic.s:3178   .text.basic:00000000000007b2 let_var
         tinyBasic.s:3183   .text.basic:00000000000007be let_array
         tinyBasic.s:2353   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1829   .text:0000000000000ed0 expect
         tinyBasic.s:1848   .text:0000000000000eec func_args
         tinyBasic.s:1868   .text:0000000000000f18 arg_list
         tinyBasic.s:1900   .text:0000000000000f54 factor
         tinyBasic.s:2126   .text:0000000000001178 get_array_element
         tinyBasic.s:2164   .text:00000000000011a0 get_var
         tinyBasic.s:1968   .text:0000000000001030 term
         tinyBasic.s:2061   .text:00000000000010fc relation
         tinyBasic.s:2108   .text:0000000000001170 relop_jmp
         tinyBasic.s:2080   .text:0000000000001142 rel_idx0
         tinyBasic.s:2081   .text:0000000000001142 rel_eq
         tinyBasic.s:2098   .text:0000000000001158 rel_false
         tinyBasic.s:2084   .text:0000000000001146 rel_gt
         tinyBasic.s:2087   .text:000000000000114a rel_ge
         tinyBasic.s:2090   .text:000000000000114e rel_lt
         tinyBasic.s:2093   .text:0000000000001152 rel_le
         tinyBasic.s:2096   .text:0000000000001156 rel_ne
         tinyBasic.s:2109   .text:0000000000001170 $d
         tinyBasic.s:2126   .text:0000000000001176 $t
         tinyBasic.s:2146   .text:000000000000118c set_array_element
         tinyBasic.s:2182   .text:00000000000011b0 set_var
         tinyBasic.s:4855   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2218   .rodata:0000000000000050 $d
         tinyBasic.s:2231   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2230   *ABS*:0000000000000000 link
         tinyBasic.s:2345   .rodata.dictionary:0000000000000838 LINK
         tinyBasic.s:2232   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2340   .rodata.dictionary:000000000000082c first_link
         tinyBasic.s:2387   .text.basic:0000000000000000 abs
         tinyBasic.s:2403   .text.basic:0000000000000028 analog_read
         tinyBasic.s:2427   .text.basic:0000000000000060 adc
         tinyBasic.s:2468   .text.basic:00000000000000d8 bit_and
         tinyBasic.s:2483   .text.basic:00000000000000fc ascii
         tinyBasic.s:3977   .text.basic:0000000000001038 autorun
         tinyBasic.s:2509   .text.basic:000000000000014c awu
         tinyBasic.s:2551   .text.basic:00000000000001c0 bitmask
         tinyBasic.s:2573   .text.basic:00000000000001e4 bit_reset
         tinyBasic.s:2598   .text.basic:0000000000000210 bit_set
ARM GAS  tinyBasic.s 			page 133


         tinyBasic.s:2638   .text.basic:0000000000000260 bit_test
         tinyBasic.s:2622   .text.basic:0000000000000238 bit_toggle
         tinyBasic.s:2670   .text.basic:00000000000002ac char
         tinyBasic.s:2662   .text.basic:00000000000002a0 cls
         tinyBasic.s:2687   .text.basic:00000000000002cc const
         tinyBasic.s:2814   .text.basic:0000000000000430 dec_base
         tinyBasic.s:3768   .text.basic:0000000000000d60 directory
         tinyBasic.s:2823   .text.basic:0000000000000438 do_loop
         tinyBasic.s:4804   .text.basic:00000000000018c0 drop
         tinyBasic.s:2838   .text.basic:0000000000000440 dump
         tinyBasic.s:2882   .text.basic:00000000000004e8 cmd_end
         tinyBasic.s:2910   .text.basic:0000000000000528 erase
         tinyBasic.s:2921   .text.basic:000000000000053c for
         tinyBasic.s:3808   .text.basic:0000000000000e18 forget
         tinyBasic.s:4045   .text.basic:0000000000001108 free
         tinyBasic.s:4817   .text.basic:00000000000018dc get
         tinyBasic.s:3002   .text.basic:00000000000005f8 gosub
         tinyBasic.s:3028   .text.basic:0000000000000638 goto
         tinyBasic.s:3036   .text.basic:0000000000000644 hex_base
         tinyBasic.s:3045   .text.basic:000000000000064c if
         tinyBasic.s:3328   .text.basic:0000000000000978 pin_input
         tinyBasic.s:3067   .text.basic:0000000000000664 input_var
         tinyBasic.s:3142   .text.basic:0000000000000768 invert
         tinyBasic.s:3155   .text.basic:0000000000000788 key
         tinyBasic.s:3171   .text.basic:000000000000079c let
         tinyBasic.s:3214   .text.basic:0000000000000828 list
         tinyBasic.s:3837   .text.basic:0000000000000e64 load
         tinyBasic.s:3265   .text.basic:00000000000008d8 locate
         tinyBasic.s:3279   .text.basic:00000000000008fc lshift
         tinyBasic.s:3293   .text.basic:000000000000091c new
         tinyBasic.s:2966   .text.basic:00000000000005a0 next
         tinyBasic.s:3302   .text.basic:000000000000093c func_not
         tinyBasic.s:3314   .text.basic:0000000000000954 bit_or
         tinyBasic.s:3346   .text.basic:00000000000009a4 out
         tinyBasic.s:3363   .text.basic:00000000000009cc pad_ref
         tinyBasic.s:3374   .text.basic:00000000000009d8 pause
         tinyBasic.s:3397   .text.basic:00000000000009f4 pin_mode
         tinyBasic.s:3453   .text.basic:0000000000000a78 peek8
         tinyBasic.s:3466   .text.basic:0000000000000a94 peek16
         tinyBasic.s:3479   .text.basic:0000000000000ab0 peek32
         tinyBasic.s:3493   .text.basic:0000000000000acc poke8
         tinyBasic.s:3505   .text.basic:0000000000000ae4 poke16
         tinyBasic.s:3517   .text.basic:0000000000000afc poke32
         tinyBasic.s:4795   .text.basic:00000000000018b4 fn_pop
         tinyBasic.s:3531   .text.basic:0000000000000b14 print
         tinyBasic.s:4787   .text.basic:00000000000018a8 cmd_push
         tinyBasic.s:4832   .text.basic:0000000000001904 put
         tinyBasic.s:3603   .text.basic:0000000000000c04 qkey
         tinyBasic.s:2722   .text.basic:0000000000000350 read
         tinyBasic.s:2772   .text.basic:00000000000003c4 restore
         tinyBasic.s:3017   .text.basic:0000000000000620 return
         tinyBasic.s:3615   .text.basic:0000000000000c20 random
         tinyBasic.s:3642   .text.basic:0000000000000c70 rshift
         tinyBasic.s:3655   .text.basic:0000000000000c90 run
         tinyBasic.s:3892   .text.basic:0000000000000ef8 save
         tinyBasic.s:4065   .text.basic:000000000000111c servo_init
         tinyBasic.s:4229   .text.basic:0000000000001300 servo_off
ARM GAS  tinyBasic.s 			page 134


         tinyBasic.s:4265   .text.basic:0000000000001368 servo_pos
         tinyBasic.s:4293   .text.basic:00000000000013b4 sleep
         tinyBasic.s:4307   .text.basic:00000000000013d4 spc
         tinyBasic.s:4322   .text.basic:00000000000013fc spi_deselect
         tinyBasic.s:4350   .text.basic:0000000000001440 spi_init
         tinyBasic.s:4417   .text.basic:0000000000001534 spi_read
         tinyBasic.s:4441   .text.basic:000000000000156c spi_select
         tinyBasic.s:4470   .text.basic:00000000000015ac spi_write
         tinyBasic.s:2952   .text.basic:0000000000000588 step
         tinyBasic.s:4496   .text.basic:00000000000015e8 stop
         tinyBasic.s:2890   .text.basic:00000000000004f0 store
         tinyBasic.s:4518   .text.basic:000000000000162c tab
         tinyBasic.s:3056   .text.basic:0000000000000660 then
         tinyBasic.s:4534   .text.basic:0000000000001654 get_ticks
         tinyBasic.s:4543   .text.basic:000000000000165c set_timer
         tinyBasic.s:4555   .text.basic:0000000000001670 timeout
         tinyBasic.s:2939   .text.basic:0000000000000570 to
         tinyBasic.s:4568   .text.basic:0000000000001684 tone
         tinyBasic.s:4603   .text.basic:00000000000016dc tone_init
         tinyBasic.s:4631   .text.basic:0000000000001724 trace
         tinyBasic.s:4647   .text.basic:0000000000001740 ubound
         tinyBasic.s:4659   .text.basic:0000000000001758 uflash
         tinyBasic.s:4670   .text.basic:0000000000001760 until
         tinyBasic.s:4685   .text.basic:0000000000001780 wait
         tinyBasic.s:4710   .text.basic:00000000000017b4 words
         tinyBasic.s:4749   .text.basic:0000000000001860 bit_xor
         tinyBasic.s:4763   .text.basic:0000000000001884 xpos
         tinyBasic.s:4772   .text.basic:0000000000001894 ypos
         tinyBasic.s:2387   .text.basic:0000000000000000 $t
         tinyBasic.s:2414   .text.basic:000000000000004e adc_loop
         tinyBasic.s:2452   .text.basic:00000000000000b2 adc_off
         tinyBasic.s:2433   .text.basic:0000000000000076 adc_on
         tinyBasic.s:3367   .text.basic:00000000000009d4 pad_adr
         tinyBasic.s:2748   .text.basic:000000000000039c seek_next
         tinyBasic.s:2803   .text.basic:0000000000000422 no_data_line
         tinyBasic.s:2799   .text.basic:000000000000041c try_next_line
         tinyBasic.s:2856   .text.basic:0000000000000488 print_dump_header
         tinyBasic.s:2914   .text.basic:0000000000000538 user_space
         tinyBasic.s:2914   .text.basic:0000000000000538 $d
         tinyBasic.s:4846   .rodata.user:0000000000000000 user
         tinyBasic.s:2921   .text.basic:000000000000053c $t
         tinyBasic.s:3005   .text.basic:0000000000000606 target
         tinyBasic.s:3135   .text.basic:0000000000000764 str_buffer
         tinyBasic.s:3134   .text.basic:0000000000000760 input_buffer
         tinyBasic.s:3134   .text.basic:0000000000000760 $d
         tinyBasic.s:3142   .text.basic:0000000000000768 $t
         tinyBasic.s:3259   .text.basic:00000000000008d4 out_buff
         tinyBasic.s:3259   .text.basic:00000000000008d4 $d
         tinyBasic.s:3265   .text.basic:00000000000008d8 $t
         tinyBasic.s:3367   .text.basic:00000000000009d4 $d
         tinyBasic.s:3374   .text.basic:00000000000009d8 $t
         tinyBasic.s:3419   .text.basic:0000000000000a1c gpio_config
         tinyBasic.s:3588   .text.basic:0000000000000be0 unget_exit
         tinyBasic.s:3590   .text.basic:0000000000000be8 print_exit
         tinyBasic.s:3756   .text.basic:0000000000000d5c fs_addr
         tinyBasic.s:3731   .text.basic:0000000000000d18 search_file
         tinyBasic.s:3735   .text.basic:0000000000000d20 cmp_loop
ARM GAS  tinyBasic.s 			page 135


         tinyBasic.s:3756   .text.basic:0000000000000d5c $d
         tinyBasic.s:3768   .text.basic:0000000000000d60 $t
         tinyBasic.s:3791   .text.basic:0000000000000dd8 no_more_file
         tinyBasic.s:3801   .text.basic:0000000000000e10 fcount
         tinyBasic.s:3801   .text.basic:0000000000000e10 $d
         tinyBasic.s:3843   .text.basic:0000000000000e86 load_autorun
         tinyBasic.s:3965   .text.basic:0000000000001024 fsize
         tinyBasic.s:3966   .text.basic:0000000000001030 data_bytes
         tinyBasic.s:3910   .text.basic:0000000000000f40 new_file
         tinyBasic.s:3965   .text.basic:0000000000001024 $d
         tinyBasic.s:4017   .text.basic:00000000000010c4 write_back
         tinyBasic.s:4022   .text.basic:00000000000010d6 arun_sign
         tinyBasic.s:4022   .text.basic:00000000000010d6 $d
         tinyBasic.s:4029   .text.basic:00000000000010da $t
         tinyBasic.s:4123   .text.basic:00000000000011dc servo_param
         tinyBasic.s:4144   .text.basic:000000000000123c pwm_config
         tinyBasic.s:4104   .text.basic:00000000000011a6 remap_t2
         tinyBasic.s:4110   .text.basic:00000000000011b4 remap_t3
         tinyBasic.s:4118   .text.basic:00000000000011cc no_remap
         tinyBasic.s:4206   .text.basic:00000000000012d0 pwm_dc
         tinyBasic.s:4123   .text.basic:00000000000011dc $d
         tinyBasic.s:4144   .text.basic:000000000000123c $t
         tinyBasic.s:4408   .text.basic:0000000000001504 spi_param
         tinyBasic.s:4409   .text.basic:0000000000001504 $d
         tinyBasic.s:4417   .text.basic:0000000000001534 $t
         tinyBasic.s:4742   .text.basic:000000000000184a dict_words
         tinyBasic.s:4742   .text.basic:000000000000184a $d
         tinyBasic.s:4749   .text.basic:000000000000185e $t
         tinyBasic.s:4845   .rodata.user:0000000000000000 $d
         tinyBasic.s:4844   .text.basic:000000000000192a $d
         tinyBasic.s:4855   .text.basic:000000000000192c $d
         tinyBasic.s:4855   .text:00000000000011c0 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:746    .text:00000000000005cf $d
         tinyBasic.s:1303   .text:0000000000000a45 $d
         tinyBasic.s:1303   .text:0000000000000a46 $t
         tinyBasic.s:1597   .text:0000000000000d1d $d
         tinyBasic.s:1597   .text:0000000000000d1e $t
         tinyBasic.s:1692   .text:0000000000000dc3 $d
         tinyBasic.s:1692   .text:0000000000000dc4 $t
         tinyBasic.s:3808   .text.basic:0000000000000e17 $d
         tinyBasic.s:3808   .text.basic:0000000000000e18 $t
         tinyBasic.s:3977   .text.basic:0000000000001037 $d
         tinyBasic.s:3977   .text.basic:0000000000001038 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
ARM GAS  tinyBasic.s 			page 136


vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
write_page
get_curpos
