ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* GPIO input|output CNF|MODE values */
  86              	   //output CNF field 
  87              	   .equ GPIO_O_PP,0 
ARM GAS  tinyBasic.s 			page 3


  88              	   .equ GPIO_O_OD,(1<<2)
  89              	   .equ GPIO_O_AFPP,(2<<2) 
  90              	   .equ GPIO_O_AFOD,(3<<2)
  91              	  // output MODE field 
  92              	   .equ S2MHZ,2 
  93              	   .equ S10MHZ,1 
  94              	   .equ S50MHZ,3
  95              	   .equ OSPEED,S10MHZ      
  96              	   .equ OUTPUT_PP,GPIO_O_PP+OSPEED
  97              	   .equ OUTPUT_OD,GPIO_O_OD+OSPEED
  98              	   .equ OUTPUT_AFPP,GPIO_O_AFPP+OSPEED 
  99              	   .equ OUTPUT_AFOD,GPIO_AFOD+OSPEED 
 100              	  // input ODR 
 101              	   .equ PULLDOWN,0
 102              	   .equ PULLUP,1
 103              	  // input CNF field 
 104              	   .equ ANALOG,0
 105              	   .equ FLOATING,(1<<2) 
 106              	   .equ PULL_RESISTOR,(2<<2)  
 107              	   .equ INPUT_ANA,ANALOG 
 108              	   .equ INPUT_FLOAT,FLOATING 
 109              	   .equ INPUT_PD,(PULL_RESISTOR<<1)+PULLDOWN 
 110              	   .equ INPUT_PU,(PULL_RESISTOR<<1)+PULLUP    
 111              	
 112              	   /* AFIO base address */
 113              	   .equ AFIO_BASE_ADR, 0x40010000
 114              	   
 115              	   /* AFIO registers offset */
 116              	   .equ AFIO_EVCR,0
 117              	   .equ AFIO_MAPR,4
 118              	   .equ AFIO_EXTICR1,8
 119              	   .equ AFIO_EXTICR2,12 
 120              	   .equ AFIO_EXTICR3,16
 121              	   .equ AFIO_EXTICR4,20
 122              	   .equ AFIO_MAPR2,28
 123              	   
 124              	    /* USART1 registers */
 125              	    .equ USART1_BASE_ADR, 0x40013800
 126              	    .equ USART2_BASE_ADR, 0x40004400
 127              	    .equ USART3_BASE_ADR, 0x40004800
 128              	
 129              	    /* USARTx registers offset */
 130              	    .equ USART_SR, 0
 131              	    .equ USART_DR,4
 132              	    .equ USART_BRR,8
 133              	    .equ USART_CR1,12
 134              	    .equ USART_CR2,16
 135              	    .equ USART_CR3,20
 136              	    .equ USART_GTPR,24
 137              	
 138              	   /* systick */
 139              	    .equ STK_BASE_ADR, 0xE000E010
 140              	    /* registers offset */
 141              	    .equ STK_CTL, 0
 142              	    .equ STK_LOAD, 4
 143              	    .equ STK_VAL, 8
 144              	    .equ STK_CALIB, 12
ARM GAS  tinyBasic.s 			page 4


 145              	
 146              	   /* system control block */
 147              	   .equ SCB_BASE_ADR, 0xE000ED00
 148              	   /* registers offset */
 149              	   .equ SCB_CPUID, 0
 150              	   .equ SCB_ICSR, 4 
 151              	   .equ SCB_VTOR, 8
 152              	   .equ SCB_AIRCR, 12
 153              	   .equ SCB_SCR, 16
 154              	   .equ SCB_CCR, 20
 155              	   .equ SCB_SHPR1,24
 156              	   .equ SCB_SHPR2,28
 157              	   .equ SCB_SHPR3,32
 158              	   .equ SCB_SHCRS,36
 159              	   .equ SCB_CFSR,40
 160              	   .equ SCB_HFSR,44
 161              	   .equ SCB_MMAR,52
 162              	   .equ SCB_BFAR,56
 163              	   // key to to write in SCB_AIRCR 
 164              	   .equ SCB_VECTKEY,0x5fa 
 165              	   
 166              	   /* NVIC block */
 167              	   .equ NVIC_BASE_ADR, 0xE000E100
 168              	   .equ NVIC_ISER0, 0
 169              	   .equ NVIC_ISER1, 4
 170              	   .equ NVIC_ISER2, 8
 171              	   .equ NVIC_ICER0, 0x80
 172              	   .equ NVIC_ICER1, 0x84 
 173              	   .equ NVIC_ICER2, 0x88 
 174              	   .equ NVIC_ISPR0, 0x100
 175              	   .equ NVIC_ISPR1, 0x104
 176              	   .equ NVIC_ISPR2, 0x108 
 177              	   .equ NVIC_ICPR0, 0x180
 178              	   .equ NVIC_ICPR1, 0x184
 179              	   .equ NVIC_ICPR2, 0x188
 180              	   .equ NVIC_IABR0, 0x200
 181              	   .equ NVIC_IABR1, 0x204
 182              	   .equ NVIC_IABR2, 0x208
 183              	   .equ NVIC_IPR_BASE, 0x300 
 184              	
 185              	/* IRQ number */
 186              	   .equ IRQ_WWDG,0
 187              	   .equ IRQ_PVD,1
 188              	   .equ IRQ_TAMPER,2
 189              	   .equ IRQ_RTC,3
 190              	   .equ IRQ_FLASH,4
 191              	   .equ IRQ_RCC,5
 192              	   .equ IRQ_EXTI0,6
 193              	   .equ IRQ_EXIT1,7
 194              	   .equ IRQ_EXTI2,8
 195              	   .equ IRQ_EXIT3,9
 196              	   .equ IRQ_EXIT4,10
 197              	   .equ IRQ_DMA1CH1,11
 198              	   .equ IRQ_DMA1CH2,12
 199              	   .equ IRQ_DAM1CH3,13
 200              	   .equ IRQ_DMA1CH4,14
 201              	   .equ IRQ_DMA1CH5,15
ARM GAS  tinyBasic.s 			page 5


 202              	   .equ IRQ_DMA1CH6,16
 203              	   .equ IRQ_DMA1CH7,17
 204              	   .equ IRQ_ADC1_2,18   
 205              	   .equ IRQ_USB_HP_CAN_TX,19
 206              	   .equ IRQ_USB_LP_CAN_RX0,20
 207              	   .equ IRQ_CAN_RX1,21
 208              	   .equ IRQ_CAN_SCE,22
 209              	   .equ IRQ_EXTI9_5,23
 210              	   .equ IRQ_TIM1_BRK,24
 211              	   .equ IRQ_TIM1_UP,25
 212              	   .equ IRQ_TIM1_TRG_COM,26
 213              	   .equ IRQ_TIM1_CC,27
 214              	   .equ IRQ_TIM2,28
 215              	   .equ IRQ_TIM3,29
 216              	   .equ IRQ_TIM4,30
 217              	   .equ IRQ_I2C1_EV,31
 218              	   .equ IRQ_I2C1_ER,32
 219              	   .equ IRQ_I2C2_EV,33
 220              	   .equ IRQ_I2C2_ER,34
 221              	   .equ IRQ_SPI1,35
 222              	   .equ IRQ_SPI2,36
 223              	   .equ IRQ_USART1,37
 224              	   .equ IRQ_USART2,38
 225              	   .equ IRQ_USART3,39
 226              	   .equ IRQ_EXTI15_10,40
 227              	   .equ IRQ_RTCALARM,41
 228              	   .equ IRQ_USB_WKUP,42
 229              	   .equ IRQ_TIM8_BRK,43
 230              	   .equ IRQ_TIM8_UP,44
 231              	   .equ IRQ_TIM8_TRG_COM,45
 232              	   .equ IRQ_TIM8_CC,46
 233              	   .equ IRQ_ADC3,47
 234              	   .equ IRQ_FSMC,48
 235              	   .equ IRQ_SDIO,49            
 236              	   .equ IRQ_TIM5,50
 237              	   .equ IRQ_SPI3,51
 238              	   .equ IRQ_UART4,52
 239              	   .equ IRQ_UART5,53
 240              	   .equ IRQ_TIM6,54
 241              	   .equ IRQ_TIM7,55
 242              	   .equ IRQ_DMA2CH1,56
 243              	   .equ IRQ_DMA2CH2,57
 244              	   .equ IRQ_DMA2CH3,58
 245              	   .equ IRQ_DMA2CH4_5,59
 246              	
 247              	
 248              	/* system control register */
 249              	.equ SCR_BASE_ADR,0xE000ED10
 250              	.equ SCR_SLEEPONEXIT,(1<<1)
 251              	.equ SCR_SLEEPDEEP,(1<<2)
 252              	.equ SCR_SEVONPEND,(1<<4)
 253              	
 254              	/* power control register */
 255              	.equ PWR_CR_ADR,0x40007000
 256              	.equ PWR_CR_LPDS,(1<<0)
 257              	.equ PWR_CR_PDDS,(1<<1)
 258              	.equ PWR_CR_CWUF,(1<<2)
ARM GAS  tinyBasic.s 			page 6


 259              	.equ PWR_CR_CSBF,(1<<3)
 260              	.equ PWR_CR_PVDE,(1<<4)
 261              	.equ PWR_CR_PLS,(1<<5)
 262              	.equ PWR_CR_DBP,(1<<8)
 263              	
 264              	/* power control and statut register */
 265              	.equ PWR_CSR_ADR,0x40007004 
 266              	.equ PWR_CSR_WUF,(1<<0)
 267              	.equ PWR_CSR_SBF,(1<<1)
 268              	.equ PWR_CSR_PVDO,(1<<2)
 269              	.equ PWR_CSR_EWUP,(1<<8)
 270              	
 271              	/* Window watchdog (WWDG) */
 272              	.equ WWDG_BASE_ADR,0x40002C00
 273              	.equ WWDG_CR,0
 274              	.equ WWDG_CFR,4
 275              	.equ WWDG_SR,8
 276              	
 277              	/* Independent watchdog (IWDG) */
 278              	.equ IWDG_BASE_ADR,0x40003000
 279              	.equ IWDG_KR,0 
 280              	.equ IWDG_PR,4
 281              	.equ IWDG_RLR,8
 282              	.equ IWDG_SR,12
 283              	
 284              	/*   ADC1 registers */
 285              	.equ ADC1_BASE_ADR, 0x40012400
 286              	.equ ADC_SR,0
 287              	.equ ADC_CR1,0X4
 288              	.equ ADC_CR2,0X8
 289              	.equ ADC_SMPR1,0XC
 290              	.equ ADC_SMPR2,0X10
 291              	.equ ADC_JOFR1,0X14
 292              	.equ ADC_JOFR2,0X18
 293              	.equ ADC_JOFR3,0X1C
 294              	.equ ADC_JOFR4,0X20
 295              	.equ ADC_HTR,0X24
 296              	.equ ADC_LTR,0X28
 297              	.equ ADC_SQR1,0X2C
 298              	.equ ADC_SQR2,0X30
 299              	.equ ADC_SQR3,0X34
 300              	.equ ADC_JSQR,0X38
 301              	.equ ADC_JDR1,0X3C
 302              	.equ ADC_JDR2,0X40
 303              	.equ ADC_JDR3,0X44
 304              	.equ ADC_JDR4,0X48
 305              	.equ ADC_DR,0X4C
 306              	
 307              	/* timer registers */
 308              	.equ TIMER1_BASE_ADR,0X40012C00
 309              	.equ TIMER2_BASE_ADR,0x40000000
 310              	.equ TIMER3_BASE_ADR,0x40000400
 311              	.equ TIMER4_BASE_ADR,0x40000800
 312              	
 313              	.equ TIM_CR1,0
 314              	.equ TIM_CR2,4
 315              	.equ TIM_SMCR,8
ARM GAS  tinyBasic.s 			page 7


 316              	.equ TIM_DIER,0xc
 317              	.equ TIM_SR,0X10
 318              	.equ TIM_EGR,0X14
 319              	.equ TIM_CCMR1,0X18
 320              	.equ TIM_CCMR2,0X1C
 321              	.equ TIM_CCER,0X20
 322              	.equ TIM_CNT,0X24
 323              	.equ TIM_PSC,0X28
 324              	.equ TIM_ARR,0X2C
 325              	.equ TIM_CCR1,0X34
 326              	.equ TIM_CCR2,0X38
 327              	.equ TIM_DCR,0X48
 328              	.equ TIM_DMAR,0X4C
 329              	
 330              	/* SPI registers */
 331              	.equ SPI1_BASE_ADR, 0x40013000
 332              	.equ SPI2_BASE_ADR, 0x40003800
 333              	
 334              	.equ SPI_CR1, 0
 335              	.equ SPI_CR2, 4
 336              	.equ SPI_SR,  8
 337              	.equ SPI_DR,  12
 338              	.equ SPI_CRCPR, 16
 339              	.equ SPI_RXCRCR, 20
 340              	.equ SPI_TXCRCR, 24
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
ARM GAS  tinyBasic.s 			page 8


  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
ARM GAS  tinyBasic.s 			page 9


   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
ARM GAS  tinyBasic.s 			page 10


  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
ARM GAS  tinyBasic.s 			page 11


 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ U2_RX_QUEUE,RX_QUEUE+RX_QUEUE_SIZE
 137              	  .equ U2_COUNT,U2_RX_QUEUE+4 
 138              	  .equ U3_RX_QUEUE,U2_COUNT+4
 139              	  .equ U3_COUNT,U3_RX_QUEUE+4 
 140              	  .equ VARS,U3_COUNT+4 // BASIC variables 
 141              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 142              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 143              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 144              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 145              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 146              	
 147              	/* flags used by BASIC interpreter */ 
 148              		.equ FRUN,(1<<0) // programm running
 149              		.equ FTRAP,(1<<1) // inside trap handler 
 150              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 151              		.equ FSTOP,(1<<3) // program stopped  
 152              		.equ FBREAK,(1<<4) // break point flag 
 153              		.equ FCOMP,(1<<5)  // compiling flags 
 154              		.equ FAUTORUN,(1<<6) // auto start program running 
 155              	  .equ FPRINT,(1<<7) // inside print command 
 156              	
 157              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 158              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 159              	
 160              	/***********************************************
 161              	*       MACROS
 162              	***********************************************/
 163              		.macro _CALL fn /* low level routine call */ 
 164              	 	PUSH {LR}
 165              		BL \fn  
 166              	  POP {LR}
 167              		.endm
 168              		
 169              		.macro	_RET /* return from subroutine */
 170              		BX	LR
 171              		.endm
ARM GAS  tinyBasic.s 			page 12


 172              	
 173              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 174              		MOV \REG, #\LITERAL&0xffff
 175              		MOVT \REG, #\LITERAL>>16
 176              		.endm
 177              	
 178              	// local function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	*********************************/
 195              		.macro _dict_entry tok_type,name,cmd_idx 
 196              	  .word LINK 
 197              	  .word \cmd_idx 
 198              		.word \tok_type  	
 199              		.equ LINK,.
 200              		.asciz "\name"
 201              		.p2align 2 
 202              		.endm 
 203              	
 204              	  // pop parameter in register 
 205              	  .macro _POP  reg 
 206              	  ldmia  DP!,{\reg}
 207              	  .endm 
 208              	
 209              	  // push register on parameter stack 
 210              	  .macro _PUSH reg 
 211              	  stmdb DP!,{\reg}
 212              	  .endm 
 213              	
 214              	  // drop n parameters on dstack 
 215              	  .macro _DROP n
 216              	  mov r0,#4*\n
 217              	  add DP,R0 
 218              	  .endm 
 219              	
 220              	  // back to previous token in list 
 221              	  .macro _UNGET_TOKEN 
 222              	  ldr IN,[UPP,#IN_SAVED]
 223              	  ldr BPTR,[UPP,#BASICPTR] 
 224              	  .endm 
 225              	
 226              	 // create a text data 
 227              	 .macro _TEXT label,text
 228              	 \label: .asciz "\text"
ARM GAS  tinyBasic.s 			page 13


 229              	 .p2align 2 
 230              	 .endm 
 231              	
 232              	// command line only 
 233              	  .macro _CLO 
 234              	  ldr r0,[UPP,#FLAGS]
 235              	  tst r0,#FRUN 
 236              	  beq 1f 
 237              	  mov r0,#ERR_CMD_ONLY
 238              	  b tb_error
 239              	1: 
 240              	  .endm 
 241              	
 242              	// run time only 
 243              	  .macro _RTO 
 244              	  ldr r0,[UPP,#FLAGS]
 245              	  tst r0,#FRUN 
 246              	  bne 1f 
 247              	  mov r0,#ERR_CMD_ONLY
 248              	  b tb_error
 249              	1:
 250              	  .endm 
 251              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
ARM GAS  tinyBasic.s 			page 14


  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ RANDOMIZE_IDX,QKEY_IDX+1 //
  85              	    .equ READ_IDX, RANDOMIZE_IDX+1 // 
  86              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  87              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  88              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  89              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  90              	    .equ RSHIFT_IDX, RND_IDX+1 // 
ARM GAS  tinyBasic.s 			page 15


  91              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  92              	    .equ SAVE_IDX, RUN_IDX+1 // 
  93              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  94              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  95              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  96              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  97              	    .equ SPC_IDX,SLEEP_IDX+1 //
  98              	    .equ SPI_DSEL_IDX,SPC_IDX+1 // 
  99              	    .equ SPI_INIT_IDX,SPI_DSEL_IDX+1 //
 100              	    .equ SPI_READ_IDX,SPI_INIT_IDX+1 //
 101              	    .equ SPI_SELECT_IDX,SPI_READ_IDX+1 //
 102              	    .equ SPI_WRITE_IDX,SPI_SELECT_IDX+1 //
 103              	    .equ STEP_IDX, SPI_WRITE_IDX+1 // 
 104              	    .equ STOP_IDX, STEP_IDX+1 // 
 105              	    .equ STORE_IDX,STOP_IDX+1
 106              	    .equ TAB_IDX, STORE_IDX+1 //
 107              	    .equ THEN_IDX,TAB_IDX+1
 108              	    .equ TICKS_IDX, THEN_IDX+1 // 
 109              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 110              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 111              	    .equ TO_IDX, TMROUT_IDX+1 // 
 112              	    .equ TONE_IDX,TO_IDX+1
 113              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 114              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 115              	    .equ UART_GETC_IDX,TRACE_IDX+1 // 
 116              	    .equ UART_INIT_IDX,UART_GETC_IDX+1//
 117              	    .equ UART_PUTC_IDX,UART_INIT_IDX+1//
 118              	    .equ UBOUND_IDX, UART_PUTC_IDX+1 //
 119              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 120              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 121              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 122              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 123              	    .equ XOR_IDX, WORDS_IDX+1 //
 124              	    .equ XPOS_IDX,XOR_IDX+1 //
 125              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 126              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
ARM GAS  tinyBasic.s 			page 16


  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
ARM GAS  tinyBasic.s 			page 17


 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
ARM GAS  tinyBasic.s 			page 18


 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
ARM GAS  tinyBasic.s 			page 19


 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
ARM GAS  tinyBasic.s 			page 20


 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8DC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
ARM GAS  tinyBasic.s 			page 21


 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	0:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D4     	    bmi 1f 
 303 0234 7F28     	    cmp r0,#127 
 304 0236 01D4     	    bmi 2f 
 305 0238 4FF05F00 	1:  mov r0,#'_' 
 306 023c 00B5FFF7 	2:  _CALL uart_putc
 306      FEFF5DF8 
 306      04EB
 307 0246 0139     	    subs r1,#1 
 308 0248 F0D1     	    bne 0b 
 309 024a 1046     	    mov r0,r2 
 310 024c 04BC     	    pop {r2}
 311 024e 7047     	    _RET 
 312              	
 313              	
 314              	/*********************************
 315              	    search_target 
 316              	    search for goto, gosub target
 317              	    target is line number | label  
 318              	*********************************/
 319              	    _FUNC search_target
 320 0250 00B500F0 	    _CALL next_token 
 320      01FE5DF8 
 320      04EB
 321 025a 1A28     	    cmp r0,TK_LABEL 
 322 025c 06D1     	    bne 2f 
 323 025e 00B500F0 	    _CALL search_label
 323      32F85DF8 
 323      04EB
 324 0268 A0B1     	    cbz r0,8f  
 325 026a 16E0     	    b 9f 
 326 026c D4F800A0 	2:  _UNGET_TOKEN
 326      D4F808B0 
 327 0274 00B500F0 	    _CALL expression 
 327      19FF5DF8 
 327      04EB
 328 027e 1B28     	    cmp r0,#TK_INTGR 
 329 0280 40F0EE83 	    bne syntax_error 
 330 0284 48B1     	    cbz r0,9f 
 331 0286 0846     	    mov r0,r1 
ARM GAS  tinyBasic.s 			page 22


 332 0288 00B5FFF7 	    _CALL search_lineno 
 332      FEFF5DF8 
 332      04EB
 333 0292 11B1     	    cbz r1,9f 
 334 0294 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 335 0298 E6E3     	    b tb_error 
 336 029a 7047     	9:  _RET 
 337              	
 338              	
 339              	/***************************************
 340              	  search_const 
 341              	  search for constant 
 342              	  input:
 343              	    r0  constant label 
 344              	  output:
 345              	    r0  TK_INTGR 
 346              	    r1  constant value  
 347              	  use:
 348              	    r2   *list 
 349              	    r3   BOUND 
 350              	***************************************/
 351              	    _FUNC search_const
 352 029c 0CB4     	    push {r2,r3} 
 353 029e 626B     	    ldr r2,[UPP,#TXTEND]
 354 02a0 D4F8E030 	    ldr r3,[UPP,#HERE] 
 355 02a4 9A42     	1:  cmp r2,r3 
 356 02a6 0BD5     	    bpl 8f 
 357 02a8 52F8041B 	    ldr r1,[r2],#4
 358 02ac 8842     	    cmp r0,r1 
 359 02ae 02D0     	    beq 2f 
 360 02b0 02F10402 	    add r2,#4
 361 02b4 F6E7     	    b 1b 
 362              	2:  // found 
 363 02b6 1168     	    ldr r1,[r2]
 364 02b8 4FF01B00 	    mov r0,#TK_INTGR 
 365 02bc 0CBC     	    pop {r2,r3}
 366 02be 7047     	    _RET
 367              	8:  // that constant doesn't exist 
 368 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 369 02c4 D0E3     	    b tb_error      
 370              	
 371              	
 372              	/***************************************
 373              	    search_label 
 374              	    search target label 
 375              	    input:
 376              	      r1    target label 
 377              	    output:
 378              	      r0    address or 0 
 379              	    use:
 380              	      r2    line address link 
 381              	      r3    search limit 
 382              	****************************************/
 383 02c6 00BF     	    _FUNC search_label 
 384 02c8 0CB4     	    push {r2,r3}
 385 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 386 02cc 636B     	    ldr r3,[UPP,#TXTEND]
ARM GAS  tinyBasic.s 			page 23


 387 02ce 9A42     	1:  cmp r2,r3
 388 02d0 0AD0     	    beq 8f 
 389 02d2 D078     	    ldrb r0,[r2,#3]
 390 02d4 1A28     	    cmp  r0,#TK_LABEL 
 391 02d6 02D0     	    beq 4f 
 392 02d8 9078     	2:  ldrb r0,[r2,#2]
 393 02da 0244     	    add r2,r0 
 394 02dc F7E7     	    b 1b 
 395              	4:  // compare label 
 396 02de 5068     	    ldr r0,[R2,#4]
 397 02e0 8142     	    cmp r1,r0 
 398 02e2 F9D1     	    bne 2b 
 399              	    // found label 
 400 02e4 1046     	    mov r0,r2 
 401 02e6 01E0     	    b 9f
 402 02e8 80EA0000 	8:  eor r0,r0 
 403 02ec 0CBC     	9:  pop {r2,r3}
 404 02ee 7047     	    _RET 
 405              	
 406              	
 407              	/***************************************
 408              	    search_lineno 
 409              	    localize BASIC line from its number 
 410              	    input:
 411              	      r0   line# 
 412              	    output: 
 413              	      r0   adr where found || adr new to be inserted 
 414              	      r1   0 found || !0 not found  
 415              	    use:
 416              	      r0   scan address 
 417              	      r1   temp   
 418              	      r2   address end of text
 419              	      r3   target line#
 420              	****************************************/    
 421              	    _GBL_FUNC search_lineno
 422 02f0 0CB4     	    push {r2,r3} 
 423 02f2 0346     	    mov r3,r0 // target 
 424 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 425 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 426 02f8 9042     	1:  cmp r0,r2 
 427 02fa 05D0     	    beq  8f
 428 02fc 0188     	    ldrh r1,[r0]
 429 02fe C91A     	    subs r1,r3 
 430 0300 04D5     	    bpl 9f 
 431 0302 8178     	    ldrb r1,[r0,#2]
 432 0304 0844     	    add r0,r1
 433 0306 F7E7     	    b 1b 
 434 0308 4FF0FF31 	8:  mov r1,#-1 
 435 030c 0CBC     	9:  pop {r2,r3}
 436 030e 7047     	    _RET 
 437              	
 438              	
 439              	/********************************************
 440              	    delete_line 
 441              	    delete BASIC line at addr 
 442              	    input:
 443              	      r0    address line to delete 
ARM GAS  tinyBasic.s 			page 24


 444              	    output:
 445              	      r0    same as input 
 446              	    use: 
 447              	      r1    dest adr
 448              	      r2    bytes to move 
 449              	      T1    length line to delete 
 450              	      T2    txtend 
 451              	********************************************/
 452              	    _FUNC delete_line 
 453 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 454 0314 0146     	    mov r1,r0 // dest 
 455 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 456 031a 4044     	    add r0,T1  // src
 457 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 458 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 459 0324 00B5FFF7 	    _CALL cmove
 459      FEFF5DF8 
 459      04EB
 460 032e A9EB0809 	    sub T2,T1 // txtend-count 
 461 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 462 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 463 033a 7047     	    _RET 
 464              	
 465              	/******************************************
 466              	    create_gap 
 467              	    create a gap in text area to insert new line 
 468              	    input:
 469              	      r0    adr 
 470              	      r1    length 
 471              	    output:
 472              	      r0    adr 
 473              	    use:
 474              	      T1    length 
 475              	      T2    txtend 
 476              	************************************************/
 477              	    _FUNC create_gap 
 478 033c 2DE90503 	    push {r0,r2,T1,T2}
 479 0340 8846     	    mov T1,R1
 480 0342 0144     	    add r1,r0  // dest 
 481 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 482 0348 A9EB0002 	    sub r2,T2,r0 
 483 034c 00B5FFF7 	    _CALL cmove
 483      FEFF5DF8 
 483      04EB
 484 0356 C144     	    add T2,T1 
 485 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 486 035c C4F8E090 	    str T2,[upp,#HERE]
 487 0360 BDE80503 	    pop {r0,r2,T1,T2}
 488 0364 7047     	    _RET 
 489              	
 490              	/************************************************
 491              	    insert_line 
 492              	    insert BASIC line in text area 
 493              	    first search if line with same number exist 
 494              	    replace if so. 
 495              	    input:
 496              	      r0    *buffer to insert 
ARM GAS  tinyBasic.s 			page 25


 497              	    output:
 498              	      none 
 499              	    use: 
 500              	      T1     *buffer
 501              	      T2     temp  
 502              	************************************************/ 
 503 0366 00BF     	    _FUNC insert_line 
 504 0368 2DE90203 	    push {r1,T1,T2}
 505 036c 8046     	    mov T1,r0 
 506 036e B8F80000 	    ldrh r0,[T1]
 507 0372 00B5FFF7 	    _CALL search_lineno 
 507      FEFF5DF8 
 507      04EB
 508 037c 49B9     	    cbnz  r1, 1f // line# doesn't exist
 509              	// already exist 
 510 037e 00B5FFF7 	    _CALL delete_line // delete old one 
 510      C6FF5DF8 
 510      04EB
 511 0388 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 512 038c B9F1040F 	    cmp T2,#4 // empty line length==4  
 513 0390 0ED0     	    beq 9f
 514              	1: //insert new line 
 515 0392 98F80210 	    ldrb r1,[T1,#2]
 516 0396 00B5FFF7 	    _CALL create_gap 
 516      D0FF5DF8 
 516      04EB
 517 03a0 0146     	    mov r1,r0
 518 03a2 4046     	    mov r0,T1 
 519 03a4 8278     	    ldrb r2,[r0,#2]
 520 03a6 00B5FFF7 	    _CALL cmove 
 520      FEFF5DF8 
 520      04EB
 521 03b0 BDE80203 	9:  pop {r1,T1,T2}
 522 03b4 7047     	    _RET 
 523              	
 524              	/*********************************
 525              	    compile 
 526              	    tokenize source line save it 
 527              	    in pas buffer.
 528              	    compiled line format: 
 529              	      line_no  2 bytes {0...32767}
 530              	      count    1 byte  
 531              	      tokens   variable length 
 532              	  input:
 533              	     r0   *text buffer 
 534              	     r1   *text length   
 535              	  output:
 536              	    r0    0 stored | -1 immediate 
 537              	  use:
 538              	    r3    tib index   
 539              	    T1    tib
 540              	    T2    pad
 541              	***********************************/
 542 03b6 00BF     	    _FUNC compile
 543 03b8 8046     	    mov T1, r0  // source text buffer 
 544 03ba 6160     	    str r1,[UPP,#COUNT] // save line length 
 545 03bc DFF8F499 	    ldr T2,pad // tokens buffer
ARM GAS  tinyBasic.s 			page 26


 546 03c0 83EA0303 	    eor r3,r3 // source index  
 547 03c4 206C     	    ldr r0,[UPP,#FLAGS]
 548 03c6 40F02000 	    orr r0,#FCOMP
 549 03ca 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 550 03cc 80EA0000 	    eor r0,r0     
 551 03d0 29F8020B 	    strh r0,[T2],#2   // line no 
 552 03d4 09F8010B 	    strb r0,[T2],#1 // length 
 553 03d8 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 554 03da C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 555 03de 00B500F0 	    _CALL parse_int 
 555      6EF95DF8 
 555      04EB
 556 03e8 0AD0     	    beq 2f 
 557              	// this is a line number     
 558 03ea 0129     	    cmp r1,#1 
 559 03ec 02D5     	    bpl 1f 
 560 03ee 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 561 03f2 39E3     	    b tb_error  
 562 03f4 B1F5803F 	1:  cmp r1,#65536
 563 03f8 F9D5     	    bpl 0b 
 564              	    // write line # to pad 
 565 03fa 29F8031C 	    strh r1,[T2,#-3]
 566 03fe 2360     	    str r3,[UPP,#IN_SAVED]
 567              	2:  // check for pad full 
 568 0400 C145     	    cmp T2,T1
 569 0402 02DB     	    blt 3f 
 570 0404 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 571 0408 2EE3     	    b tb_error 
 572 040a 00B500F0 	3:  _CALL comp_token 
 572      28F85DF8 
 572      04EB
 573 0414 0028     	    cmp r0,#TK_NONE 
 574 0416 01D0     	    beq 4f 
 575 0418 2360     	    str r3,[UPP,#IN_SAVED]
 576 041a F1E7     	    b 2b 
 577              	4: // compilation completed 
 578 041c DFF89439 	    ldr r3,pad 
 579 0420 A9EB0300 	    sub r0,T2,r3 // line length 
 580 0424 9870     	    strb r0,[r3,#2]
 581 0426 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 582 0428 1888     	    ldrh r0,[r3] // line number 
 583 042a 70B1     	    cbz r0,8f  
 584              	// insert line in text buffer 
 585 042c 206C     	    ldr r0,[UPP,#FLAGS]
 586 042e 10F0080F 	    tst r0,#FSTOP
 587 0432 02D0     	    beq 7f 
 588 0434 4FF01000 	    mov r0,#ERR_CANT_PROG 
 589 0438 16E3     	    b tb_error 
 590 043a 1846     	7:  mov r0,r3 
 591 043c 00B5FFF7 	    _CALL insert_line 
 591      93FF5DF8 
 591      04EB
 592 0446 4040     	    eors r0,r0 
 593 0448 08E0     	    b 9f 
 594 044a 9B46     	8:  mov BPTR,r3 // *token_list 
 595 044c 4FF0030A 	    mov IN,#3
 596 0450 206C     	    ldr r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 27


 597 0452 A0F12000 	    sub r0,#FCOMP
 598 0456 2064     	    str r0,[UPP,#FLAGS]
 599 0458 5FF0FF30 	    movs r0,#-1 
 600 045c 7047     	9:  _RET 
 601              	
 602              	/*********************************************
 603              	    compile next token from source 
 604              	    input: 
 605              	      r3 		tib index  
 606              	      T1    tib adr
 607              	      T2    insert point in pad  
 608              	    output:
 609              	      r0     token attribute 
 610              	      r1 		token value
 611              	      r3     tib index updated    
 612              	      T2     updated 
 613              	      use:
 614              	**********************************************/
 615 045e 00BF     	    _FUNC comp_token 
 616 0460 40B4     	    push {r6}
 617 0462 18F80300 	    ldrb r0,[T1,r3]
 618 0466 0040     	    ands r0,r0 
 619 0468 7DD0     	    beq store_r0  // reached end of text  
 620 046a 4FF02000 	    mov r0,#SPACE 
 621 046e 00B500F0 	    _CALL skip  // skip spaces 
 621      76F95DF8 
 621      04EB
 622 0478 18F80300 	    ldrb r0,[T1,r3]
 623 047c 0040     	    ands r0,r0 
 624 047e 72D0     	    beq store_r0  // reached end of text 
 625 0480 03F10103 	    add r3,#1
 626 0484 00B500F0 	    _CALL is_letter 
 626      9FF95DF8 
 626      04EB
 627 048e 0BD1     	    bne 1f
 628 0490 A3F10103 	    sub r3,#1 
 629 0494 00B500F0 	    _CALL comp_label // parse and compile label 
 629      AFF85DF8 
 629      04EB
 630 049e 1728     	    cmp r0,#TK_CMD 
 631 04a0 71D1     	    bne token_exit 
 632 04a2 3D29     	    cmp r1,#REM_IDX 
 633 04a4 4DD0     	    beq tick2 
 634 04a6 6EE0     	    b token_exit 
 635 04a8 00B500F0 	1:  _CALL is_special
 635      6FF85DF8 
 635      04EB
 636 04b2 DFF8186D 	    ldr r6,=token_ofs
 637 04b6 D6E811F0 	    tbh [r6,r1] 
 638              	tok_idx0:     
 639              	//  not special char.  
 640 04ba 57E0     	    b try_number 
 641              	// single char token with no value 
 642              	single: 
 643 04bc DFF8106D 	    ldr r6,=tok_single
 644 04c0 705C     	    ldrb r0,[r6,r1] 
 645 04c2 50E0     	    b store_r0
ARM GAS  tinyBasic.s 			page 28


 646              	lt:
 647 04c4 4FF00F00 	    mov r0,#TK_LT
 648 04c8 18F80310 	    ldrb r1,[T1,r3]
 649 04cc 3E29     	    cmp r1,#'>' 
 650 04ce 06D0     	    beq 1f
 651 04d0 0AE0     	    b 2f 
 652              	gt:
 653 04d2 4FF00E00 	    mov r0,#TK_GT 
 654 04d6 18F80310 	    ldrb r1,[T1,r3]
 655 04da 3C29     	    cmp r1,#'<'
 656 04dc 04D1     	    bne 2f  
 657 04de 03F10103 	1:  add r3,#1
 658 04e2 4FF01200 	    mov r0,#TK_NE  
 659 04e6 3EE0     	    b store_r0
 660 04e8 3D29     	2:  cmp r1,#'=' 
 661 04ea 3CD1     	    bne store_r0  
 662 04ec 03F10103 	    add r3,#1
 663 04f0 00F10200 	    add r0,#2
 664 04f4 37E0     	    b store_r0       
 665              	bkslash:
 666 04f6 18F80310 	    ldrb r1,[T1,r3]
 667 04fa 03F10103 	    add r3,#1
 668 04fe 4FF01300 	    mov r0,#TK_CHAR 
 669 0502 09F8010B 	    strb r0,[T2],#1
 670 0506 09F8011B 	    strb r1,[T2],#1
 671 050a 3CE0     	    b token_exit 
 672              	prt_cmd: 
 673 050c 4FF01700 	    mov r0,#TK_CMD 
 674 0510 4FF03701 	    mov r1,#PRT_IDX
 675 0514 09F8010B 	    strb r0,[T2],#1
 676 0518 09F8011B 	    strb r1,[T2],#1
 677 051c 33E0     	    b token_exit 
 678              	quote:
 679 051e 4FF01C00 	    mov r0,#TK_QSTR 
 680 0522 09F8010B 	    strb r0,[T2],#1
 681 0526 00B500F0 	    _CALL parse_quote
 681      E6F85DF8 
 681      04EB
 682 0530 29E0     	    b token_exit
 683              	tick: 
 684              	// copy comment in pad 
 685 0532 4FF01700 	    mov r0,#TK_CMD 
 686 0536 4FF03D01 	    mov r1,#REM_IDX 
 687 053a 09F8010B 	    strb r0,[T2],#1 
 688 053e 09F8011B 	    strb r1,[T2],#1
 689              	tick2:
 690 0542 08EB0300 	    add r0,T1,r3 
 691 0546 4946     	    mov r1,T2 
 692 0548 00B5FFF7 	    _CALL strcpy 
 692      FEFF5DF8 
 692      04EB
 693 0552 00B5FFF7 	    _CALL strlen 
 693      FEFF5DF8 
 693      04EB
 694 055c 8144     	    add T2,r0
 695 055e 09F10109 	    add T2,#1
 696 0562 6368     	    ldr r3,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 29


 697 0564 0FE0     	    b token_exit
 698              	store_r0: 
 699 0566 09F8010B 	    strb r0,[T2],#1
 700 056a 0CE0     	    b token_exit 
 701              	try_number:
 702 056c A3F10103 	    sub r3,#1
 703 0570 00B500F0 	    _CALL parse_int  
 703      A5F85DF8 
 703      04EB
 704 057a 00F07182 	    beq syntax_error  
 705 057e 09F8010B 	    strb r0,[T2],#1 
 706 0582 49F8041B 	    str r1,[T2],#4
 707              	token_exit:
 708 0586 40BC     	    pop {r6}
 709 0588 7047     	    _RET 
 710              	
 711              	
 712              	/****************************
 713              	    is_special  
 714              	    check for non alphanum
 715              	    input:
 716              	      r0    character to scan 
 717              	    output:
 718              	      r0    character 
 719              	      r1    0 || index 
 720              	    use: 
 721              	      r1    scan index 
 722              	      r2    temp 
 723              	      r3    char_list 
 724              	*****************************/
 725 058a 00BF     	    _FUNC is_special 
 726 058c 0CB4     	    push {r2,r3}
 727 058e 4FF00101 	    mov r1,#1
 728 0592 DFF8403C 	    ldr r3,=char_list 
 729 0596 5A5C     	1:  ldrb r2,[r3,r1]
 730 0598 22B1     	    cbz r2,8f 
 731 059a 8242     	    cmp r2,r0 
 732 059c 04D0     	    beq 9f 
 733 059e 01F10101 	    add r1,#1 
 734 05a2 F8E7     	    b 1b
 735 05a4 81EA0101 	8:  eor r1,r1     
 736 05a8 0CBC     	9:  pop {r2,r3}
 737 05aa 7047     	    _RET 
 738              	
 739              	char_list:
 740 05ac 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 740      28293A23 
 740      2D2B2A2F 
 740      253D3C3E 
 740      5C3F2722 
 741              	
 742              	tok_single:
 743 05c1 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 743      050601
 744 05c8 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 744      0A0B0D
 745              	
ARM GAS  tinyBasic.s 			page 30


 746 05cf 00       	  .p2align 2
 747              	token_ofs:
 748 05d0 0000     	  .hword  0 // not found
 749              	  // TK_COMMA...TK_EQUAL , 13 
 750 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 750      01000100 
 751 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 751      01000100 
 752 05e2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 752      01000100 
 753 05ea 0100     	  .hword  (single-tok_idx0)/2    
 754              	  // '<','>'
 755 05ec 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 756              	  // '\'
 757 05f0 1E00     	  .hword  (bkslash-tok_idx0)/2
 758              	  // '?' 
 759 05f2 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 760              	  // "'"  
 761 05f4 3C00     	  .hword  (tick-tok_idx0)/2 
 762              	  // '"' quote 
 763 05f6 3200     	  .hword (quote-tok_idx0)/2
 764              	
 765              	  .p2align 2
 766              	
 767              	/****************************
 768              	    comp_label
 769              	    compile a label 
 770              	    it can be a target|keyword|
 771              	    variable| user constant  
 772              	    label form: [A..Z]+
 773              	    input:
 774              	      *buffer 
 775              	    output:
 776              	      r0  token type 
 777              	      r1  token value 
 778              	      T2  updated 
 779              	      R3  updated
 780              	    use:
 781              	****************************/
 782              	    _FUNC comp_label
 783 05f8 24B4     	    push {r2,r5}
 784 05fa 4DF8049D 	    push {T2}
 785 05fe 82EA0202 	    eor r2,r2
 786 0602 4FF00605 	    mov r5,#6 
 787 0606 18F80300 	0:  ldrb r0,[T1,r3]
 788 060a 5F28     	    cmp r0,#'_'
 789 060c 0AD0     	    beq 2f
 790 060e 00B500F0 	1:  _CALL is_letter 
 790      DAF85DF8 
 790      04EB
 791 0618 09D1     	    bne 3f // not letter 
 792 061a 00B500F0 	    _CALL upper 
 792      ACF85DF8 
 792      04EB
 793 0624 09F8010B 	2:  strb r0,[T2],#1
 794 0628 03F10103 	    add r3,#1
 795 062c EBE7     	    b 0b 
ARM GAS  tinyBasic.s 			page 31


 796 062e 80EA0000 	3:  eor r0,r0 
 797 0632 89F80000 	    strb r0,[T2]
 798              	// is this a variable ?
 799 0636 5DF8049B 	    pop {T2}
 800 063a 99F80100 	    ldrb r0,[T2,#1]
 801 063e 30B9     	    cbnz r0,3f // length >1 not variable 
 802 0640 99F80010 	    ldrb r1,[T2]
 803 0644 A1F14101 	    sub r1,#'A' 
 804 0648 4FF01400 	    mov r0,#TK_VAR
 805 064c 1CE0     	    b 8f 
 806              	3:  // try keyword 
 807 064e 4846     	    mov r0,T2 
 808 0650 DFF8841B 	    ldr r1,=kword_dict  
 809 0654 00B500F0 	    _CALL search_dict 
 809      C5FA5DF8 
 809      04EB
 810 065e 30B1     	    cbz r0,4f
 811 0660 1828     	    cmp r0,TK_SCONST  
 812 0662 11D1     	    bne 8f
 813              	    //system constant  
 814 0664 09F8010B 	    strb r0,[T2],#1
 815 0668 49F8041B 	    str r1,[T2],#4
 816 066c 10E0     	    b 9f 
 817              	4: // must be a label 
 818 066e 4846     	    mov r0,T2 
 819 0670 00B500F0 	    _CALL compress_label
 819      0FF85DF8 
 819      04EB
 820 067a 4FF01A00 	    mov r0,#TK_LABEL
 821 067e 09F8010B 	    strb r0,[T2],#1
 822 0682 49F8041B 	    str r1,[T2],#4
 823 0686 03E0     	    b 9f 
 824 0688 09F8010B 	8:  strb r0,[T2],#1
 825 068c 09F8011B 	    strb r1,[T2],#1          
 826 0690 24BC     	9:  pop {r2,r5}
 827 0692 7047     	    _RET 
 828              	
 829              	/********************************
 830              	    compress_label 
 831              	    compress label in integer 
 832              	    maximum 6 character, 
 833              	    ignore extras characters 
 834              	    input:
 835              	      r0  *label 
 836              	    output:
 837              	      r1   compressed label 
 838              	********************************/
 839              	    _FUNC compress_label
 840 0694 0CB4     	    push {r2,r3}
 841 0696 82EA0202 	    eor r2,r2 // compress value
 842 069a 4FF00603 	    mov r3,#6 // max characters 
 843 069e 10F8011B 	1:  ldrb r1,[r0],#1 
 844 06a2 51B1     	    cbz r1,3f
 845 06a4 5F29     	    cmp r1,#'_'
 846 06a6 01D1     	    bne 2f 
 847 06a8 A1F10401 	    sub r1,#4  
 848 06ac A1F14001 	2:  sub r1,#'@'
ARM GAS  tinyBasic.s 			page 32


 849 06b0 4FEA4212 	    lsl r2,#5
 850 06b4 0A44     	    add r2,r1
 851 06b6 013B     	    subs r3,#1 
 852 06b8 F1D1     	    bne 1b 
 853 06ba 1146     	3:  mov r1,r2     
 854 06bc 0CBC     	    pop {r2,r3}
 855 06be 7047     	    _RET 
 856              	
 857              	
 858              	/****************************
 859              	    parse_int 
 860              	    parse an integer from text
 861              	    if not valid integer 
 862              	    r1 return *buffer else 
 863              	    *buffer is incremented after integer 
 864              	  input:
 865              	    r0   *buffer 
 866              	  output:
 867              	    r0   TK_INTGR|TK_NONE
 868              	    r1   int|0   
 869              	  use:
 870              	    r3   tib index updated     
 871              	*****************************/
 872              	    _FUNC parse_int 
 873 06c0 4FF00A01 	    mov r1,#10 // default base 
 874 06c4 18F80300 	    ldrb r0,[T1,r3]
 875 06c8 2428     	    cmp r0,'$' 
 876 06ca 02D1     	    bne 2f 
 877 06cc 4FF01001 	    mov r1,#16 // hexadecimal number 
 878 06d0 03E0     	    b 3f  
 879 06d2 2628     	2:  cmp r0,#'&' 
 880 06d4 03D1     	    bne 4f
 881 06d6 4FF00201 	    mov r1,#2 //binary number  
 882 06da 03F10103 	3:  add r3,#1
 883 06de 03EB0800 	4:  add r0,r3,T1 
 884 06e2 00B5FFF7 	    _CALL atoi 
 884      FEFF5DF8 
 884      04EB
 885 06ec 10B1     	    cbz r0,9f
 886 06ee 0344     	    add r3,r0
 887 06f0 4FF01B00 	    mov r0,#TK_INTGR
 888 06f4 0040     	9:  ands r0,r0   
 889 06f6 7047     	    _RET 
 890              	
 891              	/*********************************************
 892              	    parse_quote 
 893              	    parse quoted string 
 894              	    input: 
 895              	      r3 		tib index  
 896              	      T1    tib adr
 897              	      T2    insert point in pad  
 898              	    output:
 899              	      r0     token attribute 
 900              	      r1 		*str 
 901              	      r3     tib index updated    
 902              	      T2     updated 
 903              	      use:
ARM GAS  tinyBasic.s 			page 33


 904              	*********************************************/
 905              	    _FUNC parse_quote
 906 06f8 4DF8049D 	    push {T2} 
 907 06fc 18F80300 	1:  ldrb r0,[T1,r3]
 908 0700 03F10103 	    add r3,#1 
 909 0704 2228     	    cmp r0,#'"'
 910 0706 09D0     	    beq 9f 
 911 0708 5C28     	    cmp r0,#'\\'
 912 070a 04D1     	    bne 2f 
 913 070c 00B500F0 	    _CALL get_escaped_char 
 913      0DF85DF8 
 913      04EB
 914 0716 09F8010B 	2:  strb r0,[T2],#1
 915 071a EFE7     	    b 1b 
 916 071c 80EA0000 	9:  eor  r0,r0
 917 0720 09F8010B 	    strb r0,[T2],#1
 918 0724 4FF01C00 	    mov r0,#TK_QSTR
 919 0728 02BC     	    pop {r1}
 920 072a 7047     	    _RET 
 921              	
 922              	/**********************************************
 923              	    get_escaped_char 
 924              	    convert "\c" in quoted string 
 925              	    input:
 926              	      r0 
 927              	      r3   index 
 928              	      T1   tib 
 929              	    output:
 930              	      r0   replacement char
 931              	      r3   updated 
 932              	    use:
 933              	      r1   *table 
 934              	      r2   temp 
 935              	**********************************************/
 936              	    _FUNC get_escaped_char 
 937 072c 06B4     	    push {r1,r2}
 938 072e 18F80300 	    ldrb r0,[T1,r3]
 939 0732 03F10103 	    add r3,#1
 940 0736 2228     	    cmp r0,#'"' 
 941 0738 0BD0     	    beq 9f 
 942 073a DFF8A01A 	1:  ldr r1,=escaped 
 943 073e 11F8012B 	2:  ldrb r2,[r1],#1
 944 0742 12B1     	    cbz r2,6f 
 945 0744 8242     	    cmp r2,r0 
 946 0746 02D0     	    beq 7f 
 947 0748 F9E7     	    b 2b
 948 074a A0F10702 	6:  sub r2,r0,#7     
 949 074e 02F10700 	7:  add r0,r2,#7
 950 0752 06BC     	9:  pop {r1,r2}   
 951 0754 7047     	    _RET
 952              	
 953 0756 6162746E 	escaped: .asciz "abtnvfr"
 953      76667200 
 954              	
 955              	/*********************************************
 956              	   skip character in TIB 
 957              	   input:
ARM GAS  tinyBasic.s 			page 34


 958              	      r0    character to skip 
 959              	      r3    tib index 
 960              	      T1    tib adr
 961              	    output: 
 962              	      r3    updated
 963              	    use:
 964              	      r1     
 965              	**********************************************/   
 966 075e 00BF     	    _FUNC skip
 967 0760 02B4     	    push {r1} 
 968 0762 18F80310 	1:  ldrb r1,[T1,r3]
 969 0766 8142     	    cmp r1,r0
 970 0768 02D1     	    bne 2f
 971 076a 03F10103 	    add r3,#1 
 972 076e F8E7     	    b 1b 
 973 0770 2360     	2:  str r3,[UPP,#IN_SAVED]
 974 0772 02BC     	    pop {r1}
 975 0774 7047     	    _RET
 976              	
 977              	/********************************************
 978              	    upper
 979              	    convert character in upper case 
 980              	    input: 
 981              	      r0   character 
 982              	    output:
 983              	      r0   upper case character 
 984              	*********************************************/
 985 0776 00BF     	    _FUNC upper 
 986 0778 6128     	    cmp r0,#'a' 
 987 077a 03DB     	    blt 9f 
 988 077c 7A28     	    cmp r0,#'z' 
 989 077e 01DC     	    bgt 9f 
 990 0780 00F05F00 	    and r0,#0x5f 
 991 0784 7047     	9:  _RET 
 992              	
 993              	/***************************************
 994              	   is_digit 
 995              	   check if char is decimal digit.
 996              	   convert to decimal digit.
 997              	   input:
 998              	      r0    char 
 999              	   output:
 1000              	      r0        if Z then converted digit else not changed
 1001              	      Z flag    1 true | 0 false  
 1002              	***************************************/
 1003 0786 00BF     	    _GBL_FUNC is_digit 
 1004 0788 02B4     	    push {r1} 
 1005 078a 4FF0FF31 	    mov r1,#-1   
 1006 078e 3028     	    cmp r0,#'0' 
 1007 0790 05DB     	    blt 9f
 1008 0792 3A28     	    cmp r0,'9'+1
 1009 0794 03D5     	    bpl 9f 
 1010 0796 81EA0101 	    eor r1,r1 
 1011 079a A0F13000 	    sub r0,#'0'  
 1012              	9:   
 1013 079e 0940     	    ands r1,r1
 1014 07a0 02BC     	    pop {r1} 
ARM GAS  tinyBasic.s 			page 35


 1015 07a2 7047     	    _RET 
 1016              	
 1017              	/***************************************
 1018              	    is_hex 
 1019              	    check for hexadecimal digit 
 1020              	    convert to hex digit.
 1021              	    input:
 1022              	      r0    
 1023              	    output:
 1024              	      r0         if Z then converted digit 
 1025              	      Z  flag    1 true | 0 false         
 1026              	***************************************/
 1027              	    _FUNC is_hex 
 1028 07a4 02B4     	    push {r1}
 1029 07a6 80EA0000 	    eor r0,r0 
 1030 07aa 4128     	    cmp r0,#'A' 
 1031 07ac 01D4     	    bmi 1f 
 1032 07ae A0F10700 	    sub r0,#7 
 1033 07b2 A0F13000 	1:  sub r0,#'0'
 1034 07b6 01D4     	    bmi 2f 
 1035 07b8 1028     	    cmp r0,#16
 1036 07ba 01D4     	    bmi 9f 
 1037 07bc 6FEA0101 	2:  mvn r1,r1  
 1038 07c0 0940     	9:  ands r1,r1 
 1039 07c2 02BC     	    pop {r1}
 1040 07c4 7047     	    _RET 
 1041              	
 1042              	/***************************************
 1043              	    is_letter 
 1044              	    check if character is {a..z,A..Z,_} 
 1045              	  input:
 1046              	    r0   character 
 1047              	  output: 
 1048              	    r0       same character 
 1049              	    Z flag   1 true | 0 false  
 1050              	****************************************/
 1051 07c6 00BF     	    _FUNC is_letter
 1052 07c8 02B4     	    push {r1} 
 1053 07ca 81EA0101 	    eor r1,r1 
 1054 07ce 4128     	    cmp r0,#'A' 
 1055 07d0 05D4     	    bmi 8f 
 1056 07d2 5B28     	    cmp r0,#'Z'+1 
 1057 07d4 05D4     	    bmi 9f
 1058 07d6 6128     	    cmp r0,#'a' 
 1059 07d8 01D4     	    bmi 8f 
 1060 07da 7B28     	    cmp r0,#'z'+1
 1061 07dc 01D4     	    bmi 9f  
 1062 07de 6FEA0101 	8:  mvn r1,r1  
 1063 07e2 0940     	9:  ands r1,r1 
 1064 07e4 02BC     	    pop {r1}
 1065 07e6 7047     	    _RET 
 1066              	
 1067              	
 1068              	/******************************************
 1069              	    atoi 
 1070              	    convert ascii to integer 
 1071              	    input:
ARM GAS  tinyBasic.s 			page 36


 1072              	      r0   *buffer 
 1073              	      r1   base 
 1074              	    output:
 1075              	      r0   0 no integer found 
 1076              	      r1   integer
 1077              	    use:
 1078              	      r2   base  
 1079              	      T1   *buffer 
 1080              	      T2   digit count  
 1081              	******************************************/
 1082              	    _GBL_FUNC atoi 
 1083 07e8 2DE90403 	    push {r2,T1,T2}
 1084 07ec 8046     	    mov T1,r0  // *buffer 
 1085 07ee 0A46     	    mov r2,r1  // base  
 1086 07f0 81EA0101 	    eor r1,r1  // converted integer 
 1087 07f4 89EA0909 	    eor T2,T2  // digit count 
 1088 07f8 18F8010B 	1:  ldrb r0,[T1],#1
 1089 07fc 00B5FFF7 	    _CALL upper 
 1089      BBFF5DF8 
 1089      04EB
 1090 0806 3028     	    cmp r0,#'0'
 1091 0808 0FD4     	    bmi 8f
 1092 080a 3A28     	    cmp r0,#'9'+1 
 1093 080c 03D4     	    bmi 2f 
 1094 080e 4128     	    cmp r0,#'A'
 1095 0810 0BD4     	    bmi 8f 
 1096 0812 A0F10700 	    sub r0,#7 
 1097 0816 A0F13000 	2:  sub r0,#'0' 
 1098 081a 9042     	    cmp r0,r2
 1099 081c 05D5     	    bpl 8f  
 1100 081e 02FB01F1 	    mul r1,r2 
 1101 0822 0144     	    add r1,r0
 1102 0824 09F10109 	    add T2,#1
 1103 0828 E6E7     	    b 1b 
 1104 082a 4846     	8:  mov r0,T2  
 1105 082c BDE80403 	    pop {r2,T1,T2}
 1106 0830 7047     	    _RET 
 1107              	
 1108              	
 1109              	
 1110              	/*******************
 1111              	    DECOMPILER 
 1112              	*******************/
 1113              	
 1114              	/********************************************
 1115              	    cmd_name 
 1116              	    search bytecode in dictionary and 
 1117              	    return its name 
 1118              	  input:
 1119              	    r0    token type 
 1120              	    r1    keyword bytecode 
 1121              	  ouput:
 1122              	    r0    name string 
 1123              	  use:
 1124              	    T1    link 
 1125              	    T2    tmp 
 1126              	*********************************************/
ARM GAS  tinyBasic.s 			page 37


 1127 0832 00BF     	    _FUNC cmd_name 
 1128 0834 2DE90003 	    push {T1,T2}
 1129 0838 DFF89C89 	    ldr T1,=kword_dict 
 1130 083c 58F8049C 	1:  ldr T2,[T1,#-4]
 1131 0840 8145     	    cmp T2,r0 
 1132 0842 03D1     	    bne 3f 
 1133 0844 58F8089C 	    ldr T2,[T1,#-8]
 1134 0848 8945     	    cmp T2,r1 
 1135 084a 04D0     	    beq 2f 
 1136 084c 58F80C8C 	3:  ldr T1,[T1,#-12]
 1137 0850 B8F1000F 	    cmp T1,#0
 1138 0854 F2D1     	    bne 1b  
 1139 0856 4046     	2:  mov r0,T1 
 1140 0858 BDE80003 	    pop {T1,T2}
 1141 085c 7047     	    _RET
 1142              	
 1143              	/*****************************
 1144              	  decompile_line 
 1145              	  detokenize BASIC line 
 1146              	  input:
 1147              	    r0  *token list 
 1148              	    r1  *output buffer 
 1149              	  output:
 1150              	    r0  *output buffer (.asciz) 
 1151              	  use:
 1152              	    T1  *output buffer
 1153              	    BPTR  *token list
 1154              	    IN  offset in token list  
 1155              	******************************/
 1156 085e 00BF     	    _GBL_FUNC decompile_line
 1157 0860 2DE90E01 	    push {r1,r2,r3,T1} 
 1158 0864 8346     	    mov BPTR,r0 
 1159 0866 4FF0000A 	    mov IN,#0
 1160 086a 8846     	    mov T1,r1 
 1161 086c 3BF80A00 	    ldrh r0,[BPTR,IN]
 1162 0870 0AF1020A 	    add IN,#2 
 1163 0874 4FF00A01 	    mov r1,#10 
 1164 0878 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 0882 4146     	    mov r1,T1
 1166 0884 00B5FFF7 	    _CALL strcpy
 1166      FEFF5DF8 
 1166      04EB
 1167 088e 4046     	    mov r0,T1 
 1168 0890 00B5FFF7 	    _CALL strlen
 1168      FEFF5DF8 
 1168      04EB
 1169 089a 8044     	    add T1,r0 
 1170 089c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1171 08a0 0AF1010A 	    add IN,#1 
 1172 08a4 6060     	    str r0,[UPP,#COUNT]
 1173              	decomp_loop:
 1174 08a6 00B500F0 	    _CALL next_token
 1174      D6FA5DF8 
 1174      04EB
 1175 08b0 0028     	    cmp r0,#TK_NONE 
ARM GAS  tinyBasic.s 			page 38


 1176 08b2 00F0AD80 	    beq 9f
 1177 08b6 1028     	    cmp r0,#TK_GE 
 1178 08b8 05D5     	    bpl 1f 
 1179 08ba DFF82419 	    ldr r1,=single_char 
 1180 08be 085C     	    ldrb r0,[r1,r0]
 1181 08c0 08F8010B 	    strb r0,[T1],#1 
 1182 08c4 EFE7     	    b decomp_loop
 1183              	1: 
 1184 08c6 1328     	    cmp r0,#TK_CHAR  
 1185 08c8 14D5     	    bpl 2f 
 1186 08ca A0F11000 	    sub r0,#TK_GE
 1187 08ce 4FEA8000 	    lsl r0,#2 
 1188 08d2 DFF81019 	    ldr r1,=relop_str 
 1189 08d6 0858     	    ldr r0,[r1,r0]
 1190 08d8 4146     	    mov r1,T1 
 1191 08da 00B5FFF7 	    _CALL strcpy 
 1191      FEFF5DF8 
 1191      04EB
 1192 08e4 4046     	    mov r0,T1 
 1193 08e6 00B5FFF7 	    _CALL strlen 
 1193      FEFF5DF8 
 1193      04EB
 1194 08f0 8044     	    add T1,r0 
 1195 08f2 D8E7     	    b decomp_loop
 1196 08f4 1328     	2:  cmp r0,#TK_CHAR 
 1197 08f6 06D1     	    bne 3f 
 1198 08f8 4FF05C00 	    mov r0,#'\\'
 1199 08fc 08F8010B 	    strb r0,[T1],#1
 1200 0900 08F8011B 	    strb r1,[T1],#1
 1201              	//    mov r0,#SPACE 
 1202              	//    strb r0,[T1],#1
 1203 0904 CFE7     	    b decomp_loop 
 1204 0906 1428     	3:  cmp r0,#TK_VAR 
 1205 0908 08D1     	    bne 4f 
 1206 090a 01F14100 	    add r0,r1,'A'
 1207 090e 08F8010B 	    strb r0,[T1],#1 
 1208 0912 4FF02000 	    mov r0,#SPACE 
 1209 0916 08F8010B 	    strb r0,[T1],#1
 1210 091a C4E7     	    b decomp_loop 
 1211 091c 1A28     	4:  cmp r0,#TK_LABEL 
 1212 091e 2BD5     	    bpl 5f   
 1213 0920 03B4     	    push {r0,r1}
 1214              	//    mov r0,r1 
 1215 0922 00B5FFF7 	    _CALL cmd_name
 1215      86FF5DF8 
 1215      04EB
 1216 092c 4146     	    mov r1,T1 
 1217 092e 00B5FFF7 	    _CALL strcpy 
 1217      FEFF5DF8 
 1217      04EB
 1218 0938 4046     	    mov r0,T1 
 1219 093a 00B5FFF7 	    _CALL strlen 
 1219      FEFF5DF8 
 1219      04EB
 1220 0944 8044     	    add T1,r0
 1221 0946 03BC     	    pop {r0,r1}
 1222 0948 4FF02000 	    mov r0,#SPACE 
ARM GAS  tinyBasic.s 			page 39


 1223 094c 08F8010B 	    strb r0,[T1],#1 
 1224 0950 3D29     	    cmp r1,#REM_IDX
 1225 0952 A8D1     	    bne decomp_loop 
 1226 0954 0BEB0A00 	    add r0,BPTR,IN
 1227 0958 4146     	    mov r1,T1   
 1228 095a 00B5FFF7 	    _CALL strcpy
 1228      FEFF5DF8 
 1228      04EB
 1229 0964 4046     	    mov r0,T1 
 1230 0966 00B5FFF7 	    _CALL strlen
 1230      FEFF5DF8 
 1230      04EB
 1231 0970 8044     	    add T1,r0
 1232 0972 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1233 0976 4BE0     	    b 9f 
 1234 0978 1B28     	5:  cmp r0,#TK_INTGR
 1235 097a 14D1     	    bne 6f  
 1236 097c 0846     	    mov r0,r1 
 1237 097e A169     	    ldr r1,[UPP,#BASE]
 1238 0980 00B5FFF7 	    _CALL itoa
 1238      FEFF5DF8 
 1238      04EB
 1239 098a 4146     	    mov r1,T1 
 1240 098c 00B5FFF7 	    _CALL strcpy
 1240      FEFF5DF8 
 1240      04EB
 1241 0996 4046     	    mov r0,T1 
 1242 0998 00B5FFF7 	    _CALL strlen
 1242      FEFF5DF8 
 1242      04EB
 1243 09a2 8044     	    add T1,r0 
 1244 09a4 7FE7     	    b decomp_loop 
 1245 09a6 1A28     	6:  cmp r0,#TK_LABEL
 1246 09a8 1BD1     	    bne 7f
 1247 09aa 4FF01902 	    mov r2,#25
 1248 09ae 4FF6FF73 	    mov r3,#0xffff 
 1249 09b2 C3F6FF73 	    movt r3,#0x3fff 
 1250 09b6 01EA0301 	0:  and r1,r3 
 1251 09ba 4FEA5313 	    lsr r3,#5 
 1252 09be 31FA02F0 	    lsrs r0,r1,r2 
 1253 09c2 07D0     	    beq 2f
 1254 09c4 00F14000 	    add r0,#'@'
 1255 09c8 5B28     	    cmp r0,#'['
 1256 09ca 01D1     	    bne 1f
 1257 09cc 00F10400 	    add r0,#4 
 1258 09d0 08F8010B 	1:  strb r0,[T1],#1
 1259 09d4 053A     	2:  subs r2,#5 
 1260 09d6 EEDA     	    bge 0b
 1261 09d8 4FF02000 	    mov r0,#SPACE 
 1262 09dc 08F8010B 	    strb r0,[T1],#1  
 1263 09e0 61E7     	    b decomp_loop
 1264 09e2 4FF02200 	7:  mov r0,#'"'
 1265 09e6 08F8010B 	    strb r0,[T1],#1 
 1266 09ea 0846     	    mov r0,r1
 1267 09ec 4146     	    mov r1,T1  
 1268 09ee 00B5FFF7 	    _CALL strcpy
 1268      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 40


 1268      04EB
 1269 09f8 4046     	    mov r0,T1 
 1270 09fa 00B5FFF7 	    _CALL strlen 
 1270      FEFF5DF8 
 1270      04EB
 1271 0a04 8044     	    add T1,r0 
 1272 0a06 4FF02200 	    mov r0,#'"'
 1273 0a0a 08F8010B 	    strb r0,[T1],#1 
 1274 0a0e 4AE7     	    b decomp_loop
 1275 0a10 80EA0000 	9:  eor r0,r0 
 1276 0a14 88F80000 	    strb r0,[T1]
 1277 0a18 BDE80E01 	    pop {r1,r2,r3,T1}
 1278 0a1c 0846     	    mov r0,r1 
 1279 0a1e 7047     	    _RET 
 1280              	
 1281 0a20 2C0A0000 	relop_str: .word ge_str,le_str,ne_str 
 1281      2F0A0000 
 1281      320A0000 
 1282 0a2c 3E3D00   	ge_str: .asciz ">="
 1283 0a2f 3C3D00   	le_str: .asciz "<="
 1284 0a32 3C3E00   	ne_str: .asciz "<>"
 1285              	
 1286              	single_char:
 1287 0a35 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1287      2328292B 
 1287      2D2A2F25 
 1288 0a41 403D3E3C 	  .byte '@','=', '>', '<' 
 1289              	
 1290              	
 1291              	
 1292              	
 1293              	/**********************************
 1294              	  modulo 
 1295              	  compute r0 mod r1
 1296              	  input:
 1297              	    r0   dividend
 1298              	    r1   divisor 
 1299              	  output:
 1300              	    r0   TK_INTGR 
 1301              	    r1   r0 mod r1 
 1302              	*********************************/
 1303 0a45 0000BF   	    _GBL_FUNC modulo 
 1304 0a48 01B4     	    push {r0}
 1305 0a4a B0FBF1F0 	    udiv r0,r1 
 1306 0a4e 01FB00F0 	    mul  r0,r1 
 1307 0a52 02BC     	    pop {r1}
 1308 0a54 A1EB0001 	    sub r1,r0
 1309 0a58 4FF01B00 	    mov r0,#TK_INTGR
 1310 0a5c 7047     	    _RET 
 1311              	
 1312              	/**********************************
 1313              	      BASIC commands 
 1314              	**********************************/
 1315              	
 1316              	/*********************************
 1317              	    syntax_error 
 1318              	    display syntax error message and 
ARM GAS  tinyBasic.s 			page 41


 1319              	    abort program 
 1320              	  input:
 1321              	    none  
 1322              	  output: 
 1323              	    none 
 1324              	  use:
 1325              	*********************************/
 1326 0a5e 00BF     	    _FUNC syntax_error 
 1327 0a60 4FF00200 	    mov r0,#ERR_SYNTAX
 1328 0a64 00E0     	    b tb_error 
 1329              	
 1330              	/*********************************
 1331              	    tb_error 
 1332              	    display BASIC error and 
 1333              	    abort program. 
 1334              	  input:
 1335              	    r0    error code   
 1336              	  output: 
 1337              	    none 
 1338              	  use:
 1339              	    r1    temp 
 1340              	*********************************/
 1341 0a66 00BF     	    _FUNC tb_error 
 1342 0a68 216C     	    ldr r1,[UPP,#FLAGS]
 1343 0a6a 11F0200F 	    tst r1,#FCOMP
 1344 0a6e 43D1     	    bne compile_error
 1345              	rt_error:
 1346 0a70 5246     	    mov r2,IN 
 1347 0a72 01B4     	    push {r0}
 1348 0a74 DFF87007 	    ldr r0,=rt_error_msg 
 1349 0a78 00B5FFF7 	    _CALL uart_puts 
 1349      FEFF5DF8 
 1349      04EB
 1350 0a82 01BC     	    pop {r0}
 1351 0a84 DFF86417 	    ldr r1,=err_msg  
 1352 0a88 4FEA8000 	    lsl r0,#2 
 1353 0a8c 0858     	    ldr r0,[r1,r0]
 1354 0a8e 00B5FFF7 	    _CALL uart_puts
 1354      FEFF5DF8 
 1354      04EB
 1355              	// decompile and print faulty line      
 1356 0a98 5846     	    mov r0,BPTR
 1357 0a9a 5246     	    mov r2,IN  
 1358 0a9c DFF81413 	    ldr r1,pad 
 1359 0aa0 00B5FFF7 	    _CALL decompile_line
 1359      FEFF5DF8 
 1359      04EB
 1360 0aaa 00B5FFF7 	    _CALL uart_puts 
 1360      FEFF5DF8 
 1360      04EB
 1361 0ab4 00B5FFF7 	    _CALL cr 
 1361      FEFF5DF8 
 1361      04EB
 1362              	// print error offset on line      
 1363 0abe DFF83007 	    ldr r0,=token_at_msg 
 1364 0ac2 00B5FFF7 	    _CALL uart_puts 
 1364      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 42


 1364      04EB
 1365 0acc 1046     	    mov r0,r2 
 1366 0ace 4FF01001 	    mov r1,#16 
 1367 0ad2 00B5FFF7 	    _CALL print_int
 1367      FEFF5DF8 
 1367      04EB
 1368 0adc 00B5FFF7 	    _CALL cr
 1368      FEFF5DF8 
 1368      04EB
 1369              	// dump tokenize line 
 1370 0ae6 5846     	    mov r0,BPTR
 1371 0ae8 8278     	    ldrb r2,[r0,#2]
 1372 0aea 00B500F0 	    _CALL dump01 
 1372      1BFA5DF8 
 1372      04EB
 1373 0af4 FFF7FEBF 	    b warm_start 
 1374              	compile_error:
 1375 0af8 DFF8F016 	    ldr r1,=err_msg 
 1376 0afc 4FEA8000 	    lsl r0,#2 
 1377 0b00 0858     	    ldr r0,[r1,r0]
 1378 0b02 00B5FFF7 	    _CALL uart_puts
 1378      FEFF5DF8 
 1378      04EB
 1379 0b0c A068     	    ldr r0,[UPP,#BASICPTR]
 1380 0b0e 00B5FFF7 	    _CALL uart_puts
 1380      FEFF5DF8 
 1380      04EB
 1381 0b18 00B5FFF7 	    _CALL cr
 1381      FEFF5DF8 
 1381      04EB
 1382 0b22 2068     	    ldr r0,[UPP,#IN_SAVED]
 1383 0b24 00B5FFF7 	    _CALL spaces 
 1383      FEFF5DF8 
 1383      04EB
 1384 0b2e 4FF05E00 	    mov r0,#'^' 
 1385 0b32 00B5FFF7 	    _CALL uart_putc
 1385      FEFF5DF8 
 1385      04EB
 1386 0b3c 00B5FFF7 	    _CALL cr
 1386      FEFF5DF8 
 1386      04EB
 1387 0b46 FFF7FEBF 	    b  warm_start  
 1388              	    
 1389 0b4a 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1389      74696D65 
 1389      20657272 
 1389      6F723A20 
 1389      00
 1390 0b5b 746F6B65 	token_at_msg: .asciz "token offset: "
 1390      6E206F66 
 1390      66736574 
 1390      3A2000
 1391              	
 1392              	
 1393              	err_msg:
 1394 0b6a 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1394      00000000 
ARM GAS  tinyBasic.s 			page 43


 1394      0D000000 
 1394      1B000000 
 1394      34000000 
 1395 0b82 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1395      6F000000 
 1395      89000000 
 1395      9A000000 
 1395      AB000000 
 1396 0b96 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1396      EA000000 
 1396      FA000000 
 1396      0E010000 
 1396      21010000 
 1397 0baa 2E010000 	   .word err_cant_prog 
 1398              	
 1399              	    .section .rodata.tb_error 
 1400              	
 1401 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1401      72792066 
 1401      756C6C0A 
 1401      00
 1402 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1402      61782065 
 1402      72726F72 
 1402      0A00
 1403 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1403      206F7065 
 1403      72617469 
 1403      6F6E206F 
 1403      76657266 
 1404 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1404      73696F6E 
 1404      20627920 
 1404      300A00
 1405 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1405      6C696420 
 1405      6C696E65 
 1405      206E756D 
 1405      6265722E 
 1406 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1406      74696D65 
 1406      206F6E6C 
 1406      79207573 
 1406      6167652E 
 1407 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1407      616E6420 
 1407      6C696E65 
 1407      206F6E6C 
 1407      79207573 
 1408 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1408      69636174 
 1408      65206E61 
 1408      6D652E0A 
 1408      00
 1409 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1409      206E6F74 
 1409      20666F75 
ARM GAS  tinyBasic.s 			page 44


 1409      6E642E0A 
 1409      00
 1410 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1410      76616C75 
 1410      652E0A00 
 1411 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1411      20696E20 
 1411      65787465 
 1411      6E646564 
 1411      206D656D 
 1412 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1412      61746120 
 1412      666F756E 
 1412      642E0A00 
 1413 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1413      726F6772 
 1413      616D2069 
 1413      6E205241 
 1413      4D210A00 
 1414 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1414      20737973 
 1414      74656D20 
 1414      66756C6C 
 1414      2E0A00
 1415 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1415      65722066 
 1415      756C6C0A 
 1415      00
 1416 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1416      74206D6F 
 1416      64696679 
 1416      2070726F 
 1416      6772616D 
 1417              	
 1418 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1418      2074696D 
 1418      65206572 
 1418      726F722C 
 1418      2000
 1419 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1419      70696C65 
 1419      20657272 
 1419      6F722C20 
 1419      00
 1420 018d 6C617374 	tk_id: .asciz "last token id: "
 1420      20746F6B 
 1420      656E2069 
 1420      643A2000 
 1421              	
 1422              	
 1423              	    .section  .text , "ax", %progbits 
 1424              	
 1425              	/*********************************
 1426              	   skip_line 
 1427              	   data and remark line are skipped
 1428              	   by the interpreter 
 1429              	***********************************/
ARM GAS  tinyBasic.s 			page 45


 1430 0bae 00BF     	    _FUNC skip_line 
 1431 0bb0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1432 0bb4 7047     	    _RET 
 1433              	
 1434              	
 1435              	/*********************************
 1436              	   BASIC: BTGL adr, mask   
 1437              	   toggle bits [adr]=[adr]^mask  
 1438              	   input:
 1439              	     r0    adr 
 1440              	     r1    mask 
 1441              	    output;
 1442              	      none 
 1443              	    use:
 1444              	      T1   temp
 1445              	      T2   temp  
 1446              	*******************************/     
 1447 0bb6 00BF     	    _FUNC BTGL 
 1448              	
 1449 0bb8 7047     	    _RET 
 1450              	
 1451              	/***************************************
 1452              	   kword_cmp
 1453              	   compare keyword to dict entry
 1454              	  input:
 1455              	    r0  keyword 
 1456              	    r1  dict entry 
 1457              	    r2  character count 
 1458              	  output:
 1459              	    r0  0 not same | -1 same 
 1460              	  use:
 1461              	    r6   result  
 1462              	    T1   char 1
 1463              	    T2   char 2
 1464              	**************************************/   
 1465 0bba 00BF     	    _FUNC kword_cmp 
 1466 0bbc 2DE94003 	    push {r6,T1,T2}
 1467 0bc0 4FF0FF36 	    mov r6,#-1 
 1468 0bc4 4AB1     	1:  cbz r2,9f       
 1469 0bc6 10F8018B 	    ldrb T1,[r0],#1
 1470 0bca 11F8019B 	    ldrb T2,[r1],#1
 1471 0bce A2F10102 	    sub r2,#1
 1472 0bd2 C845     	    cmp T1,T2
 1473 0bd4 F6D0     	    beq 1b 
 1474 0bd6 86EA0606 	    eor r6,r6  
 1475 0bda 3046     	9:  mov r0,r6
 1476 0bdc BDE84003 	    pop {r6,T1,T2}
 1477 0be0 7047     	    _RET 
 1478              	
 1479              	/***********************************************
 1480              	    search_dict 
 1481              	    search keyword in dictionary
 1482              	   input:
 1483              	  	 r0   keyword 
 1484              	     r1		dictionary first name field address  
 1485              	   output:
 1486              	     r0 		token attribute 
ARM GAS  tinyBasic.s 			page 46


 1487              	     r1		  cmd_index if r0!=TK_NONE  
 1488              	   use:
 1489              	     r3   length keyword 
 1490              	     T1   keyword
 1491              	     T2   link  
 1492              	**********************************************/
 1493 0be2 00BF     	  _FUNC search_dict
 1494 0be4 2DE90C03 	  push {r2,r3,T1,T2}
 1495 0be8 8046     	  mov T1,r0 
 1496 0bea 00B5FFF7 	  _CALL strlen 
 1496      FEFF5DF8 
 1496      04EB
 1497 0bf4 0346     	  mov r3,r0  
 1498              	1:  
 1499 0bf6 8946     	   mov T2,r1  // keep for linking   
 1500 0bf8 0878     	   ldrb r0,[r1] 
 1501 0bfa 78B1     	   cbz r0,9f // null byte, end of dictionary
 1502 0bfc 4046     	   mov r0,T1
 1503 0bfe 1A46     	   mov r2,r3   
 1504 0c00 00B5FFF7 	   _CALL kword_cmp  
 1504      DBFF5DF8 
 1504      04EB
 1505 0c0a 18B9     	   cbnz r0,2f 
 1506 0c0c 4946     	   mov r1,T2
 1507 0c0e 51F80C1C 	   ldr r1,[r1,#-12]
 1508 0c12 F0E7     	   b 1b   
 1509              	2: // found
 1510 0c14 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1511 0c18 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1512 0c1c BDE80C03 	9: pop {r2,r3,T1,T2}
 1513 0c20 7047     	   _RET 
 1514              	
 1515              	
 1516              	/**************************
 1517              	    INTERPRETER 
 1518              	*************************/
 1519              	
 1520              	/*********************************
 1521              	   cold_start 
 1522              	   initialize BASIC interpreter 
 1523              	   never leave 
 1524              	   input:
 1525              	     none 
 1526              	   output:
 1527              	    none 
 1528              	*********************************/
 1529              	  .type cold_start, %function 
 1530              	  .global cold_start 
 1531              	cold_start: 
 1532 0c22 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1532      C2F20004 
 1533 0c2a DFF85E00 	    ldr r0,src_addr 
 1534 0c2e DFF85E10 	    ldr r1,dest_addr
 1535 0c32 0968     	    ldr r1,[r1] 
 1536 0c34 0C44     	    add UPP,r1 // system variables base address   
 1537              	// clear RAM
 1538 0c36 2046     	    mov r0,UPP  
ARM GAS  tinyBasic.s 			page 47


 1539 0c38 DFF87411 	    ldr r1,tib 
 1540 0c3c 82EA0202 	    eor r2,r2 
 1541 0c40 40F8042B 	1:  str r2,[r0],#4 
 1542 0c44 8842     	    cmp r0,r1 
 1543 0c46 FBD4     	    bmi 1b 
 1544              	//copy initialized system variables to ram 
 1545 0c48 DFF83E00 	    ldr r0,src_addr 
 1546 0c4c 2146     	    mov r1,UPP 
 1547 0c4e DFF84220 	    ldr r2,sysvar_size
 1548 0c52 00B5FFF7 	    _CALL cmove
 1548      FEFF5DF8 
 1548      04EB
 1549 0c5c 00B500F0 	    _CALL prt_version
 1549      1BF85DF8 
 1549      04EB
 1550 0c66 00B500F0 	    _CALL clear_basic 
 1550      68F85DF8 
 1550      04EB
 1551 0c70 00B5FFF7 	    _CALL search_free 
 1551      FEFF5DF8 
 1551      04EB
 1552 0c7a E062     	    str r0,[UPP,#FSFREE]
 1553 0c7c 00B5FFF7 	    _CALL exec_autorun  
 1553      FEFF5DF8 
 1553      04EB
 1554 0c86 FFF7FEBF 	    b warm_start    
 1555              	src_addr:
 1556 0c8a 00000000 	  .word uzero
 1557              	dest_addr:
 1558 0c8e 00000000 	  .word vectors_size
 1559 0c92 E4000000 	sysvar_size: .word ulast-uzero 
 1560              	
 1561              	/************************************
 1562              	    print firmware version 
 1563              	    input: 
 1564              	      none 
 1565              	    output:
 1566              	      none 
 1567              	    use:
 1568              	      r0 
 1569              	***********************************/
 1570 0c96 00BF     	    _FUNC prt_version 
 1571 0c98 DFF85805 	    ldr r0,=version_msg 
 1572 0c9c 00B5FFF7 	    _CALL uart_puts
 1572      FEFF5DF8 
 1572      04EB
 1573 0ca6 9FF87400 	    ldrb r0,version 
 1574 0caa 4FEA1010 	    lsr r0,#4 
 1575 0cae 00F13000 	    add r0,#'0' 
 1576 0cb2 3A28     	    cmp r0,#'9'+1 
 1577 0cb4 01D4     	    bmi 1f 
 1578 0cb6 00F10700 	    add r0,#7 
 1579              	  1:
 1580 0cba 00B5FFF7 	    _CALL uart_putc 
 1580      FEFF5DF8 
 1580      04EB
 1581 0cc4 4FF02E00 	    mov r0,#'. 
ARM GAS  tinyBasic.s 			page 48


 1582 0cc8 00B5FFF7 	    _CALL uart_putc 
 1582      FEFF5DF8 
 1582      04EB
 1583 0cd2 9FF84800 	    ldrb r0,version 
 1584 0cd6 00F00F00 	    and r0,#15 
 1585 0cda 00F13000 	    add r0,'0' 
 1586 0cde 3A28     	    cmp r0,#'9'+1 
 1587 0ce0 01D4     	    bmi 1f 
 1588 0ce2 00F10700 	    add r0,#7
 1589              	  1: 
 1590 0ce6 00B5FFF7 	    _CALL uart_putc 
 1590      FEFF5DF8 
 1590      04EB
 1591 0cf0 00B5FFF7 	    _CALL cr
 1591      FEFF5DF8 
 1591      04EB
 1592 0cfa 7047     	    _RET  
 1593              	version_msg:
 1594 0cfc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1594      65207069 
 1594      6C6C2074 
 1594      696E7920 
 1594      42415349 
 1595              	version:
 1596 0d1c 10       	    .byte 0x10 
 1597 0d1d 0000BF   	    .p2align 2 
 1598              	
 1599              	
 1600              	/*****************************
 1601              	    clear_vars 
 1602              	    initialize variables to 0
 1603              	  input:
 1604              	    none 
 1605              	  output:
 1606              	    none 
 1607              	  use:
 1608              	    r0,r1,r2 
 1609              	*****************************/
 1610              	    _FUNC clear_vars 
 1611 0d20 07B4     	    push {r0,r1,r2}
 1612 0d22 80EA0000 	    eor r0,r0 
 1613 0d26 04F17001 	    add r1,UPP,#VARS
 1614 0d2a 4FF01A02 	    mov r2,#26
 1615 0d2e 41F8040B 	1:  str r0,[r1],#4 
 1616 0d32 013A     	    subs r2,#1
 1617 0d34 FBD1     	    bne 1b  
 1618 0d36 07BC     	    pop {r0,r1,r2}
 1619 0d38 7047     	    _RET 
 1620              	
 1621              	/*****************************
 1622              	   clear_basic 
 1623              	   reset BASIC system variables 
 1624              	   and clear variables and RAM 
 1625              	*****************************/
 1626 0d3a 00BF     	    _FUNC clear_basic
 1627 0d3c 80EA0000 	  	eor r0,r0
 1628 0d40 2064     	    str r0,[UPP,#FLAGS] 
ARM GAS  tinyBasic.s 			page 49


 1629 0d42 6060     	    str r0,[UPP,#COUNT]
 1630 0d44 2060     	    str r0,[UPP,#IN_SAVED]
 1631 0d46 A060     	    str r0,[UPP,#BASICPTR]
 1632 0d48 E060     	    str r0,[UPP,#DATAPTR]
 1633 0d4a 2061     	    str r0,[UPP,#DATA]
 1634 0d4c 6061     	    str r0,[UPP,#DATALEN]
 1635 0d4e 04F1E000 	    add r0,UPP,#BASIC_START 
 1636 0d52 00F11000 	    add r0,#16 
 1637 0d56 6FF00F01 	    mvn r1,#15
 1638 0d5a 00EA0100 	    and r0,r1 
 1639 0d5e 2063     	    str r0,[UPP,#TXTBGN]
 1640 0d60 6063     	    str r0,[UPP,#TXTEND]
 1641 0d62 C4F8E000 	    str r0,[UPP,#HERE]
 1642 0d66 00B5FFF7 	    _CALL clear_vars
 1642      DAFF5DF8 
 1642      04EB
 1643 0d70 206B     	    ldr r0,[UPP,#TXTBGN]
 1644 0d72 DFF83C10 	    ldr r1,tib 
 1645 0d76 82EA0202 	    eor r2,r2 
 1646 0d7a 40F8042B 	1:  str r2,[r0],#4
 1647 0d7e 8842     	    cmp r0,r1 
 1648 0d80 FBD4     	    bmi 1b 
 1649 0d82 7047     	    _RET  
 1650              	
 1651              	/***********************************
 1652              	   warm_init 
 1653              	   initialize interpreter context 
 1654              	  input:
 1655              	    none
 1656              	  output:
 1657              	    none 
 1658              	  use:
 1659              	    r0 
 1660              	***********************************/
 1661              	warm_init:
 1662              	// reset data stack       
 1663 0d84 DFF824C0 	    ldr DP,dstack 
 1664 0d88 4FF0000A 	    mov IN,#0 // BASIC line index 
 1665 0d8c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1666 0d90 80EA0000 	    eor r0,r0 
 1667 0d94 6060     	    str r0,[UPP,#COUNT]  
 1668 0d96 2064     	    str r0,[UPP,#FLAGS]
 1669 0d98 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1670 0d9a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1671 0d9e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1672 0da0 4FF00A00 	    mov r0,#10 // default base decimal 
 1673 0da4 A061     	    str r0,[UPP,#BASE]
 1674 0da6 7047     	    _RET  
 1675              	
 1676 0da8 00000000 	mstack: .word _mstack 
 1677 0dac 00000000 	dstack: .word _dstack 
 1678 0db0 00000000 	tib: .word _tib 
 1679 0db4 00000000 	pad: .word _pad 
 1680 0db8 FCFFFFFF 	array: .word _pad - 4 
 1681 0dbc 0A524541 	ready: .asciz "\nREADY" 
 1681      445900
 1682              	
ARM GAS  tinyBasic.s 			page 50


 1683              	/**********************************
 1684              	    warm_start 
 1685              	    start BASIC interpreter doesn't  
 1686              	    reset variables and code space 
 1687              	  input:
 1688              	    none 
 1689              	  output:
 1690              	    none 
 1691              	**********************************/
 1692 0dc3 00       	    _GBL_FUNC warm_start 
 1693              	// initialise parameters stack
 1694 0dc4 FFF7DEFF 	    bl warm_init
 1695              	// reset main stack 
 1696 0dc8 5FF82400 	    ldr r0,mstack
 1697 0dcc 8546     	    mov sp,r0 
 1698 0dce DFF82804 	    ldr r0,=ready 
 1699 0dd2 00B5FFF7 	    _CALL uart_puts 
 1699      FEFF5DF8 
 1699      04EB
 1700              	// fall in cmd_line 
 1701              	
 1702              	/**********************************
 1703              	   cmd_line 
 1704              	   shell command line 
 1705              	   input:
 1706              	      none 
 1707              	   output:
 1708              	      none 
 1709              	   use:
 1710              	
 1711              	***********************************/
 1712              	    _FUNC cmd_line 
 1713 0ddc 00B5FFF7 	    _CALL cr
 1713      FEFF5DF8 
 1713      04EB
 1714 0de6 80EA0000 	    eor r0,r0 
 1715 0dea C4F8DC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1716 0dee 5FF84000 	1:  ldr r0,tib
 1717 0df2 4FF05001 	    mov r1,#TIB_SIZE 
 1718 0df6 00B5FFF7 	    _CALL readln 
 1718      FEFF5DF8 
 1718      04EB
 1719 0e00 0940     	    ands r1,r1 // empty line 
 1720 0e02 F4D0     	    beq 1b 
 1721 0e04 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1721      D7FA5DF8 
 1721      04EB
 1722 0e0e EED0     	    beq 1b  // tokens stored in text area 
 1723              	// interpret tokenized line 
 1724              	interpreter:
 1725 0e10 00B500F0 	  _CALL next_token 
 1725      21F85DF8 
 1725      04EB
 1726 0e1a 0228     	  cmp r0,#2
 1727 0e1c F8D4     	  bmi interpreter    
 1728 0e1e 1A28     	  cmp r0,#TK_LABEL 
 1729 0e20 F6D0     	  beq interpreter 
ARM GAS  tinyBasic.s 			page 51


 1730 0e22 1728     	  cmp r0,#TK_CMD 
 1731 0e24 03D1     	  bne 2f
 1732 0e26 0846     	  mov r0,r1 
 1733 0e28 00F012F8 	  bl execute  
 1734 0e2c F0E7     	  b interpreter   
 1735              	2: 
 1736 0e2e 1428     	  cmp r0,#TK_VAR 
 1737 0e30 05D1     	  bne 3f 
 1738 0e32 00B500F0 	  _CALL let_var 
 1738      BDFB5DF8 
 1738      04EB
 1739 0e3c E8E7     	  b interpreter 
 1740              	3: 
 1741 0e3e 0C28     	  cmp r0,#TK_ARRAY 
 1742 0e40 05D1     	  bne 4f
 1743 0e42 00B500F0 	  _CALL let_array 
 1743      C3FB5DF8 
 1743      04EB
 1744 0e4c E0E7     	  b interpreter
 1745              	4: 
 1746 0e4e 07E6     	  b syntax_error
 1747              	
 1748              	/*****************************
 1749              	    execute 
 1750              	    execute a BASIC routine from 
 1751              	    its token value 
 1752              	  input:
 1753              	    r0  BASIC SUB|FUNC token  
 1754              	  output: 
 1755              	    depend on SUB|FUNc
 1756              	*****************************/
 1757              	    _FUNC execute 
 1758 0e50 EA49     	    ldr r1,=fn_table 
 1759 0e52 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1760 0e56 0047     	    bx r0 
 1761              	
 1762              	/*************************************
 1763              	  next_token 
 1764              	  extract next token from token list 
 1765              	  input:
 1766              	    none 
 1767              	  output:
 1768              	    r0    token attribute
 1769              	    r1    token value if there is one 
 1770              	  use:
 1771              	    T1    exit token type  
 1772              	****************************/
 1773              	    _FUNC next_token 
 1774 0e58 6068     	    ldr r0,[UPP,#COUNT]
 1775 0e5a 8245     	    cmp IN,r0 
 1776 0e5c 11D4     	    bmi 0f
 1777              	// reached end of line skip to next one 
 1778 0e5e 8344     	    add BPTR,r0 // next line 
 1779 0e60 606B     	    ldr r0,[UPP,#TXTEND]
 1780 0e62 8345     	    cmp BPTR,r0 
 1781 0e64 7FF5FEAF 	    bpl warm_start // end of program
 1782 0e68 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
ARM GAS  tinyBasic.s 			page 52


 1783 0e6c 6060     	    str r0,[UPP,#COUNT] 
 1784 0e6e 4FF0030A 	    mov IN,#3
 1785 0e72 00B5FFF7 	    _CALL show_trace
 1785      BAF95DF8 
 1785      04EB
 1786 0e7c 80EA0000 	    eor r0,r0
 1787 0e80 7047     	    _RET 
 1788              	0: 
 1789 0e82 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1790 0e86 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1791 0e8a 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1792 0e8e 0AF1010A 	    add IN,#1  
 1793 0e92 1328     	    cmp r0,#TK_CHAR 
 1794 0e94 1AD4     	    bmi 9f // these tokens have no value  
 1795 0e96 1828     	    cmp r0,#TK_SCONST 
 1796 0e98 04D5     	    bpl 1f
 1797              	    // tokens with .byte value 
 1798 0e9a 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1799 0e9e 0AF1010A 	    add IN,#1 
 1800 0ea2 7047     	    _RET  
 1801 0ea4 1C28     	1:  cmp r0,#TK_QSTR 
 1802 0ea6 0DD1     	    bne 2f 
 1803 0ea8 0BEB0A01 	    add r1,BPTR,IN
 1804 0eac 0846     	    mov r0,r1 
 1805 0eae 00B5FFF7 	    _CALL strlen 
 1805      FEFF5DF8 
 1805      04EB
 1806 0eb8 8244     	    add IN,r0 
 1807 0eba 0AF1010A 	    add IN,#1
 1808 0ebe 4FF01C00 	    mov r0,#TK_QSTR 
 1809 0ec2 7047     	    _RET  
 1810              	2:  // .word value 
 1811 0ec4 5BF80A10 	    ldr r1,[BPTR,IN] 
 1812 0ec8 0AF1040A 	    add IN,#4 
 1813 0ecc 7047     	9:  _RET
 1814              	
 1815              	
 1816              	/*********************************
 1817              	    expect 
 1818              	    check if next token is of 
 1819              	    expected type. If not 
 1820              	    call syntax_error  
 1821              	  input:
 1822              	      r0   token attribute
 1823              	  output:
 1824              	      r0  token attribute 
 1825              	      r1  token value
 1826              	  use:
 1827              	      T1   
 1828              	**********************************/
 1829 0ece 00BF     	    _FUNC expect 
 1830 0ed0 4DF8048D 	    push {T1}
 1831 0ed4 8046     	    mov T1,r0 
 1832 0ed6 00B5FFF7 	    _CALL next_token 
 1832      BEFF5DF8 
 1832      04EB
 1833 0ee0 4045     	    cmp r0,T1  
ARM GAS  tinyBasic.s 			page 53


 1834 0ee2 7FF4BDAD 	    bne syntax_error 
 1835 0ee6 5DF8048B 	    pop {T1}
 1836 0eea 7047     	    _RET 
 1837              	
 1838              	/***********************************
 1839              	    func_args 
 1840              	    get function arguments list 
 1841              	  input:
 1842              	    r0    required arguments count  
 1843              	  output:
 1844              	    r0    arg. count 
 1845              	  use:
 1846              	
 1847              	************************************/
 1848              	    _FUNC func_args 
 1849 0eec 0346     	    mov r3,r0 
 1850 0eee 4FF00500 	    mov r0,#TK_LPAREN 
 1851 0ef2 00B5FFF7 	    _CALL expect
 1851      ECFF5DF8 
 1851      04EB
 1852 0efc 1846     	    mov r0,r3  
 1853 0efe 00B500F0 	    _CALL arg_list 
 1853      0CF85DF8 
 1853      04EB
 1854 0f08 01B4     	    push {r0}
 1855 0f0a 4FF00600 	    mov r0,#TK_RPAREN 
 1856 0f0e 00B5FFF7 	    _CALL expect 
 1856      DEFF5DF8 
 1856      04EB
 1857 0f18 01BC     	    pop {r0}
 1858 0f1a 7047     	    _RET 
 1859              	
 1860              	/**********************************
 1861              	    arg_list 
 1862              	    get arguments list on dstack 
 1863              	  input:
 1864              	    r0  required arguments count  
 1865              	  output:
 1866              	    r0    arg count
 1867              	  use:
 1868              	    T1    tmp count  
 1869              	***********************************/
 1870              	    _FUNC arg_list 
 1871 0f1c 4DF8048D 	    push {T1}
 1872 0f20 88EA0808 	    eor T1,T1
 1873 0f24 0346     	    mov r3,r0 // required count  
 1874 0f26 00B500F0 	1:  _CALL expression 
 1874      C0F85DF8 
 1874      04EB
 1875 0f30 1B28     	    cmp R0,#TK_INTGR  
 1876 0f32 0AD1     	    bne 2f
 1877 0f34 4CF8041D 	    _PUSH r1 
 1878 0f38 08F10108 	    add T1,#1 
 1879 0f3c 00B5FFF7 	    _CALL next_token 
 1879      8BFF5DF8 
 1879      04EB
 1880 0f46 0228     	    cmp r0,#TK_COMMA 
ARM GAS  tinyBasic.s 			page 54


 1881 0f48 EDD0     	    beq 1b 
 1882 0f4a D4F800A0 	2:  _UNGET_TOKEN 
 1882      D4F808B0 
 1883 0f52 4046     	9:  mov r0,T1
 1884 0f54 9842     	    cmp r0,r3 
 1885 0f56 3FF583AD 	    bmi syntax_error 
 1886 0f5a 5DF8048B 	    pop {T1}
 1887 0f5e 7047     	    _RET 
 1888              	
 1889              	
 1890              	/***********************************
 1891              	 factor
 1892              	 arithmetick factor parser 
 1893              	 factor ::= ['+'|'-'|e]  var | @ |
 1894              				 integer | function |
 1895              				 '('expression')' 
 1896              	  input: 
 1897              	    none
 1898              	  output:
 1899              	    r0   token attribute 
 1900              	    r1   token value 
 1901              	  use:
 1902              	    r2   temp 
 1903              	    r3   sign 
 1904              	***********************************/
 1905              	    _FUNC factor 
 1906 0f60 0CB4     	    push {r2,r3}
 1907 0f62 00B5FFF7 	    _CALL next_token
 1907      78FF5DF8 
 1907      04EB
 1908 0f6c 4FF00103 	    mov r3,#1 // default sign +  
 1909 0f70 0828     	    cmp r0,#TK_MINUS  
 1910 0f72 06D1     	    bne 1f 
 1911 0f74 4FF0FF33 	    mov r3,#-1 // minus sign 
 1912 0f78 00B5FFF7 	0:  _CALL next_token
 1912      6DFF5DF8 
 1912      04EB
 1913 0f82 1B28     	1:  cmp r0,#TK_INTGR 
 1914 0f84 55D0     	    beq 8f 
 1915 0f86 0C28     	    cmp r0,#TK_ARRAY 
 1916 0f88 1DD1     	    bne 2f 
 1917 0f8a 4FF00500 	    mov r0,#TK_LPAREN 
 1918 0f8e 00B5FFF7 	    _CALL expect 
 1918      9EFF5DF8 
 1918      04EB
 1919 0f98 00B500F0 	    _CALL expression
 1919      87F85DF8 
 1919      04EB
 1920 0fa2 1B28     	    cmp r0,#TK_INTGR
 1921 0fa4 7FF45CAD 	    bne syntax_error
 1922 0fa8 0A46     	    mov r2,r1  
 1923 0faa 4FF00600 	    mov r0,#TK_RPAREN
 1924 0fae 00B5FFF7 	    _CALL expect 
 1924      8EFF5DF8 
 1924      04EB
 1925 0fb8 1046     	    mov r0,r2 
 1926 0fba 00B500F0 	    _CALL get_array_element 
ARM GAS  tinyBasic.s 			page 55


 1926      E2F85DF8 
 1926      04EB
 1927 0fc4 35E0     	    b 8f
 1928 0fc6 0528     	2:  cmp r0,#TK_LPAREN 
 1929 0fc8 13D1     	    bne 3f 
 1930 0fca 00B500F0 	    _CALL expression 
 1930      6EF85DF8 
 1930      04EB
 1931 0fd4 1B28     	    cmp r0,#TK_INTGR 
 1932 0fd6 7FF443AD 	    bne syntax_error
 1933 0fda 0A46     	    mov r2,r1   
 1934 0fdc 4FF00600 	    mov r0,#TK_RPAREN
 1935 0fe0 00B5FFF7 	    _CALL expect 
 1935      75FF5DF8 
 1935      04EB
 1936 0fea 1146     	    mov r1,r2 
 1937 0fec 4FF01B00 	    mov r0,#TK_INTGR
 1938 0ff0 1FE0     	    b 8f       
 1939 0ff2 1428     	3:  cmp r0,#TK_VAR 
 1940 0ff4 06D1     	    bne 4f
 1941 0ff6 0846     	    mov r0,r1  
 1942 0ff8 00B500F0 	    _CALL get_var 
 1942      D7F85DF8 
 1942      04EB
 1943 1002 16E0     	    b 8f 
 1944 1004 1528     	4:  cmp r0,#TK_IFUNC 
 1945 1006 06D1     	    bne 6f 
 1946 1008 0846     	5:  mov r0,r1  
 1947 100a 00B5FFF7 	    _CALL execute
 1947      20FF5DF8 
 1947      04EB
 1948 1014 0DE0     	    b 8f 
 1949 1016 1A28     	6:  cmp r0,#TK_LABEL
 1950 1018 07D1     	    bne 7f 
 1951 101a 41F00040 	    orr r0,r1,#(1<<31) 
 1952 101e 00B5FFF7 	    _CALL search_const
 1952      3CF95DF8 
 1952      04EB
 1953 1028 03E0     	    b 8f 
 1954 102a 1828     	7:  cmp r0,#TK_SCONST 
 1955 102c 03D1     	    bne 9f 
 1956 102e 4FF01B00 	    mov r0,#TK_INTGR
 1957 1032 03FB01F1 	8:  mul r1,r3 
 1958 1036 0CBC     	9:  pop {r2,r3}   
 1959 1038 7047     	    _RET 
 1960              	
 1961              	
 1962              	/*****************************************
 1963              	    term 
 1964              	    term parser 
 1965              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1966              	    output:
 1967              	      r0  	token attribute 
 1968              	      r1		integer
 1969              	    use:
 1970              	      r2    first factor 
 1971              	      r3    operator *|/|%
ARM GAS  tinyBasic.s 			page 56


 1972              	******************************************/
 1973 103a 00BF     	    _FUNC term 
 1974 103c 00B5FFF7 	    _CALL factor
 1974      8FFF5DF8 
 1974      04EB
 1975 1046 1B28     	    cmp r0,#TK_INTGR
 1976 1048 00D0     	    beq 0f 
 1977 104a 7047     	    _RET // not a factor    
 1978 104c 0CB4     	0:  push {r2,r3}
 1979 104e 0A46     	    mov r2,r1 // first factor    
 1980 1050 00B5FFF7 	0:  _CALL next_token
 1980      01FF5DF8 
 1980      04EB
 1981 105a 0346     	    mov r3,r0  // operator 
 1982 105c 0928     	    cmp r0,TK_MULT
 1983 105e 01D4     	    bmi 1f 
 1984 1060 0C28     	    cmp r0,#TK_MOD+1
 1985 1062 06D4     	    bmi 2f
 1986 1064 D4F800A0 	1:  _UNGET_TOKEN
 1986      D4F808B0 
 1987 106c 4FF01B00 	    mov r0,#TK_INTGR
 1988 1070 19E0     	    b 9f 
 1989 1072 00B5FFF7 	2:  _CALL factor
 1989      74FF5DF8 
 1989      04EB
 1990 107c 1B28     	    cmp r0,#TK_INTGR
 1991 107e 7FF4EFAC 	    bne syntax_error 
 1992 1082 092B     	    cmp r3,#TK_MULT
 1993 1084 02D1     	    bne 3f 
 1994              	// multiplication
 1995 1086 01FB02F2 	    mul r2,r1
 1996 108a E1E7     	    b 0b  
 1997 108c 0A2B     	3:  cmp r3,#TK_DIV 
 1998 108e 02D1     	    bne 4f
 1999              	// division
 2000 1090 92FBF1F2 	    sdiv r2,r2,r1
 2001 1094 DCE7     	    b 0b  
 2002              	4: // modulo
 2003 1096 1046     	    mov r0,r2 
 2004 1098 92FBF1F2 	    sdiv r2,r2,r1 
 2005 109c 01FB02F2 	    mul  r2,r1 
 2006 10a0 A0EB0202 	    sub  r2,r0,r2
 2007 10a4 D4E7     	    b 0b  
 2008 10a6 1146     	9:  mov r1,r2 
 2009 10a8 0CBC     	    pop {r2,r3}
 2010 10aa 7047     	    _RET 
 2011              	
 2012              	/*****************************************
 2013              	    expression 
 2014              	    arithmetic expression parser 
 2015              	    expression ::= term [['+'|'-'] term]*
 2016              	    result range {-32768..32767}
 2017              	    output:
 2018              	      r0    TK_NONE || TK_INTGR 
 2019              	      r1 	  integer
 2020              	    use:
 2021              	      r2  left term 
ARM GAS  tinyBasic.s 			page 57


 2022              	      r3  operator +|-
 2023              	******************************************/
 2024              	    _FUNC expression 
 2025 10ac 00B5FFF7 	    _CALL term 
 2025      C5FF5DF8 
 2025      04EB
 2026 10b6 1B28     	    cmp r0,#TK_INTGR 
 2027 10b8 00D0     	    beq 0f 
 2028 10ba 7047     	    _RET   
 2029 10bc 0CB4     	0:  push {r2,r3}
 2030 10be 0A46     	    mov r2,r1 // first term
 2031 10c0 00B5FFF7 	1:  _CALL next_token 
 2031      C9FE5DF8 
 2031      04EB
 2032 10ca 0346     	    mov r3,r0 //  +|-
 2033 10cc 0728     	    cmp r0,#TK_PLUS 
 2034 10ce 08D0     	    beq 3f 
 2035 10d0 0828     	    cmp r0,#TK_MINUS  
 2036 10d2 06D0     	    beq 3f
 2037 10d4 D4F800A0 	    _UNGET_TOKEN 
 2037      D4F808B0 
 2038 10dc 4FF01B00 	    mov r0,#TK_INTGR
 2039 10e0 0EE0     	    b 9f 
 2040 10e2 00B5FFF7 	3:  _CALL term 
 2040      AAFF5DF8 
 2040      04EB
 2041 10ec 1B28     	    cmp r0,#TK_INTGR 
 2042 10ee 7FF4B7AC 	    bne syntax_error 
 2043 10f2 072B     	    cmp r3,#TK_PLUS 
 2044 10f4 02D0     	    beq 4f 
 2045 10f6 A2EB0102 	    sub r2,r1 // term1-term2  
 2046 10fa E1E7     	    b 1b 
 2047 10fc 0A44     	4:  add r2,r1 // term1+term2
 2048 10fe DFE7     	    b 1b
 2049 1100 1146     	9:  mov r1,r2 
 2050 1102 0CBC     	    pop {r2,r3}
 2051 1104 7047     	    _RET 
 2052              	
 2053              	
 2054              	/**********************************************
 2055              	    relation
 2056              	    rel ::= expr1 rel_op expr2
 2057              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2058              	    relation return  integer , zero is false 
 2059              	    output:
 2060              	        r0	TK_INTGR  
 2061              	        r1	integer 
 2062              	    use:
 2063              	        r2   first operand 
 2064              	        r3   relop   
 2065              	**********************************************/
 2066 1106 00BF     	    _FUNC relation 
 2067 1108 0CB4     	    push {r2,r3}
 2068 110a 00B5FFF7 	    _CALL expression 
 2068      CEFF5DF8 
 2068      04EB
 2069 1114 1B28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 58


 2070 1116 7FF4A3AC 	    bne syntax_error 
 2071 111a 0A46     	    mov r2,r1  // first operand  
 2072 111c 00B5FFF7 	    _CALL next_token 
 2072      9BFE5DF8 
 2072      04EB
 2073 1126 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2074 112a 0D28     	    cmp r0,#TK_EQUAL 
 2075 112c 1DD4     	    bmi 8f 
 2076 112e 1328     	    cmp r0,#TK_NE+1
 2077 1130 1BD5     	    bpl 8f 
 2078 1132 00B5FFF7 	    _CALL expression 
 2078      BAFF5DF8 
 2078      04EB
 2079 113c 1B28     	    cmp r0,#TK_INTGR 
 2080 113e 7FF48FAC 	    bne syntax_error 
 2081 1142 8A42     	    cmp r2,r1 // compare operands  
 2082 1144 4FF0FF31 	    mov r1,#-1 
 2083 1148 2D4A     	    ldr r2,=relop_jmp
 2084 114a D2E803F0 	    tbb [r2,r3]    
 2085              	rel_idx0:
 2086              	rel_eq:
 2087 114e 11D0     	    beq 9f 
 2088 1150 08E0     	    b rel_false
 2089              	rel_gt:
 2090 1152 0FDC     	    bgt 9f  
 2091 1154 06E0     	    b rel_false  
 2092              	rel_ge:
 2093 1156 0DDA     	    bge 9f  
 2094 1158 04E0     	    b rel_false  
 2095              	rel_lt: 
 2096 115a 0BDB     	    blt 9f   
 2097 115c 02E0     	    b rel_false 
 2098              	rel_le:
 2099 115e 09DD     	    ble 9f  
 2100 1160 00E0     	    b rel_false 
 2101              	rel_ne:
 2102 1162 07D1     	    bne 9f 
 2103              	rel_false:    
 2104 1164 81EA0101 	    eor r1,r1  // false
 2105 1168 04E0     	    b 9f  
 2106 116a D4F800A0 	8:  _UNGET_TOKEN 
 2106      D4F808B0 
 2107 1172 1146     	    mov r1,r2    
 2108 1174 4FF01B00 	9:  mov r0,#TK_INTGR
 2109 1178 0CBC     	    pop {r2,r3}
 2110 117a 7047     	    _RET 
 2111              	
 2112              	
 2113              	relop_jmp: 
 2114 117c 00       	  .byte 0 // =  
 2115 117d 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2116 117e 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2117 117f 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2118 1180 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2119 1181 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2120              	
 2121              	
ARM GAS  tinyBasic.s 			page 59


 2122              	/***********************************
 2123              	    get_array_element
 2124              	    return value of @(n)
 2125              	  input:
 2126              	    r0    indice 
 2127              	  output:
 2128              	    r0   TK_INTGR
 2129              	    r1   value  
 2130              	************************************/
 2131 1182 00BF     	    _FUNC get_array_element 
 2132 1184 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 2133 1188 4FEA8000 	    lsl r0,#2 
 2134 118c C0EB0100 	    rsb r0,r1 
 2135 1190 0168     	    ldr r1,[r0]
 2136 1192 4FF01B00 	    mov r0,#TK_INTGR 
 2137 1196 7047     	    _RET 
 2138              	
 2139              	
 2140              	/***********************************
 2141              	    set_array_element 
 2142              	    set value of array element 
 2143              	  input:
 2144              	    r0   index 
 2145              	    r1   new value 
 2146              	  output:
 2147              	    none
 2148              	  use:
 2149              	    r2    array pointer 
 2150              	**********************************/
 2151              	    _FUNC set_array_element 
 2152 1198 04B4     	    push {r2}
 2153 119a D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 2154 119e 4FEA8000 	    lsl r0,#2 
 2155 11a2 A1EB0001 	    sub r1,r0 
 2156 11a6 0960     	    str r1,[r1]
 2157 11a8 04BC     	    pop {r2}
 2158 11aa 7047     	    _RET 
 2159              	
 2160              	/***********************************
 2161              	   get_var 
 2162              	   get variable value 
 2163              	  input:
 2164              	     r0    variable index {0..25}
 2165              	  output:
 2166              	     r0    TK_INTGR
 2167              	     r1    value 
 2168              	**********************************/
 2169              	    _FUNC get_var 
 2170 11ac 04F17001 	    add r1,UPP,#VARS
 2171 11b0 4FEA8000 	    lsl r0,#2 
 2172 11b4 0958     	    ldr r1,[r1,r0]
 2173 11b6 4FF01B00 	    mov r0,#TK_INTGR
 2174 11ba 7047     	    _RET 
 2175              	
 2176              	/*********************************
 2177              	    set_var 
 2178              	    set variable value 
ARM GAS  tinyBasic.s 			page 60


 2179              	  input:
 2180              	     r0    variable index {0..25}
 2181              	     r1    new value 
 2182              	  output:
 2183              	    none 
 2184              	  use:
 2185              	    r2   vars pointer 
 2186              	*********************************/
 2187              	    _FUNC set_var 
 2188 11bc 04B4     	    push {r2}
 2189 11be 04F17002 	    add r2,UPP,#VARS
 2190 11c2 4FEA8000 	    lsl r0,#2
 2191 11c6 1150     	    str r1,[r2,r0]
 2192 11c8 04BC     	    pop {r2}
 2193 11ca 7047     	    _RET 
 2194              	
 2195              	/******************************
 2196              	    CONSTANTS data
 2197              	******************************/
 2198              	
 2199              	  .section .rodata 
 2200              	
 2201              	// system variables initial value 
 2202              	uzero:
 2203 0000 00000000 	  .word 0 // IN_SAVED
 2204 0004 00000000 	  .word 0 // COUNT
 2205 0008 00000000 	  .word 0 // BASICPTR
 2206 000c 00000000 	  .word 0 // DATAPTR
 2207 0010 00000000 	  .word 0 // DATA
 2208 0014 00000000 	  .word 0 // DATALEN
 2209 0018 0A000000 	  .word 10 // BASE
 2210 001c 00000000 	  .word 0 // TICKS
 2211 0020 00000000 	  .word 0 // TIMER
 2212 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2213 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2214 002c 00000000 	  .word 0 // FSFREE
 2215 0030 00000000 	  .word 0 // TXTBGN
 2216 0034 00000000 	  .word 0 // TXTEND
 2217 0038 00000000 	  .word 0 //LOOP_DEPTH
 2218 003c 00000000 	  .word 0 // ARRAY_SIZE
 2219 0040 00000000 	  .word 0 // FLAGS
 2220 0044 04000000 	  .word 4 // TAB_WIDTH
 2221 0048 00000000 	  .word 0 // RX_HEAD
 2222 004c 00000000 	  .word 0 // RX_TAIL
 2223 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2224 0060 00000000 	  .word 0 // U2_RX_QUEUE 
 2225 0064 00000000 	  .word 0 // U2_COUNT 
 2226 0068 00000000 	  .word 0 // U3_RX_QUEUE
 2227 006c 00000000 	  .word 0 // U3_COUNT  
 2228 0070 00000000 	  .space VARS_SIZE,0 // VARS
 2228      00000000 
 2228      00000000 
 2228      00000000 
 2228      00000000 
ARM GAS  tinyBasic.s 			page 61


 2229 00d8 00000000 	  .word _pad  // ARRAY_ADR 
 2230 00dc 00000000 	  .word 0 // TRACE_LEVEL 
 2231 00e0 00000000 	  .word 0 // HERE 
 2232              	ulast:
 2233              	
 2234              	  .section .rodata.dictionary 
 2235              	
 2236              	// keep alphabetic order for BASIC names from Z-A
 2237              	// this sort order is for for WORDS cmd output. 	
 2238              	  .type kword_end, %object
 2239              		.equ link, 0
 2240              	kword_end:
 2241 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2241      00000000 
 2241      00000000 
 2241      00000000 
 2242 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2242      64000000 
 2242      15000000 
 2242      59504F53 
 2242      00000000 
 2243 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2243      63000000 
 2243      15000000 
 2243      58504F53 
 2243      00000000 
 2244 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2244      62000000 
 2244      15000000 
 2244      584F5200 
 2245 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2245      61000000 
 2245      17000000 
 2245      574F5244 
 2245      53000000 
 2246 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2246      60000000 
 2246      17000000 
 2246      57414954 
 2246      00000000 
 2247 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2247      5F000000 
 2247      17000000 
 2247      554E5449 
 2247      4C000000 
 2248 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2248      5E000000 
 2248      15000000 
 2248      55464C41 
 2248      53480000 
 2249 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2249      5D000000 
 2249      15000000 
 2249      55424F55 
 2249      4E440000 
 2250 00ac A4000000 	  _dict_entry TK_CMD,UART_PUTC,UART_PUTC_IDX // ser_putc 
 2250      5C000000 
ARM GAS  tinyBasic.s 			page 62


 2250      17000000 
 2250      55415254 
 2250      5F505554 
 2251 00c4 B8000000 	  _dict_entry TK_CMD,UART_INIT,UART_INIT_IDX // ser_init
 2251      5B000000 
 2251      17000000 
 2251      55415254 
 2251      5F494E49 
 2252 00dc D0000000 	  _dict_entry TK_IFUNC,UART_GETC,UART_GETC_IDX //ser_getc
 2252      5A000000 
 2252      15000000 
 2252      55415254 
 2252      5F474554 
 2253 00f4 E8000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2253      59000000 
 2253      17000000 
 2253      54524143 
 2253      45000000 
 2254 0108 00010000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2254      58000000 
 2254      17000000 
 2254      544F4E45 
 2254      5F494E49 
 2255 0120 14010000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2255      57000000 
 2255      17000000 
 2255      544F4E45 
 2255      00000000 
 2256 0134 2C010000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2256      56000000 
 2256      17000000 
 2256      544F0000 
 2257 0144 40010000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2257      54000000 
 2257      17000000 
 2257      54494D45 
 2257      52000000 
 2258 0158 50010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2258      55000000 
 2258      15000000 
 2258      54494D45 
 2258      4F555400 
 2259 016c 64010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2259      53000000 
 2259      15000000 
 2259      5449434B 
 2259      53000000 
 2260 0180 78010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2260      52000000 
 2260      17000000 
 2260      5448454E 
 2260      00000000 
 2261 0194 8C010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2261      51000000 
 2261      17000000 
 2261      54414200 
 2262 01a4 A0010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
ARM GAS  tinyBasic.s 			page 63


 2262      50000000 
 2262      17000000 
 2262      53544F52 
 2262      45000000 
 2263 01b8 B0010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2263      4F000000 
 2263      17000000 
 2263      53544F50 
 2263      00000000 
 2264 01cc C4010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2264      4E000000 
 2264      17000000 
 2264      53544550 
 2264      00000000 
 2265 01e0 D8010000 	  _dict_entry TK_CMD,SPI_WRITE,SPI_WRITE_IDX // spi_write 
 2265      4D000000 
 2265      17000000 
 2265      5350495F 
 2265      57524954 
 2266 01f8 EC010000 	  _dict_entry TK_CMD,SPI_SEL,SPI_SELECT_IDX // spi_select
 2266      4C000000 
 2266      17000000 
 2266      5350495F 
 2266      53454C00 
 2267 020c 04020000 	  _dict_entry TK_IFUNC,SPI_READ,SPI_READ_IDX // spi_read
 2267      4B000000 
 2267      15000000 
 2267      5350495F 
 2267      52454144 
 2268 0224 18020000 	  _dict_entry TK_CMD,SPI_INIT,SPI_INIT_IDX // spi_init 
 2268      4A000000 
 2268      17000000 
 2268      5350495F 
 2268      494E4954 
 2269 023c 30020000 	  _dict_entry TK_CMD,SPI_DSEL,SPI_DSEL_IDX // spi_deselect 
 2269      49000000 
 2269      17000000 
 2269      5350495F 
 2269      4453454C 
 2270 0254 48020000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2270      48000000 
 2270      17000000 
 2270      53504300 
 2271 0264 60020000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2271      47000000 
 2271      17000000 
 2271      534C4545 
 2271      50000000 
 2272 0278 70020000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2272      46000000 
 2272      17000000 
 2272      53455256 
 2272      4F5F504F 
 2273 0290 84020000 	  _dict_entry TK_CMD,SERVO_OFF,SERVO_OFF_IDX, // servo_off 
 2273      45000000 
 2273      17000000 
 2273      53455256 
ARM GAS  tinyBasic.s 			page 64


 2273      4F5F4F46 
 2274 02a8 9C020000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2274      44000000 
 2274      17000000 
 2274      53455256 
 2274      4F5F494E 
 2275 02c0 B4020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2275      43000000 
 2275      17000000 
 2275      53415645 
 2275      00000000 
 2276 02d4 CC020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2276      42000000 
 2276      17000000 
 2276      52554E00 
 2277 02e4 E0020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2277      41000000 
 2277      15000000 
 2277      52534849 
 2277      46540000 
 2278 02f8 F0020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2278      40000000 
 2278      15000000 
 2278      524E4400 
 2279 0308 04030000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2279      3F000000 
 2279      17000000 
 2279      52455455 
 2279      524E0000 
 2280 031c 14030000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2280      3E000000 
 2280      17000000 
 2280      52455354 
 2280      4F524500 
 2281 0330 28030000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2281      3D000000 
 2281      17000000 
 2281      52454D00 
 2282 0340 3C030000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2282      3C000000 
 2282      15000000 
 2282      52454144 
 2282      00000000 
 2283 0354 4C030000 	  _dict_entry TK_CMD,RANDOMIZE,RANDOMIZE_IDX // randomize 
 2283      3B000000 
 2283      17000000 
 2283      52414E44 
 2283      4F4D495A 
 2284 036c 60030000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2284      3A000000 
 2284      15000000 
 2284      514B4559 
 2284      00000000 
 2285 0380 78030000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2285      39000000 
 2285      17000000 
 2285      50555400 
ARM GAS  tinyBasic.s 			page 65


 2286 0390 8C030000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2286      38000000 
 2286      17000000 
 2286      50555348 
 2286      00000000 
 2287 03a4 9C030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2287      37000000 
 2287      17000000 
 2287      5052494E 
 2287      54000000 
 2288 03b8 B0030000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2288      36000000 
 2288      15000000 
 2288      504F5000 
 2289 03c8 C4030000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2289      35000000 
 2289      17000000 
 2289      504F4B45 
 2289      57000000 
 2290 03dc D4030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2290      34000000 
 2290      17000000 
 2290      504F4B45 
 2290      48000000 
 2291 03f0 E8030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2291      33000000 
 2291      17000000 
 2291      504F4B45 
 2291      42000000 
 2292 0404 FC030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2292      2F000000 
 2292      17000000 
 2292      504D4F44 
 2292      45000000 
 2293 0418 10040000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2293      32000000 
 2293      15000000 
 2293      5045454B 
 2293      57000000 
 2294 042c 24040000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2294      31000000 
 2294      15000000 
 2294      5045454B 
 2294      48000000 
 2295 0440 38040000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2295      30000000 
 2295      15000000 
 2295      5045454B 
 2295      42000000 
 2296 0454 4C040000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2296      2E000000 
 2296      17000000 
 2296      50415553 
 2296      45000000 
 2297 0468 60040000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2297      2D000000 
 2297      15000000 
ARM GAS  tinyBasic.s 			page 66


 2297      50414400 
 2298 0478 74040000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2298      01000000 
 2298      18000000 
 2298      4F555450 
 2298      55545F50 
 2299 0490 84040000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2299      06000000 
 2299      18000000 
 2299      4F555450 
 2299      55545F4F 
 2300 04a8 9C040000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2300      0A000000 
 2300      18000000 
 2300      4F555450 
 2300      55545F41 
 2301 04c0 B4040000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2301      0E000000 
 2301      18000000 
 2301      4F555450 
 2301      55545F41 
 2302 04d8 CC040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2302      2C000000 
 2302      17000000 
 2302      4F555400 
 2303 04e8 E4040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2303      2B000000 
 2303      15000000 
 2303      4F520000 
 2304 04f8 F4040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2304      2A000000 
 2304      15000000 
 2304      4E4F5400 
 2305 0508 04050000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2305      29000000 
 2305      17000000 
 2305      4E455854 
 2305      00000000 
 2306 051c 14050000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2306      28000000 
 2306      17000000 
 2306      4E455700 
 2307 052c 28050000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2307      27000000 
 2307      15000000 
 2307      4C534849 
 2307      46540000 
 2308 0540 38050000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2308      26000000 
 2308      17000000 
 2308      4C4F4341 
 2308      54450000 
 2309 0554 4C050000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2309      25000000 
 2309      17000000 
 2309      4C4F4144 
 2309      00000000 
ARM GAS  tinyBasic.s 			page 67


 2310 0568 60050000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2310      24000000 
 2310      17000000 
 2310      4C495354 
 2310      00000000 
 2311 057c 74050000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2311      23000000 
 2311      17000000 
 2311      4C455400 
 2312 058c 88050000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2312      22000000 
 2312      16000000 
 2312      4B455900 
 2313 059c 98050000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2313      21000000 
 2313      15000000 
 2313      494E5645 
 2313      52540000 
 2314 05b0 A8050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2314      11000000 
 2314      18000000 
 2314      494E5055 
 2314      545F5055 
 2315 05c8 BC050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2315      10000000 
 2315      18000000 
 2315      494E5055 
 2315      545F5044 
 2316 05e0 D4050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2316      04000000 
 2316      18000000 
 2316      494E5055 
 2316      545F464C 
 2317 05f8 EC050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2317      00000000 
 2317      18000000 
 2317      494E5055 
 2317      545F414E 
 2318 0610 04060000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2318      20000000 
 2318      17000000 
 2318      494E5055 
 2318      54000000 
 2319 0624 1C060000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2319      1F000000 
 2319      15000000 
 2319      494E0000 
 2320 0634 30060000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2320      1E000000 
 2320      17000000 
 2320      49460000 
 2321 0644 40060000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2321      1D000000 
 2321      17000000 
 2321      48455800 
 2322 0654 50060000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2322      00100140 
ARM GAS  tinyBasic.s 			page 68


 2322      18000000 
 2322      4750494F 
 2322      43000000 
 2323 0668 60060000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2323      000C0140 
 2323      18000000 
 2323      4750494F 
 2323      42000000 
 2324 067c 74060000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2324      00080140 
 2324      18000000 
 2324      4750494F 
 2324      41000000 
 2325 0690 88060000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2325      1C000000 
 2325      17000000 
 2325      474F544F 
 2325      00000000 
 2326 06a4 9C060000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2326      1B000000 
 2326      17000000 
 2326      474F5355 
 2326      42000000 
 2327 06b8 B0060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2327      1A000000 
 2327      15000000 
 2327      47455400 
 2328 06c8 C4060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2328      19000000 
 2328      15000000 
 2328      46524545 
 2328      00000000 
 2329 06dc D4060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2329      18000000 
 2329      17000000 
 2329      464F5247 
 2329      45540000 
 2330 06f0 E8060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2330      17000000 
 2330      17000000 
 2330      464F5200 
 2331 0700 FC060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2331      16000000 
 2331      17000000 
 2331      45524153 
 2331      45000000 
 2332 0714 0C070000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2332      15000000 
 2332      17000000 
 2332      454E4400 
 2333 0724 20070000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2333      14000000 
 2333      17000000 
 2333      44554D50 
 2333      00000000 
 2334 0738 30070000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2334      13000000 
ARM GAS  tinyBasic.s 			page 69


 2334      17000000 
 2334      44524F50 
 2334      00000000 
 2335 074c 44070000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2335      12000000 
 2335      17000000 
 2335      444F0000 
 2336 075c 58070000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2336      11000000 
 2336      17000000 
 2336      44495200 
 2337 076c 68070000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2337      10000000 
 2337      17000000 
 2337      44454300 
 2338 077c 78070000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2338      0F000000 
 2338      17000000 
 2338      44415441 
 2338      00000000 
 2339 0790 88070000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2339      0E000000 
 2339      17000000 
 2339      434F4E53 
 2339      54000000 
 2340 07a4 9C070000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2340      0D000000 
 2340      17000000 
 2340      434C5300 
 2341 07b4 B0070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2341      0C000000 
 2341      16000000 
 2341      43484152 
 2341      00000000 
 2342 07c8 C0070000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2342      0B000000 
 2342      17000000 
 2342      42544F47 
 2342      4C000000 
 2343 07dc D4070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2343      0A000000 
 2343      15000000 
 2343      42544553 
 2343      54000000 
 2344 07f0 E8070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2344      09000000 
 2344      17000000 
 2344      42534554 
 2344      00000000 
 2345 0804 FC070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2345      08000000 
 2345      17000000 
 2345      42524553 
 2345      00000000 
 2346 0818 10080000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2346      07000000 
 2346      15000000 
ARM GAS  tinyBasic.s 			page 70


 2346      42495400 
 2347 0828 24080000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2347      06000000 
 2347      17000000 
 2347      41575500 
 2348 0838 34080000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX // autorun 
 2348      05000000 
 2348      17000000 
 2348      4155544F 
 2348      52554E00 
 2349 084c 44080000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2349      04000000 
 2349      15000000 
 2349      41534300 
 2350 085c 58080000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2350      03000000 
 2350      15000000 
 2350      414E4400 
 2351 086c 68080000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2351      02000000 
 2351      17000000 
 2351      41444300 
 2352 087c 78080000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2352      01000000 
 2352      15000000 
 2352      414E4100 
 2353              	first_link: 
 2354 088c 88080000 	  .word LINK 
 2355 0890 00000000 	  .word ABS_IDX 
 2356 0894 15000000 	  .word TK_IFUNC
 2357              	kword_dict: // first name field 
 2358              	  .equ LINK,. 
 2359 0898 41425300 	  .asciz "ABS" 
 2360              	  .p2align 2 
 2361              	
 2362              	    .section .rodata.fn_tabld 
 2363              	
 2364              	//comands and fonctions address table
 2365              	  .type fn_table, %object
 2366              	fn_table:
 2367 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,autorun,awu,bitmask 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2368 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2369 003c 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370 0054 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2370      00000000 
ARM GAS  tinyBasic.s 			page 71


 2370      00000000 
 2370      00000000 
 2370      00000000 
 2371 0074 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2372 008c 00000000 		.word let,list,load,locate,lshift,new,next
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2373 00a8 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2374 00cc 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2374      00000000 
 2375 00e8 00000000 		.word qkey,randomize,read,skip_line
 2375      00000000 
 2375      00000000 
 2375      00000000 
 2376 00f8 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_off,servo_pos 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2376      00000000 
 2377 011c 00000000 		.word sleep,spc,spi_deselect,spi_init,spi_read,spi_select,spi_write,step,stop,store,tab
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2377      00000000 
 2378 0148 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace
 2378      00000000 
 2378      00000000 
 2378      00000000 
 2378      00000000 
 2379 0168 00000000 	  .word ser_getc,ser_init,ser_putc,ubound,uflash,until
 2379      00000000 
 2379      00000000 
 2379      00000000 
 2379      00000000 
 2380 0180 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2380      00000000 
 2380      00000000 
 2380      00000000 
 2380      00000000 
 2381 0194 00000000 		.word 0 
 2382              	
 2383              	
 2384              	/**********************************
 2385              	    BASIC commands and functions 
ARM GAS  tinyBasic.s 			page 72


 2386              	**********************************/
 2387              	
 2388              	    .section .text.basic , "ax", %progbits 
 2389              	
 2390              	
 2391              	/*******************************
 2392              	  BASIC:  ABS expr 
 2393              	  input:
 2394              	    none 
 2395              	  output:
 2396              	    r0    token type 
 2397              	    r1    abs(expr)
 2398              	  use:
 2399              	    none 
 2400              	******************************/
 2401              	    _FUNC abs 
 2402 0000 4FF00100 	    mov r0,#1
 2403 0004 00B5FFF7 	    _CALL arg_list
 2403      FEFF5DF8 
 2403      04EB
 2404 000e 5CF8041B 	    _POP r1 
 2405 0012 11F0004F 	    tst r1,#(1<<31)
 2406 0016 01D0     	    beq 9f
 2407 0018 C1F10001 	    rsb r1,#0 
 2408 001c 4FF01B00 	9:  mov r0,#TK_INTGR
 2409 0020 7047     	   _RET 
 2410              	
 2411              	/*************************************
 2412              	  BASIC: ANA(pin)
 2413              	  read analog input 
 2414              	*************************************/
 2415 0022 00BF     	    _FUNC analog_read
 2416 0024 4FF00100 	    mov r0,#1
 2417 0028 00B5FFF7 	    _CALL func_args
 2417      FEFF5DF8 
 2417      04EB
 2418 0032 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2418      C4F20101 
 2419 003a 5CF8042B 	    _POP r2 // channel
 2420 003e 02F01F02 	    and r2,#31
 2421 0042 4A63     	    str r2,[r1,#ADC_SQR3]
 2422              	// start conversion 
 2423 0044 8868     	    ldr r0,[r1,#ADC_CR2]
 2424 0046 8860     	    str r0,[r1,#ADC_CR2]
 2425              	adc_loop:
 2426 0048 0868     	    ldr r0,[R1,#ADC_SR]
 2427 004a 10F0020F 	    tst r0,#2 // EOC bit test 
 2428 004e FBD0     	    beq adc_loop
 2429 0050 C96C     	    ldr r1,[r1,#ADC_DR]
 2430 0052 4FF01B00 	    mov r0,#TK_INTGR    
 2431 0056 7047     	    _RET
 2432              	
 2433              	/***********************************
 2434              	  BASIC: ADC 1|0
 2435              	  enable|disable analog digital converter 
 2436              	  freq -> of conversion
 2437              	*****************************************/
ARM GAS  tinyBasic.s 			page 73


 2438              	    _FUNC adc 
 2439 0058 4FF00100 	    mov r0,#1
 2440 005c 00B5FFF7 	    _CALL arg_list 
 2440      FEFF5DF8 
 2440      04EB
 2441 0066 5CF8041B 	    _POP r1 
 2442 006a E9B1     	1:  cbz r1,adc_off 
 2443              	adc_on:
 2444 006c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2444      C4F20201 
 2445 0074 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2446 0076 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2447 007a 8861     	    str r0,[r1,#RCC_APB2ENR]
 2448 007c 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2448      C4F20101 
 2449 0084 4FF00100 	    _MOV32 r0,1+(1<<23)
 2449      C0F28100 
 2450 008c 8860     	    str r0,[r1,#ADC_CR2]
 2451 008e 42F21070 	    mov r0,#10000
 2452 0092 0138     	1:  subs r0,#1
 2453 0094 FDD1     	    bne 1b 
 2454              	    // calibration
 2455 0096 8868     	    ldr r0,[r1,#ADC_CR2]  
 2456 0098 40F00400 	    orr r0,#(1<<2) // CAL bit 
 2457 009c 8860     	    str r0,[r1,#ADC_CR2]
 2458 009e 8868     	1:  ldr r0,[r1,#ADC_CR2]
 2459 00a0 10F0040F 	    tst r0,#(1<<2)
 2460 00a4 FBD1     	    bne 1b     
 2461 00a6 7047     	    _RET 
 2462              	adc_off:
 2463 00a8 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2463      C4F20101 
 2464 00b0 80EA0000 	    eor r0,r0 
 2465 00b4 8860     	    str r0,[r1,#ADC_CR2]
 2466 00b6 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2466      C4F20201 
 2467 00be 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2468 00c0 6FF00902 	    mvn r2,#9 
 2469 00c4 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2470 00c8 8861     	    str r0,[r1,#RCC_APB2ENR]
 2471 00ca 7047     	    _RET 
 2472              	
 2473              	
 2474              	/************************************
 2475              	  BASIC: AND(expr1,expr2)
 2476              	  logical ANND bit to between expr1,expr2
 2477              	************************************/
 2478              	    _FUNC bit_and
 2479 00cc 4FF00200 	    mov r0,#2 
 2480 00d0 00B5FFF7 	    _CALL func_args 
 2480      FEFF5DF8 
 2480      04EB
 2481 00da 5CF8040B 	    _POP r0 
 2482 00de 5CF8041B 	    _POP r1 
 2483 00e2 01EA0001 	    and r1,r0 
 2484 00e6 4FF01B00 	    mov r0,#TK_INTGR
 2485 00ea 7047     	    _RET
ARM GAS  tinyBasic.s 			page 74


 2486              	
 2487              	/*******************************************
 2488              	  BASIC: ASC(string|char)
 2489              	  return ASCII code of char of first char 
 2490              	  of string 
 2491              	*******************************************/
 2492              	    _FUNC ascii
 2493 00ec 4FF00500 	    mov r0,#TK_LPAREN 
 2494 00f0 00B5FFF7 	    _CALL expect 
 2494      FEFF5DF8 
 2494      04EB
 2495 00fa 00B5FFF7 	    _CALL next_token 
 2495      FEFF5DF8 
 2495      04EB
 2496 0104 1C28     	    cmp r0,#TK_QSTR
 2497 0106 0AD0     	    beq 2f 
 2498 0108 1328     	    cmp r0,#TK_CHAR 
 2499 010a 00D1     	    bne 1f  
 2500 010c 08E0     	    b 9f
 2501 010e 1628     	1:  cmp r0,#TK_CFUNC 
 2502 0110 0846     	    mov r0,r1 
 2503 0112 00B5FFF7 	    _CALL execute
 2503      FEFF5DF8 
 2503      04EB
 2504 011c 00E0     	    b 9f      
 2505 011e 0978     	2:  ldrb r1,[r1]
 2506 0120 4CF8041D 	9:  _PUSH r1 
 2507 0124 4FF00600 	    mov r0,#TK_RPAREN 
 2508 0128 00B5FFF7 	    _CALL expect 
 2508      FEFF5DF8 
 2508      04EB
 2509 0132 4FF01B00 	    mov r0,#TK_INTGR 
 2510 0136 5CF8041B 	    _POP r1 
 2511 013a 7047     	    _RET
 2512              	
 2513              	/*******************************************
 2514              	  BASIC: AWU time_sleep  
 2515              	  enable LSI and IWDG and place MCU in 
 2516              	  deep sleep. IDWG wakeup MCU 
 2517              	******************************************/
 2518              	    _FUNC awu
 2519 013c 4FF00100 	    mov r0,#1
 2520 0140 00B5FFF7 	    _CALL arg_list
 2520      FEFF5DF8 
 2520      04EB
 2521 014a 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2521      C4F20201 
 2522 0152 486A     	    ldr r0,[r1,#RCC_CSR]
 2523              	// enable LSI 
 2524 0154 80F00100 	    eor r0,#1
 2525 0158 4862     	    str r0,[r1,#RCC_CSR]
 2526              	// wait for LSIRDY 
 2527 015a 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2528 015c 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2529 0160 FBD0     	    beq 1b 
 2530              	// configure IWDG
 2531              	// compute values for IWDG_PR and IWDG_RLR 
ARM GAS  tinyBasic.s 			page 75


 2532 0162 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2533 0166 4FF00A03 	    mov r3,#10
 2534 016a 03FB02F2 	    mul r2,r3 // milliseconds adjustment
 2535 016e 4FF6FF73 	    _MOV32 r3,0x3ffff 
 2535      C0F20303 
 2536 0176 02EA0302 	    and r2,r3 // r2 limit=0x3ffff
 2537 017a 83EA0303 	    eor r3,r3
 2538 017e B2F5805F 	2:  cmp r2,#4096 
 2539 0182 04D4     	    bmi 3f 
 2540 0184 4FEA5202 	    lsr r2,#1 
 2541 0188 03F10103 	    add r3,#1
 2542 018c F7E7     	    b 2b
 2543              	// initialize IWDG      
 2544 018e 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2544      C4F20001 
 2545 0196 45F25550 	    mov r0,0x5555 // enable register writing
 2546 019a 0860     	    str r0,[r1,#IWDG_KR]
 2547 019c 4B60     	    str r3,[r1,#IWDG_PR]
 2548 019e 8A60     	    str r2,[r1,#IWDG_RLR]
 2549 01a0 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2550 01a4 0860     	    str r0,[r1,#IWDG_KR]
 2551 01a6 01F0E5B8 	    b sleep // place MCU in deep sleep
 2552 01aa 7047     	    _RET
 2553              	
 2554              	/********************************************
 2555              	  BASIC: BIT(expr)
 2556              	  expr must be between 0..31 and is used 
 2557              	  to create 1 bit mask at that position
 2558              	*******************************************/
 2559              	    _FUNC bitmask
 2560 01ac 4FF00100 	    mov r0,#1
 2561 01b0 00B5FFF7 	    _CALL func_args
 2561      FEFF5DF8 
 2561      04EB
 2562 01ba 5CF8040B 	    _POP r0
 2563 01be 4FF00101 	    mov r1,#1
 2564 01c2 01FA00F1 	    lsl r1,r0 
 2565 01c6 4FF01B00 	9:  mov r0,#TK_INTGR
 2566 01ca 7047     	    _RET 
 2567              	
 2568              	  
 2569              	  /*********************************
 2570              	   BASIC: BRES adr, mask   
 2571              	   reset bits [adr]= [adr] & ~mask  
 2572              	   input:
 2573              	     none 
 2574              	    output;
 2575              	      none 
 2576              	    use:
 2577              	      T1   temp
 2578              	      T2   temp 
 2579              	*******************************/     
 2580              	    _FUNC bit_reset
 2581 01cc 4FF00200 	    mov r0,#2
 2582 01d0 00B5FFF7 	    _CALL arg_list 
 2582      FEFF5DF8 
 2582      04EB
ARM GAS  tinyBasic.s 			page 76


 2583 01da 5CF8041B 	    _POP r1 //mask 
 2584 01de 5CF8040B 	    _POP r0 //address 
 2585 01e2 D0F80090 	    ldr T2,[r0] 
 2586 01e6 81F0FF31 	    eor r1,#-1 // ~mask 
 2587 01ea 01EA0901 	    and r1,T2
 2588 01ee 0160     	    str r1,[r0]
 2589 01f0 7047     	    _RET  
 2590              	
 2591              	
 2592              	/*********************************
 2593              	   BASIC: BSET adr, mask   
 2594              	   reset bits [adr]= [adr] & ~mask  
 2595              	   input:
 2596              	      none 
 2597              	    output;
 2598              	      none 
 2599              	    use:
 2600              	      T1   temp
 2601              	      T2   temp  
 2602              	*******************************/     
 2603 01f2 00BF     	    _FUNC bit_set
 2604 01f4 4FF00200 	    mov r0,#2
 2605 01f8 00B5FFF7 	    _CALL arg_list 
 2605      FEFF5DF8 
 2605      04EB
 2606 0202 5CF8041B 	    _POP r1 //mask 
 2607 0206 5CF8040B 	    _POP r0 //address 
 2608 020a D0F80090 	    ldr T2,[r0] 
 2609 020e 41EA0901 	    orr r1,T2
 2610 0212 0160     	    str r1,[r0]
 2611 0214 7047     	    _RET 
 2612              	
 2613              	  /*********************************
 2614              	   BASIC: BTOGL adr, mask   
 2615              	   reset bits [adr]= [adr] & ~mask  
 2616              	   input:
 2617              	     r0    adr 
 2618              	     r1    mask 
 2619              	    output;
 2620              	      none 
 2621              	    use:
 2622              	      T1   temp
 2623              	      T2   temp  
 2624              	*******************************/     
 2625 0216 00BF     	    _FUNC bit_toggle
 2626 0218 4FF00200 	    mov r0,#2
 2627 021c 00B5FFF7 	    _CALL arg_list 
 2627      FEFF5DF8 
 2627      04EB
 2628 0226 5CF8041B 	    _POP r1 //mask 
 2629 022a 5CF8040B 	    _POP r0 //address 
 2630 022e D0F80090 	    ldr T2,[r0] 
 2631 0232 81EA0901 	    eor r1,T2
 2632 0236 0160     	    str r1,[r0]
 2633 0238 7047     	    _RET  
 2634              	
 2635              	/********************************
ARM GAS  tinyBasic.s 			page 77


 2636              	  BASIC: BTEST(addr,bit)
 2637              	  return bit state at address
 2638              	********************************/
 2639 023a 00BF     	    _FUNC bit_test
 2640 023c 4FF00200 	    mov r0,#2 
 2641 0240 00B5FFF7 	    _CALL func_args
 2641      FEFF5DF8 
 2641      04EB
 2642 024a 5CF8041B 	    _POP r1
 2643 024e 4FF00100 	    mov r0,#1
 2644 0252 01F01F01 	    and r1,#31  
 2645 0256 21B1     	1:  cbz r1, 2f
 2646 0258 4FEA4000 	    lsl r0,#1
 2647 025c A1F10101 	    sub r1,#1
 2648 0260 F9E7     	    b 1b 
 2649 0262 5CF8041B 	2:  _POP r1
 2650 0266 0968     	    ldr r1,[r1]
 2651 0268 01EA0001 	    and r1,r0 
 2652 026c 09B1     	    cbz r1,9f 
 2653 026e 4FF00101 	    mov r1,#1
 2654 0272 4FF01B00 	9:  mov r0,#TK_INTGR    
 2655 0276 7047     	    _RET 
 2656              	
 2657              	/********************************
 2658              	  BASIC: CLS 
 2659              	  clear terminal screen move cursor 
 2660              	  home 
 2661              	************************************/
 2662              	    _FUNC cls 
 2663 0278 00B5FFF7 	    _CALL clear_screen
 2663      FEFF5DF8 
 2663      04EB
 2664 0282 7047     	    _RET 
 2665              	
 2666              	/*********************************
 2667              	  BASIC: CHAR(expr)
 2668              	  convert expr in character 
 2669              	********************************/
 2670              	    _FUNC char
 2671 0284 4FF00100 	    mov r0,#1
 2672 0288 00B5FFF7 	    _CALL func_args
 2672      FEFF5DF8 
 2672      04EB
 2673 0292 5CF8041B 	    _POP r1 
 2674 0296 01F07F01 	    and r1,#127 
 2675 029a 4FF01300 	    mov r0,#TK_CHAR
 2676 029e 7047     	    _RET 
 2677              	
 2678              	/**********************************
 2679              	  BASIC: CONST label=expr [,!label=expr]
 2680              	  define constants constants are 
 2681              	  store at end of BASIC code.
 2682              	  use:
 2683              	    T1   *location 
 2684              	    T2   *bound 
 2685              	*********************************/
 2686              	    _FUNC const
ARM GAS  tinyBasic.s 			page 78


 2687 02a0 206C10F0 	    _RTO 
 2687      010F03D1 
 2687      4FF00700 
 2687      FFF7FEBF 
 2688 02b0 D4F8E080 	    ldr T1,[UPP,#HERE]
 2689 02b4 DFF8DC96 	    ldr T2,pad_adr  
 2690 02b8 C845     	1:  cmp T1,T2 
 2691 02ba 03D4     	    bmi 2f 
 2692 02bc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2693 02c0 FFF7FEBF 	    b tb_error 
 2694 02c4 00B5FFF7 	2:  _CALL next_token 
 2694      FEFF5DF8 
 2694      04EB
 2695 02ce 1A28     	    cmp r0,#TK_LABEL 
 2696 02d0 7FF4FEAF 	    bne syntax_error 
 2697 02d4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2698 02d8 4CF8041D 	    _PUSH r1 
 2699 02dc 4FF00D00 	    mov r0,#TK_EQUAL
 2700 02e0 00B5FFF7 	    _CALL expect
 2700      FEFF5DF8 
 2700      04EB
 2701 02ea 00B5FFF7 	    _CALL expression  
 2701      FEFF5DF8 
 2701      04EB
 2702 02f4 1B28     	    cmp r0,#TK_INTGR
 2703 02f6 7FF4FEAF 	    bne syntax_error
 2704 02fa 5CF8040B 	    _POP r0 
 2705 02fe 48F8040B 	    str r0,[T1],#4
 2706 0302 48F8041B 	    str r1,[T1],#4 
 2707 0306 C4F8E080 	    str T1,[UPP,#HERE]
 2708 030a 00B5FFF7 	    _CALL next_token
 2708      FEFF5DF8 
 2708      04EB
 2709 0314 0228     	    cmp r0,#TK_COMMA 
 2710 0316 CFD0     	    beq 1b 
 2711 0318 D4F800A0 	    _UNGET_TOKEN
 2711      D4F808B0 
 2712              	9:  
 2713 0320 7047     	    _RET 
 2714              	
 2715              	/*****************************
 2716              	  BASIC: READ 
 2717              	  read next data item 
 2718              	  the value can be assigned to
 2719              	  variable or used in expression
 2720              	*****************************/
 2721 0322 00BF     	    _FUNC read
 2722 0324 206C10F0 	    _RTO
 2722      010F03D1 
 2722      4FF00700 
 2722      FFF7FEBF 
 2723 0334 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2724 0336 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2725 0338 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2726 033a 8242     	    cmp r2,r0
 2727 033c 18D0     	    beq seek_next
 2728 033e 4FF00103 	1:  mov r3,#1 
ARM GAS  tinyBasic.s 			page 79


 2729 0342 885C     	    ldrb r0,[r1,r2]
 2730 0344 02F10102 	    add r2,#1
 2731 0348 0028     	    cmp r0,#TK_NONE
 2732 034a 11D0     	    beq seek_next
 2733 034c 0828     	    cmp r0,#TK_MINUS 
 2734 034e 05D1     	    bne 2f 
 2735 0350 4FF0FF33 	    mov r3,#-1
 2736 0354 885C     	    ldrb r0,[r1,r2]
 2737 0356 02F10102 	    add r2,#1
 2738 035a 01E0     	    b 3f  
 2739 035c 0228     	2:  cmp r0,#TK_COMMA
 2740 035e EED0     	    beq 1b  
 2741 0360 1B28     	3:  cmp r0,#TK_INTGR 
 2742 0362 7FF4FEAF 	    bne syntax_error  
 2743 0366 8958     	    ldr r1,[r1,r2]
 2744 0368 02F10402 	    add r2,#4
 2745 036c 2261     	    str r2,[UPP,#DATA]
 2746 036e 12E0     	    b 9f  
 2747              	seek_next: // is next line data ?
 2748 0370 8878     	    ldrb r0,[R1,#2]
 2749 0372 0144     	    add r1,r0 
 2750 0374 C878     	    ldrb r0,[R1,#3]
 2751 0376 1728     	    cmp r0,#TK_CMD
 2752 0378 09D1     	    bne 2f 
 2753 037a 0879     	    ldrb r0,[r1,#4]
 2754 037c 0F28     	    cmp r0,#DATA_IDX 
 2755 037e 06D1     	    bne 2f 
 2756 0380 E160     	    str r1,[UPP,#DATAPTR]
 2757 0382 8878     	    ldrb r0,[r1,#2]
 2758 0384 6061     	    str  r0,[UPP,#DATALEN]
 2759 0386 4FF00502 	    mov r2,#5 
 2760 038a 2261     	    str r2,[UPP,#DATA]
 2761 038c D7E7     	    b 1b 
 2762 038e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2763 0392 FFF7FEBF 	    b tb_error 
 2764 0396 7047     	9:  _RET 
 2765              	
 2766              	/********************************
 2767              	  BASIC: RESTORE [line#]
 2768              	  set data pointer to first data line 
 2769              	  or a specified line number 
 2770              	********************************/
 2771              	    _FUNC restore
 2772 0398 206C10F0 	    _RTO 
 2772      010F03D1 
 2772      4FF00700 
 2772      FFF7FEBF 
 2773 03a8 00B5FFF7 	    _CALL next_token 
 2773      FEFF5DF8 
 2773      04EB
 2774 03b2 1B28     	    cmp r0,#TK_INTGR 
 2775 03b4 05D0     	    beq 0f 
 2776 03b6 D4F800A0 	    _UNGET_TOKEN
 2776      D4F808B0 
 2777 03be 4FF00001 	    mov r1,#0 
 2778 03c2 40F61773 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2779 03c6 0A46     	    mov r2,r1 
ARM GAS  tinyBasic.s 			page 80


 2780 03c8 216B     	    ldr r1,[UPP,#TXTBGN]
 2781 03ca D4F83480 	    ldr T1,[UPP,#TXTEND]
 2782 03ce 4145     	1:  cmp r1,T1 
 2783 03d0 11D5     	    bpl no_data_line 
 2784 03d2 B1F80300 	    ldrh r0,[r1,#3]
 2785 03d6 9842     	    cmp r0,r3 
 2786 03d8 0AD1     	    bne try_next_line
 2787              	// this is a data line
 2788 03da 12B1     	    cbz r2,2f 
 2789 03dc 0888     	    ldrh r0,[r1]
 2790 03de 9042     	    cmp r0,r2 
 2791 03e0 06D1     	    bne try_next_line
 2792 03e2 E160     	2:  str r1,[UPP,#DATAPTR]
 2793 03e4 8878     	    ldrb r0,[r1,#2]
 2794 03e6 6061     	    str r0,[UPP,#DATALEN]
 2795 03e8 4FF00500 	    mov r0,#5 
 2796 03ec 2061     	    str r0,[UPP,#DATA]
 2797 03ee 07E0     	    b 9f
 2798              	try_next_line:
 2799 03f0 8878     	    ldrb r0,[r1,#2]
 2800 03f2 0144     	    add r1,r0 
 2801 03f4 EBE7     	    b 1b 
 2802              	no_data_line:
 2803 03f6 80EA0000 	    eor r0,r0 
 2804 03fa E060     	    str r0,[UPP,#DATAPTR]
 2805 03fc 2061     	    str r0,[UPP,#DATA]
 2806 03fe 6061     	    str r0,[UPP,#DATALEN]
 2807 0400 7047     	9:  _RET 
 2808              	
 2809              	/***********************************
 2810              	  BASIC: DEC 
 2811              	  switch base to decimal 
 2812              	***********************************/
 2813 0402 00BF     	    _FUNC dec_base
 2814 0404 4FF00A00 	    mov r0,#10
 2815 0408 A061     	    str r0,[UPP,#BASE]
 2816 040a 7047     	    _RET 
 2817              	
 2818              	/***************************************
 2819              	  BASIC: DO 
 2820              	  initialize a DO..UNTIL loop 
 2821              	***************************************/
 2822              	    _FUNC do_loop
 2823 040c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2824 0410 7047     	    _RET 
 2825              	
 2826              	
 2827              	/****************************************
 2828              	  BASIC: DUMP adr, count 
 2829              	    command line only  
 2830              	    print memory content in hexadecimal 
 2831              	    16 bytes per row 
 2832              	    ouput:
 2833              	      none 
 2834              	    use:
 2835              	      r2   byte counter  
 2836              	****************************************/
ARM GAS  tinyBasic.s 			page 81


 2837 0412 00BF     	    _FUNC dump 
 2838 0414 206C10F0 	    _CLO 
 2838      010F03D0 
 2838      4FF00700 
 2838      FFF7FEBF 
 2839 0424 4FF00200 	    mov r0,#2
 2840 0428 00B5FFF7 	    _CALL arg_list 
 2840      FEFF5DF8 
 2840      04EB
 2841 0432 5CF8042B 	    _POP r2   // count 
 2842 0436 5CF8040B 	    _POP  r0  // adr
 2843              	dump01:
 2844 043a 00B500F0 	    _CALL print_dump_header 
 2844      0CF85DF8 
 2844      04EB
 2845 0444 4FF01001 	1:  mov r1,#16
 2846 0448 00B5FFF7 	    _CALL prt_row 
 2846      FEFF5DF8 
 2846      04EB
 2847 0452 103A     	    subs r2,#16 
 2848 0454 F6D5     	    bpl 1b 
 2849 0456 7047     	    _RET 
 2850              	
 2851              	/********************************
 2852              	   print_dump_header
 2853              	********************************/
 2854              	    _FUNC print_dump_header
 2855 0458 2DE90103 	    push {r0,T1,T2}
 2856 045c 4FF00C00 	    mov r0,#12 
 2857 0460 00B5FFF7 	    _CALL cursor_x 
 2857      FEFF5DF8 
 2857      04EB
 2858 046a 4FF00000 	    mov r0,#0
 2859 046e 4FF01009 	    mov T2,#16
 2860 0472 8046     	1:  mov T1,r0 
 2861 0474 00B5FFF7 	    _CALL print_hex 
 2861      FEFF5DF8 
 2861      04EB
 2862 047e 08F10100 	    add r0,T1,#1  
 2863 0482 4845     	    cmp r0,T2 
 2864 0484 F5D4     	    bmi 1b 
 2865 0486 00B5FFF7 	    _CALL cr
 2865      FEFF5DF8 
 2865      04EB
 2866 0490 4FF03D00 	    mov r0,#'='
 2867 0494 4FF04F08 	    mov T1,#79
 2868 0498 00B5FFF7 	2:  _CALL uart_putc
 2868      FEFF5DF8 
 2868      04EB
 2869 04a2 B8F10108 	    subs T1,#1 
 2870 04a6 F7D1     	    bne 2b     
 2871 04a8 00B5FFF7 	    _CALL cr
 2871      FEFF5DF8 
 2871      04EB
 2872 04b2 BDE80103 	    pop {r0,T1,T2}
 2873 04b6 7047     	    _RET 
 2874              	
ARM GAS  tinyBasic.s 			page 82


 2875              	
 2876              	/*******************************
 2877              	  BASIC: END 
 2878              	  exit program 
 2879              	******************************/ 
 2880              	    _FUNC cmd_end
 2881 04b8 FFF7FEBF 	    b warm_start 
 2882 04bc 7047     	    _RET 
 2883              	
 2884              	/*******************************************
 2885              	  BASIC: STORE adr, value 
 2886              	  write value to user space in flash memory 
 2887              	*********************************************/
 2888 04be 00BF     	    _FUNC store 
 2889 04c0 4FF00200 	    mov r0,#2
 2890 04c4 00B5FFF7 	    _CALL arg_list 
 2890      FEFF5DF8 
 2890      04EB
 2891 04ce BCE80300 	    ldmia DP!,{r0,r1}
 2892 04d2 DFF83420 	    ldr r2,user_space
 2893 04d6 9142     	    cmp r1,r2 
 2894 04d8 03D5     	    bpl 1f 
 2895 04da 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2896 04de FFF7FEBF 	    b tb_error 
 2897 04e2 02F58062 	1:  add r2,#1024 
 2898 04e6 9142     	    cmp r1,r2 
 2899 04e8 F7D5     	    bpl 0b 
 2900 04ea 00B5FFF7 	    _CALL flash_store 
 2900      FEFF5DF8 
 2900      04EB
 2901 04f4 7047     	    _RET 
 2902              	
 2903              	/**************************************************
 2904              	  BASIC: ERASE 
 2905              	  erase user space page 
 2906              	*************************************************/
 2907 04f6 00BF     	    _FUNC erase 
 2908 04f8 DFF80C00 	    ldr r0,user_space 
 2909 04fc 00B5FFF7 	    _CALL erase_page 
 2909      FEFF5DF8 
 2909      04EB
 2910 0506 7047     	    _RET 
 2911 0508 00000000 	user_space: .word user 
 2912              	
 2913              	
 2914              	/**************************************************
 2915              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2916              	  introdure FOR...NEXT loop 
 2917              	**************************************************/
 2918              	    _FUNC for
 2919 050c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2920 0510 4FF00107 	    mov INCR,#1
 2921 0514 00B5FFF7 	    _CALL next_token
 2921      FEFF5DF8 
 2921      04EB
 2922 051e 1428     	    cmp r0,#TK_VAR
 2923 0520 7FF4FEAF 	    bne syntax_error
ARM GAS  tinyBasic.s 			page 83


 2924 0524 02B4     	    push {r1} 
 2925 0526 00B500F0 	    _CALL let_var 
 2925      29F95DF8 
 2925      04EB
 2926 0530 20BC     	    pop {VADR}
 2927 0532 4FEA8505 	    lsl VADR,#2
 2928 0536 2544     	    add VADR,UPP 
 2929 0538 05F17005 	    add VADR,#VARS 
 2930 053c 7047     	    _RET 
 2931              	
 2932              	/***************************************
 2933              	  BASIC: TO expr 
 2934              	  set limit of FOR...NEXT loop 
 2935              	**************************************/
 2936 053e 00BF     	    _FUNC to
 2937 0540 00B5FFF7 	    _CALL expression 
 2937      FEFF5DF8 
 2937      04EB
 2938 054a 1B28     	    cmp r0,#TK_INTGR
 2939 054c 7FF4FEAF 	    bne syntax_error 
 2940 0550 0E46     	    mov LIMIT,r1
 2941              	    // save loop back parameters 
 2942 0552 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2943 0556 7047     	    _RET 
 2944              	
 2945              	/********************************************
 2946              	  BASIC: STEP expr 
 2947              	  set increment for FOR...NEXT loop 
 2948              	********************************************/
 2949              	    _FUNC step
 2950 0558 00B5FFF7 	    _CALL expression 
 2950      FEFF5DF8 
 2950      04EB
 2951 0562 1B28     	    cmp r0,#TK_INTGR
 2952 0564 7FF4FEAF 	    bne syntax_error 
 2953 0568 0F46     	    mov INCR,r1
 2954              	    // replace parameters left by TO
 2955 056a 8CE8000C 	    stmia DP, {IN,BPTR}
 2956 056e 7047     	    _RET 
 2957              	
 2958              	/********************************************
 2959              	  BASIC: NEXT var 
 2960              	  incrment FOR...NEXT loop variable
 2961              	  exit if variable cross LIMIT 
 2962              	********************************************/
 2963              	    _FUNC next
 2964 0570 00B5FFF7 	    _CALL next_token 
 2964      FEFF5DF8 
 2964      04EB
 2965 057a 1428     	    cmp r0,#TK_VAR 
 2966 057c 7FF4FEAF 	    bne syntax_error 
 2967 0580 4FEA8101 	    lsl r1,#2 
 2968 0584 2144     	    add r1,UPP 
 2969 0586 01F17001 	    add r1,#VARS 
 2970 058a A942     	    cmp r1,VADR
 2971 058c 7FF4FEAF 	    bne syntax_error 
 2972 0590 2868     	    ldr r0,[VADR]
ARM GAS  tinyBasic.s 			page 84


 2973 0592 3844     	    add r0,INCR 
 2974 0594 2860     	    str r0,[VADR]
 2975 0596 002F     	    cmp INCR,#0
 2976 0598 02D4     	    bmi 2f
 2977 059a B042     	    cmp r0,LIMIT 
 2978 059c 02DC     	    bgt 8f  
 2979 059e 07E0     	    b 9f  
 2980 05a0 B042     	2:  cmp r0,LIMIT 
 2981 05a2 05DA     	    bge 9f  
 2982              	8: // exit for...next
 2983              	  //  drop branch parameters
 2984 05a4 4FF00800 	    _DROP 2
 2984      8444
 2985              	  // restore outer loop parameters
 2986 05aa BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2987 05ae 7047     	    _RET 
 2988 05b0 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2989 05b4 9BF80200 	    ldrb r0,[BPTR,#2]
 2990 05b8 6060     	    str r0,[UPP,#COUNT]
 2991 05ba 00B5FFF7 	    _CALL show_trace 
 2991      FEFF5DF8 
 2991      04EB
 2992 05c4 7047     	    _RET 
 2993              	
 2994              	
 2995              	/*********************************
 2996              	  BASIC: GOSUB expr 
 2997              	  call a subroutine at line# 
 2998              	*********************************/
 2999 05c6 00BF     	    _FUNC gosub
 3000 05c8 00B5FFF7 	    _CALL search_target 
 3000      FEFF5DF8 
 3000      04EB
 3001 05d2 2DE9000C 	    push {IN,BPTR}
 3002              	target:
 3003 05d6 8346     	    mov BPTR,r0 
 3004 05d8 4FF0030A 	    mov IN,#3 
 3005 05dc 9BF80200 	    ldrb r0,[BPTR,#2]
 3006 05e0 6060     	    str r0,[UPP,#COUNT]
 3007 05e2 00B5FFF7 	    _CALL show_trace 
 3007      FEFF5DF8 
 3007      04EB
 3008 05ec 7047     	    _RET 
 3009              	
 3010              	/**********************************
 3011              	  BASIC: RETURN 
 3012              	  leave a subroutine 
 3013              	*********************************/
 3014 05ee 00BF     	    _FUNC return 
 3015 05f0 BDE8000C 	    pop {IN,BPTR}
 3016 05f4 9BF80200 	    ldrb r0,[BPTR,#2]
 3017 05f8 6060     	    str r0,[UPP,#COUNT]
 3018 05fa 00B5FFF7 	    _CALL show_trace 
 3018      FEFF5DF8 
 3018      04EB
 3019 0604 7047     	    _RET 
 3020              	
ARM GAS  tinyBasic.s 			page 85


 3021              	/**********************************
 3022              	  BASIC: GOTO expr 
 3023              	  go to line # | label 
 3024              	**********************************/
 3025 0606 00BF     	    _FUNC goto
 3026 0608 00B5FFF7 	    _CALL search_target 
 3026      FEFF5DF8 
 3026      04EB
 3027 0612 E0E7     	    b target  
 3028              	
 3029              	/***************************************
 3030              	  BASIC: HEX 
 3031              	  set numeric base to hexadecimal 
 3032              	***************************************/
 3033              	    _FUNC hex_base
 3034 0614 4FF01000 	    mov r0,#16 
 3035 0618 A061     	    str r0,[UPP,#BASE]
 3036 061a 7047     	    _RET 
 3037              	
 3038              	/**********************************************
 3039              	  BASIC: IF relation THEN statement
 3040              	  execute statement only if relation is true
 3041              	*********************************************/
 3042              	    _FUNC if
 3043 061c 00B5FFF7 	    _CALL relation 
 3043      FEFF5DF8 
 3043      04EB
 3044 0626 09B9     	    cbnz r1,9f 
 3045 0628 D4F804A0 	    ldr IN,[UPP,#COUNT]
 3046 062c 7047     	9:  _RET 
 3047              	
 3048              	/*******************************************************
 3049              	  BASIC: THEN statement
 3050              	  statements following THEN are executed if relation is !=0
 3051              	  optional, retained for compatibility.
 3052              	******************************************************/
 3053 062e 00BF     	    _FUNC then 
 3054              	// do nothing 
 3055 0630 7047     	    _RET
 3056              	
 3057              	/****************************************
 3058              	  BASIC: INPUT [string]var [,[string]var]+
 3059              	  prompt user for variable value
 3060              	  use:
 3061              	    r2   
 3062              	    T1   variable indice 
 3063              	***************************************/
 3064 0632 00BF     	     _FUNC input_var
 3065              	//    push {r2,T1}
 3066 0634 00B5FFF7 	1:  _CALL next_token 
 3066      FEFF5DF8 
 3066      04EB
 3067 063e 0228     	    cmp r0,#2
 3068 0640 71D4     	    bmi 8f 
 3069 0642 1C28     	    cmp r0,#TK_QSTR 
 3070 0644 11D1     	    bne 2f 
 3071 0646 0846     	    mov r0,r1
ARM GAS  tinyBasic.s 			page 86


 3072 0648 DFF8E810 	    ldr r1,str_buffer
 3073 064c 00B5FFF7 	    _CALL strcpy
 3073      FEFF5DF8 
 3073      04EB
 3074 0656 4FF01400 	    mov r0,#TK_VAR   
 3075 065a 00B5FFF7 	    _CALL expect 
 3075      FEFF5DF8 
 3075      04EB
 3076 0664 8846     	    mov T1,r1 
 3077 0666 3348     	    ldr r0,str_buffer 
 3078 0668 08E0     	    b 3f 
 3079 066a 1428     	2:  cmp r0,#TK_VAR 
 3080 066c 7FF4FEAF 	    bne syntax_error     
 3081 0670 8846     	    mov T1,r1 
 3082 0672 01F14100 	    add r0,r1,#'A' 
 3083 0676 2F49     	    ldr r1,str_buffer
 3084 0678 0880     	    strh r0,[r1]
 3085 067a 0846     	    mov r0,r1 
 3086 067c 00B5FFF7 	3:  _CALL uart_puts  
 3086      FEFF5DF8 
 3086      04EB
 3087 0686 4FF03D00 	    mov r0,#'='
 3088 068a 00B5FFF7 	    _CALL uart_putc
 3088      FEFF5DF8 
 3088      04EB
 3089 0694 DFF89800 	    ldr r0,input_buffer
 3090 0698 4FF02201 	    mov r1,#34 
 3091 069c 00B5FFF7 	    _CALL readln
 3091      FEFF5DF8 
 3091      04EB
 3092 06a6 79B3     	    cbz r1,6f
 3093 06a8 0178     	    ldrb r1,[r0]
 3094 06aa 01B4     	    push {r0}
 3095 06ac 0846     	    mov r0,r1
 3096 06ae 00B5FFF7 	    _CALL is_letter 
 3096      FEFF5DF8 
 3096      04EB
 3097 06b8 01BC     	    pop {r0}
 3098 06ba 02D1     	    bne 3f 
 3099 06bc 01F05F01 	    and r1,#0x5f // uppercase  
 3100 06c0 24E0     	    b 7f 
 3101 06c2 4FF00102 	3:  mov r2,#1
 3102 06c6 2D29     	    cmp r1,#'-'
 3103 06c8 04D1     	    bne 3f 
 3104 06ca 4FF0FF32 	    mov r2,#-1 
 3105 06ce 00F10100 	    add r0,#1 
 3106 06d2 0DE0     	    b 4f  
 3107 06d4 2429     	3:  cmp r1,#'$'
 3108 06d6 04D1     	    bne 3f 
 3109 06d8 4FF01001 	    mov r1,#16
 3110 06dc 00F10100 	    add r0,#1  
 3111 06e0 08E0     	    b 5f 
 3112 06e2 2629     	3:  cmp r1,#'&' 
 3113 06e4 04D1     	    bne 4f 
 3114 06e6 4FF00201 	    mov r1,#2
 3115 06ea 00F10100 	    add r0,#1 
 3116 06ee 01E0     	    b 5f 
ARM GAS  tinyBasic.s 			page 87


 3117 06f0 4FF00A01 	4:  mov r1,#10 
 3118 06f4 00B5FFF7 	5:  _CALL atoi 
 3118      FEFF5DF8 
 3118      04EB
 3119 06fe 18B9     	    cbnz r0,6f
 3120 0700 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3121 0704 FFF7FEBF 	    b tb_error
 3122 0708 02FB01F1 	6:  mul r1,r2 
 3123 070c 4046     	7:  mov r0,T1 
 3124 070e 00B5FFF7 	    _CALL set_var
 3124      FEFF5DF8 
 3124      04EB
 3125 0718 00B5FFF7 	    _CALL next_token
 3125      FEFF5DF8 
 3125      04EB
 3126 0722 0228     	    cmp r0,#TK_COMMA 
 3127 0724 86D0     	    beq 1b 
 3128 0726 D4F800A0 	8:  _UNGET_TOKEN          
 3128      D4F808B0 
 3129              	9:  // pop {r2,T1}       
 3130 072e 7047     	    _RET 
 3131 0730 00000000 	input_buffer: .word _tib 
 3132 0734 00000000 	str_buffer: .word _pad 
 3133              	
 3134              	
 3135              	/*****************************************
 3136              	  BASIC: INVERT(expr)
 3137              	  return 1's complement of expr
 3138              	****************************************/
 3139              	    _FUNC invert
 3140 0738 4FF00100 	    mov r0,#1
 3141 073c 00B5FFF7 	    _CALL func_args
 3141      FEFF5DF8 
 3141      04EB
 3142 0746 5CF8041B 	    _POP r1  
 3143 074a 6FEA0101 	    mvn r1,r1
 3144 074e 4FF01B00 	    mov r0,#TK_INTGR
 3145 0752 7047     	    _RET 
 3146              	
 3147              	/*************************************
 3148              	  BASIC: KEY 
 3149              	  wait for a character from console
 3150              	*************************************/
 3151              	    _FUNC key
 3152 0754 00B5FFF7 	    _CALL uart_getc
 3152      FEFF5DF8 
 3152      04EB
 3153 075e 0146     	    mov r1,r0
 3154 0760 4FF01300 	    mov r0,#TK_CHAR 
 3155 0764 7047     	    _RET  
 3156              	
 3157              	/******************************
 3158              	  BASIC: [LET] var=expr 
 3159              	         [LET] @(expr)=expr
 3160              	  input:
 3161              	    none 
 3162              	  output:
ARM GAS  tinyBasic.s 			page 88


 3163              	    none 
 3164              	  use:
 3165              	
 3166              	****************************/         
 3167 0766 00BF     	    _FUNC let
 3168 0768 00B5FFF7 	    _CALL next_token 
 3168      FEFF5DF8 
 3168      04EB
 3169 0772 1428     	    cmp r0,#TK_VAR
 3170 0774 03D0     	    beq let_var 
 3171 0776 0C28     	    cmp r0,#TK_ARRAY 
 3172 0778 07D0     	    beq let_array 
 3173 077a FFF7FEBF 	    b syntax_error 
 3174              	let_var:
 3175 077e 4FEA8101 	    lsl r1,#2
 3176 0782 04F17000 	    add r0,UPP,#VARS
 3177 0786 0844     	    add r0,r1
 3178 0788 1FE0     	    b 1f 
 3179              	let_array: 
 3180 078a 4FF00500 	    mov r0,#TK_LPAREN
 3181 078e 00B5FFF7 	    _CALL expect 
 3181      FEFF5DF8 
 3181      04EB
 3182 0798 00B5FFF7 	    _CALL expression
 3182      FEFF5DF8 
 3182      04EB
 3183 07a2 1B28     	    cmp r0,#TK_INTGR 
 3184 07a4 7FF4FEAF 	    bne syntax_error
 3185 07a8 4CF8041D 	    _PUSH r1 
 3186 07ac 4FF00600 	    mov r0,#TK_RPAREN
 3187 07b0 00B5FFF7 	    _CALL expect 
 3187      FEFF5DF8 
 3187      04EB
 3188 07ba 5CF8041B 	    _POP r1 
 3189 07be D4F8D800 	    ldr r0,[UPP,#ARRAY_ADR]
 3190 07c2 4FEA8101 	    lsl r1,#2 
 3191 07c6 A0EB0100 	    sub r0,r1 
 3192 07ca 4CF8040D 	1:  _PUSH r0 
 3193 07ce 4FF00D00 	    mov r0,#TK_EQUAL 
 3194 07d2 00B5FFF7 	    _CALL expect 
 3194      FEFF5DF8 
 3194      04EB
 3195 07dc 00B5FFF7 	    _CALL expression   
 3195      FEFF5DF8 
 3195      04EB
 3196 07e6 1B28     	    cmp r0,#TK_INTGR
 3197 07e8 7FF4FEAF 	    bne syntax_error   
 3198 07ec 5CF8040B 	2:  _POP r0 
 3199 07f0 0160     	    str r1,[r0]
 3200 07f2 7047     	    _RET  
 3201              	
 3202              	/***************************************
 3203              	  BASIC: LIST [[first]-last]
 3204              	  use:
 3205              	    r2   first line# 
 3206              	    r3   last line#
 3207              	    T1   *line 
ARM GAS  tinyBasic.s 			page 89


 3208              	    T2   TXTEND 
 3209              	**************************************/  
 3210              	    _FUNC list
 3211 07f4 206C10F0 	    _CLO
 3211      010F03D0 
 3211      4FF00700 
 3211      FFF7FEBF 
 3212 0804 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3213 0808 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3214 080c B8F80020 	    ldrh r2,[T1]
 3215 0810 4FF6FF73 	    mov r3,#65535 
 3216 0814 00B5FFF7 	    _CALL next_token 
 3216      FEFF5DF8 
 3216      04EB
 3217 081e 10B3     	    cbz r0,6f 
 3218 0820 1B28     	    cmp r0,#TK_INTGR
 3219 0822 09D1     	    bne 1f 
 3220 0824 0A46     	    mov r2,r1 // first line
 3221 0826 00B5FFF7 	    _CALL next_token
 3221      FEFF5DF8 
 3221      04EB
 3222 0830 0028     	    cmp r0,#TK_NONE 
 3223 0832 01D1     	    bne 1f 
 3224 0834 1346     	    mov r3,r2 
 3225 0836 0CE0     	    b 4f 
 3226 0838 0828     	1:  cmp r0,#TK_MINUS 
 3227 083a 7FF4FEAF 	    bne syntax_error 
 3228 083e 00B5FFF7 	    _CALL next_token 
 3228      FEFF5DF8 
 3228      04EB
 3229 0848 18B1     	    cbz r0,4f 
 3230 084a 1B28     	    cmp r0,#TK_INTGR
 3231 084c 7FF4FEAF 	    bne syntax_error  
 3232 0850 0B46     	    mov r3,r1 
 3233              	4:  // skip lines below r2 
 3234 0852 B8F80000 	    ldrh r0,[T1]
 3235 0856 9042     	    cmp r0,r2 
 3236 0858 05D5     	    bpl 6f 
 3237 085a 98F80200 	    ldrb r0,[T1,#2]
 3238 085e 8044     	    add T1,r0
 3239 0860 C845     	    cmp T1,T2 
 3240 0862 F6D4     	    bmi 4b
 3241 0864 1AE0     	    b 9f 
 3242 0866 C845     	6:  cmp T1,T2  
 3243 0868 18D5     	    bpl 9f
 3244 086a 4046     	    mov r0,T1   
 3245 086c DFF83010 	    ldr r1,out_buff 
 3246 0870 00B5FFF7 	    _CALL decompile_line 
 3246      FEFF5DF8 
 3246      04EB
 3247 087a 00B5FFF7 	    _CALL uart_puts 
 3247      FEFF5DF8 
 3247      04EB
 3248 0884 00B5FFF7 	    _CALL cr 
 3248      FEFF5DF8 
 3248      04EB
 3249 088e 98F80200 	    ldrb r0,[T1,#2]
ARM GAS  tinyBasic.s 			page 90


 3250 0892 8044     	    add T1,r0
 3251 0894 B8F80000 	    ldrh r0,[T1]
 3252 0898 9842     	    cmp r0,r3 
 3253 089a E4DD     	    ble 6b 
 3254 089c FFF7FEBF 	9:  b warm_start 
 3255 08a0 00000000 	out_buff: .word _tib 
 3256              	
 3257              	/********************************
 3258              	  BASIC: LOCATE line,col
 3259              	  return log base 2 of expr 
 3260              	********************************/
 3261              	    _FUNC locate
 3262 08a4 4FF00200 	    mov r0,#2
 3263 08a8 00B5FFF7 	    _CALL arg_list 
 3263      FEFF5DF8 
 3263      04EB
 3264 08b2 5CF8041B 	    _POP r1
 3265 08b6 5CF8040B 	    _POP r0  
 3266 08ba 00B5FFF7 	    _CALL set_curpos 
 3266      FEFF5DF8 
 3266      04EB
 3267 08c4 7047     	    _RET 
 3268              	
 3269              	
 3270              	/****************************************
 3271              	  BASIC: LSHIFT(expr1,expr2)
 3272              	  shift right expr1 of expr2 bits 
 3273              	****************************************/
 3274 08c6 00BF     	    _FUNC lshift
 3275 08c8 4FF00200 	    mov r0,#2
 3276 08cc 00B5FFF7 	    _CALL func_args
 3276      FEFF5DF8 
 3276      04EB
 3277 08d6 BCE80300 	    ldmia DP!,{r0,r1}
 3278 08da 01FA00F1 	    lsl r1,r0 
 3279 08de 4FF01B00 	    mov r0,#TK_INTGR
 3280 08e2 7047     	    _RET 
 3281              	
 3282              	/***********************************
 3283              	  BASIC: NEW 
 3284              	  delete existing program in memory
 3285              	  and clear variables and RAM 
 3286              	***********************************/
 3287              	    _FUNC new
 3288 08e4 206C10F0 	    _CLO 
 3288      010F03D0 
 3288      4FF00700 
 3288      FFF7FEBF 
 3289 08f4 00B5FFF7 	    _CALL clear_basic 
 3289      FEFF5DF8 
 3289      04EB
 3290 08fe FFF7FEBF 	    b warm_start   
 3291              	
 3292              	/************************************
 3293              	  BASIC: NOT relation  
 3294              	  invert logical value or relation
 3295              	************************************/
ARM GAS  tinyBasic.s 			page 91


 3296 0902 00BF     	      _FUNC func_not
 3297 0904 00B5FFF7 	      _CALL relation 
 3297      FEFF5DF8 
 3297      04EB
 3298 090e 11B1     	      cbz r1,8f 
 3299 0910 81EA0101 	      eor r1,r1
 3300 0914 01E0     	      b 9f 
 3301 0916 4FF0FF31 	  8:  mov r1,#-1
 3302 091a 7047     	  9:  _RET 
 3303              	
 3304              	/******************************************
 3305              	  BASIC: OR(expr1,expr2)
 3306              	  binary OR between 2 expressions
 3307              	******************************************/
 3308              	    _FUNC bit_or
 3309 091c 4FF00200 	    mov r0,#2
 3310 0920 00B5FFF7 	    _CALL func_args
 3310      FEFF5DF8 
 3310      04EB
 3311 092a 5CF8040B 	    _POP r0 
 3312 092e 5CF8041B 	    _POP r1
 3313 0932 41EA0001 	    orr r1,r0 
 3314 0936 4FF01B00 	    mov r0,#TK_INTGR
 3315 093a 7047     	    _RET 
 3316              	
 3317              	/****************************************
 3318              	  BASIC: IN(gpio,pin) 
 3319              	  read gpio_idr selected pin  
 3320              	***************************************/
 3321              	    _FUNC pin_input 
 3322 093c 4FF00200 	    mov r0,#2
 3323 0940 00B5FFF7 	    _CALL func_args 
 3323      FEFF5DF8 
 3323      04EB
 3324 094a BCE80300 	    ldmia DP!,{r0,r1}
 3325 094e 4FF00802 	    mov r2,#GPIO_IDR 
 3326 0952 8A58     	    ldr r2,[r1,r2]
 3327 0954 00F00F00 	    and r0,#15 
 3328 0958 22FA00F2 	    lsr r2,r0 
 3329 095c 02F00101 	    and r1,r2,#1 
 3330 0960 4FF01B00 	    mov r0,#TK_INTGR
 3331 0964 7047     	    _RET 
 3332              	
 3333              	
 3334              	/****************************************
 3335              	  BASIC: OUT gpio,pin,value 
 3336              	   output to gpio_odr
 3337              	***************************************/
 3338 0966 00BF     	    _FUNC out
 3339 0968 4FF00300 	    mov r0,#3
 3340 096c 00B5FFF7 	    _CALL arg_list 
 3340      FEFF5DF8 
 3340      04EB
 3341 0976 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3342 097a 08B9     	    cbnz r0,1f 
 3343 097c 01F11001 	    add r1,#16 
 3344 0980 4FF00100 	1:  mov r0,#1 
ARM GAS  tinyBasic.s 			page 92


 3345 0984 00FA01F0 	    lsl r0,r1 
 3346 0988 1061     	    str r0,[r2,#GPIO_BSRR]    
 3347 098a 7047     	    _RET 
 3348              	
 3349              	
 3350              	/****************************************
 3351              	  BASIC: PAD 
 3352              	  return pad buffer address 
 3353              	****************************************/
 3354              	    _FUNC pad_ref
 3355 098c 0149     	    ldr r1,pad_adr  
 3356 098e 4FF01B00 	    mov r0,#TK_INTGR 
 3357 0992 7047     	    _RET 
 3358 0994 00000000 	pad_adr: .word _pad 
 3359              	
 3360              	/***********************
 3361              	  BASIC: PAUSE expr 
 3362              	  suspend execution for 
 3363              	  expr milliseconds 
 3364              	************************/
 3365              	    _FUNC pause
 3366 0998 00B5FFF7 	    _CALL expression 
 3366      FEFF5DF8 
 3366      04EB
 3367 09a2 1B28     	    cmp r0,#TK_INTGR 
 3368 09a4 7FF4FEAF 	    bne syntax_error 
 3369 09a8 E069     	    ldr r0,[UPP,#TICKS]
 3370 09aa 0844     	    add r0,r1 
 3371 09ac E169     	1:  ldr r1,[UPP,#TICKS]
 3372 09ae 8842     	    cmp r0,r1 
 3373 09b0 FCD1     	    bne 1b     
 3374 09b2 7047     	    _RET 
 3375              	
 3376              	/***************************************************
 3377              	  BASIC: PMODE GPIOx,pin,mode
 3378              	  configure a digital pin for input|output
 3379              	  paramters:
 3380              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3381              	    pin      pin {0..15} 
 3382              	    mode 
 3383              	    for input mode:
 3384              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3385              	    for output mode:
 3386              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3387              	***************************************************/
 3388              	    _FUNC pin_mode
 3389 09b4 4FF00300 	    mov r0,#3
 3390 09b8 00B5FFF7 	    _CALL arg_list
 3390      FEFF5DF8 
 3390      04EB
 3391 09c2 5CF8042B 	    _POP r2 // mode 
 3392 09c6 5CF8041B 	    _POP r1 // pin 
 3393 09ca 5CF8040B 	    _POP r0 // gpio 
 3394 09ce 00B500F0 	    _CALL gpio_config 
 3394      04F85DF8 
 3394      04EB
 3395 09d8 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 93


 3396              	
 3397              	/**********************************
 3398              	  gpio_config 
 3399              	  Configure gpio mode 
 3400              	  input:
 3401              	    r0   GPIOx 
 3402              	    r1   pin 
 3403              	    r2   mode 
 3404              	  output:
 3405              	    none 
 3406              	  use:
 3407              	    r3,T1 
 3408              	**********************************/
 3409 09da 00BF     	    _FUNC gpio_config
 3410 09dc 2DE90801 	    push {r3,T1}
 3411 09e0 8046     	    mov T1,r0 
 3412 09e2 80EA0000 	    eor r0,r0 
 3413 09e6 102A     	    cmp r2,#16
 3414 09e8 06D4     	    bmi 0f
 3415 09ea 5FEA7202 	    rors r2,#1  
 3416 09ee 02F00F02 	    and r2,#15
 3417 09f2 01D3     	    bcc 0f 
 3418 09f4 4FF00100 	    mov r0,#1
 3419 09f8 00FA01F0 	0:  lsl r0,r1
 3420 09fc A8F81000 	    strh r0,[T1,#GPIO_BSRR]
 3421 0a00 0829     	1:  cmp r1,#8
 3422 0a02 03D4     	    bmi 2f 
 3423 0a04 08F10408 	    add T1,#4 // CRH
 3424 0a08 A1F10801 	    sub r1,#8 
 3425              	2:  
 3426 0a0c 4FEA8101 	    lsl r1,#2 
 3427 0a10 4FF00F00 	    mov r0,#15
 3428 0a14 00FA01F0 	    lsl r0,r1
 3429 0a18 6FEA0000 	    mvn r0,r0 
 3430 0a1c D8F80030 	    ldr r3,[T1]
 3431 0a20 03EA0003 	    and r3,r0 
 3432 0a24 02FA01F2 	    lsl r2,r1
 3433 0a28 43EA0203 	    orr r3,r2 
 3434 0a2c C8F80030 	    str r3,[T1]
 3435 0a30 BDE80801 	    pop {r3,T1}
 3436 0a34 7047     	    _RET 
 3437              	
 3438              	
 3439              	/*****************************************
 3440              	  BASIC: PEEKB (expr)  
 3441              	  return byte value at address 
 3442              	*****************************************/
 3443 0a36 00BF     	    _FUNC peek8
 3444 0a38 4FF00100 	    mov r0,#1
 3445 0a3c 00B5FFF7 	    _CALL func_args  
 3445      FEFF5DF8 
 3445      04EB
 3446 0a46 5CF8041B 	    _POP r1 
 3447 0a4a 0978     	    ldrb r1,[r1]
 3448 0a4c 4FF01B00 	    mov r0,#TK_INTGR     
 3449 0a50 7047     	    _RET 
 3450              	
ARM GAS  tinyBasic.s 			page 94


 3451              	/*****************************************
 3452              	  BASIC: PEEKH (expr)  
 3453              	  return byte value at address 
 3454              	*****************************************/
 3455 0a52 00BF     	    _FUNC peek16
 3456 0a54 4FF00100 	    mov r0,#1
 3457 0a58 00B5FFF7 	    _CALL func_args  
 3457      FEFF5DF8 
 3457      04EB
 3458 0a62 5CF8041B 	    _POP r1 
 3459 0a66 0988     	    ldrh r1,[r1]
 3460 0a68 4FF01B00 	    mov r0,#TK_INTGR     
 3461 0a6c 7047     	    _RET 
 3462              	
 3463              	/*****************************************
 3464              	  BASIC: PEEKW (expr)  
 3465              	  return byte value at address 
 3466              	*****************************************/
 3467 0a6e 00BF     	    _FUNC peek32
 3468 0a70 4FF00100 	    mov r0,#1
 3469 0a74 00B5FFF7 	    _CALL func_args  
 3469      FEFF5DF8 
 3469      04EB
 3470 0a7e 5CF8041B 	    _POP r1 
 3471 0a82 0968     	    ldr r1,[r1]
 3472 0a84 4FF01B00 	    mov r0,#TK_INTGR     
 3473 0a88 7047     	    _RET 
 3474              	
 3475              	
 3476              	/**********************************
 3477              	  BASIC: POKE8 addr,byte
 3478              	  store byte at addr   
 3479              	**********************************/
 3480 0a8a 00BF     	    _FUNC poke8
 3481 0a8c 4FF00200 	    mov r0,#2
 3482 0a90 00B5FFF7 	    _CALL arg_list
 3482      FEFF5DF8 
 3482      04EB
 3483 0a9a BCE80300 	    ldmia DP!,{r0,r1} 
 3484 0a9e 0870     	    strb r0,[r1]
 3485 0aa0 7047     	    _RET 
 3486              	
 3487              	/**********************************
 3488              	  BASIC: POKE16 addr,hword
 3489              	  store hword at addr   
 3490              	**********************************/
 3491 0aa2 00BF     	    _FUNC poke16
 3492 0aa4 4FF00200 	    mov r0,#2
 3493 0aa8 00B5FFF7 	    _CALL arg_list
 3493      FEFF5DF8 
 3493      04EB
 3494 0ab2 BCE80300 	    ldmia DP!,{r0,r1} 
 3495 0ab6 0880     	    strh r0,[r1]
 3496 0ab8 7047     	    _RET 
 3497              	
 3498              	/**********************************
 3499              	  BASIC: POKE32 addr,word
ARM GAS  tinyBasic.s 			page 95


 3500              	  store word at addr   
 3501              	**********************************/
 3502 0aba 00BF     	    _FUNC poke32
 3503 0abc 4FF00200 	    mov r0,#2
 3504 0ac0 00B5FFF7 	    _CALL arg_list 
 3504      FEFF5DF8 
 3504      04EB
 3505 0aca BCE80300 	    ldmia DP!,{r0,r1} 
 3506 0ace 0860     	    str r0,[r1]
 3507 0ad0 7047     	    _RET 
 3508              	
 3509              	
 3510              	
 3511              	/****************************
 3512              	  BASIC: PRINT|? arg_list 
 3513              	  print list of arguments 
 3514              	****************************/
 3515 0ad2 00BF     	    _FUNC print
 3516 0ad4 206C     	    ldr r0,[UPP,#FLAGS]
 3517 0ad6 40F08000 	    orr r0,#FPRINT 
 3518 0ada 2064     	    str r0,[UPP,#FLAGS]
 3519 0adc 88EA0808 	    eor T1,T1 
 3520 0ae0 00B5FFF7 	0:  _CALL expression
 3520      FEFF5DF8 
 3520      04EB
 3521 0aea 1B28     	    cmp r0,#TK_INTGR
 3522 0aec 07D1     	    bne 1f 
 3523 0aee 0846     	    mov r0,r1
 3524 0af0 A169     	    ldr r1,[UPP,#BASE]
 3525 0af2 00B5FFF7 	    _CALL print_int
 3525      FEFF5DF8 
 3525      04EB
 3526 0afc 39E0     	    b 8f  
 3527 0afe 0128     	1:  cmp r0,#TK_COLON 
 3528 0b00 00DC     	    bgt 2f
 3529 0b02 4DE0     	    b unget_exit 
 3530 0b04 1C28     	2:  cmp r0,#TK_QSTR 
 3531 0b06 06D1     	    bne 3f
 3532 0b08 0846     	    mov r0,r1 
 3533 0b0a 00B5FFF7 	    _CALL uart_puts  
 3533      FEFF5DF8 
 3533      04EB
 3534 0b14 2DE0     	    b 8f 
 3535 0b16 1628     	3:  cmp r0,#TK_CFUNC
 3536 0b18 05D1     	    bne 4f
 3537 0b1a 0846     	    mov r0,r1
 3538 0b1c 00B5FFF7 	    _CALL execute 
 3538      FEFF5DF8 
 3538      04EB
 3539 0b26 1328     	4:  cmp r0,#TK_CHAR 
 3540 0b28 06D1     	    bne 5f 
 3541 0b2a 0846     	    mov r0,r1 
 3542 0b2c 00B5FFF7 	    _CALL uart_putc 
 3542      FEFF5DF8 
 3542      04EB
 3543 0b36 1CE0     	    b 8f 
 3544 0b38 0428     	5:  cmp r0,#TK_SHARP
ARM GAS  tinyBasic.s 			page 96


 3545 0b3a 09D1     	    bne 6f 
 3546 0b3c 00B5FFF7 	   _CALL next_token
 3546      FEFF5DF8 
 3546      04EB
 3547 0b46 1B28     	    cmp r0,#TK_INTGR  
 3548 0b48 7FF4FEAF 	    bne syntax_error 
 3549 0b4c 6164     	    str r1,[UPP,#TAB_WIDTH]
 3550 0b4e 10E0     	    b 8f 
 3551 0b50 1728     	6:  cmp r0,#TK_CMD 
 3552 0b52 25D1     	    bne unget_exit  
 3553 0b54 5129     	    cmp r1,#TAB_IDX 
 3554 0b56 05D1     	    bne 6f
 3555 0b58 00B500F0 	    _CALL tab 
 3555      53FD5DF8 
 3555      04EB
 3556 0b62 06E0     	    b 8f 
 3557 0b64 4829     	6:  cmp r1,#SPC_IDX  
 3558 0b66 1BD1     	    bne unget_exit
 3559 0b68 00B500F0 	    _CALL spc   
 3559      13FC5DF8 
 3559      04EB
 3560 0b72 88EA0808 	8:  eor T1,T1  
 3561 0b76 00B5FFF7 	    _CALL next_token
 3561      FEFF5DF8 
 3561      04EB
 3562 0b80 90B1     	    cbz r0, print_exit  
 3563 0b82 0228     	    cmp r0,#TK_COMMA 
 3564 0b84 02D1     	    bne 8f 
 3565 0b86 4FF0FF38 	    mov T1,#-1
 3566 0b8a A9E7     	    b 0b
 3567 0b8c 0328     	8:  cmp r0,#TK_SEMIC 
 3568 0b8e 07D1     	    bne unget_exit 
 3569 0b90 00B5FFF7 	    _CALL tabulation 
 3569      FEFF5DF8 
 3569      04EB
 3570 0b9a 4FF0FF38 	    mov T1,#-1
 3571 0b9e 9FE7     	    b 0b
 3572              	unget_exit:         
 3573 0ba0 D4F800A0 	   _UNGET_TOKEN 
 3573      D4F808B0 
 3574              	print_exit:
 3575 0ba8 18EA0808 	    ands T1,T1 
 3576 0bac 08D1     	    bne 9f
 3577 0bae 00B5FFF7 	    _CALL cr
 3577      FEFF5DF8 
 3577      04EB
 3578 0bb8 206C     	    ldr r0,[UPP,#FLAGS]
 3579 0bba 80F08000 	    eor r0,#FPRINT 
 3580 0bbe 2064     	    str r0,[UPP,#FLAGS] 
 3581 0bc0 7047     	9:  _RET 
 3582              	
 3583              	/**************************************
 3584              	  BASIC: QKEY
 3585              	  check if key pressed 
 3586              	**************************************/ 
 3587 0bc2 00BF     	    _FUNC qkey
 3588 0bc4 4FF00001 	    mov r1,#0
ARM GAS  tinyBasic.s 			page 97


 3589 0bc8 00B5FFF7 	    _CALL uart_qkey
 3589      FEFF5DF8 
 3589      04EB
 3590 0bd2 01D0     	    beq 9f 
 3591 0bd4 4FF0FF31 	    mov r1,#-1 
 3592 0bd8 4FF01B00 	9:  mov r0,#TK_INTGR
 3593 0bdc 7047     	    _RET 
 3594              	
 3595              	/******************************************
 3596              	  BASIC: RANDOMIZE 
 3597              	  Copy TICKS to SEED 
 3598              	******************************************/
 3599 0bde 00BF     	    _FUNC randomize
 3600 0be0 E069     	    ldr r0,[UPP,#TICKS]
 3601 0be2 6062     	    str r0,[UPP,#SEED]
 3602 0be4 7047     	    _RET 
 3603              	
 3604              	/******************************************
 3605              	  BASIC RND(expr)
 3606              	  generate random number between 0..expr-1
 3607              	******************************************/
 3608 0be6 00BF     	    _FUNC random
 3609 0be8 4FF00100 	    mov r0,#1
 3610 0bec 00B5FFF7 	    _CALL func_args 
 3610      FEFF5DF8 
 3610      04EB
 3611 0bf6 11F0004F 	    tst r1,#(1<<31)
 3612 0bfa 03D0     	    beq 1f 
 3613 0bfc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 3614 0c00 FFF7FEBF 	    b tb_error 
 3615 0c04 606A     	1:  ldr r0,[UPP,#SEED]
 3616 0c06 4FEA4031 	    lsl r1,r0,#13
 3617 0c0a 81EA0001 	    eor r1,r0
 3618 0c0e 4FEA5140 	    lsr r0,r1,#17
 3619 0c12 81EA0001 	    eor r1,r0
 3620 0c16 4FEA4110 	    lsl r0,r1,#5
 3621 0c1a 81EA0001 	    eor r1,r0
 3622 0c1e 6162     	    str r1,[UPP,#SEED]
 3623 0c20 5CF8040B 	    _POP r0 
 3624 0c24 B1FBF0F2 	    udiv r2,r1,r0  
 3625 0c28 00FB02F2 	    mul r2,r0 
 3626 0c2c A1EB0201 	    sub r1,r2 
 3627 0c30 4FF01B00 	    mov r0,#TK_INTGR
 3628 0c34 7047     	    _RET 
 3629              	
 3630              	/****************************************
 3631              	  BASIC: RSHIFT(expr1,expr2)
 3632              	  shift left expr1 de expr2 bits 
 3633              	****************************************/
 3634 0c36 00BF     	    _FUNC rshift
 3635 0c38 4FF00200 	    mov r0,#2
 3636 0c3c 00B5FFF7 	    _CALL func_args
 3636      FEFF5DF8 
 3636      04EB
 3637 0c46 BCE80300 	    ldmia DP!,{r0,r1}
 3638 0c4a 21FA00F1 	    lsr r1,r0  
 3639 0c4e 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 98


 3640 0c52 7047     	    _RET 
 3641              	
 3642              	/****************************
 3643              	  BASIC: RUN 
 3644              	  execute program in memory
 3645              	****************************/
 3646              	    _FUNC run
 3647 0c54 206C10F0 	    _CLO 
 3647      010F03D0 
 3647      4FF00700 
 3647      FFF7FEBF 
 3648 0c64 206B     	    ldr r0,[UPP,#TXTBGN]
 3649 0c66 616B     	    ldr r1,[UPP,#TXTEND]
 3650 0c68 C4F8E010 	    str r1,[UPP,#HERE]
 3651 0c6c 8842     	    cmp r0,r1
 3652 0c6e 21D0     	    beq 9f
 3653 0c70 216C     	    ldr r1,[UPP,#FLAGS]
 3654 0c72 11F0080F 	    tst r1,#FSTOP
 3655 0c76 09D0     	    beq 1f
 3656 0c78 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3657 0c7c 6060     	    str r0,[UPP,#COUNT]
 3658 0c7e 206C     	    ldr r0,[UPP,#FLAGS]
 3659 0c80 4FF00901 	    mov r1,#FRUN+FSTOP
 3660 0c84 80EA0100 	    eor r0,r1
 3661 0c88 2064     	    str r0,[UPP,#FLAGS] 
 3662 0c8a 13E0     	    b 9f  
 3663 0c8c 8178     	1:  ldrb r1,[r0,#2]
 3664 0c8e 6160     	    str r1,[UPP,#COUNT]
 3665 0c90 8346     	    mov BPTR,r0 
 3666 0c92 4FF0030A 	    mov IN,#3
 3667 0c96 606B     	    ldr r0,[UPP,#TXTEND]
 3668              	    // reset dataline pointers 
 3669 0c98 80EA0000 	    eor r0,r0 
 3670 0c9c E060     	    str r0,[UPP,#DATAPTR]
 3671 0c9e 2061     	    str r0,[UPP,#DATA]
 3672 0ca0 6061     	    str r0,[UPP,#DATALEN] 
 3673 0ca2 206C     	    ldr r0,[UPP,#FLAGS]
 3674 0ca4 40F00100 	    orr r0,#FRUN 
 3675 0ca8 2064     	    str r0,[UPP,#FLAGS]
 3676 0caa 00B5FFF7 	    _CALL show_trace 
 3676      FEFF5DF8 
 3676      04EB
 3677 0cb4 7047     	9:  _RET 
 3678              	
 3679              	/**********************************
 3680              	        FILE SYSTEM 
 3681              	**********************************/
 3682              	
 3683              	/*********************************
 3684              	  search_free 
 3685              	  search first free PAGE in fs
 3686              	  a PAGE is free if first word is
 3687              	  -1
 3688              	  input:
 3689              	    none 
 3690              	  output:
 3691              	    r0    addr|0
ARM GAS  tinyBasic.s 			page 99


 3692              	  use:
 3693              	*********************************/
 3694 0cb6 00BF     	    _FUNC search_free 
 3695 0cb8 06B4     	    push {r1,r2}
 3696 0cba DFF86410 	    ldr r1,fs_addr 
 3697 0cbe 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3697      C0F60202 
 3698 0cc6 0868     	1:  ldr r0,[r1]
 3699 0cc8 B0F1FF3F 	    cmp r0,#-1
 3700 0ccc 03D0     	    beq 8f 
 3701 0cce 01F58061 	    add r1,#PAGE_SIZE
 3702 0cd2 9142     	    cmp r1,r2 
 3703 0cd4 F7D4     	    bmi 1b 
 3704 0cd6 0846     	8:  mov r0,r1 
 3705 0cd8 06BC     	    pop {r1,r2}   
 3706 0cda 7047     	    _RET 
 3707              	
 3708              	/*********************************
 3709              	  search_file 
 3710              	  search for a file name 
 3711              	  in file system.
 3712              	  input: 
 3713              	    r0   .asciz target name
 3714              	  output:
 3715              	    r0    0 || address found 
 3716              	  use:
 3717              	   r0     temp 
 3718              	   r1     *file_name 
 3719              	   r2     *fs  
 3720              	   r3     target   
 3721              	**********************************/
 3722              	    _FUNC search_file 
 3723 0cdc 0EB4     	    push {r1,r2,r3}
 3724 0cde DFF84020 	    ldr r2,fs_addr
 3725 0ce2 0346     	    mov r3,r0  
 3726              	cmp_loop:
 3727 0ce4 1068     	    ldr r0,[r2]
 3728 0ce6 B0F1FF3F 	    cmp r0,#-1
 3729 0cea 80EA0000 	    eor r0,r0
 3730 0cee 15D0     	    beq 9f // reached end of fs 
 3731 0cf0 1846     	1:  mov r0,r3
 3732 0cf2 02F10201 	    add r1,r2,#2
 3733 0cf6 00B5FFF7 	    _CALL strcmp
 3733      FEFF5DF8 
 3733      04EB
 3734 0d00 08B9     	    cbnz r0,2f
 3735 0d02 1046     	    mov r0,r2 
 3736 0d04 0AE0     	    b 9f   
 3737 0d06 1088     	2:  ldrh r0,[r2] // name length
 3738 0d08 0244     	    add r2,r0 
 3739 0d0a 1088     	    ldrh r0,[r2]
 3740 0d0c 1044     	    add r0,r2
 3741 0d0e 00B5FFF7 	    _CALL page_align 
 3741      FEFF5DF8 
 3741      04EB
 3742 0d18 0246     	    mov r2,r0   
 3743 0d1a E3E7     	    b cmp_loop 
ARM GAS  tinyBasic.s 			page 100


 3744 0d1c 0EBC     	9:  pop {r1,r2,r3}
 3745 0d1e 7047     	    _RET 
 3746              	
 3747 0d20 00000000 	fs_addr: .word FILE_SYSTEM
 3748              	
 3749              	/*************************************
 3750              	  BASIC: DIR 
 3751              	  list files stored in fs 
 3752              	  use:
 3753              	    r0  temp 
 3754              	    r1  temp
 3755              	    r2  file count
 3756              	    r3  data size
 3757              	    T1  *fs  
 3758              	*************************************/
 3759              	    _FUNC directory
 3760 0d24 206C10F0 	    _CLO 
 3760      010F03D0 
 3760      4FF00700 
 3760      FFF7FEBF 
 3761 0d34 82EA0202 	    eor r2,r2 
 3762 0d38 5FF81C80 	    ldr T1,fs_addr 
 3763 0d3c D8F80000 	1:  ldr r0,[T1] // name length 
 3764 0d40 B0F1FF3F 	    cmp r0,#-1
 3765 0d44 2AD0     	    beq no_more_file
 3766 0d46 00F00F03 	    and r3,r0,#15
 3767 0d4a 08F10200 	    add r0,T1,#2
 3768 0d4e 00B5FFF7 	    _CALL uart_puts 
 3768      FEFF5DF8 
 3768      04EB
 3769 0d58 4FF01000 	    mov r0,#16 
 3770 0d5c 00B5FFF7 	    _CALL cursor_x 
 3770      FEFF5DF8 
 3770      04EB
 3771 0d66 9844     	    add T1,r3 
 3772 0d68 B8F80030 	    ldrh r3,[T1]
 3773 0d6c 1846     	    mov r0,r3 
 3774 0d6e 4FF00A01 	    mov r1,#10 
 3775 0d72 00B5FFF7 	    _CALL print_int
 3775      FEFF5DF8 
 3775      04EB
 3776 0d7c 00B5FFF7 	    _CALL cr  
 3776      FEFF5DF8 
 3776      04EB
 3777 0d86 08EB0300 	    add r0,T1,r3 
 3778 0d8a 00B5FFF7 	    _CALL page_align
 3778      FEFF5DF8 
 3778      04EB
 3779 0d94 8046     	    mov T1,r0 
 3780 0d96 02F10102 	    add r2,#1 
 3781 0d9a CFE7     	    b 1b  
 3782              	no_more_file:
 3783 0d9c 00B5FFF7 	    _CALL cr
 3783      FEFF5DF8 
 3783      04EB
 3784 0da6 4FF01000 	    mov r0,#16
 3785 0daa 00B5FFF7 	    _CALL cursor_x  
ARM GAS  tinyBasic.s 			page 101


 3785      FEFF5DF8 
 3785      04EB
 3786 0db4 1046     	    mov r0,r2 
 3787 0db6 4FF00A01 	    mov r1,#10 
 3788 0dba 00B5FFF7 	    _CALL print_int 
 3788      FEFF5DF8 
 3788      04EB
 3789 0dc4 DFF8BC0C 	    ldr r0,=fcount 
 3790 0dc8 00B5FFF7 	    _CALL uart_puts 
 3790      FEFF5DF8 
 3790      04EB
 3791 0dd2 7047     	    _RET 
 3792 0dd4 66696C65 	fcount:  .asciz "files\n"
 3792      730A00
 3793              	
 3794              	/*************************************
 3795              	  BASIC: FORGET ["name"]
 3796              	  delete file and all following 
 3797              	  if no name given delete all files 
 3798              	************************************/
 3799 0ddb 00       	    _FUNC forget
 3800 0ddc 2DE90802 	    push {r3,T2}
 3801 0de0 5FF8C490 	    ldr T2,fs_addr 
 3802 0de4 E36A     	    ldr r3,[UPP,#FSFREE]
 3803 0de6 00B5FFF7 	    _CALL next_token
 3803      FEFF5DF8 
 3803      04EB
 3804 0df0 38B1     	    cbz r0,1f // no name 
 3805 0df2 0846     	    mov r0,r1
 3806 0df4 00B5FFF7 	    _CALL search_file
 3806      71FF5DF8 
 3806      04EB
 3807 0dfe 58B1     	    cbz r0,9f 
 3808 0e00 8146     	    mov T2,r0 
 3809 0e02 9945     	1:  cmp T2,r3 
 3810 0e04 08D5     	    bpl 9f 
 3811 0e06 4846     	    mov r0,T2 
 3812 0e08 00B5FFF7 	    _CALL erase_page
 3812      FEFF5DF8 
 3812      04EB
 3813 0e12 09F58069 	    add T2,#PAGE_SIZE
 3814 0e16 F4E7     	    b 1b 
 3815 0e18 00B5FFF7 	9:  _CALL search_free
 3815      4DFF5DF8 
 3815      04EB
 3816 0e22 BDE80802 	    pop {r3,T2} 
 3817 0e26 7047     	    _RET
 3818              	
 3819              	/**********************************
 3820              	  BASIC LOAD "name" 
 3821              	  load file in RAM for execution
 3822              	  use:
 3823              	    r0   temp
 3824              	    r1   src
 3825              	    r2   dest 
 3826              	    r3   count 
 3827              	**********************************/
ARM GAS  tinyBasic.s 			page 102


 3828              	    _FUNC load
 3829 0e28 206C10F0 	    _CLO 
 3829      010F03D0 
 3829      4FF00700 
 3829      FFF7FEBF 
 3830 0e38 00B5FFF7 	    _CALL next_token 
 3830      FEFF5DF8 
 3830      04EB
 3831 0e42 1C28     	    cmp r0,#TK_QSTR 
 3832 0e44 7FF4FEAF 	    bne syntax_error 
 3833 0e48 0846     	    mov r0,r1 
 3834              	load_autorun:     
 3835 0e4a 00B5FFF7 	    _CALL search_file 
 3835      46FF5DF8 
 3835      04EB
 3836 0e54 18B9     	    cbnz r0, 1f 
 3837 0e56 4FF00900 	    mov r0,#ERR_NOT_FILE
 3838 0e5a FFF7FEBF 	    b tb_error 
 3839 0e5e 0146     	1:  mov r1,r0 
 3840 0e60 0888     	    ldrh r0,[r1]
 3841 0e62 0144     	    add r1,r0 // data size field  
 3842 0e64 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3843 0e68 226B     	    ldr r2,[UPP,#TXTBGN]
 3844 0e6a 02EB0300 	    add r0,r2,r3  
 3845 0e6e 6063     	    str r0,[UPP,#TXTEND]
 3846 0e70 C4F8E000 	    str r0,[UPP,#HERE]
 3847 0e74 03F10103 	    add r3,#1
 3848 0e78 4FEA5303 	    lsr r3,#1
 3849              	2:  // load file data 
 3850 0e7c 31F8020B 	    ldrh r0,[r1],#2
 3851 0e80 22F8020B 	    strh r0,[r2],#2 
 3852 0e84 013B     	    subs r3,#1 
 3853 0e86 F9D1     	    bne 2b 
 3854              	// report file size 
 3855 0e88 DFF8FC0B 	    ldr r0,=fsize 
 3856 0e8c 00B5FFF7 	    _CALL uart_puts
 3856      FEFF5DF8 
 3856      04EB
 3857 0e96 606B     	    ldr r0,[UPP,#TXTEND]
 3858 0e98 236B     	    ldr r3,[UPP,#TXTBGN]
 3859 0e9a A0EB0300 	    sub r0,r3 
 3860 0e9e 4FF00A01 	    mov r1,#10 
 3861 0ea2 00B5FFF7 	    _CALL print_int 
 3861      FEFF5DF8 
 3861      04EB
 3862 0eac DFF8DC0B 	    ldr r0,=data_bytes 
 3863 0eb0 00B5FFF7 	    _CALL uart_puts      
 3863      FEFF5DF8 
 3863      04EB
 3864 0eba 7047     	    _RET 
 3865              	
 3866              	
 3867              	/*********************************
 3868              	  BASIC: SAVE "name" 
 3869              	  save program in flash memory
 3870              	  file structure:
 3871              	    .hword name_length 
ARM GAS  tinyBasic.s 			page 103


 3872              	    .asciz name
 3873              	    .palign 1  
 3874              	    .hword data_length 
 3875              	    .byte  file data (variable length)  
 3876              	  use:
 3877              	    r0  temp 
 3878              	    r1  temp
 3879              	    r2  *flash 
 3880              	    r3  *ram  
 3881              	    T1  temp   
 3882              	********************************/
 3883              	    _FUNC save
 3884 0ebc 206C10F0 	    _CLO 
 3884      010F03D0 
 3884      4FF00700 
 3884      FFF7FEBF 
 3885 0ecc 606B     	    ldr r0,[UPP,#TXTEND]
 3886 0ece 216B     	    ldr r1,[UPP,#TXTBGN]
 3887 0ed0 8842     	    cmp r0,r1
 3888 0ed2 03D1     	    bne 0f 
 3889 0ed4 4FF00D00 	    mov r0,#ERR_NO_PROG
 3890 0ed8 FFF7FEBF 	    b tb_error 
 3891 0edc 00B5FFF7 	0:  _CALL next_token 
 3891      FEFF5DF8 
 3891      04EB
 3892 0ee6 1C28     	    cmp r0,#TK_QSTR
 3893 0ee8 7FF4FEAF 	    bne syntax_error 
 3894              	// check for existing 
 3895 0eec 0B46     	    mov r3,r1 // save name 
 3896 0eee 1846     	    mov r0,r3  
 3897 0ef0 00B5FFF7 	    _CALL search_file
 3897      F3FE5DF8 
 3897      04EB
 3898 0efa 18B1     	    cbz r0,new_file 
 3899 0efc 4FF00800 	    mov r0,#ERR_DUPLICATE
 3900 0f00 FFF7FEBF 	    b tb_error 
 3901              	new_file:
 3902 0f04 4FF00100 	    mov r0,#1 
 3903 0f08 00B5FFF7 	    _CALL unlock 
 3903      FEFF5DF8 
 3903      04EB
 3904 0f12 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3905 0f14 1846     	    mov r0,r3 // *name 
 3906 0f16 00B5FFF7 	    _CALL strlen 
 3906      FEFF5DF8 
 3906      04EB
 3907 0f20 00F10400 	    add r0,#4  
 3908 0f24 20F00100 	    and r0,#-2 //even size
 3909 0f28 A0F10208 	    sub T1,r0,#2  // name length counter   
 3910 0f2c 1146     	1:  mov r1,r2  
 3911 0f2e 00B5FFF7 	    _CALL hword_write   
 3911      FEFF5DF8 
 3911      04EB
 3912 0f38 02F10202 	    add r2,#2  
 3913              	// write file name      
 3914 0f3c 33F8020B 	2:  ldrh r0,[r3],#2 
 3915 0f40 1146     	    mov r1,r2 
ARM GAS  tinyBasic.s 			page 104


 3916 0f42 00B5FFF7 	    _CALL hword_write
 3916      FEFF5DF8 
 3916      04EB
 3917 0f4c 02F10202 	    add r2,#2
 3918 0f50 B8F10208 	    subs T1,#2
 3919 0f54 F2D1     	    bne 2b
 3920              	// write data size 
 3921 0f56 606B     	    ldr r0,[UPP,#TXTEND]
 3922 0f58 236B     	    ldr r3,[UPP,#TXTBGN]
 3923 0f5a A0EB0300 	    sub r0,r3
 3924 0f5e 8046     	    mov T1,r0
 3925 0f60 1146     	    mov r1,r2 
 3926 0f62 00B5FFF7 	    _CALL hword_write
 3926      FEFF5DF8 
 3926      04EB
 3927 0f6c 02F10202 	    add r2,#2 
 3928              	// write data 
 3929 0f70 08F10108 	    add T1,#1 
 3930 0f74 4FEA5808 	    lsr T1,#1 // .hword to write 
 3931 0f78 33F8020B 	3:  ldrh r0,[r3],#2
 3932 0f7c 1146     	    mov r1,r2
 3933 0f7e 00B5FFF7 	    _CALL hword_write 
 3933      FEFF5DF8 
 3933      04EB
 3934 0f88 02F10202 	    add r2,#2 
 3935 0f8c B8F10108 	    subs T1,#1 
 3936 0f90 F2D1     	    bne 3b
 3937 0f92 4FF00000 	    mov r0,#0 
 3938 0f96 00B5FFF7 	    _CALL unlock
 3938      FEFF5DF8 
 3938      04EB
 3939              	// update FSFREE     
 3940 0fa0 606B     	    ldr r0,[UPP,#TXTEND]
 3941 0fa2 216B     	    ldr r1,[UPP,#TXTBGN]
 3942 0fa4 A0EB0100 	    sub r0,r1 
 3943 0fa8 8046     	    mov T1,r0 
 3944 0faa E16A     	    ldr r1,[UPP,#FSFREE]
 3945 0fac 0844     	    add r0,r1 
 3946 0fae 00B5FFF7 	    _CALL page_align
 3946      FEFF5DF8 
 3946      04EB
 3947 0fb8 E062     	    str r0,[UPP,#FSFREE]
 3948 0fba DFF8CC0A 	    ldr r0,=fsize
 3949 0fbe 00B5FFF7 	    _CALL uart_puts
 3949      FEFF5DF8 
 3949      04EB
 3950 0fc8 4046     	    mov r0,T1 
 3951 0fca 4FF00A01 	    mov r1,#10 
 3952 0fce 00B5FFF7 	    _CALL print_int 
 3952      FEFF5DF8 
 3952      04EB
 3953 0fd8 DFF8B00A 	    ldr r0,=data_bytes 
 3954 0fdc 00B5FFF7 	    _CALL uart_puts  
 3954      FEFF5DF8 
 3954      04EB
 3955 0fe6 7047     	    _RET 
 3956 0fe8 66696C65 	fsize: .asciz "file size: "
ARM GAS  tinyBasic.s 			page 105


 3956      2073697A 
 3956      653A2000 
 3957 0ff4 62797465 	data_bytes: .asciz "bytes\n"
 3957      730A00
 3958              	
 3959              	
 3960              	/******************************
 3961              	  BASIC: AUTORUN ["name"]
 3962              	  set a file name to 
 3963              	  execute at boot up or if no 
 3964              	  argument cancel autorun file.
 3965              	  use:
 3966              	    T1 *ram buffer 
 3967              	*********************************/
 3968 0ffb 00       	    _FUNC autorun
 3969              	    // copy user page in RAM
 3970 0ffc D4F83480 	    ldr T1,[UPP,#TXTEND]
 3971 1000 4FF00300 	    mov r0,#3
 3972 1004 8044     	    add T1,r0 
 3973 1006 6FEA0000 	    mvn r0,r0 
 3974 100a 08EA0008 	    and T1,r0 
 3975 100e 5FF87C06 	    ldr r0,pad_adr  
 3976 1012 A0EB0800 	    sub r0,T1 
 3977 1016 B0F5806F 	    cmp r0,#PAGE_SIZE 
 3978 101a 03D5     	    bpl 1f 
 3979 101c 4FF00100 	    mov r0,#ERR_MEM_FULL 
 3980 1020 FFF7FEBF 	    b tb_error 
 3981 1024 DFF8680A 	1:  ldr r0,=user
 3982 1028 4146     	    mov r1,T1 
 3983 102a 4FF48062 	    mov r2,#PAGE_SIZE 
 3984 102e 00B5FFF7 	    _CALL cmove 
 3984      FEFF5DF8 
 3984      04EB
 3985              	    // erase page 
 3986 1038 DFF8540A 	    ldr r0,=user 
 3987 103c 00B5FFF7 	    _CALL erase_page
 3987      FEFF5DF8 
 3987      04EB
 3988              	    // check file name argument 
 3989 1046 00B5FFF7 	    _CALL next_token 
 3989      FEFF5DF8 
 3989      04EB
 3990 1050 1C28     	    cmp r0,#TK_QSTR 
 3991 1052 0DD0     	    beq 2f 
 3992 1054 D4F800A0 	    _UNGET_TOKEN
 3992      D4F808B0 
 3993              	    // erase first 16 byte of page
 3994              	    // this cancel any existing autorun 
 3995 105c 4FF0FF30 	    mov r0,#-1
 3996 1060 4246     	    mov r2,T1
 3997 1062 4FF01001 	    mov r1,#16 
 3998 1066 42F8040B 	1:  str r0,[r2],#4
 3999 106a 0439     	    subs r1,#4
 4000 106c FBD1     	    bne 1b 
 4001 106e 0BE0     	    b write_back 
 4002 1070 4246     	2:  mov r2,T1
 4003 1072 DFF82600 	    ldr r0,arun_sign 
ARM GAS  tinyBasic.s 			page 106


 4004 1076 42F8040B 	    str r0,[r2],#4
 4005 107a 0846     	    mov r0,r1 
 4006 107c 1146     	    mov r1,r2 
 4007 107e 00B5FFF7 	    _CALL strcpy 
 4007      FEFF5DF8 
 4007      04EB
 4008              	write_back:
 4009 1088 4046     	    mov r0,T1
 4010 108a DFF8041A 	    ldr r1,=user 
 4011 108e 00B5FFF7 	    _CALL write_page
 4011      FEFF5DF8 
 4011      04EB
 4012 1098 7047     	    _RET 
 4013 109a 4152554E 	arun_sign: .ascii "ARUN" 
 4014              	
 4015              	/******************************
 4016              	    exec_autorun 
 4017              	    check for autorun file.
 4018              	    load and execute it.
 4019              	*****************************/
 4020 109e 00BF     	    _FUNC exec_autorun
 4021 10a0 DFF8EC29 	    ldr r2,=user 
 4022 10a4 5FF80E10 	    ldr r1,arun_sign 
 4023 10a8 1068     	    ldr r0,[r2]
 4024 10aa 8842     	    cmp r0,r1 
 4025 10ac 0DD1     	    bne 9f 
 4026 10ae 02F10400 	    add r0,r2,#4
 4027 10b2 00B5FFF7 	    _CALL load_autorun 
 4027      C9FE5DF8 
 4027      04EB
 4028 10bc 00B5FFF7 	    _CALL run
 4028      C9FD5DF8 
 4028      04EB
 4029 10c6 00F006BF 	    b interpreter  
 4030 10ca 7047     	9:  _RET 
 4031              	
 4032              	/*******************************
 4033              	  BASIC: FREE 
 4034              	  return RAM free bytes 
 4035              	*******************************/
 4036              	    _FUNC free
 4037 10cc D4F8E000 	    ldr r0,[UPP,#HERE]
 4038 10d0 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 4039 10d4 A1EB0001 	    sub r1,r0
 4040 10d8 4FF01B00 	    mov r0,#TK_INTGR
 4041 10dc 7047     	    _RET  
 4042              	
 4043              	/*********************************
 4044              	  BASIC: SERVO_INIT n 
 4045              	  initialize servo motor 1,2,3,4
 4046              	  1 -> PWM2/1 pin A15
 4047              	  2 -> PWM2/2 pin B3 
 4048              	  3 -> PWM3/1 pin B4 
 4049              	  4 -> PWM3/2 pin B5
 4050              	  5 -> PMW4/3 pin B8
 4051              	  6 -> PWM4/4 pin B9
 4052              	  TIMER parameters are for Fclk=72Mhz 
ARM GAS  tinyBasic.s 			page 107


 4053              	  period=20msec 
 4054              	  default pos = 1500ÂµSec 
 4055              	************************************/
 4056 10de 00BF     	    _FUNC servo_init 
 4057 10e0 00B5FFF7 	    _CALL expression 
 4057      FEFF5DF8 
 4057      04EB
 4058 10ea 1B28     	    cmp r0,#TK_INTGR  
 4059 10ec 7FF4FEAF 	    bne syntax_error 
 4060 10f0 0129     	    cmp r1,#1 
 4061 10f2 03D5     	    bpl 1f 
 4062 10f4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4063 10f8 FFF7FEBF 	    b tb_error 
 4064 10fc 0729     	1:  cmp r1,#7
 4065 10fe F9D5     	    bpl 0b
 4066 1100 A1F10103 	    sub r3,r1,#1
 4067              	1:  // configure port pin
 4068 1104 DFF88C29 	    ldr r2,=servo_param
 4069 1108 4FEA0311 	    lsl r1,r3,#4
 4070 110c 0A44     	    add r2,r1  
 4071 110e 52F8040B 	    ldr r0,[r2],#4 //GPIOx_BASE_ADR
 4072 1112 1168     	    ldr r1,[r2]  // pin 
 4073 1114 4FF00E02 	    mov r2,#0xe // OUTPUT_AFOD  
 4074 1118 00B5FFF7 	    _CALL gpio_config 
 4074      5FFC5DF8 
 4074      04EB
 4075 1122 DFF87009 	    ldr r0,=servo_param 
 4076 1126 4FEA0311 	    lsl r1,r3,#4
 4077 112a 01F10801 	    add r1,#8
 4078 112e 0844     	    add r0,r1 
 4079 1130 50F8043B 	    ldr r3,[r0],#4
 4080 1134 0268     	    ldr r2,[r0]
 4081 1136 4FF02000 	    mov r0,#32
 4082 113a 4AF6C871 	    mov r1,#45000
 4083 113e 0CB4     	    push {r2,r3}
 4084 1140 00B500F0 	    _CALL pwm_config
 4084      5DF85DF8 
 4084      04EB
 4085 114a 06BC     	    pop {r1,r2}   
 4086              	    // remap TIMER2|3 pin 
 4087 114c 4FF00003 	    _MOV32 r3,AFIO_BASE_ADR
 4087      C4F20103 
 4088 1154 4FF00000 	    _MOV32 r0,TIMER2_BASE_ADR
 4088      C4F20000 
 4089 115c 8242     	    cmp r2,r0 
 4090 115e 04D0     	    beq remap_t2
 4091 1160 00F58060 	    add r0,#0x400
 4092 1164 8242     	    cmp r2,r0  
 4093 1166 07D0     	    beq remap_t3 
 4094 1168 12E0     	    b no_remap 
 4095              	remap_t2:
 4096 116a 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4097 116c 4FF44078 	    mov T1,#0x300 
 4098 1170 40EA0800 	    orr r0,T1 
 4099 1174 5860     	    str r0,[r3,#AFIO_MAPR]
 4100 1176 0BE0     	    b no_remap 
 4101              	remap_t3: 
ARM GAS  tinyBasic.s 			page 108


 4102 1178 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4103 117a 4FF44068 	    mov T1,0xc00 
 4104 117e 6FEA0808 	    mvn T1,T1 
 4105 1182 00EA0800 	    and r0,T1 
 4106 1186 4FF40068 	    mov T1,#0x800
 4107 118a 40EA0800 	    orr r0,T1 
 4108 118e 5860     	    str r0,[r3,#AFIO_MAPR]
 4109              	no_remap:
 4110 1190 40F62F50 	     mov r0,#3375 
 4111 1194 00B500F0 	    _CALL pwm_dc
 4111      7DF85DF8 
 4111      04EB
 4112 119e 7047     	    _RET 
 4113              	
 4114 11a0 00080140 	servo_param: .word GPIOA_BASE_ADR,15,TIMER2_BASE_ADR,1
 4114      0F000000 
 4114      00000040 
 4114      01000000 
 4115 11b0 000C0140 	            .word GPIOB_BASE_ADR,3,TIMER2_BASE_ADR,2
 4115      03000000 
 4115      00000040 
 4115      02000000 
 4116 11c0 000C0140 	            .word GPIOB_BASE_ADR,4,TIMER3_BASE_ADR,1
 4116      04000000 
 4116      00040040 
 4116      01000000 
 4117 11d0 000C0140 	            .word GPIOB_BASE_ADR,5,TIMER3_BASE_ADR,2
 4117      05000000 
 4117      00040040 
 4117      02000000 
 4118 11e0 000C0140 	            .word GPIOB_BASE_ADR,8,TIMER4_BASE_ADR,3
 4118      08000000 
 4118      00080040 
 4118      03000000 
 4119 11f0 000C0140 	            .word GPIOB_BASE_ADR,9,TIMER4_BASE_ADR,4
 4119      09000000 
 4119      00080040 
 4119      04000000 
 4120              	
 4121              	/*********************************
 4122              	    pwm_config 
 4123              	    configure timer for pwm mode 6
 4124              	    Fck_int=72Mhz 
 4125              	    input:
 4126              	      r0   PSC
 4127              	      r1   ARR
 4128              	      r2   channel  
 4129              	      r3   TIMER_BASE_ADR 
 4130              	    output:
 4131              	      none 
 4132              	    use:
 4133              	      T1,T2 
 4134              	*********************************/
 4135              	    _FUNC pwm_config
 4136 1200 2DE90003 	    push {T1,T2}
 4137 1204 1885     	    strh r0,[r3,#TIM_PSC]
 4138 1206 9985     	    strh r1,[r3,#TIM_ARR]
ARM GAS  tinyBasic.s 			page 109


 4139 1208 80EA0000 	    eor r0,r0 // 0% duty cycle
 4140 120c 4FF03408 	    mov T1,#TIM_CCR1
 4141 1210 1146     	    mov r1,r2 
 4142 1212 0139     	1:  subs r1,r1,#1
 4143 1214 02D0     	    beq 2f 
 4144 1216 08F10408 	    add T1,#4
 4145 121a FAE7     	    b 1b   
 4146 121c 23F80800 	2:  strh r0,[r3,T1] // duty cycle = 0.
 4147              	    // set counter mode 
 4148 1220 4FF47F40 	    mov r0,#0xff00 // mask to clear mode field
 4149 1224 4FF06808 	    mov T1,#0x68 // PWM mode 6, preload enabled  
 4150 1228 12F0010F 	    tst r2,#1 // odd channel?
 4151 122c 03D1     	    bne 1f 
 4152 122e 4FEA1020 	    lsr r0,#8  // shift mask for even channel
 4153 1232 4FEA0828 	    lsl T1,#8  // shift mode for even channel 
 4154 1236 4FF01809 	1:  mov  T2,#TIM_CCMR1  //channel 1,2
 4155 123a 032A     	    cmp r2,#3
 4156 123c 01D4     	    bmi 2f 
 4157 123e 4FF01C09 	    mov T2,#TIM_CCMR2 // channel 3,4
 4158 1242 33F80910 	2:  ldrh r1,[r3,T2]
 4159 1246 01EA0001 	    and r1,r0 // clear bit field
 4160 124a 41EA0801 	    orr r1,T1 // set mode
 4161 124e 23F80910 	    strh r1,[r3,T2]
 4162              	    // enable OC output 
 4163 1252 4FF00100 	    mov r0,#1 
 4164 1256 4FF00F08 	    mov T1,#15 
 4165 125a 1146     	    mov r1,r2  
 4166 125c 0139     	2:  subs r1,r1,#1 
 4167 125e 04D0     	    beq 3f 
 4168 1260 4FEA0010 	    lsl r0,#4
 4169 1264 4FEA0818 	    lsl T1,#4
 4170 1268 F8E7     	    b 2b
 4171 126a 6FEA0808 	3:  mvn T1,T1 
 4172 126e 198C     	    ldrh r1,[r3,#TIM_CCER]
 4173 1270 01EA0801 	    and r1,T1 // clear bit field 
 4174 1274 41EA0001 	    orr r1,r0 // set bit fiel new value 
 4175 1278 1984     	    strh r1,[r3,#TIM_CCER]
 4176              	    // enable counter 
 4177 127a 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4178 127e 1988     	    ldrh r1,[r3,TIM_CR1]
 4179 1280 41EA0001 	    orr r1,r0
 4180 1284 1980     	    strh r1,[r3,TIM_CR1]
 4181              	    // generate a reload event 
 4182 1286 4FF00100 	    mov r0,#1 
 4183 128a 9882     	    strh r0,[r3,TIM_EGR]
 4184 128c BDE80003 	    pop {T1,T2}
 4185 1290 7047     	    _RET 
 4186              	
 4187              	/*********************************
 4188              	    pwm_dc 
 4189              	    set pwm duty cycle 
 4190              	    input:
 4191              	      r0   CCR value, i.e duty cycle 
 4192              	      r1   channel 
 4193              	      r2   TIMER_BASE_ADDR 
 4194              	    use:
 4195              	
ARM GAS  tinyBasic.s 			page 110


 4196              	************************************/
 4197 1292 00BF     	    _FUNC pwm_dc 
 4198 1294 2DE90003 	    push {T1,T2}
 4199 1298 8946     	    mov T2,r1 
 4200 129a 4FF03408 	    mov T1,#TIM_CCR1 
 4201 129e 0139     	0:  subs r1,#1
 4202 12a0 02D0     	    beq 1f 
 4203 12a2 08F10408 	    add T1,#4
 4204 12a6 FAE7     	    b 0b
 4205 12a8 22F80800 	1:  strh r0,[r2,T1]
 4206              	    // trigger an update even 
 4207 12ac 4FF00200 	    mov r0,#2
 4208 12b0 B9F10109 	1:  subs T2,#1 
 4209 12b4 02D0     	    beq 2f 
 4210 12b6 4FEA4000 	    lsl r0,#1
 4211 12ba F9E7     	    b 1b 
 4212 12bc 9082     	2:  strh r0,[r2,#TIM_EGR]
 4213 12be BDE80003 	    pop {T1,T2}
 4214 12c2 7047     	    _RET 
 4215              	
 4216              	/*********************************
 4217              	  BASIC: SERVO_OFF channel 
 4218              	  disable servo-motor channel
 4219              	*********************************/
 4220              	    _FUNC servo_off 
 4221 12c4 00B5FFF7 	    _CALL expression 
 4221      FEFF5DF8 
 4221      04EB
 4222 12ce 1B28     	    cmp r0,#TK_INTGR
 4223 12d0 7FF4FEAF 	    bne syntax_error
 4224 12d4 0129     	    cmp r1,#1
 4225 12d6 03D5     	    bpl 1f 
 4226 12d8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4227 12dc FFF7FEBF 	    b tb_error 
 4228 12e0 0729     	1:  cmp r1,#7
 4229 12e2 F9D5     	    bpl 0b 
 4230 12e4 A1F10101 	    sub r1,#1 // channel {0..5}
 4231 12e8 4FEA0111 	    lsl r1,#4 // channel*16
 4232 12ec DFF8A437 	    ldr r3,=servo_param 
 4233 12f0 0B44     	    add r3,r1 
 4234              	    // reconfigure GPIO 
 4235 12f2 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4236 12f6 53F8041B 	    ldr r1,[r3],#4 // GPIO pin 
 4237 12fa 4FF01002 	    mov r2,#16 // INPUT_PD mode 
 4238 12fe 00B5FFF7 	    _CALL gpio_config
 4238      6CFB5DF8 
 4238      04EB
 4239 1308 53F8040B 	    ldr r0,[r3],#4 // TIMER_BASE_ADDR
 4240 130c 1968     	    ldr r1,[r3] // oc channel 
 4241 130e A1F10101 	    sub r1,#1 
 4242 1312 4FEA0111 	    lsl r1,#4 
 4243 1316 4FF00F02 	    mov r2,#0xf 
 4244 131a 02FA01F2 	    lsl r2,r1 
 4245 131e 6FEA0202 	    mvn r2,r2 
 4246 1322 018C     	    ldrh r1,[r0,#TIM_CCER]
 4247 1324 01EA0201 	    and r1,r2 
 4248 1328 0184     	    strh r1,[r0,#TIM_CCER]
ARM GAS  tinyBasic.s 			page 111


 4249 132a 7047     	    _RET 
 4250              	
 4251              	
 4252              	/*********************************
 4253              	  BASIC: SERVO_POS channel,value  
 4254              	  set servo position 
 4255              	*********************************/
 4256              	    _FUNC servo_pos 
 4257 132c 4FF00200 	    mov r0,#2
 4258 1330 00B5FFF7 	    _CALL arg_list 
 4258      FEFF5DF8 
 4258      04EB
 4259 133a DCF80410 	    ldr r1,[DP,#4] // servo channel 
 4260 133e 0729     	    cmp r1,#7
 4261 1340 03D4     	    bmi 1f 
 4262 1342 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 4263 1346 FFF7FEBF 	    b tb_error 
 4264 134a DFF84837 	1:  ldr r3,=servo_param 
 4265 134e 0139     	    subs r1,#1
 4266 1350 4FEA0111 	    lsl r1,#4
 4267 1354 01F10801 	    add r1,#8
 4268 1358 0B44     	    add r3,r1   
 4269 135a 53F8042B 	2:  ldr r2,[r3],#4 // TIMER_BASE_ADR
 4270 135e 1968     	    ldr r1,[r3] // oc channel 
 4271 1360 5CF8040B 	    _POP r0 // set value 
 4272 1364 0CF1040C 	    add DP,#4 // drop servo channel 
 4273 1368 00B5FFF7 	    _CALL pwm_dc 
 4273      93FF5DF8 
 4273      04EB
 4274 1372 7047     	    _RET 
 4275              	
 4276              	
 4277              	/*********************************
 4278              	  BASIC: SLEEP 
 4279              	  place MCU lowest power mode 
 4280              	  wait for external interrpt or
 4281              	  reset.
 4282              	*********************************/
 4283              	    _FUNC sleep
 4284 1374 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4284      CEF20000 
 4285 137c 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4286 1380 0160     	    str r1,[r0]
 4287 1382 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4287      C4F20000 
 4288 138a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4289 138e 0160     	    str r1,[r0]
 4290 1390 20BF     	    wfe 
 4291 1392 7047     	    _RET 
 4292              	
 4293              	/************************************
 4294              	  BASIC: SPC(expr)
 4295              	  mov cursor right expr spaces 
 4296              	***********************************/
 4297              	    _FUNC spc 
 4298 1394 4FF00100 	    mov r0,#1
 4299 1398 00B5FFF7 	    _CALL func_args 
ARM GAS  tinyBasic.s 			page 112


 4299      FEFF5DF8 
 4299      04EB
 4300 13a2 206C     	    ldr r0,[UPP,#FLAGS]
 4301 13a4 10F0800F 	    tst r0,#FPRINT 
 4302 13a8 5CF8040B 	    _POP r0 
 4303 13ac 04D0     	    beq 9f 
 4304 13ae 00B5FFF7 	    _CALL spaces 
 4304      FEFF5DF8 
 4304      04EB
 4305 13b8 7047     	9:  _RET 
 4306              	
 4307              	/**********************************
 4308              	  BASIC: SPI_DSEL channel 
 4309              	  deselect SPI channel 
 4310              	**********************************/
 4311 13ba 00BF     	    _FUNC spi_deselect 
 4312 13bc 00B5FFF7 	    _CALL expression 
 4312      FEFF5DF8 
 4312      04EB
 4313 13c6 1B28     	    cmp r0,#TK_INTGR
 4314 13c8 7FF4FEAF 	    bne syntax_error 
 4315 13cc DFF8C836 	    ldr r3,=spi_param 
 4316 13d0 A1F10101 	    sub r1,#1
 4317 13d4 4FF01802 	    mov r2,#24
 4318 13d8 02FB01F1 	    mul r1,r2
 4319 13dc 0B44     	    add r3,r1
 4320 13de 1A46     	    mov r2,r3 
 4321 13e0 1B68     	    ldr r3,[R3]
 4322 13e2 1888     	    ldrh r0,[r3]
 4323              	    // clear SPI_CR1_SPE bit 
 4324 13e4 6FF04001 	    mvn r1,#(1<<6) // SPE 
 4325 13e8 00EA0100 	    and r0,r1
 4326 13ec 1880     	    strh r0,[R3]
 4327              	    // set NSS output high 
 4328 13ee 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR
 4329 13f0 9168     	    ldr r1,[r2,#8] // NSS pin 
 4330 13f2 4FF00100 	    mov r0,#1 
 4331 13f6 00FA01F0 	    lsl r0,r1 
 4332 13fa 1861     	    str r0,[R3,#GPIO_BSRR] 
 4333 13fc 7047     	    _RET 
 4334              	
 4335              	/**********************************
 4336              	  BASIC: SPI_INIT  channel,BR 
 4337              	  enable SPI channel 1|2
 4338              	*********************************/
 4339 13fe 00BF     	    _FUNC spi_init 
 4340 1400 4FF00200 	    mov r0,#2
 4341 1404 00B5FFF7 	    _CALL arg_list
 4341      FEFF5DF8 
 4341      04EB
 4342              	    // enable peripheral clock 
 4343 140e BCE80003 	    ldmia DP!,{T1,T2} // T1=BR, T2=channel 
 4344 1412 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 4344      C4F20201 
 4345 141a 4FF01800 	    mov r0,#RCC_APB2ENR
 4346 141e 4FF48053 	    mov r3,#(1<<12) // SPI1EN bit 12 
 4347 1422 B9F1010F 	    cmp T2,#1
ARM GAS  tinyBasic.s 			page 113


 4348 1426 03D0     	    beq 1f 
 4349 1428 00F10400 	    add r0,#4 //RCC_APB1ENR
 4350 142c 4FEA8303 	    lsl r3,#2 // SPI2EN bit 14 
 4351 1430 0A58     	1:  ldr r2,[r1,r0]
 4352 1432 42EA0302 	    orr r2,r3 
 4353 1436 0A50     	    str r2,[r1,r0]
 4354              	    // spi config 
 4355 1438 DFF85C36 	    ldr r3,=spi_param 
 4356 143c A9F10101 	    sub r1,T2,#1 
 4357 1440 4FF01802 	    mov r2,#24
 4358 1444 02FB01F1 	    mul r1,r2
 4359 1448 0B44     	    add r3,r1 
 4360 144a 53F8041B 	    ldr r1,[r3],#4
 4361              	    // SPI_CR2
 4362 144e 4FF00400 	    mov r0,#(1<<2)
 4363 1452 8880     	    strh r0,[r1,#SPI_CR2] // SSOE
 4364              	    // SPI_CR1 as MSTR  
 4365 1454 4FEAC808 	    lsl T1,#3
 4366 1458 40EA0800 	    orr r0,T1 
 4367 145c 0880     	    strh r0,[r1,#SPI_CR1] 
 4368              	    // configure GPIO pins  
 4369 145e 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4370 1462 8046     	    mov T1,r0 
 4371 1464 53F8041B 	    ldr r1,[r3],#4 // NSS pin 
 4372 1468 8946     	    mov T2,r1 
 4373 146a 4FF00102 	    mov r2,#OUTPUT_PP 
 4374 146e 00B5FFF7 	    _CALL gpio_config //NSS  
 4374      B4FA5DF8 
 4374      04EB
 4375              	    // set NSS high 
 4376 1478 4046     	    mov r0,T1 
 4377 147a 4946     	    mov r1,T2 
 4378 147c 4FF00102 	    mov r2,#1 
 4379 1480 02FA01F2 	    lsl r2,r1 
 4380 1484 0261     	    str r2,[r0,#GPIO_BSRR]
 4381 1486 4046     	    mov r0,T1 
 4382 1488 53F8041B 	    ldr r1,[r3],#4 
 4383 148c 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4384 1490 00B5FFF7 	    _CALL gpio_config  // SCK
 4384      A3FA5DF8 
 4384      04EB
 4385 149a 4046     	    mov r0,T1
 4386 149c 53F8041B 	    ldr r1,[r3],#4 
 4387 14a0 4FF00402 	    mov r2,#INPUT_FLOAT
 4388 14a4 00B5FFF7 	    _CALL gpio_config  //MISO 
 4388      99FA5DF8 
 4388      04EB
 4389 14ae 4046     	    mov r0,T1 
 4390 14b0 1968     	    ldr r1,[R3] 
 4391 14b2 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4392 14b6 00B5FFF7 	    _CALL gpio_config // MOSI 
 4392      90FA5DF8 
 4392      04EB
 4393 14c0 7047     	    _RET 
 4394              	
 4395              	
 4396              	spi_param: 
ARM GAS  tinyBasic.s 			page 114


 4397 14c2 00300140 	  .word SPI1_BASE_ADR,GPIOA_BASE_ADR,4,5,6,7   // GPIO pins order NSS,SCK,MISO,MOSI
 4397      00080140 
 4397      04000000 
 4397      05000000 
 4397      06000000 
 4398 14da 00380040 	  .word SPI2_BASE_ADR,GPIOB_BASE_ADR,12,13,14,15 // GPIO pins order NSS,SCK,MISO,MOSI
 4398      000C0140 
 4398      0C000000 
 4398      0D000000 
 4398      0E000000 
 4399              	
 4400              	/***************************************
 4401              	  BASIC: SPI_READ (channel) 
 4402              	  read 1 byte from channel 
 4403              	  use:
 4404              	**************************************/
 4405 14f2 00BF     	    _FUNC spi_read
 4406 14f4 0CB4     	    push {r2,r3}
 4407 14f6 4FF00100 	    mov r0,#1
 4408 14fa 00B5FFF7 	    _CALL func_args 
 4408      FEFF5DF8 
 4408      04EB
 4409 1504 5CF8041B 	    _POP r1 
 4410 1508 A1F10101 	    sub r1,#1
 4411 150c 4FF01802 	    mov r2,#24
 4412 1510 02FB01F1 	    mul r1,r2 
 4413 1514 DFF88035 	    ldr r3,=spi_param 
 4414 1518 0B44     	    add r3,r1 
 4415 151a 1B68     	    ldr r3,[R3]
 4416 151c 80EA0000 	    eor r0,r0 
 4417 1520 9881     	    strh r0,[r3,#SPI_DR]
 4418 1522 9868     	0:  ldr r0,[r3,#SPI_SR]
 4419 1524 10F0010F 	    tst r0,#1
 4420 1528 FBD0     	    beq 0b
 4421 152a 9989     	    ldrh r1,[r3,#SPI_DR]
 4422 152c 01F0FF01 	    and r1,#255 
 4423 1530 4FF01B00 	    mov r0,#TK_INTGR  
 4424 1534 0CBC     	    pop {r2,r3}
 4425 1536 7047     	    _RET 
 4426              	
 4427              	/********************************
 4428              	  BASIC: SPI_SELECT channel 
 4429              	  activate channel 
 4430              	  use:
 4431              	*******************************/
 4432              	    _FUNC spi_select
 4433 1538 00B5FFF7 	    _CALL expression 
 4433      FEFF5DF8 
 4433      04EB
 4434 1542 1B28     	    cmp r0,#TK_INTGR
 4435 1544 7FF4FEAF 	    bne syntax_error
 4436 1548 DFF84C35 	    ldr r3,=spi_param 
 4437 154c A1F10101 	    sub r1,#1 
 4438 1550 4FF01802 	    mov r2,#24
 4439 1554 02FB01F1 	    mul r1,r2 
 4440 1558 0B44     	    add r3,r1 
 4441 155a 1A46     	    mov r2,r3 
ARM GAS  tinyBasic.s 			page 115


 4442 155c 1B68     	    ldr r3,[R3]
 4443              	    // set SPI_CR1_SPE bit 
 4444 155e 1868     	    ldr r0,[R3,#SPI_CR1]
 4445 1560 4FF04001 	    mov r1,#(1<<6) // SPE 
 4446 1564 40EA0100 	    orr r0,r1 
 4447 1568 1860     	    str r0,[r3,#SPI_CR1] 
 4448              	    // set NSS low  
 4449 156a 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR 
 4450 156c 9168     	    ldr r1,[r2,#8] // GPIO PIN 
 4451 156e 4FF48030 	    mov r0,#(1<<16) 
 4452 1572 00FA01F0 	    lsl r0,r1 
 4453 1576 1861     	    str r0,[R3,#GPIO_BSRR]
 4454 1578 7047     	    _RET 
 4455              	
 4456              	/*******************************
 4457              	  BASIC: SPI_WRITE channel,count,*buffer 
 4458              	  write bytes to spi channel 
 4459              	  use:
 4460              	********************************/
 4461 157a 00BF     	    _FUNC spi_write
 4462 157c 4FF00300 	    mov r0,#3
 4463 1580 00B5FFF7 	    _CALL arg_list 
 4463      FEFF5DF8 
 4463      04EB
 4464 158a BCE80E00 	    ldmia DP!,{r1,r2,r3} // *buffer, count, channel 
 4465 158e A3F10100 	    sub r0,r3,#1 
 4466 1592 4FF01803 	    mov r3,#24
 4467 1596 03FB00F0 	    mul r0,r3  
 4468 159a DFF8FC34 	    ldr r3,=spi_param 
 4469 159e 0344     	    add r3,r0 
 4470 15a0 1B68     	    ldr r3,[r3] //SPI_BASE_ADR 
 4471 15a2 11F8010B 	1:  ldrb r0,[r1],#1
 4472 15a6 9881     	    strh r0,[r3,#SPI_DR]
 4473 15a8 1889     	2:  ldrh r0,[r3,#SPI_SR]
 4474 15aa 10F0020F 	    tst r0,#2
 4475 15ae FBD0     	    beq 2b 
 4476 15b0 013A     	    subs r2,#1 
 4477 15b2 F6D1     	    bne 1b 
 4478              	    // wait BSY=0 completed 
 4479 15b4 1889     	3:  ldrh r0,[r3,#SPI_SR]
 4480 15b6 10F0800F 	    tst r0,#(1<<7)
 4481 15ba FBD1     	    bne 3b 
 4482 15bc D868     	    ldr r0,[r3,#SPI_DR]    
 4483 15be 7047     	    _RET 
 4484              	
 4485              	/******************************
 4486              	  BASIC: STOP 
 4487              	  stop program executre but 
 4488              	  keep execution state for 
 4489              	  resume 
 4490              	******************************/
 4491              	    _FUNC stop
 4492 15c0 206C10F0 	    _RTO 
 4492      010F03D1 
 4492      4FF00700 
 4492      FFF7FEBF 
 4493 15d0 6068     	    ldr r0,[UPP,#COUNT]
ARM GAS  tinyBasic.s 			page 116


 4494 15d2 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4495 15d6 206C     	    ldr r0,[UPP,#FLAGS]
 4496 15d8 4FF00901 	    mov r1,#FRUN+FSTOP
 4497 15dc 80EA0100 	    eor r0,r1
 4498 15e0 2064     	    str r0,[UPP,#FLAGS]
 4499 15e2 8AEA0A0A 	    eor IN,IN 
 4500 15e6 8BEA0B0B 	    eor BPTR,BPTR 
 4501 15ea C4F804A0 	    str IN,[UPP,#COUNT]
 4502 15ee C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4503 15f2 C4F808A0 	    str IN,[UPP,#BASICPTR]
 4504 15f6 4FF4A040 	    _MOV32 r0,RAM_END
 4504      C2F20000 
 4505 15fe 8546     	    mov sp,r0
 4506 1600 FFF7FEBF 	    b cmd_line 
 4507              	
 4508              	
 4509              	/**************************
 4510              	  BASIC: TAB(expr)
 4511              	  move cursor column expr 
 4512              	**************************/
 4513              	    _FUNC tab 
 4514 1604 4FF00100 	    mov r0,#1
 4515 1608 00B5FFF7 	    _CALL func_args  
 4515      FEFF5DF8 
 4515      04EB
 4516 1612 206C     	    ldr r0,[UPP,#FLAGS]
 4517 1614 10F0800F 	    tst r0,#FPRINT
 4518 1618 5CF8040B 	    _POP r0 
 4519 161c 04D0     	    beq 9f 
 4520 161e 00B5FFF7 	    _CALL cursor_x 
 4520      FEFF5DF8 
 4520      04EB
 4521 1628 7047     	9:  _RET 
 4522              	
 4523              	
 4524              	/**************************
 4525              	  BASIC: TICKS 
 4526              	  return msec counter
 4527              	**************************/  
 4528 162a 00BF     	    _FUNC get_ticks
 4529 162c E169     	    ldr r1,[UPP,#TICKS]
 4530 162e 4FF01B00 	    mov r0,#TK_INTGR
 4531 1632 7047     	    _RET  
 4532              	
 4533              	/*************************
 4534              	  BASIC: TIMER expr 
 4535              	  set countdown timer 
 4536              	************************/
 4537              	    _FUNC set_timer
 4538 1634 00B5FFF7 	    _CALL expression 
 4538      FEFF5DF8 
 4538      04EB
 4539 163e 1B28     	    cmp r0,#TK_INTGR
 4540 1640 7FF4FEAF 	    bne syntax_error 
 4541 1644 2162     	    str r1,[UPP,#TIMER]
 4542 1646 7047     	    _RET 
 4543              	
ARM GAS  tinyBasic.s 			page 117


 4544              	/***************************
 4545              	  BASIC: TIMEOUT
 4546              	  check for timer expiration 
 4547              	  return -1 true || 0 false
 4548              	****************************/
 4549              	    _FUNC timeout
 4550 1648 81EA0101 	    eor r1,r1 
 4551 164c 206A     	    ldr r0,[UPP,#TIMER]
 4552 164e 08B9     	    cbnz r0,9f 
 4553 1650 6FEA0101 	    mvn r1,r1 
 4554 1654 4FF01B00 	9:  mov r0,#TK_INTGR    
 4555 1658 7047     	    _RET 
 4556              	
 4557              	/****************************************
 4558              	  BASIC:  TONE freq, duration 
 4559              	  play a tone with frequency freq and duration
 4560              	  in milliseconds
 4561              	***********************************************/
 4562 165a 00BF     	    _FUNC tone
 4563 165c 4FF00200 	    mov r0,#2
 4564 1660 00B5FFF7 	    _CALL arg_list 
 4564      FEFF5DF8 
 4564      04EB
 4565 166a 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4565      C4F20002 
 4566 1672 DCF80400 	    ldr r0,[DP,#4] // freq
 4567 1676 4AF62021 	    _MOV32 r1,4500000
 4567      C0F24401 
 4568 167e B1FBF0F1 	    udiv r1,r0 
 4569 1682 9185     	    strh r1,[r2,#TIM_ARR]
 4570 1684 4FEA5101 	    lsr r1,#1 
 4571 1688 9186     	    strh r1,[r2,#TIM_CCR1]
 4572 168a 4FF00100 	    mov r0,#1
 4573 168e 1084     	    strh r0,[r2,#TIM_CCER]
 4574 1690 1080     	    strh r0,[r2,#TIM_CR1]
 4575 1692 908A     	    ldrh r0,[r2,#TIM_EGR]
 4576 1694 40F00200 	    orr r0,#2 
 4577 1698 9082     	    strh r0,[r2,#TIM_EGR] 
 4578 169a BCE80300 	    ldmia DP!,{r0,r1}
 4579              	    // pause duration  
 4580 169e E169     	    ldr r1,[UPP,#TICKS]
 4581 16a0 0844     	    add r0,r1 
 4582 16a2 E169     	1:  ldr r1,[UPP,#TICKS]
 4583 16a4 8142     	    cmp r1,r0 
 4584 16a6 FCD4     	    bmi 1b 
 4585              	    // stop tone 
 4586 16a8 1088     	    ldrh r0,[R2,#TIM_CR1]
 4587 16aa 80F00100 	    eor r0,#1 
 4588 16ae 1080     	    strh r0,[R2,#TIM_CR1]     
 4589 16b0 7047     	    _RET 
 4590              	
 4591              	/************************************
 4592              	  BASIC: TONE_INIT 
 4593              	  initialize tone_generator
 4594              	  output on GPIOB:6 
 4595              	************************************/
 4596 16b2 00BF     	    _FUNC tone_init 
ARM GAS  tinyBasic.s 			page 118


 4597              	    // configure pin 
 4598 16b4 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4598      C4F20100 
 4599 16bc 4FF00601 	    mov r1,#6 // gpio pin 
 4600 16c0 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4601 16c4 00B5FFF7 	    _CALL gpio_config
 4601      89F95DF8 
 4601      04EB
 4602              	    // configure TIMER4 in PWM mode 
 4603 16ce 4FF00F00 	    mov r0,#15 //PSC 
 4604 16d2 4FF6FF71 	    mov r1,#65535 // ARR 
 4605 16d6 4FF00102 	    mov r2,#1 // channel
 4606 16da 4FF40063 	    _MOV32 r3,TIMER4_BASE_ADR
 4606      C4F20003 
 4607 16e2 9846     	    mov T1,r3
 4608 16e4 00B5FFF7 	    _CALL pwm_config  
 4608      8BFD5DF8 
 4608      04EB
 4609              	    // tone off 
 4610 16ee B8F80000 	    ldrh r0,[T1,#TIM_CR1]
 4611 16f2 80F00100 	    eor r0,#1 
 4612 16f6 A8F80000 	    strh r0,[T1,#TIM_CR1]     
 4613 16fa 7047     	    _RET 
 4614              	
 4615              	
 4616              	/****************************************
 4617              	  BASIC: TRACE n 
 4618              	  enable execution trace 
 4619              	  0   ddisable
 4620              	  1   show current line#
 4621              	  2  show line#+data_stack
 4622              	  3  show line#+data_stack+main_stack 
 4623              	***************************************/
 4624              	    _FUNC trace 
 4625 16fc 00B5FFF7 	    _CALL next_token 
 4625      FEFF5DF8 
 4625      04EB
 4626 1706 1B28     	    cmp r0,#TK_INTGR  
 4627 1708 7FF4FEAF 	    bne syntax_error 
 4628 170c 01F00301 	    and r1,#3 
 4629 1710 C4F8DC10 	    str r1,[UPP,#TRACE_LEVEL]
 4630 1714 7047     	    _RET 
 4631              	
 4632              	
 4633              	/***************************
 4634              	  BASIC: UBOUND 
 4635              	  return last indice of @
 4636              	  output:
 4637              	    r0  TK_INTGR 
 4638              	    r1  +int 
 4639              	**************************/
 4640 1716 00BF     	    _FUNC ubound
 4641 1718 D4F8D810 	    ldr r1,[UPP,#ARRAY_ADR]
 4642 171c D4F8E000 	    ldr r0,[UPP,#HERE]
 4643 1720 A1EB0001 	    sub r1,r0 
 4644 1724 4FEA9101 	    lsr r1,#2
 4645 1728 4FF01B00 	    mov r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 119


 4646 172c 7047     	    _RET 
 4647              	
 4648              	/****************************
 4649              	  BASIC: UART_GETC(channel)
 4650              	  read a byte from uart 
 4651              	****************************/
 4652 172e 00BF     	    _FUNC ser_getc
 4653 1730 2DE90C01 	    push {r2,r3,T1}
 4654 1734 4FF00100 	    mov r0,#1 
 4655 1738 00B5FFF7 	    _CALL func_args
 4655      FEFF5DF8 
 4655      04EB
 4656 1742 5CF8040B 	    _POP r0 
 4657 1746 4FF48848 	    _MOV32 T1,USART2_BASE_ADR 
 4657      C4F20008 
 4658 174e 4FF06001 	    mov r1,#U2_RX_QUEUE 
 4659 1752 4FF06402 	    mov r2,#U2_COUNT 
 4660 1756 0228     	    cmp r0,#2 
 4661 1758 05D0     	    beq 1f 
 4662 175a 01F10801 	    add r1,#8  // U3_RX_QUEUE
 4663 175e 02F10802 	    add r2,#8  // U3_COUNT  
 4664 1762 08F58068 	    add T1,#0x400 // USART3_BASE_ADR 
 4665 1766 A058     	1:  ldr r0,[UPP,r2] // Ux_COUNT , wait for char 
 4666 1768 0028     	    cmp r0,#0
 4667 176a FCD0     	    beq 1b   
 4668              	    // disable USART interrupt 
 4669 176c D8F80C30 	    ldr r3,[T1,#USART_CR1]
 4670 1770 6FF02000 	    mvn r0,#1<<5
 4671 1774 03EA0003 	    and r3,r0 
 4672 1778 C8F80C30 	    str r3,[T1,#USART_CR1]
 4673              	    // decrement RX COUNT 
 4674 177c A058     	    ldr r0,[UPP,r2]
 4675 177e A0F10100 	    sub r0,#1 
 4676 1782 A050     	    str r0,[UPP,r2]    
 4677              	    // extract char from queue 
 4678 1784 6358     	    ldr r3,[UPP,r1] //queue 
 4679 1786 03F0FF00 	    and r0,r3,#255
 4680 178a 4FEA1323 	    lsr r3,#8 
 4681 178e 6350     	    str r3,[UPP,r1]
 4682              	    // enable interrupt 
 4683 1790 D8F80C30 	    ldr r3,[T1,#USART_CR1]
 4684 1794 43F02003 	    orr r3,#(1<<5)
 4685 1798 C8F80C30 	    str r3,[T1,#USART_CR1]
 4686 179c 0146     	    mov r1,r0 
 4687 179e 4FF01B00 	    mov r0,#TK_INTGR 
 4688 17a2 BDE80C01 	    pop {r2,r3,T1}
 4689 17a6 7047     	    _RET 
 4690              	
 4691              	
 4692              	/********************************
 4693              	  BASIC: UART_INIT channel,baud 
 4694              	  channel {2,3}
 4695              	  use:
 4696              	    T1 channel 
 4697              	    T2 *parameters 
 4698              	********************************/
 4699              	    _FUNC ser_init 
ARM GAS  tinyBasic.s 			page 120


 4700 17a8 4FF00200 	    mov r0,#2 
 4701 17ac 00B5FFF7 	    _CALL arg_list 
 4701      FEFF5DF8 
 4701      04EB
 4702 17b6 BCE80003 	    ldmia DP!,{T1,T2} // T1=BAUD,T2=channel 
 4703              	    // enable IRQ in NVIC_ISERxx 
 4704 17ba 4FF02600 	    mov r0,#IRQ_USART2 
 4705 17be B9F1020F 	    cmp T2,#2 
 4706 17c2 01D0     	    beq 1f 
 4707 17c4 4FF02700 	    mov r0,#IRQ_USART3  
 4708 17c8 00B5FFF7 	1:  _CALL nvic_enable_irq 
 4708      FEFF5DF8 
 4708      04EB
 4709 17d2 A9F10209 	    sub T2,#2 
 4710 17d6 4B46     	    mov r3,T2 // 0|1
 4711 17d8 4FEA0919 	    lsl T2,#4
 4712 17dc AF48     	    ldr r0,=uart_param 
 4713 17de 8144     	    add T2,r0  // parameters address 
 4714              	    // gpio config 
 4715 17e0 D9F80400 	    ldr r0,[T2,#4] //GPIO_BASE_ADR
 4716 17e4 D9F80810 	    ldr r1,[T2,#8] // tx pin 
 4717 17e8 4FF00902 	    mov r2,#OUTPUT_AFPP //pin mode
 4718 17ec 00B5FFF7 	    _CALL gpio_config 
 4718      F5F85DF8 
 4718      04EB
 4719 17f6 D9F80400 	    ldr r0,[T2,#4] // GPIO_BASE_ADR
 4720 17fa D9F80C10 	    LDR R1,[T2,#12] // rx pin 
 4721 17fe 4FF01102 	    mov r2,#INPUT_PU // mode 
 4722 1802 00B5FFF7 	    _CALL gpio_config 
 4722      EAF85DF8 
 4722      04EB
 4723              	    // config usart no flow control 1 stop, no parity 
 4724              	    // first enable clock 
 4725 180c 4FF40030 	    mov r0,#(1<<17) // USART2EN in APB1ENR 
 4726 1810 0BB1     	    cbz r3,1f
 4727 1812 4FEA4000 	    lsl r0,#1 // USART3EN in APB1ENR 
 4728 1816 4FF48052 	1:  _MOV32 r2,RCC_BASE_ADR 
 4728      C4F20202 
 4729 181e D169     	    ldr r1,[r2,#RCC_APB1ENR]
 4730 1820 41EA0001 	    orr r1,r0 
 4731 1824 D161     	    str r1,[r2,#RCC_APB1ENR]
 4732 1826 D9F80020 	    ldr r2,[T2] // USART_BASE_ADR 
 4733              	    // baud rate 
 4734 182a 4046     	    mov r0,T1 
 4735 182c 1146     	    mov r1,r2 
 4736 182e 00B500F0 	    _CALL uart_baud 
 4736      06F85DF8 
 4736      04EB
 4737              	    // enable usart 
 4738 1838 42F22C00 	    mov r0,#(1<<2)+(1<<3)+(1<<5)+(1<<13) //RE+TE+RXNEIE+UE
 4739 183c D060     	    str r0,[r2,#USART_CR1]
 4740 183e 7047     	    _RET 
 4741              	
 4742              	/*************************************
 4743              	   uart_baud
 4744              	   set USART baud rate for USART2|3
 4745              	   input:
ARM GAS  tinyBasic.s 			page 121


 4746              	      r0  baud 
 4747              	      r1  usart_base_adr 
 4748              	*************************************/
 4749              	    _FUNC uart_baud
 4750 1840 0CB4     	    push {r2,r3} 
 4751 1842 0346     	    mov r3,r0 // baud rate
 4752              	    // compute divisor values 
 4753 1844 45F21050 	    _MOV32 r0,2250000 // Fpck/16 
 4753      C0F22200 
 4754 184c 0246     	    mov r2,r0   // keep a copy 
 4755 184e B0FBF3F0 	    udiv r0,r3  // Fck/baud_rate 
 4756 1852 4FEA0010 	    lsl r0,#4 // divisor mantissa bits [15:4] 
 4757 1856 8860     	    str r0,[r1,#USART_BRR]
 4758 1858 4FEA1010 	    lsr r0,#4 
 4759 185c 03FB00F0 	    mul r0,r3 
 4760 1860 A2EB0002 	    sub r2,r0 // division remainder  
 4761 1864 4FEA0212 	    lsl r2,#4 // R*16 
 4762 1868 B2FBF3F2 	    udiv r2,r3 // fraction=R*16/baud_rate 
 4763 186c 8868     	    ldr r0,[r1,#USART_BRR] 
 4764 186e 40EA0200 	    orr r0,r2 // mantissa[15:4],fraction[3:0] 
 4765 1872 8860     	    str r0,[r1,#USART_BRR]
 4766 1874 0CBC     	    pop {r2,r3} 
 4767 1876 7047     	    _RET 
 4768              	
 4769              	
 4770              	uart_param: // USART_BASE_ADR,GPIO_BASE_ADR,tx_pin,rx_pin
 4771 1878 00440040 	    .word USART2_BASE_ADR,GPIOA_BASE_ADR,2,3 //USART2 
 4771      00080140 
 4771      02000000 
 4771      03000000 
 4772 1888 00480040 	    .word USART3_BASE_ADR,GPIOB_BASE_ADR,10,11 //USART3
 4772      000C0140 
 4772      0A000000 
 4772      0B000000 
 4773              	
 4774              	
 4775              	/********************************
 4776              	  BASIC: UART_PUTC channel,char 
 4777              	********************************/
 4778              	    _FUNC ser_putc 
 4779 1898 4FF00200 	    mov r0,#2
 4780 189c 00B5FFF7 	    _CALL arg_list
 4780      FEFF5DF8 
 4780      04EB
 4781 18a6 BCE80600 	    ldmia DP!,{r1,r2}
 4782 18aa A2F10202 	    sub r2,#2 
 4783 18ae 4FEA0212 	    lsl r2,#4 
 4784 18b2 7A48     	    ldr r0,=uart_param 
 4785 18b4 0244     	    add r2,r0 
 4786 18b6 1268     	    ldr r2,[r2]
 4787 18b8 1068     	1:  ldr r0,[r2,#USART_SR]
 4788 18ba 10F0800F 	    tst r0,#(1<<7) // TXE
 4789 18be FBD0     	    beq 1b
 4790 18c0 5160     	    str r1,[r2,#USART_DR]     
 4791 18c2 7047     	    _RET 
 4792              	
 4793              	
ARM GAS  tinyBasic.s 			page 122


 4794              	/****************************
 4795              	  BASIC: UFLASH 
 4796              	  return user flash address
 4797              	*****************************/
 4798              	    _FUNC uflash
 4799 18c4 7249     	    ldr r1,=user
 4800 18c6 4FF01B00 	    mov r0,#TK_INTGR 
 4801 18ca 7047     	    _RET 
 4802              	
 4803              	
 4804              	/************************************
 4805              	  BASIC: UNTIL relation 
 4806              	  close a DO..UNTIL loop 
 4807              	  loop until relation come true 
 4808              	************************************/
 4809              	    _FUNC until
 4810 18cc 00B5FFF7 	    _CALL relation 
 4810      FEFF5DF8 
 4810      04EB
 4811 18d6 11B1     	    cbz r1,9f
 4812 18d8 0CF1080C 	    add DP,#8
 4813 18dc 7047     	    _RET  
 4814 18de 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4815 18e2 9BF80200 	    ldrb r0,[BPTR,#2]
 4816 18e6 6060     	    str r0,[UPP,#COUNT]
 4817 18e8 7047     	    _RET 
 4818              	
 4819              	/*************************************
 4820              	  BASIC: WAIT addr,expr1[,expr2] 
 4821              	  wait until *addr&expr1 is not null 
 4822              	  or until (*addr&expr1)^expr2 is null 
 4823              	***************************************/
 4824 18ea 00BF     	    _FUNC wait
 4825 18ec 4FF00200 	    mov r0,#2
 4826 18f0 00B5FFF7 	    _CALL arg_list 
 4826      FEFF5DF8 
 4826      04EB
 4827 18fa 0228     	    cmp r0,#2
 4828 18fc 01D0     	    beq 2f 
 4829 18fe 0328     	    cmp r0,#3
 4830 1900 05D0     	    beq 4f
 4831 1902 BCE80300 	2:  ldmia DP!,{r0,r1}
 4832 1906 0A88     	3:  ldrh r2,[r1]
 4833 1908 0240     	    ands r2,r0 
 4834 190a FCD0     	    beq 3b 
 4835 190c 06E0     	    b 9f 
 4836 190e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4837 1912 1388     	5:  ldrh r3,[r2]
 4838 1914 83EA0003 	    eor r3,r0
 4839 1918 0B40     	    ands r3,r1 
 4840 191a FAD0     	    beq 5b 
 4841 191c 7047     	9:  _RET 
 4842              	
 4843              	/*********************************************
 4844              	  BASIC: WORDS 
 4845              	  print list of BASIC WORDS in dictionary 
 4846              	  use:
ARM GAS  tinyBasic.s 			page 123


 4847              	    r0,r1 temp
 4848              	    r2  words counter 
 4849              	    T1  name field pointer 
 4850              	    T2  cursor column counter 
 4851              	********************************************/
 4852 191e 00BF     	    _FUNC words
 4853 1920 206C10F0 	    _CLO 
 4853      010F03D0 
 4853      4FF00700 
 4853      FFF7FEBF 
 4854 1930 DFF86C81 	    ldr T1,=kword_dict
 4855 1934 89EA0909 	    eor T2,T2
 4856 1938 82EA0202 	    eor r2,r2  
 4857              	1:  
 4858 193c 4046     	    mov r0,T1
 4859 193e 00B5FFF7 	    _CALL strlen
 4859      FEFF5DF8 
 4859      04EB
 4860 1948 F0B1     	    cbz r0,4f 
 4861 194a 8144     	    add T2,r0 
 4862 194c B9F1460F 	    cmp T2,#70 
 4863 1950 06D4     	    bmi 2f
 4864 1952 89EA0909 	    eor T2,T2  
 4865 1956 00B5FFF7 	    _CALL cr 
 4865      FEFF5DF8 
 4865      04EB
 4866 1960 4046     	2:  mov r0,T1 
 4867 1962 00B5FFF7 	    _CALL uart_puts 
 4867      FEFF5DF8 
 4867      04EB
 4868 196c 4FF02000 	    mov r0,#SPACE
 4869 1970 09F10109 	    add T2,#1  
 4870 1974 00B5FFF7 	    _CALL uart_putc
 4870      FEFF5DF8 
 4870      04EB
 4871 197e 02F10102 	    add r2,#1 
 4872 1982 58F80C8C 	    ldr T1,[T1,#-12] // follow link
 4873 1986 D9E7     	    b 1b 
 4874 1988 19EA0909 	4:  ands T2,T2
 4875 198c 04D0     	    beq 5f 
 4876 198e 00B5FFF7 	    _CALL cr 
 4876      FEFF5DF8 
 4876      04EB
 4877              	5:  // print words count 
 4878 1998 1046     	    mov r0,r2 
 4879 199a 4FF00A01 	    mov r1,#10
 4880 199e 00B5FFF7 	    _CALL print_int 
 4880      FEFF5DF8 
 4880      04EB
 4881 19a8 3E48     	    ldr r0,=dict_words
 4882 19aa 00B5FFF7 	    _CALL uart_puts  
 4882      FEFF5DF8 
 4882      04EB
 4883 19b4 7047     	9:  _RET 
 4884              	
 4885 19b6 776F7264 	dict_words: .asciz "words in dictionary" 
 4885      7320696E 
ARM GAS  tinyBasic.s 			page 124


 4885      20646963 
 4885      74696F6E 
 4885      61727900 
 4886              	
 4887              	
 4888              	/**************************************
 4889              	  BASIC: XOR(expr1,expr2)
 4890              	  binary exclusive or between 2 expressions
 4891              	**************************************/
 4892 19ca 00BF     	    _FUNC bit_xor
 4893 19cc 4FF00200 	    mov r0,#2
 4894 19d0 00B5FFF7 	    _CALL func_args
 4894      FEFF5DF8 
 4894      04EB
 4895 19da 5CF8040B 	    _POP r0
 4896 19de 5CF8041B 	    _POP r1 
 4897 19e2 81EA0001 	    eor r1,r0 
 4898 19e6 4FF01B00 	    mov r0,#TK_INTGR
 4899 19ea 7047     	    _RET 
 4900              	
 4901              	/***************************************
 4902              	    BASIC: XPOS 
 4903              	    report cursor column on terminal 
 4904              	***************************************/
 4905              	    _FUNC xpos 
 4906 19ec 00B5FFF7 	    _CALL get_curpos
 4906      FEFF5DF8 
 4906      04EB
 4907 19f6 4FF01B00 	    mov r0,#TK_INTGR
 4908 19fa 7047     	    _RET 
 4909              	
 4910              	/***********************************
 4911              	    BASIC: YPOS 
 4912              	    report cursor line on terminal 
 4913              	***********************************/
 4914              	    _FUNC ypos 
 4915 19fc 00B5FFF7 	    _CALL get_curpos 
 4915      FEFF5DF8 
 4915      04EB
 4916 1a06 0146     	    mov r1,r0 
 4917 1a08 4FF01B00 	    mov r0,#TK_INTGR
 4918 1a0c 7047     	    _RET 
 4919              	
 4920              	
 4921              	/**********************************
 4922              	     argument stack manipulation
 4923              	**********************************/
 4924              	
 4925              	/**********************************
 4926              	  BASIC PUSH expr[,expr] 
 4927              	  push integers on stack 
 4928              	*********************************/
 4929 1a0e 00BF     	    _FUNC cmd_push
 4930 1a10 4FF00100 	    mov r0,#1
 4931 1a14 00B5FFF7 	    _CALL arg_list
 4931      FEFF5DF8 
 4931      04EB
ARM GAS  tinyBasic.s 			page 125


 4932 1a1e 7047     	    _RET 
 4933              	
 4934              	/********************************
 4935              	  BASIC: POP 
 4936              	  pop an integer out of stack 
 4937              	********************************/    
 4938              	    _FUNC fn_pop 
 4939 1a20 5CF8041B 	    _POP r1 
 4940 1a24 4FF01B00 	    mov r0,#TK_INTGR 
 4941 1a28 7047     	    _RET 
 4942              	
 4943              	/*******************************
 4944              	  BASIC: DROP n 
 4945              	  discard n integer from stack
 4946              	*******************************/
 4947 1a2a 00BF     	    _FUNC drop 
 4948 1a2c 00B5FFF7 	    _CALL expression 
 4948      FEFF5DF8 
 4948      04EB
 4949 1a36 1B28     	    cmp r0,#TK_INTGR 
 4950 1a38 7FF4FEAF 	    bne syntax_error 
 4951 1a3c 4FF00400 	    mov r0,#4 
 4952 1a40 01FB00F0 	    mul r0,r1 
 4953 1a44 8444     	    add DP,r0 
 4954 1a46 7047     	    _RET 
 4955              	
 4956              	/********************************
 4957              	  BASIC: GET(expr) 
 4958              	  retreive nth element from stack 
 4959              	********************************/
 4960              	    _FUNC get 
 4961 1a48 4FF00100 	    mov r0,#1
 4962 1a4c 00B5FFF7 	    _CALL func_args
 4962      FEFF5DF8 
 4962      04EB
 4963 1a56 5CF8040B 	    _POP r0
 4964 1a5a 4FEA8000 	    lsl r0,#2 
 4965 1a5e 5CF80010 	    ldr r1,[DP,r0]
 4966 1a62 4FF01B00 	    mov r0,#TK_INTGR
 4967 1a66 7047     	    _RET 
 4968              	
 4969              	/*************************************
 4970              	  BASIC: PUT slot,value  
 4971              	  store value at nth position on stack
 4972              	**************************************/
 4973              	    _FUNC put
 4974 1a68 4FF00200 	    mov r0,#2
 4975 1a6c 00B5FFF7 	    _CALL arg_list 
 4975      FEFF5DF8 
 4975      04EB
 4976 1a76 BCE80300 	    ldmia DP!,{r0,r1} // value,slot 
 4977 1a7a 4FEA8101 	    lsl r1,#2 
 4978 1a7e 4CF80100 	    str r0,[DP,r1]
 4979 1a82 7047     	    _RET 
 4980              	
 4981              	
 4982              	  .section .rodata.user
ARM GAS  tinyBasic.s 			page 126


 4983              	  .p2align 10 
 4984              	user:
 4985 0000 FFFFFFFF 	  .space 1024,255
 4985      FFFFFFFF 
 4985      FFFFFFFF 
 4985      FFFFFFFF 
 4985      FFFFFFFF 
 4986              	
 4987              	/*************************************************
 4988              	   extra FLASH memory not used by Tiny BASIC
 4989              	   is used to save BASIC programs.
 4990              	************************************************/
 4991              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4992              	  .section .rodata.fs
 4993              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 127


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:87     *ABS*:0000000000000000 GPIO_O_PP
       stm32f103.inc:88     *ABS*:0000000000000004 GPIO_O_OD
ARM GAS  tinyBasic.s 			page 128


       stm32f103.inc:89     *ABS*:0000000000000008 GPIO_O_AFPP
       stm32f103.inc:90     *ABS*:000000000000000c GPIO_O_AFOD
       stm32f103.inc:92     *ABS*:0000000000000002 S2MHZ
       stm32f103.inc:93     *ABS*:0000000000000001 S10MHZ
       stm32f103.inc:94     *ABS*:0000000000000003 S50MHZ
       stm32f103.inc:95     *ABS*:0000000000000001 OSPEED
       stm32f103.inc:96     *ABS*:0000000000000001 OUTPUT_PP
       stm32f103.inc:97     *ABS*:0000000000000005 OUTPUT_OD
       stm32f103.inc:98     *ABS*:0000000000000009 OUTPUT_AFPP
       stm32f103.inc:101    *ABS*:0000000000000000 PULLDOWN
       stm32f103.inc:102    *ABS*:0000000000000001 PULLUP
       stm32f103.inc:104    *ABS*:0000000000000000 ANALOG
       stm32f103.inc:105    *ABS*:0000000000000004 FLOATING
       stm32f103.inc:106    *ABS*:0000000000000008 PULL_RESISTOR
       stm32f103.inc:107    *ABS*:0000000000000000 INPUT_ANA
       stm32f103.inc:108    *ABS*:0000000000000004 INPUT_FLOAT
       stm32f103.inc:109    *ABS*:0000000000000010 INPUT_PD
       stm32f103.inc:110    *ABS*:0000000000000011 INPUT_PU
       stm32f103.inc:113    *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:116    *ABS*:0000000000000000 AFIO_EVCR
       stm32f103.inc:117    *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:118    *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:119    *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:120    *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:121    *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:122    *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:125    *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:126    *ABS*:0000000040004400 USART2_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000040004800 USART3_BASE_ADR
       stm32f103.inc:130    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:131    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:132    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:133    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:134    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:135    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:136    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:139    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:141    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:142    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:143    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:144    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:147    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:149    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:150    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:151    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:152    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:153    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:154    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:155    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:156    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:157    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:158    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:159    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:160    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:161    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:162    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:164    *ABS*:00000000000005fa SCB_VECTKEY
ARM GAS  tinyBasic.s 			page 129


       stm32f103.inc:167    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:168    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:169    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:170    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:171    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:172    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:173    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:174    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:175    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:176    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:177    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:178    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:179    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:180    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:181    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:182    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:183    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:186    *ABS*:0000000000000000 IRQ_WWDG
       stm32f103.inc:187    *ABS*:0000000000000001 IRQ_PVD
       stm32f103.inc:188    *ABS*:0000000000000002 IRQ_TAMPER
       stm32f103.inc:189    *ABS*:0000000000000003 IRQ_RTC
       stm32f103.inc:190    *ABS*:0000000000000004 IRQ_FLASH
       stm32f103.inc:191    *ABS*:0000000000000005 IRQ_RCC
       stm32f103.inc:192    *ABS*:0000000000000006 IRQ_EXTI0
       stm32f103.inc:193    *ABS*:0000000000000007 IRQ_EXIT1
       stm32f103.inc:194    *ABS*:0000000000000008 IRQ_EXTI2
       stm32f103.inc:195    *ABS*:0000000000000009 IRQ_EXIT3
       stm32f103.inc:196    *ABS*:000000000000000a IRQ_EXIT4
       stm32f103.inc:197    *ABS*:000000000000000b IRQ_DMA1CH1
       stm32f103.inc:198    *ABS*:000000000000000c IRQ_DMA1CH2
       stm32f103.inc:199    *ABS*:000000000000000d IRQ_DAM1CH3
       stm32f103.inc:200    *ABS*:000000000000000e IRQ_DMA1CH4
       stm32f103.inc:201    *ABS*:000000000000000f IRQ_DMA1CH5
       stm32f103.inc:202    *ABS*:0000000000000010 IRQ_DMA1CH6
       stm32f103.inc:203    *ABS*:0000000000000011 IRQ_DMA1CH7
       stm32f103.inc:204    *ABS*:0000000000000012 IRQ_ADC1_2
       stm32f103.inc:205    *ABS*:0000000000000013 IRQ_USB_HP_CAN_TX
       stm32f103.inc:206    *ABS*:0000000000000014 IRQ_USB_LP_CAN_RX0
       stm32f103.inc:207    *ABS*:0000000000000015 IRQ_CAN_RX1
       stm32f103.inc:208    *ABS*:0000000000000016 IRQ_CAN_SCE
       stm32f103.inc:209    *ABS*:0000000000000017 IRQ_EXTI9_5
       stm32f103.inc:210    *ABS*:0000000000000018 IRQ_TIM1_BRK
       stm32f103.inc:211    *ABS*:0000000000000019 IRQ_TIM1_UP
       stm32f103.inc:212    *ABS*:000000000000001a IRQ_TIM1_TRG_COM
       stm32f103.inc:213    *ABS*:000000000000001b IRQ_TIM1_CC
       stm32f103.inc:214    *ABS*:000000000000001c IRQ_TIM2
       stm32f103.inc:215    *ABS*:000000000000001d IRQ_TIM3
       stm32f103.inc:216    *ABS*:000000000000001e IRQ_TIM4
       stm32f103.inc:217    *ABS*:000000000000001f IRQ_I2C1_EV
       stm32f103.inc:218    *ABS*:0000000000000020 IRQ_I2C1_ER
       stm32f103.inc:219    *ABS*:0000000000000021 IRQ_I2C2_EV
       stm32f103.inc:220    *ABS*:0000000000000022 IRQ_I2C2_ER
       stm32f103.inc:221    *ABS*:0000000000000023 IRQ_SPI1
       stm32f103.inc:222    *ABS*:0000000000000024 IRQ_SPI2
       stm32f103.inc:223    *ABS*:0000000000000025 IRQ_USART1
       stm32f103.inc:224    *ABS*:0000000000000026 IRQ_USART2
       stm32f103.inc:225    *ABS*:0000000000000027 IRQ_USART3
ARM GAS  tinyBasic.s 			page 130


       stm32f103.inc:226    *ABS*:0000000000000028 IRQ_EXTI15_10
       stm32f103.inc:227    *ABS*:0000000000000029 IRQ_RTCALARM
       stm32f103.inc:228    *ABS*:000000000000002a IRQ_USB_WKUP
       stm32f103.inc:229    *ABS*:000000000000002b IRQ_TIM8_BRK
       stm32f103.inc:230    *ABS*:000000000000002c IRQ_TIM8_UP
       stm32f103.inc:231    *ABS*:000000000000002d IRQ_TIM8_TRG_COM
       stm32f103.inc:232    *ABS*:000000000000002e IRQ_TIM8_CC
       stm32f103.inc:233    *ABS*:000000000000002f IRQ_ADC3
       stm32f103.inc:234    *ABS*:0000000000000030 IRQ_FSMC
       stm32f103.inc:235    *ABS*:0000000000000031 IRQ_SDIO
       stm32f103.inc:236    *ABS*:0000000000000032 IRQ_TIM5
       stm32f103.inc:237    *ABS*:0000000000000033 IRQ_SPI3
       stm32f103.inc:238    *ABS*:0000000000000034 IRQ_UART4
       stm32f103.inc:239    *ABS*:0000000000000035 IRQ_UART5
       stm32f103.inc:240    *ABS*:0000000000000036 IRQ_TIM6
       stm32f103.inc:241    *ABS*:0000000000000037 IRQ_TIM7
       stm32f103.inc:242    *ABS*:0000000000000038 IRQ_DMA2CH1
       stm32f103.inc:243    *ABS*:0000000000000039 IRQ_DMA2CH2
       stm32f103.inc:244    *ABS*:000000000000003a IRQ_DMA2CH3
       stm32f103.inc:245    *ABS*:000000000000003b IRQ_DMA2CH4_5
       stm32f103.inc:249    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:250    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:251    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:252    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:255    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:256    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:257    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:258    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:259    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:260    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:261    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:262    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:265    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:266    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:267    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:268    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:269    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:272    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:273    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:274    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:275    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:278    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:279    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:280    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:281    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:282    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:285    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:286    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:287    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:288    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:289    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:290    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:291    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:292    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:293    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:294    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:295    *ABS*:0000000000000024 ADC_HTR
ARM GAS  tinyBasic.s 			page 131


       stm32f103.inc:296    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:297    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:298    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:299    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:300    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:301    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:302    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:303    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:304    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:305    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:308    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:309    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:310    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:311    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:313    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:314    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:315    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:316    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:317    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:318    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:319    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:320    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:321    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:322    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:323    *ABS*:0000000000000028 TIM_PSC
       stm32f103.inc:324    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:325    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:326    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:327    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:328    *ABS*:000000000000004c TIM_DMAR
       stm32f103.inc:331    *ABS*:0000000040013000 SPI1_BASE_ADR
       stm32f103.inc:332    *ABS*:0000000040003800 SPI2_BASE_ADR
       stm32f103.inc:334    *ABS*:0000000000000000 SPI_CR1
       stm32f103.inc:335    *ABS*:0000000000000004 SPI_CR2
       stm32f103.inc:336    *ABS*:0000000000000008 SPI_SR
       stm32f103.inc:337    *ABS*:000000000000000c SPI_DR
       stm32f103.inc:338    *ABS*:0000000000000010 SPI_CRCPR
       stm32f103.inc:339    *ABS*:0000000000000014 SPI_RXCRCR
       stm32f103.inc:340    *ABS*:0000000000000018 SPI_TXCRCR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
ARM GAS  tinyBasic.s 			page 132


           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
ARM GAS  tinyBasic.s 			page 133


      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
ARM GAS  tinyBasic.s 			page 134


      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 U2_RX_QUEUE
      tbi_macros.inc:137    *ABS*:0000000000000064 U2_COUNT
      tbi_macros.inc:138    *ABS*:0000000000000068 U3_RX_QUEUE
      tbi_macros.inc:139    *ABS*:000000000000006c U3_COUNT
      tbi_macros.inc:140    *ABS*:0000000000000070 VARS
      tbi_macros.inc:141    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:142    *ABS*:00000000000000d8 ARRAY_ADR
      tbi_macros.inc:143    *ABS*:00000000000000dc TRACE_LEVEL
      tbi_macros.inc:144    *ABS*:00000000000000e0 HERE
      tbi_macros.inc:145    *ABS*:00000000000000e0 BASIC_START
      tbi_macros.inc:148    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:149    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:150    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:151    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:152    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:153    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:154    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:155    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:157    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:158    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
ARM GAS  tinyBasic.s 			page 135


       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RANDOMIZE_IDX
       cmd_index.inc:85     *ABS*:000000000000003c READ_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REM_IDX
       cmd_index.inc:87     *ABS*:000000000000003e REST_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RET_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 RND_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RSHIFT_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 RUN_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SAVE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_INIT_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_OFF_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SERVO_POS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SLEEP_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 SPC_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 SPI_DSEL_IDX
       cmd_index.inc:99     *ABS*:000000000000004a SPI_INIT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b SPI_READ_IDX
       cmd_index.inc:101    *ABS*:000000000000004c SPI_SELECT_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SPI_WRITE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e STEP_IDX
       cmd_index.inc:104    *ABS*:000000000000004f STOP_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 STORE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TAB_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 THEN_IDX
ARM GAS  tinyBasic.s 			page 136


       cmd_index.inc:108    *ABS*:0000000000000053 TICKS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 TIMER_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 TMROUT_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 TO_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TONE_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TONE_INIT_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TRACE_IDX
       cmd_index.inc:115    *ABS*:000000000000005a UART_GETC_IDX
       cmd_index.inc:116    *ABS*:000000000000005b UART_INIT_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UART_PUTC_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UBOUND_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UFLASH_IDX
       cmd_index.inc:120    *ABS*:000000000000005f UNTIL_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 XOR_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XPOS_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:319    .text:0000000000000250 search_target
         tinyBasic.s:1773   .text:0000000000000e58 next_token
         tinyBasic.s:383    .text:00000000000002c8 search_label
         tinyBasic.s:2024   .text:00000000000010ac expression
         tinyBasic.s:1326   .text:0000000000000a60 syntax_error
         tinyBasic.s:421    .text:00000000000002f0 search_lineno
         tinyBasic.s:1341   .text:0000000000000a68 tb_error
         tinyBasic.s:351    .text:000000000000029c search_const
         tinyBasic.s:452    .text:0000000000000310 delete_line
         tinyBasic.s:477    .text:000000000000033c create_gap
         tinyBasic.s:503    .text:0000000000000368 insert_line
         tinyBasic.s:542    .text:00000000000003b8 compile
         tinyBasic.s:1679   .text:0000000000000db4 pad
         tinyBasic.s:872    .text:00000000000006c0 parse_int
         tinyBasic.s:615    .text:0000000000000460 comp_token
         tinyBasic.s:698    .text:0000000000000566 store_r0
         tinyBasic.s:966    .text:0000000000000760 skip
         tinyBasic.s:1051   .text:00000000000007c8 is_letter
ARM GAS  tinyBasic.s 			page 137


         tinyBasic.s:782    .text:00000000000005f8 comp_label
         tinyBasic.s:707    .text:0000000000000586 token_exit
         tinyBasic.s:689    .text:0000000000000542 tick2
         tinyBasic.s:725    .text:000000000000058c is_special
         tinyBasic.s:747    .text:00000000000005d0 token_ofs
         tinyBasic.s:638    .text:00000000000004ba tok_idx0
         tinyBasic.s:701    .text:000000000000056c try_number
         tinyBasic.s:642    .text:00000000000004bc single
         tinyBasic.s:742    .text:00000000000005c1 tok_single
         tinyBasic.s:646    .text:00000000000004c4 lt
         tinyBasic.s:652    .text:00000000000004d2 gt
         tinyBasic.s:665    .text:00000000000004f6 bkslash
         tinyBasic.s:672    .text:000000000000050c prt_cmd
         tinyBasic.s:678    .text:000000000000051e quote
         tinyBasic.s:905    .text:00000000000006f8 parse_quote
         tinyBasic.s:683    .text:0000000000000532 tick
         tinyBasic.s:739    .text:00000000000005ac char_list
         tinyBasic.s:740    .text:00000000000005ac $d
         tinyBasic.s:748    .text:00000000000005d0 $d
         tinyBasic.s:765    .text:00000000000005f8 $t
         tinyBasic.s:985    .text:0000000000000778 upper
         tinyBasic.s:2357   .rodata.dictionary:0000000000000898 kword_dict
         tinyBasic.s:1493   .text:0000000000000be4 search_dict
         tinyBasic.s:839    .text:0000000000000694 compress_label
         tinyBasic.s:1082   .text:00000000000007e8 atoi
         tinyBasic.s:936    .text:000000000000072c get_escaped_char
         tinyBasic.s:953    .text:0000000000000756 escaped
         tinyBasic.s:953    .text:0000000000000756 $d
         tinyBasic.s:966    .text:000000000000075e $t
         tinyBasic.s:1003   .text:0000000000000788 is_digit
         tinyBasic.s:1027   .text:00000000000007a4 is_hex
         tinyBasic.s:1127   .text:0000000000000834 cmd_name
         tinyBasic.s:1156   .text:0000000000000860 decompile_line
         tinyBasic.s:1173   .text:00000000000008a6 decomp_loop
         tinyBasic.s:1286   .text:0000000000000a35 single_char
         tinyBasic.s:1281   .text:0000000000000a20 relop_str
         tinyBasic.s:1281   .text:0000000000000a20 $d
         tinyBasic.s:1282   .text:0000000000000a2c ge_str
         tinyBasic.s:1283   .text:0000000000000a2f le_str
         tinyBasic.s:1284   .text:0000000000000a32 ne_str
         tinyBasic.s:1303   .text:0000000000000a48 modulo
         tinyBasic.s:1374   .text:0000000000000af8 compile_error
         tinyBasic.s:1345   .text:0000000000000a70 rt_error
         tinyBasic.s:1389   .text:0000000000000b4a rt_error_msg
         tinyBasic.s:1393   .text:0000000000000b6a err_msg
         tinyBasic.s:1390   .text:0000000000000b5b token_at_msg
         tinyBasic.s:2843   .text.basic:000000000000043a dump01
         tinyBasic.s:1692   .text:0000000000000dc4 warm_start
         tinyBasic.s:1389   .text:0000000000000b4a $d
         tinyBasic.s:1401   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1402   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1403   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1404   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1405   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1406   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1407   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1408   .rodata.tb_error:0000000000000089 err_duplicate
ARM GAS  tinyBasic.s 			page 138


         tinyBasic.s:1409   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1410   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1411   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1412   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1413   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1414   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1415   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1416   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1418   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1419   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1420   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1430   .text:0000000000000bae $t
         tinyBasic.s:1430   .text:0000000000000bb0 skip_line
         tinyBasic.s:1447   .text:0000000000000bb8 BTGL
         tinyBasic.s:1465   .text:0000000000000bbc kword_cmp
         tinyBasic.s:1531   .text:0000000000000c22 cold_start
         tinyBasic.s:1555   .text:0000000000000c8a src_addr
         tinyBasic.s:1557   .text:0000000000000c8e dest_addr
         tinyBasic.s:1678   .text:0000000000000db0 tib
         tinyBasic.s:1559   .text:0000000000000c92 sysvar_size
         tinyBasic.s:1570   .text:0000000000000c98 prt_version
         tinyBasic.s:1626   .text:0000000000000d3c clear_basic
         tinyBasic.s:3694   .text.basic:0000000000000cb8 search_free
         tinyBasic.s:4020   .text.basic:00000000000010a0 exec_autorun
         tinyBasic.s:1556   .text:0000000000000c8a $d
         tinyBasic.s:2202   .rodata:0000000000000000 uzero
         tinyBasic.s:2232   .rodata:00000000000000e4 ulast
         tinyBasic.s:1570   .text:0000000000000c96 $t
         tinyBasic.s:1593   .text:0000000000000cfc version_msg
         tinyBasic.s:1595   .text:0000000000000d1c version
         tinyBasic.s:1594   .text:0000000000000cfc $d
         tinyBasic.s:1610   .text:0000000000000d20 clear_vars
         tinyBasic.s:1661   .text:0000000000000d84 warm_init
         tinyBasic.s:1677   .text:0000000000000dac dstack
         tinyBasic.s:1676   .text:0000000000000da8 mstack
         tinyBasic.s:1676   .text:0000000000000da8 $d
         tinyBasic.s:1680   .text:0000000000000db8 array
         tinyBasic.s:1681   .text:0000000000000dbc ready
         tinyBasic.s:1712   .text:0000000000000ddc cmd_line
         tinyBasic.s:1724   .text:0000000000000e10 interpreter
         tinyBasic.s:1757   .text:0000000000000e50 execute
         tinyBasic.s:3174   .text.basic:000000000000077e let_var
         tinyBasic.s:3179   .text.basic:000000000000078a let_array
         tinyBasic.s:2366   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1829   .text:0000000000000ed0 expect
         tinyBasic.s:1848   .text:0000000000000eec func_args
         tinyBasic.s:1870   .text:0000000000000f1c arg_list
         tinyBasic.s:1905   .text:0000000000000f60 factor
         tinyBasic.s:2131   .text:0000000000001184 get_array_element
         tinyBasic.s:2169   .text:00000000000011ac get_var
         tinyBasic.s:1973   .text:000000000000103c term
         tinyBasic.s:2066   .text:0000000000001108 relation
         tinyBasic.s:2113   .text:000000000000117c relop_jmp
         tinyBasic.s:2085   .text:000000000000114e rel_idx0
         tinyBasic.s:2086   .text:000000000000114e rel_eq
         tinyBasic.s:2103   .text:0000000000001164 rel_false
         tinyBasic.s:2089   .text:0000000000001152 rel_gt
ARM GAS  tinyBasic.s 			page 139


         tinyBasic.s:2092   .text:0000000000001156 rel_ge
         tinyBasic.s:2095   .text:000000000000115a rel_lt
         tinyBasic.s:2098   .text:000000000000115e rel_le
         tinyBasic.s:2101   .text:0000000000001162 rel_ne
         tinyBasic.s:2114   .text:000000000000117c $d
         tinyBasic.s:2131   .text:0000000000001182 $t
         tinyBasic.s:2151   .text:0000000000001198 set_array_element
         tinyBasic.s:2187   .text:00000000000011bc set_var
         tinyBasic.s:4993   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2223   .rodata:0000000000000050 $d
         tinyBasic.s:2240   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2239   *ABS*:0000000000000000 link
         tinyBasic.s:2358   .rodata.dictionary:0000000000000898 LINK
         tinyBasic.s:2241   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2353   .rodata.dictionary:000000000000088c first_link
         tinyBasic.s:2401   .text.basic:0000000000000000 abs
         tinyBasic.s:2415   .text.basic:0000000000000024 analog_read
         tinyBasic.s:2438   .text.basic:0000000000000058 adc
         tinyBasic.s:2478   .text.basic:00000000000000cc bit_and
         tinyBasic.s:2492   .text.basic:00000000000000ec ascii
         tinyBasic.s:3968   .text.basic:0000000000000ffc autorun
         tinyBasic.s:2518   .text.basic:000000000000013c awu
         tinyBasic.s:2559   .text.basic:00000000000001ac bitmask
         tinyBasic.s:2580   .text.basic:00000000000001cc bit_reset
         tinyBasic.s:2603   .text.basic:00000000000001f4 bit_set
         tinyBasic.s:2639   .text.basic:000000000000023c bit_test
         tinyBasic.s:2625   .text.basic:0000000000000218 bit_toggle
         tinyBasic.s:2670   .text.basic:0000000000000284 char
         tinyBasic.s:2662   .text.basic:0000000000000278 cls
         tinyBasic.s:2686   .text.basic:00000000000002a0 const
         tinyBasic.s:2813   .text.basic:0000000000000404 dec_base
         tinyBasic.s:3759   .text.basic:0000000000000d24 directory
         tinyBasic.s:2822   .text.basic:000000000000040c do_loop
         tinyBasic.s:4947   .text.basic:0000000000001a2c drop
         tinyBasic.s:2837   .text.basic:0000000000000414 dump
         tinyBasic.s:2880   .text.basic:00000000000004b8 cmd_end
         tinyBasic.s:2907   .text.basic:00000000000004f8 erase
         tinyBasic.s:2918   .text.basic:000000000000050c for
         tinyBasic.s:3799   .text.basic:0000000000000ddc forget
         tinyBasic.s:4036   .text.basic:00000000000010cc free
         tinyBasic.s:4960   .text.basic:0000000000001a48 get
         tinyBasic.s:2999   .text.basic:00000000000005c8 gosub
         tinyBasic.s:3025   .text.basic:0000000000000608 goto
         tinyBasic.s:3033   .text.basic:0000000000000614 hex_base
         tinyBasic.s:3042   .text.basic:000000000000061c if
         tinyBasic.s:3321   .text.basic:000000000000093c pin_input
         tinyBasic.s:3064   .text.basic:0000000000000634 input_var
         tinyBasic.s:3139   .text.basic:0000000000000738 invert
         tinyBasic.s:3151   .text.basic:0000000000000754 key
         tinyBasic.s:3167   .text.basic:0000000000000768 let
         tinyBasic.s:3210   .text.basic:00000000000007f4 list
         tinyBasic.s:3828   .text.basic:0000000000000e28 load
         tinyBasic.s:3261   .text.basic:00000000000008a4 locate
         tinyBasic.s:3274   .text.basic:00000000000008c8 lshift
         tinyBasic.s:3287   .text.basic:00000000000008e4 new
         tinyBasic.s:2963   .text.basic:0000000000000570 next
         tinyBasic.s:3296   .text.basic:0000000000000904 func_not
ARM GAS  tinyBasic.s 			page 140


         tinyBasic.s:3308   .text.basic:000000000000091c bit_or
         tinyBasic.s:3338   .text.basic:0000000000000968 out
         tinyBasic.s:3354   .text.basic:000000000000098c pad_ref
         tinyBasic.s:3365   .text.basic:0000000000000998 pause
         tinyBasic.s:3388   .text.basic:00000000000009b4 pin_mode
         tinyBasic.s:3443   .text.basic:0000000000000a38 peek8
         tinyBasic.s:3455   .text.basic:0000000000000a54 peek16
         tinyBasic.s:3467   .text.basic:0000000000000a70 peek32
         tinyBasic.s:3480   .text.basic:0000000000000a8c poke8
         tinyBasic.s:3491   .text.basic:0000000000000aa4 poke16
         tinyBasic.s:3502   .text.basic:0000000000000abc poke32
         tinyBasic.s:4938   .text.basic:0000000000001a20 fn_pop
         tinyBasic.s:3515   .text.basic:0000000000000ad4 print
         tinyBasic.s:4929   .text.basic:0000000000001a10 cmd_push
         tinyBasic.s:4973   .text.basic:0000000000001a68 put
         tinyBasic.s:3587   .text.basic:0000000000000bc4 qkey
         tinyBasic.s:3599   .text.basic:0000000000000be0 randomize
         tinyBasic.s:2721   .text.basic:0000000000000324 read
         tinyBasic.s:2771   .text.basic:0000000000000398 restore
         tinyBasic.s:3014   .text.basic:00000000000005f0 return
         tinyBasic.s:3608   .text.basic:0000000000000be8 random
         tinyBasic.s:3634   .text.basic:0000000000000c38 rshift
         tinyBasic.s:3646   .text.basic:0000000000000c54 run
         tinyBasic.s:3883   .text.basic:0000000000000ebc save
         tinyBasic.s:4056   .text.basic:00000000000010e0 servo_init
         tinyBasic.s:4220   .text.basic:00000000000012c4 servo_off
         tinyBasic.s:4256   .text.basic:000000000000132c servo_pos
         tinyBasic.s:4283   .text.basic:0000000000001374 sleep
         tinyBasic.s:4297   .text.basic:0000000000001394 spc
         tinyBasic.s:4311   .text.basic:00000000000013bc spi_deselect
         tinyBasic.s:4339   .text.basic:0000000000001400 spi_init
         tinyBasic.s:4405   .text.basic:00000000000014f4 spi_read
         tinyBasic.s:4432   .text.basic:0000000000001538 spi_select
         tinyBasic.s:4461   .text.basic:000000000000157c spi_write
         tinyBasic.s:2949   .text.basic:0000000000000558 step
         tinyBasic.s:4491   .text.basic:00000000000015c0 stop
         tinyBasic.s:2888   .text.basic:00000000000004c0 store
         tinyBasic.s:4513   .text.basic:0000000000001604 tab
         tinyBasic.s:3053   .text.basic:0000000000000630 then
         tinyBasic.s:4528   .text.basic:000000000000162c get_ticks
         tinyBasic.s:4537   .text.basic:0000000000001634 set_timer
         tinyBasic.s:4549   .text.basic:0000000000001648 timeout
         tinyBasic.s:2936   .text.basic:0000000000000540 to
         tinyBasic.s:4562   .text.basic:000000000000165c tone
         tinyBasic.s:4596   .text.basic:00000000000016b4 tone_init
         tinyBasic.s:4624   .text.basic:00000000000016fc trace
         tinyBasic.s:4652   .text.basic:0000000000001730 ser_getc
         tinyBasic.s:4699   .text.basic:00000000000017a8 ser_init
         tinyBasic.s:4778   .text.basic:0000000000001898 ser_putc
         tinyBasic.s:4640   .text.basic:0000000000001718 ubound
         tinyBasic.s:4798   .text.basic:00000000000018c4 uflash
         tinyBasic.s:4809   .text.basic:00000000000018cc until
         tinyBasic.s:4824   .text.basic:00000000000018ec wait
         tinyBasic.s:4852   .text.basic:0000000000001920 words
         tinyBasic.s:4892   .text.basic:00000000000019cc bit_xor
         tinyBasic.s:4905   .text.basic:00000000000019ec xpos
         tinyBasic.s:4914   .text.basic:00000000000019fc ypos
ARM GAS  tinyBasic.s 			page 141


         tinyBasic.s:2401   .text.basic:0000000000000000 $t
         tinyBasic.s:2425   .text.basic:0000000000000048 adc_loop
         tinyBasic.s:2462   .text.basic:00000000000000a8 adc_off
         tinyBasic.s:2443   .text.basic:000000000000006c adc_on
         tinyBasic.s:3358   .text.basic:0000000000000994 pad_adr
         tinyBasic.s:2747   .text.basic:0000000000000370 seek_next
         tinyBasic.s:2802   .text.basic:00000000000003f6 no_data_line
         tinyBasic.s:2798   .text.basic:00000000000003f0 try_next_line
         tinyBasic.s:2854   .text.basic:0000000000000458 print_dump_header
         tinyBasic.s:2911   .text.basic:0000000000000508 user_space
         tinyBasic.s:2911   .text.basic:0000000000000508 $d
         tinyBasic.s:4984   .rodata.user:0000000000000000 user
         tinyBasic.s:2918   .text.basic:000000000000050c $t
         tinyBasic.s:3002   .text.basic:00000000000005d6 target
         tinyBasic.s:3132   .text.basic:0000000000000734 str_buffer
         tinyBasic.s:3131   .text.basic:0000000000000730 input_buffer
         tinyBasic.s:3131   .text.basic:0000000000000730 $d
         tinyBasic.s:3139   .text.basic:0000000000000738 $t
         tinyBasic.s:3255   .text.basic:00000000000008a0 out_buff
         tinyBasic.s:3255   .text.basic:00000000000008a0 $d
         tinyBasic.s:3261   .text.basic:00000000000008a4 $t
         tinyBasic.s:3358   .text.basic:0000000000000994 $d
         tinyBasic.s:3365   .text.basic:0000000000000998 $t
         tinyBasic.s:3409   .text.basic:00000000000009dc gpio_config
         tinyBasic.s:3572   .text.basic:0000000000000ba0 unget_exit
         tinyBasic.s:3574   .text.basic:0000000000000ba8 print_exit
         tinyBasic.s:3747   .text.basic:0000000000000d20 fs_addr
         tinyBasic.s:3722   .text.basic:0000000000000cdc search_file
         tinyBasic.s:3726   .text.basic:0000000000000ce4 cmp_loop
         tinyBasic.s:3747   .text.basic:0000000000000d20 $d
         tinyBasic.s:3759   .text.basic:0000000000000d24 $t
         tinyBasic.s:3782   .text.basic:0000000000000d9c no_more_file
         tinyBasic.s:3792   .text.basic:0000000000000dd4 fcount
         tinyBasic.s:3792   .text.basic:0000000000000dd4 $d
         tinyBasic.s:3834   .text.basic:0000000000000e4a load_autorun
         tinyBasic.s:3956   .text.basic:0000000000000fe8 fsize
         tinyBasic.s:3957   .text.basic:0000000000000ff4 data_bytes
         tinyBasic.s:3901   .text.basic:0000000000000f04 new_file
         tinyBasic.s:3956   .text.basic:0000000000000fe8 $d
         tinyBasic.s:4008   .text.basic:0000000000001088 write_back
         tinyBasic.s:4013   .text.basic:000000000000109a arun_sign
         tinyBasic.s:4013   .text.basic:000000000000109a $d
         tinyBasic.s:4020   .text.basic:000000000000109e $t
         tinyBasic.s:4114   .text.basic:00000000000011a0 servo_param
         tinyBasic.s:4135   .text.basic:0000000000001200 pwm_config
         tinyBasic.s:4095   .text.basic:000000000000116a remap_t2
         tinyBasic.s:4101   .text.basic:0000000000001178 remap_t3
         tinyBasic.s:4109   .text.basic:0000000000001190 no_remap
         tinyBasic.s:4197   .text.basic:0000000000001294 pwm_dc
         tinyBasic.s:4114   .text.basic:00000000000011a0 $d
         tinyBasic.s:4135   .text.basic:0000000000001200 $t
         tinyBasic.s:4396   .text.basic:00000000000014c2 spi_param
         tinyBasic.s:4397   .text.basic:00000000000014c2 $d
         tinyBasic.s:4405   .text.basic:00000000000014f2 $t
         tinyBasic.s:4770   .text.basic:0000000000001878 uart_param
         tinyBasic.s:4749   .text.basic:0000000000001840 uart_baud
         tinyBasic.s:4771   .text.basic:0000000000001878 $d
ARM GAS  tinyBasic.s 			page 142


         tinyBasic.s:4778   .text.basic:0000000000001898 $t
         tinyBasic.s:4885   .text.basic:00000000000019b6 dict_words
         tinyBasic.s:4885   .text.basic:00000000000019b6 $d
         tinyBasic.s:4892   .text.basic:00000000000019ca $t
         tinyBasic.s:4983   .rodata.user:0000000000000000 $d
         tinyBasic.s:4993   .text.basic:0000000000001a84 $d
         tinyBasic.s:4993   .text:00000000000011cc $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:746    .text:00000000000005cf $d
         tinyBasic.s:1303   .text:0000000000000a45 $d
         tinyBasic.s:1303   .text:0000000000000a46 $t
         tinyBasic.s:1597   .text:0000000000000d1d $d
         tinyBasic.s:1597   .text:0000000000000d1e $t
         tinyBasic.s:1692   .text:0000000000000dc3 $d
         tinyBasic.s:1692   .text:0000000000000dc4 $t
         tinyBasic.s:3799   .text.basic:0000000000000ddb $d
         tinyBasic.s:3799   .text.basic:0000000000000ddc $t
         tinyBasic.s:3968   .text.basic:0000000000000ffb $d
         tinyBasic.s:3968   .text.basic:0000000000000ffc $t

UNDEFINED SYMBOLS
GPIO_AFOD
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
write_page
nvic_enable_irq
get_curpos
