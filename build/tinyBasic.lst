ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command   
  62              	// token with .word attribute 
  63              	  .equ TK_CONST,24    // BASIC constant 
  64              	  .equ TK_LABEL,25
  65              	  .equ TK_INTGR,26    // 32 bits integer 
  66              	  .equ TK_QSTR,27     // quoted string  
  67              	  .equ TK_INVALID,28  // value >=27 are invalid 
  68              	
  69              	//--------------------------------------
  70              	//   error codes 
  71              	//--------------------------------------
  72              	  .equ ERR_NONE,0
  73              	  .equ ERR_MEM_FULL,1 
  74              	  .equ ERR_SYNTAX,2
  75              	  .equ ERR_MATH_OVF,3
  76              	  .equ ERR_DIV0,4 
  77              	  .equ ERR_NO_LINE,5
  78              	  .equ ERR_RUN_ONLY,6
  79              	  .equ ERR_CMD_ONLY,7
  80              	  .equ ERR_DUPLICATE,8
  81              	  .equ ERR_NOT_FILE,9
  82              	  .equ ERR_BAD_VALUE,10
  83              	  .equ ERR_NO_ACCESS,11
  84              	  .equ ERR_NO_DATA,12 
  85              	  .equ ERR_NO_PROG,13
  86              	  .equ ERR_NO_FSPACE,14
  87              	  .equ ERR_BUF_FULL,15
  88              	  .equ ERR_CANT_PROG,16
  89              	  
  90              	
  91              	//--------------------------------------
  92              	//   assembler flags 
  93              	//-------------------------------------
  94              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
ARM GAS  tinyBasic.s 			page 8


  95              	
  96              	.equ CELL_SIZE,4 
  97              	
  98              	
  99              	//-------------------------------
 100              	//  macros used to help debugging
 101              	//-------------------------------
 102              	  .equ DEBUG,0
 103              	
 104              	    UPP .req r4  // base address system variables 
 105              	    VADR .req r5  // address FOR loop variable 
 106              	    LIMIT .req r6   // LOOP limit 
 107              	    INCR  .req  r7  // LOOP increment 
 108              	    T1  .req r8     // temporary register 
 109              	    T2  .req r9     // temporary register 
 110              	    IN  .req r10    //  index in text line or token list 
 111              	    BPTR .req r11   //  buffer address or BASIC line address 
 112              	    DP   .req r12   //  parameter stack pointer 
 113              	
 114              	/***************************
 115              	  SYSTEM variables offset 
 116              	  from UPP  
 117              	***************************/ 
 118              	
 119              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 120              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 121              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 122              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 123              	  .equ DATA,DATAPTR+4 // index to next data item 
 124              	  .equ DATALEN, DATA+4 // length of data line 
 125              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 126              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 127              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 128              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 129              	  .equ FSPTR,SEED+4 //  pointer used by file system
 130              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 131              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 132              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 133              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 134              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 135              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 136              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 137              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 138              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 139              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 140              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 141              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 142              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 143              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 144              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 145              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 146              	
 147              	/* flags used by BASIC interpreter */ 
 148              		.equ FRUN,(1<<0) // programm running
 149              		.equ FTRAP,(1<<1) // inside trap handler 
 150              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 151              		.equ FSTOP,(1<<3) // program stopped  
ARM GAS  tinyBasic.s 			page 9


 152              		.equ FBREAK,(1<<4) // break point flag 
 153              		.equ FCOMP,(1<<5)  // compiling flags 
 154              		.equ FAUTORUN,(1<<6) // auto start program running 
 155              	
 156              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 157              	  
 158              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 159              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 160              	
 161              	/***********************************************
 162              	*       MACROS
 163              	***********************************************/
 164              		.macro _CALL fn /* low level routine call */ 
 165              	 	PUSH {LR}
 166              		BL \fn  
 167              	  POP {LR}
 168              		.endm
 169              		
 170              		.macro	_RET /* return from subroutine */
 171              		BX	LR
 172              		.endm
 173              	
 174              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 175              		MOV \REG, #\LITERAL&0xffff
 176              		MOVT \REG, #\LITERAL>>16
 177              		.endm
 178              	
 179              	// local function header 
 180              	  .macro _FUNC label 
 181              	  .p2align 2 
 182              	  .type \label, %function  
 183              	\label:
 184              	  .endm 
 185              	
 186              	// global function header 
 187              	  .macro _GBL_FUNC label 
 188              	  .global \label 
 189              	  _FUNC \label 
 190              	  .endm 
 191              	
 192              	
 193              	/********************************
 194              	    dictionary structure
 195              	*********************************/
 196              		.macro _dict_entry tok_type,name,cmd_idx 
 197              	  .word LINK 
 198              	  .word \cmd_idx 
 199              		.word \tok_type  	
 200              		.equ LINK,.
 201              		.asciz "\name"
 202              		.p2align 2 
 203              		.endm 
 204              	
 205              	  // pop parameter in register 
 206              	  .macro _POP  reg 
 207              	  ldmia  DP!,{\reg}
 208              	  .endm 
ARM GAS  tinyBasic.s 			page 10


 209              	
 210              	  // push register on parameter stack 
 211              	  .macro _PUSH reg 
 212              	  stmdb DP!,{\reg}
 213              	  .endm 
 214              	
 215              	  // drop n parameters on dstack 
 216              	  .macro _DROP n
 217              	  mov r0,#4*\n
 218              	  add DP,R0 
 219              	  .endm 
 220              	
 221              	  // back to previous token in list 
 222              	  .macro _UNGET_TOKEN 
 223              	  ldr IN,[UPP,#IN_SAVED]
 224              	  ldr BPTR,[UPP,#BASICPTR] 
 225              	  .endm 
 226              	
 227              	 // create a text data 
 228              	 .macro _TEXT label,text
 229              	 \label: .asciz "\text"
 230              	 .p2align 2 
 231              	 .endm 
 232              	
 233              	// command line only 
 234              	  .macro _CLO 
 235              	  ldr r0,[UPP,#FLAGS]
 236              	  tst r0,#FRUN 
 237              	  beq 1f 
 238              	  mov r0,#ERR_CMD_ONLY
 239              	  b tb_error
 240              	1: 
 241              	  .endm 
 242              	
 243              	// run time only 
 244              	  .macro _RTO 
 245              	  ldr r0,[UPP,#FLAGS]
 246              	  tst r0,#FRUN 
 247              	  bne 1f 
 248              	  mov r0,#ERR_CMD_ONLY
 249              	  b tb_error
 250              	1:
 251              	  .endm 
 252              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  tinyBasic.s 			page 11


  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CLS_IDX,CHAR_IDX+1 //
  36              	    .equ CONST_IDX,CLS_IDX+1 //
  37              	    .equ DATA_IDX,CONST_IDX+1 // 
  38              	    .equ DATALN_IDX,DATA_IDX+1 // 
  39              	    .equ DEC_IDX,DATALN_IDX+1 // 
  40              	    .equ DIR_IDX,DEC_IDX+1 // 
  41              	    .equ DO_IDX,DIR_IDX+1 // 
  42              	    .equ DROP_IDX,DO_IDX+1
  43              	    .equ DUMP_IDX, DROP_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ ERASE_IDX,END_IDX+1 
  46              	    .equ FOR_IDX, ERASE_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ FREE_IDX, FORGET_IDX+1 // 
  49              	    .equ GET_IDX,FREE_IDX+1
  50              	    .equ GOSUB_IDX, GET_IDX+1 // 
  51              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  52              	    .equ HEX_IDX, GOTO_IDX+1 // 
  53              	    .equ IF_IDX, HEX_IDX+1 // 
  54              	    .equ IN_IDX,IF_IDX+1
  55              	    .equ INPUT_IDX, IN_IDX+1 // 
  56              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  57              	    .equ KEY_IDX, INVERT_IDX+1 // 
  58              	    .equ LET_IDX, KEY_IDX+1 // 
  59              	    .equ LIST_IDX, LET_IDX+1 // 
  60              	    .equ LOAD_IDX, LIST_IDX+1 // 
  61              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  62              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  63              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  64              	    .equ NEXT_IDX, NEW_IDX+1 // 
  65              	    .equ NOT_IDX, NEXT_IDX+1 // 
  66              	    .equ OR_IDX, NOT_IDX+1 // 
  67              	    .equ OUT_IDX,OR_IDX+1
  68              	    .equ PAD_IDX, OUT_IDX+1 // 
  69              	    .equ PAUSE_IDX, PAD_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  70              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  71              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  72              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  73              	    .equ PEEK32_IDX, PEEK16_IDX+1
  74              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  75              	    .equ POKE16_IDX,POKE8_IDX+1 
  76              	    .equ POKE32_IDX,POKE16_IDX+1
  77              	    .equ POP_IDX,POKE32_IDX+1
  78              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  79              	    .equ PUSH_IDX,PRT_IDX+1
  80              	    .equ PUT_IDX,PUSH_IDX+1
  81              	    .equ QKEY_IDX, PUT_IDX+1 // 
  82              	    .equ READ_IDX, QKEY_IDX+1 // 
  83              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  84              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  85              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  86              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  87              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  88              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  89              	    .equ SAVE_IDX, RUN_IDX+1 // 
  90              	    .equ SLEEP_IDX, SAVE_IDX+1 // 
  91              	    .equ SPC_IDX,SLEEP_IDX+1 //
  92              	    .equ STEP_IDX, SPC_IDX+1 // 
  93              	    .equ STOP_IDX, STEP_IDX+1 // 
  94              	    .equ STORE_IDX,STOP_IDX+1
  95              	    .equ TAB_IDX, STORE_IDX+1 //
  96              	    .equ THEN_IDX,TAB_IDX+1
  97              	    .equ TICKS_IDX, THEN_IDX+1 // 
  98              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  99              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 100              	    .equ TO_IDX, TMROUT_IDX+1 // 
 101              	    .equ TRACE_IDX,TO_IDX+1
 102              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 103              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 104              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 105              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 106              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 107              	    .equ XOR_IDX, WORDS_IDX+1 //
 108              	    .equ XPOS_IDX,XOR_IDX+1 //
 109              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 110              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
ARM GAS  tinyBasic.s 			page 13


  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
ARM GAS  tinyBasic.s 			page 14


 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
ARM GAS  tinyBasic.s 			page 15


 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
ARM GAS  tinyBasic.s 			page 16


 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
ARM GAS  tinyBasic.s 			page 17


 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
ARM GAS  tinyBasic.s 			page 18


 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      EBFD5DF8 
 318      04EB
 319 0256 1928     	    cmp r0,TK_LABEL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      34F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      19FF5DF8 
 325      04EB
 326 027a 1A28     	    cmp r0,#TK_INTGR 
ARM GAS  tinyBasic.s 			page 19


 327 027c 40F0DE83 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 D6E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  constant value  
 344              	  use:
 345              	    r1  temp 
 346              	    T1   *list 
 347              	    T2   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 2DE90203 	    push {r1,T1,T2} 
 351 029c D4F83480 	    ldr T1,[UPP,#TXTEND]
 352 02a0 D4F8D090 	    ldr T2,[UPP,#HERE] 
 353 02a4 C845     	1:  cmp T1,T2 
 354 02a6 0BD5     	    bpl 8f 
 355 02a8 58F8041B 	    ldr r1,[T1],#4
 356 02ac 8842     	    cmp r0,r1 
 357 02ae 02D0     	    beq 2f 
 358 02b0 08F10408 	    add T1,#4
 359 02b4 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b6 D8F80000 	    ldr r0,[T1]
 362 02ba BDE80203 	    pop {r1,T1,T2}
 363 02be 7047     	    _RET
 364              	8:  // that constant doesn't exist 
 365 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 366 02c4 BEE3     	    b tb_error      
 367              	
 368              	
 369              	/***************************************
 370              	    search_label 
 371              	    search target label 
 372              	    input:
 373              	      r1    target label 
 374              	    output:
 375              	      r0    address or 0 
 376              	    use:
 377              	      r2    line address link 
 378              	      r3    search limit 
 379              	****************************************/
 380 02c6 00BF     	    _FUNC search_label 
 381 02c8 0CB4     	    push {r2,r3}
ARM GAS  tinyBasic.s 			page 20


 382 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 383 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 384 02ce 9A42     	1:  cmp r2,r3
 385 02d0 0AD0     	    beq 8f 
 386 02d2 D078     	    ldrb r0,[r2,#3]
 387 02d4 1928     	    cmp  r0,#TK_LABEL 
 388 02d6 02D0     	    beq 4f 
 389 02d8 9078     	2:  ldrb r0,[r2,#2]
 390 02da 0244     	    add r2,r0 
 391 02dc F7E7     	    b 1b 
 392              	4:  // compare label 
 393 02de 5068     	    ldr r0,[R2,#4]
 394 02e0 8142     	    cmp r1,r0 
 395 02e2 F9D1     	    bne 2b 
 396              	    // found label 
 397 02e4 1046     	    mov r0,r2 
 398 02e6 01E0     	    b 9f
 399 02e8 80EA0000 	8:  eor r0,r0 
 400 02ec 0CBC     	9:  pop {r2,r3}
 401 02ee 7047     	    _RET 
 402              	
 403              	
 404              	/***************************************
 405              	    search_lineno 
 406              	    localize BASIC line from its number 
 407              	    input:
 408              	      r0   line# 
 409              	    output: 
 410              	      r0   adr where found || adr new to be inserted 
 411              	      r1   0 found || !0 not found  
 412              	    use:
 413              	      r0   scan address 
 414              	      r1   temp   
 415              	      r2   address end of text
 416              	      r3   target line#
 417              	****************************************/    
 418              	    _GBL_FUNC search_lineno
 419 02f0 0CB4     	    push {r2,r3} 
 420 02f2 0346     	    mov r3,r0 // target 
 421 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 422 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 423 02f8 9042     	1:  cmp r0,r2 
 424 02fa 05D0     	    beq  8f
 425 02fc 0188     	    ldrh r1,[r0]
 426 02fe C91A     	    subs r1,r3 
 427 0300 04D5     	    bpl 9f 
 428 0302 8178     	    ldrb r1,[r0,#2]
 429 0304 0844     	    add r0,r1
 430 0306 F7E7     	    b 1b 
 431 0308 4FF0FF31 	8:  mov r1,#-1 
 432 030c 0CBC     	9:  pop {r2,r3}
 433 030e 7047     	    _RET 
 434              	
 435              	
 436              	/********************************************
 437              	    delete_line 
 438              	    delete BASIC line at addr 
ARM GAS  tinyBasic.s 			page 21


 439              	    input:
 440              	      r0    address line to delete 
 441              	    output:
 442              	      r0    same as input 
 443              	    use: 
 444              	      r1    dest adr
 445              	      r2    bytes to move 
 446              	      T1    length line to delete 
 447              	      T2    txtend 
 448              	********************************************/
 449              	    _FUNC delete_line 
 450 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 451 0314 0146     	    mov r1,r0 // dest 
 452 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 453 031a 4044     	    add r0,T1  // src
 454 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 455 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 456 0324 00B5FFF7 	    _CALL cmove
 456      FEFF5DF8 
 456      04EB
 457 032e A9EB0809 	    sub T2,T1 // txtend-count 
 458 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 459 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 460 033a 7047     	    _RET 
 461              	
 462              	/******************************************
 463              	    create_gap 
 464              	    create a gap in text area to insert new line 
 465              	    input:
 466              	      r0    adr 
 467              	      r1    length 
 468              	    output:
 469              	      r0    adr 
 470              	    use:
 471              	      T1    length 
 472              	      T2    txtend 
 473              	************************************************/
 474              	    _FUNC create_gap 
 475 033c 2DE90503 	    push {r0,r2,T1,T2}
 476 0340 8846     	    mov T1,R1
 477 0342 0144     	    add r1,r0  // dest 
 478 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 479 0348 A9EB0002 	    sub r2,T2,r0 
 480 034c 00B5FFF7 	    _CALL cmove
 480      FEFF5DF8 
 480      04EB
 481 0356 C144     	    add T2,T1 
 482 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 483 035c BDE80503 	    pop {r0,r2,T1,T2}
 484 0360 7047     	    _RET 
 485              	
 486              	/************************************************
 487              	    insert_line 
 488              	    insert BASIC line in text area 
 489              	    first search if line with same number exist 
 490              	    replace if so. 
 491              	    input:
ARM GAS  tinyBasic.s 			page 22


 492              	      r0    *buffer to insert 
 493              	    output:
 494              	      none 
 495              	    use: 
 496              	      T1     *buffer
 497              	      T2     temp  
 498              	************************************************/ 
 499 0362 00BF     	    _FUNC insert_line 
 500 0364 2DE90203 	    push {r1,T1,T2}
 501 0368 8046     	    mov T1,r0 
 502 036a B8F80000 	    ldrh r0,[T1]
 503 036e 00B5FFF7 	    _CALL search_lineno 
 503      FEFF5DF8 
 503      04EB
 504 0378 49B9     	    cbnz  r1, 1f // line# doesn't exist
 505              	// already exist 
 506 037a 00B5FFF7 	    _CALL delete_line // delete old one 
 506      C8FF5DF8 
 506      04EB
 507 0384 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 508 0388 B9F1040F 	    cmp T2,#4 // empty line length==4  
 509 038c 0ED0     	    beq 9f
 510              	1: //insert new line 
 511 038e 98F80210 	    ldrb r1,[T1,#2]
 512 0392 00B5FFF7 	    _CALL create_gap 
 512      D2FF5DF8 
 512      04EB
 513 039c 0146     	    mov r1,r0
 514 039e 4046     	    mov r0,T1 
 515 03a0 8278     	    ldrb r2,[r0,#2]
 516 03a2 00B5FFF7 	    _CALL cmove 
 516      FEFF5DF8 
 516      04EB
 517 03ac BDE80203 	9:  pop {r1,T1,T2}
 518 03b0 7047     	    _RET 
 519              	
 520              	/*********************************
 521              	    compile 
 522              	    tokenize source line save it 
 523              	    in pas buffer.
 524              	    compiled line format: 
 525              	      line_no  2 bytes {0...32767}
 526              	      count    1 byte  
 527              	      tokens   variable length 
 528              	  input:
 529              	     r0   *text buffer 
 530              	     r1   *text length   
 531              	  output:
 532              	    r0    0 stored | -1 immediate 
 533              	  use:
 534              	    r3    tib index   
 535              	    T1    tib
 536              	    T2    pad
 537              	***********************************/
 538 03b2 00BF     	    _FUNC compile
 539 03b4 8046     	    mov T1, r0  // source text buffer 
 540 03b6 6160     	    str r1,[UPP,#COUNT] // save line length 
ARM GAS  tinyBasic.s 			page 23


 541 03b8 DFF8C899 	    ldr T2,pad // tokens buffer
 542 03bc 83EA0303 	    eor r3,r3 // source index  
 543 03c0 206C     	    ldr r0,[UPP,#FLAGS]
 544 03c2 40F02000 	    orr r0,#FCOMP
 545 03c6 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 546 03c8 80EA0000 	    eor r0,r0     
 547 03cc 29F8020B 	    strh r0,[T2],#2   // line no 
 548 03d0 09F8010B 	    strb r0,[T2],#1 // length 
 549 03d4 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 550 03d6 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 551 03da 00B500F0 	    _CALL parse_int 
 551      68F95DF8 
 551      04EB
 552 03e4 0AD0     	    beq 2f 
 553              	// this is a line number     
 554 03e6 0129     	    cmp r1,#1 
 555 03e8 02D5     	    bpl 1f 
 556 03ea 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 557 03ee 29E3     	    b tb_error  
 558 03f0 B1F5803F 	1:  cmp r1,#65536
 559 03f4 F9D5     	    bpl 0b 
 560              	    // write line # to pad 
 561 03f6 29F8031C 	    strh r1,[T2,#-3]
 562 03fa 2360     	    str r3,[UPP,#IN_SAVED]
 563              	2:  // check for pad full 
 564 03fc C145     	    cmp T2,T1
 565 03fe 02DB     	    blt 3f 
 566 0400 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 567 0404 1EE3     	    b tb_error 
 568 0406 00B500F0 	3:  _CALL comp_token 
 568      28F85DF8 
 568      04EB
 569 0410 0028     	    cmp r0,#TK_NONE 
 570 0412 01D0     	    beq 4f 
 571 0414 2360     	    str r3,[UPP,#IN_SAVED]
 572 0416 F1E7     	    b 2b 
 573              	4: // compilation completed 
 574 0418 DFF86839 	    ldr r3,pad 
 575 041c A9EB0300 	    sub r0,T2,r3 // line length 
 576 0420 9870     	    strb r0,[r3,#2]
 577 0422 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 578 0424 1888     	    ldrh r0,[r3] // line number 
 579 0426 70B1     	    cbz r0,8f  
 580              	// insert line in text buffer 
 581 0428 206C     	    ldr r0,[UPP,#FLAGS]
 582 042a 10F0080F 	    tst r0,#FSTOP
 583 042e 02D0     	    beq 7f 
 584 0430 4FF01000 	    mov r0,#ERR_CANT_PROG 
 585 0434 06E3     	    b tb_error 
 586 0436 1846     	7:  mov r0,r3 
 587 0438 00B5FFF7 	    _CALL insert_line 
 587      93FF5DF8 
 587      04EB
 588 0442 4040     	    eors r0,r0 
 589 0444 08E0     	    b 9f 
 590 0446 9B46     	8:  mov BPTR,r3 // *token_list 
 591 0448 4FF0030A 	    mov IN,#3
ARM GAS  tinyBasic.s 			page 24


 592 044c 206C     	    ldr r0,[UPP,#FLAGS]
 593 044e A0F12000 	    sub r0,#FCOMP
 594 0452 2064     	    str r0,[UPP,#FLAGS]
 595 0454 5FF0FF30 	    movs r0,#-1 
 596 0458 7047     	9:  _RET 
 597              	
 598              	/*********************************************
 599              	    compile next token from source 
 600              	    input: 
 601              	      r3 		tib index  
 602              	      T1    tib adr
 603              	      T2    insert point in pad  
 604              	    output:
 605              	      r0     token attribute 
 606              	      r1 		token value
 607              	      r3     tib index updated    
 608              	      T2     updated 
 609              	      use:
 610              	**********************************************/
 611 045a 00BF     	    _FUNC comp_token 
 612 045c 40B4     	    push {r6}
 613 045e 18F80300 	    ldrb r0,[T1,r3]
 614 0462 0040     	    ands r0,r0 
 615 0464 7DD0     	    beq store_r0  // reached end of text  
 616 0466 4FF02000 	    mov r0,#SPACE 
 617 046a 00B500F0 	    _CALL skip  // skip spaces 
 617      70F95DF8 
 617      04EB
 618 0474 18F80300 	    ldrb r0,[T1,r3]
 619 0478 0040     	    ands r0,r0 
 620 047a 72D0     	    beq store_r0  // reached end of text 
 621 047c 03F10103 	    add r3,#1
 622 0480 00B500F0 	    _CALL is_letter 
 622      99F95DF8 
 622      04EB
 623 048a 0BD1     	    bne 1f
 624 048c A3F10103 	    sub r3,#1 
 625 0490 00B500F0 	    _CALL comp_label // parse and compile label 
 625      AFF85DF8 
 625      04EB
 626 049a 1728     	    cmp r0,#TK_CMD 
 627 049c 71D1     	    bne token_exit 
 628 049e 3A29     	    cmp r1,#REM_IDX 
 629 04a0 4DD0     	    beq tick2 
 630 04a2 6EE0     	    b token_exit 
 631 04a4 00B500F0 	1:  _CALL is_special
 631      6FF85DF8 
 631      04EB
 632 04ae DFF8286D 	    ldr r6,=token_ofs
 633 04b2 D6E811F0 	    tbh [r6,r1] 
 634              	tok_idx0:     
 635              	//  not special char.  
 636 04b6 57E0     	    b try_number 
 637              	// single char token with no value 
 638              	single: 
 639 04b8 DFF8206D 	    ldr r6,=tok_single
 640 04bc 705C     	    ldrb r0,[r6,r1] 
ARM GAS  tinyBasic.s 			page 25


 641 04be 50E0     	    b store_r0
 642              	lt:
 643 04c0 4FF00F00 	    mov r0,#TK_LT
 644 04c4 18F80310 	    ldrb r1,[T1,r3]
 645 04c8 3E29     	    cmp r1,#'>' 
 646 04ca 06D0     	    beq 1f
 647 04cc 0AE0     	    b 2f 
 648              	gt:
 649 04ce 4FF00E00 	    mov r0,#TK_GT 
 650 04d2 18F80310 	    ldrb r1,[T1,r3]
 651 04d6 3C29     	    cmp r1,#'<'
 652 04d8 04D1     	    bne 2f  
 653 04da 03F10103 	1:  add r3,#1
 654 04de 4FF01200 	    mov r0,#TK_NE  
 655 04e2 3EE0     	    b store_r0
 656 04e4 3D29     	2:  cmp r1,#'=' 
 657 04e6 3CD1     	    bne store_r0  
 658 04e8 03F10103 	    add r3,#1
 659 04ec 00F10200 	    add r0,#2
 660 04f0 37E0     	    b store_r0       
 661              	bkslash:
 662 04f2 18F80310 	    ldrb r1,[T1,r3]
 663 04f6 03F10103 	    add r3,#1
 664 04fa 4FF01300 	    mov r0,#TK_CHAR 
 665 04fe 09F8010B 	    strb r0,[T2],#1
 666 0502 09F8011B 	    strb r1,[T2],#1
 667 0506 3CE0     	    b token_exit 
 668              	prt_cmd: 
 669 0508 4FF01700 	    mov r0,#TK_CMD 
 670 050c 4FF03501 	    mov r1,#PRT_IDX
 671 0510 09F8010B 	    strb r0,[T2],#1
 672 0514 09F8011B 	    strb r1,[T2],#1
 673 0518 33E0     	    b token_exit 
 674              	quote:
 675 051a 4FF01B00 	    mov r0,#TK_QSTR 
 676 051e 09F8010B 	    strb r0,[T2],#1
 677 0522 00B500F0 	    _CALL parse_quote
 677      E0F85DF8 
 677      04EB
 678 052c 29E0     	    b token_exit
 679              	tick: 
 680              	// copy comment in pad 
 681 052e 4FF01700 	    mov r0,#TK_CMD 
 682 0532 4FF03A01 	    mov r1,#REM_IDX 
 683 0536 09F8010B 	    strb r0,[T2],#1 
 684 053a 09F8011B 	    strb r1,[T2],#1
 685              	tick2:
 686 053e 08EB0300 	    add r0,T1,r3 
 687 0542 4946     	    mov r1,T2 
 688 0544 00B5FFF7 	    _CALL strcpy 
 688      FEFF5DF8 
 688      04EB
 689 054e 00B5FFF7 	    _CALL strlen 
 689      FEFF5DF8 
 689      04EB
 690 0558 8144     	    add T2,r0
 691 055a 09F10109 	    add T2,#1
ARM GAS  tinyBasic.s 			page 26


 692 055e 6368     	    ldr r3,[UPP,#COUNT]
 693 0560 0FE0     	    b token_exit
 694              	store_r0: 
 695 0562 09F8010B 	    strb r0,[T2],#1
 696 0566 0CE0     	    b token_exit 
 697              	try_number:
 698 0568 A3F10103 	    sub r3,#1
 699 056c 00B500F0 	    _CALL parse_int  
 699      9FF85DF8 
 699      04EB
 700 0576 00F06182 	    beq syntax_error  
 701 057a 09F8010B 	    strb r0,[T2],#1 
 702 057e 49F8041B 	    str r1,[T2],#4
 703              	token_exit:
 704 0582 40BC     	    pop {r6}
 705 0584 7047     	    _RET 
 706              	
 707              	
 708              	/****************************
 709              	    is_special  
 710              	    check for non alphanum
 711              	    input:
 712              	      r0    character to scan 
 713              	    output:
 714              	      r0    character 
 715              	      r1    0 || index 
 716              	    use: 
 717              	      r1    scan index 
 718              	      r2    temp 
 719              	      r3    char_list 
 720              	*****************************/
 721 0586 00BF     	    _FUNC is_special 
 722 0588 0CB4     	    push {r2,r3}
 723 058a 4FF00101 	    mov r1,#1
 724 058e DFF8503C 	    ldr r3,=char_list 
 725 0592 5A5C     	1:  ldrb r2,[r3,r1]
 726 0594 22B1     	    cbz r2,8f 
 727 0596 8242     	    cmp r2,r0 
 728 0598 04D0     	    beq 9f 
 729 059a 01F10101 	    add r1,#1 
 730 059e F8E7     	    b 1b
 731 05a0 81EA0101 	8:  eor r1,r1     
 732 05a4 0CBC     	9:  pop {r2,r3}
 733 05a6 7047     	    _RET 
 734              	
 735              	char_list:
 736 05a8 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 736      28293A23 
 736      2D2B2A2F 
 736      253D3C3E 
 736      5C3F2722 
 737              	
 738              	tok_single:
 739 05bd 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 739      050601
 740 05c4 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 740      0A0B0D
ARM GAS  tinyBasic.s 			page 27


 741              	
 742 05cb 00       	  .p2align 2
 743              	token_ofs:
 744 05cc 0000     	  .hword  0 // not found
 745              	  // TK_COMMA...TK_EQUAL , 13 
 746 05ce 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 746      01000100 
 747 05d6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05de 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05e6 0100     	  .hword  (single-tok_idx0)/2    
 750              	  // '<','>'
 751 05e8 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 752              	  // '\'
 753 05ec 1E00     	  .hword  (bkslash-tok_idx0)/2
 754              	  // '?' 
 755 05ee 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 756              	  // "'"  
 757 05f0 3C00     	  .hword  (tick-tok_idx0)/2 
 758              	  // '"' quote 
 759 05f2 3200     	  .hword (quote-tok_idx0)/2
 760              	
 761              	  .p2align 2
 762              	
 763              	/****************************
 764              	    comp_label
 765              	    compile a label 
 766              	    it can be a target|keyword|
 767              	    variable| user constant  
 768              	    label form: [A..Z]+
 769              	    input:
 770              	      *buffer 
 771              	    output:
 772              	      r0  token type 
 773              	      r1  token value 
 774              	      T2  updated 
 775              	      R3  updated
 776              	    use:
 777              	****************************/
 778              	    _FUNC comp_label
 779 05f4 24B4     	    push {r2,r5}
 780 05f6 4DF8049D 	    push {T2}
 781 05fa 82EA0202 	    eor r2,r2
 782 05fe 4FF00605 	    mov r5,#6 
 783 0602 18F80300 	1:  ldrb r0,[T1,r3]
 784 0606 00B500F0 	    _CALL is_letter 
 784      D6F85DF8 
 784      04EB
 785 0610 09D1     	    bne 2f // not letter 
 786 0612 00B500F0 	    _CALL upper 
 786      A8F85DF8 
 786      04EB
 787 061c 09F8010B 	    strb r0,[T2],#1
 788 0620 03F10103 	    add r3,#1
 789 0624 EDE7     	    b 1b 
 790 0626 80EA0000 	2:  eor r0,r0 
ARM GAS  tinyBasic.s 			page 28


 791 062a 89F80000 	    strb r0,[T2]
 792              	// is this a variable ?
 793 062e 5DF8049B 	    pop {T2}
 794 0632 99F80100 	    ldrb r0,[T2,#1]
 795 0636 30B9     	    cbnz r0,3f // length >1 not variable 
 796 0638 99F80010 	    ldrb r1,[T2]
 797 063c A1F14101 	    sub r1,#'A' 
 798 0640 4FF01400 	    mov r0,#TK_VAR
 799 0644 1CE0     	    b 8f 
 800              	3:  // try keyword 
 801 0646 4846     	    mov r0,T2 
 802 0648 DFF8981B 	    ldr r1,=kword_dict  
 803 064c 00B500F0 	    _CALL search_dict 
 803      B7FA5DF8 
 803      04EB
 804 0656 30B1     	    cbz r0,4f
 805 0658 1A28     	    cmp r0,TK_INTGR 
 806 065a 11D1     	    bne 8f
 807              	    //system constant  
 808 065c 09F8010B 	    strb r0,[T2],#1
 809 0660 49F8041B 	    str r1,[T2],#4
 810 0664 10E0     	    b 9f 
 811              	4: // must be a label 
 812 0666 4846     	    mov r0,T2 
 813 0668 00B500F0 	    _CALL compress_label
 813      0FF85DF8 
 813      04EB
 814 0672 4FF01900 	    mov r0,#TK_LABEL
 815 0676 09F8010B 	    strb r0,[T2],#1
 816 067a 49F8041B 	    str r1,[T2],#4
 817 067e 03E0     	    b 9f 
 818 0680 09F8010B 	8:  strb r0,[T2],#1
 819 0684 09F8011B 	    strb r1,[T2],#1          
 820 0688 24BC     	9:  pop {r2,r5}
 821 068a 7047     	    _RET 
 822              	
 823              	/********************************
 824              	    compress_label 
 825              	    compress label in integer 
 826              	    maximum 6 character, 
 827              	    ignore extras characters 
 828              	    input:
 829              	      r0  *label 
 830              	    output:
 831              	      r1   compressed label 
 832              	********************************/
 833              	    _FUNC compress_label
 834 068c 0CB4     	    push {r2,r3}
 835 068e 82EA0202 	    eor r2,r2 // compress value
 836 0692 4FF00603 	    mov r3,#6 // max characters 
 837 0696 10F8011B 	1:  ldrb r1,[r0],#1 
 838 069a 31B1     	    cbz r1,2f 
 839 069c A1F14001 	    sub r1,#'@'
 840 06a0 4FEA4212 	    lsl r2,#5
 841 06a4 0A44     	    add r2,r1
 842 06a6 013B     	    subs r3,#1 
 843 06a8 F5D1     	    bne 1b 
ARM GAS  tinyBasic.s 			page 29


 844 06aa 1146     	2:  mov r1,r2     
 845 06ac 0CBC     	    pop {r2,r3}
 846 06ae 7047     	    _RET 
 847              	
 848              	
 849              	/****************************
 850              	    parse_int 
 851              	    parse an integer from text
 852              	    if not valid integer 
 853              	    r1 return *buffer else 
 854              	    *buffer is incremented after integer 
 855              	  input:
 856              	    r0   *buffer 
 857              	  output:
 858              	    r0   TK_INTGR|TK_NONE
 859              	    r1   int|0   
 860              	  use:
 861              	    r3   tib index updated     
 862              	*****************************/
 863              	    _FUNC parse_int 
 864 06b0 4FF00A01 	    mov r1,#10 // default base 
 865 06b4 18F80300 	    ldrb r0,[T1,r3]
 866 06b8 2428     	    cmp r0,'$' 
 867 06ba 02D1     	    bne 2f 
 868 06bc 4FF01001 	    mov r1,#16 // hexadecimal number 
 869 06c0 03E0     	    b 3f  
 870 06c2 2628     	2:  cmp r0,#'&' 
 871 06c4 03D1     	    bne 4f
 872 06c6 4FF00201 	    mov r1,#2 //binary number  
 873 06ca 03F10103 	3:  add r3,#1
 874 06ce 03EB0800 	4:  add r0,r3,T1 
 875 06d2 00B5FFF7 	    _CALL atoi 
 875      FEFF5DF8 
 875      04EB
 876 06dc 10B1     	    cbz r0,9f
 877 06de 0344     	    add r3,r0
 878 06e0 4FF01A00 	    mov r0,#TK_INTGR
 879 06e4 0040     	9:  ands r0,r0   
 880 06e6 7047     	    _RET 
 881              	
 882              	/*********************************************
 883              	    parse_quote 
 884              	    parse quoted string 
 885              	    input: 
 886              	      r3 		tib index  
 887              	      T1    tib adr
 888              	      T2    insert point in pad  
 889              	    output:
 890              	      r0     token attribute 
 891              	      r1 		*str 
 892              	      r3     tib index updated    
 893              	      T2     updated 
 894              	      use:
 895              	*********************************************/
 896              	    _FUNC parse_quote
 897 06e8 4DF8049D 	    push {T2} 
 898 06ec 18F80300 	1:  ldrb r0,[T1,r3]
ARM GAS  tinyBasic.s 			page 30


 899 06f0 03F10103 	    add r3,#1 
 900 06f4 2228     	    cmp r0,#'"'
 901 06f6 09D0     	    beq 9f 
 902 06f8 5C28     	    cmp r0,#'\\'
 903 06fa 04D1     	    bne 2f 
 904 06fc 00B500F0 	    _CALL get_escaped_char 
 904      0DF85DF8 
 904      04EB
 905 0706 09F8010B 	2:  strb r0,[T2],#1
 906 070a EFE7     	    b 1b 
 907 070c 80EA0000 	9:  eor  r0,r0
 908 0710 09F8010B 	    strb r0,[T2],#1
 909 0714 4FF01B00 	    mov r0,#TK_QSTR
 910 0718 02BC     	    pop {r1}
 911 071a 7047     	    _RET 
 912              	
 913              	/**********************************************
 914              	    get_escaped_char 
 915              	    convert "\c" in quoted string 
 916              	    input:
 917              	      r0 
 918              	      r3   index 
 919              	      T1   tib 
 920              	    output:
 921              	      r0   replacement char
 922              	      r3   updated 
 923              	    use:
 924              	      r1   *table 
 925              	      r2   temp 
 926              	**********************************************/
 927              	    _FUNC get_escaped_char 
 928 071c 06B4     	    push {r1,r2}
 929 071e 18F80300 	    ldrb r0,[T1,r3]
 930 0722 03F10103 	    add r3,#1
 931 0726 2228     	    cmp r0,#'"' 
 932 0728 0BD0     	    beq 9f 
 933 072a DFF8BC1A 	1:  ldr r1,=escaped 
 934 072e 11F8012B 	2:  ldrb r2,[r1],#1
 935 0732 12B1     	    cbz r2,6f 
 936 0734 8242     	    cmp r2,r0 
 937 0736 02D0     	    beq 7f 
 938 0738 F9E7     	    b 2b
 939 073a A0F10702 	6:  sub r2,r0,#7     
 940 073e 02F10700 	7:  add r0,r2,#7
 941 0742 06BC     	9:  pop {r1,r2}   
 942 0744 7047     	    _RET
 943              	
 944 0746 6162746E 	escaped: .asciz "abtnvfr"
 944      76667200 
 945              	
 946              	/*********************************************
 947              	   skip character in TIB 
 948              	   input:
 949              	      r0    character to skip 
 950              	      r3    tib index 
 951              	      T1    tib adr
 952              	    output: 
ARM GAS  tinyBasic.s 			page 31


 953              	      r3    updated
 954              	    use:
 955              	      r1     
 956              	**********************************************/   
 957 074e 00BF     	    _FUNC skip
 958 0750 02B4     	    push {r1} 
 959 0752 18F80310 	1:  ldrb r1,[T1,r3]
 960 0756 8142     	    cmp r1,r0
 961 0758 02D1     	    bne 2f
 962 075a 03F10103 	    add r3,#1 
 963 075e F8E7     	    b 1b 
 964 0760 2360     	2:  str r3,[UPP,#IN_SAVED]
 965 0762 02BC     	    pop {r1}
 966 0764 7047     	    _RET
 967              	
 968              	/********************************************
 969              	    upper
 970              	    convert character in upper case 
 971              	    input: 
 972              	      r0   character 
 973              	    output:
 974              	      r0   upper case character 
 975              	*********************************************/
 976 0766 00BF     	    _FUNC upper 
 977 0768 6128     	    cmp r0,#'a' 
 978 076a 03DB     	    blt 9f 
 979 076c 7A28     	    cmp r0,#'z' 
 980 076e 01DC     	    bgt 9f 
 981 0770 00F05F00 	    and r0,#0x5f 
 982 0774 7047     	9:  _RET 
 983              	
 984              	/***************************************
 985              	   is_digit 
 986              	   check if char is decimal digit.
 987              	   convert to decimal digit.
 988              	   input:
 989              	      r0    char 
 990              	   output:
 991              	      r0        if Z then converted digit else not changed
 992              	      Z flag    1 true | 0 false  
 993              	***************************************/
 994 0776 00BF     	    _GBL_FUNC is_digit 
 995 0778 02B4     	    push {r1} 
 996 077a 4FF0FF31 	    mov r1,#-1   
 997 077e 3028     	    cmp r0,#'0' 
 998 0780 05DB     	    blt 9f
 999 0782 3A28     	    cmp r0,'9'+1
 1000 0784 03D5     	    bpl 9f 
 1001 0786 81EA0101 	    eor r1,r1 
 1002 078a A0F13000 	    sub r0,#'0'  
 1003              	9:   
 1004 078e 0940     	    ands r1,r1
 1005 0790 02BC     	    pop {r1} 
 1006 0792 7047     	    _RET 
 1007              	
 1008              	/***************************************
 1009              	    is_hex 
ARM GAS  tinyBasic.s 			page 32


 1010              	    check for hexadecimal digit 
 1011              	    convert to hex digit.
 1012              	    input:
 1013              	      r0    
 1014              	    output:
 1015              	      r0         if Z then converted digit 
 1016              	      Z  flag    1 true | 0 false         
 1017              	***************************************/
 1018              	    _FUNC is_hex 
 1019 0794 02B4     	    push {r1}
 1020 0796 80EA0000 	    eor r0,r0 
 1021 079a 4128     	    cmp r0,#'A' 
 1022 079c 01D4     	    bmi 1f 
 1023 079e A0F10700 	    sub r0,#7 
 1024 07a2 A0F13000 	1:  sub r0,#'0'
 1025 07a6 01D4     	    bmi 2f 
 1026 07a8 1028     	    cmp r0,#16
 1027 07aa 01D4     	    bmi 9f 
 1028 07ac 6FEA0101 	2:  mvn r1,r1  
 1029 07b0 0940     	9:  ands r1,r1 
 1030 07b2 02BC     	    pop {r1}
 1031 07b4 7047     	    _RET 
 1032              	
 1033              	/***************************************
 1034              	    is_letter 
 1035              	    check if character is {a..z,A..Z} 
 1036              	  input:
 1037              	    r0   character 
 1038              	  output: 
 1039              	    r0       same character 
 1040              	    Z flag   1 true | 0 false  
 1041              	****************************************/
 1042 07b6 00BF     	    _FUNC is_letter
 1043 07b8 02B4     	    push {r1} 
 1044 07ba 81EA0101 	    eor r1,r1 
 1045 07be 4128     	    cmp r0,#'A' 
 1046 07c0 05D4     	    bmi 8f 
 1047 07c2 5B28     	    cmp r0,#'Z'+1 
 1048 07c4 05D4     	    bmi 9f
 1049 07c6 6128     	    cmp r0,#'a' 
 1050 07c8 01D4     	    bmi 8f 
 1051 07ca 7B28     	    cmp r0,#'z'+1
 1052 07cc 01D4     	    bmi 9f  
 1053 07ce 6FEA0101 	8:  mvn r1,r1  
 1054 07d2 0940     	9:  ands r1,r1 
 1055 07d4 02BC     	    pop {r1}
 1056 07d6 7047     	    _RET 
 1057              	
 1058              	
 1059              	/******************************************
 1060              	    atoi 
 1061              	    convert ascii to integer 
 1062              	    input:
 1063              	      r0   *buffer 
 1064              	      r1   base 
 1065              	    output:
 1066              	      r0   0 no integer found 
ARM GAS  tinyBasic.s 			page 33


 1067              	      r1   integer
 1068              	    use:
 1069              	      r2   base  
 1070              	      T1   *buffer 
 1071              	      T2   digit count  
 1072              	******************************************/
 1073              	    _GBL_FUNC atoi 
 1074 07d8 2DE90403 	    push {r2,T1,T2}
 1075 07dc 8046     	    mov T1,r0  // *buffer 
 1076 07de 0A46     	    mov r2,r1  // base  
 1077 07e0 81EA0101 	    eor r1,r1  // converted integer 
 1078 07e4 89EA0909 	    eor T2,T2  // digit count 
 1079 07e8 18F8010B 	1:  ldrb r0,[T1],#1
 1080 07ec 00B5FFF7 	    _CALL upper 
 1080      BBFF5DF8 
 1080      04EB
 1081 07f6 3028     	    cmp r0,#'0'
 1082 07f8 0FD4     	    bmi 8f
 1083 07fa 3A28     	    cmp r0,#'9'+1 
 1084 07fc 03D4     	    bmi 2f 
 1085 07fe 4128     	    cmp r0,#'A'
 1086 0800 0BD4     	    bmi 8f 
 1087 0802 A0F10700 	    sub r0,#7 
 1088 0806 A0F13000 	2:  sub r0,#'0' 
 1089 080a 9042     	    cmp r0,r2
 1090 080c 05D5     	    bpl 8f  
 1091 080e 02FB01F1 	    mul r1,r2 
 1092 0812 0144     	    add r1,r0
 1093 0814 09F10109 	    add T2,#1
 1094 0818 E6E7     	    b 1b 
 1095 081a 4846     	8:  mov r0,T2  
 1096 081c BDE80403 	    pop {r2,T1,T2}
 1097 0820 7047     	    _RET 
 1098              	
 1099              	
 1100              	
 1101              	/*******************
 1102              	    DECOMPILER 
 1103              	*******************/
 1104              	
 1105              	/********************************************
 1106              	    cmd_name 
 1107              	    search bytecode in dictionary and 
 1108              	    return its name 
 1109              	  input:
 1110              	    r0    keyword bytecode 
 1111              	  ouput:
 1112              	    r0    name string 
 1113              	  use:
 1114              	    T1    link 
 1115              	    T2    tmp 
 1116              	*********************************************/
 1117 0822 00BF     	    _FUNC cmd_name 
 1118 0824 2DE90003 	    push {T1,T2}
 1119 0828 DFF8B889 	    ldr T1,=kword_dict 
 1120 082c 58F8089C 	1:  ldr T2,[T1,#-8]
 1121 0830 8145     	    cmp T2,r0 
ARM GAS  tinyBasic.s 			page 34


 1122 0832 04D0     	    beq 2f 
 1123 0834 58F80C8C 	    ldr T1,[T1,#-12]
 1124 0838 B8F1000F 	    cmp T1,#0
 1125 083c F6D1     	    bne 1b  
 1126 083e 4046     	2:  mov r0,T1 
 1127 0840 BDE80003 	    pop {T1,T2}
 1128 0844 7047     	    _RET
 1129              	
 1130              	/*****************************
 1131              	  decompile_line 
 1132              	  detokenize BASIC line 
 1133              	  input:
 1134              	    r0  *token list 
 1135              	    r1  *output buffer 
 1136              	  output:
 1137              	    r0  *output buffer (.asciz) 
 1138              	  use:
 1139              	    T1  *output buffer
 1140              	    BPTR  *token list
 1141              	    IN  offset in token list  
 1142              	******************************/
 1143 0846 00BF     	    _GBL_FUNC decompile_line
 1144 0848 2DE90E01 	    push {r1,r2,r3,T1} 
 1145 084c 8346     	    mov BPTR,r0 
 1146 084e 4FF0000A 	    mov IN,#0
 1147 0852 8846     	    mov T1,r1 
 1148 0854 3BF80A00 	    ldrh r0,[BPTR,IN]
 1149 0858 0AF1020A 	    add IN,#2 
 1150 085c 4FF00A01 	    mov r1,#10 
 1151 0860 00B5FFF7 	    _CALL itoa
 1151      FEFF5DF8 
 1151      04EB
 1152 086a 4146     	    mov r1,T1
 1153 086c 00B5FFF7 	    _CALL strcpy
 1153      FEFF5DF8 
 1153      04EB
 1154 0876 4046     	    mov r0,T1 
 1155 0878 00B5FFF7 	    _CALL strlen
 1155      FEFF5DF8 
 1155      04EB
 1156 0882 8044     	    add T1,r0 
 1157 0884 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1158 0888 0AF1010A 	    add IN,#1 
 1159 088c 6060     	    str r0,[UPP,#COUNT]
 1160              	decomp_loop:
 1161 088e 00B500F0 	    _CALL next_token
 1161      CAFA5DF8 
 1161      04EB
 1162 0898 0028     	    cmp r0,#TK_NONE 
 1163 089a 00F0A880 	    beq 9f
 1164 089e 1028     	    cmp r0,#TK_GE 
 1165 08a0 05D5     	    bpl 1f 
 1166 08a2 DFF84819 	    ldr r1,=single_char 
 1167 08a6 085C     	    ldrb r0,[r1,r0]
 1168 08a8 08F8010B 	    strb r0,[T1],#1 
 1169 08ac EFE7     	    b decomp_loop
 1170              	1: 
ARM GAS  tinyBasic.s 			page 35


 1171 08ae 1328     	    cmp r0,#TK_CHAR  
 1172 08b0 14D5     	    bpl 2f 
 1173 08b2 A0F11000 	    sub r0,#TK_GE
 1174 08b6 4FEA8000 	    lsl r0,#2 
 1175 08ba DFF83419 	    ldr r1,=relop_str 
 1176 08be 0858     	    ldr r0,[r1,r0]
 1177 08c0 4146     	    mov r1,T1 
 1178 08c2 00B5FFF7 	    _CALL strcpy 
 1178      FEFF5DF8 
 1178      04EB
 1179 08cc 4046     	    mov r0,T1 
 1180 08ce 00B5FFF7 	    _CALL strlen 
 1180      FEFF5DF8 
 1180      04EB
 1181 08d8 8044     	    add T1,r0 
 1182 08da D8E7     	    b decomp_loop
 1183 08dc 1328     	2:  cmp r0,#TK_CHAR 
 1184 08de 06D1     	    bne 3f 
 1185 08e0 4FF05C00 	    mov r0,#'\\'
 1186 08e4 08F8010B 	    strb r0,[T1],#1
 1187 08e8 08F8011B 	    strb r1,[T1],#1
 1188              	//    mov r0,#SPACE 
 1189              	//    strb r0,[T1],#1
 1190 08ec CFE7     	    b decomp_loop 
 1191 08ee 1428     	3:  cmp r0,#TK_VAR 
 1192 08f0 04D1     	    bne 4f 
 1193 08f2 01F14100 	    add r0,r1,'A'
 1194 08f6 08F8010B 	    strb r0,[T1],#1 
 1195 08fa C8E7     	    b decomp_loop 
 1196 08fc 1928     	4:  cmp r0,#TK_LABEL 
 1197 08fe 32D5     	    bpl 5f   
 1198 0900 03B4     	    push {r0,r1}
 1199 0902 4FF02000 	    mov r0,#SPACE 
 1200 0906 08F8010B 	    strb r0,[T1],#1  
 1201 090a 0846     	    mov r0,r1 
 1202 090c 00B5FFF7 	    _CALL cmd_name
 1202      89FF5DF8 
 1202      04EB
 1203 0916 4146     	    mov r1,T1 
 1204 0918 00B5FFF7 	    _CALL strcpy 
 1204      FEFF5DF8 
 1204      04EB
 1205 0922 4046     	    mov r0,T1 
 1206 0924 00B5FFF7 	    _CALL strlen 
 1206      FEFF5DF8 
 1206      04EB
 1207 092e 8044     	    add T1,r0
 1208 0930 03BC     	    pop {r0,r1}
 1209 0932 1528     	    cmp r0,#TK_IFUNC
 1210 0934 03D0     	    beq 4f
 1211 0936 4FF02000 	    mov r0,#SPACE 
 1212 093a 08F8010B 	    strb r0,[T1],#1 
 1213 093e 3A29     	4:  cmp r1,#REM_IDX
 1214 0940 A5D1     	    bne decomp_loop 
 1215 0942 0BEB0A00 	    add r0,BPTR,IN
 1216 0946 4146     	    mov r1,T1   
 1217 0948 00B5FFF7 	    _CALL strcpy
ARM GAS  tinyBasic.s 			page 36


 1217      FEFF5DF8 
 1217      04EB
 1218 0952 4046     	    mov r0,T1 
 1219 0954 00B5FFF7 	    _CALL strlen
 1219      FEFF5DF8 
 1219      04EB
 1220 095e 8044     	    add T1,r0
 1221 0960 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1222 0964 43E0     	    b 9f 
 1223 0966 1A28     	5:  cmp r0,#TK_INTGR
 1224 0968 14D1     	    bne 6f  
 1225 096a 0846     	    mov r0,r1 
 1226 096c A169     	    ldr r1,[UPP,#BASE]
 1227 096e 00B5FFF7 	    _CALL itoa
 1227      FEFF5DF8 
 1227      04EB
 1228 0978 4146     	    mov r1,T1 
 1229 097a 00B5FFF7 	    _CALL strcpy
 1229      FEFF5DF8 
 1229      04EB
 1230 0984 4046     	    mov r0,T1 
 1231 0986 00B5FFF7 	    _CALL strlen
 1231      FEFF5DF8 
 1231      04EB
 1232 0990 8044     	    add T1,r0 
 1233 0992 7CE7     	    b decomp_loop 
 1234 0994 1928     	6:  cmp r0,#TK_LABEL
 1235 0996 13D1     	    bne 7f
 1236 0998 4FF01902 	    mov r2,#25
 1237 099c 4FF6FF73 	    mov r3,#0xffff 
 1238 09a0 C3F6FF73 	    movt r3,#0x3fff 
 1239 09a4 01EA0301 	0:  and r1,r3 
 1240 09a8 4FEA5313 	    lsr r3,#5 
 1241 09ac 31FA02F0 	    lsrs r0,r1,r2 
 1242 09b0 03D0     	    beq 2f
 1243 09b2 00F14000 	    add r0,#'@'
 1244 09b6 08F8010B 	    strb r0,[T1],#1
 1245 09ba 053A     	2:  subs r2,#5 
 1246 09bc F2DA     	    bge 0b 
 1247 09be 66E7     	    b decomp_loop
 1248 09c0 4FF02200 	7:  mov r0,#'"'
 1249 09c4 08F8010B 	    strb r0,[T1],#1 
 1250 09c8 0846     	    mov r0,r1
 1251 09ca 4146     	    mov r1,T1  
 1252 09cc 00B5FFF7 	    _CALL strcpy
 1252      FEFF5DF8 
 1252      04EB
 1253 09d6 4046     	    mov r0,T1 
 1254 09d8 00B5FFF7 	    _CALL strlen 
 1254      FEFF5DF8 
 1254      04EB
 1255 09e2 8044     	    add T1,r0 
 1256 09e4 4FF02200 	    mov r0,#'"'
 1257 09e8 08F8010B 	    strb r0,[T1],#1 
 1258 09ec 4FE7     	    b decomp_loop
 1259 09ee 80EA0000 	9:  eor r0,r0 
 1260 09f2 88F80000 	    strb r0,[T1]
ARM GAS  tinyBasic.s 			page 37


 1261 09f6 BDE80E01 	    pop {r1,r2,r3,T1}
 1262 09fa 0846     	    mov r0,r1 
 1263 09fc 7047     	    _RET 
 1264              	
 1265 09fe 0A0A0000 	relop_str: .word ge_str,le_str,ne_str 
 1265      0D0A0000 
 1265      100A0000 
 1266 0a0a 3E3D00   	ge_str: .asciz ">="
 1267 0a0d 3C3D00   	le_str: .asciz "<="
 1268 0a10 3C3E00   	ne_str: .asciz "<>"
 1269              	
 1270              	single_char:
 1271 0a13 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1271      2328292B 
 1271      2D2A2F25 
 1272 0a1f 403D3E3C 	  .byte '@','=', '>', '<' 
 1273              	
 1274              	
 1275              	
 1276              	
 1277              	/**********************************
 1278              	  modulo 
 1279              	  compute r0 mod r1
 1280              	  input:
 1281              	    r0   dividend
 1282              	    r1   divisor 
 1283              	  output:
 1284              	    r0   TK_INTGR 
 1285              	    r1   r0 mod r1 
 1286              	*********************************/
 1287 0a23 00       	    _GBL_FUNC modulo 
 1288 0a24 01B4     	    push {r0}
 1289 0a26 B0FBF1F0 	    udiv r0,r1 
 1290 0a2a 01FB00F0 	    mul  r0,r1 
 1291 0a2e 02BC     	    pop {r1}
 1292 0a30 A1EB0001 	    sub r1,r0
 1293 0a34 4FF01A00 	    mov r0,#TK_INTGR
 1294 0a38 7047     	    _RET 
 1295              	
 1296              	/**********************************
 1297              	      BASIC commands 
 1298              	**********************************/
 1299              	
 1300              	/*********************************
 1301              	    syntax_error 
 1302              	    display syntax error message and 
 1303              	    abort program 
 1304              	  input:
 1305              	    none  
 1306              	  output: 
 1307              	    none 
 1308              	  use:
 1309              	*********************************/
 1310 0a3a 00BF     	    _FUNC syntax_error 
 1311 0a3c 4FF00200 	    mov r0,#ERR_SYNTAX
 1312 0a40 00E0     	    b tb_error 
 1313              	
ARM GAS  tinyBasic.s 			page 38


 1314              	/*********************************
 1315              	    tb_error 
 1316              	    display BASIC error and 
 1317              	    abort program. 
 1318              	  input:
 1319              	    r0    error code   
 1320              	  output: 
 1321              	    none 
 1322              	  use:
 1323              	    r1    temp 
 1324              	*********************************/
 1325 0a42 00BF     	    _FUNC tb_error 
 1326 0a44 216C     	    ldr r1,[UPP,#FLAGS]
 1327 0a46 11F0200F 	    tst r1,#FCOMP
 1328 0a4a 43D1     	    bne compile_error
 1329              	rt_error:
 1330 0a4c 5246     	    mov r2,IN 
 1331 0a4e 01B4     	    push {r0}
 1332 0a50 DFF8A007 	    ldr r0,=rt_error_msg 
 1333 0a54 00B5FFF7 	    _CALL uart_puts 
 1333      FEFF5DF8 
 1333      04EB
 1334 0a5e 01BC     	    pop {r0}
 1335 0a60 DFF89417 	    ldr r1,=err_msg  
 1336 0a64 4FEA8000 	    lsl r0,#2 
 1337 0a68 0858     	    ldr r0,[r1,r0]
 1338 0a6a 00B5FFF7 	    _CALL uart_puts
 1338      FEFF5DF8 
 1338      04EB
 1339              	// decompile and print faulty line      
 1340 0a74 5846     	    mov r0,BPTR
 1341 0a76 5246     	    mov r2,IN  
 1342 0a78 DFF80813 	    ldr r1,pad 
 1343 0a7c 00B5FFF7 	    _CALL decompile_line
 1343      FEFF5DF8 
 1343      04EB
 1344 0a86 00B5FFF7 	    _CALL uart_puts 
 1344      FEFF5DF8 
 1344      04EB
 1345 0a90 00B5FFF7 	    _CALL cr 
 1345      FEFF5DF8 
 1345      04EB
 1346              	// print error offset on line      
 1347 0a9a DFF86007 	    ldr r0,=token_at_msg 
 1348 0a9e 00B5FFF7 	    _CALL uart_puts 
 1348      FEFF5DF8 
 1348      04EB
 1349 0aa8 1046     	    mov r0,r2 
 1350 0aaa 4FF01001 	    mov r1,#16 
 1351 0aae 00B5FFF7 	    _CALL print_int
 1351      FEFF5DF8 
 1351      04EB
 1352 0ab8 00B5FFF7 	    _CALL cr
 1352      FEFF5DF8 
 1352      04EB
 1353              	// dump tokenize line 
 1354 0ac2 5846     	    mov r0,BPTR
ARM GAS  tinyBasic.s 			page 39


 1355 0ac4 8278     	    ldrb r2,[r0,#2]
 1356 0ac6 00B500F0 	    _CALL dump01 
 1356      E2F95DF8 
 1356      04EB
 1357 0ad0 FFF7FEBF 	    b warm_start 
 1358              	compile_error:
 1359 0ad4 DFF82017 	    ldr r1,=err_msg 
 1360 0ad8 4FEA8000 	    lsl r0,#2 
 1361 0adc 0858     	    ldr r0,[r1,r0]
 1362 0ade 00B5FFF7 	    _CALL uart_puts
 1362      FEFF5DF8 
 1362      04EB
 1363 0ae8 A068     	    ldr r0,[UPP,#BASICPTR]
 1364 0aea 00B5FFF7 	    _CALL uart_puts
 1364      FEFF5DF8 
 1364      04EB
 1365 0af4 00B5FFF7 	    _CALL cr
 1365      FEFF5DF8 
 1365      04EB
 1366 0afe 2068     	    ldr r0,[UPP,#IN_SAVED]
 1367 0b00 00B5FFF7 	    _CALL spaces 
 1367      FEFF5DF8 
 1367      04EB
 1368 0b0a 4FF05E00 	    mov r0,#'^' 
 1369 0b0e 00B5FFF7 	    _CALL uart_putc
 1369      FEFF5DF8 
 1369      04EB
 1370 0b18 00B5FFF7 	    _CALL cr
 1370      FEFF5DF8 
 1370      04EB
 1371 0b22 FFF7FEBF 	    b  warm_start  
 1372              	    
 1373 0b26 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1373      74696D65 
 1373      20657272 
 1373      6F723A20 
 1373      00
 1374 0b37 746F6B65 	token_at_msg: .asciz "token offset: "
 1374      6E206F66 
 1374      66736574 
 1374      3A2000
 1375              	
 1376              	
 1377              	err_msg:
 1378 0b46 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1378      00000000 
 1378      0D000000 
 1378      1B000000 
 1378      34000000 
 1379 0b5e 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1379      6F000000 
 1379      89000000 
 1379      9A000000 
 1379      AB000000 
 1380 0b72 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1380      EA000000 
 1380      FA000000 
ARM GAS  tinyBasic.s 			page 40


 1380      0E010000 
 1380      21010000 
 1381 0b86 2E010000 	   .word err_cant_prog 
 1382              	
 1383              	    .section .rodata.tb_error 
 1384              	
 1385 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1385      72792066 
 1385      756C6C0A 
 1385      00
 1386 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1386      61782065 
 1386      72726F72 
 1386      0A00
 1387 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1387      206F7065 
 1387      72617469 
 1387      6F6E206F 
 1387      76657266 
 1388 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1388      73696F6E 
 1388      20627920 
 1388      300A00
 1389 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1389      6C696420 
 1389      6C696E65 
 1389      206E756D 
 1389      6265722E 
 1390 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1390      74696D65 
 1390      206F6E6C 
 1390      79207573 
 1390      6167652E 
 1391 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1391      616E6420 
 1391      6C696E65 
 1391      206F6E6C 
 1391      79207573 
 1392 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1392      69636174 
 1392      65206E61 
 1392      6D652E0A 
 1392      00
 1393 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1393      206E6F74 
 1393      20666F75 
 1393      6E642E0A 
 1393      00
 1394 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1394      76616C75 
 1394      652E0A00 
 1395 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1395      20696E20 
 1395      65787465 
 1395      6E646564 
 1395      206D656D 
 1396 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
ARM GAS  tinyBasic.s 			page 41


 1396      61746120 
 1396      666F756E 
 1396      642E0A00 
 1397 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1397      726F6772 
 1397      616D2069 
 1397      6E205241 
 1397      4D210A00 
 1398 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1398      20737973 
 1398      74656D20 
 1398      66756C6C 
 1398      2E0A00
 1399 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1399      65722066 
 1399      756C6C0A 
 1399      00
 1400 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1400      74206D6F 
 1400      64696679 
 1400      2070726F 
 1400      6772616D 
 1401              	
 1402 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1402      2074696D 
 1402      65206572 
 1402      726F722C 
 1402      2000
 1403 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1403      70696C65 
 1403      20657272 
 1403      6F722C20 
 1403      00
 1404 018d 6C617374 	tk_id: .asciz "last token id: "
 1404      20746F6B 
 1404      656E2069 
 1404      643A2000 
 1405              	
 1406              	
 1407              	    .section  .text , "ax", %progbits 
 1408              	
 1409              	/*********************************
 1410              	   skip_line 
 1411              	   data and remark line are skipped
 1412              	   by the interpreter 
 1413              	***********************************/
 1414 0b8a 00BF     	    _FUNC skip_line 
 1415 0b8c D4F804A0 	    ldr IN,[UPP,#COUNT]
 1416 0b90 7047     	    _RET 
 1417              	
 1418              	
 1419              	/*********************************
 1420              	   BASIC: BTGL adr, mask   
 1421              	   toggle bits [adr]=[adr]^mask  
 1422              	   input:
 1423              	     r0    adr 
 1424              	     r1    mask 
ARM GAS  tinyBasic.s 			page 42


 1425              	    output;
 1426              	      none 
 1427              	    use:
 1428              	      T1   temp
 1429              	      T2   temp  
 1430              	*******************************/     
 1431 0b92 00BF     	    _FUNC BTGL 
 1432              	
 1433 0b94 7047     	    _RET 
 1434              	
 1435              	/***************************************
 1436              	   kword_cmp
 1437              	   compare keyword to dict entry
 1438              	  input:
 1439              	    r0  keyword 
 1440              	    r1  dict entry 
 1441              	    r2  character count 
 1442              	  output:
 1443              	    r0  0 not same | -1 same 
 1444              	  use:
 1445              	    r6   result  
 1446              	    T1   char 1
 1447              	    T2   char 2
 1448              	**************************************/   
 1449 0b96 00BF     	    _FUNC kword_cmp 
 1450 0b98 2DE94003 	    push {r6,T1,T2}
 1451 0b9c 4FF0FF36 	    mov r6,#-1 
 1452 0ba0 4AB1     	1:  cbz r2,9f       
 1453 0ba2 10F8018B 	    ldrb T1,[r0],#1
 1454 0ba6 11F8019B 	    ldrb T2,[r1],#1
 1455 0baa A2F10102 	    sub r2,#1
 1456 0bae C845     	    cmp T1,T2
 1457 0bb0 F6D0     	    beq 1b 
 1458 0bb2 86EA0606 	    eor r6,r6  
 1459 0bb6 3046     	9:  mov r0,r6
 1460 0bb8 BDE84003 	    pop {r6,T1,T2}
 1461 0bbc 7047     	    _RET 
 1462              	
 1463              	/***********************************************
 1464              	    search_dict 
 1465              	    search keyword in dictionary
 1466              	   input:
 1467              	  	 r0   keyword 
 1468              	     r1		dictionary first name field address  
 1469              	   output:
 1470              	     r0 		token attribute 
 1471              	     r1		  cmd_index if r0!=TK_NONE  
 1472              	   use:
 1473              	     r3   length keyword 
 1474              	     T1   keyword
 1475              	     T2   link  
 1476              	**********************************************/
 1477 0bbe 00BF     	  _FUNC search_dict
 1478 0bc0 2DE90C03 	  push {r2,r3,T1,T2}
 1479 0bc4 8046     	  mov T1,r0 
 1480 0bc6 00B5FFF7 	  _CALL strlen 
 1480      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 43


 1480      04EB
 1481 0bd0 0346     	  mov r3,r0  
 1482              	1:  
 1483 0bd2 8946     	   mov T2,r1  // keep for linking   
 1484 0bd4 0878     	   ldrb r0,[r1] 
 1485 0bd6 78B1     	   cbz r0,9f // null byte, end of dictionary
 1486 0bd8 4046     	   mov r0,T1
 1487 0bda 1A46     	   mov r2,r3   
 1488 0bdc 00B5FFF7 	   _CALL kword_cmp  
 1488      DBFF5DF8 
 1488      04EB
 1489 0be6 18B9     	   cbnz r0,2f 
 1490 0be8 4946     	   mov r1,T2
 1491 0bea 51F80C1C 	   ldr r1,[r1,#-12]
 1492 0bee F0E7     	   b 1b   
 1493              	2: // found
 1494 0bf0 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1495 0bf4 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1496 0bf8 BDE80C03 	9: pop {r2,r3,T1,T2}
 1497 0bfc 7047     	   _RET 
 1498              	
 1499              	
 1500              	/**************************
 1501              	    INTERPRETER 
 1502              	*************************/
 1503              	
 1504              	/*********************************
 1505              	   cold_start 
 1506              	   initialize BASIC interpreter 
 1507              	   never leave 
 1508              	   input:
 1509              	     none 
 1510              	   output:
 1511              	    none 
 1512              	*********************************/
 1513              	  .type cold_start, %function 
 1514              	  .global cold_start 
 1515              	cold_start: 
 1516 0bfe 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1516      C2F20004 
 1517 0c06 DFF85400 	    ldr r0,src_addr 
 1518 0c0a DFF85410 	    ldr r1,dest_addr
 1519 0c0e 0968     	    ldr r1,[r1] 
 1520 0c10 0C44     	    add UPP,r1 // system variables base address   
 1521              	// clear RAM
 1522 0c12 2046     	    mov r0,UPP  
 1523 0c14 DFF86811 	    ldr r1,tib 
 1524 0c18 82EA0202 	    eor r2,r2 
 1525 0c1c 40F8042B 	1:  str r2,[r0],#4 
 1526 0c20 8842     	    cmp r0,r1 
 1527 0c22 FBD4     	    bmi 1b 
 1528              	//copy initialized system variables to ram 
 1529 0c24 DFF83400 	    ldr r0,src_addr 
 1530 0c28 2146     	    mov r1,UPP 
 1531 0c2a DFF83820 	    ldr r2,sysvar_size
 1532 0c2e 00B5FFF7 	    _CALL cmove
 1532      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 44


 1532      04EB
 1533 0c38 00B500F0 	    _CALL prt_version
 1533      15F85DF8 
 1533      04EB
 1534 0c42 00B500F0 	    _CALL clear_basic 
 1534      62F85DF8 
 1534      04EB
 1535 0c4c 00B5FFF7 	    _CALL search_free 
 1535      FEFF5DF8 
 1535      04EB
 1536 0c56 E062     	    str r0,[UPP,#FSFREE] 
 1537 0c58 FFF7FEBF 	    b warm_start    
 1538              	src_addr:
 1539 0c5c 00000000 	  .word uzero
 1540              	dest_addr:
 1541 0c60 00000000 	  .word vectors_size
 1542 0c64 D4000000 	sysvar_size: .word ulast-uzero 
 1543              	
 1544              	/************************************
 1545              	    print firmware version 
 1546              	    input: 
 1547              	      none 
 1548              	    output:
 1549              	      none 
 1550              	    use:
 1551              	      r0 
 1552              	***********************************/
 1553              	    _FUNC prt_version 
 1554 0c68 DFF89405 	    ldr r0,=version_msg 
 1555 0c6c 00B5FFF7 	    _CALL uart_puts
 1555      FEFF5DF8 
 1555      04EB
 1556 0c76 9FF87400 	    ldrb r0,version 
 1557 0c7a 4FEA1010 	    lsr r0,#4 
 1558 0c7e 00F13000 	    add r0,#'0' 
 1559 0c82 3A28     	    cmp r0,#'9'+1 
 1560 0c84 01D4     	    bmi 1f 
 1561 0c86 00F10700 	    add r0,#7 
 1562              	  1:
 1563 0c8a 00B5FFF7 	    _CALL uart_putc 
 1563      FEFF5DF8 
 1563      04EB
 1564 0c94 4FF02E00 	    mov r0,#'. 
 1565 0c98 00B5FFF7 	    _CALL uart_putc 
 1565      FEFF5DF8 
 1565      04EB
 1566 0ca2 9FF84800 	    ldrb r0,version 
 1567 0ca6 00F00F00 	    and r0,#15 
 1568 0caa 00F13000 	    add r0,'0' 
 1569 0cae 3A28     	    cmp r0,#'9'+1 
 1570 0cb0 01D4     	    bmi 1f 
 1571 0cb2 00F10700 	    add r0,#7
 1572              	  1: 
 1573 0cb6 00B5FFF7 	    _CALL uart_putc 
 1573      FEFF5DF8 
 1573      04EB
 1574 0cc0 00B5FFF7 	    _CALL cr
ARM GAS  tinyBasic.s 			page 45


 1574      FEFF5DF8 
 1574      04EB
 1575 0cca 7047     	    _RET  
 1576              	version_msg:
 1577 0ccc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1577      65207069 
 1577      6C6C2074 
 1577      696E7920 
 1577      42415349 
 1578              	version:
 1579 0cec 10       	    .byte 0x10 
 1580 0ced 0000BF   	    .p2align 2 
 1581              	
 1582              	
 1583              	/*****************************
 1584              	    clear_vars 
 1585              	    initialize variables to 0
 1586              	  input:
 1587              	    none 
 1588              	  output:
 1589              	    none 
 1590              	  use:
 1591              	    r0,r1,r2 
 1592              	*****************************/
 1593              	    _FUNC clear_vars 
 1594 0cf0 07B4     	    push {r0,r1,r2}
 1595 0cf2 80EA0000 	    eor r0,r0 
 1596 0cf6 04F16001 	    add r1,UPP,#VARS
 1597 0cfa 4FF01A02 	    mov r2,#26
 1598 0cfe 41F8040B 	1:  str r0,[r1],#4 
 1599 0d02 013A     	    subs r2,#1
 1600 0d04 FBD1     	    bne 1b  
 1601 0d06 07BC     	    pop {r0,r1,r2}
 1602 0d08 7047     	    _RET 
 1603              	
 1604              	/*****************************
 1605              	   clear_basic 
 1606              	   reset BASIC system variables 
 1607              	   and clear variables and RAM 
 1608              	*****************************/
 1609 0d0a 00BF     	    _FUNC clear_basic
 1610 0d0c 80EA0000 	  	eor r0,r0
 1611 0d10 2064     	    str r0,[UPP,#FLAGS] 
 1612 0d12 6060     	    str r0,[UPP,#COUNT]
 1613 0d14 2060     	    str r0,[UPP,#IN_SAVED]
 1614 0d16 A060     	    str r0,[UPP,#BASICPTR]
 1615 0d18 E060     	    str r0,[UPP,#DATAPTR]
 1616 0d1a 2061     	    str r0,[UPP,#DATA]
 1617 0d1c 6061     	    str r0,[UPP,#DATALEN]
 1618 0d1e 04F1D000 	    add r0,UPP,#BASIC_START 
 1619 0d22 00F11000 	    add r0,#16 
 1620 0d26 6FF00F01 	    mvn r1,#15
 1621 0d2a 00EA0100 	    and r0,r1 
 1622 0d2e 2063     	    str r0,[UPP,#TXTBGN]
 1623 0d30 6063     	    str r0,[UPP,#TXTEND]
 1624 0d32 C4F8D000 	    str r0,[UPP,#HERE]
 1625 0d36 00B5FFF7 	    _CALL clear_vars
ARM GAS  tinyBasic.s 			page 46


 1625      DAFF5DF8 
 1625      04EB
 1626 0d40 206B     	    ldr r0,[UPP,#TXTBGN]
 1627 0d42 DFF83C10 	    ldr r1,tib 
 1628 0d46 82EA0202 	    eor r2,r2 
 1629 0d4a 40F8042B 	1:  str r2,[r0],#4
 1630 0d4e 8842     	    cmp r0,r1 
 1631 0d50 FBD4     	    bmi 1b 
 1632 0d52 7047     	    _RET  
 1633              	
 1634              	/***********************************
 1635              	   warm_init 
 1636              	   initialize interpreter context 
 1637              	  input:
 1638              	    none
 1639              	  output:
 1640              	    none 
 1641              	  use:
 1642              	    r0 
 1643              	***********************************/
 1644              	warm_init:
 1645              	// reset data stack       
 1646 0d54 DFF824C0 	    ldr DP,dstack 
 1647 0d58 4FF0000A 	    mov IN,#0 // BASIC line index 
 1648 0d5c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1649 0d60 80EA0000 	    eor r0,r0 
 1650 0d64 6060     	    str r0,[UPP,#COUNT]  
 1651 0d66 2064     	    str r0,[UPP,#FLAGS]
 1652 0d68 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1653 0d6a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1654 0d6e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1655 0d70 4FF00A00 	    mov r0,#10 // default base decimal 
 1656 0d74 A061     	    str r0,[UPP,#BASE]
 1657 0d76 7047     	    _RET  
 1658              	
 1659 0d78 00000000 	mstack: .word _mstack 
 1660 0d7c 00000000 	dstack: .word _dstack 
 1661 0d80 00000000 	tib: .word _tib 
 1662 0d84 00000000 	pad: .word _pad 
 1663 0d88 FCFFFFFF 	array: .word _pad - 4 
 1664 0d8c 0A524541 	ready: .asciz "\nREADY" 
 1664      445900
 1665              	
 1666              	/**********************************
 1667              	    warm_start 
 1668              	    start BASIC interpreter doesn't  
 1669              	    reset variables and code space 
 1670              	  input:
 1671              	    none 
 1672              	  output:
 1673              	    none 
 1674              	**********************************/
 1675 0d93 00       	    _GBL_FUNC warm_start 
 1676              	// initialise parameters stack
 1677 0d94 FFF7DEFF 	    bl warm_init
 1678              	// reset main stack 
 1679 0d98 5FF82400 	    ldr r0,mstack
ARM GAS  tinyBasic.s 			page 47


 1680 0d9c 8546     	    mov sp,r0 
 1681 0d9e DFF86404 	    ldr r0,=ready 
 1682 0da2 00B5FFF7 	    _CALL uart_puts 
 1682      FEFF5DF8 
 1682      04EB
 1683              	// fall in cmd_line 
 1684              	
 1685              	/**********************************
 1686              	   cmd_line 
 1687              	   shell command line 
 1688              	   input:
 1689              	      none 
 1690              	   output:
 1691              	      none 
 1692              	   use:
 1693              	
 1694              	***********************************/
 1695              	    _FUNC cmd_line 
 1696 0dac 00B5FFF7 	    _CALL cr
 1696      FEFF5DF8 
 1696      04EB
 1697 0db6 80EA0000 	    eor r0,r0 
 1698 0dba C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1699 0dbe 5FF84000 	1:  ldr r0,tib
 1700 0dc2 4FF05001 	    mov r1,#TIB_SIZE 
 1701 0dc6 00B5FFF7 	    _CALL readln 
 1701      FEFF5DF8 
 1701      04EB
 1702 0dd0 0940     	    ands r1,r1 // empty line 
 1703 0dd2 F4D0     	    beq 1b 
 1704 0dd4 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1704      EDFA5DF8 
 1704      04EB
 1705 0dde EED0     	    beq 1b  // tokens stored in text area 
 1706              	// interpret tokenized line 
 1707              	interpreter:
 1708 0de0 00B500F0 	  _CALL next_token 
 1708      21F85DF8 
 1708      04EB
 1709 0dea 0228     	  cmp r0,#2
 1710 0dec F8D4     	  bmi interpreter    
 1711 0dee 1928     	  cmp r0,#TK_LABEL 
 1712 0df0 F6D0     	  beq interpreter 
 1713 0df2 1728     	  cmp r0,#TK_CMD 
 1714 0df4 03D1     	  bne 2f
 1715 0df6 0846     	  mov r0,r1 
 1716 0df8 00F012F8 	  bl execute  
 1717 0dfc F0E7     	  b interpreter   
 1718              	2: 
 1719 0dfe 1428     	  cmp r0,#TK_VAR 
 1720 0e00 05D1     	  bne 3f 
 1721 0e02 00B500F0 	  _CALL let_var 
 1721      83FB5DF8 
 1721      04EB
 1722 0e0c E8E7     	  b interpreter 
 1723              	3: 
 1724 0e0e 0C28     	  cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 48


 1725 0e10 05D1     	  bne 4f
 1726 0e12 00B500F0 	  _CALL let_array 
 1726      89FB5DF8 
 1726      04EB
 1727 0e1c E0E7     	  b interpreter
 1728              	4: 
 1729 0e1e 0DE6     	  b syntax_error
 1730              	
 1731              	/*****************************
 1732              	    execute 
 1733              	    execute a BASIC routine from 
 1734              	    its token value 
 1735              	  input:
 1736              	    r0  BASIC SUB|FUNC token  
 1737              	  output: 
 1738              	    depend on SUB|FUNc
 1739              	*****************************/
 1740              	    _FUNC execute 
 1741 0e20 F949     	    ldr r1,=fn_table 
 1742 0e22 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1743 0e26 0047     	    bx r0 
 1744              	
 1745              	/*************************************
 1746              	  next_token 
 1747              	  extract next token from token list 
 1748              	  input:
 1749              	    none 
 1750              	  output:
 1751              	    r0    token attribute
 1752              	    r1    token value if there is one 
 1753              	  use:
 1754              	    T1    exit token type  
 1755              	****************************/
 1756              	    _FUNC next_token 
 1757 0e28 4DF8048D 	    push {T1}
 1758 0e2c 88EA0808 	    eor T1,T1 // TK_NONE 
 1759 0e30 6068     	    ldr r0,[UPP,#COUNT]
 1760 0e32 8245     	    cmp IN,r0 
 1761 0e34 14D4     	    bmi 0f
 1762              	end_of_line:
 1763 0e36 BBF80010 	    ldrh r1,[BPTR] // line #
 1764 0e3a 09B9     	    cbnz r1, next_line  // command line
 1765 0e3c FFF7FEBF 	    b warm_start
 1766              	next_line:
 1767 0e40 8344     	    add BPTR,r0 // next line 
 1768 0e42 606B     	    ldr r0,[UPP,#TXTEND]
 1769 0e44 8345     	    cmp BPTR,r0 
 1770 0e46 7FF5FEAF 	    bpl warm_start // end of program
 1771 0e4a 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1772 0e4e 6060     	    str r0,[UPP,#COUNT] 
 1773 0e50 4FF0030A 	    mov IN,#3
 1774 0e54 00B5FFF7 	    _CALL show_trace
 1774      C9F95DF8 
 1774      04EB
 1775 0e5e 24E0     	    b 9f  
 1776              	0: 
 1777 0e60 C4F800A0 	    str IN,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 49


 1778 0e64 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1779 0e68 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1780 0e6c 0AF1010A 	    add IN,#1  
 1781 0e70 8046     	    mov T1,r0 // save token id 
 1782 0e72 1328     	    cmp r0,#TK_CHAR 
 1783 0e74 19D4     	    bmi 9f // these tokens have no value  
 1784 0e76 1828     	    cmp r0,#TK_CONST 
 1785 0e78 04D5     	    bpl 1f
 1786              	    // tokens with .byte value 
 1787 0e7a 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1788 0e7e 0AF1010A 	    add IN,#1 
 1789 0e82 12E0     	    b 9f  
 1790 0e84 1B28     	1:  cmp r0,#TK_QSTR 
 1791 0e86 0BD1     	    bne 2f 
 1792 0e88 0BEB0A01 	    add r1,BPTR,IN
 1793 0e8c 0846     	    mov r0,r1 
 1794 0e8e 00B5FFF7 	    _CALL strlen 
 1794      FEFF5DF8 
 1794      04EB
 1795 0e98 8244     	    add IN,r0 
 1796 0e9a 0AF1010A 	    add IN,#1 
 1797 0e9e 04E0     	    b 9f 
 1798              	2:  // .word value 
 1799 0ea0 5BF80A10 	    ldr r1,[BPTR,IN] 
 1800 0ea4 0AF1040A 	    add IN,#4 
 1801 0ea8 FFE7     	    b 9f 
 1802 0eaa 4046     	9:  mov r0,T1  
 1803 0eac 5DF8048B 	    pop {T1}
 1804 0eb0 7047     	    _RET
 1805              	
 1806              	
 1807              	/*********************************
 1808              	    expect 
 1809              	    check if next token is of 
 1810              	    expected type. If not 
 1811              	    call syntax_error  
 1812              	  input:
 1813              	      r0   token attribute
 1814              	  output:
 1815              	      r0  token attribute 
 1816              	      r1  token value
 1817              	  use:
 1818              	      T1   
 1819              	**********************************/
 1820 0eb2 00BF     	    _FUNC expect 
 1821 0eb4 4DF8048D 	    push {T1}
 1822 0eb8 8046     	    mov T1,r0 
 1823 0eba 00B5FFF7 	    _CALL next_token 
 1823      B4FF5DF8 
 1823      04EB
 1824 0ec4 4045     	    cmp r0,T1  
 1825 0ec6 7FF4B9AD 	    bne syntax_error 
 1826 0eca 5DF8048B 	    pop {T1}
 1827 0ece 7047     	    _RET 
 1828              	
 1829              	/***********************************
 1830              	    func_args 
ARM GAS  tinyBasic.s 			page 50


 1831              	    get function arguments list 
 1832              	  input:
 1833              	    none 
 1834              	  output:
 1835              	    r0    arg. count 
 1836              	  use:
 1837              	
 1838              	************************************/
 1839              	    _FUNC func_args 
 1840 0ed0 4FF00500 	    mov r0,#TK_LPAREN 
 1841 0ed4 00B5FFF7 	    _CALL expect 
 1841      EDFF5DF8 
 1841      04EB
 1842 0ede 00B500F0 	    _CALL arg_list 
 1842      0CF85DF8 
 1842      04EB
 1843 0ee8 01B4     	    push {r0}
 1844 0eea 4FF00600 	    mov r0,#TK_RPAREN 
 1845 0eee 00B5FFF7 	    _CALL expect 
 1845      E0FF5DF8 
 1845      04EB
 1846 0ef8 01BC     	    pop {r0}
 1847 0efa 7047     	    _RET 
 1848              	
 1849              	/**********************************
 1850              	    arg_list 
 1851              	    get arguments list on dstack 
 1852              	  input:
 1853              	    none 
 1854              	  output:
 1855              	    r0    arg count
 1856              	  use:
 1857              	    T1    tmp count  
 1858              	***********************************/
 1859              	    _FUNC arg_list 
 1860 0efc 4DF8048D 	    push {T1}
 1861 0f00 88EA0808 	    eor T1,T1 
 1862 0f04 00B500F0 	1:  _CALL expression 
 1862      CFF85DF8 
 1862      04EB
 1863 0f0e 0028     	    cmp R0,#TK_NONE 
 1864 0f10 10D0     	    beq 9f 
 1865 0f12 1A28     	    cmp r0,#TK_INTGR
 1866 0f14 0ED1     	    bne 9f 
 1867 0f16 4CF8041D 	    _PUSH r1 
 1868 0f1a 08F10108 	    add T1,#1 
 1869 0f1e 00B5FFF7 	    _CALL next_token 
 1869      82FF5DF8 
 1869      04EB
 1870 0f28 0228     	    cmp r0,#TK_COMMA 
 1871 0f2a EBD0     	    beq 1b 
 1872 0f2c D4F800A0 	    _UNGET_TOKEN 
 1872      D4F808B0 
 1873 0f34 4046     	9:  mov r0,T1 
 1874 0f36 5DF8048B 	    pop {T1}
 1875 0f3a 7047     	    _RET 
 1876              	
ARM GAS  tinyBasic.s 			page 51


 1877              	/***********************************
 1878              	 factor
 1879              	 arithmetick factor parser 
 1880              	 factor ::= ['+'|'-'|e]  var | @ |
 1881              				 integer | function |
 1882              				 '('expression')' 
 1883              	  input: 
 1884              	    none 
 1885              	  output:
 1886              	    r0   token attribute 
 1887              	    r1   token value 
 1888              	  use:
 1889              	    r2   temp 
 1890              	    T1   sign 
 1891              	    T2   exit token attribute 
 1892              	***********************************/
 1893              	    _FUNC factor 
 1894 0f3c 2DE90403 	    push {r2,T1,T2}
 1895 0f40 4FF01A09 	    mov T2,#TK_INTGR 
 1896 0f44 4FF00108 	    mov T1,#1 // default sign +  
 1897 0f48 00B5FFF7 	    _CALL next_token
 1897      6DFF5DF8 
 1897      04EB
 1898 0f52 0728     	    cmp r0,#TK_PLUS 
 1899 0f54 03D0     	    beq 0f 
 1900 0f56 0828     	    cmp r0,#TK_MINUS  
 1901 0f58 06D1     	    bne 1f 
 1902 0f5a 4FF0FF38 	    mov T1,#-1 // minus sign 
 1903 0f5e 00B5FFF7 	0:  _CALL next_token
 1903      62FF5DF8 
 1903      04EB
 1904 0f68 1A28     	1:  cmp r0,#TK_INTGR 
 1905 0f6a 59D0     	    beq 8f 
 1906 0f6c 0C28     	    cmp r0,#TK_ARRAY 
 1907 0f6e 1ED1     	    bne 2f 
 1908 0f70 4FF00500 	    mov r0,#TK_LPAREN 
 1909 0f74 00B5FFF7 	    _CALL expect 
 1909      9DFF5DF8 
 1909      04EB
 1910 0f7e 00B500F0 	    _CALL expression
 1910      92F85DF8 
 1910      04EB
 1911 0f88 1A28     	    cmp r0,#TK_INTGR
 1912 0f8a 7FF457AD 	    bne syntax_error
 1913 0f8e 8146     	    mov T2,r0
 1914 0f90 0A46     	    mov r2,r1  
 1915 0f92 4FF00600 	    mov r0,#TK_RPAREN
 1916 0f96 00B5FFF7 	    _CALL expect 
 1916      8CFF5DF8 
 1916      04EB
 1917 0fa0 1046     	    mov r0,r2 
 1918 0fa2 00B500F0 	    _CALL get_array_element 
 1918      F4F85DF8 
 1918      04EB
 1919 0fac 38E0     	    b 8f
 1920 0fae 0528     	2:  cmp r0,#TK_LPAREN 
 1921 0fb0 12D1     	    bne 3f 
ARM GAS  tinyBasic.s 			page 52


 1922 0fb2 00B500F0 	    _CALL expression 
 1922      78F85DF8 
 1922      04EB
 1923 0fbc 1A28     	    cmp r0,#TK_INTGR 
 1924 0fbe 7FF43DAD 	    bne syntax_error
 1925 0fc2 8146     	    mov T2,r0
 1926 0fc4 0A46     	    mov r2,r1   
 1927 0fc6 4FF00600 	    mov r0,#TK_RPAREN
 1928 0fca 00B5FFF7 	    _CALL expect 
 1928      72FF5DF8 
 1928      04EB
 1929 0fd4 1146     	    mov r1,r2 
 1930 0fd6 23E0     	    b 8f       
 1931 0fd8 1428     	3:  cmp r0,#TK_VAR 
 1932 0fda 06D1     	    bne 4f
 1933 0fdc 0846     	    mov r0,r1  
 1934 0fde 00B500F0 	    _CALL get_var 
 1934      EAF85DF8 
 1934      04EB
 1935 0fe8 1AE0     	    b 8f 
 1936 0fea 1528     	4:  cmp r0,#TK_IFUNC 
 1937 0fec 06D1     	    bne 6f 
 1938 0fee 0846     	5:  mov r0,r1  
 1939 0ff0 00B5FFF7 	    _CALL execute
 1939      15FF5DF8 
 1939      04EB
 1940 0ffa 11E0     	    b 8f 
 1941 0ffc 1928     	6:  cmp r0,#TK_LABEL
 1942 0ffe 08D1     	    bne 7f 
 1943 1000 41F00040 	    orr r0,r1,#(1<<31) 
 1944 1004 00B5FFF7 	    _CALL search_const
 1944      47F95DF8 
 1944      04EB
 1945 100e 0146     	    mov r1,r0 
 1946 1010 06E0     	    b 8f 
 1947 1012 D4F800A0 	7:  _UNGET_TOKEN      
 1947      D4F808B0 
 1948 101a 4FF00000 	    mov r0,#TK_NONE
 1949 101e 03E0     	    b 9f  
 1950 1020 08FB01F1 	8:  mul r1,T1 
 1951 1024 5FEA0900 	    movs r0,T2 
 1952 1028 BDE80403 	9:  pop {r2,T1,T2}   
 1953 102c 7047     	    _RET 
 1954              	
 1955              	
 1956              	/*****************************************
 1957              	    term 
 1958              	    term parser 
 1959              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1960              	    output:
 1961              	      r0  	token attribute 
 1962              	      r1		integer
 1963              	    use:
 1964              	      r2    first operand 
 1965              	      r3    temp 
 1966              	      T1    operator 
 1967              	      T2    exit token attribute 
ARM GAS  tinyBasic.s 			page 53


 1968              	******************************************/
 1969 102e 00BF     	     _FUNC term 
 1970 1030 2DE90C03 	    push {r2,r3,T1,T2}
 1971 1034 4FF00009 	    mov T2,#TK_NONE 
 1972 1038 00B5FFF7 	    _CALL factor
 1972      7FFF5DF8 
 1972      04EB
 1973 1042 58B3     	    cbz r0, 9f  // no factor   
 1974 1044 8146     	    mov T2,r0  // TK_INTGR 
 1975 1046 0A46     	    mov r2,r1 // first factor    
 1976 1048 00B5FFF7 	0:  _CALL next_token
 1976      EDFE5DF8 
 1976      04EB
 1977 1052 8046     	    mov T1,r0  // operator 
 1978 1054 0928     	    cmp r0,TK_MULT
 1979 1056 01D4     	    bmi 1f 
 1980 1058 0C28     	    cmp r0,#TK_MOD+1
 1981 105a 04D4     	    bmi 2f
 1982 105c D4F800A0 	1:  _UNGET_TOKEN
 1982      D4F808B0 
 1983 1064 1AE0     	    b 9f 
 1984 1066 00B5FFF7 	2:  _CALL factor  
 1984      68FF5DF8 
 1984      04EB
 1985 1070 3FF4E4AC 	    beq syntax_error 
 1986 1074 B8F1090F 	    cmp T1,#TK_MULT
 1987 1078 02D1     	    bne 3f 
 1988              	// multiplication
 1989 107a 01FB02F2 	    mul r2,r1
 1990 107e E3E7     	    b 0b  
 1991 1080 B8F10A0F 	3:  cmp T1,#TK_DIV 
 1992 1084 02D1     	    bne 4f
 1993              	// division
 1994 1086 92FBF1F2 	    sdiv r2,r2,r1
 1995 108a DDE7     	    b 0b  
 1996              	4: // modulo
 1997 108c 1046     	    mov r0,r2 
 1998 108e 92FBF1F2 	    sdiv r2,r2,r1 
 1999 1092 01FB02F2 	    mul  r2,r1 
 2000 1096 A0EB0202 	    sub  r2,r0,r2
 2001 109a D5E7     	    b 0b  
 2002 109c 1146     	9:  mov r1,r2 
 2003 109e 5FEA0900 	    movs r0,T2 
 2004 10a2 BDE80C03 	    pop {r2,r3,T1,T2}
 2005 10a6 7047     	    _RET 
 2006              	
 2007              	/*****************************************
 2008              	    expression 
 2009              	    arithmetic expression parser 
 2010              	    expression ::= term [['+'|'-'] term]*
 2011              	    result range {-32768..32767}
 2012              	    output:
 2013              	      r0    TK_NONE || TK_INTGR 
 2014              	      r1 	  integer
 2015              	    use:
 2016              	      r2  left operand 
 2017              	      T1  operator 
ARM GAS  tinyBasic.s 			page 54


 2018              	      T2  exit token attribute
 2019              	******************************************/
 2020              	    _FUNC expression 
 2021 10a8 2DE90403 	    push {r2,t1,t2}
 2022 10ac 4FF00009 	    mov T2,#TK_NONE
 2023 10b0 82EA0202 	    eor r2,r2 // zero 
 2024 10b4 00B5FFF7 	    _CALL term 
 2024      BBFF5DF8 
 2024      04EB
 2025 10be 21D0     	    beq 9f  // no term  
 2026 10c0 0A46     	    mov r2,r1 // first term
 2027 10c2 4FF01A09 	    mov T2,#TK_INTGR    
 2028 10c6 00B5FFF7 	1:  _CALL next_token 
 2028      AEFE5DF8 
 2028      04EB
 2029 10d0 8046     	    mov T1,r0 // token type +|-
 2030 10d2 0728     	    cmp r0,#TK_PLUS 
 2031 10d4 06D0     	    beq 3f 
 2032 10d6 0828     	    cmp r0,#TK_MINUS  
 2033 10d8 04D0     	    beq 3f 
 2034 10da D4F800A0 	    _UNGET_TOKEN
 2034      D4F808B0 
 2035 10e2 0FE0     	    b 9f  
 2036 10e4 00B5FFF7 	3:  _CALL term 
 2036      A3FF5DF8 
 2036      04EB
 2037 10ee 1A28     	    cmp r0,#TK_INTGR 
 2038 10f0 7FF4A4AC 	    bne syntax_error 
 2039 10f4 B8F1070F 	    cmp T1,#TK_PLUS 
 2040 10f8 02D0     	    beq 4f 
 2041 10fa A2EB0102 	    sub r2,r2,r1 // N1-N2  
 2042 10fe E2E7     	    b 1b 
 2043 1100 0A44     	4:  add r2,r2,r1 // N1+N2
 2044 1102 E0E7     	    b 1b
 2045 1104 5FEA0900 	9:  movs r0,T2 
 2046 1108 1146     	    mov r1,r2 
 2047 110a BDE80403 	    pop {r2,t1,t2}
 2048 110e 7047     	    _RET 
 2049              	
 2050              	
 2051              	/**********************************************
 2052              	    relation parser 
 2053              	    rel ::= expr1 rel_op expr2
 2054              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2055              	    relation return  integer , zero is false 
 2056              	    output:
 2057              	        r0	TK_INTGR  
 2058              	        r1	integer 
 2059              	    use:
 2060              	        r2   first operand 
 2061              	        T1   relop   
 2062              	**********************************************/
 2063              	    _FUNC relation 
 2064 1110 2DE90401 	    push {r2,T1}
 2065 1114 00B5FFF7 	    _CALL expression 
 2065      C7FF5DF8 
 2065      04EB
ARM GAS  tinyBasic.s 			page 55


 2066 111e 1A28     	    cmp r0,#TK_INTGR 
 2067 1120 7FF48CAC 	    bne syntax_error 
 2068 1124 0A46     	    mov r2,r1  // first operand  
 2069 1126 00B5FFF7 	    _CALL next_token 
 2069      7EFE5DF8 
 2069      04EB
 2070 1130 A0F10D08 	    sub T1,r0,#TK_EQUAL  // relop  
 2071 1134 0D28     	    cmp r0,#TK_EQUAL 
 2072 1136 1DD4     	    bmi 8f 
 2073 1138 1328     	    cmp r0,#TK_CHAR 
 2074 113a 1BD5     	    bpl 8f 
 2075 113c 00B5FFF7 	    _CALL expression 
 2075      B3FF5DF8 
 2075      04EB
 2076 1146 1A28     	    cmp r0,#TK_INTGR 
 2077 1148 7FF478AC 	    bne syntax_error 
 2078 114c 8A42     	    cmp r2,r1 // compare operands  
 2079 114e 4FF0FF31 	    mov r1,#-1 
 2080 1152 2E4A     	    ldr r2,=relop_jmp
 2081 1154 D2E808F0 	    tbb [r2,T1]    
 2082              	rel_idx0:
 2083              	rel_eq:
 2084 1158 11D0     	    beq 9f 
 2085 115a 08E0     	    b rel_false
 2086              	rel_gt:
 2087 115c 0FDC     	    bgt 9f  
 2088 115e 06E0     	    b rel_false  
 2089              	rel_ge:
 2090 1160 0DDA     	    bge 9f  
 2091 1162 04E0     	    b rel_false  
 2092              	rel_lt: 
 2093 1164 0BDB     	    blt 9f   
 2094 1166 02E0     	    b rel_false 
 2095              	rel_le:
 2096 1168 09DD     	    ble 9f  
 2097 116a 00E0     	    b rel_false 
 2098              	rel_ne:
 2099 116c 07D1     	    bne 9f 
 2100              	rel_false:    
 2101 116e 81EA0101 	    eor r1,r1  // false
 2102 1172 04E0     	    b 9f  
 2103 1174 D4F800A0 	8:  _UNGET_TOKEN 
 2103      D4F808B0 
 2104 117c 1146     	    mov r1,r2    
 2105 117e 4FF01A00 	9:  mov r0,#TK_INTGR
 2106 1182 BDE80401 	    pop {r2,T1}
 2107 1186 7047     	    _RET 
 2108              	
 2109              	
 2110              	relop_jmp: 
 2111 1188 00       	  .byte 0 // =  
 2112 1189 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2113 118a 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2114 118b 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2115 118c 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2116 118d 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2117              	
ARM GAS  tinyBasic.s 			page 56


 2118              	
 2119              	/***********************************
 2120              	    get_array_element
 2121              	    return value of @(n)
 2122              	  input:
 2123              	    r0    indice 
 2124              	  output:
 2125              	    r0   TK_INTGR
 2126              	    r1   value  
 2127              	************************************/
 2128 118e 00BF     	    _FUNC get_array_element 
 2129 1190 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2130 1194 4FEA8000 	    lsl r0,#2 
 2131 1198 C0EB0100 	    rsb r0,r1 
 2132 119c 0168     	    ldr r1,[r0]
 2133 119e 4FF01A00 	    mov r0,#TK_INTGR 
 2134 11a2 7047     	    _RET 
 2135              	
 2136              	
 2137              	/***********************************
 2138              	    set_array_element 
 2139              	    set value of array element 
 2140              	  input:
 2141              	    r0   index 
 2142              	    r1   new value 
 2143              	  output:
 2144              	    none
 2145              	  use:
 2146              	    r2    array pointer 
 2147              	**********************************/
 2148              	    _FUNC set_array_element 
 2149 11a4 04B4     	    push {r2}
 2150 11a6 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2151 11aa 4FEA8000 	    lsl r0,#2 
 2152 11ae A1EB0001 	    sub r1,r0 
 2153 11b2 0960     	    str r1,[r1]
 2154 11b4 04BC     	    pop {r2}
 2155 11b6 7047     	    _RET 
 2156              	
 2157              	/***********************************
 2158              	   get_var 
 2159              	   get variable value 
 2160              	  input:
 2161              	     r0    variable index {0..25}
 2162              	  output:
 2163              	     r0    TK_INTGR
 2164              	     r1    value 
 2165              	**********************************/
 2166              	    _FUNC get_var 
 2167 11b8 04F16001 	    add r1,UPP,#VARS
 2168 11bc 4FEA8000 	    lsl r0,#2 
 2169 11c0 0958     	    ldr r1,[r1,r0]
 2170 11c2 4FF01A00 	    mov r0,#TK_INTGR
 2171 11c6 7047     	    _RET 
 2172              	
 2173              	/*********************************
 2174              	    set_var 
ARM GAS  tinyBasic.s 			page 57


 2175              	    set variable value 
 2176              	  input:
 2177              	     r0    variable index {0..25}
 2178              	     r1    new value 
 2179              	  output:
 2180              	    none 
 2181              	  use:
 2182              	    r2   vars pointer 
 2183              	*********************************/
 2184              	    _FUNC set_var 
 2185 11c8 04B4     	    push {r2}
 2186 11ca 04F16002 	    add r2,UPP,#VARS
 2187 11ce 4FEA8000 	    lsl r0,#2
 2188 11d2 1150     	    str r1,[r2,r0]
 2189 11d4 04BC     	    pop {r2}
 2190 11d6 7047     	    _RET 
 2191              	
 2192              	/******************************
 2193              	    CONSTANTS data
 2194              	******************************/
 2195              	
 2196              	  .section .rodata 
 2197              	
 2198              	// system variables initial value 
 2199              	uzero:
 2200 0000 00000000 	  .word 0 // IN_SAVED
 2201 0004 00000000 	  .word 0 // COUNT
 2202 0008 00000000 	  .word 0 // BASICPTR
 2203 000c 00000000 	  .word 0 // DATAPTR
 2204 0010 00000000 	  .word 0 // DATA
 2205 0014 00000000 	  .word 0 // DATALEN
 2206 0018 0A000000 	  .word 10 // BASE
 2207 001c 00000000 	  .word 0 // TICKS
 2208 0020 00000000 	  .word 0 // TIMER
 2209 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2210 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2211 002c 00000000 	  .word 0 // FSFREE
 2212 0030 00000000 	  .word 0 // TXTBGN
 2213 0034 00000000 	  .word 0 // TXTEND
 2214 0038 00000000 	  .word 0 //LOOP_DEPTH
 2215 003c 00000000 	  .word 0 // ARRAY_SIZE
 2216 0040 00000000 	  .word 0 // FLAGS
 2217 0044 04000000 	  .word 4 // TAB_WIDTH
 2218 0048 00000000 	  .word 0 // RX_HEAD
 2219 004c 00000000 	  .word 0 // RX_TAIL
 2220 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2221 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2221      00000000 
 2221      00000000 
 2221      00000000 
 2221      00000000 
 2222 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2223 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2224 00d0 00000000 	  .word 0 // HERE 
ARM GAS  tinyBasic.s 			page 58


 2225              	ulast:
 2226              	
 2227              	  .section .rodata.dictionary 
 2228              	
 2229              	// keep alphabetic order for BASIC names from Z-A
 2230              	// this sort order is for for WORDS cmd output. 	
 2231              	  .type kword_end, %object
 2232              		.equ link, 0
 2233              	kword_end:
 2234 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2234      00000000 
 2234      00000000 
 2234      00000000 
 2235 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2235      54000000 
 2235      15000000 
 2235      59504F53 
 2235      00000000 
 2236 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2236      53000000 
 2236      15000000 
 2236      58504F53 
 2236      00000000 
 2237 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2237      52000000 
 2237      15000000 
 2237      584F5200 
 2238 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2238      51000000 
 2238      17000000 
 2238      574F5244 
 2238      53000000 
 2239 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2239      50000000 
 2239      17000000 
 2239      57414954 
 2239      00000000 
 2240 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2240      4F000000 
 2240      17000000 
 2240      554E5449 
 2240      4C000000 
 2241 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2241      4E000000 
 2241      15000000 
 2241      55464C41 
 2241      53480000 
 2242 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2242      4D000000 
 2242      15000000 
 2242      55424F55 
 2242      4E440000 
 2243 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2243      4C000000 
 2243      17000000 
 2243      54524143 
 2243      45000000 
ARM GAS  tinyBasic.s 			page 59


 2244 00c0 B8000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2244      4B000000 
 2244      17000000 
 2244      544F0000 
 2245 00d0 CC000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2245      49000000 
 2245      17000000 
 2245      54494D45 
 2245      52000000 
 2246 00e4 DC000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2246      4A000000 
 2246      15000000 
 2246      54494D45 
 2246      4F555400 
 2247 00f8 F0000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2247      48000000 
 2247      15000000 
 2247      5449434B 
 2247      53000000 
 2248 010c 04010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2248      47000000 
 2248      17000000 
 2248      5448454E 
 2248      00000000 
 2249 0120 18010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2249      46000000 
 2249      17000000 
 2249      54414200 
 2250 0130 2C010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2250      45000000 
 2250      17000000 
 2250      53544F52 
 2250      45000000 
 2251 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2251      44000000 
 2251      17000000 
 2251      53544F50 
 2251      00000000 
 2252 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2252      43000000 
 2252      17000000 
 2252      53544550 
 2252      00000000 
 2253 016c 64010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2253      42000000 
 2253      17000000 
 2253      53504300 
 2254 017c 78010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2254      41000000 
 2254      17000000 
 2254      534C4545 
 2254      50000000 
 2255 0190 88010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2255      40000000 
 2255      17000000 
 2255      53415645 
 2255      00000000 
ARM GAS  tinyBasic.s 			page 60


 2256 01a4 9C010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2256      3F000000 
 2256      17000000 
 2256      52554E00 
 2257 01b4 B0010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2257      3E000000 
 2257      15000000 
 2257      52534849 
 2257      46540000 
 2258 01c8 C0010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2258      3D000000 
 2258      15000000 
 2258      524E4400 
 2259 01d8 D4010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2259      3C000000 
 2259      17000000 
 2259      52455455 
 2259      524E0000 
 2260 01ec E4010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2260      3B000000 
 2260      17000000 
 2260      52455354 
 2260      4F524500 
 2261 0200 F8010000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2261      3A000000 
 2261      17000000 
 2261      52454D00 
 2262 0210 0C020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2262      39000000 
 2262      15000000 
 2262      52454144 
 2262      00000000 
 2263 0224 1C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2263      38000000 
 2263      15000000 
 2263      514B4559 
 2263      00000000 
 2264 0238 30020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2264      37000000 
 2264      17000000 
 2264      50555400 
 2265 0248 44020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2265      36000000 
 2265      17000000 
 2265      50555348 
 2265      00000000 
 2266 025c 54020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2266      35000000 
 2266      17000000 
 2266      5052494E 
 2266      54000000 
 2267 0270 68020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2267      34000000 
 2267      15000000 
 2267      504F5000 
 2268 0280 7C020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2268      33000000 
ARM GAS  tinyBasic.s 			page 61


 2268      17000000 
 2268      504F4B45 
 2268      57000000 
 2269 0294 8C020000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2269      32000000 
 2269      17000000 
 2269      504F4B45 
 2269      48000000 
 2270 02a8 A0020000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2270      31000000 
 2270      17000000 
 2270      504F4B45 
 2270      42000000 
 2271 02bc B4020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2271      2D000000 
 2271      17000000 
 2271      504D4F44 
 2271      45000000 
 2272 02d0 C8020000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2272      30000000 
 2272      15000000 
 2272      5045454B 
 2272      57000000 
 2273 02e4 DC020000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2273      2F000000 
 2273      15000000 
 2273      5045454B 
 2273      48000000 
 2274 02f8 F0020000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2274      2E000000 
 2274      15000000 
 2274      5045454B 
 2274      42000000 
 2275 030c 04030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2275      2C000000 
 2275      17000000 
 2275      50415553 
 2275      45000000 
 2276 0320 18030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2276      2B000000 
 2276      15000000 
 2276      50414400 
 2277 0330 2C030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2277      2A000000 
 2277      17000000 
 2277      4F555400 
 2278 0340 3C030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2278      29000000 
 2278      15000000 
 2278      4F520000 
 2279 0350 4C030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2279      28000000 
 2279      15000000 
 2279      4E4F5400 
 2280 0360 5C030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2280      27000000 
 2280      17000000 
ARM GAS  tinyBasic.s 			page 62


 2280      4E455854 
 2280      00000000 
 2281 0374 6C030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2281      26000000 
 2281      17000000 
 2281      4E455700 
 2282 0384 80030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2282      25000000 
 2282      15000000 
 2282      4C534849 
 2282      46540000 
 2283 0398 90030000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2283      24000000 
 2283      17000000 
 2283      4C4F4341 
 2283      54450000 
 2284 03ac A4030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2284      23000000 
 2284      17000000 
 2284      4C4F4144 
 2284      00000000 
 2285 03c0 B8030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2285      22000000 
 2285      17000000 
 2285      4C495354 
 2285      00000000 
 2286 03d4 CC030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2286      21000000 
 2286      17000000 
 2286      4C455400 
 2287 03e4 E0030000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 2287      20000000 
 2287      15000000 
 2287      4B455900 
 2288 03f4 F0030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2288      1F000000 
 2288      15000000 
 2288      494E5645 
 2288      52540000 
 2289 0408 00040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2289      1E000000 
 2289      17000000 
 2289      494E5055 
 2289      54000000 
 2290 041c 14040000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2290      1D000000 
 2290      15000000 
 2290      494E0000 
 2291 042c 28040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2291      1C000000 
 2291      17000000 
 2291      49460000 
 2292 043c 38040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2292      1B000000 
 2292      17000000 
 2292      48455800 
 2293 044c 48040000 	  _dict_entry TK_INTGR,GPIOC,GPIOC_BASE_ADR //  
ARM GAS  tinyBasic.s 			page 63


 2293      00100140 
 2293      1A000000 
 2293      4750494F 
 2293      43000000 
 2294 0460 58040000 	  _dict_entry TK_INTGR,GPIOB,GPIOB_BASE_ADR //  
 2294      000C0140 
 2294      1A000000 
 2294      4750494F 
 2294      42000000 
 2295 0474 6C040000 	  _dict_entry TK_INTGR,GPIOA,GPIOA_BASE_ADR //  
 2295      00080140 
 2295      1A000000 
 2295      4750494F 
 2295      41000000 
 2296 0488 80040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2296      1A000000 
 2296      17000000 
 2296      474F544F 
 2296      00000000 
 2297 049c 94040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2297      19000000 
 2297      17000000 
 2297      474F5355 
 2297      42000000 
 2298 04b0 A8040000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2298      18000000 
 2298      15000000 
 2298      47455400 
 2299 04c0 BC040000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2299      17000000 
 2299      15000000 
 2299      46524545 
 2299      00000000 
 2300 04d4 CC040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2300      16000000 
 2300      17000000 
 2300      464F5247 
 2300      45540000 
 2301 04e8 E0040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2301      15000000 
 2301      17000000 
 2301      464F5200 
 2302 04f8 F4040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2302      14000000 
 2302      17000000 
 2302      45524153 
 2302      45000000 
 2303 050c 04050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2303      13000000 
 2303      17000000 
 2303      454E4400 
 2304 051c 18050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2304      12000000 
 2304      17000000 
 2304      44554D50 
 2304      00000000 
 2305 0530 28050000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
ARM GAS  tinyBasic.s 			page 64


 2305      11000000 
 2305      17000000 
 2305      44524F50 
 2305      00000000 
 2306 0544 3C050000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2306      10000000 
 2306      17000000 
 2306      444F0000 
 2307 0554 50050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2307      0F000000 
 2307      17000000 
 2307      44495200 
 2308 0564 60050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2308      0E000000 
 2308      17000000 
 2308      44454300 
 2309 0574 70050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2309      0D000000 
 2309      17000000 
 2309      44415441 
 2309      4C4E0000 
 2310 0588 80050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2310      0C000000 
 2310      17000000 
 2310      44415441 
 2310      00000000 
 2311 059c 94050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2311      0B000000 
 2311      17000000 
 2311      434F4E53 
 2311      54000000 
 2312 05b0 A8050000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2312      0A000000 
 2312      17000000 
 2312      434C5300 
 2313 05c0 BC050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2313      09000000 
 2313      16000000 
 2313      43484152 
 2313      00000000 
 2314 05d4 CC050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2314      08000000 
 2314      17000000 
 2314      42544F47 
 2314      4C000000 
 2315 05e8 E0050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2315      07000000 
 2315      15000000 
 2315      42544553 
 2315      54000000 
 2316 05fc F4050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2316      06000000 
 2316      17000000 
 2316      42534554 
 2316      00000000 
 2317 0610 08060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2317      05000000 
ARM GAS  tinyBasic.s 			page 65


 2317      17000000 
 2317      42524553 
 2317      00000000 
 2318 0624 1C060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2318      04000000 
 2318      15000000 
 2318      42495400 
 2319 0634 30060000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2319      03000000 
 2319      17000000 
 2319      41575500 
 2320 0644 40060000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2320      02000000 
 2320      15000000 
 2320      41534300 
 2321 0654 50060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2321      01000000 
 2321      15000000 
 2321      414E4400 
 2322              	first_link: 
 2323 0664 60060000 	  .word LINK 
 2324 0668 00000000 	  .word ABS_IDX 
 2325 066c 15000000 	  .word TK_IFUNC
 2326              	kword_dict: // first name field 
 2327              	  .equ LINK,. 
 2328 0670 41425300 	  .asciz "ABS" 
 2329              	  .p2align 2 
 2330              	
 2331              	    .section .rodata.fn_tabld 
 2332              	
 2333              	//comands and fonctions address table
 2334              	  .type fn_table, %object
 2335              	fn_table:
 2336 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2336      00000000 
 2336      00000000 
 2336      00000000 
 2336      00000000 
 2337 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2337      00000000 
 2337      00000000 
 2337      00000000 
 2337      00000000 
 2338 0030 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2338      00000000 
 2338      00000000 
 2338      00000000 
 2338      00000000 
 2339 004c 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2339      00000000 
 2339      00000000 
 2339      00000000 
 2339      00000000 
 2340 006c 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2340      00000000 
 2340      00000000 
 2340      00000000 
ARM GAS  tinyBasic.s 			page 66


 2340      00000000 
 2341 0084 00000000 		.word let,list,load,locate,lshift,new,next
 2341      00000000 
 2341      00000000 
 2341      00000000 
 2341      00000000 
 2342 00a0 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2342      00000000 
 2342      00000000 
 2342      00000000 
 2342      00000000 
 2343 00c4 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2343      00000000 
 2343      00000000 
 2343      00000000 
 2343      00000000 
 2344 00e0 00000000 		.word qkey,read,skip_line
 2344      00000000 
 2344      00000000 
 2345 00ec 00000000 		.word restore,return, random,rshift,run,save
 2345      00000000 
 2345      00000000 
 2345      00000000 
 2345      00000000 
 2346 0104 00000000 		.word sleep,spc,step,stop,store,tab
 2346      00000000 
 2346      00000000 
 2346      00000000 
 2346      00000000 
 2347 011c 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2347      00000000 
 2347      00000000 
 2347      00000000 
 2347      00000000 
 2348 0140 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2349 0154 00000000 		.word 0 
 2350              	
 2351              	
 2352              	/**********************************
 2353              	    BASIC commands and functions 
 2354              	**********************************/
 2355              	
 2356              	    .section .text.basic , "ax", %progbits 
 2357              	
 2358              	
 2359              	/*******************************
 2360              	  BASIC:  ABS expr 
 2361              	  input:
 2362              	    none 
 2363              	  output:
 2364              	    r0    token type 
 2365              	    r1    abs(expr)
 2366              	  use:
ARM GAS  tinyBasic.s 			page 67


 2367              	    none 
 2368              	******************************/
 2369              	    _FUNC abs 
 2370 0000 00B5FFF7 	    _CALL arg_list
 2370      FEFF5DF8 
 2370      04EB
 2371 000a 0128     	    cmp r0,#1 
 2372 000c 01D0     	    beq 1f 
 2373 000e FFF7FEBF 	    b syntax_error 
 2374 0012 5CF8041B 	1:  _POP r1 
 2375 0016 11F0004F 	    tst r1,#(1<<31)
 2376 001a 01D0     	    beq 9f
 2377 001c C1F10001 	    rsb r1,#0 
 2378 0020 4FF01A00 	9:  mov r0,#TK_INTGR
 2379 0024 7047     	   _RET 
 2380              	
 2381 0026 00BF     	    _FUNC power_adc
 2382 0028 7047     	    _RET
 2383              	
 2384 002a 00BF     	    _FUNC analog_read
 2385 002c 7047     	    _RET
 2386              	
 2387              	/************************************
 2388              	  BASIC: AND(expr1,expr2)
 2389              	  logical ANND bit to between expr1,expr2
 2390              	************************************/
 2391 002e 00BF     	    _FUNC bit_and
 2392 0030 00B5FFF7 	    _CALL func_args 
 2392      FEFF5DF8 
 2392      04EB
 2393 003a 0228     	    cmp r0,#2 
 2394 003c 7FF4FEAF 	    bne syntax_error 
 2395 0040 5CF8040B 	    _POP r0 
 2396 0044 5CF8041B 	    _POP r1 
 2397 0048 01EA0001 	    and r1,r0 
 2398 004c 4FF01A00 	    mov r0,#TK_INTGR
 2399 0050 7047     	    _RET
 2400              	
 2401              	/*******************************************
 2402              	  BASIC: ASC(string|char)
 2403              	  return ASCII code of char of first char 
 2404              	  of string 
 2405              	*******************************************/
 2406 0052 00BF     	    _FUNC ascii
 2407 0054 4FF00500 	    mov r0,#TK_LPAREN 
 2408 0058 00B5FFF7 	    _CALL expect 
 2408      FEFF5DF8 
 2408      04EB
 2409 0062 00B5FFF7 	    _CALL next_token 
 2409      FEFF5DF8 
 2409      04EB
 2410 006c 1B28     	    cmp r0,#TK_QSTR
 2411 006e 03D0     	    beq 2f 
 2412 0070 1328     	    cmp r0,#TK_CHAR 
 2413 0072 7FF4FEAF 	    bne syntax_error 
 2414 0076 00E0     	    b 9f 
 2415 0078 0978     	2:  ldrb r1,[r1]
ARM GAS  tinyBasic.s 			page 68


 2416 007a 4CF8041D 	9:  _PUSH r1 
 2417 007e 4FF00600 	    mov r0,#TK_RPAREN 
 2418 0082 00B5FFF7 	    _CALL expect 
 2418      FEFF5DF8 
 2418      04EB
 2419 008c 4FF01A00 	    mov r0,#TK_INTGR 
 2420 0090 5CF8041B 	    _POP r1 
 2421 0094 7047     	    _RET
 2422              	
 2423 0096 00BF     	    _FUNC autorun
 2424 0098 7047     	    _RET
 2425              	
 2426              	/*******************************************
 2427              	  BASIC: AWU time_sleep  
 2428              	  enable LSI and IWDG and place MCU in 
 2429              	  deep sleep. IDWG wakeup MCU 
 2430              	******************************************/
 2431 009a 00BF     	    _FUNC awu
 2432 009c 00B5FFF7 	    _CALL arg_list
 2432      FEFF5DF8 
 2432      04EB
 2433 00a6 0128     	    cmp r0,#1 
 2434 00a8 7FF4FEAF 	    bne syntax_error 
 2435 00ac 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2435      C4F20201 
 2436 00b4 486A     	    ldr r0,[r1,#RCC_CSR]
 2437              	// enable LSI 
 2438 00b6 80F00100 	    eor r0,#1
 2439 00ba 4862     	    str r0,[r1,#RCC_CSR]
 2440              	// wait for LSIRDY 
 2441 00bc 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2442 00be 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2443 00c2 FBD0     	    beq 1b 
 2444              	// configure IWDG
 2445              	// compute values for IWDG_PR and IWDG_RLR 
 2446 00c4 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2447 00c8 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2448 00cc 03FB02F2 	    mul r2,r3 
 2449 00d0 83EA0303 	    eor r3,r3
 2450 00d4 B2F5005F 	2:  cmp r2,#8192 
 2451 00d8 04D4     	    bmi 3f 
 2452 00da 4FEA5202 	    lsr r2,#1 
 2453 00de 03F10103 	    add r3,#1
 2454 00e2 F7E7     	    b 2b
 2455              	// initialize IWDG      
 2456 00e4 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2456      C4F20001 
 2457 00ec 45F25550 	    mov r0,0x5555 // enable register writing
 2458 00f0 0860     	    str r0,[r1,#IWDG_KR]
 2459 00f2 4B60     	    str r3,[r1,#IWDG_PR]
 2460 00f4 8A60     	    str r2,[r1,#IWDG_RLR]
 2461 00f6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2462 00fa 0860     	    str r0,[r1,#IWDG_KR]
 2463 00fc 00F06ABF 	    b sleep // place MCU in deep sleep
 2464 0100 7047     	    _RET
 2465              	
 2466              	/********************************************
ARM GAS  tinyBasic.s 			page 69


 2467              	  BASIC: BIT(expr)
 2468              	  expr must be between 0..31 and is used 
 2469              	  to create 1 bit mask at that position
 2470              	*******************************************/
 2471 0102 00BF     	    _FUNC bitmask
 2472 0104 00B5FFF7 	    _CALL func_args
 2472      FEFF5DF8 
 2472      04EB
 2473 010e 0128     	    cmp r0,#1 
 2474 0110 7FF4FEAF 	    bne syntax_error 
 2475 0114 5CF8040B 	    _POP r0
 2476 0118 4FF00101 	    mov r1,#1
 2477 011c 01FA00F1 	    lsl r1,r0 
 2478 0120 4FF01A00 	9:  mov r0,#TK_INTGR
 2479 0124 7047     	    _RET 
 2480              	
 2481              	  
 2482              	  /*********************************
 2483              	   BASIC: BRES adr, mask   
 2484              	   reset bits [adr]= [adr] & ~mask  
 2485              	   input:
 2486              	     none 
 2487              	    output;
 2488              	      none 
 2489              	    use:
 2490              	      T1   temp
 2491              	      T2   temp 
 2492              	*******************************/     
 2493 0126 00BF     	  _FUNC bit_reset
 2494 0128 00B5FFF7 	    _CALL arg_list 
 2494      FEFF5DF8 
 2494      04EB
 2495 0132 0228     	    cmp r0,#2 
 2496 0134 01D0     	    beq 1f 
 2497 0136 FFF7FEBF 	    b syntax_error 
 2498 013a 5CF8041B 	1:  _POP r1 //mask 
 2499 013e 5CF8040B 	    _POP r0 //address 
 2500 0142 D0F80090 	    ldr T2,[r0] 
 2501 0146 81F0FF31 	    eor r1,#-1 // ~mask 
 2502 014a 01EA0901 	    and r1,T2
 2503 014e 0160     	    str r1,[r0]
 2504 0150 7047     	    _RET  
 2505              	
 2506              	
 2507              	/*********************************
 2508              	   BASIC: BSET adr, mask   
 2509              	   reset bits [adr]= [adr] & ~mask  
 2510              	   input:
 2511              	      none 
 2512              	    output;
 2513              	      none 
 2514              	    use:
 2515              	      T1   temp
 2516              	      T2   temp  
 2517              	*******************************/     
 2518 0152 00BF     	    _FUNC bit_set
 2519 0154 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 70


 2519      FEFF5DF8 
 2519      04EB
 2520 015e 0228     	    cmp r0,#2 
 2521 0160 01D0     	    beq 1f 
 2522 0162 FFF7FEBF 	    b syntax_error 
 2523 0166 5CF8041B 	1:  _POP r1 //mask 
 2524 016a 5CF8040B 	    _POP r0 //address 
 2525 016e D0F80090 	    ldr T2,[r0] 
 2526 0172 41EA0901 	    orr r1,T2
 2527 0176 0160     	    str r1,[r0]
 2528 0178 7047     	    _RET 
 2529              	
 2530              	  /*********************************
 2531              	   BASIC: BTOGL adr, mask   
 2532              	   reset bits [adr]= [adr] & ~mask  
 2533              	   input:
 2534              	     r0    adr 
 2535              	     r1    mask 
 2536              	    output;
 2537              	      none 
 2538              	    use:
 2539              	      T1   temp
 2540              	      T2   temp  
 2541              	*******************************/     
 2542 017a 00BF     	  _FUNC bit_toggle
 2543 017c 00B5FFF7 	    _CALL arg_list 
 2543      FEFF5DF8 
 2543      04EB
 2544 0186 0228     	    cmp r0,#2 
 2545 0188 01D0     	    beq 1f 
 2546 018a FFF7FEBF 	    b syntax_error 
 2547 018e 5CF8041B 	1:  _POP r1 //mask 
 2548 0192 5CF8040B 	    _POP r0 //address 
 2549 0196 D0F80090 	    ldr T2,[r0] 
 2550 019a 81EA0901 	    eor r1,T2
 2551 019e 0160     	    str r1,[r0]
 2552 01a0 7047     	    _RET  
 2553              	
 2554              	/********************************
 2555              	  BASIC: BTEST(addr,bit)
 2556              	  return bit state at address
 2557              	********************************/
 2558 01a2 00BF     	    _FUNC bit_test
 2559 01a4 00B5FFF7 	    _CALL func_args
 2559      FEFF5DF8 
 2559      04EB
 2560 01ae 0228     	    cmp r0,#2 
 2561 01b0 7FF4FEAF 	    bne syntax_error 
 2562 01b4 5CF8041B 	    _POP r1
 2563 01b8 4FF00100 	    mov r0,#1
 2564 01bc 01F01F01 	    and r1,#31  
 2565 01c0 21B1     	1:  cbz r1, 2f
 2566 01c2 4FEA4000 	    lsl r0,#1
 2567 01c6 A1F10101 	    sub r1,#1
 2568 01ca F9E7     	    b 1b 
 2569 01cc 5CF8041B 	2:  _POP r1
 2570 01d0 0968     	    ldr r1,[r1]
ARM GAS  tinyBasic.s 			page 71


 2571 01d2 01EA0001 	    and r1,r0 
 2572 01d6 09B1     	    cbz r1,9f 
 2573 01d8 4FF00101 	    mov r1,#1
 2574 01dc 4FF01A00 	9:  mov r0,#TK_INTGR    
 2575 01e0 7047     	    _RET 
 2576              	
 2577              	/********************************
 2578              	  BASIC: CLS 
 2579              	  clear terminal screen move cursor 
 2580              	  home 
 2581              	************************************/
 2582 01e2 00BF     	    _FUNC cls 
 2583 01e4 00B5FFF7 	    _CALL clear_screen
 2583      FEFF5DF8 
 2583      04EB
 2584 01ee 7047     	    _RET 
 2585              	
 2586              	/*********************************
 2587              	  BASIC: CHAR(expr)
 2588              	  convert expr in character 
 2589              	********************************/
 2590              	    _FUNC char
 2591 01f0 00B5FFF7 	    _CALL func_args
 2591      FEFF5DF8 
 2591      04EB
 2592 01fa 0128     	    cmp r0,#1
 2593 01fc 7FF4FEAF 	    bne syntax_error 
 2594 0200 5CF8041B 	    _POP r1 
 2595 0204 01F07F01 	    and r1,#127 
 2596 0208 4FF01300 	    mov r0,#TK_CHAR
 2597 020c 7047     	    _RET 
 2598              	
 2599              	/**********************************
 2600              	  BASIC: CONST !label=expr [,!label=expr]
 2601              	  define constants constants are 
 2602              	  store at end of BASIC code.
 2603              	  use:
 2604              	    T1   *location 
 2605              	    T2   *bound 
 2606              	*********************************/
 2607 020e 00BF     	    _FUNC const
 2608 0210 206C10F0 	    _RTO 
 2608      010F03D1 
 2608      4FF00700 
 2608      FFF7FEBF 
 2609 0220 D4F8D080 	    ldr T1,[UPP,#HERE]
 2610 0224 DFF80897 	    ldr T2,pad_adr  
 2611 0228 C845     	1:  cmp T1,T2 
 2612 022a 03D4     	    bmi 2f 
 2613 022c 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2614 0230 FFF7FEBF 	    b tb_error 
 2615 0234 00B5FFF7 	2:  _CALL next_token 
 2615      FEFF5DF8 
 2615      04EB
 2616 023e 1928     	    cmp r0,#TK_LABEL 
 2617 0240 7FF4FEAF 	    bne syntax_error 
 2618 0244 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
ARM GAS  tinyBasic.s 			page 72


 2619 0248 4CF8041D 	    _PUSH r1 
 2620 024c 4FF00D00 	    mov r0,#TK_EQUAL
 2621 0250 00B5FFF7 	    _CALL expect
 2621      FEFF5DF8 
 2621      04EB
 2622 025a 00B5FFF7 	    _CALL expression  
 2622      FEFF5DF8 
 2622      04EB
 2623 0264 1A28     	    cmp r0,#TK_INTGR
 2624 0266 7FF4FEAF 	    bne syntax_error
 2625 026a 5CF8040B 	    _POP r0 
 2626 026e 48F8040B 	    str r0,[T1],#4
 2627 0272 48F8041B 	    str r1,[T1],#4 
 2628 0276 C4F8D080 	    str T1,[UPP,#HERE]
 2629 027a 00B5FFF7 	    _CALL next_token
 2629      FEFF5DF8 
 2629      04EB
 2630 0284 0228     	    cmp r0,#TK_COMMA 
 2631 0286 CFD0     	    beq 1b 
 2632 0288 D4F800A0 	    _UNGET_TOKEN
 2632      D4F808B0 
 2633              	9:  
 2634 0290 7047     	    _RET 
 2635              	
 2636              	
 2637              	/**************************
 2638              	  BASIC: DATALN expr 
 2639              	  set data pointer to line#
 2640              	  specified by expr. 
 2641              	  if line# not valid program 
 2642              	  end with error.
 2643              	  use:
 2644              	
 2645              	**************************/
 2646 0292 00BF     	    _FUNC data_line
 2647 0294 206C10F0 	    _RTO // run time only 
 2647      010F03D1 
 2647      4FF00700 
 2647      FFF7FEBF 
 2648 02a4 00B5FFF7 	    _CALL expression 
 2648      FEFF5DF8 
 2648      04EB
 2649 02ae 1A28     	    cmp r0,#TK_INTGR
 2650 02b0 7FF4FEAF 	    bne syntax_error
 2651 02b4 0846     	    mov r0,r1 
 2652 02b6 00B5FFF7 	    _CALL search_lineno
 2652      FEFF5DF8 
 2652      04EB
 2653 02c0 0029     	    cmp r1,#0
 2654 02c2 03D0     	    beq 1f 
 2655 02c4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2656 02c8 FFF7FEBF 	    b syntax_error 
 2657 02cc C178     	1:  ldrb r1,[r0,#3]
 2658 02ce 1729     	    cmp r1,#TK_CMD 
 2659 02d0 F8D1     	    bne 0b
 2660 02d2 0179     	    ldrb r1,[r0,#4]
 2661 02d4 0C29     	    cmp r1,#DATA_IDX 
ARM GAS  tinyBasic.s 			page 73


 2662 02d6 F5D1     	    bne 0b  
 2663 02d8 E060     	    str r0,[UPP,#DATAPTR]
 2664 02da 8178     	    ldrb r1,[r0,#2]
 2665 02dc 6161     	    str r1,[UPP,#DATALEN]
 2666 02de 4FF00501 	    mov r1,#5 // position of first data item  
 2667 02e2 2161     	    str r1,[UPP,#DATA]
 2668 02e4 7047     	    _RET 
 2669              	
 2670              	/*****************************
 2671              	  BASIC: READ 
 2672              	  read next data item 
 2673              	  the value can be assigned to
 2674              	  variable or used in expression
 2675              	*****************************/
 2676 02e6 00BF     	    _FUNC read
 2677 02e8 206C10F0 	    _RTO
 2677      010F03D1 
 2677      4FF00700 
 2677      FFF7FEBF 
 2678 02f8 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2679 02fa E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2680 02fc 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2681 02fe 8242     	    cmp r2,r0
 2682 0300 0ED0     	    beq seek_next
 2683 0302 885C     	1:  ldrb r0,[r1,r2]
 2684 0304 02F10102 	    add r2,#1
 2685 0308 0028     	    cmp r0,#TK_NONE
 2686 030a 09D0     	    beq seek_next
 2687 030c 0228     	    cmp r0,#TK_COMMA
 2688 030e F8D0     	    beq 1b  
 2689 0310 1A28     	    cmp r0,#TK_INTGR 
 2690 0312 7FF4FEAF 	    bne syntax_error  
 2691 0316 8958     	    ldr r1,[r1,r2]
 2692 0318 02F10402 	    add r2,#4
 2693 031c 2261     	    str r2,[UPP,#DATA]
 2694 031e 12E0     	    b 9f  
 2695              	seek_next: // is next line data ?
 2696 0320 8878     	    ldrb r0,[R1,#2]
 2697 0322 0144     	    add r1,r0 
 2698 0324 C878     	    ldrb r0,[R1,#3]
 2699 0326 1728     	    cmp r0,#TK_CMD
 2700 0328 09D1     	    bne 2f 
 2701 032a 0879     	    ldrb r0,[r1,#4]
 2702 032c 0C28     	    cmp r0,#DATA_IDX 
 2703 032e 06D1     	    bne 2f 
 2704 0330 E160     	    str r1,[UPP,#DATAPTR]
 2705 0332 8878     	    ldrb r0,[r1,#2]
 2706 0334 6061     	    str  r0,[UPP,#DATALEN]
 2707 0336 4FF00502 	    mov r2,#5 
 2708 033a 2261     	    str r2,[UPP,#DATA]
 2709 033c E1E7     	    b 1b 
 2710 033e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2711 0342 FFF7FEBF 	    b tb_error 
 2712 0346 7047     	9:  _RET 
 2713              	
 2714              	/********************************
 2715              	  BASIC: RESTORE 
ARM GAS  tinyBasic.s 			page 74


 2716              	  seek first data line 
 2717              	********************************/
 2718              	    _FUNC restore
 2719 0348 206C10F0 	    _RTO 
 2719      010F03D1 
 2719      4FF00700 
 2719      FFF7FEBF 
 2720 0358 216B     	    ldr r1,[UPP,#TXTBGN]
 2721 035a 606B     	1:  ldr r0,[UPP,#TXTEND]
 2722 035c 0FD0     	    beq no_data_line 
 2723 035e 0879     	    ldrb r0,[r1,#4]
 2724 0360 0C28     	    cmp r0,#DATA_IDX
 2725 0362 09D1     	    bne try_next_line
 2726 0364 C878     	    ldrb r0,[r1,#3]
 2727 0366 1728     	    cmp r0,#TK_CMD
 2728 0368 06D1     	    bne try_next_line
 2729              	// this a the first data line 
 2730 036a E160     	    str r1,[UPP,#DATAPTR]
 2731 036c 8878     	    ldrb r0,[r1,#2]
 2732 036e 6061     	    str r0,[UPP,#DATALEN]
 2733 0370 4FF00500 	    mov r0,#5 
 2734 0374 2061     	    str r0,[UPP,#DATA]
 2735 0376 07E0     	    b 9f
 2736              	try_next_line:
 2737 0378 8878     	    ldrb r0,[r1,#2]
 2738 037a 0144     	    add r1,r0 
 2739 037c EDE7     	    b 1b 
 2740              	no_data_line:
 2741 037e 80EA0000 	    eor r0,r0 
 2742 0382 E060     	    str r0,[UPP,#DATAPTR]
 2743 0384 2061     	    str r0,[UPP,#DATA]
 2744 0386 6061     	    str r0,[UPP,#DATALEN]
 2745 0388 7047     	9:  _RET 
 2746              	
 2747              	/***********************************
 2748              	  BASIC: DEC 
 2749              	  switch base to decimal 
 2750              	***********************************/
 2751 038a 00BF     	    _FUNC dec_base
 2752 038c 4FF00A00 	    mov r0,#10
 2753 0390 A061     	    str r0,[UPP,#BASE]
 2754 0392 7047     	    _RET 
 2755              	
 2756              	/***************************************
 2757              	  BASIC: DO 
 2758              	  initialize a DO..UNTIL loop 
 2759              	***************************************/
 2760              	    _FUNC do_loop
 2761 0394 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2762 0398 7047     	    _RET 
 2763              	
 2764              	
 2765              	/****************************************
 2766              	  BASIC: DUMP adr, count 
 2767              	    command line only  
 2768              	    print memory content in hexadecimal 
 2769              	    16 bytes per row 
ARM GAS  tinyBasic.s 			page 75


 2770              	    ouput:
 2771              	      none 
 2772              	    use:
 2773              	      r2   byte counter  
 2774              	****************************************/
 2775 039a 00BF     	    _FUNC dump 
 2776 039c 04B4     	    push {r2}
 2777 039e 226C     	    ldr r2,[UPP,#FLAGS]
 2778 03a0 12F0010F 	    tst r2,#FRUN 
 2779 03a4 03D0     	    beq 0f
 2780 03a6 4FF00700 	    mov r0,#ERR_CMD_ONLY 
 2781 03aa FFF7FEBF 	    b tb_error  
 2782 03ae 00B5FFF7 	0:  _CALL arg_list 
 2782      FEFF5DF8 
 2782      04EB
 2783 03b8 0228     	    cmp r0,#2
 2784 03ba 7FF4FEAF 	    bne syntax_error 
 2785 03be 5CF8042B 	    _POP r2   // count 
 2786 03c2 5CF8040B 	    _POP  r0  // adr
 2787 03c6 01B0     	    add sp,#4 // to balance stack when entering at dump01 
 2788              	dump01:
 2789 03c8 81B0     	    sub sp,#4
 2790 03ca 00B500F0 	    _CALL print_dump_header 
 2790      0EF85DF8 
 2790      04EB
 2791 03d4 4FF01001 	1:  mov r1,#16
 2792 03d8 00B5FFF7 	    _CALL prt_row 
 2792      FEFF5DF8 
 2792      04EB
 2793 03e2 103A     	    subs r2,#16 
 2794 03e4 F6D5     	    bpl 1b 
 2795 03e6 04BC     	2:  pop {r2}
 2796 03e8 7047     	    _RET 
 2797              	
 2798              	/********************************
 2799              	   print_dump_header
 2800              	********************************/
 2801 03ea 00BF     	    _FUNC print_dump_header
 2802 03ec 2DE90103 	    push {r0,T1,T2}
 2803 03f0 4FF00C00 	    mov r0,#12 
 2804 03f4 00B5FFF7 	    _CALL cursor_x 
 2804      FEFF5DF8 
 2804      04EB
 2805 03fe 4FF00000 	    mov r0,#0
 2806 0402 4FF01009 	    mov T2,#16
 2807 0406 8046     	1:  mov T1,r0 
 2808 0408 00B5FFF7 	    _CALL print_hex 
 2808      FEFF5DF8 
 2808      04EB
 2809 0412 08F10100 	    add r0,T1,#1  
 2810 0416 4845     	    cmp r0,T2 
 2811 0418 F5D4     	    bmi 1b 
 2812 041a 00B5FFF7 	    _CALL cr
 2812      FEFF5DF8 
 2812      04EB
 2813 0424 4FF03D00 	    mov r0,#'='
 2814 0428 4FF04F08 	    mov T1,#79
ARM GAS  tinyBasic.s 			page 76


 2815 042c 00B5FFF7 	2:  _CALL uart_putc
 2815      FEFF5DF8 
 2815      04EB
 2816 0436 B8F10108 	    subs T1,#1 
 2817 043a F7D1     	    bne 2b     
 2818 043c 00B5FFF7 	    _CALL cr
 2818      FEFF5DF8 
 2818      04EB
 2819 0446 BDE80103 	    pop {r0,T1,T2}
 2820 044a 7047     	    _RET 
 2821              	
 2822              	
 2823              	/*******************************
 2824              	  BASIC: END 
 2825              	  exit program 
 2826              	******************************/ 
 2827              	    _FUNC cmd_end
 2828 044c FFF7FEBF 	    b warm_start 
 2829 0450 7047     	    _RET 
 2830              	
 2831              	/*******************************************
 2832              	  BASIC: STORE adr, value 
 2833              	  write value to user space in flash memory 
 2834              	*********************************************/
 2835 0452 00BF     	    _FUNC store 
 2836 0454 00B5FFF7 	    _CALL arg_list 
 2836      FEFF5DF8 
 2836      04EB
 2837 045e 0228     	    cmp r0,#2 
 2838 0460 7FF4FEAF 	    bne syntax_error 
 2839 0464 BCE80300 	    ldmia DP!,{r0,r1}
 2840 0468 DFF83020 	    ldr r2,user_space
 2841 046c 9142     	    cmp r1,r2 
 2842 046e 03D5     	    bpl 1f 
 2843 0470 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2844 0474 FFF7FEBF 	    b tb_error 
 2845 0478 02F58062 	1:  add r2,#1024 
 2846 047c 9142     	    cmp r1,r2 
 2847 047e F7D5     	    bpl 0b 
 2848 0480 00B5FFF7 	    _CALL flash_store 
 2848      FEFF5DF8 
 2848      04EB
 2849 048a 7047     	    _RET 
 2850              	
 2851              	/**************************************************
 2852              	  BASIC: ERASE 
 2853              	  erase user space page 
 2854              	*************************************************/
 2855              	    _FUNC erase 
 2856 048c DFF80C00 	    ldr r0,user_space 
 2857 0490 00B5FFF7 	    _CALL erase_page 
 2857      FEFF5DF8 
 2857      04EB
 2858 049a 7047     	    _RET 
 2859 049c 00000000 	user_space: .word user 
 2860              	
 2861              	
ARM GAS  tinyBasic.s 			page 77


 2862              	/**************************************************
 2863              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2864              	  introdure FOR...NEXT loop 
 2865              	**************************************************/
 2866              	    _FUNC for
 2867 04a0 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2868 04a4 4FF00107 	    mov INCR,#1
 2869 04a8 00B5FFF7 	    _CALL next_token
 2869      FEFF5DF8 
 2869      04EB
 2870 04b2 1428     	    cmp r0,#TK_VAR
 2871 04b4 7FF4FEAF 	    bne syntax_error
 2872 04b8 02B4     	    push {r1} 
 2873 04ba 00B500F0 	    _CALL let_var 
 2873      25F95DF8 
 2873      04EB
 2874 04c4 20BC     	    pop {VADR}
 2875 04c6 4FEA8505 	    lsl VADR,#2
 2876 04ca 2544     	    add VADR,UPP 
 2877 04cc 05F16005 	    add VADR,#VARS 
 2878 04d0 7047     	    _RET 
 2879              	
 2880              	/***************************************
 2881              	  BASIC: TO expr 
 2882              	  set limit of FOR...NEXT loop 
 2883              	**************************************/
 2884 04d2 00BF     	    _FUNC to
 2885 04d4 00B5FFF7 	    _CALL expression 
 2885      FEFF5DF8 
 2885      04EB
 2886 04de 1A28     	    cmp r0,#TK_INTGR
 2887 04e0 7FF4FEAF 	    bne syntax_error 
 2888 04e4 0E46     	    mov LIMIT,r1
 2889              	    // save loop back parameters 
 2890 04e6 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2891 04ea 7047     	    _RET 
 2892              	
 2893              	/********************************************
 2894              	  BASIC: STEP expr 
 2895              	  set increment for FOR...NEXT loop 
 2896              	********************************************/
 2897              	    _FUNC step
 2898 04ec 00B5FFF7 	    _CALL expression 
 2898      FEFF5DF8 
 2898      04EB
 2899 04f6 1A28     	    cmp r0,#TK_INTGR
 2900 04f8 7FF4FEAF 	    bne syntax_error 
 2901 04fc 0F46     	    mov INCR,r1
 2902              	    // replace parameters left by TO
 2903 04fe 8CE8000C 	    stmia DP, {IN,BPTR}
 2904 0502 7047     	    _RET 
 2905              	
 2906              	/********************************************
 2907              	  BASIC: NEXT var 
 2908              	  incrment FOR...NEXT loop variable
 2909              	  exit if variable cross LIMIT 
 2910              	********************************************/
ARM GAS  tinyBasic.s 			page 78


 2911              	    _FUNC next
 2912 0504 00B5FFF7 	    _CALL next_token 
 2912      FEFF5DF8 
 2912      04EB
 2913 050e 1428     	    cmp r0,#TK_VAR 
 2914 0510 7FF4FEAF 	    bne syntax_error 
 2915 0514 4FEA8101 	    lsl r1,#2 
 2916 0518 2144     	    add r1,UPP 
 2917 051a 01F16001 	    add r1,#VARS 
 2918 051e A942     	    cmp r1,VADR
 2919 0520 7FF4FEAF 	    bne syntax_error 
 2920 0524 2868     	    ldr r0,[VADR]
 2921 0526 3844     	    add r0,INCR 
 2922 0528 2860     	    str r0,[VADR]
 2923 052a 002F     	    cmp INCR,#0
 2924 052c 02D4     	    bmi 2f
 2925 052e B042     	    cmp r0,LIMIT 
 2926 0530 02DC     	    bgt 8f  
 2927 0532 07E0     	    b 9f  
 2928 0534 B042     	2:  cmp r0,LIMIT 
 2929 0536 05DA     	    bge 9f  
 2930              	8: // exit for...next
 2931              	  //  drop branch parameters
 2932 0538 4FF00800 	    _DROP 2
 2932      8444
 2933              	  // restore outer loop parameters
 2934 053e BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2935 0542 7047     	    _RET 
 2936 0544 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2937 0548 9BF80200 	    ldrb r0,[BPTR,#2]
 2938 054c 6060     	    str r0,[UPP,#COUNT]
 2939 054e 00B5FFF7 	    _CALL show_trace 
 2939      FEFF5DF8 
 2939      04EB
 2940 0558 7047     	    _RET 
 2941              	
 2942              	
 2943              	/*********************************
 2944              	  BASIC: GOSUB expr 
 2945              	  call a subroutine at line# 
 2946              	*********************************/
 2947 055a 00BF     	    _FUNC gosub
 2948 055c 00B5FFF7 	    _CALL search_target 
 2948      FEFF5DF8 
 2948      04EB
 2949 0566 2DE9000C 	    push {IN,BPTR}
 2950              	target:
 2951 056a 8346     	    mov BPTR,r0 
 2952 056c 4FF0030A 	    mov IN,#3 
 2953 0570 9BF80200 	    ldrb r0,[BPTR,#2]
 2954 0574 6060     	    str r0,[UPP,#COUNT]
 2955 0576 00B5FFF7 	    _CALL show_trace 
 2955      FEFF5DF8 
 2955      04EB
 2956 0580 7047     	    _RET 
 2957              	
 2958              	/**********************************
ARM GAS  tinyBasic.s 			page 79


 2959              	  BASIC: RETURN 
 2960              	  leave a subroutine 
 2961              	*********************************/
 2962 0582 00BF     	    _FUNC return 
 2963 0584 BDE8000C 	    pop {IN,BPTR}
 2964 0588 9BF80200 	    ldrb r0,[BPTR,#2]
 2965 058c 6060     	    str r0,[UPP,#COUNT]
 2966 058e 00B5FFF7 	    _CALL show_trace 
 2966      FEFF5DF8 
 2966      04EB
 2967 0598 7047     	    _RET 
 2968              	
 2969              	/**********************************
 2970              	  BASIC: GOTO expr 
 2971              	  go to line # | label 
 2972              	**********************************/
 2973 059a 00BF     	    _FUNC goto
 2974 059c 00B5FFF7 	    _CALL search_target 
 2974      FEFF5DF8 
 2974      04EB
 2975 05a6 E0E7     	    b target  
 2976              	
 2977              	/***************************************
 2978              	  BASIC: HEX 
 2979              	  set numeric base to hexadecimal 
 2980              	***************************************/
 2981              	    _FUNC hex_base
 2982 05a8 4FF01000 	    mov r0,#16 
 2983 05ac A061     	    str r0,[UPP,#BASE]
 2984 05ae 7047     	    _RET 
 2985              	
 2986              	/**********************************************
 2987              	  BASIC: IF relation THEN statement
 2988              	  execute statement only if relation is true
 2989              	*********************************************/
 2990              	    _FUNC if
 2991 05b0 00B5FFF7 	    _CALL relation 
 2991      FEFF5DF8 
 2991      04EB
 2992 05ba 09B9     	    cbnz r1,9f 
 2993 05bc D4F804A0 	    ldr IN,[UPP,#COUNT]
 2994 05c0 7047     	9:  _RET 
 2995              	
 2996              	/*******************************************************
 2997              	  BASIC: THEN statement
 2998              	  statements following THEN are executed if relation is !=0
 2999              	  optional, retained for compatibility.
 3000              	******************************************************/
 3001 05c2 00BF     	    _FUNC then 
 3002              	// do nothing 
 3003 05c4 7047     	    _RET
 3004              	
 3005              	/****************************************
 3006              	  BASIC: INPUT [string]var [,[string]var]+
 3007              	  prompt user for variable value
 3008              	***************************************/
 3009 05c6 00BF     	     _FUNC input_var
ARM GAS  tinyBasic.s 			page 80


 3010 05c8 2DE90401 	    push {r2,T1}
 3011 05cc 00B5FFF7 	1:  _CALL next_token 
 3011      FEFF5DF8 
 3011      04EB
 3012 05d6 0228     	    cmp r0,#2
 3013 05d8 67D4     	    bmi 8f 
 3014 05da 1B28     	    cmp r0,#TK_QSTR 
 3015 05dc 12D1     	    bne 2f 
 3016 05de 0846     	    mov r0,r1
 3017 05e0 DFF8D810 	    ldr r1,str_buffer
 3018 05e4 00B5FFF7 	    _CALL strcpy
 3018      FEFF5DF8 
 3018      04EB
 3019 05ee 4FF01400 	    mov r0,#TK_VAR   
 3020 05f2 00B5FFF7 	    _CALL expect 
 3020      FEFF5DF8 
 3020      04EB
 3021 05fc 8846     	    mov T1,r1 
 3022 05fe DFF8BC00 	    ldr r0,str_buffer 
 3023 0602 08E0     	    b 3f 
 3024 0604 1428     	2:  cmp r0,#TK_VAR 
 3025 0606 7FF4FEAF 	    bne syntax_error     
 3026 060a 8846     	    mov T1,r1 
 3027 060c 01F14100 	    add r0,r1,#'A' 
 3028 0610 2A49     	    ldr r1,str_buffer
 3029 0612 0880     	    strh r0,[r1]
 3030 0614 0846     	    mov r0,r1 
 3031 0616 00B5FFF7 	3:  _CALL uart_puts  
 3031      FEFF5DF8 
 3031      04EB
 3032 0620 4FF03D00 	    mov r0,#'='
 3033 0624 00B5FFF7 	    _CALL uart_putc
 3033      FEFF5DF8 
 3033      04EB
 3034 062e DFF88800 	    ldr r0,input_buffer
 3035 0632 4FF02201 	    mov r1,#34 
 3036 0636 00B5FFF7 	    _CALL readln
 3036      FEFF5DF8 
 3036      04EB
 3037 0640 31B3     	    cbz r1,6f
 3038 0642 0178     	    ldrb r1,[r0]
 3039 0644 01B4     	    push {r0}
 3040 0646 0846     	    mov r0,r1
 3041 0648 00B5FFF7 	    _CALL is_letter 
 3041      FEFF5DF8 
 3041      04EB
 3042 0652 01BC     	    pop {r0}
 3043 0654 02D1     	    bne 3f 
 3044 0656 01F05F01 	    and r1,#0x5f // uppercase  
 3045 065a 19E0     	    b 6f 
 3046 065c 2429     	3:  cmp r1,#'$'
 3047 065e 04D1     	    bne 3f 
 3048 0660 4FF01001 	    mov r1,#16
 3049 0664 00F10100 	    add r0,#1  
 3050 0668 08E0     	    b 5f 
 3051 066a 2629     	3:  cmp r1,#'&' 
 3052 066c 04D1     	    bne 4f 
ARM GAS  tinyBasic.s 			page 81


 3053 066e 4FF00201 	    mov r1,#2
 3054 0672 00F10100 	    add r0,#1 
 3055 0676 01E0     	    b 5f 
 3056 0678 4FF00A01 	4:  mov r1,#10 
 3057 067c 00B5FFF7 	5:  _CALL atoi 
 3057      FEFF5DF8 
 3057      04EB
 3058 0686 18B9     	    cbnz r0,6f
 3059 0688 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3060 068c FFF7FEBF 	    b tb_error
 3061 0690 4046     	6:  mov r0,T1 
 3062 0692 00B5FFF7 	    _CALL set_var
 3062      FEFF5DF8 
 3062      04EB
 3063 069c 00B5FFF7 	    _CALL next_token
 3063      FEFF5DF8 
 3063      04EB
 3064 06a6 0228     	    cmp r0,#TK_COMMA 
 3065 06a8 90D0     	    beq 1b 
 3066 06aa D4F800A0 	8:  _UNGET_TOKEN          
 3066      D4F808B0 
 3067 06b2 BDE80401 	9:  pop {r2,T1}       
 3068 06b6 7047     	    _RET 
 3069 06b8 00000000 	input_buffer: .word _tib 
 3070 06bc 00000000 	str_buffer: .word _pad 
 3071              	
 3072              	
 3073              	/*****************************************
 3074              	  BASIC: INVERT(expr)
 3075              	  return 1's complement of expr
 3076              	****************************************/
 3077              	    _FUNC invert
 3078 06c0 00B5FFF7 	    _CALL func_args
 3078      FEFF5DF8 
 3078      04EB
 3079 06ca 0128     	    cmp r0,#1 
 3080 06cc 7FF4FEAF 	    bne syntax_error
 3081 06d0 5CF8041B 	    _POP r1  
 3082 06d4 6FEA0101 	    mvn r1,r1
 3083 06d8 4FF01A00 	    mov r0,#TK_INTGR
 3084 06dc 7047     	    _RET 
 3085              	
 3086              	/*************************************
 3087              	  BASIC: KEY 
 3088              	  wait for a character from console
 3089              	*************************************/
 3090 06de 00BF     	    _FUNC key
 3091 06e0 00B5FFF7 	    _CALL uart_getc
 3091      FEFF5DF8 
 3091      04EB
 3092 06ea 0146     	    mov r1,r0
 3093 06ec 4FF01300 	    mov r0,#TK_CHAR 
 3094 06f0 7047     	    _RET  
 3095              	
 3096              	/******************************
 3097              	  BASIC: [LET] var=expr 
 3098              	         [LET] @(expr)=expr
ARM GAS  tinyBasic.s 			page 82


 3099              	  input:
 3100              	    none 
 3101              	  output:
 3102              	    none 
 3103              	  use:
 3104              	
 3105              	****************************/         
 3106 06f2 00BF     	    _FUNC let
 3107 06f4 00B5FFF7 	    _CALL next_token 
 3107      FEFF5DF8 
 3107      04EB
 3108 06fe 1428     	    cmp r0,#TK_VAR
 3109 0700 03D0     	    beq let_var 
 3110 0702 0C28     	    cmp r0,#TK_ARRAY 
 3111 0704 07D0     	    beq let_array 
 3112 0706 FFF7FEBF 	    b syntax_error 
 3113              	let_var:
 3114 070a 4FEA8101 	    lsl r1,#2
 3115 070e 04F16000 	    add r0,UPP,#VARS
 3116 0712 0844     	    add r0,r1
 3117 0714 1FE0     	    b 1f 
 3118              	let_array: 
 3119 0716 4FF00500 	    mov r0,#TK_LPAREN
 3120 071a 00B5FFF7 	    _CALL expect 
 3120      FEFF5DF8 
 3120      04EB
 3121 0724 00B5FFF7 	    _CALL expression
 3121      FEFF5DF8 
 3121      04EB
 3122 072e 1A28     	    cmp r0,#TK_INTGR 
 3123 0730 7FF4FEAF 	    bne syntax_error
 3124 0734 4CF8041D 	    _PUSH r1 
 3125 0738 4FF00600 	    mov r0,#TK_RPAREN
 3126 073c 00B5FFF7 	    _CALL expect 
 3126      FEFF5DF8 
 3126      04EB
 3127 0746 5CF8041B 	    _POP r1 
 3128 074a D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3129 074e 4FEA8101 	    lsl r1,#2 
 3130 0752 A0EB0100 	    sub r0,r1 
 3131 0756 4CF8040D 	1:  _PUSH r0 
 3132 075a 4FF00D00 	    mov r0,#TK_EQUAL 
 3133 075e 00B5FFF7 	    _CALL expect 
 3133      FEFF5DF8 
 3133      04EB
 3134 0768 00B5FFF7 	    _CALL expression   
 3134      FEFF5DF8 
 3134      04EB
 3135 0772 1A28     	    cmp r0,#TK_INTGR
 3136 0774 7FF4FEAF 	    bne syntax_error   
 3137 0778 5CF8040B 	2:  _POP r0 
 3138 077c 0160     	    str r1,[r0]
 3139 077e 7047     	    _RET  
 3140              	
 3141              	/***************************************
 3142              	  BASIC: LIST [[first]-last]
 3143              	  use:
ARM GAS  tinyBasic.s 			page 83


 3144              	    r2   first line# 
 3145              	    r3   last line#
 3146              	    T1   *line 
 3147              	    T2   TXTEND 
 3148              	**************************************/  
 3149              	    _FUNC list
 3150 0780 206C10F0 	    _CLO
 3150      010F03D0 
 3150      4FF00700 
 3150      FFF7FEBF 
 3151 0790 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3152 0794 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3153 0798 B8F80020 	    ldrh r2,[T1]
 3154 079c 4FF6FF73 	    mov r3,#65535 
 3155 07a0 00B5FFF7 	    _CALL next_token 
 3155      FEFF5DF8 
 3155      04EB
 3156 07aa 10B3     	    cbz r0,6f 
 3157 07ac 1A28     	    cmp r0,#TK_INTGR
 3158 07ae 09D1     	    bne 1f 
 3159 07b0 0A46     	    mov r2,r1 // first line
 3160 07b2 00B5FFF7 	    _CALL next_token
 3160      FEFF5DF8 
 3160      04EB
 3161 07bc 0028     	    cmp r0,#TK_NONE 
 3162 07be 01D1     	    bne 1f 
 3163 07c0 1346     	    mov r3,r2 
 3164 07c2 0CE0     	    b 4f 
 3165 07c4 0828     	1:  cmp r0,#TK_MINUS 
 3166 07c6 7FF4FEAF 	    bne syntax_error 
 3167 07ca 00B5FFF7 	    _CALL next_token 
 3167      FEFF5DF8 
 3167      04EB
 3168 07d4 18B1     	    cbz r0,4f 
 3169 07d6 1A28     	    cmp r0,#TK_INTGR
 3170 07d8 7FF4FEAF 	    bne syntax_error  
 3171 07dc 0B46     	    mov r3,r1 
 3172              	4:  // skip lines below r2 
 3173 07de B8F80000 	    ldrh r0,[T1]
 3174 07e2 9042     	    cmp r0,r2 
 3175 07e4 05D5     	    bpl 6f 
 3176 07e6 98F80200 	    ldrb r0,[T1,#2]
 3177 07ea 8044     	    add T1,r0
 3178 07ec C845     	    cmp T1,T2 
 3179 07ee F6D4     	    bmi 4b
 3180 07f0 1AE0     	    b 9f 
 3181 07f2 C845     	6:  cmp T1,T2  
 3182 07f4 18D5     	    bpl 9f
 3183 07f6 4046     	    mov r0,T1   
 3184 07f8 DFF83010 	    ldr r1,out_buff 
 3185 07fc 00B5FFF7 	    _CALL decompile_line 
 3185      FEFF5DF8 
 3185      04EB
 3186 0806 00B5FFF7 	    _CALL uart_puts 
 3186      FEFF5DF8 
 3186      04EB
 3187 0810 00B5FFF7 	    _CALL cr 
ARM GAS  tinyBasic.s 			page 84


 3187      FEFF5DF8 
 3187      04EB
 3188 081a 98F80200 	    ldrb r0,[T1,#2]
 3189 081e 8044     	    add T1,r0
 3190 0820 B8F80000 	    ldrh r0,[T1]
 3191 0824 9842     	    cmp r0,r3 
 3192 0826 E4DD     	    ble 6b 
 3193 0828 FFF7FEBF 	9:  b warm_start 
 3194 082c 00000000 	out_buff: .word _tib 
 3195              	
 3196              	/********************************
 3197              	  BASIC: LOCATE line,col
 3198              	  return log base 2 of expr 
 3199              	********************************/
 3200              	    _FUNC locate
 3201 0830 00B5FFF7 	    _CALL arg_list 
 3201      FEFF5DF8 
 3201      04EB
 3202 083a 0228     	    cmp r0,#2 
 3203 083c 7FF4FEAF 	    bne syntax_error
 3204 0840 5CF8041B 	    _POP r1
 3205 0844 5CF8040B 	    _POP r0  
 3206 0848 00B5FFF7 	    _CALL set_curpos 
 3206      FEFF5DF8 
 3206      04EB
 3207 0852 7047     	    _RET 
 3208              	
 3209              	
 3210              	/****************************************
 3211              	  BASIC: LSHIFT(expr1,expr2)
 3212              	  shift right expr1 of expr2 bits 
 3213              	****************************************/
 3214              	    _FUNC lshift
 3215 0854 00B5FFF7 	    _CALL func_args
 3215      FEFF5DF8 
 3215      04EB
 3216 085e 0228     	    cmp r0,#2
 3217 0860 7FF4FEAF 	    bne syntax_error 
 3218 0864 BCE80300 	    ldmia DP!,{r0,r1}
 3219 0868 01FA00F1 	    lsl r1,r0 
 3220 086c 4FF01A00 	    mov r0,#TK_INTGR
 3221 0870 7047     	    _RET 
 3222              	
 3223              	/***********************************
 3224              	  BASIC: NEW 
 3225              	  delete existing program in memory
 3226              	  and clear variables and RAM 
 3227              	***********************************/
 3228 0872 00BF     	    _FUNC new
 3229 0874 206C10F0 	    _CLO 
 3229      010F03D0 
 3229      4FF00700 
 3229      FFF7FEBF 
 3230 0884 00B5FFF7 	    _CALL clear_basic 
 3230      FEFF5DF8 
 3230      04EB
 3231 088e FFF7FEBF 	    b warm_start   
ARM GAS  tinyBasic.s 			page 85


 3232              	
 3233              	/************************************
 3234              	  BASIC: NOT relation  
 3235              	  invert logical value or relation
 3236              	************************************/
 3237 0892 00BF     	      _FUNC func_not
 3238 0894 00B5FFF7 	      _CALL relation 
 3238      FEFF5DF8 
 3238      04EB
 3239 089e 11B1     	      cbz r1,8f 
 3240 08a0 81EA0101 	      eor r1,r1
 3241 08a4 01E0     	      b 9f 
 3242 08a6 4FF0FF31 	  8:  mov r1,#-1
 3243 08aa 7047     	  9:  _RET 
 3244              	
 3245              	/******************************************
 3246              	  BASIC: OR(expr1,expr2)
 3247              	  binary OR between 2 expressions
 3248              	******************************************/
 3249              	    _FUNC bit_or
 3250 08ac 00B5FFF7 	    _CALL func_args
 3250      FEFF5DF8 
 3250      04EB
 3251 08b6 0228     	    cmp r0,#2
 3252 08b8 7FF4FEAF 	    bne syntax_error
 3253 08bc 5CF8040B 	    _POP r0 
 3254 08c0 5CF8041B 	    _POP r1
 3255 08c4 41EA0001 	    orr r1,r0 
 3256 08c8 4FF01A00 	    mov r0,#TK_INTGR
 3257 08cc 7047     	    _RET 
 3258              	
 3259              	/****************************************
 3260              	  BASIC: IN(gpio,pin) 
 3261              	  read gpio_idr selected pin  
 3262              	***************************************/
 3263 08ce 00BF     	    _FUNC pin_input 
 3264 08d0 00B5FFF7 	    _CALL func_args 
 3264      FEFF5DF8 
 3264      04EB
 3265 08da 0228     	    cmp r0,#2 
 3266 08dc 7FF4FEAF 	    bne syntax_error  
 3267 08e0 BCE80300 	    ldmia DP!,{r0,r1}
 3268 08e4 4FF00802 	    mov r2,#GPIO_IDR 
 3269 08e8 8A58     	    ldr r2,[r1,r2]
 3270 08ea 00F00F00 	    and r0,#15 
 3271 08ee 22FA00F2 	    lsr r2,r0 
 3272 08f2 02F00101 	    and r1,r2,#1 
 3273 08f6 4FF01A00 	    mov r0,#TK_INTGR
 3274 08fa 7047     	    _RET 
 3275              	
 3276              	
 3277              	/****************************************
 3278              	  BASIC: OUT gpio,pin,value 
 3279              	   output to gpio_odr
 3280              	***************************************/
 3281              	    _FUNC out
 3282 08fc 00B5FFF7 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 86


 3282      FEFF5DF8 
 3282      04EB
 3283 0906 0328     	    cmp r0,#3 
 3284 0908 7FF4FEAF 	    bne syntax_error 
 3285 090c BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3286 0910 4FF01003 	    mov r3,#GPIO_BSRR
 3287 0914 08B9     	    cbnz r0,1f 
 3288 0916 01F11001 	    add r1,#16 
 3289 091a 4FF00100 	1:  mov r0,#1 
 3290 091e 00FA01F0 	    lsl r0,r1 
 3291 0922 D050     	    str r0,[r2,r3]    
 3292 0924 7047     	    _RET 
 3293              	
 3294              	
 3295              	/****************************************
 3296              	  BASIC: PAD 
 3297              	  return pad buffer address 
 3298              	****************************************/
 3299 0926 00BF     	    _FUNC pad_ref
 3300 0928 0149     	    ldr r1,pad_adr  
 3301 092a 4FF01A00 	    mov r0,#TK_INTGR 
 3302 092e 7047     	    _RET 
 3303 0930 00000000 	pad_adr: .word _pad 
 3304              	
 3305              	/***********************
 3306              	  BASIC: PAUSE expr 
 3307              	  suspend execution for 
 3308              	  expr milliseconds 
 3309              	************************/
 3310              	    _FUNC pause
 3311 0934 00B5FFF7 	    _CALL expression 
 3311      FEFF5DF8 
 3311      04EB
 3312 093e 1A28     	    cmp r0,#TK_INTGR 
 3313 0940 7FF4FEAF 	    bne syntax_error 
 3314 0944 E069     	    ldr r0,[UPP,#TICKS]
 3315 0946 0844     	    add r0,r1 
 3316 0948 E169     	1:  ldr r1,[UPP,#TICKS]
 3317 094a 8842     	    cmp r0,r1 
 3318 094c FCD1     	    bne 1b     
 3319 094e 7047     	    _RET 
 3320              	
 3321              	/***************************************************
 3322              	  BASIC: PMODE \c,pin,mode[,opt] 
 3323              	  configure a digital pin for input|output
 3324              	  paramters:
 3325              	    \c    port letter
 3326              	    pin   pin {0..15} 
 3327              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3328              	    for input mode:
 3329              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3330              	    for output mode:
 3331              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3332              	  use:
 3333              	    r2  opt
 3334              	    r3  mode 
 3335              	    T1  pin  
ARM GAS  tinyBasic.s 			page 87


 3336              	    T2  port      
 3337              	***************************************************/
 3338              	      _FUNC pin_mode
 3339 0950 4FF01300 	      mov r0,#TK_CHAR 
 3340 0954 00B5FFF7 	      _CALL expect
 3340      FEFF5DF8 
 3340      04EB
 3341 095e 0846     	      mov r0,r1 
 3342 0960 00B5FFF7 	      _CALL upper 
 3342      FEFF5DF8 
 3342      04EB
 3343 096a A0F14109 	      sub T2,r0,#'A'
 3344 096e 4FF00200 	      mov r0,#TK_COMMA
 3345 0972 00B5FFF7 	      _CALL expect 
 3345      FEFF5DF8 
 3345      04EB
 3346 097c 00B5FFF7 	      _CALL arg_list
 3346      FEFF5DF8 
 3346      04EB
 3347 0986 0228     	      cmp r0,#2 
 3348 0988 3FF5FEAF 	      bmi syntax_error
 3349 098c 0428     	      cmp r0,#4
 3350 098e 01D4     	      bmi 1f 
 3351 0990 FFF7FEBF 	      b syntax_error
 3352 0994 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3353 0998 0228     	      cmp r0,#2
 3354 099a 02D0     	      beq 2f 
 3355              	// 3 parameters, pin,mode,opt  
 3356 099c BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3357 09a0 01E0     	    b 4f  
 3358              	2: // 2 parameters, pin,mode 
 3359 09a2 BCE80801 	    ldmia DP!,{r3,T1}
 3360 09a6 4FF48060 	4:  mov r0,#0x400 
 3361 09aa 00FB09F9 	    mul T2,r0 
 3362 09ae 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3362      C4F20100 
 3363 09b6 8144     	    add T2,r0 // port base address 
 3364              	// if input mode set pull in ODR 
 3365 09b8 83B9     	    cbnz r3,2f 
 3366 09ba 022A     	    cmp r2,#2
 3367 09bc 0ED4     	    bmi 2f 
 3368 09be 4FF00100 	    mov r0,#1 
 3369 09c2 4146     	    mov r1,T1 
 3370 09c4 032A     	    cmp r2,#3 
 3371 09c6 01D0     	    beq 1f
 3372 09c8 01F11001 	    add r1,#16 //reset bit 
 3373 09cc 00FA01F0 	1:  lsl r0,r1
 3374 09d0 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3375 09d4 032A     	    cmp r2,#3 
 3376 09d6 01D4     	    bmi 2f 
 3377 09d8 A2F10102 	    sub r2,#1
 3378              	2: // set CNF|MODE bits GPIO_CRx 
 3379 09dc B8F1080F 	    cmp T1,#8 
 3380 09e0 03D4     	    bmi 3f 
 3381 09e2 A8F10808 	    sub T1,#8 
 3382 09e6 09F10409 	    add T2,#4 //CRH 
 3383 09ea 4FF00F00 	3:  mov r0,#15   
ARM GAS  tinyBasic.s 			page 88


 3384 09ee 4FEA8801 	    lsl r1,T1,#2 
 3385 09f2 00FA01F0 	    lsl r0,r1
 3386 09f6 6FEA0000 	    mvn r0,r0 // bitmask 
 3387 09fa D9F80010 	    ldr r1,[T2]
 3388 09fe 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3389              	// combine opt|mode     
 3390 0a02 4FEA8200 	    lsl r0,r2,#2 
 3391 0a06 40EA0300 	    orr r0,r3 // OPT|MODE 
 3392 0a0a 4FEA8803 	    lsl r3,T1,#2 
 3393 0a0e 00FA03F0 	    lsl r0,r3
 3394 0a12 41EA0001 	    orr r1,r0   
 3395 0a16 C9F80010 	    str r1,[T2] // mode and option set
 3396 0a1a 7047     	    _RET 
 3397              	
 3398              	
 3399              	/*****************************************
 3400              	  BASIC: PEEK8 (expr)  
 3401              	  return byte value at address 
 3402              	*****************************************/
 3403              	    _FUNC peek8
 3404 0a1c 00B5FFF7 	    _CALL func_args  
 3404      FEFF5DF8 
 3404      04EB
 3405 0a26 0128     	    cmp r0,#1
 3406 0a28 3FF5FEAF 	    bmi syntax_error
 3407 0a2c 5CF8041B 	    _POP r1 
 3408 0a30 0978     	    ldrb r1,[r1]
 3409 0a32 4FF01A00 	    mov r0,#TK_INTGR     
 3410 0a36 7047     	    _RET 
 3411              	
 3412              	/*****************************************
 3413              	  BASIC: PEEK16 (expr)  
 3414              	  return byte value at address 
 3415              	*****************************************/
 3416              	    _FUNC peek16
 3417 0a38 00B5FFF7 	    _CALL func_args  
 3417      FEFF5DF8 
 3417      04EB
 3418 0a42 0128     	    cmp r0,#1
 3419 0a44 3FF5FEAF 	    bmi syntax_error
 3420 0a48 5CF8041B 	    _POP r1 
 3421 0a4c 0988     	    ldrh r1,[r1]
 3422 0a4e 4FF01A00 	    mov r0,#TK_INTGR     
 3423 0a52 7047     	    _RET 
 3424              	
 3425              	/*****************************************
 3426              	  BASIC: PEEK32 (expr)  
 3427              	  return byte value at address 
 3428              	*****************************************/
 3429              	    _FUNC peek32
 3430 0a54 00B5FFF7 	    _CALL func_args  
 3430      FEFF5DF8 
 3430      04EB
 3431 0a5e 0128     	    cmp r0,#1
 3432 0a60 3FF5FEAF 	    bmi syntax_error
 3433 0a64 5CF8041B 	    _POP r1 
 3434 0a68 0968     	    ldr r1,[r1]
ARM GAS  tinyBasic.s 			page 89


 3435 0a6a 4FF01A00 	    mov r0,#TK_INTGR     
 3436 0a6e 7047     	    _RET 
 3437              	
 3438              	
 3439              	/**********************************
 3440              	  BASIC: POKE8 addr,byte
 3441              	  store byte at addr   
 3442              	**********************************/
 3443              	    _FUNC poke8
 3444 0a70 00B5FFF7 	    _CALL arg_list
 3444      FEFF5DF8 
 3444      04EB
 3445 0a7a 0228     	    cmp r0,#2 
 3446 0a7c 7FF4FEAF 	    bne syntax_error
 3447 0a80 BCE80300 	    ldmia DP!,{r0,r1} 
 3448 0a84 0870     	    strb r0,[r1]
 3449 0a86 7047     	    _RET 
 3450              	
 3451              	/**********************************
 3452              	  BASIC: POKE16 addr,hword
 3453              	  store hword at addr   
 3454              	**********************************/
 3455              	    _FUNC poke16
 3456 0a88 00B5FFF7 	    _CALL arg_list
 3456      FEFF5DF8 
 3456      04EB
 3457 0a92 0228     	    cmp r0,#2 
 3458 0a94 7FF4FEAF 	    bne syntax_error
 3459 0a98 BCE80300 	    ldmia DP!,{r0,r1} 
 3460 0a9c 0880     	    strh r0,[r1]
 3461 0a9e 7047     	    _RET 
 3462              	
 3463              	/**********************************
 3464              	  BASIC: POKE32 addr,word
 3465              	  store word at addr   
 3466              	**********************************/
 3467              	    _FUNC poke32
 3468 0aa0 00B5FFF7 	    _CALL arg_list 
 3468      FEFF5DF8 
 3468      04EB
 3469 0aaa 0228     	    cmp r0,#2 
 3470 0aac 7FF4FEAF 	    bne syntax_error
 3471 0ab0 BCE80300 	    ldmia DP!,{r0,r1} 
 3472 0ab4 0860     	    str r0,[r1]
 3473 0ab6 7047     	    _RET 
 3474              	
 3475              	
 3476              	
 3477              	/****************************
 3478              	  BASIC: PRINT|? arg_list 
 3479              	  print list of arguments 
 3480              	****************************/
 3481              	    _FUNC print
 3482 0ab8 88EA0808 	    eor T1,T1 
 3483 0abc 00B5FFF7 	0:  _CALL expression
 3483      FEFF5DF8 
 3483      04EB
ARM GAS  tinyBasic.s 			page 90


 3484 0ac6 1A28     	    cmp r0,#TK_INTGR
 3485 0ac8 07D1     	    bne 1f 
 3486 0aca 0846     	    mov r0,r1
 3487 0acc A169     	    ldr r1,[UPP,#BASE]
 3488 0ace 00B5FFF7 	    _CALL print_int
 3488      FEFF5DF8 
 3488      04EB
 3489 0ad8 3EE0     	    b 8f  
 3490 0ada 00B5FFF7 	1:  _CALL next_token
 3490      FEFF5DF8 
 3490      04EB
 3491 0ae4 0128     	    cmp r0,#TK_COLON 
 3492 0ae6 00DC     	    bgt 2f
 3493 0ae8 4DE0     	    b unget_exit 
 3494 0aea 1B28     	2:  cmp r0,#TK_QSTR 
 3495 0aec 06D1     	    bne 3f
 3496 0aee 0846     	    mov r0,r1 
 3497 0af0 00B5FFF7 	    _CALL uart_puts  
 3497      FEFF5DF8 
 3497      04EB
 3498 0afa 2DE0     	    b 8f 
 3499 0afc 1628     	3:  cmp r0,#TK_CFUNC
 3500 0afe 05D1     	    bne 4f
 3501 0b00 0846     	    mov r0,r1
 3502 0b02 00B5FFF7 	    _CALL execute 
 3502      FEFF5DF8 
 3502      04EB
 3503 0b0c 1328     	4:  cmp r0,#TK_CHAR 
 3504 0b0e 06D1     	    bne 5f 
 3505 0b10 0846     	    mov r0,r1 
 3506 0b12 00B5FFF7 	    _CALL uart_putc 
 3506      FEFF5DF8 
 3506      04EB
 3507 0b1c 1CE0     	    b 8f 
 3508 0b1e 0428     	5:  cmp r0,#TK_SHARP
 3509 0b20 09D1     	    bne 6f 
 3510 0b22 00B5FFF7 	   _CALL next_token
 3510      FEFF5DF8 
 3510      04EB
 3511 0b2c 1A28     	    cmp r0,#TK_INTGR  
 3512 0b2e 7FF4FEAF 	    bne syntax_error 
 3513 0b32 6164     	    str r1,[UPP,#TAB_WIDTH]
 3514 0b34 10E0     	    b 8f 
 3515 0b36 1728     	6:  cmp r0,#TK_CMD 
 3516 0b38 25D1     	    bne unget_exit  
 3517 0b3a 4629     	    cmp r1,#TAB_IDX 
 3518 0b3c 05D1     	    bne 6f
 3519 0b3e 00B500F0 	    _CALL tab 
 3519      92FA5DF8 
 3519      04EB
 3520 0b48 06E0     	    b 8f 
 3521 0b4a 4229     	6:  cmp r1,#SPC_IDX  
 3522 0b4c 1BD1     	    bne unget_exit
 3523 0b4e 00B500F0 	    _CALL spc   
 3523      50FA5DF8 
 3523      04EB
 3524 0b58 88EA0808 	8:  eor T1,T1  
ARM GAS  tinyBasic.s 			page 91


 3525 0b5c 00B5FFF7 	    _CALL next_token
 3525      FEFF5DF8 
 3525      04EB
 3526 0b66 90B1     	    cbz r0, print_exit  
 3527 0b68 0228     	    cmp r0,#TK_COMMA 
 3528 0b6a 02D1     	    bne 8f 
 3529 0b6c 4FF0FF38 	    mov T1,#-1
 3530 0b70 A4E7     	    b 0b
 3531 0b72 0328     	8:  cmp r0,#TK_SEMIC 
 3532 0b74 07D1     	    bne unget_exit 
 3533 0b76 00B5FFF7 	    _CALL tabulation 
 3533      FEFF5DF8 
 3533      04EB
 3534 0b80 4FF0FF38 	    mov T1,#-1
 3535 0b84 9AE7     	    b 0b
 3536              	unget_exit:         
 3537 0b86 D4F800A0 	   _UNGET_TOKEN 
 3537      D4F808B0 
 3538              	print_exit:
 3539 0b8e 18EA0808 	    ands T1,T1 
 3540 0b92 04D1     	    bne 9f
 3541 0b94 00B5FFF7 	    _CALL cr 
 3541      FEFF5DF8 
 3541      04EB
 3542 0b9e 7047     	9:  _RET 
 3543              	
 3544              	/**************************************
 3545              	  BASIC: QKEY
 3546              	  check if key pressed 
 3547              	**************************************/ 
 3548              	    _FUNC qkey
 3549 0ba0 4FF00001 	    mov r1,#0
 3550 0ba4 00B5FFF7 	    _CALL uart_qkey
 3550      FEFF5DF8 
 3550      04EB
 3551 0bae 01D0     	    beq 9f 
 3552 0bb0 4FF0FF31 	    mov r1,#-1 
 3553 0bb4 4FF01A00 	9:  mov r0,#TK_INTGR
 3554 0bb8 7047     	    _RET 
 3555              	
 3556              	/******************************************
 3557              	  BASIC RANDOM(expr)
 3558              	  generate random number between 0..expr-1
 3559              	******************************************/
 3560 0bba 00BF     	    _FUNC random
 3561 0bbc 00B5FFF7 	    _CALL func_args 
 3561      FEFF5DF8 
 3561      04EB
 3562 0bc6 0128     	    cmp r0,#1
 3563 0bc8 7FF4FEAF 	    bne syntax_error 
 3564 0bcc 606A     	    ldr r0,[UPP,#SEED]
 3565 0bce 4FEA4031 	    lsl r1,r0,#13
 3566 0bd2 81EA0001 	    eor r1,r0
 3567 0bd6 4FEA5140 	    lsr r0,r1,#17
 3568 0bda 81EA0001 	    eor r1,r0
 3569 0bde 4FEA4110 	    lsl r0,r1,#5
 3570 0be2 81EA0001 	    eor r1,r0
ARM GAS  tinyBasic.s 			page 92


 3571 0be6 6162     	    str r1,[UPP,#SEED]
 3572 0be8 5CF8040B 	    _POP r0 
 3573 0bec B1FBF0F2 	    udiv r2,r1,r0  
 3574 0bf0 00FB02F2 	    mul r2,r0 
 3575 0bf4 A1EB0201 	    sub r1,r2 
 3576 0bf8 4FF01A00 	    mov r0,#TK_INTGR
 3577 0bfc 7047     	    _RET 
 3578              	
 3579              	/****************************************
 3580              	  BASIC: RSHIFT(expr1,expr2)
 3581              	  shift left expr1 de expr2 bits 
 3582              	****************************************/
 3583 0bfe 00BF     	    _FUNC rshift
 3584 0c00 00B5FFF7 	    _CALL func_args
 3584      FEFF5DF8 
 3584      04EB
 3585 0c0a 0228     	    cmp r0,#2 
 3586 0c0c 7FF4FEAF 	    bne syntax_error
 3587 0c10 BCE80300 	    ldmia DP!,{r0,r1}
 3588 0c14 21FA00F1 	    lsr r1,r0  
 3589 0c18 4FF01A00 	    mov r0,#TK_INTGR
 3590 0c1c 7047     	    _RET 
 3591              	
 3592              	/****************************
 3593              	  BASIC: RUN 
 3594              	  execute program in memory
 3595              	****************************/
 3596 0c1e 00BF     	    _FUNC run
 3597 0c20 206C10F0 	    _CLO 
 3597      010F03D0 
 3597      4FF00700 
 3597      FFF7FEBF 
 3598 0c30 206B     	    ldr r0,[UPP,#TXTBGN]
 3599 0c32 616B     	    ldr r1,[UPP,#TXTEND]
 3600 0c34 C4F8D010 	    str r1,[UPP,#HERE]
 3601 0c38 8842     	    cmp r0,r1
 3602 0c3a 21D0     	    beq 9f
 3603 0c3c 216C     	    ldr r1,[UPP,#FLAGS]
 3604 0c3e 11F0080F 	    tst r1,#FSTOP
 3605 0c42 09D0     	    beq 1f
 3606 0c44 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3607 0c48 6060     	    str r0,[UPP,#COUNT]
 3608 0c4a 206C     	    ldr r0,[UPP,#FLAGS]
 3609 0c4c 4FF00901 	    mov r1,#FRUN+FSTOP
 3610 0c50 80EA0100 	    eor r0,r1
 3611 0c54 2064     	    str r0,[UPP,#FLAGS] 
 3612 0c56 13E0     	    b 9f  
 3613 0c58 8178     	1:  ldrb r1,[r0,#2]
 3614 0c5a 6160     	    str r1,[UPP,#COUNT]
 3615 0c5c 8346     	    mov BPTR,r0 
 3616 0c5e 4FF0030A 	    mov IN,#3
 3617 0c62 606B     	    ldr r0,[UPP,#TXTEND]
 3618              	    // reset dataline pointers 
 3619 0c64 80EA0000 	    eor r0,r0 
 3620 0c68 E060     	    str r0,[UPP,#DATAPTR]
 3621 0c6a 2061     	    str r0,[UPP,#DATA]
 3622 0c6c 6061     	    str r0,[UPP,#DATALEN] 
ARM GAS  tinyBasic.s 			page 93


 3623 0c6e 206C     	    ldr r0,[UPP,#FLAGS]
 3624 0c70 40F00100 	    orr r0,#FRUN 
 3625 0c74 2064     	    str r0,[UPP,#FLAGS]
 3626 0c76 00B5FFF7 	    _CALL show_trace 
 3626      FEFF5DF8 
 3626      04EB
 3627 0c80 7047     	9:  _RET 
 3628              	
 3629              	/**********************************
 3630              	        FILE SYSTEM 
 3631              	**********************************/
 3632              	
 3633              	/*********************************
 3634              	  search_free 
 3635              	  search first free PAGE in fs
 3636              	  a PAGE is free if first word is
 3637              	  -1
 3638              	  input:
 3639              	    none 
 3640              	  output:
 3641              	    r0    addr|0
 3642              	  use:
 3643              	*********************************/
 3644 0c82 00BF     	    _FUNC search_free 
 3645 0c84 06B4     	    push {r1,r2}
 3646 0c86 DFF86410 	    ldr r1,fs_addr 
 3647 0c8a 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3647      C0F60202 
 3648 0c92 0868     	1:  ldr r0,[r1]
 3649 0c94 B0F1FF3F 	    cmp r0,#-1
 3650 0c98 03D0     	    beq 8f 
 3651 0c9a 01F58061 	    add r1,#PAGE_SIZE
 3652 0c9e 9142     	    cmp r1,r2 
 3653 0ca0 F7D4     	    bmi 1b 
 3654 0ca2 0846     	8:  mov r0,r1 
 3655 0ca4 06BC     	    pop {r1,r2}   
 3656 0ca6 7047     	    _RET 
 3657              	
 3658              	/*********************************
 3659              	  search_file 
 3660              	  search for a file name 
 3661              	  in file system.
 3662              	  input: 
 3663              	    r0   .asciz target name
 3664              	  output:
 3665              	    r0    0 || address found 
 3666              	  use:
 3667              	   r0     temp 
 3668              	   r1     *file_name 
 3669              	   r2     *fs  
 3670              	   r3     target   
 3671              	**********************************/
 3672              	    _FUNC search_file 
 3673 0ca8 0EB4     	    push {r1,r2,r3}
 3674 0caa DFF84020 	    ldr r2,fs_addr
 3675 0cae 0346     	    mov r3,r0  
 3676              	cmp_loop:
ARM GAS  tinyBasic.s 			page 94


 3677 0cb0 1068     	    ldr r0,[r2]
 3678 0cb2 B0F1FF3F 	    cmp r0,#-1
 3679 0cb6 80EA0000 	    eor r0,r0
 3680 0cba 15D0     	    beq 9f // reached end of fs 
 3681 0cbc 1846     	1:  mov r0,r3
 3682 0cbe 02F10201 	    add r1,r2,#2
 3683 0cc2 00B5FFF7 	    _CALL strcmp
 3683      FEFF5DF8 
 3683      04EB
 3684 0ccc 08B9     	    cbnz r0,2f
 3685 0cce 1046     	    mov r0,r2 
 3686 0cd0 0AE0     	    b 9f   
 3687 0cd2 1088     	2:  ldrh r0,[r2] // name length
 3688 0cd4 0244     	    add r2,r0 
 3689 0cd6 1088     	    ldrh r0,[r2]
 3690 0cd8 1044     	    add r0,r2
 3691 0cda 00B5FFF7 	    _CALL page_align 
 3691      FEFF5DF8 
 3691      04EB
 3692 0ce4 0246     	    mov r2,r0   
 3693 0ce6 E3E7     	    b cmp_loop 
 3694 0ce8 0EBC     	9:  pop {r1,r2,r3}
 3695 0cea 7047     	    _RET 
 3696              	
 3697 0cec 00000000 	fs_addr: .word FILE_SYSTEM
 3698              	
 3699              	/*************************************
 3700              	  BASIC: DIR 
 3701              	  list files stored in fs 
 3702              	  use:
 3703              	    r0  temp 
 3704              	    r1  temp
 3705              	    r2  file count
 3706              	    r3  data size
 3707              	    T1  *fs  
 3708              	*************************************/
 3709              	    _FUNC directory
 3710 0cf0 206C10F0 	    _CLO 
 3710      010F03D0 
 3710      4FF00700 
 3710      FFF7FEBF 
 3711 0d00 82EA0202 	    eor r2,r2 
 3712 0d04 5FF81C80 	    ldr T1,fs_addr 
 3713 0d08 D8F80000 	1:  ldr r0,[T1] // name length 
 3714 0d0c B0F1FF3F 	    cmp r0,#-1
 3715 0d10 2AD0     	    beq no_more_file
 3716 0d12 00F00F03 	    and r3,r0,#15
 3717 0d16 08F10200 	    add r0,T1,#2
 3718 0d1a 00B5FFF7 	    _CALL uart_puts 
 3718      FEFF5DF8 
 3718      04EB
 3719 0d24 4FF01000 	    mov r0,#16 
 3720 0d28 00B5FFF7 	    _CALL cursor_x 
 3720      FEFF5DF8 
 3720      04EB
 3721 0d32 9844     	    add T1,r3 
 3722 0d34 B8F80030 	    ldrh r3,[T1]
ARM GAS  tinyBasic.s 			page 95


 3723 0d38 1846     	    mov r0,r3 
 3724 0d3a 4FF00A01 	    mov r1,#10 
 3725 0d3e 00B5FFF7 	    _CALL print_int
 3725      FEFF5DF8 
 3725      04EB
 3726 0d48 00B5FFF7 	    _CALL cr  
 3726      FEFF5DF8 
 3726      04EB
 3727 0d52 08EB0300 	    add r0,T1,r3 
 3728 0d56 00B5FFF7 	    _CALL page_align
 3728      FEFF5DF8 
 3728      04EB
 3729 0d60 8046     	    mov T1,r0 
 3730 0d62 02F10102 	    add r2,#1 
 3731 0d66 CFE7     	    b 1b  
 3732              	no_more_file:
 3733 0d68 00B5FFF7 	    _CALL cr
 3733      FEFF5DF8 
 3733      04EB
 3734 0d72 4FF01000 	    mov r0,#16
 3735 0d76 00B5FFF7 	    _CALL cursor_x  
 3735      FEFF5DF8 
 3735      04EB
 3736 0d80 1046     	    mov r0,r2 
 3737 0d82 4FF00A01 	    mov r1,#10 
 3738 0d86 00B5FFF7 	    _CALL print_int 
 3738      FEFF5DF8 
 3738      04EB
 3739 0d90 DFF84405 	    ldr r0,=fcount 
 3740 0d94 00B5FFF7 	    _CALL uart_puts 
 3740      FEFF5DF8 
 3740      04EB
 3741 0d9e 7047     	    _RET 
 3742 0da0 66696C65 	fcount:  .asciz "files\n"
 3742      730A00
 3743              	
 3744              	/*************************************
 3745              	  BASIC: FORGET ["name"]
 3746              	  delete file and all following 
 3747              	  if no name given delete all files 
 3748              	************************************/
 3749 0da7 00       	    _FUNC forget
 3750 0da8 2DE90802 	    push {r3,T2}
 3751 0dac 5FF8C490 	    ldr T2,fs_addr 
 3752 0db0 E36A     	    ldr r3,[UPP,#FSFREE]
 3753 0db2 00B5FFF7 	    _CALL next_token
 3753      FEFF5DF8 
 3753      04EB
 3754 0dbc 38B1     	    cbz r0,1f // no name 
 3755 0dbe 0846     	    mov r0,r1
 3756 0dc0 00B5FFF7 	    _CALL search_file
 3756      71FF5DF8 
 3756      04EB
 3757 0dca 58B1     	    cbz r0,9f 
 3758 0dcc 8146     	    mov T2,r0 
 3759 0dce 9945     	1:  cmp T2,r3 
 3760 0dd0 08D5     	    bpl 9f 
ARM GAS  tinyBasic.s 			page 96


 3761 0dd2 4846     	    mov r0,T2 
 3762 0dd4 00B5FFF7 	    _CALL erase_page
 3762      FEFF5DF8 
 3762      04EB
 3763 0dde 09F58069 	    add T2,#PAGE_SIZE
 3764 0de2 F4E7     	    b 1b 
 3765 0de4 00B5FFF7 	9:  _CALL search_free
 3765      4DFF5DF8 
 3765      04EB
 3766 0dee BDE80802 	    pop {r3,T2} 
 3767 0df2 7047     	    _RET 
 3768              	
 3769              	/**********************************
 3770              	  BASIC LOAD "name" 
 3771              	  load file in RAM for execution
 3772              	  use:
 3773              	    r0   temp
 3774              	    r1   src
 3775              	    r2   dest 
 3776              	    r3   count 
 3777              	**********************************/
 3778              	    _FUNC load
 3779 0df4 206C10F0 	    _CLO 
 3779      010F03D0 
 3779      4FF00700 
 3779      FFF7FEBF 
 3780 0e04 00B5FFF7 	    _CALL next_token 
 3780      FEFF5DF8 
 3780      04EB
 3781 0e0e 1B28     	    cmp r0,#TK_QSTR 
 3782 0e10 7FF4FEAF 	    bne syntax_error 
 3783 0e14 0846     	    mov r0,r1 
 3784 0e16 00B5FFF7 	    _CALL search_file 
 3784      46FF5DF8 
 3784      04EB
 3785 0e20 18B9     	    cbnz r0, 1f 
 3786 0e22 4FF00900 	    mov r0,#ERR_NOT_FILE
 3787 0e26 FFF7FEBF 	    b tb_error 
 3788 0e2a 0146     	1:  mov r1,r0 
 3789 0e2c 0888     	    ldrh r0,[r1]
 3790 0e2e 0144     	    add r1,r0 // data size field  
 3791 0e30 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3792 0e34 226B     	    ldr r2,[UPP,#TXTBGN]
 3793 0e36 02EB0300 	    add r0,r2,r3  
 3794 0e3a 6063     	    str r0,[UPP,#TXTEND]
 3795 0e3c 03F10103 	    add r3,#1
 3796 0e40 4FEA5303 	    lsr r3,#1
 3797              	2:  // load file data 
 3798 0e44 31F8020B 	    ldrh r0,[r1],#2
 3799 0e48 22F8020B 	    strh r0,[r2],#2 
 3800 0e4c 013B     	    subs r3,#1 
 3801 0e4e F9D1     	    bne 2b 
 3802              	// report file size 
 3803 0e50 DFF88804 	    ldr r0,=fsize 
 3804 0e54 00B5FFF7 	    _CALL uart_puts
 3804      FEFF5DF8 
 3804      04EB
ARM GAS  tinyBasic.s 			page 97


 3805 0e5e 606B     	    ldr r0,[UPP,#TXTEND]
 3806 0e60 236B     	    ldr r3,[UPP,#TXTBGN]
 3807 0e62 A0EB0300 	    sub r0,r3 
 3808 0e66 4FF00A01 	    mov r1,#10 
 3809 0e6a 00B5FFF7 	    _CALL print_int 
 3809      FEFF5DF8 
 3809      04EB
 3810 0e74 DFF86804 	    ldr r0,=data_bytes 
 3811 0e78 00B5FFF7 	    _CALL uart_puts      
 3811      FEFF5DF8 
 3811      04EB
 3812 0e82 7047     	    _RET 
 3813              	
 3814              	
 3815              	/*********************************
 3816              	  BASIC: SAVE "name" 
 3817              	  save program in flash memory
 3818              	  file structure:
 3819              	    .hword name_length 
 3820              	    .asciz name
 3821              	    .palign 1  
 3822              	    .hword data_length 
 3823              	    .byte  file data (variable length)  
 3824              	  use:
 3825              	    r0  temp 
 3826              	    r1  temp
 3827              	    r2  *flash 
 3828              	    r3  *ram  
 3829              	    T1  temp   
 3830              	********************************/
 3831              	    _FUNC save
 3832 0e84 206C10F0 	    _CLO 
 3832      010F03D0 
 3832      4FF00700 
 3832      FFF7FEBF 
 3833 0e94 606B     	    ldr r0,[UPP,#TXTEND]
 3834 0e96 216B     	    ldr r1,[UPP,#TXTBGN]
 3835 0e98 8842     	    cmp r0,r1
 3836 0e9a 03D1     	    bne 0f 
 3837 0e9c 4FF00D00 	    mov r0,#ERR_NO_PROG
 3838 0ea0 FFF7FEBF 	    b tb_error 
 3839 0ea4 00B5FFF7 	0:  _CALL next_token 
 3839      FEFF5DF8 
 3839      04EB
 3840 0eae 1B28     	    cmp r0,#TK_QSTR
 3841 0eb0 7FF4FEAF 	    bne syntax_error 
 3842              	// check for existing 
 3843 0eb4 0B46     	    mov r3,r1 // save name 
 3844 0eb6 1846     	    mov r0,r3  
 3845 0eb8 00B5FFF7 	    _CALL search_file
 3845      F5FE5DF8 
 3845      04EB
 3846 0ec2 18B1     	    cbz r0,new_file 
 3847 0ec4 4FF00800 	    mov r0,#ERR_DUPLICATE
 3848 0ec8 FFF7FEBF 	    b tb_error 
 3849              	new_file:
 3850 0ecc 4FF00100 	    mov r0,#1 
ARM GAS  tinyBasic.s 			page 98


 3851 0ed0 00B5FFF7 	    _CALL unlock 
 3851      FEFF5DF8 
 3851      04EB
 3852 0eda E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3853 0edc 1846     	    mov r0,r3 // *name 
 3854 0ede 00B5FFF7 	    _CALL strlen 
 3854      FEFF5DF8 
 3854      04EB
 3855 0ee8 00F10400 	    add r0,#4  
 3856 0eec 20F00100 	    and r0,#-2 //even size
 3857 0ef0 A0F10208 	    sub T1,r0,#2  // name length counter   
 3858 0ef4 1146     	1:  mov r1,r2  
 3859 0ef6 00B5FFF7 	    _CALL hword_write   
 3859      FEFF5DF8 
 3859      04EB
 3860 0f00 02F10202 	    add r2,#2  
 3861              	// write file name      
 3862 0f04 33F8020B 	2:  ldrh r0,[r3],#2 
 3863 0f08 1146     	    mov r1,r2 
 3864 0f0a 00B5FFF7 	    _CALL hword_write
 3864      FEFF5DF8 
 3864      04EB
 3865 0f14 02F10202 	    add r2,#2
 3866 0f18 B8F10208 	    subs T1,#2
 3867 0f1c F2D1     	    bne 2b
 3868              	// write data size 
 3869 0f1e 606B     	    ldr r0,[UPP,#TXTEND]
 3870 0f20 236B     	    ldr r3,[UPP,#TXTBGN]
 3871 0f22 A0EB0300 	    sub r0,r3
 3872 0f26 8046     	    mov T1,r0
 3873 0f28 1146     	    mov r1,r2 
 3874 0f2a 00B5FFF7 	    _CALL hword_write
 3874      FEFF5DF8 
 3874      04EB
 3875 0f34 02F10202 	    add r2,#2 
 3876              	// write data 
 3877 0f38 08F10108 	    add T1,#1 
 3878 0f3c 4FEA5808 	    lsr T1,#1 // .hword to write 
 3879 0f40 33F8020B 	3:  ldrh r0,[r3],#2
 3880 0f44 1146     	    mov r1,r2
 3881 0f46 00B5FFF7 	    _CALL hword_write 
 3881      FEFF5DF8 
 3881      04EB
 3882 0f50 02F10202 	    add r2,#2 
 3883 0f54 B8F10108 	    subs T1,#1 
 3884 0f58 F2D1     	    bne 3b
 3885 0f5a 4FF00000 	    mov r0,#0 
 3886 0f5e 00B5FFF7 	    _CALL unlock
 3886      FEFF5DF8 
 3886      04EB
 3887              	// update FSFREE     
 3888 0f68 606B     	    ldr r0,[UPP,#TXTEND]
 3889 0f6a 216B     	    ldr r1,[UPP,#TXTBGN]
 3890 0f6c A0EB0100 	    sub r0,r1 
 3891 0f70 8046     	    mov T1,r0 
 3892 0f72 E16A     	    ldr r1,[UPP,#FSFREE]
 3893 0f74 0844     	    add r0,r1 
ARM GAS  tinyBasic.s 			page 99


 3894 0f76 00B5FFF7 	    _CALL page_align
 3894      FEFF5DF8 
 3894      04EB
 3895 0f80 E062     	    str r0,[UPP,#FSFREE]
 3896 0f82 D648     	    ldr r0,=fsize
 3897 0f84 00B5FFF7 	    _CALL uart_puts
 3897      FEFF5DF8 
 3897      04EB
 3898 0f8e 4046     	    mov r0,T1 
 3899 0f90 4FF00A01 	    mov r1,#10 
 3900 0f94 00B5FFF7 	    _CALL print_int 
 3900      FEFF5DF8 
 3900      04EB
 3901 0f9e D048     	    ldr r0,=data_bytes 
 3902 0fa0 00B5FFF7 	    _CALL uart_puts  
 3902      FEFF5DF8 
 3902      04EB
 3903 0faa 7047     	    _RET 
 3904 0fac 66696C65 	fsize: .asciz "file size: "
 3904      2073697A 
 3904      653A2000 
 3905 0fb8 62797465 	data_bytes: .asciz "bytes"
 3905      7300
 3906              	
 3907              	
 3908              	/*******************************
 3909              	  BASIC: FREE 
 3910              	  return RAM free bytes 
 3911              	*******************************/
 3912 0fbe 00BF     	    _FUNC free
 3913 0fc0 D4F8D000 	    ldr r0,[UPP,#HERE]
 3914 0fc4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3915 0fc8 A1EB0001 	    sub r1,r0
 3916 0fcc 4FF01A00 	    mov r0,#TK_INTGR
 3917 0fd0 7047     	    _RET  
 3918              	
 3919              	/*********************************
 3920              	  BASIC: SLEEP 
 3921              	  place MCU lowest power mode 
 3922              	  wait for external interrpt or
 3923              	  reset.
 3924              	*********************************/
 3925 0fd2 00BF     	    _FUNC sleep
 3926 0fd4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3926      CEF20000 
 3927 0fdc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3928 0fe0 0160     	    str r1,[r0]
 3929 0fe2 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3929      C4F20000 
 3930 0fea 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3931 0fee 0160     	    str r1,[r0]
 3932 0ff0 20BF     	    wfe 
 3933 0ff2 7047     	    _RET 
 3934              	
 3935              	/************************************
 3936              	  BASIC: SPC(expr)
 3937              	  mov cursor right expr spaces 
ARM GAS  tinyBasic.s 			page 100


 3938              	***********************************/
 3939              	    _FUNC spc 
 3940 0ff4 00B5FFF7 	    _CALL func_args 
 3940      FEFF5DF8 
 3940      04EB
 3941 0ffe 0128     	    cmp r0,#1
 3942 1000 7FF4FEAF 	    bne syntax_error 
 3943 1004 5CF8040B 	    _POP r0 
 3944 1008 00B5FFF7 	    _CALL spaces 
 3944      FEFF5DF8 
 3944      04EB
 3945 1012 7047     	    _RET 
 3946              	
 3947              	    _FUNC spi_read
 3948 1014 7047     	    _RET 
 3949              	
 3950 1016 00BF     	    _FUNC spi_enable
 3951 1018 7047     	    _RET 
 3952              	
 3953 101a 00BF     	    _FUNC spi_select
 3954 101c 7047     	    _RET 
 3955              	
 3956 101e 00BF     	    _FUNC spi_write
 3957 1020 7047     	    _RET 
 3958              	
 3959              	/******************************
 3960              	  BASIC: STOP 
 3961              	  stop program executre but 
 3962              	  keep execution state for 
 3963              	  resume 
 3964              	******************************/
 3965 1022 00BF     	    _FUNC stop
 3966 1024 206C10F0 	    _RTO 
 3966      010F03D1 
 3966      4FF00700 
 3966      FFF7FEBF 
 3967 1034 6068     	    ldr r0,[UPP,#COUNT]
 3968 1036 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3969 103a 206C     	    ldr r0,[UPP,#FLAGS]
 3970 103c 4FF00901 	    mov r1,#FRUN+FSTOP
 3971 1040 80EA0100 	    eor r0,r1
 3972 1044 2064     	    str r0,[UPP,#FLAGS]
 3973 1046 8AEA0A0A 	    eor IN,IN 
 3974 104a 8BEA0B0B 	    eor BPTR,BPTR 
 3975 104e C4F804A0 	    str IN,[UPP,#COUNT]
 3976 1052 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3977 1056 C4F808A0 	    str IN,[UPP,#BASICPTR]
 3978 105a 4FF4A040 	    _MOV32 r0,RAM_END
 3978      C2F20000 
 3979 1062 8546     	    mov sp,r0
 3980 1064 FFF7FEBF 	    b cmd_line 
 3981              	
 3982              	
 3983              	/**************************
 3984              	  BASIC: TAB(expr)
 3985              	  move cursor column expr 
 3986              	**************************/
ARM GAS  tinyBasic.s 			page 101


 3987              	    _FUNC tab 
 3988 1068 00B5FFF7 	    _CALL func_args  
 3988      FEFF5DF8 
 3988      04EB
 3989 1072 0128     	    cmp r0,#1 
 3990 1074 7FF4FEAF 	    bne syntax_error 
 3991 1078 5CF8040B 	    _POP r0 
 3992 107c 00B5FFF7 	    _CALL cursor_x 
 3992      FEFF5DF8 
 3992      04EB
 3993 1086 7047     	    _RET 
 3994              	
 3995              	/**************************
 3996              	  BASIC: TICKS 
 3997              	  return msec counter
 3998              	**************************/  
 3999              	    _FUNC get_ticks
 4000 1088 E169     	    ldr r1,[UPP,#TICKS]
 4001 108a 4FF01A00 	    mov r0,#TK_INTGR
 4002 108e 7047     	    _RET  
 4003              	
 4004              	/*************************
 4005              	  BASIC: TIMER expr 
 4006              	  set countdown timer 
 4007              	************************/
 4008              	    _FUNC set_timer
 4009 1090 00B5FFF7 	    _CALL expression 
 4009      FEFF5DF8 
 4009      04EB
 4010 109a 1A28     	    cmp r0,#TK_INTGR
 4011 109c 7FF4FEAF 	    bne syntax_error 
 4012 10a0 2162     	    str r1,[UPP,#TIMER]
 4013 10a2 7047     	    _RET 
 4014              	
 4015              	/***************************
 4016              	  BASIC: TIMEOUT
 4017              	  check for timer expiration 
 4018              	  return -1 true || 0 false
 4019              	****************************/
 4020              	    _FUNC timeout
 4021 10a4 81EA0101 	    eor r1,r1 
 4022 10a8 206A     	    ldr r0,[UPP,#TIMER]
 4023 10aa 08B9     	    cbnz r0,9f 
 4024 10ac 6FEA0101 	    mvn r1,r1 
 4025 10b0 4FF01A00 	9:  mov r0,#TK_INTGR    
 4026 10b4 7047     	    _RET 
 4027              	
 4028              	/****************************************
 4029              	  BASIC:  TONE freq, duration 
 4030              	  play a tone with frequency freq and duration
 4031              	  in milliseconds
 4032              	***********************************************/
 4033 10b6 00BF     	    _FUNC tone
 4034 10b8 00B5FFF7 	    _CALL arg_list 
 4034      FEFF5DF8 
 4034      04EB
 4035 10c2 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 102


 4036 10c4 7FF4FEAF 	    bne syntax_error
 4037 10c8 BCE80003 	    ldmia DP!,{T1,T2}
 4038              	    
 4039 10cc 7047     	    _RET 
 4040              	
 4041              	/****************************************
 4042              	  BASIC: TRACE n 
 4043              	  enable execution trace 
 4044              	  0   ddisable
 4045              	  1   show current line#
 4046              	  2  show line#+data_stack
 4047              	  3  show line#+data_stack+main_stack 
 4048              	***************************************/
 4049 10ce 00BF     	    _FUNC trace 
 4050 10d0 00B5FFF7 	    _CALL next_token 
 4050      FEFF5DF8 
 4050      04EB
 4051 10da 1A28     	    cmp r0,#TK_INTGR  
 4052 10dc 7FF4FEAF 	    bne syntax_error 
 4053 10e0 01F00301 	    and r1,#3 
 4054 10e4 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4055 10e8 7047     	    _RET 
 4056              	
 4057              	
 4058              	/***************************
 4059              	  BASIC: UBOUND 
 4060              	  return last indice of @
 4061              	  output:
 4062              	    r0  TK_INTGR 
 4063              	    r1  +int 
 4064              	**************************/
 4065 10ea 00BF     	    _FUNC ubound
 4066 10ec D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4067 10f0 D4F8D000 	    ldr r0,[UPP,#HERE]
 4068 10f4 A1EB0001 	    sub r1,r0 
 4069 10f8 4FEA9101 	    lsr r1,#2
 4070 10fc 4FF01A00 	    mov r0,#TK_INTGR 
 4071 1100 7047     	    _RET 
 4072              	
 4073              	/****************************
 4074              	  BASIC: UFLASH 
 4075              	  return user flash address
 4076              	*****************************/
 4077 1102 00BF     	    _FUNC uflash
 4078 1104 7749     	    ldr r1,=user
 4079 1106 4FF01A00 	    mov r0,#TK_INTGR 
 4080 110a 7047     	    _RET 
 4081              	
 4082              	
 4083              	/************************************
 4084              	  BASIC: UNTIL relation 
 4085              	  close a DO..UNTIL loop 
 4086              	  loop until relation come true 
 4087              	************************************/
 4088              	    _FUNC until
 4089 110c 00B5FFF7 	    _CALL relation 
 4089      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 103


 4089      04EB
 4090 1116 11B1     	    cbz r1,9f
 4091 1118 0CF1080C 	    add DP,#8
 4092 111c 7047     	    _RET  
 4093 111e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4094 1122 9BF80200 	    ldrb r0,[BPTR,#2]
 4095 1126 6060     	    str r0,[UPP,#COUNT]
 4096 1128 7047     	    _RET 
 4097              	
 4098              	/*************************************
 4099              	  BASIC: WAIT addr,expr1[,expr2] 
 4100              	  wait until *addr&expr1 is not null 
 4101              	  or until (*addr&expr1)^expr2 is null 
 4102              	***************************************/
 4103 112a 00BF     	    _FUNC wait
 4104 112c 00B5FFF7 	    _CALL arg_list 
 4104      FEFF5DF8 
 4104      04EB
 4105 1136 0228     	    cmp r0,#2
 4106 1138 03D0     	    beq 2f 
 4107 113a 0328     	    cmp r0,#3
 4108 113c 07D0     	    beq 4f
 4109 113e FFF7FEBF 	    b syntax_error 
 4110 1142 BCE80300 	2:  ldmia DP!,{r0,r1}
 4111 1146 0A88     	3:  ldrh r2,[r1]
 4112 1148 0240     	    ands r2,r0 
 4113 114a FCD0     	    beq 3b 
 4114 114c 06E0     	    b 9f 
 4115 114e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4116 1152 1388     	5:  ldrh r3,[r2]
 4117 1154 83EA0003 	    eor r3,r0
 4118 1158 0B40     	    ands r3,r1 
 4119 115a FAD0     	    beq 5b 
 4120 115c 7047     	9:  _RET 
 4121              	
 4122              	/*********************************************
 4123              	  BASIC: WORDS 
 4124              	  print list of BASIC WORDS in dictionary 
 4125              	  use:
 4126              	    r0,r1,r2,T1,T2  
 4127              	********************************************/
 4128 115e 00BF     	    _FUNC words
 4129 1160 206C10F0 	    _CLO 
 4129      010F03D0 
 4129      4FF00700 
 4129      FFF7FEBF 
 4130 1170 DFF87481 	    ldr T1,=kword_dict
 4131 1174 89EA0909 	    eor T2,T2
 4132 1178 82EA0202 	    eor r2,r2  
 4133              	1:  
 4134 117c 4046     	    mov r0,T1
 4135 117e 00B5FFF7 	    _CALL strlen
 4135      FEFF5DF8 
 4135      04EB
 4136 1188 F0B1     	    cbz r0,4f 
 4137 118a 8144     	    add T2,r0 
 4138 118c B9F1500F 	    cmp T2,#80 
ARM GAS  tinyBasic.s 			page 104


 4139 1190 06D4     	    bmi 2f
 4140 1192 89EA0909 	    eor T2,T2  
 4141 1196 00B5FFF7 	    _CALL cr 
 4141      FEFF5DF8 
 4141      04EB
 4142 11a0 4046     	2:  mov r0,T1 
 4143 11a2 00B5FFF7 	    _CALL uart_puts 
 4143      FEFF5DF8 
 4143      04EB
 4144 11ac 4FF02000 	    mov r0,#SPACE
 4145 11b0 09F10109 	    add T2,#1  
 4146 11b4 00B5FFF7 	    _CALL uart_putc
 4146      FEFF5DF8 
 4146      04EB
 4147 11be 02F10102 	    add r2,#1 
 4148 11c2 58F80C8C 	    ldr T1,[T1,#-12]
 4149 11c6 D9E7     	    b 1b 
 4150 11c8 19EA0909 	4:  ands T2,T2
 4151 11cc 04D0     	    beq 5f 
 4152 11ce 00B5FFF7 	    _CALL cr 
 4152      FEFF5DF8 
 4152      04EB
 4153 11d8 1046     	5:  mov r0,r2 
 4154 11da 4FF00A01 	    mov r1,#10
 4155 11de 00B5FFF7 	    _CALL print_int 
 4155      FEFF5DF8 
 4155      04EB
 4156 11e8 4048     	    ldr r0,=dict_words
 4157 11ea 00B5FFF7 	    _CALL uart_puts  
 4157      FEFF5DF8 
 4157      04EB
 4158 11f4 7047     	9:  _RET 
 4159              	
 4160 11f6 776F7264 	dict_words: .asciz "words in dictionary" 
 4160      7320696E 
 4160      20646963 
 4160      74696F6E 
 4160      61727900 
 4161              	
 4162              	
 4163              	/**************************************
 4164              	  BASIC: XOR(expr1,expr2)
 4165              	  binary exclusive or between 2 expressions
 4166              	**************************************/
 4167 120a 00BF     	    _FUNC bit_xor
 4168 120c 00B5FFF7 	    _CALL func_args
 4168      FEFF5DF8 
 4168      04EB
 4169 1216 0228     	    cmp r0,#2
 4170 1218 7FF4FEAF 	    bne syntax_error
 4171 121c 5CF8040B 	    _POP r0
 4172 1220 5CF8041B 	    _POP r1 
 4173 1224 81EA0001 	    eor r1,r0 
 4174 1228 4FF01A00 	    mov r0,#TK_INTGR
 4175 122c 7047     	    _RET 
 4176              	
 4177              	/***************************************
ARM GAS  tinyBasic.s 			page 105


 4178              	    BASIC: XPOS 
 4179              	    report cursor column on terminal 
 4180              	***************************************/
 4181 122e 00BF     	    _FUNC xpos 
 4182 1230 00B5FFF7 	    _CALL get_curpos
 4182      FEFF5DF8 
 4182      04EB
 4183 123a 4FF01A00 	    mov r0,#TK_INTGR
 4184 123e 7047     	    _RET 
 4185              	
 4186              	/***********************************
 4187              	    BASIC: YPOS 
 4188              	    report cursor line on terminal 
 4189              	***********************************/
 4190              	    _FUNC ypos 
 4191 1240 00B5FFF7 	    _CALL get_curpos 
 4191      FEFF5DF8 
 4191      04EB
 4192 124a 0146     	    mov r1,r0 
 4193 124c 4FF01A00 	    mov r0,#TK_INTGR
 4194 1250 7047     	    _RET 
 4195              	
 4196              	
 4197              	/**********************************
 4198              	     argument stack manipulation
 4199              	**********************************/
 4200              	
 4201              	/**********************************
 4202              	  BASIC PUSH expr[,expr] 
 4203              	  push integers on stack 
 4204              	*********************************/
 4205 1252 00BF     	    _FUNC cmd_push 
 4206 1254 00B5FFF7 	    _CALL arg_list
 4206      FEFF5DF8 
 4206      04EB
 4207 125e 7047     	    _RET 
 4208              	
 4209              	/********************************
 4210              	  BASIC: POP 
 4211              	  pop an integer out of stack 
 4212              	********************************/    
 4213              	    _FUNC fn_pop 
 4214 1260 5CF8041B 	    _POP r1 
 4215 1264 4FF01A00 	    mov r0,#TK_INTGR 
 4216 1268 7047     	    _RET 
 4217              	
 4218              	/*******************************
 4219              	  BASIC: DROP n 
 4220              	  discard n integer from stack
 4221              	*******************************/
 4222 126a 00BF     	    _FUNC drop 
 4223 126c 00B5FFF7 	    _CALL expression 
 4223      FEFF5DF8 
 4223      04EB
 4224 1276 1A28     	    cmp r0,#TK_INTGR 
 4225 1278 7FF4FEAF 	    bne syntax_error 
 4226 127c 4FF00400 	    mov r0,#4 
ARM GAS  tinyBasic.s 			page 106


 4227 1280 01FB00F0 	    mul r0,r1 
 4228 1284 8444     	    add DP,r0 
 4229 1286 7047     	    _RET 
 4230              	
 4231              	/********************************
 4232              	  BASIC: GET(expr) 
 4233              	  retreive nth element from stack 
 4234              	********************************/
 4235              	    _FUNC get 
 4236 1288 00B5FFF7 	    _CALL func_args
 4236      FEFF5DF8 
 4236      04EB
 4237 1292 0128     	    cmp r0,#1 
 4238 1294 7FF4FEAF 	    bne syntax_error 
 4239 1298 5CF8040B 	    _POP r0
 4240 129c 4FF00401 	    mov r1,#4 
 4241 12a0 01FB00F0 	    mul r0,r1 
 4242 12a4 5CF80010 	    ldr r1,[DP,r0]
 4243 12a8 4FF01A00 	    mov r0,#TK_INTGR
 4244 12ac 7047     	    _RET 
 4245              	
 4246              	/*************************************
 4247              	  BASIC: PUT value,n  
 4248              	  store value at nth position on stack
 4249              	**************************************/
 4250 12ae 00BF     	    _FUNC put
 4251 12b0 00B5FFF7 	    _CALL arg_list 
 4251      FEFF5DF8 
 4251      04EB
 4252 12ba 0228     	    cmp r0,#2 
 4253 12bc 7FF4FEAF 	    bne syntax_error 
 4254 12c0 5CF8040B 	    _POP r0 
 4255 12c4 4FF00401 	    mov r1,#4 
 4256 12c8 01FB00F0 	    mul r0,r1 
 4257 12cc 5CF8041B 	    _POP r1
 4258 12d0 4CF80010 	    str r1,[DP,r0]
 4259 12d4 7047     	    _RET 
 4260              	
 4261              	
 4262 12d6 0000     	  .section .rodata.user
 4263              	  .p2align 10 
 4264              	user:
 4265 0000 FFFFFFFF 	  .space 1024,255
 4265      FFFFFFFF 
 4265      FFFFFFFF 
 4265      FFFFFFFF 
 4265      FFFFFFFF 
 4266              	
 4267              	/*************************************************
 4268              	   extra FLASH memory not used by Tiny BASIC
 4269              	   is used to save BASIC programs.
 4270              	************************************************/
 4271              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4272              	  .section .rodata.fs
 4273              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 107


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 108


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 110


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
ARM GAS  tinyBasic.s 			page 111


      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_CONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_LABEL
      tbi_macros.inc:65     *ABS*:000000000000001a TK_INTGR
      tbi_macros.inc:66     *ABS*:000000000000001b TK_QSTR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_INVALID
      tbi_macros.inc:72     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:73     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:74     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:75     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:76     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:77     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:78     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:79     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:81     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:82     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:83     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:84     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:85     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:86     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:87     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:88     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:94     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:96     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:102    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:119    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:120    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:121    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:122    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:123    *ABS*:0000000000000010 DATA
      tbi_macros.inc:124    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:125    *ABS*:0000000000000018 BASE
      tbi_macros.inc:126    *ABS*:000000000000001c TICKS
      tbi_macros.inc:127    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:128    *ABS*:0000000000000024 SEED
      tbi_macros.inc:129    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:130    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:131    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:132    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:133    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:134    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:135    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:136    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:137    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:138    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:139    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:140    *ABS*:0000000000000060 VARS
      tbi_macros.inc:141    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:142    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:143    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:144    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:145    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:148    *ABS*:0000000000000001 FRUN
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:149    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:150    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:151    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:152    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:153    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:154    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:156    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:158    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:159    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CLS_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CONST_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATA_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATALN_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DEC_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DIR_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DO_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DROP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 ERASE_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FREE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GOSUB_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOTO_IDX
       cmd_index.inc:52     *ABS*:000000000000001b HEX_IDX
       cmd_index.inc:53     *ABS*:000000000000001c IF_IDX
       cmd_index.inc:54     *ABS*:000000000000001d IN_IDX
       cmd_index.inc:55     *ABS*:000000000000001e INPUT_IDX
       cmd_index.inc:56     *ABS*:000000000000001f INVERT_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 KEY_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LET_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LIST_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LOAD_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LOCATE_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LSHIFT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NEW_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NEXT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NOT_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 OR_IDX
       cmd_index.inc:67     *ABS*:000000000000002a OUT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PAD_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PAUSE_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PMODE_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK16_IDX
ARM GAS  tinyBasic.s 			page 113


       cmd_index.inc:73     *ABS*:0000000000000030 PEEK32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE8_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE16_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE32_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POP_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PRT_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PUSH_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PUT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 QKEY_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 READ_IDX
       cmd_index.inc:83     *ABS*:000000000000003a REM_IDX
       cmd_index.inc:84     *ABS*:000000000000003b REST_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RET_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RND_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RSHIFT_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RUN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SAVE_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SLEEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SPC_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STEP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STOP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 STORE_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TAB_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 THEN_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TICKS_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TIMER_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TMROUT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TO_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TRACE_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UBOUND_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UFLASH_IDX
       cmd_index.inc:104    *ABS*:000000000000004f UNTIL_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WAIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WORDS_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XOR_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XPOS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
ARM GAS  tinyBasic.s 			page 114


         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1756   .text:0000000000000e28 next_token
         tinyBasic.s:380    .text:00000000000002c8 search_label
         tinyBasic.s:2020   .text:00000000000010a8 expression
         tinyBasic.s:1310   .text:0000000000000a3c syntax_error
         tinyBasic.s:418    .text:00000000000002f0 search_lineno
         tinyBasic.s:1325   .text:0000000000000a44 tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:449    .text:0000000000000310 delete_line
         tinyBasic.s:474    .text:000000000000033c create_gap
         tinyBasic.s:499    .text:0000000000000364 insert_line
         tinyBasic.s:538    .text:00000000000003b4 compile
         tinyBasic.s:1662   .text:0000000000000d84 pad
         tinyBasic.s:863    .text:00000000000006b0 parse_int
         tinyBasic.s:611    .text:000000000000045c comp_token
         tinyBasic.s:694    .text:0000000000000562 store_r0
         tinyBasic.s:957    .text:0000000000000750 skip
         tinyBasic.s:1042   .text:00000000000007b8 is_letter
         tinyBasic.s:778    .text:00000000000005f4 comp_label
         tinyBasic.s:703    .text:0000000000000582 token_exit
         tinyBasic.s:685    .text:000000000000053e tick2
         tinyBasic.s:721    .text:0000000000000588 is_special
         tinyBasic.s:743    .text:00000000000005cc token_ofs
         tinyBasic.s:634    .text:00000000000004b6 tok_idx0
         tinyBasic.s:697    .text:0000000000000568 try_number
         tinyBasic.s:638    .text:00000000000004b8 single
         tinyBasic.s:738    .text:00000000000005bd tok_single
         tinyBasic.s:642    .text:00000000000004c0 lt
         tinyBasic.s:648    .text:00000000000004ce gt
         tinyBasic.s:661    .text:00000000000004f2 bkslash
         tinyBasic.s:668    .text:0000000000000508 prt_cmd
         tinyBasic.s:674    .text:000000000000051a quote
         tinyBasic.s:896    .text:00000000000006e8 parse_quote
         tinyBasic.s:679    .text:000000000000052e tick
         tinyBasic.s:735    .text:00000000000005a8 char_list
         tinyBasic.s:736    .text:00000000000005a8 $d
         tinyBasic.s:744    .text:00000000000005cc $d
         tinyBasic.s:761    .text:00000000000005f4 $t
         tinyBasic.s:976    .text:0000000000000768 upper
         tinyBasic.s:2326   .rodata.dictionary:0000000000000670 kword_dict
         tinyBasic.s:1477   .text:0000000000000bc0 search_dict
         tinyBasic.s:833    .text:000000000000068c compress_label
         tinyBasic.s:1073   .text:00000000000007d8 atoi
         tinyBasic.s:927    .text:000000000000071c get_escaped_char
         tinyBasic.s:944    .text:0000000000000746 escaped
         tinyBasic.s:944    .text:0000000000000746 $d
         tinyBasic.s:957    .text:000000000000074e $t
         tinyBasic.s:994    .text:0000000000000778 is_digit
         tinyBasic.s:1018   .text:0000000000000794 is_hex
         tinyBasic.s:1117   .text:0000000000000824 cmd_name
         tinyBasic.s:1143   .text:0000000000000848 decompile_line
         tinyBasic.s:1160   .text:000000000000088e decomp_loop
         tinyBasic.s:1270   .text:0000000000000a13 single_char
         tinyBasic.s:1265   .text:00000000000009fe relop_str
         tinyBasic.s:1265   .text:00000000000009fe $d
         tinyBasic.s:1266   .text:0000000000000a0a ge_str
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:1267   .text:0000000000000a0d le_str
         tinyBasic.s:1268   .text:0000000000000a10 ne_str
         tinyBasic.s:1287   .text:0000000000000a24 modulo
         tinyBasic.s:1358   .text:0000000000000ad4 compile_error
         tinyBasic.s:1329   .text:0000000000000a4c rt_error
         tinyBasic.s:1373   .text:0000000000000b26 rt_error_msg
         tinyBasic.s:1377   .text:0000000000000b46 err_msg
         tinyBasic.s:1374   .text:0000000000000b37 token_at_msg
         tinyBasic.s:2788   .text.basic:00000000000003c8 dump01
         tinyBasic.s:1675   .text:0000000000000d94 warm_start
         tinyBasic.s:1373   .text:0000000000000b26 $d
         tinyBasic.s:1385   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1386   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1387   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1388   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1389   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1390   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1391   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1392   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1393   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1394   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1395   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1396   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1397   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1398   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1399   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1400   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1402   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1403   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1404   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1414   .text:0000000000000b8a $t
         tinyBasic.s:1414   .text:0000000000000b8c skip_line
         tinyBasic.s:1431   .text:0000000000000b94 BTGL
         tinyBasic.s:1449   .text:0000000000000b98 kword_cmp
         tinyBasic.s:1515   .text:0000000000000bfe cold_start
         tinyBasic.s:1538   .text:0000000000000c5c src_addr
         tinyBasic.s:1540   .text:0000000000000c60 dest_addr
         tinyBasic.s:1661   .text:0000000000000d80 tib
         tinyBasic.s:1542   .text:0000000000000c64 sysvar_size
         tinyBasic.s:1553   .text:0000000000000c68 prt_version
         tinyBasic.s:1609   .text:0000000000000d0c clear_basic
         tinyBasic.s:3644   .text.basic:0000000000000c84 search_free
         tinyBasic.s:1539   .text:0000000000000c5c $d
         tinyBasic.s:2199   .rodata:0000000000000000 uzero
         tinyBasic.s:2225   .rodata:00000000000000d4 ulast
         tinyBasic.s:1553   .text:0000000000000c68 $t
         tinyBasic.s:1576   .text:0000000000000ccc version_msg
         tinyBasic.s:1578   .text:0000000000000cec version
         tinyBasic.s:1577   .text:0000000000000ccc $d
         tinyBasic.s:1593   .text:0000000000000cf0 clear_vars
         tinyBasic.s:1644   .text:0000000000000d54 warm_init
         tinyBasic.s:1660   .text:0000000000000d7c dstack
         tinyBasic.s:1659   .text:0000000000000d78 mstack
         tinyBasic.s:1659   .text:0000000000000d78 $d
         tinyBasic.s:1663   .text:0000000000000d88 array
         tinyBasic.s:1664   .text:0000000000000d8c ready
         tinyBasic.s:1695   .text:0000000000000dac cmd_line
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1707   .text:0000000000000de0 interpreter
         tinyBasic.s:1740   .text:0000000000000e20 execute
         tinyBasic.s:3113   .text.basic:000000000000070a let_var
         tinyBasic.s:3118   .text.basic:0000000000000716 let_array
         tinyBasic.s:2335   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1762   .text:0000000000000e36 end_of_line
         tinyBasic.s:1766   .text:0000000000000e40 next_line
         tinyBasic.s:1820   .text:0000000000000eb4 expect
         tinyBasic.s:1839   .text:0000000000000ed0 func_args
         tinyBasic.s:1859   .text:0000000000000efc arg_list
         tinyBasic.s:1893   .text:0000000000000f3c factor
         tinyBasic.s:2128   .text:0000000000001190 get_array_element
         tinyBasic.s:2166   .text:00000000000011b8 get_var
         tinyBasic.s:1969   .text:0000000000001030 term
         tinyBasic.s:2063   .text:0000000000001110 relation
         tinyBasic.s:2110   .text:0000000000001188 relop_jmp
         tinyBasic.s:2082   .text:0000000000001158 rel_idx0
         tinyBasic.s:2083   .text:0000000000001158 rel_eq
         tinyBasic.s:2100   .text:000000000000116e rel_false
         tinyBasic.s:2086   .text:000000000000115c rel_gt
         tinyBasic.s:2089   .text:0000000000001160 rel_ge
         tinyBasic.s:2092   .text:0000000000001164 rel_lt
         tinyBasic.s:2095   .text:0000000000001168 rel_le
         tinyBasic.s:2098   .text:000000000000116c rel_ne
         tinyBasic.s:2111   .text:0000000000001188 $d
         tinyBasic.s:2128   .text:000000000000118e $t
         tinyBasic.s:2148   .text:00000000000011a4 set_array_element
         tinyBasic.s:2184   .text:00000000000011c8 set_var
         tinyBasic.s:4273   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2220   .rodata:0000000000000050 $d
         tinyBasic.s:2233   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2232   *ABS*:0000000000000000 link
         tinyBasic.s:2327   .rodata.dictionary:0000000000000670 LINK
         tinyBasic.s:2234   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2322   .rodata.dictionary:0000000000000664 first_link
         tinyBasic.s:2369   .text.basic:0000000000000000 abs
         tinyBasic.s:2391   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2406   .text.basic:0000000000000054 ascii
         tinyBasic.s:2431   .text.basic:000000000000009c awu
         tinyBasic.s:2471   .text.basic:0000000000000104 bitmask
         tinyBasic.s:2493   .text.basic:0000000000000128 bit_reset
         tinyBasic.s:2518   .text.basic:0000000000000154 bit_set
         tinyBasic.s:2558   .text.basic:00000000000001a4 bit_test
         tinyBasic.s:2542   .text.basic:000000000000017c bit_toggle
         tinyBasic.s:2590   .text.basic:00000000000001f0 char
         tinyBasic.s:2582   .text.basic:00000000000001e4 cls
         tinyBasic.s:2607   .text.basic:0000000000000210 const
         tinyBasic.s:2646   .text.basic:0000000000000294 data_line
         tinyBasic.s:2751   .text.basic:000000000000038c dec_base
         tinyBasic.s:3709   .text.basic:0000000000000cf0 directory
         tinyBasic.s:2760   .text.basic:0000000000000394 do_loop
         tinyBasic.s:4222   .text.basic:000000000000126c drop
         tinyBasic.s:2775   .text.basic:000000000000039c dump
         tinyBasic.s:2827   .text.basic:000000000000044c cmd_end
         tinyBasic.s:2855   .text.basic:000000000000048c erase
         tinyBasic.s:2866   .text.basic:00000000000004a0 for
         tinyBasic.s:3749   .text.basic:0000000000000da8 forget
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:3912   .text.basic:0000000000000fc0 free
         tinyBasic.s:4235   .text.basic:0000000000001288 get
         tinyBasic.s:2947   .text.basic:000000000000055c gosub
         tinyBasic.s:2973   .text.basic:000000000000059c goto
         tinyBasic.s:2981   .text.basic:00000000000005a8 hex_base
         tinyBasic.s:2990   .text.basic:00000000000005b0 if
         tinyBasic.s:3263   .text.basic:00000000000008d0 pin_input
         tinyBasic.s:3009   .text.basic:00000000000005c8 input_var
         tinyBasic.s:3077   .text.basic:00000000000006c0 invert
         tinyBasic.s:3090   .text.basic:00000000000006e0 key
         tinyBasic.s:3106   .text.basic:00000000000006f4 let
         tinyBasic.s:3149   .text.basic:0000000000000780 list
         tinyBasic.s:3778   .text.basic:0000000000000df4 load
         tinyBasic.s:3200   .text.basic:0000000000000830 locate
         tinyBasic.s:3214   .text.basic:0000000000000854 lshift
         tinyBasic.s:3228   .text.basic:0000000000000874 new
         tinyBasic.s:2911   .text.basic:0000000000000504 next
         tinyBasic.s:3237   .text.basic:0000000000000894 func_not
         tinyBasic.s:3249   .text.basic:00000000000008ac bit_or
         tinyBasic.s:3281   .text.basic:00000000000008fc out
         tinyBasic.s:3299   .text.basic:0000000000000928 pad_ref
         tinyBasic.s:3310   .text.basic:0000000000000934 pause
         tinyBasic.s:3338   .text.basic:0000000000000950 pin_mode
         tinyBasic.s:3403   .text.basic:0000000000000a1c peek8
         tinyBasic.s:3416   .text.basic:0000000000000a38 peek16
         tinyBasic.s:3429   .text.basic:0000000000000a54 peek32
         tinyBasic.s:3443   .text.basic:0000000000000a70 poke8
         tinyBasic.s:3455   .text.basic:0000000000000a88 poke16
         tinyBasic.s:3467   .text.basic:0000000000000aa0 poke32
         tinyBasic.s:4213   .text.basic:0000000000001260 fn_pop
         tinyBasic.s:3481   .text.basic:0000000000000ab8 print
         tinyBasic.s:4205   .text.basic:0000000000001254 cmd_push
         tinyBasic.s:4250   .text.basic:00000000000012b0 put
         tinyBasic.s:3548   .text.basic:0000000000000ba0 qkey
         tinyBasic.s:2676   .text.basic:00000000000002e8 read
         tinyBasic.s:2718   .text.basic:0000000000000348 restore
         tinyBasic.s:2962   .text.basic:0000000000000584 return
         tinyBasic.s:3560   .text.basic:0000000000000bbc random
         tinyBasic.s:3583   .text.basic:0000000000000c00 rshift
         tinyBasic.s:3596   .text.basic:0000000000000c20 run
         tinyBasic.s:3831   .text.basic:0000000000000e84 save
         tinyBasic.s:3925   .text.basic:0000000000000fd4 sleep
         tinyBasic.s:3939   .text.basic:0000000000000ff4 spc
         tinyBasic.s:2897   .text.basic:00000000000004ec step
         tinyBasic.s:3965   .text.basic:0000000000001024 stop
         tinyBasic.s:2835   .text.basic:0000000000000454 store
         tinyBasic.s:3987   .text.basic:0000000000001068 tab
         tinyBasic.s:3001   .text.basic:00000000000005c4 then
         tinyBasic.s:3999   .text.basic:0000000000001088 get_ticks
         tinyBasic.s:4008   .text.basic:0000000000001090 set_timer
         tinyBasic.s:4020   .text.basic:00000000000010a4 timeout
         tinyBasic.s:2884   .text.basic:00000000000004d4 to
         tinyBasic.s:4049   .text.basic:00000000000010d0 trace
         tinyBasic.s:4065   .text.basic:00000000000010ec ubound
         tinyBasic.s:4077   .text.basic:0000000000001104 uflash
         tinyBasic.s:4088   .text.basic:000000000000110c until
         tinyBasic.s:4103   .text.basic:000000000000112c wait
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:4128   .text.basic:0000000000001160 words
         tinyBasic.s:4167   .text.basic:000000000000120c bit_xor
         tinyBasic.s:4181   .text.basic:0000000000001230 xpos
         tinyBasic.s:4190   .text.basic:0000000000001240 ypos
         tinyBasic.s:2369   .text.basic:0000000000000000 $t
         tinyBasic.s:2381   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2384   .text.basic:000000000000002c analog_read
         tinyBasic.s:2423   .text.basic:0000000000000098 autorun
         tinyBasic.s:3303   .text.basic:0000000000000930 pad_adr
         tinyBasic.s:2695   .text.basic:0000000000000320 seek_next
         tinyBasic.s:2740   .text.basic:000000000000037e no_data_line
         tinyBasic.s:2736   .text.basic:0000000000000378 try_next_line
         tinyBasic.s:2801   .text.basic:00000000000003ec print_dump_header
         tinyBasic.s:2859   .text.basic:000000000000049c user_space
         tinyBasic.s:2859   .text.basic:000000000000049c $d
         tinyBasic.s:4264   .rodata.user:0000000000000000 user
         tinyBasic.s:2866   .text.basic:00000000000004a0 $t
         tinyBasic.s:2950   .text.basic:000000000000056a target
         tinyBasic.s:3070   .text.basic:00000000000006bc str_buffer
         tinyBasic.s:3069   .text.basic:00000000000006b8 input_buffer
         tinyBasic.s:3069   .text.basic:00000000000006b8 $d
         tinyBasic.s:3077   .text.basic:00000000000006c0 $t
         tinyBasic.s:3194   .text.basic:000000000000082c out_buff
         tinyBasic.s:3194   .text.basic:000000000000082c $d
         tinyBasic.s:3200   .text.basic:0000000000000830 $t
         tinyBasic.s:3303   .text.basic:0000000000000930 $d
         tinyBasic.s:3310   .text.basic:0000000000000934 $t
         tinyBasic.s:3536   .text.basic:0000000000000b86 unget_exit
         tinyBasic.s:3538   .text.basic:0000000000000b8e print_exit
         tinyBasic.s:3697   .text.basic:0000000000000cec fs_addr
         tinyBasic.s:3672   .text.basic:0000000000000ca8 search_file
         tinyBasic.s:3676   .text.basic:0000000000000cb0 cmp_loop
         tinyBasic.s:3697   .text.basic:0000000000000cec $d
         tinyBasic.s:3709   .text.basic:0000000000000cf0 $t
         tinyBasic.s:3732   .text.basic:0000000000000d68 no_more_file
         tinyBasic.s:3742   .text.basic:0000000000000da0 fcount
         tinyBasic.s:3742   .text.basic:0000000000000da0 $d
         tinyBasic.s:3904   .text.basic:0000000000000fac fsize
         tinyBasic.s:3905   .text.basic:0000000000000fb8 data_bytes
         tinyBasic.s:3849   .text.basic:0000000000000ecc new_file
         tinyBasic.s:3904   .text.basic:0000000000000fac $d
         tinyBasic.s:3912   .text.basic:0000000000000fbe $t
         tinyBasic.s:3947   .text.basic:0000000000001014 spi_read
         tinyBasic.s:3950   .text.basic:0000000000001018 spi_enable
         tinyBasic.s:3953   .text.basic:000000000000101c spi_select
         tinyBasic.s:3956   .text.basic:0000000000001020 spi_write
         tinyBasic.s:4033   .text.basic:00000000000010b8 tone
         tinyBasic.s:4160   .text.basic:00000000000011f6 dict_words
         tinyBasic.s:4160   .text.basic:00000000000011f6 $d
         tinyBasic.s:4167   .text.basic:000000000000120a $t
         tinyBasic.s:4263   .rodata.user:0000000000000000 $d
         tinyBasic.s:4262   .text.basic:00000000000012d6 $d
         tinyBasic.s:4273   .text.basic:00000000000012d8 $d
         tinyBasic.s:4273   .text:00000000000011d8 $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:742    .text:00000000000005cb $d
         tinyBasic.s:1287   .text:0000000000000a23 $d
         tinyBasic.s:1287   .text:0000000000000a24 $t
         tinyBasic.s:1580   .text:0000000000000ced $d
         tinyBasic.s:1580   .text:0000000000000cee $t
         tinyBasic.s:1675   .text:0000000000000d93 $d
         tinyBasic.s:1675   .text:0000000000000d94 $t
         tinyBasic.s:3749   .text.basic:0000000000000da7 $d
         tinyBasic.s:3749   .text.basic:0000000000000da8 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
get_curpos
