ARM GAS  stm32-tbi.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	/*****************************************
  20              	    REGISTERS USAGE 
  21              	
  22              	 R0   ACCA  //  arithmetic operator A 
  23              	 R1   ACCB  //  arithmetic operator B 
  24              	 R2   VPC   //  virtual machine program counter  
  25              	 R3   UPP   //  system variables base address 
  26              	 R4   VPP   //  BASIC variables base address 
  27              	 R5         //  FOR loop counter 
  28              	 R6         //  FOR loop limit 
  29              	 R7         //  FOR loop increment 
  30              	 R8-R11     //  temporary registers saved by caller 
  31              	*****************************************/
  32              	
  33              	  .syntax unified
  34              	  .cpu cortex-m3
  35              	  .fpu softvfp
  36              	  .thumb
  37              	
  38              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
ARM GAS  stm32-tbi.s 			page 2


  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
ARM GAS  stm32-tbi.s 			page 3


  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
ARM GAS  stm32-tbi.s 			page 4


 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  39              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
ARM GAS  stm32-tbi.s 			page 5


  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  40              	  .include "gen_macros.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  stm32-tbi.s 			page 6


  17              	////
  18              	//--------------------------------------
  19              	
  20              	    // reserve space on stack
  21              	    // for local variables
  22              	    .macro _vars n 
  23              	    sub sp,sp,#n 
  24              	    .endm 
  25              	    
  26              	    // free space on stack
  27              	    .macro _drop n 
  28              	    add sp,sp,#n 
  29              	    .endm
  30              	
  31              	    // declare ARG_OFS for arguments 
  32              	    // displacement on stack. This 
  33              	    // value depend on local variables 
  34              	    // size.
  35              	    .macro _argofs n 
  36              	    ARG_OFS=4+n 
  37              	    .endm 
  38              	
  39              	    // declare a function argument 
  40              	    // position relative to stack pointer 
  41              	    // _argofs must be called before it.
  42              	    .macro _arg name ofs 
  43              	    name=ARG_OFS+ofs 
  44              	    .endm 
  41              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	.equ TAB_WIDTH,4 // default tabulation width 
  20              	.equ EOF,0xff // end of file marker 
  21              	// keyword types 
  22              	.equ F_CMD,0x20     // command keyword
  23              	.equ F_IFUNC,0x40 // integer function keyword
  24              	.equ F_CFUNC,0x80 // character function keyword
  25              	.equ F_CONST,0xC0 // function keyword that return a constant
  26              	
  27              	//--------------------------------------
  28              	//   constantes related to Arduino 
ARM GAS  stm32-tbi.s 			page 7


  29              	//   API mapping 
  30              	//-------------------------------------
  31              	.equ INP,0
  32              	.equ OUTP,1 
  33              	
  34              	//--------------------------------------
  35              	//       token attribute
  36              	//--------------------------------------
  37              	// bits 4:5 identify token group 
  38              	// 0x0n -> miscelinous 
  39              	// 0x1n -> +|- operators 
  40              	// 0x2n -> *|/|% operators
  41              	// 0x3n -> relational operators 
  42              	.equ TK_CMD,128      // BASIC command   
  43              	.equ TK_IFUNC,129    // BASIC integer function
  44              	.equ TK_CFUNC,130    // BASIC character function
  45              	.equ TK_CONST,131    // BASIC constant 
  46              	.equ TK_INTGR,132
  47              	.equ TK_VAR,133
  48              	.equ TK_NONE,0       // not a token 
  49              	.equ TK_COLON,1      // command separator ':' 
  50              	.equ TK_QSTR,2     // quoted string  
  51              	.equ TK_CHAR,3       // ASCII character 
  52              	.equ TK_ARRAY,6     // array variable '@' 
  53              	.equ TK_LPAREN,7     // left parenthesis '('
  54              	.equ TK_RPAREN,8     // right parenthesis ')'
  55              	.equ TK_COMMA,9     // item separator ',' 
  56              	.equ TK_SHARP,0xa     // print colon width '#' 
  57              	.equ TK_PLUS,0x10    // addition operator '+'
  58              	.equ TK_MINUS,0x11   // subtraction operator '-'
  59              	.equ TK_MULT,0x20    // multiplication operator '*'
  60              	.equ TK_DIV,0x21     // division operator '/'
  61              	.equ TK_MOD,0x22     // modulo operator '%'
  62              	
  63              	// don't change these token values 
  64              	// values chosen to be used as a mask.
  65              	// bit 7   1 for dictionary words else 0 
  66              	// bits 6  always 0 
  67              	// bits 5:4 identify group 
  68              	// bits 3:0 token identifier inside group  
  69              	.equ TK_GT,0x31      // relation operator '>'
  70              	.equ TK_EQUAL,0x32   // assignment or relation operator ','
  71              	.equ TK_GE,0x33      // relation operator '>,'
  72              	.equ TK_LT,0x34      // relation operator '<'
  73              	.equ TK_LE,0x36      // relation operator '<,'
  74              	.equ TK_NE,0x35      // relation operator '<>' not equal 
  75              	// token groups 
  76              	.equ TK_GRP_MASK,0x30 // groups bits selector 
  77              	.equ TK_GRP_MISC,0x00 // miscelinous group 
  78              	.equ TK_GRP_ADD,0x10  // additive operators
  79              	.equ TK_GRP_MULT,0x20 // multiplicative operators
  80              	.equ TK_GRP_RELOP,0x30 //relational operators. 
  81              	.equ CMD_END,2 
  82              	
  83              	//--------------------------------------
  84              	//   error codes 
  85              	//--------------------------------------
ARM GAS  stm32-tbi.s 			page 8


  86              	.equ ERR_NONE,0
  87              	.equ ERR_MEM_FULL,1 
  88              	.equ ERR_SYNTAX,2
  89              	.equ ERR_MATH_OVF,3
  90              	.equ ERR_DIV0,4 
  91              	.equ ERR_NO_LINE,5
  92              	.equ ERR_RUN_ONLY,6
  93              	.equ ERR_CMD_ONLY,7
  94              	.equ ERR_DUPLICATE,8
  95              	.equ ERR_NOT_FILE,9
  96              	.equ ERR_BAD_VALUE,10
  97              	.equ ERR_NO_ACCESS,11
  98              	.equ ERR_NO_DATA,12 
  99              	.equ ERR_NO_PROG,13
 100              	.equ ERR_NO_FSPACE,14
 101              	.equ ERR_BUF_FULL,15
 102              	
 103              	//--------------------------------------
 104              	//   assembler flags 
 105              	//-------------------------------------
 106              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 107              	
 108              	.equ CELL_SIZE,4 
 109              	
 110              	
 111              	//-------------------------------
 112              	//  macros used to help debugging
 113              	//-------------------------------
 114              	.equ DEBUG,0
 115              	
  42              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
ARM GAS  stm32-tbi.s 			page 9


  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
ARM GAS  stm32-tbi.s 			page 10


  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  43              	
  44              	/* blue pill specific constants */ 
  45              	  .equ LED_GPIO, GPIOC_BASE_ADR
  46              	  .equ LED_PIN, 13
  47              	  .equ UART, USART1_BASE_ADR 
  48              	
  49              		.equ STACK_SIZE,256
  50              		.equ STACK_EMPTY,RAM_END-1
  51              	  .equ TIB_SIZE,80 
  52              	  .equ PAD_SIZE,80   
  53              	/* flags used by BASIC interpreter */ 
  54              		.equ FRUN,0 // flags run code in variable flags
  55              		.equ FTRAP,1 // inside trap handler 
  56              		.equ FLOOP,2 // FOR loop in preparation 
ARM GAS  stm32-tbi.s 			page 11


  57              		.equ FSLEEP,3 // halt produit par la commande SLEEP 
  58              		.equ FBREAK,4 // break point flag 
  59              		.equ FCOMP,5  // compiling flags 
  60              	
  61              		.equ FAUTORUN,6// auto start program running 
  62              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
  63              	  
  64              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
  65              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
  66              	
  67              		.equ RX_QUEUE_SIZE,16
  68              	
  69              	/***************************
  70              	  SYSTEM variables offset 
  71              	  from UPP  
  72              	***************************/ 
  73              	  .equ IN,0    // low byte of in.w 
  74              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
  75              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
  76              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
  77              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
  78              	  .equ DATA,DATAPTR+4 // index to next data item 
  79              	  .equ DATALEN, DATA+4 // length of data line 
  80              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
  81              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
  82              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
  83              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
  84              	  .equ FSPTR,SEED+4 //  pointer used by file system
  85              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
  86              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
  87              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
  88              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
  89              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
  90              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
  91              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
  92              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
  93              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
  94              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
  95              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
  96              	  .equ CELLL,4 // size of integer 
  97              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
  98              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
  99              	
 100              	
 101              	/***********************************************
 102              	*       MACROS
 103              	***********************************************/
 104              		.macro _CALL fn /* low level routine call */ 
 105              	 	PUSH {LR}
 106              		BL \fn  
 107              		POP {LR}
 108              		.endm
 109              		
 110              		.macro	_RET /* return from subroutine */
 111              		BX	LR
 112              		.endm
 113              	
ARM GAS  stm32-tbi.s 			page 12


 114              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 115              		MOV \REG, #\LITERAL&0xffff
 116              		MOVT \REG, #\LITERAL>>16
 117              		.endm
 118              	
 119              	 	.macro	_DOLIT  value /*long literals */
 120              		BL	DOLIT
 121              		.word \value 
 122              		.endm
 123              	
 124              	  .macro _FUNC label 
 125              	  .p2align 2 
 126              	  .type \label, %function  
 127              	\label:
 128              	  .endm 
 129              	
 130              	
 131              	/********************************
 132              	    dictionary structure
 133              	------------------------------
 134              	 format:
 135              	   link:    
 136              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 137              	   cmd_name: 31 characters max 
 138              	   cmd_index: 2 bytes 
 139              	**********************************/
 140              		.macro _dict_entry len,name,cmd_idx 
 141              		.p2align 2 
 142              	  .word LINK 
 143              	  .word \cmd_idx 
 144              		.equ LINK,.
 145              		.byte \len 	
 146              		.ascii "\name"
 147              		.p2align 2 
 148              		.endm 
 149              	
 150              		.equ link, 0
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word    _mstack          /* main return stack address */
 160 0004 00000000 	  .word    reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word    default_handler  /*  -14 NMI */
 163 000c 00000000 	  .word    default_handler  /*  -13 HardFault */
 164 0010 00000000 	  .word    default_handler  /*  -12 Memory Management */
 165 0014 00000000 	  .word    default_handler  /* -11 Bus fault */
 166 0018 00000000 	  .word    default_handler  /* -10 Usage fault */
 167 001c 00000000 	  .word    0 /* -9 */
 168 0020 00000000 	  .word    0 /* -8 */ 
 169 0024 00000000 	  .word    0 /* -7 */
 170 0028 00000000 	  .word    0	/* -6 */
ARM GAS  stm32-tbi.s 			page 13


 171 002c 00000000 	  .word    default_handler  /* -5 SWI instruction */
 172 0030 00000000 	  .word    default_handler  /* -4 Debug monitor */
 173 0034 00000000 	  .word    0 /* -3 */
 174 0038 00000000 	  .word    default_handler  /* -2 PendSV */
 175 003c 00000000 	  .word    systick_handler  /* -1 Systick */
 176              	 irq0:  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
ARM GAS  stm32-tbi.s 			page 14


 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	isr_end:
 239              	  .size  isr_vectors, .-isr_vectors
 240              	upp:
 241              	
 242              	/*************************************
 243              	    EXCEPTIONS & INTERRUPTS HANDLERS 
 244              	*************************************/
 245              	
 246              	/*****************************************************
 247              	  default isr handler called on unexpected interrupt
 248              	*****************************************************/
 249              	   .section  .text , "ax", %progbits 
 250              	   
 251              	  .type default_handler, %function
 252              	  .p2align 2 
 253              	  .global default_handler
 254              	default_handler:
 255 0000 0548     		ldr r0,exception_msg 
 256 0002 00B500F0 		_CALL uart_puts 
 256      4EF95DF8 
 256      04EB
 257 000c 4FF40040 	  mov r0,#0x8000
 258 0010 0138     	1: subs r0,#1 
 259 0012 FDD1     	  bne 1b 
 260 0014 35E0     		b reset_mcu    
 261 0016 00BF     	  .p2align 2 
 262              	exception_msg:
 263 0018 1C000000 		.word .+4 
 264 001c 12       		.byte 18
 265 001d 0A657865 		.ascii "\nexeption reboot!\n"
 265      7074696F 
 265      6E207265 
 265      626F6F74 
 265      210A
 266              	
 267              	/*********************************
 268              		system milliseconds counter
 269              	*********************************/	
 270 002f 00       	  .p2align 2 
 271              	  .type systick_handler, %function
 272              	  .global systick_handler
 273              	systick_handler:
 274 0030 186A     	  ldr r0,[r3,#TICKS]  
 275 0032 00F10100 	  add r0,#1
 276 0036 1862     	  str r0,[r3,#TICKS]
 277 0038 586A     	  ldr r0,[r3,#TIMER]
 278 003a 10B1     	  cbz r0, systick_exit
ARM GAS  stm32-tbi.s 			page 15


 279 003c A0F10100 	  sub r0,#1
 280 0040 5862     	  str r0,[r3,#TIMER]
 281              	systick_exit:
 282 0042 7047     	  _RET 
 283              	
 284              	
 285              	/**************************
 286              		UART RX handler
 287              	**************************/
 288              		.p2align 2
 289              		.type uart_rx_handler, %function
 290              	  .global uart_rx_handler 
 291              	uart_rx_handler:
 292 0044 4FF46050 		_MOV32 r0,UART 
 292      C4F20100 
 293 004c 0168     		ldr r1,[r0,#USART_SR]
 294 004e 8288     		ldrh r2,[r0,#USART_DR]
 295 0050 11F0200F 		tst r1,#(1<<5) // RXNE 
 296 0054 0AD0     		beq 2f // no char received 
 297 0056 032A     		cmp r2,#3
 298 0058 09D0     		beq user_reboot // received CTRL-C then reboot MCU 
 299 005a 03F15400 		add r0,r3,#RX_QUEUE
 300 005e 196D     	  ldr r1,[r3,#RX_TAIL]
 301 0060 4254     		strb r2,[r0,r1]
 302 0062 01F10101 		add r1,#1 
 303 0066 01F00F01 		and r1,#(RX_QUEUE_SIZE-1)
 304 006a 1965     		str r1,[r3,#RX_TAIL]
 305              	2:	
 306 006c 7047     		_RET 
 307              	
 308              	user_reboot:
 309 006e 0A48     		ldr r0,user_reboot_msg
 310 0070 00B500F0 		_CALL uart_puts
 310      17F95DF8 
 310      04EB
 311              	// delay 
 312 007a 4FF40040 	  mov r0,#0x8000
 313 007e 0138     	1: subs r0,#1  
 314 0080 FDD1     	   bne 1b 
 315              	reset_mcu: 
 316 0082 0448     		ldr r0,scb_adr 
 317 0084 C168     		ldr r1,[r0,#SCB_AIRCR]
 318 0086 41F00401 		orr r1,#(1<<2)
 319 008a C0F2FA51 		movt r1,#SCB_VECTKEY
 320 008e C160     		str r1,[r0,#SCB_AIRCR]
 321 0090 FEE7     		b . 
 322 0092 00BF     		.p2align 2 
 323              	scb_adr:
 324 0094 00ED00E0 		.word SCB_BASE_ADR 
 325              	user_reboot_msg:
 326 0098 9C000000 		.word .+4
 327 009c 0E       		.byte  14 
 328 009d 0A757365 		.ascii "\nuser reboot!\n"
 328      72207265 
 328      626F6F74 
 328      210A
 329 00ab 00       		.p2align 2 
ARM GAS  stm32-tbi.s 			page 16


 330              	
 331              	/**************************************
 332              	  reset_handler execute at MCU reset
 333              	***************************************/
 334              	  .p2align 2
 335              	  .type  reset_handler, %function 
 336              	  .global reset_handler 
 337              	reset_handler:   
 338 00ac 4FF4A040 	  _MOV32 r0,RAM_END 
 338      C2F20000 
 339 00b4 8546     	  mov sp,r0 
 340 00b6 00F05FF8 	  bl remap  
 341 00ba 00F075F8 		bl	init_devices	 	/* RCC, GPIOs */
 342 00be 00F0C3F8 		bl  uart_init
 343 00c2 00F04BF9 		bl  cold_init  /* initialize BASIC SYSTEM */ 
 344 00c6 00F011F8 	  bl  prt_version 
 345 00ca 00F001F8 	  bl  test 
 346 00ce FEE7     	  b .  
 347              	
 348              	    _FUNC test
 349 00d0 0348     	    ldr r0, str1 
 350 00d2 B049     	    ldr r1,=kword_dict  
 351 00d4 00B500F0 	    _CALL search_dict 
 351      25F95DF8 
 351      04EB
 352 00de 7047     	    _RET 
 353              	  str1:
 354 00e0 E4000000 	    .word .+4 
 355 00e4 05       	    .byte 5
 356 00e5 48454C4C 	    .ascii "HELLO" 
 356      4F
 357 00ea 00BF     	    .p2align 2 
 358              	
 359              	    _FUNC prt_version 
 360 00ec DFF86400 	    ldr r0,version_msg 
 361 00f0 00B500F0 	    _CALL uart_puts 
 361      D7F85DF8 
 361      04EB
 362 00fa 9FF87B00 	    ldrb r0,version 
 363 00fe 4FEA1010 	    lsr r0,#4 
 364 0102 00F13000 	    add r0,#'0' 
 365 0106 3A28     	    cmp r0,#'9'+1 
 366 0108 01D4     	    bmi 1f 
 367 010a 00F10700 	    add r0,#7 
 368              	  1:
 369 010e 00B500F0 	    _CALL uart_putc 
 369      BCF85DF8 
 369      04EB
 370 0118 4FF02E00 	    mov r0,#'. 
 371 011c 00B500F0 	    _CALL uart_putc 
 371      B5F85DF8 
 371      04EB
 372 0126 9FF84F00 	    ldrb r0,version 
 373 012a 00F00F00 	    and r0,#15 
 374 012e 00F13000 	    add r0,'0' 
 375 0132 3A28     	    cmp r0,#'9'+1 
 376 0134 01D4     	    bmi 1f 
ARM GAS  stm32-tbi.s 			page 17


 377 0136 00F10700 	    add r0,#7
 378              	  1: 
 379 013a 00B500F0 	    _CALL uart_putc 
 379      A6F85DF8 
 379      04EB
 380 0144 4FF00D00 	    mov r0,#CR 
 381 0148 00B500F0 	    _CALL uart_putc 
 381      9FF85DF8 
 381      04EB
 382 0152 7047     	    _RET  
 383              	version_msg:
 384 0154 58010000 	    .word .+4 
 385 0158 1E       	    .byte 30
 386 0159 626C7565 	    .ascii "blue pill tiny BASIC, version "
 386      2070696C 
 386      6C207469 
 386      6E792042 
 386      41534943 
 387              	version:
 388 0177 10       	    .byte 0x10 
 389              	    .p2align 2 
 390              	
 391              	// tranfert isr_vector to RAM at 0x20000000
 392              	    _FUNC remap 
 393 0178 4FF00000 		_MOV32 r0,RAM_ADR
 393      C2F20000 
 394 0180 81EA0101 		eor r1,r1
 395 0184 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 396 0188 51F8043B 	1:	ldr r3,[r1],#4
 397 018c 40F8043B 		str r3,[r0],#4
 398 0190 043A     		subs r2,#4
 399 0192 F9D1     		bne 1b
 400              	// set new vector table address
 401 0194 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 401      CEF20000 
 402 019c 4FF00001 		_MOV32 r1,RAM_ADR 
 402      C2F20001 
 403 01a4 8160     		str r1,[r0,#SCB_VTOR]
 404 01a6 7047     	  bx lr 
 405              	
 406              	// initialize hardware devices 
 407              	  _FUNC init_devices
 408              	/* init clock to HSE 72 Mhz */
 409              	/* set 2 wait states in FLASH_ACR_LATENCY */
 410 01a8 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 410      C4F20200 
 411 01b0 4FF01202 	  mov r2,#0x12
 412 01b4 0260     	  str r2,[r0,#FLASH_ACR]
 413              	/* configure clock for HSE, 8 Mhz crystal */
 414              	/* enable HSE in RCC_CR */
 415 01b6 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 415      C4F20200 
 416 01be 0168     	  ldr r1,[r0,#RCC_CR]
 417 01c0 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 418 01c4 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 419              	/* wait HSERDY loop */
 420              	wait_hserdy:
ARM GAS  stm32-tbi.s 			page 18


 421 01c6 0168     	  ldr r1,[r0,#RCC_CR]
 422 01c8 11F4003F 	  tst r1,#(1<<17)
 423 01cc FBD0     	  beq wait_hserdy
 424              	
 425              	/************************************************* 
 426              	   configure PLL mul factor and source 
 427              	   SYSCLOCK,72 Mhz
 428              	   select HSE as  PLL source clock
 429              	   multiply frequency by 9 
 430              	   APB1 clock is limited to 36 Mhz so divide by 2 
 431              	****************************************************/
 432 01ce 4FF48061 	  mov r1,#(4<<8) /* PLLMUL,7|PLLSCR,HSE|PPRE1,HCLK/2| */
 433 01d2 C0F21D01 	  movt r1,#(7<<2)|1
 434 01d6 4160     	  str r1,[r0,#RCC_CFGR]
 435              	  /* enable PLL */
 436 01d8 0168     	  ldr r1,[r0,#RCC_CR]
 437 01da 41F08071 	  orr r1, #1<<24 
 438 01de 0160     	  str r1,[r0,#RCC_CR]
 439              	/* wait for PLLRDY */
 440              	wait_pllrdy:
 441 01e0 0168     	  ldr r1,[r0,#RCC_CR]
 442 01e2 11F0007F 	  tst r1,#(1<<25)
 443 01e6 FBD0     	  beq wait_pllrdy 
 444              	/* select PLL as sysclock */
 445 01e8 4168     	  ldr r1,[r0,#RCC_CFGR]
 446 01ea 4FF6FC72 	  _MOV32 r2,0xfffffffc
 446      CFF6FF72 
 447 01f2 01EA0201 	  and r1,r1,r2 
 448 01f6 4FF00202 	  mov r2,#2
 449 01fa 41EA0201 	  orr r1,r1,r2
 450 01fe 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 451              	/* wait for SWS,,2 */
 452              	wait_sws:
 453 0200 4168     	  ldr r1,[r0,#RCC_CFGR]
 454 0202 11F0080F 	  tst r1,#(2<<2)
 455 0206 FBD0     	  beq wait_sws
 456              	/* now sysclock is 72 Mhz */
 457              	
 458              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 459 0208 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 459      C4F20200 
 460 0210 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 461 0214 8161     	  str	r1, [r0, #RCC_APB2ENR]
 462              	
 463              	/* configure GPIOC:13 as output for user LED */
 464 0216 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 464      C4F20100 
 465 021e 4168     	  ldr r1,[r0,#GPIO_CRH]
 466 0220 6FF47002 	  mvn r2,#(15<<20)
 467 0224 01EA0201 	  and r1,r1,r2
 468 0228 4FF4C002 	  mov r2,#(6<<20)
 469 022c 41EA0201 	  orr r1,r1,r2
 470 0230 4160     	  str r1,[r0,#GPIO_CRH]
 471              	
 472              	/* configure systicks for 1msec ticks */
 473 0232 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 473      CEF20000 
ARM GAS  stm32-tbi.s 			page 19


 474 023a 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 475 023e 4160     	  str r1,[r0,#STK_LOAD]
 476 0240 4FF00301 	  mov r1,#3
 477 0244 0160     	  str r1,[r0,STK_CTL]
 478 0246 7047     	  _RET  
 479              	
 480              	/*******************************
 481              	  initialize UART peripheral 
 482              	********************************/
 483              		_FUNC uart_init
 484              	/* set GPIOA PIN 9, uart TX  */
 485 0248 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 485      C4F20100 
 486 0250 4168     	  ldr r1,[r0,#GPIO_CRH]
 487 0252 6FF0F002 	  mvn r2,#(15<<4)
 488 0256 01EA0201 	  and r1,r1,r2
 489 025a 4FF0A002 	  mov r2,#(0xA<<4)
 490 025e 41EA0201 	  orr r1,r1,r2 
 491 0262 4160     	  str r1,[r0,#GPIO_CRH]
 492 0264 4FF46050 	  _MOV32 r0,UART 
 492      C4F20100 
 493              	/* BAUD rate */
 494 026c 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200,39,0625, quotient,39, reste,0,0625*16,1 */
 495 0270 8160     	  str r1,[r0,#USART_BRR]
 496 0272 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 497 0276 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 498              	/* enable interrupt in NVIC */
 499 0278 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 499      CEF20000 
 500 0280 4168     	  ldr r1,[r0,#NVIC_ISER1]
 501 0282 41F02001 	  orr r1,#32   
 502 0286 4160     	  str r1,[r0,#NVIC_ISER1]
 503 0288 7047     	  bx lr 
 504              	
 505              	/****************************
 506              	    UART_PUTC
 507              	  send character to uart
 508              	  input: 
 509              	    R0 character to send 
 510              	  use:
 511              	    R8 status  
 512              	    R9 UART address
 513              	*****************************/
 514 028a 00BF     	  _FUNC uart_putc
 515 028c 4FF46059 	  _MOV32 R9,UART
 515      C4F20109 
 516              	1: 
 517 0294 D9F80080 	  ldr r8,[r9,#USART_SR]
 518 0298 18F08008 	  ands r8,#0x80
 519 029c FAD0     	  beq 1b // UART_DR full,wait  
 520 029e 89F80400 	  strb r0,[r9,#USART_DR]
 521 02a2 7047     	  _RET  
 522              	
 523              	
 524              	/*******************************
 525              	    UART_PUTS 
 526              	 send counted string to uart 
ARM GAS  stm32-tbi.s 			page 20


 527              	 input: r0 *string to send 
 528              	  use:  
 529              	    r0 char to send 
 530              	    r10 counter
 531              	    r11 *string  
 532              	******************************/
 533              		_FUNC uart_puts
 534 02a4 8346     	  mov r11,r0 
 535 02a6 1BF801AB 		ldrb r10,[r11],#1 // string length
 536 02aa 1AEA0A0A 		ands r10,r10
 537 02ae 09D0     		beq 9f // len==0 
 538              	1:
 539 02b0 5BF8010B 	  ldr r0,[r11],#1 
 540 02b4 00B5FFF7 	  _CALL uart_putc   
 540      E9FF5DF8 
 540      04EB
 541 02be BAF1010A 	  subs r10,r10,#1 
 542 02c2 F5D1     	  bne 1b 
 543              	9: 
 544 02c4 7047     	  _RET  
 545              	
 546              	/**********************************
 547              	  UART_QKEY
 548              	  check if character available in 
 549              	  rx1_qeue
 550              	  input:
 551              	    none
 552              	  output:
 553              	    r0 flag = RX_HEAD^REX_TAIL 
 554              	  use:
 555              	    r8  RX_HEAD  
 556              	    r9  RX_TAIL   
 557              	***********************************/
 558 02c6 00BF     	  _FUNC uart_qkey
 559 02c8 D3F84C80 	  ldr r8,[r3,#RX_HEAD]
 560 02cc D3F85090 	  ldr r9,[r3,#RX_TAIL]
 561 02d0 88EA0900 	  eor r0,r8,r9 
 562 02d4 7047     	  _RET 
 563              	
 564              	/**********************************
 565              	  UART_GETC 
 566              	  wait a character from uart 
 567              	  input:
 568              	    none
 569              	  output:
 570              	    r0  character 
 571              	  use:
 572              	    r8  rx_queue 
 573              	    r9  rx_head  
 574              	**********************************/
 575 02d6 00BF     	  _FUNC uart_getc
 576              	1:
 577 02d8 00B5FFF7 	  _CALL uart_qkey 
 577      F5FF5DF8 
 577      04EB
 578 02e2 0043     	  orrs r0,r0
 579 02e4 F8D0     	  beq 1b  
ARM GAS  stm32-tbi.s 			page 21


 580 02e6 03F15408 	  add r8,r3,#RX_QUEUE
 581 02ea D3F84C90 	  ldr r9, [r3,#RX_HEAD]
 582 02ee 18F80900 	  ldrb r0,[r8,r9]
 583 02f2 09F10109 	  add r9,#1
 584 02f6 09F00F09 	  and r9,#(RX_QUEUE_SIZE-1)
 585 02fa C3F84C90 	  str r9,[r3,#RX_HEAD]
 586 02fe 7047     	  _RET  
 587              	
 588              	/*********************************
 589              	  cp_cstr 
 590              	  compare 2 counted strings 
 591              	  input:
 592              	    r0  *str1 
 593              	    r1  *str2
 594              	    r8  length 
 595              	  output:
 596              	    r0  <0 str1<str2 
 597              	        0  str1==str2 
 598              	        >0  str1>str2  
 599              	  use:
 600              	    r9  *str1
 601              	    r10 temp
 602              	    r11 temp    
 603              	*********************************/
 604              	  _FUNC cp_cstr
 605 0300 8146     	  mov r9, r0 
 606 0302 19F801AB 	  ldrb r10,[r9],#1 // length 
 607 0306 B8EB0A00 	  subs r0,r8,r10 
 608 030a 09D1     	  bne 2f 
 609              	1:
 610 030c 19F801AB 	  ldrb r10,[r9],#1
 611 0310 11F801BB 	  ldrb r11,[r1],#1 
 612 0314 BAEB0B00 	  subs r0,r10,r11  
 613 0318 02D1     	  bne 2f // not same length       
 614 031a B8F10108 	  subs r8,#1 
 615 031e F5D1     	  bne 1b 
 616              	2: 
 617 0320 7047     	  _RET 
 618              	
 619              	//---------------------------------
 620              	// dictionary search 
 621              	// input:
 622              	//	 r0   target name
 623              	//   r1		dictionary first link address  
 624              	// output:
 625              	//  r0 		TK_CMD|TK_IFUNC|TK_CONST|TK_NONE 
 626              	//  r1		cmd_index if r0!=TK_NONE  
 627              	// use:
 628              	//  r8   length dictionary name 
 629              	//---------------------------------
 630 0322 00BF     	  _FUNC search_dict
 631 0324 03B4     	  push {r0,r1}
 632              	1:
 633 0326 11F8010B 	  ldrb r0,[r1],#1 
 634 032a 0043     	  orrs r0,r0
 635 032c 13D0     	  beq 9f // end of dictinary 
 636 032e 00F01F08 	  and r8,r0,#0x1f 
ARM GAS  stm32-tbi.s 			page 22


 637 0332 0098     	  ldr r0,[sp]  
 638 0334 00B5FFF7 	  _CALL cp_cstr 
 638      E3FF5DF8 
 638      04EB
 639 033e 04D0     	  beq 2f 
 640 0340 0199     	  ldr r1,[sp,#4]
 641 0342 51F8081C 	  ldr r1,[r1,#-8]
 642 0346 0191     	  str r1,[sp,#4]
 643 0348 EDE7     	  b 1b   
 644              	2: // found
 645 034a 0199     	  ldr r1,[sp,#4]
 646 034c 0878     	  ldrb r0,[r1]
 647 034e 4FEA5010 	  lsr r0,#5    // token type 
 648 0352 51F8041C 	  ldr r1,[r1,#-4]  // command index 
 649 0356 02B0     	9: add sp,#8  // drop pushed r0,r1 
 650 0358 7047     	   _RET 
 651              	
 652 035a 00BF     	  _FUNC cold_init
 653              	//copy system variables to ram 
 654 035c DFF82680 	  ldr r8,src_addr 
 655 0360 DFF82690 	  ldr r9,dest_addr 
 656 0364 4FF0D00A 	  mov r10,#ulast-uzero 
 657              	1:
 658 0368 58F804BB 	  ldr r11,[r8],#4 
 659 036c 49F804BB 	  str r11,[r9],#4 
 660 0370 BAF1040A 	  subs r10,#4 
 661 0374 F8D1     	  bne 1b
 662              	// set UPP 
 663 0376 4FF00003 	  _MOV32 r3,RAM_ADR
 663      C2F20003 
 664 037e DFF80E80 	  ldr r8,isr_table_size 
 665 0382 4344     	  add r3,r3,r8
 666              	
 667 0384 7047     	  _RET 
 668              	src_addr:
 669 0386 00000000 	  .word uzero
 670              	dest_addr:
 671 038a 30010020 	  .word RAM_ADR+isr_end-isr_vectors  
 672              	isr_table_size:
 673 038e 30010000 	  .word isr_end-isr_vectors 
 674              	
 675              	
 676 0392 0000     	  .section .rodata 
 677              	
 678              	// system variables initial value 
 679              	uzero:
 680 0000 00000000 	  .word 0 // IN
 681 0004 00000000 	  .word 0 // IN_SAVED
 682 0008 00000000 	  .word 0 // COUNT
 683 000c 00000000 	  .word 0 // BASICPTR
 684 0010 00000000 	  .word 0 // DATAPTR
 685 0014 00000000 	  .word 0 // DATA
 686 0018 00000000 	  .word 0 // DATALEN
 687 001c 0A000000 	  .word 10 // BASE
 688 0020 00000000 	  .word 0 // TICKS
 689 0024 00000000 	  .word 0 // TIMER
 690 0028 AA5555AA 	  .word 0xaa5555aa // SEED
ARM GAS  stm32-tbi.s 			page 23


 691 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 692 0030 00000000 	  .word 0 // FFREE
 693 0034 00020020 	  .word RAM_ADR+(isr_end-isr_vectors)+(ulast-uzero) // TXTBGN
 694 0038 00020020 	  .word RAM_ADR+(isr_end-isr_vectors)+(ulast-uzero) // TXTEND
 695 003c 00000000 	  .word 0 //LOOP_DEPTH
 696 0040 00000000 	  .word 0 // ARRAY_SIZE
 697 0044 00000000 	  .word 0 // FLAGS
 698 0048 04000000 	  .word 4 // TAB_WIDTH
 699 004c 00000000 	  .word 0 // RX_HEAD
 700 0050 00000000 	  .word 0 // RX_TAIL
 701 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 701      00000000 
 701      00000000 
 701      00000000 
 702 0064 00000000 	  .space VARS_SIZE,0 // VARS
 702      00000000 
 702      00000000 
 702      00000000 
 702      00000000 
 703 00cc 00000000 	  .space 4, 0 // filling 
 704              	ulast:
 705              	
 706              	  .section .rodata.dictionary 
 707              	
 708              	// keep alphabetic order for BASIC names from Z-A
 709              	// this sort order is for for WORDS cmd output. 	
 710              	kword_end:
 711 0000 00000000 	  .word 0,0
 711      00000000 
 712              	  .equ LINK, .
 713 0008 00000000 	  .word 0
 714              	  .p2align 2  
 715 000c 08000000 	  _dict_entry 5+F_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 715      64000000 
 715      25585452 
 715      4D540000 
 716 001c 14000000 	  _dict_entry 4+F_CMD,XRCV,XRCV_IDX // xmodem receive
 716      65000000 
 716      24585243 
 716      56000000 
 717 002c 24000000 	  _dict_entry 3+F_IFUNC,XOR,XOR_IDX //bit_xor
 717      63000000 
 717      43584F52 
 718 0038 34000000 	  _dict_entry 5+F_CMD,WRITE,WRITE_IDX //write  
 718      62000000 
 718      25575249 
 718      54450000 
 719 0048 40000000 	  _dict_entry 5+F_CMD,WORDS,WORDS_IDX //words 
 719      61000000 
 719      25574F52 
 719      44530000 
 720 0058 50000000 	  _dict_entry 4+F_CMD,WAIT,WAIT_IDX //wait 
 720      60000000 
 720      24574149 
 720      54000000 
 721 0068 60000000 	  _dict_entry 3+F_IFUNC,USR,USR_IDX //usr
 721      5F000000 
ARM GAS  stm32-tbi.s 			page 24


 721      43555352 
 722 0074 70000000 	  _dict_entry 5+F_CMD,UNTIL,UNTIL_IDX //until 
 722      5E000000 
 722      25554E54 
 722      494C0000 
 723 0084 7C000000 	  _dict_entry 6+F_IFUNC,UFLASH,UFLASH_IDX //uflash 
 723      5D000000 
 723      4655464C 
 723      41534800 
 724 0094 8C000000 	  _dict_entry 6+F_IFUNC,UBOUND,UBOUND_IDX //ubound
 724      5C000000 
 724      4655424F 
 724      554E4400 
 725 00a4 9C000000 	  _dict_entry 4+F_CMD,TONE,TONE_IDX //tone  
 725      5B000000 
 725      24544F4E 
 725      45000000 
 726 00b4 AC000000 	  _dict_entry 2+F_CMD,TO,TO_IDX //to
 726      5A000000 
 726      22544F00 
 727 00c0 BC000000 	  _dict_entry 5+F_CMD,TIMER,TIMER_IDX //set_timer
 727      58000000 
 727      2554494D 
 727      45520000 
 728 00d0 C8000000 	  _dict_entry 7+F_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 728      59000000 
 728      4754494D 
 728      454F5554 
 729 00e0 D8000000 	  _dict_entry 5+F_IFUNC,TICKS,TICKS_IDX //get_ticks
 729      57000000 
 729      45544943 
 729      4B530000 
 730 00f0 E8000000 	  _dict_entry 4+F_CMD,STOP,STOP_IDX //stop 
 730      56000000 
 730      2453544F 
 730      50000000 
 731 0100 F8000000 	  _dict_entry 4+F_CMD,STEP,STEP_IDX //step 
 731      55000000 
 731      24535445 
 731      50000000 
 732 0110 08010000 	  _dict_entry 5+F_CMD,SPIWR,SPIWR_IDX //spi_write
 732      54000000 
 732      25535049 
 732      57520000 
 733 0120 18010000 	  _dict_entry 6+F_CMD,SPISEL,SPISEL_IDX //spi_select
 733      53000000 
 733      26535049 
 733      53454C00 
 734 0130 28010000 	  _dict_entry 5+F_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 734      51000000 
 734      45535049 
 734      52440000 
 735 0140 38010000 	  _dict_entry 5+F_CMD,SPIEN,SPIEN_IDX //spi_enable 
 735      52000000 
 735      25535049 
 735      454E0000 
 736 0150 48010000 	  _dict_entry 5+F_CMD,SLEEP,SLEEP_IDX //sleep 
ARM GAS  stm32-tbi.s 			page 25


 736      50000000 
 736      25534C45 
 736      45500000 
 737 0160 58010000 	  _dict_entry 4+F_IFUNC,SIZE,SIZE_IDX //size
 737      4F000000 
 737      4453495A 
 737      45000000 
 738 0170 68010000 	  _dict_entry 4+F_CMD,SHOW,SHOW_IDX //show 
 738      4E000000 
 738      2453484F 
 738      57000000 
 739 0180 78010000 	  _dict_entry 4+F_CMD,SAVE,SAVE_IDX //save
 739      4D000000 
 739      24534156 
 739      45000000 
 740 0190 88010000 	  _dict_entry 3+F_CMD,RUN,RUN_IDX //run
 740      4C000000 
 740      2352554E 
 741 019c 98010000 	  _dict_entry 6+F_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 741      4B000000 
 741      46525348 
 741      49465400 
 742 01ac A4010000 	  _dict_entry 3+F_IFUNC,RND,RND_IDX //random 
 742      4A000000 
 742      43524E44 
 743 01b8 B4010000 	  _dict_entry 6+F_CMD,RETURN,RET_IDX //return 
 743      49000000 
 743      26524554 
 743      55524E00 
 744 01c8 C0010000 	  _dict_entry 7+F_CMD,RESTORE,REST_IDX //restore 
 744      48000000 
 744      27524553 
 744      544F5245 
 745 01d8 D0010000 	  _dict_entry 6+F_CMD,REMARK,REM_IDX //remark 
 745      47000000 
 745      2652454D 
 745      41524B00 
 746 01e8 E0010000 	  _dict_entry 6+F_CMD,REBOOT,RBT_IDX //cold_start
 746      46000000 
 746      26524542 
 746      4F4F5400 
 747 01f8 F0010000 	  _dict_entry 4+F_IFUNC,READ,READ_IDX //read  
 747      45000000 
 747      44524541 
 747      44000000 
 748 0208 00020000 	  _dict_entry 4+F_IFUNC,QKEY,QKEY_IDX //qkey  
 748      44000000 
 748      44514B45 
 748      59000000 
 749 0218 10020000 	  _dict_entry 4+F_IFUNC,PRTI,PRTI_IDX //const_porti 
 749      43000000 
 749      44505254 
 749      49000000 
 750 0228 20020000 	  _dict_entry 4+F_IFUNC,PRTH,PRTH_IDX //const_porth 
 750      42000000 
 750      44505254 
 750      48000000 
ARM GAS  stm32-tbi.s 			page 26


 751 0238 30020000 	  _dict_entry 4+F_IFUNC,PRTG,PRTG_IDX //const_portg 
 751      41000000 
 751      44505254 
 751      47000000 
 752 0248 40020000 	  _dict_entry 4+F_IFUNC,PRTF,PRTF_IDX //const_portf
 752      40000000 
 752      44505254 
 752      46000000 
 753 0258 50020000 	  _dict_entry 4+F_IFUNC,PRTE,PRTE_IDX //const_porte
 753      3F000000 
 753      44505254 
 753      45000000 
 754 0268 60020000 	  _dict_entry 4+F_IFUNC,PRTD,PRTD_IDX //const_portd
 754      3E000000 
 754      44505254 
 754      44000000 
 755 0278 70020000 	  _dict_entry 4+F_IFUNC,PRTC,PRTC_IDX //const_portc
 755      3D000000 
 755      44505254 
 755      43000000 
 756 0288 80020000 	  _dict_entry 4+F_IFUNC,PRTB,PRTB_IDX //const_portb
 756      3C000000 
 756      44505254 
 756      42000000 
 757 0298 90020000 	  _dict_entry 4+F_IFUNC,PRTA,PRTA_IDX //const_porta 
 757      3B000000 
 757      44505254 
 757      41000000 
 758 02a8 A0020000 	  _dict_entry 5+F_CMD,PRINT,PRT_IDX //print 
 758      3A000000 
 758      25505249 
 758      4E540000 
 759 02b8 B0020000 	  _dict_entry 4+F_IFUNC,POUT,POUT_IDX //const_output
 759      39000000 
 759      44504F55 
 759      54000000 
 760 02c8 C0020000 	  _dict_entry 4+F_CMD,POKE,POKE_IDX //poke 
 760      38000000 
 760      24504F4B 
 760      45000000 
 761 02d8 D0020000 	  _dict_entry 5+F_CMD,PMODE,PMODE_IDX //pin_mode 
 761      35000000 
 761      25504D4F 
 761      44450000 
 762 02e8 E0020000 	  _dict_entry 4+F_IFUNC,PINP,PINP_IDX //const_input
 762      37000000 
 762      4450494E 
 762      50000000 
 763 02f8 F0020000 	  _dict_entry 4+F_IFUNC,PEEK,PEEK_IDX //peek 
 763      36000000 
 763      44504545 
 763      4B000000 
 764 0308 00030000 	  _dict_entry 5+F_CMD,PAUSE,PAUSE_IDX //pause 
 764      34000000 
 764      25504155 
 764      53450000 
 765 0318 10030000 	  _dict_entry 3+F_IFUNC,PAD,PAD_IDX //pad_ref 
ARM GAS  stm32-tbi.s 			page 27


 765      33000000 
 765      43504144 
 766 0324 20030000 	  _dict_entry 2+F_IFUNC,OR,OR_IDX //bit_or
 766      32000000 
 766      424F5200 
 767 0330 2C030000 	  _dict_entry 3+F_IFUNC,ODR,ODR_IDX //const_odr 
 767      31000000 
 767      434F4452 
 768 033c 38030000 	  _dict_entry 3+F_IFUNC,NOT,NOT_IDX //func_not 
 768      30000000 
 768      434E4F54 
 769 0348 44030000 	  _dict_entry 4+F_CMD,NEXT,NEXT_IDX //next 
 769      2E000000 
 769      244E4558 
 769      54000000 
 770 0358 50030000 	  _dict_entry 3+F_CMD,NEW,NEW_IDX //new
 770      2F000000 
 770      234E4557 
 771 0364 60030000 	  _dict_entry 6+F_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 771      2D000000 
 771      464D554C 
 771      44495600 
 772 0374 6C030000 	  _dict_entry 6+F_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 772      2C000000 
 772      464C5348 
 772      49465400 
 773 0384 7C030000 	  _dict_entry 3+F_IFUNC,LOG,LOG_IDX //log2 
 773      2B000000 
 773      434C4F47 
 774 0390 8C030000 	  _dict_entry 4+F_CMD,LOAD,LOAD_IDX //load 
 774      2A000000 
 774      244C4F41 
 774      44000000 
 775 03a0 98030000 	  _dict_entry 4+F_CMD,LIST,LIST_IDX //list
 775      29000000 
 775      244C4953 
 775      54000000 
 776 03b0 A8030000 	  _dict_entry 3+F_CMD,LET,LET_IDX //let 
 776      28000000 
 776      234C4554 
 777 03bc B8030000 	  _dict_entry 3+F_IFUNC,KEY,KEY_IDX //key 
 777      27000000 
 777      434B4559 
 778 03c8 C4030000 	  _dict_entry 7+F_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 778      26000000 
 778      27495744 
 778      47524546 
 779 03d8 D0030000 	  _dict_entry 6+F_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 779      25000000 
 779      26495744 
 779      47454E00 
 780 03e8 E0030000 	  _dict_entry 6+F_IFUNC,INVERT,INVERT_IDX //invert 
 780      24000000 
 780      46494E56 
 780      45525400 
 781 03f8 F0030000 	  _dict_entry 5+F_CMD,INPUT,INPUT_IDX //input_var  
 781      23000000 
ARM GAS  stm32-tbi.s 			page 28


 781      25494E50 
 781      55540000 
 782 0408 00040000 	  _dict_entry 2+F_CMD,IF,IF_IDX //if 
 782      22000000 
 782      22494600 
 783 0414 10040000 	  _dict_entry 3+F_IFUNC,IDR,IDR_IDX //const_idr 
 783      21000000 
 783      43494452 
 784 0420 1C040000 	  _dict_entry 3+F_CMD,HEX,HEX_IDX //hex_base
 784      20000000 
 784      23484558 
 785 042c 28040000 	  _dict_entry 4+F_IFUNC,GPIO,GPIO_IDX //gpio 
 785      1F000000 
 785      44475049 
 785      4F000000 
 786 043c 34040000 	  _dict_entry 4+F_CMD,GOTO,GOTO_IDX //goto 
 786      1E000000 
 786      24474F54 
 786      4F000000 
 787 044c 44040000 	  _dict_entry 5+F_CMD,GOSUB,GOSUB_IDX //gosub 
 787      1D000000 
 787      25474F53 
 787      55420000 
 788 045c 54040000 	  _dict_entry 6+F_CMD,FORGET,FORGET_IDX //forget 
 788      1C000000 
 788      26464F52 
 788      47455400 
 789 046c 64040000 	  _dict_entry 3+F_CMD,FOR,FOR_IDX //for 
 789      1B000000 
 789      23464F52 
 790 0478 74040000 	  _dict_entry 4+F_CMD,FCPU,FCPU_IDX //fcpu 
 790      1A000000 
 790      24464350 
 790      55000000 
 791 0488 80040000 	  _dict_entry 3+F_CMD,END,END_IDX //cmd_end  
 791      18000000 
 791      23454E44 
 792 0494 90040000 	  _dict_entry 6+F_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 792      19000000 
 792      46454550 
 792      524F4D00 
 793 04a4 9C040000 	  _dict_entry 6+F_CMD,DWRITE,DWRITE_IDX //digital_write
 793      17000000 
 793      26445752 
 793      49544500 
 794 04b4 AC040000 	  _dict_entry 5+F_IFUNC,DREAD,DREAD_IDX //digital_read
 794      16000000 
 794      45445245 
 794      41440000 
 795 04c4 BC040000 	  _dict_entry 2+F_CMD,DO,DO_IDX //do_loop
 795      15000000 
 795      22444F00 
 796 04d0 CC040000 	  _dict_entry 3+F_CMD,DIR,DIR_IDX //directory 
 796      14000000 
 796      23444952 
 797 04dc D8040000 	  _dict_entry 3+F_CMD,DEC,DEC_IDX //dec_base
 797      13000000 
ARM GAS  stm32-tbi.s 			page 29


 797      23444543 
 798 04e8 E4040000 	  _dict_entry 3+F_IFUNC,DDR,DDR_IDX //const_ddr 
 798      12000000 
 798      43444452 
 799 04f4 F0040000 	  _dict_entry 6+F_CMD,DATALN,DATALN_IDX //data_line  
 799      11000000 
 799      26444154 
 799      414C4E00 
 800 0504 FC040000 	  _dict_entry 4+F_CMD,DATA,DATA_IDX //data  
 800      10000000 
 800      24444154 
 800      41000000 
 801 0514 0C050000 	  _dict_entry 3+F_IFUNC,CRL,CRL_IDX //const_cr1 
 801      0F000000 
 801      4343524C 
 802 0520 1C050000 	  _dict_entry 3+F_IFUNC,CRH,CRH_IDX //const_cr2 
 802      0E000000 
 802      43435248 
 803 052c 28050000 	  _dict_entry 4+F_CFUNC,CHAR,CHAR_IDX //char
 803      0D000000 
 803      84434841 
 803      52000000 
 804 053c 34050000 	  _dict_entry 3+F_CMD,BYE,BYE_IDX //bye 
 804      0C000000 
 804      23425945 
 805 0548 44050000 	  _dict_entry 5+F_CMD,BTOGL,BTOGL_IDX //bit_toggle
 805      0B000000 
 805      2542544F 
 805      474C0000 
 806 0558 50050000 	  _dict_entry 5+F_IFUNC,BTEST,BTEST_IDX //bit_test 
 806      0A000000 
 806      45425445 
 806      53540000 
 807 0568 60050000 	  _dict_entry 4+F_CMD,BSET,BSET_IDX //bit_set 
 807      09000000 
 807      24425345 
 807      54000000 
 808 0578 70050000 	  _dict_entry 4+F_CMD,BRES,BRES_IDX //bit_reset
 808      08000000 
 808      24425245 
 808      53000000 
 809 0588 80050000 	  _dict_entry 3+F_IFUNC,BIT,BIT_IDX //bitmask
 809      07000000 
 809      43424954 
 810 0594 90050000 	  _dict_entry 3+F_CMD,AWU,AWU_IDX //awu 
 810      06000000 
 810      23415755 
 811 05a0 9C050000 	  _dict_entry 7+F_CMD,AUTORUN,AUTORUN_IDX //autorun
 811      05000000 
 811      27415554 
 811      4F52554E 
 812 05b0 A8050000 	  _dict_entry 3+F_IFUNC,ASC,ASC_IDX //ascii
 812      04000000 
 812      43415343 
 813 05bc B8050000 	  _dict_entry 3+F_IFUNC,AND,AND_IDX //bit_and
 813      03000000 
 813      43414E44 
ARM GAS  stm32-tbi.s 			page 30


 814 05c8 C4050000 	  _dict_entry 7+F_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 814      02000000 
 814      47414443 
 814      52454144 
 815 05d8 D0050000 	  _dict_entry 5+F_CMD,ADCON,ADCON_IDX //power_adc 
 815      01000000 
 815      25414443 
 815      4F4E0000 
 816              	first_link: 
 817 05e8 E0050000 	  .word LINK 
 818 05ec 00000000 	  .word ABS_IDX 
 819              	  .equ LINK,. 
 820              	kword_dict: // first name field 
 821 05f0 43       	  .byte 3+F_IFUNC
 822 05f1 414253   	  .ascii "ABS" 
 823              	  .p2align 2 
 824              	
 825              	//comands and fonctions address table 	
 826              	code_addr:
 827              	/*
 828              		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 829              		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 830              		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 831              		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 832              		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 833              		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 834              		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 835              		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 836              		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 837              		.word restore,return, random,rshift,run,save,show,size // 72..79
 838              		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 839              		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 840              		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 841              	*/ 
 842 05f4 00000000 		.word 0 
 843              	
 844              	
 845              	
 846              	/*************************************************
 847              	   extra FLASH memory not used by Tiny BASIC
 848              	   is used to save BASIC programs.
 849              	************************************************/
 850 05f8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 850      00000000 
 850      00000000 
 850      00000000 
 850      00000000 
 851              	  .section .fs
 852              	FILE_SYSTEM: // file system start here
 853              	
 854              	
ARM GAS  stm32-tbi.s 			page 31


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32-tbi.s 			page 32


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  stm32-tbi.s 			page 33


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:19     *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:22     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:23     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:24     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:25     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:31     *ABS*:0000000000000000 INP
ARM GAS  stm32-tbi.s 			page 34


      tbi_macros.inc:32     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:42     *ABS*:0000000000000080 TK_CMD
      tbi_macros.inc:43     *ABS*:0000000000000081 TK_IFUNC
      tbi_macros.inc:44     *ABS*:0000000000000082 TK_CFUNC
      tbi_macros.inc:45     *ABS*:0000000000000083 TK_CONST
      tbi_macros.inc:46     *ABS*:0000000000000084 TK_INTGR
      tbi_macros.inc:47     *ABS*:0000000000000085 TK_VAR
      tbi_macros.inc:48     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:49     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:50     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:51     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:52     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:53     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:54     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:55     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:56     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:57     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:58     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:59     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:60     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:61     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:69     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:70     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:71     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:72     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:73     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:74     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:76     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:77     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:78     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:79     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:81     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:86     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:87     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:88     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:89     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:90     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:91     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:92     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:93     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:94     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:95     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:96     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:97     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:98     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:99     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:100    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:101    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:106    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:108    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:114    *ABS*:0000000000000000 DEBUG
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
ARM GAS  stm32-tbi.s 			page 35


       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
ARM GAS  stm32-tbi.s 			page 36


       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         stm32-tbi.s:45     *ABS*:0000000040011000 LED_GPIO
         stm32-tbi.s:46     *ABS*:000000000000000d LED_PIN
         stm32-tbi.s:47     *ABS*:0000000040013800 UART
         stm32-tbi.s:49     *ABS*:0000000000000100 STACK_SIZE
         stm32-tbi.s:50     *ABS*:0000000020004fff STACK_EMPTY
         stm32-tbi.s:51     *ABS*:0000000000000050 TIB_SIZE
         stm32-tbi.s:52     *ABS*:0000000000000050 PAD_SIZE
         stm32-tbi.s:54     *ABS*:0000000000000000 FRUN
         stm32-tbi.s:55     *ABS*:0000000000000001 FTRAP
         stm32-tbi.s:56     *ABS*:0000000000000002 FLOOP
         stm32-tbi.s:57     *ABS*:0000000000000003 FSLEEP
         stm32-tbi.s:58     *ABS*:0000000000000004 FBREAK
         stm32-tbi.s:59     *ABS*:0000000000000005 FCOMP
         stm32-tbi.s:61     *ABS*:0000000000000006 FAUTORUN
         stm32-tbi.s:62     *ABS*:0000000008001c00 AUTORUN_NAME
         stm32-tbi.s:64     *ABS*:0000000000000006 FIRST_DATA_ITEM
         stm32-tbi.s:65     *ABS*:0000000000007fff MAX_LINENO
ARM GAS  stm32-tbi.s 			page 37


         stm32-tbi.s:67     *ABS*:0000000000000010 RX_QUEUE_SIZE
         stm32-tbi.s:73     *ABS*:0000000000000000 IN
         stm32-tbi.s:74     *ABS*:0000000000000004 IN_SAVED
         stm32-tbi.s:75     *ABS*:0000000000000008 COUNT
         stm32-tbi.s:76     *ABS*:000000000000000c BASICPTR
         stm32-tbi.s:77     *ABS*:0000000000000010 DATAPTR
         stm32-tbi.s:78     *ABS*:0000000000000014 DATA
         stm32-tbi.s:79     *ABS*:0000000000000018 DATALEN
         stm32-tbi.s:80     *ABS*:000000000000001c BASE
         stm32-tbi.s:81     *ABS*:0000000000000020 TICKS
         stm32-tbi.s:82     *ABS*:0000000000000024 TIMER
         stm32-tbi.s:83     *ABS*:0000000000000028 SEED
         stm32-tbi.s:84     *ABS*:000000000000002c FSPTR
         stm32-tbi.s:85     *ABS*:0000000000000030 FFREE
         stm32-tbi.s:86     *ABS*:0000000000000034 TXTBGN
         stm32-tbi.s:87     *ABS*:0000000000000038 TXTEND
         stm32-tbi.s:88     *ABS*:000000000000003c LOOP_DEPTH
         stm32-tbi.s:89     *ABS*:0000000000000040 ARRAY_SIZE
         stm32-tbi.s:90     *ABS*:0000000000000044 FLAGS
         stm32-tbi.s:92     *ABS*:000000000000004c RX_HEAD
         stm32-tbi.s:93     *ABS*:0000000000000050 RX_TAIL
         stm32-tbi.s:94     *ABS*:0000000000000054 RX_QUEUE
         stm32-tbi.s:95     *ABS*:0000000000000064 VARS
         stm32-tbi.s:96     *ABS*:0000000000000004 CELLL
         stm32-tbi.s:97     *ABS*:0000000000000068 VARS_SIZE
         stm32-tbi.s:98     *ABS*:00000000000000cc FREE_RAM
         stm32-tbi.s:150    *ABS*:0000000000000000 link
         stm32-tbi.s:158    .isr_vector:0000000000000000 isr_vectors
         stm32-tbi.s:337    .text:00000000000000ac reset_handler
         stm32-tbi.s:254    .text:0000000000000000 default_handler
         stm32-tbi.s:273    .text:0000000000000030 systick_handler
         stm32-tbi.s:176    .isr_vector:0000000000000040 irq0
         stm32-tbi.s:291    .text:0000000000000044 uart_rx_handler
         stm32-tbi.s:238    .isr_vector:0000000000000130 isr_end
         stm32-tbi.s:240    .isr_vector:0000000000000130 upp
         stm32-tbi.s:252    .text:0000000000000000 $t
         stm32-tbi.s:262    .text:0000000000000018 exception_msg
         stm32-tbi.s:533    .text:00000000000002a4 uart_puts
         stm32-tbi.s:315    .text:0000000000000082 reset_mcu
         stm32-tbi.s:263    .text:0000000000000018 $d
         stm32-tbi.s:281    .text:0000000000000042 systick_exit
         stm32-tbi.s:308    .text:000000000000006e user_reboot
         stm32-tbi.s:325    .text:0000000000000098 user_reboot_msg
         stm32-tbi.s:323    .text:0000000000000094 scb_adr
         stm32-tbi.s:324    .text:0000000000000094 $d
         stm32-tbi.s:392    .text:0000000000000178 remap
         stm32-tbi.s:407    .text:00000000000001a8 init_devices
         stm32-tbi.s:483    .text:0000000000000248 uart_init
         stm32-tbi.s:652    .text:000000000000035c cold_init
         stm32-tbi.s:359    .text:00000000000000ec prt_version
         stm32-tbi.s:348    .text:00000000000000d0 test
         stm32-tbi.s:353    .text:00000000000000e0 str1
         stm32-tbi.s:820    .rodata.dictionary:00000000000005f0 kword_dict
         stm32-tbi.s:630    .text:0000000000000324 search_dict
         stm32-tbi.s:354    .text:00000000000000e0 $d
         stm32-tbi.s:357    .text:00000000000000ea $t
         stm32-tbi.s:383    .text:0000000000000154 version_msg
ARM GAS  stm32-tbi.s 			page 38


         stm32-tbi.s:387    .text:0000000000000177 version
         stm32-tbi.s:514    .text:000000000000028c uart_putc
         stm32-tbi.s:384    .text:0000000000000154 $d
         stm32-tbi.s:389    .text:0000000000000178 $t
         stm32-tbi.s:420    .text:00000000000001c6 wait_hserdy
         stm32-tbi.s:440    .text:00000000000001e0 wait_pllrdy
         stm32-tbi.s:452    .text:0000000000000200 wait_sws
         stm32-tbi.s:558    .text:00000000000002c8 uart_qkey
         stm32-tbi.s:575    .text:00000000000002d8 uart_getc
         stm32-tbi.s:604    .text:0000000000000300 cp_cstr
         stm32-tbi.s:668    .text:0000000000000386 src_addr
         stm32-tbi.s:670    .text:000000000000038a dest_addr
         stm32-tbi.s:704    .rodata:00000000000000d0 ulast
         stm32-tbi.s:679    .rodata:0000000000000000 uzero
         stm32-tbi.s:672    .text:000000000000038e isr_table_size
         stm32-tbi.s:669    .text:0000000000000386 $d
         stm32-tbi.s:852    .fs:0000000000000000 FILE_SYSTEM
         stm32-tbi.s:701    .rodata:0000000000000054 $d
         stm32-tbi.s:710    .rodata.dictionary:0000000000000000 kword_end
         stm32-tbi.s:819    .rodata.dictionary:00000000000005f0 LINK
         stm32-tbi.s:714    .rodata.dictionary:000000000000000c $d
         stm32-tbi.s:816    .rodata.dictionary:00000000000005e8 first_link
         stm32-tbi.s:826    .rodata.dictionary:00000000000005f4 code_addr
         stm32-tbi.s:854    .text:0000000000000394 $d
         stm32-tbi.s:270    .text:000000000000002f $d
         stm32-tbi.s:270    .text:0000000000000030 $t
         stm32-tbi.s:329    .text:00000000000000ab $d
         stm32-tbi.s:329    .text:00000000000000ac $t

UNDEFINED SYMBOLS
_mstack
