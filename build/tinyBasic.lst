ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	
  19              	.syntax unified
  20              	  .cpu cortex-m3
  21              	  .fpu softvfp
  22              	  .thumb
  23              	
  24              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
ARM GAS  tinyBasic.s 			page 2


  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
ARM GAS  tinyBasic.s 			page 3


  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  25              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
ARM GAS  tinyBasic.s 			page 4


   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
ARM GAS  tinyBasic.s 			page 5


  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  26              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	// keyword types 
  30              	  .equ F_CMD,0x20     // command keyword
ARM GAS  tinyBasic.s 			page 6


  31              	  .equ F_IFUNC,0x40 // integer function keyword
  32              	  .equ F_CFUNC,0x80 // character function keyword
  33              	  .equ F_CONST,0xC0 // function keyword that return a constant
  34              	
  35              	//--------------------------------------
  36              	//   constantes related to Arduino 
  37              	//   API mapping 
  38              	//-------------------------------------
  39              	  .equ INP,0
  40              	  .equ OUTP,1 
  41              	
  42              	//--------------------------------------
  43              	//       token attribute
  44              	//--------------------------------------
  45              	// bits 4:5 identify token group 
  46              	// 0x0n -> miscelinous 
  47              	// 0x1n -> +|- operators 
  48              	// 0x2n -> *|/|% operators
  49              	// 0x3n -> relational operators 
  50              	  .equ TK_CMD,128      // BASIC command   
  51              	  .equ TK_IFUNC,129    // BASIC integer function
  52              	  .equ TK_CFUNC,130    // BASIC character function
  53              	  .equ TK_CONST,131    // BASIC constant 
  54              	  .equ TK_INTGR,132
  55              	  .equ TK_VAR,133
  56              	  .equ TK_NONE,0       // not a token 
  57              	  .equ TK_COLON,1      // command separator ':' 
  58              	  .equ TK_QSTR,2     // quoted string  
  59              	  .equ TK_CHAR,3       // ASCII character 
  60              	  .equ TK_ARRAY,6     // array variable '@' 
  61              	  .equ TK_LPAREN,7     // left parenthesis '('
  62              	  .equ TK_RPAREN,8     // right parenthesis ')'
  63              	  .equ TK_COMMA,9     // item separator ',' 
  64              	  .equ TK_SHARP,0xa     // print colon width '#' 
  65              	  .equ TK_PLUS,0x10    // addition operator '+'
  66              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  67              	  .equ TK_MULT,0x20    // multiplication operator '*'
  68              	  .equ TK_DIV,0x21     // division operator '/'
  69              	  .equ TK_MOD,0x22     // modulo operator '%'
  70              	
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  79              	  .equ TK_GE,0x33      // relation operator '>,'
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<,'
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
ARM GAS  tinyBasic.s 			page 7


  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	
 111              	//--------------------------------------
 112              	//   assembler flags 
 113              	//-------------------------------------
 114              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 115              	
 116              	.equ CELL_SIZE,4 
 117              	
 118              	
 119              	//-------------------------------
 120              	//  macros used to help debugging
 121              	//-------------------------------
 122              	  .equ DEBUG,0
 123              	
 124              	/***************************
 125              	  SYSTEM variables offset 
 126              	  from UPP  
 127              	***************************/ 
 128              	  .equ IN,0    // low byte of in.w 
 129              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
 130              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 131              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 132              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 133              	  .equ DATA,DATAPTR+4 // index to next data item 
 134              	  .equ DATALEN, DATA+4 // length of data line 
 135              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 136              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 137              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 138              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 139              	  .equ FSPTR,SEED+4 //  pointer used by file system
 140              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 141              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 142              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 143              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 144              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
ARM GAS  tinyBasic.s 			page 8


 145              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 146              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 147              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 148              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 149              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 150              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 151              	  .equ CELLL,4 // size of integer 
 152              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 153              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 154              	
 155              	/***********************************************
 156              	*       MACROS
 157              	***********************************************/
 158              		.macro _CALL fn /* low level routine call */ 
 159              	 	PUSH {LR}
 160              		BL \fn  
 161              	  POP {LR}
 162              		.endm
 163              		
 164              		.macro	_RET /* return from subroutine */
 165              		BX	LR
 166              		.endm
 167              	
 168              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 169              		MOV \REG, #\LITERAL&0xffff
 170              		MOVT \REG, #\LITERAL>>16
 171              		.endm
 172              	
 173              	 	.macro	_DOLIT  value /*long literals */
 174              		BL	DOLIT
 175              		.word \value 
 176              		.endm
 177              	
 178              	// function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	------------------------------
 195              	 format:
 196              	   link:    
 197              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 198              	   cmd_name: 31 characters max 
 199              	   cmd_index: 2 bytes 
 200              	**********************************/
 201              		.macro _dict_entry len,name,cmd_idx 
ARM GAS  tinyBasic.s 			page 9


 202              		.p2align 2 
 203              	  .word LINK 
 204              	  .word \cmd_idx 
 205              		.equ LINK,.
 206              		.byte \len 	
 207              		.ascii "\name"
 208              		.p2align 2 
 209              		.endm 
 210              	
 211              	  // pop parameter in register 
 212              	  .macro _POP  reg 
 213              	  ldmia  r12!,{\reg}
 214              	  .endm 
 215              	
 216              	  // push register on parameter stack 
 217              	  .macro _PUSH reg 
 218              	  stmdb r12!,{\reg}
 219              	  .endm 
  27              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
ARM GAS  tinyBasic.s 			page 10


  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
ARM GAS  tinyBasic.s 			page 11


  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  28              	
  29              	    .section  .text , "ax", %progbits 
  30              	
  31              	/* flags used by BASIC interpreter */ 
  32              		.equ FRUN,0 // flags run code in variable flags
  33              		.equ FTRAP,1 // inside trap handler 
  34              		.equ FLOOP,2 // FOR loop in preparation 
  35              		.equ FSLEEP,3 // halt produit par la commande SLEEP 
  36              		.equ FBREAK,4 // break point flag 
  37              		.equ FCOMP,5  // compiling flags 
  38              	
  39              		.equ FAUTORUN,6// auto start program running 
  40              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
  41              	  
  42              	    .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
  43              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
  44              	
  45              	
  46              	
  47              	
  48              	
  49              	/**********************************
  50              	   strlen 
  51              	   return length of asciz 
  52              	   input:
  53              	      r0    *asciz 
ARM GAS  tinyBasic.s 			page 12


  54              	   output:
  55              	      r0   length 
  56              	   use:
  57              	      r8   counter 
  58              	      r1   temp 
  59              	*********************************/
  60              	    _GBL_FUNC strlen 
  61 0000 2DE90201 	    push {r1,r8}
  62 0004 88EA0808 	    eor r8,r8 
  63 0008 10F8011B 	1:  ldrb r1,[r0],#1 
  64 000c 11B1     	    cbz r1,9f  
  65 000e 08F10108 	    add r8,#1 
  66 0012 F9E7     	    b 1b 
  67 0014 4046     	9:  mov r0,r8 
  68 0016 BDE80201 	    pop {r1,r8}
  69 001a 7047     	    _RET     
  70              	
  71              	
  72              	/******************************
  73              	   cmove 
  74              	   move n characters 
  75              	   input:
  76              	    r0      src 
  77              	    r1      dest 
  78              	    r8      count 
  79              	  output:
  80              	    none:
  81              	  use: 
  82              	    r6     temp   
  83              	******************************/
  84              	    _GBL_FUNC cmove
  85 001c 40B4     	    push {r6} 
  86 001e 18EA0808 	1:  ands r8,r8
  87 0022 12D0     	    beq 9f 
  88 0024 8842     	    cmp r0,r1 
  89 0026 07D4     	    bmi move_from_end 
  90              	move_from_low: // move from low address toward high 
  91 0028 10F8016B 	    ldrb r6,[r0],#1
  92 002c 01F8016B 	    strb r6,[r1],#1
  93 0030 B8F10108 	    subs r8,#1
  94 0034 F8D1     	    bne move_from_low
  95 0036 08E0     	    b 9f 
  96              	move_from_end: // move from high address toward low 
  97 0038 4044     	    add r0,r0,r8 
  98 003a 4144     	    add r1,r1,r8     
  99 003c 10F8016D 	3:  ldrb r6,[r0,#-1]!
 100 0040 01F8016D 	    strb r6,[r1,#-1]!
 101 0044 B8F10108 	    subs r8,#1
 102 0048 F8D1     	    bne 3b 
 103 004a 40BC     	9:  pop {r6}
 104 004c 7047     	    _RET
 105              	
 106              	/*********************************
 107              	  strcpy 
 108              	  copy .asciz string 
 109              	  input:
 110              	    r0   *string
ARM GAS  tinyBasic.s 			page 13


 111              	    r1   *dest_buffer
 112              	  output:
 113              	    r0   *string
 114              	    r1   *dest_buffer 
 115              	  use:
 116              	    r7   temp
 117              	**********************************/
 118 004e 00BF     	    _GBL_FUNC strcpy 
 119 0050 83B4     	    push {r0,r1,r7}
 120 0052 10F8017B 	1:  ldrb r7,[r0],#1
 121 0056 17B1     	    cbz  r7, 9f 
 122 0058 01F8017B 	    strb r7,[r1],#1
 123 005c F9E7     	    b 1b 
 124 005e 0F70     	9:  strb r7,[r1] 
 125 0060 83BC     	    pop {r0,r1,r7}
 126 0062 7047     	    _RET 
 127              	
 128              	/*********************************
 129              	  cp_cstr 
 130              	  compare 2 counted strings 
 131              	  input:
 132              	    r0  *str1 
 133              	    r1  *str2
 134              	    r8  length 
 135              	  output:
 136              	    r0  <0 str1<str2 
 137              	        0  str1==str2 
 138              	        >0  str1>str2  
 139              	  use:
 140              	    r9  *str1
 141              	    r10 temp
 142              	    r11 temp    
 143              	*********************************/
 144              	  _FUNC cp_cstr
 145 0064 2DE9000E 	  push {r9,r10,r11}
 146 0068 8146     	  mov r9, r0 
 147 006a 19F801AB 	  ldrb r10,[r9],#1 // length 
 148 006e B8EB0A00 	  subs r0,r8,r10 
 149 0072 09D1     	  bne 2f 
 150              	1:
 151 0074 19F801AB 	  ldrb r10,[r9],#1
 152 0078 11F801BB 	  ldrb r11,[r1],#1 
 153 007c BAEB0B00 	  subs r0,r10,r11  
 154 0080 02D1     	  bne 2f // not same length       
 155 0082 B8F10108 	  subs r8,#1 
 156 0086 F5D1     	  bne 1b 
 157              	2: 
 158 0088 BDE8000E 	  pop {r9,r10,r11}
 159 008c 7047     	  _RET 
 160              	
 161              	/**********************************
 162              	      BASIC commands 
 163              	**********************************/
 164              	
 165              	/*********************************
 166              	    syntax_error 
 167              	    display error message and 
ARM GAS  tinyBasic.s 			page 14


 168              	    abort program 
 169              	  input:
 170              	    none  
 171              	  output: 
 172              	    none 
 173              	  use:
 174              	*********************************/
 175 008e 00BF     	    _FUNC syntax_error 
 176 0090 4FF00200 	    mov r0,#ERR_SYNTAX
 177 0094 00E0     	    b tb_error 
 178              	
 179              	/*********************************
 180              	    tb_error 
 181              	    display BASIC error and 
 182              	    abort program. 
 183              	  input:
 184              	    r0    error code   
 185              	  output: 
 186              	    none 
 187              	  use:
 188              	    r1    temp 
 189              	*********************************/
 190 0096 00BF     	    _FUNC tb_error 
 191 0098 9F49     	    ldr r1,=err_msg 
 192 009a 4FEA8000 	    lsl r0,#2 
 193 009e 0844     	    add r0,r1 
 194 00a0 0068     	    ldr r0,[r0]
 195 00a2 00B5FFF7 	    _CALL uart_putsz
 195      FEFF5DF8 
 195      04EB
 196 00ac 2AE1     	    b  warm_start  
 197 00ae 7047     	    _RET 
 198              	err_msg:
 199 00b0 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 199      00000000 
 199      0D000000 
 199      1B000000 
 199      34000000 
 200 00c8 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 200      6F000000 
 200      89000000 
 200      9A000000 
 200      AB000000 
 201 00dc B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 201      EA000000 
 201      FA000000 
 201      0E010000 
 201      21010000 
 202              	
 203              	    .section .rodata.tb_error 
 204              	
 205 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 205      72792066 
 205      756C6C0A 
 205      00
 206 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 206      61782065 
ARM GAS  tinyBasic.s 			page 15


 206      72726F72 
 206      0A00
 207 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 207      206F7065 
 207      72617469 
 207      6F6E206F 
 207      76657266 
 208 0034 64697669 	err_div0: .asciz "division by 0\n" 
 208      73696F6E 
 208      20627920 
 208      300A00
 209 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 209      6C696420 
 209      6C696E65 
 209      206E756D 
 209      6265722E 
 210 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 210      74696D65 
 210      206F6E6C 
 210      79207573 
 210      6167652E 
 211 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 211      616E6420 
 211      6C696E65 
 211      206F6E6C 
 211      79207573 
 212 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 212      69636174 
 212      65206E61 
 212      6D652E0A 
 212      00
 213 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 213      206E6F74 
 213      20666F75 
 213      6E642E0A 
 213      00
 214 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 214      76616C75 
 214      652E0A00 
 215 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 215      20696E20 
 215      65787465 
 215      6E646564 
 215      206D656D 
 216 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 216      61746120 
 216      666F756E 
 216      642E0A00 
 217 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 217      726F6772 
 217      616D2069 
 217      6E205241 
 217      4D210A00 
 218 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 218      20737973 
 218      74656D20 
 218      66756C6C 
ARM GAS  tinyBasic.s 			page 16


 218      2E0A00
 219 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 219      65722066 
 219      756C6C0A 
 219      00
 220              	
 221 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 221      2074696D 
 221      65206572 
 221      726F722C 
 221      2000
 222 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 222      70696C65 
 222      20657272 
 222      6F722C20 
 222      00
 223 0151 6C617374 	tk_id: .asciz "last token id: "
 223      20746F6B 
 223      656E2069 
 223      643A2000 
 224              	
 225              	
 226              	    .section  .text , "ax", %progbits 
 227              	
 228              	/*********************************
 229              	     arg_list 
 230              	     extract command arguments
 231              	     and push them on parameter stack 
 232              	    input:
 233              	       none 
 234              	    output:
 235              	       r0  arguments count found
 236              	       args on dstack in order left to right 
 237              	    use:
 238              	       r8   arguments counter  
 239              	********************************/
 240              	     _FUNC arg_list 
 241 00f0 4DF8048D 	     push {r8}
 242              	
 243 00f4 5DF8048B 	     pop {r8}      
 244 00f8 7047     	     _RET 
 245              	
 246              	/************************************
 247              	    func_args 
 248              	    get and stack function parameters
 249              	  input:
 250              	    none 
 251              	  output:
 252              	    r0    parameter count 
 253              	  use:
 254              	
 255              	************************************/
 256 00fa 00BF     	    _FUNC func_args 
 257              	
 258              	  
 259 00fc 7047     	    _RET 
 260              	
ARM GAS  tinyBasic.s 			page 17


 261              	
 262              	
 263              	
 264              	/*********************************
 265              	   BASIC: BTGL adr, mask   
 266              	   toggle bits [adr]=[adr]^mask  
 267              	   input:
 268              	     r0    adr 
 269              	     r1    mask 
 270              	    output;
 271              	      none 
 272              	    use:
 273              	      r8   temp
 274              	      r9   temp  
 275              	*******************************/     
 276 00fe 00BF     	    _FUNC BTGL 
 277              	
 278 0100 7047     	    _RET 
 279              	
 280              	
 281              	
 282              	
 283              	//---------------------------------
 284              	// dictionary search 
 285              	// input:
 286              	//	 r0   target name
 287              	//   r1		dictionary first link address  
 288              	// output:
 289              	//  r0 		TK_CMD|TK_IFUNC|TK_CONST|TK_NONE 
 290              	//  r1		cmd_index if r0!=TK_NONE  
 291              	// use:
 292              	//  r8   length dictionary name 
 293              	//---------------------------------
 294 0102 00BF     	  _FUNC search_dict
 295 0104 4DF8048D 	  push {r8}
 296 0108 03B4     	  push {r0,r1}
 297              	1:
 298 010a 11F8010B 	  ldrb r0,[r1],#1 
 299 010e 0043     	  orrs r0,r0
 300 0110 13D0     	  beq 9f // end of dictinary 
 301 0112 00F01F08 	  and r8,r0,#0x1f 
 302 0116 0098     	  ldr r0,[sp]  
 303 0118 00B5FFF7 	  _CALL cp_cstr 
 303      A3FF5DF8 
 303      04EB
 304 0122 04D0     	  beq 2f 
 305 0124 0199     	  ldr r1,[sp,#4]
 306 0126 51F8081C 	  ldr r1,[r1,#-8]
 307 012a 0191     	  str r1,[sp,#4]
 308 012c EDE7     	  b 1b   
 309              	2: // found
 310 012e 0199     	  ldr r1,[sp,#4]
 311 0130 0878     	  ldrb r0,[r1]
 312 0132 4FEA5010 	  lsr r0,#5    // token type 
 313 0136 51F8041C 	  ldr r1,[r1,#-4]  // command index 
 314 013a 02B0     	9: add sp,#8  // drop pushed r0,r1
 315 013c 5DF8048B 	   pop {r8}
ARM GAS  tinyBasic.s 			page 18


 316 0140 7047     	   _RET 
 317              	
 318              	/************************************
 319              	    print firmware version 
 320              	    input: 
 321              	      none 
 322              	    output:
 323              	      none 
 324              	    use:
 325              	      r0 
 326              	***********************************/
 327 0142 00BF     	    _FUNC prt_version 
 328 0144 7548     	    ldr r0,=version_msg 
 329 0146 00B5FFF7 	    _CALL uart_putsz 
 329      FEFF5DF8 
 329      04EB
 330 0150 9FF87600 	    ldrb r0,version 
 331 0154 4FEA1010 	    lsr r0,#4 
 332 0158 00F13000 	    add r0,#'0' 
 333 015c 3A28     	    cmp r0,#'9'+1 
 334 015e 01D4     	    bmi 1f 
 335 0160 00F10700 	    add r0,#7 
 336              	  1:
 337 0164 00B5FFF7 	    _CALL uart_putc 
 337      FEFF5DF8 
 337      04EB
 338 016e 4FF02E00 	    mov r0,#'. 
 339 0172 00B5FFF7 	    _CALL uart_putc 
 339      FEFF5DF8 
 339      04EB
 340 017c 9FF84A00 	    ldrb r0,version 
 341 0180 00F00F00 	    and r0,#15 
 342 0184 00F13000 	    add r0,'0' 
 343 0188 3A28     	    cmp r0,#'9'+1 
 344 018a 01D4     	    bmi 1f 
 345 018c 00F10700 	    add r0,#7
 346              	  1: 
 347 0190 00B5FFF7 	    _CALL uart_putc 
 347      FEFF5DF8 
 347      04EB
 348 019a 4FF00D00 	    mov r0,#CR 
 349 019e 00B5FFF7 	    _CALL uart_putc 
 349      FEFF5DF8 
 349      04EB
 350 01a8 7047     	    _RET  
 351              	version_msg:
 352 01aa 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 352      65207069 
 352      6C6C2074 
 352      696E7920 
 352      42415349 
 353              	version:
 354 01ca 10       	    .byte 0x10 
 355 01cb 00       	    .p2align 2 
 356              	
 357              	
 358              	/*********************************
ARM GAS  tinyBasic.s 			page 19


 359              	   cold_start 
 360              	   initialize BASIC interpreter 
 361              	   input:
 362              	     r1    destination address 
 363              	   output:
 364              	    none 
 365              	   use:
 366              	     r0,r1,r8 
 367              	*********************************/
 368              	    _GBL_FUNC cold_start 
 369 01cc 2DE90301 	    push {r0,r1,r8}
 370              	// initialise parameters stack
 371 01d0 DFF840C0 	   ldr r12,dstack_empty     
 372              	//copy system variables to ram 
 373 01d4 DFF83800 	    ldr r0,src_addr 
 374 01d8 0B46     	    mov r3,r1 // UPP  
 375 01da A0EB0108 	    sub r8,r0,r1 
 376 01de 4DF8048D 	    push {r8} // map offset 
 377 01e2 4FF0D008 	    mov r8,#ulast-uzero
 378 01e6 00B5FFF7 	    _CALL cmove  
 378      FEFF5DF8 
 378      04EB
 379 01f0 5DF8048B 	    pop {r8}
 380 01f4 00B5FFF7 	    _CALL prt_version 
 380      A5FF5DF8 
 380      04EB
 381 01fe BDE80301 	    pop {r0,r1,r8}
 382 0202 7047     	    _RET
 383 0204 00B500F0 	    _CALL warm_init 
 383      25F85DF8 
 383      04EB
 384 020e 2FE0     	    b cmd_line   
 385              	src_addr:
 386 0210 00000000 	  .word uzero
 387              	dstack_empty:
 388 0214 00000000 	   .word _dstack 
 389              	
 390              	/*****************************
 391              	    clear_vars 
 392              	    initialize variables to 0
 393              	  input:
 394              	    none 
 395              	  output:
 396              	    none 
 397              	  use:
 398              	    r8   counter 
 399              	*****************************/
 400              	    _FUNC clear_vars 
 401 0218 2DE90301 	    push {r0,r1,r8}
 402 021c 80EA0000 	    eor r0,r0 
 403 0220 03F16401 	    add r1,r3,#VARS
 404 0224 4FF01A08 	    mov r8,#26
 405 0228 41F8040B 	1:  str r0,[r1],#4 
 406 022c B8F10108 	    subs r8,#1
 407 0230 FAD1     	    bne 1b  
 408 0232 BDE80301 	    pop {r0,r1,r8}
 409 0236 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 20


 410              	
 411              	/*****************************
 412              	   clear_basic 
 413              	   reset BASIC text pointers 
 414              	   and clear variables 
 415              	*****************************/
 416              	    _FUNC clear_basic
 417 0238 80EA0000 		eor r0,r0 
 418 023c 9860     	  str r0,[r3,#COUNT]
 419 023e 1860     	  str r0,[r3,#IN]
 420 0240 03F1CC00 	  add r0,r3,#FREE_RAM
 421 0244 5863     	  str r0,[r3,#TXTBGN]
 422 0246 9863     	  str r0,[r3,#TXTEND]
 423 0248 00B5FFF7 		_CALL clear_vars 
 423      E5FF5DF8 
 423      04EB
 424 0252 7047     		_RET  
 425              	
 426              	/***********************************
 427              	   warm_init 
 428              	   initialize interpreter context 
 429              	  input:
 430              	    none
 431              	  output:
 432              	    none 
 433              	  use:
 434              	    r0 
 435              	***********************************/
 436              	warm_init:
 437 0254 80EA0000 	  eor r0,r0 
 438 0258 5864     		str r0,[r3,FLAGS]
 439 025a D863     	  str r0,[r3,LOOP_DEPTH] 
 440 025c 4FF00400 	  mov r0, #DEFAULT_TAB_WIDTH
 441 0260 9864     	  str r0,[r3,#TAB_WIDTH]
 442 0262 4FF00A00 		mov r0,#10 // default base decimal 
 443 0266 D861     		str r0,[r3,#BASE]
 444 0268 D860     	  str r0,[r3,#BASICPTR]
 445 026a 1860     	  str r0,[r3,#IN]
 446 026c 9860     	  str r0,[r3,COUNT]  
 447 026e 7047     		_RET  
 448              	
 449              	/**********************************
 450              	   cmd_line 
 451              	   shell command line 
 452              	   input:
 453              	      none 
 454              	   output:
 455              	      none 
 456              	   use:
 457              	
 458              	***********************************/
 459              	    _FUNC cmd_line 
 460 0270 4FF00D00 	    mov r0,#CR 
 461 0274 00B5FFF7 	    _CALL uart_putc 
 461      FEFF5DF8 
 461      04EB
 462 027e DFF87E00 	1:  ldr r0,tib
ARM GAS  tinyBasic.s 			page 21


 463 0282 00B5FFF7 	    _CALL readln 
 463      FEFF5DF8 
 463      04EB
 464 028c 0040     	    ands r0,r0 
 465 028e F6D0     	    beq 1b 
 466 0290 00B500F0 	    _CALL compile 
 466      3FF85DF8 
 466      04EB
 467 029a 0040     	    ands r0,r0 
 468 029c EFD0     	    beq 1b  
 469              	// interpret 
 470              	interpreter:
 471 029e 1868     	   ldr r0,[r3,#IN]
 472 02a0 9968     	   ldr r1,[r3,#COUNT]
 473 02a2 8842     	   cmp r0,r1 
 474 02a4 12D4     	   bmi interp_loop 
 475              	next_line:
 476 02a6 586C     	  ldr r0,[r3,#FLAGS]
 477 02a8 10F0010F 	  tst r0,#(1<<FRUN)
 478 02ac E0D0     	  beq cmd_line 
 479 02ae D868     	  ldr r0,[r3,#BASICPTR]
 480 02b0 1968     	  ldr r1,[r3,#IN]
 481 02b2 0844     	  add r0,r1 
 482 02b4 996B     	  ldr r1,[r3,#TXTEND]
 483 02b6 8842     	  cmp r0,r1 
 484 02b8 05D4     	  bmi 1f 
 485 02ba 00B500F0 	  _CALL warm_start 
 485      22F85DF8 
 485      04EB
 486 02c4 D4E7     	  b cmd_line
 487              	1:
 488 02c6 4FF00300 	  mov r0,#3 
 489 02ca 1860     	  str r0,[r3,IN] 
 490              	interp_loop:
 491 02cc 00B500F0 	  _CALL next_token 
 491      15F85DF8 
 491      04EB
 492 02d6 0028     	  cmp r0,#TK_NONE 
 493 02d8 E5D0     	  beq next_line 
 494 02da 8028     	  cmp r0,#TK_CMD 
 495 02dc 01D1     	  bne 2f
 496 02de 0847     	  BX r1
 497 02e0 F4E7     	  b interp_loop 
 498              	2: 
 499 02e2 8528     	  cmp r0,#TK_VAR 
 500 02e4 02D1     	  bne 3f 
 501 02e6 00F06BBC 	  b let_var 
 502 02ea EFE7     	  b interp_loop
 503              	3: 
 504 02ec 0628     	  cmp r0,#TK_ARRAY 
 505 02ee 02D1     	  bne 4f
 506 02f0 00F070BC 	  b let_array 
 507 02f4 EAE7     	  b interp_loop
 508              	4: 
 509 02f6 0128     	  cmp r0,#TK_COLON
 510 02f8 E8D0     	  beq interp_loop
 511 02fa C9E6     	  b syntax_error
ARM GAS  tinyBasic.s 			page 22


 512              	
 513              	/*****************************
 514              	  next_token 
 515              	  extract next token 
 516              	  input:
 517              	    none 
 518              	  output:
 519              	    r0    token type 
 520              	    r1    token value 
 521              	  use:
 522              	
 523              	****************************/
 524              	  _FUNC next_token 
 525              	
 526 02fc 7047     	  _RET 
 527              	
 528              	
 529 02fe 00000000 	tib: .word _tib 
 530              	
 531              	
 532              	/**********************************
 533              	    warm_start 
 534              	    start BASIC interpreter without 
 535              	    reset variables and code space 
 536              	  input:
 537              	    none 
 538              	  output:
 539              	    none 
 540              	  use:
 541              	
 542              	**********************************/
 543 0302 00BF     	    _FUNC warm_start 
 544              	// initialise parameters stack
 545 0304 5FF8F4C0 	   ldr r12,dstack_empty     
 546              	
 547 0308 FCE7     	    b warm_start 
 548              	
 549              	/***********************************
 550              	    get_array_element 
 551              	    return index of array element 
 552              	  input:
 553              	    none 
 554              	  output:
 555              	    r0   address of element 
 556              	  use:
 557              	
 558              	************************************/
 559 030a 00BF     	    _FUNC get_array_element 
 560              	
 561 030c 7047     	    _RET 
 562              	
 563 030e 00BF     	    _FUNC relation 
 564              	
 565 0310 7047     	    _RET 
 566              	
 567              	/*********************************
 568              	    compile 
ARM GAS  tinyBasic.s 			page 23


 569              	    tokenize source line 
 570              	  input:
 571              	    none 
 572              	  output:
 573              	    r0 
 574              	  use:
 575              	
 576              	***********************************/
 577 0312 00BF     	    _FUNC compile
 578              	
 579 0314 7047     	    _RET 
 580              	
 581 0316 0000     	  .section .rodata 
 582              	
 583              	// system variables initial value 
 584              	uzero:
 585 0000 00000000 	  .word 0 // IN
 586 0004 00000000 	  .word 0 // IN_SAVED
 587 0008 00000000 	  .word 0 // COUNT
 588 000c 00000000 	  .word 0 // BASICPTR
 589 0010 00000000 	  .word 0 // DATAPTR
 590 0014 00000000 	  .word 0 // DATA
 591 0018 00000000 	  .word 0 // DATALEN
 592 001c 0A000000 	  .word 10 // BASE
 593 0020 00000000 	  .word 0 // TICKS
 594 0024 00000000 	  .word 0 // TIMER
 595 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 596 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 597 0030 00000000 	  .word 0 // FFREE
 598 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 599 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 600 003c 00000000 	  .word 0 //LOOP_DEPTH
 601 0040 00000000 	  .word 0 // ARRAY_SIZE
 602 0044 00000000 	  .word 0 // FLAGS
 603 0048 04000000 	  .word 4 // TAB_WIDTH
 604 004c 00000000 	  .word 0 // RX_HEAD
 605 0050 00000000 	  .word 0 // RX_TAIL
 606 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 606      00000000 
 606      00000000 
 606      00000000 
 607 0064 00000000 	  .space VARS_SIZE,0 // VARS
 607      00000000 
 607      00000000 
 607      00000000 
 607      00000000 
 608 00cc 00000000 	  .space 4, 0 // padding 
 609              	ulast:
 610              	
 611              	  .section .rodata.dictionary 
 612              	
 613              	// keep alphabetic order for BASIC names from Z-A
 614              	// this sort order is for for WORDS cmd output. 	
 615              	
 616              		.equ link, 0
 617              	kword_end:
 618 0000 00000000 	  .word link,0
ARM GAS  tinyBasic.s 			page 24


 618      00000000 
 619              	  .equ LINK, .
 620 0008 00000000 	  .word 0
 621              	  .p2align 2  
 622 000c 08000000 	  _dict_entry 5+F_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 622      64000000 
 622      25585452 
 622      4D540000 
 623 001c 14000000 	  _dict_entry 4+F_CMD,XRCV,XRCV_IDX // xmodem receive
 623      65000000 
 623      24585243 
 623      56000000 
 624 002c 24000000 	  _dict_entry 3+F_IFUNC,XOR,XOR_IDX //bit_xor
 624      63000000 
 624      43584F52 
 625 0038 34000000 	  _dict_entry 5+F_CMD,WRITE,WRITE_IDX //write  
 625      62000000 
 625      25575249 
 625      54450000 
 626 0048 40000000 	  _dict_entry 5+F_CMD,WORDS,WORDS_IDX //words 
 626      61000000 
 626      25574F52 
 626      44530000 
 627 0058 50000000 	  _dict_entry 4+F_CMD,WAIT,WAIT_IDX //wait 
 627      60000000 
 627      24574149 
 627      54000000 
 628 0068 60000000 	  _dict_entry 3+F_IFUNC,USR,USR_IDX //usr
 628      5F000000 
 628      43555352 
 629 0074 70000000 	  _dict_entry 5+F_CMD,UNTIL,UNTIL_IDX //until 
 629      5E000000 
 629      25554E54 
 629      494C0000 
 630 0084 7C000000 	  _dict_entry 6+F_IFUNC,UFLASH,UFLASH_IDX //uflash 
 630      5D000000 
 630      4655464C 
 630      41534800 
 631 0094 8C000000 	  _dict_entry 6+F_IFUNC,UBOUND,UBOUND_IDX //ubound
 631      5C000000 
 631      4655424F 
 631      554E4400 
 632 00a4 9C000000 	  _dict_entry 4+F_CMD,TONE,TONE_IDX //tone  
 632      5B000000 
 632      24544F4E 
 632      45000000 
 633 00b4 AC000000 	  _dict_entry 2+F_CMD,TO,TO_IDX //to
 633      5A000000 
 633      22544F00 
 634 00c0 BC000000 	  _dict_entry 5+F_CMD,TIMER,TIMER_IDX //set_timer
 634      58000000 
 634      2554494D 
 634      45520000 
 635 00d0 C8000000 	  _dict_entry 7+F_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 635      59000000 
 635      4754494D 
 635      454F5554 
ARM GAS  tinyBasic.s 			page 25


 636 00e0 D8000000 	  _dict_entry 5+F_IFUNC,TICKS,TICKS_IDX //get_ticks
 636      57000000 
 636      45544943 
 636      4B530000 
 637 00f0 E8000000 	  _dict_entry 4+F_CMD,STOP,STOP_IDX //stop 
 637      56000000 
 637      2453544F 
 637      50000000 
 638 0100 F8000000 	  _dict_entry 4+F_CMD,STEP,STEP_IDX //step 
 638      55000000 
 638      24535445 
 638      50000000 
 639 0110 08010000 	  _dict_entry 5+F_CMD,SPIWR,SPIWR_IDX //spi_write
 639      54000000 
 639      25535049 
 639      57520000 
 640 0120 18010000 	  _dict_entry 6+F_CMD,SPISEL,SPISEL_IDX //spi_select
 640      53000000 
 640      26535049 
 640      53454C00 
 641 0130 28010000 	  _dict_entry 5+F_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 641      51000000 
 641      45535049 
 641      52440000 
 642 0140 38010000 	  _dict_entry 5+F_CMD,SPIEN,SPIEN_IDX //spi_enable 
 642      52000000 
 642      25535049 
 642      454E0000 
 643 0150 48010000 	  _dict_entry 5+F_CMD,SLEEP,SLEEP_IDX //sleep 
 643      50000000 
 643      25534C45 
 643      45500000 
 644 0160 58010000 	  _dict_entry 4+F_IFUNC,SIZE,SIZE_IDX //size
 644      4F000000 
 644      4453495A 
 644      45000000 
 645 0170 68010000 	  _dict_entry 4+F_CMD,SHOW,SHOW_IDX //show 
 645      4E000000 
 645      2453484F 
 645      57000000 
 646 0180 78010000 	  _dict_entry 4+F_CMD,SAVE,SAVE_IDX //save
 646      4D000000 
 646      24534156 
 646      45000000 
 647 0190 88010000 	  _dict_entry 3+F_CMD,RUN,RUN_IDX //run
 647      4C000000 
 647      2352554E 
 648 019c 98010000 	  _dict_entry 6+F_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 648      4B000000 
 648      46525348 
 648      49465400 
 649 01ac A4010000 	  _dict_entry 3+F_IFUNC,RND,RND_IDX //random 
 649      4A000000 
 649      43524E44 
 650 01b8 B4010000 	  _dict_entry 6+F_CMD,RETURN,RET_IDX //return 
 650      49000000 
 650      26524554 
ARM GAS  tinyBasic.s 			page 26


 650      55524E00 
 651 01c8 C0010000 	  _dict_entry 7+F_CMD,RESTORE,REST_IDX //restore 
 651      48000000 
 651      27524553 
 651      544F5245 
 652 01d8 D0010000 	  _dict_entry 6+F_CMD,REMARK,REM_IDX //remark 
 652      47000000 
 652      2652454D 
 652      41524B00 
 653 01e8 E0010000 	  _dict_entry 6+F_CMD,REBOOT,RBT_IDX //cold_start
 653      46000000 
 653      26524542 
 653      4F4F5400 
 654 01f8 F0010000 	  _dict_entry 4+F_IFUNC,READ,READ_IDX //read  
 654      45000000 
 654      44524541 
 654      44000000 
 655 0208 00020000 	  _dict_entry 4+F_IFUNC,QKEY,QKEY_IDX //qkey  
 655      44000000 
 655      44514B45 
 655      59000000 
 656 0218 10020000 	  _dict_entry 4+F_IFUNC,PRTI,PRTI_IDX //const_porti 
 656      43000000 
 656      44505254 
 656      49000000 
 657 0228 20020000 	  _dict_entry 4+F_IFUNC,PRTH,PRTH_IDX //const_porth 
 657      42000000 
 657      44505254 
 657      48000000 
 658 0238 30020000 	  _dict_entry 4+F_IFUNC,PRTG,PRTG_IDX //const_portg 
 658      41000000 
 658      44505254 
 658      47000000 
 659 0248 40020000 	  _dict_entry 4+F_IFUNC,PRTF,PRTF_IDX //const_portf
 659      40000000 
 659      44505254 
 659      46000000 
 660 0258 50020000 	  _dict_entry 4+F_IFUNC,PRTE,PRTE_IDX //const_porte
 660      3F000000 
 660      44505254 
 660      45000000 
 661 0268 60020000 	  _dict_entry 4+F_IFUNC,PRTD,PRTD_IDX //const_portd
 661      3E000000 
 661      44505254 
 661      44000000 
 662 0278 70020000 	  _dict_entry 4+F_IFUNC,PRTC,PRTC_IDX //const_portc
 662      3D000000 
 662      44505254 
 662      43000000 
 663 0288 80020000 	  _dict_entry 4+F_IFUNC,PRTB,PRTB_IDX //const_portb
 663      3C000000 
 663      44505254 
 663      42000000 
 664 0298 90020000 	  _dict_entry 4+F_IFUNC,PRTA,PRTA_IDX //const_porta 
 664      3B000000 
 664      44505254 
 664      41000000 
ARM GAS  tinyBasic.s 			page 27


 665 02a8 A0020000 	  _dict_entry 5+F_CMD,PRINT,PRT_IDX //print 
 665      3A000000 
 665      25505249 
 665      4E540000 
 666 02b8 B0020000 	  _dict_entry 4+F_IFUNC,POUT,POUT_IDX //const_output
 666      39000000 
 666      44504F55 
 666      54000000 
 667 02c8 C0020000 	  _dict_entry 4+F_CMD,POKE,POKE_IDX //poke 
 667      38000000 
 667      24504F4B 
 667      45000000 
 668 02d8 D0020000 	  _dict_entry 5+F_CMD,PMODE,PMODE_IDX //pin_mode 
 668      35000000 
 668      25504D4F 
 668      44450000 
 669 02e8 E0020000 	  _dict_entry 4+F_IFUNC,PINP,PINP_IDX //const_input
 669      37000000 
 669      4450494E 
 669      50000000 
 670 02f8 F0020000 	  _dict_entry 4+F_IFUNC,PEEK,PEEK_IDX //peek 
 670      36000000 
 670      44504545 
 670      4B000000 
 671 0308 00030000 	  _dict_entry 5+F_CMD,PAUSE,PAUSE_IDX //pause 
 671      34000000 
 671      25504155 
 671      53450000 
 672 0318 10030000 	  _dict_entry 3+F_IFUNC,PAD,PAD_IDX //pad_ref 
 672      33000000 
 672      43504144 
 673 0324 20030000 	  _dict_entry 2+F_IFUNC,OR,OR_IDX //bit_or
 673      32000000 
 673      424F5200 
 674 0330 2C030000 	  _dict_entry 3+F_IFUNC,ODR,ODR_IDX //const_odr 
 674      31000000 
 674      434F4452 
 675 033c 38030000 	  _dict_entry 3+F_IFUNC,NOT,NOT_IDX //func_not 
 675      30000000 
 675      434E4F54 
 676 0348 44030000 	  _dict_entry 4+F_CMD,NEXT,NEXT_IDX //next 
 676      2E000000 
 676      244E4558 
 676      54000000 
 677 0358 50030000 	  _dict_entry 3+F_CMD,NEW,NEW_IDX //new
 677      2F000000 
 677      234E4557 
 678 0364 60030000 	  _dict_entry 6+F_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 678      2D000000 
 678      464D554C 
 678      44495600 
 679 0374 6C030000 	  _dict_entry 6+F_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 679      2C000000 
 679      464C5348 
 679      49465400 
 680 0384 7C030000 	  _dict_entry 3+F_IFUNC,LOG,LOG_IDX //log2 
 680      2B000000 
ARM GAS  tinyBasic.s 			page 28


 680      434C4F47 
 681 0390 8C030000 	  _dict_entry 4+F_CMD,LOAD,LOAD_IDX //load 
 681      2A000000 
 681      244C4F41 
 681      44000000 
 682 03a0 98030000 	  _dict_entry 4+F_CMD,LIST,LIST_IDX //list
 682      29000000 
 682      244C4953 
 682      54000000 
 683 03b0 A8030000 	  _dict_entry 3+F_CMD,LET,LET_IDX //let 
 683      28000000 
 683      234C4554 
 684 03bc B8030000 	  _dict_entry 3+F_IFUNC,KEY,KEY_IDX //key 
 684      27000000 
 684      434B4559 
 685 03c8 C4030000 	  _dict_entry 7+F_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 685      26000000 
 685      27495744 
 685      47524546 
 686 03d8 D0030000 	  _dict_entry 6+F_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 686      25000000 
 686      26495744 
 686      47454E00 
 687 03e8 E0030000 	  _dict_entry 6+F_IFUNC,INVERT,INVERT_IDX //invert 
 687      24000000 
 687      46494E56 
 687      45525400 
 688 03f8 F0030000 	  _dict_entry 5+F_CMD,INPUT,INPUT_IDX //input_var  
 688      23000000 
 688      25494E50 
 688      55540000 
 689 0408 00040000 	  _dict_entry 2+F_CMD,IF,IF_IDX //if 
 689      22000000 
 689      22494600 
 690 0414 10040000 	  _dict_entry 3+F_IFUNC,IDR,IDR_IDX //const_idr 
 690      21000000 
 690      43494452 
 691 0420 1C040000 	  _dict_entry 3+F_CMD,HEX,HEX_IDX //hex_base
 691      20000000 
 691      23484558 
 692 042c 28040000 	  _dict_entry 4+F_IFUNC,GPIO,GPIO_IDX //gpio 
 692      1F000000 
 692      44475049 
 692      4F000000 
 693 043c 34040000 	  _dict_entry 4+F_CMD,GOTO,GOTO_IDX //goto 
 693      1E000000 
 693      24474F54 
 693      4F000000 
 694 044c 44040000 	  _dict_entry 5+F_CMD,GOSUB,GOSUB_IDX //gosub 
 694      1D000000 
 694      25474F53 
 694      55420000 
 695 045c 54040000 	  _dict_entry 6+F_CMD,FORGET,FORGET_IDX //forget 
 695      1C000000 
 695      26464F52 
 695      47455400 
 696 046c 64040000 	  _dict_entry 3+F_CMD,FOR,FOR_IDX //for 
ARM GAS  tinyBasic.s 			page 29


 696      1B000000 
 696      23464F52 
 697 0478 74040000 	  _dict_entry 4+F_CMD,FCPU,FCPU_IDX //fcpu 
 697      1A000000 
 697      24464350 
 697      55000000 
 698 0488 80040000 	  _dict_entry 3+F_CMD,END,END_IDX //cmd_end  
 698      18000000 
 698      23454E44 
 699 0494 90040000 	  _dict_entry 6+F_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 699      19000000 
 699      46454550 
 699      524F4D00 
 700 04a4 9C040000 	  _dict_entry 6+F_CMD,DWRITE,DWRITE_IDX //digital_write
 700      17000000 
 700      26445752 
 700      49544500 
 701 04b4 AC040000 	  _dict_entry 5+F_IFUNC,DREAD,DREAD_IDX //digital_read
 701      16000000 
 701      45445245 
 701      41440000 
 702 04c4 BC040000 	  _dict_entry 2+F_CMD,DO,DO_IDX //do_loop
 702      15000000 
 702      22444F00 
 703 04d0 CC040000 	  _dict_entry 3+F_CMD,DIR,DIR_IDX //directory 
 703      14000000 
 703      23444952 
 704 04dc D8040000 	  _dict_entry 3+F_CMD,DEC,DEC_IDX //dec_base
 704      13000000 
 704      23444543 
 705 04e8 E4040000 	  _dict_entry 3+F_IFUNC,DDR,DDR_IDX //const_ddr 
 705      12000000 
 705      43444452 
 706 04f4 F0040000 	  _dict_entry 6+F_CMD,DATALN,DATALN_IDX //data_line  
 706      11000000 
 706      26444154 
 706      414C4E00 
 707 0504 FC040000 	  _dict_entry 4+F_CMD,DATA,DATA_IDX //data  
 707      10000000 
 707      24444154 
 707      41000000 
 708 0514 0C050000 	  _dict_entry 3+F_IFUNC,CRL,CRL_IDX //const_cr1 
 708      0F000000 
 708      4343524C 
 709 0520 1C050000 	  _dict_entry 3+F_IFUNC,CRH,CRH_IDX //const_cr2 
 709      0E000000 
 709      43435248 
 710 052c 28050000 	  _dict_entry 4+F_CFUNC,CHAR,CHAR_IDX //char
 710      0D000000 
 710      84434841 
 710      52000000 
 711 053c 34050000 	  _dict_entry 3+F_CMD,BYE,BYE_IDX //bye 
 711      0C000000 
 711      23425945 
 712 0548 44050000 	  _dict_entry 5+F_CMD,BTOGL,BTOGL_IDX //bit_toggle
 712      0B000000 
 712      2542544F 
ARM GAS  tinyBasic.s 			page 30


 712      474C0000 
 713 0558 50050000 	  _dict_entry 5+F_IFUNC,BTEST,BTEST_IDX //bit_test 
 713      0A000000 
 713      45425445 
 713      53540000 
 714 0568 60050000 	  _dict_entry 4+F_CMD,BSET,BSET_IDX //bit_set 
 714      09000000 
 714      24425345 
 714      54000000 
 715 0578 70050000 	  _dict_entry 4+F_CMD,BRES,BRES_IDX //bit_reset
 715      08000000 
 715      24425245 
 715      53000000 
 716 0588 80050000 	  _dict_entry 3+F_IFUNC,BIT,BIT_IDX //bitmask
 716      07000000 
 716      43424954 
 717 0594 90050000 	  _dict_entry 3+F_CMD,AWU,AWU_IDX //awu 
 717      06000000 
 717      23415755 
 718 05a0 9C050000 	  _dict_entry 7+F_CMD,AUTORUN,AUTORUN_IDX //autorun
 718      05000000 
 718      27415554 
 718      4F52554E 
 719 05b0 A8050000 	  _dict_entry 3+F_IFUNC,ASC,ASC_IDX //ascii
 719      04000000 
 719      43415343 
 720 05bc B8050000 	  _dict_entry 3+F_IFUNC,AND,AND_IDX //bit_and
 720      03000000 
 720      43414E44 
 721 05c8 C4050000 	  _dict_entry 7+F_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 721      02000000 
 721      47414443 
 721      52454144 
 722 05d8 D0050000 	  _dict_entry 5+F_CMD,ADCON,ADCON_IDX //power_adc 
 722      01000000 
 722      25414443 
 722      4F4E0000 
 723              	first_link: 
 724 05e8 E0050000 	  .word LINK 
 725 05ec 00000000 	  .word ABS_IDX 
 726              	  .equ LINK,. 
 727              	kword_dict: // first name field 
 728 05f0 43       	  .byte 3+F_IFUNC
 729 05f1 414253   	  .ascii "ABS" 
 730              	  .p2align 2 
 731              	
 732              	//comands and fonctions address table 	
 733              	code_addr:
 734 05f4 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 734      00000000 
 734      00000000 
 734      00000000 
 734      00000000 
 735 0614 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 735      00000000 
 735      00000000 
 735      00000000 
ARM GAS  tinyBasic.s 			page 31


 735      00000000 
 736 0630 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 736      00000000 
 736      00000000 
 736      00000000 
 736      00000000 
 737 0654 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 737      00000000 
 737      00000000 
 737      00000000 
 737      00000000 
 738 0674 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 738      00000000 
 738      00000000 
 738      00000000 
 738      00000000 
 739 0694 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 739      00000000 
 739      00000000 
 739      00000000 
 739      00000000 
 740 06b4 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 740      00000000 
 740      00000000 
 740      00000000 
 740      00000000 
 741 06d4 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 741      00000000 
 741      00000000 
 741      00000000 
 741      00000000 
 742 06f4 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 742      00000000 
 742      00000000 
 742      00000000 
 742      00000000 
 743 0714 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 743      00000000 
 743      00000000 
 743      00000000 
 743      00000000 
 744 0734 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 744      00000000 
 744      00000000 
 744      00000000 
 744      00000000 
 745 0754 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 745      00000000 
 745      00000000 
 745      00000000 
 745      00000000 
 746 0774 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
 746      00000000 
 746      00000000 
 746      00000000 
 746      00000000 
 747 078c 00000000 		.word 0 
ARM GAS  tinyBasic.s 			page 32


 748              	
 749              	/**********************************
 750              	    BASIC commands and functions 
 751              	**********************************/
 752              	
 753              	/*******************************
 754              	  BASIC:  ABS expr 
 755              	  input:
 756              	    none 
 757              	  output:
 758              	    r0    token type 
 759              	    r1    abs(expr)
 760              	  use:
 761              	    none 
 762              	******************************/
 763              	    _FUNC abs 
 764 0790 00B5FFF7 	    _CALL arg_list
 764      FEFF5DF8 
 764      04EB
 765 079a 0128     	    cmp r0,#1 
 766 079c 01D0     	    beq 1f 
 767 079e FFF7FEBF 	    b syntax_error 
 768 07a2 5CF8041B 	1:  _POP r1 
 769 07a6 11F0004F 	    tst r1,#(1<<31)
 770 07aa 01D0     	    beq 9f
 771 07ac C1F10001 	    rsb r1,#0 
 772 07b0 4FF08400 	9:  mov r0,#TK_INTGR
 773 07b4 7047     	   _RET 
 774              	
 775 07b6 0000     	    _FUNC power_adc
 776 07b8 7047     	    _RET
 777              	
 778 07ba 0000     	    _FUNC analog_read
 779 07bc 7047     	    _RET
 780              	
 781 07be 0000     	    _FUNC bit_and
 782 07c0 7047     	    _RET
 783              	
 784 07c2 0000     	    _FUNC ascii
 785 07c4 7047     	    _RET
 786              	
 787 07c6 0000     	    _FUNC autorun
 788 07c8 7047     	    _RET
 789              	
 790 07ca 0000     	    _FUNC awu
 791 07cc 7047     	    _RET
 792              	
 793 07ce 0000     	    _FUNC bitmask
 794 07d0 7047     	    _RET 
 795              	
 796              	  
 797              	  /*********************************
 798              	   BASIC: BRES adr, mask   
 799              	   reset bits [adr]= [adr] & ~mask  
 800              	   input:
 801              	     none 
 802              	    output;
ARM GAS  tinyBasic.s 			page 33


 803              	      none 
 804              	    use:
 805              	      r8   temp
 806              	      r9   temp 
 807              	*******************************/     
 808 07d2 0000     	  _FUNC bit_reset
 809 07d4 00B5FFF7 	    _CALL arg_list 
 809      FEFF5DF8 
 809      04EB
 810 07de 0228     	    cmp r0,#2 
 811 07e0 01D0     	    beq 1f 
 812 07e2 FFF7FEBF 	    b syntax_error 
 813 07e6 5CF8041B 	1:  _POP r1 //mask 
 814 07ea 5CF8040B 	    _POP r0 //address 
 815 07ee D0F80090 	    ldr r9,[r0] 
 816 07f2 81F0FF31 	    eor r1,#-1 // ~mask 
 817 07f6 01EA0901 	    and r1,r9
 818 07fa 0160     	    str r1,[r0]
 819 07fc 00F064B9 	    b interp_loop 
 820              	
 821              	
 822              	/*********************************
 823              	   BASIC: BSET adr, mask   
 824              	   reset bits [adr]= [adr] & ~mask  
 825              	   input:
 826              	      none 
 827              	    output;
 828              	      none 
 829              	    use:
 830              	      r8   temp
 831              	      r9   temp  
 832              	*******************************/     
 833              	    _FUNC bit_set
 834 0800 00B5FFF7 	    _CALL arg_list 
 834      FEFF5DF8 
 834      04EB
 835 080a 0228     	    cmp r0,#2 
 836 080c 01D0     	    beq 1f 
 837 080e FFF7FEBF 	    b syntax_error 
 838 0812 5CF8041B 	1:  _POP r1 //mask 
 839 0816 5CF8040B 	    _POP r0 //address 
 840 081a D0F80090 	    ldr r9,[r0] 
 841 081e 41EA0901 	    orr r1,r9
 842 0822 0160     	    str r1,[r0]
 843 0824 00F064B9 	    b interp_loop 
 844              	
 845              	  /*********************************
 846              	   BASIC: BTOGL adr, mask   
 847              	   reset bits [adr]= [adr] & ~mask  
 848              	   input:
 849              	     r0    adr 
 850              	     r1    mask 
 851              	    output;
 852              	      none 
 853              	    use:
 854              	      r8   temp
 855              	      r9   temp  
ARM GAS  tinyBasic.s 			page 34


 856              	*******************************/     
 857              	  _FUNC bit_toggle
 858 0828 00B5FFF7 	    _CALL arg_list 
 858      FEFF5DF8 
 858      04EB
 859 0832 0228     	    cmp r0,#2 
 860 0834 01D0     	    beq 1f 
 861 0836 FFF7FEBF 	    b syntax_error 
 862 083a 5CF8041B 	1:  _POP r1 //mask 
 863 083e 5CF8040B 	    _POP r0 //address 
 864 0842 D0F80090 	    ldr r9,[r0] 
 865 0846 81EA0901 	    eor r1,r9
 866 084a 0160     	    str r1,[r0]
 867 084c 00F064B9 	    b interp_loop 
 868              	
 869              	    _FUNC bit_test
 870 0850 00F064B9 	    b interp_loop
 871              	
 872              	    _FUNC bye
 873 0854 00F064B9 	    b interp_loop
 874              	
 875              	    _FUNC char
 876 0858 00F064B9 	    b interp_loop
 877              	
 878              	    _FUNC const_cr2
 879 085c 00F064B9 	    b interp_loop 
 880              	
 881              	    _FUNC const_cr1
 882 0860 00F064B9 	    b interp_loop
 883              	
 884              	    _FUNC data
 885 0864 00F064B9 	    b interp_loop
 886              	
 887              	    _FUNC data_line
 888 0868 00F064B9 	    b interp_loop
 889              	
 890              	    _FUNC const_ddr
 891 086c 00F064B9 	    b interp_loop
 892              	
 893              	    _FUNC dec_base
 894 0870 00F064B9 	    b interp_loop
 895              	
 896              	    _FUNC directory
 897 0874 00F064B9 	    b interp_loop
 898              	
 899              	    _FUNC do_loop
 900 0878 00F064B9 	    b interp_loop
 901              	
 902              	    _FUNC digital_read
 903 087c 00F064B9 	    b interp_loop
 904              	
 905              	    _FUNC digital_write
 906 0880 00F064B9 	    b interp_loop 
 907              	
 908              	    _FUNC cmd_end
 909 0884 00F064B9 	    b interp_loop
 910              	
ARM GAS  tinyBasic.s 			page 35


 911              	    _FUNC const_eeprom_base
 912 0888 00F064B9 	    b interp_loop
 913              	
 914              	    _FUNC fcpu
 915 088c 00F064B9 	    b interp_loop
 916              	
 917              	    _FUNC for
 918 0890 00F064B9 	    b interp_loop
 919              	
 920              	    _FUNC forget
 921 0894 00F064B9 	    b interp_loop
 922              	
 923              	    _FUNC gosub
 924 0898 00F064B9 	    b interp_loop
 925              	
 926              	    _FUNC goto
 927 089c 00F064B9 	    b interp_loop
 928              	
 929              	    _FUNC gpio
 930 08a0 00F064B9 	    b interp_loop 
 931              	
 932              	    _FUNC hex_base
 933 08a4 00F064B9 	    b interp_loop
 934              	
 935              	    _FUNC const_idr
 936 08a8 00F064B9 	    b interp_loop
 937              	
 938              	    _FUNC if
 939 08ac 00F064B9 	    b interp_loop
 940              	
 941              	    _FUNC input_var
 942 08b0 00F064B9 	    b interp_loop
 943              	
 944              	    _FUNC invert
 945 08b4 00F064B9 	    b interp_loop
 946              	
 947              	    _FUNC enable_iwdg
 948 08b8 00F064B9 	    b interp_loop
 949              	
 950              	    _FUNC refresh_iwdg
 951 08bc 00F064B9 	    b interp_loop
 952              	
 953              	    _FUNC key
 954 08c0 00F064B9 	    b interp_loop 
 955              	
 956              	/******************************
 957              	  BASIC: [let] var=expr 
 958              	         [let] @(expr)=expr
 959              	  input:
 960              	    none 
 961              	  output:
 962              	    none 
 963              	  use:
 964              	
 965              	****************************/         
 966              	    _FUNC let
 967 08c4 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 36


 967      FEFF5DF8 
 967      04EB
 968 08ce 8528     	    cmp r0,#TK_VAR
 969 08d0 03D0     	    beq let_var 
 970 08d2 0628     	    cmp r0,#TK_ARRAY 
 971 08d4 06D0     	    beq let_array 
 972 08d6 FFF7FEBF 	    b syntax_error 
 973              	let_var:
 974 08da 00B5FFF7 	    _CALL get_array_element
 974      FEFF5DF8 
 974      04EB
 975              	let_array: 
 976 08e4 4CF8040D 	    _PUSH r0 
 977 08e8 00B5FFF7 	    _CALL next_token 
 977      FEFF5DF8 
 977      04EB
 978 08f2 3228     	    cmp r0,#TK_EQUAL 
 979 08f4 01D0     	    beq 1f 
 980 08f6 FFF7FEBF 	    b syntax_error 
 981 08fa 00B5FFF7 	1:  _CALL relation  
 981      FEFF5DF8 
 981      04EB
 982 0904 8428     	    cmp r0,#TK_INTGR
 983 0906 01D0     	    beq 2f 
 984 0908 FFF7FEBF 	    b syntax_error 
 985 090c 5CF8040B 	2:  _POP r0 
 986 0910 0160     	    str r1,[r0]
 987 0912 4FF00000 	    mov r0,#TK_NONE 
 988 0916 00F064B9 	    b interp_loop 
 989              	
 990 091a 0000     	    _FUNC list
 991 091c 00F064B9 	    b interp_loop
 992              	
 993              	    _FUNC load
 994 0920 00F064B9 	    b interp_loop
 995              	
 996              	    _FUNC log2
 997 0924 00F064B9 	    b interp_loop
 998              	
 999              	    _FUNC lshift
 1000 0928 00F064B9 	    b interp_loop
 1001              	
 1002              	    _FUNC muldiv
 1003 092c 00F064B9 	    b interp_loop
 1004              	
 1005              	    _FUNC next
 1006 0930 00F064B9 	    b interp_loop
 1007              	
 1008              	    _FUNC new
 1009 0934 00F064B9 	    b interp_loop 
 1010              	
 1011              	    _FUNC func_not
 1012 0938 00F064B9 	    b interp_loop
 1013              	
 1014              	    _FUNC const_odr
 1015 093c 00F064B9 	    b interp_loop
 1016              	
ARM GAS  tinyBasic.s 			page 37


 1017              	    _FUNC bit_or
 1018 0940 00F064B9 	    b interp_loop
 1019              	
 1020              	    _FUNC pad_ref
 1021 0944 00F064B9 	    b interp_loop
 1022              	
 1023              	    _FUNC pause
 1024 0948 00F064B9 	    b interp_loop
 1025              	
 1026              	    _FUNC pin_mode
 1027 094c 00F064B9 	    b interp_loop
 1028              	
 1029              	    _FUNC peek
 1030 0950 00F064B9 	    b interp_loop
 1031              	
 1032              	    _FUNC const_input
 1033 0954 00F064B9 	    b interp_loop 
 1034              	
 1035              	    _FUNC poke
 1036 0958 00F064B9 	    b interp_loop
 1037              	
 1038              	    _FUNC const_output
 1039 095c 00F064B9 	    b interp_loop
 1040              	
 1041              	    _FUNC print
 1042 0960 00F064B9 	    b interp_loop
 1043              	
 1044              	    _FUNC const_porta
 1045 0964 00F064B9 	    b interp_loop
 1046              	
 1047              	    _FUNC const_portb
 1048 0968 00F064B9 	    b interp_loop
 1049              	
 1050              	    _FUNC const_portc
 1051 096c 00F064B9 	    b interp_loop
 1052              	
 1053              	    _FUNC const_portd
 1054 0970 00F064B9 	    b interp_loop
 1055              	
 1056              	    _FUNC const_porte
 1057 0974 00F064B9 	    b interp_loop 
 1058              	
 1059              	    _FUNC const_portf
 1060 0978 00F064B9 	    b interp_loop
 1061              	
 1062              	    _FUNC const_portg
 1063 097c 00F064B9 	    b interp_loop
 1064              	
 1065              	    _FUNC const_porth
 1066 0980 00F064B9 	    b interp_loop
 1067              	
 1068              	    _FUNC const_porti
 1069 0984 00F064B9 	    b interp_loop
 1070              	
 1071              	    _FUNC qkey
 1072 0988 00F064B9 	    b interp_loop
 1073              	
ARM GAS  tinyBasic.s 			page 38


 1074              	    _FUNC read
 1075 098c 00F064B9 	    b interp_loop
 1076              	
 1077              	    _FUNC remark
 1078 0990 00F064B9 	    b interp_loop 
 1079              	
 1080              	    _FUNC restore
 1081 0994 00F064B9 	    b interp_loop
 1082              	
 1083              	    _FUNC return
 1084 0998 00F064B9 	    b interp_loop
 1085              	
 1086              	    _FUNC  random
 1087 099c 00F064B9 	    b interp_loop
 1088              	
 1089              	    _FUNC rshift
 1090 09a0 00F064B9 	    b interp_loop
 1091              	
 1092              	    _FUNC run
 1093 09a4 00F064B9 	    b interp_loop
 1094              	
 1095              	    _FUNC save
 1096 09a8 00F064B9 	    b interp_loop
 1097              	
 1098              	    _FUNC show
 1099 09ac 00F064B9 	    b interp_loop
 1100              	
 1101              	    _FUNC size
 1102 09b0 00F064B9 	    b interp_loop 
 1103              	
 1104              	    _FUNC sleep
 1105 09b4 00F064B9 	    b interp_loop
 1106              	
 1107              	    _FUNC spi_read
 1108 09b8 00F064B9 	    b interp_loop
 1109              	
 1110              	    _FUNC spi_enable
 1111 09bc 00F064B9 	    b interp_loop
 1112              	
 1113              	    _FUNC spi_select
 1114 09c0 00F064B9 	    b interp_loop
 1115              	
 1116              	    _FUNC spi_write
 1117 09c4 00F064B9 	    b interp_loop
 1118              	
 1119              	    _FUNC step
 1120 09c8 00F064B9 	    b interp_loop
 1121              	
 1122              	    _FUNC stop
 1123 09cc 00F064B9 	    b interp_loop
 1124              	
 1125              	    _FUNC get_ticks
 1126 09d0 00F064B9 	    b interp_loop 
 1127              	
 1128              	    _FUNC set_timer
 1129 09d4 00F064B9 	    b interp_loop
 1130              	
ARM GAS  tinyBasic.s 			page 39


 1131              	    _FUNC timeout
 1132 09d8 00F064B9 	    b interp_loop
 1133              	
 1134              	    _FUNC to
 1135 09dc 00F064B9 	    b interp_loop
 1136              	
 1137              	    _FUNC tone
 1138 09e0 00F064B9 	    b interp_loop
 1139              	
 1140              	    _FUNC ubound
 1141 09e4 00F064B9 	    b interp_loop
 1142              	
 1143              	    _FUNC uflash
 1144 09e8 00F064B9 	    b interp_loop
 1145              	
 1146              	    _FUNC until
 1147 09ec 00F064B9 	    b interp_loop
 1148              	
 1149              	    _FUNC usr
 1150 09f0 00F064B9 	    b interp_loop 
 1151              	
 1152              	    _FUNC wait
 1153 09f4 00F064B9 	    b interp_loop
 1154              	
 1155              	    _FUNC words
 1156 09f8 00F064B9 	    b interp_loop
 1157              	
 1158              	    _FUNC write
 1159 09fc 00F064B9 	    b interp_loop
 1160              	
 1161              	    _FUNC bit_xor
 1162 0a00 00F064B9 	    b interp_loop
 1163              	
 1164              	    _FUNC transmit
 1165 0a04 00F064B9 	    b interp_loop
 1166              	
 1167              	    _FUNC receive
 1168 0a08 00F064B9 	    b interp_loop 
 1169              	
 1170              	
 1171              	/*************************************************
 1172              	   extra FLASH memory not used by Tiny BASIC
 1173              	   is used to save BASIC programs.
 1174              	************************************************/
 1175 0a0c 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 1175      00000000 
 1175      00000000 
 1175      00000000 
 1175      00000000 
 1176              	  .section .fs
 1177              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 40


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 41


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 42


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 43


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:30     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:31     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:32     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:33     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:39     *ABS*:0000000000000000 INP
      tbi_macros.inc:40     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:50     *ABS*:0000000000000080 TK_CMD
      tbi_macros.inc:51     *ABS*:0000000000000081 TK_IFUNC
      tbi_macros.inc:52     *ABS*:0000000000000082 TK_CFUNC
      tbi_macros.inc:53     *ABS*:0000000000000083 TK_CONST
      tbi_macros.inc:54     *ABS*:0000000000000084 TK_INTGR
      tbi_macros.inc:55     *ABS*:0000000000000085 TK_VAR
      tbi_macros.inc:56     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:57     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:58     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:59     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:60     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:61     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:62     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:63     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:64     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:65     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:66     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:67     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:68     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:69     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:114    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:116    *ABS*:0000000000000004 CELL_SIZE
ARM GAS  tinyBasic.s 			page 44


      tbi_macros.inc:122    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:128    *ABS*:0000000000000000 IN
      tbi_macros.inc:129    *ABS*:0000000000000004 IN_SAVED
      tbi_macros.inc:130    *ABS*:0000000000000008 COUNT
      tbi_macros.inc:131    *ABS*:000000000000000c BASICPTR
      tbi_macros.inc:132    *ABS*:0000000000000010 DATAPTR
      tbi_macros.inc:133    *ABS*:0000000000000014 DATA
      tbi_macros.inc:134    *ABS*:0000000000000018 DATALEN
      tbi_macros.inc:135    *ABS*:000000000000001c BASE
      tbi_macros.inc:136    *ABS*:0000000000000020 TICKS
      tbi_macros.inc:137    *ABS*:0000000000000024 TIMER
      tbi_macros.inc:138    *ABS*:0000000000000028 SEED
      tbi_macros.inc:139    *ABS*:000000000000002c FSPTR
      tbi_macros.inc:140    *ABS*:0000000000000030 FFREE
      tbi_macros.inc:141    *ABS*:0000000000000034 TXTBGN
      tbi_macros.inc:142    *ABS*:0000000000000038 TXTEND
      tbi_macros.inc:143    *ABS*:000000000000003c LOOP_DEPTH
      tbi_macros.inc:144    *ABS*:0000000000000040 ARRAY_SIZE
      tbi_macros.inc:145    *ABS*:0000000000000044 FLAGS
      tbi_macros.inc:146    *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:147    *ABS*:000000000000004c RX_HEAD
      tbi_macros.inc:148    *ABS*:0000000000000050 RX_TAIL
      tbi_macros.inc:149    *ABS*:0000000000000054 RX_QUEUE
      tbi_macros.inc:150    *ABS*:0000000000000064 VARS
      tbi_macros.inc:151    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:152    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:153    *ABS*:00000000000000cc FREE_RAM
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
ARM GAS  tinyBasic.s 			page 45


       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
ARM GAS  tinyBasic.s 			page 46


       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:32     *ABS*:0000000000000000 FRUN
         tinyBasic.s:33     *ABS*:0000000000000001 FTRAP
         tinyBasic.s:34     *ABS*:0000000000000002 FLOOP
         tinyBasic.s:35     *ABS*:0000000000000003 FSLEEP
         tinyBasic.s:36     *ABS*:0000000000000004 FBREAK
         tinyBasic.s:37     *ABS*:0000000000000005 FCOMP
         tinyBasic.s:39     *ABS*:0000000000000006 FAUTORUN
         tinyBasic.s:40     *ABS*:0000000008001c00 AUTORUN_NAME
         tinyBasic.s:42     *ABS*:0000000000000006 FIRST_DATA_ITEM
         tinyBasic.s:43     *ABS*:0000000000007fff MAX_LINENO
         tinyBasic.s:60     .text:0000000000000000 strlen
         tinyBasic.s:60     .text:0000000000000000 $t
         tinyBasic.s:84     .text:000000000000001c cmove
         tinyBasic.s:96     .text:0000000000000038 move_from_end
         tinyBasic.s:90     .text:0000000000000028 move_from_low
         tinyBasic.s:118    .text:0000000000000050 strcpy
         tinyBasic.s:144    .text:0000000000000064 cp_cstr
         tinyBasic.s:175    .text:0000000000000090 syntax_error
         tinyBasic.s:190    .text:0000000000000098 tb_error
         tinyBasic.s:198    .text:00000000000000b0 err_msg
         tinyBasic.s:543    .text:0000000000000304 warm_start
         tinyBasic.s:199    .text:00000000000000b0 $d
         tinyBasic.s:205    .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:206    .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:207    .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:208    .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:209    .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:210    .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:211    .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:212    .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:213    .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:214    .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:215    .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:216    .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:217    .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:218    .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:219    .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:221    .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:222    .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:223    .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:240    .text:00000000000000f0 $t
         tinyBasic.s:240    .text:00000000000000f0 arg_list
ARM GAS  tinyBasic.s 			page 47


         tinyBasic.s:256    .text:00000000000000fc func_args
         tinyBasic.s:276    .text:0000000000000100 BTGL
         tinyBasic.s:294    .text:0000000000000104 search_dict
         tinyBasic.s:327    .text:0000000000000144 prt_version
         tinyBasic.s:351    .text:00000000000001aa version_msg
         tinyBasic.s:353    .text:00000000000001ca version
         tinyBasic.s:352    .text:00000000000001aa $d
         tinyBasic.s:368    .text:00000000000001cc cold_start
         tinyBasic.s:387    .text:0000000000000214 dstack_empty
         tinyBasic.s:385    .text:0000000000000210 src_addr
         tinyBasic.s:609    .rodata:00000000000000d0 ulast
         tinyBasic.s:584    .rodata:0000000000000000 uzero
         tinyBasic.s:436    .text:0000000000000254 warm_init
         tinyBasic.s:459    .text:0000000000000270 cmd_line
         tinyBasic.s:386    .text:0000000000000210 $d
         tinyBasic.s:400    .text:0000000000000218 $t
         tinyBasic.s:400    .text:0000000000000218 clear_vars
         tinyBasic.s:416    .text:0000000000000238 clear_basic
         tinyBasic.s:529    .text:00000000000002fe tib
         tinyBasic.s:577    .text:0000000000000314 compile
         tinyBasic.s:470    .text:000000000000029e interpreter
         tinyBasic.s:490    .text:00000000000002cc interp_loop
         tinyBasic.s:475    .text:00000000000002a6 next_line
         tinyBasic.s:524    .text:00000000000002fc next_token
         tinyBasic.s:973    .rodata.dictionary:00000000000008da let_var
         tinyBasic.s:975    .rodata.dictionary:00000000000008e4 let_array
         tinyBasic.s:529    .text:00000000000002fe $d
         tinyBasic.s:543    .text:0000000000000302 $t
         tinyBasic.s:559    .text:000000000000030c get_array_element
         tinyBasic.s:563    .text:0000000000000310 relation
         tinyBasic.s:1177   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:606    .rodata:0000000000000054 $d
         tinyBasic.s:616    *ABS*:0000000000000000 link
         tinyBasic.s:617    .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:726    .rodata.dictionary:00000000000005f0 LINK
         tinyBasic.s:621    .rodata.dictionary:000000000000000c $d
         tinyBasic.s:723    .rodata.dictionary:00000000000005e8 first_link
         tinyBasic.s:727    .rodata.dictionary:00000000000005f0 kword_dict
         tinyBasic.s:733    .rodata.dictionary:00000000000005f4 code_addr
         tinyBasic.s:763    .rodata.dictionary:0000000000000790 abs
         tinyBasic.s:775    .rodata.dictionary:00000000000007b8 power_adc
         tinyBasic.s:778    .rodata.dictionary:00000000000007bc analog_read
         tinyBasic.s:781    .rodata.dictionary:00000000000007c0 bit_and
         tinyBasic.s:784    .rodata.dictionary:00000000000007c4 ascii
         tinyBasic.s:787    .rodata.dictionary:00000000000007c8 autorun
         tinyBasic.s:790    .rodata.dictionary:00000000000007cc awu
         tinyBasic.s:793    .rodata.dictionary:00000000000007d0 bitmask
         tinyBasic.s:808    .rodata.dictionary:00000000000007d4 bit_reset
         tinyBasic.s:833    .rodata.dictionary:0000000000000800 bit_set
         tinyBasic.s:869    .rodata.dictionary:0000000000000850 bit_test
         tinyBasic.s:857    .rodata.dictionary:0000000000000828 bit_toggle
         tinyBasic.s:872    .rodata.dictionary:0000000000000854 bye
         tinyBasic.s:875    .rodata.dictionary:0000000000000858 char
         tinyBasic.s:878    .rodata.dictionary:000000000000085c const_cr2
         tinyBasic.s:881    .rodata.dictionary:0000000000000860 const_cr1
         tinyBasic.s:884    .rodata.dictionary:0000000000000864 data
         tinyBasic.s:887    .rodata.dictionary:0000000000000868 data_line
ARM GAS  tinyBasic.s 			page 48


         tinyBasic.s:890    .rodata.dictionary:000000000000086c const_ddr
         tinyBasic.s:893    .rodata.dictionary:0000000000000870 dec_base
         tinyBasic.s:896    .rodata.dictionary:0000000000000874 directory
         tinyBasic.s:899    .rodata.dictionary:0000000000000878 do_loop
         tinyBasic.s:902    .rodata.dictionary:000000000000087c digital_read
         tinyBasic.s:905    .rodata.dictionary:0000000000000880 digital_write
         tinyBasic.s:908    .rodata.dictionary:0000000000000884 cmd_end
         tinyBasic.s:911    .rodata.dictionary:0000000000000888 const_eeprom_base
         tinyBasic.s:914    .rodata.dictionary:000000000000088c fcpu
         tinyBasic.s:917    .rodata.dictionary:0000000000000890 for
         tinyBasic.s:920    .rodata.dictionary:0000000000000894 forget
         tinyBasic.s:923    .rodata.dictionary:0000000000000898 gosub
         tinyBasic.s:926    .rodata.dictionary:000000000000089c goto
         tinyBasic.s:929    .rodata.dictionary:00000000000008a0 gpio
         tinyBasic.s:932    .rodata.dictionary:00000000000008a4 hex_base
         tinyBasic.s:935    .rodata.dictionary:00000000000008a8 const_idr
         tinyBasic.s:938    .rodata.dictionary:00000000000008ac if
         tinyBasic.s:941    .rodata.dictionary:00000000000008b0 input_var
         tinyBasic.s:944    .rodata.dictionary:00000000000008b4 invert
         tinyBasic.s:947    .rodata.dictionary:00000000000008b8 enable_iwdg
         tinyBasic.s:950    .rodata.dictionary:00000000000008bc refresh_iwdg
         tinyBasic.s:953    .rodata.dictionary:00000000000008c0 key
         tinyBasic.s:966    .rodata.dictionary:00000000000008c4 let
         tinyBasic.s:990    .rodata.dictionary:000000000000091c list
         tinyBasic.s:993    .rodata.dictionary:0000000000000920 load
         tinyBasic.s:996    .rodata.dictionary:0000000000000924 log2
         tinyBasic.s:999    .rodata.dictionary:0000000000000928 lshift
         tinyBasic.s:1002   .rodata.dictionary:000000000000092c muldiv
         tinyBasic.s:1005   .rodata.dictionary:0000000000000930 next
         tinyBasic.s:1008   .rodata.dictionary:0000000000000934 new
         tinyBasic.s:1011   .rodata.dictionary:0000000000000938 func_not
         tinyBasic.s:1014   .rodata.dictionary:000000000000093c const_odr
         tinyBasic.s:1017   .rodata.dictionary:0000000000000940 bit_or
         tinyBasic.s:1020   .rodata.dictionary:0000000000000944 pad_ref
         tinyBasic.s:1023   .rodata.dictionary:0000000000000948 pause
         tinyBasic.s:1026   .rodata.dictionary:000000000000094c pin_mode
         tinyBasic.s:1029   .rodata.dictionary:0000000000000950 peek
         tinyBasic.s:1032   .rodata.dictionary:0000000000000954 const_input
         tinyBasic.s:1035   .rodata.dictionary:0000000000000958 poke
         tinyBasic.s:1038   .rodata.dictionary:000000000000095c const_output
         tinyBasic.s:1041   .rodata.dictionary:0000000000000960 print
         tinyBasic.s:1044   .rodata.dictionary:0000000000000964 const_porta
         tinyBasic.s:1047   .rodata.dictionary:0000000000000968 const_portb
         tinyBasic.s:1050   .rodata.dictionary:000000000000096c const_portc
         tinyBasic.s:1053   .rodata.dictionary:0000000000000970 const_portd
         tinyBasic.s:1056   .rodata.dictionary:0000000000000974 const_porte
         tinyBasic.s:1059   .rodata.dictionary:0000000000000978 const_portf
         tinyBasic.s:1062   .rodata.dictionary:000000000000097c const_portg
         tinyBasic.s:1065   .rodata.dictionary:0000000000000980 const_porth
         tinyBasic.s:1068   .rodata.dictionary:0000000000000984 const_porti
         tinyBasic.s:1071   .rodata.dictionary:0000000000000988 qkey
         tinyBasic.s:1074   .rodata.dictionary:000000000000098c read
         tinyBasic.s:1077   .rodata.dictionary:0000000000000990 remark
         tinyBasic.s:1080   .rodata.dictionary:0000000000000994 restore
         tinyBasic.s:1083   .rodata.dictionary:0000000000000998 return
         tinyBasic.s:1086   .rodata.dictionary:000000000000099c random
         tinyBasic.s:1089   .rodata.dictionary:00000000000009a0 rshift
ARM GAS  tinyBasic.s 			page 49


         tinyBasic.s:1092   .rodata.dictionary:00000000000009a4 run
         tinyBasic.s:1095   .rodata.dictionary:00000000000009a8 save
         tinyBasic.s:1098   .rodata.dictionary:00000000000009ac show
         tinyBasic.s:1101   .rodata.dictionary:00000000000009b0 size
         tinyBasic.s:1104   .rodata.dictionary:00000000000009b4 sleep
         tinyBasic.s:1107   .rodata.dictionary:00000000000009b8 spi_read
         tinyBasic.s:1110   .rodata.dictionary:00000000000009bc spi_enable
         tinyBasic.s:1113   .rodata.dictionary:00000000000009c0 spi_select
         tinyBasic.s:1116   .rodata.dictionary:00000000000009c4 spi_write
         tinyBasic.s:1119   .rodata.dictionary:00000000000009c8 step
         tinyBasic.s:1122   .rodata.dictionary:00000000000009cc stop
         tinyBasic.s:1125   .rodata.dictionary:00000000000009d0 get_ticks
         tinyBasic.s:1128   .rodata.dictionary:00000000000009d4 set_timer
         tinyBasic.s:1131   .rodata.dictionary:00000000000009d8 timeout
         tinyBasic.s:1134   .rodata.dictionary:00000000000009dc to
         tinyBasic.s:1137   .rodata.dictionary:00000000000009e0 tone
         tinyBasic.s:1140   .rodata.dictionary:00000000000009e4 ubound
         tinyBasic.s:1143   .rodata.dictionary:00000000000009e8 uflash
         tinyBasic.s:1146   .rodata.dictionary:00000000000009ec until
         tinyBasic.s:1149   .rodata.dictionary:00000000000009f0 usr
         tinyBasic.s:1152   .rodata.dictionary:00000000000009f4 wait
         tinyBasic.s:1155   .rodata.dictionary:00000000000009f8 words
         tinyBasic.s:1158   .rodata.dictionary:00000000000009fc write
         tinyBasic.s:1161   .rodata.dictionary:0000000000000a00 bit_xor
         tinyBasic.s:1164   .rodata.dictionary:0000000000000a04 transmit
         tinyBasic.s:1167   .rodata.dictionary:0000000000000a08 receive
         tinyBasic.s:764    .rodata.dictionary:0000000000000790 $t
         tinyBasic.s:775    .rodata.dictionary:00000000000007b6 $d
         tinyBasic.s:776    .rodata.dictionary:00000000000007b8 $t
         tinyBasic.s:778    .rodata.dictionary:00000000000007ba $d
         tinyBasic.s:779    .rodata.dictionary:00000000000007bc $t
         tinyBasic.s:781    .rodata.dictionary:00000000000007be $d
         tinyBasic.s:782    .rodata.dictionary:00000000000007c0 $t
         tinyBasic.s:784    .rodata.dictionary:00000000000007c2 $d
         tinyBasic.s:785    .rodata.dictionary:00000000000007c4 $t
         tinyBasic.s:787    .rodata.dictionary:00000000000007c6 $d
         tinyBasic.s:788    .rodata.dictionary:00000000000007c8 $t
         tinyBasic.s:790    .rodata.dictionary:00000000000007ca $d
         tinyBasic.s:791    .rodata.dictionary:00000000000007cc $t
         tinyBasic.s:793    .rodata.dictionary:00000000000007ce $d
         tinyBasic.s:794    .rodata.dictionary:00000000000007d0 $t
         tinyBasic.s:808    .rodata.dictionary:00000000000007d2 $d
         tinyBasic.s:809    .rodata.dictionary:00000000000007d4 $t
         tinyBasic.s:834    .rodata.dictionary:0000000000000800 $t
         tinyBasic.s:858    .rodata.dictionary:0000000000000828 $t
         tinyBasic.s:870    .rodata.dictionary:0000000000000850 $t
         tinyBasic.s:873    .rodata.dictionary:0000000000000854 $t
         tinyBasic.s:876    .rodata.dictionary:0000000000000858 $t
         tinyBasic.s:879    .rodata.dictionary:000000000000085c $t
         tinyBasic.s:882    .rodata.dictionary:0000000000000860 $t
         tinyBasic.s:885    .rodata.dictionary:0000000000000864 $t
         tinyBasic.s:888    .rodata.dictionary:0000000000000868 $t
         tinyBasic.s:891    .rodata.dictionary:000000000000086c $t
         tinyBasic.s:894    .rodata.dictionary:0000000000000870 $t
         tinyBasic.s:897    .rodata.dictionary:0000000000000874 $t
         tinyBasic.s:900    .rodata.dictionary:0000000000000878 $t
         tinyBasic.s:903    .rodata.dictionary:000000000000087c $t
ARM GAS  tinyBasic.s 			page 50


         tinyBasic.s:906    .rodata.dictionary:0000000000000880 $t
         tinyBasic.s:909    .rodata.dictionary:0000000000000884 $t
         tinyBasic.s:912    .rodata.dictionary:0000000000000888 $t
         tinyBasic.s:915    .rodata.dictionary:000000000000088c $t
         tinyBasic.s:918    .rodata.dictionary:0000000000000890 $t
         tinyBasic.s:921    .rodata.dictionary:0000000000000894 $t
         tinyBasic.s:924    .rodata.dictionary:0000000000000898 $t
         tinyBasic.s:927    .rodata.dictionary:000000000000089c $t
         tinyBasic.s:930    .rodata.dictionary:00000000000008a0 $t
         tinyBasic.s:933    .rodata.dictionary:00000000000008a4 $t
         tinyBasic.s:936    .rodata.dictionary:00000000000008a8 $t
         tinyBasic.s:939    .rodata.dictionary:00000000000008ac $t
         tinyBasic.s:942    .rodata.dictionary:00000000000008b0 $t
         tinyBasic.s:945    .rodata.dictionary:00000000000008b4 $t
         tinyBasic.s:948    .rodata.dictionary:00000000000008b8 $t
         tinyBasic.s:951    .rodata.dictionary:00000000000008bc $t
         tinyBasic.s:954    .rodata.dictionary:00000000000008c0 $t
         tinyBasic.s:967    .rodata.dictionary:00000000000008c4 $t
         tinyBasic.s:990    .rodata.dictionary:000000000000091a $d
         tinyBasic.s:991    .rodata.dictionary:000000000000091c $t
         tinyBasic.s:994    .rodata.dictionary:0000000000000920 $t
         tinyBasic.s:997    .rodata.dictionary:0000000000000924 $t
         tinyBasic.s:1000   .rodata.dictionary:0000000000000928 $t
         tinyBasic.s:1003   .rodata.dictionary:000000000000092c $t
         tinyBasic.s:1006   .rodata.dictionary:0000000000000930 $t
         tinyBasic.s:1009   .rodata.dictionary:0000000000000934 $t
         tinyBasic.s:1012   .rodata.dictionary:0000000000000938 $t
         tinyBasic.s:1015   .rodata.dictionary:000000000000093c $t
         tinyBasic.s:1018   .rodata.dictionary:0000000000000940 $t
         tinyBasic.s:1021   .rodata.dictionary:0000000000000944 $t
         tinyBasic.s:1024   .rodata.dictionary:0000000000000948 $t
         tinyBasic.s:1027   .rodata.dictionary:000000000000094c $t
         tinyBasic.s:1030   .rodata.dictionary:0000000000000950 $t
         tinyBasic.s:1033   .rodata.dictionary:0000000000000954 $t
         tinyBasic.s:1036   .rodata.dictionary:0000000000000958 $t
         tinyBasic.s:1039   .rodata.dictionary:000000000000095c $t
         tinyBasic.s:1042   .rodata.dictionary:0000000000000960 $t
         tinyBasic.s:1045   .rodata.dictionary:0000000000000964 $t
         tinyBasic.s:1048   .rodata.dictionary:0000000000000968 $t
         tinyBasic.s:1051   .rodata.dictionary:000000000000096c $t
         tinyBasic.s:1054   .rodata.dictionary:0000000000000970 $t
         tinyBasic.s:1057   .rodata.dictionary:0000000000000974 $t
         tinyBasic.s:1060   .rodata.dictionary:0000000000000978 $t
         tinyBasic.s:1063   .rodata.dictionary:000000000000097c $t
         tinyBasic.s:1066   .rodata.dictionary:0000000000000980 $t
         tinyBasic.s:1069   .rodata.dictionary:0000000000000984 $t
         tinyBasic.s:1072   .rodata.dictionary:0000000000000988 $t
         tinyBasic.s:1075   .rodata.dictionary:000000000000098c $t
         tinyBasic.s:1078   .rodata.dictionary:0000000000000990 $t
         tinyBasic.s:1081   .rodata.dictionary:0000000000000994 $t
         tinyBasic.s:1084   .rodata.dictionary:0000000000000998 $t
         tinyBasic.s:1087   .rodata.dictionary:000000000000099c $t
         tinyBasic.s:1090   .rodata.dictionary:00000000000009a0 $t
         tinyBasic.s:1093   .rodata.dictionary:00000000000009a4 $t
         tinyBasic.s:1096   .rodata.dictionary:00000000000009a8 $t
         tinyBasic.s:1099   .rodata.dictionary:00000000000009ac $t
         tinyBasic.s:1102   .rodata.dictionary:00000000000009b0 $t
ARM GAS  tinyBasic.s 			page 51


         tinyBasic.s:1105   .rodata.dictionary:00000000000009b4 $t
         tinyBasic.s:1108   .rodata.dictionary:00000000000009b8 $t
         tinyBasic.s:1111   .rodata.dictionary:00000000000009bc $t
         tinyBasic.s:1114   .rodata.dictionary:00000000000009c0 $t
         tinyBasic.s:1117   .rodata.dictionary:00000000000009c4 $t
         tinyBasic.s:1120   .rodata.dictionary:00000000000009c8 $t
         tinyBasic.s:1123   .rodata.dictionary:00000000000009cc $t
         tinyBasic.s:1126   .rodata.dictionary:00000000000009d0 $t
         tinyBasic.s:1129   .rodata.dictionary:00000000000009d4 $t
         tinyBasic.s:1132   .rodata.dictionary:00000000000009d8 $t
         tinyBasic.s:1135   .rodata.dictionary:00000000000009dc $t
         tinyBasic.s:1138   .rodata.dictionary:00000000000009e0 $t
         tinyBasic.s:1141   .rodata.dictionary:00000000000009e4 $t
         tinyBasic.s:1144   .rodata.dictionary:00000000000009e8 $t
         tinyBasic.s:1147   .rodata.dictionary:00000000000009ec $t
         tinyBasic.s:1150   .rodata.dictionary:00000000000009f0 $t
         tinyBasic.s:1153   .rodata.dictionary:00000000000009f4 $t
         tinyBasic.s:1156   .rodata.dictionary:00000000000009f8 $t
         tinyBasic.s:1159   .rodata.dictionary:00000000000009fc $t
         tinyBasic.s:1162   .rodata.dictionary:0000000000000a00 $t
         tinyBasic.s:1165   .rodata.dictionary:0000000000000a04 $t
         tinyBasic.s:1168   .rodata.dictionary:0000000000000a08 $t
         tinyBasic.s:1175   .rodata.dictionary:0000000000000a0c $d
         tinyBasic.s:581    .text:0000000000000316 $d
         tinyBasic.s:1177   .text:0000000000000318 $d
         tinyBasic.s:355    .text:00000000000001cb $d
         tinyBasic.s:355    .text:00000000000001cc $t

UNDEFINED SYMBOLS
uart_putsz
uart_putc
_dstack
readln
_tib
