ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* GPIO input|output CNF|MODE values */
  86              	   //output CNF field 
  87              	   .equ GPIO_O_PP,0 
ARM GAS  tinyBasic.s 			page 3


  88              	   .equ GPIO_O_OD,(1<<2)
  89              	   .equ GPIO_O_AFPP,(2<<2) 
  90              	   .equ GPIO_O_AFOD,(3<<2)
  91              	  // output MODE field 
  92              	   .equ S2MHZ,2 
  93              	   .equ S10MHZ,1 
  94              	   .equ S50MHZ,3
  95              	   .equ OSPEED,S10MHZ      
  96              	   .equ OUTPUT_PP,GPIO_O_PP+OSPEED
  97              	   .equ OUTPUT_OD,GPIO_O_OD+OSPEED
  98              	   .equ OUTPUT_AFPP,GPIO_O_AFPP+OSPEED 
  99              	   .equ OUTPUT_AFOD,GPIO_AFOD+OSPEED 
 100              	  // input ODR 
 101              	   .equ PULLDOWN,0
 102              	   .equ PULLUPP,1
 103              	  // input CNF field 
 104              	   .equ ANALOG,0
 105              	   .equ FLOATING,(1<<2) 
 106              	   .equ PULL_RESISTOR,(2<<2)  
 107              	   .equ INPUT_ANA,ANALOG 
 108              	   .equ INPUT_FLOAT,FLOATING 
 109              	   .equ INPUT_PD,(PULL_RESISTOR<<1)+PULLDOWN 
 110              	   .equ INPUT_PU,(PULL_RESISTOR<<1)+PULLUP    
 111              	
 112              	   /* AFIO base address */
 113              	   .equ AFIO_BASE_ADR, 0x40010000
 114              	   
 115              	   /* AFIO registers offset */
 116              	   .equ AFIO_EVCR,0
 117              	   .equ AFIO_MAPR,4
 118              	   .equ AFIO_EXTICR1,8
 119              	   .equ AFIO_EXTICR2,12 
 120              	   .equ AFIO_EXTICR3,16
 121              	   .equ AFIO_EXTICR4,20
 122              	   .equ AFIO_MAPR2,28
 123              	   
 124              	    /* USART1 registers */
 125              	    .equ USART1_BASE_ADR, 0x40013800
 126              	    /* USARTx registers offset */
 127              	    .equ USART_SR, 0
 128              	    .equ USART_DR,4
 129              	    .equ USART_BRR,8
 130              	    .equ USART_CR1,12
 131              	    .equ USART_CR2,16
 132              	    .equ USART_CR3,20
 133              	    .equ USART_GTPR,24
 134              	
 135              	   /* systick */
 136              	    .equ STK_BASE_ADR, 0xE000E010
 137              	    /* registers offset */
 138              	    .equ STK_CTL, 0
 139              	    .equ STK_LOAD, 4
 140              	    .equ STK_VAL, 8
 141              	    .equ STK_CALIB, 12
 142              	
 143              	   /* system control block */
 144              	   .equ SCB_BASE_ADR, 0xE000ED00
ARM GAS  tinyBasic.s 			page 4


 145              	   /* registers offset */
 146              	   .equ SCB_CPUID, 0
 147              	   .equ SCB_ICSR, 4 
 148              	   .equ SCB_VTOR, 8
 149              	   .equ SCB_AIRCR, 12
 150              	   .equ SCB_SCR, 16
 151              	   .equ SCB_CCR, 20
 152              	   .equ SCB_SHPR1,24
 153              	   .equ SCB_SHPR2,28
 154              	   .equ SCB_SHPR3,32
 155              	   .equ SCB_SHCRS,36
 156              	   .equ SCB_CFSR,40
 157              	   .equ SCB_HFSR,44
 158              	   .equ SCB_MMAR,52
 159              	   .equ SCB_BFAR,56
 160              	   // key to to write in SCB_AIRCR 
 161              	   .equ SCB_VECTKEY,0x5fa 
 162              	   
 163              	   /* NVIC block */
 164              	   .equ NVIC_BASE_ADR, 0xE000E100
 165              	   .equ NVIC_ISER0, 0
 166              	   .equ NVIC_ISER1, 4
 167              	   .equ NVIC_ISER2, 8
 168              	   .equ NVIC_ICER0, 0x80
 169              	   .equ NVIC_ICER1, 0x84 
 170              	   .equ NVIC_ICER2, 0x88 
 171              	   .equ NVIC_ISPR0, 0x100
 172              	   .equ NVIC_ISPR1, 0x104
 173              	   .equ NVIC_ISPR2, 0x108 
 174              	   .equ NVIC_ICPR0, 0x180
 175              	   .equ NVIC_ICPR1, 0x184
 176              	   .equ NVIC_ICPR2, 0x188
 177              	   .equ NVIC_IABR0, 0x200
 178              	   .equ NVIC_IABR1, 0x204
 179              	   .equ NVIC_IABR2, 0x208
 180              	   .equ NVIC_IPR_BASE, 0x300 
 181              	
 182              	/* system control register */
 183              	.equ SCR_BASE_ADR,0xE000ED10
 184              	.equ SCR_SLEEPONEXIT,(1<<1)
 185              	.equ SCR_SLEEPDEEP,(1<<2)
 186              	.equ SCR_SEVONPEND,(1<<4)
 187              	
 188              	/* power control register */
 189              	.equ PWR_CR_ADR,0x40007000
 190              	.equ PWR_CR_LPDS,(1<<0)
 191              	.equ PWR_CR_PDDS,(1<<1)
 192              	.equ PWR_CR_CWUF,(1<<2)
 193              	.equ PWR_CR_CSBF,(1<<3)
 194              	.equ PWR_CR_PVDE,(1<<4)
 195              	.equ PWR_CR_PLS,(1<<5)
 196              	.equ PWR_CR_DBP,(1<<8)
 197              	
 198              	/* power control and statut register */
 199              	.equ PWR_CSR_ADR,0x40007004 
 200              	.equ PWR_CSR_WUF,(1<<0)
 201              	.equ PWR_CSR_SBF,(1<<1)
ARM GAS  tinyBasic.s 			page 5


 202              	.equ PWR_CSR_PVDO,(1<<2)
 203              	.equ PWR_CSR_EWUP,(1<<8)
 204              	
 205              	/* Window watchdog (WWDG) */
 206              	.equ WWDG_BASE_ADR,0x40002C00
 207              	.equ WWDG_CR,0
 208              	.equ WWDG_CFR,4
 209              	.equ WWDG_SR,8
 210              	
 211              	/* Independent watchdog (IWDG) */
 212              	.equ IWDG_BASE_ADR,0x40003000
 213              	.equ IWDG_KR,0 
 214              	.equ IWDG_PR,4
 215              	.equ IWDG_RLR,8
 216              	.equ IWDG_SR,12
 217              	
 218              	/*   ADC1 registers */
 219              	.equ ADC1_BASE_ADR, 0x40012400
 220              	.equ ADC_SR,0
 221              	.equ ADC_CR1,0X4
 222              	.equ ADC_CR2,0X8
 223              	.equ ADC_SMPR1,0XC
 224              	.equ ADC_SMPR2,0X10
 225              	.equ ADC_JOFR1,0X14
 226              	.equ ADC_JOFR2,0X18
 227              	.equ ADC_JOFR3,0X1C
 228              	.equ ADC_JOFR4,0X20
 229              	.equ ADC_HTR,0X24
 230              	.equ ADC_LTR,0X28
 231              	.equ ADC_SQR1,0X2C
 232              	.equ ADC_SQR2,0X30
 233              	.equ ADC_SQR3,0X34
 234              	.equ ADC_JSQR,0X38
 235              	.equ ADC_JDR1,0X3C
 236              	.equ ADC_JDR2,0X40
 237              	.equ ADC_JDR3,0X44
 238              	.equ ADC_JDR4,0X48
 239              	.equ ADC_DR,0X4C
 240              	
 241              	/* timer registers */
 242              	.equ TIMER1_BASE_ADR,0X40012C00
 243              	.equ TIMER2_BASE_ADR,0x40000000
 244              	.equ TIMER3_BASE_ADR,0x40000400
 245              	.equ TIMER4_BASE_ADR,0x40000800
 246              	
 247              	.equ TIM_CR1,0
 248              	.equ TIM_CR2,4
 249              	.equ TIM_SMCR,8
 250              	.equ TIM_DIER,0xc
 251              	.equ TIM_SR,0X10
 252              	.equ TIM_EGR,0X14
 253              	.equ TIM_CCMR1,0X18
 254              	.equ TIM_CCMR2,0X1C
 255              	.equ TIM_CCER,0X20
 256              	.equ TIM_CNT,0X24
 257              	.equ TIM_PSC,0X28
 258              	.equ TIM_ARR,0X2C
ARM GAS  tinyBasic.s 			page 6


 259              	.equ TIM_CCR1,0X34
 260              	.equ TIM_CCR2,0X38
 261              	.equ TIM_DCR,0X48
 262              	.equ TIM_DMAR,0X4C
 263              	
 264              	/* SPI registers */
 265              	.equ SPI1_BASE_ADR, 0x40013000
 266              	.equ SPI2_BASE_ADR, 0x40003800
 267              	
 268              	.equ SPI_CR1, 0
 269              	.equ SPI_CR2, 4
 270              	.equ SPI_SR,  8
 271              	.equ SPI_DR,  12
 272              	.equ SPI_CRCPR, 16
 273              	.equ SPI_RXCRCR, 20
 274              	.equ SPI_TXCRCR, 24
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
ARM GAS  tinyBasic.s 			page 7


  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
ARM GAS  tinyBasic.s 			page 8


  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
ARM GAS  tinyBasic.s 			page 9


  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
ARM GAS  tinyBasic.s 			page 10


 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
ARM GAS  tinyBasic.s 			page 11


 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
ARM GAS  tinyBasic.s 			page 12


 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
ARM GAS  tinyBasic.s 			page 13


  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ RANDOMIZE_IDX,QKEY_IDX+1 //
  85              	    .equ READ_IDX, RANDOMIZE_IDX+1 // 
  86              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  87              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  88              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  89              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  90              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  91              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  92              	    .equ SAVE_IDX, RUN_IDX+1 // 
  93              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  94              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  95              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  96              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  97              	    .equ SPC_IDX,SLEEP_IDX+1 //
  98              	    .equ SPI_DSEL_IDX,SPC_IDX+1 // 
  99              	    .equ SPI_INIT_IDX,SPI_DSEL_IDX+1 //
 100              	    .equ SPI_READ_IDX,SPI_INIT_IDX+1 //
 101              	    .equ SPI_SELECT_IDX,SPI_READ_IDX+1 //
 102              	    .equ SPI_WRITE_IDX,SPI_SELECT_IDX+1 //
 103              	    .equ STEP_IDX, SPI_WRITE_IDX+1 // 
ARM GAS  tinyBasic.s 			page 14


 104              	    .equ STOP_IDX, STEP_IDX+1 // 
 105              	    .equ STORE_IDX,STOP_IDX+1
 106              	    .equ TAB_IDX, STORE_IDX+1 //
 107              	    .equ THEN_IDX,TAB_IDX+1
 108              	    .equ TICKS_IDX, THEN_IDX+1 // 
 109              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 110              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 111              	    .equ TO_IDX, TMROUT_IDX+1 // 
 112              	    .equ TONE_IDX,TO_IDX+1
 113              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 114              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 115              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 116              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 117              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 118              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 119              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 120              	    .equ XOR_IDX, WORDS_IDX+1 //
 121              	    .equ XPOS_IDX,XOR_IDX+1 //
 122              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 123              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
ARM GAS  tinyBasic.s 			page 15


  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
ARM GAS  tinyBasic.s 			page 16


 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 17


 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
ARM GAS  tinyBasic.s 			page 18


 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
ARM GAS  tinyBasic.s 			page 19


 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
ARM GAS  tinyBasic.s 			page 20


 300 022c 12F8010B 	0:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D4     	    bmi 1f 
 303 0234 7F28     	    cmp r0,#127 
 304 0236 01D4     	    bmi 2f 
 305 0238 4FF05F00 	1:  mov r0,#'_' 
 306 023c 00B5FFF7 	2:  _CALL uart_putc
 306      FEFF5DF8 
 306      04EB
 307 0246 0139     	    subs r1,#1 
 308 0248 F0D1     	    bne 0b 
 309 024a 1046     	    mov r0,r2 
 310 024c 04BC     	    pop {r2}
 311 024e 7047     	    _RET 
 312              	
 313              	
 314              	/*********************************
 315              	    search_target 
 316              	    search for goto, gosub target
 317              	    target is line number | label  
 318              	*********************************/
 319              	    _FUNC search_target
 320 0250 00B500F0 	    _CALL next_token 
 320      01FE5DF8 
 320      04EB
 321 025a 1A28     	    cmp r0,TK_LABEL 
 322 025c 06D1     	    bne 2f 
 323 025e 00B500F0 	    _CALL search_label
 323      32F85DF8 
 323      04EB
 324 0268 A0B1     	    cbz r0,8f  
 325 026a 16E0     	    b 9f 
 326 026c D4F800A0 	2:  _UNGET_TOKEN
 326      D4F808B0 
 327 0274 00B500F0 	    _CALL expression 
 327      19FF5DF8 
 327      04EB
 328 027e 1B28     	    cmp r0,#TK_INTGR 
 329 0280 40F0EE83 	    bne syntax_error 
 330 0284 48B1     	    cbz r0,9f 
 331 0286 0846     	    mov r0,r1 
 332 0288 00B5FFF7 	    _CALL search_lineno 
 332      FEFF5DF8 
 332      04EB
 333 0292 11B1     	    cbz r1,9f 
 334 0294 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 335 0298 E6E3     	    b tb_error 
 336 029a 7047     	9:  _RET 
 337              	
 338              	
 339              	/***************************************
 340              	  search_const 
 341              	  search for constant 
 342              	  input:
 343              	    r0  constant label 
 344              	  output:
 345              	    r0  TK_INTGR 
ARM GAS  tinyBasic.s 			page 21


 346              	    r1  constant value  
 347              	  use:
 348              	    r2   *list 
 349              	    r3   BOUND 
 350              	***************************************/
 351              	    _FUNC search_const
 352 029c 0CB4     	    push {r2,r3} 
 353 029e 626B     	    ldr r2,[UPP,#TXTEND]
 354 02a0 D4F8D030 	    ldr r3,[UPP,#HERE] 
 355 02a4 9A42     	1:  cmp r2,r3 
 356 02a6 0BD5     	    bpl 8f 
 357 02a8 52F8041B 	    ldr r1,[r2],#4
 358 02ac 8842     	    cmp r0,r1 
 359 02ae 02D0     	    beq 2f 
 360 02b0 02F10402 	    add r2,#4
 361 02b4 F6E7     	    b 1b 
 362              	2:  // found 
 363 02b6 1168     	    ldr r1,[r2]
 364 02b8 4FF01B00 	    mov r0,#TK_INTGR 
 365 02bc 0CBC     	    pop {r2,r3}
 366 02be 7047     	    _RET
 367              	8:  // that constant doesn't exist 
 368 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 369 02c4 D0E3     	    b tb_error      
 370              	
 371              	
 372              	/***************************************
 373              	    search_label 
 374              	    search target label 
 375              	    input:
 376              	      r1    target label 
 377              	    output:
 378              	      r0    address or 0 
 379              	    use:
 380              	      r2    line address link 
 381              	      r3    search limit 
 382              	****************************************/
 383 02c6 00BF     	    _FUNC search_label 
 384 02c8 0CB4     	    push {r2,r3}
 385 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 386 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 387 02ce 9A42     	1:  cmp r2,r3
 388 02d0 0AD0     	    beq 8f 
 389 02d2 D078     	    ldrb r0,[r2,#3]
 390 02d4 1A28     	    cmp  r0,#TK_LABEL 
 391 02d6 02D0     	    beq 4f 
 392 02d8 9078     	2:  ldrb r0,[r2,#2]
 393 02da 0244     	    add r2,r0 
 394 02dc F7E7     	    b 1b 
 395              	4:  // compare label 
 396 02de 5068     	    ldr r0,[R2,#4]
 397 02e0 8142     	    cmp r1,r0 
 398 02e2 F9D1     	    bne 2b 
 399              	    // found label 
 400 02e4 1046     	    mov r0,r2 
 401 02e6 01E0     	    b 9f
 402 02e8 80EA0000 	8:  eor r0,r0 
ARM GAS  tinyBasic.s 			page 22


 403 02ec 0CBC     	9:  pop {r2,r3}
 404 02ee 7047     	    _RET 
 405              	
 406              	
 407              	/***************************************
 408              	    search_lineno 
 409              	    localize BASIC line from its number 
 410              	    input:
 411              	      r0   line# 
 412              	    output: 
 413              	      r0   adr where found || adr new to be inserted 
 414              	      r1   0 found || !0 not found  
 415              	    use:
 416              	      r0   scan address 
 417              	      r1   temp   
 418              	      r2   address end of text
 419              	      r3   target line#
 420              	****************************************/    
 421              	    _GBL_FUNC search_lineno
 422 02f0 0CB4     	    push {r2,r3} 
 423 02f2 0346     	    mov r3,r0 // target 
 424 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 425 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 426 02f8 9042     	1:  cmp r0,r2 
 427 02fa 05D0     	    beq  8f
 428 02fc 0188     	    ldrh r1,[r0]
 429 02fe C91A     	    subs r1,r3 
 430 0300 04D5     	    bpl 9f 
 431 0302 8178     	    ldrb r1,[r0,#2]
 432 0304 0844     	    add r0,r1
 433 0306 F7E7     	    b 1b 
 434 0308 4FF0FF31 	8:  mov r1,#-1 
 435 030c 0CBC     	9:  pop {r2,r3}
 436 030e 7047     	    _RET 
 437              	
 438              	
 439              	/********************************************
 440              	    delete_line 
 441              	    delete BASIC line at addr 
 442              	    input:
 443              	      r0    address line to delete 
 444              	    output:
 445              	      r0    same as input 
 446              	    use: 
 447              	      r1    dest adr
 448              	      r2    bytes to move 
 449              	      T1    length line to delete 
 450              	      T2    txtend 
 451              	********************************************/
 452              	    _FUNC delete_line 
 453 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 454 0314 0146     	    mov r1,r0 // dest 
 455 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 456 031a 4044     	    add r0,T1  // src
 457 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 458 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 459 0324 00B5FFF7 	    _CALL cmove
ARM GAS  tinyBasic.s 			page 23


 459      FEFF5DF8 
 459      04EB
 460 032e A9EB0809 	    sub T2,T1 // txtend-count 
 461 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 462 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 463 033a 7047     	    _RET 
 464              	
 465              	/******************************************
 466              	    create_gap 
 467              	    create a gap in text area to insert new line 
 468              	    input:
 469              	      r0    adr 
 470              	      r1    length 
 471              	    output:
 472              	      r0    adr 
 473              	    use:
 474              	      T1    length 
 475              	      T2    txtend 
 476              	************************************************/
 477              	    _FUNC create_gap 
 478 033c 2DE90503 	    push {r0,r2,T1,T2}
 479 0340 8846     	    mov T1,R1
 480 0342 0144     	    add r1,r0  // dest 
 481 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 482 0348 A9EB0002 	    sub r2,T2,r0 
 483 034c 00B5FFF7 	    _CALL cmove
 483      FEFF5DF8 
 483      04EB
 484 0356 C144     	    add T2,T1 
 485 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 486 035c C4F8D090 	    str T2,[upp,#HERE]
 487 0360 BDE80503 	    pop {r0,r2,T1,T2}
 488 0364 7047     	    _RET 
 489              	
 490              	/************************************************
 491              	    insert_line 
 492              	    insert BASIC line in text area 
 493              	    first search if line with same number exist 
 494              	    replace if so. 
 495              	    input:
 496              	      r0    *buffer to insert 
 497              	    output:
 498              	      none 
 499              	    use: 
 500              	      T1     *buffer
 501              	      T2     temp  
 502              	************************************************/ 
 503 0366 00BF     	    _FUNC insert_line 
 504 0368 2DE90203 	    push {r1,T1,T2}
 505 036c 8046     	    mov T1,r0 
 506 036e B8F80000 	    ldrh r0,[T1]
 507 0372 00B5FFF7 	    _CALL search_lineno 
 507      FEFF5DF8 
 507      04EB
 508 037c 49B9     	    cbnz  r1, 1f // line# doesn't exist
 509              	// already exist 
 510 037e 00B5FFF7 	    _CALL delete_line // delete old one 
ARM GAS  tinyBasic.s 			page 24


 510      C6FF5DF8 
 510      04EB
 511 0388 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 512 038c B9F1040F 	    cmp T2,#4 // empty line length==4  
 513 0390 0ED0     	    beq 9f
 514              	1: //insert new line 
 515 0392 98F80210 	    ldrb r1,[T1,#2]
 516 0396 00B5FFF7 	    _CALL create_gap 
 516      D0FF5DF8 
 516      04EB
 517 03a0 0146     	    mov r1,r0
 518 03a2 4046     	    mov r0,T1 
 519 03a4 8278     	    ldrb r2,[r0,#2]
 520 03a6 00B5FFF7 	    _CALL cmove 
 520      FEFF5DF8 
 520      04EB
 521 03b0 BDE80203 	9:  pop {r1,T1,T2}
 522 03b4 7047     	    _RET 
 523              	
 524              	/*********************************
 525              	    compile 
 526              	    tokenize source line save it 
 527              	    in pas buffer.
 528              	    compiled line format: 
 529              	      line_no  2 bytes {0...32767}
 530              	      count    1 byte  
 531              	      tokens   variable length 
 532              	  input:
 533              	     r0   *text buffer 
 534              	     r1   *text length   
 535              	  output:
 536              	    r0    0 stored | -1 immediate 
 537              	  use:
 538              	    r3    tib index   
 539              	    T1    tib
 540              	    T2    pad
 541              	***********************************/
 542 03b6 00BF     	    _FUNC compile
 543 03b8 8046     	    mov T1, r0  // source text buffer 
 544 03ba 6160     	    str r1,[UPP,#COUNT] // save line length 
 545 03bc DFF8F499 	    ldr T2,pad // tokens buffer
 546 03c0 83EA0303 	    eor r3,r3 // source index  
 547 03c4 206C     	    ldr r0,[UPP,#FLAGS]
 548 03c6 40F02000 	    orr r0,#FCOMP
 549 03ca 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 550 03cc 80EA0000 	    eor r0,r0     
 551 03d0 29F8020B 	    strh r0,[T2],#2   // line no 
 552 03d4 09F8010B 	    strb r0,[T2],#1 // length 
 553 03d8 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 554 03da C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 555 03de 00B500F0 	    _CALL parse_int 
 555      6EF95DF8 
 555      04EB
 556 03e8 0AD0     	    beq 2f 
 557              	// this is a line number     
 558 03ea 0129     	    cmp r1,#1 
 559 03ec 02D5     	    bpl 1f 
ARM GAS  tinyBasic.s 			page 25


 560 03ee 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 561 03f2 39E3     	    b tb_error  
 562 03f4 B1F5803F 	1:  cmp r1,#65536
 563 03f8 F9D5     	    bpl 0b 
 564              	    // write line # to pad 
 565 03fa 29F8031C 	    strh r1,[T2,#-3]
 566 03fe 2360     	    str r3,[UPP,#IN_SAVED]
 567              	2:  // check for pad full 
 568 0400 C145     	    cmp T2,T1
 569 0402 02DB     	    blt 3f 
 570 0404 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 571 0408 2EE3     	    b tb_error 
 572 040a 00B500F0 	3:  _CALL comp_token 
 572      28F85DF8 
 572      04EB
 573 0414 0028     	    cmp r0,#TK_NONE 
 574 0416 01D0     	    beq 4f 
 575 0418 2360     	    str r3,[UPP,#IN_SAVED]
 576 041a F1E7     	    b 2b 
 577              	4: // compilation completed 
 578 041c DFF89439 	    ldr r3,pad 
 579 0420 A9EB0300 	    sub r0,T2,r3 // line length 
 580 0424 9870     	    strb r0,[r3,#2]
 581 0426 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 582 0428 1888     	    ldrh r0,[r3] // line number 
 583 042a 70B1     	    cbz r0,8f  
 584              	// insert line in text buffer 
 585 042c 206C     	    ldr r0,[UPP,#FLAGS]
 586 042e 10F0080F 	    tst r0,#FSTOP
 587 0432 02D0     	    beq 7f 
 588 0434 4FF01000 	    mov r0,#ERR_CANT_PROG 
 589 0438 16E3     	    b tb_error 
 590 043a 1846     	7:  mov r0,r3 
 591 043c 00B5FFF7 	    _CALL insert_line 
 591      93FF5DF8 
 591      04EB
 592 0446 4040     	    eors r0,r0 
 593 0448 08E0     	    b 9f 
 594 044a 9B46     	8:  mov BPTR,r3 // *token_list 
 595 044c 4FF0030A 	    mov IN,#3
 596 0450 206C     	    ldr r0,[UPP,#FLAGS]
 597 0452 A0F12000 	    sub r0,#FCOMP
 598 0456 2064     	    str r0,[UPP,#FLAGS]
 599 0458 5FF0FF30 	    movs r0,#-1 
 600 045c 7047     	9:  _RET 
 601              	
 602              	/*********************************************
 603              	    compile next token from source 
 604              	    input: 
 605              	      r3 		tib index  
 606              	      T1    tib adr
 607              	      T2    insert point in pad  
 608              	    output:
 609              	      r0     token attribute 
 610              	      r1 		token value
 611              	      r3     tib index updated    
 612              	      T2     updated 
ARM GAS  tinyBasic.s 			page 26


 613              	      use:
 614              	**********************************************/
 615 045e 00BF     	    _FUNC comp_token 
 616 0460 40B4     	    push {r6}
 617 0462 18F80300 	    ldrb r0,[T1,r3]
 618 0466 0040     	    ands r0,r0 
 619 0468 7DD0     	    beq store_r0  // reached end of text  
 620 046a 4FF02000 	    mov r0,#SPACE 
 621 046e 00B500F0 	    _CALL skip  // skip spaces 
 621      76F95DF8 
 621      04EB
 622 0478 18F80300 	    ldrb r0,[T1,r3]
 623 047c 0040     	    ands r0,r0 
 624 047e 72D0     	    beq store_r0  // reached end of text 
 625 0480 03F10103 	    add r3,#1
 626 0484 00B500F0 	    _CALL is_letter 
 626      9FF95DF8 
 626      04EB
 627 048e 0BD1     	    bne 1f
 628 0490 A3F10103 	    sub r3,#1 
 629 0494 00B500F0 	    _CALL comp_label // parse and compile label 
 629      AFF85DF8 
 629      04EB
 630 049e 1728     	    cmp r0,#TK_CMD 
 631 04a0 71D1     	    bne token_exit 
 632 04a2 3D29     	    cmp r1,#REM_IDX 
 633 04a4 4DD0     	    beq tick2 
 634 04a6 6EE0     	    b token_exit 
 635 04a8 00B500F0 	1:  _CALL is_special
 635      6FF85DF8 
 635      04EB
 636 04b2 DFF8186D 	    ldr r6,=token_ofs
 637 04b6 D6E811F0 	    tbh [r6,r1] 
 638              	tok_idx0:     
 639              	//  not special char.  
 640 04ba 57E0     	    b try_number 
 641              	// single char token with no value 
 642              	single: 
 643 04bc DFF8106D 	    ldr r6,=tok_single
 644 04c0 705C     	    ldrb r0,[r6,r1] 
 645 04c2 50E0     	    b store_r0
 646              	lt:
 647 04c4 4FF00F00 	    mov r0,#TK_LT
 648 04c8 18F80310 	    ldrb r1,[T1,r3]
 649 04cc 3E29     	    cmp r1,#'>' 
 650 04ce 06D0     	    beq 1f
 651 04d0 0AE0     	    b 2f 
 652              	gt:
 653 04d2 4FF00E00 	    mov r0,#TK_GT 
 654 04d6 18F80310 	    ldrb r1,[T1,r3]
 655 04da 3C29     	    cmp r1,#'<'
 656 04dc 04D1     	    bne 2f  
 657 04de 03F10103 	1:  add r3,#1
 658 04e2 4FF01200 	    mov r0,#TK_NE  
 659 04e6 3EE0     	    b store_r0
 660 04e8 3D29     	2:  cmp r1,#'=' 
 661 04ea 3CD1     	    bne store_r0  
ARM GAS  tinyBasic.s 			page 27


 662 04ec 03F10103 	    add r3,#1
 663 04f0 00F10200 	    add r0,#2
 664 04f4 37E0     	    b store_r0       
 665              	bkslash:
 666 04f6 18F80310 	    ldrb r1,[T1,r3]
 667 04fa 03F10103 	    add r3,#1
 668 04fe 4FF01300 	    mov r0,#TK_CHAR 
 669 0502 09F8010B 	    strb r0,[T2],#1
 670 0506 09F8011B 	    strb r1,[T2],#1
 671 050a 3CE0     	    b token_exit 
 672              	prt_cmd: 
 673 050c 4FF01700 	    mov r0,#TK_CMD 
 674 0510 4FF03701 	    mov r1,#PRT_IDX
 675 0514 09F8010B 	    strb r0,[T2],#1
 676 0518 09F8011B 	    strb r1,[T2],#1
 677 051c 33E0     	    b token_exit 
 678              	quote:
 679 051e 4FF01C00 	    mov r0,#TK_QSTR 
 680 0522 09F8010B 	    strb r0,[T2],#1
 681 0526 00B500F0 	    _CALL parse_quote
 681      E6F85DF8 
 681      04EB
 682 0530 29E0     	    b token_exit
 683              	tick: 
 684              	// copy comment in pad 
 685 0532 4FF01700 	    mov r0,#TK_CMD 
 686 0536 4FF03D01 	    mov r1,#REM_IDX 
 687 053a 09F8010B 	    strb r0,[T2],#1 
 688 053e 09F8011B 	    strb r1,[T2],#1
 689              	tick2:
 690 0542 08EB0300 	    add r0,T1,r3 
 691 0546 4946     	    mov r1,T2 
 692 0548 00B5FFF7 	    _CALL strcpy 
 692      FEFF5DF8 
 692      04EB
 693 0552 00B5FFF7 	    _CALL strlen 
 693      FEFF5DF8 
 693      04EB
 694 055c 8144     	    add T2,r0
 695 055e 09F10109 	    add T2,#1
 696 0562 6368     	    ldr r3,[UPP,#COUNT]
 697 0564 0FE0     	    b token_exit
 698              	store_r0: 
 699 0566 09F8010B 	    strb r0,[T2],#1
 700 056a 0CE0     	    b token_exit 
 701              	try_number:
 702 056c A3F10103 	    sub r3,#1
 703 0570 00B500F0 	    _CALL parse_int  
 703      A5F85DF8 
 703      04EB
 704 057a 00F07182 	    beq syntax_error  
 705 057e 09F8010B 	    strb r0,[T2],#1 
 706 0582 49F8041B 	    str r1,[T2],#4
 707              	token_exit:
 708 0586 40BC     	    pop {r6}
 709 0588 7047     	    _RET 
 710              	
ARM GAS  tinyBasic.s 			page 28


 711              	
 712              	/****************************
 713              	    is_special  
 714              	    check for non alphanum
 715              	    input:
 716              	      r0    character to scan 
 717              	    output:
 718              	      r0    character 
 719              	      r1    0 || index 
 720              	    use: 
 721              	      r1    scan index 
 722              	      r2    temp 
 723              	      r3    char_list 
 724              	*****************************/
 725 058a 00BF     	    _FUNC is_special 
 726 058c 0CB4     	    push {r2,r3}
 727 058e 4FF00101 	    mov r1,#1
 728 0592 DFF8403C 	    ldr r3,=char_list 
 729 0596 5A5C     	1:  ldrb r2,[r3,r1]
 730 0598 22B1     	    cbz r2,8f 
 731 059a 8242     	    cmp r2,r0 
 732 059c 04D0     	    beq 9f 
 733 059e 01F10101 	    add r1,#1 
 734 05a2 F8E7     	    b 1b
 735 05a4 81EA0101 	8:  eor r1,r1     
 736 05a8 0CBC     	9:  pop {r2,r3}
 737 05aa 7047     	    _RET 
 738              	
 739              	char_list:
 740 05ac 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 740      28293A23 
 740      2D2B2A2F 
 740      253D3C3E 
 740      5C3F2722 
 741              	
 742              	tok_single:
 743 05c1 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 743      050601
 744 05c8 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 744      0A0B0D
 745              	
 746 05cf 00       	  .p2align 2
 747              	token_ofs:
 748 05d0 0000     	  .hword  0 // not found
 749              	  // TK_COMMA...TK_EQUAL , 13 
 750 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 750      01000100 
 751 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 751      01000100 
 752 05e2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 752      01000100 
 753 05ea 0100     	  .hword  (single-tok_idx0)/2    
 754              	  // '<','>'
 755 05ec 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 756              	  // '\'
 757 05f0 1E00     	  .hword  (bkslash-tok_idx0)/2
 758              	  // '?' 
ARM GAS  tinyBasic.s 			page 29


 759 05f2 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 760              	  // "'"  
 761 05f4 3C00     	  .hword  (tick-tok_idx0)/2 
 762              	  // '"' quote 
 763 05f6 3200     	  .hword (quote-tok_idx0)/2
 764              	
 765              	  .p2align 2
 766              	
 767              	/****************************
 768              	    comp_label
 769              	    compile a label 
 770              	    it can be a target|keyword|
 771              	    variable| user constant  
 772              	    label form: [A..Z]+
 773              	    input:
 774              	      *buffer 
 775              	    output:
 776              	      r0  token type 
 777              	      r1  token value 
 778              	      T2  updated 
 779              	      R3  updated
 780              	    use:
 781              	****************************/
 782              	    _FUNC comp_label
 783 05f8 24B4     	    push {r2,r5}
 784 05fa 4DF8049D 	    push {T2}
 785 05fe 82EA0202 	    eor r2,r2
 786 0602 4FF00605 	    mov r5,#6 
 787 0606 18F80300 	0:  ldrb r0,[T1,r3]
 788 060a 5F28     	    cmp r0,#'_'
 789 060c 0AD0     	    beq 2f
 790 060e 00B500F0 	1:  _CALL is_letter 
 790      DAF85DF8 
 790      04EB
 791 0618 09D1     	    bne 3f // not letter 
 792 061a 00B500F0 	    _CALL upper 
 792      ACF85DF8 
 792      04EB
 793 0624 09F8010B 	2:  strb r0,[T2],#1
 794 0628 03F10103 	    add r3,#1
 795 062c EBE7     	    b 0b 
 796 062e 80EA0000 	3:  eor r0,r0 
 797 0632 89F80000 	    strb r0,[T2]
 798              	// is this a variable ?
 799 0636 5DF8049B 	    pop {T2}
 800 063a 99F80100 	    ldrb r0,[T2,#1]
 801 063e 30B9     	    cbnz r0,3f // length >1 not variable 
 802 0640 99F80010 	    ldrb r1,[T2]
 803 0644 A1F14101 	    sub r1,#'A' 
 804 0648 4FF01400 	    mov r0,#TK_VAR
 805 064c 1CE0     	    b 8f 
 806              	3:  // try keyword 
 807 064e 4846     	    mov r0,T2 
 808 0650 DFF8841B 	    ldr r1,=kword_dict  
 809 0654 00B500F0 	    _CALL search_dict 
 809      C5FA5DF8 
 809      04EB
ARM GAS  tinyBasic.s 			page 30


 810 065e 30B1     	    cbz r0,4f
 811 0660 1828     	    cmp r0,TK_SCONST  
 812 0662 11D1     	    bne 8f
 813              	    //system constant  
 814 0664 09F8010B 	    strb r0,[T2],#1
 815 0668 49F8041B 	    str r1,[T2],#4
 816 066c 10E0     	    b 9f 
 817              	4: // must be a label 
 818 066e 4846     	    mov r0,T2 
 819 0670 00B500F0 	    _CALL compress_label
 819      0FF85DF8 
 819      04EB
 820 067a 4FF01A00 	    mov r0,#TK_LABEL
 821 067e 09F8010B 	    strb r0,[T2],#1
 822 0682 49F8041B 	    str r1,[T2],#4
 823 0686 03E0     	    b 9f 
 824 0688 09F8010B 	8:  strb r0,[T2],#1
 825 068c 09F8011B 	    strb r1,[T2],#1          
 826 0690 24BC     	9:  pop {r2,r5}
 827 0692 7047     	    _RET 
 828              	
 829              	/********************************
 830              	    compress_label 
 831              	    compress label in integer 
 832              	    maximum 6 character, 
 833              	    ignore extras characters 
 834              	    input:
 835              	      r0  *label 
 836              	    output:
 837              	      r1   compressed label 
 838              	********************************/
 839              	    _FUNC compress_label
 840 0694 0CB4     	    push {r2,r3}
 841 0696 82EA0202 	    eor r2,r2 // compress value
 842 069a 4FF00603 	    mov r3,#6 // max characters 
 843 069e 10F8011B 	1:  ldrb r1,[r0],#1 
 844 06a2 51B1     	    cbz r1,3f
 845 06a4 5F29     	    cmp r1,#'_'
 846 06a6 01D1     	    bne 2f 
 847 06a8 A1F10401 	    sub r1,#4  
 848 06ac A1F14001 	2:  sub r1,#'@'
 849 06b0 4FEA4212 	    lsl r2,#5
 850 06b4 0A44     	    add r2,r1
 851 06b6 013B     	    subs r3,#1 
 852 06b8 F1D1     	    bne 1b 
 853 06ba 1146     	3:  mov r1,r2     
 854 06bc 0CBC     	    pop {r2,r3}
 855 06be 7047     	    _RET 
 856              	
 857              	
 858              	/****************************
 859              	    parse_int 
 860              	    parse an integer from text
 861              	    if not valid integer 
 862              	    r1 return *buffer else 
 863              	    *buffer is incremented after integer 
 864              	  input:
ARM GAS  tinyBasic.s 			page 31


 865              	    r0   *buffer 
 866              	  output:
 867              	    r0   TK_INTGR|TK_NONE
 868              	    r1   int|0   
 869              	  use:
 870              	    r3   tib index updated     
 871              	*****************************/
 872              	    _FUNC parse_int 
 873 06c0 4FF00A01 	    mov r1,#10 // default base 
 874 06c4 18F80300 	    ldrb r0,[T1,r3]
 875 06c8 2428     	    cmp r0,'$' 
 876 06ca 02D1     	    bne 2f 
 877 06cc 4FF01001 	    mov r1,#16 // hexadecimal number 
 878 06d0 03E0     	    b 3f  
 879 06d2 2628     	2:  cmp r0,#'&' 
 880 06d4 03D1     	    bne 4f
 881 06d6 4FF00201 	    mov r1,#2 //binary number  
 882 06da 03F10103 	3:  add r3,#1
 883 06de 03EB0800 	4:  add r0,r3,T1 
 884 06e2 00B5FFF7 	    _CALL atoi 
 884      FEFF5DF8 
 884      04EB
 885 06ec 10B1     	    cbz r0,9f
 886 06ee 0344     	    add r3,r0
 887 06f0 4FF01B00 	    mov r0,#TK_INTGR
 888 06f4 0040     	9:  ands r0,r0   
 889 06f6 7047     	    _RET 
 890              	
 891              	/*********************************************
 892              	    parse_quote 
 893              	    parse quoted string 
 894              	    input: 
 895              	      r3 		tib index  
 896              	      T1    tib adr
 897              	      T2    insert point in pad  
 898              	    output:
 899              	      r0     token attribute 
 900              	      r1 		*str 
 901              	      r3     tib index updated    
 902              	      T2     updated 
 903              	      use:
 904              	*********************************************/
 905              	    _FUNC parse_quote
 906 06f8 4DF8049D 	    push {T2} 
 907 06fc 18F80300 	1:  ldrb r0,[T1,r3]
 908 0700 03F10103 	    add r3,#1 
 909 0704 2228     	    cmp r0,#'"'
 910 0706 09D0     	    beq 9f 
 911 0708 5C28     	    cmp r0,#'\\'
 912 070a 04D1     	    bne 2f 
 913 070c 00B500F0 	    _CALL get_escaped_char 
 913      0DF85DF8 
 913      04EB
 914 0716 09F8010B 	2:  strb r0,[T2],#1
 915 071a EFE7     	    b 1b 
 916 071c 80EA0000 	9:  eor  r0,r0
 917 0720 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 32


 918 0724 4FF01C00 	    mov r0,#TK_QSTR
 919 0728 02BC     	    pop {r1}
 920 072a 7047     	    _RET 
 921              	
 922              	/**********************************************
 923              	    get_escaped_char 
 924              	    convert "\c" in quoted string 
 925              	    input:
 926              	      r0 
 927              	      r3   index 
 928              	      T1   tib 
 929              	    output:
 930              	      r0   replacement char
 931              	      r3   updated 
 932              	    use:
 933              	      r1   *table 
 934              	      r2   temp 
 935              	**********************************************/
 936              	    _FUNC get_escaped_char 
 937 072c 06B4     	    push {r1,r2}
 938 072e 18F80300 	    ldrb r0,[T1,r3]
 939 0732 03F10103 	    add r3,#1
 940 0736 2228     	    cmp r0,#'"' 
 941 0738 0BD0     	    beq 9f 
 942 073a DFF8A01A 	1:  ldr r1,=escaped 
 943 073e 11F8012B 	2:  ldrb r2,[r1],#1
 944 0742 12B1     	    cbz r2,6f 
 945 0744 8242     	    cmp r2,r0 
 946 0746 02D0     	    beq 7f 
 947 0748 F9E7     	    b 2b
 948 074a A0F10702 	6:  sub r2,r0,#7     
 949 074e 02F10700 	7:  add r0,r2,#7
 950 0752 06BC     	9:  pop {r1,r2}   
 951 0754 7047     	    _RET
 952              	
 953 0756 6162746E 	escaped: .asciz "abtnvfr"
 953      76667200 
 954              	
 955              	/*********************************************
 956              	   skip character in TIB 
 957              	   input:
 958              	      r0    character to skip 
 959              	      r3    tib index 
 960              	      T1    tib adr
 961              	    output: 
 962              	      r3    updated
 963              	    use:
 964              	      r1     
 965              	**********************************************/   
 966 075e 00BF     	    _FUNC skip
 967 0760 02B4     	    push {r1} 
 968 0762 18F80310 	1:  ldrb r1,[T1,r3]
 969 0766 8142     	    cmp r1,r0
 970 0768 02D1     	    bne 2f
 971 076a 03F10103 	    add r3,#1 
 972 076e F8E7     	    b 1b 
 973 0770 2360     	2:  str r3,[UPP,#IN_SAVED]
ARM GAS  tinyBasic.s 			page 33


 974 0772 02BC     	    pop {r1}
 975 0774 7047     	    _RET
 976              	
 977              	/********************************************
 978              	    upper
 979              	    convert character in upper case 
 980              	    input: 
 981              	      r0   character 
 982              	    output:
 983              	      r0   upper case character 
 984              	*********************************************/
 985 0776 00BF     	    _FUNC upper 
 986 0778 6128     	    cmp r0,#'a' 
 987 077a 03DB     	    blt 9f 
 988 077c 7A28     	    cmp r0,#'z' 
 989 077e 01DC     	    bgt 9f 
 990 0780 00F05F00 	    and r0,#0x5f 
 991 0784 7047     	9:  _RET 
 992              	
 993              	/***************************************
 994              	   is_digit 
 995              	   check if char is decimal digit.
 996              	   convert to decimal digit.
 997              	   input:
 998              	      r0    char 
 999              	   output:
 1000              	      r0        if Z then converted digit else not changed
 1001              	      Z flag    1 true | 0 false  
 1002              	***************************************/
 1003 0786 00BF     	    _GBL_FUNC is_digit 
 1004 0788 02B4     	    push {r1} 
 1005 078a 4FF0FF31 	    mov r1,#-1   
 1006 078e 3028     	    cmp r0,#'0' 
 1007 0790 05DB     	    blt 9f
 1008 0792 3A28     	    cmp r0,'9'+1
 1009 0794 03D5     	    bpl 9f 
 1010 0796 81EA0101 	    eor r1,r1 
 1011 079a A0F13000 	    sub r0,#'0'  
 1012              	9:   
 1013 079e 0940     	    ands r1,r1
 1014 07a0 02BC     	    pop {r1} 
 1015 07a2 7047     	    _RET 
 1016              	
 1017              	/***************************************
 1018              	    is_hex 
 1019              	    check for hexadecimal digit 
 1020              	    convert to hex digit.
 1021              	    input:
 1022              	      r0    
 1023              	    output:
 1024              	      r0         if Z then converted digit 
 1025              	      Z  flag    1 true | 0 false         
 1026              	***************************************/
 1027              	    _FUNC is_hex 
 1028 07a4 02B4     	    push {r1}
 1029 07a6 80EA0000 	    eor r0,r0 
 1030 07aa 4128     	    cmp r0,#'A' 
ARM GAS  tinyBasic.s 			page 34


 1031 07ac 01D4     	    bmi 1f 
 1032 07ae A0F10700 	    sub r0,#7 
 1033 07b2 A0F13000 	1:  sub r0,#'0'
 1034 07b6 01D4     	    bmi 2f 
 1035 07b8 1028     	    cmp r0,#16
 1036 07ba 01D4     	    bmi 9f 
 1037 07bc 6FEA0101 	2:  mvn r1,r1  
 1038 07c0 0940     	9:  ands r1,r1 
 1039 07c2 02BC     	    pop {r1}
 1040 07c4 7047     	    _RET 
 1041              	
 1042              	/***************************************
 1043              	    is_letter 
 1044              	    check if character is {a..z,A..Z,_} 
 1045              	  input:
 1046              	    r0   character 
 1047              	  output: 
 1048              	    r0       same character 
 1049              	    Z flag   1 true | 0 false  
 1050              	****************************************/
 1051 07c6 00BF     	    _FUNC is_letter
 1052 07c8 02B4     	    push {r1} 
 1053 07ca 81EA0101 	    eor r1,r1 
 1054 07ce 4128     	    cmp r0,#'A' 
 1055 07d0 05D4     	    bmi 8f 
 1056 07d2 5B28     	    cmp r0,#'Z'+1 
 1057 07d4 05D4     	    bmi 9f
 1058 07d6 6128     	    cmp r0,#'a' 
 1059 07d8 01D4     	    bmi 8f 
 1060 07da 7B28     	    cmp r0,#'z'+1
 1061 07dc 01D4     	    bmi 9f  
 1062 07de 6FEA0101 	8:  mvn r1,r1  
 1063 07e2 0940     	9:  ands r1,r1 
 1064 07e4 02BC     	    pop {r1}
 1065 07e6 7047     	    _RET 
 1066              	
 1067              	
 1068              	/******************************************
 1069              	    atoi 
 1070              	    convert ascii to integer 
 1071              	    input:
 1072              	      r0   *buffer 
 1073              	      r1   base 
 1074              	    output:
 1075              	      r0   0 no integer found 
 1076              	      r1   integer
 1077              	    use:
 1078              	      r2   base  
 1079              	      T1   *buffer 
 1080              	      T2   digit count  
 1081              	******************************************/
 1082              	    _GBL_FUNC atoi 
 1083 07e8 2DE90403 	    push {r2,T1,T2}
 1084 07ec 8046     	    mov T1,r0  // *buffer 
 1085 07ee 0A46     	    mov r2,r1  // base  
 1086 07f0 81EA0101 	    eor r1,r1  // converted integer 
 1087 07f4 89EA0909 	    eor T2,T2  // digit count 
ARM GAS  tinyBasic.s 			page 35


 1088 07f8 18F8010B 	1:  ldrb r0,[T1],#1
 1089 07fc 00B5FFF7 	    _CALL upper 
 1089      BBFF5DF8 
 1089      04EB
 1090 0806 3028     	    cmp r0,#'0'
 1091 0808 0FD4     	    bmi 8f
 1092 080a 3A28     	    cmp r0,#'9'+1 
 1093 080c 03D4     	    bmi 2f 
 1094 080e 4128     	    cmp r0,#'A'
 1095 0810 0BD4     	    bmi 8f 
 1096 0812 A0F10700 	    sub r0,#7 
 1097 0816 A0F13000 	2:  sub r0,#'0' 
 1098 081a 9042     	    cmp r0,r2
 1099 081c 05D5     	    bpl 8f  
 1100 081e 02FB01F1 	    mul r1,r2 
 1101 0822 0144     	    add r1,r0
 1102 0824 09F10109 	    add T2,#1
 1103 0828 E6E7     	    b 1b 
 1104 082a 4846     	8:  mov r0,T2  
 1105 082c BDE80403 	    pop {r2,T1,T2}
 1106 0830 7047     	    _RET 
 1107              	
 1108              	
 1109              	
 1110              	/*******************
 1111              	    DECOMPILER 
 1112              	*******************/
 1113              	
 1114              	/********************************************
 1115              	    cmd_name 
 1116              	    search bytecode in dictionary and 
 1117              	    return its name 
 1118              	  input:
 1119              	    r0    token type 
 1120              	    r1    keyword bytecode 
 1121              	  ouput:
 1122              	    r0    name string 
 1123              	  use:
 1124              	    T1    link 
 1125              	    T2    tmp 
 1126              	*********************************************/
 1127 0832 00BF     	    _FUNC cmd_name 
 1128 0834 2DE90003 	    push {T1,T2}
 1129 0838 DFF89C89 	    ldr T1,=kword_dict 
 1130 083c 58F8049C 	1:  ldr T2,[T1,#-4]
 1131 0840 8145     	    cmp T2,r0 
 1132 0842 03D1     	    bne 3f 
 1133 0844 58F8089C 	    ldr T2,[T1,#-8]
 1134 0848 8945     	    cmp T2,r1 
 1135 084a 04D0     	    beq 2f 
 1136 084c 58F80C8C 	3:  ldr T1,[T1,#-12]
 1137 0850 B8F1000F 	    cmp T1,#0
 1138 0854 F2D1     	    bne 1b  
 1139 0856 4046     	2:  mov r0,T1 
 1140 0858 BDE80003 	    pop {T1,T2}
 1141 085c 7047     	    _RET
 1142              	
ARM GAS  tinyBasic.s 			page 36


 1143              	/*****************************
 1144              	  decompile_line 
 1145              	  detokenize BASIC line 
 1146              	  input:
 1147              	    r0  *token list 
 1148              	    r1  *output buffer 
 1149              	  output:
 1150              	    r0  *output buffer (.asciz) 
 1151              	  use:
 1152              	    T1  *output buffer
 1153              	    BPTR  *token list
 1154              	    IN  offset in token list  
 1155              	******************************/
 1156 085e 00BF     	    _GBL_FUNC decompile_line
 1157 0860 2DE90E01 	    push {r1,r2,r3,T1} 
 1158 0864 8346     	    mov BPTR,r0 
 1159 0866 4FF0000A 	    mov IN,#0
 1160 086a 8846     	    mov T1,r1 
 1161 086c 3BF80A00 	    ldrh r0,[BPTR,IN]
 1162 0870 0AF1020A 	    add IN,#2 
 1163 0874 4FF00A01 	    mov r1,#10 
 1164 0878 00B5FFF7 	    _CALL itoa
 1164      FEFF5DF8 
 1164      04EB
 1165 0882 4146     	    mov r1,T1
 1166 0884 00B5FFF7 	    _CALL strcpy
 1166      FEFF5DF8 
 1166      04EB
 1167 088e 4046     	    mov r0,T1 
 1168 0890 00B5FFF7 	    _CALL strlen
 1168      FEFF5DF8 
 1168      04EB
 1169 089a 8044     	    add T1,r0 
 1170 089c 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1171 08a0 0AF1010A 	    add IN,#1 
 1172 08a4 6060     	    str r0,[UPP,#COUNT]
 1173              	decomp_loop:
 1174 08a6 00B500F0 	    _CALL next_token
 1174      D6FA5DF8 
 1174      04EB
 1175 08b0 0028     	    cmp r0,#TK_NONE 
 1176 08b2 00F0AD80 	    beq 9f
 1177 08b6 1028     	    cmp r0,#TK_GE 
 1178 08b8 05D5     	    bpl 1f 
 1179 08ba DFF82419 	    ldr r1,=single_char 
 1180 08be 085C     	    ldrb r0,[r1,r0]
 1181 08c0 08F8010B 	    strb r0,[T1],#1 
 1182 08c4 EFE7     	    b decomp_loop
 1183              	1: 
 1184 08c6 1328     	    cmp r0,#TK_CHAR  
 1185 08c8 14D5     	    bpl 2f 
 1186 08ca A0F11000 	    sub r0,#TK_GE
 1187 08ce 4FEA8000 	    lsl r0,#2 
 1188 08d2 DFF81019 	    ldr r1,=relop_str 
 1189 08d6 0858     	    ldr r0,[r1,r0]
 1190 08d8 4146     	    mov r1,T1 
 1191 08da 00B5FFF7 	    _CALL strcpy 
ARM GAS  tinyBasic.s 			page 37


 1191      FEFF5DF8 
 1191      04EB
 1192 08e4 4046     	    mov r0,T1 
 1193 08e6 00B5FFF7 	    _CALL strlen 
 1193      FEFF5DF8 
 1193      04EB
 1194 08f0 8044     	    add T1,r0 
 1195 08f2 D8E7     	    b decomp_loop
 1196 08f4 1328     	2:  cmp r0,#TK_CHAR 
 1197 08f6 06D1     	    bne 3f 
 1198 08f8 4FF05C00 	    mov r0,#'\\'
 1199 08fc 08F8010B 	    strb r0,[T1],#1
 1200 0900 08F8011B 	    strb r1,[T1],#1
 1201              	//    mov r0,#SPACE 
 1202              	//    strb r0,[T1],#1
 1203 0904 CFE7     	    b decomp_loop 
 1204 0906 1428     	3:  cmp r0,#TK_VAR 
 1205 0908 08D1     	    bne 4f 
 1206 090a 01F14100 	    add r0,r1,'A'
 1207 090e 08F8010B 	    strb r0,[T1],#1 
 1208 0912 4FF02000 	    mov r0,#SPACE 
 1209 0916 08F8010B 	    strb r0,[T1],#1
 1210 091a C4E7     	    b decomp_loop 
 1211 091c 1A28     	4:  cmp r0,#TK_LABEL 
 1212 091e 2BD5     	    bpl 5f   
 1213 0920 03B4     	    push {r0,r1}
 1214              	//    mov r0,r1 
 1215 0922 00B5FFF7 	    _CALL cmd_name
 1215      86FF5DF8 
 1215      04EB
 1216 092c 4146     	    mov r1,T1 
 1217 092e 00B5FFF7 	    _CALL strcpy 
 1217      FEFF5DF8 
 1217      04EB
 1218 0938 4046     	    mov r0,T1 
 1219 093a 00B5FFF7 	    _CALL strlen 
 1219      FEFF5DF8 
 1219      04EB
 1220 0944 8044     	    add T1,r0
 1221 0946 03BC     	    pop {r0,r1}
 1222 0948 4FF02000 	    mov r0,#SPACE 
 1223 094c 08F8010B 	    strb r0,[T1],#1 
 1224 0950 3D29     	    cmp r1,#REM_IDX
 1225 0952 A8D1     	    bne decomp_loop 
 1226 0954 0BEB0A00 	    add r0,BPTR,IN
 1227 0958 4146     	    mov r1,T1   
 1228 095a 00B5FFF7 	    _CALL strcpy
 1228      FEFF5DF8 
 1228      04EB
 1229 0964 4046     	    mov r0,T1 
 1230 0966 00B5FFF7 	    _CALL strlen
 1230      FEFF5DF8 
 1230      04EB
 1231 0970 8044     	    add T1,r0
 1232 0972 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1233 0976 4BE0     	    b 9f 
 1234 0978 1B28     	5:  cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 38


 1235 097a 14D1     	    bne 6f  
 1236 097c 0846     	    mov r0,r1 
 1237 097e A169     	    ldr r1,[UPP,#BASE]
 1238 0980 00B5FFF7 	    _CALL itoa
 1238      FEFF5DF8 
 1238      04EB
 1239 098a 4146     	    mov r1,T1 
 1240 098c 00B5FFF7 	    _CALL strcpy
 1240      FEFF5DF8 
 1240      04EB
 1241 0996 4046     	    mov r0,T1 
 1242 0998 00B5FFF7 	    _CALL strlen
 1242      FEFF5DF8 
 1242      04EB
 1243 09a2 8044     	    add T1,r0 
 1244 09a4 7FE7     	    b decomp_loop 
 1245 09a6 1A28     	6:  cmp r0,#TK_LABEL
 1246 09a8 1BD1     	    bne 7f
 1247 09aa 4FF01902 	    mov r2,#25
 1248 09ae 4FF6FF73 	    mov r3,#0xffff 
 1249 09b2 C3F6FF73 	    movt r3,#0x3fff 
 1250 09b6 01EA0301 	0:  and r1,r3 
 1251 09ba 4FEA5313 	    lsr r3,#5 
 1252 09be 31FA02F0 	    lsrs r0,r1,r2 
 1253 09c2 07D0     	    beq 2f
 1254 09c4 00F14000 	    add r0,#'@'
 1255 09c8 5B28     	    cmp r0,#'['
 1256 09ca 01D1     	    bne 1f
 1257 09cc 00F10400 	    add r0,#4 
 1258 09d0 08F8010B 	1:  strb r0,[T1],#1
 1259 09d4 053A     	2:  subs r2,#5 
 1260 09d6 EEDA     	    bge 0b
 1261 09d8 4FF02000 	    mov r0,#SPACE 
 1262 09dc 08F8010B 	    strb r0,[T1],#1  
 1263 09e0 61E7     	    b decomp_loop
 1264 09e2 4FF02200 	7:  mov r0,#'"'
 1265 09e6 08F8010B 	    strb r0,[T1],#1 
 1266 09ea 0846     	    mov r0,r1
 1267 09ec 4146     	    mov r1,T1  
 1268 09ee 00B5FFF7 	    _CALL strcpy
 1268      FEFF5DF8 
 1268      04EB
 1269 09f8 4046     	    mov r0,T1 
 1270 09fa 00B5FFF7 	    _CALL strlen 
 1270      FEFF5DF8 
 1270      04EB
 1271 0a04 8044     	    add T1,r0 
 1272 0a06 4FF02200 	    mov r0,#'"'
 1273 0a0a 08F8010B 	    strb r0,[T1],#1 
 1274 0a0e 4AE7     	    b decomp_loop
 1275 0a10 80EA0000 	9:  eor r0,r0 
 1276 0a14 88F80000 	    strb r0,[T1]
 1277 0a18 BDE80E01 	    pop {r1,r2,r3,T1}
 1278 0a1c 0846     	    mov r0,r1 
 1279 0a1e 7047     	    _RET 
 1280              	
 1281 0a20 2C0A0000 	relop_str: .word ge_str,le_str,ne_str 
ARM GAS  tinyBasic.s 			page 39


 1281      2F0A0000 
 1281      320A0000 
 1282 0a2c 3E3D00   	ge_str: .asciz ">="
 1283 0a2f 3C3D00   	le_str: .asciz "<="
 1284 0a32 3C3E00   	ne_str: .asciz "<>"
 1285              	
 1286              	single_char:
 1287 0a35 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1287      2328292B 
 1287      2D2A2F25 
 1288 0a41 403D3E3C 	  .byte '@','=', '>', '<' 
 1289              	
 1290              	
 1291              	
 1292              	
 1293              	/**********************************
 1294              	  modulo 
 1295              	  compute r0 mod r1
 1296              	  input:
 1297              	    r0   dividend
 1298              	    r1   divisor 
 1299              	  output:
 1300              	    r0   TK_INTGR 
 1301              	    r1   r0 mod r1 
 1302              	*********************************/
 1303 0a45 0000BF   	    _GBL_FUNC modulo 
 1304 0a48 01B4     	    push {r0}
 1305 0a4a B0FBF1F0 	    udiv r0,r1 
 1306 0a4e 01FB00F0 	    mul  r0,r1 
 1307 0a52 02BC     	    pop {r1}
 1308 0a54 A1EB0001 	    sub r1,r0
 1309 0a58 4FF01B00 	    mov r0,#TK_INTGR
 1310 0a5c 7047     	    _RET 
 1311              	
 1312              	/**********************************
 1313              	      BASIC commands 
 1314              	**********************************/
 1315              	
 1316              	/*********************************
 1317              	    syntax_error 
 1318              	    display syntax error message and 
 1319              	    abort program 
 1320              	  input:
 1321              	    none  
 1322              	  output: 
 1323              	    none 
 1324              	  use:
 1325              	*********************************/
 1326 0a5e 00BF     	    _FUNC syntax_error 
 1327 0a60 4FF00200 	    mov r0,#ERR_SYNTAX
 1328 0a64 00E0     	    b tb_error 
 1329              	
 1330              	/*********************************
 1331              	    tb_error 
 1332              	    display BASIC error and 
 1333              	    abort program. 
 1334              	  input:
ARM GAS  tinyBasic.s 			page 40


 1335              	    r0    error code   
 1336              	  output: 
 1337              	    none 
 1338              	  use:
 1339              	    r1    temp 
 1340              	*********************************/
 1341 0a66 00BF     	    _FUNC tb_error 
 1342 0a68 216C     	    ldr r1,[UPP,#FLAGS]
 1343 0a6a 11F0200F 	    tst r1,#FCOMP
 1344 0a6e 43D1     	    bne compile_error
 1345              	rt_error:
 1346 0a70 5246     	    mov r2,IN 
 1347 0a72 01B4     	    push {r0}
 1348 0a74 DFF87007 	    ldr r0,=rt_error_msg 
 1349 0a78 00B5FFF7 	    _CALL uart_puts 
 1349      FEFF5DF8 
 1349      04EB
 1350 0a82 01BC     	    pop {r0}
 1351 0a84 DFF86417 	    ldr r1,=err_msg  
 1352 0a88 4FEA8000 	    lsl r0,#2 
 1353 0a8c 0858     	    ldr r0,[r1,r0]
 1354 0a8e 00B5FFF7 	    _CALL uart_puts
 1354      FEFF5DF8 
 1354      04EB
 1355              	// decompile and print faulty line      
 1356 0a98 5846     	    mov r0,BPTR
 1357 0a9a 5246     	    mov r2,IN  
 1358 0a9c DFF81413 	    ldr r1,pad 
 1359 0aa0 00B5FFF7 	    _CALL decompile_line
 1359      FEFF5DF8 
 1359      04EB
 1360 0aaa 00B5FFF7 	    _CALL uart_puts 
 1360      FEFF5DF8 
 1360      04EB
 1361 0ab4 00B5FFF7 	    _CALL cr 
 1361      FEFF5DF8 
 1361      04EB
 1362              	// print error offset on line      
 1363 0abe DFF83007 	    ldr r0,=token_at_msg 
 1364 0ac2 00B5FFF7 	    _CALL uart_puts 
 1364      FEFF5DF8 
 1364      04EB
 1365 0acc 1046     	    mov r0,r2 
 1366 0ace 4FF01001 	    mov r1,#16 
 1367 0ad2 00B5FFF7 	    _CALL print_int
 1367      FEFF5DF8 
 1367      04EB
 1368 0adc 00B5FFF7 	    _CALL cr
 1368      FEFF5DF8 
 1368      04EB
 1369              	// dump tokenize line 
 1370 0ae6 5846     	    mov r0,BPTR
 1371 0ae8 8278     	    ldrb r2,[r0,#2]
 1372 0aea 00B500F0 	    _CALL dump01 
 1372      1BFA5DF8 
 1372      04EB
 1373 0af4 FFF7FEBF 	    b warm_start 
ARM GAS  tinyBasic.s 			page 41


 1374              	compile_error:
 1375 0af8 DFF8F016 	    ldr r1,=err_msg 
 1376 0afc 4FEA8000 	    lsl r0,#2 
 1377 0b00 0858     	    ldr r0,[r1,r0]
 1378 0b02 00B5FFF7 	    _CALL uart_puts
 1378      FEFF5DF8 
 1378      04EB
 1379 0b0c A068     	    ldr r0,[UPP,#BASICPTR]
 1380 0b0e 00B5FFF7 	    _CALL uart_puts
 1380      FEFF5DF8 
 1380      04EB
 1381 0b18 00B5FFF7 	    _CALL cr
 1381      FEFF5DF8 
 1381      04EB
 1382 0b22 2068     	    ldr r0,[UPP,#IN_SAVED]
 1383 0b24 00B5FFF7 	    _CALL spaces 
 1383      FEFF5DF8 
 1383      04EB
 1384 0b2e 4FF05E00 	    mov r0,#'^' 
 1385 0b32 00B5FFF7 	    _CALL uart_putc
 1385      FEFF5DF8 
 1385      04EB
 1386 0b3c 00B5FFF7 	    _CALL cr
 1386      FEFF5DF8 
 1386      04EB
 1387 0b46 FFF7FEBF 	    b  warm_start  
 1388              	    
 1389 0b4a 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1389      74696D65 
 1389      20657272 
 1389      6F723A20 
 1389      00
 1390 0b5b 746F6B65 	token_at_msg: .asciz "token offset: "
 1390      6E206F66 
 1390      66736574 
 1390      3A2000
 1391              	
 1392              	
 1393              	err_msg:
 1394 0b6a 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1394      00000000 
 1394      0D000000 
 1394      1B000000 
 1394      34000000 
 1395 0b82 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1395      6F000000 
 1395      89000000 
 1395      9A000000 
 1395      AB000000 
 1396 0b96 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1396      EA000000 
 1396      FA000000 
 1396      0E010000 
 1396      21010000 
 1397 0baa 2E010000 	   .word err_cant_prog 
 1398              	
 1399              	    .section .rodata.tb_error 
ARM GAS  tinyBasic.s 			page 42


 1400              	
 1401 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1401      72792066 
 1401      756C6C0A 
 1401      00
 1402 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1402      61782065 
 1402      72726F72 
 1402      0A00
 1403 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1403      206F7065 
 1403      72617469 
 1403      6F6E206F 
 1403      76657266 
 1404 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1404      73696F6E 
 1404      20627920 
 1404      300A00
 1405 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1405      6C696420 
 1405      6C696E65 
 1405      206E756D 
 1405      6265722E 
 1406 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1406      74696D65 
 1406      206F6E6C 
 1406      79207573 
 1406      6167652E 
 1407 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1407      616E6420 
 1407      6C696E65 
 1407      206F6E6C 
 1407      79207573 
 1408 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1408      69636174 
 1408      65206E61 
 1408      6D652E0A 
 1408      00
 1409 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1409      206E6F74 
 1409      20666F75 
 1409      6E642E0A 
 1409      00
 1410 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1410      76616C75 
 1410      652E0A00 
 1411 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1411      20696E20 
 1411      65787465 
 1411      6E646564 
 1411      206D656D 
 1412 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1412      61746120 
 1412      666F756E 
 1412      642E0A00 
 1413 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1413      726F6772 
ARM GAS  tinyBasic.s 			page 43


 1413      616D2069 
 1413      6E205241 
 1413      4D210A00 
 1414 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1414      20737973 
 1414      74656D20 
 1414      66756C6C 
 1414      2E0A00
 1415 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1415      65722066 
 1415      756C6C0A 
 1415      00
 1416 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1416      74206D6F 
 1416      64696679 
 1416      2070726F 
 1416      6772616D 
 1417              	
 1418 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1418      2074696D 
 1418      65206572 
 1418      726F722C 
 1418      2000
 1419 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1419      70696C65 
 1419      20657272 
 1419      6F722C20 
 1419      00
 1420 018d 6C617374 	tk_id: .asciz "last token id: "
 1420      20746F6B 
 1420      656E2069 
 1420      643A2000 
 1421              	
 1422              	
 1423              	    .section  .text , "ax", %progbits 
 1424              	
 1425              	/*********************************
 1426              	   skip_line 
 1427              	   data and remark line are skipped
 1428              	   by the interpreter 
 1429              	***********************************/
 1430 0bae 00BF     	    _FUNC skip_line 
 1431 0bb0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1432 0bb4 7047     	    _RET 
 1433              	
 1434              	
 1435              	/*********************************
 1436              	   BASIC: BTGL adr, mask   
 1437              	   toggle bits [adr]=[adr]^mask  
 1438              	   input:
 1439              	     r0    adr 
 1440              	     r1    mask 
 1441              	    output;
 1442              	      none 
 1443              	    use:
 1444              	      T1   temp
 1445              	      T2   temp  
ARM GAS  tinyBasic.s 			page 44


 1446              	*******************************/     
 1447 0bb6 00BF     	    _FUNC BTGL 
 1448              	
 1449 0bb8 7047     	    _RET 
 1450              	
 1451              	/***************************************
 1452              	   kword_cmp
 1453              	   compare keyword to dict entry
 1454              	  input:
 1455              	    r0  keyword 
 1456              	    r1  dict entry 
 1457              	    r2  character count 
 1458              	  output:
 1459              	    r0  0 not same | -1 same 
 1460              	  use:
 1461              	    r6   result  
 1462              	    T1   char 1
 1463              	    T2   char 2
 1464              	**************************************/   
 1465 0bba 00BF     	    _FUNC kword_cmp 
 1466 0bbc 2DE94003 	    push {r6,T1,T2}
 1467 0bc0 4FF0FF36 	    mov r6,#-1 
 1468 0bc4 4AB1     	1:  cbz r2,9f       
 1469 0bc6 10F8018B 	    ldrb T1,[r0],#1
 1470 0bca 11F8019B 	    ldrb T2,[r1],#1
 1471 0bce A2F10102 	    sub r2,#1
 1472 0bd2 C845     	    cmp T1,T2
 1473 0bd4 F6D0     	    beq 1b 
 1474 0bd6 86EA0606 	    eor r6,r6  
 1475 0bda 3046     	9:  mov r0,r6
 1476 0bdc BDE84003 	    pop {r6,T1,T2}
 1477 0be0 7047     	    _RET 
 1478              	
 1479              	/***********************************************
 1480              	    search_dict 
 1481              	    search keyword in dictionary
 1482              	   input:
 1483              	  	 r0   keyword 
 1484              	     r1		dictionary first name field address  
 1485              	   output:
 1486              	     r0 		token attribute 
 1487              	     r1		  cmd_index if r0!=TK_NONE  
 1488              	   use:
 1489              	     r3   length keyword 
 1490              	     T1   keyword
 1491              	     T2   link  
 1492              	**********************************************/
 1493 0be2 00BF     	  _FUNC search_dict
 1494 0be4 2DE90C03 	  push {r2,r3,T1,T2}
 1495 0be8 8046     	  mov T1,r0 
 1496 0bea 00B5FFF7 	  _CALL strlen 
 1496      FEFF5DF8 
 1496      04EB
 1497 0bf4 0346     	  mov r3,r0  
 1498              	1:  
 1499 0bf6 8946     	   mov T2,r1  // keep for linking   
 1500 0bf8 0878     	   ldrb r0,[r1] 
ARM GAS  tinyBasic.s 			page 45


 1501 0bfa 78B1     	   cbz r0,9f // null byte, end of dictionary
 1502 0bfc 4046     	   mov r0,T1
 1503 0bfe 1A46     	   mov r2,r3   
 1504 0c00 00B5FFF7 	   _CALL kword_cmp  
 1504      DBFF5DF8 
 1504      04EB
 1505 0c0a 18B9     	   cbnz r0,2f 
 1506 0c0c 4946     	   mov r1,T2
 1507 0c0e 51F80C1C 	   ldr r1,[r1,#-12]
 1508 0c12 F0E7     	   b 1b   
 1509              	2: // found
 1510 0c14 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1511 0c18 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1512 0c1c BDE80C03 	9: pop {r2,r3,T1,T2}
 1513 0c20 7047     	   _RET 
 1514              	
 1515              	
 1516              	/**************************
 1517              	    INTERPRETER 
 1518              	*************************/
 1519              	
 1520              	/*********************************
 1521              	   cold_start 
 1522              	   initialize BASIC interpreter 
 1523              	   never leave 
 1524              	   input:
 1525              	     none 
 1526              	   output:
 1527              	    none 
 1528              	*********************************/
 1529              	  .type cold_start, %function 
 1530              	  .global cold_start 
 1531              	cold_start: 
 1532 0c22 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1532      C2F20004 
 1533 0c2a DFF85E00 	    ldr r0,src_addr 
 1534 0c2e DFF85E10 	    ldr r1,dest_addr
 1535 0c32 0968     	    ldr r1,[r1] 
 1536 0c34 0C44     	    add UPP,r1 // system variables base address   
 1537              	// clear RAM
 1538 0c36 2046     	    mov r0,UPP  
 1539 0c38 DFF87411 	    ldr r1,tib 
 1540 0c3c 82EA0202 	    eor r2,r2 
 1541 0c40 40F8042B 	1:  str r2,[r0],#4 
 1542 0c44 8842     	    cmp r0,r1 
 1543 0c46 FBD4     	    bmi 1b 
 1544              	//copy initialized system variables to ram 
 1545 0c48 DFF83E00 	    ldr r0,src_addr 
 1546 0c4c 2146     	    mov r1,UPP 
 1547 0c4e DFF84220 	    ldr r2,sysvar_size
 1548 0c52 00B5FFF7 	    _CALL cmove
 1548      FEFF5DF8 
 1548      04EB
 1549 0c5c 00B500F0 	    _CALL prt_version
 1549      1BF85DF8 
 1549      04EB
 1550 0c66 00B500F0 	    _CALL clear_basic 
ARM GAS  tinyBasic.s 			page 46


 1550      68F85DF8 
 1550      04EB
 1551 0c70 00B5FFF7 	    _CALL search_free 
 1551      FEFF5DF8 
 1551      04EB
 1552 0c7a E062     	    str r0,[UPP,#FSFREE]
 1553 0c7c 00B5FFF7 	    _CALL exec_autorun  
 1553      FEFF5DF8 
 1553      04EB
 1554 0c86 FFF7FEBF 	    b warm_start    
 1555              	src_addr:
 1556 0c8a 00000000 	  .word uzero
 1557              	dest_addr:
 1558 0c8e 00000000 	  .word vectors_size
 1559 0c92 D4000000 	sysvar_size: .word ulast-uzero 
 1560              	
 1561              	/************************************
 1562              	    print firmware version 
 1563              	    input: 
 1564              	      none 
 1565              	    output:
 1566              	      none 
 1567              	    use:
 1568              	      r0 
 1569              	***********************************/
 1570 0c96 00BF     	    _FUNC prt_version 
 1571 0c98 DFF85805 	    ldr r0,=version_msg 
 1572 0c9c 00B5FFF7 	    _CALL uart_puts
 1572      FEFF5DF8 
 1572      04EB
 1573 0ca6 9FF87400 	    ldrb r0,version 
 1574 0caa 4FEA1010 	    lsr r0,#4 
 1575 0cae 00F13000 	    add r0,#'0' 
 1576 0cb2 3A28     	    cmp r0,#'9'+1 
 1577 0cb4 01D4     	    bmi 1f 
 1578 0cb6 00F10700 	    add r0,#7 
 1579              	  1:
 1580 0cba 00B5FFF7 	    _CALL uart_putc 
 1580      FEFF5DF8 
 1580      04EB
 1581 0cc4 4FF02E00 	    mov r0,#'. 
 1582 0cc8 00B5FFF7 	    _CALL uart_putc 
 1582      FEFF5DF8 
 1582      04EB
 1583 0cd2 9FF84800 	    ldrb r0,version 
 1584 0cd6 00F00F00 	    and r0,#15 
 1585 0cda 00F13000 	    add r0,'0' 
 1586 0cde 3A28     	    cmp r0,#'9'+1 
 1587 0ce0 01D4     	    bmi 1f 
 1588 0ce2 00F10700 	    add r0,#7
 1589              	  1: 
 1590 0ce6 00B5FFF7 	    _CALL uart_putc 
 1590      FEFF5DF8 
 1590      04EB
 1591 0cf0 00B5FFF7 	    _CALL cr
 1591      FEFF5DF8 
 1591      04EB
ARM GAS  tinyBasic.s 			page 47


 1592 0cfa 7047     	    _RET  
 1593              	version_msg:
 1594 0cfc 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1594      65207069 
 1594      6C6C2074 
 1594      696E7920 
 1594      42415349 
 1595              	version:
 1596 0d1c 10       	    .byte 0x10 
 1597 0d1d 0000BF   	    .p2align 2 
 1598              	
 1599              	
 1600              	/*****************************
 1601              	    clear_vars 
 1602              	    initialize variables to 0
 1603              	  input:
 1604              	    none 
 1605              	  output:
 1606              	    none 
 1607              	  use:
 1608              	    r0,r1,r2 
 1609              	*****************************/
 1610              	    _FUNC clear_vars 
 1611 0d20 07B4     	    push {r0,r1,r2}
 1612 0d22 80EA0000 	    eor r0,r0 
 1613 0d26 04F16001 	    add r1,UPP,#VARS
 1614 0d2a 4FF01A02 	    mov r2,#26
 1615 0d2e 41F8040B 	1:  str r0,[r1],#4 
 1616 0d32 013A     	    subs r2,#1
 1617 0d34 FBD1     	    bne 1b  
 1618 0d36 07BC     	    pop {r0,r1,r2}
 1619 0d38 7047     	    _RET 
 1620              	
 1621              	/*****************************
 1622              	   clear_basic 
 1623              	   reset BASIC system variables 
 1624              	   and clear variables and RAM 
 1625              	*****************************/
 1626 0d3a 00BF     	    _FUNC clear_basic
 1627 0d3c 80EA0000 	  	eor r0,r0
 1628 0d40 2064     	    str r0,[UPP,#FLAGS] 
 1629 0d42 6060     	    str r0,[UPP,#COUNT]
 1630 0d44 2060     	    str r0,[UPP,#IN_SAVED]
 1631 0d46 A060     	    str r0,[UPP,#BASICPTR]
 1632 0d48 E060     	    str r0,[UPP,#DATAPTR]
 1633 0d4a 2061     	    str r0,[UPP,#DATA]
 1634 0d4c 6061     	    str r0,[UPP,#DATALEN]
 1635 0d4e 04F1D000 	    add r0,UPP,#BASIC_START 
 1636 0d52 00F11000 	    add r0,#16 
 1637 0d56 6FF00F01 	    mvn r1,#15
 1638 0d5a 00EA0100 	    and r0,r1 
 1639 0d5e 2063     	    str r0,[UPP,#TXTBGN]
 1640 0d60 6063     	    str r0,[UPP,#TXTEND]
 1641 0d62 C4F8D000 	    str r0,[UPP,#HERE]
 1642 0d66 00B5FFF7 	    _CALL clear_vars
 1642      DAFF5DF8 
 1642      04EB
ARM GAS  tinyBasic.s 			page 48


 1643 0d70 206B     	    ldr r0,[UPP,#TXTBGN]
 1644 0d72 DFF83C10 	    ldr r1,tib 
 1645 0d76 82EA0202 	    eor r2,r2 
 1646 0d7a 40F8042B 	1:  str r2,[r0],#4
 1647 0d7e 8842     	    cmp r0,r1 
 1648 0d80 FBD4     	    bmi 1b 
 1649 0d82 7047     	    _RET  
 1650              	
 1651              	/***********************************
 1652              	   warm_init 
 1653              	   initialize interpreter context 
 1654              	  input:
 1655              	    none
 1656              	  output:
 1657              	    none 
 1658              	  use:
 1659              	    r0 
 1660              	***********************************/
 1661              	warm_init:
 1662              	// reset data stack       
 1663 0d84 DFF824C0 	    ldr DP,dstack 
 1664 0d88 4FF0000A 	    mov IN,#0 // BASIC line index 
 1665 0d8c 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1666 0d90 80EA0000 	    eor r0,r0 
 1667 0d94 6060     	    str r0,[UPP,#COUNT]  
 1668 0d96 2064     	    str r0,[UPP,#FLAGS]
 1669 0d98 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1670 0d9a 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1671 0d9e 6064     	    str r0,[UPP,#TAB_WIDTH]
 1672 0da0 4FF00A00 	    mov r0,#10 // default base decimal 
 1673 0da4 A061     	    str r0,[UPP,#BASE]
 1674 0da6 7047     	    _RET  
 1675              	
 1676 0da8 00000000 	mstack: .word _mstack 
 1677 0dac 00000000 	dstack: .word _dstack 
 1678 0db0 00000000 	tib: .word _tib 
 1679 0db4 00000000 	pad: .word _pad 
 1680 0db8 FCFFFFFF 	array: .word _pad - 4 
 1681 0dbc 0A524541 	ready: .asciz "\nREADY" 
 1681      445900
 1682              	
 1683              	/**********************************
 1684              	    warm_start 
 1685              	    start BASIC interpreter doesn't  
 1686              	    reset variables and code space 
 1687              	  input:
 1688              	    none 
 1689              	  output:
 1690              	    none 
 1691              	**********************************/
 1692 0dc3 00       	    _GBL_FUNC warm_start 
 1693              	// initialise parameters stack
 1694 0dc4 FFF7DEFF 	    bl warm_init
 1695              	// reset main stack 
 1696 0dc8 5FF82400 	    ldr r0,mstack
 1697 0dcc 8546     	    mov sp,r0 
 1698 0dce DFF82804 	    ldr r0,=ready 
ARM GAS  tinyBasic.s 			page 49


 1699 0dd2 00B5FFF7 	    _CALL uart_puts 
 1699      FEFF5DF8 
 1699      04EB
 1700              	// fall in cmd_line 
 1701              	
 1702              	/**********************************
 1703              	   cmd_line 
 1704              	   shell command line 
 1705              	   input:
 1706              	      none 
 1707              	   output:
 1708              	      none 
 1709              	   use:
 1710              	
 1711              	***********************************/
 1712              	    _FUNC cmd_line 
 1713 0ddc 00B5FFF7 	    _CALL cr
 1713      FEFF5DF8 
 1713      04EB
 1714 0de6 80EA0000 	    eor r0,r0 
 1715 0dea C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1716 0dee 5FF84000 	1:  ldr r0,tib
 1717 0df2 4FF05001 	    mov r1,#TIB_SIZE 
 1718 0df6 00B5FFF7 	    _CALL readln 
 1718      FEFF5DF8 
 1718      04EB
 1719 0e00 0940     	    ands r1,r1 // empty line 
 1720 0e02 F4D0     	    beq 1b 
 1721 0e04 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1721      D7FA5DF8 
 1721      04EB
 1722 0e0e EED0     	    beq 1b  // tokens stored in text area 
 1723              	// interpret tokenized line 
 1724              	interpreter:
 1725 0e10 00B500F0 	  _CALL next_token 
 1725      21F85DF8 
 1725      04EB
 1726 0e1a 0228     	  cmp r0,#2
 1727 0e1c F8D4     	  bmi interpreter    
 1728 0e1e 1A28     	  cmp r0,#TK_LABEL 
 1729 0e20 F6D0     	  beq interpreter 
 1730 0e22 1728     	  cmp r0,#TK_CMD 
 1731 0e24 03D1     	  bne 2f
 1732 0e26 0846     	  mov r0,r1 
 1733 0e28 00F012F8 	  bl execute  
 1734 0e2c F0E7     	  b interpreter   
 1735              	2: 
 1736 0e2e 1428     	  cmp r0,#TK_VAR 
 1737 0e30 05D1     	  bne 3f 
 1738 0e32 00B500F0 	  _CALL let_var 
 1738      BDFB5DF8 
 1738      04EB
 1739 0e3c E8E7     	  b interpreter 
 1740              	3: 
 1741 0e3e 0C28     	  cmp r0,#TK_ARRAY 
 1742 0e40 05D1     	  bne 4f
 1743 0e42 00B500F0 	  _CALL let_array 
ARM GAS  tinyBasic.s 			page 50


 1743      C3FB5DF8 
 1743      04EB
 1744 0e4c E0E7     	  b interpreter
 1745              	4: 
 1746 0e4e 07E6     	  b syntax_error
 1747              	
 1748              	/*****************************
 1749              	    execute 
 1750              	    execute a BASIC routine from 
 1751              	    its token value 
 1752              	  input:
 1753              	    r0  BASIC SUB|FUNC token  
 1754              	  output: 
 1755              	    depend on SUB|FUNc
 1756              	*****************************/
 1757              	    _FUNC execute 
 1758 0e50 EA49     	    ldr r1,=fn_table 
 1759 0e52 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1760 0e56 0047     	    bx r0 
 1761              	
 1762              	/*************************************
 1763              	  next_token 
 1764              	  extract next token from token list 
 1765              	  input:
 1766              	    none 
 1767              	  output:
 1768              	    r0    token attribute
 1769              	    r1    token value if there is one 
 1770              	  use:
 1771              	    T1    exit token type  
 1772              	****************************/
 1773              	    _FUNC next_token 
 1774 0e58 6068     	    ldr r0,[UPP,#COUNT]
 1775 0e5a 8245     	    cmp IN,r0 
 1776 0e5c 11D4     	    bmi 0f
 1777              	// reached end of line skip to next one 
 1778 0e5e 8344     	    add BPTR,r0 // next line 
 1779 0e60 606B     	    ldr r0,[UPP,#TXTEND]
 1780 0e62 8345     	    cmp BPTR,r0 
 1781 0e64 7FF5FEAF 	    bpl warm_start // end of program
 1782 0e68 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1783 0e6c 6060     	    str r0,[UPP,#COUNT] 
 1784 0e6e 4FF0030A 	    mov IN,#3
 1785 0e72 00B5FFF7 	    _CALL show_trace
 1785      BAF95DF8 
 1785      04EB
 1786 0e7c 80EA0000 	    eor r0,r0
 1787 0e80 7047     	    _RET 
 1788              	0: 
 1789 0e82 C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1790 0e86 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1791 0e8a 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1792 0e8e 0AF1010A 	    add IN,#1  
 1793 0e92 1328     	    cmp r0,#TK_CHAR 
 1794 0e94 1AD4     	    bmi 9f // these tokens have no value  
 1795 0e96 1828     	    cmp r0,#TK_SCONST 
 1796 0e98 04D5     	    bpl 1f
ARM GAS  tinyBasic.s 			page 51


 1797              	    // tokens with .byte value 
 1798 0e9a 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1799 0e9e 0AF1010A 	    add IN,#1 
 1800 0ea2 7047     	    _RET  
 1801 0ea4 1C28     	1:  cmp r0,#TK_QSTR 
 1802 0ea6 0DD1     	    bne 2f 
 1803 0ea8 0BEB0A01 	    add r1,BPTR,IN
 1804 0eac 0846     	    mov r0,r1 
 1805 0eae 00B5FFF7 	    _CALL strlen 
 1805      FEFF5DF8 
 1805      04EB
 1806 0eb8 8244     	    add IN,r0 
 1807 0eba 0AF1010A 	    add IN,#1
 1808 0ebe 4FF01C00 	    mov r0,#TK_QSTR 
 1809 0ec2 7047     	    _RET  
 1810              	2:  // .word value 
 1811 0ec4 5BF80A10 	    ldr r1,[BPTR,IN] 
 1812 0ec8 0AF1040A 	    add IN,#4 
 1813 0ecc 7047     	9:  _RET
 1814              	
 1815              	
 1816              	/*********************************
 1817              	    expect 
 1818              	    check if next token is of 
 1819              	    expected type. If not 
 1820              	    call syntax_error  
 1821              	  input:
 1822              	      r0   token attribute
 1823              	  output:
 1824              	      r0  token attribute 
 1825              	      r1  token value
 1826              	  use:
 1827              	      T1   
 1828              	**********************************/
 1829 0ece 00BF     	    _FUNC expect 
 1830 0ed0 4DF8048D 	    push {T1}
 1831 0ed4 8046     	    mov T1,r0 
 1832 0ed6 00B5FFF7 	    _CALL next_token 
 1832      BEFF5DF8 
 1832      04EB
 1833 0ee0 4045     	    cmp r0,T1  
 1834 0ee2 7FF4BDAD 	    bne syntax_error 
 1835 0ee6 5DF8048B 	    pop {T1}
 1836 0eea 7047     	    _RET 
 1837              	
 1838              	/***********************************
 1839              	    func_args 
 1840              	    get function arguments list 
 1841              	  input:
 1842              	    r0    required arguments count  
 1843              	  output:
 1844              	    r0    arg. count 
 1845              	  use:
 1846              	
 1847              	************************************/
 1848              	    _FUNC func_args 
 1849 0eec 0346     	    mov r3,r0 
ARM GAS  tinyBasic.s 			page 52


 1850 0eee 4FF00500 	    mov r0,#TK_LPAREN 
 1851 0ef2 00B5FFF7 	    _CALL expect
 1851      ECFF5DF8 
 1851      04EB
 1852 0efc 1846     	    mov r0,r3  
 1853 0efe 00B500F0 	    _CALL arg_list 
 1853      0CF85DF8 
 1853      04EB
 1854 0f08 01B4     	    push {r0}
 1855 0f0a 4FF00600 	    mov r0,#TK_RPAREN 
 1856 0f0e 00B5FFF7 	    _CALL expect 
 1856      DEFF5DF8 
 1856      04EB
 1857 0f18 01BC     	    pop {r0}
 1858 0f1a 7047     	    _RET 
 1859              	
 1860              	/**********************************
 1861              	    arg_list 
 1862              	    get arguments list on dstack 
 1863              	  input:
 1864              	    r0  required arguments count  
 1865              	  output:
 1866              	    r0    arg count
 1867              	  use:
 1868              	    T1    tmp count  
 1869              	***********************************/
 1870              	    _FUNC arg_list 
 1871 0f1c 4DF8048D 	    push {T1}
 1872 0f20 88EA0808 	    eor T1,T1
 1873 0f24 0346     	    mov r3,r0 // required count  
 1874 0f26 00B500F0 	1:  _CALL expression 
 1874      C0F85DF8 
 1874      04EB
 1875 0f30 1B28     	    cmp R0,#TK_INTGR  
 1876 0f32 0AD1     	    bne 2f
 1877 0f34 4CF8041D 	    _PUSH r1 
 1878 0f38 08F10108 	    add T1,#1 
 1879 0f3c 00B5FFF7 	    _CALL next_token 
 1879      8BFF5DF8 
 1879      04EB
 1880 0f46 0228     	    cmp r0,#TK_COMMA 
 1881 0f48 EDD0     	    beq 1b 
 1882 0f4a D4F800A0 	2:  _UNGET_TOKEN 
 1882      D4F808B0 
 1883 0f52 4046     	9:  mov r0,T1
 1884 0f54 9842     	    cmp r0,r3 
 1885 0f56 3FF583AD 	    bmi syntax_error 
 1886 0f5a 5DF8048B 	    pop {T1}
 1887 0f5e 7047     	    _RET 
 1888              	
 1889              	
 1890              	/***********************************
 1891              	 factor
 1892              	 arithmetick factor parser 
 1893              	 factor ::= ['+'|'-'|e]  var | @ |
 1894              				 integer | function |
 1895              				 '('expression')' 
ARM GAS  tinyBasic.s 			page 53


 1896              	  input: 
 1897              	    none
 1898              	  output:
 1899              	    r0   token attribute 
 1900              	    r1   token value 
 1901              	  use:
 1902              	    r2   temp 
 1903              	    r3   sign 
 1904              	***********************************/
 1905              	    _FUNC factor 
 1906 0f60 0CB4     	    push {r2,r3}
 1907 0f62 00B5FFF7 	    _CALL next_token
 1907      78FF5DF8 
 1907      04EB
 1908 0f6c 4FF00103 	    mov r3,#1 // default sign +  
 1909 0f70 0828     	    cmp r0,#TK_MINUS  
 1910 0f72 06D1     	    bne 1f 
 1911 0f74 4FF0FF33 	    mov r3,#-1 // minus sign 
 1912 0f78 00B5FFF7 	0:  _CALL next_token
 1912      6DFF5DF8 
 1912      04EB
 1913 0f82 1B28     	1:  cmp r0,#TK_INTGR 
 1914 0f84 55D0     	    beq 8f 
 1915 0f86 0C28     	    cmp r0,#TK_ARRAY 
 1916 0f88 1DD1     	    bne 2f 
 1917 0f8a 4FF00500 	    mov r0,#TK_LPAREN 
 1918 0f8e 00B5FFF7 	    _CALL expect 
 1918      9EFF5DF8 
 1918      04EB
 1919 0f98 00B500F0 	    _CALL expression
 1919      87F85DF8 
 1919      04EB
 1920 0fa2 1B28     	    cmp r0,#TK_INTGR
 1921 0fa4 7FF45CAD 	    bne syntax_error
 1922 0fa8 0A46     	    mov r2,r1  
 1923 0faa 4FF00600 	    mov r0,#TK_RPAREN
 1924 0fae 00B5FFF7 	    _CALL expect 
 1924      8EFF5DF8 
 1924      04EB
 1925 0fb8 1046     	    mov r0,r2 
 1926 0fba 00B500F0 	    _CALL get_array_element 
 1926      E2F85DF8 
 1926      04EB
 1927 0fc4 35E0     	    b 8f
 1928 0fc6 0528     	2:  cmp r0,#TK_LPAREN 
 1929 0fc8 13D1     	    bne 3f 
 1930 0fca 00B500F0 	    _CALL expression 
 1930      6EF85DF8 
 1930      04EB
 1931 0fd4 1B28     	    cmp r0,#TK_INTGR 
 1932 0fd6 7FF443AD 	    bne syntax_error
 1933 0fda 0A46     	    mov r2,r1   
 1934 0fdc 4FF00600 	    mov r0,#TK_RPAREN
 1935 0fe0 00B5FFF7 	    _CALL expect 
 1935      75FF5DF8 
 1935      04EB
 1936 0fea 1146     	    mov r1,r2 
ARM GAS  tinyBasic.s 			page 54


 1937 0fec 4FF01B00 	    mov r0,#TK_INTGR
 1938 0ff0 1FE0     	    b 8f       
 1939 0ff2 1428     	3:  cmp r0,#TK_VAR 
 1940 0ff4 06D1     	    bne 4f
 1941 0ff6 0846     	    mov r0,r1  
 1942 0ff8 00B500F0 	    _CALL get_var 
 1942      D7F85DF8 
 1942      04EB
 1943 1002 16E0     	    b 8f 
 1944 1004 1528     	4:  cmp r0,#TK_IFUNC 
 1945 1006 06D1     	    bne 6f 
 1946 1008 0846     	5:  mov r0,r1  
 1947 100a 00B5FFF7 	    _CALL execute
 1947      20FF5DF8 
 1947      04EB
 1948 1014 0DE0     	    b 8f 
 1949 1016 1A28     	6:  cmp r0,#TK_LABEL
 1950 1018 07D1     	    bne 7f 
 1951 101a 41F00040 	    orr r0,r1,#(1<<31) 
 1952 101e 00B5FFF7 	    _CALL search_const
 1952      3CF95DF8 
 1952      04EB
 1953 1028 03E0     	    b 8f 
 1954 102a 1828     	7:  cmp r0,#TK_SCONST 
 1955 102c 03D1     	    bne 9f 
 1956 102e 4FF01B00 	    mov r0,#TK_INTGR
 1957 1032 03FB01F1 	8:  mul r1,r3 
 1958 1036 0CBC     	9:  pop {r2,r3}   
 1959 1038 7047     	    _RET 
 1960              	
 1961              	
 1962              	/*****************************************
 1963              	    term 
 1964              	    term parser 
 1965              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1966              	    output:
 1967              	      r0  	token attribute 
 1968              	      r1		integer
 1969              	    use:
 1970              	      r2    first factor 
 1971              	      r3    operator *|/|%
 1972              	******************************************/
 1973 103a 00BF     	    _FUNC term 
 1974 103c 00B5FFF7 	    _CALL factor
 1974      8FFF5DF8 
 1974      04EB
 1975 1046 1B28     	    cmp r0,#TK_INTGR
 1976 1048 00D0     	    beq 0f 
 1977 104a 7047     	    _RET // not a factor    
 1978 104c 0CB4     	0:  push {r2,r3}
 1979 104e 0A46     	    mov r2,r1 // first factor    
 1980 1050 00B5FFF7 	0:  _CALL next_token
 1980      01FF5DF8 
 1980      04EB
 1981 105a 0346     	    mov r3,r0  // operator 
 1982 105c 0928     	    cmp r0,TK_MULT
 1983 105e 01D4     	    bmi 1f 
ARM GAS  tinyBasic.s 			page 55


 1984 1060 0C28     	    cmp r0,#TK_MOD+1
 1985 1062 06D4     	    bmi 2f
 1986 1064 D4F800A0 	1:  _UNGET_TOKEN
 1986      D4F808B0 
 1987 106c 4FF01B00 	    mov r0,#TK_INTGR
 1988 1070 19E0     	    b 9f 
 1989 1072 00B5FFF7 	2:  _CALL factor
 1989      74FF5DF8 
 1989      04EB
 1990 107c 1B28     	    cmp r0,#TK_INTGR
 1991 107e 7FF4EFAC 	    bne syntax_error 
 1992 1082 092B     	    cmp r3,#TK_MULT
 1993 1084 02D1     	    bne 3f 
 1994              	// multiplication
 1995 1086 01FB02F2 	    mul r2,r1
 1996 108a E1E7     	    b 0b  
 1997 108c 0A2B     	3:  cmp r3,#TK_DIV 
 1998 108e 02D1     	    bne 4f
 1999              	// division
 2000 1090 92FBF1F2 	    sdiv r2,r2,r1
 2001 1094 DCE7     	    b 0b  
 2002              	4: // modulo
 2003 1096 1046     	    mov r0,r2 
 2004 1098 92FBF1F2 	    sdiv r2,r2,r1 
 2005 109c 01FB02F2 	    mul  r2,r1 
 2006 10a0 A0EB0202 	    sub  r2,r0,r2
 2007 10a4 D4E7     	    b 0b  
 2008 10a6 1146     	9:  mov r1,r2 
 2009 10a8 0CBC     	    pop {r2,r3}
 2010 10aa 7047     	    _RET 
 2011              	
 2012              	/*****************************************
 2013              	    expression 
 2014              	    arithmetic expression parser 
 2015              	    expression ::= term [['+'|'-'] term]*
 2016              	    result range {-32768..32767}
 2017              	    output:
 2018              	      r0    TK_NONE || TK_INTGR 
 2019              	      r1 	  integer
 2020              	    use:
 2021              	      r2  left term 
 2022              	      r3  operator +|-
 2023              	******************************************/
 2024              	    _FUNC expression 
 2025 10ac 00B5FFF7 	    _CALL term 
 2025      C5FF5DF8 
 2025      04EB
 2026 10b6 1B28     	    cmp r0,#TK_INTGR 
 2027 10b8 00D0     	    beq 0f 
 2028 10ba 7047     	    _RET   
 2029 10bc 0CB4     	0:  push {r2,r3}
 2030 10be 0A46     	    mov r2,r1 // first term
 2031 10c0 00B5FFF7 	1:  _CALL next_token 
 2031      C9FE5DF8 
 2031      04EB
 2032 10ca 0346     	    mov r3,r0 //  +|-
 2033 10cc 0728     	    cmp r0,#TK_PLUS 
ARM GAS  tinyBasic.s 			page 56


 2034 10ce 08D0     	    beq 3f 
 2035 10d0 0828     	    cmp r0,#TK_MINUS  
 2036 10d2 06D0     	    beq 3f
 2037 10d4 D4F800A0 	    _UNGET_TOKEN 
 2037      D4F808B0 
 2038 10dc 4FF01B00 	    mov r0,#TK_INTGR
 2039 10e0 0EE0     	    b 9f 
 2040 10e2 00B5FFF7 	3:  _CALL term 
 2040      AAFF5DF8 
 2040      04EB
 2041 10ec 1B28     	    cmp r0,#TK_INTGR 
 2042 10ee 7FF4B7AC 	    bne syntax_error 
 2043 10f2 072B     	    cmp r3,#TK_PLUS 
 2044 10f4 02D0     	    beq 4f 
 2045 10f6 A2EB0102 	    sub r2,r1 // term1-term2  
 2046 10fa E1E7     	    b 1b 
 2047 10fc 0A44     	4:  add r2,r1 // term1+term2
 2048 10fe DFE7     	    b 1b
 2049 1100 1146     	9:  mov r1,r2 
 2050 1102 0CBC     	    pop {r2,r3}
 2051 1104 7047     	    _RET 
 2052              	
 2053              	
 2054              	/**********************************************
 2055              	    relation
 2056              	    rel ::= expr1 rel_op expr2
 2057              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2058              	    relation return  integer , zero is false 
 2059              	    output:
 2060              	        r0	TK_INTGR  
 2061              	        r1	integer 
 2062              	    use:
 2063              	        r2   first operand 
 2064              	        r3   relop   
 2065              	**********************************************/
 2066 1106 00BF     	    _FUNC relation 
 2067 1108 0CB4     	    push {r2,r3}
 2068 110a 00B5FFF7 	    _CALL expression 
 2068      CEFF5DF8 
 2068      04EB
 2069 1114 1B28     	    cmp r0,#TK_INTGR 
 2070 1116 7FF4A3AC 	    bne syntax_error 
 2071 111a 0A46     	    mov r2,r1  // first operand  
 2072 111c 00B5FFF7 	    _CALL next_token 
 2072      9BFE5DF8 
 2072      04EB
 2073 1126 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2074 112a 0D28     	    cmp r0,#TK_EQUAL 
 2075 112c 1DD4     	    bmi 8f 
 2076 112e 1328     	    cmp r0,#TK_NE+1
 2077 1130 1BD5     	    bpl 8f 
 2078 1132 00B5FFF7 	    _CALL expression 
 2078      BAFF5DF8 
 2078      04EB
 2079 113c 1B28     	    cmp r0,#TK_INTGR 
 2080 113e 7FF48FAC 	    bne syntax_error 
 2081 1142 8A42     	    cmp r2,r1 // compare operands  
ARM GAS  tinyBasic.s 			page 57


 2082 1144 4FF0FF31 	    mov r1,#-1 
 2083 1148 2D4A     	    ldr r2,=relop_jmp
 2084 114a D2E803F0 	    tbb [r2,r3]    
 2085              	rel_idx0:
 2086              	rel_eq:
 2087 114e 11D0     	    beq 9f 
 2088 1150 08E0     	    b rel_false
 2089              	rel_gt:
 2090 1152 0FDC     	    bgt 9f  
 2091 1154 06E0     	    b rel_false  
 2092              	rel_ge:
 2093 1156 0DDA     	    bge 9f  
 2094 1158 04E0     	    b rel_false  
 2095              	rel_lt: 
 2096 115a 0BDB     	    blt 9f   
 2097 115c 02E0     	    b rel_false 
 2098              	rel_le:
 2099 115e 09DD     	    ble 9f  
 2100 1160 00E0     	    b rel_false 
 2101              	rel_ne:
 2102 1162 07D1     	    bne 9f 
 2103              	rel_false:    
 2104 1164 81EA0101 	    eor r1,r1  // false
 2105 1168 04E0     	    b 9f  
 2106 116a D4F800A0 	8:  _UNGET_TOKEN 
 2106      D4F808B0 
 2107 1172 1146     	    mov r1,r2    
 2108 1174 4FF01B00 	9:  mov r0,#TK_INTGR
 2109 1178 0CBC     	    pop {r2,r3}
 2110 117a 7047     	    _RET 
 2111              	
 2112              	
 2113              	relop_jmp: 
 2114 117c 00       	  .byte 0 // =  
 2115 117d 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2116 117e 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2117 117f 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2118 1180 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2119 1181 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2120              	
 2121              	
 2122              	/***********************************
 2123              	    get_array_element
 2124              	    return value of @(n)
 2125              	  input:
 2126              	    r0    indice 
 2127              	  output:
 2128              	    r0   TK_INTGR
 2129              	    r1   value  
 2130              	************************************/
 2131 1182 00BF     	    _FUNC get_array_element 
 2132 1184 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2133 1188 4FEA8000 	    lsl r0,#2 
 2134 118c C0EB0100 	    rsb r0,r1 
 2135 1190 0168     	    ldr r1,[r0]
 2136 1192 4FF01B00 	    mov r0,#TK_INTGR 
 2137 1196 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 58


 2138              	
 2139              	
 2140              	/***********************************
 2141              	    set_array_element 
 2142              	    set value of array element 
 2143              	  input:
 2144              	    r0   index 
 2145              	    r1   new value 
 2146              	  output:
 2147              	    none
 2148              	  use:
 2149              	    r2    array pointer 
 2150              	**********************************/
 2151              	    _FUNC set_array_element 
 2152 1198 04B4     	    push {r2}
 2153 119a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2154 119e 4FEA8000 	    lsl r0,#2 
 2155 11a2 A1EB0001 	    sub r1,r0 
 2156 11a6 0960     	    str r1,[r1]
 2157 11a8 04BC     	    pop {r2}
 2158 11aa 7047     	    _RET 
 2159              	
 2160              	/***********************************
 2161              	   get_var 
 2162              	   get variable value 
 2163              	  input:
 2164              	     r0    variable index {0..25}
 2165              	  output:
 2166              	     r0    TK_INTGR
 2167              	     r1    value 
 2168              	**********************************/
 2169              	    _FUNC get_var 
 2170 11ac 04F16001 	    add r1,UPP,#VARS
 2171 11b0 4FEA8000 	    lsl r0,#2 
 2172 11b4 0958     	    ldr r1,[r1,r0]
 2173 11b6 4FF01B00 	    mov r0,#TK_INTGR
 2174 11ba 7047     	    _RET 
 2175              	
 2176              	/*********************************
 2177              	    set_var 
 2178              	    set variable value 
 2179              	  input:
 2180              	     r0    variable index {0..25}
 2181              	     r1    new value 
 2182              	  output:
 2183              	    none 
 2184              	  use:
 2185              	    r2   vars pointer 
 2186              	*********************************/
 2187              	    _FUNC set_var 
 2188 11bc 04B4     	    push {r2}
 2189 11be 04F16002 	    add r2,UPP,#VARS
 2190 11c2 4FEA8000 	    lsl r0,#2
 2191 11c6 1150     	    str r1,[r2,r0]
 2192 11c8 04BC     	    pop {r2}
 2193 11ca 7047     	    _RET 
 2194              	
ARM GAS  tinyBasic.s 			page 59


 2195              	/******************************
 2196              	    CONSTANTS data
 2197              	******************************/
 2198              	
 2199              	  .section .rodata 
 2200              	
 2201              	// system variables initial value 
 2202              	uzero:
 2203 0000 00000000 	  .word 0 // IN_SAVED
 2204 0004 00000000 	  .word 0 // COUNT
 2205 0008 00000000 	  .word 0 // BASICPTR
 2206 000c 00000000 	  .word 0 // DATAPTR
 2207 0010 00000000 	  .word 0 // DATA
 2208 0014 00000000 	  .word 0 // DATALEN
 2209 0018 0A000000 	  .word 10 // BASE
 2210 001c 00000000 	  .word 0 // TICKS
 2211 0020 00000000 	  .word 0 // TIMER
 2212 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2213 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2214 002c 00000000 	  .word 0 // FSFREE
 2215 0030 00000000 	  .word 0 // TXTBGN
 2216 0034 00000000 	  .word 0 // TXTEND
 2217 0038 00000000 	  .word 0 //LOOP_DEPTH
 2218 003c 00000000 	  .word 0 // ARRAY_SIZE
 2219 0040 00000000 	  .word 0 // FLAGS
 2220 0044 04000000 	  .word 4 // TAB_WIDTH
 2221 0048 00000000 	  .word 0 // RX_HEAD
 2222 004c 00000000 	  .word 0 // RX_TAIL
 2223 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2224 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2224      00000000 
 2225 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2226 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2227 00d0 00000000 	  .word 0 // HERE 
 2228              	ulast:
 2229              	
 2230              	  .section .rodata.dictionary 
 2231              	
 2232              	// keep alphabetic order for BASIC names from Z-A
 2233              	// this sort order is for for WORDS cmd output. 	
 2234              	  .type kword_end, %object
 2235              		.equ link, 0
 2236              	kword_end:
 2237 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2237      00000000 
 2237      00000000 
 2237      00000000 
 2238 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2238      61000000 
 2238      15000000 
 2238      59504F53 
ARM GAS  tinyBasic.s 			page 60


 2238      00000000 
 2239 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2239      60000000 
 2239      15000000 
 2239      58504F53 
 2239      00000000 
 2240 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2240      5F000000 
 2240      15000000 
 2240      584F5200 
 2241 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2241      5E000000 
 2241      17000000 
 2241      574F5244 
 2241      53000000 
 2242 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2242      5D000000 
 2242      17000000 
 2242      57414954 
 2242      00000000 
 2243 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2243      5C000000 
 2243      17000000 
 2243      554E5449 
 2243      4C000000 
 2244 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2244      5B000000 
 2244      15000000 
 2244      55464C41 
 2244      53480000 
 2245 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2245      5A000000 
 2245      15000000 
 2245      55424F55 
 2245      4E440000 
 2246 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2246      59000000 
 2246      17000000 
 2246      54524143 
 2246      45000000 
 2247 00c0 B8000000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2247      58000000 
 2247      17000000 
 2247      544F4E45 
 2247      5F494E49 
 2248 00d8 CC000000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2248      57000000 
 2248      17000000 
 2248      544F4E45 
 2248      00000000 
 2249 00ec E4000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2249      56000000 
 2249      17000000 
 2249      544F0000 
 2250 00fc F8000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2250      54000000 
 2250      17000000 
ARM GAS  tinyBasic.s 			page 61


 2250      54494D45 
 2250      52000000 
 2251 0110 08010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2251      55000000 
 2251      15000000 
 2251      54494D45 
 2251      4F555400 
 2252 0124 1C010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2252      53000000 
 2252      15000000 
 2252      5449434B 
 2252      53000000 
 2253 0138 30010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2253      52000000 
 2253      17000000 
 2253      5448454E 
 2253      00000000 
 2254 014c 44010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2254      51000000 
 2254      17000000 
 2254      54414200 
 2255 015c 58010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2255      50000000 
 2255      17000000 
 2255      53544F52 
 2255      45000000 
 2256 0170 68010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2256      4F000000 
 2256      17000000 
 2256      53544F50 
 2256      00000000 
 2257 0184 7C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2257      4E000000 
 2257      17000000 
 2257      53544550 
 2257      00000000 
 2258 0198 90010000 	  _dict_entry TK_CMD,SPI_WRITE,SPI_WRITE_IDX // spi_write 
 2258      4D000000 
 2258      17000000 
 2258      5350495F 
 2258      57524954 
 2259 01b0 A4010000 	  _dict_entry TK_CMD,SPI_SEL,SPI_SELECT_IDX // spi_select
 2259      4C000000 
 2259      17000000 
 2259      5350495F 
 2259      53454C00 
 2260 01c4 BC010000 	  _dict_entry TK_IFUNC,SPI_READ,SPI_READ_IDX // spi_read
 2260      4B000000 
 2260      15000000 
 2260      5350495F 
 2260      52454144 
 2261 01dc D0010000 	  _dict_entry TK_CMD,SPI_INIT,SPI_INIT_IDX // spi_init 
 2261      4A000000 
 2261      17000000 
 2261      5350495F 
 2261      494E4954 
 2262 01f4 E8010000 	  _dict_entry TK_CMD,SPI_DSEL,SPI_DSEL_IDX // spi_deselect 
ARM GAS  tinyBasic.s 			page 62


 2262      49000000 
 2262      17000000 
 2262      5350495F 
 2262      4453454C 
 2263 020c 00020000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2263      48000000 
 2263      17000000 
 2263      53504300 
 2264 021c 18020000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2264      47000000 
 2264      17000000 
 2264      534C4545 
 2264      50000000 
 2265 0230 28020000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2265      46000000 
 2265      17000000 
 2265      53455256 
 2265      4F5F504F 
 2266 0248 3C020000 	  _dict_entry TK_CMD,SERVO_OFF,SERVO_OFF_IDX, // servo_off 
 2266      45000000 
 2266      17000000 
 2266      53455256 
 2266      4F5F4F46 
 2267 0260 54020000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2267      44000000 
 2267      17000000 
 2267      53455256 
 2267      4F5F494E 
 2268 0278 6C020000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2268      43000000 
 2268      17000000 
 2268      53415645 
 2268      00000000 
 2269 028c 84020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2269      42000000 
 2269      17000000 
 2269      52554E00 
 2270 029c 98020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2270      41000000 
 2270      15000000 
 2270      52534849 
 2270      46540000 
 2271 02b0 A8020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2271      40000000 
 2271      15000000 
 2271      524E4400 
 2272 02c0 BC020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2272      3F000000 
 2272      17000000 
 2272      52455455 
 2272      524E0000 
 2273 02d4 CC020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2273      3E000000 
 2273      17000000 
 2273      52455354 
 2273      4F524500 
 2274 02e8 E0020000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
ARM GAS  tinyBasic.s 			page 63


 2274      3D000000 
 2274      17000000 
 2274      52454D00 
 2275 02f8 F4020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2275      3C000000 
 2275      15000000 
 2275      52454144 
 2275      00000000 
 2276 030c 04030000 	  _dict_entry TK_CMD,RANDOMIZE,RANDOMIZE_IDX // randomize 
 2276      3B000000 
 2276      17000000 
 2276      52414E44 
 2276      4F4D495A 
 2277 0324 18030000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2277      3A000000 
 2277      15000000 
 2277      514B4559 
 2277      00000000 
 2278 0338 30030000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2278      39000000 
 2278      17000000 
 2278      50555400 
 2279 0348 44030000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2279      38000000 
 2279      17000000 
 2279      50555348 
 2279      00000000 
 2280 035c 54030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2280      37000000 
 2280      17000000 
 2280      5052494E 
 2280      54000000 
 2281 0370 68030000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2281      36000000 
 2281      15000000 
 2281      504F5000 
 2282 0380 7C030000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2282      35000000 
 2282      17000000 
 2282      504F4B45 
 2282      57000000 
 2283 0394 8C030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2283      34000000 
 2283      17000000 
 2283      504F4B45 
 2283      48000000 
 2284 03a8 A0030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2284      33000000 
 2284      17000000 
 2284      504F4B45 
 2284      42000000 
 2285 03bc B4030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2285      2F000000 
 2285      17000000 
 2285      504D4F44 
 2285      45000000 
 2286 03d0 C8030000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
ARM GAS  tinyBasic.s 			page 64


 2286      32000000 
 2286      15000000 
 2286      5045454B 
 2286      57000000 
 2287 03e4 DC030000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2287      31000000 
 2287      15000000 
 2287      5045454B 
 2287      48000000 
 2288 03f8 F0030000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2288      30000000 
 2288      15000000 
 2288      5045454B 
 2288      42000000 
 2289 040c 04040000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2289      2E000000 
 2289      17000000 
 2289      50415553 
 2289      45000000 
 2290 0420 18040000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2290      2D000000 
 2290      15000000 
 2290      50414400 
 2291 0430 2C040000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
 2291      01000000 
 2291      18000000 
 2291      4F555450 
 2291      55545F50 
 2292 0448 3C040000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2292      06000000 
 2292      18000000 
 2292      4F555450 
 2292      55545F4F 
 2293 0460 54040000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2293      0A000000 
 2293      18000000 
 2293      4F555450 
 2293      55545F41 
 2294 0478 6C040000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2294      0E000000 
 2294      18000000 
 2294      4F555450 
 2294      55545F41 
 2295 0490 84040000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2295      2C000000 
 2295      17000000 
 2295      4F555400 
 2296 04a0 9C040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2296      2B000000 
 2296      15000000 
 2296      4F520000 
 2297 04b0 AC040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2297      2A000000 
 2297      15000000 
 2297      4E4F5400 
 2298 04c0 BC040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2298      29000000 
ARM GAS  tinyBasic.s 			page 65


 2298      17000000 
 2298      4E455854 
 2298      00000000 
 2299 04d4 CC040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2299      28000000 
 2299      17000000 
 2299      4E455700 
 2300 04e4 E0040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2300      27000000 
 2300      15000000 
 2300      4C534849 
 2300      46540000 
 2301 04f8 F0040000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2301      26000000 
 2301      17000000 
 2301      4C4F4341 
 2301      54450000 
 2302 050c 04050000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2302      25000000 
 2302      17000000 
 2302      4C4F4144 
 2302      00000000 
 2303 0520 18050000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2303      24000000 
 2303      17000000 
 2303      4C495354 
 2303      00000000 
 2304 0534 2C050000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2304      23000000 
 2304      17000000 
 2304      4C455400 
 2305 0544 40050000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2305      22000000 
 2305      16000000 
 2305      4B455900 
 2306 0554 50050000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2306      21000000 
 2306      15000000 
 2306      494E5645 
 2306      52540000 
 2307 0568 60050000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2307      11000000 
 2307      18000000 
 2307      494E5055 
 2307      545F5055 
 2308 0580 74050000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2308      10000000 
 2308      18000000 
 2308      494E5055 
 2308      545F5044 
 2309 0598 8C050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2309      04000000 
 2309      18000000 
 2309      494E5055 
 2309      545F464C 
 2310 05b0 A4050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2310      00000000 
ARM GAS  tinyBasic.s 			page 66


 2310      18000000 
 2310      494E5055 
 2310      545F414E 
 2311 05c8 BC050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2311      20000000 
 2311      17000000 
 2311      494E5055 
 2311      54000000 
 2312 05dc D4050000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2312      1F000000 
 2312      15000000 
 2312      494E0000 
 2313 05ec E8050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2313      1E000000 
 2313      17000000 
 2313      49460000 
 2314 05fc F8050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2314      1D000000 
 2314      17000000 
 2314      48455800 
 2315 060c 08060000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2315      00100140 
 2315      18000000 
 2315      4750494F 
 2315      43000000 
 2316 0620 18060000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2316      000C0140 
 2316      18000000 
 2316      4750494F 
 2316      42000000 
 2317 0634 2C060000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2317      00080140 
 2317      18000000 
 2317      4750494F 
 2317      41000000 
 2318 0648 40060000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2318      1C000000 
 2318      17000000 
 2318      474F544F 
 2318      00000000 
 2319 065c 54060000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2319      1B000000 
 2319      17000000 
 2319      474F5355 
 2319      42000000 
 2320 0670 68060000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2320      1A000000 
 2320      15000000 
 2320      47455400 
 2321 0680 7C060000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2321      19000000 
 2321      15000000 
 2321      46524545 
 2321      00000000 
 2322 0694 8C060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2322      18000000 
 2322      17000000 
ARM GAS  tinyBasic.s 			page 67


 2322      464F5247 
 2322      45540000 
 2323 06a8 A0060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2323      17000000 
 2323      17000000 
 2323      464F5200 
 2324 06b8 B4060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2324      16000000 
 2324      17000000 
 2324      45524153 
 2324      45000000 
 2325 06cc C4060000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2325      15000000 
 2325      17000000 
 2325      454E4400 
 2326 06dc D8060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2326      14000000 
 2326      17000000 
 2326      44554D50 
 2326      00000000 
 2327 06f0 E8060000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2327      13000000 
 2327      17000000 
 2327      44524F50 
 2327      00000000 
 2328 0704 FC060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2328      12000000 
 2328      17000000 
 2328      444F0000 
 2329 0714 10070000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2329      11000000 
 2329      17000000 
 2329      44495200 
 2330 0724 20070000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2330      10000000 
 2330      17000000 
 2330      44454300 
 2331 0734 30070000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2331      0F000000 
 2331      17000000 
 2331      44415441 
 2331      00000000 
 2332 0748 40070000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2332      0E000000 
 2332      17000000 
 2332      434F4E53 
 2332      54000000 
 2333 075c 54070000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2333      0D000000 
 2333      17000000 
 2333      434C5300 
 2334 076c 68070000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2334      0C000000 
 2334      16000000 
 2334      43484152 
 2334      00000000 
 2335 0780 78070000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
ARM GAS  tinyBasic.s 			page 68


 2335      0B000000 
 2335      17000000 
 2335      42544F47 
 2335      4C000000 
 2336 0794 8C070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2336      0A000000 
 2336      15000000 
 2336      42544553 
 2336      54000000 
 2337 07a8 A0070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2337      09000000 
 2337      17000000 
 2337      42534554 
 2337      00000000 
 2338 07bc B4070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2338      08000000 
 2338      17000000 
 2338      42524553 
 2338      00000000 
 2339 07d0 C8070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2339      07000000 
 2339      15000000 
 2339      42495400 
 2340 07e0 DC070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2340      06000000 
 2340      17000000 
 2340      41575500 
 2341 07f0 EC070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX // autorun 
 2341      05000000 
 2341      17000000 
 2341      4155544F 
 2341      52554E00 
 2342 0804 FC070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2342      04000000 
 2342      15000000 
 2342      41534300 
 2343 0814 10080000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2343      03000000 
 2343      15000000 
 2343      414E4400 
 2344 0824 20080000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2344      02000000 
 2344      17000000 
 2344      41444300 
 2345 0834 30080000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2345      01000000 
 2345      15000000 
 2345      414E4100 
 2346              	first_link: 
 2347 0844 40080000 	  .word LINK 
 2348 0848 00000000 	  .word ABS_IDX 
 2349 084c 15000000 	  .word TK_IFUNC
 2350              	kword_dict: // first name field 
 2351              	  .equ LINK,. 
 2352 0850 41425300 	  .asciz "ABS" 
 2353              	  .p2align 2 
 2354              	
ARM GAS  tinyBasic.s 			page 69


 2355              	    .section .rodata.fn_tabld 
 2356              	
 2357              	//comands and fonctions address table
 2358              	  .type fn_table, %object
 2359              	fn_table:
 2360 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,autorun,awu,bitmask 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2361 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2361      00000000 
 2362 003c 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2362      00000000 
 2362      00000000 
 2362      00000000 
 2362      00000000 
 2363 0054 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2363      00000000 
 2364 0074 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2364      00000000 
 2365 008c 00000000 		.word let,list,load,locate,lshift,new,next
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2365      00000000 
 2366 00a8 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2366      00000000 
 2367 00cc 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2367      00000000 
 2368 00e8 00000000 		.word qkey,randomize,read,skip_line
 2368      00000000 
 2368      00000000 
 2368      00000000 
 2369 00f8 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_off,servo_pos 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370 011c 00000000 		.word sleep,spc,spi_deselect,spi_init,spi_read,spi_select,spi_write,step,stop,store,tab
 2370      00000000 
 2370      00000000 
ARM GAS  tinyBasic.s 			page 70


 2370      00000000 
 2370      00000000 
 2371 0148 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace,ubound,uflash,until
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2371      00000000 
 2372 0174 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2372      00000000 
 2373 0188 00000000 		.word 0 
 2374              	
 2375              	
 2376              	/**********************************
 2377              	    BASIC commands and functions 
 2378              	**********************************/
 2379              	
 2380              	    .section .text.basic , "ax", %progbits 
 2381              	
 2382              	
 2383              	/*******************************
 2384              	  BASIC:  ABS expr 
 2385              	  input:
 2386              	    none 
 2387              	  output:
 2388              	    r0    token type 
 2389              	    r1    abs(expr)
 2390              	  use:
 2391              	    none 
 2392              	******************************/
 2393              	    _FUNC abs 
 2394 0000 4FF00100 	    mov r0,#1
 2395 0004 00B5FFF7 	    _CALL arg_list
 2395      FEFF5DF8 
 2395      04EB
 2396 000e 5CF8041B 	    _POP r1 
 2397 0012 11F0004F 	    tst r1,#(1<<31)
 2398 0016 01D0     	    beq 9f
 2399 0018 C1F10001 	    rsb r1,#0 
 2400 001c 4FF01B00 	9:  mov r0,#TK_INTGR
 2401 0020 7047     	   _RET 
 2402              	
 2403              	/*************************************
 2404              	  BASIC: ANA(pin)
 2405              	  read analog input 
 2406              	*************************************/
 2407 0022 00BF     	    _FUNC analog_read
 2408 0024 4FF00100 	    mov r0,#1
 2409 0028 00B5FFF7 	    _CALL func_args
 2409      FEFF5DF8 
 2409      04EB
 2410 0032 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2410      C4F20101 
 2411 003a 5CF8042B 	    _POP r2 // channel
 2412 003e 02F01F02 	    and r2,#31
ARM GAS  tinyBasic.s 			page 71


 2413 0042 4A63     	    str r2,[r1,#ADC_SQR3]
 2414              	// start conversion 
 2415 0044 8868     	    ldr r0,[r1,#ADC_CR2]
 2416 0046 8860     	    str r0,[r1,#ADC_CR2]
 2417              	adc_loop:
 2418 0048 0868     	    ldr r0,[R1,#ADC_SR]
 2419 004a 10F0020F 	    tst r0,#2 // EOC bit test 
 2420 004e FBD0     	    beq adc_loop
 2421 0050 C96C     	    ldr r1,[r1,#ADC_DR]
 2422 0052 4FF01B00 	    mov r0,#TK_INTGR    
 2423 0056 7047     	    _RET
 2424              	
 2425              	/***********************************
 2426              	  BASIC: ADC 1|0
 2427              	  enable|disable analog digital converter 
 2428              	  freq -> of conversion
 2429              	*****************************************/
 2430              	    _FUNC adc 
 2431 0058 4FF00100 	    mov r0,#1
 2432 005c 00B5FFF7 	    _CALL arg_list 
 2432      FEFF5DF8 
 2432      04EB
 2433 0066 5CF8041B 	    _POP r1 
 2434 006a E9B1     	1:  cbz r1,adc_off 
 2435              	adc_on:
 2436 006c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2436      C4F20201 
 2437 0074 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2438 0076 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2439 007a 8861     	    str r0,[r1,#RCC_APB2ENR]
 2440 007c 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2440      C4F20101 
 2441 0084 4FF00100 	    _MOV32 r0,1+(1<<23)
 2441      C0F28100 
 2442 008c 8860     	    str r0,[r1,#ADC_CR2]
 2443 008e 42F21070 	    mov r0,#10000
 2444 0092 0138     	1:  subs r0,#1
 2445 0094 FDD1     	    bne 1b 
 2446              	    // calibration
 2447 0096 8868     	    ldr r0,[r1,#ADC_CR2]  
 2448 0098 40F00400 	    orr r0,#(1<<2) // CAL bit 
 2449 009c 8860     	    str r0,[r1,#ADC_CR2]
 2450 009e 8868     	1:  ldr r0,[r1,#ADC_CR2]
 2451 00a0 10F0040F 	    tst r0,#(1<<2)
 2452 00a4 FBD1     	    bne 1b     
 2453 00a6 7047     	    _RET 
 2454              	adc_off:
 2455 00a8 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2455      C4F20101 
 2456 00b0 80EA0000 	    eor r0,r0 
 2457 00b4 8860     	    str r0,[r1,#ADC_CR2]
 2458 00b6 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2458      C4F20201 
 2459 00be 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2460 00c0 6FF00902 	    mvn r2,#9 
 2461 00c4 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2462 00c8 8861     	    str r0,[r1,#RCC_APB2ENR]
ARM GAS  tinyBasic.s 			page 72


 2463 00ca 7047     	    _RET 
 2464              	
 2465              	
 2466              	/************************************
 2467              	  BASIC: AND(expr1,expr2)
 2468              	  logical ANND bit to between expr1,expr2
 2469              	************************************/
 2470              	    _FUNC bit_and
 2471 00cc 4FF00200 	    mov r0,#2 
 2472 00d0 00B5FFF7 	    _CALL func_args 
 2472      FEFF5DF8 
 2472      04EB
 2473 00da 5CF8040B 	    _POP r0 
 2474 00de 5CF8041B 	    _POP r1 
 2475 00e2 01EA0001 	    and r1,r0 
 2476 00e6 4FF01B00 	    mov r0,#TK_INTGR
 2477 00ea 7047     	    _RET
 2478              	
 2479              	/*******************************************
 2480              	  BASIC: ASC(string|char)
 2481              	  return ASCII code of char of first char 
 2482              	  of string 
 2483              	*******************************************/
 2484              	    _FUNC ascii
 2485 00ec 4FF00500 	    mov r0,#TK_LPAREN 
 2486 00f0 00B5FFF7 	    _CALL expect 
 2486      FEFF5DF8 
 2486      04EB
 2487 00fa 00B5FFF7 	    _CALL next_token 
 2487      FEFF5DF8 
 2487      04EB
 2488 0104 1C28     	    cmp r0,#TK_QSTR
 2489 0106 0AD0     	    beq 2f 
 2490 0108 1328     	    cmp r0,#TK_CHAR 
 2491 010a 00D1     	    bne 1f  
 2492 010c 08E0     	    b 9f
 2493 010e 1628     	1:  cmp r0,#TK_CFUNC 
 2494 0110 0846     	    mov r0,r1 
 2495 0112 00B5FFF7 	    _CALL execute
 2495      FEFF5DF8 
 2495      04EB
 2496 011c 00E0     	    b 9f      
 2497 011e 0978     	2:  ldrb r1,[r1]
 2498 0120 4CF8041D 	9:  _PUSH r1 
 2499 0124 4FF00600 	    mov r0,#TK_RPAREN 
 2500 0128 00B5FFF7 	    _CALL expect 
 2500      FEFF5DF8 
 2500      04EB
 2501 0132 4FF01B00 	    mov r0,#TK_INTGR 
 2502 0136 5CF8041B 	    _POP r1 
 2503 013a 7047     	    _RET
 2504              	
 2505              	/*******************************************
 2506              	  BASIC: AWU time_sleep  
 2507              	  enable LSI and IWDG and place MCU in 
 2508              	  deep sleep. IDWG wakeup MCU 
 2509              	******************************************/
ARM GAS  tinyBasic.s 			page 73


 2510              	    _FUNC awu
 2511 013c 4FF00100 	    mov r0,#1
 2512 0140 00B5FFF7 	    _CALL arg_list
 2512      FEFF5DF8 
 2512      04EB
 2513 014a 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2513      C4F20201 
 2514 0152 486A     	    ldr r0,[r1,#RCC_CSR]
 2515              	// enable LSI 
 2516 0154 80F00100 	    eor r0,#1
 2517 0158 4862     	    str r0,[r1,#RCC_CSR]
 2518              	// wait for LSIRDY 
 2519 015a 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2520 015c 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2521 0160 FBD0     	    beq 1b 
 2522              	// configure IWDG
 2523              	// compute values for IWDG_PR and IWDG_RLR 
 2524 0162 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2525 0166 4FF00A03 	    mov r3,#10
 2526 016a 03FB02F2 	    mul r2,r3 // milliseconds adjustment
 2527 016e 4FF6FF73 	    _MOV32 r3,0x3ffff 
 2527      C0F20303 
 2528 0176 02EA0302 	    and r2,r3 // r2 limit=0x3ffff
 2529 017a 83EA0303 	    eor r3,r3
 2530 017e B2F5805F 	2:  cmp r2,#4096 
 2531 0182 04D4     	    bmi 3f 
 2532 0184 4FEA5202 	    lsr r2,#1 
 2533 0188 03F10103 	    add r3,#1
 2534 018c F7E7     	    b 2b
 2535              	// initialize IWDG      
 2536 018e 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2536      C4F20001 
 2537 0196 45F25550 	    mov r0,0x5555 // enable register writing
 2538 019a 0860     	    str r0,[r1,#IWDG_KR]
 2539 019c 4B60     	    str r3,[r1,#IWDG_PR]
 2540 019e 8A60     	    str r2,[r1,#IWDG_RLR]
 2541 01a0 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2542 01a4 0860     	    str r0,[r1,#IWDG_KR]
 2543 01a6 01F0E5B8 	    b sleep // place MCU in deep sleep
 2544 01aa 7047     	    _RET
 2545              	
 2546              	/********************************************
 2547              	  BASIC: BIT(expr)
 2548              	  expr must be between 0..31 and is used 
 2549              	  to create 1 bit mask at that position
 2550              	*******************************************/
 2551              	    _FUNC bitmask
 2552 01ac 4FF00100 	    mov r0,#1
 2553 01b0 00B5FFF7 	    _CALL func_args
 2553      FEFF5DF8 
 2553      04EB
 2554 01ba 5CF8040B 	    _POP r0
 2555 01be 4FF00101 	    mov r1,#1
 2556 01c2 01FA00F1 	    lsl r1,r0 
 2557 01c6 4FF01B00 	9:  mov r0,#TK_INTGR
 2558 01ca 7047     	    _RET 
 2559              	
ARM GAS  tinyBasic.s 			page 74


 2560              	  
 2561              	  /*********************************
 2562              	   BASIC: BRES adr, mask   
 2563              	   reset bits [adr]= [adr] & ~mask  
 2564              	   input:
 2565              	     none 
 2566              	    output;
 2567              	      none 
 2568              	    use:
 2569              	      T1   temp
 2570              	      T2   temp 
 2571              	*******************************/     
 2572              	    _FUNC bit_reset
 2573 01cc 4FF00200 	    mov r0,#2
 2574 01d0 00B5FFF7 	    _CALL arg_list 
 2574      FEFF5DF8 
 2574      04EB
 2575 01da 5CF8041B 	    _POP r1 //mask 
 2576 01de 5CF8040B 	    _POP r0 //address 
 2577 01e2 D0F80090 	    ldr T2,[r0] 
 2578 01e6 81F0FF31 	    eor r1,#-1 // ~mask 
 2579 01ea 01EA0901 	    and r1,T2
 2580 01ee 0160     	    str r1,[r0]
 2581 01f0 7047     	    _RET  
 2582              	
 2583              	
 2584              	/*********************************
 2585              	   BASIC: BSET adr, mask   
 2586              	   reset bits [adr]= [adr] & ~mask  
 2587              	   input:
 2588              	      none 
 2589              	    output;
 2590              	      none 
 2591              	    use:
 2592              	      T1   temp
 2593              	      T2   temp  
 2594              	*******************************/     
 2595 01f2 00BF     	    _FUNC bit_set
 2596 01f4 4FF00200 	    mov r0,#2
 2597 01f8 00B5FFF7 	    _CALL arg_list 
 2597      FEFF5DF8 
 2597      04EB
 2598 0202 5CF8041B 	    _POP r1 //mask 
 2599 0206 5CF8040B 	    _POP r0 //address 
 2600 020a D0F80090 	    ldr T2,[r0] 
 2601 020e 41EA0901 	    orr r1,T2
 2602 0212 0160     	    str r1,[r0]
 2603 0214 7047     	    _RET 
 2604              	
 2605              	  /*********************************
 2606              	   BASIC: BTOGL adr, mask   
 2607              	   reset bits [adr]= [adr] & ~mask  
 2608              	   input:
 2609              	     r0    adr 
 2610              	     r1    mask 
 2611              	    output;
 2612              	      none 
ARM GAS  tinyBasic.s 			page 75


 2613              	    use:
 2614              	      T1   temp
 2615              	      T2   temp  
 2616              	*******************************/     
 2617 0216 00BF     	    _FUNC bit_toggle
 2618 0218 4FF00200 	    mov r0,#2
 2619 021c 00B5FFF7 	    _CALL arg_list 
 2619      FEFF5DF8 
 2619      04EB
 2620 0226 5CF8041B 	    _POP r1 //mask 
 2621 022a 5CF8040B 	    _POP r0 //address 
 2622 022e D0F80090 	    ldr T2,[r0] 
 2623 0232 81EA0901 	    eor r1,T2
 2624 0236 0160     	    str r1,[r0]
 2625 0238 7047     	    _RET  
 2626              	
 2627              	/********************************
 2628              	  BASIC: BTEST(addr,bit)
 2629              	  return bit state at address
 2630              	********************************/
 2631 023a 00BF     	    _FUNC bit_test
 2632 023c 4FF00200 	    mov r0,#2 
 2633 0240 00B5FFF7 	    _CALL func_args
 2633      FEFF5DF8 
 2633      04EB
 2634 024a 5CF8041B 	    _POP r1
 2635 024e 4FF00100 	    mov r0,#1
 2636 0252 01F01F01 	    and r1,#31  
 2637 0256 21B1     	1:  cbz r1, 2f
 2638 0258 4FEA4000 	    lsl r0,#1
 2639 025c A1F10101 	    sub r1,#1
 2640 0260 F9E7     	    b 1b 
 2641 0262 5CF8041B 	2:  _POP r1
 2642 0266 0968     	    ldr r1,[r1]
 2643 0268 01EA0001 	    and r1,r0 
 2644 026c 09B1     	    cbz r1,9f 
 2645 026e 4FF00101 	    mov r1,#1
 2646 0272 4FF01B00 	9:  mov r0,#TK_INTGR    
 2647 0276 7047     	    _RET 
 2648              	
 2649              	/********************************
 2650              	  BASIC: CLS 
 2651              	  clear terminal screen move cursor 
 2652              	  home 
 2653              	************************************/
 2654              	    _FUNC cls 
 2655 0278 00B5FFF7 	    _CALL clear_screen
 2655      FEFF5DF8 
 2655      04EB
 2656 0282 7047     	    _RET 
 2657              	
 2658              	/*********************************
 2659              	  BASIC: CHAR(expr)
 2660              	  convert expr in character 
 2661              	********************************/
 2662              	    _FUNC char
 2663 0284 4FF00100 	    mov r0,#1
ARM GAS  tinyBasic.s 			page 76


 2664 0288 00B5FFF7 	    _CALL func_args
 2664      FEFF5DF8 
 2664      04EB
 2665 0292 5CF8041B 	    _POP r1 
 2666 0296 01F07F01 	    and r1,#127 
 2667 029a 4FF01300 	    mov r0,#TK_CHAR
 2668 029e 7047     	    _RET 
 2669              	
 2670              	/**********************************
 2671              	  BASIC: CONST label=expr [,!label=expr]
 2672              	  define constants constants are 
 2673              	  store at end of BASIC code.
 2674              	  use:
 2675              	    T1   *location 
 2676              	    T2   *bound 
 2677              	*********************************/
 2678              	    _FUNC const
 2679 02a0 206C10F0 	    _RTO 
 2679      010F03D1 
 2679      4FF00700 
 2679      FFF7FEBF 
 2680 02b0 D4F8D080 	    ldr T1,[UPP,#HERE]
 2681 02b4 DFF8DC96 	    ldr T2,pad_adr  
 2682 02b8 C845     	1:  cmp T1,T2 
 2683 02ba 03D4     	    bmi 2f 
 2684 02bc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2685 02c0 FFF7FEBF 	    b tb_error 
 2686 02c4 00B5FFF7 	2:  _CALL next_token 
 2686      FEFF5DF8 
 2686      04EB
 2687 02ce 1A28     	    cmp r0,#TK_LABEL 
 2688 02d0 7FF4FEAF 	    bne syntax_error 
 2689 02d4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2690 02d8 4CF8041D 	    _PUSH r1 
 2691 02dc 4FF00D00 	    mov r0,#TK_EQUAL
 2692 02e0 00B5FFF7 	    _CALL expect
 2692      FEFF5DF8 
 2692      04EB
 2693 02ea 00B5FFF7 	    _CALL expression  
 2693      FEFF5DF8 
 2693      04EB
 2694 02f4 1B28     	    cmp r0,#TK_INTGR
 2695 02f6 7FF4FEAF 	    bne syntax_error
 2696 02fa 5CF8040B 	    _POP r0 
 2697 02fe 48F8040B 	    str r0,[T1],#4
 2698 0302 48F8041B 	    str r1,[T1],#4 
 2699 0306 C4F8D080 	    str T1,[UPP,#HERE]
 2700 030a 00B5FFF7 	    _CALL next_token
 2700      FEFF5DF8 
 2700      04EB
 2701 0314 0228     	    cmp r0,#TK_COMMA 
 2702 0316 CFD0     	    beq 1b 
 2703 0318 D4F800A0 	    _UNGET_TOKEN
 2703      D4F808B0 
 2704              	9:  
 2705 0320 7047     	    _RET 
 2706              	
ARM GAS  tinyBasic.s 			page 77


 2707              	/*****************************
 2708              	  BASIC: READ 
 2709              	  read next data item 
 2710              	  the value can be assigned to
 2711              	  variable or used in expression
 2712              	*****************************/
 2713 0322 00BF     	    _FUNC read
 2714 0324 206C10F0 	    _RTO
 2714      010F03D1 
 2714      4FF00700 
 2714      FFF7FEBF 
 2715 0334 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2716 0336 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2717 0338 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2718 033a 8242     	    cmp r2,r0
 2719 033c 18D0     	    beq seek_next
 2720 033e 4FF00103 	1:  mov r3,#1 
 2721 0342 885C     	    ldrb r0,[r1,r2]
 2722 0344 02F10102 	    add r2,#1
 2723 0348 0028     	    cmp r0,#TK_NONE
 2724 034a 11D0     	    beq seek_next
 2725 034c 0828     	    cmp r0,#TK_MINUS 
 2726 034e 05D1     	    bne 2f 
 2727 0350 4FF0FF33 	    mov r3,#-1
 2728 0354 885C     	    ldrb r0,[r1,r2]
 2729 0356 02F10102 	    add r2,#1
 2730 035a 01E0     	    b 3f  
 2731 035c 0228     	2:  cmp r0,#TK_COMMA
 2732 035e EED0     	    beq 1b  
 2733 0360 1B28     	3:  cmp r0,#TK_INTGR 
 2734 0362 7FF4FEAF 	    bne syntax_error  
 2735 0366 8958     	    ldr r1,[r1,r2]
 2736 0368 02F10402 	    add r2,#4
 2737 036c 2261     	    str r2,[UPP,#DATA]
 2738 036e 12E0     	    b 9f  
 2739              	seek_next: // is next line data ?
 2740 0370 8878     	    ldrb r0,[R1,#2]
 2741 0372 0144     	    add r1,r0 
 2742 0374 C878     	    ldrb r0,[R1,#3]
 2743 0376 1728     	    cmp r0,#TK_CMD
 2744 0378 09D1     	    bne 2f 
 2745 037a 0879     	    ldrb r0,[r1,#4]
 2746 037c 0F28     	    cmp r0,#DATA_IDX 
 2747 037e 06D1     	    bne 2f 
 2748 0380 E160     	    str r1,[UPP,#DATAPTR]
 2749 0382 8878     	    ldrb r0,[r1,#2]
 2750 0384 6061     	    str  r0,[UPP,#DATALEN]
 2751 0386 4FF00502 	    mov r2,#5 
 2752 038a 2261     	    str r2,[UPP,#DATA]
 2753 038c D7E7     	    b 1b 
 2754 038e 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2755 0392 FFF7FEBF 	    b tb_error 
 2756 0396 7047     	9:  _RET 
 2757              	
 2758              	/********************************
 2759              	  BASIC: RESTORE [line#]
 2760              	  set data pointer to first data line 
ARM GAS  tinyBasic.s 			page 78


 2761              	  or a specified line number 
 2762              	********************************/
 2763              	    _FUNC restore
 2764 0398 206C10F0 	    _RTO 
 2764      010F03D1 
 2764      4FF00700 
 2764      FFF7FEBF 
 2765 03a8 00B5FFF7 	    _CALL next_token 
 2765      FEFF5DF8 
 2765      04EB
 2766 03b2 1B28     	    cmp r0,#TK_INTGR 
 2767 03b4 05D0     	    beq 0f 
 2768 03b6 D4F800A0 	    _UNGET_TOKEN
 2768      D4F808B0 
 2769 03be 4FF00001 	    mov r1,#0 
 2770 03c2 40F61773 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2771 03c6 0A46     	    mov r2,r1 
 2772 03c8 216B     	    ldr r1,[UPP,#TXTBGN]
 2773 03ca D4F83480 	    ldr T1,[UPP,#TXTEND]
 2774 03ce 4145     	1:  cmp r1,T1 
 2775 03d0 11D5     	    bpl no_data_line 
 2776 03d2 B1F80300 	    ldrh r0,[r1,#3]
 2777 03d6 9842     	    cmp r0,r3 
 2778 03d8 0AD1     	    bne try_next_line
 2779              	// this is a data line
 2780 03da 12B1     	    cbz r2,2f 
 2781 03dc 0888     	    ldrh r0,[r1]
 2782 03de 9042     	    cmp r0,r2 
 2783 03e0 06D1     	    bne try_next_line
 2784 03e2 E160     	2:  str r1,[UPP,#DATAPTR]
 2785 03e4 8878     	    ldrb r0,[r1,#2]
 2786 03e6 6061     	    str r0,[UPP,#DATALEN]
 2787 03e8 4FF00500 	    mov r0,#5 
 2788 03ec 2061     	    str r0,[UPP,#DATA]
 2789 03ee 07E0     	    b 9f
 2790              	try_next_line:
 2791 03f0 8878     	    ldrb r0,[r1,#2]
 2792 03f2 0144     	    add r1,r0 
 2793 03f4 EBE7     	    b 1b 
 2794              	no_data_line:
 2795 03f6 80EA0000 	    eor r0,r0 
 2796 03fa E060     	    str r0,[UPP,#DATAPTR]
 2797 03fc 2061     	    str r0,[UPP,#DATA]
 2798 03fe 6061     	    str r0,[UPP,#DATALEN]
 2799 0400 7047     	9:  _RET 
 2800              	
 2801              	/***********************************
 2802              	  BASIC: DEC 
 2803              	  switch base to decimal 
 2804              	***********************************/
 2805 0402 00BF     	    _FUNC dec_base
 2806 0404 4FF00A00 	    mov r0,#10
 2807 0408 A061     	    str r0,[UPP,#BASE]
 2808 040a 7047     	    _RET 
 2809              	
 2810              	/***************************************
 2811              	  BASIC: DO 
ARM GAS  tinyBasic.s 			page 79


 2812              	  initialize a DO..UNTIL loop 
 2813              	***************************************/
 2814              	    _FUNC do_loop
 2815 040c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2816 0410 7047     	    _RET 
 2817              	
 2818              	
 2819              	/****************************************
 2820              	  BASIC: DUMP adr, count 
 2821              	    command line only  
 2822              	    print memory content in hexadecimal 
 2823              	    16 bytes per row 
 2824              	    ouput:
 2825              	      none 
 2826              	    use:
 2827              	      r2   byte counter  
 2828              	****************************************/
 2829 0412 00BF     	    _FUNC dump 
 2830 0414 206C10F0 	    _CLO 
 2830      010F03D0 
 2830      4FF00700 
 2830      FFF7FEBF 
 2831 0424 4FF00200 	    mov r0,#2
 2832 0428 00B5FFF7 	    _CALL arg_list 
 2832      FEFF5DF8 
 2832      04EB
 2833 0432 5CF8042B 	    _POP r2   // count 
 2834 0436 5CF8040B 	    _POP  r0  // adr
 2835              	dump01:
 2836 043a 00B500F0 	    _CALL print_dump_header 
 2836      0CF85DF8 
 2836      04EB
 2837 0444 4FF01001 	1:  mov r1,#16
 2838 0448 00B5FFF7 	    _CALL prt_row 
 2838      FEFF5DF8 
 2838      04EB
 2839 0452 103A     	    subs r2,#16 
 2840 0454 F6D5     	    bpl 1b 
 2841 0456 7047     	    _RET 
 2842              	
 2843              	/********************************
 2844              	   print_dump_header
 2845              	********************************/
 2846              	    _FUNC print_dump_header
 2847 0458 2DE90103 	    push {r0,T1,T2}
 2848 045c 4FF00C00 	    mov r0,#12 
 2849 0460 00B5FFF7 	    _CALL cursor_x 
 2849      FEFF5DF8 
 2849      04EB
 2850 046a 4FF00000 	    mov r0,#0
 2851 046e 4FF01009 	    mov T2,#16
 2852 0472 8046     	1:  mov T1,r0 
 2853 0474 00B5FFF7 	    _CALL print_hex 
 2853      FEFF5DF8 
 2853      04EB
 2854 047e 08F10100 	    add r0,T1,#1  
 2855 0482 4845     	    cmp r0,T2 
ARM GAS  tinyBasic.s 			page 80


 2856 0484 F5D4     	    bmi 1b 
 2857 0486 00B5FFF7 	    _CALL cr
 2857      FEFF5DF8 
 2857      04EB
 2858 0490 4FF03D00 	    mov r0,#'='
 2859 0494 4FF04F08 	    mov T1,#79
 2860 0498 00B5FFF7 	2:  _CALL uart_putc
 2860      FEFF5DF8 
 2860      04EB
 2861 04a2 B8F10108 	    subs T1,#1 
 2862 04a6 F7D1     	    bne 2b     
 2863 04a8 00B5FFF7 	    _CALL cr
 2863      FEFF5DF8 
 2863      04EB
 2864 04b2 BDE80103 	    pop {r0,T1,T2}
 2865 04b6 7047     	    _RET 
 2866              	
 2867              	
 2868              	/*******************************
 2869              	  BASIC: END 
 2870              	  exit program 
 2871              	******************************/ 
 2872              	    _FUNC cmd_end
 2873 04b8 FFF7FEBF 	    b warm_start 
 2874 04bc 7047     	    _RET 
 2875              	
 2876              	/*******************************************
 2877              	  BASIC: STORE adr, value 
 2878              	  write value to user space in flash memory 
 2879              	*********************************************/
 2880 04be 00BF     	    _FUNC store 
 2881 04c0 4FF00200 	    mov r0,#2
 2882 04c4 00B5FFF7 	    _CALL arg_list 
 2882      FEFF5DF8 
 2882      04EB
 2883 04ce BCE80300 	    ldmia DP!,{r0,r1}
 2884 04d2 DFF83420 	    ldr r2,user_space
 2885 04d6 9142     	    cmp r1,r2 
 2886 04d8 03D5     	    bpl 1f 
 2887 04da 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2888 04de FFF7FEBF 	    b tb_error 
 2889 04e2 02F58062 	1:  add r2,#1024 
 2890 04e6 9142     	    cmp r1,r2 
 2891 04e8 F7D5     	    bpl 0b 
 2892 04ea 00B5FFF7 	    _CALL flash_store 
 2892      FEFF5DF8 
 2892      04EB
 2893 04f4 7047     	    _RET 
 2894              	
 2895              	/**************************************************
 2896              	  BASIC: ERASE 
 2897              	  erase user space page 
 2898              	*************************************************/
 2899 04f6 00BF     	    _FUNC erase 
 2900 04f8 DFF80C00 	    ldr r0,user_space 
 2901 04fc 00B5FFF7 	    _CALL erase_page 
 2901      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 81


 2901      04EB
 2902 0506 7047     	    _RET 
 2903 0508 00000000 	user_space: .word user 
 2904              	
 2905              	
 2906              	/**************************************************
 2907              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2908              	  introdure FOR...NEXT loop 
 2909              	**************************************************/
 2910              	    _FUNC for
 2911 050c 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2912 0510 4FF00107 	    mov INCR,#1
 2913 0514 00B5FFF7 	    _CALL next_token
 2913      FEFF5DF8 
 2913      04EB
 2914 051e 1428     	    cmp r0,#TK_VAR
 2915 0520 7FF4FEAF 	    bne syntax_error
 2916 0524 02B4     	    push {r1} 
 2917 0526 00B500F0 	    _CALL let_var 
 2917      29F95DF8 
 2917      04EB
 2918 0530 20BC     	    pop {VADR}
 2919 0532 4FEA8505 	    lsl VADR,#2
 2920 0536 2544     	    add VADR,UPP 
 2921 0538 05F16005 	    add VADR,#VARS 
 2922 053c 7047     	    _RET 
 2923              	
 2924              	/***************************************
 2925              	  BASIC: TO expr 
 2926              	  set limit of FOR...NEXT loop 
 2927              	**************************************/
 2928 053e 00BF     	    _FUNC to
 2929 0540 00B5FFF7 	    _CALL expression 
 2929      FEFF5DF8 
 2929      04EB
 2930 054a 1B28     	    cmp r0,#TK_INTGR
 2931 054c 7FF4FEAF 	    bne syntax_error 
 2932 0550 0E46     	    mov LIMIT,r1
 2933              	    // save loop back parameters 
 2934 0552 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2935 0556 7047     	    _RET 
 2936              	
 2937              	/********************************************
 2938              	  BASIC: STEP expr 
 2939              	  set increment for FOR...NEXT loop 
 2940              	********************************************/
 2941              	    _FUNC step
 2942 0558 00B5FFF7 	    _CALL expression 
 2942      FEFF5DF8 
 2942      04EB
 2943 0562 1B28     	    cmp r0,#TK_INTGR
 2944 0564 7FF4FEAF 	    bne syntax_error 
 2945 0568 0F46     	    mov INCR,r1
 2946              	    // replace parameters left by TO
 2947 056a 8CE8000C 	    stmia DP, {IN,BPTR}
 2948 056e 7047     	    _RET 
 2949              	
ARM GAS  tinyBasic.s 			page 82


 2950              	/********************************************
 2951              	  BASIC: NEXT var 
 2952              	  incrment FOR...NEXT loop variable
 2953              	  exit if variable cross LIMIT 
 2954              	********************************************/
 2955              	    _FUNC next
 2956 0570 00B5FFF7 	    _CALL next_token 
 2956      FEFF5DF8 
 2956      04EB
 2957 057a 1428     	    cmp r0,#TK_VAR 
 2958 057c 7FF4FEAF 	    bne syntax_error 
 2959 0580 4FEA8101 	    lsl r1,#2 
 2960 0584 2144     	    add r1,UPP 
 2961 0586 01F16001 	    add r1,#VARS 
 2962 058a A942     	    cmp r1,VADR
 2963 058c 7FF4FEAF 	    bne syntax_error 
 2964 0590 2868     	    ldr r0,[VADR]
 2965 0592 3844     	    add r0,INCR 
 2966 0594 2860     	    str r0,[VADR]
 2967 0596 002F     	    cmp INCR,#0
 2968 0598 02D4     	    bmi 2f
 2969 059a B042     	    cmp r0,LIMIT 
 2970 059c 02DC     	    bgt 8f  
 2971 059e 07E0     	    b 9f  
 2972 05a0 B042     	2:  cmp r0,LIMIT 
 2973 05a2 05DA     	    bge 9f  
 2974              	8: // exit for...next
 2975              	  //  drop branch parameters
 2976 05a4 4FF00800 	    _DROP 2
 2976      8444
 2977              	  // restore outer loop parameters
 2978 05aa BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2979 05ae 7047     	    _RET 
 2980 05b0 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2981 05b4 9BF80200 	    ldrb r0,[BPTR,#2]
 2982 05b8 6060     	    str r0,[UPP,#COUNT]
 2983 05ba 00B5FFF7 	    _CALL show_trace 
 2983      FEFF5DF8 
 2983      04EB
 2984 05c4 7047     	    _RET 
 2985              	
 2986              	
 2987              	/*********************************
 2988              	  BASIC: GOSUB expr 
 2989              	  call a subroutine at line# 
 2990              	*********************************/
 2991 05c6 00BF     	    _FUNC gosub
 2992 05c8 00B5FFF7 	    _CALL search_target 
 2992      FEFF5DF8 
 2992      04EB
 2993 05d2 2DE9000C 	    push {IN,BPTR}
 2994              	target:
 2995 05d6 8346     	    mov BPTR,r0 
 2996 05d8 4FF0030A 	    mov IN,#3 
 2997 05dc 9BF80200 	    ldrb r0,[BPTR,#2]
 2998 05e0 6060     	    str r0,[UPP,#COUNT]
 2999 05e2 00B5FFF7 	    _CALL show_trace 
ARM GAS  tinyBasic.s 			page 83


 2999      FEFF5DF8 
 2999      04EB
 3000 05ec 7047     	    _RET 
 3001              	
 3002              	/**********************************
 3003              	  BASIC: RETURN 
 3004              	  leave a subroutine 
 3005              	*********************************/
 3006 05ee 00BF     	    _FUNC return 
 3007 05f0 BDE8000C 	    pop {IN,BPTR}
 3008 05f4 9BF80200 	    ldrb r0,[BPTR,#2]
 3009 05f8 6060     	    str r0,[UPP,#COUNT]
 3010 05fa 00B5FFF7 	    _CALL show_trace 
 3010      FEFF5DF8 
 3010      04EB
 3011 0604 7047     	    _RET 
 3012              	
 3013              	/**********************************
 3014              	  BASIC: GOTO expr 
 3015              	  go to line # | label 
 3016              	**********************************/
 3017 0606 00BF     	    _FUNC goto
 3018 0608 00B5FFF7 	    _CALL search_target 
 3018      FEFF5DF8 
 3018      04EB
 3019 0612 E0E7     	    b target  
 3020              	
 3021              	/***************************************
 3022              	  BASIC: HEX 
 3023              	  set numeric base to hexadecimal 
 3024              	***************************************/
 3025              	    _FUNC hex_base
 3026 0614 4FF01000 	    mov r0,#16 
 3027 0618 A061     	    str r0,[UPP,#BASE]
 3028 061a 7047     	    _RET 
 3029              	
 3030              	/**********************************************
 3031              	  BASIC: IF relation THEN statement
 3032              	  execute statement only if relation is true
 3033              	*********************************************/
 3034              	    _FUNC if
 3035 061c 00B5FFF7 	    _CALL relation 
 3035      FEFF5DF8 
 3035      04EB
 3036 0626 09B9     	    cbnz r1,9f 
 3037 0628 D4F804A0 	    ldr IN,[UPP,#COUNT]
 3038 062c 7047     	9:  _RET 
 3039              	
 3040              	/*******************************************************
 3041              	  BASIC: THEN statement
 3042              	  statements following THEN are executed if relation is !=0
 3043              	  optional, retained for compatibility.
 3044              	******************************************************/
 3045 062e 00BF     	    _FUNC then 
 3046              	// do nothing 
 3047 0630 7047     	    _RET
 3048              	
ARM GAS  tinyBasic.s 			page 84


 3049              	/****************************************
 3050              	  BASIC: INPUT [string]var [,[string]var]+
 3051              	  prompt user for variable value
 3052              	  use:
 3053              	    r2   
 3054              	    T1   variable indice 
 3055              	***************************************/
 3056 0632 00BF     	     _FUNC input_var
 3057              	//    push {r2,T1}
 3058 0634 00B5FFF7 	1:  _CALL next_token 
 3058      FEFF5DF8 
 3058      04EB
 3059 063e 0228     	    cmp r0,#2
 3060 0640 71D4     	    bmi 8f 
 3061 0642 1C28     	    cmp r0,#TK_QSTR 
 3062 0644 11D1     	    bne 2f 
 3063 0646 0846     	    mov r0,r1
 3064 0648 DFF8E810 	    ldr r1,str_buffer
 3065 064c 00B5FFF7 	    _CALL strcpy
 3065      FEFF5DF8 
 3065      04EB
 3066 0656 4FF01400 	    mov r0,#TK_VAR   
 3067 065a 00B5FFF7 	    _CALL expect 
 3067      FEFF5DF8 
 3067      04EB
 3068 0664 8846     	    mov T1,r1 
 3069 0666 3348     	    ldr r0,str_buffer 
 3070 0668 08E0     	    b 3f 
 3071 066a 1428     	2:  cmp r0,#TK_VAR 
 3072 066c 7FF4FEAF 	    bne syntax_error     
 3073 0670 8846     	    mov T1,r1 
 3074 0672 01F14100 	    add r0,r1,#'A' 
 3075 0676 2F49     	    ldr r1,str_buffer
 3076 0678 0880     	    strh r0,[r1]
 3077 067a 0846     	    mov r0,r1 
 3078 067c 00B5FFF7 	3:  _CALL uart_puts  
 3078      FEFF5DF8 
 3078      04EB
 3079 0686 4FF03D00 	    mov r0,#'='
 3080 068a 00B5FFF7 	    _CALL uart_putc
 3080      FEFF5DF8 
 3080      04EB
 3081 0694 DFF89800 	    ldr r0,input_buffer
 3082 0698 4FF02201 	    mov r1,#34 
 3083 069c 00B5FFF7 	    _CALL readln
 3083      FEFF5DF8 
 3083      04EB
 3084 06a6 79B3     	    cbz r1,6f
 3085 06a8 0178     	    ldrb r1,[r0]
 3086 06aa 01B4     	    push {r0}
 3087 06ac 0846     	    mov r0,r1
 3088 06ae 00B5FFF7 	    _CALL is_letter 
 3088      FEFF5DF8 
 3088      04EB
 3089 06b8 01BC     	    pop {r0}
 3090 06ba 02D1     	    bne 3f 
 3091 06bc 01F05F01 	    and r1,#0x5f // uppercase  
ARM GAS  tinyBasic.s 			page 85


 3092 06c0 24E0     	    b 7f 
 3093 06c2 4FF00102 	3:  mov r2,#1
 3094 06c6 2D29     	    cmp r1,#'-'
 3095 06c8 04D1     	    bne 3f 
 3096 06ca 4FF0FF32 	    mov r2,#-1 
 3097 06ce 00F10100 	    add r0,#1 
 3098 06d2 0DE0     	    b 4f  
 3099 06d4 2429     	3:  cmp r1,#'$'
 3100 06d6 04D1     	    bne 3f 
 3101 06d8 4FF01001 	    mov r1,#16
 3102 06dc 00F10100 	    add r0,#1  
 3103 06e0 08E0     	    b 5f 
 3104 06e2 2629     	3:  cmp r1,#'&' 
 3105 06e4 04D1     	    bne 4f 
 3106 06e6 4FF00201 	    mov r1,#2
 3107 06ea 00F10100 	    add r0,#1 
 3108 06ee 01E0     	    b 5f 
 3109 06f0 4FF00A01 	4:  mov r1,#10 
 3110 06f4 00B5FFF7 	5:  _CALL atoi 
 3110      FEFF5DF8 
 3110      04EB
 3111 06fe 18B9     	    cbnz r0,6f
 3112 0700 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3113 0704 FFF7FEBF 	    b tb_error
 3114 0708 02FB01F1 	6:  mul r1,r2 
 3115 070c 4046     	7:  mov r0,T1 
 3116 070e 00B5FFF7 	    _CALL set_var
 3116      FEFF5DF8 
 3116      04EB
 3117 0718 00B5FFF7 	    _CALL next_token
 3117      FEFF5DF8 
 3117      04EB
 3118 0722 0228     	    cmp r0,#TK_COMMA 
 3119 0724 86D0     	    beq 1b 
 3120 0726 D4F800A0 	8:  _UNGET_TOKEN          
 3120      D4F808B0 
 3121              	9:  // pop {r2,T1}       
 3122 072e 7047     	    _RET 
 3123 0730 00000000 	input_buffer: .word _tib 
 3124 0734 00000000 	str_buffer: .word _pad 
 3125              	
 3126              	
 3127              	/*****************************************
 3128              	  BASIC: INVERT(expr)
 3129              	  return 1's complement of expr
 3130              	****************************************/
 3131              	    _FUNC invert
 3132 0738 4FF00100 	    mov r0,#1
 3133 073c 00B5FFF7 	    _CALL func_args
 3133      FEFF5DF8 
 3133      04EB
 3134 0746 5CF8041B 	    _POP r1  
 3135 074a 6FEA0101 	    mvn r1,r1
 3136 074e 4FF01B00 	    mov r0,#TK_INTGR
 3137 0752 7047     	    _RET 
 3138              	
 3139              	/*************************************
ARM GAS  tinyBasic.s 			page 86


 3140              	  BASIC: KEY 
 3141              	  wait for a character from console
 3142              	*************************************/
 3143              	    _FUNC key
 3144 0754 00B5FFF7 	    _CALL uart_getc
 3144      FEFF5DF8 
 3144      04EB
 3145 075e 0146     	    mov r1,r0
 3146 0760 4FF01300 	    mov r0,#TK_CHAR 
 3147 0764 7047     	    _RET  
 3148              	
 3149              	/******************************
 3150              	  BASIC: [LET] var=expr 
 3151              	         [LET] @(expr)=expr
 3152              	  input:
 3153              	    none 
 3154              	  output:
 3155              	    none 
 3156              	  use:
 3157              	
 3158              	****************************/         
 3159 0766 00BF     	    _FUNC let
 3160 0768 00B5FFF7 	    _CALL next_token 
 3160      FEFF5DF8 
 3160      04EB
 3161 0772 1428     	    cmp r0,#TK_VAR
 3162 0774 03D0     	    beq let_var 
 3163 0776 0C28     	    cmp r0,#TK_ARRAY 
 3164 0778 07D0     	    beq let_array 
 3165 077a FFF7FEBF 	    b syntax_error 
 3166              	let_var:
 3167 077e 4FEA8101 	    lsl r1,#2
 3168 0782 04F16000 	    add r0,UPP,#VARS
 3169 0786 0844     	    add r0,r1
 3170 0788 1FE0     	    b 1f 
 3171              	let_array: 
 3172 078a 4FF00500 	    mov r0,#TK_LPAREN
 3173 078e 00B5FFF7 	    _CALL expect 
 3173      FEFF5DF8 
 3173      04EB
 3174 0798 00B5FFF7 	    _CALL expression
 3174      FEFF5DF8 
 3174      04EB
 3175 07a2 1B28     	    cmp r0,#TK_INTGR 
 3176 07a4 7FF4FEAF 	    bne syntax_error
 3177 07a8 4CF8041D 	    _PUSH r1 
 3178 07ac 4FF00600 	    mov r0,#TK_RPAREN
 3179 07b0 00B5FFF7 	    _CALL expect 
 3179      FEFF5DF8 
 3179      04EB
 3180 07ba 5CF8041B 	    _POP r1 
 3181 07be D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3182 07c2 4FEA8101 	    lsl r1,#2 
 3183 07c6 A0EB0100 	    sub r0,r1 
 3184 07ca 4CF8040D 	1:  _PUSH r0 
 3185 07ce 4FF00D00 	    mov r0,#TK_EQUAL 
 3186 07d2 00B5FFF7 	    _CALL expect 
ARM GAS  tinyBasic.s 			page 87


 3186      FEFF5DF8 
 3186      04EB
 3187 07dc 00B5FFF7 	    _CALL expression   
 3187      FEFF5DF8 
 3187      04EB
 3188 07e6 1B28     	    cmp r0,#TK_INTGR
 3189 07e8 7FF4FEAF 	    bne syntax_error   
 3190 07ec 5CF8040B 	2:  _POP r0 
 3191 07f0 0160     	    str r1,[r0]
 3192 07f2 7047     	    _RET  
 3193              	
 3194              	/***************************************
 3195              	  BASIC: LIST [[first]-last]
 3196              	  use:
 3197              	    r2   first line# 
 3198              	    r3   last line#
 3199              	    T1   *line 
 3200              	    T2   TXTEND 
 3201              	**************************************/  
 3202              	    _FUNC list
 3203 07f4 206C10F0 	    _CLO
 3203      010F03D0 
 3203      4FF00700 
 3203      FFF7FEBF 
 3204 0804 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3205 0808 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3206 080c B8F80020 	    ldrh r2,[T1]
 3207 0810 4FF6FF73 	    mov r3,#65535 
 3208 0814 00B5FFF7 	    _CALL next_token 
 3208      FEFF5DF8 
 3208      04EB
 3209 081e 10B3     	    cbz r0,6f 
 3210 0820 1B28     	    cmp r0,#TK_INTGR
 3211 0822 09D1     	    bne 1f 
 3212 0824 0A46     	    mov r2,r1 // first line
 3213 0826 00B5FFF7 	    _CALL next_token
 3213      FEFF5DF8 
 3213      04EB
 3214 0830 0028     	    cmp r0,#TK_NONE 
 3215 0832 01D1     	    bne 1f 
 3216 0834 1346     	    mov r3,r2 
 3217 0836 0CE0     	    b 4f 
 3218 0838 0828     	1:  cmp r0,#TK_MINUS 
 3219 083a 7FF4FEAF 	    bne syntax_error 
 3220 083e 00B5FFF7 	    _CALL next_token 
 3220      FEFF5DF8 
 3220      04EB
 3221 0848 18B1     	    cbz r0,4f 
 3222 084a 1B28     	    cmp r0,#TK_INTGR
 3223 084c 7FF4FEAF 	    bne syntax_error  
 3224 0850 0B46     	    mov r3,r1 
 3225              	4:  // skip lines below r2 
 3226 0852 B8F80000 	    ldrh r0,[T1]
 3227 0856 9042     	    cmp r0,r2 
 3228 0858 05D5     	    bpl 6f 
 3229 085a 98F80200 	    ldrb r0,[T1,#2]
 3230 085e 8044     	    add T1,r0
ARM GAS  tinyBasic.s 			page 88


 3231 0860 C845     	    cmp T1,T2 
 3232 0862 F6D4     	    bmi 4b
 3233 0864 1AE0     	    b 9f 
 3234 0866 C845     	6:  cmp T1,T2  
 3235 0868 18D5     	    bpl 9f
 3236 086a 4046     	    mov r0,T1   
 3237 086c DFF83010 	    ldr r1,out_buff 
 3238 0870 00B5FFF7 	    _CALL decompile_line 
 3238      FEFF5DF8 
 3238      04EB
 3239 087a 00B5FFF7 	    _CALL uart_puts 
 3239      FEFF5DF8 
 3239      04EB
 3240 0884 00B5FFF7 	    _CALL cr 
 3240      FEFF5DF8 
 3240      04EB
 3241 088e 98F80200 	    ldrb r0,[T1,#2]
 3242 0892 8044     	    add T1,r0
 3243 0894 B8F80000 	    ldrh r0,[T1]
 3244 0898 9842     	    cmp r0,r3 
 3245 089a E4DD     	    ble 6b 
 3246 089c FFF7FEBF 	9:  b warm_start 
 3247 08a0 00000000 	out_buff: .word _tib 
 3248              	
 3249              	/********************************
 3250              	  BASIC: LOCATE line,col
 3251              	  return log base 2 of expr 
 3252              	********************************/
 3253              	    _FUNC locate
 3254 08a4 4FF00200 	    mov r0,#2
 3255 08a8 00B5FFF7 	    _CALL arg_list 
 3255      FEFF5DF8 
 3255      04EB
 3256 08b2 5CF8041B 	    _POP r1
 3257 08b6 5CF8040B 	    _POP r0  
 3258 08ba 00B5FFF7 	    _CALL set_curpos 
 3258      FEFF5DF8 
 3258      04EB
 3259 08c4 7047     	    _RET 
 3260              	
 3261              	
 3262              	/****************************************
 3263              	  BASIC: LSHIFT(expr1,expr2)
 3264              	  shift right expr1 of expr2 bits 
 3265              	****************************************/
 3266 08c6 00BF     	    _FUNC lshift
 3267 08c8 4FF00200 	    mov r0,#2
 3268 08cc 00B5FFF7 	    _CALL func_args
 3268      FEFF5DF8 
 3268      04EB
 3269 08d6 BCE80300 	    ldmia DP!,{r0,r1}
 3270 08da 01FA00F1 	    lsl r1,r0 
 3271 08de 4FF01B00 	    mov r0,#TK_INTGR
 3272 08e2 7047     	    _RET 
 3273              	
 3274              	/***********************************
 3275              	  BASIC: NEW 
ARM GAS  tinyBasic.s 			page 89


 3276              	  delete existing program in memory
 3277              	  and clear variables and RAM 
 3278              	***********************************/
 3279              	    _FUNC new
 3280 08e4 206C10F0 	    _CLO 
 3280      010F03D0 
 3280      4FF00700 
 3280      FFF7FEBF 
 3281 08f4 00B5FFF7 	    _CALL clear_basic 
 3281      FEFF5DF8 
 3281      04EB
 3282 08fe FFF7FEBF 	    b warm_start   
 3283              	
 3284              	/************************************
 3285              	  BASIC: NOT relation  
 3286              	  invert logical value or relation
 3287              	************************************/
 3288 0902 00BF     	      _FUNC func_not
 3289 0904 00B5FFF7 	      _CALL relation 
 3289      FEFF5DF8 
 3289      04EB
 3290 090e 11B1     	      cbz r1,8f 
 3291 0910 81EA0101 	      eor r1,r1
 3292 0914 01E0     	      b 9f 
 3293 0916 4FF0FF31 	  8:  mov r1,#-1
 3294 091a 7047     	  9:  _RET 
 3295              	
 3296              	/******************************************
 3297              	  BASIC: OR(expr1,expr2)
 3298              	  binary OR between 2 expressions
 3299              	******************************************/
 3300              	    _FUNC bit_or
 3301 091c 4FF00200 	    mov r0,#2
 3302 0920 00B5FFF7 	    _CALL func_args
 3302      FEFF5DF8 
 3302      04EB
 3303 092a 5CF8040B 	    _POP r0 
 3304 092e 5CF8041B 	    _POP r1
 3305 0932 41EA0001 	    orr r1,r0 
 3306 0936 4FF01B00 	    mov r0,#TK_INTGR
 3307 093a 7047     	    _RET 
 3308              	
 3309              	/****************************************
 3310              	  BASIC: IN(gpio,pin) 
 3311              	  read gpio_idr selected pin  
 3312              	***************************************/
 3313              	    _FUNC pin_input 
 3314 093c 4FF00200 	    mov r0,#2
 3315 0940 00B5FFF7 	    _CALL func_args 
 3315      FEFF5DF8 
 3315      04EB
 3316 094a BCE80300 	    ldmia DP!,{r0,r1}
 3317 094e 4FF00802 	    mov r2,#GPIO_IDR 
 3318 0952 8A58     	    ldr r2,[r1,r2]
 3319 0954 00F00F00 	    and r0,#15 
 3320 0958 22FA00F2 	    lsr r2,r0 
 3321 095c 02F00101 	    and r1,r2,#1 
ARM GAS  tinyBasic.s 			page 90


 3322 0960 4FF01B00 	    mov r0,#TK_INTGR
 3323 0964 7047     	    _RET 
 3324              	
 3325              	
 3326              	/****************************************
 3327              	  BASIC: OUT gpio,pin,value 
 3328              	   output to gpio_odr
 3329              	***************************************/
 3330 0966 00BF     	    _FUNC out
 3331 0968 4FF00300 	    mov r0,#3
 3332 096c 00B5FFF7 	    _CALL arg_list 
 3332      FEFF5DF8 
 3332      04EB
 3333 0976 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3334 097a 08B9     	    cbnz r0,1f 
 3335 097c 01F11001 	    add r1,#16 
 3336 0980 4FF00100 	1:  mov r0,#1 
 3337 0984 00FA01F0 	    lsl r0,r1 
 3338 0988 1061     	    str r0,[r2,#GPIO_BSRR]    
 3339 098a 7047     	    _RET 
 3340              	
 3341              	
 3342              	/****************************************
 3343              	  BASIC: PAD 
 3344              	  return pad buffer address 
 3345              	****************************************/
 3346              	    _FUNC pad_ref
 3347 098c 0149     	    ldr r1,pad_adr  
 3348 098e 4FF01B00 	    mov r0,#TK_INTGR 
 3349 0992 7047     	    _RET 
 3350 0994 00000000 	pad_adr: .word _pad 
 3351              	
 3352              	/***********************
 3353              	  BASIC: PAUSE expr 
 3354              	  suspend execution for 
 3355              	  expr milliseconds 
 3356              	************************/
 3357              	    _FUNC pause
 3358 0998 00B5FFF7 	    _CALL expression 
 3358      FEFF5DF8 
 3358      04EB
 3359 09a2 1B28     	    cmp r0,#TK_INTGR 
 3360 09a4 7FF4FEAF 	    bne syntax_error 
 3361 09a8 E069     	    ldr r0,[UPP,#TICKS]
 3362 09aa 0844     	    add r0,r1 
 3363 09ac E169     	1:  ldr r1,[UPP,#TICKS]
 3364 09ae 8842     	    cmp r0,r1 
 3365 09b0 FCD1     	    bne 1b     
 3366 09b2 7047     	    _RET 
 3367              	
 3368              	/***************************************************
 3369              	  BASIC: PMODE GPIOx,pin,mode
 3370              	  configure a digital pin for input|output
 3371              	  paramters:
 3372              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3373              	    pin      pin {0..15} 
 3374              	    mode 
ARM GAS  tinyBasic.s 			page 91


 3375              	    for input mode:
 3376              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3377              	    for output mode:
 3378              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3379              	***************************************************/
 3380              	    _FUNC pin_mode
 3381 09b4 4FF00300 	    mov r0,#3
 3382 09b8 00B5FFF7 	    _CALL arg_list
 3382      FEFF5DF8 
 3382      04EB
 3383 09c2 5CF8042B 	    _POP r2 // mode 
 3384 09c6 5CF8041B 	    _POP r1 // pin 
 3385 09ca 5CF8040B 	    _POP r0 // gpio 
 3386 09ce 00B500F0 	    _CALL gpio_config 
 3386      04F85DF8 
 3386      04EB
 3387 09d8 7047     	    _RET 
 3388              	
 3389              	/**********************************
 3390              	  gpio_config 
 3391              	  Configure gpio mode 
 3392              	  input:
 3393              	    r0   GPIOx 
 3394              	    r1   pin 
 3395              	    r2   mode 
 3396              	  output:
 3397              	    none 
 3398              	  use:
 3399              	    r3,T1 
 3400              	**********************************/
 3401 09da 00BF     	    _FUNC gpio_config
 3402 09dc 2DE90801 	    push {r3,T1}
 3403 09e0 8046     	    mov T1,r0 
 3404 09e2 80EA0000 	    eor r0,r0 
 3405 09e6 102A     	    cmp r2,#16
 3406 09e8 06D4     	    bmi 0f
 3407 09ea 5FEA7202 	    rors r2,#1  
 3408 09ee 02F00F02 	    and r2,#15
 3409 09f2 01D3     	    bcc 0f 
 3410 09f4 4FF00100 	    mov r0,#1
 3411 09f8 00FA01F0 	0:  lsl r0,r1
 3412 09fc A8F81000 	    strh r0,[T1,#GPIO_BSRR]
 3413 0a00 0829     	1:  cmp r1,#8
 3414 0a02 03D4     	    bmi 2f 
 3415 0a04 08F10408 	    add T1,#4 // CRH
 3416 0a08 A1F10801 	    sub r1,#8 
 3417              	2:  
 3418 0a0c 4FEA8101 	    lsl r1,#2 
 3419 0a10 4FF00F00 	    mov r0,#15
 3420 0a14 00FA01F0 	    lsl r0,r1
 3421 0a18 6FEA0000 	    mvn r0,r0 
 3422 0a1c D8F80030 	    ldr r3,[T1]
 3423 0a20 03EA0003 	    and r3,r0 
 3424 0a24 02FA01F2 	    lsl r2,r1
 3425 0a28 43EA0203 	    orr r3,r2 
 3426 0a2c C8F80030 	    str r3,[T1]
 3427 0a30 BDE80801 	    pop {r3,T1}
ARM GAS  tinyBasic.s 			page 92


 3428 0a34 7047     	    _RET 
 3429              	
 3430              	
 3431              	/*****************************************
 3432              	  BASIC: PEEKB (expr)  
 3433              	  return byte value at address 
 3434              	*****************************************/
 3435 0a36 00BF     	    _FUNC peek8
 3436 0a38 4FF00100 	    mov r0,#1
 3437 0a3c 00B5FFF7 	    _CALL func_args  
 3437      FEFF5DF8 
 3437      04EB
 3438 0a46 5CF8041B 	    _POP r1 
 3439 0a4a 0978     	    ldrb r1,[r1]
 3440 0a4c 4FF01B00 	    mov r0,#TK_INTGR     
 3441 0a50 7047     	    _RET 
 3442              	
 3443              	/*****************************************
 3444              	  BASIC: PEEKH (expr)  
 3445              	  return byte value at address 
 3446              	*****************************************/
 3447 0a52 00BF     	    _FUNC peek16
 3448 0a54 4FF00100 	    mov r0,#1
 3449 0a58 00B5FFF7 	    _CALL func_args  
 3449      FEFF5DF8 
 3449      04EB
 3450 0a62 5CF8041B 	    _POP r1 
 3451 0a66 0988     	    ldrh r1,[r1]
 3452 0a68 4FF01B00 	    mov r0,#TK_INTGR     
 3453 0a6c 7047     	    _RET 
 3454              	
 3455              	/*****************************************
 3456              	  BASIC: PEEKW (expr)  
 3457              	  return byte value at address 
 3458              	*****************************************/
 3459 0a6e 00BF     	    _FUNC peek32
 3460 0a70 4FF00100 	    mov r0,#1
 3461 0a74 00B5FFF7 	    _CALL func_args  
 3461      FEFF5DF8 
 3461      04EB
 3462 0a7e 5CF8041B 	    _POP r1 
 3463 0a82 0968     	    ldr r1,[r1]
 3464 0a84 4FF01B00 	    mov r0,#TK_INTGR     
 3465 0a88 7047     	    _RET 
 3466              	
 3467              	
 3468              	/**********************************
 3469              	  BASIC: POKE8 addr,byte
 3470              	  store byte at addr   
 3471              	**********************************/
 3472 0a8a 00BF     	    _FUNC poke8
 3473 0a8c 4FF00200 	    mov r0,#2
 3474 0a90 00B5FFF7 	    _CALL arg_list
 3474      FEFF5DF8 
 3474      04EB
 3475 0a9a BCE80300 	    ldmia DP!,{r0,r1} 
 3476 0a9e 0870     	    strb r0,[r1]
ARM GAS  tinyBasic.s 			page 93


 3477 0aa0 7047     	    _RET 
 3478              	
 3479              	/**********************************
 3480              	  BASIC: POKE16 addr,hword
 3481              	  store hword at addr   
 3482              	**********************************/
 3483 0aa2 00BF     	    _FUNC poke16
 3484 0aa4 4FF00200 	    mov r0,#2
 3485 0aa8 00B5FFF7 	    _CALL arg_list
 3485      FEFF5DF8 
 3485      04EB
 3486 0ab2 BCE80300 	    ldmia DP!,{r0,r1} 
 3487 0ab6 0880     	    strh r0,[r1]
 3488 0ab8 7047     	    _RET 
 3489              	
 3490              	/**********************************
 3491              	  BASIC: POKE32 addr,word
 3492              	  store word at addr   
 3493              	**********************************/
 3494 0aba 00BF     	    _FUNC poke32
 3495 0abc 4FF00200 	    mov r0,#2
 3496 0ac0 00B5FFF7 	    _CALL arg_list 
 3496      FEFF5DF8 
 3496      04EB
 3497 0aca BCE80300 	    ldmia DP!,{r0,r1} 
 3498 0ace 0860     	    str r0,[r1]
 3499 0ad0 7047     	    _RET 
 3500              	
 3501              	
 3502              	
 3503              	/****************************
 3504              	  BASIC: PRINT|? arg_list 
 3505              	  print list of arguments 
 3506              	****************************/
 3507 0ad2 00BF     	    _FUNC print
 3508 0ad4 206C     	    ldr r0,[UPP,#FLAGS]
 3509 0ad6 40F08000 	    orr r0,#FPRINT 
 3510 0ada 2064     	    str r0,[UPP,#FLAGS]
 3511 0adc 88EA0808 	    eor T1,T1 
 3512 0ae0 00B5FFF7 	0:  _CALL expression
 3512      FEFF5DF8 
 3512      04EB
 3513 0aea 1B28     	    cmp r0,#TK_INTGR
 3514 0aec 07D1     	    bne 1f 
 3515 0aee 0846     	    mov r0,r1
 3516 0af0 A169     	    ldr r1,[UPP,#BASE]
 3517 0af2 00B5FFF7 	    _CALL print_int
 3517      FEFF5DF8 
 3517      04EB
 3518 0afc 39E0     	    b 8f  
 3519 0afe 0128     	1:  cmp r0,#TK_COLON 
 3520 0b00 00DC     	    bgt 2f
 3521 0b02 4DE0     	    b unget_exit 
 3522 0b04 1C28     	2:  cmp r0,#TK_QSTR 
 3523 0b06 06D1     	    bne 3f
 3524 0b08 0846     	    mov r0,r1 
 3525 0b0a 00B5FFF7 	    _CALL uart_puts  
ARM GAS  tinyBasic.s 			page 94


 3525      FEFF5DF8 
 3525      04EB
 3526 0b14 2DE0     	    b 8f 
 3527 0b16 1628     	3:  cmp r0,#TK_CFUNC
 3528 0b18 05D1     	    bne 4f
 3529 0b1a 0846     	    mov r0,r1
 3530 0b1c 00B5FFF7 	    _CALL execute 
 3530      FEFF5DF8 
 3530      04EB
 3531 0b26 1328     	4:  cmp r0,#TK_CHAR 
 3532 0b28 06D1     	    bne 5f 
 3533 0b2a 0846     	    mov r0,r1 
 3534 0b2c 00B5FFF7 	    _CALL uart_putc 
 3534      FEFF5DF8 
 3534      04EB
 3535 0b36 1CE0     	    b 8f 
 3536 0b38 0428     	5:  cmp r0,#TK_SHARP
 3537 0b3a 09D1     	    bne 6f 
 3538 0b3c 00B5FFF7 	   _CALL next_token
 3538      FEFF5DF8 
 3538      04EB
 3539 0b46 1B28     	    cmp r0,#TK_INTGR  
 3540 0b48 7FF4FEAF 	    bne syntax_error 
 3541 0b4c 6164     	    str r1,[UPP,#TAB_WIDTH]
 3542 0b4e 10E0     	    b 8f 
 3543 0b50 1728     	6:  cmp r0,#TK_CMD 
 3544 0b52 25D1     	    bne unget_exit  
 3545 0b54 5129     	    cmp r1,#TAB_IDX 
 3546 0b56 05D1     	    bne 6f
 3547 0b58 00B500F0 	    _CALL tab 
 3547      51FD5DF8 
 3547      04EB
 3548 0b62 06E0     	    b 8f 
 3549 0b64 4829     	6:  cmp r1,#SPC_IDX  
 3550 0b66 1BD1     	    bne unget_exit
 3551 0b68 00B500F0 	    _CALL spc   
 3551      13FC5DF8 
 3551      04EB
 3552 0b72 88EA0808 	8:  eor T1,T1  
 3553 0b76 00B5FFF7 	    _CALL next_token
 3553      FEFF5DF8 
 3553      04EB
 3554 0b80 90B1     	    cbz r0, print_exit  
 3555 0b82 0228     	    cmp r0,#TK_COMMA 
 3556 0b84 02D1     	    bne 8f 
 3557 0b86 4FF0FF38 	    mov T1,#-1
 3558 0b8a A9E7     	    b 0b
 3559 0b8c 0328     	8:  cmp r0,#TK_SEMIC 
 3560 0b8e 07D1     	    bne unget_exit 
 3561 0b90 00B5FFF7 	    _CALL tabulation 
 3561      FEFF5DF8 
 3561      04EB
 3562 0b9a 4FF0FF38 	    mov T1,#-1
 3563 0b9e 9FE7     	    b 0b
 3564              	unget_exit:         
 3565 0ba0 D4F800A0 	   _UNGET_TOKEN 
 3565      D4F808B0 
ARM GAS  tinyBasic.s 			page 95


 3566              	print_exit:
 3567 0ba8 18EA0808 	    ands T1,T1 
 3568 0bac 08D1     	    bne 9f
 3569 0bae 00B5FFF7 	    _CALL cr
 3569      FEFF5DF8 
 3569      04EB
 3570 0bb8 206C     	    ldr r0,[UPP,#FLAGS]
 3571 0bba 80F08000 	    eor r0,#FPRINT 
 3572 0bbe 2064     	    str r0,[UPP,#FLAGS] 
 3573 0bc0 7047     	9:  _RET 
 3574              	
 3575              	/**************************************
 3576              	  BASIC: QKEY
 3577              	  check if key pressed 
 3578              	**************************************/ 
 3579 0bc2 00BF     	    _FUNC qkey
 3580 0bc4 4FF00001 	    mov r1,#0
 3581 0bc8 00B5FFF7 	    _CALL uart_qkey
 3581      FEFF5DF8 
 3581      04EB
 3582 0bd2 01D0     	    beq 9f 
 3583 0bd4 4FF0FF31 	    mov r1,#-1 
 3584 0bd8 4FF01B00 	9:  mov r0,#TK_INTGR
 3585 0bdc 7047     	    _RET 
 3586              	
 3587              	/******************************************
 3588              	  BASIC: RANDOMIZE 
 3589              	  Copy TICKS to SEED 
 3590              	******************************************/
 3591 0bde 00BF     	    _FUNC randomize
 3592 0be0 E069     	    ldr r0,[UPP,#TICKS]
 3593 0be2 6062     	    str r0,[UPP,#SEED]
 3594 0be4 7047     	    _RET 
 3595              	
 3596              	/******************************************
 3597              	  BASIC RND(expr)
 3598              	  generate random number between 0..expr-1
 3599              	******************************************/
 3600 0be6 00BF     	    _FUNC random
 3601 0be8 4FF00100 	    mov r0,#1
 3602 0bec 00B5FFF7 	    _CALL func_args 
 3602      FEFF5DF8 
 3602      04EB
 3603 0bf6 11F0004F 	    tst r1,#(1<<31)
 3604 0bfa 03D0     	    beq 1f 
 3605 0bfc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 3606 0c00 FFF7FEBF 	    b tb_error 
 3607 0c04 606A     	1:  ldr r0,[UPP,#SEED]
 3608 0c06 4FEA4031 	    lsl r1,r0,#13
 3609 0c0a 81EA0001 	    eor r1,r0
 3610 0c0e 4FEA5140 	    lsr r0,r1,#17
 3611 0c12 81EA0001 	    eor r1,r0
 3612 0c16 4FEA4110 	    lsl r0,r1,#5
 3613 0c1a 81EA0001 	    eor r1,r0
 3614 0c1e 6162     	    str r1,[UPP,#SEED]
 3615 0c20 5CF8040B 	    _POP r0 
 3616 0c24 B1FBF0F2 	    udiv r2,r1,r0  
ARM GAS  tinyBasic.s 			page 96


 3617 0c28 00FB02F2 	    mul r2,r0 
 3618 0c2c A1EB0201 	    sub r1,r2 
 3619 0c30 4FF01B00 	    mov r0,#TK_INTGR
 3620 0c34 7047     	    _RET 
 3621              	
 3622              	/****************************************
 3623              	  BASIC: RSHIFT(expr1,expr2)
 3624              	  shift left expr1 de expr2 bits 
 3625              	****************************************/
 3626 0c36 00BF     	    _FUNC rshift
 3627 0c38 4FF00200 	    mov r0,#2
 3628 0c3c 00B5FFF7 	    _CALL func_args
 3628      FEFF5DF8 
 3628      04EB
 3629 0c46 BCE80300 	    ldmia DP!,{r0,r1}
 3630 0c4a 21FA00F1 	    lsr r1,r0  
 3631 0c4e 4FF01B00 	    mov r0,#TK_INTGR
 3632 0c52 7047     	    _RET 
 3633              	
 3634              	/****************************
 3635              	  BASIC: RUN 
 3636              	  execute program in memory
 3637              	****************************/
 3638              	    _FUNC run
 3639 0c54 206C10F0 	    _CLO 
 3639      010F03D0 
 3639      4FF00700 
 3639      FFF7FEBF 
 3640 0c64 206B     	    ldr r0,[UPP,#TXTBGN]
 3641 0c66 616B     	    ldr r1,[UPP,#TXTEND]
 3642 0c68 C4F8D010 	    str r1,[UPP,#HERE]
 3643 0c6c 8842     	    cmp r0,r1
 3644 0c6e 21D0     	    beq 9f
 3645 0c70 216C     	    ldr r1,[UPP,#FLAGS]
 3646 0c72 11F0080F 	    tst r1,#FSTOP
 3647 0c76 09D0     	    beq 1f
 3648 0c78 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3649 0c7c 6060     	    str r0,[UPP,#COUNT]
 3650 0c7e 206C     	    ldr r0,[UPP,#FLAGS]
 3651 0c80 4FF00901 	    mov r1,#FRUN+FSTOP
 3652 0c84 80EA0100 	    eor r0,r1
 3653 0c88 2064     	    str r0,[UPP,#FLAGS] 
 3654 0c8a 13E0     	    b 9f  
 3655 0c8c 8178     	1:  ldrb r1,[r0,#2]
 3656 0c8e 6160     	    str r1,[UPP,#COUNT]
 3657 0c90 8346     	    mov BPTR,r0 
 3658 0c92 4FF0030A 	    mov IN,#3
 3659 0c96 606B     	    ldr r0,[UPP,#TXTEND]
 3660              	    // reset dataline pointers 
 3661 0c98 80EA0000 	    eor r0,r0 
 3662 0c9c E060     	    str r0,[UPP,#DATAPTR]
 3663 0c9e 2061     	    str r0,[UPP,#DATA]
 3664 0ca0 6061     	    str r0,[UPP,#DATALEN] 
 3665 0ca2 206C     	    ldr r0,[UPP,#FLAGS]
 3666 0ca4 40F00100 	    orr r0,#FRUN 
 3667 0ca8 2064     	    str r0,[UPP,#FLAGS]
 3668 0caa 00B5FFF7 	    _CALL show_trace 
ARM GAS  tinyBasic.s 			page 97


 3668      FEFF5DF8 
 3668      04EB
 3669 0cb4 7047     	9:  _RET 
 3670              	
 3671              	/**********************************
 3672              	        FILE SYSTEM 
 3673              	**********************************/
 3674              	
 3675              	/*********************************
 3676              	  search_free 
 3677              	  search first free PAGE in fs
 3678              	  a PAGE is free if first word is
 3679              	  -1
 3680              	  input:
 3681              	    none 
 3682              	  output:
 3683              	    r0    addr|0
 3684              	  use:
 3685              	*********************************/
 3686 0cb6 00BF     	    _FUNC search_free 
 3687 0cb8 06B4     	    push {r1,r2}
 3688 0cba DFF86410 	    ldr r1,fs_addr 
 3689 0cbe 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3689      C0F60202 
 3690 0cc6 0868     	1:  ldr r0,[r1]
 3691 0cc8 B0F1FF3F 	    cmp r0,#-1
 3692 0ccc 03D0     	    beq 8f 
 3693 0cce 01F58061 	    add r1,#PAGE_SIZE
 3694 0cd2 9142     	    cmp r1,r2 
 3695 0cd4 F7D4     	    bmi 1b 
 3696 0cd6 0846     	8:  mov r0,r1 
 3697 0cd8 06BC     	    pop {r1,r2}   
 3698 0cda 7047     	    _RET 
 3699              	
 3700              	/*********************************
 3701              	  search_file 
 3702              	  search for a file name 
 3703              	  in file system.
 3704              	  input: 
 3705              	    r0   .asciz target name
 3706              	  output:
 3707              	    r0    0 || address found 
 3708              	  use:
 3709              	   r0     temp 
 3710              	   r1     *file_name 
 3711              	   r2     *fs  
 3712              	   r3     target   
 3713              	**********************************/
 3714              	    _FUNC search_file 
 3715 0cdc 0EB4     	    push {r1,r2,r3}
 3716 0cde DFF84020 	    ldr r2,fs_addr
 3717 0ce2 0346     	    mov r3,r0  
 3718              	cmp_loop:
 3719 0ce4 1068     	    ldr r0,[r2]
 3720 0ce6 B0F1FF3F 	    cmp r0,#-1
 3721 0cea 80EA0000 	    eor r0,r0
 3722 0cee 15D0     	    beq 9f // reached end of fs 
ARM GAS  tinyBasic.s 			page 98


 3723 0cf0 1846     	1:  mov r0,r3
 3724 0cf2 02F10201 	    add r1,r2,#2
 3725 0cf6 00B5FFF7 	    _CALL strcmp
 3725      FEFF5DF8 
 3725      04EB
 3726 0d00 08B9     	    cbnz r0,2f
 3727 0d02 1046     	    mov r0,r2 
 3728 0d04 0AE0     	    b 9f   
 3729 0d06 1088     	2:  ldrh r0,[r2] // name length
 3730 0d08 0244     	    add r2,r0 
 3731 0d0a 1088     	    ldrh r0,[r2]
 3732 0d0c 1044     	    add r0,r2
 3733 0d0e 00B5FFF7 	    _CALL page_align 
 3733      FEFF5DF8 
 3733      04EB
 3734 0d18 0246     	    mov r2,r0   
 3735 0d1a E3E7     	    b cmp_loop 
 3736 0d1c 0EBC     	9:  pop {r1,r2,r3}
 3737 0d1e 7047     	    _RET 
 3738              	
 3739 0d20 00000000 	fs_addr: .word FILE_SYSTEM
 3740              	
 3741              	/*************************************
 3742              	  BASIC: DIR 
 3743              	  list files stored in fs 
 3744              	  use:
 3745              	    r0  temp 
 3746              	    r1  temp
 3747              	    r2  file count
 3748              	    r3  data size
 3749              	    T1  *fs  
 3750              	*************************************/
 3751              	    _FUNC directory
 3752 0d24 206C10F0 	    _CLO 
 3752      010F03D0 
 3752      4FF00700 
 3752      FFF7FEBF 
 3753 0d34 82EA0202 	    eor r2,r2 
 3754 0d38 5FF81C80 	    ldr T1,fs_addr 
 3755 0d3c D8F80000 	1:  ldr r0,[T1] // name length 
 3756 0d40 B0F1FF3F 	    cmp r0,#-1
 3757 0d44 2AD0     	    beq no_more_file
 3758 0d46 00F00F03 	    and r3,r0,#15
 3759 0d4a 08F10200 	    add r0,T1,#2
 3760 0d4e 00B5FFF7 	    _CALL uart_puts 
 3760      FEFF5DF8 
 3760      04EB
 3761 0d58 4FF01000 	    mov r0,#16 
 3762 0d5c 00B5FFF7 	    _CALL cursor_x 
 3762      FEFF5DF8 
 3762      04EB
 3763 0d66 9844     	    add T1,r3 
 3764 0d68 B8F80030 	    ldrh r3,[T1]
 3765 0d6c 1846     	    mov r0,r3 
 3766 0d6e 4FF00A01 	    mov r1,#10 
 3767 0d72 00B5FFF7 	    _CALL print_int
 3767      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 99


 3767      04EB
 3768 0d7c 00B5FFF7 	    _CALL cr  
 3768      FEFF5DF8 
 3768      04EB
 3769 0d86 08EB0300 	    add r0,T1,r3 
 3770 0d8a 00B5FFF7 	    _CALL page_align
 3770      FEFF5DF8 
 3770      04EB
 3771 0d94 8046     	    mov T1,r0 
 3772 0d96 02F10102 	    add r2,#1 
 3773 0d9a CFE7     	    b 1b  
 3774              	no_more_file:
 3775 0d9c 00B5FFF7 	    _CALL cr
 3775      FEFF5DF8 
 3775      04EB
 3776 0da6 4FF01000 	    mov r0,#16
 3777 0daa 00B5FFF7 	    _CALL cursor_x  
 3777      FEFF5DF8 
 3777      04EB
 3778 0db4 1046     	    mov r0,r2 
 3779 0db6 4FF00A01 	    mov r1,#10 
 3780 0dba 00B5FFF7 	    _CALL print_int 
 3780      FEFF5DF8 
 3780      04EB
 3781 0dc4 DFF8240B 	    ldr r0,=fcount 
 3782 0dc8 00B5FFF7 	    _CALL uart_puts 
 3782      FEFF5DF8 
 3782      04EB
 3783 0dd2 7047     	    _RET 
 3784 0dd4 66696C65 	fcount:  .asciz "files\n"
 3784      730A00
 3785              	
 3786              	/*************************************
 3787              	  BASIC: FORGET ["name"]
 3788              	  delete file and all following 
 3789              	  if no name given delete all files 
 3790              	************************************/
 3791 0ddb 00       	    _FUNC forget
 3792 0ddc 2DE90802 	    push {r3,T2}
 3793 0de0 5FF8C490 	    ldr T2,fs_addr 
 3794 0de4 E36A     	    ldr r3,[UPP,#FSFREE]
 3795 0de6 00B5FFF7 	    _CALL next_token
 3795      FEFF5DF8 
 3795      04EB
 3796 0df0 38B1     	    cbz r0,1f // no name 
 3797 0df2 0846     	    mov r0,r1
 3798 0df4 00B5FFF7 	    _CALL search_file
 3798      71FF5DF8 
 3798      04EB
 3799 0dfe 58B1     	    cbz r0,9f 
 3800 0e00 8146     	    mov T2,r0 
 3801 0e02 9945     	1:  cmp T2,r3 
 3802 0e04 08D5     	    bpl 9f 
 3803 0e06 4846     	    mov r0,T2 
 3804 0e08 00B5FFF7 	    _CALL erase_page
 3804      FEFF5DF8 
 3804      04EB
ARM GAS  tinyBasic.s 			page 100


 3805 0e12 09F58069 	    add T2,#PAGE_SIZE
 3806 0e16 F4E7     	    b 1b 
 3807 0e18 00B5FFF7 	9:  _CALL search_free
 3807      4DFF5DF8 
 3807      04EB
 3808 0e22 BDE80802 	    pop {r3,T2} 
 3809 0e26 7047     	    _RET
 3810              	
 3811              	/**********************************
 3812              	  BASIC LOAD "name" 
 3813              	  load file in RAM for execution
 3814              	  use:
 3815              	    r0   temp
 3816              	    r1   src
 3817              	    r2   dest 
 3818              	    r3   count 
 3819              	**********************************/
 3820              	    _FUNC load
 3821 0e28 206C10F0 	    _CLO 
 3821      010F03D0 
 3821      4FF00700 
 3821      FFF7FEBF 
 3822 0e38 00B5FFF7 	    _CALL next_token 
 3822      FEFF5DF8 
 3822      04EB
 3823 0e42 1C28     	    cmp r0,#TK_QSTR 
 3824 0e44 7FF4FEAF 	    bne syntax_error 
 3825 0e48 0846     	    mov r0,r1 
 3826              	load_autorun:     
 3827 0e4a 00B5FFF7 	    _CALL search_file 
 3827      46FF5DF8 
 3827      04EB
 3828 0e54 18B9     	    cbnz r0, 1f 
 3829 0e56 4FF00900 	    mov r0,#ERR_NOT_FILE
 3830 0e5a FFF7FEBF 	    b tb_error 
 3831 0e5e 0146     	1:  mov r1,r0 
 3832 0e60 0888     	    ldrh r0,[r1]
 3833 0e62 0144     	    add r1,r0 // data size field  
 3834 0e64 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3835 0e68 226B     	    ldr r2,[UPP,#TXTBGN]
 3836 0e6a 02EB0300 	    add r0,r2,r3  
 3837 0e6e 6063     	    str r0,[UPP,#TXTEND]
 3838 0e70 C4F8D000 	    str r0,[UPP,#HERE]
 3839 0e74 03F10103 	    add r3,#1
 3840 0e78 4FEA5303 	    lsr r3,#1
 3841              	2:  // load file data 
 3842 0e7c 31F8020B 	    ldrh r0,[r1],#2
 3843 0e80 22F8020B 	    strh r0,[r2],#2 
 3844 0e84 013B     	    subs r3,#1 
 3845 0e86 F9D1     	    bne 2b 
 3846              	// report file size 
 3847 0e88 DFF8640A 	    ldr r0,=fsize 
 3848 0e8c 00B5FFF7 	    _CALL uart_puts
 3848      FEFF5DF8 
 3848      04EB
 3849 0e96 606B     	    ldr r0,[UPP,#TXTEND]
 3850 0e98 236B     	    ldr r3,[UPP,#TXTBGN]
ARM GAS  tinyBasic.s 			page 101


 3851 0e9a A0EB0300 	    sub r0,r3 
 3852 0e9e 4FF00A01 	    mov r1,#10 
 3853 0ea2 00B5FFF7 	    _CALL print_int 
 3853      FEFF5DF8 
 3853      04EB
 3854 0eac DFF8440A 	    ldr r0,=data_bytes 
 3855 0eb0 00B5FFF7 	    _CALL uart_puts      
 3855      FEFF5DF8 
 3855      04EB
 3856 0eba 7047     	    _RET 
 3857              	
 3858              	
 3859              	/*********************************
 3860              	  BASIC: SAVE "name" 
 3861              	  save program in flash memory
 3862              	  file structure:
 3863              	    .hword name_length 
 3864              	    .asciz name
 3865              	    .palign 1  
 3866              	    .hword data_length 
 3867              	    .byte  file data (variable length)  
 3868              	  use:
 3869              	    r0  temp 
 3870              	    r1  temp
 3871              	    r2  *flash 
 3872              	    r3  *ram  
 3873              	    T1  temp   
 3874              	********************************/
 3875              	    _FUNC save
 3876 0ebc 206C10F0 	    _CLO 
 3876      010F03D0 
 3876      4FF00700 
 3876      FFF7FEBF 
 3877 0ecc 606B     	    ldr r0,[UPP,#TXTEND]
 3878 0ece 216B     	    ldr r1,[UPP,#TXTBGN]
 3879 0ed0 8842     	    cmp r0,r1
 3880 0ed2 03D1     	    bne 0f 
 3881 0ed4 4FF00D00 	    mov r0,#ERR_NO_PROG
 3882 0ed8 FFF7FEBF 	    b tb_error 
 3883 0edc 00B5FFF7 	0:  _CALL next_token 
 3883      FEFF5DF8 
 3883      04EB
 3884 0ee6 1C28     	    cmp r0,#TK_QSTR
 3885 0ee8 7FF4FEAF 	    bne syntax_error 
 3886              	// check for existing 
 3887 0eec 0B46     	    mov r3,r1 // save name 
 3888 0eee 1846     	    mov r0,r3  
 3889 0ef0 00B5FFF7 	    _CALL search_file
 3889      F3FE5DF8 
 3889      04EB
 3890 0efa 18B1     	    cbz r0,new_file 
 3891 0efc 4FF00800 	    mov r0,#ERR_DUPLICATE
 3892 0f00 FFF7FEBF 	    b tb_error 
 3893              	new_file:
 3894 0f04 4FF00100 	    mov r0,#1 
 3895 0f08 00B5FFF7 	    _CALL unlock 
 3895      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 102


 3895      04EB
 3896 0f12 E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3897 0f14 1846     	    mov r0,r3 // *name 
 3898 0f16 00B5FFF7 	    _CALL strlen 
 3898      FEFF5DF8 
 3898      04EB
 3899 0f20 00F10400 	    add r0,#4  
 3900 0f24 20F00100 	    and r0,#-2 //even size
 3901 0f28 A0F10208 	    sub T1,r0,#2  // name length counter   
 3902 0f2c 1146     	1:  mov r1,r2  
 3903 0f2e 00B5FFF7 	    _CALL hword_write   
 3903      FEFF5DF8 
 3903      04EB
 3904 0f38 02F10202 	    add r2,#2  
 3905              	// write file name      
 3906 0f3c 33F8020B 	2:  ldrh r0,[r3],#2 
 3907 0f40 1146     	    mov r1,r2 
 3908 0f42 00B5FFF7 	    _CALL hword_write
 3908      FEFF5DF8 
 3908      04EB
 3909 0f4c 02F10202 	    add r2,#2
 3910 0f50 B8F10208 	    subs T1,#2
 3911 0f54 F2D1     	    bne 2b
 3912              	// write data size 
 3913 0f56 606B     	    ldr r0,[UPP,#TXTEND]
 3914 0f58 236B     	    ldr r3,[UPP,#TXTBGN]
 3915 0f5a A0EB0300 	    sub r0,r3
 3916 0f5e 8046     	    mov T1,r0
 3917 0f60 1146     	    mov r1,r2 
 3918 0f62 00B5FFF7 	    _CALL hword_write
 3918      FEFF5DF8 
 3918      04EB
 3919 0f6c 02F10202 	    add r2,#2 
 3920              	// write data 
 3921 0f70 08F10108 	    add T1,#1 
 3922 0f74 4FEA5808 	    lsr T1,#1 // .hword to write 
 3923 0f78 33F8020B 	3:  ldrh r0,[r3],#2
 3924 0f7c 1146     	    mov r1,r2
 3925 0f7e 00B5FFF7 	    _CALL hword_write 
 3925      FEFF5DF8 
 3925      04EB
 3926 0f88 02F10202 	    add r2,#2 
 3927 0f8c B8F10108 	    subs T1,#1 
 3928 0f90 F2D1     	    bne 3b
 3929 0f92 4FF00000 	    mov r0,#0 
 3930 0f96 00B5FFF7 	    _CALL unlock
 3930      FEFF5DF8 
 3930      04EB
 3931              	// update FSFREE     
 3932 0fa0 606B     	    ldr r0,[UPP,#TXTEND]
 3933 0fa2 216B     	    ldr r1,[UPP,#TXTBGN]
 3934 0fa4 A0EB0100 	    sub r0,r1 
 3935 0fa8 8046     	    mov T1,r0 
 3936 0faa E16A     	    ldr r1,[UPP,#FSFREE]
 3937 0fac 0844     	    add r0,r1 
 3938 0fae 00B5FFF7 	    _CALL page_align
 3938      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 103


 3938      04EB
 3939 0fb8 E062     	    str r0,[UPP,#FSFREE]
 3940 0fba DFF83409 	    ldr r0,=fsize
 3941 0fbe 00B5FFF7 	    _CALL uart_puts
 3941      FEFF5DF8 
 3941      04EB
 3942 0fc8 4046     	    mov r0,T1 
 3943 0fca 4FF00A01 	    mov r1,#10 
 3944 0fce 00B5FFF7 	    _CALL print_int 
 3944      FEFF5DF8 
 3944      04EB
 3945 0fd8 DFF81809 	    ldr r0,=data_bytes 
 3946 0fdc 00B5FFF7 	    _CALL uart_puts  
 3946      FEFF5DF8 
 3946      04EB
 3947 0fe6 7047     	    _RET 
 3948 0fe8 66696C65 	fsize: .asciz "file size: "
 3948      2073697A 
 3948      653A2000 
 3949 0ff4 62797465 	data_bytes: .asciz "bytes\n"
 3949      730A00
 3950              	
 3951              	
 3952              	/******************************
 3953              	  BASIC: AUTORUN ["name"]
 3954              	  set a file name to 
 3955              	  execute at boot up or if no 
 3956              	  argument cancel autorun file.
 3957              	  use:
 3958              	    T1 *ram buffer 
 3959              	*********************************/
 3960 0ffb 00       	    _FUNC autorun
 3961              	    // copy user page in RAM
 3962 0ffc D4F83480 	    ldr T1,[UPP,#TXTEND]
 3963 1000 4FF00300 	    mov r0,#3
 3964 1004 8044     	    add T1,r0 
 3965 1006 6FEA0000 	    mvn r0,r0 
 3966 100a 08EA0008 	    and T1,r0 
 3967 100e 5FF87C06 	    ldr r0,pad_adr  
 3968 1012 A0EB0800 	    sub r0,T1 
 3969 1016 B0F5806F 	    cmp r0,#PAGE_SIZE 
 3970 101a 03D5     	    bpl 1f 
 3971 101c 4FF00100 	    mov r0,#ERR_MEM_FULL 
 3972 1020 FFF7FEBF 	    b tb_error 
 3973 1024 DFF8D008 	1:  ldr r0,=user
 3974 1028 4146     	    mov r1,T1 
 3975 102a 4FF48062 	    mov r2,#PAGE_SIZE 
 3976 102e 00B5FFF7 	    _CALL cmove 
 3976      FEFF5DF8 
 3976      04EB
 3977              	    // erase page 
 3978 1038 DFF8BC08 	    ldr r0,=user 
 3979 103c 00B5FFF7 	    _CALL erase_page
 3979      FEFF5DF8 
 3979      04EB
 3980              	    // check file name argument 
 3981 1046 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 104


 3981      FEFF5DF8 
 3981      04EB
 3982 1050 1C28     	    cmp r0,#TK_QSTR 
 3983 1052 0DD0     	    beq 2f 
 3984 1054 D4F800A0 	    _UNGET_TOKEN
 3984      D4F808B0 
 3985              	    // erase first 16 byte of page
 3986              	    // this cancel any existing autorun 
 3987 105c 4FF0FF30 	    mov r0,#-1
 3988 1060 4246     	    mov r2,T1
 3989 1062 4FF01001 	    mov r1,#16 
 3990 1066 42F8040B 	1:  str r0,[r2],#4
 3991 106a 0439     	    subs r1,#4
 3992 106c FBD1     	    bne 1b 
 3993 106e 0BE0     	    b write_back 
 3994 1070 4246     	2:  mov r2,T1
 3995 1072 DFF82600 	    ldr r0,arun_sign 
 3996 1076 42F8040B 	    str r0,[r2],#4
 3997 107a 0846     	    mov r0,r1 
 3998 107c 1146     	    mov r1,r2 
 3999 107e 00B5FFF7 	    _CALL strcpy 
 3999      FEFF5DF8 
 3999      04EB
 4000              	write_back:
 4001 1088 4046     	    mov r0,T1
 4002 108a DFF86C18 	    ldr r1,=user 
 4003 108e 00B5FFF7 	    _CALL write_page
 4003      FEFF5DF8 
 4003      04EB
 4004 1098 7047     	    _RET 
 4005 109a 4152554E 	arun_sign: .ascii "ARUN" 
 4006              	
 4007              	/******************************
 4008              	    exec_autorun 
 4009              	    check for autorun file.
 4010              	    load and execute it.
 4011              	*****************************/
 4012 109e 00BF     	    _FUNC exec_autorun
 4013 10a0 DFF85428 	    ldr r2,=user 
 4014 10a4 5FF80E10 	    ldr r1,arun_sign 
 4015 10a8 1068     	    ldr r0,[r2]
 4016 10aa 8842     	    cmp r0,r1 
 4017 10ac 0DD1     	    bne 9f 
 4018 10ae 02F10400 	    add r0,r2,#4
 4019 10b2 00B5FFF7 	    _CALL load_autorun 
 4019      C9FE5DF8 
 4019      04EB
 4020 10bc 00B5FFF7 	    _CALL run
 4020      C9FD5DF8 
 4020      04EB
 4021 10c6 00F006BF 	    b interpreter  
 4022 10ca 7047     	9:  _RET 
 4023              	
 4024              	/*******************************
 4025              	  BASIC: FREE 
 4026              	  return RAM free bytes 
 4027              	*******************************/
ARM GAS  tinyBasic.s 			page 105


 4028              	    _FUNC free
 4029 10cc D4F8D000 	    ldr r0,[UPP,#HERE]
 4030 10d0 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4031 10d4 A1EB0001 	    sub r1,r0
 4032 10d8 4FF01B00 	    mov r0,#TK_INTGR
 4033 10dc 7047     	    _RET  
 4034              	
 4035              	/*********************************
 4036              	  BASIC: SERVO_INIT n 
 4037              	  initialize servo motor 1,2,3,4
 4038              	  1 -> PWM2/1 pin A15
 4039              	  2 -> PWM2/2 pin B3 
 4040              	  3 -> PWM3/1 pin B4 
 4041              	  4 -> PWM3/2 pin B5
 4042              	  5 -> PMW4/3 pin B8
 4043              	  6 -> PWM4/4 pin B9
 4044              	  TIMER parameters are for Fclk=72Mhz 
 4045              	  period=20msec 
 4046              	  default pos = 1500ÂµSec 
 4047              	************************************/
 4048 10de 00BF     	    _FUNC servo_init 
 4049 10e0 00B5FFF7 	    _CALL expression 
 4049      FEFF5DF8 
 4049      04EB
 4050 10ea 1B28     	    cmp r0,#TK_INTGR  
 4051 10ec 7FF4FEAF 	    bne syntax_error 
 4052 10f0 0129     	    cmp r1,#1 
 4053 10f2 03D5     	    bpl 1f 
 4054 10f4 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4055 10f8 FFF7FEBF 	    b tb_error 
 4056 10fc 0729     	1:  cmp r1,#7
 4057 10fe F9D5     	    bpl 0b
 4058 1100 A1F10103 	    sub r3,r1,#1
 4059              	1:  // configure port pin
 4060 1104 DFF8F427 	    ldr r2,=servo_param
 4061 1108 4FEA0311 	    lsl r1,r3,#4
 4062 110c 0A44     	    add r2,r1  
 4063 110e 52F8040B 	    ldr r0,[r2],#4 //GPIOx_BASE_ADR
 4064 1112 1168     	    ldr r1,[r2]  // pin 
 4065 1114 4FF00E02 	    mov r2,#0xe // OUTPUT_AFOD  
 4066 1118 00B5FFF7 	    _CALL gpio_config 
 4066      5FFC5DF8 
 4066      04EB
 4067 1122 DFF8D807 	    ldr r0,=servo_param 
 4068 1126 4FEA0311 	    lsl r1,r3,#4
 4069 112a 01F10801 	    add r1,#8
 4070 112e 0844     	    add r0,r1 
 4071 1130 50F8043B 	    ldr r3,[r0],#4
 4072 1134 0268     	    ldr r2,[r0]
 4073 1136 4FF02000 	    mov r0,#32
 4074 113a 4AF6C871 	    mov r1,#45000
 4075 113e 0CB4     	    push {r2,r3}
 4076 1140 00B500F0 	    _CALL pwm_config
 4076      5DF85DF8 
 4076      04EB
 4077 114a 06BC     	    pop {r1,r2}   
 4078              	    // remap TIMER2|3 pin 
ARM GAS  tinyBasic.s 			page 106


 4079 114c 4FF00003 	    _MOV32 r3,AFIO_BASE_ADR
 4079      C4F20103 
 4080 1154 4FF00000 	    _MOV32 r0,TIMER2_BASE_ADR
 4080      C4F20000 
 4081 115c 8242     	    cmp r2,r0 
 4082 115e 04D0     	    beq remap_t2
 4083 1160 00F58060 	    add r0,#0x400
 4084 1164 8242     	    cmp r2,r0  
 4085 1166 07D0     	    beq remap_t3 
 4086 1168 12E0     	    b no_remap 
 4087              	remap_t2:
 4088 116a 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4089 116c 4FF44078 	    mov T1,#0x300 
 4090 1170 40EA0800 	    orr r0,T1 
 4091 1174 5860     	    str r0,[r3,#AFIO_MAPR]
 4092 1176 0BE0     	    b no_remap 
 4093              	remap_t3: 
 4094 1178 5868     	    ldr r0,[r3,#AFIO_MAPR]
 4095 117a 4FF44068 	    mov T1,0xc00 
 4096 117e 6FEA0808 	    mvn T1,T1 
 4097 1182 00EA0800 	    and r0,T1 
 4098 1186 4FF40068 	    mov T1,#0x800
 4099 118a 40EA0800 	    orr r0,T1 
 4100 118e 5860     	    str r0,[r3,#AFIO_MAPR]
 4101              	no_remap:
 4102 1190 40F62F50 	     mov r0,#3375 
 4103 1194 00B500F0 	    _CALL pwm_dc
 4103      7DF85DF8 
 4103      04EB
 4104 119e 7047     	    _RET 
 4105              	
 4106 11a0 00080140 	servo_param: .word GPIOA_BASE_ADR,15,TIMER2_BASE_ADR,1
 4106      0F000000 
 4106      00000040 
 4106      01000000 
 4107 11b0 000C0140 	            .word GPIOB_BASE_ADR,3,TIMER2_BASE_ADR,2
 4107      03000000 
 4107      00000040 
 4107      02000000 
 4108 11c0 000C0140 	            .word GPIOB_BASE_ADR,4,TIMER3_BASE_ADR,1
 4108      04000000 
 4108      00040040 
 4108      01000000 
 4109 11d0 000C0140 	            .word GPIOB_BASE_ADR,5,TIMER3_BASE_ADR,2
 4109      05000000 
 4109      00040040 
 4109      02000000 
 4110 11e0 000C0140 	            .word GPIOB_BASE_ADR,8,TIMER4_BASE_ADR,3
 4110      08000000 
 4110      00080040 
 4110      03000000 
 4111 11f0 000C0140 	            .word GPIOB_BASE_ADR,9,TIMER4_BASE_ADR,4
 4111      09000000 
 4111      00080040 
 4111      04000000 
 4112              	
 4113              	/*********************************
ARM GAS  tinyBasic.s 			page 107


 4114              	    pwm_config 
 4115              	    configure timer for pwm mode 6
 4116              	    Fck_int=72Mhz 
 4117              	    input:
 4118              	      r0   PSC
 4119              	      r1   ARR
 4120              	      r2   channel  
 4121              	      r3   TIMER_BASE_ADR 
 4122              	    output:
 4123              	      none 
 4124              	    use:
 4125              	      T1,T2 
 4126              	*********************************/
 4127              	    _FUNC pwm_config
 4128 1200 2DE90003 	    push {T1,T2}
 4129 1204 1885     	    strh r0,[r3,#TIM_PSC]
 4130 1206 9985     	    strh r1,[r3,#TIM_ARR]
 4131 1208 80EA0000 	    eor r0,r0 // 0% duty cycle
 4132 120c 4FF03408 	    mov T1,#TIM_CCR1
 4133 1210 1146     	    mov r1,r2 
 4134 1212 0139     	1:  subs r1,r1,#1
 4135 1214 02D0     	    beq 2f 
 4136 1216 08F10408 	    add T1,#4
 4137 121a FAE7     	    b 1b   
 4138 121c 23F80800 	2:  strh r0,[r3,T1] // duty cycle = 0.
 4139              	    // set counter mode 
 4140 1220 4FF47F40 	    mov r0,#0xff00 // mask to clear mode field
 4141 1224 4FF06808 	    mov T1,#0x68 // PWM mode 6, preload enabled  
 4142 1228 12F0010F 	    tst r2,#1 // odd channel?
 4143 122c 03D1     	    bne 1f 
 4144 122e 4FEA1020 	    lsr r0,#8  // shift mask for even channel
 4145 1232 4FEA0828 	    lsl T1,#8  // shift mode for even channel 
 4146 1236 4FF01809 	1:  mov  T2,#TIM_CCMR1  //channel 1,2
 4147 123a 032A     	    cmp r2,#3
 4148 123c 01D4     	    bmi 2f 
 4149 123e 4FF01C09 	    mov T2,#TIM_CCMR2 // channel 3,4
 4150 1242 33F80910 	2:  ldrh r1,[r3,T2]
 4151 1246 01EA0001 	    and r1,r0 // clear bit field
 4152 124a 41EA0801 	    orr r1,T1 // set mode
 4153 124e 23F80910 	    strh r1,[r3,T2]
 4154              	    // enable OC output 
 4155 1252 4FF00100 	    mov r0,#1 
 4156 1256 4FF00F08 	    mov T1,#15 
 4157 125a 1146     	    mov r1,r2  
 4158 125c 0139     	2:  subs r1,r1,#1 
 4159 125e 04D0     	    beq 3f 
 4160 1260 4FEA0010 	    lsl r0,#4
 4161 1264 4FEA0818 	    lsl T1,#4
 4162 1268 F8E7     	    b 2b
 4163 126a 6FEA0808 	3:  mvn T1,T1 
 4164 126e 198C     	    ldrh r1,[r3,#TIM_CCER]
 4165 1270 01EA0801 	    and r1,T1 // clear bit field 
 4166 1274 41EA0001 	    orr r1,r0 // set bit fiel new value 
 4167 1278 1984     	    strh r1,[r3,#TIM_CCER]
 4168              	    // enable counter 
 4169 127a 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4170 127e 1988     	    ldrh r1,[r3,TIM_CR1]
ARM GAS  tinyBasic.s 			page 108


 4171 1280 41EA0001 	    orr r1,r0
 4172 1284 1980     	    strh r1,[r3,TIM_CR1]
 4173              	    // generate a reload event 
 4174 1286 4FF00100 	    mov r0,#1 
 4175 128a 9882     	    strh r0,[r3,TIM_EGR]
 4176 128c BDE80003 	    pop {T1,T2}
 4177 1290 7047     	    _RET 
 4178              	
 4179              	/*********************************
 4180              	    pwm_dc 
 4181              	    set pwm duty cycle 
 4182              	    input:
 4183              	      r0   CCR value, i.e duty cycle 
 4184              	      r1   channel 
 4185              	      r2   TIMER_BASE_ADDR 
 4186              	    use:
 4187              	
 4188              	************************************/
 4189 1292 00BF     	    _FUNC pwm_dc 
 4190 1294 2DE90003 	    push {T1,T2}
 4191 1298 8946     	    mov T2,r1 
 4192 129a 4FF03408 	    mov T1,#TIM_CCR1 
 4193 129e 0139     	0:  subs r1,#1
 4194 12a0 02D0     	    beq 1f 
 4195 12a2 08F10408 	    add T1,#4
 4196 12a6 FAE7     	    b 0b
 4197 12a8 22F80800 	1:  strh r0,[r2,T1]
 4198              	    // trigger an update even 
 4199 12ac 4FF00200 	    mov r0,#2
 4200 12b0 B9F10109 	1:  subs T2,#1 
 4201 12b4 02D0     	    beq 2f 
 4202 12b6 4FEA4000 	    lsl r0,#1
 4203 12ba F9E7     	    b 1b 
 4204 12bc 9082     	2:  strh r0,[r2,#TIM_EGR]
 4205 12be BDE80003 	    pop {T1,T2}
 4206 12c2 7047     	    _RET 
 4207              	
 4208              	/*********************************
 4209              	  BASIC: SERVO_OFF channel 
 4210              	  disable servo-motor channel
 4211              	*********************************/
 4212              	    _FUNC servo_off 
 4213 12c4 00B5FFF7 	    _CALL expression 
 4213      FEFF5DF8 
 4213      04EB
 4214 12ce 1B28     	    cmp r0,#TK_INTGR
 4215 12d0 7FF4FEAF 	    bne syntax_error
 4216 12d4 0129     	    cmp r1,#1
 4217 12d6 03D5     	    bpl 1f 
 4218 12d8 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4219 12dc FFF7FEBF 	    b tb_error 
 4220 12e0 0729     	1:  cmp r1,#7
 4221 12e2 F9D5     	    bpl 0b 
 4222 12e4 A1F10101 	    sub r1,#1 // channel {0..5}
 4223 12e8 4FEA0111 	    lsl r1,#4 // channel*16
 4224 12ec DFF80C36 	    ldr r3,=servo_param 
 4225 12f0 0B44     	    add r3,r1 
ARM GAS  tinyBasic.s 			page 109


 4226              	    // reconfigure GPIO 
 4227 12f2 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4228 12f6 53F8041B 	    ldr r1,[r3],#4 // GPIO pin 
 4229 12fa 4FF01002 	    mov r2,#16 // INPUT_PD mode 
 4230 12fe 00B5FFF7 	    _CALL gpio_config
 4230      6CFB5DF8 
 4230      04EB
 4231 1308 53F8040B 	    ldr r0,[r3],#4 // TIMER_BASE_ADDR
 4232 130c 1968     	    ldr r1,[r3] // oc channel 
 4233 130e A1F10101 	    sub r1,#1 
 4234 1312 4FEA0111 	    lsl r1,#4 
 4235 1316 4FF00F02 	    mov r2,#0xf 
 4236 131a 02FA01F2 	    lsl r2,r1 
 4237 131e 6FEA0202 	    mvn r2,r2 
 4238 1322 018C     	    ldrh r1,[r0,#TIM_CCER]
 4239 1324 01EA0201 	    and r1,r2 
 4240 1328 0184     	    strh r1,[r0,#TIM_CCER]
 4241 132a 7047     	    _RET 
 4242              	
 4243              	
 4244              	/*********************************
 4245              	  BASIC: SERVO_POS channel,value  
 4246              	  set servo position 
 4247              	*********************************/
 4248              	    _FUNC servo_pos 
 4249 132c 4FF00200 	    mov r0,#2
 4250 1330 00B5FFF7 	    _CALL arg_list 
 4250      FEFF5DF8 
 4250      04EB
 4251 133a DCF80410 	    ldr r1,[DP,#4] // servo channel 
 4252 133e 0729     	    cmp r1,#7
 4253 1340 03D4     	    bmi 1f 
 4254 1342 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 4255 1346 FFF7FEBF 	    b tb_error 
 4256 134a DFF8B035 	1:  ldr r3,=servo_param 
 4257 134e 0139     	    subs r1,#1
 4258 1350 4FEA0111 	    lsl r1,#4
 4259 1354 01F10801 	    add r1,#8
 4260 1358 0B44     	    add r3,r1   
 4261 135a 53F8042B 	2:  ldr r2,[r3],#4 // TIMER_BASE_ADR
 4262 135e 1968     	    ldr r1,[r3] // oc channel 
 4263 1360 5CF8040B 	    _POP r0 // set value 
 4264 1364 0CF1040C 	    add DP,#4 // drop servo channel 
 4265 1368 00B5FFF7 	    _CALL pwm_dc 
 4265      93FF5DF8 
 4265      04EB
 4266 1372 7047     	    _RET 
 4267              	
 4268              	
 4269              	/*********************************
 4270              	  BASIC: SLEEP 
 4271              	  place MCU lowest power mode 
 4272              	  wait for external interrpt or
 4273              	  reset.
 4274              	*********************************/
 4275              	    _FUNC sleep
 4276 1374 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
ARM GAS  tinyBasic.s 			page 110


 4276      CEF20000 
 4277 137c 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4278 1380 0160     	    str r1,[r0]
 4279 1382 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4279      C4F20000 
 4280 138a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4281 138e 0160     	    str r1,[r0]
 4282 1390 20BF     	    wfe 
 4283 1392 7047     	    _RET 
 4284              	
 4285              	/************************************
 4286              	  BASIC: SPC(expr)
 4287              	  mov cursor right expr spaces 
 4288              	***********************************/
 4289              	    _FUNC spc 
 4290 1394 4FF00100 	    mov r0,#1
 4291 1398 00B5FFF7 	    _CALL func_args 
 4291      FEFF5DF8 
 4291      04EB
 4292 13a2 206C     	    ldr r0,[UPP,#FLAGS]
 4293 13a4 10F0800F 	    tst r0,#FPRINT 
 4294 13a8 5CF8040B 	    _POP r0 
 4295 13ac 04D0     	    beq 9f 
 4296 13ae 00B5FFF7 	    _CALL spaces 
 4296      FEFF5DF8 
 4296      04EB
 4297 13b8 7047     	9:  _RET 
 4298              	
 4299              	/**********************************
 4300              	  BASIC: SPI_DSEL channel 
 4301              	  deselect SPI channel 
 4302              	**********************************/
 4303 13ba 00BF     	    _FUNC spi_deselect 
 4304 13bc 00B5FFF7 	    _CALL expression 
 4304      FEFF5DF8 
 4304      04EB
 4305 13c6 1B28     	    cmp r0,#TK_INTGR
 4306 13c8 7FF4FEAF 	    bne syntax_error 
 4307 13cc DFF83035 	    ldr r3,=spi_param 
 4308 13d0 A1F10101 	    sub r1,#1
 4309 13d4 4FF01802 	    mov r2,#24
 4310 13d8 02FB01F1 	    mul r1,r2
 4311 13dc 0B44     	    add r3,r1
 4312 13de 1A46     	    mov r2,r3 
 4313 13e0 1B68     	    ldr r3,[R3]
 4314 13e2 1888     	    ldrh r0,[r3]
 4315              	    // clear SPI_CR1_SPE bit 
 4316 13e4 6FF04001 	    mvn r1,#(1<<6) // SPE 
 4317 13e8 00EA0100 	    and r0,r1
 4318 13ec 1880     	    strh r0,[R3]
 4319              	    // set NSS output high 
 4320 13ee 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR
 4321 13f0 9168     	    ldr r1,[r2,#8] // NSS pin 
 4322 13f2 4FF00100 	    mov r0,#1 
 4323 13f6 00FA01F0 	    lsl r0,r1 
 4324 13fa 1861     	    str r0,[R3,#GPIO_BSRR] 
 4325 13fc 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 111


 4326              	
 4327              	/**********************************
 4328              	  BASIC: SPI_INIT  channel,BR 
 4329              	  enable SPI channel 1|2
 4330              	*********************************/
 4331 13fe 00BF     	    _FUNC spi_init 
 4332 1400 4FF00200 	    mov r0,#2
 4333 1404 00B5FFF7 	    _CALL arg_list
 4333      FEFF5DF8 
 4333      04EB
 4334              	    // enable peripheral clock 
 4335 140e BCE80003 	    ldmia DP!,{T1,T2} // T1=BR, T2=channel 
 4336 1412 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 4336      C4F20201 
 4337 141a 4FF01800 	    mov r0,#RCC_APB2ENR
 4338 141e 4FF48053 	    mov r3,#(1<<12) // SPI1EN bit 12 
 4339 1422 B9F1010F 	    cmp T2,#1
 4340 1426 03D0     	    beq 1f 
 4341 1428 00F10400 	    add r0,#4 //RCC_APB1ENR
 4342 142c 4FEA8303 	    lsl r3,#2 // SPI2EN bit 14 
 4343 1430 0A58     	1:  ldr r2,[r1,r0]
 4344 1432 42EA0302 	    orr r2,r3 
 4345 1436 0A50     	    str r2,[r1,r0]
 4346              	    // spi config 
 4347 1438 DFF8C434 	    ldr r3,=spi_param 
 4348 143c A9F10101 	    sub r1,T2,#1 
 4349 1440 4FF01802 	    mov r2,#24
 4350 1444 02FB01F1 	    mul r1,r2
 4351 1448 0B44     	    add r3,r1 
 4352 144a 53F8041B 	    ldr r1,[r3],#4
 4353              	    // SPI_CR2
 4354 144e 4FF00400 	    mov r0,#(1<<2)
 4355 1452 8880     	    strh r0,[r1,#SPI_CR2] // SSOE
 4356              	    // SPI_CR1 as MSTR  
 4357 1454 4FEAC808 	    lsl T1,#3
 4358 1458 40EA0800 	    orr r0,T1 
 4359 145c 0880     	    strh r0,[r1,#SPI_CR1] 
 4360              	    // configure GPIO pins  
 4361 145e 53F8040B 	    ldr r0,[r3],#4 // GPIO_BASE_ADR 
 4362 1462 8046     	    mov T1,r0 
 4363 1464 53F8041B 	    ldr r1,[r3],#4 // NSS pin 
 4364 1468 8946     	    mov T2,r1 
 4365 146a 4FF00102 	    mov r2,#OUTPUT_PP 
 4366 146e 00B5FFF7 	    _CALL gpio_config //NSS  
 4366      B4FA5DF8 
 4366      04EB
 4367              	    // set NSS high 
 4368 1478 4046     	    mov r0,T1 
 4369 147a 4946     	    mov r1,T2 
 4370 147c 4FF00102 	    mov r2,#1 
 4371 1480 02FA01F2 	    lsl r2,r1 
 4372 1484 0261     	    str r2,[r0,#GPIO_BSRR]
 4373 1486 4046     	    mov r0,T1 
 4374 1488 53F8041B 	    ldr r1,[r3],#4 
 4375 148c 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4376 1490 00B5FFF7 	    _CALL gpio_config  // SCK
 4376      A3FA5DF8 
ARM GAS  tinyBasic.s 			page 112


 4376      04EB
 4377 149a 4046     	    mov r0,T1
 4378 149c 53F8041B 	    ldr r1,[r3],#4 
 4379 14a0 4FF00402 	    mov r2,#INPUT_FLOAT
 4380 14a4 00B5FFF7 	    _CALL gpio_config  //MISO 
 4380      99FA5DF8 
 4380      04EB
 4381 14ae 4046     	    mov r0,T1 
 4382 14b0 1968     	    ldr r1,[R3] 
 4383 14b2 4FF00902 	    mov r2,#OUTPUT_AFPP 
 4384 14b6 00B5FFF7 	    _CALL gpio_config // MOSI 
 4384      90FA5DF8 
 4384      04EB
 4385 14c0 7047     	    _RET 
 4386              	
 4387              	
 4388              	spi_param: 
 4389 14c2 00300140 	  .word SPI1_BASE_ADR,GPIOA_BASE_ADR,4,5,6,7   // GPIO pins order NSS,SCK,MISO,MOSI
 4389      00080140 
 4389      04000000 
 4389      05000000 
 4389      06000000 
 4390 14da 00380040 	  .word SPI2_BASE_ADR,GPIOB_BASE_ADR,12,13,14,15 // GPIO pins order NSS,SCK,MISO,MOSI
 4390      000C0140 
 4390      0C000000 
 4390      0D000000 
 4390      0E000000 
 4391              	
 4392              	/***************************************
 4393              	  BASIC: SPI_READ (channel) 
 4394              	  read 1 byte from channel 
 4395              	  use:
 4396              	**************************************/
 4397 14f2 00BF     	    _FUNC spi_read
 4398 14f4 0CB4     	    push {r2,r3}
 4399 14f6 4FF00100 	    mov r0,#1
 4400 14fa 00B5FFF7 	    _CALL func_args 
 4400      FEFF5DF8 
 4400      04EB
 4401 1504 5CF8041B 	    _POP r1 
 4402 1508 A1F10101 	    sub r1,#1
 4403 150c 4FF01802 	    mov r2,#24
 4404 1510 02FB01F1 	    mul r1,r2 
 4405 1514 FA4B     	    ldr r3,=spi_param 
 4406 1516 0B44     	    add r3,r1 
 4407 1518 1B68     	    ldr r3,[R3]
 4408 151a 80EA0000 	    eor r0,r0 
 4409 151e 9881     	    strh r0,[r3,#SPI_DR]
 4410 1520 9868     	0:  ldr r0,[r3,#SPI_SR]
 4411 1522 10F0010F 	    tst r0,#1
 4412 1526 FBD0     	    beq 0b
 4413 1528 9989     	    ldrh r1,[r3,#SPI_DR]
 4414 152a 01F0FF01 	    and r1,#255 
 4415 152e 4FF01B00 	    mov r0,#TK_INTGR  
 4416 1532 0CBC     	    pop {r2,r3}
 4417 1534 7047     	    _RET 
 4418              	
ARM GAS  tinyBasic.s 			page 113


 4419              	/********************************
 4420              	  BASIC: SPI_SELECT channel 
 4421              	  activate channel 
 4422              	  use:
 4423              	*******************************/
 4424 1536 00BF     	    _FUNC spi_select
 4425 1538 00B5FFF7 	    _CALL expression 
 4425      FEFF5DF8 
 4425      04EB
 4426 1542 1B28     	    cmp r0,#TK_INTGR
 4427 1544 7FF4FEAF 	    bne syntax_error
 4428 1548 ED4B     	    ldr r3,=spi_param 
 4429 154a A1F10101 	    sub r1,#1 
 4430 154e 4FF01802 	    mov r2,#24
 4431 1552 02FB01F1 	    mul r1,r2 
 4432 1556 0B44     	    add r3,r1 
 4433 1558 1A46     	    mov r2,r3 
 4434 155a 1B68     	    ldr r3,[R3]
 4435              	    // set SPI_CR1_SPE bit 
 4436 155c 1868     	    ldr r0,[R3,#SPI_CR1]
 4437 155e 4FF04001 	    mov r1,#(1<<6) // SPE 
 4438 1562 40EA0100 	    orr r0,r1 
 4439 1566 1860     	    str r0,[r3,#SPI_CR1] 
 4440              	    // set NSS low  
 4441 1568 5368     	    ldr r3,[r2,#4] // GPIO_BASE_ADR 
 4442 156a 9168     	    ldr r1,[r2,#8] // GPIO PIN 
 4443 156c 4FF48030 	    mov r0,#(1<<16) 
 4444 1570 00FA01F0 	    lsl r0,r1 
 4445 1574 1861     	    str r0,[R3,#GPIO_BSRR]
 4446 1576 7047     	    _RET 
 4447              	
 4448              	/*******************************
 4449              	  BASIC: SPI_WRITE channel,count,*buffer 
 4450              	  write bytes to spi channel 
 4451              	  use:
 4452              	********************************/
 4453              	    _FUNC spi_write
 4454 1578 4FF00300 	    mov r0,#3
 4455 157c 00B5FFF7 	    _CALL arg_list 
 4455      FEFF5DF8 
 4455      04EB
 4456 1586 BCE80E00 	    ldmia DP!,{r1,r2,r3} // *buffer, count, channel 
 4457 158a A3F10100 	    sub r0,r3,#1 
 4458 158e 4FF01803 	    mov r3,#24
 4459 1592 03FB00F0 	    mul r0,r3  
 4460 1596 DA4B     	    ldr r3,=spi_param 
 4461 1598 0344     	    add r3,r0 
 4462 159a 1B68     	    ldr r3,[r3] //SPI_BASE_ADR 
 4463 159c 11F8010B 	1:  ldrb r0,[r1],#1
 4464 15a0 9881     	    strh r0,[r3,#SPI_DR]
 4465 15a2 1889     	2:  ldrh r0,[r3,#SPI_SR]
 4466 15a4 10F0020F 	    tst r0,#2
 4467 15a8 FBD0     	    beq 2b 
 4468 15aa 013A     	    subs r2,#1 
 4469 15ac F6D1     	    bne 1b 
 4470              	    // wait BSY=0 completed 
 4471 15ae 1889     	3:  ldrh r0,[r3,#SPI_SR]
ARM GAS  tinyBasic.s 			page 114


 4472 15b0 10F0800F 	    tst r0,#(1<<7)
 4473 15b4 FBD1     	    bne 3b 
 4474 15b6 D868     	    ldr r0,[r3,#SPI_DR]    
 4475 15b8 7047     	    _RET 
 4476              	
 4477              	/******************************
 4478              	  BASIC: STOP 
 4479              	  stop program executre but 
 4480              	  keep execution state for 
 4481              	  resume 
 4482              	******************************/
 4483 15ba 00BF     	    _FUNC stop
 4484 15bc 206C10F0 	    _RTO 
 4484      010F03D1 
 4484      4FF00700 
 4484      FFF7FEBF 
 4485 15cc 6068     	    ldr r0,[UPP,#COUNT]
 4486 15ce 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4487 15d2 206C     	    ldr r0,[UPP,#FLAGS]
 4488 15d4 4FF00901 	    mov r1,#FRUN+FSTOP
 4489 15d8 80EA0100 	    eor r0,r1
 4490 15dc 2064     	    str r0,[UPP,#FLAGS]
 4491 15de 8AEA0A0A 	    eor IN,IN 
 4492 15e2 8BEA0B0B 	    eor BPTR,BPTR 
 4493 15e6 C4F804A0 	    str IN,[UPP,#COUNT]
 4494 15ea C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4495 15ee C4F808A0 	    str IN,[UPP,#BASICPTR]
 4496 15f2 4FF4A040 	    _MOV32 r0,RAM_END
 4496      C2F20000 
 4497 15fa 8546     	    mov sp,r0
 4498 15fc FFF7FEBF 	    b cmd_line 
 4499              	
 4500              	
 4501              	/**************************
 4502              	  BASIC: TAB(expr)
 4503              	  move cursor column expr 
 4504              	**************************/
 4505              	    _FUNC tab 
 4506 1600 4FF00100 	    mov r0,#1
 4507 1604 00B5FFF7 	    _CALL func_args  
 4507      FEFF5DF8 
 4507      04EB
 4508 160e 206C     	    ldr r0,[UPP,#FLAGS]
 4509 1610 10F0800F 	    tst r0,#FPRINT
 4510 1614 5CF8040B 	    _POP r0 
 4511 1618 04D0     	    beq 9f 
 4512 161a 00B5FFF7 	    _CALL cursor_x 
 4512      FEFF5DF8 
 4512      04EB
 4513 1624 7047     	9:  _RET 
 4514              	
 4515              	
 4516              	/**************************
 4517              	  BASIC: TICKS 
 4518              	  return msec counter
 4519              	**************************/  
 4520 1626 00BF     	    _FUNC get_ticks
ARM GAS  tinyBasic.s 			page 115


 4521 1628 E169     	    ldr r1,[UPP,#TICKS]
 4522 162a 4FF01B00 	    mov r0,#TK_INTGR
 4523 162e 7047     	    _RET  
 4524              	
 4525              	/*************************
 4526              	  BASIC: TIMER expr 
 4527              	  set countdown timer 
 4528              	************************/
 4529              	    _FUNC set_timer
 4530 1630 00B5FFF7 	    _CALL expression 
 4530      FEFF5DF8 
 4530      04EB
 4531 163a 1B28     	    cmp r0,#TK_INTGR
 4532 163c 7FF4FEAF 	    bne syntax_error 
 4533 1640 2162     	    str r1,[UPP,#TIMER]
 4534 1642 7047     	    _RET 
 4535              	
 4536              	/***************************
 4537              	  BASIC: TIMEOUT
 4538              	  check for timer expiration 
 4539              	  return -1 true || 0 false
 4540              	****************************/
 4541              	    _FUNC timeout
 4542 1644 81EA0101 	    eor r1,r1 
 4543 1648 206A     	    ldr r0,[UPP,#TIMER]
 4544 164a 08B9     	    cbnz r0,9f 
 4545 164c 6FEA0101 	    mvn r1,r1 
 4546 1650 4FF01B00 	9:  mov r0,#TK_INTGR    
 4547 1654 7047     	    _RET 
 4548              	
 4549              	/****************************************
 4550              	  BASIC:  TONE freq, duration 
 4551              	  play a tone with frequency freq and duration
 4552              	  in milliseconds
 4553              	***********************************************/
 4554 1656 00BF     	    _FUNC tone
 4555 1658 4FF00200 	    mov r0,#2
 4556 165c 00B5FFF7 	    _CALL arg_list 
 4556      FEFF5DF8 
 4556      04EB
 4557 1666 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4557      C4F20002 
 4558 166e DCF80400 	    ldr r0,[DP,#4] // freq
 4559 1672 4AF62021 	    _MOV32 r1,4500000
 4559      C0F24401 
 4560 167a B1FBF0F1 	    udiv r1,r0 
 4561 167e 9185     	    strh r1,[r2,#TIM_ARR]
 4562 1680 4FEA5101 	    lsr r1,#1 
 4563 1684 9186     	    strh r1,[r2,#TIM_CCR1]
 4564 1686 4FF00100 	    mov r0,#1
 4565 168a 1084     	    strh r0,[r2,#TIM_CCER]
 4566 168c 1080     	    strh r0,[r2,#TIM_CR1]
 4567 168e 908A     	    ldrh r0,[r2,#TIM_EGR]
 4568 1690 40F00200 	    orr r0,#2 
 4569 1694 9082     	    strh r0,[r2,#TIM_EGR] 
 4570 1696 BCE80300 	    ldmia DP!,{r0,r1}
 4571              	    // pause duration  
ARM GAS  tinyBasic.s 			page 116


 4572 169a E169     	    ldr r1,[UPP,#TICKS]
 4573 169c 0844     	    add r0,r1 
 4574 169e E169     	1:  ldr r1,[UPP,#TICKS]
 4575 16a0 8142     	    cmp r1,r0 
 4576 16a2 FCD4     	    bmi 1b 
 4577              	    // stop tone 
 4578 16a4 1088     	    ldrh r0,[R2,#TIM_CR1]
 4579 16a6 80F00100 	    eor r0,#1 
 4580 16aa 1080     	    strh r0,[R2,#TIM_CR1]     
 4581 16ac 7047     	    _RET 
 4582              	
 4583              	/************************************
 4584              	  BASIC: TONE_INIT 
 4585              	  initialize tone_generator
 4586              	  output on GPIOB:6 
 4587              	************************************/
 4588 16ae 00BF     	    _FUNC tone_init 
 4589              	    // configure pin 
 4590 16b0 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4590      C4F20100 
 4591 16b8 4FF00601 	    mov r1,#6 // gpio pin 
 4592 16bc 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4593 16c0 00B5FFF7 	    _CALL gpio_config
 4593      8BF95DF8 
 4593      04EB
 4594              	    // configure TIMER4 in PWM mode 
 4595 16ca 4FF00F00 	    mov r0,#15 //PSC 
 4596 16ce 4FF6FF71 	    mov r1,#65535 // ARR 
 4597 16d2 4FF00102 	    mov r2,#1 // channel
 4598 16d6 4FF40063 	    _MOV32 r3,TIMER4_BASE_ADR
 4598      C4F20003 
 4599 16de 9846     	    mov T1,r3
 4600 16e0 00B5FFF7 	    _CALL pwm_config  
 4600      8DFD5DF8 
 4600      04EB
 4601              	    // tone off 
 4602 16ea B8F80000 	    ldrh r0,[T1,#TIM_CR1]
 4603 16ee 80F00100 	    eor r0,#1 
 4604 16f2 A8F80000 	    strh r0,[T1,#TIM_CR1]     
 4605 16f6 7047     	    _RET 
 4606              	
 4607              	
 4608              	/****************************************
 4609              	  BASIC: TRACE n 
 4610              	  enable execution trace 
 4611              	  0   ddisable
 4612              	  1   show current line#
 4613              	  2  show line#+data_stack
 4614              	  3  show line#+data_stack+main_stack 
 4615              	***************************************/
 4616              	    _FUNC trace 
 4617 16f8 00B5FFF7 	    _CALL next_token 
 4617      FEFF5DF8 
 4617      04EB
 4618 1702 1B28     	    cmp r0,#TK_INTGR  
 4619 1704 7FF4FEAF 	    bne syntax_error 
 4620 1708 01F00301 	    and r1,#3 
ARM GAS  tinyBasic.s 			page 117


 4621 170c C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4622 1710 7047     	    _RET 
 4623              	
 4624              	
 4625              	/***************************
 4626              	  BASIC: UBOUND 
 4627              	  return last indice of @
 4628              	  output:
 4629              	    r0  TK_INTGR 
 4630              	    r1  +int 
 4631              	**************************/
 4632 1712 00BF     	    _FUNC ubound
 4633 1714 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4634 1718 D4F8D000 	    ldr r0,[UPP,#HERE]
 4635 171c A1EB0001 	    sub r1,r0 
 4636 1720 4FEA9101 	    lsr r1,#2
 4637 1724 4FF01B00 	    mov r0,#TK_INTGR 
 4638 1728 7047     	    _RET 
 4639              	
 4640              	/****************************
 4641              	  BASIC: UFLASH 
 4642              	  return user flash address
 4643              	*****************************/
 4644 172a 00BF     	    _FUNC uflash
 4645 172c 7249     	    ldr r1,=user
 4646 172e 4FF01B00 	    mov r0,#TK_INTGR 
 4647 1732 7047     	    _RET 
 4648              	
 4649              	
 4650              	/************************************
 4651              	  BASIC: UNTIL relation 
 4652              	  close a DO..UNTIL loop 
 4653              	  loop until relation come true 
 4654              	************************************/
 4655              	    _FUNC until
 4656 1734 00B5FFF7 	    _CALL relation 
 4656      FEFF5DF8 
 4656      04EB
 4657 173e 11B1     	    cbz r1,9f
 4658 1740 0CF1080C 	    add DP,#8
 4659 1744 7047     	    _RET  
 4660 1746 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4661 174a 9BF80200 	    ldrb r0,[BPTR,#2]
 4662 174e 6060     	    str r0,[UPP,#COUNT]
 4663 1750 7047     	    _RET 
 4664              	
 4665              	/*************************************
 4666              	  BASIC: WAIT addr,expr1[,expr2] 
 4667              	  wait until *addr&expr1 is not null 
 4668              	  or until (*addr&expr1)^expr2 is null 
 4669              	***************************************/
 4670 1752 00BF     	    _FUNC wait
 4671 1754 4FF00200 	    mov r0,#2
 4672 1758 00B5FFF7 	    _CALL arg_list 
 4672      FEFF5DF8 
 4672      04EB
 4673 1762 0228     	    cmp r0,#2
ARM GAS  tinyBasic.s 			page 118


 4674 1764 01D0     	    beq 2f 
 4675 1766 0328     	    cmp r0,#3
 4676 1768 05D0     	    beq 4f
 4677 176a BCE80300 	2:  ldmia DP!,{r0,r1}
 4678 176e 0A88     	3:  ldrh r2,[r1]
 4679 1770 0240     	    ands r2,r0 
 4680 1772 FCD0     	    beq 3b 
 4681 1774 06E0     	    b 9f 
 4682 1776 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4683 177a 1388     	5:  ldrh r3,[r2]
 4684 177c 83EA0003 	    eor r3,r0
 4685 1780 0B40     	    ands r3,r1 
 4686 1782 FAD0     	    beq 5b 
 4687 1784 7047     	9:  _RET 
 4688              	
 4689              	/*********************************************
 4690              	  BASIC: WORDS 
 4691              	  print list of BASIC WORDS in dictionary 
 4692              	  use:
 4693              	    r0,r1,r2,T1,T2  
 4694              	********************************************/
 4695 1786 00BF     	    _FUNC words
 4696 1788 206C10F0 	    _CLO 
 4696      010F03D0 
 4696      4FF00700 
 4696      FFF7FEBF 
 4697 1798 DFF86881 	    ldr T1,=kword_dict
 4698 179c 89EA0909 	    eor T2,T2
 4699 17a0 82EA0202 	    eor r2,r2  
 4700              	1:  
 4701 17a4 4046     	    mov r0,T1
 4702 17a6 00B5FFF7 	    _CALL strlen
 4702      FEFF5DF8 
 4702      04EB
 4703 17b0 F0B1     	    cbz r0,4f 
 4704 17b2 8144     	    add T2,r0 
 4705 17b4 B9F1500F 	    cmp T2,#80 
 4706 17b8 06D4     	    bmi 2f
 4707 17ba 89EA0909 	    eor T2,T2  
 4708 17be 00B5FFF7 	    _CALL cr 
 4708      FEFF5DF8 
 4708      04EB
 4709 17c8 4046     	2:  mov r0,T1 
 4710 17ca 00B5FFF7 	    _CALL uart_puts 
 4710      FEFF5DF8 
 4710      04EB
 4711 17d4 4FF02000 	    mov r0,#SPACE
 4712 17d8 09F10109 	    add T2,#1  
 4713 17dc 00B5FFF7 	    _CALL uart_putc
 4713      FEFF5DF8 
 4713      04EB
 4714 17e6 02F10102 	    add r2,#1 
 4715 17ea 58F80C8C 	    ldr T1,[T1,#-12]
 4716 17ee D9E7     	    b 1b 
 4717 17f0 19EA0909 	4:  ands T2,T2
 4718 17f4 04D0     	    beq 5f 
 4719 17f6 00B5FFF7 	    _CALL cr 
ARM GAS  tinyBasic.s 			page 119


 4719      FEFF5DF8 
 4719      04EB
 4720 1800 1046     	5:  mov r0,r2 
 4721 1802 4FF00A01 	    mov r1,#10
 4722 1806 00B5FFF7 	    _CALL print_int 
 4722      FEFF5DF8 
 4722      04EB
 4723 1810 3D48     	    ldr r0,=dict_words
 4724 1812 00B5FFF7 	    _CALL uart_puts  
 4724      FEFF5DF8 
 4724      04EB
 4725 181c 7047     	9:  _RET 
 4726              	
 4727 181e 776F7264 	dict_words: .asciz "words in dictionary" 
 4727      7320696E 
 4727      20646963 
 4727      74696F6E 
 4727      61727900 
 4728              	
 4729              	
 4730              	/**************************************
 4731              	  BASIC: XOR(expr1,expr2)
 4732              	  binary exclusive or between 2 expressions
 4733              	**************************************/
 4734 1832 00BF     	    _FUNC bit_xor
 4735 1834 4FF00200 	    mov r0,#2
 4736 1838 00B5FFF7 	    _CALL func_args
 4736      FEFF5DF8 
 4736      04EB
 4737 1842 5CF8040B 	    _POP r0
 4738 1846 5CF8041B 	    _POP r1 
 4739 184a 81EA0001 	    eor r1,r0 
 4740 184e 4FF01B00 	    mov r0,#TK_INTGR
 4741 1852 7047     	    _RET 
 4742              	
 4743              	/***************************************
 4744              	    BASIC: XPOS 
 4745              	    report cursor column on terminal 
 4746              	***************************************/
 4747              	    _FUNC xpos 
 4748 1854 00B5FFF7 	    _CALL get_curpos
 4748      FEFF5DF8 
 4748      04EB
 4749 185e 4FF01B00 	    mov r0,#TK_INTGR
 4750 1862 7047     	    _RET 
 4751              	
 4752              	/***********************************
 4753              	    BASIC: YPOS 
 4754              	    report cursor line on terminal 
 4755              	***********************************/
 4756              	    _FUNC ypos 
 4757 1864 00B5FFF7 	    _CALL get_curpos 
 4757      FEFF5DF8 
 4757      04EB
 4758 186e 0146     	    mov r1,r0 
 4759 1870 4FF01B00 	    mov r0,#TK_INTGR
 4760 1874 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 120


 4761              	
 4762              	
 4763              	/**********************************
 4764              	     argument stack manipulation
 4765              	**********************************/
 4766              	
 4767              	/**********************************
 4768              	  BASIC PUSH expr[,expr] 
 4769              	  push integers on stack 
 4770              	*********************************/
 4771 1876 00BF     	    _FUNC cmd_push
 4772 1878 4FF00100 	    mov r0,#1
 4773 187c 00B5FFF7 	    _CALL arg_list
 4773      FEFF5DF8 
 4773      04EB
 4774 1886 7047     	    _RET 
 4775              	
 4776              	/********************************
 4777              	  BASIC: POP 
 4778              	  pop an integer out of stack 
 4779              	********************************/    
 4780              	    _FUNC fn_pop 
 4781 1888 5CF8041B 	    _POP r1 
 4782 188c 4FF01B00 	    mov r0,#TK_INTGR 
 4783 1890 7047     	    _RET 
 4784              	
 4785              	/*******************************
 4786              	  BASIC: DROP n 
 4787              	  discard n integer from stack
 4788              	*******************************/
 4789 1892 00BF     	    _FUNC drop 
 4790 1894 00B5FFF7 	    _CALL expression 
 4790      FEFF5DF8 
 4790      04EB
 4791 189e 1B28     	    cmp r0,#TK_INTGR 
 4792 18a0 7FF4FEAF 	    bne syntax_error 
 4793 18a4 4FF00400 	    mov r0,#4 
 4794 18a8 01FB00F0 	    mul r0,r1 
 4795 18ac 8444     	    add DP,r0 
 4796 18ae 7047     	    _RET 
 4797              	
 4798              	/********************************
 4799              	  BASIC: GET(expr) 
 4800              	  retreive nth element from stack 
 4801              	********************************/
 4802              	    _FUNC get 
 4803 18b0 4FF00100 	    mov r0,#1
 4804 18b4 00B5FFF7 	    _CALL func_args
 4804      FEFF5DF8 
 4804      04EB
 4805 18be 5CF8040B 	    _POP r0
 4806 18c2 4FEA8000 	    lsl r0,#2 
 4807 18c6 5CF80010 	    ldr r1,[DP,r0]
 4808 18ca 4FF01B00 	    mov r0,#TK_INTGR
 4809 18ce 7047     	    _RET 
 4810              	
 4811              	/*************************************
ARM GAS  tinyBasic.s 			page 121


 4812              	  BASIC: PUT slot,value  
 4813              	  store value at nth position on stack
 4814              	**************************************/
 4815              	    _FUNC put
 4816 18d0 4FF00200 	    mov r0,#2
 4817 18d4 00B5FFF7 	    _CALL arg_list 
 4817      FEFF5DF8 
 4817      04EB
 4818 18de BCE80300 	    ldmia DP!,{r0,r1} // value,slot 
 4819 18e2 4FEA8101 	    lsl r1,#2 
 4820 18e6 4CF80100 	    str r0,[DP,r1]
 4821 18ea 7047     	    _RET 
 4822              	
 4823              	
 4824              	  .section .rodata.user
 4825              	  .p2align 10 
 4826              	user:
 4827 0000 FFFFFFFF 	  .space 1024,255
 4827      FFFFFFFF 
 4827      FFFFFFFF 
 4827      FFFFFFFF 
 4827      FFFFFFFF 
 4828              	
 4829              	/*************************************************
 4830              	   extra FLASH memory not used by Tiny BASIC
 4831              	   is used to save BASIC programs.
 4832              	************************************************/
 4833              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4834              	  .section .rodata.fs
 4835              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 122


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:87     *ABS*:0000000000000000 GPIO_O_PP
       stm32f103.inc:88     *ABS*:0000000000000004 GPIO_O_OD
ARM GAS  tinyBasic.s 			page 123


       stm32f103.inc:89     *ABS*:0000000000000008 GPIO_O_AFPP
       stm32f103.inc:90     *ABS*:000000000000000c GPIO_O_AFOD
       stm32f103.inc:92     *ABS*:0000000000000002 S2MHZ
       stm32f103.inc:93     *ABS*:0000000000000001 S10MHZ
       stm32f103.inc:94     *ABS*:0000000000000003 S50MHZ
       stm32f103.inc:95     *ABS*:0000000000000001 OSPEED
       stm32f103.inc:96     *ABS*:0000000000000001 OUTPUT_PP
       stm32f103.inc:97     *ABS*:0000000000000005 OUTPUT_OD
       stm32f103.inc:98     *ABS*:0000000000000009 OUTPUT_AFPP
       stm32f103.inc:101    *ABS*:0000000000000000 PULLDOWN
       stm32f103.inc:102    *ABS*:0000000000000001 PULLUPP
       stm32f103.inc:104    *ABS*:0000000000000000 ANALOG
       stm32f103.inc:105    *ABS*:0000000000000004 FLOATING
       stm32f103.inc:106    *ABS*:0000000000000008 PULL_RESISTOR
       stm32f103.inc:107    *ABS*:0000000000000000 INPUT_ANA
       stm32f103.inc:108    *ABS*:0000000000000004 INPUT_FLOAT
       stm32f103.inc:109    *ABS*:0000000000000010 INPUT_PD
       stm32f103.inc:113    *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:116    *ABS*:0000000000000000 AFIO_EVCR
       stm32f103.inc:117    *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:118    *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:119    *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:120    *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:121    *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:122    *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:125    *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:128    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:129    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:130    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:131    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:132    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:133    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:136    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:139    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:140    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:141    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:144    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:146    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:147    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:148    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:149    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:150    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:151    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:152    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:153    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:154    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:155    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:156    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:157    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:158    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:159    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:161    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:164    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:165    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:166    *ABS*:0000000000000004 NVIC_ISER1
ARM GAS  tinyBasic.s 			page 124


       stm32f103.inc:167    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:168    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:169    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:170    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:171    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:172    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:173    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:174    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:175    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:176    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:177    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:178    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:179    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:180    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:183    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:184    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:185    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:186    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:189    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:190    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:191    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:192    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:193    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:194    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:195    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:196    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:199    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:200    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:201    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:202    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:203    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:206    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:207    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:208    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:209    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:212    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:213    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:214    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:215    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:216    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:219    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:220    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:221    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:222    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:223    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:224    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:225    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:226    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:227    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:228    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:229    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:230    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:231    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:232    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:233    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:234    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:235    *ABS*:000000000000003c ADC_JDR1
ARM GAS  tinyBasic.s 			page 125


       stm32f103.inc:236    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:237    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:238    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:239    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:242    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:243    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:244    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:245    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:247    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:248    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:249    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:250    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:251    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:252    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:253    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:254    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:255    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:256    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:257    *ABS*:0000000000000028 TIM_PSC
       stm32f103.inc:258    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:259    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:260    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:261    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:262    *ABS*:000000000000004c TIM_DMAR
       stm32f103.inc:265    *ABS*:0000000040013000 SPI1_BASE_ADR
       stm32f103.inc:266    *ABS*:0000000040003800 SPI2_BASE_ADR
       stm32f103.inc:268    *ABS*:0000000000000000 SPI_CR1
       stm32f103.inc:269    *ABS*:0000000000000004 SPI_CR2
       stm32f103.inc:270    *ABS*:0000000000000008 SPI_SR
       stm32f103.inc:271    *ABS*:000000000000000c SPI_DR
       stm32f103.inc:272    *ABS*:0000000000000010 SPI_CRCPR
       stm32f103.inc:273    *ABS*:0000000000000014 SPI_RXCRCR
       stm32f103.inc:274    *ABS*:0000000000000018 SPI_TXCRCR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
ARM GAS  tinyBasic.s 			page 126


           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
ARM GAS  tinyBasic.s 			page 127


      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
ARM GAS  tinyBasic.s 			page 128


      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
ARM GAS  tinyBasic.s 			page 129


       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b RANDOMIZE_IDX
       cmd_index.inc:85     *ABS*:000000000000003c READ_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REM_IDX
       cmd_index.inc:87     *ABS*:000000000000003e REST_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RET_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 RND_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RSHIFT_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 RUN_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SAVE_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_INIT_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_OFF_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SERVO_POS_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SLEEP_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 SPC_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 SPI_DSEL_IDX
       cmd_index.inc:99     *ABS*:000000000000004a SPI_INIT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b SPI_READ_IDX
       cmd_index.inc:101    *ABS*:000000000000004c SPI_SELECT_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SPI_WRITE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e STEP_IDX
       cmd_index.inc:104    *ABS*:000000000000004f STOP_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 STORE_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TAB_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 THEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 TICKS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 TIMER_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 TMROUT_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 TO_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TONE_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TONE_INIT_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TRACE_IDX
       cmd_index.inc:115    *ABS*:000000000000005a UBOUND_IDX
       cmd_index.inc:116    *ABS*:000000000000005b UFLASH_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UNTIL_IDX
ARM GAS  tinyBasic.s 			page 130


       cmd_index.inc:118    *ABS*:000000000000005d WAIT_IDX
       cmd_index.inc:119    *ABS*:000000000000005e WORDS_IDX
       cmd_index.inc:120    *ABS*:000000000000005f XOR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 XPOS_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:319    .text:0000000000000250 search_target
         tinyBasic.s:1773   .text:0000000000000e58 next_token
         tinyBasic.s:383    .text:00000000000002c8 search_label
         tinyBasic.s:2024   .text:00000000000010ac expression
         tinyBasic.s:1326   .text:0000000000000a60 syntax_error
         tinyBasic.s:421    .text:00000000000002f0 search_lineno
         tinyBasic.s:1341   .text:0000000000000a68 tb_error
         tinyBasic.s:351    .text:000000000000029c search_const
         tinyBasic.s:452    .text:0000000000000310 delete_line
         tinyBasic.s:477    .text:000000000000033c create_gap
         tinyBasic.s:503    .text:0000000000000368 insert_line
         tinyBasic.s:542    .text:00000000000003b8 compile
         tinyBasic.s:1679   .text:0000000000000db4 pad
         tinyBasic.s:872    .text:00000000000006c0 parse_int
         tinyBasic.s:615    .text:0000000000000460 comp_token
         tinyBasic.s:698    .text:0000000000000566 store_r0
         tinyBasic.s:966    .text:0000000000000760 skip
         tinyBasic.s:1051   .text:00000000000007c8 is_letter
         tinyBasic.s:782    .text:00000000000005f8 comp_label
         tinyBasic.s:707    .text:0000000000000586 token_exit
         tinyBasic.s:689    .text:0000000000000542 tick2
         tinyBasic.s:725    .text:000000000000058c is_special
         tinyBasic.s:747    .text:00000000000005d0 token_ofs
         tinyBasic.s:638    .text:00000000000004ba tok_idx0
         tinyBasic.s:701    .text:000000000000056c try_number
         tinyBasic.s:642    .text:00000000000004bc single
         tinyBasic.s:742    .text:00000000000005c1 tok_single
         tinyBasic.s:646    .text:00000000000004c4 lt
         tinyBasic.s:652    .text:00000000000004d2 gt
         tinyBasic.s:665    .text:00000000000004f6 bkslash
         tinyBasic.s:672    .text:000000000000050c prt_cmd
ARM GAS  tinyBasic.s 			page 131


         tinyBasic.s:678    .text:000000000000051e quote
         tinyBasic.s:905    .text:00000000000006f8 parse_quote
         tinyBasic.s:683    .text:0000000000000532 tick
         tinyBasic.s:739    .text:00000000000005ac char_list
         tinyBasic.s:740    .text:00000000000005ac $d
         tinyBasic.s:748    .text:00000000000005d0 $d
         tinyBasic.s:765    .text:00000000000005f8 $t
         tinyBasic.s:985    .text:0000000000000778 upper
         tinyBasic.s:2350   .rodata.dictionary:0000000000000850 kword_dict
         tinyBasic.s:1493   .text:0000000000000be4 search_dict
         tinyBasic.s:839    .text:0000000000000694 compress_label
         tinyBasic.s:1082   .text:00000000000007e8 atoi
         tinyBasic.s:936    .text:000000000000072c get_escaped_char
         tinyBasic.s:953    .text:0000000000000756 escaped
         tinyBasic.s:953    .text:0000000000000756 $d
         tinyBasic.s:966    .text:000000000000075e $t
         tinyBasic.s:1003   .text:0000000000000788 is_digit
         tinyBasic.s:1027   .text:00000000000007a4 is_hex
         tinyBasic.s:1127   .text:0000000000000834 cmd_name
         tinyBasic.s:1156   .text:0000000000000860 decompile_line
         tinyBasic.s:1173   .text:00000000000008a6 decomp_loop
         tinyBasic.s:1286   .text:0000000000000a35 single_char
         tinyBasic.s:1281   .text:0000000000000a20 relop_str
         tinyBasic.s:1281   .text:0000000000000a20 $d
         tinyBasic.s:1282   .text:0000000000000a2c ge_str
         tinyBasic.s:1283   .text:0000000000000a2f le_str
         tinyBasic.s:1284   .text:0000000000000a32 ne_str
         tinyBasic.s:1303   .text:0000000000000a48 modulo
         tinyBasic.s:1374   .text:0000000000000af8 compile_error
         tinyBasic.s:1345   .text:0000000000000a70 rt_error
         tinyBasic.s:1389   .text:0000000000000b4a rt_error_msg
         tinyBasic.s:1393   .text:0000000000000b6a err_msg
         tinyBasic.s:1390   .text:0000000000000b5b token_at_msg
         tinyBasic.s:2835   .text.basic:000000000000043a dump01
         tinyBasic.s:1692   .text:0000000000000dc4 warm_start
         tinyBasic.s:1389   .text:0000000000000b4a $d
         tinyBasic.s:1401   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1402   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1403   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1404   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1405   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1406   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1407   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1408   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1409   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1410   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1411   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1412   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1413   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1414   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1415   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1416   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1418   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1419   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1420   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1430   .text:0000000000000bae $t
         tinyBasic.s:1430   .text:0000000000000bb0 skip_line
ARM GAS  tinyBasic.s 			page 132


         tinyBasic.s:1447   .text:0000000000000bb8 BTGL
         tinyBasic.s:1465   .text:0000000000000bbc kword_cmp
         tinyBasic.s:1531   .text:0000000000000c22 cold_start
         tinyBasic.s:1555   .text:0000000000000c8a src_addr
         tinyBasic.s:1557   .text:0000000000000c8e dest_addr
         tinyBasic.s:1678   .text:0000000000000db0 tib
         tinyBasic.s:1559   .text:0000000000000c92 sysvar_size
         tinyBasic.s:1570   .text:0000000000000c98 prt_version
         tinyBasic.s:1626   .text:0000000000000d3c clear_basic
         tinyBasic.s:3686   .text.basic:0000000000000cb8 search_free
         tinyBasic.s:4012   .text.basic:00000000000010a0 exec_autorun
         tinyBasic.s:1556   .text:0000000000000c8a $d
         tinyBasic.s:2202   .rodata:0000000000000000 uzero
         tinyBasic.s:2228   .rodata:00000000000000d4 ulast
         tinyBasic.s:1570   .text:0000000000000c96 $t
         tinyBasic.s:1593   .text:0000000000000cfc version_msg
         tinyBasic.s:1595   .text:0000000000000d1c version
         tinyBasic.s:1594   .text:0000000000000cfc $d
         tinyBasic.s:1610   .text:0000000000000d20 clear_vars
         tinyBasic.s:1661   .text:0000000000000d84 warm_init
         tinyBasic.s:1677   .text:0000000000000dac dstack
         tinyBasic.s:1676   .text:0000000000000da8 mstack
         tinyBasic.s:1676   .text:0000000000000da8 $d
         tinyBasic.s:1680   .text:0000000000000db8 array
         tinyBasic.s:1681   .text:0000000000000dbc ready
         tinyBasic.s:1712   .text:0000000000000ddc cmd_line
         tinyBasic.s:1724   .text:0000000000000e10 interpreter
         tinyBasic.s:1757   .text:0000000000000e50 execute
         tinyBasic.s:3166   .text.basic:000000000000077e let_var
         tinyBasic.s:3171   .text.basic:000000000000078a let_array
         tinyBasic.s:2359   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1829   .text:0000000000000ed0 expect
         tinyBasic.s:1848   .text:0000000000000eec func_args
         tinyBasic.s:1870   .text:0000000000000f1c arg_list
         tinyBasic.s:1905   .text:0000000000000f60 factor
         tinyBasic.s:2131   .text:0000000000001184 get_array_element
         tinyBasic.s:2169   .text:00000000000011ac get_var
         tinyBasic.s:1973   .text:000000000000103c term
         tinyBasic.s:2066   .text:0000000000001108 relation
         tinyBasic.s:2113   .text:000000000000117c relop_jmp
         tinyBasic.s:2085   .text:000000000000114e rel_idx0
         tinyBasic.s:2086   .text:000000000000114e rel_eq
         tinyBasic.s:2103   .text:0000000000001164 rel_false
         tinyBasic.s:2089   .text:0000000000001152 rel_gt
         tinyBasic.s:2092   .text:0000000000001156 rel_ge
         tinyBasic.s:2095   .text:000000000000115a rel_lt
         tinyBasic.s:2098   .text:000000000000115e rel_le
         tinyBasic.s:2101   .text:0000000000001162 rel_ne
         tinyBasic.s:2114   .text:000000000000117c $d
         tinyBasic.s:2131   .text:0000000000001182 $t
         tinyBasic.s:2151   .text:0000000000001198 set_array_element
         tinyBasic.s:2187   .text:00000000000011bc set_var
         tinyBasic.s:4835   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2223   .rodata:0000000000000050 $d
         tinyBasic.s:2236   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2235   *ABS*:0000000000000000 link
         tinyBasic.s:2351   .rodata.dictionary:0000000000000850 LINK
ARM GAS  tinyBasic.s 			page 133


         tinyBasic.s:2237   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2346   .rodata.dictionary:0000000000000844 first_link
         tinyBasic.s:2393   .text.basic:0000000000000000 abs
         tinyBasic.s:2407   .text.basic:0000000000000024 analog_read
         tinyBasic.s:2430   .text.basic:0000000000000058 adc
         tinyBasic.s:2470   .text.basic:00000000000000cc bit_and
         tinyBasic.s:2484   .text.basic:00000000000000ec ascii
         tinyBasic.s:3960   .text.basic:0000000000000ffc autorun
         tinyBasic.s:2510   .text.basic:000000000000013c awu
         tinyBasic.s:2551   .text.basic:00000000000001ac bitmask
         tinyBasic.s:2572   .text.basic:00000000000001cc bit_reset
         tinyBasic.s:2595   .text.basic:00000000000001f4 bit_set
         tinyBasic.s:2631   .text.basic:000000000000023c bit_test
         tinyBasic.s:2617   .text.basic:0000000000000218 bit_toggle
         tinyBasic.s:2662   .text.basic:0000000000000284 char
         tinyBasic.s:2654   .text.basic:0000000000000278 cls
         tinyBasic.s:2678   .text.basic:00000000000002a0 const
         tinyBasic.s:2805   .text.basic:0000000000000404 dec_base
         tinyBasic.s:3751   .text.basic:0000000000000d24 directory
         tinyBasic.s:2814   .text.basic:000000000000040c do_loop
         tinyBasic.s:4789   .text.basic:0000000000001894 drop
         tinyBasic.s:2829   .text.basic:0000000000000414 dump
         tinyBasic.s:2872   .text.basic:00000000000004b8 cmd_end
         tinyBasic.s:2899   .text.basic:00000000000004f8 erase
         tinyBasic.s:2910   .text.basic:000000000000050c for
         tinyBasic.s:3791   .text.basic:0000000000000ddc forget
         tinyBasic.s:4028   .text.basic:00000000000010cc free
         tinyBasic.s:4802   .text.basic:00000000000018b0 get
         tinyBasic.s:2991   .text.basic:00000000000005c8 gosub
         tinyBasic.s:3017   .text.basic:0000000000000608 goto
         tinyBasic.s:3025   .text.basic:0000000000000614 hex_base
         tinyBasic.s:3034   .text.basic:000000000000061c if
         tinyBasic.s:3313   .text.basic:000000000000093c pin_input
         tinyBasic.s:3056   .text.basic:0000000000000634 input_var
         tinyBasic.s:3131   .text.basic:0000000000000738 invert
         tinyBasic.s:3143   .text.basic:0000000000000754 key
         tinyBasic.s:3159   .text.basic:0000000000000768 let
         tinyBasic.s:3202   .text.basic:00000000000007f4 list
         tinyBasic.s:3820   .text.basic:0000000000000e28 load
         tinyBasic.s:3253   .text.basic:00000000000008a4 locate
         tinyBasic.s:3266   .text.basic:00000000000008c8 lshift
         tinyBasic.s:3279   .text.basic:00000000000008e4 new
         tinyBasic.s:2955   .text.basic:0000000000000570 next
         tinyBasic.s:3288   .text.basic:0000000000000904 func_not
         tinyBasic.s:3300   .text.basic:000000000000091c bit_or
         tinyBasic.s:3330   .text.basic:0000000000000968 out
         tinyBasic.s:3346   .text.basic:000000000000098c pad_ref
         tinyBasic.s:3357   .text.basic:0000000000000998 pause
         tinyBasic.s:3380   .text.basic:00000000000009b4 pin_mode
         tinyBasic.s:3435   .text.basic:0000000000000a38 peek8
         tinyBasic.s:3447   .text.basic:0000000000000a54 peek16
         tinyBasic.s:3459   .text.basic:0000000000000a70 peek32
         tinyBasic.s:3472   .text.basic:0000000000000a8c poke8
         tinyBasic.s:3483   .text.basic:0000000000000aa4 poke16
         tinyBasic.s:3494   .text.basic:0000000000000abc poke32
         tinyBasic.s:4780   .text.basic:0000000000001888 fn_pop
         tinyBasic.s:3507   .text.basic:0000000000000ad4 print
ARM GAS  tinyBasic.s 			page 134


         tinyBasic.s:4771   .text.basic:0000000000001878 cmd_push
         tinyBasic.s:4815   .text.basic:00000000000018d0 put
         tinyBasic.s:3579   .text.basic:0000000000000bc4 qkey
         tinyBasic.s:3591   .text.basic:0000000000000be0 randomize
         tinyBasic.s:2713   .text.basic:0000000000000324 read
         tinyBasic.s:2763   .text.basic:0000000000000398 restore
         tinyBasic.s:3006   .text.basic:00000000000005f0 return
         tinyBasic.s:3600   .text.basic:0000000000000be8 random
         tinyBasic.s:3626   .text.basic:0000000000000c38 rshift
         tinyBasic.s:3638   .text.basic:0000000000000c54 run
         tinyBasic.s:3875   .text.basic:0000000000000ebc save
         tinyBasic.s:4048   .text.basic:00000000000010e0 servo_init
         tinyBasic.s:4212   .text.basic:00000000000012c4 servo_off
         tinyBasic.s:4248   .text.basic:000000000000132c servo_pos
         tinyBasic.s:4275   .text.basic:0000000000001374 sleep
         tinyBasic.s:4289   .text.basic:0000000000001394 spc
         tinyBasic.s:4303   .text.basic:00000000000013bc spi_deselect
         tinyBasic.s:4331   .text.basic:0000000000001400 spi_init
         tinyBasic.s:4397   .text.basic:00000000000014f4 spi_read
         tinyBasic.s:4424   .text.basic:0000000000001538 spi_select
         tinyBasic.s:4453   .text.basic:0000000000001578 spi_write
         tinyBasic.s:2941   .text.basic:0000000000000558 step
         tinyBasic.s:4483   .text.basic:00000000000015bc stop
         tinyBasic.s:2880   .text.basic:00000000000004c0 store
         tinyBasic.s:4505   .text.basic:0000000000001600 tab
         tinyBasic.s:3045   .text.basic:0000000000000630 then
         tinyBasic.s:4520   .text.basic:0000000000001628 get_ticks
         tinyBasic.s:4529   .text.basic:0000000000001630 set_timer
         tinyBasic.s:4541   .text.basic:0000000000001644 timeout
         tinyBasic.s:2928   .text.basic:0000000000000540 to
         tinyBasic.s:4554   .text.basic:0000000000001658 tone
         tinyBasic.s:4588   .text.basic:00000000000016b0 tone_init
         tinyBasic.s:4616   .text.basic:00000000000016f8 trace
         tinyBasic.s:4632   .text.basic:0000000000001714 ubound
         tinyBasic.s:4644   .text.basic:000000000000172c uflash
         tinyBasic.s:4655   .text.basic:0000000000001734 until
         tinyBasic.s:4670   .text.basic:0000000000001754 wait
         tinyBasic.s:4695   .text.basic:0000000000001788 words
         tinyBasic.s:4734   .text.basic:0000000000001834 bit_xor
         tinyBasic.s:4747   .text.basic:0000000000001854 xpos
         tinyBasic.s:4756   .text.basic:0000000000001864 ypos
         tinyBasic.s:2393   .text.basic:0000000000000000 $t
         tinyBasic.s:2417   .text.basic:0000000000000048 adc_loop
         tinyBasic.s:2454   .text.basic:00000000000000a8 adc_off
         tinyBasic.s:2435   .text.basic:000000000000006c adc_on
         tinyBasic.s:3350   .text.basic:0000000000000994 pad_adr
         tinyBasic.s:2739   .text.basic:0000000000000370 seek_next
         tinyBasic.s:2794   .text.basic:00000000000003f6 no_data_line
         tinyBasic.s:2790   .text.basic:00000000000003f0 try_next_line
         tinyBasic.s:2846   .text.basic:0000000000000458 print_dump_header
         tinyBasic.s:2903   .text.basic:0000000000000508 user_space
         tinyBasic.s:2903   .text.basic:0000000000000508 $d
         tinyBasic.s:4826   .rodata.user:0000000000000000 user
         tinyBasic.s:2910   .text.basic:000000000000050c $t
         tinyBasic.s:2994   .text.basic:00000000000005d6 target
         tinyBasic.s:3124   .text.basic:0000000000000734 str_buffer
         tinyBasic.s:3123   .text.basic:0000000000000730 input_buffer
ARM GAS  tinyBasic.s 			page 135


         tinyBasic.s:3123   .text.basic:0000000000000730 $d
         tinyBasic.s:3131   .text.basic:0000000000000738 $t
         tinyBasic.s:3247   .text.basic:00000000000008a0 out_buff
         tinyBasic.s:3247   .text.basic:00000000000008a0 $d
         tinyBasic.s:3253   .text.basic:00000000000008a4 $t
         tinyBasic.s:3350   .text.basic:0000000000000994 $d
         tinyBasic.s:3357   .text.basic:0000000000000998 $t
         tinyBasic.s:3401   .text.basic:00000000000009dc gpio_config
         tinyBasic.s:3564   .text.basic:0000000000000ba0 unget_exit
         tinyBasic.s:3566   .text.basic:0000000000000ba8 print_exit
         tinyBasic.s:3739   .text.basic:0000000000000d20 fs_addr
         tinyBasic.s:3714   .text.basic:0000000000000cdc search_file
         tinyBasic.s:3718   .text.basic:0000000000000ce4 cmp_loop
         tinyBasic.s:3739   .text.basic:0000000000000d20 $d
         tinyBasic.s:3751   .text.basic:0000000000000d24 $t
         tinyBasic.s:3774   .text.basic:0000000000000d9c no_more_file
         tinyBasic.s:3784   .text.basic:0000000000000dd4 fcount
         tinyBasic.s:3784   .text.basic:0000000000000dd4 $d
         tinyBasic.s:3826   .text.basic:0000000000000e4a load_autorun
         tinyBasic.s:3948   .text.basic:0000000000000fe8 fsize
         tinyBasic.s:3949   .text.basic:0000000000000ff4 data_bytes
         tinyBasic.s:3893   .text.basic:0000000000000f04 new_file
         tinyBasic.s:3948   .text.basic:0000000000000fe8 $d
         tinyBasic.s:4000   .text.basic:0000000000001088 write_back
         tinyBasic.s:4005   .text.basic:000000000000109a arun_sign
         tinyBasic.s:4005   .text.basic:000000000000109a $d
         tinyBasic.s:4012   .text.basic:000000000000109e $t
         tinyBasic.s:4106   .text.basic:00000000000011a0 servo_param
         tinyBasic.s:4127   .text.basic:0000000000001200 pwm_config
         tinyBasic.s:4087   .text.basic:000000000000116a remap_t2
         tinyBasic.s:4093   .text.basic:0000000000001178 remap_t3
         tinyBasic.s:4101   .text.basic:0000000000001190 no_remap
         tinyBasic.s:4189   .text.basic:0000000000001294 pwm_dc
         tinyBasic.s:4106   .text.basic:00000000000011a0 $d
         tinyBasic.s:4127   .text.basic:0000000000001200 $t
         tinyBasic.s:4388   .text.basic:00000000000014c2 spi_param
         tinyBasic.s:4389   .text.basic:00000000000014c2 $d
         tinyBasic.s:4397   .text.basic:00000000000014f2 $t
         tinyBasic.s:4727   .text.basic:000000000000181e dict_words
         tinyBasic.s:4727   .text.basic:000000000000181e $d
         tinyBasic.s:4734   .text.basic:0000000000001832 $t
         tinyBasic.s:4825   .rodata.user:0000000000000000 $d
         tinyBasic.s:4835   .text.basic:00000000000018ec $d
         tinyBasic.s:4835   .text:00000000000011cc $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:746    .text:00000000000005cf $d
         tinyBasic.s:1303   .text:0000000000000a45 $d
         tinyBasic.s:1303   .text:0000000000000a46 $t
         tinyBasic.s:1597   .text:0000000000000d1d $d
         tinyBasic.s:1597   .text:0000000000000d1e $t
         tinyBasic.s:1692   .text:0000000000000dc3 $d
         tinyBasic.s:1692   .text:0000000000000dc4 $t
         tinyBasic.s:3791   .text.basic:0000000000000ddb $d
         tinyBasic.s:3791   .text.basic:0000000000000ddc $t
ARM GAS  tinyBasic.s 			page 136


         tinyBasic.s:3960   .text.basic:0000000000000ffb $d
         tinyBasic.s:3960   .text.basic:0000000000000ffc $t

UNDEFINED SYMBOLS
GPIO_AFOD
PULLUP
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
write_page
get_curpos
