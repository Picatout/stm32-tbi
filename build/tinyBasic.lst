ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
ARM GAS  tinyBasic.s 			page 3


  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  28              	  .include "ascii.inc"
   1              	////
ARM GAS  tinyBasic.s 			page 4


   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  tinyBasic.s 			page 5


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
ARM GAS  tinyBasic.s 			page 6


  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  74              	  .equ TK_GE,0x33      // relation operator '>='
  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<='
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
ARM GAS  tinyBasic.s 			page 7


  85              	
  86              	//--------------------------------------
  87              	//   error codes 
  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
ARM GAS  tinyBasic.s 			page 8


 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	
 160              	/* flags used by BASIC interpreter */ 
 161              		.equ FRUN,(1<<0) // programm running
 162              		.equ FTRAP,(1<<1) // inside trap handler 
 163              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 164              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 165              		.equ FBREAK,(1<<4) // break point flag 
 166              		.equ FCOMP,(1<<5)  // compiling flags 
 167              		.equ FAUTORUN,(1<<6) // auto start program running 
 168              	
 169              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 170              	  
 171              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 172              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 173              	
 174              	/***********************************************
 175              	*       MACROS
 176              	***********************************************/
 177              		.macro _CALL fn /* low level routine call */ 
 178              	 	PUSH {LR}
 179              		BL \fn  
 180              	  POP {LR}
 181              		.endm
 182              		
 183              		.macro	_RET /* return from subroutine */
 184              		BX	LR
 185              		.endm
 186              	
 187              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 188              		MOV \REG, #\LITERAL&0xffff
 189              		MOVT \REG, #\LITERAL>>16
 190              		.endm
 191              	
 192              	// local function header 
 193              	  .macro _FUNC label 
 194              	  .p2align 2 
 195              	  .type \label, %function  
 196              	\label:
 197              	  .endm 
 198              	
ARM GAS  tinyBasic.s 			page 9


 199              	// global function header 
 200              	  .macro _GBL_FUNC label 
 201              	  .global \label 
 202              	  _FUNC \label 
 203              	  .endm 
 204              	
 205              	
 206              	/********************************
 207              	    dictionary structure
 208              	------------------------------
 209              	 format:
 210              	   link:    
 211              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 212              	   cmd_name: 31 characters max 
 213              	   cmd_index: 2 bytes 
 214              	**********************************/
 215              		.macro _dict_entry tok_type,name,cmd_idx 
 216              	  .word LINK 
 217              	  .word \cmd_idx 
 218              		.word \tok_type  	
 219              		.equ LINK,.
 220              		.asciz "\name"
 221              		.p2align 2 
 222              		.endm 
 223              	
 224              	  // pop parameter in register 
 225              	  .macro _POP  reg 
 226              	  ldmia  DP!,{\reg}
 227              	  .endm 
 228              	
 229              	  // push register on parameter stack 
 230              	  .macro _PUSH reg 
 231              	  stmdb DP!,{\reg}
 232              	  .endm 
 233              	
 234              	 // create a text data 
 235              	 .macro _TEXT label,text
 236              	 \label: .asciz "\text"
 237              	 .p2align 2 
 238              	 .endm 
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  tinyBasic.s 			page 10


  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ADCON_IDX, 1 // <<1   //   adc on 
  27              	    .equ ADCREAD_IDX, 2 // <<1
  28              	    .equ AND_IDX, 3 // <<1.equ  // 
  29              	    .equ ASC_IDX, 4 // <<1.equ  // 
  30              	    .equ AUTORUN_IDX, 5 // <<1
  31              	    .equ AWU_IDX, 6 // <<1
  32              	    .equ BIT_IDX, 7 // <<1
  33              	    .equ BRES_IDX, 8 // <<1
  34              	    .equ BSET_IDX, 9 // <<1
  35              	    .equ BTEST_IDX, 10 // <<1
  36              	    .equ BTOGL_IDX, 11 // <<1
  37              	    .equ BYE_IDX, 12 // <<1
  38              	    .equ CHAR_IDX, 13 // <<1
  39              	    .equ CRH_IDX, 14 // <<1
  40              	    .equ CRL_IDX, 15 // <<1
  41              	    .equ DATA_IDX, 16 // <<1
  42              	    .equ DATALN_IDX, 17 // <<1
  43              	    .equ DDR_IDX, 18 // <<1
  44              	    .equ DEC_IDX, 19 // <<1
  45              	    .equ DIR_IDX, 20 // <<1
  46              	    .equ DO_IDX, 21 // <<1
  47              	    .equ DREAD_IDX, 22 // <<1
  48              	    .equ DWRITE_IDX, 23 // <<1
  49              	    .equ END_IDX, 24 // <<1
  50              	    .equ EEPROM_IDX, 25 // <<1
  51              	    .equ FCPU_IDX, 26 // <<1
  52              	    .equ FOR_IDX, 27 // <<1
  53              	    .equ FORGET_IDX, 28 // <<1
  54              	    .equ GOSUB_IDX, 29 // <<1
  55              	    .equ GOTO_IDX, 30 // <<1
  56              	    .equ GPIO_IDX, 31 // <<1
  57              	    .equ HEX_IDX, 32 // <<1
  58              	    .equ IDR_IDX, 33 // <<1
  59              	    .equ IF_IDX, 34 // <<1
  60              	    .equ INPUT_IDX, 35 // <<1
  61              	    .equ INVERT_IDX, 36 // <<1
  62              	    .equ IWDGEN_IDX, 37 // <<1
  63              	    .equ IWDGREF_IDX, 38 // <<1
  64              	    .equ KEY_IDX, 39 // <<1
  65              	    .equ LET_IDX, 40 // <<1
  66              	    .equ LIST_IDX, 41 // <<1
  67              	    .equ LOAD_IDX, 42 // <<1
  68              	    .equ LOG_IDX, 43 // <<1
  69              	    .equ LSHIFT_IDX, 44 // <<1
  70              	    .equ MULDIV_IDX, 45 // <<1
  71              	    .equ NEXT_IDX, 46 // <<1
  72              	    .equ NEW_IDX, 47 // <<1
  73              	    .equ NOT_IDX, 48 // <<1
ARM GAS  tinyBasic.s 			page 11


  74              	    .equ ODR_IDX, 49 // <<1
  75              	    .equ OR_IDX, 50 // <<1
  76              	    .equ PAD_IDX, 51 // <<1
  77              	    .equ PAUSE_IDX, 52 // <<1
  78              	    .equ PMODE_IDX, 53 // <<1
  79              	    .equ PEEK_IDX, 54 // <<1
  80              	    .equ PINP_IDX, 55 // <<1
  81              	    .equ POKE_IDX, 56 // <<1
  82              	    .equ POUT_IDX, 57 // <<1
  83              	    .equ PRT_IDX, 58 // <<1 //  PRINT commande index 
  84              	    .equ PRTA_IDX, 59 // <<1
  85              	    .equ PRTB_IDX, 60 // <<1
  86              	    .equ PRTC_IDX, 61 // <<1
  87              	    .equ PRTD_IDX, 62 // <<1
  88              	    .equ PRTE_IDX, 63 // <<1
  89              	    .equ PRTF_IDX, 64 // <<1
  90              	    .equ PRTG_IDX, 65 // <<1
  91              	    .equ PRTH_IDX, 66 // <<1
  92              	    .equ PRTI_IDX, 67 // <<1
  93              	    .equ QKEY_IDX, 68 // <<1
  94              	    .equ READ_IDX, 69 // <<1
  95              	    .equ RBT_IDX, 70 // <<1  //  REBOOT
  96              	    .equ REM_IDX, 71 // <<1 //  REMARK command index 
  97              	    .equ REST_IDX, 72 // <<1 //  RESTORE
  98              	    .equ RET_IDX, 73 // <<1  //  RETURN 
  99              	    .equ RND_IDX, 74 // <<1 //  RANDOM 
 100              	    .equ RSHIFT_IDX, 75 // <<1
 101              	    .equ RUN_IDX, 76 // <<1
 102              	    .equ SAVE_IDX, 77 // <<1
 103              	    .equ SHOW_IDX, 78 // <<1
 104              	    .equ SIZE_IDX, 79 // <<1
 105              	    .equ SLEEP_IDX, 80 // <<1
 106              	    .equ SPIRD_IDX, 81 // <<1
 107              	    .equ SPIEN_IDX, 82 // <<1
 108              	    .equ SPISEL_IDX, 83 // <<1
 109              	    .equ SPIWR_IDX, 84 // <<1
 110              	    .equ STEP_IDX, 85 // <<1
 111              	    .equ STOP_IDX, 86 // <<1
 112              	    .equ TICKS_IDX, 87 // <<1
 113              	    .equ TIMER_IDX, 88 // <<1
 114              	    .equ TMROUT_IDX, 89 // <<1  //  TIMEOUT
 115              	    .equ TO_IDX, 90 // <<1
 116              	    .equ TONE_IDX, 91 // <<1
 117              	    .equ UBOUND_IDX, 92 // <<1
 118              	    .equ UFLASH_IDX, 93 // <<1
 119              	    .equ UNTIL_IDX, 94 // <<1
 120              	    .equ USR_IDX, 95 // <<1
 121              	    .equ WAIT_IDX, 96 // <<1
 122              	    .equ WORDS_IDX, 97 // <<1
 123              	    .equ WRITE_IDX, 98 // <<1
 124              	    .equ XOR_IDX, 99 // <<1 
 125              	    .equ XTRMT_IDX, 100 // <<1
 126              	    .equ XRCV_IDX, 101 // <<1
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
ARM GAS  tinyBasic.s 			page 12


  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
ARM GAS  tinyBasic.s 			page 13


  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
ARM GAS  tinyBasic.s 			page 14


 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1248     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 4FF00D00 	    mov r0,#CR 
 171 00b4 00B5FFF7 	    _CALL uart_putc  
 171      FEFF5DF8 
 171      04EB
 172 00be 7047     	    _RET 
 173 00c0 746F6B65 	    _TEXT tok_msg,"token: " 
 173      6E3A2000 
 174              	
 175              	/******************************************
 176              	    prt_row 
 177              	    print memory content in byte format 
 178              	    input:
 179              	      r0    address 
 180              	      r1    count 
 181              	    output:
 182              	      r0    address+count 
 183              	    use:
 184              	      r2    address 
 185              	      r3    count 
 186              	****************************************/
 187              	    _FUNC prt_row 
 188 00c8 0FB4     	    push {r0,r1,r2,r3}
 189 00ca 0246     	    mov r2,r0
 190 00cc 0B46     	    mov r3,r1  
 191 00ce 4FF01001 	    mov r1,#16 
 192 00d2 00B5FFF7 	    _CALL print_int 
 192      FEFF5DF8 
 192      04EB
ARM GAS  tinyBasic.s 			page 15


 193 00dc 4FF00300 	    mov r0,#3
 194 00e0 00B5FFF7 	    _CALL spaces  
 194      FEFF5DF8 
 194      04EB
 195              	// print bytes values in hexadecimal 
 196 00ea 12F8010B 	1:  ldrb r0,[r2],#1 
 197 00ee 00B5FFF7 	    _CALL print_hex
 197      FEFF5DF8 
 197      04EB
 198 00f8 013B     	    subs r3,#1 
 199 00fa F6D1     	    bne 1b 
 200 00fc 4FF00200 	    mov r0,#2 
 201 0100 00B5FFF7 	    _CALL spaces
 201      FEFF5DF8 
 201      04EB
 202              	// print characters      
 203 010a 03BC     	    pop {r0,r1}
 204 010c 00B500F0 	    _CALL prt_chars 
 204      0DF85DF8 
 204      04EB
 205 0116 4FF00D00 	    mov r0,#CR 
 206 011a 00B5FFF7 	    _CALL uart_putc 
 206      FEFF5DF8 
 206      04EB
 207 0124 1046     	    mov r0,r2
 208 0126 0CBC     	    pop {r2,r3}      
 209 0128 7047     	    _RET 
 210              	
 211              	/************************************
 212              	    prt_chars 
 213              	    print n ascii character starting 
 214              	    at address 
 215              	    input: 
 216              	      r0    address 
 217              	      r1    count 
 218              	    output:
 219              	      r0    address + count
 220              	    use:
 221              	      r2    address 
 222              	***********************************/
 223 012a 00BF     	    _FUNC prt_chars 
 224 012c 04B4     	    push {r2}
 225 012e 0246     	    mov r2,r0
 226 0130 12F8010B 	1:  ldrb r0,[r2],#1 
 227 0134 2028     	    cmp r0,#SPACE 
 228 0136 01D5     	    bpl 2f 
 229 0138 4FF05F00 	    mov r0,#'_' 
 230 013c 00B5FFF7 	2:  _CALL uart_putc
 230      FEFF5DF8 
 230      04EB
 231 0146 0139     	    subs r1,#1 
 232 0148 F2D1     	    bne 1b 
 233 014a 1046     	    mov r0,r2 
 234 014c 04BC     	    pop {r2}
 235 014e 7047     	    _RET 
 236              	
 237              	/****************************************
ARM GAS  tinyBasic.s 			page 16


 238              	    dump 
 239              	    print memory content in hexadecimal 
 240              	    16 bytes per row 
 241              	    input:
 242              	      r0  address 
 243              	      r1  count 
 244              	    ouput:
 245              	      none 
 246              	    use:
 247              	
 248              	****************************************/
 249              	    _FUNC dump 
 250 0150 04B4     	    push {r2}
 251 0152 0A46     	    mov r2,r1 
 252 0154 4FF01001 	1:  mov r1,#16
 253 0158 00B5FFF7 	    _CALL prt_row 
 253      B5FF5DF8 
 253      04EB
 254 0162 103A     	    subs r2,#16 
 255 0164 F6D5     	    bpl 1b 
 256 0166 04BC     	2:  pop {r2}
 257 0168 7047     	    _RET 
 258              	
 259              	/***************************************
 260              	    search_lineno 
 261              	    localize BASIC line from its number 
 262              	    input:
 263              	      r0   line# 
 264              	    output: 
 265              	      r0   adr where found || adr new to be inserted 
 266              	      r1   0 found || !0 not found  
 267              	    use:
 268              	      r0   scan address 
 269              	      r1   temp   
 270              	      r2   address end of text
 271              	      r3   target line#
 272              	****************************************/    
 273 016a 00BF     	    _FUNC search_lineno
 274 016c 0CB4     	    push {r2,r3} 
 275 016e 0346     	    mov r3,r0 // target 
 276 0170 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 277 0172 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 278 0174 9042     	1:  cmp r0,r2 
 279 0176 05D0     	    beq  8f
 280 0178 0188     	    ldrh r1,[r0]
 281 017a C91A     	    subs r1,r3 
 282 017c 04D5     	    bpl 9f 
 283 017e 8178     	    ldrb r1,[r0,#2]
 284 0180 0844     	    add r0,r1
 285 0182 F7E7     	    b 1b 
 286 0184 4FF0FF31 	8:  mov r1,#-1 
 287 0188 0CBC     	9:  pop {r2,r3}
 288 018a 7047     	    _RET 
 289              	
 290              	
 291              	/********************************************
 292              	    delete_line 
ARM GAS  tinyBasic.s 			page 17


 293              	    delete BASIC line at addr 
 294              	    input:
 295              	      r0    address 
 296              	    output:
 297              	      r0    address  
 298              	    use: 
 299              	      r1    dest adr
 300              	      r2    bytes to move 
 301              	      T1    length line to delete 
 302              	      T2    txtend 
 303              	********************************************/
 304              	    _FUNC delete_line 
 305 018c 2DE90703 	    push {r0,r1,r2,T1,T2}
 306 0190 0146     	    mov r1,r0 // dest 
 307 0192 91F80280 	    ldrb T1,[r1,#2] // line length 
 308 0196 4044     	    add r0,T1  // src
 309 0198 D4F83490 	    ldr T2,[UPP,#TXTEND]
 310 019c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 311 01a0 00B5FFF7 	    _CALL cmove
 311      FEFF5DF8 
 311      04EB
 312 01aa A9EB0809 	    sub T2,T1 // txtend-count 
 313 01ae C4F83480 	    str T1,[UPP,#TXTEND] 
 314 01b2 BDE80703 	    pop {r0,r1,r2,T1,T2}
 315 01b6 7047     	    _RET 
 316              	
 317              	/******************************************
 318              	    create_gap 
 319              	    create a gap in text area to insert new line 
 320              	    input:
 321              	      r0    adr 
 322              	      r1    length 
 323              	    output:
 324              	      r0    adr 
 325              	    use:
 326              	      T1    length 
 327              	      T2    txtend 
 328              	************************************************/
 329              	    _FUNC create_gap 
 330 01b8 2DE90503 	    push {r0,r2,T1,T2}
 331 01bc 8846     	    mov T1,R1
 332 01be 0144     	    add r1,r0  // dest 
 333 01c0 D4F83490 	    ldr T2,[UPP,#TXTEND]
 334 01c4 A9EB0002 	    sub r2,T2,r0 
 335 01c8 00B5FFF7 	    _CALL cmove
 335      FEFF5DF8 
 335      04EB
 336 01d2 C144     	    add T2,T1 
 337 01d4 C4F83490 	    str T2,[UPP,#TXTEND]
 338 01d8 BDE80503 	    pop {r0,r2,T1,T2}
 339 01dc 7047     	    _RET 
 340              	
 341              	/************************************************
 342              	    insert_line 
 343              	    insert BASIC line in text area 
 344              	    first search if line with same number exist 
 345              	    replace if so. 
ARM GAS  tinyBasic.s 			page 18


 346              	    input:
 347              	      r0    *buffer to insert 
 348              	    output:
 349              	      none 
 350              	    use: 
 351              	      T1     *buffer
 352              	      T2     temp  
 353              	************************************************/ 
 354 01de 00BF     	    _FUNC insert_line 
 355 01e0 2DE90203 	    push {r1,T1,T2}
 356 01e4 8046     	    mov T1,r0 
 357 01e6 B8F80000 	    ldrh r0,[T1]
 358 01ea 00B5FFF7 	    _CALL search_lineno 
 358      BEFF5DF8 
 358      04EB
 359 01f4 49B9     	    cbnz  r1, 1f // line# doesn't exist
 360              	// already exist 
 361 01f6 00B5FFF7 	    _CALL delete_line // delete old one 
 361      C8FF5DF8 
 361      04EB
 362 0200 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 363 0204 B9F1030F 	    cmp T2,#3 
 364 0208 0DD0     	    beq 9f
 365              	1: //insert new line 
 366 020a 98F80210 	    ldrb r1,[T1,#2]
 367 020e 00B5FFF7 	    _CALL create_gap 
 367      D2FF5DF8 
 367      04EB
 368 0218 4146     	    mov r1,T1 
 369 021a 8A78     	    ldrb r2,[r1,#2]
 370 021c 00B5FFF7 	    _CALL cmove 
 370      FEFF5DF8 
 370      04EB
 371 0226 BDE80203 	9:  pop {r1,T1,T2}
 372 022a 7047     	    _RET 
 373              	
 374              	/*********************************
 375              	    compile 
 376              	    tokenize source line save it 
 377              	    in pas buffer.
 378              	    compiled line format: 
 379              	      line_no  2 bytes {0...32767}
 380              	      count    1 byte  
 381              	      tokens   variable length 
 382              	  input:
 383              	    source text in tib  
 384              	  output:
 385              	    r0    0 stored | -1 immediate 
 386              	  use:
 387              	    r3    tib index   
 388              	    T1    tib
 389              	    T2    pad
 390              	***********************************/
 391              	    _FUNC compile
 392 022c 2DE90C03 	    push  {r2,r3,T1,T2}
 393 0230 DFF89C87 	    ldr T1,tib 
 394 0234 DFF89C97 	    ldr T2,pad 
ARM GAS  tinyBasic.s 			page 19


 395 0238 206C     	    ldr r0,[UPP,#FLAGS]
 396 023a 40F02000 	    orr r0,#FCOMP
 397 023e 2064     	    str r0,[UPP,#FLAGS]
 398 0240 83EA0303 	    eor r3,r3     
 399 0244 A9F80030 	    strh r3,[T2]    // line no 
 400 0248 89F80230 	    strb r3,[T2,#2] // length 
 401 024c 00B500F0 	    _CALL comp_token 
 401      35F85DF8 
 401      04EB
 402 0256 0F28     	    cmp r0,#TK_INTGR
 403 0258 07D1     	    bne 1f 
 404 025a 0129     	    cmp r1,#1 
 405 025c 05D5     	    bpl 1f 
 406 025e 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 407 0262 2360     	    str r3,[UPP,#IN_SAVED]
 408 0264 C4F80880 	    str T1,[UPP,#BASICPTR]
 409 0268 22E2     	    b tb_error  
 410 026a 29F8031B 	1:  strh r1,[T2],#3 
 411 026e C145     	2:  cmp T2,T1 
 412 0270 02DB     	    blt 3f 
 413 0272 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 414 0276 1BE2     	    b tb_error 
 415 0278 00B500F0 	3:  _CALL comp_token 
 415      1FF85DF8 
 415      04EB
 416 0282 0028     	    cmp r0,#TK_NONE 
 417 0284 F3D1     	    bne 2b 
 418              	// compilation completed 
 419 0286 DFF84C37 	    ldr r3,pad 
 420 028a A9EB0309 	    sub T2,r3 // line length 
 421 028e 83F80290 	    strb T2,[r3,#2]
 422 0292 B3F80090 	    ldrh T2,[r3]
 423 0296 B9F1000F 	    cmp T2,#0 
 424 029a 08D0     	    beq 8f 
 425              	// insert line in text buffer 
 426 029c 1846     	    mov r0,r3 
 427 029e 00B5FFF7 	    _CALL insert_line 
 427      9EFF5DF8 
 427      04EB
 428 02a8 80EA0000 	    eor r0,r0 
 429 02ac 02E0     	    b 9f 
 430 02ae A360     	8:  str r3,[UPP,#BASICPTR]
 431 02b0 4FF0FF30 	    mov r0,#-1 
 432 02b4 BDE80C03 	9:  pop {r2,r3,T1,T2}
 433 02b8 7047     	    _RET 
 434              	
 435              	/*********************************************
 436              	    compile next token from source 
 437              	    input: 
 438              	      r3 		tib index  
 439              	      T1    tib adr
 440              	      T2    insert point in pad  
 441              	    output:
 442              	      r0     token attribute 
 443              	      r1 		token value
 444              	      r3     tib index updated    
 445              	      T2     updated 
ARM GAS  tinyBasic.s 			page 20


 446              	      use:
 447              	**********************************************/
 448              	    .macro _case c, next  
 449              	    cmp r0,#\c 
 450              	    bne \next
 451              	    .endm 
 452              	
 453 02ba 00BF     	    _FUNC comp_token 
 454 02bc 40B4     	    push {r6}
 455 02be 18F80300 	    ldrb r0,[T1,r3]
 456 02c2 00F0DE80 	    beq token_exit  
 457 02c6 4FF02000 	    mov r0,#SPACE 
 458 02ca 00B500F0 	    _CALL skip 
 458      64F95DF8 
 458      04EB
 459 02d4 18F80300 	    ldrb r0,[T1,r3]
 460 02d8 00B9     	    cbnz r0,1f 
 461 02da D2E0     	    b token_exit
 462 02dc 03F10103 	1:  add r3,#1 
 463 02e0 00B500F0 	    _CALL upper 
 463      61F95DF8 
 463      04EB
 464 02ea 00B500F0 	    _CALL is_special
 464      0AF95DF8 
 464      04EB
 465 02f4 DFF8F066 	    ldr r6,=token_ofs
 466 02f8 D6E811F0 	    tbh [r6,r1] 
 467              	tok_idx0:     
 468              	//  not in list 
 469 02fc 91E0     	    b try_other 
 470              	// single char token with no value 
 471              	single: 
 472 02fe 0846     	    mov r0,r1 
 473 0300 BFE0     	    b token_exit 
 474              	binary_nbr:
 475 0302 86EA0606 	    eor r6,r6 
 476 0306 18F80300 	    ldrb r0,[t1,r3]
 477 030a 03F10103 	    add r3,#1
 478 030e 00B500F0 	    _CALL is_bit 
 478      70F95DF8 
 478      04EB
 479 0318 00D0     	    beq 1f 
 480 031a C5E1     	    b syntax_error 
 481 031c 4FEA4606 	1:  lsl r6,#1
 482 0320 46EA0006 	    orr r6,r0 
 483 0324 18F80300 	    ldrb r0,[T1,r3]
 484 0328 03F10103 	    add r3,#1 
 485 032c 00B500F0 	    _CALL is_bit 
 485      61F95DF8 
 485      04EB
 486 0336 F1D0     	    beq 1b 
 487 0338 A3F10103 	    sub r3,#1 
 488 033c 4FF00F00 	    mov r0,#TK_INTGR
 489 0340 3146     	    mov r1,r6 
 490 0342 09F8010B 	    strb r0,[T2],#1 
 491 0346 49F8041B 	    str r1,[T2],#4 
 492 034a 9AE0     	    b token_exit 
ARM GAS  tinyBasic.s 			page 21


 493              	hex_nbr:
 494 034c 86EA0606 	    eor r6,r6 
 495 0350 18F80300 	    ldrb r0,[T1,r3]
 496 0354 03F10103 	    add r3,#1 
 497 0358 00B500F0 	    _CALL is_hex 
 497      39F95DF8 
 497      04EB
 498 0362 00D0     	    beq 1f 
 499 0364 A0E1     	    b syntax_error 
 500 0366 4FEA0616 	1:  lsl r6,#4 
 501 036a 0644     	    add r6,r0 
 502 036c 18F80300 	    ldrb r0,[T1,r3]
 503 0370 03F10103 	    add r3,#1
 504 0374 00B500F0 	    _CALL is_hex 
 504      2BF95DF8 
 504      04EB
 505 037e F2D0     	    beq 1b 
 506 0380 A3F10103 	    sub r3,#1
 507 0384 4FF00F00 	    mov r0,#TK_INTGR
 508 0388 3146     	    mov r1,r6 
 509 038a 09F8010B 	    strb r0,[T2],#1 
 510 038e 49F8041B 	    str r1,[T2],#4 
 511 0392 76E0     	    b token_exit 
 512              	lt:
 513 0394 4FF03401 	    mov r1,#TK_LT 
 514 0398 18F80300 	    ldrb r0,[T1,r3]
 515 039c 3E28     	    cmp r0,#'>'
 516 039e 0BD1     	    bne 1f
 517 03a0 01F10101 	    add r1,#1 
 518 03a4 0CE0     	    b 2f 
 519              	gt: 
 520 03a6 4FF03101 	    mov r1,#TK_GT 
 521 03aa 18F80300 	    ldrb r0,[T1,r3]
 522 03ae 3C28     	    cmp r0,#'<'
 523 03b0 02D1     	    bne 1f  
 524 03b2 01F10101 	    add r1,#1 
 525 03b6 03E0     	    b 2f 
 526 03b8 3D28     	1:  cmp r0,#'=' 
 527 03ba 03D1     	    bne 3f   
 528 03bc 01F10201 	    add r1,#2
 529 03c0 03F10103 	2:  add r3,#1 
 530 03c4 09F8011B 	3:  strb r1,[T2],#1
 531 03c8 5BE0     	    b token_exit 
 532              	bkslash:
 533 03ca 18F80310 	    ldrb r1,[T1,r3]
 534 03ce 03F10103 	    add r3,#1
 535 03d2 4FF00300 	    mov r0,#TK_CHAR 
 536 03d6 54E0     	    b token_exit 
 537              	prt_cmd: 
 538 03d8 4FF00B00 	    mov r0,#TK_CMD 
 539 03dc 4FF03A01 	    mov r1,#PRT_IDX 
 540 03e0 4FE0     	    b token_exit 
 541              	quote:
 542 03e2 00B500F0 	   _CALL parse_quote
 542      A2F85DF8 
 542      04EB
 543 03ec 49E0     	   b token_exit
ARM GAS  tinyBasic.s 			page 22


 544              	tick: 
 545 03ee 4846     	   mov r0,T2 
 546 03f0 08EB0301 	   add r1,T1,r3 
 547 03f4 00B5FFF7 	   _CALL strlen 
 547      FEFF5DF8 
 547      04EB
 548 03fe 0246     	   mov r2,r0 
 549 0400 4846     	   mov r0,T2 
 550 0402 04B4     	   push {r2} 
 551 0404 00B5FFF7 	   _CALL cmove 
 551      FEFF5DF8 
 551      04EB
 552 040e 04BC     	   pop {r2}
 553 0410 02F10102 	   add r2,#1
 554 0414 1344     	   add r3,r2 
 555 0416 9144     	   add T2,r2 
 556 0418 4FF00B00 	   mov r0,#TK_CMD 
 557 041c 4FF04701 	   mov r1,#REM_IDX 
 558 0420 2FE0     	   b token_exit  
 559              	
 560              	try_other:
 561 0422 00B500F0 	    _CALL is_digit 
 561      C8F85DF8 
 561      04EB
 562 042c 0ED0     	    beq decimal_nbr 
 563 042e 00B500F0 	    _CALL is_alpha 
 563      EEF85DF8 
 563      04EB
 564 0438 01B9     	    cbnz r1,1f 
 565 043a 35E1     	    b syntax_error 
 566 043c 00B500F0 	1:  _CALL parse_keyword 
 566      0BF95DF8 
 566      04EB
 567 0446 4729     	    cmp r1,#REM_IDX 
 568 0448 D1D0     	    beq tick  
 569 044a 1AE0     	    b token_exit 
 570              	decimal_nbr:
 571 044c 4FF00A02 	    mov r2,#10 
 572 0450 86EA0606 	    eor r6,r6 
 573 0454 06FB02F6 	1:  mul r6,r6,r2 
 574 0458 0644     	    add r6,r0 
 575 045a 18F80300 	    ldrb r0,[T1,r3]
 576 045e 03F10103 	    add r3,#1 
 577 0462 00B500F0 	    _CALL is_digit 
 577      A8F85DF8 
 577      04EB
 578 046c F2D0     	    beq 1b 
 579 046e A3F10103 	    sub r3,#1 
 580 0472 4FF00F00 	    mov r0,#TK_INTGR 
 581 0476 3146     	    mov r1,r6 
 582 0478 09F8010B 	    strb r0,[T2],#1
 583 047c 49F8041B 	    str  r1,[T2],#4
 584 0480 FFE7     	    b token_exit 
 585              	token_exit:
 586 0482 40BC     	  pop {r6}
 587 0484 7047     	   _RET 
 588              	
ARM GAS  tinyBasic.s 			page 23


 589              	char_list:
 590 0486 202C4028 	  .asciz " ,@():#-+*/%=<>\\?'\"$&"
 590      293A232D 
 590      2B2A2F25 
 590      3D3C3E5C 
 590      3F272224 
 591              	
 592              	tok_single:
 593 049c 00090607 	  .byte TK_NONE,TK_COMMA,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON,TK_SHARP
 593      08010A
 594 04a3 11102021 	  .byte TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 594      2232
 595              	  
 596              	token_ofs:
 597 04a9 00000000 	  .word  0 // not found
 598              	  // TK_COMMA...TK_EQUAL , 13 
 599 04ad 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 599      01000000 
 599      01000000 
 599      01000000 
 600 04bd 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 600      01000000 
 600      01000000 
 600      01000000 
 601 04cd 01000000 	  .word  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2     
 601      01000000 
 601      01000000 
 601      01000000 
 602 04dd 01000000 	  .word  (single-tok_idx0)/2 // TK_EQUAL 
 603              	  // '<'|'>'
 604 04e1 4C000000 	  .word  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 604      55000000 
 605              	  // '\'
 606 04e9 67000000 	  .word  (bkslash-tok_idx0)/2
 607              	  // '?' 
 608 04ed 6E000000 	  .word  (prt_cmd-tok_idx0)/2 
 609              	  // "'" tick 
 610 04f1 79000000 	  .word  (tick-tok_idx0)/2 
 611              	  // '"' quote 
 612 04f5 73000000 	  .word (quote-tok_idx0)/2
 613              	  // '$' hex_nbr  
 614 04f9 28000000 	  .word  (hex_nbr-tok_idx0)/2
 615              	  // '&' binary_nbr 
 616 04fd 03000000 	  .word  (binary_nbr-tok_idx0)/2 
 617              	
 618              	  
 619              	
 620              	/****************************
 621              	    is_other 
 622              	    check for non alphanum
 623              	    input:
 624              	      r0    character to scan 
 625              	    output:
 626              	      r1    0 || index 
 627              	    use: 
 628              	      r2    scan index 
 629              	      r3    char_list 
ARM GAS  tinyBasic.s 			page 24


 630              	*****************************/
 631 0501 0000BF   	    _FUNC is_special 
 632 0504 0CB4     	    push {r2,r3}
 633 0506 4FF00102 	    mov r2,#1
 634 050a DFF8E034 	    ldr r3,=char_list 
 635 050e 995C     	1:  ldrb r1,[r3,r2]
 636 0510 51B1     	    cbz r1,9f 
 637 0512 8842     	    cmp r0,r1 
 638 0514 02D0     	    beq 8f 
 639 0516 02F10102 	    add r2,#1 
 640 051a F8E7     	    b 1b
 641 051c 1146     	8:  mov r1,r2
 642 051e 3C29     	    cmp r1,#'<'
 643 0520 02D5     	    bpl 9f 
 644 0522 DFF8CC24 	    ldr r2,=tok_single 
 645 0526 5158     	    ldr r1,[r2,r1]
 646 0528 0CBC     	9:  pop {r2,r3}
 647 052a 7047     	    _RET 
 648              	
 649              	
 650              	/*********************************************
 651              	    parse_quote 
 652              	    parse quoted string 
 653              	    input: 
 654              	      r3 		tib index  
 655              	      T1    tib adr
 656              	      T2    insert point in pad  
 657              	    output:
 658              	      r0     token attribute 
 659              	      r1 		token value
 660              	      r3     tib index updated    
 661              	      T2     updated 
 662              	      use:
 663              	*********************************************/
 664              	    _FUNC parse_quote
 665 052c 09F10109 	    add T2,#1
 666 0530 4DF8049D 	    push {T2} 
 667 0534 18F80300 	1:  ldrb r0,[T1,r3]
 668 0538 03F10103 	    add r3,#1 
 669 053c 2228     	    cmp r0,#'"'
 670 053e 0AD0     	    beq 9f 
 671 0540 5C28     	    cmp r0,#'\\'
 672 0542 05D1     	    bne 2f 
 673 0544 00B500F0 	    _CALL get_escaped_char 
 673      0DF85DF8 
 673      04EB
 674 054e F1E7     	    b 1b 
 675 0550 09F8010B 	2:  strb r0,[T2],#1
 676 0554 EEE7     	    b 1b 
 677 0556 4FF00200 	9:  mov r0,#TK_QSTR
 678 055a 02BC     	    pop {r1}
 679 055c 01F8010C 	    strb r0,[r1,#-1]
 680 0560 7047     	    _RET 
 681              	
 682              	/**********************************************
 683              	    get_escaped_char 
 684              	    convert "\c" in quoted string 
ARM GAS  tinyBasic.s 			page 25


 685              	    input:
 686              	      r0 
 687              	      r3   index 
 688              	      T1   tib 
 689              	      T2   pad 
 690              	    output:
 691              	      r3   updated 
 692              	      T1   updated 
 693              	      T2   updated 
 694              	**********************************************/
 695 0562 00BF     	    _FUNC get_escaped_char 
 696 0564 18F80300 	    ldrb r0,[T1,r3]
 697 0568 03F10103 	    add r3,#1
 698 056c 2228     	    cmp r0,#'"' 
 699 056e 02D1     	    bne 1f 
 700 0570 09F8010B 	    strb r0,[T2],#1
 701 0574 0BE0     	    b 9f 
 702 0576 DFF87C14 	1:  ldr r1,=escaped 
 703 057a 11F8012B 	2:  ldrb r2,[r1],#1
 704 057e 22B1     	    cbz r2,8f 
 705 0580 8242     	    cmp r2,r0 
 706 0582 00D0     	    beq 7f 
 707 0584 F9E7     	    b 2b
 708 0586 02F10700 	7:  add r0,r2,#7
 709 058a 09F8010B 	8:  strb r0,[T2],#1    
 710              	9:     
 711 058e 7047     	    _RET
 712              	
 713 0590 6162746E 	escaped: .asciz "abtnvfr"
 713      76667200 
 714              	
 715              	/*********************************************
 716              	   skip character in TIB 
 717              	   input:
 718              	      r0    character to skip 
 719              	      r3    tib index 
 720              	      T1    tib adr
 721              	    output: 
 722              	      r3    updated 
 723              	**********************************************/   
 724              	    _FUNC skip 
 725 0598 18F80310 	1:  ldrb r1,[T1,r3]
 726 059c 03F10103 	    add r3,#1
 727 05a0 8142     	    cmp r1,r0
 728 05a2 F9D0     	    beq 1b 
 729 05a4 2360     	    str r3,[UPP,#IN_SAVED]
 730 05a6 7047     	    _RET
 731              	
 732              	/********************************************
 733              	    upper
 734              	    convert character in upper case 
 735              	    input: 
 736              	      r0   character 
 737              	    output:
 738              	      r0   upper case character 
 739              	*********************************************/
 740              	    _FUNC upper 
ARM GAS  tinyBasic.s 			page 26


 741 05a8 6128     	    cmp r0,#'a' 
 742 05aa 03DB     	    blt 9f 
 743 05ac 7A28     	    cmp r0,#'z' 
 744 05ae 01DC     	    bgt 9f 
 745 05b0 00F05F00 	    and r0,#0x5f 
 746 05b4 7047     	9:  _RET 
 747              	
 748              	/***************************************
 749              	   is_digit 
 750              	   check if char is decimal digit.
 751              	   convert to decimal digit.
 752              	   input:
 753              	      r0    char 
 754              	   output:
 755              	      r0    if Z then converted digit 
 756              	      Z     0 true | 1 false  
 757              	***************************************/
 758 05b6 00BF     	    _FUNC is_digit 
 759 05b8 02B4     	    push {r1} 
 760 05ba 81EA0101 	    eor r1,r1 
 761 05be 3038     	    subs r0,#'0' 
 762 05c0 03DB     	    blt 9f
 763 05c2 3A28     	    cmp r0,'9'+1
 764 05c4 01D4     	    bmi 9f 
 765 05c6 4FF0FF31 	    mov r1,#-1 
 766              	9:   
 767 05ca 0940     	    ands r1,r1
 768 05cc 02BC     	    pop {r1} 
 769 05ce 7047     	    _RET 
 770              	
 771              	/***************************************
 772              	    is_hex 
 773              	    check for hexadecimal digit 
 774              	    convert to hex digit.
 775              	    input:
 776              	      r0    
 777              	    output:
 778              	      r0     if Z then converted digit 
 779              	      Z      0 true | 1 false         
 780              	***************************************/
 781              	    _FUNC is_hex 
 782 05d0 02B4     	    push {r1}
 783 05d2 4FF0FF31 	    mov r1,#-1 
 784 05d6 4128     	    cmp r0,#'A' 
 785 05d8 01D4     	    bmi 1f 
 786 05da A0F10700 	    sub r0,#7 
 787 05de A0F13000 	1:  sub r0,#'0'
 788 05e2 01D4     	    bmi 2f 
 789 05e4 1028     	    cmp r0,#16
 790 05e6 01D4     	    bmi 9f 
 791 05e8 81EA0101 	2:  eor r1,r1  
 792 05ec 0940     	9:  ands r1,r1 
 793 05ee 02BC     	    pop {r1}
 794 05f0 7047     	    _RET 
 795              	
 796              	/***************************************
 797              	    is_bit 
ARM GAS  tinyBasic.s 			page 27


 798              	    check if char is '0'|'1' 
 799              	    convert to binary digit. 
 800              	    input:
 801              	      r0    
 802              	    output:
 803              	      r0     if Z then converted digit 
 804              	      Z      0 true | 1 false         
 805              	***************************************/
 806 05f2 00BF     	    _FUNC is_bit
 807 05f4 02B4     	    push  {r1}
 808 05f6 4FF0FF31 	    mov r1,#-1 
 809 05fa A0F13000 	    sub r0,#'0' 
 810 05fe 01D4     	    bmi 2f 
 811 0600 0229     	    cmp r1,#2
 812 0602 01D4     	    bmi 9f 
 813 0604 81EA0101 	2:  eor r1,r1 
 814 0608 0940     	9:  ands r1,r1 
 815 060a 02BC     	    pop {r1}
 816 060c 7047     	    _RET 
 817              	
 818              	/***************************************
 819              	    is_alpha 
 820              	    check if character is {A..Z} 
 821              	  input:
 822              	    r0   character 
 823              	  output: 
 824              	    r0    same character 
 825              	    Z    0 true | 1 false  
 826              	****************************************/
 827 060e 00BF     	    _FUNC is_alpha
 828 0610 02B4     	    push {r1} 
 829 0612 4FF0FF31 	    mov r1,#-1 
 830 0616 4128     	    cmp r0,#'A' 
 831 0618 01DB     	    blt 8f 
 832 061a 5B28     	    cmp r0,#'Z'+1 
 833 061c 01D4     	    bmi 9f 
 834 061e 81EA0101 	8:  eor r1,r1  
 835 0622 0940     	9:  ands r1,r1 
 836 0624 02BC     	    pop {r1}
 837 0626 7047     	    _RET 
 838              	
 839              	/***************************************
 840              	    is_num 
 841              	    check if character is {0..9} 
 842              	  input:
 843              	    r0   character 
 844              	  output: 
 845              	    r0    same character 
 846              	    Z    0 true | 1 false  
 847              	****************************************/
 848              	    _FUNC is_num 
 849 0628 02B4     	    push {r1} 
 850 062a 4FF0FF31 	    mov r1,#-1 
 851 062e 3028     	    cmp r0,#'0' 
 852 0630 01DB     	    blt 8f 
 853 0632 3A28     	    cmp r0,#'9'+1 
 854 0634 01D4     	    bmi 9f 
ARM GAS  tinyBasic.s 			page 28


 855 0636 81EA0101 	8:  eor r1,r1  
 856 063a 0940     	9:  ands r1,r1 
 857 063c 02BC     	    pop {r1}
 858 063e 7047     	    _RET 
 859              	
 860              	/*****************************************
 861              	    is_alnum 
 862              	    check if character is alphanumeric 
 863              	    input:
 864              	      r0 
 865              	    output:
 866              	      r0     same 
 867              	      Z      1 false | 0 true 
 868              	*****************************************/
 869              	    _FUNC is_alnum 
 870 0640 00B5FFF7 	    _CALL is_alpha 
 870      E5FF5DF8 
 870      04EB
 871 064a 04D0     	    beq 9f 
 872 064c 00B5FFF7 	    _CALL is_num 
 872      EBFF5DF8 
 872      04EB
 873 0656 7047     	9:  _RET 
 874              	
 875              	
 876              	/*****************************************
 877              	    parse_word 
 878              	    parse work and ckeck if in dictionary 
 879              	    input:
 880              	      r0    first character 
 881              	      r3    tib index 
 882              	      t1    tib 
 883              	      t2    pad 
 884              	    output:
 885              	      r3    updated 
 886              	      t1    updated 
 887              	      t2    updated   
 888              	    use:
 889              	    
 890              	*****************************************/
 891              	    _FUNC parse_keyword 
 892 0658 4DF8049D 	    push {T2}
 893 065c 09F8010B 	    strb r0,[T2],#1
 894 0660 18F80300 	1:  ldrb r0,[T1,r3]
 895 0664 03F10103 	    add r3,#1
 896 0668 00B5FFF7 	    _CALL is_alnum
 896      E9FF5DF8 
 896      04EB
 897 0672 02D1     	    bne 2f 
 898 0674 09F8010B 	    strb r0,[T2],#1
 899 0678 F2E7     	    b 1b 
 900 067a A3F10103 	2:  sub r3,#1
 901 067e 80EA0000 	    eor r0,r0 
 902 0682 89F80000 	    strb r0,[T2] 
 903 0686 0098     	    ldr r0,[sp]
 904 0688 DB49     	    ldr r1,=kword_dict  
 905 068a 00B500F0 	    _CALL search_dict 
ARM GAS  tinyBasic.s 			page 29


 905      48F85DF8 
 905      04EB
 906 0694 00B9     	    cbnz r0,9f 
 907 0696 07E0     	    b syntax_error 
 908 0698 5DF8049B 	9:  pop {T2}
 909 069c 09F8010B 	    strb r0,[T2],#1
 910 06a0 09F8011B 	    strb r1,[T2],#1
 911 06a4 7047     	    _RET 
 912              	
 913              	
 914              	/**********************************
 915              	      BASIC commands 
 916              	**********************************/
 917              	
 918              	/*********************************
 919              	    syntax_error 
 920              	    display syntax error message and 
 921              	    abort program 
 922              	  input:
 923              	    none  
 924              	  output: 
 925              	    none 
 926              	  use:
 927              	*********************************/
 928 06a6 00BF     	    _FUNC syntax_error 
 929 06a8 4FF00200 	    mov r0,#ERR_SYNTAX
 930 06ac 00E0     	    b tb_error 
 931              	
 932              	/*********************************
 933              	    tb_error 
 934              	    display BASIC error and 
 935              	    abort program. 
 936              	  input:
 937              	    r0    error code   
 938              	  output: 
 939              	    none 
 940              	  use:
 941              	    r1    temp 
 942              	*********************************/
 943 06ae 00BF     	    _FUNC tb_error 
 944 06b0 D249     	    ldr r1,=err_msg 
 945 06b2 4FEA8000 	    lsl r0,#2 
 946 06b6 0844     	    add r0,r1 
 947 06b8 0068     	    ldr r0,[r0]
 948 06ba 00B5FFF7 	    _CALL uart_puts
 948      FEFF5DF8 
 948      04EB
 949 06c4 5748     	    ldr r0,dstack_empty
 950 06c6 8546     	    mov sp,r0 
 951 06c8 86E1     	    b  warm_start  
 952 06ca 7047     	    _RET 
 953              	err_msg:
 954 06cc 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 954      00000000 
 954      0D000000 
 954      1B000000 
 954      34000000 
ARM GAS  tinyBasic.s 			page 30


 955 06e4 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 955      6F000000 
 955      89000000 
 955      9A000000 
 955      AB000000 
 956 06f8 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 956      EA000000 
 956      FA000000 
 956      0E010000 
 956      21010000 
 957              	
 958              	    .section .rodata.tb_error 
 959              	
 960 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 960      72792066 
 960      756C6C0A 
 960      00
 961 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 961      61782065 
 961      72726F72 
 961      0A00
 962 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 962      206F7065 
 962      72617469 
 962      6F6E206F 
 962      76657266 
 963 0034 64697669 	err_div0: .asciz "division by 0\n" 
 963      73696F6E 
 963      20627920 
 963      300A00
 964 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 964      6C696420 
 964      6C696E65 
 964      206E756D 
 964      6265722E 
 965 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 965      74696D65 
 965      206F6E6C 
 965      79207573 
 965      6167652E 
 966 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 966      616E6420 
 966      6C696E65 
 966      206F6E6C 
 966      79207573 
 967 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 967      69636174 
 967      65206E61 
 967      6D652E0A 
 967      00
 968 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 968      206E6F74 
 968      20666F75 
 968      6E642E0A 
 968      00
 969 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 969      76616C75 
ARM GAS  tinyBasic.s 			page 31


 969      652E0A00 
 970 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 970      20696E20 
 970      65787465 
 970      6E646564 
 970      206D656D 
 971 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 971      61746120 
 971      666F756E 
 971      642E0A00 
 972 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 972      726F6772 
 972      616D2069 
 972      6E205241 
 972      4D210A00 
 973 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 973      20737973 
 973      74656D20 
 973      66756C6C 
 973      2E0A00
 974 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 974      65722066 
 974      756C6C0A 
 974      00
 975              	
 976 012e 0A72756E 	rt_msg: .asciz "\nrun time error, "
 976      2074696D 
 976      65206572 
 976      726F722C 
 976      2000
 977 0140 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 977      70696C65 
 977      20657272 
 977      6F722C20 
 977      00
 978 0151 6C617374 	tk_id: .asciz "last token id: "
 978      20746F6B 
 978      656E2069 
 978      643A2000 
 979              	
 980              	
 981              	    .section  .text , "ax", %progbits 
 982              	
 983              	/*********************************
 984              	     arg_list 
 985              	     extract command arguments
 986              	     and push them on parameter stack 
 987              	    input:
 988              	       none 
 989              	    output:
 990              	       r0  arguments count found
 991              	       args on dstack in order left to right 
 992              	    use:
 993              	       T1   arguments counter  
 994              	********************************/
 995              	     _FUNC arg_list 
 996 070c 4DF8048D 	     push {T1}
ARM GAS  tinyBasic.s 			page 32


 997              	
 998 0710 5DF8048B 	     pop {T1}      
 999 0714 7047     	     _RET 
 1000              	
 1001              	/************************************
 1002              	    func_args 
 1003              	    get and stack function parameters
 1004              	  input:
 1005              	    none 
 1006              	  output:
 1007              	    r0    parameter count 
 1008              	  use:
 1009              	
 1010              	************************************/
 1011 0716 00BF     	    _FUNC func_args 
 1012              	
 1013              	  
 1014 0718 7047     	    _RET 
 1015              	
 1016              	
 1017              	
 1018              	
 1019              	/*********************************
 1020              	   BASIC: BTGL adr, mask   
 1021              	   toggle bits [adr]=[adr]^mask  
 1022              	   input:
 1023              	     r0    adr 
 1024              	     r1    mask 
 1025              	    output;
 1026              	      none 
 1027              	    use:
 1028              	      T1   temp
 1029              	      T2   temp  
 1030              	*******************************/     
 1031 071a 00BF     	    _FUNC BTGL 
 1032              	
 1033 071c 7047     	    _RET 
 1034              	
 1035              	
 1036              	
 1037              	
 1038              	//---------------------------------
 1039              	// dictionary search 
 1040              	// input:
 1041              	//	 r0   target name
 1042              	//   r1		dictionary first name field address  
 1043              	// output:
 1044              	//  r0 		token attribute 
 1045              	//  r1		cmd_index if r0!=TK_NONE  
 1046              	// use:
 1047              	//  r2   length dictionary name 
 1048              	//---------------------------------
 1049 071e 00BF     	  _FUNC search_dict
 1050 0720 04B4     	  push {r2}
 1051 0722 03B4     	  push {r0,r1}
 1052              	1:
 1053 0724 11F8010B 	  ldrb r0,[r1],#1 
ARM GAS  tinyBasic.s 			page 33


 1054 0728 0043     	  orrs r0,r0
 1055 072a 10D0     	  beq 9f // null byte  -> end of dictinary 
 1056 072c 0098     	  ldr r0,[sp]  
 1057 072e 00B5FFF7 	  _CALL strcmp 
 1057      92FC5DF8 
 1057      04EB
 1058 0738 04D0     	  beq 2f 
 1059 073a 0199     	  ldr r1,[sp,#4]
 1060 073c 51F80C1C 	  ldr r1,[r1,#-12]
 1061 0740 0191     	  str r1,[sp,#4]
 1062 0742 EFE7     	  b 1b   
 1063              	2: // found
 1064 0744 0199     	  ldr r1,[sp,#4]
 1065 0746 11F8040C 	  ldrb r0,[r1,#-4] // token attribute 
 1066 074a 51F8081C 	  ldr r1,[r1,#-8]  // command index 
 1067 074e 02B0     	9: add sp,#8  // drop pushed r0,r1
 1068 0750 04BC     	   pop {r2}
 1069 0752 7047     	   _RET 
 1070              	
 1071              	/************************************
 1072              	    print firmware version 
 1073              	    input: 
 1074              	      none 
 1075              	    output:
 1076              	      none 
 1077              	    use:
 1078              	      r0 
 1079              	***********************************/
 1080              	    _FUNC prt_version 
 1081 0754 AA48     	    ldr r0,=version_msg 
 1082 0756 00B5FFF7 	    _CALL uart_puts
 1082      FEFF5DF8 
 1082      04EB
 1083 0760 9FF87600 	    ldrb r0,version 
 1084 0764 4FEA1010 	    lsr r0,#4 
 1085 0768 00F13000 	    add r0,#'0' 
 1086 076c 3A28     	    cmp r0,#'9'+1 
 1087 076e 01D4     	    bmi 1f 
 1088 0770 00F10700 	    add r0,#7 
 1089              	  1:
 1090 0774 00B5FFF7 	    _CALL uart_putc 
 1090      FEFF5DF8 
 1090      04EB
 1091 077e 4FF02E00 	    mov r0,#'. 
 1092 0782 00B5FFF7 	    _CALL uart_putc 
 1092      FEFF5DF8 
 1092      04EB
 1093 078c 9FF84A00 	    ldrb r0,version 
 1094 0790 00F00F00 	    and r0,#15 
 1095 0794 00F13000 	    add r0,'0' 
 1096 0798 3A28     	    cmp r0,#'9'+1 
 1097 079a 01D4     	    bmi 1f 
 1098 079c 00F10700 	    add r0,#7
 1099              	  1: 
 1100 07a0 00B5FFF7 	    _CALL uart_putc 
 1100      FEFF5DF8 
 1100      04EB
ARM GAS  tinyBasic.s 			page 34


 1101 07aa 4FF00D00 	    mov r0,#CR 
 1102 07ae 00B5FFF7 	    _CALL uart_putc 
 1102      FEFF5DF8 
 1102      04EB
 1103 07b8 7047     	    _RET  
 1104              	version_msg:
 1105 07ba 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1105      65207069 
 1105      6C6C2074 
 1105      696E7920 
 1105      42415349 
 1106              	version:
 1107 07da 10       	    .byte 0x10 
 1108 07db 00       	    .p2align 2 
 1109              	
 1110              	
 1111              	/*********************************
 1112              	   cold_start 
 1113              	   initialize BASIC interpreter 
 1114              	   input:
 1115              	     none 
 1116              	   output:
 1117              	    none 
 1118              	   use:
 1119              	     r0,r1,r2,r3 
 1120              	*********************************/
 1121              	    _GBL_FUNC cold_start 
 1122 07dc 0FB4     	    push {r0,r1,r2,r3}
 1123              	// initialise parameters stack
 1124 07de DFF844C0 	   ldr DP,dstack_empty     
 1125              	//copy system variables to ram 
 1126 07e2 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1126      C2F20004 
 1127 07ea 0C48     	    ldr r0,src_addr 
 1128 07ec 0C49     	    ldr r1,dest_addr
 1129 07ee 0968     	    ldr r1,[r1] 
 1130 07f0 0C44     	    add UPP,r1 // system variables base address   
 1131 07f2 2146     	    mov r1,UPP 
 1132 07f4 4FF0D002 	    mov r2,#ulast-uzero
 1133 07f8 00B5FFF7 	    _CALL cmove  
 1133      FEFF5DF8 
 1133      04EB
 1134 0802 00B5FFF7 	    _CALL prt_version 
 1134      A6FF5DF8 
 1134      04EB
 1135 080c 0FBC     	    pop {r0,r1,r2,r3}
 1136 080e 7047     	    _RET
 1137 0810 00B500F0 	    _CALL warm_init 
 1137      25F85DF8 
 1137      04EB
 1138 081a 33E0     	    b cmd_line   
 1139              	src_addr:
 1140 081c 00000000 	  .word uzero
 1141              	dest_addr:
 1142 0820 00000000 	  .word vectors_size
 1143              	dstack_empty:
 1144 0824 00000000 	   .word _dstack 
ARM GAS  tinyBasic.s 			page 35


 1145              	
 1146              	/*****************************
 1147              	    clear_vars 
 1148              	    initialize variables to 0
 1149              	  input:
 1150              	    none 
 1151              	  output:
 1152              	    none 
 1153              	  use:
 1154              	    r0,r1,r2 
 1155              	*****************************/
 1156              	    _FUNC clear_vars 
 1157 0828 07B4     	    push {r0,r1,r2}
 1158 082a 80EA0000 	    eor r0,r0 
 1159 082e 04F16001 	    add r1,UPP,#VARS
 1160 0832 4FF01A02 	    mov r2,#26
 1161 0836 41F8040B 	1:  str r0,[r1],#4 
 1162 083a 013A     	    subs r2,#1
 1163 083c FBD1     	    bne 1b  
 1164 083e 07BC     	    pop {r0,r1,r2}
 1165 0840 7047     	    _RET 
 1166              	
 1167              	/*****************************
 1168              	   clear_basic 
 1169              	   reset BASIC text pointers 
 1170              	   and clear variables 
 1171              	*****************************/
 1172 0842 00BF     	    _FUNC clear_basic
 1173 0844 80EA0000 	  	eor r0,r0 
 1174 0848 6060     	    str r0,[UPP,#COUNT]
 1175 084a 2060     	    str r0,[UPP,#IN_SAVED]
 1176 084c 04F1C800 	    add r0,UPP,#FREE_RAM
 1177 0850 2063     	    str r0,[UPP,#TXTBGN]
 1178 0852 6063     	    str r0,[UPP,#TXTEND]
 1179 0854 00B5FFF7 	    _CALL clear_vars 
 1179      E7FF5DF8 
 1179      04EB
 1180 085e 7047     	    _RET  
 1181              	
 1182              	/***********************************
 1183              	   warm_init 
 1184              	   initialize interpreter context 
 1185              	  input:
 1186              	    none
 1187              	  output:
 1188              	    none 
 1189              	  use:
 1190              	    r0 
 1191              	***********************************/
 1192              	warm_init:
 1193 0860 4FF0000A 		mov IN,#0 // BASIC line index 
 1194 0864 4FF0000B 	  mov BPTR,#0 // BASIC line address 
 1195 0868 80EA0000 	  eor r0,r0 
 1196 086c A060     	  str r0,[UPP,#BASICPTR]
 1197 086e 2060     	  str r0,[UPP,#IN_SAVED]
 1198 0870 6060     	  str r0,[UPP,#COUNT]  
 1199 0872 2064     		str r0,[UPP,#FLAGS]
ARM GAS  tinyBasic.s 			page 36


 1200 0874 A063     	  str r0,[UPP,#LOOP_DEPTH] 
 1201 0876 4FF00400 	  mov r0, #DEFAULT_TAB_WIDTH
 1202 087a 6064     	  str r0,[UPP,#TAB_WIDTH]
 1203 087c 4FF00A00 		mov r0,#10 // default base decimal 
 1204 0880 A061     		str r0,[UPP,#BASE]
 1205 0882 7047     	  _RET  
 1206              	
 1207              	
 1208              	/**********************************
 1209              	   cmd_line 
 1210              	   shell command line 
 1211              	   input:
 1212              	      none 
 1213              	   output:
 1214              	      none 
 1215              	   use:
 1216              	
 1217              	***********************************/
 1218              	    _FUNC cmd_line 
 1219 0884 4FF00D00 	    mov r0,#CR 
 1220 0888 00B5FFF7 	    _CALL uart_putc 
 1220      FEFF5DF8 
 1220      04EB
 1221 0892 4F48     	1:  ldr r0,tib
 1222 0894 00B5FFF7 	    _CALL readln 
 1222      FEFF5DF8 
 1222      04EB
 1223 089e 0040     	    ands r0,r0 // empty line 
 1224 08a0 F7D0     	    beq 1b 
 1225 08a2 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1225      C2FC5DF8 
 1225      04EB
 1226 08ac 0040     	    ands r0,r0 
 1227 08ae F0D0     	    beq 1b  // tokens stored in text area 
 1228              	// interpret tokenized line 
 1229              	interpreter:
 1230 08b0 8AF0030A 	   eor IN,#3 
 1231 08b4 D4F808B0 	   ldr BPTR,[UPP,#BASICPTR]
 1232 08b8 6068     	   ldr r0,[UPP,#COUNT]
 1233 08ba 8245     	   cmp IN,r0  
 1234 08bc 16D4     	   bmi interp_loop
 1235              	// end of line reached     
 1236              	next_line:
 1237 08be 206C     	  ldr r0,[UPP,#FLAGS]
 1238 08c0 10F0020F 	  tst r0,#(1<<FRUN)
 1239 08c4 DED0     	  beq cmd_line 
 1240 08c6 D4F800A0 	  ldr IN,[UPP,#IN_SAVED]
 1241 08ca D4F808B0 	  ldr BPTR,[UPP,#BASICPTR]
 1242 08ce 0AEB0B00 	  add r0,IN,BPTR  
 1243 08d2 616B     	  ldr r1,[UPP,#TXTEND]
 1244 08d4 8842     	  cmp r0,r1 
 1245 08d6 05D4     	  bmi 1f 
 1246 08d8 00B500F0 	  _CALL warm_start 
 1246      7DF85DF8 
 1246      04EB
 1247 08e2 CFE7     	  b cmd_line
 1248              	1:
ARM GAS  tinyBasic.s 			page 37


 1249 08e4 4FF0030A 	  mov IN,#3 
 1250 08e8 C4F800A0 	  str IN,[UPP,#IN_SAVED] 
 1251              	interp_loop:
 1252 08ec 00B500F0 	  _CALL next_token 
 1252      19F85DF8 
 1252      04EB
 1253 08f6 0028     	  cmp r0,#TK_NONE 
 1254 08f8 E1D0     	  beq next_line 
 1255 08fa 0B28     	  cmp r0,#TK_CMD 
 1256 08fc 04D1     	  bne 2f
 1257 08fe 4148     	  ldr r0,=fn_table
 1258 0900 50F82100 	  ldr r0,[r0,r1,lsl #2]
 1259 0904 0047     	  bx r0
 1260 0906 F1E7     	  b interp_loop 
 1261              	2: 
 1262 0908 0528     	  cmp r0,#TK_VAR 
 1263 090a 02D1     	  bne 3f 
 1264 090c 00F039BD 	  b let_var 
 1265 0910 ECE7     	  b interp_loop
 1266              	3: 
 1267 0912 0628     	  cmp r0,#TK_ARRAY 
 1268 0914 02D1     	  bne 4f
 1269 0916 00F03EBD 	  b let_array 
 1270 091a E7E7     	  b interp_loop
 1271              	4: 
 1272 091c 0128     	  cmp r0,#TK_COLON
 1273 091e E5D0     	  beq interp_loop
 1274 0920 C2E6     	  b syntax_error
 1275              	
 1276              	/*****************************
 1277              	  next_token 
 1278              	  extract next token from token list 
 1279              	  input:
 1280              	    none 
 1281              	  output:
 1282              	    r0    token attribute
 1283              	    r1    token value if there is one 
 1284              	  use:
 1285              	    none 
 1286              	****************************/
 1287 0922 00BF     	  _FUNC next_token 
 1288 0924 6068     	  ldr r0,[UPP,#COUNT]
 1289 0926 8245     	  cmp IN,r0 
 1290 0928 02D4     	  bmi 0f 
 1291 092a 80EA0000 	  eor r0,r0 
 1292 092e 28E0     	  b 9f  
 1293              	0: 
 1294 0930 C4F800A0 	  str IN,[UPP,#IN_SAVED]
 1295 0934 1BF80A00 	  ldrb r0,[BPTR,IN] // token attribute 
 1296 0938 00F03F00 	  and r0,#0x3f // limit mask 
 1297 093c 08F10108 	  add T1,#1
 1298 0940 3149     	  ldr r1,=tok_jmp 
 1299 0942 D1E800F0 	  tbb [r1,r0]
 1300              	1: // pc reference point 
 1301              	2: // .byte param
 1302 0946 19F80810 	  ldrb r1,[T2,T1]
 1303 094a 08F10108 	  add T1,#1 
ARM GAS  tinyBasic.s 			page 38


 1304 094e 18E0     	  b 9f 
 1305              	3: // .hword param 
 1306 0950 39F80810 	  ldrh r1,[T2,T1]
 1307 0954 08F10208 	  add T1,#2 
 1308 0958 13E0     	  b 9f 
 1309              	4: // .word param  
 1310 095a 59F80810 	  ldr r1,[T2,T1]
 1311 095e 08F10408 	  add T1,#4
 1312 0962 0EE0     	  b 9f 
 1313              	5: // .asciz param 
 1314 0964 09EB0801 	  add r1,T2,T1
 1315 0968 0846     	  mov r0,r1  
 1316 096a 00B5FFF7 	  _CALL strlen 
 1316      FEFF5DF8 
 1316      04EB
 1317 0974 8044     	  add T1,r0
 1318 0976 08F10108 	  add T1,#1
 1319 097a 4FF00200 	  mov r0,#TK_QSTR
 1320 097e 00E0     	  b 9f  
 1321              	8: // syntax error 
 1322 0980 92E6     	   b syntax_error 
 1323              	9:
 1324 0982 C4F80080 	   str T1,[UPP,#IN_SAVED]
 1325 0986 7047     	  _RET
 1326              	
 1327              	  .p2align 2
 1328              	tok_jmp: // token id  tbb offset 
 1329 0988 1E1E     	  .byte (9b-1b)/2,(9b-1b)/2   // TK_NONE, TK_COLON
 1330 098a 0F000005 	  .byte (5b-1b)/2,(2b-1b)/2,(2b-1b)/2,(3b-1b)/2 // TK_QSTR,TK_CHAR,TK_VAR,TK_ARRAY
 1331 098e 1E1E1E1E 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_LPAREN,TK_RPAREN,TK_COMMA,TK_SHARP 
 1332 0992 00000000 	  .byte (2b-1b)/2,(2b-1b)/2,(2b-1b)/2,(2b-1b)/2 // TK_CMD,TK_IFUNC,TK_CHAR,TK_CONST 
 1333 0996 0A1E1E   	  .byte (4b-1b)/2,(9b-1b)/2,(9b-1b)/2 // TK_INTGR, TK_PLUS,TK_MINUS  
 1334 0999 1D1D1D   	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2 // TK_MULT,TK_DIV,TK_MOD 
 1335              	// the following are not used 
 1336 099c 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2 
 1336      1D
 1337 09a1 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1337      1D1D1D1D 
 1338 09a9 1E1E1E1D 	  .byte (9b-1b)/2,(9b-1b)/2,(9b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1338      1D1D1D1D 
 1339 09b1 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2   
 1339      1D1D1D1D 
 1340 09b9 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1340      1D1D1D1D 
 1341 09c1 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1341      1D1D1D1D 
 1342 09c9 1D1D1D1D 	  .byte (8b-1b)/2,(8b-1b)/2,(8b-1b)/2,(8b-1b)/2
 1343              	
 1344 09cd 0000BF   	  .p2align 2 
 1345              	
 1346 09d0 00000000 	tib: .word _tib 
 1347 09d4 00000000 	pad: .word _pad 
 1348              	
 1349              	/**********************************
 1350              	    warm_start 
 1351              	    start BASIC interpreter without 
 1352              	    reset variables and code space 
ARM GAS  tinyBasic.s 			page 39


 1353              	  input:
 1354              	    none 
 1355              	  output:
 1356              	    none 
 1357              	  use:
 1358              	
 1359              	**********************************/
 1360              	    _FUNC warm_start 
 1361              	// initialise parameters stack
 1362 09d8 5FF8B8C1 	   ldr DP,dstack_empty     
 1363              	
 1364 09dc FCE7     	    b warm_start 
 1365              	
 1366              	/***********************************
 1367              	    get_array_element 
 1368              	    return index of array element 
 1369              	  input:
 1370              	    none 
 1371              	  output:
 1372              	    r0   address of element 
 1373              	  use:
 1374              	
 1375              	************************************/
 1376 09de 00BF     	    _FUNC get_array_element 
 1377              	
 1378 09e0 7047     	    _RET 
 1379              	
 1380 09e2 00BF     	    _FUNC relation 
 1381              	
 1382 09e4 7047     	    _RET 
 1383              	
 1384 09e6 0000     	  .section .rodata 
 1385              	
 1386              	// system variables initial value 
 1387              	uzero:
 1388 0000 00000000 	  .word 0 // IN
 1389 0004 00000000 	  .word 0 // IN_SAVED
 1390 0008 00000000 	  .word 0 // COUNT
 1391 000c 00000000 	  .word 0 // BASICPTR
 1392 0010 00000000 	  .word 0 // DATAPTR
 1393 0014 00000000 	  .word 0 // DATA
 1394 0018 00000000 	  .word 0 // DATALEN
 1395 001c 0A000000 	  .word 10 // BASE
 1396 0020 00000000 	  .word 0 // TICKS
 1397 0024 00000000 	  .word 0 // TIMER
 1398 0028 AA5555AA 	  .word 0xaa5555aa // SEED
 1399 002c 00000000 	  .word FILE_SYSTEM // FSPTR
 1400 0030 00000000 	  .word 0 // FFREE
 1401 0034 00040020 	  .word RAM_ADR+1024 // TXTBGN
 1402 0038 00040020 	  .word RAM_ADR+1024 // TXTEND
 1403 003c 00000000 	  .word 0 //LOOP_DEPTH
 1404 0040 00000000 	  .word 0 // ARRAY_SIZE
 1405 0044 00000000 	  .word 0 // FLAGS
 1406 0048 04000000 	  .word 4 // TAB_WIDTH
 1407 004c 00000000 	  .word 0 // RX_HEAD
 1408 0050 00000000 	  .word 0 // RX_TAIL
 1409 0054 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
ARM GAS  tinyBasic.s 			page 40


 1409      00000000 
 1409      00000000 
 1409      00000000 
 1410 0064 00000000 	  .space VARS_SIZE,0 // VARS
 1410      00000000 
 1410      00000000 
 1410      00000000 
 1410      00000000 
 1411 00cc 00000000 	  .space 4, 0 // padding 
 1412              	ulast:
 1413              	
 1414              	  .section .rodata.dictionary 
 1415              	
 1416              	// keep alphabetic order for BASIC names from Z-A
 1417              	// this sort order is for for WORDS cmd output. 	
 1418              	
 1419              		.equ link, 0
 1420              	kword_end:
 1421 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 1421      00000000 
 1421      00000000 
 1421      00000000 
 1422 0010 0C000000 	  _dict_entry TK_CMD,XTRMT,XTRMT_IDX // xmodem transmit
 1422      64000000 
 1422      0B000000 
 1422      5854524D 
 1422      54000000 
 1423 0024 1C000000 	  _dict_entry TK_CMD,XRCV,XRCV_IDX // xmodem receive
 1423      65000000 
 1423      0B000000 
 1423      58524356 
 1423      00000000 
 1424 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 1424      63000000 
 1424      0C000000 
 1424      584F5200 
 1425 0048 44000000 	  _dict_entry TK_CMD,WRITE,WRITE_IDX //write  
 1425      62000000 
 1425      0B000000 
 1425      57524954 
 1425      45000000 
 1426 005c 54000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 1426      61000000 
 1426      0B000000 
 1426      574F5244 
 1426      53000000 
 1427 0070 68000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 1427      60000000 
 1427      0B000000 
 1427      57414954 
 1427      00000000 
 1428 0084 7C000000 	  _dict_entry TK_IFUNC,USR,USR_IDX //usr
 1428      5F000000 
 1428      0C000000 
 1428      55535200 
 1429 0094 90000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 1429      5E000000 
ARM GAS  tinyBasic.s 			page 41


 1429      0B000000 
 1429      554E5449 
 1429      4C000000 
 1430 00a8 A0000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 1430      5D000000 
 1430      0C000000 
 1430      55464C41 
 1430      53480000 
 1431 00bc B4000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 1431      5C000000 
 1431      0C000000 
 1431      55424F55 
 1431      4E440000 
 1432 00d0 C8000000 	  _dict_entry TK_CMD,TONE,TONE_IDX //tone  
 1432      5B000000 
 1432      0B000000 
 1432      544F4E45 
 1432      00000000 
 1433 00e4 DC000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 1433      5A000000 
 1433      0B000000 
 1433      544F0000 
 1434 00f4 F0000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 1434      58000000 
 1434      0B000000 
 1434      54494D45 
 1434      52000000 
 1435 0108 00010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 1435      59000000 
 1435      0C000000 
 1435      54494D45 
 1435      4F555400 
 1436 011c 14010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 1436      57000000 
 1436      0C000000 
 1436      5449434B 
 1436      53000000 
 1437 0130 28010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 1437      56000000 
 1437      0B000000 
 1437      53544F50 
 1437      00000000 
 1438 0144 3C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 1438      55000000 
 1438      0B000000 
 1438      53544550 
 1438      00000000 
 1439 0158 50010000 	  _dict_entry TK_CMD,SPIWR,SPIWR_IDX //spi_write
 1439      54000000 
 1439      0B000000 
 1439      53504957 
 1439      52000000 
 1440 016c 64010000 	  _dict_entry TK_CMD,SPISEL,SPISEL_IDX //spi_select
 1440      53000000 
 1440      0B000000 
 1440      53504953 
 1440      454C0000 
ARM GAS  tinyBasic.s 			page 42


 1441 0180 78010000 	  _dict_entry TK_IFUNC,SPIRD,SPIRD_IDX // spi_read 
 1441      51000000 
 1441      0C000000 
 1441      53504952 
 1441      44000000 
 1442 0194 8C010000 	  _dict_entry TK_CMD,SPIEN,SPIEN_IDX //spi_enable 
 1442      52000000 
 1442      0B000000 
 1442      53504945 
 1442      4E000000 
 1443 01a8 A0010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 1443      50000000 
 1443      0B000000 
 1443      534C4545 
 1443      50000000 
 1444 01bc B4010000 	  _dict_entry TK_IFUNC,SIZE,SIZE_IDX //size
 1444      4F000000 
 1444      0C000000 
 1444      53495A45 
 1444      00000000 
 1445 01d0 C8010000 	  _dict_entry TK_CMD,SHOW,SHOW_IDX //show 
 1445      4E000000 
 1445      0B000000 
 1445      53484F57 
 1445      00000000 
 1446 01e4 DC010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 1446      4D000000 
 1446      0B000000 
 1446      53415645 
 1446      00000000 
 1447 01f8 F0010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 1447      4C000000 
 1447      0B000000 
 1447      52554E00 
 1448 0208 04020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 1448      4B000000 
 1448      0C000000 
 1448      52534849 
 1448      46540000 
 1449 021c 14020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 1449      4A000000 
 1449      0C000000 
 1449      524E4400 
 1450 022c 28020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 1450      49000000 
 1450      0B000000 
 1450      52455455 
 1450      524E0000 
 1451 0240 38020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 1451      48000000 
 1451      0B000000 
 1451      52455354 
 1451      4F524500 
 1452 0254 4C020000 	  _dict_entry TK_CMD,REMARK,REM_IDX //remark 
 1452      47000000 
 1452      0B000000 
 1452      52454D41 
ARM GAS  tinyBasic.s 			page 43


 1452      524B0000 
 1453 0268 60020000 	  _dict_entry TK_CMD,REBOOT,RBT_IDX //cold_start
 1453      46000000 
 1453      0B000000 
 1453      5245424F 
 1453      4F540000 
 1454 027c 74020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 1454      45000000 
 1454      0C000000 
 1454      52454144 
 1454      00000000 
 1455 0290 88020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey  
 1455      44000000 
 1455      0C000000 
 1455      514B4559 
 1455      00000000 
 1456 02a4 9C020000 	  _dict_entry TK_IFUNC,PRTI,PRTI_IDX //const_porti 
 1456      43000000 
 1456      0C000000 
 1456      50525449 
 1456      00000000 
 1457 02b8 B0020000 	  _dict_entry TK_IFUNC,PRTH,PRTH_IDX //const_porth 
 1457      42000000 
 1457      0C000000 
 1457      50525448 
 1457      00000000 
 1458 02cc C4020000 	  _dict_entry TK_IFUNC,PRTG,PRTG_IDX //const_portg 
 1458      41000000 
 1458      0C000000 
 1458      50525447 
 1458      00000000 
 1459 02e0 D8020000 	  _dict_entry TK_IFUNC,PRTF,PRTF_IDX //const_portf
 1459      40000000 
 1459      0C000000 
 1459      50525446 
 1459      00000000 
 1460 02f4 EC020000 	  _dict_entry TK_IFUNC,PRTE,PRTE_IDX //const_porte
 1460      3F000000 
 1460      0C000000 
 1460      50525445 
 1460      00000000 
 1461 0308 00030000 	  _dict_entry TK_IFUNC,PRTD,PRTD_IDX //const_portd
 1461      3E000000 
 1461      0C000000 
 1461      50525444 
 1461      00000000 
 1462 031c 14030000 	  _dict_entry TK_IFUNC,PRTC,PRTC_IDX //const_portc
 1462      3D000000 
 1462      0C000000 
 1462      50525443 
 1462      00000000 
 1463 0330 28030000 	  _dict_entry TK_IFUNC,PRTB,PRTB_IDX //const_portb
 1463      3C000000 
 1463      0C000000 
 1463      50525442 
 1463      00000000 
 1464 0344 3C030000 	  _dict_entry TK_IFUNC,PRTA,PRTA_IDX //const_porta 
ARM GAS  tinyBasic.s 			page 44


 1464      3B000000 
 1464      0C000000 
 1464      50525441 
 1464      00000000 
 1465 0358 50030000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 1465      3A000000 
 1465      0B000000 
 1465      5052494E 
 1465      54000000 
 1466 036c 64030000 	  _dict_entry TK_IFUNC,POUT,POUT_IDX //const_output
 1466      39000000 
 1466      0C000000 
 1466      504F5554 
 1466      00000000 
 1467 0380 78030000 	  _dict_entry TK_CMD,POKE,POKE_IDX //poke 
 1467      38000000 
 1467      0B000000 
 1467      504F4B45 
 1467      00000000 
 1468 0394 8C030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX //pin_mode 
 1468      35000000 
 1468      0B000000 
 1468      504D4F44 
 1468      45000000 
 1469 03a8 A0030000 	  _dict_entry TK_IFUNC,PINP,PINP_IDX //const_input
 1469      37000000 
 1469      0C000000 
 1469      50494E50 
 1469      00000000 
 1470 03bc B4030000 	  _dict_entry TK_IFUNC,PEEK,PEEK_IDX //peek 
 1470      36000000 
 1470      0C000000 
 1470      5045454B 
 1470      00000000 
 1471 03d0 C8030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 1471      34000000 
 1471      0B000000 
 1471      50415553 
 1471      45000000 
 1472 03e4 DC030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 1472      33000000 
 1472      0C000000 
 1472      50414400 
 1473 03f4 F0030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 1473      32000000 
 1473      0C000000 
 1473      4F520000 
 1474 0404 00040000 	  _dict_entry TK_IFUNC,ODR,ODR_IDX //const_odr 
 1474      31000000 
 1474      0C000000 
 1474      4F445200 
 1475 0414 10040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 1475      30000000 
 1475      0C000000 
 1475      4E4F5400 
 1476 0424 20040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 1476      2E000000 
ARM GAS  tinyBasic.s 			page 45


 1476      0B000000 
 1476      4E455854 
 1476      00000000 
 1477 0438 30040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 1477      2F000000 
 1477      0B000000 
 1477      4E455700 
 1478 0448 44040000 	  _dict_entry TK_IFUNC,MULDIV,MULDIV_IDX //muldiv 
 1478      2D000000 
 1478      0C000000 
 1478      4D554C44 
 1478      49560000 
 1479 045c 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 1479      2C000000 
 1479      0C000000 
 1479      4C534849 
 1479      46540000 
 1480 0470 68040000 	  _dict_entry TK_IFUNC,LOG,LOG_IDX //log2 
 1480      2B000000 
 1480      0C000000 
 1480      4C4F4700 
 1481 0480 7C040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 1481      2A000000 
 1481      0B000000 
 1481      4C4F4144 
 1481      00000000 
 1482 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 1482      29000000 
 1482      0B000000 
 1482      4C495354 
 1482      00000000 
 1483 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 1483      28000000 
 1483      0B000000 
 1483      4C455400 
 1484 04b8 B4040000 	  _dict_entry TK_IFUNC,KEY,KEY_IDX //key 
 1484      27000000 
 1484      0C000000 
 1484      4B455900 
 1485 04c8 C4040000 	  _dict_entry TK_CMD,IWDGREF,IWDGREF_IDX //refresh_iwdg
 1485      26000000 
 1485      0B000000 
 1485      49574447 
 1485      52454600 
 1486 04dc D4040000 	  _dict_entry TK_CMD,IWDGEN,IWDGEN_IDX //enable_iwdg
 1486      25000000 
 1486      0B000000 
 1486      49574447 
 1486      454E0000 
 1487 04f0 E8040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 1487      24000000 
 1487      0C000000 
 1487      494E5645 
 1487      52540000 
 1488 0504 FC040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var  
 1488      23000000 
 1488      0B000000 
ARM GAS  tinyBasic.s 			page 46


 1488      494E5055 
 1488      54000000 
 1489 0518 10050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 1489      22000000 
 1489      0B000000 
 1489      49460000 
 1490 0528 24050000 	  _dict_entry TK_IFUNC,IDR,IDR_IDX //const_idr 
 1490      21000000 
 1490      0C000000 
 1490      49445200 
 1491 0538 34050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 1491      20000000 
 1491      0B000000 
 1491      48455800 
 1492 0548 44050000 	  _dict_entry TK_IFUNC,GPIO,GPIO_IDX //gpio 
 1492      1F000000 
 1492      0C000000 
 1492      4750494F 
 1492      00000000 
 1493 055c 54050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 1493      1E000000 
 1493      0B000000 
 1493      474F544F 
 1493      00000000 
 1494 0570 68050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 1494      1D000000 
 1494      0B000000 
 1494      474F5355 
 1494      42000000 
 1495 0584 7C050000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 1495      1C000000 
 1495      0B000000 
 1495      464F5247 
 1495      45540000 
 1496 0598 90050000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 1496      1B000000 
 1496      0B000000 
 1496      464F5200 
 1497 05a8 A4050000 	  _dict_entry TK_CMD,FCPU,FCPU_IDX //fcpu 
 1497      1A000000 
 1497      0B000000 
 1497      46435055 
 1497      00000000 
 1498 05bc B4050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 1498      18000000 
 1498      0B000000 
 1498      454E4400 
 1499 05cc C8050000 	  _dict_entry TK_IFUNC,EEPROM,EEPROM_IDX //const_eeprom_base   
 1499      19000000 
 1499      0C000000 
 1499      45455052 
 1499      4F4D0000 
 1500 05e0 D8050000 	  _dict_entry TK_CMD,DWRITE,DWRITE_IDX //digital_write
 1500      17000000 
 1500      0B000000 
 1500      44575249 
 1500      54450000 
ARM GAS  tinyBasic.s 			page 47


 1501 05f4 EC050000 	  _dict_entry TK_IFUNC,DREAD,DREAD_IDX //digital_read
 1501      16000000 
 1501      0C000000 
 1501      44524541 
 1501      44000000 
 1502 0608 00060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 1502      15000000 
 1502      0B000000 
 1502      444F0000 
 1503 0618 14060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 1503      14000000 
 1503      0B000000 
 1503      44495200 
 1504 0628 24060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 1504      13000000 
 1504      0B000000 
 1504      44454300 
 1505 0638 34060000 	  _dict_entry TK_IFUNC,DDR,DDR_IDX //const_ddr 
 1505      12000000 
 1505      0C000000 
 1505      44445200 
 1506 0648 44060000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 1506      11000000 
 1506      0B000000 
 1506      44415441 
 1506      4C4E0000 
 1507 065c 54060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 1507      10000000 
 1507      0B000000 
 1507      44415441 
 1507      00000000 
 1508 0670 68060000 	  _dict_entry TK_IFUNC,CRL,CRL_IDX //const_cr1 
 1508      0F000000 
 1508      0C000000 
 1508      43524C00 
 1509 0680 7C060000 	  _dict_entry TK_IFUNC,CRH,CRH_IDX //const_cr2 
 1509      0E000000 
 1509      0C000000 
 1509      43524800 
 1510 0690 8C060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 1510      0D000000 
 1510      0D000000 
 1510      43484152 
 1510      00000000 
 1511 06a4 9C060000 	  _dict_entry TK_CMD,BYE,BYE_IDX //bye 
 1511      0C000000 
 1511      0B000000 
 1511      42594500 
 1512 06b4 B0060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 1512      0B000000 
 1512      0B000000 
 1512      42544F47 
 1512      4C000000 
 1513 06c8 C0060000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 1513      0A000000 
 1513      0C000000 
 1513      42544553 
ARM GAS  tinyBasic.s 			page 48


 1513      54000000 
 1514 06dc D4060000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 1514      09000000 
 1514      0B000000 
 1514      42534554 
 1514      00000000 
 1515 06f0 E8060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 1515      08000000 
 1515      0B000000 
 1515      42524553 
 1515      00000000 
 1516 0704 FC060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 1516      07000000 
 1516      0C000000 
 1516      42495400 
 1517 0714 10070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 1517      06000000 
 1517      0B000000 
 1517      41575500 
 1518 0724 20070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX //autorun
 1518      05000000 
 1518      0B000000 
 1518      4155544F 
 1518      52554E00 
 1519 0738 30070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 1519      04000000 
 1519      0C000000 
 1519      41534300 
 1520 0748 44070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 1520      03000000 
 1520      0C000000 
 1520      414E4400 
 1521 0758 54070000 	  _dict_entry TK_IFUNC,ADCREAD,ADCREAD_IDX //analog_read
 1521      02000000 
 1521      0C000000 
 1521      41444352 
 1521      45414400 
 1522 076c 64070000 	  _dict_entry TK_CMD,ADCON,ADCON_IDX //power_adc 
 1522      01000000 
 1522      0B000000 
 1522      4144434F 
 1522      4E000000 
 1523              	first_link: 
 1524 0780 78070000 	  .word LINK 
 1525 0784 00000000 	  .word ABS_IDX 
 1526 0788 0C       	  .byte TK_IFUNC
 1527              	kword_dict: // first name field 
 1528              	  .equ LINK,. 
 1529 0789 41425300 	  .asciz "ABS" 
 1530 078d 000000   	  .p2align 2 
 1531              	
 1532              	//comands and fonctions address table 	
 1533              	fn_table:
 1534 0790 00000000 		.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask // 0..7
 1534      00000000 
 1534      00000000 
 1534      00000000 
ARM GAS  tinyBasic.s 			page 49


 1534      00000000 
 1535 07b0 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  // 8..15
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1536 07cc 00000000 		.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write //1
 1536      00000000 
 1536      00000000 
 1536      00000000 
 1536      00000000 
 1537 07f0 00000000 		.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio // 24..31 
 1537      00000000 
 1537      00000000 
 1537      00000000 
 1537      00000000 
 1538 0810 00000000 		.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key // 32..39 
 1538      00000000 
 1538      00000000 
 1538      00000000 
 1538      00000000 
 1539 0830 00000000 		.word let,list,load,log2,lshift,muldiv,next,new // 40..47
 1539      00000000 
 1539      00000000 
 1539      00000000 
 1539      00000000 
 1540 0850 00000000 		.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input // 48..55
 1540      00000000 
 1540      00000000 
 1540      00000000 
 1540      00000000 
 1541 0870 00000000 		.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte // 56..6
 1541      00000000 
 1541      00000000 
 1541      00000000 
 1541      00000000 
 1542 0890 00000000 		.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark // 64..71 
 1542      00000000 
 1542      00000000 
 1542      00000000 
 1542      00000000 
 1543 08b0 00000000 		.word restore,return, random,rshift,run,save,show,size // 72..79
 1543      00000000 
 1543      00000000 
 1543      00000000 
 1543      00000000 
 1544 08d0 00000000 		.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  // 80..87
 1544      00000000 
 1544      00000000 
 1544      00000000 
 1544      00000000 
 1545 08f0 00000000 		.word set_timer,timeout,to,tone,ubound,uflash,until,usr // 88..95
 1545      00000000 
 1545      00000000 
 1545      00000000 
 1545      00000000 
 1546 0910 00000000 		.word wait,words,write,bit_xor,transmit,receive // 96..103 
ARM GAS  tinyBasic.s 			page 50


 1546      00000000 
 1546      00000000 
 1546      00000000 
 1546      00000000 
 1547 0928 00000000 		.word 0 
 1548              	
 1549              	/**********************************
 1550              	    BASIC commands and functions 
 1551              	**********************************/
 1552              	
 1553              	/*******************************
 1554              	  BASIC:  ABS expr 
 1555              	  input:
 1556              	    none 
 1557              	  output:
 1558              	    r0    token type 
 1559              	    r1    abs(expr)
 1560              	  use:
 1561              	    none 
 1562              	******************************/
 1563              	    _FUNC abs 
 1564 092c 00B5FFF7 	    _CALL arg_list
 1564      FEFF5DF8 
 1564      04EB
 1565 0936 0128     	    cmp r0,#1 
 1566 0938 01D0     	    beq 1f 
 1567 093a FFF7FEBF 	    b syntax_error 
 1568 093e 5CF8041B 	1:  _POP r1 
 1569 0942 11F0004F 	    tst r1,#(1<<31)
 1570 0946 01D0     	    beq 9f
 1571 0948 C1F10001 	    rsb r1,#0 
 1572 094c 4FF00F00 	9:  mov r0,#TK_INTGR
 1573 0950 7047     	   _RET 
 1574              	
 1575 0952 0000     	    _FUNC power_adc
 1576 0954 7047     	    _RET
 1577              	
 1578 0956 0000     	    _FUNC analog_read
 1579 0958 7047     	    _RET
 1580              	
 1581 095a 0000     	    _FUNC bit_and
 1582 095c 7047     	    _RET
 1583              	
 1584 095e 0000     	    _FUNC ascii
 1585 0960 7047     	    _RET
 1586              	
 1587 0962 0000     	    _FUNC autorun
 1588 0964 7047     	    _RET
 1589              	
 1590 0966 0000     	    _FUNC awu
 1591 0968 7047     	    _RET
 1592              	
 1593 096a 0000     	    _FUNC bitmask
 1594 096c 7047     	    _RET 
 1595              	
 1596              	  
 1597              	  /*********************************
ARM GAS  tinyBasic.s 			page 51


 1598              	   BASIC: BRES adr, mask   
 1599              	   reset bits [adr]= [adr] & ~mask  
 1600              	   input:
 1601              	     none 
 1602              	    output;
 1603              	      none 
 1604              	    use:
 1605              	      T1   temp
 1606              	      T2   temp 
 1607              	*******************************/     
 1608 096e 0000     	  _FUNC bit_reset
 1609 0970 00B5FFF7 	    _CALL arg_list 
 1609      FEFF5DF8 
 1609      04EB
 1610 097a 0228     	    cmp r0,#2 
 1611 097c 01D0     	    beq 1f 
 1612 097e FFF7FEBF 	    b syntax_error 
 1613 0982 5CF8041B 	1:  _POP r1 //mask 
 1614 0986 5CF8040B 	    _POP r0 //address 
 1615 098a D0F80090 	    ldr T2,[r0] 
 1616 098e 81F0FF31 	    eor r1,#-1 // ~mask 
 1617 0992 01EA0901 	    and r1,T2
 1618 0996 0160     	    str r1,[r0]
 1619 0998 00F074BC 	    b interp_loop 
 1620              	
 1621              	
 1622              	/*********************************
 1623              	   BASIC: BSET adr, mask   
 1624              	   reset bits [adr]= [adr] & ~mask  
 1625              	   input:
 1626              	      none 
 1627              	    output;
 1628              	      none 
 1629              	    use:
 1630              	      T1   temp
 1631              	      T2   temp  
 1632              	*******************************/     
 1633              	    _FUNC bit_set
 1634 099c 00B5FFF7 	    _CALL arg_list 
 1634      FEFF5DF8 
 1634      04EB
 1635 09a6 0228     	    cmp r0,#2 
 1636 09a8 01D0     	    beq 1f 
 1637 09aa FFF7FEBF 	    b syntax_error 
 1638 09ae 5CF8041B 	1:  _POP r1 //mask 
 1639 09b2 5CF8040B 	    _POP r0 //address 
 1640 09b6 D0F80090 	    ldr T2,[r0] 
 1641 09ba 41EA0901 	    orr r1,T2
 1642 09be 0160     	    str r1,[r0]
 1643 09c0 00F074BC 	    b interp_loop 
 1644              	
 1645              	  /*********************************
 1646              	   BASIC: BTOGL adr, mask   
 1647              	   reset bits [adr]= [adr] & ~mask  
 1648              	   input:
 1649              	     r0    adr 
 1650              	     r1    mask 
ARM GAS  tinyBasic.s 			page 52


 1651              	    output;
 1652              	      none 
 1653              	    use:
 1654              	      T1   temp
 1655              	      T2   temp  
 1656              	*******************************/     
 1657              	  _FUNC bit_toggle
 1658 09c4 00B5FFF7 	    _CALL arg_list 
 1658      FEFF5DF8 
 1658      04EB
 1659 09ce 0228     	    cmp r0,#2 
 1660 09d0 01D0     	    beq 1f 
 1661 09d2 FFF7FEBF 	    b syntax_error 
 1662 09d6 5CF8041B 	1:  _POP r1 //mask 
 1663 09da 5CF8040B 	    _POP r0 //address 
 1664 09de D0F80090 	    ldr T2,[r0] 
 1665 09e2 81EA0901 	    eor r1,T2
 1666 09e6 0160     	    str r1,[r0]
 1667 09e8 00F074BC 	    b interp_loop 
 1668              	
 1669              	    _FUNC bit_test
 1670 09ec 00F074BC 	    b interp_loop
 1671              	
 1672              	    _FUNC bye
 1673 09f0 00F074BC 	    b interp_loop
 1674              	
 1675              	    _FUNC char
 1676 09f4 00F074BC 	    b interp_loop
 1677              	
 1678              	    _FUNC const_cr2
 1679 09f8 00F074BC 	    b interp_loop 
 1680              	
 1681              	    _FUNC const_cr1
 1682 09fc 00F074BC 	    b interp_loop
 1683              	
 1684              	    _FUNC data
 1685 0a00 00F074BC 	    b interp_loop
 1686              	
 1687              	    _FUNC data_line
 1688 0a04 00F074BC 	    b interp_loop
 1689              	
 1690              	    _FUNC const_ddr
 1691 0a08 00F074BC 	    b interp_loop
 1692              	
 1693              	    _FUNC dec_base
 1694 0a0c 00F074BC 	    b interp_loop
 1695              	
 1696              	    _FUNC directory
 1697 0a10 00F074BC 	    b interp_loop
 1698              	
 1699              	    _FUNC do_loop
 1700 0a14 00F074BC 	    b interp_loop
 1701              	
 1702              	    _FUNC digital_read
 1703 0a18 00F074BC 	    b interp_loop
 1704              	
 1705              	    _FUNC digital_write
ARM GAS  tinyBasic.s 			page 53


 1706 0a1c 00F074BC 	    b interp_loop 
 1707              	
 1708              	    _FUNC cmd_end
 1709 0a20 00F074BC 	    b interp_loop
 1710              	
 1711              	    _FUNC const_eeprom_base
 1712 0a24 00F074BC 	    b interp_loop
 1713              	
 1714              	    _FUNC fcpu
 1715 0a28 00F074BC 	    b interp_loop
 1716              	
 1717              	    _FUNC for
 1718 0a2c 00F074BC 	    b interp_loop
 1719              	
 1720              	    _FUNC forget
 1721 0a30 00F074BC 	    b interp_loop
 1722              	
 1723              	    _FUNC gosub
 1724 0a34 00F074BC 	    b interp_loop
 1725              	
 1726              	    _FUNC goto
 1727 0a38 00F074BC 	    b interp_loop
 1728              	
 1729              	    _FUNC gpio
 1730 0a3c 00F074BC 	    b interp_loop 
 1731              	
 1732              	    _FUNC hex_base
 1733 0a40 00F074BC 	    b interp_loop
 1734              	
 1735              	    _FUNC const_idr
 1736 0a44 00F074BC 	    b interp_loop
 1737              	
 1738              	    _FUNC if
 1739 0a48 00F074BC 	    b interp_loop
 1740              	
 1741              	    _FUNC input_var
 1742 0a4c 00F074BC 	    b interp_loop
 1743              	
 1744              	    _FUNC invert
 1745 0a50 00F074BC 	    b interp_loop
 1746              	
 1747              	    _FUNC enable_iwdg
 1748 0a54 00F074BC 	    b interp_loop
 1749              	
 1750              	    _FUNC refresh_iwdg
 1751 0a58 00F074BC 	    b interp_loop
 1752              	
 1753              	    _FUNC key
 1754 0a5c 00F074BC 	    b interp_loop 
 1755              	
 1756              	/******************************
 1757              	  BASIC: [let] var=expr 
 1758              	         [let] @(expr)=expr
 1759              	  input:
 1760              	    none 
 1761              	  output:
 1762              	    none 
ARM GAS  tinyBasic.s 			page 54


 1763              	  use:
 1764              	
 1765              	****************************/         
 1766              	    _FUNC let
 1767 0a60 00B5FFF7 	    _CALL next_token 
 1767      FEFF5DF8 
 1767      04EB
 1768 0a6a 0528     	    cmp r0,#TK_VAR
 1769 0a6c 03D0     	    beq let_var 
 1770 0a6e 0628     	    cmp r0,#TK_ARRAY 
 1771 0a70 06D0     	    beq let_array 
 1772 0a72 FFF7FEBF 	    b syntax_error 
 1773              	let_var:
 1774 0a76 00B5FFF7 	    _CALL get_array_element
 1774      FEFF5DF8 
 1774      04EB
 1775              	let_array: 
 1776 0a80 4CF8040D 	    _PUSH r0 
 1777 0a84 00B5FFF7 	    _CALL next_token 
 1777      FEFF5DF8 
 1777      04EB
 1778 0a8e 3228     	    cmp r0,#TK_EQUAL 
 1779 0a90 01D0     	    beq 1f 
 1780 0a92 FFF7FEBF 	    b syntax_error 
 1781 0a96 00B5FFF7 	1:  _CALL relation  
 1781      FEFF5DF8 
 1781      04EB
 1782 0aa0 0F28     	    cmp r0,#TK_INTGR
 1783 0aa2 01D0     	    beq 2f 
 1784 0aa4 FFF7FEBF 	    b syntax_error 
 1785 0aa8 5CF8040B 	2:  _POP r0 
 1786 0aac 0160     	    str r1,[r0]
 1787 0aae 4FF00000 	    mov r0,#TK_NONE 
 1788 0ab2 00F074BC 	    b interp_loop 
 1789              	
 1790 0ab6 0000     	    _FUNC list
 1791 0ab8 00F074BC 	    b interp_loop
 1792              	
 1793              	    _FUNC load
 1794 0abc 00F074BC 	    b interp_loop
 1795              	
 1796              	    _FUNC log2
 1797 0ac0 00F074BC 	    b interp_loop
 1798              	
 1799              	    _FUNC lshift
 1800 0ac4 00F074BC 	    b interp_loop
 1801              	
 1802              	    _FUNC muldiv
 1803 0ac8 00F074BC 	    b interp_loop
 1804              	
 1805              	    _FUNC next
 1806 0acc 00F074BC 	    b interp_loop
 1807              	
 1808              	    _FUNC new
 1809 0ad0 00F074BC 	    b interp_loop 
 1810              	
 1811              	    _FUNC func_not
ARM GAS  tinyBasic.s 			page 55


 1812 0ad4 00F074BC 	    b interp_loop
 1813              	
 1814              	    _FUNC const_odr
 1815 0ad8 00F074BC 	    b interp_loop
 1816              	
 1817              	    _FUNC bit_or
 1818 0adc 00F074BC 	    b interp_loop
 1819              	
 1820              	    _FUNC pad_ref
 1821 0ae0 00F074BC 	    b interp_loop
 1822              	
 1823              	    _FUNC pause
 1824 0ae4 00F074BC 	    b interp_loop
 1825              	
 1826              	    _FUNC pin_mode
 1827 0ae8 00F074BC 	    b interp_loop
 1828              	
 1829              	    _FUNC peek
 1830 0aec 00F074BC 	    b interp_loop
 1831              	
 1832              	    _FUNC const_input
 1833 0af0 00F074BC 	    b interp_loop 
 1834              	
 1835              	    _FUNC poke
 1836 0af4 00F074BC 	    b interp_loop
 1837              	
 1838              	    _FUNC const_output
 1839 0af8 00F074BC 	    b interp_loop
 1840              	
 1841              	    _FUNC print
 1842 0afc 00F074BC 	    b interp_loop
 1843              	
 1844              	    _FUNC const_porta
 1845 0b00 00F074BC 	    b interp_loop
 1846              	
 1847              	    _FUNC const_portb
 1848 0b04 00F074BC 	    b interp_loop
 1849              	
 1850              	    _FUNC const_portc
 1851 0b08 00F074BC 	    b interp_loop
 1852              	
 1853              	    _FUNC const_portd
 1854 0b0c 00F074BC 	    b interp_loop
 1855              	
 1856              	    _FUNC const_porte
 1857 0b10 00F074BC 	    b interp_loop 
 1858              	
 1859              	    _FUNC const_portf
 1860 0b14 00F074BC 	    b interp_loop
 1861              	
 1862              	    _FUNC const_portg
 1863 0b18 00F074BC 	    b interp_loop
 1864              	
 1865              	    _FUNC const_porth
 1866 0b1c 00F074BC 	    b interp_loop
 1867              	
 1868              	    _FUNC const_porti
ARM GAS  tinyBasic.s 			page 56


 1869 0b20 00F074BC 	    b interp_loop
 1870              	
 1871              	    _FUNC qkey
 1872 0b24 00F074BC 	    b interp_loop
 1873              	
 1874              	    _FUNC read
 1875 0b28 00F074BC 	    b interp_loop
 1876              	
 1877              	    _FUNC remark
 1878 0b2c 00F074BC 	    b interp_loop 
 1879              	
 1880              	    _FUNC restore
 1881 0b30 00F074BC 	    b interp_loop
 1882              	
 1883              	    _FUNC return
 1884 0b34 00F074BC 	    b interp_loop
 1885              	
 1886              	    _FUNC  random
 1887 0b38 00F074BC 	    b interp_loop
 1888              	
 1889              	    _FUNC rshift
 1890 0b3c 00F074BC 	    b interp_loop
 1891              	
 1892              	    _FUNC run
 1893 0b40 00F074BC 	    b interp_loop
 1894              	
 1895              	    _FUNC save
 1896 0b44 00F074BC 	    b interp_loop
 1897              	
 1898              	    _FUNC show
 1899 0b48 00F074BC 	    b interp_loop
 1900              	
 1901              	    _FUNC size
 1902 0b4c 00F074BC 	    b interp_loop 
 1903              	
 1904              	    _FUNC sleep
 1905 0b50 00F074BC 	    b interp_loop
 1906              	
 1907              	    _FUNC spi_read
 1908 0b54 00F074BC 	    b interp_loop
 1909              	
 1910              	    _FUNC spi_enable
 1911 0b58 00F074BC 	    b interp_loop
 1912              	
 1913              	    _FUNC spi_select
 1914 0b5c 00F074BC 	    b interp_loop
 1915              	
 1916              	    _FUNC spi_write
 1917 0b60 00F074BC 	    b interp_loop
 1918              	
 1919              	    _FUNC step
 1920 0b64 00F074BC 	    b interp_loop
 1921              	
 1922              	    _FUNC stop
 1923 0b68 00F074BC 	    b interp_loop
 1924              	
 1925              	    _FUNC get_ticks
ARM GAS  tinyBasic.s 			page 57


 1926 0b6c 00F074BC 	    b interp_loop 
 1927              	
 1928              	    _FUNC set_timer
 1929 0b70 00F074BC 	    b interp_loop
 1930              	
 1931              	    _FUNC timeout
 1932 0b74 00F074BC 	    b interp_loop
 1933              	
 1934              	    _FUNC to
 1935 0b78 00F074BC 	    b interp_loop
 1936              	
 1937              	    _FUNC tone
 1938 0b7c 00F074BC 	    b interp_loop
 1939              	
 1940              	    _FUNC ubound
 1941 0b80 00F074BC 	    b interp_loop
 1942              	
 1943              	    _FUNC uflash
 1944 0b84 00F074BC 	    b interp_loop
 1945              	
 1946              	    _FUNC until
 1947 0b88 00F074BC 	    b interp_loop
 1948              	
 1949              	    _FUNC usr
 1950 0b8c 00F074BC 	    b interp_loop 
 1951              	
 1952              	    _FUNC wait
 1953 0b90 00F074BC 	    b interp_loop
 1954              	
 1955              	    _FUNC words
 1956 0b94 00F074BC 	    b interp_loop
 1957              	
 1958              	    _FUNC write
 1959 0b98 00F074BC 	    b interp_loop
 1960              	
 1961              	    _FUNC bit_xor
 1962 0b9c 00F074BC 	    b interp_loop
 1963              	
 1964              	    _FUNC transmit
 1965 0ba0 00F074BC 	    b interp_loop
 1966              	
 1967              	    _FUNC receive
 1968 0ba4 00F074BC 	    b interp_loop 
 1969              	
 1970              	
 1971              	/*************************************************
 1972              	   extra FLASH memory not used by Tiny BASIC
 1973              	   is used to save BASIC programs.
 1974              	************************************************/
 1975 0ba8 00000000 	  .p2align 10  // align to 1KB, smallest erasable segment 
 1975      00000000 
 1975      00000000 
 1975      00000000 
 1975      00000000 
 1976              	  .section .fs
 1977              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 58


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  tinyBasic.s 			page 59


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  tinyBasic.s 			page 60


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  tinyBasic.s 			page 61


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  tinyBasic.s 			page 62


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:161    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:162    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:163    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:164    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:165    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:166    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:167    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:169    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:171    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:172    *ABS*:0000000000007fff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ADCON_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADCREAD_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c BYE_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CHAR_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CRH_IDX
       cmd_index.inc:40     *ABS*:000000000000000f CRL_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DATA_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DATALN_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DDR_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DEC_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DIR_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 DO_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 DREAD_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 DWRITE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 END_IDX
ARM GAS  tinyBasic.s 			page 63


       cmd_index.inc:50     *ABS*:0000000000000019 EEPROM_IDX
       cmd_index.inc:51     *ABS*:000000000000001a FCPU_IDX
       cmd_index.inc:52     *ABS*:000000000000001b FOR_IDX
       cmd_index.inc:53     *ABS*:000000000000001c FORGET_IDX
       cmd_index.inc:54     *ABS*:000000000000001d GOSUB_IDX
       cmd_index.inc:55     *ABS*:000000000000001e GOTO_IDX
       cmd_index.inc:56     *ABS*:000000000000001f GPIO_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 HEX_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 IDR_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 IF_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 INPUT_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 INVERT_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 IWDGEN_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 IWDGREF_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 KEY_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 LET_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 LIST_IDX
       cmd_index.inc:67     *ABS*:000000000000002a LOAD_IDX
       cmd_index.inc:68     *ABS*:000000000000002b LOG_IDX
       cmd_index.inc:69     *ABS*:000000000000002c LSHIFT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d MULDIV_IDX
       cmd_index.inc:71     *ABS*:000000000000002e NEXT_IDX
       cmd_index.inc:72     *ABS*:000000000000002f NEW_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 NOT_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 ODR_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 OR_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 PAD_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 PAUSE_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PMODE_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PEEK_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PINP_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 POKE_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 POUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a PRT_IDX
       cmd_index.inc:84     *ABS*:000000000000003b PRTA_IDX
       cmd_index.inc:85     *ABS*:000000000000003c PRTB_IDX
       cmd_index.inc:86     *ABS*:000000000000003d PRTC_IDX
       cmd_index.inc:87     *ABS*:000000000000003e PRTD_IDX
       cmd_index.inc:88     *ABS*:000000000000003f PRTE_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 PRTF_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 PRTG_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 PRTH_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 PRTI_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 QKEY_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 READ_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 RBT_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 REM_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 REST_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 RET_IDX
       cmd_index.inc:99     *ABS*:000000000000004a RND_IDX
       cmd_index.inc:100    *ABS*:000000000000004b RSHIFT_IDX
       cmd_index.inc:101    *ABS*:000000000000004c RUN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d SAVE_IDX
       cmd_index.inc:103    *ABS*:000000000000004e SHOW_IDX
       cmd_index.inc:104    *ABS*:000000000000004f SIZE_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 SLEEP_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 SPIRD_IDX
ARM GAS  tinyBasic.s 			page 64


       cmd_index.inc:107    *ABS*:0000000000000052 SPIEN_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 SPISEL_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 SPIWR_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 STEP_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 STOP_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 TICKS_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 TIMER_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 TMROUT_IDX
       cmd_index.inc:115    *ABS*:000000000000005a TO_IDX
       cmd_index.inc:116    *ABS*:000000000000005b TONE_IDX
       cmd_index.inc:117    *ABS*:000000000000005c UBOUND_IDX
       cmd_index.inc:118    *ABS*:000000000000005d UFLASH_IDX
       cmd_index.inc:119    *ABS*:000000000000005e UNTIL_IDX
       cmd_index.inc:120    *ABS*:000000000000005f USR_IDX
       cmd_index.inc:121    *ABS*:0000000000000060 WAIT_IDX
       cmd_index.inc:122    *ABS*:0000000000000061 WORDS_IDX
       cmd_index.inc:123    *ABS*:0000000000000062 WRITE_IDX
       cmd_index.inc:124    *ABS*:0000000000000063 XOR_IDX
       cmd_index.inc:125    *ABS*:0000000000000064 XTRMT_IDX
       cmd_index.inc:126    *ABS*:0000000000000065 XRCV_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:173    .text:00000000000000c0 tok_msg
         tinyBasic.s:173    .text:00000000000000c0 $d
         tinyBasic.s:173    .text:00000000000000c8 $t
         tinyBasic.s:187    .text:00000000000000c8 prt_row
         tinyBasic.s:223    .text:000000000000012c prt_chars
         tinyBasic.s:249    .text:0000000000000150 dump
         tinyBasic.s:273    .text:000000000000016c search_lineno
         tinyBasic.s:304    .text:000000000000018c delete_line
         tinyBasic.s:329    .text:00000000000001b8 create_gap
         tinyBasic.s:354    .text:00000000000001e0 insert_line
         tinyBasic.s:391    .text:000000000000022c compile
         tinyBasic.s:1346   .text:00000000000009d0 tib
         tinyBasic.s:1347   .text:00000000000009d4 pad
         tinyBasic.s:453    .text:00000000000002bc comp_token
         tinyBasic.s:943    .text:00000000000006b0 tb_error
         tinyBasic.s:585    .text:0000000000000482 token_exit
         tinyBasic.s:724    .text:0000000000000598 skip
         tinyBasic.s:740    .text:00000000000005a8 upper
         tinyBasic.s:631    .text:0000000000000504 is_special
         tinyBasic.s:596    .text:00000000000004a9 token_ofs
         tinyBasic.s:467    .text:00000000000002fc tok_idx0
         tinyBasic.s:560    .text:0000000000000422 try_other
         tinyBasic.s:471    .text:00000000000002fe single
         tinyBasic.s:474    .text:0000000000000302 binary_nbr
         tinyBasic.s:806    .text:00000000000005f4 is_bit
         tinyBasic.s:928    .text:00000000000006a8 syntax_error
         tinyBasic.s:493    .text:000000000000034c hex_nbr
         tinyBasic.s:781    .text:00000000000005d0 is_hex
         tinyBasic.s:512    .text:0000000000000394 lt
ARM GAS  tinyBasic.s 			page 65


         tinyBasic.s:519    .text:00000000000003a6 gt
         tinyBasic.s:532    .text:00000000000003ca bkslash
         tinyBasic.s:537    .text:00000000000003d8 prt_cmd
         tinyBasic.s:541    .text:00000000000003e2 quote
         tinyBasic.s:664    .text:000000000000052c parse_quote
         tinyBasic.s:544    .text:00000000000003ee tick
         tinyBasic.s:758    .text:00000000000005b8 is_digit
         tinyBasic.s:570    .text:000000000000044c decimal_nbr
         tinyBasic.s:827    .text:0000000000000610 is_alpha
         tinyBasic.s:891    .text:0000000000000658 parse_keyword
         tinyBasic.s:589    .text:0000000000000486 char_list
         tinyBasic.s:590    .text:0000000000000486 $d
         tinyBasic.s:592    .text:000000000000049c tok_single
         tinyBasic.s:695    .text:0000000000000564 get_escaped_char
         tinyBasic.s:713    .text:0000000000000590 escaped
         tinyBasic.s:713    .text:0000000000000590 $d
         tinyBasic.s:724    .text:0000000000000598 $t
         tinyBasic.s:848    .text:0000000000000628 is_num
         tinyBasic.s:869    .text:0000000000000640 is_alnum
         tinyBasic.s:1527   .rodata.dictionary:0000000000000789 kword_dict
         tinyBasic.s:1049   .text:0000000000000720 search_dict
         tinyBasic.s:953    .text:00000000000006cc err_msg
         tinyBasic.s:1143   .text:0000000000000824 dstack_empty
         tinyBasic.s:1360   .text:00000000000009d8 warm_start
         tinyBasic.s:954    .text:00000000000006cc $d
         tinyBasic.s:960    .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:961    .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:962    .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:963    .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:964    .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:965    .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:966    .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:967    .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:968    .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:969    .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:970    .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:971    .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:972    .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:973    .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:974    .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:976    .rodata.tb_error:000000000000012e rt_msg
         tinyBasic.s:977    .rodata.tb_error:0000000000000140 comp_msg
         tinyBasic.s:978    .rodata.tb_error:0000000000000151 tk_id
         tinyBasic.s:995    .text:000000000000070c $t
         tinyBasic.s:995    .text:000000000000070c arg_list
         tinyBasic.s:1011   .text:0000000000000718 func_args
         tinyBasic.s:1031   .text:000000000000071c BTGL
         tinyBasic.s:1080   .text:0000000000000754 prt_version
         tinyBasic.s:1104   .text:00000000000007ba version_msg
         tinyBasic.s:1106   .text:00000000000007da version
         tinyBasic.s:1105   .text:00000000000007ba $d
         tinyBasic.s:1121   .text:00000000000007dc cold_start
         tinyBasic.s:1139   .text:000000000000081c src_addr
         tinyBasic.s:1141   .text:0000000000000820 dest_addr
         tinyBasic.s:1412   .rodata:00000000000000d0 ulast
         tinyBasic.s:1387   .rodata:0000000000000000 uzero
         tinyBasic.s:1192   .text:0000000000000860 warm_init
ARM GAS  tinyBasic.s 			page 66


         tinyBasic.s:1218   .text:0000000000000884 cmd_line
         tinyBasic.s:1140   .text:000000000000081c $d
         tinyBasic.s:1156   .text:0000000000000828 $t
         tinyBasic.s:1156   .text:0000000000000828 clear_vars
         tinyBasic.s:1172   .text:0000000000000844 clear_basic
         tinyBasic.s:1229   .text:00000000000008b0 interpreter
         tinyBasic.s:1251   .text:00000000000008ec interp_loop
         tinyBasic.s:1236   .text:00000000000008be next_line
         tinyBasic.s:1287   .text:0000000000000924 next_token
         tinyBasic.s:1533   .rodata.dictionary:0000000000000790 fn_table
         tinyBasic.s:1773   .rodata.dictionary:0000000000000a76 let_var
         tinyBasic.s:1775   .rodata.dictionary:0000000000000a80 let_array
         tinyBasic.s:1328   .text:0000000000000988 tok_jmp
         tinyBasic.s:1329   .text:0000000000000988 $d
         tinyBasic.s:1346   .text:00000000000009d0 $d
         tinyBasic.s:1360   .text:00000000000009d8 $t
         tinyBasic.s:1376   .text:00000000000009e0 get_array_element
         tinyBasic.s:1380   .text:00000000000009e4 relation
         tinyBasic.s:1977   .fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:1409   .rodata:0000000000000054 $d
         tinyBasic.s:1419   *ABS*:0000000000000000 link
         tinyBasic.s:1420   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:1528   .rodata.dictionary:0000000000000789 LINK
         tinyBasic.s:1421   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:1523   .rodata.dictionary:0000000000000780 first_link
         tinyBasic.s:1563   .rodata.dictionary:000000000000092c abs
         tinyBasic.s:1575   .rodata.dictionary:0000000000000954 power_adc
         tinyBasic.s:1578   .rodata.dictionary:0000000000000958 analog_read
         tinyBasic.s:1581   .rodata.dictionary:000000000000095c bit_and
         tinyBasic.s:1584   .rodata.dictionary:0000000000000960 ascii
         tinyBasic.s:1587   .rodata.dictionary:0000000000000964 autorun
         tinyBasic.s:1590   .rodata.dictionary:0000000000000968 awu
         tinyBasic.s:1593   .rodata.dictionary:000000000000096c bitmask
         tinyBasic.s:1608   .rodata.dictionary:0000000000000970 bit_reset
         tinyBasic.s:1633   .rodata.dictionary:000000000000099c bit_set
         tinyBasic.s:1669   .rodata.dictionary:00000000000009ec bit_test
         tinyBasic.s:1657   .rodata.dictionary:00000000000009c4 bit_toggle
         tinyBasic.s:1672   .rodata.dictionary:00000000000009f0 bye
         tinyBasic.s:1675   .rodata.dictionary:00000000000009f4 char
         tinyBasic.s:1678   .rodata.dictionary:00000000000009f8 const_cr2
         tinyBasic.s:1681   .rodata.dictionary:00000000000009fc const_cr1
         tinyBasic.s:1684   .rodata.dictionary:0000000000000a00 data
         tinyBasic.s:1687   .rodata.dictionary:0000000000000a04 data_line
         tinyBasic.s:1690   .rodata.dictionary:0000000000000a08 const_ddr
         tinyBasic.s:1693   .rodata.dictionary:0000000000000a0c dec_base
         tinyBasic.s:1696   .rodata.dictionary:0000000000000a10 directory
         tinyBasic.s:1699   .rodata.dictionary:0000000000000a14 do_loop
         tinyBasic.s:1702   .rodata.dictionary:0000000000000a18 digital_read
         tinyBasic.s:1705   .rodata.dictionary:0000000000000a1c digital_write
         tinyBasic.s:1708   .rodata.dictionary:0000000000000a20 cmd_end
         tinyBasic.s:1711   .rodata.dictionary:0000000000000a24 const_eeprom_base
         tinyBasic.s:1714   .rodata.dictionary:0000000000000a28 fcpu
         tinyBasic.s:1717   .rodata.dictionary:0000000000000a2c for
         tinyBasic.s:1720   .rodata.dictionary:0000000000000a30 forget
         tinyBasic.s:1723   .rodata.dictionary:0000000000000a34 gosub
         tinyBasic.s:1726   .rodata.dictionary:0000000000000a38 goto
         tinyBasic.s:1729   .rodata.dictionary:0000000000000a3c gpio
ARM GAS  tinyBasic.s 			page 67


         tinyBasic.s:1732   .rodata.dictionary:0000000000000a40 hex_base
         tinyBasic.s:1735   .rodata.dictionary:0000000000000a44 const_idr
         tinyBasic.s:1738   .rodata.dictionary:0000000000000a48 if
         tinyBasic.s:1741   .rodata.dictionary:0000000000000a4c input_var
         tinyBasic.s:1744   .rodata.dictionary:0000000000000a50 invert
         tinyBasic.s:1747   .rodata.dictionary:0000000000000a54 enable_iwdg
         tinyBasic.s:1750   .rodata.dictionary:0000000000000a58 refresh_iwdg
         tinyBasic.s:1753   .rodata.dictionary:0000000000000a5c key
         tinyBasic.s:1766   .rodata.dictionary:0000000000000a60 let
         tinyBasic.s:1790   .rodata.dictionary:0000000000000ab8 list
         tinyBasic.s:1793   .rodata.dictionary:0000000000000abc load
         tinyBasic.s:1796   .rodata.dictionary:0000000000000ac0 log2
         tinyBasic.s:1799   .rodata.dictionary:0000000000000ac4 lshift
         tinyBasic.s:1802   .rodata.dictionary:0000000000000ac8 muldiv
         tinyBasic.s:1805   .rodata.dictionary:0000000000000acc next
         tinyBasic.s:1808   .rodata.dictionary:0000000000000ad0 new
         tinyBasic.s:1811   .rodata.dictionary:0000000000000ad4 func_not
         tinyBasic.s:1814   .rodata.dictionary:0000000000000ad8 const_odr
         tinyBasic.s:1817   .rodata.dictionary:0000000000000adc bit_or
         tinyBasic.s:1820   .rodata.dictionary:0000000000000ae0 pad_ref
         tinyBasic.s:1823   .rodata.dictionary:0000000000000ae4 pause
         tinyBasic.s:1826   .rodata.dictionary:0000000000000ae8 pin_mode
         tinyBasic.s:1829   .rodata.dictionary:0000000000000aec peek
         tinyBasic.s:1832   .rodata.dictionary:0000000000000af0 const_input
         tinyBasic.s:1835   .rodata.dictionary:0000000000000af4 poke
         tinyBasic.s:1838   .rodata.dictionary:0000000000000af8 const_output
         tinyBasic.s:1841   .rodata.dictionary:0000000000000afc print
         tinyBasic.s:1844   .rodata.dictionary:0000000000000b00 const_porta
         tinyBasic.s:1847   .rodata.dictionary:0000000000000b04 const_portb
         tinyBasic.s:1850   .rodata.dictionary:0000000000000b08 const_portc
         tinyBasic.s:1853   .rodata.dictionary:0000000000000b0c const_portd
         tinyBasic.s:1856   .rodata.dictionary:0000000000000b10 const_porte
         tinyBasic.s:1859   .rodata.dictionary:0000000000000b14 const_portf
         tinyBasic.s:1862   .rodata.dictionary:0000000000000b18 const_portg
         tinyBasic.s:1865   .rodata.dictionary:0000000000000b1c const_porth
         tinyBasic.s:1868   .rodata.dictionary:0000000000000b20 const_porti
         tinyBasic.s:1871   .rodata.dictionary:0000000000000b24 qkey
         tinyBasic.s:1874   .rodata.dictionary:0000000000000b28 read
         tinyBasic.s:1877   .rodata.dictionary:0000000000000b2c remark
         tinyBasic.s:1880   .rodata.dictionary:0000000000000b30 restore
         tinyBasic.s:1883   .rodata.dictionary:0000000000000b34 return
         tinyBasic.s:1886   .rodata.dictionary:0000000000000b38 random
         tinyBasic.s:1889   .rodata.dictionary:0000000000000b3c rshift
         tinyBasic.s:1892   .rodata.dictionary:0000000000000b40 run
         tinyBasic.s:1895   .rodata.dictionary:0000000000000b44 save
         tinyBasic.s:1898   .rodata.dictionary:0000000000000b48 show
         tinyBasic.s:1901   .rodata.dictionary:0000000000000b4c size
         tinyBasic.s:1904   .rodata.dictionary:0000000000000b50 sleep
         tinyBasic.s:1907   .rodata.dictionary:0000000000000b54 spi_read
         tinyBasic.s:1910   .rodata.dictionary:0000000000000b58 spi_enable
         tinyBasic.s:1913   .rodata.dictionary:0000000000000b5c spi_select
         tinyBasic.s:1916   .rodata.dictionary:0000000000000b60 spi_write
         tinyBasic.s:1919   .rodata.dictionary:0000000000000b64 step
         tinyBasic.s:1922   .rodata.dictionary:0000000000000b68 stop
         tinyBasic.s:1925   .rodata.dictionary:0000000000000b6c get_ticks
         tinyBasic.s:1928   .rodata.dictionary:0000000000000b70 set_timer
         tinyBasic.s:1931   .rodata.dictionary:0000000000000b74 timeout
ARM GAS  tinyBasic.s 			page 68


         tinyBasic.s:1934   .rodata.dictionary:0000000000000b78 to
         tinyBasic.s:1937   .rodata.dictionary:0000000000000b7c tone
         tinyBasic.s:1940   .rodata.dictionary:0000000000000b80 ubound
         tinyBasic.s:1943   .rodata.dictionary:0000000000000b84 uflash
         tinyBasic.s:1946   .rodata.dictionary:0000000000000b88 until
         tinyBasic.s:1949   .rodata.dictionary:0000000000000b8c usr
         tinyBasic.s:1952   .rodata.dictionary:0000000000000b90 wait
         tinyBasic.s:1955   .rodata.dictionary:0000000000000b94 words
         tinyBasic.s:1958   .rodata.dictionary:0000000000000b98 write
         tinyBasic.s:1961   .rodata.dictionary:0000000000000b9c bit_xor
         tinyBasic.s:1964   .rodata.dictionary:0000000000000ba0 transmit
         tinyBasic.s:1967   .rodata.dictionary:0000000000000ba4 receive
         tinyBasic.s:1564   .rodata.dictionary:000000000000092c $t
         tinyBasic.s:1575   .rodata.dictionary:0000000000000952 $d
         tinyBasic.s:1576   .rodata.dictionary:0000000000000954 $t
         tinyBasic.s:1578   .rodata.dictionary:0000000000000956 $d
         tinyBasic.s:1579   .rodata.dictionary:0000000000000958 $t
         tinyBasic.s:1581   .rodata.dictionary:000000000000095a $d
         tinyBasic.s:1582   .rodata.dictionary:000000000000095c $t
         tinyBasic.s:1584   .rodata.dictionary:000000000000095e $d
         tinyBasic.s:1585   .rodata.dictionary:0000000000000960 $t
         tinyBasic.s:1587   .rodata.dictionary:0000000000000962 $d
         tinyBasic.s:1588   .rodata.dictionary:0000000000000964 $t
         tinyBasic.s:1590   .rodata.dictionary:0000000000000966 $d
         tinyBasic.s:1591   .rodata.dictionary:0000000000000968 $t
         tinyBasic.s:1593   .rodata.dictionary:000000000000096a $d
         tinyBasic.s:1594   .rodata.dictionary:000000000000096c $t
         tinyBasic.s:1608   .rodata.dictionary:000000000000096e $d
         tinyBasic.s:1609   .rodata.dictionary:0000000000000970 $t
         tinyBasic.s:1634   .rodata.dictionary:000000000000099c $t
         tinyBasic.s:1658   .rodata.dictionary:00000000000009c4 $t
         tinyBasic.s:1670   .rodata.dictionary:00000000000009ec $t
         tinyBasic.s:1673   .rodata.dictionary:00000000000009f0 $t
         tinyBasic.s:1676   .rodata.dictionary:00000000000009f4 $t
         tinyBasic.s:1679   .rodata.dictionary:00000000000009f8 $t
         tinyBasic.s:1682   .rodata.dictionary:00000000000009fc $t
         tinyBasic.s:1685   .rodata.dictionary:0000000000000a00 $t
         tinyBasic.s:1688   .rodata.dictionary:0000000000000a04 $t
         tinyBasic.s:1691   .rodata.dictionary:0000000000000a08 $t
         tinyBasic.s:1694   .rodata.dictionary:0000000000000a0c $t
         tinyBasic.s:1697   .rodata.dictionary:0000000000000a10 $t
         tinyBasic.s:1700   .rodata.dictionary:0000000000000a14 $t
         tinyBasic.s:1703   .rodata.dictionary:0000000000000a18 $t
         tinyBasic.s:1706   .rodata.dictionary:0000000000000a1c $t
         tinyBasic.s:1709   .rodata.dictionary:0000000000000a20 $t
         tinyBasic.s:1712   .rodata.dictionary:0000000000000a24 $t
         tinyBasic.s:1715   .rodata.dictionary:0000000000000a28 $t
         tinyBasic.s:1718   .rodata.dictionary:0000000000000a2c $t
         tinyBasic.s:1721   .rodata.dictionary:0000000000000a30 $t
         tinyBasic.s:1724   .rodata.dictionary:0000000000000a34 $t
         tinyBasic.s:1727   .rodata.dictionary:0000000000000a38 $t
         tinyBasic.s:1730   .rodata.dictionary:0000000000000a3c $t
         tinyBasic.s:1733   .rodata.dictionary:0000000000000a40 $t
         tinyBasic.s:1736   .rodata.dictionary:0000000000000a44 $t
         tinyBasic.s:1739   .rodata.dictionary:0000000000000a48 $t
         tinyBasic.s:1742   .rodata.dictionary:0000000000000a4c $t
         tinyBasic.s:1745   .rodata.dictionary:0000000000000a50 $t
ARM GAS  tinyBasic.s 			page 69


         tinyBasic.s:1748   .rodata.dictionary:0000000000000a54 $t
         tinyBasic.s:1751   .rodata.dictionary:0000000000000a58 $t
         tinyBasic.s:1754   .rodata.dictionary:0000000000000a5c $t
         tinyBasic.s:1767   .rodata.dictionary:0000000000000a60 $t
         tinyBasic.s:1790   .rodata.dictionary:0000000000000ab6 $d
         tinyBasic.s:1791   .rodata.dictionary:0000000000000ab8 $t
         tinyBasic.s:1794   .rodata.dictionary:0000000000000abc $t
         tinyBasic.s:1797   .rodata.dictionary:0000000000000ac0 $t
         tinyBasic.s:1800   .rodata.dictionary:0000000000000ac4 $t
         tinyBasic.s:1803   .rodata.dictionary:0000000000000ac8 $t
         tinyBasic.s:1806   .rodata.dictionary:0000000000000acc $t
         tinyBasic.s:1809   .rodata.dictionary:0000000000000ad0 $t
         tinyBasic.s:1812   .rodata.dictionary:0000000000000ad4 $t
         tinyBasic.s:1815   .rodata.dictionary:0000000000000ad8 $t
         tinyBasic.s:1818   .rodata.dictionary:0000000000000adc $t
         tinyBasic.s:1821   .rodata.dictionary:0000000000000ae0 $t
         tinyBasic.s:1824   .rodata.dictionary:0000000000000ae4 $t
         tinyBasic.s:1827   .rodata.dictionary:0000000000000ae8 $t
         tinyBasic.s:1830   .rodata.dictionary:0000000000000aec $t
         tinyBasic.s:1833   .rodata.dictionary:0000000000000af0 $t
         tinyBasic.s:1836   .rodata.dictionary:0000000000000af4 $t
         tinyBasic.s:1839   .rodata.dictionary:0000000000000af8 $t
         tinyBasic.s:1842   .rodata.dictionary:0000000000000afc $t
         tinyBasic.s:1845   .rodata.dictionary:0000000000000b00 $t
         tinyBasic.s:1848   .rodata.dictionary:0000000000000b04 $t
         tinyBasic.s:1851   .rodata.dictionary:0000000000000b08 $t
         tinyBasic.s:1854   .rodata.dictionary:0000000000000b0c $t
         tinyBasic.s:1857   .rodata.dictionary:0000000000000b10 $t
         tinyBasic.s:1860   .rodata.dictionary:0000000000000b14 $t
         tinyBasic.s:1863   .rodata.dictionary:0000000000000b18 $t
         tinyBasic.s:1866   .rodata.dictionary:0000000000000b1c $t
         tinyBasic.s:1869   .rodata.dictionary:0000000000000b20 $t
         tinyBasic.s:1872   .rodata.dictionary:0000000000000b24 $t
         tinyBasic.s:1875   .rodata.dictionary:0000000000000b28 $t
         tinyBasic.s:1878   .rodata.dictionary:0000000000000b2c $t
         tinyBasic.s:1881   .rodata.dictionary:0000000000000b30 $t
         tinyBasic.s:1884   .rodata.dictionary:0000000000000b34 $t
         tinyBasic.s:1887   .rodata.dictionary:0000000000000b38 $t
         tinyBasic.s:1890   .rodata.dictionary:0000000000000b3c $t
         tinyBasic.s:1893   .rodata.dictionary:0000000000000b40 $t
         tinyBasic.s:1896   .rodata.dictionary:0000000000000b44 $t
         tinyBasic.s:1899   .rodata.dictionary:0000000000000b48 $t
         tinyBasic.s:1902   .rodata.dictionary:0000000000000b4c $t
         tinyBasic.s:1905   .rodata.dictionary:0000000000000b50 $t
         tinyBasic.s:1908   .rodata.dictionary:0000000000000b54 $t
         tinyBasic.s:1911   .rodata.dictionary:0000000000000b58 $t
         tinyBasic.s:1914   .rodata.dictionary:0000000000000b5c $t
         tinyBasic.s:1917   .rodata.dictionary:0000000000000b60 $t
         tinyBasic.s:1920   .rodata.dictionary:0000000000000b64 $t
         tinyBasic.s:1923   .rodata.dictionary:0000000000000b68 $t
         tinyBasic.s:1926   .rodata.dictionary:0000000000000b6c $t
         tinyBasic.s:1929   .rodata.dictionary:0000000000000b70 $t
         tinyBasic.s:1932   .rodata.dictionary:0000000000000b74 $t
         tinyBasic.s:1935   .rodata.dictionary:0000000000000b78 $t
         tinyBasic.s:1938   .rodata.dictionary:0000000000000b7c $t
         tinyBasic.s:1941   .rodata.dictionary:0000000000000b80 $t
         tinyBasic.s:1944   .rodata.dictionary:0000000000000b84 $t
ARM GAS  tinyBasic.s 			page 70


         tinyBasic.s:1947   .rodata.dictionary:0000000000000b88 $t
         tinyBasic.s:1950   .rodata.dictionary:0000000000000b8c $t
         tinyBasic.s:1953   .rodata.dictionary:0000000000000b90 $t
         tinyBasic.s:1956   .rodata.dictionary:0000000000000b94 $t
         tinyBasic.s:1959   .rodata.dictionary:0000000000000b98 $t
         tinyBasic.s:1962   .rodata.dictionary:0000000000000b9c $t
         tinyBasic.s:1965   .rodata.dictionary:0000000000000ba0 $t
         tinyBasic.s:1968   .rodata.dictionary:0000000000000ba4 $t
         tinyBasic.s:1975   .rodata.dictionary:0000000000000ba8 $d
         tinyBasic.s:1384   .text:00000000000009e6 $d
         tinyBasic.s:1977   .text:00000000000009e8 $d
         tinyBasic.s:631    .text:0000000000000501 $d
         tinyBasic.s:631    .text:0000000000000502 $t
         tinyBasic.s:1108   .text:00000000000007db $d
         tinyBasic.s:1108   .text:00000000000007dc $t
         tinyBasic.s:1344   .text:00000000000009cd $d
         tinyBasic.s:1344   .text:00000000000009ce $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
spaces
print_hex
vectors_size
_dstack
readln
_tib
_pad
