ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
ARM GAS  tinyBasic.s 			page 5


  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
ARM GAS  tinyBasic.s 			page 6


  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
ARM GAS  tinyBasic.s 			page 7


  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
ARM GAS  tinyBasic.s 			page 8


  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
ARM GAS  tinyBasic.s 			page 9


 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
ARM GAS  tinyBasic.s 			page 10


 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques Deschênes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
ARM GAS  tinyBasic.s 			page 11


  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ AND_IDX,ABS_IDX+1 // 
  27              	    .equ ASC_IDX,AND_IDX+1  // 
  28              	    .equ AWU_IDX,ASC_IDX+1 //
  29              	    .equ BIT_IDX,AWU_IDX+1 //
  30              	    .equ BRES_IDX,BIT_IDX+1 // 
  31              	    .equ BSET_IDX,BRES_IDX+1 // 
  32              	    .equ BTEST_IDX,BSET_IDX+1 // 
  33              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  34              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  35              	    .equ CLS_IDX,CHAR_IDX+1 //
  36              	    .equ CONST_IDX,CLS_IDX+1 //
  37              	    .equ DATA_IDX,CONST_IDX+1 // 
  38              	    .equ DATALN_IDX,DATA_IDX+1 // 
  39              	    .equ DEC_IDX,DATALN_IDX+1 // 
  40              	    .equ DIR_IDX,DEC_IDX+1 // 
  41              	    .equ DO_IDX,DIR_IDX+1 // 
  42              	    .equ DROP_IDX,DO_IDX+1
  43              	    .equ DUMP_IDX, DROP_IDX+1 
  44              	    .equ END_IDX,DUMP_IDX+1 // 
  45              	    .equ ERASE_IDX,END_IDX+1 
  46              	    .equ FOR_IDX, ERASE_IDX+1 // 
  47              	    .equ FORGET_IDX, FOR_IDX+1 // 
  48              	    .equ FREE_IDX, FORGET_IDX+1 // 
  49              	    .equ GET_IDX,FREE_IDX+1
  50              	    .equ GOSUB_IDX, GET_IDX+1 // 
  51              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  52              	    .equ HEX_IDX, GOTO_IDX+1 // 
  53              	    .equ IF_IDX, HEX_IDX+1 // 
  54              	    .equ IN_IDX,IF_IDX+1
  55              	    .equ INPUT_IDX, IN_IDX+1 // 
  56              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  57              	    .equ KEY_IDX, INVERT_IDX+1 // 
  58              	    .equ LET_IDX, KEY_IDX+1 // 
  59              	    .equ LIST_IDX, LET_IDX+1 // 
  60              	    .equ LOAD_IDX, LIST_IDX+1 // 
  61              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  62              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  63              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  64              	    .equ NEXT_IDX, NEW_IDX+1 // 
  65              	    .equ NOT_IDX, NEXT_IDX+1 // 
  66              	    .equ OR_IDX, NOT_IDX+1 // 
  67              	    .equ OUT_IDX,OR_IDX+1
  68              	    .equ PAD_IDX, OUT_IDX+1 // 
  69              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  70              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  71              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  72              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  73              	    .equ PEEK32_IDX, PEEK16_IDX+1
  74              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  75              	    .equ POKE16_IDX,POKE8_IDX+1 
  76              	    .equ POKE32_IDX,POKE16_IDX+1
  77              	    .equ POP_IDX,POKE32_IDX+1
  78              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  79              	    .equ PUSH_IDX,PRT_IDX+1
  80              	    .equ PUT_IDX,PUSH_IDX+1
  81              	    .equ QKEY_IDX, PUT_IDX+1 // 
  82              	    .equ READ_IDX, QKEY_IDX+1 // 
  83              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
  84              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  85              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  86              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  87              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  88              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  89              	    .equ SAVE_IDX, RUN_IDX+1 // 
  90              	    .equ SLEEP_IDX, SAVE_IDX+1 // 
  91              	    .equ SPC_IDX,SLEEP_IDX+1 //
  92              	    .equ STEP_IDX, SPC_IDX+1 // 
  93              	    .equ STOP_IDX, STEP_IDX+1 // 
  94              	    .equ STORE_IDX,STOP_IDX+1
  95              	    .equ TAB_IDX, STORE_IDX+1 //
  96              	    .equ THEN_IDX,TAB_IDX+1
  97              	    .equ TICKS_IDX, THEN_IDX+1 // 
  98              	    .equ TIMER_IDX, TICKS_IDX+1 // 
  99              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 100              	    .equ TO_IDX, TMROUT_IDX+1 // 
 101              	    .equ TRACE_IDX,TO_IDX+1
 102              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 103              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 104              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 105              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 106              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 107              	    .equ XOR_IDX, WORDS_IDX+1 //
 108              	    .equ XPOS_IDX,XOR_IDX+1 //
 109              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 110              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
ARM GAS  tinyBasic.s 			page 13


  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
ARM GAS  tinyBasic.s 			page 14


 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
ARM GAS  tinyBasic.s 			page 15


 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
ARM GAS  tinyBasic.s 			page 16


 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
ARM GAS  tinyBasic.s 			page 17


 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
ARM GAS  tinyBasic.s 			page 18


 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	1:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D5     	    bpl 2f 
 303 0234 4FF05F00 	    mov r0,#'_' 
 304 0238 00B5FFF7 	2:  _CALL uart_putc
 304      FEFF5DF8 
 304      04EB
 305 0242 0139     	    subs r1,#1 
 306 0244 F2D1     	    bne 1b 
 307 0246 1046     	    mov r0,r2 
 308 0248 04BC     	    pop {r2}
 309 024a 7047     	    _RET 
 310              	
 311              	
 312              	/*********************************
 313              	    search_target 
 314              	    search for goto, gosub target
 315              	    target is line number | label  
 316              	*********************************/
 317              	    _FUNC search_target
 318 024c 00B500F0 	    _CALL next_token 
 318      E7FD5DF8 
 318      04EB
 319 0256 1A28     	    cmp r0,TK_LABEL 
 320 0258 06D1     	    bne 2f 
 321 025a 00B500F0 	    _CALL search_label
 321      32F85DF8 
 321      04EB
 322 0264 A0B1     	    cbz r0,8f  
 323 0266 16E0     	    b 9f 
 324 0268 D4F800A0 	2:  _UNGET_TOKEN
 324      D4F808B0 
 325 0270 00B500F0 	    _CALL expression 
 325      FBFE5DF8 
 325      04EB
 326 027a 1B28     	    cmp r0,#TK_INTGR 
 327 027c 40F0DA83 	    bne syntax_error 
 328 0280 48B1     	    cbz r0,9f 
 329 0282 0846     	    mov r0,r1 
 330 0284 00B5FFF7 	    _CALL search_lineno 
 330      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 19


 330      04EB
 331 028e 11B1     	    cbz r1,9f 
 332 0290 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 333 0294 D2E3     	    b tb_error 
 334 0296 7047     	9:  _RET 
 335              	
 336              	
 337              	/***************************************
 338              	  search_const 
 339              	  search for constant 
 340              	  input:
 341              	    r0  constant label 
 342              	  output:
 343              	    r0  TK_INTGR 
 344              	    r1  constant value  
 345              	  use:
 346              	    r2   *list 
 347              	    r3   BOUND 
 348              	***************************************/
 349              	    _FUNC search_const
 350 0298 0CB4     	    push {r2,r3} 
 351 029a 626B     	    ldr r2,[UPP,#TXTEND]
 352 029c D4F8D030 	    ldr r3,[UPP,#HERE] 
 353 02a0 9A42     	1:  cmp r2,r3 
 354 02a2 0BD5     	    bpl 8f 
 355 02a4 52F8041B 	    ldr r1,[r2],#4
 356 02a8 8842     	    cmp r0,r1 
 357 02aa 02D0     	    beq 2f 
 358 02ac 02F10402 	    add r2,#4
 359 02b0 F6E7     	    b 1b 
 360              	2:  // found 
 361 02b2 1168     	    ldr r1,[r2]
 362 02b4 4FF01B00 	    mov r0,#TK_INTGR 
 363 02b8 0CBC     	    pop {r2,r3}
 364 02ba 7047     	    _RET
 365              	8:  // that constant doesn't exist 
 366 02bc 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 367 02c0 BCE3     	    b tb_error      
 368              	
 369              	
 370              	/***************************************
 371              	    search_label 
 372              	    search target label 
 373              	    input:
 374              	      r1    target label 
 375              	    output:
 376              	      r0    address or 0 
 377              	    use:
 378              	      r2    line address link 
 379              	      r3    search limit 
 380              	****************************************/
 381 02c2 00BF     	    _FUNC search_label 
 382 02c4 0CB4     	    push {r2,r3}
 383 02c6 226B     	    ldr r2,[UPP,#TXTBGN]
 384 02c8 636B     	    ldr r3,[UPP,#TXTEND]
 385 02ca 9A42     	1:  cmp r2,r3
 386 02cc 0AD0     	    beq 8f 
ARM GAS  tinyBasic.s 			page 20


 387 02ce D078     	    ldrb r0,[r2,#3]
 388 02d0 1A28     	    cmp  r0,#TK_LABEL 
 389 02d2 02D0     	    beq 4f 
 390 02d4 9078     	2:  ldrb r0,[r2,#2]
 391 02d6 0244     	    add r2,r0 
 392 02d8 F7E7     	    b 1b 
 393              	4:  // compare label 
 394 02da 5068     	    ldr r0,[R2,#4]
 395 02dc 8142     	    cmp r1,r0 
 396 02de F9D1     	    bne 2b 
 397              	    // found label 
 398 02e0 1046     	    mov r0,r2 
 399 02e2 01E0     	    b 9f
 400 02e4 80EA0000 	8:  eor r0,r0 
 401 02e8 0CBC     	9:  pop {r2,r3}
 402 02ea 7047     	    _RET 
 403              	
 404              	
 405              	/***************************************
 406              	    search_lineno 
 407              	    localize BASIC line from its number 
 408              	    input:
 409              	      r0   line# 
 410              	    output: 
 411              	      r0   adr where found || adr new to be inserted 
 412              	      r1   0 found || !0 not found  
 413              	    use:
 414              	      r0   scan address 
 415              	      r1   temp   
 416              	      r2   address end of text
 417              	      r3   target line#
 418              	****************************************/    
 419              	    _GBL_FUNC search_lineno
 420 02ec 0CB4     	    push {r2,r3} 
 421 02ee 0346     	    mov r3,r0 // target 
 422 02f0 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 423 02f2 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 424 02f4 9042     	1:  cmp r0,r2 
 425 02f6 05D0     	    beq  8f
 426 02f8 0188     	    ldrh r1,[r0]
 427 02fa C91A     	    subs r1,r3 
 428 02fc 04D5     	    bpl 9f 
 429 02fe 8178     	    ldrb r1,[r0,#2]
 430 0300 0844     	    add r0,r1
 431 0302 F7E7     	    b 1b 
 432 0304 4FF0FF31 	8:  mov r1,#-1 
 433 0308 0CBC     	9:  pop {r2,r3}
 434 030a 7047     	    _RET 
 435              	
 436              	
 437              	/********************************************
 438              	    delete_line 
 439              	    delete BASIC line at addr 
 440              	    input:
 441              	      r0    address line to delete 
 442              	    output:
 443              	      r0    same as input 
ARM GAS  tinyBasic.s 			page 21


 444              	    use: 
 445              	      r1    dest adr
 446              	      r2    bytes to move 
 447              	      T1    length line to delete 
 448              	      T2    txtend 
 449              	********************************************/
 450              	    _FUNC delete_line 
 451 030c 2DE90703 	    push {r0,r1,r2,T1,T2}
 452 0310 0146     	    mov r1,r0 // dest 
 453 0312 91F80280 	    ldrb T1,[r1,#2] // line length 
 454 0316 4044     	    add r0,T1  // src
 455 0318 D4F83490 	    ldr T2,[UPP,#TXTEND]
 456 031c A9EB0002 	    sub r2,T2,r0 // bytes to move 
 457 0320 00B5FFF7 	    _CALL cmove
 457      FEFF5DF8 
 457      04EB
 458 032a A9EB0809 	    sub T2,T1 // txtend-count 
 459 032e C4F83490 	    str T2,[UPP,#TXTEND] 
 460 0332 BDE80703 	    pop {r0,r1,r2,T1,T2}
 461 0336 7047     	    _RET 
 462              	
 463              	/******************************************
 464              	    create_gap 
 465              	    create a gap in text area to insert new line 
 466              	    input:
 467              	      r0    adr 
 468              	      r1    length 
 469              	    output:
 470              	      r0    adr 
 471              	    use:
 472              	      T1    length 
 473              	      T2    txtend 
 474              	************************************************/
 475              	    _FUNC create_gap 
 476 0338 2DE90503 	    push {r0,r2,T1,T2}
 477 033c 8846     	    mov T1,R1
 478 033e 0144     	    add r1,r0  // dest 
 479 0340 D4F83490 	    ldr T2,[UPP,#TXTEND]
 480 0344 A9EB0002 	    sub r2,T2,r0 
 481 0348 00B5FFF7 	    _CALL cmove
 481      FEFF5DF8 
 481      04EB
 482 0352 C144     	    add T2,T1 
 483 0354 C4F83490 	    str T2,[UPP,#TXTEND]
 484 0358 BDE80503 	    pop {r0,r2,T1,T2}
 485 035c 7047     	    _RET 
 486              	
 487              	/************************************************
 488              	    insert_line 
 489              	    insert BASIC line in text area 
 490              	    first search if line with same number exist 
 491              	    replace if so. 
 492              	    input:
 493              	      r0    *buffer to insert 
 494              	    output:
 495              	      none 
 496              	    use: 
ARM GAS  tinyBasic.s 			page 22


 497              	      T1     *buffer
 498              	      T2     temp  
 499              	************************************************/ 
 500 035e 00BF     	    _FUNC insert_line 
 501 0360 2DE90203 	    push {r1,T1,T2}
 502 0364 8046     	    mov T1,r0 
 503 0366 B8F80000 	    ldrh r0,[T1]
 504 036a 00B5FFF7 	    _CALL search_lineno 
 504      FEFF5DF8 
 504      04EB
 505 0374 49B9     	    cbnz  r1, 1f // line# doesn't exist
 506              	// already exist 
 507 0376 00B5FFF7 	    _CALL delete_line // delete old one 
 507      C8FF5DF8 
 507      04EB
 508 0380 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 509 0384 B9F1040F 	    cmp T2,#4 // empty line length==4  
 510 0388 0ED0     	    beq 9f
 511              	1: //insert new line 
 512 038a 98F80210 	    ldrb r1,[T1,#2]
 513 038e 00B5FFF7 	    _CALL create_gap 
 513      D2FF5DF8 
 513      04EB
 514 0398 0146     	    mov r1,r0
 515 039a 4046     	    mov r0,T1 
 516 039c 8278     	    ldrb r2,[r0,#2]
 517 039e 00B5FFF7 	    _CALL cmove 
 517      FEFF5DF8 
 517      04EB
 518 03a8 BDE80203 	9:  pop {r1,T1,T2}
 519 03ac 7047     	    _RET 
 520              	
 521              	/*********************************
 522              	    compile 
 523              	    tokenize source line save it 
 524              	    in pas buffer.
 525              	    compiled line format: 
 526              	      line_no  2 bytes {0...32767}
 527              	      count    1 byte  
 528              	      tokens   variable length 
 529              	  input:
 530              	     r0   *text buffer 
 531              	     r1   *text length   
 532              	  output:
 533              	    r0    0 stored | -1 immediate 
 534              	  use:
 535              	    r3    tib index   
 536              	    T1    tib
 537              	    T2    pad
 538              	***********************************/
 539 03ae 00BF     	    _FUNC compile
 540 03b0 8046     	    mov T1, r0  // source text buffer 
 541 03b2 6160     	    str r1,[UPP,#COUNT] // save line length 
 542 03b4 DFF8C499 	    ldr T2,pad // tokens buffer
 543 03b8 83EA0303 	    eor r3,r3 // source index  
 544 03bc 206C     	    ldr r0,[UPP,#FLAGS]
 545 03be 40F02000 	    orr r0,#FCOMP
ARM GAS  tinyBasic.s 			page 23


 546 03c2 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 547 03c4 80EA0000 	    eor r0,r0     
 548 03c8 29F8020B 	    strh r0,[T2],#2   // line no 
 549 03cc 09F8010B 	    strb r0,[T2],#1 // length 
 550 03d0 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 551 03d2 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 552 03d6 00B500F0 	    _CALL parse_int 
 552      68F95DF8 
 552      04EB
 553 03e0 0AD0     	    beq 2f 
 554              	// this is a line number     
 555 03e2 0129     	    cmp r1,#1 
 556 03e4 02D5     	    bpl 1f 
 557 03e6 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 558 03ea 27E3     	    b tb_error  
 559 03ec B1F5803F 	1:  cmp r1,#65536
 560 03f0 F9D5     	    bpl 0b 
 561              	    // write line # to pad 
 562 03f2 29F8031C 	    strh r1,[T2,#-3]
 563 03f6 2360     	    str r3,[UPP,#IN_SAVED]
 564              	2:  // check for pad full 
 565 03f8 C145     	    cmp T2,T1
 566 03fa 02DB     	    blt 3f 
 567 03fc 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 568 0400 1CE3     	    b tb_error 
 569 0402 00B500F0 	3:  _CALL comp_token 
 569      28F85DF8 
 569      04EB
 570 040c 0028     	    cmp r0,#TK_NONE 
 571 040e 01D0     	    beq 4f 
 572 0410 2360     	    str r3,[UPP,#IN_SAVED]
 573 0412 F1E7     	    b 2b 
 574              	4: // compilation completed 
 575 0414 DFF86439 	    ldr r3,pad 
 576 0418 A9EB0300 	    sub r0,T2,r3 // line length 
 577 041c 9870     	    strb r0,[r3,#2]
 578 041e 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 579 0420 1888     	    ldrh r0,[r3] // line number 
 580 0422 70B1     	    cbz r0,8f  
 581              	// insert line in text buffer 
 582 0424 206C     	    ldr r0,[UPP,#FLAGS]
 583 0426 10F0080F 	    tst r0,#FSTOP
 584 042a 02D0     	    beq 7f 
 585 042c 4FF01000 	    mov r0,#ERR_CANT_PROG 
 586 0430 04E3     	    b tb_error 
 587 0432 1846     	7:  mov r0,r3 
 588 0434 00B5FFF7 	    _CALL insert_line 
 588      93FF5DF8 
 588      04EB
 589 043e 4040     	    eors r0,r0 
 590 0440 08E0     	    b 9f 
 591 0442 9B46     	8:  mov BPTR,r3 // *token_list 
 592 0444 4FF0030A 	    mov IN,#3
 593 0448 206C     	    ldr r0,[UPP,#FLAGS]
 594 044a A0F12000 	    sub r0,#FCOMP
 595 044e 2064     	    str r0,[UPP,#FLAGS]
 596 0450 5FF0FF30 	    movs r0,#-1 
ARM GAS  tinyBasic.s 			page 24


 597 0454 7047     	9:  _RET 
 598              	
 599              	/*********************************************
 600              	    compile next token from source 
 601              	    input: 
 602              	      r3 		tib index  
 603              	      T1    tib adr
 604              	      T2    insert point in pad  
 605              	    output:
 606              	      r0     token attribute 
 607              	      r1 		token value
 608              	      r3     tib index updated    
 609              	      T2     updated 
 610              	      use:
 611              	**********************************************/
 612 0456 00BF     	    _FUNC comp_token 
 613 0458 40B4     	    push {r6}
 614 045a 18F80300 	    ldrb r0,[T1,r3]
 615 045e 0040     	    ands r0,r0 
 616 0460 7DD0     	    beq store_r0  // reached end of text  
 617 0462 4FF02000 	    mov r0,#SPACE 
 618 0466 00B500F0 	    _CALL skip  // skip spaces 
 618      70F95DF8 
 618      04EB
 619 0470 18F80300 	    ldrb r0,[T1,r3]
 620 0474 0040     	    ands r0,r0 
 621 0476 72D0     	    beq store_r0  // reached end of text 
 622 0478 03F10103 	    add r3,#1
 623 047c 00B500F0 	    _CALL is_letter 
 623      99F95DF8 
 623      04EB
 624 0486 0BD1     	    bne 1f
 625 0488 A3F10103 	    sub r3,#1 
 626 048c 00B500F0 	    _CALL comp_label // parse and compile label 
 626      AFF85DF8 
 626      04EB
 627 0496 1728     	    cmp r0,#TK_CMD 
 628 0498 71D1     	    bne token_exit 
 629 049a 3A29     	    cmp r1,#REM_IDX 
 630 049c 4DD0     	    beq tick2 
 631 049e 6EE0     	    b token_exit 
 632 04a0 00B500F0 	1:  _CALL is_special
 632      6FF85DF8 
 632      04EB
 633 04aa DFF8E06C 	    ldr r6,=token_ofs
 634 04ae D6E811F0 	    tbh [r6,r1] 
 635              	tok_idx0:     
 636              	//  not special char.  
 637 04b2 57E0     	    b try_number 
 638              	// single char token with no value 
 639              	single: 
 640 04b4 DFF8D86C 	    ldr r6,=tok_single
 641 04b8 705C     	    ldrb r0,[r6,r1] 
 642 04ba 50E0     	    b store_r0
 643              	lt:
 644 04bc 4FF00F00 	    mov r0,#TK_LT
 645 04c0 18F80310 	    ldrb r1,[T1,r3]
ARM GAS  tinyBasic.s 			page 25


 646 04c4 3E29     	    cmp r1,#'>' 
 647 04c6 06D0     	    beq 1f
 648 04c8 0AE0     	    b 2f 
 649              	gt:
 650 04ca 4FF00E00 	    mov r0,#TK_GT 
 651 04ce 18F80310 	    ldrb r1,[T1,r3]
 652 04d2 3C29     	    cmp r1,#'<'
 653 04d4 04D1     	    bne 2f  
 654 04d6 03F10103 	1:  add r3,#1
 655 04da 4FF01200 	    mov r0,#TK_NE  
 656 04de 3EE0     	    b store_r0
 657 04e0 3D29     	2:  cmp r1,#'=' 
 658 04e2 3CD1     	    bne store_r0  
 659 04e4 03F10103 	    add r3,#1
 660 04e8 00F10200 	    add r0,#2
 661 04ec 37E0     	    b store_r0       
 662              	bkslash:
 663 04ee 18F80310 	    ldrb r1,[T1,r3]
 664 04f2 03F10103 	    add r3,#1
 665 04f6 4FF01300 	    mov r0,#TK_CHAR 
 666 04fa 09F8010B 	    strb r0,[T2],#1
 667 04fe 09F8011B 	    strb r1,[T2],#1
 668 0502 3CE0     	    b token_exit 
 669              	prt_cmd: 
 670 0504 4FF01700 	    mov r0,#TK_CMD 
 671 0508 4FF03501 	    mov r1,#PRT_IDX
 672 050c 09F8010B 	    strb r0,[T2],#1
 673 0510 09F8011B 	    strb r1,[T2],#1
 674 0514 33E0     	    b token_exit 
 675              	quote:
 676 0516 4FF01C00 	    mov r0,#TK_QSTR 
 677 051a 09F8010B 	    strb r0,[T2],#1
 678 051e 00B500F0 	    _CALL parse_quote
 678      E0F85DF8 
 678      04EB
 679 0528 29E0     	    b token_exit
 680              	tick: 
 681              	// copy comment in pad 
 682 052a 4FF01700 	    mov r0,#TK_CMD 
 683 052e 4FF03A01 	    mov r1,#REM_IDX 
 684 0532 09F8010B 	    strb r0,[T2],#1 
 685 0536 09F8011B 	    strb r1,[T2],#1
 686              	tick2:
 687 053a 08EB0300 	    add r0,T1,r3 
 688 053e 4946     	    mov r1,T2 
 689 0540 00B5FFF7 	    _CALL strcpy 
 689      FEFF5DF8 
 689      04EB
 690 054a 00B5FFF7 	    _CALL strlen 
 690      FEFF5DF8 
 690      04EB
 691 0554 8144     	    add T2,r0
 692 0556 09F10109 	    add T2,#1
 693 055a 6368     	    ldr r3,[UPP,#COUNT]
 694 055c 0FE0     	    b token_exit
 695              	store_r0: 
 696 055e 09F8010B 	    strb r0,[T2],#1
ARM GAS  tinyBasic.s 			page 26


 697 0562 0CE0     	    b token_exit 
 698              	try_number:
 699 0564 A3F10103 	    sub r3,#1
 700 0568 00B500F0 	    _CALL parse_int  
 700      9FF85DF8 
 700      04EB
 701 0572 00F05F82 	    beq syntax_error  
 702 0576 09F8010B 	    strb r0,[T2],#1 
 703 057a 49F8041B 	    str r1,[T2],#4
 704              	token_exit:
 705 057e 40BC     	    pop {r6}
 706 0580 7047     	    _RET 
 707              	
 708              	
 709              	/****************************
 710              	    is_special  
 711              	    check for non alphanum
 712              	    input:
 713              	      r0    character to scan 
 714              	    output:
 715              	      r0    character 
 716              	      r1    0 || index 
 717              	    use: 
 718              	      r1    scan index 
 719              	      r2    temp 
 720              	      r3    char_list 
 721              	*****************************/
 722 0582 00BF     	    _FUNC is_special 
 723 0584 0CB4     	    push {r2,r3}
 724 0586 4FF00101 	    mov r1,#1
 725 058a DFF8083C 	    ldr r3,=char_list 
 726 058e 5A5C     	1:  ldrb r2,[r3,r1]
 727 0590 22B1     	    cbz r2,8f 
 728 0592 8242     	    cmp r2,r0 
 729 0594 04D0     	    beq 9f 
 730 0596 01F10101 	    add r1,#1 
 731 059a F8E7     	    b 1b
 732 059c 81EA0101 	8:  eor r1,r1     
 733 05a0 0CBC     	9:  pop {r2,r3}
 734 05a2 7047     	    _RET 
 735              	
 736              	char_list:
 737 05a4 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 737      28293A23 
 737      2D2B2A2F 
 737      253D3C3E 
 737      5C3F2722 
 738              	
 739              	tok_single:
 740 05b9 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 740      050601
 741 05c0 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 741      0A0B0D
 742              	
 743 05c7 00       	  .p2align 2
 744              	token_ofs:
 745 05c8 0000     	  .hword  0 // not found
ARM GAS  tinyBasic.s 			page 27


 746              	  // TK_COMMA...TK_EQUAL , 13 
 747 05ca 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 747      01000100 
 748 05d2 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 748      01000100 
 749 05da 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 749      01000100 
 750 05e2 0100     	  .hword  (single-tok_idx0)/2    
 751              	  // '<','>'
 752 05e4 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 753              	  // '\'
 754 05e8 1E00     	  .hword  (bkslash-tok_idx0)/2
 755              	  // '?' 
 756 05ea 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 757              	  // "'"  
 758 05ec 3C00     	  .hword  (tick-tok_idx0)/2 
 759              	  // '"' quote 
 760 05ee 3200     	  .hword (quote-tok_idx0)/2
 761              	
 762              	  .p2align 2
 763              	
 764              	/****************************
 765              	    comp_label
 766              	    compile a label 
 767              	    it can be a target|keyword|
 768              	    variable| user constant  
 769              	    label form: [A..Z]+
 770              	    input:
 771              	      *buffer 
 772              	    output:
 773              	      r0  token type 
 774              	      r1  token value 
 775              	      T2  updated 
 776              	      R3  updated
 777              	    use:
 778              	****************************/
 779              	    _FUNC comp_label
 780 05f0 24B4     	    push {r2,r5}
 781 05f2 4DF8049D 	    push {T2}
 782 05f6 82EA0202 	    eor r2,r2
 783 05fa 4FF00605 	    mov r5,#6 
 784 05fe 18F80300 	1:  ldrb r0,[T1,r3]
 785 0602 00B500F0 	    _CALL is_letter 
 785      D6F85DF8 
 785      04EB
 786 060c 09D1     	    bne 2f // not letter 
 787 060e 00B500F0 	    _CALL upper 
 787      A8F85DF8 
 787      04EB
 788 0618 09F8010B 	    strb r0,[T2],#1
 789 061c 03F10103 	    add r3,#1
 790 0620 EDE7     	    b 1b 
 791 0622 80EA0000 	2:  eor r0,r0 
 792 0626 89F80000 	    strb r0,[T2]
 793              	// is this a variable ?
 794 062a 5DF8049B 	    pop {T2}
 795 062e 99F80100 	    ldrb r0,[T2,#1]
ARM GAS  tinyBasic.s 			page 28


 796 0632 30B9     	    cbnz r0,3f // length >1 not variable 
 797 0634 99F80010 	    ldrb r1,[T2]
 798 0638 A1F14101 	    sub r1,#'A' 
 799 063c 4FF01400 	    mov r0,#TK_VAR
 800 0640 1CE0     	    b 8f 
 801              	3:  // try keyword 
 802 0642 4846     	    mov r0,T2 
 803 0644 DFF8501B 	    ldr r1,=kword_dict  
 804 0648 00B500F0 	    _CALL search_dict 
 804      B5FA5DF8 
 804      04EB
 805 0652 30B1     	    cbz r0,4f
 806 0654 1828     	    cmp r0,TK_SCONST  
 807 0656 11D1     	    bne 8f
 808              	    //system constant  
 809 0658 09F8010B 	    strb r0,[T2],#1
 810 065c 49F8041B 	    str r1,[T2],#4
 811 0660 10E0     	    b 9f 
 812              	4: // must be a label 
 813 0662 4846     	    mov r0,T2 
 814 0664 00B500F0 	    _CALL compress_label
 814      0FF85DF8 
 814      04EB
 815 066e 4FF01A00 	    mov r0,#TK_LABEL
 816 0672 09F8010B 	    strb r0,[T2],#1
 817 0676 49F8041B 	    str r1,[T2],#4
 818 067a 03E0     	    b 9f 
 819 067c 09F8010B 	8:  strb r0,[T2],#1
 820 0680 09F8011B 	    strb r1,[T2],#1          
 821 0684 24BC     	9:  pop {r2,r5}
 822 0686 7047     	    _RET 
 823              	
 824              	/********************************
 825              	    compress_label 
 826              	    compress label in integer 
 827              	    maximum 6 character, 
 828              	    ignore extras characters 
 829              	    input:
 830              	      r0  *label 
 831              	    output:
 832              	      r1   compressed label 
 833              	********************************/
 834              	    _FUNC compress_label
 835 0688 0CB4     	    push {r2,r3}
 836 068a 82EA0202 	    eor r2,r2 // compress value
 837 068e 4FF00603 	    mov r3,#6 // max characters 
 838 0692 10F8011B 	1:  ldrb r1,[r0],#1 
 839 0696 31B1     	    cbz r1,2f 
 840 0698 A1F14001 	    sub r1,#'@'
 841 069c 4FEA4212 	    lsl r2,#5
 842 06a0 0A44     	    add r2,r1
 843 06a2 013B     	    subs r3,#1 
 844 06a4 F5D1     	    bne 1b 
 845 06a6 1146     	2:  mov r1,r2     
 846 06a8 0CBC     	    pop {r2,r3}
 847 06aa 7047     	    _RET 
 848              	
ARM GAS  tinyBasic.s 			page 29


 849              	
 850              	/****************************
 851              	    parse_int 
 852              	    parse an integer from text
 853              	    if not valid integer 
 854              	    r1 return *buffer else 
 855              	    *buffer is incremented after integer 
 856              	  input:
 857              	    r0   *buffer 
 858              	  output:
 859              	    r0   TK_INTGR|TK_NONE
 860              	    r1   int|0   
 861              	  use:
 862              	    r3   tib index updated     
 863              	*****************************/
 864              	    _FUNC parse_int 
 865 06ac 4FF00A01 	    mov r1,#10 // default base 
 866 06b0 18F80300 	    ldrb r0,[T1,r3]
 867 06b4 2428     	    cmp r0,'$' 
 868 06b6 02D1     	    bne 2f 
 869 06b8 4FF01001 	    mov r1,#16 // hexadecimal number 
 870 06bc 03E0     	    b 3f  
 871 06be 2628     	2:  cmp r0,#'&' 
 872 06c0 03D1     	    bne 4f
 873 06c2 4FF00201 	    mov r1,#2 //binary number  
 874 06c6 03F10103 	3:  add r3,#1
 875 06ca 03EB0800 	4:  add r0,r3,T1 
 876 06ce 00B5FFF7 	    _CALL atoi 
 876      FEFF5DF8 
 876      04EB
 877 06d8 10B1     	    cbz r0,9f
 878 06da 0344     	    add r3,r0
 879 06dc 4FF01B00 	    mov r0,#TK_INTGR
 880 06e0 0040     	9:  ands r0,r0   
 881 06e2 7047     	    _RET 
 882              	
 883              	/*********************************************
 884              	    parse_quote 
 885              	    parse quoted string 
 886              	    input: 
 887              	      r3 		tib index  
 888              	      T1    tib adr
 889              	      T2    insert point in pad  
 890              	    output:
 891              	      r0     token attribute 
 892              	      r1 		*str 
 893              	      r3     tib index updated    
 894              	      T2     updated 
 895              	      use:
 896              	*********************************************/
 897              	    _FUNC parse_quote
 898 06e4 4DF8049D 	    push {T2} 
 899 06e8 18F80300 	1:  ldrb r0,[T1,r3]
 900 06ec 03F10103 	    add r3,#1 
 901 06f0 2228     	    cmp r0,#'"'
 902 06f2 09D0     	    beq 9f 
 903 06f4 5C28     	    cmp r0,#'\\'
ARM GAS  tinyBasic.s 			page 30


 904 06f6 04D1     	    bne 2f 
 905 06f8 00B500F0 	    _CALL get_escaped_char 
 905      0DF85DF8 
 905      04EB
 906 0702 09F8010B 	2:  strb r0,[T2],#1
 907 0706 EFE7     	    b 1b 
 908 0708 80EA0000 	9:  eor  r0,r0
 909 070c 09F8010B 	    strb r0,[T2],#1
 910 0710 4FF01C00 	    mov r0,#TK_QSTR
 911 0714 02BC     	    pop {r1}
 912 0716 7047     	    _RET 
 913              	
 914              	/**********************************************
 915              	    get_escaped_char 
 916              	    convert "\c" in quoted string 
 917              	    input:
 918              	      r0 
 919              	      r3   index 
 920              	      T1   tib 
 921              	    output:
 922              	      r0   replacement char
 923              	      r3   updated 
 924              	    use:
 925              	      r1   *table 
 926              	      r2   temp 
 927              	**********************************************/
 928              	    _FUNC get_escaped_char 
 929 0718 06B4     	    push {r1,r2}
 930 071a 18F80300 	    ldrb r0,[T1,r3]
 931 071e 03F10103 	    add r3,#1
 932 0722 2228     	    cmp r0,#'"' 
 933 0724 0BD0     	    beq 9f 
 934 0726 DFF8741A 	1:  ldr r1,=escaped 
 935 072a 11F8012B 	2:  ldrb r2,[r1],#1
 936 072e 12B1     	    cbz r2,6f 
 937 0730 8242     	    cmp r2,r0 
 938 0732 02D0     	    beq 7f 
 939 0734 F9E7     	    b 2b
 940 0736 A0F10702 	6:  sub r2,r0,#7     
 941 073a 02F10700 	7:  add r0,r2,#7
 942 073e 06BC     	9:  pop {r1,r2}   
 943 0740 7047     	    _RET
 944              	
 945 0742 6162746E 	escaped: .asciz "abtnvfr"
 945      76667200 
 946              	
 947              	/*********************************************
 948              	   skip character in TIB 
 949              	   input:
 950              	      r0    character to skip 
 951              	      r3    tib index 
 952              	      T1    tib adr
 953              	    output: 
 954              	      r3    updated
 955              	    use:
 956              	      r1     
 957              	**********************************************/   
ARM GAS  tinyBasic.s 			page 31


 958 074a 00BF     	    _FUNC skip
 959 074c 02B4     	    push {r1} 
 960 074e 18F80310 	1:  ldrb r1,[T1,r3]
 961 0752 8142     	    cmp r1,r0
 962 0754 02D1     	    bne 2f
 963 0756 03F10103 	    add r3,#1 
 964 075a F8E7     	    b 1b 
 965 075c 2360     	2:  str r3,[UPP,#IN_SAVED]
 966 075e 02BC     	    pop {r1}
 967 0760 7047     	    _RET
 968              	
 969              	/********************************************
 970              	    upper
 971              	    convert character in upper case 
 972              	    input: 
 973              	      r0   character 
 974              	    output:
 975              	      r0   upper case character 
 976              	*********************************************/
 977 0762 00BF     	    _FUNC upper 
 978 0764 6128     	    cmp r0,#'a' 
 979 0766 03DB     	    blt 9f 
 980 0768 7A28     	    cmp r0,#'z' 
 981 076a 01DC     	    bgt 9f 
 982 076c 00F05F00 	    and r0,#0x5f 
 983 0770 7047     	9:  _RET 
 984              	
 985              	/***************************************
 986              	   is_digit 
 987              	   check if char is decimal digit.
 988              	   convert to decimal digit.
 989              	   input:
 990              	      r0    char 
 991              	   output:
 992              	      r0        if Z then converted digit else not changed
 993              	      Z flag    1 true | 0 false  
 994              	***************************************/
 995 0772 00BF     	    _GBL_FUNC is_digit 
 996 0774 02B4     	    push {r1} 
 997 0776 4FF0FF31 	    mov r1,#-1   
 998 077a 3028     	    cmp r0,#'0' 
 999 077c 05DB     	    blt 9f
 1000 077e 3A28     	    cmp r0,'9'+1
 1001 0780 03D5     	    bpl 9f 
 1002 0782 81EA0101 	    eor r1,r1 
 1003 0786 A0F13000 	    sub r0,#'0'  
 1004              	9:   
 1005 078a 0940     	    ands r1,r1
 1006 078c 02BC     	    pop {r1} 
 1007 078e 7047     	    _RET 
 1008              	
 1009              	/***************************************
 1010              	    is_hex 
 1011              	    check for hexadecimal digit 
 1012              	    convert to hex digit.
 1013              	    input:
 1014              	      r0    
ARM GAS  tinyBasic.s 			page 32


 1015              	    output:
 1016              	      r0         if Z then converted digit 
 1017              	      Z  flag    1 true | 0 false         
 1018              	***************************************/
 1019              	    _FUNC is_hex 
 1020 0790 02B4     	    push {r1}
 1021 0792 80EA0000 	    eor r0,r0 
 1022 0796 4128     	    cmp r0,#'A' 
 1023 0798 01D4     	    bmi 1f 
 1024 079a A0F10700 	    sub r0,#7 
 1025 079e A0F13000 	1:  sub r0,#'0'
 1026 07a2 01D4     	    bmi 2f 
 1027 07a4 1028     	    cmp r0,#16
 1028 07a6 01D4     	    bmi 9f 
 1029 07a8 6FEA0101 	2:  mvn r1,r1  
 1030 07ac 0940     	9:  ands r1,r1 
 1031 07ae 02BC     	    pop {r1}
 1032 07b0 7047     	    _RET 
 1033              	
 1034              	/***************************************
 1035              	    is_letter 
 1036              	    check if character is {a..z,A..Z} 
 1037              	  input:
 1038              	    r0   character 
 1039              	  output: 
 1040              	    r0       same character 
 1041              	    Z flag   1 true | 0 false  
 1042              	****************************************/
 1043 07b2 00BF     	    _FUNC is_letter
 1044 07b4 02B4     	    push {r1} 
 1045 07b6 81EA0101 	    eor r1,r1 
 1046 07ba 4128     	    cmp r0,#'A' 
 1047 07bc 05D4     	    bmi 8f 
 1048 07be 5B28     	    cmp r0,#'Z'+1 
 1049 07c0 05D4     	    bmi 9f
 1050 07c2 6128     	    cmp r0,#'a' 
 1051 07c4 01D4     	    bmi 8f 
 1052 07c6 7B28     	    cmp r0,#'z'+1
 1053 07c8 01D4     	    bmi 9f  
 1054 07ca 6FEA0101 	8:  mvn r1,r1  
 1055 07ce 0940     	9:  ands r1,r1 
 1056 07d0 02BC     	    pop {r1}
 1057 07d2 7047     	    _RET 
 1058              	
 1059              	
 1060              	/******************************************
 1061              	    atoi 
 1062              	    convert ascii to integer 
 1063              	    input:
 1064              	      r0   *buffer 
 1065              	      r1   base 
 1066              	    output:
 1067              	      r0   0 no integer found 
 1068              	      r1   integer
 1069              	    use:
 1070              	      r2   base  
 1071              	      T1   *buffer 
ARM GAS  tinyBasic.s 			page 33


 1072              	      T2   digit count  
 1073              	******************************************/
 1074              	    _GBL_FUNC atoi 
 1075 07d4 2DE90403 	    push {r2,T1,T2}
 1076 07d8 8046     	    mov T1,r0  // *buffer 
 1077 07da 0A46     	    mov r2,r1  // base  
 1078 07dc 81EA0101 	    eor r1,r1  // converted integer 
 1079 07e0 89EA0909 	    eor T2,T2  // digit count 
 1080 07e4 18F8010B 	1:  ldrb r0,[T1],#1
 1081 07e8 00B5FFF7 	    _CALL upper 
 1081      BBFF5DF8 
 1081      04EB
 1082 07f2 3028     	    cmp r0,#'0'
 1083 07f4 0FD4     	    bmi 8f
 1084 07f6 3A28     	    cmp r0,#'9'+1 
 1085 07f8 03D4     	    bmi 2f 
 1086 07fa 4128     	    cmp r0,#'A'
 1087 07fc 0BD4     	    bmi 8f 
 1088 07fe A0F10700 	    sub r0,#7 
 1089 0802 A0F13000 	2:  sub r0,#'0' 
 1090 0806 9042     	    cmp r0,r2
 1091 0808 05D5     	    bpl 8f  
 1092 080a 02FB01F1 	    mul r1,r2 
 1093 080e 0144     	    add r1,r0
 1094 0810 09F10109 	    add T2,#1
 1095 0814 E6E7     	    b 1b 
 1096 0816 4846     	8:  mov r0,T2  
 1097 0818 BDE80403 	    pop {r2,T1,T2}
 1098 081c 7047     	    _RET 
 1099              	
 1100              	
 1101              	
 1102              	/*******************
 1103              	    DECOMPILER 
 1104              	*******************/
 1105              	
 1106              	/********************************************
 1107              	    cmd_name 
 1108              	    search bytecode in dictionary and 
 1109              	    return its name 
 1110              	  input:
 1111              	    r0    keyword bytecode 
 1112              	  ouput:
 1113              	    r0    name string 
 1114              	  use:
 1115              	    T1    link 
 1116              	    T2    tmp 
 1117              	*********************************************/
 1118 081e 00BF     	    _FUNC cmd_name 
 1119 0820 2DE90003 	    push {T1,T2}
 1120 0824 DFF87089 	    ldr T1,=kword_dict 
 1121 0828 58F8089C 	1:  ldr T2,[T1,#-8]
 1122 082c 8145     	    cmp T2,r0 
 1123 082e 04D0     	    beq 2f 
 1124 0830 58F80C8C 	    ldr T1,[T1,#-12]
 1125 0834 B8F1000F 	    cmp T1,#0
 1126 0838 F6D1     	    bne 1b  
ARM GAS  tinyBasic.s 			page 34


 1127 083a 4046     	2:  mov r0,T1 
 1128 083c BDE80003 	    pop {T1,T2}
 1129 0840 7047     	    _RET
 1130              	
 1131              	/*****************************
 1132              	  decompile_line 
 1133              	  detokenize BASIC line 
 1134              	  input:
 1135              	    r0  *token list 
 1136              	    r1  *output buffer 
 1137              	  output:
 1138              	    r0  *output buffer (.asciz) 
 1139              	  use:
 1140              	    T1  *output buffer
 1141              	    BPTR  *token list
 1142              	    IN  offset in token list  
 1143              	******************************/
 1144 0842 00BF     	    _GBL_FUNC decompile_line
 1145 0844 2DE90E01 	    push {r1,r2,r3,T1} 
 1146 0848 8346     	    mov BPTR,r0 
 1147 084a 4FF0000A 	    mov IN,#0
 1148 084e 8846     	    mov T1,r1 
 1149 0850 3BF80A00 	    ldrh r0,[BPTR,IN]
 1150 0854 0AF1020A 	    add IN,#2 
 1151 0858 4FF00A01 	    mov r1,#10 
 1152 085c 00B5FFF7 	    _CALL itoa
 1152      FEFF5DF8 
 1152      04EB
 1153 0866 4146     	    mov r1,T1
 1154 0868 00B5FFF7 	    _CALL strcpy
 1154      FEFF5DF8 
 1154      04EB
 1155 0872 4046     	    mov r0,T1 
 1156 0874 00B5FFF7 	    _CALL strlen
 1156      FEFF5DF8 
 1156      04EB
 1157 087e 8044     	    add T1,r0 
 1158 0880 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1159 0884 0AF1010A 	    add IN,#1 
 1160 0888 6060     	    str r0,[UPP,#COUNT]
 1161              	decomp_loop:
 1162 088a 00B500F0 	    _CALL next_token
 1162      C8FA5DF8 
 1162      04EB
 1163 0894 0028     	    cmp r0,#TK_NONE 
 1164 0896 00F0A680 	    beq 9f
 1165 089a 1028     	    cmp r0,#TK_GE 
 1166 089c 05D5     	    bpl 1f 
 1167 089e DFF80019 	    ldr r1,=single_char 
 1168 08a2 085C     	    ldrb r0,[r1,r0]
 1169 08a4 08F8010B 	    strb r0,[T1],#1 
 1170 08a8 EFE7     	    b decomp_loop
 1171              	1: 
 1172 08aa 1328     	    cmp r0,#TK_CHAR  
 1173 08ac 14D5     	    bpl 2f 
 1174 08ae A0F11000 	    sub r0,#TK_GE
 1175 08b2 4FEA8000 	    lsl r0,#2 
ARM GAS  tinyBasic.s 			page 35


 1176 08b6 DFF8EC18 	    ldr r1,=relop_str 
 1177 08ba 0858     	    ldr r0,[r1,r0]
 1178 08bc 4146     	    mov r1,T1 
 1179 08be 00B5FFF7 	    _CALL strcpy 
 1179      FEFF5DF8 
 1179      04EB
 1180 08c8 4046     	    mov r0,T1 
 1181 08ca 00B5FFF7 	    _CALL strlen 
 1181      FEFF5DF8 
 1181      04EB
 1182 08d4 8044     	    add T1,r0 
 1183 08d6 D8E7     	    b decomp_loop
 1184 08d8 1328     	2:  cmp r0,#TK_CHAR 
 1185 08da 06D1     	    bne 3f 
 1186 08dc 4FF05C00 	    mov r0,#'\\'
 1187 08e0 08F8010B 	    strb r0,[T1],#1
 1188 08e4 08F8011B 	    strb r1,[T1],#1
 1189              	//    mov r0,#SPACE 
 1190              	//    strb r0,[T1],#1
 1191 08e8 CFE7     	    b decomp_loop 
 1192 08ea 1428     	3:  cmp r0,#TK_VAR 
 1193 08ec 08D1     	    bne 4f 
 1194 08ee 01F14100 	    add r0,r1,'A'
 1195 08f2 08F8010B 	    strb r0,[T1],#1 
 1196 08f6 4FF02000 	    mov r0,#SPACE 
 1197 08fa 08F8010B 	    strb r0,[T1],#1
 1198 08fe C4E7     	    b decomp_loop 
 1199 0900 1A28     	4:  cmp r0,#TK_LABEL 
 1200 0902 2CD5     	    bpl 5f   
 1201 0904 03B4     	    push {r0,r1}
 1202 0906 0846     	    mov r0,r1 
 1203 0908 00B5FFF7 	    _CALL cmd_name
 1203      89FF5DF8 
 1203      04EB
 1204 0912 4146     	    mov r1,T1 
 1205 0914 00B5FFF7 	    _CALL strcpy 
 1205      FEFF5DF8 
 1205      04EB
 1206 091e 4046     	    mov r0,T1 
 1207 0920 00B5FFF7 	    _CALL strlen 
 1207      FEFF5DF8 
 1207      04EB
 1208 092a 8044     	    add T1,r0
 1209 092c 03BC     	    pop {r0,r1}
 1210 092e 4FF02000 	    mov r0,#SPACE 
 1211 0932 08F8010B 	    strb r0,[T1],#1 
 1212 0936 3A29     	    cmp r1,#REM_IDX
 1213 0938 A7D1     	    bne decomp_loop 
 1214 093a 0BEB0A00 	    add r0,BPTR,IN
 1215 093e 4146     	    mov r1,T1   
 1216 0940 00B5FFF7 	    _CALL strcpy
 1216      FEFF5DF8 
 1216      04EB
 1217 094a 4046     	    mov r0,T1 
 1218 094c 00B5FFF7 	    _CALL strlen
 1218      FEFF5DF8 
 1218      04EB
ARM GAS  tinyBasic.s 			page 36


 1219 0956 8044     	    add T1,r0
 1220 0958 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1221 095c 43E0     	    b 9f 
 1222 095e 1B28     	5:  cmp r0,#TK_INTGR
 1223 0960 14D1     	    bne 6f  
 1224 0962 0846     	    mov r0,r1 
 1225 0964 A169     	    ldr r1,[UPP,#BASE]
 1226 0966 00B5FFF7 	    _CALL itoa
 1226      FEFF5DF8 
 1226      04EB
 1227 0970 4146     	    mov r1,T1 
 1228 0972 00B5FFF7 	    _CALL strcpy
 1228      FEFF5DF8 
 1228      04EB
 1229 097c 4046     	    mov r0,T1 
 1230 097e 00B5FFF7 	    _CALL strlen
 1230      FEFF5DF8 
 1230      04EB
 1231 0988 8044     	    add T1,r0 
 1232 098a 7EE7     	    b decomp_loop 
 1233 098c 1A28     	6:  cmp r0,#TK_LABEL
 1234 098e 13D1     	    bne 7f
 1235 0990 4FF01902 	    mov r2,#25
 1236 0994 4FF6FF73 	    mov r3,#0xffff 
 1237 0998 C3F6FF73 	    movt r3,#0x3fff 
 1238 099c 01EA0301 	0:  and r1,r3 
 1239 09a0 4FEA5313 	    lsr r3,#5 
 1240 09a4 31FA02F0 	    lsrs r0,r1,r2 
 1241 09a8 03D0     	    beq 2f
 1242 09aa 00F14000 	    add r0,#'@'
 1243 09ae 08F8010B 	    strb r0,[T1],#1
 1244 09b2 053A     	2:  subs r2,#5 
 1245 09b4 F2DA     	    bge 0b 
 1246 09b6 68E7     	    b decomp_loop
 1247 09b8 4FF02200 	7:  mov r0,#'"'
 1248 09bc 08F8010B 	    strb r0,[T1],#1 
 1249 09c0 0846     	    mov r0,r1
 1250 09c2 4146     	    mov r1,T1  
 1251 09c4 00B5FFF7 	    _CALL strcpy
 1251      FEFF5DF8 
 1251      04EB
 1252 09ce 4046     	    mov r0,T1 
 1253 09d0 00B5FFF7 	    _CALL strlen 
 1253      FEFF5DF8 
 1253      04EB
 1254 09da 8044     	    add T1,r0 
 1255 09dc 4FF02200 	    mov r0,#'"'
 1256 09e0 08F8010B 	    strb r0,[T1],#1 
 1257 09e4 51E7     	    b decomp_loop
 1258 09e6 80EA0000 	9:  eor r0,r0 
 1259 09ea 88F80000 	    strb r0,[T1]
 1260 09ee BDE80E01 	    pop {r1,r2,r3,T1}
 1261 09f2 0846     	    mov r0,r1 
 1262 09f4 7047     	    _RET 
 1263              	
 1264 09f6 020A0000 	relop_str: .word ge_str,le_str,ne_str 
 1264      050A0000 
ARM GAS  tinyBasic.s 			page 37


 1264      080A0000 
 1265 0a02 3E3D00   	ge_str: .asciz ">="
 1266 0a05 3C3D00   	le_str: .asciz "<="
 1267 0a08 3C3E00   	ne_str: .asciz "<>"
 1268              	
 1269              	single_char:
 1270 0a0b 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1270      2328292B 
 1270      2D2A2F25 
 1271 0a17 403D3E3C 	  .byte '@','=', '>', '<' 
 1272              	
 1273              	
 1274              	
 1275              	
 1276              	/**********************************
 1277              	  modulo 
 1278              	  compute r0 mod r1
 1279              	  input:
 1280              	    r0   dividend
 1281              	    r1   divisor 
 1282              	  output:
 1283              	    r0   TK_INTGR 
 1284              	    r1   r0 mod r1 
 1285              	*********************************/
 1286 0a1b 00       	    _GBL_FUNC modulo 
 1287 0a1c 01B4     	    push {r0}
 1288 0a1e B0FBF1F0 	    udiv r0,r1 
 1289 0a22 01FB00F0 	    mul  r0,r1 
 1290 0a26 02BC     	    pop {r1}
 1291 0a28 A1EB0001 	    sub r1,r0
 1292 0a2c 4FF01B00 	    mov r0,#TK_INTGR
 1293 0a30 7047     	    _RET 
 1294              	
 1295              	/**********************************
 1296              	      BASIC commands 
 1297              	**********************************/
 1298              	
 1299              	/*********************************
 1300              	    syntax_error 
 1301              	    display syntax error message and 
 1302              	    abort program 
 1303              	  input:
 1304              	    none  
 1305              	  output: 
 1306              	    none 
 1307              	  use:
 1308              	*********************************/
 1309 0a32 00BF     	    _FUNC syntax_error 
 1310 0a34 4FF00200 	    mov r0,#ERR_SYNTAX
 1311 0a38 00E0     	    b tb_error 
 1312              	
 1313              	/*********************************
 1314              	    tb_error 
 1315              	    display BASIC error and 
 1316              	    abort program. 
 1317              	  input:
 1318              	    r0    error code   
ARM GAS  tinyBasic.s 			page 38


 1319              	  output: 
 1320              	    none 
 1321              	  use:
 1322              	    r1    temp 
 1323              	*********************************/
 1324 0a3a 00BF     	    _FUNC tb_error 
 1325 0a3c 216C     	    ldr r1,[UPP,#FLAGS]
 1326 0a3e 11F0200F 	    tst r1,#FCOMP
 1327 0a42 43D1     	    bne compile_error
 1328              	rt_error:
 1329 0a44 5246     	    mov r2,IN 
 1330 0a46 01B4     	    push {r0}
 1331 0a48 DFF85C07 	    ldr r0,=rt_error_msg 
 1332 0a4c 00B5FFF7 	    _CALL uart_puts 
 1332      FEFF5DF8 
 1332      04EB
 1333 0a56 01BC     	    pop {r0}
 1334 0a58 DFF85017 	    ldr r1,=err_msg  
 1335 0a5c 4FEA8000 	    lsl r0,#2 
 1336 0a60 0858     	    ldr r0,[r1,r0]
 1337 0a62 00B5FFF7 	    _CALL uart_puts
 1337      FEFF5DF8 
 1337      04EB
 1338              	// decompile and print faulty line      
 1339 0a6c 5846     	    mov r0,BPTR
 1340 0a6e 5246     	    mov r2,IN  
 1341 0a70 DFF80813 	    ldr r1,pad 
 1342 0a74 00B5FFF7 	    _CALL decompile_line
 1342      FEFF5DF8 
 1342      04EB
 1343 0a7e 00B5FFF7 	    _CALL uart_puts 
 1343      FEFF5DF8 
 1343      04EB
 1344 0a88 00B5FFF7 	    _CALL cr 
 1344      FEFF5DF8 
 1344      04EB
 1345              	// print error offset on line      
 1346 0a92 DFF81C07 	    ldr r0,=token_at_msg 
 1347 0a96 00B5FFF7 	    _CALL uart_puts 
 1347      FEFF5DF8 
 1347      04EB
 1348 0aa0 1046     	    mov r0,r2 
 1349 0aa2 4FF01001 	    mov r1,#16 
 1350 0aa6 00B5FFF7 	    _CALL print_int
 1350      FEFF5DF8 
 1350      04EB
 1351 0ab0 00B5FFF7 	    _CALL cr
 1351      FEFF5DF8 
 1351      04EB
 1352              	// dump tokenize line 
 1353 0aba 5846     	    mov r0,BPTR
 1354 0abc 8278     	    ldrb r2,[r0,#2]
 1355 0abe 00B500F0 	    _CALL dump01 
 1355      E6F95DF8 
 1355      04EB
 1356 0ac8 FFF7FEBF 	    b warm_start 
 1357              	compile_error:
ARM GAS  tinyBasic.s 			page 39


 1358 0acc DFF8DC16 	    ldr r1,=err_msg 
 1359 0ad0 4FEA8000 	    lsl r0,#2 
 1360 0ad4 0858     	    ldr r0,[r1,r0]
 1361 0ad6 00B5FFF7 	    _CALL uart_puts
 1361      FEFF5DF8 
 1361      04EB
 1362 0ae0 A068     	    ldr r0,[UPP,#BASICPTR]
 1363 0ae2 00B5FFF7 	    _CALL uart_puts
 1363      FEFF5DF8 
 1363      04EB
 1364 0aec 00B5FFF7 	    _CALL cr
 1364      FEFF5DF8 
 1364      04EB
 1365 0af6 2068     	    ldr r0,[UPP,#IN_SAVED]
 1366 0af8 00B5FFF7 	    _CALL spaces 
 1366      FEFF5DF8 
 1366      04EB
 1367 0b02 4FF05E00 	    mov r0,#'^' 
 1368 0b06 00B5FFF7 	    _CALL uart_putc
 1368      FEFF5DF8 
 1368      04EB
 1369 0b10 00B5FFF7 	    _CALL cr
 1369      FEFF5DF8 
 1369      04EB
 1370 0b1a FFF7FEBF 	    b  warm_start  
 1371              	    
 1372 0b1e 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1372      74696D65 
 1372      20657272 
 1372      6F723A20 
 1372      00
 1373 0b2f 746F6B65 	token_at_msg: .asciz "token offset: "
 1373      6E206F66 
 1373      66736574 
 1373      3A2000
 1374              	
 1375              	
 1376              	err_msg:
 1377 0b3e 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1377      00000000 
 1377      0D000000 
 1377      1B000000 
 1377      34000000 
 1378 0b56 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1378      6F000000 
 1378      89000000 
 1378      9A000000 
 1378      AB000000 
 1379 0b6a B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1379      EA000000 
 1379      FA000000 
 1379      0E010000 
 1379      21010000 
 1380 0b7e 2E010000 	   .word err_cant_prog 
 1381              	
 1382              	    .section .rodata.tb_error 
 1383              	
ARM GAS  tinyBasic.s 			page 40


 1384 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1384      72792066 
 1384      756C6C0A 
 1384      00
 1385 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1385      61782065 
 1385      72726F72 
 1385      0A00
 1386 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1386      206F7065 
 1386      72617469 
 1386      6F6E206F 
 1386      76657266 
 1387 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1387      73696F6E 
 1387      20627920 
 1387      300A00
 1388 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1388      6C696420 
 1388      6C696E65 
 1388      206E756D 
 1388      6265722E 
 1389 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1389      74696D65 
 1389      206F6E6C 
 1389      79207573 
 1389      6167652E 
 1390 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1390      616E6420 
 1390      6C696E65 
 1390      206F6E6C 
 1390      79207573 
 1391 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1391      69636174 
 1391      65206E61 
 1391      6D652E0A 
 1391      00
 1392 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1392      206E6F74 
 1392      20666F75 
 1392      6E642E0A 
 1392      00
 1393 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1393      76616C75 
 1393      652E0A00 
 1394 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1394      20696E20 
 1394      65787465 
 1394      6E646564 
 1394      206D656D 
 1395 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1395      61746120 
 1395      666F756E 
 1395      642E0A00 
 1396 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1396      726F6772 
 1396      616D2069 
ARM GAS  tinyBasic.s 			page 41


 1396      6E205241 
 1396      4D210A00 
 1397 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1397      20737973 
 1397      74656D20 
 1397      66756C6C 
 1397      2E0A00
 1398 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1398      65722066 
 1398      756C6C0A 
 1398      00
 1399 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1399      74206D6F 
 1399      64696679 
 1399      2070726F 
 1399      6772616D 
 1400              	
 1401 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1401      2074696D 
 1401      65206572 
 1401      726F722C 
 1401      2000
 1402 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1402      70696C65 
 1402      20657272 
 1402      6F722C20 
 1402      00
 1403 018d 6C617374 	tk_id: .asciz "last token id: "
 1403      20746F6B 
 1403      656E2069 
 1403      643A2000 
 1404              	
 1405              	
 1406              	    .section  .text , "ax", %progbits 
 1407              	
 1408              	/*********************************
 1409              	   skip_line 
 1410              	   data and remark line are skipped
 1411              	   by the interpreter 
 1412              	***********************************/
 1413 0b82 00BF     	    _FUNC skip_line 
 1414 0b84 D4F804A0 	    ldr IN,[UPP,#COUNT]
 1415 0b88 7047     	    _RET 
 1416              	
 1417              	
 1418              	/*********************************
 1419              	   BASIC: BTGL adr, mask   
 1420              	   toggle bits [adr]=[adr]^mask  
 1421              	   input:
 1422              	     r0    adr 
 1423              	     r1    mask 
 1424              	    output;
 1425              	      none 
 1426              	    use:
 1427              	      T1   temp
 1428              	      T2   temp  
 1429              	*******************************/     
ARM GAS  tinyBasic.s 			page 42


 1430 0b8a 00BF     	    _FUNC BTGL 
 1431              	
 1432 0b8c 7047     	    _RET 
 1433              	
 1434              	/***************************************
 1435              	   kword_cmp
 1436              	   compare keyword to dict entry
 1437              	  input:
 1438              	    r0  keyword 
 1439              	    r1  dict entry 
 1440              	    r2  character count 
 1441              	  output:
 1442              	    r0  0 not same | -1 same 
 1443              	  use:
 1444              	    r6   result  
 1445              	    T1   char 1
 1446              	    T2   char 2
 1447              	**************************************/   
 1448 0b8e 00BF     	    _FUNC kword_cmp 
 1449 0b90 2DE94003 	    push {r6,T1,T2}
 1450 0b94 4FF0FF36 	    mov r6,#-1 
 1451 0b98 4AB1     	1:  cbz r2,9f       
 1452 0b9a 10F8018B 	    ldrb T1,[r0],#1
 1453 0b9e 11F8019B 	    ldrb T2,[r1],#1
 1454 0ba2 A2F10102 	    sub r2,#1
 1455 0ba6 C845     	    cmp T1,T2
 1456 0ba8 F6D0     	    beq 1b 
 1457 0baa 86EA0606 	    eor r6,r6  
 1458 0bae 3046     	9:  mov r0,r6
 1459 0bb0 BDE84003 	    pop {r6,T1,T2}
 1460 0bb4 7047     	    _RET 
 1461              	
 1462              	/***********************************************
 1463              	    search_dict 
 1464              	    search keyword in dictionary
 1465              	   input:
 1466              	  	 r0   keyword 
 1467              	     r1		dictionary first name field address  
 1468              	   output:
 1469              	     r0 		token attribute 
 1470              	     r1		  cmd_index if r0!=TK_NONE  
 1471              	   use:
 1472              	     r3   length keyword 
 1473              	     T1   keyword
 1474              	     T2   link  
 1475              	**********************************************/
 1476 0bb6 00BF     	  _FUNC search_dict
 1477 0bb8 2DE90C03 	  push {r2,r3,T1,T2}
 1478 0bbc 8046     	  mov T1,r0 
 1479 0bbe 00B5FFF7 	  _CALL strlen 
 1479      FEFF5DF8 
 1479      04EB
 1480 0bc8 0346     	  mov r3,r0  
 1481              	1:  
 1482 0bca 8946     	   mov T2,r1  // keep for linking   
 1483 0bcc 0878     	   ldrb r0,[r1] 
 1484 0bce 78B1     	   cbz r0,9f // null byte, end of dictionary
ARM GAS  tinyBasic.s 			page 43


 1485 0bd0 4046     	   mov r0,T1
 1486 0bd2 1A46     	   mov r2,r3   
 1487 0bd4 00B5FFF7 	   _CALL kword_cmp  
 1487      DBFF5DF8 
 1487      04EB
 1488 0bde 18B9     	   cbnz r0,2f 
 1489 0be0 4946     	   mov r1,T2
 1490 0be2 51F80C1C 	   ldr r1,[r1,#-12]
 1491 0be6 F0E7     	   b 1b   
 1492              	2: // found
 1493 0be8 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1494 0bec 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1495 0bf0 BDE80C03 	9: pop {r2,r3,T1,T2}
 1496 0bf4 7047     	   _RET 
 1497              	
 1498              	
 1499              	/**************************
 1500              	    INTERPRETER 
 1501              	*************************/
 1502              	
 1503              	/*********************************
 1504              	   cold_start 
 1505              	   initialize BASIC interpreter 
 1506              	   never leave 
 1507              	   input:
 1508              	     none 
 1509              	   output:
 1510              	    none 
 1511              	*********************************/
 1512              	  .type cold_start, %function 
 1513              	  .global cold_start 
 1514              	cold_start: 
 1515 0bf6 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1515      C2F20004 
 1516 0bfe DFF85400 	    ldr r0,src_addr 
 1517 0c02 DFF85410 	    ldr r1,dest_addr
 1518 0c06 0968     	    ldr r1,[r1] 
 1519 0c08 0C44     	    add UPP,r1 // system variables base address   
 1520              	// clear RAM
 1521 0c0a 2046     	    mov r0,UPP  
 1522 0c0c DFF86811 	    ldr r1,tib 
 1523 0c10 82EA0202 	    eor r2,r2 
 1524 0c14 40F8042B 	1:  str r2,[r0],#4 
 1525 0c18 8842     	    cmp r0,r1 
 1526 0c1a FBD4     	    bmi 1b 
 1527              	//copy initialized system variables to ram 
 1528 0c1c DFF83400 	    ldr r0,src_addr 
 1529 0c20 2146     	    mov r1,UPP 
 1530 0c22 DFF83820 	    ldr r2,sysvar_size
 1531 0c26 00B5FFF7 	    _CALL cmove
 1531      FEFF5DF8 
 1531      04EB
 1532 0c30 00B500F0 	    _CALL prt_version
 1532      15F85DF8 
 1532      04EB
 1533 0c3a 00B500F0 	    _CALL clear_basic 
 1533      62F85DF8 
ARM GAS  tinyBasic.s 			page 44


 1533      04EB
 1534 0c44 00B5FFF7 	    _CALL search_free 
 1534      FEFF5DF8 
 1534      04EB
 1535 0c4e E062     	    str r0,[UPP,#FSFREE] 
 1536 0c50 FFF7FEBF 	    b warm_start    
 1537              	src_addr:
 1538 0c54 00000000 	  .word uzero
 1539              	dest_addr:
 1540 0c58 00000000 	  .word vectors_size
 1541 0c5c D4000000 	sysvar_size: .word ulast-uzero 
 1542              	
 1543              	/************************************
 1544              	    print firmware version 
 1545              	    input: 
 1546              	      none 
 1547              	    output:
 1548              	      none 
 1549              	    use:
 1550              	      r0 
 1551              	***********************************/
 1552              	    _FUNC prt_version 
 1553 0c60 DFF85005 	    ldr r0,=version_msg 
 1554 0c64 00B5FFF7 	    _CALL uart_puts
 1554      FEFF5DF8 
 1554      04EB
 1555 0c6e 9FF87400 	    ldrb r0,version 
 1556 0c72 4FEA1010 	    lsr r0,#4 
 1557 0c76 00F13000 	    add r0,#'0' 
 1558 0c7a 3A28     	    cmp r0,#'9'+1 
 1559 0c7c 01D4     	    bmi 1f 
 1560 0c7e 00F10700 	    add r0,#7 
 1561              	  1:
 1562 0c82 00B5FFF7 	    _CALL uart_putc 
 1562      FEFF5DF8 
 1562      04EB
 1563 0c8c 4FF02E00 	    mov r0,#'. 
 1564 0c90 00B5FFF7 	    _CALL uart_putc 
 1564      FEFF5DF8 
 1564      04EB
 1565 0c9a 9FF84800 	    ldrb r0,version 
 1566 0c9e 00F00F00 	    and r0,#15 
 1567 0ca2 00F13000 	    add r0,'0' 
 1568 0ca6 3A28     	    cmp r0,#'9'+1 
 1569 0ca8 01D4     	    bmi 1f 
 1570 0caa 00F10700 	    add r0,#7
 1571              	  1: 
 1572 0cae 00B5FFF7 	    _CALL uart_putc 
 1572      FEFF5DF8 
 1572      04EB
 1573 0cb8 00B5FFF7 	    _CALL cr
 1573      FEFF5DF8 
 1573      04EB
 1574 0cc2 7047     	    _RET  
 1575              	version_msg:
 1576 0cc4 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1576      65207069 
ARM GAS  tinyBasic.s 			page 45


 1576      6C6C2074 
 1576      696E7920 
 1576      42415349 
 1577              	version:
 1578 0ce4 10       	    .byte 0x10 
 1579 0ce5 0000BF   	    .p2align 2 
 1580              	
 1581              	
 1582              	/*****************************
 1583              	    clear_vars 
 1584              	    initialize variables to 0
 1585              	  input:
 1586              	    none 
 1587              	  output:
 1588              	    none 
 1589              	  use:
 1590              	    r0,r1,r2 
 1591              	*****************************/
 1592              	    _FUNC clear_vars 
 1593 0ce8 07B4     	    push {r0,r1,r2}
 1594 0cea 80EA0000 	    eor r0,r0 
 1595 0cee 04F16001 	    add r1,UPP,#VARS
 1596 0cf2 4FF01A02 	    mov r2,#26
 1597 0cf6 41F8040B 	1:  str r0,[r1],#4 
 1598 0cfa 013A     	    subs r2,#1
 1599 0cfc FBD1     	    bne 1b  
 1600 0cfe 07BC     	    pop {r0,r1,r2}
 1601 0d00 7047     	    _RET 
 1602              	
 1603              	/*****************************
 1604              	   clear_basic 
 1605              	   reset BASIC system variables 
 1606              	   and clear variables and RAM 
 1607              	*****************************/
 1608 0d02 00BF     	    _FUNC clear_basic
 1609 0d04 80EA0000 	  	eor r0,r0
 1610 0d08 2064     	    str r0,[UPP,#FLAGS] 
 1611 0d0a 6060     	    str r0,[UPP,#COUNT]
 1612 0d0c 2060     	    str r0,[UPP,#IN_SAVED]
 1613 0d0e A060     	    str r0,[UPP,#BASICPTR]
 1614 0d10 E060     	    str r0,[UPP,#DATAPTR]
 1615 0d12 2061     	    str r0,[UPP,#DATA]
 1616 0d14 6061     	    str r0,[UPP,#DATALEN]
 1617 0d16 04F1D000 	    add r0,UPP,#BASIC_START 
 1618 0d1a 00F11000 	    add r0,#16 
 1619 0d1e 6FF00F01 	    mvn r1,#15
 1620 0d22 00EA0100 	    and r0,r1 
 1621 0d26 2063     	    str r0,[UPP,#TXTBGN]
 1622 0d28 6063     	    str r0,[UPP,#TXTEND]
 1623 0d2a C4F8D000 	    str r0,[UPP,#HERE]
 1624 0d2e 00B5FFF7 	    _CALL clear_vars
 1624      DAFF5DF8 
 1624      04EB
 1625 0d38 206B     	    ldr r0,[UPP,#TXTBGN]
 1626 0d3a DFF83C10 	    ldr r1,tib 
 1627 0d3e 82EA0202 	    eor r2,r2 
 1628 0d42 40F8042B 	1:  str r2,[r0],#4
ARM GAS  tinyBasic.s 			page 46


 1629 0d46 8842     	    cmp r0,r1 
 1630 0d48 FBD4     	    bmi 1b 
 1631 0d4a 7047     	    _RET  
 1632              	
 1633              	/***********************************
 1634              	   warm_init 
 1635              	   initialize interpreter context 
 1636              	  input:
 1637              	    none
 1638              	  output:
 1639              	    none 
 1640              	  use:
 1641              	    r0 
 1642              	***********************************/
 1643              	warm_init:
 1644              	// reset data stack       
 1645 0d4c DFF824C0 	    ldr DP,dstack 
 1646 0d50 4FF0000A 	    mov IN,#0 // BASIC line index 
 1647 0d54 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1648 0d58 80EA0000 	    eor r0,r0 
 1649 0d5c 6060     	    str r0,[UPP,#COUNT]  
 1650 0d5e 2064     	    str r0,[UPP,#FLAGS]
 1651 0d60 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1652 0d62 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1653 0d66 6064     	    str r0,[UPP,#TAB_WIDTH]
 1654 0d68 4FF00A00 	    mov r0,#10 // default base decimal 
 1655 0d6c A061     	    str r0,[UPP,#BASE]
 1656 0d6e 7047     	    _RET  
 1657              	
 1658 0d70 00000000 	mstack: .word _mstack 
 1659 0d74 00000000 	dstack: .word _dstack 
 1660 0d78 00000000 	tib: .word _tib 
 1661 0d7c 00000000 	pad: .word _pad 
 1662 0d80 FCFFFFFF 	array: .word _pad - 4 
 1663 0d84 0A524541 	ready: .asciz "\nREADY" 
 1663      445900
 1664              	
 1665              	/**********************************
 1666              	    warm_start 
 1667              	    start BASIC interpreter doesn't  
 1668              	    reset variables and code space 
 1669              	  input:
 1670              	    none 
 1671              	  output:
 1672              	    none 
 1673              	**********************************/
 1674 0d8b 00       	    _GBL_FUNC warm_start 
 1675              	// initialise parameters stack
 1676 0d8c FFF7DEFF 	    bl warm_init
 1677              	// reset main stack 
 1678 0d90 5FF82400 	    ldr r0,mstack
 1679 0d94 8546     	    mov sp,r0 
 1680 0d96 DFF82004 	    ldr r0,=ready 
 1681 0d9a 00B5FFF7 	    _CALL uart_puts 
 1681      FEFF5DF8 
 1681      04EB
 1682              	// fall in cmd_line 
ARM GAS  tinyBasic.s 			page 47


 1683              	
 1684              	/**********************************
 1685              	   cmd_line 
 1686              	   shell command line 
 1687              	   input:
 1688              	      none 
 1689              	   output:
 1690              	      none 
 1691              	   use:
 1692              	
 1693              	***********************************/
 1694              	    _FUNC cmd_line 
 1695 0da4 00B5FFF7 	    _CALL cr
 1695      FEFF5DF8 
 1695      04EB
 1696 0dae 80EA0000 	    eor r0,r0 
 1697 0db2 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1698 0db6 5FF84000 	1:  ldr r0,tib
 1699 0dba 4FF05001 	    mov r1,#TIB_SIZE 
 1700 0dbe 00B5FFF7 	    _CALL readln 
 1700      FEFF5DF8 
 1700      04EB
 1701 0dc8 0940     	    ands r1,r1 // empty line 
 1702 0dca F4D0     	    beq 1b 
 1703 0dcc 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1703      EFFA5DF8 
 1703      04EB
 1704 0dd6 EED0     	    beq 1b  // tokens stored in text area 
 1705              	// interpret tokenized line 
 1706              	interpreter:
 1707 0dd8 00B500F0 	  _CALL next_token 
 1707      21F85DF8 
 1707      04EB
 1708 0de2 0228     	  cmp r0,#2
 1709 0de4 F8D4     	  bmi interpreter    
 1710 0de6 1A28     	  cmp r0,#TK_LABEL 
 1711 0de8 F6D0     	  beq interpreter 
 1712 0dea 1728     	  cmp r0,#TK_CMD 
 1713 0dec 03D1     	  bne 2f
 1714 0dee 0846     	  mov r0,r1 
 1715 0df0 00F012F8 	  bl execute  
 1716 0df4 F0E7     	  b interpreter   
 1717              	2: 
 1718 0df6 1428     	  cmp r0,#TK_VAR 
 1719 0df8 05D1     	  bne 3f 
 1720 0dfa 00B500F0 	  _CALL let_var 
 1720      8FFB5DF8 
 1720      04EB
 1721 0e04 E8E7     	  b interpreter 
 1722              	3: 
 1723 0e06 0C28     	  cmp r0,#TK_ARRAY 
 1724 0e08 05D1     	  bne 4f
 1725 0e0a 00B500F0 	  _CALL let_array 
 1725      95FB5DF8 
 1725      04EB
 1726 0e14 E0E7     	  b interpreter
 1727              	4: 
ARM GAS  tinyBasic.s 			page 48


 1728 0e16 0DE6     	  b syntax_error
 1729              	
 1730              	/*****************************
 1731              	    execute 
 1732              	    execute a BASIC routine from 
 1733              	    its token value 
 1734              	  input:
 1735              	    r0  BASIC SUB|FUNC token  
 1736              	  output: 
 1737              	    depend on SUB|FUNc
 1738              	*****************************/
 1739              	    _FUNC execute 
 1740 0e18 E849     	    ldr r1,=fn_table 
 1741 0e1a 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1742 0e1e 0047     	    bx r0 
 1743              	
 1744              	/*************************************
 1745              	  next_token 
 1746              	  extract next token from token list 
 1747              	  input:
 1748              	    none 
 1749              	  output:
 1750              	    r0    token attribute
 1751              	    r1    token value if there is one 
 1752              	  use:
 1753              	    T1    exit token type  
 1754              	****************************/
 1755              	    _FUNC next_token 
 1756 0e20 6068     	    ldr r0,[UPP,#COUNT]
 1757 0e22 8245     	    cmp IN,r0 
 1758 0e24 11D4     	    bmi 0f
 1759              	// reached end of line skip to next one 
 1760 0e26 8344     	    add BPTR,r0 // next line 
 1761 0e28 606B     	    ldr r0,[UPP,#TXTEND]
 1762 0e2a 8345     	    cmp BPTR,r0 
 1763 0e2c 7FF5FEAF 	    bpl warm_start // end of program
 1764 0e30 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1765 0e34 6060     	    str r0,[UPP,#COUNT] 
 1766 0e36 4FF0030A 	    mov IN,#3
 1767 0e3a 00B5FFF7 	    _CALL show_trace
 1767      D6F95DF8 
 1767      04EB
 1768 0e44 80EA0000 	    eor r0,r0
 1769 0e48 7047     	    _RET 
 1770              	0: 
 1771 0e4a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1772 0e4e C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1773 0e52 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1774 0e56 0AF1010A 	    add IN,#1  
 1775 0e5a 1328     	    cmp r0,#TK_CHAR 
 1776 0e5c 1AD4     	    bmi 9f // these tokens have no value  
 1777 0e5e 1828     	    cmp r0,#TK_SCONST 
 1778 0e60 04D5     	    bpl 1f
 1779              	    // tokens with .byte value 
 1780 0e62 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1781 0e66 0AF1010A 	    add IN,#1 
 1782 0e6a 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 49


 1783 0e6c 1C28     	1:  cmp r0,#TK_QSTR 
 1784 0e6e 0DD1     	    bne 2f 
 1785 0e70 0BEB0A01 	    add r1,BPTR,IN
 1786 0e74 0846     	    mov r0,r1 
 1787 0e76 00B5FFF7 	    _CALL strlen 
 1787      FEFF5DF8 
 1787      04EB
 1788 0e80 8244     	    add IN,r0 
 1789 0e82 0AF1010A 	    add IN,#1
 1790 0e86 4FF01C00 	    mov r0,#TK_QSTR 
 1791 0e8a 7047     	    _RET  
 1792              	2:  // .word value 
 1793 0e8c 5BF80A10 	    ldr r1,[BPTR,IN] 
 1794 0e90 0AF1040A 	    add IN,#4 
 1795 0e94 7047     	9:  _RET
 1796              	
 1797              	
 1798              	/*********************************
 1799              	    expect 
 1800              	    check if next token is of 
 1801              	    expected type. If not 
 1802              	    call syntax_error  
 1803              	  input:
 1804              	      r0   token attribute
 1805              	  output:
 1806              	      r0  token attribute 
 1807              	      r1  token value
 1808              	  use:
 1809              	      T1   
 1810              	**********************************/
 1811 0e96 00BF     	    _FUNC expect 
 1812 0e98 4DF8048D 	    push {T1}
 1813 0e9c 8046     	    mov T1,r0 
 1814 0e9e 00B5FFF7 	    _CALL next_token 
 1814      BEFF5DF8 
 1814      04EB
 1815 0ea8 4045     	    cmp r0,T1  
 1816 0eaa 7FF4C3AD 	    bne syntax_error 
 1817 0eae 5DF8048B 	    pop {T1}
 1818 0eb2 7047     	    _RET 
 1819              	
 1820              	/***********************************
 1821              	    func_args 
 1822              	    get function arguments list 
 1823              	  input:
 1824              	    none 
 1825              	  output:
 1826              	    r0    arg. count 
 1827              	  use:
 1828              	
 1829              	************************************/
 1830              	    _FUNC func_args 
 1831 0eb4 4FF00500 	    mov r0,#TK_LPAREN 
 1832 0eb8 00B5FFF7 	    _CALL expect 
 1832      EDFF5DF8 
 1832      04EB
 1833 0ec2 00B500F0 	    _CALL arg_list 
ARM GAS  tinyBasic.s 			page 50


 1833      0CF85DF8 
 1833      04EB
 1834 0ecc 01B4     	    push {r0}
 1835 0ece 4FF00600 	    mov r0,#TK_RPAREN 
 1836 0ed2 00B5FFF7 	    _CALL expect 
 1836      E0FF5DF8 
 1836      04EB
 1837 0edc 01BC     	    pop {r0}
 1838 0ede 7047     	    _RET 
 1839              	
 1840              	/**********************************
 1841              	    arg_list 
 1842              	    get arguments list on dstack 
 1843              	  input:
 1844              	    none 
 1845              	  output:
 1846              	    r0    arg count
 1847              	  use:
 1848              	    T1    tmp count  
 1849              	***********************************/
 1850              	    _FUNC arg_list 
 1851 0ee0 4DF8048D 	    push {T1}
 1852 0ee4 88EA0808 	    eor T1,T1 
 1853 0ee8 00B500F0 	1:  _CALL expression 
 1853      BFF85DF8 
 1853      04EB
 1854 0ef2 1B28     	    cmp R0,#TK_INTGR  
 1855 0ef4 0AD1     	    bne 2f
 1856 0ef6 4CF8041D 	    _PUSH r1 
 1857 0efa 08F10108 	    add T1,#1 
 1858 0efe 00B5FFF7 	    _CALL next_token 
 1858      8EFF5DF8 
 1858      04EB
 1859 0f08 0228     	    cmp r0,#TK_COMMA 
 1860 0f0a EDD0     	    beq 1b 
 1861 0f0c D4F800A0 	2:  _UNGET_TOKEN 
 1861      D4F808B0 
 1862 0f14 4046     	9:  mov r0,T1 
 1863 0f16 5DF8048B 	    pop {T1}
 1864 0f1a 7047     	    _RET 
 1865              	
 1866              	
 1867              	/***********************************
 1868              	 factor
 1869              	 arithmetick factor parser 
 1870              	 factor ::= ['+'|'-'|e]  var | @ |
 1871              				 integer | function |
 1872              				 '('expression')' 
 1873              	  input: 
 1874              	    none 
 1875              	  output:
 1876              	    r0   token attribute 
 1877              	    r1   token value 
 1878              	  use:
 1879              	    r2   temp 
 1880              	    r3   sign 
 1881              	***********************************/
ARM GAS  tinyBasic.s 			page 51


 1882              	    _FUNC factor 
 1883 0f1c 0CB4     	    push {r2,r3}
 1884 0f1e 00B5FFF7 	    _CALL next_token
 1884      7EFF5DF8 
 1884      04EB
 1885 0f28 4FF00103 	    mov r3,#1 // default sign +  
 1886 0f2c 0828     	    cmp r0,#TK_MINUS  
 1887 0f2e 06D1     	    bne 1f 
 1888 0f30 4FF0FF33 	    mov r3,#-1 // minus sign 
 1889 0f34 00B5FFF7 	0:  _CALL next_token
 1889      73FF5DF8 
 1889      04EB
 1890 0f3e 1B28     	1:  cmp r0,#TK_INTGR 
 1891 0f40 55D0     	    beq 8f 
 1892 0f42 0C28     	    cmp r0,#TK_ARRAY 
 1893 0f44 1DD1     	    bne 2f 
 1894 0f46 4FF00500 	    mov r0,#TK_LPAREN 
 1895 0f4a 00B5FFF7 	    _CALL expect 
 1895      A4FF5DF8 
 1895      04EB
 1896 0f54 00B500F0 	    _CALL expression
 1896      89F85DF8 
 1896      04EB
 1897 0f5e 1B28     	    cmp r0,#TK_INTGR
 1898 0f60 7FF468AD 	    bne syntax_error
 1899 0f64 0A46     	    mov r2,r1  
 1900 0f66 4FF00600 	    mov r0,#TK_RPAREN
 1901 0f6a 00B5FFF7 	    _CALL expect 
 1901      94FF5DF8 
 1901      04EB
 1902 0f74 1046     	    mov r0,r2 
 1903 0f76 00B500F0 	    _CALL get_array_element 
 1903      E4F85DF8 
 1903      04EB
 1904 0f80 35E0     	    b 8f
 1905 0f82 0528     	2:  cmp r0,#TK_LPAREN 
 1906 0f84 13D1     	    bne 3f 
 1907 0f86 00B500F0 	    _CALL expression 
 1907      70F85DF8 
 1907      04EB
 1908 0f90 1B28     	    cmp r0,#TK_INTGR 
 1909 0f92 7FF44FAD 	    bne syntax_error
 1910 0f96 0A46     	    mov r2,r1   
 1911 0f98 4FF00600 	    mov r0,#TK_RPAREN
 1912 0f9c 00B5FFF7 	    _CALL expect 
 1912      7BFF5DF8 
 1912      04EB
 1913 0fa6 1146     	    mov r1,r2 
 1914 0fa8 4FF01B00 	    mov r0,#TK_INTGR
 1915 0fac 1FE0     	    b 8f       
 1916 0fae 1428     	3:  cmp r0,#TK_VAR 
 1917 0fb0 06D1     	    bne 4f
 1918 0fb2 0846     	    mov r0,r1  
 1919 0fb4 00B500F0 	    _CALL get_var 
 1919      D9F85DF8 
 1919      04EB
 1920 0fbe 16E0     	    b 8f 
ARM GAS  tinyBasic.s 			page 52


 1921 0fc0 1528     	4:  cmp r0,#TK_IFUNC 
 1922 0fc2 06D1     	    bne 6f 
 1923 0fc4 0846     	5:  mov r0,r1  
 1924 0fc6 00B5FFF7 	    _CALL execute
 1924      26FF5DF8 
 1924      04EB
 1925 0fd0 0DE0     	    b 8f 
 1926 0fd2 1A28     	6:  cmp r0,#TK_LABEL
 1927 0fd4 07D1     	    bne 7f 
 1928 0fd6 41F00040 	    orr r0,r1,#(1<<31) 
 1929 0fda 00B5FFF7 	    _CALL search_const
 1929      5CF95DF8 
 1929      04EB
 1930 0fe4 03E0     	    b 8f 
 1931 0fe6 1828     	7:  cmp r0,#TK_SCONST 
 1932 0fe8 03D1     	    bne 9f 
 1933 0fea 4FF01B00 	    mov r0,#TK_INTGR
 1934 0fee 03FB01F1 	8:  mul r1,r3 
 1935 0ff2 0CBC     	9:  pop {r2,r3}   
 1936 0ff4 7047     	    _RET 
 1937              	
 1938              	
 1939              	/*****************************************
 1940              	    term 
 1941              	    term parser 
 1942              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1943              	    output:
 1944              	      r0  	token attribute 
 1945              	      r1		integer
 1946              	    use:
 1947              	      r2    first factor 
 1948              	      r3    operator *|/|%
 1949              	******************************************/
 1950 0ff6 00BF     	    _FUNC term 
 1951 0ff8 00B5FFF7 	    _CALL factor
 1951      8FFF5DF8 
 1951      04EB
 1952 1002 1B28     	    cmp r0,#TK_INTGR
 1953 1004 00D0     	    beq 0f 
 1954 1006 7047     	    _RET // not a factor    
 1955 1008 0CB4     	0:  push {r2,r3}
 1956 100a 0A46     	    mov r2,r1 // first factor    
 1957 100c 00B5FFF7 	0:  _CALL next_token
 1957      07FF5DF8 
 1957      04EB
 1958 1016 0346     	    mov r3,r0  // operator 
 1959 1018 0928     	    cmp r0,TK_MULT
 1960 101a 01D4     	    bmi 1f 
 1961 101c 0C28     	    cmp r0,#TK_MOD+1
 1962 101e 06D4     	    bmi 2f
 1963 1020 D4F800A0 	1:  _UNGET_TOKEN
 1963      D4F808B0 
 1964 1028 4FF01B00 	    mov r0,#TK_INTGR
 1965 102c 1AE0     	    b 9f 
 1966 102e 00B5FFF7 	2:  _CALL factor
 1966      74FF5DF8 
 1966      04EB
ARM GAS  tinyBasic.s 			page 53


 1967 1038 1B28     	    cmp r0,#TK_INTGR
 1968 103a 7FF4FBAC 	    bne syntax_error 
 1969 103e 092B     	    cmp r3,#TK_MULT
 1970 1040 02D1     	    bne 3f 
 1971              	// multiplication
 1972 1042 01FB02F2 	    mul r2,r1
 1973 1046 E1E7     	    b 0b  
 1974 1048 B8F10A0F 	3:  cmp T1,#TK_DIV 
 1975 104c 02D1     	    bne 4f
 1976              	// division
 1977 104e 92FBF1F2 	    sdiv r2,r2,r1
 1978 1052 DBE7     	    b 0b  
 1979              	4: // modulo
 1980 1054 1046     	    mov r0,r2 
 1981 1056 92FBF1F2 	    sdiv r2,r2,r1 
 1982 105a 01FB02F2 	    mul  r2,r1 
 1983 105e A0EB0202 	    sub  r2,r0,r2
 1984 1062 D3E7     	    b 0b  
 1985 1064 1146     	9:  mov r1,r2 
 1986 1066 0CBC     	    pop {r2,r3}
 1987 1068 7047     	    _RET 
 1988              	
 1989              	
 1990              	/*****************************************
 1991              	    expression 
 1992              	    arithmetic expression parser 
 1993              	    expression ::= term [['+'|'-'] term]*
 1994              	    result range {-32768..32767}
 1995              	    output:
 1996              	      r0    TK_NONE || TK_INTGR 
 1997              	      r1 	  integer
 1998              	    use:
 1999              	      r2  left term 
 2000              	      r3  operator +|-
 2001              	******************************************/
 2002 106a 00BF     	    _FUNC expression 
 2003 106c 00B5FFF7 	    _CALL term 
 2003      C3FF5DF8 
 2003      04EB
 2004 1076 1B28     	    cmp r0,#TK_INTGR 
 2005 1078 00D0     	    beq 0f 
 2006 107a 7047     	    _RET   
 2007 107c 0CB4     	0:  push {r2,r3}
 2008 107e 0A46     	    mov r2,r1 // first term
 2009 1080 00B5FFF7 	1:  _CALL next_token 
 2009      CDFE5DF8 
 2009      04EB
 2010 108a 0346     	    mov r3,r0 //  +|-
 2011 108c 0728     	    cmp r0,#TK_PLUS 
 2012 108e 08D0     	    beq 3f 
 2013 1090 0828     	    cmp r0,#TK_MINUS  
 2014 1092 06D0     	    beq 3f
 2015 1094 D4F800A0 	    _UNGET_TOKEN 
 2015      D4F808B0 
 2016 109c 4FF01B00 	    mov r0,#TK_INTGR
 2017 10a0 0EE0     	    b 9f 
 2018 10a2 00B5FFF7 	3:  _CALL term 
ARM GAS  tinyBasic.s 			page 54


 2018      A8FF5DF8 
 2018      04EB
 2019 10ac 1B28     	    cmp r0,#TK_INTGR 
 2020 10ae 7FF4C1AC 	    bne syntax_error 
 2021 10b2 072B     	    cmp r3,#TK_PLUS 
 2022 10b4 02D0     	    beq 4f 
 2023 10b6 A2EB0102 	    sub r2,r1 // term1-term2  
 2024 10ba E1E7     	    b 1b 
 2025 10bc 0A44     	4:  add r2,r1 // term1+term2
 2026 10be DFE7     	    b 1b
 2027 10c0 1146     	9:  mov r1,r2 
 2028 10c2 0CBC     	    pop {r2,r3}
 2029 10c4 7047     	    _RET 
 2030              	
 2031              	
 2032              	/**********************************************
 2033              	    relation
 2034              	    rel ::= expr1 rel_op expr2
 2035              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2036              	    relation return  integer , zero is false 
 2037              	    output:
 2038              	        r0	TK_INTGR  
 2039              	        r1	integer 
 2040              	    use:
 2041              	        r2   first operand 
 2042              	        r3   relop   
 2043              	**********************************************/
 2044 10c6 00BF     	    _FUNC relation 
 2045 10c8 0CB4     	    push {r2,r3}
 2046 10ca 00B5FFF7 	    _CALL expression 
 2046      CEFF5DF8 
 2046      04EB
 2047 10d4 1B28     	    cmp r0,#TK_INTGR 
 2048 10d6 7FF4ADAC 	    bne syntax_error 
 2049 10da 0A46     	    mov r2,r1  // first operand  
 2050 10dc 00B5FFF7 	    _CALL next_token 
 2050      9FFE5DF8 
 2050      04EB
 2051 10e6 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2052 10ea 0D28     	    cmp r0,#TK_EQUAL 
 2053 10ec 1DD4     	    bmi 8f 
 2054 10ee 1328     	    cmp r0,#TK_NE+1
 2055 10f0 1BD5     	    bpl 8f 
 2056 10f2 00B5FFF7 	    _CALL expression 
 2056      BAFF5DF8 
 2056      04EB
 2057 10fc 1B28     	    cmp r0,#TK_INTGR 
 2058 10fe 7FF499AC 	    bne syntax_error 
 2059 1102 8A42     	    cmp r2,r1 // compare operands  
 2060 1104 4FF0FF31 	    mov r1,#-1 
 2061 1108 2D4A     	    ldr r2,=relop_jmp
 2062 110a D2E803F0 	    tbb [r2,r3]    
 2063              	rel_idx0:
 2064              	rel_eq:
 2065 110e 11D0     	    beq 9f 
 2066 1110 08E0     	    b rel_false
 2067              	rel_gt:
ARM GAS  tinyBasic.s 			page 55


 2068 1112 0FDC     	    bgt 9f  
 2069 1114 06E0     	    b rel_false  
 2070              	rel_ge:
 2071 1116 0DDA     	    bge 9f  
 2072 1118 04E0     	    b rel_false  
 2073              	rel_lt: 
 2074 111a 0BDB     	    blt 9f   
 2075 111c 02E0     	    b rel_false 
 2076              	rel_le:
 2077 111e 09DD     	    ble 9f  
 2078 1120 00E0     	    b rel_false 
 2079              	rel_ne:
 2080 1122 07D1     	    bne 9f 
 2081              	rel_false:    
 2082 1124 81EA0101 	    eor r1,r1  // false
 2083 1128 04E0     	    b 9f  
 2084 112a D4F800A0 	8:  _UNGET_TOKEN 
 2084      D4F808B0 
 2085 1132 1146     	    mov r1,r2    
 2086 1134 4FF01B00 	9:  mov r0,#TK_INTGR
 2087 1138 0CBC     	    pop {r2,r3}
 2088 113a 7047     	    _RET 
 2089              	
 2090              	
 2091              	relop_jmp: 
 2092 113c 00       	  .byte 0 // =  
 2093 113d 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2094 113e 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2095 113f 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2096 1140 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2097 1141 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2098              	
 2099              	
 2100              	/***********************************
 2101              	    get_array_element
 2102              	    return value of @(n)
 2103              	  input:
 2104              	    r0    indice 
 2105              	  output:
 2106              	    r0   TK_INTGR
 2107              	    r1   value  
 2108              	************************************/
 2109 1142 00BF     	    _FUNC get_array_element 
 2110 1144 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2111 1148 4FEA8000 	    lsl r0,#2 
 2112 114c C0EB0100 	    rsb r0,r1 
 2113 1150 0168     	    ldr r1,[r0]
 2114 1152 4FF01B00 	    mov r0,#TK_INTGR 
 2115 1156 7047     	    _RET 
 2116              	
 2117              	
 2118              	/***********************************
 2119              	    set_array_element 
 2120              	    set value of array element 
 2121              	  input:
 2122              	    r0   index 
 2123              	    r1   new value 
ARM GAS  tinyBasic.s 			page 56


 2124              	  output:
 2125              	    none
 2126              	  use:
 2127              	    r2    array pointer 
 2128              	**********************************/
 2129              	    _FUNC set_array_element 
 2130 1158 04B4     	    push {r2}
 2131 115a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2132 115e 4FEA8000 	    lsl r0,#2 
 2133 1162 A1EB0001 	    sub r1,r0 
 2134 1166 0960     	    str r1,[r1]
 2135 1168 04BC     	    pop {r2}
 2136 116a 7047     	    _RET 
 2137              	
 2138              	/***********************************
 2139              	   get_var 
 2140              	   get variable value 
 2141              	  input:
 2142              	     r0    variable index {0..25}
 2143              	  output:
 2144              	     r0    TK_INTGR
 2145              	     r1    value 
 2146              	**********************************/
 2147              	    _FUNC get_var 
 2148 116c 04F16001 	    add r1,UPP,#VARS
 2149 1170 4FEA8000 	    lsl r0,#2 
 2150 1174 0958     	    ldr r1,[r1,r0]
 2151 1176 4FF01B00 	    mov r0,#TK_INTGR
 2152 117a 7047     	    _RET 
 2153              	
 2154              	/*********************************
 2155              	    set_var 
 2156              	    set variable value 
 2157              	  input:
 2158              	     r0    variable index {0..25}
 2159              	     r1    new value 
 2160              	  output:
 2161              	    none 
 2162              	  use:
 2163              	    r2   vars pointer 
 2164              	*********************************/
 2165              	    _FUNC set_var 
 2166 117c 04B4     	    push {r2}
 2167 117e 04F16002 	    add r2,UPP,#VARS
 2168 1182 4FEA8000 	    lsl r0,#2
 2169 1186 1150     	    str r1,[r2,r0]
 2170 1188 04BC     	    pop {r2}
 2171 118a 7047     	    _RET 
 2172              	
 2173              	/******************************
 2174              	    CONSTANTS data
 2175              	******************************/
 2176              	
 2177              	  .section .rodata 
 2178              	
 2179              	// system variables initial value 
 2180              	uzero:
ARM GAS  tinyBasic.s 			page 57


 2181 0000 00000000 	  .word 0 // IN_SAVED
 2182 0004 00000000 	  .word 0 // COUNT
 2183 0008 00000000 	  .word 0 // BASICPTR
 2184 000c 00000000 	  .word 0 // DATAPTR
 2185 0010 00000000 	  .word 0 // DATA
 2186 0014 00000000 	  .word 0 // DATALEN
 2187 0018 0A000000 	  .word 10 // BASE
 2188 001c 00000000 	  .word 0 // TICKS
 2189 0020 00000000 	  .word 0 // TIMER
 2190 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2191 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2192 002c 00000000 	  .word 0 // FSFREE
 2193 0030 00000000 	  .word 0 // TXTBGN
 2194 0034 00000000 	  .word 0 // TXTEND
 2195 0038 00000000 	  .word 0 //LOOP_DEPTH
 2196 003c 00000000 	  .word 0 // ARRAY_SIZE
 2197 0040 00000000 	  .word 0 // FLAGS
 2198 0044 04000000 	  .word 4 // TAB_WIDTH
 2199 0048 00000000 	  .word 0 // RX_HEAD
 2200 004c 00000000 	  .word 0 // RX_TAIL
 2201 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2201      00000000 
 2201      00000000 
 2201      00000000 
 2202 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2204 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2205 00d0 00000000 	  .word 0 // HERE 
 2206              	ulast:
 2207              	
 2208              	  .section .rodata.dictionary 
 2209              	
 2210              	// keep alphabetic order for BASIC names from Z-A
 2211              	// this sort order is for for WORDS cmd output. 	
 2212              	  .type kword_end, %object
 2213              		.equ link, 0
 2214              	kword_end:
 2215 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2216      54000000 
 2216      15000000 
 2216      59504F53 
 2216      00000000 
 2217 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2217      53000000 
 2217      15000000 
 2217      58504F53 
 2217      00000000 
 2218 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2218      52000000 
ARM GAS  tinyBasic.s 			page 58


 2218      15000000 
 2218      584F5200 
 2219 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2219      51000000 
 2219      17000000 
 2219      574F5244 
 2219      53000000 
 2220 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2220      50000000 
 2220      17000000 
 2220      57414954 
 2220      00000000 
 2221 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2221      4F000000 
 2221      17000000 
 2221      554E5449 
 2221      4C000000 
 2222 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2222      4E000000 
 2222      15000000 
 2222      55464C41 
 2222      53480000 
 2223 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2223      4D000000 
 2223      15000000 
 2223      55424F55 
 2223      4E440000 
 2224 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2224      4C000000 
 2224      17000000 
 2224      54524143 
 2224      45000000 
 2225 00c0 B8000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
 2225      4B000000 
 2225      17000000 
 2225      544F0000 
 2226 00d0 CC000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2226      49000000 
 2226      17000000 
 2226      54494D45 
 2226      52000000 
 2227 00e4 DC000000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2227      4A000000 
 2227      15000000 
 2227      54494D45 
 2227      4F555400 
 2228 00f8 F0000000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2228      48000000 
 2228      15000000 
 2228      5449434B 
 2228      53000000 
 2229 010c 04010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2229      47000000 
 2229      17000000 
 2229      5448454E 
 2229      00000000 
 2230 0120 18010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
ARM GAS  tinyBasic.s 			page 59


 2230      46000000 
 2230      17000000 
 2230      54414200 
 2231 0130 2C010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2231      45000000 
 2231      17000000 
 2231      53544F52 
 2231      45000000 
 2232 0144 3C010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2232      44000000 
 2232      17000000 
 2232      53544F50 
 2232      00000000 
 2233 0158 50010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2233      43000000 
 2233      17000000 
 2233      53544550 
 2233      00000000 
 2234 016c 64010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2234      42000000 
 2234      17000000 
 2234      53504300 
 2235 017c 78010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2235      41000000 
 2235      17000000 
 2235      534C4545 
 2235      50000000 
 2236 0190 88010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2236      40000000 
 2236      17000000 
 2236      53415645 
 2236      00000000 
 2237 01a4 9C010000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2237      3F000000 
 2237      17000000 
 2237      52554E00 
 2238 01b4 B0010000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2238      3E000000 
 2238      15000000 
 2238      52534849 
 2238      46540000 
 2239 01c8 C0010000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2239      3D000000 
 2239      15000000 
 2239      524E4400 
 2240 01d8 D4010000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2240      3C000000 
 2240      17000000 
 2240      52455455 
 2240      524E0000 
 2241 01ec E4010000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2241      3B000000 
 2241      17000000 
 2241      52455354 
 2241      4F524500 
 2242 0200 F8010000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2242      3A000000 
ARM GAS  tinyBasic.s 			page 60


 2242      17000000 
 2242      52454D00 
 2243 0210 0C020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2243      39000000 
 2243      15000000 
 2243      52454144 
 2243      00000000 
 2244 0224 1C020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2244      38000000 
 2244      15000000 
 2244      514B4559 
 2244      00000000 
 2245 0238 30020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2245      37000000 
 2245      17000000 
 2245      50555400 
 2246 0248 44020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2246      36000000 
 2246      17000000 
 2246      50555348 
 2246      00000000 
 2247 025c 54020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2247      35000000 
 2247      17000000 
 2247      5052494E 
 2247      54000000 
 2248 0270 68020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2248      34000000 
 2248      15000000 
 2248      504F5000 
 2249 0280 7C020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2249      33000000 
 2249      17000000 
 2249      504F4B45 
 2249      57000000 
 2250 0294 8C020000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2250      32000000 
 2250      17000000 
 2250      504F4B45 
 2250      48000000 
 2251 02a8 A0020000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2251      31000000 
 2251      17000000 
 2251      504F4B45 
 2251      42000000 
 2252 02bc B4020000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2252      2D000000 
 2252      17000000 
 2252      504D4F44 
 2252      45000000 
 2253 02d0 C8020000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2253      30000000 
 2253      15000000 
 2253      5045454B 
 2253      57000000 
 2254 02e4 DC020000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2254      2F000000 
ARM GAS  tinyBasic.s 			page 61


 2254      15000000 
 2254      5045454B 
 2254      48000000 
 2255 02f8 F0020000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2255      2E000000 
 2255      15000000 
 2255      5045454B 
 2255      42000000 
 2256 030c 04030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2256      2C000000 
 2256      17000000 
 2256      50415553 
 2256      45000000 
 2257 0320 18030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref 
 2257      2B000000 
 2257      15000000 
 2257      50414400 
 2258 0330 2C030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2258      2A000000 
 2258      17000000 
 2258      4F555400 
 2259 0340 3C030000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2259      29000000 
 2259      15000000 
 2259      4F520000 
 2260 0350 4C030000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2260      28000000 
 2260      15000000 
 2260      4E4F5400 
 2261 0360 5C030000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2261      27000000 
 2261      17000000 
 2261      4E455854 
 2261      00000000 
 2262 0374 6C030000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2262      26000000 
 2262      17000000 
 2262      4E455700 
 2263 0384 80030000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2263      25000000 
 2263      15000000 
 2263      4C534849 
 2263      46540000 
 2264 0398 90030000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2264      24000000 
 2264      17000000 
 2264      4C4F4341 
 2264      54450000 
 2265 03ac A4030000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2265      23000000 
 2265      17000000 
 2265      4C4F4144 
 2265      00000000 
 2266 03c0 B8030000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2266      22000000 
 2266      17000000 
 2266      4C495354 
ARM GAS  tinyBasic.s 			page 62


 2266      00000000 
 2267 03d4 CC030000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2267      21000000 
 2267      17000000 
 2267      4C455400 
 2268 03e4 E0030000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2268      20000000 
 2268      16000000 
 2268      4B455900 
 2269 03f4 F0030000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2269      1F000000 
 2269      15000000 
 2269      494E5645 
 2269      52540000 
 2270 0408 00040000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2270      1E000000 
 2270      17000000 
 2270      494E5055 
 2270      54000000 
 2271 041c 14040000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2271      1D000000 
 2271      15000000 
 2271      494E0000 
 2272 042c 28040000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2272      1C000000 
 2272      17000000 
 2272      49460000 
 2273 043c 38040000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2273      1B000000 
 2273      17000000 
 2273      48455800 
 2274 044c 48040000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2274      00100140 
 2274      18000000 
 2274      4750494F 
 2274      43000000 
 2275 0460 58040000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2275      000C0140 
 2275      18000000 
 2275      4750494F 
 2275      42000000 
 2276 0474 6C040000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2276      00080140 
 2276      18000000 
 2276      4750494F 
 2276      41000000 
 2277 0488 80040000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2277      1A000000 
 2277      17000000 
 2277      474F544F 
 2277      00000000 
 2278 049c 94040000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2278      19000000 
 2278      17000000 
 2278      474F5355 
 2278      42000000 
 2279 04b0 A8040000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
ARM GAS  tinyBasic.s 			page 63


 2279      18000000 
 2279      15000000 
 2279      47455400 
 2280 04c0 BC040000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2280      17000000 
 2280      15000000 
 2280      46524545 
 2280      00000000 
 2281 04d4 CC040000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2281      16000000 
 2281      17000000 
 2281      464F5247 
 2281      45540000 
 2282 04e8 E0040000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2282      15000000 
 2282      17000000 
 2282      464F5200 
 2283 04f8 F4040000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2283      14000000 
 2283      17000000 
 2283      45524153 
 2283      45000000 
 2284 050c 04050000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2284      13000000 
 2284      17000000 
 2284      454E4400 
 2285 051c 18050000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2285      12000000 
 2285      17000000 
 2285      44554D50 
 2285      00000000 
 2286 0530 28050000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2286      11000000 
 2286      17000000 
 2286      44524F50 
 2286      00000000 
 2287 0544 3C050000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2287      10000000 
 2287      17000000 
 2287      444F0000 
 2288 0554 50050000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2288      0F000000 
 2288      17000000 
 2288      44495200 
 2289 0564 60050000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2289      0E000000 
 2289      17000000 
 2289      44454300 
 2290 0574 70050000 	  _dict_entry TK_CMD,DATALN,DATALN_IDX //data_line  
 2290      0D000000 
 2290      17000000 
 2290      44415441 
 2290      4C4E0000 
 2291 0588 80050000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2291      0C000000 
 2291      17000000 
 2291      44415441 
ARM GAS  tinyBasic.s 			page 64


 2291      00000000 
 2292 059c 94050000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2292      0B000000 
 2292      17000000 
 2292      434F4E53 
 2292      54000000 
 2293 05b0 A8050000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2293      0A000000 
 2293      17000000 
 2293      434C5300 
 2294 05c0 BC050000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2294      09000000 
 2294      16000000 
 2294      43484152 
 2294      00000000 
 2295 05d4 CC050000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2295      08000000 
 2295      17000000 
 2295      42544F47 
 2295      4C000000 
 2296 05e8 E0050000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2296      07000000 
 2296      15000000 
 2296      42544553 
 2296      54000000 
 2297 05fc F4050000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2297      06000000 
 2297      17000000 
 2297      42534554 
 2297      00000000 
 2298 0610 08060000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2298      05000000 
 2298      17000000 
 2298      42524553 
 2298      00000000 
 2299 0624 1C060000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2299      04000000 
 2299      15000000 
 2299      42495400 
 2300 0634 30060000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
 2300      03000000 
 2300      17000000 
 2300      41575500 
 2301 0644 40060000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2301      02000000 
 2301      15000000 
 2301      41534300 
 2302 0654 50060000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2302      01000000 
 2302      15000000 
 2302      414E4400 
 2303              	first_link: 
 2304 0664 60060000 	  .word LINK 
 2305 0668 00000000 	  .word ABS_IDX 
 2306 066c 15000000 	  .word TK_IFUNC
 2307              	kword_dict: // first name field 
 2308              	  .equ LINK,. 
ARM GAS  tinyBasic.s 			page 65


 2309 0670 41425300 	  .asciz "ABS" 
 2310              	  .p2align 2 
 2311              	
 2312              	    .section .rodata.fn_tabld 
 2313              	
 2314              	//comands and fonctions address table
 2315              	  .type fn_table, %object
 2316              	fn_table:
 2317 0000 00000000 		.word abs,bit_and,ascii,awu,bitmask 
 2317      00000000 
 2317      00000000 
 2317      00000000 
 2317      00000000 
 2318 0014 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2318      00000000 
 2318      00000000 
 2318      00000000 
 2318      00000000 
 2319 0030 00000000 		.word skip_line,data_line,dec_base,directory,do_loop,drop,dump
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2319      00000000 
 2320 004c 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2320      00000000 
 2320      00000000 
 2320      00000000 
 2320      00000000 
 2321 006c 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2321      00000000 
 2321      00000000 
 2321      00000000 
 2321      00000000 
 2322 0084 00000000 		.word let,list,load,locate,lshift,new,next
 2322      00000000 
 2322      00000000 
 2322      00000000 
 2322      00000000 
 2323 00a0 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2323      00000000 
 2323      00000000 
 2323      00000000 
 2323      00000000 
 2324 00c4 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2324      00000000 
 2324      00000000 
 2324      00000000 
 2324      00000000 
 2325 00e0 00000000 		.word qkey,read,skip_line
 2325      00000000 
 2325      00000000 
 2326 00ec 00000000 		.word restore,return, random,rshift,run,save
 2326      00000000 
 2326      00000000 
 2326      00000000 
 2326      00000000 
 2327 0104 00000000 		.word sleep,spc,step,stop,store,tab
ARM GAS  tinyBasic.s 			page 66


 2327      00000000 
 2327      00000000 
 2327      00000000 
 2327      00000000 
 2328 011c 00000000 		.word then,get_ticks,set_timer,timeout,to,trace,ubound,uflash,until
 2328      00000000 
 2328      00000000 
 2328      00000000 
 2328      00000000 
 2329 0140 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2329      00000000 
 2329      00000000 
 2329      00000000 
 2329      00000000 
 2330 0154 00000000 		.word 0 
 2331              	
 2332              	
 2333              	/**********************************
 2334              	    BASIC commands and functions 
 2335              	**********************************/
 2336              	
 2337              	    .section .text.basic , "ax", %progbits 
 2338              	
 2339              	
 2340              	/*******************************
 2341              	  BASIC:  ABS expr 
 2342              	  input:
 2343              	    none 
 2344              	  output:
 2345              	    r0    token type 
 2346              	    r1    abs(expr)
 2347              	  use:
 2348              	    none 
 2349              	******************************/
 2350              	    _FUNC abs 
 2351 0000 00B5FFF7 	    _CALL arg_list
 2351      FEFF5DF8 
 2351      04EB
 2352 000a 0128     	    cmp r0,#1 
 2353 000c 01D0     	    beq 1f 
 2354 000e FFF7FEBF 	    b syntax_error 
 2355 0012 5CF8041B 	1:  _POP r1 
 2356 0016 11F0004F 	    tst r1,#(1<<31)
 2357 001a 01D0     	    beq 9f
 2358 001c C1F10001 	    rsb r1,#0 
 2359 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2360 0024 7047     	   _RET 
 2361              	
 2362 0026 00BF     	    _FUNC power_adc
 2363 0028 7047     	    _RET
 2364              	
 2365 002a 00BF     	    _FUNC analog_read
 2366 002c 7047     	    _RET
 2367              	
 2368              	/************************************
 2369              	  BASIC: AND(expr1,expr2)
 2370              	  logical ANND bit to between expr1,expr2
ARM GAS  tinyBasic.s 			page 67


 2371              	************************************/
 2372 002e 00BF     	    _FUNC bit_and
 2373 0030 00B5FFF7 	    _CALL func_args 
 2373      FEFF5DF8 
 2373      04EB
 2374 003a 0228     	    cmp r0,#2 
 2375 003c 7FF4FEAF 	    bne syntax_error 
 2376 0040 5CF8040B 	    _POP r0 
 2377 0044 5CF8041B 	    _POP r1 
 2378 0048 01EA0001 	    and r1,r0 
 2379 004c 4FF01B00 	    mov r0,#TK_INTGR
 2380 0050 7047     	    _RET
 2381              	
 2382              	/*******************************************
 2383              	  BASIC: ASC(string|char)
 2384              	  return ASCII code of char of first char 
 2385              	  of string 
 2386              	*******************************************/
 2387 0052 00BF     	    _FUNC ascii
 2388 0054 4FF00500 	    mov r0,#TK_LPAREN 
 2389 0058 00B5FFF7 	    _CALL expect 
 2389      FEFF5DF8 
 2389      04EB
 2390 0062 00B5FFF7 	    _CALL next_token 
 2390      FEFF5DF8 
 2390      04EB
 2391 006c 1C28     	    cmp r0,#TK_QSTR
 2392 006e 0AD0     	    beq 2f 
 2393 0070 1328     	    cmp r0,#TK_CHAR 
 2394 0072 00D1     	    bne 1f  
 2395 0074 08E0     	    b 9f
 2396 0076 1628     	1:  cmp r0,#TK_CFUNC 
 2397 0078 0846     	    mov r0,r1 
 2398 007a 00B5FFF7 	    _CALL execute
 2398      FEFF5DF8 
 2398      04EB
 2399 0084 00E0     	    b 9f      
 2400 0086 0978     	2:  ldrb r1,[r1]
 2401 0088 4CF8041D 	9:  _PUSH r1 
 2402 008c 4FF00600 	    mov r0,#TK_RPAREN 
 2403 0090 00B5FFF7 	    _CALL expect 
 2403      FEFF5DF8 
 2403      04EB
 2404 009a 4FF01B00 	    mov r0,#TK_INTGR 
 2405 009e 5CF8041B 	    _POP r1 
 2406 00a2 7047     	    _RET
 2407              	
 2408              	    _FUNC autorun
 2409 00a4 7047     	    _RET
 2410              	
 2411              	/*******************************************
 2412              	  BASIC: AWU time_sleep  
 2413              	  enable LSI and IWDG and place MCU in 
 2414              	  deep sleep. IDWG wakeup MCU 
 2415              	******************************************/
 2416 00a6 00BF     	    _FUNC awu
 2417 00a8 00B5FFF7 	    _CALL arg_list
ARM GAS  tinyBasic.s 			page 68


 2417      FEFF5DF8 
 2417      04EB
 2418 00b2 0128     	    cmp r0,#1 
 2419 00b4 7FF4FEAF 	    bne syntax_error 
 2420 00b8 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2420      C4F20201 
 2421 00c0 486A     	    ldr r0,[r1,#RCC_CSR]
 2422              	// enable LSI 
 2423 00c2 80F00100 	    eor r0,#1
 2424 00c6 4862     	    str r0,[r1,#RCC_CSR]
 2425              	// wait for LSIRDY 
 2426 00c8 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2427 00ca 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2428 00ce FBD0     	    beq 1b 
 2429              	// configure IWDG
 2430              	// compute values for IWDG_PR and IWDG_RLR 
 2431 00d0 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2432 00d4 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2433 00d8 03FB02F2 	    mul r2,r3 
 2434 00dc 83EA0303 	    eor r3,r3
 2435 00e0 B2F5005F 	2:  cmp r2,#8192 
 2436 00e4 04D4     	    bmi 3f 
 2437 00e6 4FEA5202 	    lsr r2,#1 
 2438 00ea 03F10103 	    add r3,#1
 2439 00ee F7E7     	    b 2b
 2440              	// initialize IWDG      
 2441 00f0 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2441      C4F20001 
 2442 00f8 45F25550 	    mov r0,0x5555 // enable register writing
 2443 00fc 0860     	    str r0,[r1,#IWDG_KR]
 2444 00fe 4B60     	    str r3,[r1,#IWDG_PR]
 2445 0100 8A60     	    str r2,[r1,#IWDG_RLR]
 2446 0102 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2447 0106 0860     	    str r0,[r1,#IWDG_KR]
 2448 0108 00F074BF 	    b sleep // place MCU in deep sleep
 2449 010c 7047     	    _RET
 2450              	
 2451              	/********************************************
 2452              	  BASIC: BIT(expr)
 2453              	  expr must be between 0..31 and is used 
 2454              	  to create 1 bit mask at that position
 2455              	*******************************************/
 2456 010e 00BF     	    _FUNC bitmask
 2457 0110 00B5FFF7 	    _CALL func_args
 2457      FEFF5DF8 
 2457      04EB
 2458 011a 0128     	    cmp r0,#1 
 2459 011c 7FF4FEAF 	    bne syntax_error 
 2460 0120 5CF8040B 	    _POP r0
 2461 0124 4FF00101 	    mov r1,#1
 2462 0128 01FA00F1 	    lsl r1,r0 
 2463 012c 4FF01B00 	9:  mov r0,#TK_INTGR
 2464 0130 7047     	    _RET 
 2465              	
 2466              	  
 2467              	  /*********************************
 2468              	   BASIC: BRES adr, mask   
ARM GAS  tinyBasic.s 			page 69


 2469              	   reset bits [adr]= [adr] & ~mask  
 2470              	   input:
 2471              	     none 
 2472              	    output;
 2473              	      none 
 2474              	    use:
 2475              	      T1   temp
 2476              	      T2   temp 
 2477              	*******************************/     
 2478 0132 00BF     	  _FUNC bit_reset
 2479 0134 00B5FFF7 	    _CALL arg_list 
 2479      FEFF5DF8 
 2479      04EB
 2480 013e 0228     	    cmp r0,#2 
 2481 0140 01D0     	    beq 1f 
 2482 0142 FFF7FEBF 	    b syntax_error 
 2483 0146 5CF8041B 	1:  _POP r1 //mask 
 2484 014a 5CF8040B 	    _POP r0 //address 
 2485 014e D0F80090 	    ldr T2,[r0] 
 2486 0152 81F0FF31 	    eor r1,#-1 // ~mask 
 2487 0156 01EA0901 	    and r1,T2
 2488 015a 0160     	    str r1,[r0]
 2489 015c 7047     	    _RET  
 2490              	
 2491              	
 2492              	/*********************************
 2493              	   BASIC: BSET adr, mask   
 2494              	   reset bits [adr]= [adr] & ~mask  
 2495              	   input:
 2496              	      none 
 2497              	    output;
 2498              	      none 
 2499              	    use:
 2500              	      T1   temp
 2501              	      T2   temp  
 2502              	*******************************/     
 2503 015e 00BF     	    _FUNC bit_set
 2504 0160 00B5FFF7 	    _CALL arg_list 
 2504      FEFF5DF8 
 2504      04EB
 2505 016a 0228     	    cmp r0,#2 
 2506 016c 01D0     	    beq 1f 
 2507 016e FFF7FEBF 	    b syntax_error 
 2508 0172 5CF8041B 	1:  _POP r1 //mask 
 2509 0176 5CF8040B 	    _POP r0 //address 
 2510 017a D0F80090 	    ldr T2,[r0] 
 2511 017e 41EA0901 	    orr r1,T2
 2512 0182 0160     	    str r1,[r0]
 2513 0184 7047     	    _RET 
 2514              	
 2515              	  /*********************************
 2516              	   BASIC: BTOGL adr, mask   
 2517              	   reset bits [adr]= [adr] & ~mask  
 2518              	   input:
 2519              	     r0    adr 
 2520              	     r1    mask 
 2521              	    output;
ARM GAS  tinyBasic.s 			page 70


 2522              	      none 
 2523              	    use:
 2524              	      T1   temp
 2525              	      T2   temp  
 2526              	*******************************/     
 2527 0186 00BF     	  _FUNC bit_toggle
 2528 0188 00B5FFF7 	    _CALL arg_list 
 2528      FEFF5DF8 
 2528      04EB
 2529 0192 0228     	    cmp r0,#2 
 2530 0194 01D0     	    beq 1f 
 2531 0196 FFF7FEBF 	    b syntax_error 
 2532 019a 5CF8041B 	1:  _POP r1 //mask 
 2533 019e 5CF8040B 	    _POP r0 //address 
 2534 01a2 D0F80090 	    ldr T2,[r0] 
 2535 01a6 81EA0901 	    eor r1,T2
 2536 01aa 0160     	    str r1,[r0]
 2537 01ac 7047     	    _RET  
 2538              	
 2539              	/********************************
 2540              	  BASIC: BTEST(addr,bit)
 2541              	  return bit state at address
 2542              	********************************/
 2543 01ae 00BF     	    _FUNC bit_test
 2544 01b0 00B5FFF7 	    _CALL func_args
 2544      FEFF5DF8 
 2544      04EB
 2545 01ba 0228     	    cmp r0,#2 
 2546 01bc 7FF4FEAF 	    bne syntax_error 
 2547 01c0 5CF8041B 	    _POP r1
 2548 01c4 4FF00100 	    mov r0,#1
 2549 01c8 01F01F01 	    and r1,#31  
 2550 01cc 21B1     	1:  cbz r1, 2f
 2551 01ce 4FEA4000 	    lsl r0,#1
 2552 01d2 A1F10101 	    sub r1,#1
 2553 01d6 F9E7     	    b 1b 
 2554 01d8 5CF8041B 	2:  _POP r1
 2555 01dc 0968     	    ldr r1,[r1]
 2556 01de 01EA0001 	    and r1,r0 
 2557 01e2 09B1     	    cbz r1,9f 
 2558 01e4 4FF00101 	    mov r1,#1
 2559 01e8 4FF01B00 	9:  mov r0,#TK_INTGR    
 2560 01ec 7047     	    _RET 
 2561              	
 2562              	/********************************
 2563              	  BASIC: CLS 
 2564              	  clear terminal screen move cursor 
 2565              	  home 
 2566              	************************************/
 2567 01ee 00BF     	    _FUNC cls 
 2568 01f0 00B5FFF7 	    _CALL clear_screen
 2568      FEFF5DF8 
 2568      04EB
 2569 01fa 7047     	    _RET 
 2570              	
 2571              	/*********************************
 2572              	  BASIC: CHAR(expr)
ARM GAS  tinyBasic.s 			page 71


 2573              	  convert expr in character 
 2574              	********************************/
 2575              	    _FUNC char
 2576 01fc 00B5FFF7 	    _CALL func_args
 2576      FEFF5DF8 
 2576      04EB
 2577 0206 0128     	    cmp r0,#1
 2578 0208 7FF4FEAF 	    bne syntax_error 
 2579 020c 5CF8041B 	    _POP r1 
 2580 0210 01F07F01 	    and r1,#127 
 2581 0214 4FF01300 	    mov r0,#TK_CHAR
 2582 0218 7047     	    _RET 
 2583              	
 2584              	/**********************************
 2585              	  BASIC: CONST label=expr [,!label=expr]
 2586              	  define constants constants are 
 2587              	  store at end of BASIC code.
 2588              	  use:
 2589              	    T1   *location 
 2590              	    T2   *bound 
 2591              	*********************************/
 2592 021a 00BF     	    _FUNC const
 2593 021c 206C10F0 	    _RTO 
 2593      010F03D1 
 2593      4FF00700 
 2593      FFF7FEBF 
 2594 022c D4F8D080 	    ldr T1,[UPP,#HERE]
 2595 0230 DFF81497 	    ldr T2,pad_adr  
 2596 0234 C845     	1:  cmp T1,T2 
 2597 0236 03D4     	    bmi 2f 
 2598 0238 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2599 023c FFF7FEBF 	    b tb_error 
 2600 0240 00B5FFF7 	2:  _CALL next_token 
 2600      FEFF5DF8 
 2600      04EB
 2601 024a 1A28     	    cmp r0,#TK_LABEL 
 2602 024c 7FF4FEAF 	    bne syntax_error 
 2603 0250 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2604 0254 4CF8041D 	    _PUSH r1 
 2605 0258 4FF00D00 	    mov r0,#TK_EQUAL
 2606 025c 00B5FFF7 	    _CALL expect
 2606      FEFF5DF8 
 2606      04EB
 2607 0266 00B5FFF7 	    _CALL expression  
 2607      FEFF5DF8 
 2607      04EB
 2608 0270 1B28     	    cmp r0,#TK_INTGR
 2609 0272 7FF4FEAF 	    bne syntax_error
 2610 0276 5CF8040B 	    _POP r0 
 2611 027a 48F8040B 	    str r0,[T1],#4
 2612 027e 48F8041B 	    str r1,[T1],#4 
 2613 0282 C4F8D080 	    str T1,[UPP,#HERE]
 2614 0286 00B5FFF7 	    _CALL next_token
 2614      FEFF5DF8 
 2614      04EB
 2615 0290 0228     	    cmp r0,#TK_COMMA 
 2616 0292 CFD0     	    beq 1b 
ARM GAS  tinyBasic.s 			page 72


 2617 0294 D4F800A0 	    _UNGET_TOKEN
 2617      D4F808B0 
 2618              	9:  
 2619 029c 7047     	    _RET 
 2620              	
 2621              	
 2622              	/**************************
 2623              	  BASIC: DATALN expr 
 2624              	  set data pointer to line#
 2625              	  specified by expr. 
 2626              	  if line# not valid program 
 2627              	  end with error.
 2628              	  use:
 2629              	
 2630              	**************************/
 2631 029e 00BF     	    _FUNC data_line
 2632 02a0 206C10F0 	    _RTO // run time only 
 2632      010F03D1 
 2632      4FF00700 
 2632      FFF7FEBF 
 2633 02b0 00B5FFF7 	    _CALL expression 
 2633      FEFF5DF8 
 2633      04EB
 2634 02ba 1B28     	    cmp r0,#TK_INTGR
 2635 02bc 7FF4FEAF 	    bne syntax_error
 2636 02c0 0846     	    mov r0,r1 
 2637 02c2 00B5FFF7 	    _CALL search_lineno
 2637      FEFF5DF8 
 2637      04EB
 2638 02cc 0029     	    cmp r1,#0
 2639 02ce 03D0     	    beq 1f 
 2640 02d0 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2641 02d4 FFF7FEBF 	    b syntax_error 
 2642 02d8 C178     	1:  ldrb r1,[r0,#3]
 2643 02da 1729     	    cmp r1,#TK_CMD 
 2644 02dc F8D1     	    bne 0b
 2645 02de 0179     	    ldrb r1,[r0,#4]
 2646 02e0 0C29     	    cmp r1,#DATA_IDX 
 2647 02e2 F5D1     	    bne 0b  
 2648 02e4 E060     	    str r0,[UPP,#DATAPTR]
 2649 02e6 8178     	    ldrb r1,[r0,#2]
 2650 02e8 6161     	    str r1,[UPP,#DATALEN]
 2651 02ea 4FF00501 	    mov r1,#5 // position of first data item  
 2652 02ee 2161     	    str r1,[UPP,#DATA]
 2653 02f0 7047     	    _RET 
 2654              	
 2655              	/*****************************
 2656              	  BASIC: READ 
 2657              	  read next data item 
 2658              	  the value can be assigned to
 2659              	  variable or used in expression
 2660              	*****************************/
 2661 02f2 00BF     	    _FUNC read
 2662 02f4 206C10F0 	    _RTO
 2662      010F03D1 
 2662      4FF00700 
 2662      FFF7FEBF 
ARM GAS  tinyBasic.s 			page 73


 2663 0304 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2664 0306 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2665 0308 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2666 030a 8242     	    cmp r2,r0
 2667 030c 0ED0     	    beq seek_next
 2668 030e 885C     	1:  ldrb r0,[r1,r2]
 2669 0310 02F10102 	    add r2,#1
 2670 0314 0028     	    cmp r0,#TK_NONE
 2671 0316 09D0     	    beq seek_next
 2672 0318 0228     	    cmp r0,#TK_COMMA
 2673 031a F8D0     	    beq 1b  
 2674 031c 1B28     	    cmp r0,#TK_INTGR 
 2675 031e 7FF4FEAF 	    bne syntax_error  
 2676 0322 8958     	    ldr r1,[r1,r2]
 2677 0324 02F10402 	    add r2,#4
 2678 0328 2261     	    str r2,[UPP,#DATA]
 2679 032a 12E0     	    b 9f  
 2680              	seek_next: // is next line data ?
 2681 032c 8878     	    ldrb r0,[R1,#2]
 2682 032e 0144     	    add r1,r0 
 2683 0330 C878     	    ldrb r0,[R1,#3]
 2684 0332 1728     	    cmp r0,#TK_CMD
 2685 0334 09D1     	    bne 2f 
 2686 0336 0879     	    ldrb r0,[r1,#4]
 2687 0338 0C28     	    cmp r0,#DATA_IDX 
 2688 033a 06D1     	    bne 2f 
 2689 033c E160     	    str r1,[UPP,#DATAPTR]
 2690 033e 8878     	    ldrb r0,[r1,#2]
 2691 0340 6061     	    str  r0,[UPP,#DATALEN]
 2692 0342 4FF00502 	    mov r2,#5 
 2693 0346 2261     	    str r2,[UPP,#DATA]
 2694 0348 E1E7     	    b 1b 
 2695 034a 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2696 034e FFF7FEBF 	    b tb_error 
 2697 0352 7047     	9:  _RET 
 2698              	
 2699              	/********************************
 2700              	  BASIC: RESTORE 
 2701              	  seek first data line 
 2702              	********************************/
 2703              	    _FUNC restore
 2704 0354 206C10F0 	    _RTO 
 2704      010F03D1 
 2704      4FF00700 
 2704      FFF7FEBF 
 2705 0364 216B     	    ldr r1,[UPP,#TXTBGN]
 2706 0366 606B     	1:  ldr r0,[UPP,#TXTEND]
 2707 0368 0FD0     	    beq no_data_line 
 2708 036a 0879     	    ldrb r0,[r1,#4]
 2709 036c 0C28     	    cmp r0,#DATA_IDX
 2710 036e 09D1     	    bne try_next_line
 2711 0370 C878     	    ldrb r0,[r1,#3]
 2712 0372 1728     	    cmp r0,#TK_CMD
 2713 0374 06D1     	    bne try_next_line
 2714              	// this a the first data line 
 2715 0376 E160     	    str r1,[UPP,#DATAPTR]
 2716 0378 8878     	    ldrb r0,[r1,#2]
ARM GAS  tinyBasic.s 			page 74


 2717 037a 6061     	    str r0,[UPP,#DATALEN]
 2718 037c 4FF00500 	    mov r0,#5 
 2719 0380 2061     	    str r0,[UPP,#DATA]
 2720 0382 07E0     	    b 9f
 2721              	try_next_line:
 2722 0384 8878     	    ldrb r0,[r1,#2]
 2723 0386 0144     	    add r1,r0 
 2724 0388 EDE7     	    b 1b 
 2725              	no_data_line:
 2726 038a 80EA0000 	    eor r0,r0 
 2727 038e E060     	    str r0,[UPP,#DATAPTR]
 2728 0390 2061     	    str r0,[UPP,#DATA]
 2729 0392 6061     	    str r0,[UPP,#DATALEN]
 2730 0394 7047     	9:  _RET 
 2731              	
 2732              	/***********************************
 2733              	  BASIC: DEC 
 2734              	  switch base to decimal 
 2735              	***********************************/
 2736 0396 00BF     	    _FUNC dec_base
 2737 0398 4FF00A00 	    mov r0,#10
 2738 039c A061     	    str r0,[UPP,#BASE]
 2739 039e 7047     	    _RET 
 2740              	
 2741              	/***************************************
 2742              	  BASIC: DO 
 2743              	  initialize a DO..UNTIL loop 
 2744              	***************************************/
 2745              	    _FUNC do_loop
 2746 03a0 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2747 03a4 7047     	    _RET 
 2748              	
 2749              	
 2750              	/****************************************
 2751              	  BASIC: DUMP adr, count 
 2752              	    command line only  
 2753              	    print memory content in hexadecimal 
 2754              	    16 bytes per row 
 2755              	    ouput:
 2756              	      none 
 2757              	    use:
 2758              	      r2   byte counter  
 2759              	****************************************/
 2760 03a6 00BF     	    _FUNC dump 
 2761 03a8 206C10F0 	    _CLO 
 2761      010F03D0 
 2761      4FF00700 
 2761      FFF7FEBF 
 2762 03b8 00B5FFF7 	    _CALL arg_list 
 2762      FEFF5DF8 
 2762      04EB
 2763 03c2 0228     	    cmp r0,#2
 2764 03c4 7FF4FEAF 	    bne syntax_error 
 2765 03c8 5CF8042B 	    _POP r2   // count 
 2766 03cc 5CF8040B 	    _POP  r0  // adr
 2767              	dump01:
 2768 03d0 00B500F0 	    _CALL print_dump_header 
ARM GAS  tinyBasic.s 			page 75


 2768      0DF85DF8 
 2768      04EB
 2769 03da 4FF01001 	1:  mov r1,#16
 2770 03de 00B5FFF7 	    _CALL prt_row 
 2770      FEFF5DF8 
 2770      04EB
 2771 03e8 103A     	    subs r2,#16 
 2772 03ea F6D5     	    bpl 1b 
 2773 03ec 7047     	    _RET 
 2774              	
 2775              	/********************************
 2776              	   print_dump_header
 2777              	********************************/
 2778 03ee 00BF     	    _FUNC print_dump_header
 2779 03f0 2DE90103 	    push {r0,T1,T2}
 2780 03f4 4FF00C00 	    mov r0,#12 
 2781 03f8 00B5FFF7 	    _CALL cursor_x 
 2781      FEFF5DF8 
 2781      04EB
 2782 0402 4FF00000 	    mov r0,#0
 2783 0406 4FF01009 	    mov T2,#16
 2784 040a 8046     	1:  mov T1,r0 
 2785 040c 00B5FFF7 	    _CALL print_hex 
 2785      FEFF5DF8 
 2785      04EB
 2786 0416 08F10100 	    add r0,T1,#1  
 2787 041a 4845     	    cmp r0,T2 
 2788 041c F5D4     	    bmi 1b 
 2789 041e 00B5FFF7 	    _CALL cr
 2789      FEFF5DF8 
 2789      04EB
 2790 0428 4FF03D00 	    mov r0,#'='
 2791 042c 4FF04F08 	    mov T1,#79
 2792 0430 00B5FFF7 	2:  _CALL uart_putc
 2792      FEFF5DF8 
 2792      04EB
 2793 043a B8F10108 	    subs T1,#1 
 2794 043e F7D1     	    bne 2b     
 2795 0440 00B5FFF7 	    _CALL cr
 2795      FEFF5DF8 
 2795      04EB
 2796 044a BDE80103 	    pop {r0,T1,T2}
 2797 044e 7047     	    _RET 
 2798              	
 2799              	
 2800              	/*******************************
 2801              	  BASIC: END 
 2802              	  exit program 
 2803              	******************************/ 
 2804              	    _FUNC cmd_end
 2805 0450 FFF7FEBF 	    b warm_start 
 2806 0454 7047     	    _RET 
 2807              	
 2808              	/*******************************************
 2809              	  BASIC: STORE adr, value 
 2810              	  write value to user space in flash memory 
 2811              	*********************************************/
ARM GAS  tinyBasic.s 			page 76


 2812 0456 00BF     	    _FUNC store 
 2813 0458 00B5FFF7 	    _CALL arg_list 
 2813      FEFF5DF8 
 2813      04EB
 2814 0462 0228     	    cmp r0,#2 
 2815 0464 7FF4FEAF 	    bne syntax_error 
 2816 0468 BCE80300 	    ldmia DP!,{r0,r1}
 2817 046c DFF83020 	    ldr r2,user_space
 2818 0470 9142     	    cmp r1,r2 
 2819 0472 03D5     	    bpl 1f 
 2820 0474 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2821 0478 FFF7FEBF 	    b tb_error 
 2822 047c 02F58062 	1:  add r2,#1024 
 2823 0480 9142     	    cmp r1,r2 
 2824 0482 F7D5     	    bpl 0b 
 2825 0484 00B5FFF7 	    _CALL flash_store 
 2825      FEFF5DF8 
 2825      04EB
 2826 048e 7047     	    _RET 
 2827              	
 2828              	/**************************************************
 2829              	  BASIC: ERASE 
 2830              	  erase user space page 
 2831              	*************************************************/
 2832              	    _FUNC erase 
 2833 0490 DFF80C00 	    ldr r0,user_space 
 2834 0494 00B5FFF7 	    _CALL erase_page 
 2834      FEFF5DF8 
 2834      04EB
 2835 049e 7047     	    _RET 
 2836 04a0 00000000 	user_space: .word user 
 2837              	
 2838              	
 2839              	/**************************************************
 2840              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
 2841              	  introdure FOR...NEXT loop 
 2842              	**************************************************/
 2843              	    _FUNC for
 2844 04a4 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2845 04a8 4FF00107 	    mov INCR,#1
 2846 04ac 00B5FFF7 	    _CALL next_token
 2846      FEFF5DF8 
 2846      04EB
 2847 04b6 1428     	    cmp r0,#TK_VAR
 2848 04b8 7FF4FEAF 	    bne syntax_error
 2849 04bc 02B4     	    push {r1} 
 2850 04be 00B500F0 	    _CALL let_var 
 2850      2FF95DF8 
 2850      04EB
 2851 04c8 20BC     	    pop {VADR}
 2852 04ca 4FEA8505 	    lsl VADR,#2
 2853 04ce 2544     	    add VADR,UPP 
 2854 04d0 05F16005 	    add VADR,#VARS 
 2855 04d4 7047     	    _RET 
 2856              	
 2857              	/***************************************
 2858              	  BASIC: TO expr 
ARM GAS  tinyBasic.s 			page 77


 2859              	  set limit of FOR...NEXT loop 
 2860              	**************************************/
 2861 04d6 00BF     	    _FUNC to
 2862 04d8 00B5FFF7 	    _CALL expression 
 2862      FEFF5DF8 
 2862      04EB
 2863 04e2 1B28     	    cmp r0,#TK_INTGR
 2864 04e4 7FF4FEAF 	    bne syntax_error 
 2865 04e8 0E46     	    mov LIMIT,r1
 2866              	    // save loop back parameters 
 2867 04ea 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2868 04ee 7047     	    _RET 
 2869              	
 2870              	/********************************************
 2871              	  BASIC: STEP expr 
 2872              	  set increment for FOR...NEXT loop 
 2873              	********************************************/
 2874              	    _FUNC step
 2875 04f0 00B5FFF7 	    _CALL expression 
 2875      FEFF5DF8 
 2875      04EB
 2876 04fa 1B28     	    cmp r0,#TK_INTGR
 2877 04fc 7FF4FEAF 	    bne syntax_error 
 2878 0500 0F46     	    mov INCR,r1
 2879              	    // replace parameters left by TO
 2880 0502 8CE8000C 	    stmia DP, {IN,BPTR}
 2881 0506 7047     	    _RET 
 2882              	
 2883              	/********************************************
 2884              	  BASIC: NEXT var 
 2885              	  incrment FOR...NEXT loop variable
 2886              	  exit if variable cross LIMIT 
 2887              	********************************************/
 2888              	    _FUNC next
 2889 0508 00B5FFF7 	    _CALL next_token 
 2889      FEFF5DF8 
 2889      04EB
 2890 0512 1428     	    cmp r0,#TK_VAR 
 2891 0514 7FF4FEAF 	    bne syntax_error 
 2892 0518 4FEA8101 	    lsl r1,#2 
 2893 051c 2144     	    add r1,UPP 
 2894 051e 01F16001 	    add r1,#VARS 
 2895 0522 A942     	    cmp r1,VADR
 2896 0524 7FF4FEAF 	    bne syntax_error 
 2897 0528 2868     	    ldr r0,[VADR]
 2898 052a 3844     	    add r0,INCR 
 2899 052c 2860     	    str r0,[VADR]
 2900 052e 002F     	    cmp INCR,#0
 2901 0530 02D4     	    bmi 2f
 2902 0532 B042     	    cmp r0,LIMIT 
 2903 0534 02DC     	    bgt 8f  
 2904 0536 07E0     	    b 9f  
 2905 0538 B042     	2:  cmp r0,LIMIT 
 2906 053a 05DA     	    bge 9f  
 2907              	8: // exit for...next
 2908              	  //  drop branch parameters
 2909 053c 4FF00800 	    _DROP 2
ARM GAS  tinyBasic.s 			page 78


 2909      8444
 2910              	  // restore outer loop parameters
 2911 0542 BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2912 0546 7047     	    _RET 
 2913 0548 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2914 054c 9BF80200 	    ldrb r0,[BPTR,#2]
 2915 0550 6060     	    str r0,[UPP,#COUNT]
 2916 0552 00B5FFF7 	    _CALL show_trace 
 2916      FEFF5DF8 
 2916      04EB
 2917 055c 7047     	    _RET 
 2918              	
 2919              	
 2920              	/*********************************
 2921              	  BASIC: GOSUB expr 
 2922              	  call a subroutine at line# 
 2923              	*********************************/
 2924 055e 00BF     	    _FUNC gosub
 2925 0560 00B5FFF7 	    _CALL search_target 
 2925      FEFF5DF8 
 2925      04EB
 2926 056a 2DE9000C 	    push {IN,BPTR}
 2927              	target:
 2928 056e 8346     	    mov BPTR,r0 
 2929 0570 4FF0030A 	    mov IN,#3 
 2930 0574 9BF80200 	    ldrb r0,[BPTR,#2]
 2931 0578 6060     	    str r0,[UPP,#COUNT]
 2932 057a 00B5FFF7 	    _CALL show_trace 
 2932      FEFF5DF8 
 2932      04EB
 2933 0584 7047     	    _RET 
 2934              	
 2935              	/**********************************
 2936              	  BASIC: RETURN 
 2937              	  leave a subroutine 
 2938              	*********************************/
 2939 0586 00BF     	    _FUNC return 
 2940 0588 BDE8000C 	    pop {IN,BPTR}
 2941 058c 9BF80200 	    ldrb r0,[BPTR,#2]
 2942 0590 6060     	    str r0,[UPP,#COUNT]
 2943 0592 00B5FFF7 	    _CALL show_trace 
 2943      FEFF5DF8 
 2943      04EB
 2944 059c 7047     	    _RET 
 2945              	
 2946              	/**********************************
 2947              	  BASIC: GOTO expr 
 2948              	  go to line # | label 
 2949              	**********************************/
 2950 059e 00BF     	    _FUNC goto
 2951 05a0 00B5FFF7 	    _CALL search_target 
 2951      FEFF5DF8 
 2951      04EB
 2952 05aa E0E7     	    b target  
 2953              	
 2954              	/***************************************
 2955              	  BASIC: HEX 
ARM GAS  tinyBasic.s 			page 79


 2956              	  set numeric base to hexadecimal 
 2957              	***************************************/
 2958              	    _FUNC hex_base
 2959 05ac 4FF01000 	    mov r0,#16 
 2960 05b0 A061     	    str r0,[UPP,#BASE]
 2961 05b2 7047     	    _RET 
 2962              	
 2963              	/**********************************************
 2964              	  BASIC: IF relation THEN statement
 2965              	  execute statement only if relation is true
 2966              	*********************************************/
 2967              	    _FUNC if
 2968 05b4 00B5FFF7 	    _CALL relation 
 2968      FEFF5DF8 
 2968      04EB
 2969 05be 09B9     	    cbnz r1,9f 
 2970 05c0 D4F804A0 	    ldr IN,[UPP,#COUNT]
 2971 05c4 7047     	9:  _RET 
 2972              	
 2973              	/*******************************************************
 2974              	  BASIC: THEN statement
 2975              	  statements following THEN are executed if relation is !=0
 2976              	  optional, retained for compatibility.
 2977              	******************************************************/
 2978 05c6 00BF     	    _FUNC then 
 2979              	// do nothing 
 2980 05c8 7047     	    _RET
 2981              	
 2982              	/****************************************
 2983              	  BASIC: INPUT [string]var [,[string]var]+
 2984              	  prompt user for variable value
 2985              	  use:
 2986              	    r2   
 2987              	    T1   variable indice 
 2988              	***************************************/
 2989 05ca 00BF     	     _FUNC input_var
 2990 05cc 2DE90401 	    push {r2,T1}
 2991 05d0 00B5FFF7 	1:  _CALL next_token 
 2991      FEFF5DF8 
 2991      04EB
 2992 05da 0228     	    cmp r0,#2
 2993 05dc 71D4     	    bmi 8f 
 2994 05de 1C28     	    cmp r0,#TK_QSTR 
 2995 05e0 11D1     	    bne 2f 
 2996 05e2 0846     	    mov r0,r1
 2997 05e4 DFF8EC10 	    ldr r1,str_buffer
 2998 05e8 00B5FFF7 	    _CALL strcpy
 2998      FEFF5DF8 
 2998      04EB
 2999 05f2 4FF01400 	    mov r0,#TK_VAR   
 3000 05f6 00B5FFF7 	    _CALL expect 
 3000      FEFF5DF8 
 3000      04EB
 3001 0600 8846     	    mov T1,r1 
 3002 0602 3448     	    ldr r0,str_buffer 
 3003 0604 08E0     	    b 3f 
 3004 0606 1428     	2:  cmp r0,#TK_VAR 
ARM GAS  tinyBasic.s 			page 80


 3005 0608 7FF4FEAF 	    bne syntax_error     
 3006 060c 8846     	    mov T1,r1 
 3007 060e 01F14100 	    add r0,r1,#'A' 
 3008 0612 3049     	    ldr r1,str_buffer
 3009 0614 0880     	    strh r0,[r1]
 3010 0616 0846     	    mov r0,r1 
 3011 0618 00B5FFF7 	3:  _CALL uart_puts  
 3011      FEFF5DF8 
 3011      04EB
 3012 0622 4FF03D00 	    mov r0,#'='
 3013 0626 00B5FFF7 	    _CALL uart_putc
 3013      FEFF5DF8 
 3013      04EB
 3014 0630 DFF89C00 	    ldr r0,input_buffer
 3015 0634 4FF02201 	    mov r1,#34 
 3016 0638 00B5FFF7 	    _CALL readln
 3016      FEFF5DF8 
 3016      04EB
 3017 0642 79B3     	    cbz r1,6f
 3018 0644 0178     	    ldrb r1,[r0]
 3019 0646 01B4     	    push {r0}
 3020 0648 0846     	    mov r0,r1
 3021 064a 00B5FFF7 	    _CALL is_letter 
 3021      FEFF5DF8 
 3021      04EB
 3022 0654 01BC     	    pop {r0}
 3023 0656 02D1     	    bne 3f 
 3024 0658 01F05F01 	    and r1,#0x5f // uppercase  
 3025 065c 24E0     	    b 7f 
 3026 065e 4FF00102 	3:  mov r2,#1
 3027 0662 2D29     	    cmp r1,#'-'
 3028 0664 04D1     	    bne 3f 
 3029 0666 4FF0FF32 	    mov r2,#-1 
 3030 066a 00F10100 	    add r0,#1 
 3031 066e 0DE0     	    b 4f  
 3032 0670 2429     	3:  cmp r1,#'$'
 3033 0672 04D1     	    bne 3f 
 3034 0674 4FF01001 	    mov r1,#16
 3035 0678 00F10100 	    add r0,#1  
 3036 067c 08E0     	    b 5f 
 3037 067e 2629     	3:  cmp r1,#'&' 
 3038 0680 04D1     	    bne 4f 
 3039 0682 4FF00201 	    mov r1,#2
 3040 0686 00F10100 	    add r0,#1 
 3041 068a 01E0     	    b 5f 
 3042 068c 4FF00A01 	4:  mov r1,#10 
 3043 0690 00B5FFF7 	5:  _CALL atoi 
 3043      FEFF5DF8 
 3043      04EB
 3044 069a 18B9     	    cbnz r0,6f
 3045 069c 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3046 06a0 FFF7FEBF 	    b tb_error
 3047 06a4 02FB01F1 	6:  mul r1,r2 
 3048 06a8 4046     	7:  mov r0,T1 
 3049 06aa 00B5FFF7 	    _CALL set_var
 3049      FEFF5DF8 
 3049      04EB
ARM GAS  tinyBasic.s 			page 81


 3050 06b4 00B5FFF7 	    _CALL next_token
 3050      FEFF5DF8 
 3050      04EB
 3051 06be 0228     	    cmp r0,#TK_COMMA 
 3052 06c0 86D0     	    beq 1b 
 3053 06c2 D4F800A0 	8:  _UNGET_TOKEN          
 3053      D4F808B0 
 3054 06ca BDE80401 	9:  pop {r2,T1}       
 3055 06ce 7047     	    _RET 
 3056 06d0 00000000 	input_buffer: .word _tib 
 3057 06d4 00000000 	str_buffer: .word _pad 
 3058              	
 3059              	
 3060              	/*****************************************
 3061              	  BASIC: INVERT(expr)
 3062              	  return 1's complement of expr
 3063              	****************************************/
 3064              	    _FUNC invert
 3065 06d8 00B5FFF7 	    _CALL func_args
 3065      FEFF5DF8 
 3065      04EB
 3066 06e2 0128     	    cmp r0,#1 
 3067 06e4 7FF4FEAF 	    bne syntax_error
 3068 06e8 5CF8041B 	    _POP r1  
 3069 06ec 6FEA0101 	    mvn r1,r1
 3070 06f0 4FF01B00 	    mov r0,#TK_INTGR
 3071 06f4 7047     	    _RET 
 3072              	
 3073              	/*************************************
 3074              	  BASIC: KEY 
 3075              	  wait for a character from console
 3076              	*************************************/
 3077 06f6 00BF     	    _FUNC key
 3078 06f8 00B5FFF7 	    _CALL uart_getc
 3078      FEFF5DF8 
 3078      04EB
 3079 0702 0146     	    mov r1,r0
 3080 0704 4FF01300 	    mov r0,#TK_CHAR 
 3081 0708 7047     	    _RET  
 3082              	
 3083              	/******************************
 3084              	  BASIC: [LET] var=expr 
 3085              	         [LET] @(expr)=expr
 3086              	  input:
 3087              	    none 
 3088              	  output:
 3089              	    none 
 3090              	  use:
 3091              	
 3092              	****************************/         
 3093 070a 00BF     	    _FUNC let
 3094 070c 00B5FFF7 	    _CALL next_token 
 3094      FEFF5DF8 
 3094      04EB
 3095 0716 1428     	    cmp r0,#TK_VAR
 3096 0718 03D0     	    beq let_var 
 3097 071a 0C28     	    cmp r0,#TK_ARRAY 
ARM GAS  tinyBasic.s 			page 82


 3098 071c 07D0     	    beq let_array 
 3099 071e FFF7FEBF 	    b syntax_error 
 3100              	let_var:
 3101 0722 4FEA8101 	    lsl r1,#2
 3102 0726 04F16000 	    add r0,UPP,#VARS
 3103 072a 0844     	    add r0,r1
 3104 072c 1FE0     	    b 1f 
 3105              	let_array: 
 3106 072e 4FF00500 	    mov r0,#TK_LPAREN
 3107 0732 00B5FFF7 	    _CALL expect 
 3107      FEFF5DF8 
 3107      04EB
 3108 073c 00B5FFF7 	    _CALL expression
 3108      FEFF5DF8 
 3108      04EB
 3109 0746 1B28     	    cmp r0,#TK_INTGR 
 3110 0748 7FF4FEAF 	    bne syntax_error
 3111 074c 4CF8041D 	    _PUSH r1 
 3112 0750 4FF00600 	    mov r0,#TK_RPAREN
 3113 0754 00B5FFF7 	    _CALL expect 
 3113      FEFF5DF8 
 3113      04EB
 3114 075e 5CF8041B 	    _POP r1 
 3115 0762 D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3116 0766 4FEA8101 	    lsl r1,#2 
 3117 076a A0EB0100 	    sub r0,r1 
 3118 076e 4CF8040D 	1:  _PUSH r0 
 3119 0772 4FF00D00 	    mov r0,#TK_EQUAL 
 3120 0776 00B5FFF7 	    _CALL expect 
 3120      FEFF5DF8 
 3120      04EB
 3121 0780 00B5FFF7 	    _CALL expression   
 3121      FEFF5DF8 
 3121      04EB
 3122 078a 1B28     	    cmp r0,#TK_INTGR
 3123 078c 7FF4FEAF 	    bne syntax_error   
 3124 0790 5CF8040B 	2:  _POP r0 
 3125 0794 0160     	    str r1,[r0]
 3126 0796 7047     	    _RET  
 3127              	
 3128              	/***************************************
 3129              	  BASIC: LIST [[first]-last]
 3130              	  use:
 3131              	    r2   first line# 
 3132              	    r3   last line#
 3133              	    T1   *line 
 3134              	    T2   TXTEND 
 3135              	**************************************/  
 3136              	    _FUNC list
 3137 0798 206C10F0 	    _CLO
 3137      010F03D0 
 3137      4FF00700 
 3137      FFF7FEBF 
 3138 07a8 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3139 07ac D4F83490 	    ldr T2,[UPP,#TXTEND]
 3140 07b0 B8F80020 	    ldrh r2,[T1]
 3141 07b4 4FF6FF73 	    mov r3,#65535 
ARM GAS  tinyBasic.s 			page 83


 3142 07b8 00B5FFF7 	    _CALL next_token 
 3142      FEFF5DF8 
 3142      04EB
 3143 07c2 10B3     	    cbz r0,6f 
 3144 07c4 1B28     	    cmp r0,#TK_INTGR
 3145 07c6 09D1     	    bne 1f 
 3146 07c8 0A46     	    mov r2,r1 // first line
 3147 07ca 00B5FFF7 	    _CALL next_token
 3147      FEFF5DF8 
 3147      04EB
 3148 07d4 0028     	    cmp r0,#TK_NONE 
 3149 07d6 01D1     	    bne 1f 
 3150 07d8 1346     	    mov r3,r2 
 3151 07da 0CE0     	    b 4f 
 3152 07dc 0828     	1:  cmp r0,#TK_MINUS 
 3153 07de 7FF4FEAF 	    bne syntax_error 
 3154 07e2 00B5FFF7 	    _CALL next_token 
 3154      FEFF5DF8 
 3154      04EB
 3155 07ec 18B1     	    cbz r0,4f 
 3156 07ee 1B28     	    cmp r0,#TK_INTGR
 3157 07f0 7FF4FEAF 	    bne syntax_error  
 3158 07f4 0B46     	    mov r3,r1 
 3159              	4:  // skip lines below r2 
 3160 07f6 B8F80000 	    ldrh r0,[T1]
 3161 07fa 9042     	    cmp r0,r2 
 3162 07fc 05D5     	    bpl 6f 
 3163 07fe 98F80200 	    ldrb r0,[T1,#2]
 3164 0802 8044     	    add T1,r0
 3165 0804 C845     	    cmp T1,T2 
 3166 0806 F6D4     	    bmi 4b
 3167 0808 1AE0     	    b 9f 
 3168 080a C845     	6:  cmp T1,T2  
 3169 080c 18D5     	    bpl 9f
 3170 080e 4046     	    mov r0,T1   
 3171 0810 DFF83010 	    ldr r1,out_buff 
 3172 0814 00B5FFF7 	    _CALL decompile_line 
 3172      FEFF5DF8 
 3172      04EB
 3173 081e 00B5FFF7 	    _CALL uart_puts 
 3173      FEFF5DF8 
 3173      04EB
 3174 0828 00B5FFF7 	    _CALL cr 
 3174      FEFF5DF8 
 3174      04EB
 3175 0832 98F80200 	    ldrb r0,[T1,#2]
 3176 0836 8044     	    add T1,r0
 3177 0838 B8F80000 	    ldrh r0,[T1]
 3178 083c 9842     	    cmp r0,r3 
 3179 083e E4DD     	    ble 6b 
 3180 0840 FFF7FEBF 	9:  b warm_start 
 3181 0844 00000000 	out_buff: .word _tib 
 3182              	
 3183              	/********************************
 3184              	  BASIC: LOCATE line,col
 3185              	  return log base 2 of expr 
 3186              	********************************/
ARM GAS  tinyBasic.s 			page 84


 3187              	    _FUNC locate
 3188 0848 00B5FFF7 	    _CALL arg_list 
 3188      FEFF5DF8 
 3188      04EB
 3189 0852 0228     	    cmp r0,#2 
 3190 0854 7FF4FEAF 	    bne syntax_error
 3191 0858 5CF8041B 	    _POP r1
 3192 085c 5CF8040B 	    _POP r0  
 3193 0860 00B5FFF7 	    _CALL set_curpos 
 3193      FEFF5DF8 
 3193      04EB
 3194 086a 7047     	    _RET 
 3195              	
 3196              	
 3197              	/****************************************
 3198              	  BASIC: LSHIFT(expr1,expr2)
 3199              	  shift right expr1 of expr2 bits 
 3200              	****************************************/
 3201              	    _FUNC lshift
 3202 086c 00B5FFF7 	    _CALL func_args
 3202      FEFF5DF8 
 3202      04EB
 3203 0876 0228     	    cmp r0,#2
 3204 0878 7FF4FEAF 	    bne syntax_error 
 3205 087c BCE80300 	    ldmia DP!,{r0,r1}
 3206 0880 01FA00F1 	    lsl r1,r0 
 3207 0884 4FF01B00 	    mov r0,#TK_INTGR
 3208 0888 7047     	    _RET 
 3209              	
 3210              	/***********************************
 3211              	  BASIC: NEW 
 3212              	  delete existing program in memory
 3213              	  and clear variables and RAM 
 3214              	***********************************/
 3215 088a 00BF     	    _FUNC new
 3216 088c 206C10F0 	    _CLO 
 3216      010F03D0 
 3216      4FF00700 
 3216      FFF7FEBF 
 3217 089c 00B5FFF7 	    _CALL clear_basic 
 3217      FEFF5DF8 
 3217      04EB
 3218 08a6 FFF7FEBF 	    b warm_start   
 3219              	
 3220              	/************************************
 3221              	  BASIC: NOT relation  
 3222              	  invert logical value or relation
 3223              	************************************/
 3224 08aa 00BF     	      _FUNC func_not
 3225 08ac 00B5FFF7 	      _CALL relation 
 3225      FEFF5DF8 
 3225      04EB
 3226 08b6 11B1     	      cbz r1,8f 
 3227 08b8 81EA0101 	      eor r1,r1
 3228 08bc 01E0     	      b 9f 
 3229 08be 4FF0FF31 	  8:  mov r1,#-1
 3230 08c2 7047     	  9:  _RET 
ARM GAS  tinyBasic.s 			page 85


 3231              	
 3232              	/******************************************
 3233              	  BASIC: OR(expr1,expr2)
 3234              	  binary OR between 2 expressions
 3235              	******************************************/
 3236              	    _FUNC bit_or
 3237 08c4 00B5FFF7 	    _CALL func_args
 3237      FEFF5DF8 
 3237      04EB
 3238 08ce 0228     	    cmp r0,#2
 3239 08d0 7FF4FEAF 	    bne syntax_error
 3240 08d4 5CF8040B 	    _POP r0 
 3241 08d8 5CF8041B 	    _POP r1
 3242 08dc 41EA0001 	    orr r1,r0 
 3243 08e0 4FF01B00 	    mov r0,#TK_INTGR
 3244 08e4 7047     	    _RET 
 3245              	
 3246              	/****************************************
 3247              	  BASIC: IN(gpio,pin) 
 3248              	  read gpio_idr selected pin  
 3249              	***************************************/
 3250 08e6 00BF     	    _FUNC pin_input 
 3251 08e8 00B5FFF7 	    _CALL func_args 
 3251      FEFF5DF8 
 3251      04EB
 3252 08f2 0228     	    cmp r0,#2 
 3253 08f4 7FF4FEAF 	    bne syntax_error  
 3254 08f8 BCE80300 	    ldmia DP!,{r0,r1}
 3255 08fc 4FF00802 	    mov r2,#GPIO_IDR 
 3256 0900 8A58     	    ldr r2,[r1,r2]
 3257 0902 00F00F00 	    and r0,#15 
 3258 0906 22FA00F2 	    lsr r2,r0 
 3259 090a 02F00101 	    and r1,r2,#1 
 3260 090e 4FF01B00 	    mov r0,#TK_INTGR
 3261 0912 7047     	    _RET 
 3262              	
 3263              	
 3264              	/****************************************
 3265              	  BASIC: OUT gpio,pin,value 
 3266              	   output to gpio_odr
 3267              	***************************************/
 3268              	    _FUNC out
 3269 0914 00B5FFF7 	    _CALL arg_list 
 3269      FEFF5DF8 
 3269      04EB
 3270 091e 0328     	    cmp r0,#3 
 3271 0920 7FF4FEAF 	    bne syntax_error 
 3272 0924 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3273 0928 4FF01003 	    mov r3,#GPIO_BSRR
 3274 092c 08B9     	    cbnz r0,1f 
 3275 092e 01F11001 	    add r1,#16 
 3276 0932 4FF00100 	1:  mov r0,#1 
 3277 0936 00FA01F0 	    lsl r0,r1 
 3278 093a D050     	    str r0,[r2,r3]    
 3279 093c 7047     	    _RET 
 3280              	
 3281              	
ARM GAS  tinyBasic.s 			page 86


 3282              	/****************************************
 3283              	  BASIC: PAD 
 3284              	  return pad buffer address 
 3285              	****************************************/
 3286 093e 00BF     	    _FUNC pad_ref
 3287 0940 0149     	    ldr r1,pad_adr  
 3288 0942 4FF01B00 	    mov r0,#TK_INTGR 
 3289 0946 7047     	    _RET 
 3290 0948 00000000 	pad_adr: .word _pad 
 3291              	
 3292              	/***********************
 3293              	  BASIC: PAUSE expr 
 3294              	  suspend execution for 
 3295              	  expr milliseconds 
 3296              	************************/
 3297              	    _FUNC pause
 3298 094c 00B5FFF7 	    _CALL expression 
 3298      FEFF5DF8 
 3298      04EB
 3299 0956 1B28     	    cmp r0,#TK_INTGR 
 3300 0958 7FF4FEAF 	    bne syntax_error 
 3301 095c E069     	    ldr r0,[UPP,#TICKS]
 3302 095e 0844     	    add r0,r1 
 3303 0960 E169     	1:  ldr r1,[UPP,#TICKS]
 3304 0962 8842     	    cmp r0,r1 
 3305 0964 FCD1     	    bne 1b     
 3306 0966 7047     	    _RET 
 3307              	
 3308              	/***************************************************
 3309              	  BASIC: PMODE \c,pin,mode[,opt] 
 3310              	  configure a digital pin for input|output
 3311              	  paramters:
 3312              	    \c    port letter
 3313              	    pin   pin {0..15} 
 3314              	    mode  0->input,1->output 10Mhz,2->output 2Mhz,3->output 50Mhz 
 3315              	    for input mode:
 3316              	      opt 0->analog, 1->floating,2->pulldown,3->pullup  
 3317              	    for output mode:
 3318              	      opt 0-> GPIO pushpull, 1->GPIO opendrain, 2->AF pushpull, 3->AF opendrain 
 3319              	  use:
 3320              	    r2  opt
 3321              	    r3  mode 
 3322              	    T1  pin  
 3323              	    T2  port      
 3324              	***************************************************/
 3325              	      _FUNC pin_mode
 3326 0968 4FF01300 	      mov r0,#TK_CHAR 
 3327 096c 00B5FFF7 	      _CALL expect
 3327      FEFF5DF8 
 3327      04EB
 3328 0976 0846     	      mov r0,r1 
 3329 0978 00B5FFF7 	      _CALL upper 
 3329      FEFF5DF8 
 3329      04EB
 3330 0982 A0F14109 	      sub T2,r0,#'A'
 3331 0986 4FF00200 	      mov r0,#TK_COMMA
 3332 098a 00B5FFF7 	      _CALL expect 
ARM GAS  tinyBasic.s 			page 87


 3332      FEFF5DF8 
 3332      04EB
 3333 0994 00B5FFF7 	      _CALL arg_list
 3333      FEFF5DF8 
 3333      04EB
 3334 099e 0228     	      cmp r0,#2 
 3335 09a0 3FF5FEAF 	      bmi syntax_error
 3336 09a4 0428     	      cmp r0,#4
 3337 09a6 01D4     	      bmi 1f 
 3338 09a8 FFF7FEBF 	      b syntax_error
 3339 09ac 4FF00002 	  1:  mov r2,#0 // default opt, input floating or output opendrain 
 3340 09b0 0228     	      cmp r0,#2
 3341 09b2 02D0     	      beq 2f 
 3342              	// 3 parameters, pin,mode,opt  
 3343 09b4 BCE80C01 	    ldmia DP!,{r2,r3,T1}
 3344 09b8 01E0     	    b 4f  
 3345              	2: // 2 parameters, pin,mode 
 3346 09ba BCE80801 	    ldmia DP!,{r3,T1}
 3347 09be 4FF48060 	4:  mov r0,#0x400 
 3348 09c2 00FB09F9 	    mul T2,r0 
 3349 09c6 4FF40060 	    _MOV32 r0,GPIOA_BASE_ADR
 3349      C4F20100 
 3350 09ce 8144     	    add T2,r0 // port base address 
 3351              	// if input mode set pull in ODR 
 3352 09d0 83B9     	    cbnz r3,2f 
 3353 09d2 022A     	    cmp r2,#2
 3354 09d4 0ED4     	    bmi 2f 
 3355 09d6 4FF00100 	    mov r0,#1 
 3356 09da 4146     	    mov r1,T1 
 3357 09dc 032A     	    cmp r2,#3 
 3358 09de 01D0     	    beq 1f
 3359 09e0 01F11001 	    add r1,#16 //reset bit 
 3360 09e4 00FA01F0 	1:  lsl r0,r1
 3361 09e8 C9F81000 	    str r0,[T2,#GPIO_BSRR]
 3362 09ec 032A     	    cmp r2,#3 
 3363 09ee 01D4     	    bmi 2f 
 3364 09f0 A2F10102 	    sub r2,#1
 3365              	2: // set CNF|MODE bits GPIO_CRx 
 3366 09f4 B8F1080F 	    cmp T1,#8 
 3367 09f8 03D4     	    bmi 3f 
 3368 09fa A8F10808 	    sub T1,#8 
 3369 09fe 09F10409 	    add T2,#4 //CRH 
 3370 0a02 4FF00F00 	3:  mov r0,#15   
 3371 0a06 4FEA8801 	    lsl r1,T1,#2 
 3372 0a0a 00FA01F0 	    lsl r0,r1
 3373 0a0e 6FEA0000 	    mvn r0,r0 // bitmask 
 3374 0a12 D9F80010 	    ldr r1,[T2]
 3375 0a16 01EA0001 	    and r1,r0  // clear CNF|MODE bits  
 3376              	// combine opt|mode     
 3377 0a1a 4FEA8200 	    lsl r0,r2,#2 
 3378 0a1e 40EA0300 	    orr r0,r3 // OPT|MODE 
 3379 0a22 4FEA8803 	    lsl r3,T1,#2 
 3380 0a26 00FA03F0 	    lsl r0,r3
 3381 0a2a 41EA0001 	    orr r1,r0   
 3382 0a2e C9F80010 	    str r1,[T2] // mode and option set
 3383 0a32 7047     	    _RET 
 3384              	
ARM GAS  tinyBasic.s 			page 88


 3385              	
 3386              	/*****************************************
 3387              	  BASIC: PEEK8 (expr)  
 3388              	  return byte value at address 
 3389              	*****************************************/
 3390              	    _FUNC peek8
 3391 0a34 00B5FFF7 	    _CALL func_args  
 3391      FEFF5DF8 
 3391      04EB
 3392 0a3e 0128     	    cmp r0,#1
 3393 0a40 3FF5FEAF 	    bmi syntax_error
 3394 0a44 5CF8041B 	    _POP r1 
 3395 0a48 0978     	    ldrb r1,[r1]
 3396 0a4a 4FF01B00 	    mov r0,#TK_INTGR     
 3397 0a4e 7047     	    _RET 
 3398              	
 3399              	/*****************************************
 3400              	  BASIC: PEEK16 (expr)  
 3401              	  return byte value at address 
 3402              	*****************************************/
 3403              	    _FUNC peek16
 3404 0a50 00B5FFF7 	    _CALL func_args  
 3404      FEFF5DF8 
 3404      04EB
 3405 0a5a 0128     	    cmp r0,#1
 3406 0a5c 3FF5FEAF 	    bmi syntax_error
 3407 0a60 5CF8041B 	    _POP r1 
 3408 0a64 0988     	    ldrh r1,[r1]
 3409 0a66 4FF01B00 	    mov r0,#TK_INTGR     
 3410 0a6a 7047     	    _RET 
 3411              	
 3412              	/*****************************************
 3413              	  BASIC: PEEK32 (expr)  
 3414              	  return byte value at address 
 3415              	*****************************************/
 3416              	    _FUNC peek32
 3417 0a6c 00B5FFF7 	    _CALL func_args  
 3417      FEFF5DF8 
 3417      04EB
 3418 0a76 0128     	    cmp r0,#1
 3419 0a78 3FF5FEAF 	    bmi syntax_error
 3420 0a7c 5CF8041B 	    _POP r1 
 3421 0a80 0968     	    ldr r1,[r1]
 3422 0a82 4FF01B00 	    mov r0,#TK_INTGR     
 3423 0a86 7047     	    _RET 
 3424              	
 3425              	
 3426              	/**********************************
 3427              	  BASIC: POKE8 addr,byte
 3428              	  store byte at addr   
 3429              	**********************************/
 3430              	    _FUNC poke8
 3431 0a88 00B5FFF7 	    _CALL arg_list
 3431      FEFF5DF8 
 3431      04EB
 3432 0a92 0228     	    cmp r0,#2 
 3433 0a94 7FF4FEAF 	    bne syntax_error
ARM GAS  tinyBasic.s 			page 89


 3434 0a98 BCE80300 	    ldmia DP!,{r0,r1} 
 3435 0a9c 0870     	    strb r0,[r1]
 3436 0a9e 7047     	    _RET 
 3437              	
 3438              	/**********************************
 3439              	  BASIC: POKE16 addr,hword
 3440              	  store hword at addr   
 3441              	**********************************/
 3442              	    _FUNC poke16
 3443 0aa0 00B5FFF7 	    _CALL arg_list
 3443      FEFF5DF8 
 3443      04EB
 3444 0aaa 0228     	    cmp r0,#2 
 3445 0aac 7FF4FEAF 	    bne syntax_error
 3446 0ab0 BCE80300 	    ldmia DP!,{r0,r1} 
 3447 0ab4 0880     	    strh r0,[r1]
 3448 0ab6 7047     	    _RET 
 3449              	
 3450              	/**********************************
 3451              	  BASIC: POKE32 addr,word
 3452              	  store word at addr   
 3453              	**********************************/
 3454              	    _FUNC poke32
 3455 0ab8 00B5FFF7 	    _CALL arg_list 
 3455      FEFF5DF8 
 3455      04EB
 3456 0ac2 0228     	    cmp r0,#2 
 3457 0ac4 7FF4FEAF 	    bne syntax_error
 3458 0ac8 BCE80300 	    ldmia DP!,{r0,r1} 
 3459 0acc 0860     	    str r0,[r1]
 3460 0ace 7047     	    _RET 
 3461              	
 3462              	
 3463              	
 3464              	/****************************
 3465              	  BASIC: PRINT|? arg_list 
 3466              	  print list of arguments 
 3467              	****************************/
 3468              	    _FUNC print
 3469 0ad0 206C     	    ldr r0,[UPP,#FLAGS]
 3470 0ad2 40F08000 	    orr r0,#FPRINT 
 3471 0ad6 2064     	    str r0,[UPP,#FLAGS]
 3472 0ad8 88EA0808 	    eor T1,T1 
 3473 0adc 00B5FFF7 	0:  _CALL expression
 3473      FEFF5DF8 
 3473      04EB
 3474 0ae6 1B28     	    cmp r0,#TK_INTGR
 3475 0ae8 07D1     	    bne 1f 
 3476 0aea 0846     	    mov r0,r1
 3477 0aec A169     	    ldr r1,[UPP,#BASE]
 3478 0aee 00B5FFF7 	    _CALL print_int
 3478      FEFF5DF8 
 3478      04EB
 3479 0af8 39E0     	    b 8f  
 3480 0afa 0128     	1:  cmp r0,#TK_COLON 
 3481 0afc 00DC     	    bgt 2f
 3482 0afe 4DE0     	    b unget_exit 
ARM GAS  tinyBasic.s 			page 90


 3483 0b00 1C28     	2:  cmp r0,#TK_QSTR 
 3484 0b02 06D1     	    bne 3f
 3485 0b04 0846     	    mov r0,r1 
 3486 0b06 00B5FFF7 	    _CALL uart_puts  
 3486      FEFF5DF8 
 3486      04EB
 3487 0b10 2DE0     	    b 8f 
 3488 0b12 1628     	3:  cmp r0,#TK_CFUNC
 3489 0b14 05D1     	    bne 4f
 3490 0b16 0846     	    mov r0,r1
 3491 0b18 00B5FFF7 	    _CALL execute 
 3491      FEFF5DF8 
 3491      04EB
 3492 0b22 1328     	4:  cmp r0,#TK_CHAR 
 3493 0b24 06D1     	    bne 5f 
 3494 0b26 0846     	    mov r0,r1 
 3495 0b28 00B5FFF7 	    _CALL uart_putc 
 3495      FEFF5DF8 
 3495      04EB
 3496 0b32 1CE0     	    b 8f 
 3497 0b34 0428     	5:  cmp r0,#TK_SHARP
 3498 0b36 09D1     	    bne 6f 
 3499 0b38 00B5FFF7 	   _CALL next_token
 3499      FEFF5DF8 
 3499      04EB
 3500 0b42 1B28     	    cmp r0,#TK_INTGR  
 3501 0b44 7FF4FEAF 	    bne syntax_error 
 3502 0b48 6164     	    str r1,[UPP,#TAB_WIDTH]
 3503 0b4a 10E0     	    b 8f 
 3504 0b4c 1728     	6:  cmp r0,#TK_CMD 
 3505 0b4e 25D1     	    bne unget_exit  
 3506 0b50 4629     	    cmp r1,#TAB_IDX 
 3507 0b52 05D1     	    bne 6f
 3508 0b54 00B500F0 	    _CALL tab 
 3508      9BFA5DF8 
 3508      04EB
 3509 0b5e 06E0     	    b 8f 
 3510 0b60 4229     	6:  cmp r1,#SPC_IDX  
 3511 0b62 1BD1     	    bne unget_exit
 3512 0b64 00B500F0 	    _CALL spc   
 3512      55FA5DF8 
 3512      04EB
 3513 0b6e 88EA0808 	8:  eor T1,T1  
 3514 0b72 00B5FFF7 	    _CALL next_token
 3514      FEFF5DF8 
 3514      04EB
 3515 0b7c 90B1     	    cbz r0, print_exit  
 3516 0b7e 0228     	    cmp r0,#TK_COMMA 
 3517 0b80 02D1     	    bne 8f 
 3518 0b82 4FF0FF38 	    mov T1,#-1
 3519 0b86 A9E7     	    b 0b
 3520 0b88 0328     	8:  cmp r0,#TK_SEMIC 
 3521 0b8a 07D1     	    bne unget_exit 
 3522 0b8c 00B5FFF7 	    _CALL tabulation 
 3522      FEFF5DF8 
 3522      04EB
 3523 0b96 4FF0FF38 	    mov T1,#-1
ARM GAS  tinyBasic.s 			page 91


 3524 0b9a 9FE7     	    b 0b
 3525              	unget_exit:         
 3526 0b9c D4F800A0 	   _UNGET_TOKEN 
 3526      D4F808B0 
 3527              	print_exit:
 3528 0ba4 18EA0808 	    ands T1,T1 
 3529 0ba8 08D1     	    bne 9f
 3530 0baa 00B5FFF7 	    _CALL cr
 3530      FEFF5DF8 
 3530      04EB
 3531 0bb4 206C     	    ldr r0,[UPP,#FLAGS]
 3532 0bb6 80F08000 	    eor r0,#FPRINT 
 3533 0bba 2064     	    str r0,[UPP,#FLAGS] 
 3534 0bbc 7047     	9:  _RET 
 3535              	
 3536              	/**************************************
 3537              	  BASIC: QKEY
 3538              	  check if key pressed 
 3539              	**************************************/ 
 3540 0bbe 00BF     	    _FUNC qkey
 3541 0bc0 4FF00001 	    mov r1,#0
 3542 0bc4 00B5FFF7 	    _CALL uart_qkey
 3542      FEFF5DF8 
 3542      04EB
 3543 0bce 01D0     	    beq 9f 
 3544 0bd0 4FF0FF31 	    mov r1,#-1 
 3545 0bd4 4FF01B00 	9:  mov r0,#TK_INTGR
 3546 0bd8 7047     	    _RET 
 3547              	
 3548              	/******************************************
 3549              	  BASIC RANDOM(expr)
 3550              	  generate random number between 0..expr-1
 3551              	******************************************/
 3552 0bda 00BF     	    _FUNC random
 3553 0bdc 00B5FFF7 	    _CALL func_args 
 3553      FEFF5DF8 
 3553      04EB
 3554 0be6 0128     	    cmp r0,#1
 3555 0be8 7FF4FEAF 	    bne syntax_error 
 3556 0bec 606A     	    ldr r0,[UPP,#SEED]
 3557 0bee 4FEA4031 	    lsl r1,r0,#13
 3558 0bf2 81EA0001 	    eor r1,r0
 3559 0bf6 4FEA5140 	    lsr r0,r1,#17
 3560 0bfa 81EA0001 	    eor r1,r0
 3561 0bfe 4FEA4110 	    lsl r0,r1,#5
 3562 0c02 81EA0001 	    eor r1,r0
 3563 0c06 6162     	    str r1,[UPP,#SEED]
 3564 0c08 5CF8040B 	    _POP r0 
 3565 0c0c B1FBF0F2 	    udiv r2,r1,r0  
 3566 0c10 00FB02F2 	    mul r2,r0 
 3567 0c14 A1EB0201 	    sub r1,r2 
 3568 0c18 4FF01B00 	    mov r0,#TK_INTGR
 3569 0c1c 7047     	    _RET 
 3570              	
 3571              	/****************************************
 3572              	  BASIC: RSHIFT(expr1,expr2)
 3573              	  shift left expr1 de expr2 bits 
ARM GAS  tinyBasic.s 			page 92


 3574              	****************************************/
 3575 0c1e 00BF     	    _FUNC rshift
 3576 0c20 00B5FFF7 	    _CALL func_args
 3576      FEFF5DF8 
 3576      04EB
 3577 0c2a 0228     	    cmp r0,#2 
 3578 0c2c 7FF4FEAF 	    bne syntax_error
 3579 0c30 BCE80300 	    ldmia DP!,{r0,r1}
 3580 0c34 21FA00F1 	    lsr r1,r0  
 3581 0c38 4FF01B00 	    mov r0,#TK_INTGR
 3582 0c3c 7047     	    _RET 
 3583              	
 3584              	/****************************
 3585              	  BASIC: RUN 
 3586              	  execute program in memory
 3587              	****************************/
 3588 0c3e 00BF     	    _FUNC run
 3589 0c40 206C10F0 	    _CLO 
 3589      010F03D0 
 3589      4FF00700 
 3589      FFF7FEBF 
 3590 0c50 206B     	    ldr r0,[UPP,#TXTBGN]
 3591 0c52 616B     	    ldr r1,[UPP,#TXTEND]
 3592 0c54 C4F8D010 	    str r1,[UPP,#HERE]
 3593 0c58 8842     	    cmp r0,r1
 3594 0c5a 21D0     	    beq 9f
 3595 0c5c 216C     	    ldr r1,[UPP,#FLAGS]
 3596 0c5e 11F0080F 	    tst r1,#FSTOP
 3597 0c62 09D0     	    beq 1f
 3598 0c64 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3599 0c68 6060     	    str r0,[UPP,#COUNT]
 3600 0c6a 206C     	    ldr r0,[UPP,#FLAGS]
 3601 0c6c 4FF00901 	    mov r1,#FRUN+FSTOP
 3602 0c70 80EA0100 	    eor r0,r1
 3603 0c74 2064     	    str r0,[UPP,#FLAGS] 
 3604 0c76 13E0     	    b 9f  
 3605 0c78 8178     	1:  ldrb r1,[r0,#2]
 3606 0c7a 6160     	    str r1,[UPP,#COUNT]
 3607 0c7c 8346     	    mov BPTR,r0 
 3608 0c7e 4FF0030A 	    mov IN,#3
 3609 0c82 606B     	    ldr r0,[UPP,#TXTEND]
 3610              	    // reset dataline pointers 
 3611 0c84 80EA0000 	    eor r0,r0 
 3612 0c88 E060     	    str r0,[UPP,#DATAPTR]
 3613 0c8a 2061     	    str r0,[UPP,#DATA]
 3614 0c8c 6061     	    str r0,[UPP,#DATALEN] 
 3615 0c8e 206C     	    ldr r0,[UPP,#FLAGS]
 3616 0c90 40F00100 	    orr r0,#FRUN 
 3617 0c94 2064     	    str r0,[UPP,#FLAGS]
 3618 0c96 00B5FFF7 	    _CALL show_trace 
 3618      FEFF5DF8 
 3618      04EB
 3619 0ca0 7047     	9:  _RET 
 3620              	
 3621              	/**********************************
 3622              	        FILE SYSTEM 
 3623              	**********************************/
ARM GAS  tinyBasic.s 			page 93


 3624              	
 3625              	/*********************************
 3626              	  search_free 
 3627              	  search first free PAGE in fs
 3628              	  a PAGE is free if first word is
 3629              	  -1
 3630              	  input:
 3631              	    none 
 3632              	  output:
 3633              	    r0    addr|0
 3634              	  use:
 3635              	*********************************/
 3636 0ca2 00BF     	    _FUNC search_free 
 3637 0ca4 06B4     	    push {r1,r2}
 3638 0ca6 DFF86410 	    ldr r1,fs_addr 
 3639 0caa 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3639      C0F60202 
 3640 0cb2 0868     	1:  ldr r0,[r1]
 3641 0cb4 B0F1FF3F 	    cmp r0,#-1
 3642 0cb8 03D0     	    beq 8f 
 3643 0cba 01F58061 	    add r1,#PAGE_SIZE
 3644 0cbe 9142     	    cmp r1,r2 
 3645 0cc0 F7D4     	    bmi 1b 
 3646 0cc2 0846     	8:  mov r0,r1 
 3647 0cc4 06BC     	    pop {r1,r2}   
 3648 0cc6 7047     	    _RET 
 3649              	
 3650              	/*********************************
 3651              	  search_file 
 3652              	  search for a file name 
 3653              	  in file system.
 3654              	  input: 
 3655              	    r0   .asciz target name
 3656              	  output:
 3657              	    r0    0 || address found 
 3658              	  use:
 3659              	   r0     temp 
 3660              	   r1     *file_name 
 3661              	   r2     *fs  
 3662              	   r3     target   
 3663              	**********************************/
 3664              	    _FUNC search_file 
 3665 0cc8 0EB4     	    push {r1,r2,r3}
 3666 0cca DFF84020 	    ldr r2,fs_addr
 3667 0cce 0346     	    mov r3,r0  
 3668              	cmp_loop:
 3669 0cd0 1068     	    ldr r0,[r2]
 3670 0cd2 B0F1FF3F 	    cmp r0,#-1
 3671 0cd6 80EA0000 	    eor r0,r0
 3672 0cda 15D0     	    beq 9f // reached end of fs 
 3673 0cdc 1846     	1:  mov r0,r3
 3674 0cde 02F10201 	    add r1,r2,#2
 3675 0ce2 00B5FFF7 	    _CALL strcmp
 3675      FEFF5DF8 
 3675      04EB
 3676 0cec 08B9     	    cbnz r0,2f
 3677 0cee 1046     	    mov r0,r2 
ARM GAS  tinyBasic.s 			page 94


 3678 0cf0 0AE0     	    b 9f   
 3679 0cf2 1088     	2:  ldrh r0,[r2] // name length
 3680 0cf4 0244     	    add r2,r0 
 3681 0cf6 1088     	    ldrh r0,[r2]
 3682 0cf8 1044     	    add r0,r2
 3683 0cfa 00B5FFF7 	    _CALL page_align 
 3683      FEFF5DF8 
 3683      04EB
 3684 0d04 0246     	    mov r2,r0   
 3685 0d06 E3E7     	    b cmp_loop 
 3686 0d08 0EBC     	9:  pop {r1,r2,r3}
 3687 0d0a 7047     	    _RET 
 3688              	
 3689 0d0c 00000000 	fs_addr: .word FILE_SYSTEM
 3690              	
 3691              	/*************************************
 3692              	  BASIC: DIR 
 3693              	  list files stored in fs 
 3694              	  use:
 3695              	    r0  temp 
 3696              	    r1  temp
 3697              	    r2  file count
 3698              	    r3  data size
 3699              	    T1  *fs  
 3700              	*************************************/
 3701              	    _FUNC directory
 3702 0d10 206C10F0 	    _CLO 
 3702      010F03D0 
 3702      4FF00700 
 3702      FFF7FEBF 
 3703 0d20 82EA0202 	    eor r2,r2 
 3704 0d24 5FF81C80 	    ldr T1,fs_addr 
 3705 0d28 D8F80000 	1:  ldr r0,[T1] // name length 
 3706 0d2c B0F1FF3F 	    cmp r0,#-1
 3707 0d30 2AD0     	    beq no_more_file
 3708 0d32 00F00F03 	    and r3,r0,#15
 3709 0d36 08F10200 	    add r0,T1,#2
 3710 0d3a 00B5FFF7 	    _CALL uart_puts 
 3710      FEFF5DF8 
 3710      04EB
 3711 0d44 4FF01000 	    mov r0,#16 
 3712 0d48 00B5FFF7 	    _CALL cursor_x 
 3712      FEFF5DF8 
 3712      04EB
 3713 0d52 9844     	    add T1,r3 
 3714 0d54 B8F80030 	    ldrh r3,[T1]
 3715 0d58 1846     	    mov r0,r3 
 3716 0d5a 4FF00A01 	    mov r1,#10 
 3717 0d5e 00B5FFF7 	    _CALL print_int
 3717      FEFF5DF8 
 3717      04EB
 3718 0d68 00B5FFF7 	    _CALL cr  
 3718      FEFF5DF8 
 3718      04EB
 3719 0d72 08EB0300 	    add r0,T1,r3 
 3720 0d76 00B5FFF7 	    _CALL page_align
 3720      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 95


 3720      04EB
 3721 0d80 8046     	    mov T1,r0 
 3722 0d82 02F10102 	    add r2,#1 
 3723 0d86 CFE7     	    b 1b  
 3724              	no_more_file:
 3725 0d88 00B5FFF7 	    _CALL cr
 3725      FEFF5DF8 
 3725      04EB
 3726 0d92 4FF01000 	    mov r0,#16
 3727 0d96 00B5FFF7 	    _CALL cursor_x  
 3727      FEFF5DF8 
 3727      04EB
 3728 0da0 1046     	    mov r0,r2 
 3729 0da2 4FF00A01 	    mov r1,#10 
 3730 0da6 00B5FFF7 	    _CALL print_int 
 3730      FEFF5DF8 
 3730      04EB
 3731 0db0 DFF85405 	    ldr r0,=fcount 
 3732 0db4 00B5FFF7 	    _CALL uart_puts 
 3732      FEFF5DF8 
 3732      04EB
 3733 0dbe 7047     	    _RET 
 3734 0dc0 66696C65 	fcount:  .asciz "files\n"
 3734      730A00
 3735              	
 3736              	/*************************************
 3737              	  BASIC: FORGET ["name"]
 3738              	  delete file and all following 
 3739              	  if no name given delete all files 
 3740              	************************************/
 3741 0dc7 00       	    _FUNC forget
 3742 0dc8 2DE90802 	    push {r3,T2}
 3743 0dcc 5FF8C490 	    ldr T2,fs_addr 
 3744 0dd0 E36A     	    ldr r3,[UPP,#FSFREE]
 3745 0dd2 00B5FFF7 	    _CALL next_token
 3745      FEFF5DF8 
 3745      04EB
 3746 0ddc 38B1     	    cbz r0,1f // no name 
 3747 0dde 0846     	    mov r0,r1
 3748 0de0 00B5FFF7 	    _CALL search_file
 3748      71FF5DF8 
 3748      04EB
 3749 0dea 58B1     	    cbz r0,9f 
 3750 0dec 8146     	    mov T2,r0 
 3751 0dee 9945     	1:  cmp T2,r3 
 3752 0df0 08D5     	    bpl 9f 
 3753 0df2 4846     	    mov r0,T2 
 3754 0df4 00B5FFF7 	    _CALL erase_page
 3754      FEFF5DF8 
 3754      04EB
 3755 0dfe 09F58069 	    add T2,#PAGE_SIZE
 3756 0e02 F4E7     	    b 1b 
 3757 0e04 00B5FFF7 	9:  _CALL search_free
 3757      4DFF5DF8 
 3757      04EB
 3758 0e0e BDE80802 	    pop {r3,T2} 
 3759 0e12 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 96


 3760              	
 3761              	/**********************************
 3762              	  BASIC LOAD "name" 
 3763              	  load file in RAM for execution
 3764              	  use:
 3765              	    r0   temp
 3766              	    r1   src
 3767              	    r2   dest 
 3768              	    r3   count 
 3769              	**********************************/
 3770              	    _FUNC load
 3771 0e14 206C10F0 	    _CLO 
 3771      010F03D0 
 3771      4FF00700 
 3771      FFF7FEBF 
 3772 0e24 00B5FFF7 	    _CALL next_token 
 3772      FEFF5DF8 
 3772      04EB
 3773 0e2e 1C28     	    cmp r0,#TK_QSTR 
 3774 0e30 7FF4FEAF 	    bne syntax_error 
 3775 0e34 0846     	    mov r0,r1 
 3776 0e36 00B5FFF7 	    _CALL search_file 
 3776      46FF5DF8 
 3776      04EB
 3777 0e40 18B9     	    cbnz r0, 1f 
 3778 0e42 4FF00900 	    mov r0,#ERR_NOT_FILE
 3779 0e46 FFF7FEBF 	    b tb_error 
 3780 0e4a 0146     	1:  mov r1,r0 
 3781 0e4c 0888     	    ldrh r0,[r1]
 3782 0e4e 0144     	    add r1,r0 // data size field  
 3783 0e50 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3784 0e54 226B     	    ldr r2,[UPP,#TXTBGN]
 3785 0e56 02EB0300 	    add r0,r2,r3  
 3786 0e5a 6063     	    str r0,[UPP,#TXTEND]
 3787 0e5c 03F10103 	    add r3,#1
 3788 0e60 4FEA5303 	    lsr r3,#1
 3789              	2:  // load file data 
 3790 0e64 31F8020B 	    ldrh r0,[r1],#2
 3791 0e68 22F8020B 	    strh r0,[r2],#2 
 3792 0e6c 013B     	    subs r3,#1 
 3793 0e6e F9D1     	    bne 2b 
 3794              	// report file size 
 3795 0e70 DFF89804 	    ldr r0,=fsize 
 3796 0e74 00B5FFF7 	    _CALL uart_puts
 3796      FEFF5DF8 
 3796      04EB
 3797 0e7e 606B     	    ldr r0,[UPP,#TXTEND]
 3798 0e80 236B     	    ldr r3,[UPP,#TXTBGN]
 3799 0e82 A0EB0300 	    sub r0,r3 
 3800 0e86 4FF00A01 	    mov r1,#10 
 3801 0e8a 00B5FFF7 	    _CALL print_int 
 3801      FEFF5DF8 
 3801      04EB
 3802 0e94 DFF87804 	    ldr r0,=data_bytes 
 3803 0e98 00B5FFF7 	    _CALL uart_puts      
 3803      FEFF5DF8 
 3803      04EB
ARM GAS  tinyBasic.s 			page 97


 3804 0ea2 7047     	    _RET 
 3805              	
 3806              	
 3807              	/*********************************
 3808              	  BASIC: SAVE "name" 
 3809              	  save program in flash memory
 3810              	  file structure:
 3811              	    .hword name_length 
 3812              	    .asciz name
 3813              	    .palign 1  
 3814              	    .hword data_length 
 3815              	    .byte  file data (variable length)  
 3816              	  use:
 3817              	    r0  temp 
 3818              	    r1  temp
 3819              	    r2  *flash 
 3820              	    r3  *ram  
 3821              	    T1  temp   
 3822              	********************************/
 3823              	    _FUNC save
 3824 0ea4 206C10F0 	    _CLO 
 3824      010F03D0 
 3824      4FF00700 
 3824      FFF7FEBF 
 3825 0eb4 606B     	    ldr r0,[UPP,#TXTEND]
 3826 0eb6 216B     	    ldr r1,[UPP,#TXTBGN]
 3827 0eb8 8842     	    cmp r0,r1
 3828 0eba 03D1     	    bne 0f 
 3829 0ebc 4FF00D00 	    mov r0,#ERR_NO_PROG
 3830 0ec0 FFF7FEBF 	    b tb_error 
 3831 0ec4 00B5FFF7 	0:  _CALL next_token 
 3831      FEFF5DF8 
 3831      04EB
 3832 0ece 1C28     	    cmp r0,#TK_QSTR
 3833 0ed0 7FF4FEAF 	    bne syntax_error 
 3834              	// check for existing 
 3835 0ed4 0B46     	    mov r3,r1 // save name 
 3836 0ed6 1846     	    mov r0,r3  
 3837 0ed8 00B5FFF7 	    _CALL search_file
 3837      F5FE5DF8 
 3837      04EB
 3838 0ee2 18B1     	    cbz r0,new_file 
 3839 0ee4 4FF00800 	    mov r0,#ERR_DUPLICATE
 3840 0ee8 FFF7FEBF 	    b tb_error 
 3841              	new_file:
 3842 0eec 4FF00100 	    mov r0,#1 
 3843 0ef0 00B5FFF7 	    _CALL unlock 
 3843      FEFF5DF8 
 3843      04EB
 3844 0efa E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3845 0efc 1846     	    mov r0,r3 // *name 
 3846 0efe 00B5FFF7 	    _CALL strlen 
 3846      FEFF5DF8 
 3846      04EB
 3847 0f08 00F10400 	    add r0,#4  
 3848 0f0c 20F00100 	    and r0,#-2 //even size
 3849 0f10 A0F10208 	    sub T1,r0,#2  // name length counter   
ARM GAS  tinyBasic.s 			page 98


 3850 0f14 1146     	1:  mov r1,r2  
 3851 0f16 00B5FFF7 	    _CALL hword_write   
 3851      FEFF5DF8 
 3851      04EB
 3852 0f20 02F10202 	    add r2,#2  
 3853              	// write file name      
 3854 0f24 33F8020B 	2:  ldrh r0,[r3],#2 
 3855 0f28 1146     	    mov r1,r2 
 3856 0f2a 00B5FFF7 	    _CALL hword_write
 3856      FEFF5DF8 
 3856      04EB
 3857 0f34 02F10202 	    add r2,#2
 3858 0f38 B8F10208 	    subs T1,#2
 3859 0f3c F2D1     	    bne 2b
 3860              	// write data size 
 3861 0f3e 606B     	    ldr r0,[UPP,#TXTEND]
 3862 0f40 236B     	    ldr r3,[UPP,#TXTBGN]
 3863 0f42 A0EB0300 	    sub r0,r3
 3864 0f46 8046     	    mov T1,r0
 3865 0f48 1146     	    mov r1,r2 
 3866 0f4a 00B5FFF7 	    _CALL hword_write
 3866      FEFF5DF8 
 3866      04EB
 3867 0f54 02F10202 	    add r2,#2 
 3868              	// write data 
 3869 0f58 08F10108 	    add T1,#1 
 3870 0f5c 4FEA5808 	    lsr T1,#1 // .hword to write 
 3871 0f60 33F8020B 	3:  ldrh r0,[r3],#2
 3872 0f64 1146     	    mov r1,r2
 3873 0f66 00B5FFF7 	    _CALL hword_write 
 3873      FEFF5DF8 
 3873      04EB
 3874 0f70 02F10202 	    add r2,#2 
 3875 0f74 B8F10108 	    subs T1,#1 
 3876 0f78 F2D1     	    bne 3b
 3877 0f7a 4FF00000 	    mov r0,#0 
 3878 0f7e 00B5FFF7 	    _CALL unlock
 3878      FEFF5DF8 
 3878      04EB
 3879              	// update FSFREE     
 3880 0f88 606B     	    ldr r0,[UPP,#TXTEND]
 3881 0f8a 216B     	    ldr r1,[UPP,#TXTBGN]
 3882 0f8c A0EB0100 	    sub r0,r1 
 3883 0f90 8046     	    mov T1,r0 
 3884 0f92 E16A     	    ldr r1,[UPP,#FSFREE]
 3885 0f94 0844     	    add r0,r1 
 3886 0f96 00B5FFF7 	    _CALL page_align
 3886      FEFF5DF8 
 3886      04EB
 3887 0fa0 E062     	    str r0,[UPP,#FSFREE]
 3888 0fa2 DA48     	    ldr r0,=fsize
 3889 0fa4 00B5FFF7 	    _CALL uart_puts
 3889      FEFF5DF8 
 3889      04EB
 3890 0fae 4046     	    mov r0,T1 
 3891 0fb0 4FF00A01 	    mov r1,#10 
 3892 0fb4 00B5FFF7 	    _CALL print_int 
ARM GAS  tinyBasic.s 			page 99


 3892      FEFF5DF8 
 3892      04EB
 3893 0fbe D448     	    ldr r0,=data_bytes 
 3894 0fc0 00B5FFF7 	    _CALL uart_puts  
 3894      FEFF5DF8 
 3894      04EB
 3895 0fca 7047     	    _RET 
 3896 0fcc 66696C65 	fsize: .asciz "file size: "
 3896      2073697A 
 3896      653A2000 
 3897 0fd8 62797465 	data_bytes: .asciz "bytes"
 3897      7300
 3898              	
 3899              	
 3900              	/*******************************
 3901              	  BASIC: FREE 
 3902              	  return RAM free bytes 
 3903              	*******************************/
 3904 0fde 00BF     	    _FUNC free
 3905 0fe0 D4F8D000 	    ldr r0,[UPP,#HERE]
 3906 0fe4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 3907 0fe8 A1EB0001 	    sub r1,r0
 3908 0fec 4FF01B00 	    mov r0,#TK_INTGR
 3909 0ff0 7047     	    _RET  
 3910              	
 3911              	/*********************************
 3912              	  BASIC: SLEEP 
 3913              	  place MCU lowest power mode 
 3914              	  wait for external interrpt or
 3915              	  reset.
 3916              	*********************************/
 3917 0ff2 00BF     	    _FUNC sleep
 3918 0ff4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 3918      CEF20000 
 3919 0ffc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 3920 1000 0160     	    str r1,[r0]
 3921 1002 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 3921      C4F20000 
 3922 100a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 3923 100e 0160     	    str r1,[r0]
 3924 1010 20BF     	    wfe 
 3925 1012 7047     	    _RET 
 3926              	
 3927              	/************************************
 3928              	  BASIC: SPC(expr)
 3929              	  mov cursor right expr spaces 
 3930              	***********************************/
 3931              	    _FUNC spc 
 3932 1014 00B5FFF7 	    _CALL func_args 
 3932      FEFF5DF8 
 3932      04EB
 3933 101e 0128     	    cmp r0,#1
 3934 1020 7FF4FEAF 	    bne syntax_error 
 3935 1024 206C     	    ldr r0,[UPP,#FLAGS]
 3936 1026 10F0800F 	    tst r0,#FPRINT 
 3937 102a 5CF8040B 	    _POP r0 
 3938 102e 04D0     	    beq 9f 
ARM GAS  tinyBasic.s 			page 100


 3939 1030 00B5FFF7 	    _CALL spaces 
 3939      FEFF5DF8 
 3939      04EB
 3940 103a 7047     	9:  _RET 
 3941              	
 3942              	    _FUNC spi_read
 3943 103c 7047     	    _RET 
 3944              	
 3945 103e 00BF     	    _FUNC spi_enable
 3946 1040 7047     	    _RET 
 3947              	
 3948 1042 00BF     	    _FUNC spi_select
 3949 1044 7047     	    _RET 
 3950              	
 3951 1046 00BF     	    _FUNC spi_write
 3952 1048 7047     	    _RET 
 3953              	
 3954              	/******************************
 3955              	  BASIC: STOP 
 3956              	  stop program executre but 
 3957              	  keep execution state for 
 3958              	  resume 
 3959              	******************************/
 3960 104a 00BF     	    _FUNC stop
 3961 104c 206C10F0 	    _RTO 
 3961      010F03D1 
 3961      4FF00700 
 3961      FFF7FEBF 
 3962 105c 6068     	    ldr r0,[UPP,#COUNT]
 3963 105e 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 3964 1062 206C     	    ldr r0,[UPP,#FLAGS]
 3965 1064 4FF00901 	    mov r1,#FRUN+FSTOP
 3966 1068 80EA0100 	    eor r0,r1
 3967 106c 2064     	    str r0,[UPP,#FLAGS]
 3968 106e 8AEA0A0A 	    eor IN,IN 
 3969 1072 8BEA0B0B 	    eor BPTR,BPTR 
 3970 1076 C4F804A0 	    str IN,[UPP,#COUNT]
 3971 107a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 3972 107e C4F808A0 	    str IN,[UPP,#BASICPTR]
 3973 1082 4FF4A040 	    _MOV32 r0,RAM_END
 3973      C2F20000 
 3974 108a 8546     	    mov sp,r0
 3975 108c FFF7FEBF 	    b cmd_line 
 3976              	
 3977              	
 3978              	/**************************
 3979              	  BASIC: TAB(expr)
 3980              	  move cursor column expr 
 3981              	**************************/
 3982              	    _FUNC tab 
 3983 1090 00B5FFF7 	    _CALL func_args  
 3983      FEFF5DF8 
 3983      04EB
 3984 109a 0128     	    cmp r0,#1 
 3985 109c 7FF4FEAF 	    bne syntax_error 
 3986 10a0 206C     	    ldr r0,[UPP,#FLAGS]
 3987 10a2 10F0800F 	    tst r0,#FPRINT
ARM GAS  tinyBasic.s 			page 101


 3988 10a6 5CF8040B 	    _POP r0 
 3989 10aa 04D0     	    beq 9f 
 3990 10ac 00B5FFF7 	    _CALL cursor_x 
 3990      FEFF5DF8 
 3990      04EB
 3991 10b6 7047     	9:  _RET 
 3992              	
 3993              	
 3994              	/**************************
 3995              	  BASIC: TICKS 
 3996              	  return msec counter
 3997              	**************************/  
 3998              	    _FUNC get_ticks
 3999 10b8 E169     	    ldr r1,[UPP,#TICKS]
 4000 10ba 4FF01B00 	    mov r0,#TK_INTGR
 4001 10be 7047     	    _RET  
 4002              	
 4003              	/*************************
 4004              	  BASIC: TIMER expr 
 4005              	  set countdown timer 
 4006              	************************/
 4007              	    _FUNC set_timer
 4008 10c0 00B5FFF7 	    _CALL expression 
 4008      FEFF5DF8 
 4008      04EB
 4009 10ca 1B28     	    cmp r0,#TK_INTGR
 4010 10cc 7FF4FEAF 	    bne syntax_error 
 4011 10d0 2162     	    str r1,[UPP,#TIMER]
 4012 10d2 7047     	    _RET 
 4013              	
 4014              	/***************************
 4015              	  BASIC: TIMEOUT
 4016              	  check for timer expiration 
 4017              	  return -1 true || 0 false
 4018              	****************************/
 4019              	    _FUNC timeout
 4020 10d4 81EA0101 	    eor r1,r1 
 4021 10d8 206A     	    ldr r0,[UPP,#TIMER]
 4022 10da 08B9     	    cbnz r0,9f 
 4023 10dc 6FEA0101 	    mvn r1,r1 
 4024 10e0 4FF01B00 	9:  mov r0,#TK_INTGR    
 4025 10e4 7047     	    _RET 
 4026              	
 4027              	/****************************************
 4028              	  BASIC:  TONE freq, duration 
 4029              	  play a tone with frequency freq and duration
 4030              	  in milliseconds
 4031              	***********************************************/
 4032 10e6 00BF     	    _FUNC tone
 4033 10e8 00B5FFF7 	    _CALL arg_list 
 4033      FEFF5DF8 
 4033      04EB
 4034 10f2 0228     	    cmp r0,#2 
 4035 10f4 7FF4FEAF 	    bne syntax_error
 4036 10f8 BCE80003 	    ldmia DP!,{T1,T2}
 4037              	    
 4038 10fc 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 102


 4039              	
 4040              	/****************************************
 4041              	  BASIC: TRACE n 
 4042              	  enable execution trace 
 4043              	  0   ddisable
 4044              	  1   show current line#
 4045              	  2  show line#+data_stack
 4046              	  3  show line#+data_stack+main_stack 
 4047              	***************************************/
 4048 10fe 00BF     	    _FUNC trace 
 4049 1100 00B5FFF7 	    _CALL next_token 
 4049      FEFF5DF8 
 4049      04EB
 4050 110a 1B28     	    cmp r0,#TK_INTGR  
 4051 110c 7FF4FEAF 	    bne syntax_error 
 4052 1110 01F00301 	    and r1,#3 
 4053 1114 C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4054 1118 7047     	    _RET 
 4055              	
 4056              	
 4057              	/***************************
 4058              	  BASIC: UBOUND 
 4059              	  return last indice of @
 4060              	  output:
 4061              	    r0  TK_INTGR 
 4062              	    r1  +int 
 4063              	**************************/
 4064 111a 00BF     	    _FUNC ubound
 4065 111c D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4066 1120 D4F8D000 	    ldr r0,[UPP,#HERE]
 4067 1124 A1EB0001 	    sub r1,r0 
 4068 1128 4FEA9101 	    lsr r1,#2
 4069 112c 4FF01B00 	    mov r0,#TK_INTGR 
 4070 1130 7047     	    _RET 
 4071              	
 4072              	/****************************
 4073              	  BASIC: UFLASH 
 4074              	  return user flash address
 4075              	*****************************/
 4076 1132 00BF     	    _FUNC uflash
 4077 1134 7749     	    ldr r1,=user
 4078 1136 4FF01B00 	    mov r0,#TK_INTGR 
 4079 113a 7047     	    _RET 
 4080              	
 4081              	
 4082              	/************************************
 4083              	  BASIC: UNTIL relation 
 4084              	  close a DO..UNTIL loop 
 4085              	  loop until relation come true 
 4086              	************************************/
 4087              	    _FUNC until
 4088 113c 00B5FFF7 	    _CALL relation 
 4088      FEFF5DF8 
 4088      04EB
 4089 1146 11B1     	    cbz r1,9f
 4090 1148 0CF1080C 	    add DP,#8
 4091 114c 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 103


 4092 114e 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4093 1152 9BF80200 	    ldrb r0,[BPTR,#2]
 4094 1156 6060     	    str r0,[UPP,#COUNT]
 4095 1158 7047     	    _RET 
 4096              	
 4097              	/*************************************
 4098              	  BASIC: WAIT addr,expr1[,expr2] 
 4099              	  wait until *addr&expr1 is not null 
 4100              	  or until (*addr&expr1)^expr2 is null 
 4101              	***************************************/
 4102 115a 00BF     	    _FUNC wait
 4103 115c 00B5FFF7 	    _CALL arg_list 
 4103      FEFF5DF8 
 4103      04EB
 4104 1166 0228     	    cmp r0,#2
 4105 1168 03D0     	    beq 2f 
 4106 116a 0328     	    cmp r0,#3
 4107 116c 07D0     	    beq 4f
 4108 116e FFF7FEBF 	    b syntax_error 
 4109 1172 BCE80300 	2:  ldmia DP!,{r0,r1}
 4110 1176 0A88     	3:  ldrh r2,[r1]
 4111 1178 0240     	    ands r2,r0 
 4112 117a FCD0     	    beq 3b 
 4113 117c 06E0     	    b 9f 
 4114 117e BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4115 1182 1388     	5:  ldrh r3,[r2]
 4116 1184 83EA0003 	    eor r3,r0
 4117 1188 0B40     	    ands r3,r1 
 4118 118a FAD0     	    beq 5b 
 4119 118c 7047     	9:  _RET 
 4120              	
 4121              	/*********************************************
 4122              	  BASIC: WORDS 
 4123              	  print list of BASIC WORDS in dictionary 
 4124              	  use:
 4125              	    r0,r1,r2,T1,T2  
 4126              	********************************************/
 4127 118e 00BF     	    _FUNC words
 4128 1190 206C10F0 	    _CLO 
 4128      010F03D0 
 4128      4FF00700 
 4128      FFF7FEBF 
 4129 11a0 DFF87481 	    ldr T1,=kword_dict
 4130 11a4 89EA0909 	    eor T2,T2
 4131 11a8 82EA0202 	    eor r2,r2  
 4132              	1:  
 4133 11ac 4046     	    mov r0,T1
 4134 11ae 00B5FFF7 	    _CALL strlen
 4134      FEFF5DF8 
 4134      04EB
 4135 11b8 F0B1     	    cbz r0,4f 
 4136 11ba 8144     	    add T2,r0 
 4137 11bc B9F1500F 	    cmp T2,#80 
 4138 11c0 06D4     	    bmi 2f
 4139 11c2 89EA0909 	    eor T2,T2  
 4140 11c6 00B5FFF7 	    _CALL cr 
 4140      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 104


 4140      04EB
 4141 11d0 4046     	2:  mov r0,T1 
 4142 11d2 00B5FFF7 	    _CALL uart_puts 
 4142      FEFF5DF8 
 4142      04EB
 4143 11dc 4FF02000 	    mov r0,#SPACE
 4144 11e0 09F10109 	    add T2,#1  
 4145 11e4 00B5FFF7 	    _CALL uart_putc
 4145      FEFF5DF8 
 4145      04EB
 4146 11ee 02F10102 	    add r2,#1 
 4147 11f2 58F80C8C 	    ldr T1,[T1,#-12]
 4148 11f6 D9E7     	    b 1b 
 4149 11f8 19EA0909 	4:  ands T2,T2
 4150 11fc 04D0     	    beq 5f 
 4151 11fe 00B5FFF7 	    _CALL cr 
 4151      FEFF5DF8 
 4151      04EB
 4152 1208 1046     	5:  mov r0,r2 
 4153 120a 4FF00A01 	    mov r1,#10
 4154 120e 00B5FFF7 	    _CALL print_int 
 4154      FEFF5DF8 
 4154      04EB
 4155 1218 4048     	    ldr r0,=dict_words
 4156 121a 00B5FFF7 	    _CALL uart_puts  
 4156      FEFF5DF8 
 4156      04EB
 4157 1224 7047     	9:  _RET 
 4158              	
 4159 1226 776F7264 	dict_words: .asciz "words in dictionary" 
 4159      7320696E 
 4159      20646963 
 4159      74696F6E 
 4159      61727900 
 4160              	
 4161              	
 4162              	/**************************************
 4163              	  BASIC: XOR(expr1,expr2)
 4164              	  binary exclusive or between 2 expressions
 4165              	**************************************/
 4166 123a 00BF     	    _FUNC bit_xor
 4167 123c 00B5FFF7 	    _CALL func_args
 4167      FEFF5DF8 
 4167      04EB
 4168 1246 0228     	    cmp r0,#2
 4169 1248 7FF4FEAF 	    bne syntax_error
 4170 124c 5CF8040B 	    _POP r0
 4171 1250 5CF8041B 	    _POP r1 
 4172 1254 81EA0001 	    eor r1,r0 
 4173 1258 4FF01B00 	    mov r0,#TK_INTGR
 4174 125c 7047     	    _RET 
 4175              	
 4176              	/***************************************
 4177              	    BASIC: XPOS 
 4178              	    report cursor column on terminal 
 4179              	***************************************/
 4180 125e 00BF     	    _FUNC xpos 
ARM GAS  tinyBasic.s 			page 105


 4181 1260 00B5FFF7 	    _CALL get_curpos
 4181      FEFF5DF8 
 4181      04EB
 4182 126a 4FF01B00 	    mov r0,#TK_INTGR
 4183 126e 7047     	    _RET 
 4184              	
 4185              	/***********************************
 4186              	    BASIC: YPOS 
 4187              	    report cursor line on terminal 
 4188              	***********************************/
 4189              	    _FUNC ypos 
 4190 1270 00B5FFF7 	    _CALL get_curpos 
 4190      FEFF5DF8 
 4190      04EB
 4191 127a 0146     	    mov r1,r0 
 4192 127c 4FF01B00 	    mov r0,#TK_INTGR
 4193 1280 7047     	    _RET 
 4194              	
 4195              	
 4196              	/**********************************
 4197              	     argument stack manipulation
 4198              	**********************************/
 4199              	
 4200              	/**********************************
 4201              	  BASIC PUSH expr[,expr] 
 4202              	  push integers on stack 
 4203              	*********************************/
 4204 1282 00BF     	    _FUNC cmd_push 
 4205 1284 00B5FFF7 	    _CALL arg_list
 4205      FEFF5DF8 
 4205      04EB
 4206 128e 7047     	    _RET 
 4207              	
 4208              	/********************************
 4209              	  BASIC: POP 
 4210              	  pop an integer out of stack 
 4211              	********************************/    
 4212              	    _FUNC fn_pop 
 4213 1290 5CF8041B 	    _POP r1 
 4214 1294 4FF01B00 	    mov r0,#TK_INTGR 
 4215 1298 7047     	    _RET 
 4216              	
 4217              	/*******************************
 4218              	  BASIC: DROP n 
 4219              	  discard n integer from stack
 4220              	*******************************/
 4221 129a 00BF     	    _FUNC drop 
 4222 129c 00B5FFF7 	    _CALL expression 
 4222      FEFF5DF8 
 4222      04EB
 4223 12a6 1B28     	    cmp r0,#TK_INTGR 
 4224 12a8 7FF4FEAF 	    bne syntax_error 
 4225 12ac 4FF00400 	    mov r0,#4 
 4226 12b0 01FB00F0 	    mul r0,r1 
 4227 12b4 8444     	    add DP,r0 
 4228 12b6 7047     	    _RET 
 4229              	
ARM GAS  tinyBasic.s 			page 106


 4230              	/********************************
 4231              	  BASIC: GET(expr) 
 4232              	  retreive nth element from stack 
 4233              	********************************/
 4234              	    _FUNC get 
 4235 12b8 00B5FFF7 	    _CALL func_args
 4235      FEFF5DF8 
 4235      04EB
 4236 12c2 0128     	    cmp r0,#1 
 4237 12c4 7FF4FEAF 	    bne syntax_error 
 4238 12c8 5CF8040B 	    _POP r0
 4239 12cc 4FF00401 	    mov r1,#4 
 4240 12d0 01FB00F0 	    mul r0,r1 
 4241 12d4 5CF80010 	    ldr r1,[DP,r0]
 4242 12d8 4FF01B00 	    mov r0,#TK_INTGR
 4243 12dc 7047     	    _RET 
 4244              	
 4245              	/*************************************
 4246              	  BASIC: PUT value,n  
 4247              	  store value at nth position on stack
 4248              	**************************************/
 4249 12de 00BF     	    _FUNC put
 4250 12e0 00B5FFF7 	    _CALL arg_list 
 4250      FEFF5DF8 
 4250      04EB
 4251 12ea 0228     	    cmp r0,#2 
 4252 12ec 7FF4FEAF 	    bne syntax_error 
 4253 12f0 5CF8040B 	    _POP r0 
 4254 12f4 4FF00401 	    mov r1,#4 
 4255 12f8 01FB00F0 	    mul r0,r1 
 4256 12fc 5CF8041B 	    _POP r1
 4257 1300 4CF80010 	    str r1,[DP,r0]
 4258 1304 7047     	    _RET 
 4259              	
 4260              	
 4261 1306 0000     	  .section .rodata.user
 4262              	  .p2align 10 
 4263              	user:
 4264 0000 FFFFFFFF 	  .space 1024,255
 4264      FFFFFFFF 
 4264      FFFFFFFF 
 4264      FFFFFFFF 
 4264      FFFFFFFF 
 4265              	
 4266              	/*************************************************
 4267              	   extra FLASH memory not used by Tiny BASIC
 4268              	   is used to save BASIC programs.
 4269              	************************************************/
 4270              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4271              	  .section .rodata.fs
 4272              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 107


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 108


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 109


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  tinyBasic.s 			page 110


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
ARM GAS  tinyBasic.s 			page 111


      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
ARM GAS  tinyBasic.s 			page 112


      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 AND_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ASC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AWU_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 BIT_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 BRES_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 BSET_IDX
       cmd_index.inc:32     *ABS*:0000000000000007 BTEST_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BTOGL_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 CHAR_IDX
       cmd_index.inc:35     *ABS*:000000000000000a CLS_IDX
       cmd_index.inc:36     *ABS*:000000000000000b CONST_IDX
       cmd_index.inc:37     *ABS*:000000000000000c DATA_IDX
       cmd_index.inc:38     *ABS*:000000000000000d DATALN_IDX
       cmd_index.inc:39     *ABS*:000000000000000e DEC_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DIR_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DO_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DROP_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DUMP_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 END_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 ERASE_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 FOR_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 FORGET_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FREE_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 GET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 GOSUB_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GOTO_IDX
       cmd_index.inc:52     *ABS*:000000000000001b HEX_IDX
       cmd_index.inc:53     *ABS*:000000000000001c IF_IDX
       cmd_index.inc:54     *ABS*:000000000000001d IN_IDX
       cmd_index.inc:55     *ABS*:000000000000001e INPUT_IDX
       cmd_index.inc:56     *ABS*:000000000000001f INVERT_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 KEY_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 LET_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 LIST_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LOAD_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LOCATE_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LSHIFT_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 NEW_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 NEXT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NOT_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 OR_IDX
       cmd_index.inc:67     *ABS*:000000000000002a OUT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b PAD_IDX
       cmd_index.inc:69     *ABS*:000000000000002c PAUSE_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PMODE_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PEEK8_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PEEK16_IDX
ARM GAS  tinyBasic.s 			page 113


       cmd_index.inc:73     *ABS*:0000000000000030 PEEK32_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 POKE8_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 POKE16_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE32_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POP_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 PRT_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 PUSH_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PUT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 QKEY_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 READ_IDX
       cmd_index.inc:83     *ABS*:000000000000003a REM_IDX
       cmd_index.inc:84     *ABS*:000000000000003b REST_IDX
       cmd_index.inc:85     *ABS*:000000000000003c RET_IDX
       cmd_index.inc:86     *ABS*:000000000000003d RND_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RSHIFT_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RUN_IDX
       cmd_index.inc:89     *ABS*:0000000000000040 SAVE_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 SLEEP_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SPC_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 STEP_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 STOP_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 STORE_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 TAB_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 THEN_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 TICKS_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 TIMER_IDX
       cmd_index.inc:99     *ABS*:000000000000004a TMROUT_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TO_IDX
       cmd_index.inc:101    *ABS*:000000000000004c TRACE_IDX
       cmd_index.inc:102    *ABS*:000000000000004d UBOUND_IDX
       cmd_index.inc:103    *ABS*:000000000000004e UFLASH_IDX
       cmd_index.inc:104    *ABS*:000000000000004f UNTIL_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 WAIT_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 WORDS_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 XOR_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 XPOS_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
ARM GAS  tinyBasic.s 			page 114


         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:317    .text:000000000000024c search_target
         tinyBasic.s:1755   .text:0000000000000e20 next_token
         tinyBasic.s:381    .text:00000000000002c4 search_label
         tinyBasic.s:2002   .text:000000000000106c expression
         tinyBasic.s:1309   .text:0000000000000a34 syntax_error
         tinyBasic.s:419    .text:00000000000002ec search_lineno
         tinyBasic.s:1324   .text:0000000000000a3c tb_error
         tinyBasic.s:349    .text:0000000000000298 search_const
         tinyBasic.s:450    .text:000000000000030c delete_line
         tinyBasic.s:475    .text:0000000000000338 create_gap
         tinyBasic.s:500    .text:0000000000000360 insert_line
         tinyBasic.s:539    .text:00000000000003b0 compile
         tinyBasic.s:1661   .text:0000000000000d7c pad
         tinyBasic.s:864    .text:00000000000006ac parse_int
         tinyBasic.s:612    .text:0000000000000458 comp_token
         tinyBasic.s:695    .text:000000000000055e store_r0
         tinyBasic.s:958    .text:000000000000074c skip
         tinyBasic.s:1043   .text:00000000000007b4 is_letter
         tinyBasic.s:779    .text:00000000000005f0 comp_label
         tinyBasic.s:704    .text:000000000000057e token_exit
         tinyBasic.s:686    .text:000000000000053a tick2
         tinyBasic.s:722    .text:0000000000000584 is_special
         tinyBasic.s:744    .text:00000000000005c8 token_ofs
         tinyBasic.s:635    .text:00000000000004b2 tok_idx0
         tinyBasic.s:698    .text:0000000000000564 try_number
         tinyBasic.s:639    .text:00000000000004b4 single
         tinyBasic.s:739    .text:00000000000005b9 tok_single
         tinyBasic.s:643    .text:00000000000004bc lt
         tinyBasic.s:649    .text:00000000000004ca gt
         tinyBasic.s:662    .text:00000000000004ee bkslash
         tinyBasic.s:669    .text:0000000000000504 prt_cmd
         tinyBasic.s:675    .text:0000000000000516 quote
         tinyBasic.s:897    .text:00000000000006e4 parse_quote
         tinyBasic.s:680    .text:000000000000052a tick
         tinyBasic.s:736    .text:00000000000005a4 char_list
         tinyBasic.s:737    .text:00000000000005a4 $d
         tinyBasic.s:745    .text:00000000000005c8 $d
         tinyBasic.s:762    .text:00000000000005f0 $t
         tinyBasic.s:977    .text:0000000000000764 upper
         tinyBasic.s:2307   .rodata.dictionary:0000000000000670 kword_dict
         tinyBasic.s:1476   .text:0000000000000bb8 search_dict
         tinyBasic.s:834    .text:0000000000000688 compress_label
         tinyBasic.s:1074   .text:00000000000007d4 atoi
         tinyBasic.s:928    .text:0000000000000718 get_escaped_char
         tinyBasic.s:945    .text:0000000000000742 escaped
         tinyBasic.s:945    .text:0000000000000742 $d
         tinyBasic.s:958    .text:000000000000074a $t
         tinyBasic.s:995    .text:0000000000000774 is_digit
         tinyBasic.s:1019   .text:0000000000000790 is_hex
         tinyBasic.s:1118   .text:0000000000000820 cmd_name
         tinyBasic.s:1144   .text:0000000000000844 decompile_line
         tinyBasic.s:1161   .text:000000000000088a decomp_loop
         tinyBasic.s:1269   .text:0000000000000a0b single_char
         tinyBasic.s:1264   .text:00000000000009f6 relop_str
         tinyBasic.s:1264   .text:00000000000009f6 $d
         tinyBasic.s:1265   .text:0000000000000a02 ge_str
ARM GAS  tinyBasic.s 			page 115


         tinyBasic.s:1266   .text:0000000000000a05 le_str
         tinyBasic.s:1267   .text:0000000000000a08 ne_str
         tinyBasic.s:1286   .text:0000000000000a1c modulo
         tinyBasic.s:1357   .text:0000000000000acc compile_error
         tinyBasic.s:1328   .text:0000000000000a44 rt_error
         tinyBasic.s:1372   .text:0000000000000b1e rt_error_msg
         tinyBasic.s:1376   .text:0000000000000b3e err_msg
         tinyBasic.s:1373   .text:0000000000000b2f token_at_msg
         tinyBasic.s:2767   .text.basic:00000000000003d0 dump01
         tinyBasic.s:1674   .text:0000000000000d8c warm_start
         tinyBasic.s:1372   .text:0000000000000b1e $d
         tinyBasic.s:1384   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1385   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1386   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1387   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1388   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1389   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1390   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1391   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1392   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1393   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1394   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1395   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1396   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1397   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1398   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1399   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1401   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1402   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1403   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1413   .text:0000000000000b82 $t
         tinyBasic.s:1413   .text:0000000000000b84 skip_line
         tinyBasic.s:1430   .text:0000000000000b8c BTGL
         tinyBasic.s:1448   .text:0000000000000b90 kword_cmp
         tinyBasic.s:1514   .text:0000000000000bf6 cold_start
         tinyBasic.s:1537   .text:0000000000000c54 src_addr
         tinyBasic.s:1539   .text:0000000000000c58 dest_addr
         tinyBasic.s:1660   .text:0000000000000d78 tib
         tinyBasic.s:1541   .text:0000000000000c5c sysvar_size
         tinyBasic.s:1552   .text:0000000000000c60 prt_version
         tinyBasic.s:1608   .text:0000000000000d04 clear_basic
         tinyBasic.s:3636   .text.basic:0000000000000ca4 search_free
         tinyBasic.s:1538   .text:0000000000000c54 $d
         tinyBasic.s:2180   .rodata:0000000000000000 uzero
         tinyBasic.s:2206   .rodata:00000000000000d4 ulast
         tinyBasic.s:1552   .text:0000000000000c60 $t
         tinyBasic.s:1575   .text:0000000000000cc4 version_msg
         tinyBasic.s:1577   .text:0000000000000ce4 version
         tinyBasic.s:1576   .text:0000000000000cc4 $d
         tinyBasic.s:1592   .text:0000000000000ce8 clear_vars
         tinyBasic.s:1643   .text:0000000000000d4c warm_init
         tinyBasic.s:1659   .text:0000000000000d74 dstack
         tinyBasic.s:1658   .text:0000000000000d70 mstack
         tinyBasic.s:1658   .text:0000000000000d70 $d
         tinyBasic.s:1662   .text:0000000000000d80 array
         tinyBasic.s:1663   .text:0000000000000d84 ready
         tinyBasic.s:1694   .text:0000000000000da4 cmd_line
ARM GAS  tinyBasic.s 			page 116


         tinyBasic.s:1706   .text:0000000000000dd8 interpreter
         tinyBasic.s:1739   .text:0000000000000e18 execute
         tinyBasic.s:3100   .text.basic:0000000000000722 let_var
         tinyBasic.s:3105   .text.basic:000000000000072e let_array
         tinyBasic.s:2316   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1811   .text:0000000000000e98 expect
         tinyBasic.s:1830   .text:0000000000000eb4 func_args
         tinyBasic.s:1850   .text:0000000000000ee0 arg_list
         tinyBasic.s:1882   .text:0000000000000f1c factor
         tinyBasic.s:2109   .text:0000000000001144 get_array_element
         tinyBasic.s:2147   .text:000000000000116c get_var
         tinyBasic.s:1950   .text:0000000000000ff8 term
         tinyBasic.s:2044   .text:00000000000010c8 relation
         tinyBasic.s:2091   .text:000000000000113c relop_jmp
         tinyBasic.s:2063   .text:000000000000110e rel_idx0
         tinyBasic.s:2064   .text:000000000000110e rel_eq
         tinyBasic.s:2081   .text:0000000000001124 rel_false
         tinyBasic.s:2067   .text:0000000000001112 rel_gt
         tinyBasic.s:2070   .text:0000000000001116 rel_ge
         tinyBasic.s:2073   .text:000000000000111a rel_lt
         tinyBasic.s:2076   .text:000000000000111e rel_le
         tinyBasic.s:2079   .text:0000000000001122 rel_ne
         tinyBasic.s:2092   .text:000000000000113c $d
         tinyBasic.s:2109   .text:0000000000001142 $t
         tinyBasic.s:2129   .text:0000000000001158 set_array_element
         tinyBasic.s:2165   .text:000000000000117c set_var
         tinyBasic.s:4272   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2201   .rodata:0000000000000050 $d
         tinyBasic.s:2214   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2213   *ABS*:0000000000000000 link
         tinyBasic.s:2308   .rodata.dictionary:0000000000000670 LINK
         tinyBasic.s:2215   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2303   .rodata.dictionary:0000000000000664 first_link
         tinyBasic.s:2350   .text.basic:0000000000000000 abs
         tinyBasic.s:2372   .text.basic:0000000000000030 bit_and
         tinyBasic.s:2387   .text.basic:0000000000000054 ascii
         tinyBasic.s:2416   .text.basic:00000000000000a8 awu
         tinyBasic.s:2456   .text.basic:0000000000000110 bitmask
         tinyBasic.s:2478   .text.basic:0000000000000134 bit_reset
         tinyBasic.s:2503   .text.basic:0000000000000160 bit_set
         tinyBasic.s:2543   .text.basic:00000000000001b0 bit_test
         tinyBasic.s:2527   .text.basic:0000000000000188 bit_toggle
         tinyBasic.s:2575   .text.basic:00000000000001fc char
         tinyBasic.s:2567   .text.basic:00000000000001f0 cls
         tinyBasic.s:2592   .text.basic:000000000000021c const
         tinyBasic.s:2631   .text.basic:00000000000002a0 data_line
         tinyBasic.s:2736   .text.basic:0000000000000398 dec_base
         tinyBasic.s:3701   .text.basic:0000000000000d10 directory
         tinyBasic.s:2745   .text.basic:00000000000003a0 do_loop
         tinyBasic.s:4221   .text.basic:000000000000129c drop
         tinyBasic.s:2760   .text.basic:00000000000003a8 dump
         tinyBasic.s:2804   .text.basic:0000000000000450 cmd_end
         tinyBasic.s:2832   .text.basic:0000000000000490 erase
         tinyBasic.s:2843   .text.basic:00000000000004a4 for
         tinyBasic.s:3741   .text.basic:0000000000000dc8 forget
         tinyBasic.s:3904   .text.basic:0000000000000fe0 free
         tinyBasic.s:4234   .text.basic:00000000000012b8 get
ARM GAS  tinyBasic.s 			page 117


         tinyBasic.s:2924   .text.basic:0000000000000560 gosub
         tinyBasic.s:2950   .text.basic:00000000000005a0 goto
         tinyBasic.s:2958   .text.basic:00000000000005ac hex_base
         tinyBasic.s:2967   .text.basic:00000000000005b4 if
         tinyBasic.s:3250   .text.basic:00000000000008e8 pin_input
         tinyBasic.s:2989   .text.basic:00000000000005cc input_var
         tinyBasic.s:3064   .text.basic:00000000000006d8 invert
         tinyBasic.s:3077   .text.basic:00000000000006f8 key
         tinyBasic.s:3093   .text.basic:000000000000070c let
         tinyBasic.s:3136   .text.basic:0000000000000798 list
         tinyBasic.s:3770   .text.basic:0000000000000e14 load
         tinyBasic.s:3187   .text.basic:0000000000000848 locate
         tinyBasic.s:3201   .text.basic:000000000000086c lshift
         tinyBasic.s:3215   .text.basic:000000000000088c new
         tinyBasic.s:2888   .text.basic:0000000000000508 next
         tinyBasic.s:3224   .text.basic:00000000000008ac func_not
         tinyBasic.s:3236   .text.basic:00000000000008c4 bit_or
         tinyBasic.s:3268   .text.basic:0000000000000914 out
         tinyBasic.s:3286   .text.basic:0000000000000940 pad_ref
         tinyBasic.s:3297   .text.basic:000000000000094c pause
         tinyBasic.s:3325   .text.basic:0000000000000968 pin_mode
         tinyBasic.s:3390   .text.basic:0000000000000a34 peek8
         tinyBasic.s:3403   .text.basic:0000000000000a50 peek16
         tinyBasic.s:3416   .text.basic:0000000000000a6c peek32
         tinyBasic.s:3430   .text.basic:0000000000000a88 poke8
         tinyBasic.s:3442   .text.basic:0000000000000aa0 poke16
         tinyBasic.s:3454   .text.basic:0000000000000ab8 poke32
         tinyBasic.s:4212   .text.basic:0000000000001290 fn_pop
         tinyBasic.s:3468   .text.basic:0000000000000ad0 print
         tinyBasic.s:4204   .text.basic:0000000000001284 cmd_push
         tinyBasic.s:4249   .text.basic:00000000000012e0 put
         tinyBasic.s:3540   .text.basic:0000000000000bc0 qkey
         tinyBasic.s:2661   .text.basic:00000000000002f4 read
         tinyBasic.s:2703   .text.basic:0000000000000354 restore
         tinyBasic.s:2939   .text.basic:0000000000000588 return
         tinyBasic.s:3552   .text.basic:0000000000000bdc random
         tinyBasic.s:3575   .text.basic:0000000000000c20 rshift
         tinyBasic.s:3588   .text.basic:0000000000000c40 run
         tinyBasic.s:3823   .text.basic:0000000000000ea4 save
         tinyBasic.s:3917   .text.basic:0000000000000ff4 sleep
         tinyBasic.s:3931   .text.basic:0000000000001014 spc
         tinyBasic.s:2874   .text.basic:00000000000004f0 step
         tinyBasic.s:3960   .text.basic:000000000000104c stop
         tinyBasic.s:2812   .text.basic:0000000000000458 store
         tinyBasic.s:3982   .text.basic:0000000000001090 tab
         tinyBasic.s:2978   .text.basic:00000000000005c8 then
         tinyBasic.s:3998   .text.basic:00000000000010b8 get_ticks
         tinyBasic.s:4007   .text.basic:00000000000010c0 set_timer
         tinyBasic.s:4019   .text.basic:00000000000010d4 timeout
         tinyBasic.s:2861   .text.basic:00000000000004d8 to
         tinyBasic.s:4048   .text.basic:0000000000001100 trace
         tinyBasic.s:4064   .text.basic:000000000000111c ubound
         tinyBasic.s:4076   .text.basic:0000000000001134 uflash
         tinyBasic.s:4087   .text.basic:000000000000113c until
         tinyBasic.s:4102   .text.basic:000000000000115c wait
         tinyBasic.s:4127   .text.basic:0000000000001190 words
         tinyBasic.s:4166   .text.basic:000000000000123c bit_xor
ARM GAS  tinyBasic.s 			page 118


         tinyBasic.s:4180   .text.basic:0000000000001260 xpos
         tinyBasic.s:4189   .text.basic:0000000000001270 ypos
         tinyBasic.s:2350   .text.basic:0000000000000000 $t
         tinyBasic.s:2362   .text.basic:0000000000000028 power_adc
         tinyBasic.s:2365   .text.basic:000000000000002c analog_read
         tinyBasic.s:2408   .text.basic:00000000000000a4 autorun
         tinyBasic.s:3290   .text.basic:0000000000000948 pad_adr
         tinyBasic.s:2680   .text.basic:000000000000032c seek_next
         tinyBasic.s:2725   .text.basic:000000000000038a no_data_line
         tinyBasic.s:2721   .text.basic:0000000000000384 try_next_line
         tinyBasic.s:2778   .text.basic:00000000000003f0 print_dump_header
         tinyBasic.s:2836   .text.basic:00000000000004a0 user_space
         tinyBasic.s:2836   .text.basic:00000000000004a0 $d
         tinyBasic.s:4263   .rodata.user:0000000000000000 user
         tinyBasic.s:2843   .text.basic:00000000000004a4 $t
         tinyBasic.s:2927   .text.basic:000000000000056e target
         tinyBasic.s:3057   .text.basic:00000000000006d4 str_buffer
         tinyBasic.s:3056   .text.basic:00000000000006d0 input_buffer
         tinyBasic.s:3056   .text.basic:00000000000006d0 $d
         tinyBasic.s:3064   .text.basic:00000000000006d8 $t
         tinyBasic.s:3181   .text.basic:0000000000000844 out_buff
         tinyBasic.s:3181   .text.basic:0000000000000844 $d
         tinyBasic.s:3187   .text.basic:0000000000000848 $t
         tinyBasic.s:3290   .text.basic:0000000000000948 $d
         tinyBasic.s:3297   .text.basic:000000000000094c $t
         tinyBasic.s:3525   .text.basic:0000000000000b9c unget_exit
         tinyBasic.s:3527   .text.basic:0000000000000ba4 print_exit
         tinyBasic.s:3689   .text.basic:0000000000000d0c fs_addr
         tinyBasic.s:3664   .text.basic:0000000000000cc8 search_file
         tinyBasic.s:3668   .text.basic:0000000000000cd0 cmp_loop
         tinyBasic.s:3689   .text.basic:0000000000000d0c $d
         tinyBasic.s:3701   .text.basic:0000000000000d10 $t
         tinyBasic.s:3724   .text.basic:0000000000000d88 no_more_file
         tinyBasic.s:3734   .text.basic:0000000000000dc0 fcount
         tinyBasic.s:3734   .text.basic:0000000000000dc0 $d
         tinyBasic.s:3896   .text.basic:0000000000000fcc fsize
         tinyBasic.s:3897   .text.basic:0000000000000fd8 data_bytes
         tinyBasic.s:3841   .text.basic:0000000000000eec new_file
         tinyBasic.s:3896   .text.basic:0000000000000fcc $d
         tinyBasic.s:3904   .text.basic:0000000000000fde $t
         tinyBasic.s:3942   .text.basic:000000000000103c spi_read
         tinyBasic.s:3945   .text.basic:0000000000001040 spi_enable
         tinyBasic.s:3948   .text.basic:0000000000001044 spi_select
         tinyBasic.s:3951   .text.basic:0000000000001048 spi_write
         tinyBasic.s:4032   .text.basic:00000000000010e8 tone
         tinyBasic.s:4159   .text.basic:0000000000001226 dict_words
         tinyBasic.s:4159   .text.basic:0000000000001226 $d
         tinyBasic.s:4166   .text.basic:000000000000123a $t
         tinyBasic.s:4262   .rodata.user:0000000000000000 $d
         tinyBasic.s:4261   .text.basic:0000000000001306 $d
         tinyBasic.s:4272   .text.basic:0000000000001308 $d
         tinyBasic.s:4272   .text:000000000000118c $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:743    .text:00000000000005c7 $d
ARM GAS  tinyBasic.s 			page 119


         tinyBasic.s:1286   .text:0000000000000a1b $d
         tinyBasic.s:1286   .text:0000000000000a1c $t
         tinyBasic.s:1579   .text:0000000000000ce5 $d
         tinyBasic.s:1579   .text:0000000000000ce6 $t
         tinyBasic.s:1674   .text:0000000000000d8b $d
         tinyBasic.s:1674   .text:0000000000000d8c $t
         tinyBasic.s:3741   .text.basic:0000000000000dc7 $d
         tinyBasic.s:3741   .text.basic:0000000000000dc8 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
get_curpos
