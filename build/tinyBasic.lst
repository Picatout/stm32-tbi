ARM GAS  tinyBasic.s 			page 1


   1              	/****************************************************************************
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	*****************************************************************************/
  18              	/************************************************************************
  19              	REF: https://en.wikipedia.org/wiki/Tiny_BASIC
  20              	************************************************************************/
  21              	
  22              	.syntax unified
  23              	  .cpu cortex-m3
  24              	  .fpu softvfp
  25              	  .thumb
  26              	
  27              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
ARM GAS  tinyBasic.s 			page 2


  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
ARM GAS  tinyBasic.s 			page 3


  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
ARM GAS  tinyBasic.s 			page 4


 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
 190              	
 191              	/*   ADC1 registers */
 192              	.equ ADC1_BASE_ADR, 0x40012400
 193              	.equ ADC_SR,0
 194              	.equ ADC_CR1,0X4
 195              	.equ ADC_CR2,0X8
 196              	.equ ADC_SMPR1,0XC
 197              	.equ ADC_SMPR2,0X10
 198              	.equ ADC_JOFR1,0X14
 199              	.equ ADC_JOFR2,0X18
 200              	.equ ADC_JOFR3,0X1C
 201              	.equ ADC_JOFR4,0X20
ARM GAS  tinyBasic.s 			page 5


 202              	.equ ADC_HTR,0X24
 203              	.equ ADC_LTR,0X28
 204              	.equ ADC_SQR1,0X2C
 205              	.equ ADC_SQR2,0X30
 206              	.equ ADC_SQR3,0X34
 207              	.equ ADC_JSQR,0X38
 208              	.equ ADC_JDR1,0X3C
 209              	.equ ADC_JDR2,0X40
 210              	.equ ADC_JDR3,0X44
 211              	.equ ADC_JDR4,0X48
 212              	.equ ADC_DR,0X4C
 213              	
 214              	/* timer registers */
 215              	.equ TIMER1_BASE_ADR,0X40012C00
 216              	.equ TIMER2_BASE_ADR,0x40000000
 217              	.equ TIMER3_BASE_ADR,0x40000400
 218              	.equ TIMER4_BASE_ADR,0x40000800
 219              	
 220              	.equ TIM_CR1,0
 221              	.equ TIM_CR2,4
 222              	.equ TIM_SMCR,8
 223              	.equ TIM_DIER,0xc
 224              	.equ TIM_SR,0X10
 225              	.equ TIM_EGR,0X14
 226              	.equ TIM_CCMR1,0X18
 227              	.equ TIM_CCMR2,0X1C
 228              	.equ TIM_CCER,0X20
 229              	.equ TIM_CNT,0X24
 230              	.equ TIM_PSC,0X28
 231              	.equ TIM_ARR,0X2C
 232              	.equ TIM_CCR1,0X34
 233              	.equ TIM_CCR2,0X38
 234              	.equ TIM_DCR,0X48
 235              	.equ TIM_DMAR,0X4C
  28              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
ARM GAS  tinyBasic.s 			page 6


  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
ARM GAS  tinyBasic.s 			page 7


  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  29              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// tokens without attributes 
  37              	  .equ TK_NONE,0       // not a token mark end of line 
  38              	  .equ TK_COLON,1      // ':' command separator 
  39              	  .equ TK_COMMA,2      // ',' list separator
  40              	  .equ TK_SEMIC,3      // ';' print command column align 
  41              	  .equ TK_SHARP,4      // '#' print command set column width 
  42              	  .equ TK_LPAREN,5     // '(' 
  43              	  .equ TK_RPAREN,6     // ')'
  44              	  .equ TK_PLUS,7       // '+'
  45              	  .equ TK_MINUS,8      // '-'
  46              	  .equ TK_MULT,9       // '*'
  47              	  .equ TK_DIV,10       // '/'
  48              	  .equ TK_MOD,11       // '%'   arithmetic modulo
ARM GAS  tinyBasic.s 			page 8


  49              	  .equ TK_ARRAY,12     // '@'   array variable  
  50              	  .equ TK_EQUAL,13     // '='   assignment and relop 
  51              	  .equ TK_GT,14        // '>'   relop 
  52              	  .equ TK_LT,15        // '<'   relop 
  53              	  .equ TK_GE,16        // '>='  relop 
  54              	  .equ TK_LE,17        // '<='  relop
  55              	  .equ TK_NE,18        // '<>'  relop 
  56              	// tokens with .byte attribute 
  57              	  .equ TK_CHAR,19      // ASCII character 
  58              	  .equ TK_VAR,20       // variable index 
  59              	  .equ TK_IFUNC,21     // BASIC integer function
  60              	  .equ TK_CFUNC,22     // BASIC character function
  61              	  .equ TK_CMD,23       // BASIC command
  62              	// token with .word attribute 
  63              	  .equ TK_SCONST,24    // SYSTEM constant    
  64              	  .equ TK_CONST,25    // BASIC constant 
  65              	  .equ TK_LABEL,26
  66              	  .equ TK_INTGR,27    // 32 bits integer 
  67              	  .equ TK_QSTR,28    // quoted string  
  68              	  .equ TK_INVALID,29  // value >=27 are invalid 
  69              	
  70              	//--------------------------------------
  71              	//   error codes 
  72              	//--------------------------------------
  73              	  .equ ERR_NONE,0
  74              	  .equ ERR_MEM_FULL,1 
  75              	  .equ ERR_SYNTAX,2
  76              	  .equ ERR_MATH_OVF,3
  77              	  .equ ERR_DIV0,4 
  78              	  .equ ERR_NO_LINE,5
  79              	  .equ ERR_RUN_ONLY,6
  80              	  .equ ERR_CMD_ONLY,7
  81              	  .equ ERR_DUPLICATE,8
  82              	  .equ ERR_NOT_FILE,9
  83              	  .equ ERR_BAD_VALUE,10
  84              	  .equ ERR_NO_ACCESS,11
  85              	  .equ ERR_NO_DATA,12 
  86              	  .equ ERR_NO_PROG,13
  87              	  .equ ERR_NO_FSPACE,14
  88              	  .equ ERR_BUF_FULL,15
  89              	  .equ ERR_CANT_PROG,16
  90              	  
  91              	
  92              	//--------------------------------------
  93              	//   assembler flags 
  94              	//-------------------------------------
  95              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
  96              	
  97              	.equ CELL_SIZE,4 
  98              	
  99              	
 100              	    UPP .req r4  // base address system variables 
 101              	    VADR .req r5  // address FOR loop variable 
 102              	    LIMIT .req r6   // LOOP limit 
 103              	    INCR  .req  r7  // LOOP increment 
 104              	    T1  .req r8     // temporary register 
 105              	    T2  .req r9     // temporary register 
ARM GAS  tinyBasic.s 			page 9


 106              	    IN  .req r10    //  index in text line or token list 
 107              	    BPTR .req r11   //  buffer address or BASIC line address 
 108              	    DP   .req r12   //  parameter stack pointer 
 109              	
 110              	/***************************
 111              	  SYSTEM variables offset 
 112              	  from UPP  
 113              	***************************/ 
 114              	
 115              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 116              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 117              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 118              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 119              	  .equ DATA,DATAPTR+4 // index to next data item 
 120              	  .equ DATALEN, DATA+4 // length of data line 
 121              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 122              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 123              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 124              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 125              	  .equ FSPTR,SEED+4 //  pointer used by file system
 126              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 127              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 128              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 129              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 130              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 131              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 132              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 133              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 134              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 135              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 136              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 137              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 138              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 139              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 140              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 141              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 142              	
 143              	/* flags used by BASIC interpreter */ 
 144              		.equ FRUN,(1<<0) // programm running
 145              		.equ FTRAP,(1<<1) // inside trap handler 
 146              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 147              		.equ FSTOP,(1<<3) // program stopped  
 148              		.equ FBREAK,(1<<4) // break point flag 
 149              		.equ FCOMP,(1<<5)  // compiling flags 
 150              		.equ FAUTORUN,(1<<6) // auto start program running 
 151              	  .equ FPRINT,(1<<7) // inside print command 
 152              	
 153              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 154              		.equ MAX_LINENO,0xffff// BASIC maximum line number 
 155              	
 156              	/***********************************************
 157              	*       MACROS
 158              	***********************************************/
 159              		.macro _CALL fn /* low level routine call */ 
 160              	 	PUSH {LR}
 161              		BL \fn  
 162              	  POP {LR}
ARM GAS  tinyBasic.s 			page 10


 163              		.endm
 164              		
 165              		.macro	_RET /* return from subroutine */
 166              		BX	LR
 167              		.endm
 168              	
 169              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 170              		MOV \REG, #\LITERAL&0xffff
 171              		MOVT \REG, #\LITERAL>>16
 172              		.endm
 173              	
 174              	// local function header 
 175              	  .macro _FUNC label 
 176              	  .p2align 2 
 177              	  .type \label, %function  
 178              	\label:
 179              	  .endm 
 180              	
 181              	// global function header 
 182              	  .macro _GBL_FUNC label 
 183              	  .global \label 
 184              	  _FUNC \label 
 185              	  .endm 
 186              	
 187              	
 188              	/********************************
 189              	    dictionary structure
 190              	*********************************/
 191              		.macro _dict_entry tok_type,name,cmd_idx 
 192              	  .word LINK 
 193              	  .word \cmd_idx 
 194              		.word \tok_type  	
 195              		.equ LINK,.
 196              		.asciz "\name"
 197              		.p2align 2 
 198              		.endm 
 199              	
 200              	  // pop parameter in register 
 201              	  .macro _POP  reg 
 202              	  ldmia  DP!,{\reg}
 203              	  .endm 
 204              	
 205              	  // push register on parameter stack 
 206              	  .macro _PUSH reg 
 207              	  stmdb DP!,{\reg}
 208              	  .endm 
 209              	
 210              	  // drop n parameters on dstack 
 211              	  .macro _DROP n
 212              	  mov r0,#4*\n
 213              	  add DP,R0 
 214              	  .endm 
 215              	
 216              	  // back to previous token in list 
 217              	  .macro _UNGET_TOKEN 
 218              	  ldr IN,[UPP,#IN_SAVED]
 219              	  ldr BPTR,[UPP,#BASICPTR] 
ARM GAS  tinyBasic.s 			page 11


 220              	  .endm 
 221              	
 222              	 // create a text data 
 223              	 .macro _TEXT label,text
 224              	 \label: .asciz "\text"
 225              	 .p2align 2 
 226              	 .endm 
 227              	
 228              	// command line only 
 229              	  .macro _CLO 
 230              	  ldr r0,[UPP,#FLAGS]
 231              	  tst r0,#FRUN 
 232              	  beq 1f 
 233              	  mov r0,#ERR_CMD_ONLY
 234              	  b tb_error
 235              	1: 
 236              	  .endm 
 237              	
 238              	// run time only 
 239              	  .macro _RTO 
 240              	  ldr r0,[UPP,#FLAGS]
 241              	  tst r0,#FRUN 
 242              	  bne 1f 
 243              	  mov r0,#ERR_CMD_ONLY
 244              	  b tb_error
 245              	1:
 246              	  .endm 
 247              	
  30              	  .include "cmd_index.inc"
   1              	//---------------------------------------------------------------------  
   2              	//  Copyright Jacques DeschÃªnes 2021
   3              	//  This file is part of stm32-tbi 
   4              	// 
   5              	//   stm32-tbi is free software: you can redistribute it and/or modify
   6              	//   it under the terms of the GNU General Public License as published by
   7              	//   the Free Software Foundation, either version 3 of the License, or
   8              	//   (at your option) any later version.
   9              	// 
  10              	//   stm32-tbi is distributed in the hope that it will be useful,
  11              	//   but WITHOUT ANY WARRANTY//  without even the implied warranty of
  12              	//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//   GNU General Public License for more details.
  14              	// 
  15              	//   You should have received a copy of the GNU General Public License
  16              	//   along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	// 
  18              	// ----------------------------------------------------------------------
  19              	
  20              	// ---------------------------------------
  21              	//  BASIC command and functions indexes
  22              	//  for addressing 'code_addr' table
  23              	// --------------------------------------
  24              	
  25              	    .equ ABS_IDX, 0  //  absolute function
  26              	    .equ ANA_IDX,ABS_IDX+1
  27              	    .equ ADC_IDX,ANA_IDX+1
  28              	    .equ AND_IDX,ADC_IDX+1 // 
ARM GAS  tinyBasic.s 			page 12


  29              	    .equ ASC_IDX,AND_IDX+1  // 
  30              	    .equ AUTORUN_IDX,ASC_IDX+1
  31              	    .equ AWU_IDX,AUTORUN_IDX+1 //
  32              	    .equ BIT_IDX,AWU_IDX+1 //
  33              	    .equ BRES_IDX,BIT_IDX+1 // 
  34              	    .equ BSET_IDX,BRES_IDX+1 // 
  35              	    .equ BTEST_IDX,BSET_IDX+1 // 
  36              	    .equ BTOGL_IDX,BTEST_IDX+1 // 
  37              	    .equ CHAR_IDX,BTOGL_IDX+1 // 
  38              	    .equ CLS_IDX,CHAR_IDX+1 //
  39              	    .equ CONST_IDX,CLS_IDX+1 //
  40              	    .equ DATA_IDX,CONST_IDX+1 // 
  41              	    .equ DEC_IDX,DATA_IDX+1 // 
  42              	    .equ DIR_IDX,DEC_IDX+1 // 
  43              	    .equ DO_IDX,DIR_IDX+1 // 
  44              	    .equ DROP_IDX,DO_IDX+1
  45              	    .equ DUMP_IDX, DROP_IDX+1 
  46              	    .equ END_IDX,DUMP_IDX+1 // 
  47              	    .equ ERASE_IDX,END_IDX+1 
  48              	    .equ FOR_IDX, ERASE_IDX+1 // 
  49              	    .equ FORGET_IDX, FOR_IDX+1 // 
  50              	    .equ FREE_IDX, FORGET_IDX+1 // 
  51              	    .equ GET_IDX,FREE_IDX+1
  52              	    .equ GOSUB_IDX, GET_IDX+1 // 
  53              	    .equ GOTO_IDX, GOSUB_IDX+1 //
  54              	    .equ HEX_IDX, GOTO_IDX+1 // 
  55              	    .equ IF_IDX, HEX_IDX+1 // 
  56              	    .equ IN_IDX,IF_IDX+1
  57              	    .equ INPUT_IDX, IN_IDX+1 // 
  58              	    .equ INVERT_IDX, INPUT_IDX+1 // 
  59              	    .equ KEY_IDX, INVERT_IDX+1 // 
  60              	    .equ LET_IDX, KEY_IDX+1 // 
  61              	    .equ LIST_IDX, LET_IDX+1 // 
  62              	    .equ LOAD_IDX, LIST_IDX+1 // 
  63              	    .equ LOCATE_IDX,LOAD_IDX+1 //
  64              	    .equ LSHIFT_IDX, LOCATE_IDX+1 // 
  65              	    .equ NEW_IDX, LSHIFT_IDX+1 // 
  66              	    .equ NEXT_IDX, NEW_IDX+1 // 
  67              	    .equ NOT_IDX, NEXT_IDX+1 // 
  68              	    .equ OR_IDX, NOT_IDX+1 // 
  69              	    .equ OUT_IDX,OR_IDX+1
  70              	    .equ PAD_IDX, OUT_IDX+1 // 
  71              	    .equ PAUSE_IDX, PAD_IDX+1 // 
  72              	    .equ PMODE_IDX, PAUSE_IDX+1 // 
  73              	    .equ PEEK8_IDX, PMODE_IDX+1 //
  74              	    .equ PEEK16_IDX,  PEEK8_IDX+1
  75              	    .equ PEEK32_IDX, PEEK16_IDX+1
  76              	    .equ POKE8_IDX, PEEK32_IDX+1 // 
  77              	    .equ POKE16_IDX,POKE8_IDX+1 
  78              	    .equ POKE32_IDX,POKE16_IDX+1
  79              	    .equ POP_IDX,POKE32_IDX+1
  80              	    .equ PRT_IDX, POP_IDX+1 //  //  PRINT commande index 
  81              	    .equ PUSH_IDX,PRT_IDX+1
  82              	    .equ PUT_IDX,PUSH_IDX+1
  83              	    .equ QKEY_IDX, PUT_IDX+1 // 
  84              	    .equ READ_IDX, QKEY_IDX+1 // 
  85              	    .equ REM_IDX, READ_IDX+1  //  REMARK command index 
ARM GAS  tinyBasic.s 			page 13


  86              	    .equ REST_IDX, REM_IDX+1 //  RESTORE
  87              	    .equ RET_IDX, REST_IDX+1   //  RETURN 
  88              	    .equ RND_IDX, RET_IDX+1  //  RANDOM 
  89              	    .equ RSHIFT_IDX, RND_IDX+1 // 
  90              	    .equ RUN_IDX, RSHIFT_IDX+1 // 
  91              	    .equ SAVE_IDX, RUN_IDX+1 // 
  92              	    .equ SERVO_INIT_IDX,SAVE_IDX+1
  93              	    .equ SERVO_OFF_IDX,SERVO_INIT_IDX+1
  94              	    .equ SERVO_POS_IDX,SERVO_OFF_IDX+1
  95              	    .equ SLEEP_IDX, SERVO_POS_IDX+1 // 
  96              	    .equ SPC_IDX,SLEEP_IDX+1 //
  97              	    .equ STEP_IDX, SPC_IDX+1 // 
  98              	    .equ STOP_IDX, STEP_IDX+1 // 
  99              	    .equ STORE_IDX,STOP_IDX+1
 100              	    .equ TAB_IDX, STORE_IDX+1 //
 101              	    .equ THEN_IDX,TAB_IDX+1
 102              	    .equ TICKS_IDX, THEN_IDX+1 // 
 103              	    .equ TIMER_IDX, TICKS_IDX+1 // 
 104              	    .equ TMROUT_IDX, TIMER_IDX+1   //  TIMEOUT
 105              	    .equ TO_IDX, TMROUT_IDX+1 // 
 106              	    .equ TONE_IDX,TO_IDX+1
 107              	    .equ TONE_INIT_IDX,TONE_IDX+1 
 108              	    .equ TRACE_IDX,TONE_INIT_IDX+1
 109              	    .equ UBOUND_IDX, TRACE_IDX+1 // 
 110              	    .equ UFLASH_IDX, UBOUND_IDX+1 // 
 111              	    .equ UNTIL_IDX, UFLASH_IDX+1 // 
 112              	    .equ WAIT_IDX, UNTIL_IDX+1 // 
 113              	    .equ WORDS_IDX, WAIT_IDX+1 // 
 114              	    .equ XOR_IDX, WORDS_IDX+1 //
 115              	    .equ XPOS_IDX,XOR_IDX+1 //
 116              	    .equ YPOS_IDX,XPOS_IDX+1 // 
 117              	
  31              	
  32              	  .section  .text , "ax", %progbits 
  33              	
  34              	
  35              	/********************************
  36              	    HELPER FUNCTIONS 
  37              	********************************/
  38              	
  39              	/**********************************
  40              	   strlen 
  41              	   return length of asciz 
  42              	   input:
  43              	      r0    *asciz 
  44              	   output:
  45              	      r0   length 
  46              	   use:
  47              	      r1   string length 
  48              	      r2   char 
  49              	*********************************/
  50              	    _GBL_FUNC strlen 
  51 0000 06B4     	    push {r1,r2}
  52 0002 81EA0101 	    eor r1,r1  // strlen 
  53 0006 10F8012B 	1:  ldrb r2,[r0],#1 
  54 000a 12B1     	    cbz r2,9f  
  55 000c 01F10101 	    add r1,#1 
ARM GAS  tinyBasic.s 			page 14


  56 0010 F9E7     	    b 1b 
  57 0012 0846     	9:  mov r0,r1 
  58 0014 06BC     	    pop {r1,r2}
  59 0016 7047     	    _RET     
  60              	
  61              	
  62              	/******************************
  63              	   cmove 
  64              	   move n characters 
  65              	   input:
  66              	    r0      src 
  67              	    r1      dest 
  68              	    r2      count 
  69              	  output:
  70              	    none:
  71              	  use: 
  72              	    r3    temp   
  73              	******************************/
  74              	    _GBL_FUNC cmove
  75 0018 08B4     	    push {r3} 
  76 001a 1240     	    ands r2,r2
  77 001c 10D0     	    beq 9f 
  78 001e 8842     	    cmp r0,r1 
  79 0020 06D4     	    bmi move_from_end 
  80              	move_from_low: // move from low address toward high 
  81 0022 10F8013B 	    ldrb r3,[r0],#1
  82 0026 01F8013B 	    strb r3,[r1],#1
  83 002a 013A     	    subs r2,#1
  84 002c F9D1     	    bne move_from_low
  85 002e 07E0     	    b 9f 
  86              	move_from_end: // move from high address toward low 
  87 0030 1044     	    add r0,r0,r2 
  88 0032 1144     	    add r1,r1,r2     
  89 0034 10F8013D 	1:  ldrb r3,[r0,#-1]!
  90 0038 01F8013D 	    strb r3,[r1,#-1]!
  91 003c 013A     	    subs r2,#1
  92 003e F9D1     	    bne 1b 
  93 0040 08BC     	9:  pop {r3}
  94 0042 7047     	    _RET
  95              	
  96              	/*********************************
  97              	  strcpy 
  98              	  copy .asciz string 
  99              	  input:
 100              	    r0   *string
 101              	    r1   *dest_buffer
 102              	  output:
 103              	    r0   *string
 104              	    r1   *dest_buffer 
 105              	  use:
 106              	    r2   char
 107              	**********************************/
 108              	    _GBL_FUNC strcpy 
 109 0044 07B4     	    push {r0,r1,r2}
 110 0046 10F8012B 	1:  ldrb r2,[r0],#1
 111 004a 12B1     	    cbz  r2, 9f 
 112 004c 01F8012B 	    strb r2,[r1],#1
ARM GAS  tinyBasic.s 			page 15


 113 0050 F9E7     	    b 1b 
 114 0052 0A70     	9:  strb r2,[r1] 
 115 0054 07BC     	    pop {r0,r1,r2}
 116 0056 7047     	    _RET 
 117              	
 118              	/*********************************
 119              	  strcmp 
 120              	  compare 2  .asciz strings 
 121              	  input:
 122              	    r0  *str1 
 123              	    r1  *str2
 124              	  output:
 125              	    r0  <0 str1<str2 
 126              	        0  str1==str2 
 127              	        >0  str1>str2  
 128              	  use:
 129              	    r2  *str1
 130              	    r3 char 1 
 131              	    r7 char 2  
 132              	*********************************/
 133              	  _FUNC strcmp
 134 0058 8CB4     	    push {r2,r3,r7}
 135 005a 0246     	    mov r2, r0
 136              	1:
 137 005c 12F8013B 	    ldrb r3,[r2],#1  
 138 0060 11F8017B 	    ldrb r7,[r1],#1
 139 0064 13B1     	    cbz r3, 2f 
 140 0066 0FB1     	    cbz r7, 2f 
 141 0068 D81B     	    subs r0,r3,r7 
 142 006a F7D0     	    beq 1b
 143 006c A3EB0700 	2:  sub r0,r3,r7 
 144 0070 8CBC     	    pop {r2,r3,r7}
 145 0072 7047     	    _RET 
 146              	
 147              	/**********************************
 148              	    prt_tok 
 149              	    print token id and value 
 150              	  input:
 151              	    r0    id 
 152              	    r1    value 
 153              	  output:
 154              	    none
 155              	  use:
 156              	
 157              	***********************************/
 158              	    _FUNC prt_tok 
 159 0074 03B4     	    push {r0,r1}
 160 0076 1148     	    ldr r0,tok_msg 
 161 0078 00B5FFF7 	    _CALL uart_puts 
 161      FEFF5DF8 
 161      04EB
 162 0082 01BC     	    pop {r0}
 163 0084 4FF01001 	    mov r1,#16 
 164 0088 00B5FFF7 	    _CALL print_int 
 164      FEFF5DF8 
 164      04EB
 165 0092 4FF02000 	    mov r0,#SPACE 
ARM GAS  tinyBasic.s 			page 16


 166 0096 00B5FFF7 	    _CALL uart_putc 
 166      FEFF5DF8 
 166      04EB
 167 00a0 01BC     	    pop {r0}
 168 00a2 4FF01001 	    mov r1,#16 
 169 00a6 00B5FFF7 	    _CALL print_int
 169      FEFF5DF8 
 169      04EB
 170 00b0 00B5FFF7 	    _CALL cr   
 170      FEFF5DF8 
 170      04EB
 171 00ba 7047     	    _RET 
 172 00bc 746F6B65 	    _TEXT tok_msg,"token: " 
 172      6E3A2000 
 173              	
 174              	/******************************************
 175              	    prt_row 
 176              	    print memory content in byte format 
 177              	    input:
 178              	      r0    address 
 179              	      r1    count 
 180              	    output:
 181              	      r0    address+count 
 182              	    use:
 183              	      r2    address 
 184              	      r3    count
 185              	****************************************/
 186              	    _FUNC prt_row 
 187 00c4 0FB4     	    push {r0,r1,r2,r3}
 188 00c6 0246     	    mov r2,r0 
 189 00c8 0B46     	    mov r3,r1  
 190 00ca 4FF01001 	    mov r1,#16 
 191 00ce 00B5FFF7 	    _CALL print_int 
 191      FEFF5DF8 
 191      04EB
 192 00d8 4FF00C00 	    mov r0,#12 
 193 00dc 00B5FFF7 	    _CALL cursor_x 
 193      FEFF5DF8 
 193      04EB
 194              	// print bytes values in hexadecimal 
 195 00e6 12F8010B 	1:  ldrb r0,[r2],#1 
 196 00ea 00B5FFF7 	    _CALL print_hex
 196      FEFF5DF8 
 196      04EB
 197 00f4 013B     	    subs r3,#1 
 198 00f6 F6D1     	    bne 1b 
 199 00f8 4FF00200 	    mov r0,#2 
 200 00fc 00B5FFF7 	    _CALL spaces
 200      FEFF5DF8 
 200      04EB
 201              	// print characters      
 202 0106 03BC     	    pop {r0,r1}
 203 0108 00B500F0 	    _CALL prt_chars 
 203      8DF85DF8 
 203      04EB
 204 0112 00B5FFF7 	    _CALL cr  
 204      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 17


 204      04EB
 205 011c 1046     	    mov r0,r2
 206 011e 0CBC     	    pop {r2,r3}      
 207 0120 7047     	    _RET 
 208              	
 209              	
 210              	/************************************
 211              	  show current line number 
 212              	***********************************/
 213 0122 00BF     	    _FUNC show_line_nbr 
 214 0124 03B4     	    push {r0,r1}
 215 0126 BBF80000 	    ldrh r0,[BPTR]
 216 012a 4FF00A01 	    mov r1,#10
 217 012e 00B5FFF7 	    _CALL print_int
 217      FEFF5DF8 
 217      04EB
 218 0138 00B5FFF7 	    _CALL cr 
 218      FEFF5DF8 
 218      04EB
 219 0142 03BC     	    pop  {r0,r1}
 220 0144 7047     	    _RET 
 221              	
 222              	/************************************
 223              	  show data stack 
 224              	************************************/
 225 0146 00BF     	    _FUNC show_data_stack 
 226 0148 2DE90303 	    push {r0,r1,T1,T2}
 227 014c 0E48     	    ldr r0,data_stack 
 228 014e 00B5FFF7 	    _CALL uart_puts 
 228      FEFF5DF8 
 228      04EB
 229 0158 E046     	    mov T1,DP 
 230 015a 4FF49E49 	    _MOV32 T2,DSTACK_TOP
 230      C2F20009 
 231 0162 C145     	1:  cmp T2,T1 
 232 0164 08D0     	    beq 9f 
 233 0166 59F8040D 	    ldmdb T2!,{r0} 
 234 016a A169     	    ldr r1,[UPP,#BASE] 
 235 016c 00B5FFF7 	    _CALL print_int 
 235      FEFF5DF8 
 235      04EB
 236 0176 F4E7     	    b 1b 
 237 0178 00B5FFF7 	9:  _CALL cr 
 237      FEFF5DF8 
 237      04EB
 238 0182 BDE80303 	    pop {r0,r1,T1,T2}
 239 0186 7047     	    _RET 
 240              	data_stack:
 241 0188 8C010000 	  .word .+4 
 242 018c 64737461 	  .asciz "dstack: "
 242      636B3A20 
 242      00
 243              	
 244              	/************************************
 245              	  show main stack 
 246              	***********************************/
 247 0195 0000BF   	    _FUNC show_main_stack
ARM GAS  tinyBasic.s 			page 18


 248 0198 2CE90303 	    stmdb DP!,{r0,r1,T1,T2}
 249 019c DFF83C00 	    ldr r0,main_stack 
 250 01a0 00B5FFF7 	    _CALL uart_puts 
 250      FEFF5DF8 
 250      04EB
 251 01aa 4FF4A049 	    _MOV32 T2,RSTACK_TOP
 251      C2F20009 
 252 01b2 0DF10408 	    add T1,sp,#4
 253 01b6 C145     	1:  cmp T2,T1
 254 01b8 08D0     	    beq 9f 
 255 01ba 59F8040D 	    ldmdb T2!,{r0} 
 256 01be A169     	    ldr r1,[UPP,#BASE]
 257 01c0 00B5FFF7 	    _CALL print_int
 257      FEFF5DF8 
 257      04EB
 258 01ca F4E7     	    b 1b
 259 01cc 00B5FFF7 	9:  _CALL cr 
 259      FEFF5DF8 
 259      04EB
 260 01d6 BCE80303 	    ldmia DP!,{r0,r1,T1,T2}     
 261 01da 7047     	    _RET  
 262              	main_stack:
 263 01dc E0010000 	   .word .+4 
 264 01e0 72737461 	   .asciz "rstack: " 
 264      636B3A20 
 264      00
 265              	
 266              	/************************************
 267              	    show execution trace 
 268              	************************************/
 269 01e9 0000BF   	    _FUNC show_trace
 270 01ec 04B4     	    push {r2}
 271 01ee D4F8CC20 	    ldr r2,[UPP,#TRACE_LEVEL]
 272 01f2 BAB1     	    cbz r2,9f  
 273 01f4 00B5FFF7 	    _CALL cr 
 273      FEFF5DF8 
 273      04EB
 274 01fe 00B5FFF7 	    _CALL show_line_nbr
 274      90FF5DF8 
 274      04EB
 275 0208 022A     	    cmp r2,#2 
 276 020a 0BD4     	    bmi 9f 
 277 020c 00B5FFF7 	    _CALL show_data_stack 
 277      9BFF5DF8 
 277      04EB
 278 0216 032A     	    cmp r2,#3 
 279 0218 04D4     	    bmi 9f 
 280 021a 00B5FFF7 	    _CALL show_main_stack 
 280      BCFF5DF8 
 280      04EB
 281 0224 04BC     	9:  pop {r2}
 282 0226 7047     	    _RET 
 283              	
 284              	
 285              	/************************************
 286              	    prt_chars 
 287              	    print n ascii character starting 
ARM GAS  tinyBasic.s 			page 19


 288              	    at address 
 289              	    input: 
 290              	      r0    address 
 291              	      r1    count 
 292              	    output:
 293              	      r0    address + count
 294              	    use:
 295              	      r2    address 
 296              	***********************************/
 297              	    _FUNC prt_chars 
 298 0228 04B4     	    push {r2}
 299 022a 0246     	    mov r2,r0
 300 022c 12F8010B 	0:  ldrb r0,[r2],#1 
 301 0230 2028     	    cmp r0,#SPACE 
 302 0232 01D4     	    bmi 1f 
 303 0234 7F28     	    cmp r0,#127 
 304 0236 01D4     	    bmi 2f 
 305 0238 4FF05F00 	1:  mov r0,#'_' 
 306 023c 00B5FFF7 	2:  _CALL uart_putc
 306      FEFF5DF8 
 306      04EB
 307 0246 0139     	    subs r1,#1 
 308 0248 F0D1     	    bne 0b 
 309 024a 1046     	    mov r0,r2 
 310 024c 04BC     	    pop {r2}
 311 024e 7047     	    _RET 
 312              	
 313              	
 314              	/*********************************
 315              	    search_target 
 316              	    search for goto, gosub target
 317              	    target is line number | label  
 318              	*********************************/
 319              	    _FUNC search_target
 320 0250 00B500F0 	    _CALL next_token 
 320      FFFD5DF8 
 320      04EB
 321 025a 1A28     	    cmp r0,TK_LABEL 
 322 025c 06D1     	    bne 2f 
 323 025e 00B500F0 	    _CALL search_label
 323      32F85DF8 
 323      04EB
 324 0268 A0B1     	    cbz r0,8f  
 325 026a 16E0     	    b 9f 
 326 026c D4F800A0 	2:  _UNGET_TOKEN
 326      D4F808B0 
 327 0274 00B500F0 	    _CALL expression 
 327      11FF5DF8 
 327      04EB
 328 027e 1B28     	    cmp r0,#TK_INTGR 
 329 0280 40F0EC83 	    bne syntax_error 
 330 0284 48B1     	    cbz r0,9f 
 331 0286 0846     	    mov r0,r1 
 332 0288 00B5FFF7 	    _CALL search_lineno 
 332      FEFF5DF8 
 332      04EB
 333 0292 11B1     	    cbz r1,9f 
ARM GAS  tinyBasic.s 			page 20


 334 0294 4FF00A00 	8:  mov r0,#ERR_BAD_VALUE 
 335 0298 E4E3     	    b tb_error 
 336 029a 7047     	9:  _RET 
 337              	
 338              	
 339              	/***************************************
 340              	  search_const 
 341              	  search for constant 
 342              	  input:
 343              	    r0  constant label 
 344              	  output:
 345              	    r0  TK_INTGR 
 346              	    r1  constant value  
 347              	  use:
 348              	    r2   *list 
 349              	    r3   BOUND 
 350              	***************************************/
 351              	    _FUNC search_const
 352 029c 0CB4     	    push {r2,r3} 
 353 029e 626B     	    ldr r2,[UPP,#TXTEND]
 354 02a0 D4F8D030 	    ldr r3,[UPP,#HERE] 
 355 02a4 9A42     	1:  cmp r2,r3 
 356 02a6 0BD5     	    bpl 8f 
 357 02a8 52F8041B 	    ldr r1,[r2],#4
 358 02ac 8842     	    cmp r0,r1 
 359 02ae 02D0     	    beq 2f 
 360 02b0 02F10402 	    add r2,#4
 361 02b4 F6E7     	    b 1b 
 362              	2:  // found 
 363 02b6 1168     	    ldr r1,[r2]
 364 02b8 4FF01B00 	    mov r0,#TK_INTGR 
 365 02bc 0CBC     	    pop {r2,r3}
 366 02be 7047     	    _RET
 367              	8:  // that constant doesn't exist 
 368 02c0 4FF00A00 	    mov r0,#ERR_BAD_VALUE 
 369 02c4 CEE3     	    b tb_error      
 370              	
 371              	
 372              	/***************************************
 373              	    search_label 
 374              	    search target label 
 375              	    input:
 376              	      r1    target label 
 377              	    output:
 378              	      r0    address or 0 
 379              	    use:
 380              	      r2    line address link 
 381              	      r3    search limit 
 382              	****************************************/
 383 02c6 00BF     	    _FUNC search_label 
 384 02c8 0CB4     	    push {r2,r3}
 385 02ca 226B     	    ldr r2,[UPP,#TXTBGN]
 386 02cc 636B     	    ldr r3,[UPP,#TXTEND]
 387 02ce 9A42     	1:  cmp r2,r3
 388 02d0 0AD0     	    beq 8f 
 389 02d2 D078     	    ldrb r0,[r2,#3]
 390 02d4 1A28     	    cmp  r0,#TK_LABEL 
ARM GAS  tinyBasic.s 			page 21


 391 02d6 02D0     	    beq 4f 
 392 02d8 9078     	2:  ldrb r0,[r2,#2]
 393 02da 0244     	    add r2,r0 
 394 02dc F7E7     	    b 1b 
 395              	4:  // compare label 
 396 02de 5068     	    ldr r0,[R2,#4]
 397 02e0 8142     	    cmp r1,r0 
 398 02e2 F9D1     	    bne 2b 
 399              	    // found label 
 400 02e4 1046     	    mov r0,r2 
 401 02e6 01E0     	    b 9f
 402 02e8 80EA0000 	8:  eor r0,r0 
 403 02ec 0CBC     	9:  pop {r2,r3}
 404 02ee 7047     	    _RET 
 405              	
 406              	
 407              	/***************************************
 408              	    search_lineno 
 409              	    localize BASIC line from its number 
 410              	    input:
 411              	      r0   line# 
 412              	    output: 
 413              	      r0   adr where found || adr new to be inserted 
 414              	      r1   0 found || !0 not found  
 415              	    use:
 416              	      r0   scan address 
 417              	      r1   temp   
 418              	      r2   address end of text
 419              	      r3   target line#
 420              	****************************************/    
 421              	    _GBL_FUNC search_lineno
 422 02f0 0CB4     	    push {r2,r3} 
 423 02f2 0346     	    mov r3,r0 // target 
 424 02f4 206B     	    ldr r0,[UPP,#TXTBGN] // search start adr 
 425 02f6 626B     	    ldr r2,[UPP,#TXTEND] // search area end adr
 426 02f8 9042     	1:  cmp r0,r2 
 427 02fa 05D0     	    beq  8f
 428 02fc 0188     	    ldrh r1,[r0]
 429 02fe C91A     	    subs r1,r3 
 430 0300 04D5     	    bpl 9f 
 431 0302 8178     	    ldrb r1,[r0,#2]
 432 0304 0844     	    add r0,r1
 433 0306 F7E7     	    b 1b 
 434 0308 4FF0FF31 	8:  mov r1,#-1 
 435 030c 0CBC     	9:  pop {r2,r3}
 436 030e 7047     	    _RET 
 437              	
 438              	
 439              	/********************************************
 440              	    delete_line 
 441              	    delete BASIC line at addr 
 442              	    input:
 443              	      r0    address line to delete 
 444              	    output:
 445              	      r0    same as input 
 446              	    use: 
 447              	      r1    dest adr
ARM GAS  tinyBasic.s 			page 22


 448              	      r2    bytes to move 
 449              	      T1    length line to delete 
 450              	      T2    txtend 
 451              	********************************************/
 452              	    _FUNC delete_line 
 453 0310 2DE90703 	    push {r0,r1,r2,T1,T2}
 454 0314 0146     	    mov r1,r0 // dest 
 455 0316 91F80280 	    ldrb T1,[r1,#2] // line length 
 456 031a 4044     	    add r0,T1  // src
 457 031c D4F83490 	    ldr T2,[UPP,#TXTEND]
 458 0320 A9EB0002 	    sub r2,T2,r0 // bytes to move 
 459 0324 00B5FFF7 	    _CALL cmove
 459      FEFF5DF8 
 459      04EB
 460 032e A9EB0809 	    sub T2,T1 // txtend-count 
 461 0332 C4F83490 	    str T2,[UPP,#TXTEND] 
 462 0336 BDE80703 	    pop {r0,r1,r2,T1,T2}
 463 033a 7047     	    _RET 
 464              	
 465              	/******************************************
 466              	    create_gap 
 467              	    create a gap in text area to insert new line 
 468              	    input:
 469              	      r0    adr 
 470              	      r1    length 
 471              	    output:
 472              	      r0    adr 
 473              	    use:
 474              	      T1    length 
 475              	      T2    txtend 
 476              	************************************************/
 477              	    _FUNC create_gap 
 478 033c 2DE90503 	    push {r0,r2,T1,T2}
 479 0340 8846     	    mov T1,R1
 480 0342 0144     	    add r1,r0  // dest 
 481 0344 D4F83490 	    ldr T2,[UPP,#TXTEND]
 482 0348 A9EB0002 	    sub r2,T2,r0 
 483 034c 00B5FFF7 	    _CALL cmove
 483      FEFF5DF8 
 483      04EB
 484 0356 C144     	    add T2,T1 
 485 0358 C4F83490 	    str T2,[UPP,#TXTEND]
 486 035c BDE80503 	    pop {r0,r2,T1,T2}
 487 0360 7047     	    _RET 
 488              	
 489              	/************************************************
 490              	    insert_line 
 491              	    insert BASIC line in text area 
 492              	    first search if line with same number exist 
 493              	    replace if so. 
 494              	    input:
 495              	      r0    *buffer to insert 
 496              	    output:
 497              	      none 
 498              	    use: 
 499              	      T1     *buffer
 500              	      T2     temp  
ARM GAS  tinyBasic.s 			page 23


 501              	************************************************/ 
 502 0362 00BF     	    _FUNC insert_line 
 503 0364 2DE90203 	    push {r1,T1,T2}
 504 0368 8046     	    mov T1,r0 
 505 036a B8F80000 	    ldrh r0,[T1]
 506 036e 00B5FFF7 	    _CALL search_lineno 
 506      FEFF5DF8 
 506      04EB
 507 0378 49B9     	    cbnz  r1, 1f // line# doesn't exist
 508              	// already exist 
 509 037a 00B5FFF7 	    _CALL delete_line // delete old one 
 509      C8FF5DF8 
 509      04EB
 510 0384 98F80290 	    ldrb T2,[T1,#2] // buffer line length 
 511 0388 B9F1040F 	    cmp T2,#4 // empty line length==4  
 512 038c 0ED0     	    beq 9f
 513              	1: //insert new line 
 514 038e 98F80210 	    ldrb r1,[T1,#2]
 515 0392 00B5FFF7 	    _CALL create_gap 
 515      D2FF5DF8 
 515      04EB
 516 039c 0146     	    mov r1,r0
 517 039e 4046     	    mov r0,T1 
 518 03a0 8278     	    ldrb r2,[r0,#2]
 519 03a2 00B5FFF7 	    _CALL cmove 
 519      FEFF5DF8 
 519      04EB
 520 03ac BDE80203 	9:  pop {r1,T1,T2}
 521 03b0 7047     	    _RET 
 522              	
 523              	/*********************************
 524              	    compile 
 525              	    tokenize source line save it 
 526              	    in pas buffer.
 527              	    compiled line format: 
 528              	      line_no  2 bytes {0...32767}
 529              	      count    1 byte  
 530              	      tokens   variable length 
 531              	  input:
 532              	     r0   *text buffer 
 533              	     r1   *text length   
 534              	  output:
 535              	    r0    0 stored | -1 immediate 
 536              	  use:
 537              	    r3    tib index   
 538              	    T1    tib
 539              	    T2    pad
 540              	***********************************/
 541 03b2 00BF     	    _FUNC compile
 542 03b4 8046     	    mov T1, r0  // source text buffer 
 543 03b6 6160     	    str r1,[UPP,#COUNT] // save line length 
 544 03b8 DFF8F499 	    ldr T2,pad // tokens buffer
 545 03bc 83EA0303 	    eor r3,r3 // source index  
 546 03c0 206C     	    ldr r0,[UPP,#FLAGS]
 547 03c2 40F02000 	    orr r0,#FCOMP
 548 03c6 2064     	    str r0,[UPP,#FLAGS] // compiling flag 
 549 03c8 80EA0000 	    eor r0,r0     
ARM GAS  tinyBasic.s 			page 24


 550 03cc 29F8020B 	    strh r0,[T2],#2   // line no 
 551 03d0 09F8010B 	    strb r0,[T2],#1 // length 
 552 03d4 2060     	    str  r0,[UPP,#IN_SAVED]  // save index 
 553 03d6 C4F80880 	    str  T1,[UPP,#BASICPTR] // save text line 
 554 03da 00B500F0 	    _CALL parse_int 
 554      6EF95DF8 
 554      04EB
 555 03e4 0AD0     	    beq 2f 
 556              	// this is a line number     
 557 03e6 0129     	    cmp r1,#1 
 558 03e8 02D5     	    bpl 1f 
 559 03ea 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE 
 560 03ee 39E3     	    b tb_error  
 561 03f0 B1F5803F 	1:  cmp r1,#65536
 562 03f4 F9D5     	    bpl 0b 
 563              	    // write line # to pad 
 564 03f6 29F8031C 	    strh r1,[T2,#-3]
 565 03fa 2360     	    str r3,[UPP,#IN_SAVED]
 566              	2:  // check for pad full 
 567 03fc C145     	    cmp T2,T1
 568 03fe 02DB     	    blt 3f 
 569 0400 4FF00F00 	    mov r0,#ERR_BUF_FULL 
 570 0404 2EE3     	    b tb_error 
 571 0406 00B500F0 	3:  _CALL comp_token 
 571      28F85DF8 
 571      04EB
 572 0410 0028     	    cmp r0,#TK_NONE 
 573 0412 01D0     	    beq 4f 
 574 0414 2360     	    str r3,[UPP,#IN_SAVED]
 575 0416 F1E7     	    b 2b 
 576              	4: // compilation completed 
 577 0418 DFF89439 	    ldr r3,pad 
 578 041c A9EB0300 	    sub r0,T2,r3 // line length 
 579 0420 9870     	    strb r0,[r3,#2]
 580 0422 6060     	    str r0,[UPP,#COUNT] // lenght of tokens line 
 581 0424 1888     	    ldrh r0,[r3] // line number 
 582 0426 70B1     	    cbz r0,8f  
 583              	// insert line in text buffer 
 584 0428 206C     	    ldr r0,[UPP,#FLAGS]
 585 042a 10F0080F 	    tst r0,#FSTOP
 586 042e 02D0     	    beq 7f 
 587 0430 4FF01000 	    mov r0,#ERR_CANT_PROG 
 588 0434 16E3     	    b tb_error 
 589 0436 1846     	7:  mov r0,r3 
 590 0438 00B5FFF7 	    _CALL insert_line 
 590      93FF5DF8 
 590      04EB
 591 0442 4040     	    eors r0,r0 
 592 0444 08E0     	    b 9f 
 593 0446 9B46     	8:  mov BPTR,r3 // *token_list 
 594 0448 4FF0030A 	    mov IN,#3
 595 044c 206C     	    ldr r0,[UPP,#FLAGS]
 596 044e A0F12000 	    sub r0,#FCOMP
 597 0452 2064     	    str r0,[UPP,#FLAGS]
 598 0454 5FF0FF30 	    movs r0,#-1 
 599 0458 7047     	9:  _RET 
 600              	
ARM GAS  tinyBasic.s 			page 25


 601              	/*********************************************
 602              	    compile next token from source 
 603              	    input: 
 604              	      r3 		tib index  
 605              	      T1    tib adr
 606              	      T2    insert point in pad  
 607              	    output:
 608              	      r0     token attribute 
 609              	      r1 		token value
 610              	      r3     tib index updated    
 611              	      T2     updated 
 612              	      use:
 613              	**********************************************/
 614 045a 00BF     	    _FUNC comp_token 
 615 045c 40B4     	    push {r6}
 616 045e 18F80300 	    ldrb r0,[T1,r3]
 617 0462 0040     	    ands r0,r0 
 618 0464 7DD0     	    beq store_r0  // reached end of text  
 619 0466 4FF02000 	    mov r0,#SPACE 
 620 046a 00B500F0 	    _CALL skip  // skip spaces 
 620      76F95DF8 
 620      04EB
 621 0474 18F80300 	    ldrb r0,[T1,r3]
 622 0478 0040     	    ands r0,r0 
 623 047a 72D0     	    beq store_r0  // reached end of text 
 624 047c 03F10103 	    add r3,#1
 625 0480 00B500F0 	    _CALL is_letter 
 625      9FF95DF8 
 625      04EB
 626 048a 0BD1     	    bne 1f
 627 048c A3F10103 	    sub r3,#1 
 628 0490 00B500F0 	    _CALL comp_label // parse and compile label 
 628      AFF85DF8 
 628      04EB
 629 049a 1728     	    cmp r0,#TK_CMD 
 630 049c 71D1     	    bne token_exit 
 631 049e 3C29     	    cmp r1,#REM_IDX 
 632 04a0 4DD0     	    beq tick2 
 633 04a2 6EE0     	    b token_exit 
 634 04a4 00B500F0 	1:  _CALL is_special
 634      6FF85DF8 
 634      04EB
 635 04ae DFF80C6D 	    ldr r6,=token_ofs
 636 04b2 D6E811F0 	    tbh [r6,r1] 
 637              	tok_idx0:     
 638              	//  not special char.  
 639 04b6 57E0     	    b try_number 
 640              	// single char token with no value 
 641              	single: 
 642 04b8 DFF8046D 	    ldr r6,=tok_single
 643 04bc 705C     	    ldrb r0,[r6,r1] 
 644 04be 50E0     	    b store_r0
 645              	lt:
 646 04c0 4FF00F00 	    mov r0,#TK_LT
 647 04c4 18F80310 	    ldrb r1,[T1,r3]
 648 04c8 3E29     	    cmp r1,#'>' 
 649 04ca 06D0     	    beq 1f
ARM GAS  tinyBasic.s 			page 26


 650 04cc 0AE0     	    b 2f 
 651              	gt:
 652 04ce 4FF00E00 	    mov r0,#TK_GT 
 653 04d2 18F80310 	    ldrb r1,[T1,r3]
 654 04d6 3C29     	    cmp r1,#'<'
 655 04d8 04D1     	    bne 2f  
 656 04da 03F10103 	1:  add r3,#1
 657 04de 4FF01200 	    mov r0,#TK_NE  
 658 04e2 3EE0     	    b store_r0
 659 04e4 3D29     	2:  cmp r1,#'=' 
 660 04e6 3CD1     	    bne store_r0  
 661 04e8 03F10103 	    add r3,#1
 662 04ec 00F10200 	    add r0,#2
 663 04f0 37E0     	    b store_r0       
 664              	bkslash:
 665 04f2 18F80310 	    ldrb r1,[T1,r3]
 666 04f6 03F10103 	    add r3,#1
 667 04fa 4FF01300 	    mov r0,#TK_CHAR 
 668 04fe 09F8010B 	    strb r0,[T2],#1
 669 0502 09F8011B 	    strb r1,[T2],#1
 670 0506 3CE0     	    b token_exit 
 671              	prt_cmd: 
 672 0508 4FF01700 	    mov r0,#TK_CMD 
 673 050c 4FF03701 	    mov r1,#PRT_IDX
 674 0510 09F8010B 	    strb r0,[T2],#1
 675 0514 09F8011B 	    strb r1,[T2],#1
 676 0518 33E0     	    b token_exit 
 677              	quote:
 678 051a 4FF01C00 	    mov r0,#TK_QSTR 
 679 051e 09F8010B 	    strb r0,[T2],#1
 680 0522 00B500F0 	    _CALL parse_quote
 680      E6F85DF8 
 680      04EB
 681 052c 29E0     	    b token_exit
 682              	tick: 
 683              	// copy comment in pad 
 684 052e 4FF01700 	    mov r0,#TK_CMD 
 685 0532 4FF03C01 	    mov r1,#REM_IDX 
 686 0536 09F8010B 	    strb r0,[T2],#1 
 687 053a 09F8011B 	    strb r1,[T2],#1
 688              	tick2:
 689 053e 08EB0300 	    add r0,T1,r3 
 690 0542 4946     	    mov r1,T2 
 691 0544 00B5FFF7 	    _CALL strcpy 
 691      FEFF5DF8 
 691      04EB
 692 054e 00B5FFF7 	    _CALL strlen 
 692      FEFF5DF8 
 692      04EB
 693 0558 8144     	    add T2,r0
 694 055a 09F10109 	    add T2,#1
 695 055e 6368     	    ldr r3,[UPP,#COUNT]
 696 0560 0FE0     	    b token_exit
 697              	store_r0: 
 698 0562 09F8010B 	    strb r0,[T2],#1
 699 0566 0CE0     	    b token_exit 
 700              	try_number:
ARM GAS  tinyBasic.s 			page 27


 701 0568 A3F10103 	    sub r3,#1
 702 056c 00B500F0 	    _CALL parse_int  
 702      A5F85DF8 
 702      04EB
 703 0576 00F07182 	    beq syntax_error  
 704 057a 09F8010B 	    strb r0,[T2],#1 
 705 057e 49F8041B 	    str r1,[T2],#4
 706              	token_exit:
 707 0582 40BC     	    pop {r6}
 708 0584 7047     	    _RET 
 709              	
 710              	
 711              	/****************************
 712              	    is_special  
 713              	    check for non alphanum
 714              	    input:
 715              	      r0    character to scan 
 716              	    output:
 717              	      r0    character 
 718              	      r1    0 || index 
 719              	    use: 
 720              	      r1    scan index 
 721              	      r2    temp 
 722              	      r3    char_list 
 723              	*****************************/
 724 0586 00BF     	    _FUNC is_special 
 725 0588 0CB4     	    push {r2,r3}
 726 058a 4FF00101 	    mov r1,#1
 727 058e DFF8343C 	    ldr r3,=char_list 
 728 0592 5A5C     	1:  ldrb r2,[r3,r1]
 729 0594 22B1     	    cbz r2,8f 
 730 0596 8242     	    cmp r2,r0 
 731 0598 04D0     	    beq 9f 
 732 059a 01F10101 	    add r1,#1 
 733 059e F8E7     	    b 1b
 734 05a0 81EA0101 	8:  eor r1,r1     
 735 05a4 0CBC     	9:  pop {r2,r3}
 736 05a6 7047     	    _RET 
 737              	
 738              	char_list:
 739 05a8 202C3B40 	  .asciz " ,;@():#-+*/%=<>\\?'\""
 739      28293A23 
 739      2D2B2A2F 
 739      253D3C3E 
 739      5C3F2722 
 740              	
 741              	tok_single:
 742 05bd 0002030C 	  .byte TK_NONE,TK_COMMA,TK_SEMIC,TK_ARRAY,TK_LPAREN,TK_RPAREN,TK_COLON
 742      050601
 743 05c4 04080709 	  .byte TK_SHARP,TK_MINUS,TK_PLUS,TK_MULT,TK_DIV,TK_MOD,TK_EQUAL 
 743      0A0B0D
 744              	
 745 05cb 00       	  .p2align 2
 746              	token_ofs:
 747 05cc 0000     	  .hword  0 // not found
 748              	  // TK_COMMA...TK_EQUAL , 13 
 749 05ce 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
ARM GAS  tinyBasic.s 			page 28


 749      01000100 
 750 05d6 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 750      01000100 
 751 05de 01000100 	  .hword  (single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2,(single-tok_idx0)/2
 751      01000100 
 752 05e6 0100     	  .hword  (single-tok_idx0)/2    
 753              	  // '<','>'
 754 05e8 05000C00 	  .hword  (lt-tok_idx0)/2,(gt-tok_idx0)/2
 755              	  // '\'
 756 05ec 1E00     	  .hword  (bkslash-tok_idx0)/2
 757              	  // '?' 
 758 05ee 2900     	  .hword  (prt_cmd-tok_idx0)/2 
 759              	  // "'"  
 760 05f0 3C00     	  .hword  (tick-tok_idx0)/2 
 761              	  // '"' quote 
 762 05f2 3200     	  .hword (quote-tok_idx0)/2
 763              	
 764              	  .p2align 2
 765              	
 766              	/****************************
 767              	    comp_label
 768              	    compile a label 
 769              	    it can be a target|keyword|
 770              	    variable| user constant  
 771              	    label form: [A..Z]+
 772              	    input:
 773              	      *buffer 
 774              	    output:
 775              	      r0  token type 
 776              	      r1  token value 
 777              	      T2  updated 
 778              	      R3  updated
 779              	    use:
 780              	****************************/
 781              	    _FUNC comp_label
 782 05f4 24B4     	    push {r2,r5}
 783 05f6 4DF8049D 	    push {T2}
 784 05fa 82EA0202 	    eor r2,r2
 785 05fe 4FF00605 	    mov r5,#6 
 786 0602 18F80300 	0:  ldrb r0,[T1,r3]
 787 0606 5F28     	    cmp r0,#'_'
 788 0608 0AD0     	    beq 2f
 789 060a 00B500F0 	1:  _CALL is_letter 
 789      DAF85DF8 
 789      04EB
 790 0614 09D1     	    bne 3f // not letter 
 791 0616 00B500F0 	    _CALL upper 
 791      ACF85DF8 
 791      04EB
 792 0620 09F8010B 	2:  strb r0,[T2],#1
 793 0624 03F10103 	    add r3,#1
 794 0628 EBE7     	    b 0b 
 795 062a 80EA0000 	3:  eor r0,r0 
 796 062e 89F80000 	    strb r0,[T2]
 797              	// is this a variable ?
 798 0632 5DF8049B 	    pop {T2}
 799 0636 99F80100 	    ldrb r0,[T2,#1]
ARM GAS  tinyBasic.s 			page 29


 800 063a 30B9     	    cbnz r0,3f // length >1 not variable 
 801 063c 99F80010 	    ldrb r1,[T2]
 802 0640 A1F14101 	    sub r1,#'A' 
 803 0644 4FF01400 	    mov r0,#TK_VAR
 804 0648 1CE0     	    b 8f 
 805              	3:  // try keyword 
 806 064a 4846     	    mov r0,T2 
 807 064c DFF8781B 	    ldr r1,=kword_dict  
 808 0650 00B500F0 	    _CALL search_dict 
 808      C5FA5DF8 
 808      04EB
 809 065a 30B1     	    cbz r0,4f
 810 065c 1828     	    cmp r0,TK_SCONST  
 811 065e 11D1     	    bne 8f
 812              	    //system constant  
 813 0660 09F8010B 	    strb r0,[T2],#1
 814 0664 49F8041B 	    str r1,[T2],#4
 815 0668 10E0     	    b 9f 
 816              	4: // must be a label 
 817 066a 4846     	    mov r0,T2 
 818 066c 00B500F0 	    _CALL compress_label
 818      0FF85DF8 
 818      04EB
 819 0676 4FF01A00 	    mov r0,#TK_LABEL
 820 067a 09F8010B 	    strb r0,[T2],#1
 821 067e 49F8041B 	    str r1,[T2],#4
 822 0682 03E0     	    b 9f 
 823 0684 09F8010B 	8:  strb r0,[T2],#1
 824 0688 09F8011B 	    strb r1,[T2],#1          
 825 068c 24BC     	9:  pop {r2,r5}
 826 068e 7047     	    _RET 
 827              	
 828              	/********************************
 829              	    compress_label 
 830              	    compress label in integer 
 831              	    maximum 6 character, 
 832              	    ignore extras characters 
 833              	    input:
 834              	      r0  *label 
 835              	    output:
 836              	      r1   compressed label 
 837              	********************************/
 838              	    _FUNC compress_label
 839 0690 0CB4     	    push {r2,r3}
 840 0692 82EA0202 	    eor r2,r2 // compress value
 841 0696 4FF00603 	    mov r3,#6 // max characters 
 842 069a 10F8011B 	1:  ldrb r1,[r0],#1 
 843 069e 51B1     	    cbz r1,3f
 844 06a0 5F29     	    cmp r1,#'_'
 845 06a2 01D1     	    bne 2f 
 846 06a4 A1F10401 	    sub r1,#4  
 847 06a8 A1F14001 	2:  sub r1,#'@'
 848 06ac 4FEA4212 	    lsl r2,#5
 849 06b0 0A44     	    add r2,r1
 850 06b2 013B     	    subs r3,#1 
 851 06b4 F1D1     	    bne 1b 
 852 06b6 1146     	3:  mov r1,r2     
ARM GAS  tinyBasic.s 			page 30


 853 06b8 0CBC     	    pop {r2,r3}
 854 06ba 7047     	    _RET 
 855              	
 856              	
 857              	/****************************
 858              	    parse_int 
 859              	    parse an integer from text
 860              	    if not valid integer 
 861              	    r1 return *buffer else 
 862              	    *buffer is incremented after integer 
 863              	  input:
 864              	    r0   *buffer 
 865              	  output:
 866              	    r0   TK_INTGR|TK_NONE
 867              	    r1   int|0   
 868              	  use:
 869              	    r3   tib index updated     
 870              	*****************************/
 871              	    _FUNC parse_int 
 872 06bc 4FF00A01 	    mov r1,#10 // default base 
 873 06c0 18F80300 	    ldrb r0,[T1,r3]
 874 06c4 2428     	    cmp r0,'$' 
 875 06c6 02D1     	    bne 2f 
 876 06c8 4FF01001 	    mov r1,#16 // hexadecimal number 
 877 06cc 03E0     	    b 3f  
 878 06ce 2628     	2:  cmp r0,#'&' 
 879 06d0 03D1     	    bne 4f
 880 06d2 4FF00201 	    mov r1,#2 //binary number  
 881 06d6 03F10103 	3:  add r3,#1
 882 06da 03EB0800 	4:  add r0,r3,T1 
 883 06de 00B5FFF7 	    _CALL atoi 
 883      FEFF5DF8 
 883      04EB
 884 06e8 10B1     	    cbz r0,9f
 885 06ea 0344     	    add r3,r0
 886 06ec 4FF01B00 	    mov r0,#TK_INTGR
 887 06f0 0040     	9:  ands r0,r0   
 888 06f2 7047     	    _RET 
 889              	
 890              	/*********************************************
 891              	    parse_quote 
 892              	    parse quoted string 
 893              	    input: 
 894              	      r3 		tib index  
 895              	      T1    tib adr
 896              	      T2    insert point in pad  
 897              	    output:
 898              	      r0     token attribute 
 899              	      r1 		*str 
 900              	      r3     tib index updated    
 901              	      T2     updated 
 902              	      use:
 903              	*********************************************/
 904              	    _FUNC parse_quote
 905 06f4 4DF8049D 	    push {T2} 
 906 06f8 18F80300 	1:  ldrb r0,[T1,r3]
 907 06fc 03F10103 	    add r3,#1 
ARM GAS  tinyBasic.s 			page 31


 908 0700 2228     	    cmp r0,#'"'
 909 0702 09D0     	    beq 9f 
 910 0704 5C28     	    cmp r0,#'\\'
 911 0706 04D1     	    bne 2f 
 912 0708 00B500F0 	    _CALL get_escaped_char 
 912      0DF85DF8 
 912      04EB
 913 0712 09F8010B 	2:  strb r0,[T2],#1
 914 0716 EFE7     	    b 1b 
 915 0718 80EA0000 	9:  eor  r0,r0
 916 071c 09F8010B 	    strb r0,[T2],#1
 917 0720 4FF01C00 	    mov r0,#TK_QSTR
 918 0724 02BC     	    pop {r1}
 919 0726 7047     	    _RET 
 920              	
 921              	/**********************************************
 922              	    get_escaped_char 
 923              	    convert "\c" in quoted string 
 924              	    input:
 925              	      r0 
 926              	      r3   index 
 927              	      T1   tib 
 928              	    output:
 929              	      r0   replacement char
 930              	      r3   updated 
 931              	    use:
 932              	      r1   *table 
 933              	      r2   temp 
 934              	**********************************************/
 935              	    _FUNC get_escaped_char 
 936 0728 06B4     	    push {r1,r2}
 937 072a 18F80300 	    ldrb r0,[T1,r3]
 938 072e 03F10103 	    add r3,#1
 939 0732 2228     	    cmp r0,#'"' 
 940 0734 0BD0     	    beq 9f 
 941 0736 DFF8941A 	1:  ldr r1,=escaped 
 942 073a 11F8012B 	2:  ldrb r2,[r1],#1
 943 073e 12B1     	    cbz r2,6f 
 944 0740 8242     	    cmp r2,r0 
 945 0742 02D0     	    beq 7f 
 946 0744 F9E7     	    b 2b
 947 0746 A0F10702 	6:  sub r2,r0,#7     
 948 074a 02F10700 	7:  add r0,r2,#7
 949 074e 06BC     	9:  pop {r1,r2}   
 950 0750 7047     	    _RET
 951              	
 952 0752 6162746E 	escaped: .asciz "abtnvfr"
 952      76667200 
 953              	
 954              	/*********************************************
 955              	   skip character in TIB 
 956              	   input:
 957              	      r0    character to skip 
 958              	      r3    tib index 
 959              	      T1    tib adr
 960              	    output: 
 961              	      r3    updated
ARM GAS  tinyBasic.s 			page 32


 962              	    use:
 963              	      r1     
 964              	**********************************************/   
 965 075a 00BF     	    _FUNC skip
 966 075c 02B4     	    push {r1} 
 967 075e 18F80310 	1:  ldrb r1,[T1,r3]
 968 0762 8142     	    cmp r1,r0
 969 0764 02D1     	    bne 2f
 970 0766 03F10103 	    add r3,#1 
 971 076a F8E7     	    b 1b 
 972 076c 2360     	2:  str r3,[UPP,#IN_SAVED]
 973 076e 02BC     	    pop {r1}
 974 0770 7047     	    _RET
 975              	
 976              	/********************************************
 977              	    upper
 978              	    convert character in upper case 
 979              	    input: 
 980              	      r0   character 
 981              	    output:
 982              	      r0   upper case character 
 983              	*********************************************/
 984 0772 00BF     	    _FUNC upper 
 985 0774 6128     	    cmp r0,#'a' 
 986 0776 03DB     	    blt 9f 
 987 0778 7A28     	    cmp r0,#'z' 
 988 077a 01DC     	    bgt 9f 
 989 077c 00F05F00 	    and r0,#0x5f 
 990 0780 7047     	9:  _RET 
 991              	
 992              	/***************************************
 993              	   is_digit 
 994              	   check if char is decimal digit.
 995              	   convert to decimal digit.
 996              	   input:
 997              	      r0    char 
 998              	   output:
 999              	      r0        if Z then converted digit else not changed
 1000              	      Z flag    1 true | 0 false  
 1001              	***************************************/
 1002 0782 00BF     	    _GBL_FUNC is_digit 
 1003 0784 02B4     	    push {r1} 
 1004 0786 4FF0FF31 	    mov r1,#-1   
 1005 078a 3028     	    cmp r0,#'0' 
 1006 078c 05DB     	    blt 9f
 1007 078e 3A28     	    cmp r0,'9'+1
 1008 0790 03D5     	    bpl 9f 
 1009 0792 81EA0101 	    eor r1,r1 
 1010 0796 A0F13000 	    sub r0,#'0'  
 1011              	9:   
 1012 079a 0940     	    ands r1,r1
 1013 079c 02BC     	    pop {r1} 
 1014 079e 7047     	    _RET 
 1015              	
 1016              	/***************************************
 1017              	    is_hex 
 1018              	    check for hexadecimal digit 
ARM GAS  tinyBasic.s 			page 33


 1019              	    convert to hex digit.
 1020              	    input:
 1021              	      r0    
 1022              	    output:
 1023              	      r0         if Z then converted digit 
 1024              	      Z  flag    1 true | 0 false         
 1025              	***************************************/
 1026              	    _FUNC is_hex 
 1027 07a0 02B4     	    push {r1}
 1028 07a2 80EA0000 	    eor r0,r0 
 1029 07a6 4128     	    cmp r0,#'A' 
 1030 07a8 01D4     	    bmi 1f 
 1031 07aa A0F10700 	    sub r0,#7 
 1032 07ae A0F13000 	1:  sub r0,#'0'
 1033 07b2 01D4     	    bmi 2f 
 1034 07b4 1028     	    cmp r0,#16
 1035 07b6 01D4     	    bmi 9f 
 1036 07b8 6FEA0101 	2:  mvn r1,r1  
 1037 07bc 0940     	9:  ands r1,r1 
 1038 07be 02BC     	    pop {r1}
 1039 07c0 7047     	    _RET 
 1040              	
 1041              	/***************************************
 1042              	    is_letter 
 1043              	    check if character is {a..z,A..Z,_} 
 1044              	  input:
 1045              	    r0   character 
 1046              	  output: 
 1047              	    r0       same character 
 1048              	    Z flag   1 true | 0 false  
 1049              	****************************************/
 1050 07c2 00BF     	    _FUNC is_letter
 1051 07c4 02B4     	    push {r1} 
 1052 07c6 81EA0101 	    eor r1,r1 
 1053 07ca 4128     	    cmp r0,#'A' 
 1054 07cc 05D4     	    bmi 8f 
 1055 07ce 5B28     	    cmp r0,#'Z'+1 
 1056 07d0 05D4     	    bmi 9f
 1057 07d2 6128     	    cmp r0,#'a' 
 1058 07d4 01D4     	    bmi 8f 
 1059 07d6 7B28     	    cmp r0,#'z'+1
 1060 07d8 01D4     	    bmi 9f  
 1061 07da 6FEA0101 	8:  mvn r1,r1  
 1062 07de 0940     	9:  ands r1,r1 
 1063 07e0 02BC     	    pop {r1}
 1064 07e2 7047     	    _RET 
 1065              	
 1066              	
 1067              	/******************************************
 1068              	    atoi 
 1069              	    convert ascii to integer 
 1070              	    input:
 1071              	      r0   *buffer 
 1072              	      r1   base 
 1073              	    output:
 1074              	      r0   0 no integer found 
 1075              	      r1   integer
ARM GAS  tinyBasic.s 			page 34


 1076              	    use:
 1077              	      r2   base  
 1078              	      T1   *buffer 
 1079              	      T2   digit count  
 1080              	******************************************/
 1081              	    _GBL_FUNC atoi 
 1082 07e4 2DE90403 	    push {r2,T1,T2}
 1083 07e8 8046     	    mov T1,r0  // *buffer 
 1084 07ea 0A46     	    mov r2,r1  // base  
 1085 07ec 81EA0101 	    eor r1,r1  // converted integer 
 1086 07f0 89EA0909 	    eor T2,T2  // digit count 
 1087 07f4 18F8010B 	1:  ldrb r0,[T1],#1
 1088 07f8 00B5FFF7 	    _CALL upper 
 1088      BBFF5DF8 
 1088      04EB
 1089 0802 3028     	    cmp r0,#'0'
 1090 0804 0FD4     	    bmi 8f
 1091 0806 3A28     	    cmp r0,#'9'+1 
 1092 0808 03D4     	    bmi 2f 
 1093 080a 4128     	    cmp r0,#'A'
 1094 080c 0BD4     	    bmi 8f 
 1095 080e A0F10700 	    sub r0,#7 
 1096 0812 A0F13000 	2:  sub r0,#'0' 
 1097 0816 9042     	    cmp r0,r2
 1098 0818 05D5     	    bpl 8f  
 1099 081a 02FB01F1 	    mul r1,r2 
 1100 081e 0144     	    add r1,r0
 1101 0820 09F10109 	    add T2,#1
 1102 0824 E6E7     	    b 1b 
 1103 0826 4846     	8:  mov r0,T2  
 1104 0828 BDE80403 	    pop {r2,T1,T2}
 1105 082c 7047     	    _RET 
 1106              	
 1107              	
 1108              	
 1109              	/*******************
 1110              	    DECOMPILER 
 1111              	*******************/
 1112              	
 1113              	/********************************************
 1114              	    cmd_name 
 1115              	    search bytecode in dictionary and 
 1116              	    return its name 
 1117              	  input:
 1118              	    r0    token type 
 1119              	    r1    keyword bytecode 
 1120              	  ouput:
 1121              	    r0    name string 
 1122              	  use:
 1123              	    T1    link 
 1124              	    T2    tmp 
 1125              	*********************************************/
 1126 082e 00BF     	    _FUNC cmd_name 
 1127 0830 2DE90003 	    push {T1,T2}
 1128 0834 DFF89089 	    ldr T1,=kword_dict 
 1129 0838 58F8049C 	1:  ldr T2,[T1,#-4]
 1130 083c 8145     	    cmp T2,r0 
ARM GAS  tinyBasic.s 			page 35


 1131 083e 03D1     	    bne 3f 
 1132 0840 58F8089C 	    ldr T2,[T1,#-8]
 1133 0844 8945     	    cmp T2,r1 
 1134 0846 04D0     	    beq 2f 
 1135 0848 58F80C8C 	3:  ldr T1,[T1,#-12]
 1136 084c B8F1000F 	    cmp T1,#0
 1137 0850 F2D1     	    bne 1b  
 1138 0852 4046     	2:  mov r0,T1 
 1139 0854 BDE80003 	    pop {T1,T2}
 1140 0858 7047     	    _RET
 1141              	
 1142              	/*****************************
 1143              	  decompile_line 
 1144              	  detokenize BASIC line 
 1145              	  input:
 1146              	    r0  *token list 
 1147              	    r1  *output buffer 
 1148              	  output:
 1149              	    r0  *output buffer (.asciz) 
 1150              	  use:
 1151              	    T1  *output buffer
 1152              	    BPTR  *token list
 1153              	    IN  offset in token list  
 1154              	******************************/
 1155 085a 00BF     	    _GBL_FUNC decompile_line
 1156 085c 2DE90E01 	    push {r1,r2,r3,T1} 
 1157 0860 8346     	    mov BPTR,r0 
 1158 0862 4FF0000A 	    mov IN,#0
 1159 0866 8846     	    mov T1,r1 
 1160 0868 3BF80A00 	    ldrh r0,[BPTR,IN]
 1161 086c 0AF1020A 	    add IN,#2 
 1162 0870 4FF00A01 	    mov r1,#10 
 1163 0874 00B5FFF7 	    _CALL itoa
 1163      FEFF5DF8 
 1163      04EB
 1164 087e 4146     	    mov r1,T1
 1165 0880 00B5FFF7 	    _CALL strcpy
 1165      FEFF5DF8 
 1165      04EB
 1166 088a 4046     	    mov r0,T1 
 1167 088c 00B5FFF7 	    _CALL strlen
 1167      FEFF5DF8 
 1167      04EB
 1168 0896 8044     	    add T1,r0 
 1169 0898 1BF80A00 	    ldrb r0,[BPTR,IN]    
 1170 089c 0AF1010A 	    add IN,#1 
 1171 08a0 6060     	    str r0,[UPP,#COUNT]
 1172              	decomp_loop:
 1173 08a2 00B500F0 	    _CALL next_token
 1173      D6FA5DF8 
 1173      04EB
 1174 08ac 0028     	    cmp r0,#TK_NONE 
 1175 08ae 00F0AD80 	    beq 9f
 1176 08b2 1028     	    cmp r0,#TK_GE 
 1177 08b4 05D5     	    bpl 1f 
 1178 08b6 DFF81819 	    ldr r1,=single_char 
 1179 08ba 085C     	    ldrb r0,[r1,r0]
ARM GAS  tinyBasic.s 			page 36


 1180 08bc 08F8010B 	    strb r0,[T1],#1 
 1181 08c0 EFE7     	    b decomp_loop
 1182              	1: 
 1183 08c2 1328     	    cmp r0,#TK_CHAR  
 1184 08c4 14D5     	    bpl 2f 
 1185 08c6 A0F11000 	    sub r0,#TK_GE
 1186 08ca 4FEA8000 	    lsl r0,#2 
 1187 08ce DFF80419 	    ldr r1,=relop_str 
 1188 08d2 0858     	    ldr r0,[r1,r0]
 1189 08d4 4146     	    mov r1,T1 
 1190 08d6 00B5FFF7 	    _CALL strcpy 
 1190      FEFF5DF8 
 1190      04EB
 1191 08e0 4046     	    mov r0,T1 
 1192 08e2 00B5FFF7 	    _CALL strlen 
 1192      FEFF5DF8 
 1192      04EB
 1193 08ec 8044     	    add T1,r0 
 1194 08ee D8E7     	    b decomp_loop
 1195 08f0 1328     	2:  cmp r0,#TK_CHAR 
 1196 08f2 06D1     	    bne 3f 
 1197 08f4 4FF05C00 	    mov r0,#'\\'
 1198 08f8 08F8010B 	    strb r0,[T1],#1
 1199 08fc 08F8011B 	    strb r1,[T1],#1
 1200              	//    mov r0,#SPACE 
 1201              	//    strb r0,[T1],#1
 1202 0900 CFE7     	    b decomp_loop 
 1203 0902 1428     	3:  cmp r0,#TK_VAR 
 1204 0904 08D1     	    bne 4f 
 1205 0906 01F14100 	    add r0,r1,'A'
 1206 090a 08F8010B 	    strb r0,[T1],#1 
 1207 090e 4FF02000 	    mov r0,#SPACE 
 1208 0912 08F8010B 	    strb r0,[T1],#1
 1209 0916 C4E7     	    b decomp_loop 
 1210 0918 1A28     	4:  cmp r0,#TK_LABEL 
 1211 091a 2BD5     	    bpl 5f   
 1212 091c 03B4     	    push {r0,r1}
 1213              	//    mov r0,r1 
 1214 091e 00B5FFF7 	    _CALL cmd_name
 1214      86FF5DF8 
 1214      04EB
 1215 0928 4146     	    mov r1,T1 
 1216 092a 00B5FFF7 	    _CALL strcpy 
 1216      FEFF5DF8 
 1216      04EB
 1217 0934 4046     	    mov r0,T1 
 1218 0936 00B5FFF7 	    _CALL strlen 
 1218      FEFF5DF8 
 1218      04EB
 1219 0940 8044     	    add T1,r0
 1220 0942 03BC     	    pop {r0,r1}
 1221 0944 4FF02000 	    mov r0,#SPACE 
 1222 0948 08F8010B 	    strb r0,[T1],#1 
 1223 094c 3C29     	    cmp r1,#REM_IDX
 1224 094e A8D1     	    bne decomp_loop 
 1225 0950 0BEB0A00 	    add r0,BPTR,IN
 1226 0954 4146     	    mov r1,T1   
ARM GAS  tinyBasic.s 			page 37


 1227 0956 00B5FFF7 	    _CALL strcpy
 1227      FEFF5DF8 
 1227      04EB
 1228 0960 4046     	    mov r0,T1 
 1229 0962 00B5FFF7 	    _CALL strlen
 1229      FEFF5DF8 
 1229      04EB
 1230 096c 8044     	    add T1,r0
 1231 096e D4F804A0 	    ldr IN,[UPP,#COUNT]
 1232 0972 4BE0     	    b 9f 
 1233 0974 1B28     	5:  cmp r0,#TK_INTGR
 1234 0976 14D1     	    bne 6f  
 1235 0978 0846     	    mov r0,r1 
 1236 097a A169     	    ldr r1,[UPP,#BASE]
 1237 097c 00B5FFF7 	    _CALL itoa
 1237      FEFF5DF8 
 1237      04EB
 1238 0986 4146     	    mov r1,T1 
 1239 0988 00B5FFF7 	    _CALL strcpy
 1239      FEFF5DF8 
 1239      04EB
 1240 0992 4046     	    mov r0,T1 
 1241 0994 00B5FFF7 	    _CALL strlen
 1241      FEFF5DF8 
 1241      04EB
 1242 099e 8044     	    add T1,r0 
 1243 09a0 7FE7     	    b decomp_loop 
 1244 09a2 1A28     	6:  cmp r0,#TK_LABEL
 1245 09a4 1BD1     	    bne 7f
 1246 09a6 4FF01902 	    mov r2,#25
 1247 09aa 4FF6FF73 	    mov r3,#0xffff 
 1248 09ae C3F6FF73 	    movt r3,#0x3fff 
 1249 09b2 01EA0301 	0:  and r1,r3 
 1250 09b6 4FEA5313 	    lsr r3,#5 
 1251 09ba 31FA02F0 	    lsrs r0,r1,r2 
 1252 09be 07D0     	    beq 2f
 1253 09c0 00F14000 	    add r0,#'@'
 1254 09c4 5B28     	    cmp r0,#'['
 1255 09c6 01D1     	    bne 1f
 1256 09c8 00F10400 	    add r0,#4 
 1257 09cc 08F8010B 	1:  strb r0,[T1],#1
 1258 09d0 053A     	2:  subs r2,#5 
 1259 09d2 EEDA     	    bge 0b
 1260 09d4 4FF02000 	    mov r0,#SPACE 
 1261 09d8 08F8010B 	    strb r0,[T1],#1  
 1262 09dc 61E7     	    b decomp_loop
 1263 09de 4FF02200 	7:  mov r0,#'"'
 1264 09e2 08F8010B 	    strb r0,[T1],#1 
 1265 09e6 0846     	    mov r0,r1
 1266 09e8 4146     	    mov r1,T1  
 1267 09ea 00B5FFF7 	    _CALL strcpy
 1267      FEFF5DF8 
 1267      04EB
 1268 09f4 4046     	    mov r0,T1 
 1269 09f6 00B5FFF7 	    _CALL strlen 
 1269      FEFF5DF8 
 1269      04EB
ARM GAS  tinyBasic.s 			page 38


 1270 0a00 8044     	    add T1,r0 
 1271 0a02 4FF02200 	    mov r0,#'"'
 1272 0a06 08F8010B 	    strb r0,[T1],#1 
 1273 0a0a 4AE7     	    b decomp_loop
 1274 0a0c 80EA0000 	9:  eor r0,r0 
 1275 0a10 88F80000 	    strb r0,[T1]
 1276 0a14 BDE80E01 	    pop {r1,r2,r3,T1}
 1277 0a18 0846     	    mov r0,r1 
 1278 0a1a 7047     	    _RET 
 1279              	
 1280 0a1c 280A0000 	relop_str: .word ge_str,le_str,ne_str 
 1280      2B0A0000 
 1280      2E0A0000 
 1281 0a28 3E3D00   	ge_str: .asciz ">="
 1282 0a2b 3C3D00   	le_str: .asciz "<="
 1283 0a2e 3C3E00   	ne_str: .asciz "<>"
 1284              	
 1285              	single_char:
 1286 0a31 003A2C3B 	  .byte 0, ':', ',', ';', '#', '(', ')', '+' , '-', '*', '/', '%'
 1286      2328292B 
 1286      2D2A2F25 
 1287 0a3d 403D3E3C 	  .byte '@','=', '>', '<' 
 1288              	
 1289              	
 1290              	
 1291              	
 1292              	/**********************************
 1293              	  modulo 
 1294              	  compute r0 mod r1
 1295              	  input:
 1296              	    r0   dividend
 1297              	    r1   divisor 
 1298              	  output:
 1299              	    r0   TK_INTGR 
 1300              	    r1   r0 mod r1 
 1301              	*********************************/
 1302 0a41 0000BF   	    _GBL_FUNC modulo 
 1303 0a44 01B4     	    push {r0}
 1304 0a46 B0FBF1F0 	    udiv r0,r1 
 1305 0a4a 01FB00F0 	    mul  r0,r1 
 1306 0a4e 02BC     	    pop {r1}
 1307 0a50 A1EB0001 	    sub r1,r0
 1308 0a54 4FF01B00 	    mov r0,#TK_INTGR
 1309 0a58 7047     	    _RET 
 1310              	
 1311              	/**********************************
 1312              	      BASIC commands 
 1313              	**********************************/
 1314              	
 1315              	/*********************************
 1316              	    syntax_error 
 1317              	    display syntax error message and 
 1318              	    abort program 
 1319              	  input:
 1320              	    none  
 1321              	  output: 
 1322              	    none 
ARM GAS  tinyBasic.s 			page 39


 1323              	  use:
 1324              	*********************************/
 1325 0a5a 00BF     	    _FUNC syntax_error 
 1326 0a5c 4FF00200 	    mov r0,#ERR_SYNTAX
 1327 0a60 00E0     	    b tb_error 
 1328              	
 1329              	/*********************************
 1330              	    tb_error 
 1331              	    display BASIC error and 
 1332              	    abort program. 
 1333              	  input:
 1334              	    r0    error code   
 1335              	  output: 
 1336              	    none 
 1337              	  use:
 1338              	    r1    temp 
 1339              	*********************************/
 1340 0a62 00BF     	    _FUNC tb_error 
 1341 0a64 216C     	    ldr r1,[UPP,#FLAGS]
 1342 0a66 11F0200F 	    tst r1,#FCOMP
 1343 0a6a 43D1     	    bne compile_error
 1344              	rt_error:
 1345 0a6c 5246     	    mov r2,IN 
 1346 0a6e 01B4     	    push {r0}
 1347 0a70 DFF86407 	    ldr r0,=rt_error_msg 
 1348 0a74 00B5FFF7 	    _CALL uart_puts 
 1348      FEFF5DF8 
 1348      04EB
 1349 0a7e 01BC     	    pop {r0}
 1350 0a80 DFF85817 	    ldr r1,=err_msg  
 1351 0a84 4FEA8000 	    lsl r0,#2 
 1352 0a88 0858     	    ldr r0,[r1,r0]
 1353 0a8a 00B5FFF7 	    _CALL uart_puts
 1353      FEFF5DF8 
 1353      04EB
 1354              	// decompile and print faulty line      
 1355 0a94 5846     	    mov r0,BPTR
 1356 0a96 5246     	    mov r2,IN  
 1357 0a98 DFF81413 	    ldr r1,pad 
 1358 0a9c 00B5FFF7 	    _CALL decompile_line
 1358      FEFF5DF8 
 1358      04EB
 1359 0aa6 00B5FFF7 	    _CALL uart_puts 
 1359      FEFF5DF8 
 1359      04EB
 1360 0ab0 00B5FFF7 	    _CALL cr 
 1360      FEFF5DF8 
 1360      04EB
 1361              	// print error offset on line      
 1362 0aba DFF82407 	    ldr r0,=token_at_msg 
 1363 0abe 00B5FFF7 	    _CALL uart_puts 
 1363      FEFF5DF8 
 1363      04EB
 1364 0ac8 1046     	    mov r0,r2 
 1365 0aca 4FF01001 	    mov r1,#16 
 1366 0ace 00B5FFF7 	    _CALL print_int
 1366      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 40


 1366      04EB
 1367 0ad8 00B5FFF7 	    _CALL cr
 1367      FEFF5DF8 
 1367      04EB
 1368              	// dump tokenize line 
 1369 0ae2 5846     	    mov r0,BPTR
 1370 0ae4 8278     	    ldrb r2,[r0,#2]
 1371 0ae6 00B500F0 	    _CALL dump01 
 1371      2CFA5DF8 
 1371      04EB
 1372 0af0 FFF7FEBF 	    b warm_start 
 1373              	compile_error:
 1374 0af4 DFF8E416 	    ldr r1,=err_msg 
 1375 0af8 4FEA8000 	    lsl r0,#2 
 1376 0afc 0858     	    ldr r0,[r1,r0]
 1377 0afe 00B5FFF7 	    _CALL uart_puts
 1377      FEFF5DF8 
 1377      04EB
 1378 0b08 A068     	    ldr r0,[UPP,#BASICPTR]
 1379 0b0a 00B5FFF7 	    _CALL uart_puts
 1379      FEFF5DF8 
 1379      04EB
 1380 0b14 00B5FFF7 	    _CALL cr
 1380      FEFF5DF8 
 1380      04EB
 1381 0b1e 2068     	    ldr r0,[UPP,#IN_SAVED]
 1382 0b20 00B5FFF7 	    _CALL spaces 
 1382      FEFF5DF8 
 1382      04EB
 1383 0b2a 4FF05E00 	    mov r0,#'^' 
 1384 0b2e 00B5FFF7 	    _CALL uart_putc
 1384      FEFF5DF8 
 1384      04EB
 1385 0b38 00B5FFF7 	    _CALL cr
 1385      FEFF5DF8 
 1385      04EB
 1386 0b42 FFF7FEBF 	    b  warm_start  
 1387              	    
 1388 0b46 0A52756E 	rt_error_msg: .asciz "\nRuntime error: "
 1388      74696D65 
 1388      20657272 
 1388      6F723A20 
 1388      00
 1389 0b57 746F6B65 	token_at_msg: .asciz "token offset: "
 1389      6E206F66 
 1389      66736574 
 1389      3A2000
 1390              	
 1391              	
 1392              	err_msg:
 1393 0b66 00000000 		.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
 1393      00000000 
 1393      0D000000 
 1393      1B000000 
 1393      34000000 
 1394 0b7e 59000000 		.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
 1394      6F000000 
ARM GAS  tinyBasic.s 			page 41


 1394      89000000 
 1394      9A000000 
 1394      AB000000 
 1395 0b92 B7000000 		.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
 1395      EA000000 
 1395      FA000000 
 1395      0E010000 
 1395      21010000 
 1396 0ba6 2E010000 	   .word err_cant_prog 
 1397              	
 1398              	    .section .rodata.tb_error 
 1399              	
 1400 0000 4D656D6F 	err_mem_full: .asciz "Memory full\n" 
 1400      72792066 
 1400      756C6C0A 
 1400      00
 1401 000d 73796E74 	err_syntax: .asciz "syntax error\n" 
 1401      61782065 
 1401      72726F72 
 1401      0A00
 1402 001b 6D617468 	err_math_ovf: .asciz "math operation overflow\n"
 1402      206F7065 
 1402      72617469 
 1402      6F6E206F 
 1402      76657266 
 1403 0034 64697669 	err_div0: .asciz "division by 0\n" 
 1403      73696F6E 
 1403      20627920 
 1403      300A00
 1404 0043 696E7661 	err_no_line: .asciz "invalid line number.\n"
 1404      6C696420 
 1404      6C696E65 
 1404      206E756D 
 1404      6265722E 
 1405 0059 72756E20 	err_run_only: .asciz "run time only usage.\n" 
 1405      74696D65 
 1405      206F6E6C 
 1405      79207573 
 1405      6167652E 
 1406 006f 636F6D6D 	err_cmd_only: .asciz "command line only usage.\n"
 1406      616E6420 
 1406      6C696E65 
 1406      206F6E6C 
 1406      79207573 
 1407 0089 6475706C 	err_duplicate: .asciz "duplicate name.\n"
 1407      69636174 
 1407      65206E61 
 1407      6D652E0A 
 1407      00
 1408 009a 46696C65 	err_not_file: .asciz "File not found.\n"
 1408      206E6F74 
 1408      20666F75 
 1408      6E642E0A 
 1408      00
 1409 00ab 62616420 	err_bad_value: .asciz "bad value.\n"
 1409      76616C75 
 1409      652E0A00 
ARM GAS  tinyBasic.s 			page 42


 1410 00b7 46696C65 	err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
 1410      20696E20 
 1410      65787465 
 1410      6E646564 
 1410      206D656D 
 1411 00ea 4E6F2064 	err_no_data: .asciz "No data found.\n"
 1411      61746120 
 1411      666F756E 
 1411      642E0A00 
 1412 00fa 4E6F2070 	err_no_prog: .asciz "No program in RAM!\n"
 1412      726F6772 
 1412      616D2069 
 1412      6E205241 
 1412      4D210A00 
 1413 010e 46696C65 	err_no_fspace: .asciz "File system full.\n" 
 1413      20737973 
 1413      74656D20 
 1413      66756C6C 
 1413      2E0A00
 1414 0121 42756666 	err_buf_full: .asciz "Buffer full\n"
 1414      65722066 
 1414      756C6C0A 
 1414      00
 1415 012e 43616E27 	err_cant_prog: .asciz "Can't modify program in STOP mode. Use END command before.\n" 
 1415      74206D6F 
 1415      64696679 
 1415      2070726F 
 1415      6772616D 
 1416              	
 1417 016a 0A72756E 	rt_msg: .asciz "\nrun time error, "
 1417      2074696D 
 1417      65206572 
 1417      726F722C 
 1417      2000
 1418 017c 0A636F6D 	comp_msg: .asciz "\ncompile error, "
 1418      70696C65 
 1418      20657272 
 1418      6F722C20 
 1418      00
 1419 018d 6C617374 	tk_id: .asciz "last token id: "
 1419      20746F6B 
 1419      656E2069 
 1419      643A2000 
 1420              	
 1421              	
 1422              	    .section  .text , "ax", %progbits 
 1423              	
 1424              	/*********************************
 1425              	   skip_line 
 1426              	   data and remark line are skipped
 1427              	   by the interpreter 
 1428              	***********************************/
 1429 0baa 00BF     	    _FUNC skip_line 
 1430 0bac D4F804A0 	    ldr IN,[UPP,#COUNT]
 1431 0bb0 7047     	    _RET 
 1432              	
 1433              	
ARM GAS  tinyBasic.s 			page 43


 1434              	/*********************************
 1435              	   BASIC: BTGL adr, mask   
 1436              	   toggle bits [adr]=[adr]^mask  
 1437              	   input:
 1438              	     r0    adr 
 1439              	     r1    mask 
 1440              	    output;
 1441              	      none 
 1442              	    use:
 1443              	      T1   temp
 1444              	      T2   temp  
 1445              	*******************************/     
 1446 0bb2 00BF     	    _FUNC BTGL 
 1447              	
 1448 0bb4 7047     	    _RET 
 1449              	
 1450              	/***************************************
 1451              	   kword_cmp
 1452              	   compare keyword to dict entry
 1453              	  input:
 1454              	    r0  keyword 
 1455              	    r1  dict entry 
 1456              	    r2  character count 
 1457              	  output:
 1458              	    r0  0 not same | -1 same 
 1459              	  use:
 1460              	    r6   result  
 1461              	    T1   char 1
 1462              	    T2   char 2
 1463              	**************************************/   
 1464 0bb6 00BF     	    _FUNC kword_cmp 
 1465 0bb8 2DE94003 	    push {r6,T1,T2}
 1466 0bbc 4FF0FF36 	    mov r6,#-1 
 1467 0bc0 4AB1     	1:  cbz r2,9f       
 1468 0bc2 10F8018B 	    ldrb T1,[r0],#1
 1469 0bc6 11F8019B 	    ldrb T2,[r1],#1
 1470 0bca A2F10102 	    sub r2,#1
 1471 0bce C845     	    cmp T1,T2
 1472 0bd0 F6D0     	    beq 1b 
 1473 0bd2 86EA0606 	    eor r6,r6  
 1474 0bd6 3046     	9:  mov r0,r6
 1475 0bd8 BDE84003 	    pop {r6,T1,T2}
 1476 0bdc 7047     	    _RET 
 1477              	
 1478              	/***********************************************
 1479              	    search_dict 
 1480              	    search keyword in dictionary
 1481              	   input:
 1482              	  	 r0   keyword 
 1483              	     r1		dictionary first name field address  
 1484              	   output:
 1485              	     r0 		token attribute 
 1486              	     r1		  cmd_index if r0!=TK_NONE  
 1487              	   use:
 1488              	     r3   length keyword 
 1489              	     T1   keyword
 1490              	     T2   link  
ARM GAS  tinyBasic.s 			page 44


 1491              	**********************************************/
 1492 0bde 00BF     	  _FUNC search_dict
 1493 0be0 2DE90C03 	  push {r2,r3,T1,T2}
 1494 0be4 8046     	  mov T1,r0 
 1495 0be6 00B5FFF7 	  _CALL strlen 
 1495      FEFF5DF8 
 1495      04EB
 1496 0bf0 0346     	  mov r3,r0  
 1497              	1:  
 1498 0bf2 8946     	   mov T2,r1  // keep for linking   
 1499 0bf4 0878     	   ldrb r0,[r1] 
 1500 0bf6 78B1     	   cbz r0,9f // null byte, end of dictionary
 1501 0bf8 4046     	   mov r0,T1
 1502 0bfa 1A46     	   mov r2,r3   
 1503 0bfc 00B5FFF7 	   _CALL kword_cmp  
 1503      DBFF5DF8 
 1503      04EB
 1504 0c06 18B9     	   cbnz r0,2f 
 1505 0c08 4946     	   mov r1,T2
 1506 0c0a 51F80C1C 	   ldr r1,[r1,#-12]
 1507 0c0e F0E7     	   b 1b   
 1508              	2: // found
 1509 0c10 59F8040C 	   ldr r0,[T2,#-4] // token attribute 
 1510 0c14 59F8081C 	   ldr r1,[T2,#-8]  // command index 
 1511 0c18 BDE80C03 	9: pop {r2,r3,T1,T2}
 1512 0c1c 7047     	   _RET 
 1513              	
 1514              	
 1515              	/**************************
 1516              	    INTERPRETER 
 1517              	*************************/
 1518              	
 1519              	/*********************************
 1520              	   cold_start 
 1521              	   initialize BASIC interpreter 
 1522              	   never leave 
 1523              	   input:
 1524              	     none 
 1525              	   output:
 1526              	    none 
 1527              	*********************************/
 1528              	  .type cold_start, %function 
 1529              	  .global cold_start 
 1530              	cold_start: 
 1531 0c1e 4FF00004 	    _MOV32 UPP,RAM_ADR 
 1531      C2F20004 
 1532 0c26 DFF85E00 	    ldr r0,src_addr 
 1533 0c2a DFF85E10 	    ldr r1,dest_addr
 1534 0c2e 0968     	    ldr r1,[r1] 
 1535 0c30 0C44     	    add UPP,r1 // system variables base address   
 1536              	// clear RAM
 1537 0c32 2046     	    mov r0,UPP  
 1538 0c34 DFF87411 	    ldr r1,tib 
 1539 0c38 82EA0202 	    eor r2,r2 
 1540 0c3c 40F8042B 	1:  str r2,[r0],#4 
 1541 0c40 8842     	    cmp r0,r1 
 1542 0c42 FBD4     	    bmi 1b 
ARM GAS  tinyBasic.s 			page 45


 1543              	//copy initialized system variables to ram 
 1544 0c44 DFF83E00 	    ldr r0,src_addr 
 1545 0c48 2146     	    mov r1,UPP 
 1546 0c4a DFF84220 	    ldr r2,sysvar_size
 1547 0c4e 00B5FFF7 	    _CALL cmove
 1547      FEFF5DF8 
 1547      04EB
 1548 0c58 00B500F0 	    _CALL prt_version
 1548      1BF85DF8 
 1548      04EB
 1549 0c62 00B500F0 	    _CALL clear_basic 
 1549      68F85DF8 
 1549      04EB
 1550 0c6c 00B5FFF7 	    _CALL search_free 
 1550      FEFF5DF8 
 1550      04EB
 1551 0c76 E062     	    str r0,[UPP,#FSFREE]
 1552 0c78 00B5FFF7 	    _CALL exec_autorun  
 1552      FEFF5DF8 
 1552      04EB
 1553 0c82 FFF7FEBF 	    b warm_start    
 1554              	src_addr:
 1555 0c86 00000000 	  .word uzero
 1556              	dest_addr:
 1557 0c8a 00000000 	  .word vectors_size
 1558 0c8e D4000000 	sysvar_size: .word ulast-uzero 
 1559              	
 1560              	/************************************
 1561              	    print firmware version 
 1562              	    input: 
 1563              	      none 
 1564              	    output:
 1565              	      none 
 1566              	    use:
 1567              	      r0 
 1568              	***********************************/
 1569 0c92 00BF     	    _FUNC prt_version 
 1570 0c94 DFF84C05 	    ldr r0,=version_msg 
 1571 0c98 00B5FFF7 	    _CALL uart_puts
 1571      FEFF5DF8 
 1571      04EB
 1572 0ca2 9FF87400 	    ldrb r0,version 
 1573 0ca6 4FEA1010 	    lsr r0,#4 
 1574 0caa 00F13000 	    add r0,#'0' 
 1575 0cae 3A28     	    cmp r0,#'9'+1 
 1576 0cb0 01D4     	    bmi 1f 
 1577 0cb2 00F10700 	    add r0,#7 
 1578              	  1:
 1579 0cb6 00B5FFF7 	    _CALL uart_putc 
 1579      FEFF5DF8 
 1579      04EB
 1580 0cc0 4FF02E00 	    mov r0,#'. 
 1581 0cc4 00B5FFF7 	    _CALL uart_putc 
 1581      FEFF5DF8 
 1581      04EB
 1582 0cce 9FF84800 	    ldrb r0,version 
 1583 0cd2 00F00F00 	    and r0,#15 
ARM GAS  tinyBasic.s 			page 46


 1584 0cd6 00F13000 	    add r0,'0' 
 1585 0cda 3A28     	    cmp r0,#'9'+1 
 1586 0cdc 01D4     	    bmi 1f 
 1587 0cde 00F10700 	    add r0,#7
 1588              	  1: 
 1589 0ce2 00B5FFF7 	    _CALL uart_putc 
 1589      FEFF5DF8 
 1589      04EB
 1590 0cec 00B5FFF7 	    _CALL cr
 1590      FEFF5DF8 
 1590      04EB
 1591 0cf6 7047     	    _RET  
 1592              	version_msg:
 1593 0cf8 0A626C75 	    .asciz "\nblue pill tiny BASIC, version "
 1593      65207069 
 1593      6C6C2074 
 1593      696E7920 
 1593      42415349 
 1594              	version:
 1595 0d18 10       	    .byte 0x10 
 1596 0d19 0000BF   	    .p2align 2 
 1597              	
 1598              	
 1599              	/*****************************
 1600              	    clear_vars 
 1601              	    initialize variables to 0
 1602              	  input:
 1603              	    none 
 1604              	  output:
 1605              	    none 
 1606              	  use:
 1607              	    r0,r1,r2 
 1608              	*****************************/
 1609              	    _FUNC clear_vars 
 1610 0d1c 07B4     	    push {r0,r1,r2}
 1611 0d1e 80EA0000 	    eor r0,r0 
 1612 0d22 04F16001 	    add r1,UPP,#VARS
 1613 0d26 4FF01A02 	    mov r2,#26
 1614 0d2a 41F8040B 	1:  str r0,[r1],#4 
 1615 0d2e 013A     	    subs r2,#1
 1616 0d30 FBD1     	    bne 1b  
 1617 0d32 07BC     	    pop {r0,r1,r2}
 1618 0d34 7047     	    _RET 
 1619              	
 1620              	/*****************************
 1621              	   clear_basic 
 1622              	   reset BASIC system variables 
 1623              	   and clear variables and RAM 
 1624              	*****************************/
 1625 0d36 00BF     	    _FUNC clear_basic
 1626 0d38 80EA0000 	  	eor r0,r0
 1627 0d3c 2064     	    str r0,[UPP,#FLAGS] 
 1628 0d3e 6060     	    str r0,[UPP,#COUNT]
 1629 0d40 2060     	    str r0,[UPP,#IN_SAVED]
 1630 0d42 A060     	    str r0,[UPP,#BASICPTR]
 1631 0d44 E060     	    str r0,[UPP,#DATAPTR]
 1632 0d46 2061     	    str r0,[UPP,#DATA]
ARM GAS  tinyBasic.s 			page 47


 1633 0d48 6061     	    str r0,[UPP,#DATALEN]
 1634 0d4a 04F1D000 	    add r0,UPP,#BASIC_START 
 1635 0d4e 00F11000 	    add r0,#16 
 1636 0d52 6FF00F01 	    mvn r1,#15
 1637 0d56 00EA0100 	    and r0,r1 
 1638 0d5a 2063     	    str r0,[UPP,#TXTBGN]
 1639 0d5c 6063     	    str r0,[UPP,#TXTEND]
 1640 0d5e C4F8D000 	    str r0,[UPP,#HERE]
 1641 0d62 00B5FFF7 	    _CALL clear_vars
 1641      DAFF5DF8 
 1641      04EB
 1642 0d6c 206B     	    ldr r0,[UPP,#TXTBGN]
 1643 0d6e DFF83C10 	    ldr r1,tib 
 1644 0d72 82EA0202 	    eor r2,r2 
 1645 0d76 40F8042B 	1:  str r2,[r0],#4
 1646 0d7a 8842     	    cmp r0,r1 
 1647 0d7c FBD4     	    bmi 1b 
 1648 0d7e 7047     	    _RET  
 1649              	
 1650              	/***********************************
 1651              	   warm_init 
 1652              	   initialize interpreter context 
 1653              	  input:
 1654              	    none
 1655              	  output:
 1656              	    none 
 1657              	  use:
 1658              	    r0 
 1659              	***********************************/
 1660              	warm_init:
 1661              	// reset data stack       
 1662 0d80 DFF824C0 	    ldr DP,dstack 
 1663 0d84 4FF0000A 	    mov IN,#0 // BASIC line index 
 1664 0d88 4FF0000B 	    mov BPTR,#0 // BASIC line address 
 1665 0d8c 80EA0000 	    eor r0,r0 
 1666 0d90 6060     	    str r0,[UPP,#COUNT]  
 1667 0d92 2064     	    str r0,[UPP,#FLAGS]
 1668 0d94 A063     	    str r0,[UPP,#LOOP_DEPTH] 
 1669 0d96 4FF00400 	    mov r0, #DEFAULT_TAB_WIDTH
 1670 0d9a 6064     	    str r0,[UPP,#TAB_WIDTH]
 1671 0d9c 4FF00A00 	    mov r0,#10 // default base decimal 
 1672 0da0 A061     	    str r0,[UPP,#BASE]
 1673 0da2 7047     	    _RET  
 1674              	
 1675 0da4 00000000 	mstack: .word _mstack 
 1676 0da8 00000000 	dstack: .word _dstack 
 1677 0dac 00000000 	tib: .word _tib 
 1678 0db0 00000000 	pad: .word _pad 
 1679 0db4 FCFFFFFF 	array: .word _pad - 4 
 1680 0db8 0A524541 	ready: .asciz "\nREADY" 
 1680      445900
 1681              	
 1682              	/**********************************
 1683              	    warm_start 
 1684              	    start BASIC interpreter doesn't  
 1685              	    reset variables and code space 
 1686              	  input:
ARM GAS  tinyBasic.s 			page 48


 1687              	    none 
 1688              	  output:
 1689              	    none 
 1690              	**********************************/
 1691 0dbf 00       	    _GBL_FUNC warm_start 
 1692              	// initialise parameters stack
 1693 0dc0 FFF7DEFF 	    bl warm_init
 1694              	// reset main stack 
 1695 0dc4 5FF82400 	    ldr r0,mstack
 1696 0dc8 8546     	    mov sp,r0 
 1697 0dca DFF81C04 	    ldr r0,=ready 
 1698 0dce 00B5FFF7 	    _CALL uart_puts 
 1698      FEFF5DF8 
 1698      04EB
 1699              	// fall in cmd_line 
 1700              	
 1701              	/**********************************
 1702              	   cmd_line 
 1703              	   shell command line 
 1704              	   input:
 1705              	      none 
 1706              	   output:
 1707              	      none 
 1708              	   use:
 1709              	
 1710              	***********************************/
 1711              	    _FUNC cmd_line 
 1712 0dd8 00B5FFF7 	    _CALL cr
 1712      FEFF5DF8 
 1712      04EB
 1713 0de2 80EA0000 	    eor r0,r0 
 1714 0de6 C4F8CC00 	    str r0,[UPP,#TRACE_LEVEL] 
 1715 0dea 5FF84000 	1:  ldr r0,tib
 1716 0dee 4FF05001 	    mov r1,#TIB_SIZE 
 1717 0df2 00B5FFF7 	    _CALL readln 
 1717      FEFF5DF8 
 1717      04EB
 1718 0dfc 0940     	    ands r1,r1 // empty line 
 1719 0dfe F4D0     	    beq 1b 
 1720 0e00 00B5FFF7 	    _CALL compile // tokenize BASIC text
 1720      D7FA5DF8 
 1720      04EB
 1721 0e0a EED0     	    beq 1b  // tokens stored in text area 
 1722              	// interpret tokenized line 
 1723              	interpreter:
 1724 0e0c 00B500F0 	  _CALL next_token 
 1724      21F85DF8 
 1724      04EB
 1725 0e16 0228     	  cmp r0,#2
 1726 0e18 F8D4     	  bmi interpreter    
 1727 0e1a 1A28     	  cmp r0,#TK_LABEL 
 1728 0e1c F6D0     	  beq interpreter 
 1729 0e1e 1728     	  cmp r0,#TK_CMD 
 1730 0e20 03D1     	  bne 2f
 1731 0e22 0846     	  mov r0,r1 
 1732 0e24 00F012F8 	  bl execute  
 1733 0e28 F0E7     	  b interpreter   
ARM GAS  tinyBasic.s 			page 49


 1734              	2: 
 1735 0e2a 1428     	  cmp r0,#TK_VAR 
 1736 0e2c 05D1     	  bne 3f 
 1737 0e2e 00B500F0 	  _CALL let_var 
 1737      D5FB5DF8 
 1737      04EB
 1738 0e38 E8E7     	  b interpreter 
 1739              	3: 
 1740 0e3a 0C28     	  cmp r0,#TK_ARRAY 
 1741 0e3c 05D1     	  bne 4f
 1742 0e3e 00B500F0 	  _CALL let_array 
 1742      DBFB5DF8 
 1742      04EB
 1743 0e48 E0E7     	  b interpreter
 1744              	4: 
 1745 0e4a 07E6     	  b syntax_error
 1746              	
 1747              	/*****************************
 1748              	    execute 
 1749              	    execute a BASIC routine from 
 1750              	    its token value 
 1751              	  input:
 1752              	    r0  BASIC SUB|FUNC token  
 1753              	  output: 
 1754              	    depend on SUB|FUNc
 1755              	*****************************/
 1756              	    _FUNC execute 
 1757 0e4c E749     	    ldr r1,=fn_table 
 1758 0e4e 51F82000 	    ldr r0,[r1,r0,lsl #2]
 1759 0e52 0047     	    bx r0 
 1760              	
 1761              	/*************************************
 1762              	  next_token 
 1763              	  extract next token from token list 
 1764              	  input:
 1765              	    none 
 1766              	  output:
 1767              	    r0    token attribute
 1768              	    r1    token value if there is one 
 1769              	  use:
 1770              	    T1    exit token type  
 1771              	****************************/
 1772              	    _FUNC next_token 
 1773 0e54 6068     	    ldr r0,[UPP,#COUNT]
 1774 0e56 8245     	    cmp IN,r0 
 1775 0e58 11D4     	    bmi 0f
 1776              	// reached end of line skip to next one 
 1777 0e5a 8344     	    add BPTR,r0 // next line 
 1778 0e5c 606B     	    ldr r0,[UPP,#TXTEND]
 1779 0e5e 8345     	    cmp BPTR,r0 
 1780 0e60 7FF5FEAF 	    bpl warm_start // end of program
 1781 0e64 9BF80200 	    ldrb r0,[BPTR,#2] // line length 
 1782 0e68 6060     	    str r0,[UPP,#COUNT] 
 1783 0e6a 4FF0030A 	    mov IN,#3
 1784 0e6e 00B5FFF7 	    _CALL show_trace
 1784      BCF95DF8 
 1784      04EB
ARM GAS  tinyBasic.s 			page 50


 1785 0e78 80EA0000 	    eor r0,r0
 1786 0e7c 7047     	    _RET 
 1787              	0: 
 1788 0e7e C4F800A0 	    str IN,[UPP,#IN_SAVED]
 1789 0e82 C4F808B0 	    str BPTR,[UPP,#BASICPTR]
 1790 0e86 1BF80A00 	    ldrb r0,[BPTR,IN] // token id 
 1791 0e8a 0AF1010A 	    add IN,#1  
 1792 0e8e 1328     	    cmp r0,#TK_CHAR 
 1793 0e90 1AD4     	    bmi 9f // these tokens have no value  
 1794 0e92 1828     	    cmp r0,#TK_SCONST 
 1795 0e94 04D5     	    bpl 1f
 1796              	    // tokens with .byte value 
 1797 0e96 1BF80A10 	    ldrb r1,[BPTR,IN] 
 1798 0e9a 0AF1010A 	    add IN,#1 
 1799 0e9e 7047     	    _RET  
 1800 0ea0 1C28     	1:  cmp r0,#TK_QSTR 
 1801 0ea2 0DD1     	    bne 2f 
 1802 0ea4 0BEB0A01 	    add r1,BPTR,IN
 1803 0ea8 0846     	    mov r0,r1 
 1804 0eaa 00B5FFF7 	    _CALL strlen 
 1804      FEFF5DF8 
 1804      04EB
 1805 0eb4 8244     	    add IN,r0 
 1806 0eb6 0AF1010A 	    add IN,#1
 1807 0eba 4FF01C00 	    mov r0,#TK_QSTR 
 1808 0ebe 7047     	    _RET  
 1809              	2:  // .word value 
 1810 0ec0 5BF80A10 	    ldr r1,[BPTR,IN] 
 1811 0ec4 0AF1040A 	    add IN,#4 
 1812 0ec8 7047     	9:  _RET
 1813              	
 1814              	
 1815              	/*********************************
 1816              	    expect 
 1817              	    check if next token is of 
 1818              	    expected type. If not 
 1819              	    call syntax_error  
 1820              	  input:
 1821              	      r0   token attribute
 1822              	  output:
 1823              	      r0  token attribute 
 1824              	      r1  token value
 1825              	  use:
 1826              	      T1   
 1827              	**********************************/
 1828 0eca 00BF     	    _FUNC expect 
 1829 0ecc 4DF8048D 	    push {T1}
 1830 0ed0 8046     	    mov T1,r0 
 1831 0ed2 00B5FFF7 	    _CALL next_token 
 1831      BEFF5DF8 
 1831      04EB
 1832 0edc 4045     	    cmp r0,T1  
 1833 0ede 7FF4BDAD 	    bne syntax_error 
 1834 0ee2 5DF8048B 	    pop {T1}
 1835 0ee6 7047     	    _RET 
 1836              	
 1837              	/***********************************
ARM GAS  tinyBasic.s 			page 51


 1838              	    func_args 
 1839              	    get function arguments list 
 1840              	  input:
 1841              	    none 
 1842              	  output:
 1843              	    r0    arg. count 
 1844              	  use:
 1845              	
 1846              	************************************/
 1847              	    _FUNC func_args 
 1848 0ee8 4FF00500 	    mov r0,#TK_LPAREN 
 1849 0eec 00B5FFF7 	    _CALL expect 
 1849      EDFF5DF8 
 1849      04EB
 1850 0ef6 00B500F0 	    _CALL arg_list 
 1850      0CF85DF8 
 1850      04EB
 1851 0f00 01B4     	    push {r0}
 1852 0f02 4FF00600 	    mov r0,#TK_RPAREN 
 1853 0f06 00B5FFF7 	    _CALL expect 
 1853      E0FF5DF8 
 1853      04EB
 1854 0f10 01BC     	    pop {r0}
 1855 0f12 7047     	    _RET 
 1856              	
 1857              	/**********************************
 1858              	    arg_list 
 1859              	    get arguments list on dstack 
 1860              	  input:
 1861              	    none 
 1862              	  output:
 1863              	    r0    arg count
 1864              	  use:
 1865              	    T1    tmp count  
 1866              	***********************************/
 1867              	    _FUNC arg_list 
 1868 0f14 4DF8048D 	    push {T1}
 1869 0f18 88EA0808 	    eor T1,T1 
 1870 0f1c 00B500F0 	1:  _CALL expression 
 1870      BDF85DF8 
 1870      04EB
 1871 0f26 1B28     	    cmp R0,#TK_INTGR  
 1872 0f28 0AD1     	    bne 2f
 1873 0f2a 4CF8041D 	    _PUSH r1 
 1874 0f2e 08F10108 	    add T1,#1 
 1875 0f32 00B5FFF7 	    _CALL next_token 
 1875      8EFF5DF8 
 1875      04EB
 1876 0f3c 0228     	    cmp r0,#TK_COMMA 
 1877 0f3e EDD0     	    beq 1b 
 1878 0f40 D4F800A0 	2:  _UNGET_TOKEN 
 1878      D4F808B0 
 1879 0f48 4046     	9:  mov r0,T1 
 1880 0f4a 5DF8048B 	    pop {T1}
 1881 0f4e 7047     	    _RET 
 1882              	
 1883              	
ARM GAS  tinyBasic.s 			page 52


 1884              	/***********************************
 1885              	 factor
 1886              	 arithmetick factor parser 
 1887              	 factor ::= ['+'|'-'|e]  var | @ |
 1888              				 integer | function |
 1889              				 '('expression')' 
 1890              	  input: 
 1891              	    none 
 1892              	  output:
 1893              	    r0   token attribute 
 1894              	    r1   token value 
 1895              	  use:
 1896              	    r2   temp 
 1897              	    r3   sign 
 1898              	***********************************/
 1899              	    _FUNC factor 
 1900 0f50 0CB4     	    push {r2,r3}
 1901 0f52 00B5FFF7 	    _CALL next_token
 1901      7EFF5DF8 
 1901      04EB
 1902 0f5c 4FF00103 	    mov r3,#1 // default sign +  
 1903 0f60 0828     	    cmp r0,#TK_MINUS  
 1904 0f62 06D1     	    bne 1f 
 1905 0f64 4FF0FF33 	    mov r3,#-1 // minus sign 
 1906 0f68 00B5FFF7 	0:  _CALL next_token
 1906      73FF5DF8 
 1906      04EB
 1907 0f72 1B28     	1:  cmp r0,#TK_INTGR 
 1908 0f74 55D0     	    beq 8f 
 1909 0f76 0C28     	    cmp r0,#TK_ARRAY 
 1910 0f78 1DD1     	    bne 2f 
 1911 0f7a 4FF00500 	    mov r0,#TK_LPAREN 
 1912 0f7e 00B5FFF7 	    _CALL expect 
 1912      A4FF5DF8 
 1912      04EB
 1913 0f88 00B500F0 	    _CALL expression
 1913      87F85DF8 
 1913      04EB
 1914 0f92 1B28     	    cmp r0,#TK_INTGR
 1915 0f94 7FF462AD 	    bne syntax_error
 1916 0f98 0A46     	    mov r2,r1  
 1917 0f9a 4FF00600 	    mov r0,#TK_RPAREN
 1918 0f9e 00B5FFF7 	    _CALL expect 
 1918      94FF5DF8 
 1918      04EB
 1919 0fa8 1046     	    mov r0,r2 
 1920 0faa 00B500F0 	    _CALL get_array_element 
 1920      E2F85DF8 
 1920      04EB
 1921 0fb4 35E0     	    b 8f
 1922 0fb6 0528     	2:  cmp r0,#TK_LPAREN 
 1923 0fb8 13D1     	    bne 3f 
 1924 0fba 00B500F0 	    _CALL expression 
 1924      6EF85DF8 
 1924      04EB
 1925 0fc4 1B28     	    cmp r0,#TK_INTGR 
 1926 0fc6 7FF449AD 	    bne syntax_error
ARM GAS  tinyBasic.s 			page 53


 1927 0fca 0A46     	    mov r2,r1   
 1928 0fcc 4FF00600 	    mov r0,#TK_RPAREN
 1929 0fd0 00B5FFF7 	    _CALL expect 
 1929      7BFF5DF8 
 1929      04EB
 1930 0fda 1146     	    mov r1,r2 
 1931 0fdc 4FF01B00 	    mov r0,#TK_INTGR
 1932 0fe0 1FE0     	    b 8f       
 1933 0fe2 1428     	3:  cmp r0,#TK_VAR 
 1934 0fe4 06D1     	    bne 4f
 1935 0fe6 0846     	    mov r0,r1  
 1936 0fe8 00B500F0 	    _CALL get_var 
 1936      D7F85DF8 
 1936      04EB
 1937 0ff2 16E0     	    b 8f 
 1938 0ff4 1528     	4:  cmp r0,#TK_IFUNC 
 1939 0ff6 06D1     	    bne 6f 
 1940 0ff8 0846     	5:  mov r0,r1  
 1941 0ffa 00B5FFF7 	    _CALL execute
 1941      26FF5DF8 
 1941      04EB
 1942 1004 0DE0     	    b 8f 
 1943 1006 1A28     	6:  cmp r0,#TK_LABEL
 1944 1008 07D1     	    bne 7f 
 1945 100a 41F00040 	    orr r0,r1,#(1<<31) 
 1946 100e 00B5FFF7 	    _CALL search_const
 1946      44F95DF8 
 1946      04EB
 1947 1018 03E0     	    b 8f 
 1948 101a 1828     	7:  cmp r0,#TK_SCONST 
 1949 101c 03D1     	    bne 9f 
 1950 101e 4FF01B00 	    mov r0,#TK_INTGR
 1951 1022 03FB01F1 	8:  mul r1,r3 
 1952 1026 0CBC     	9:  pop {r2,r3}   
 1953 1028 7047     	    _RET 
 1954              	
 1955              	
 1956              	/*****************************************
 1957              	    term 
 1958              	    term parser 
 1959              	    term ::= factor [['*'|'/'|'%'] factor]* 
 1960              	    output:
 1961              	      r0  	token attribute 
 1962              	      r1		integer
 1963              	    use:
 1964              	      r2    first factor 
 1965              	      r3    operator *|/|%
 1966              	******************************************/
 1967 102a 00BF     	    _FUNC term 
 1968 102c 00B5FFF7 	    _CALL factor
 1968      8FFF5DF8 
 1968      04EB
 1969 1036 1B28     	    cmp r0,#TK_INTGR
 1970 1038 00D0     	    beq 0f 
 1971 103a 7047     	    _RET // not a factor    
 1972 103c 0CB4     	0:  push {r2,r3}
 1973 103e 0A46     	    mov r2,r1 // first factor    
ARM GAS  tinyBasic.s 			page 54


 1974 1040 00B5FFF7 	0:  _CALL next_token
 1974      07FF5DF8 
 1974      04EB
 1975 104a 0346     	    mov r3,r0  // operator 
 1976 104c 0928     	    cmp r0,TK_MULT
 1977 104e 01D4     	    bmi 1f 
 1978 1050 0C28     	    cmp r0,#TK_MOD+1
 1979 1052 06D4     	    bmi 2f
 1980 1054 D4F800A0 	1:  _UNGET_TOKEN
 1980      D4F808B0 
 1981 105c 4FF01B00 	    mov r0,#TK_INTGR
 1982 1060 19E0     	    b 9f 
 1983 1062 00B5FFF7 	2:  _CALL factor
 1983      74FF5DF8 
 1983      04EB
 1984 106c 1B28     	    cmp r0,#TK_INTGR
 1985 106e 7FF4F5AC 	    bne syntax_error 
 1986 1072 092B     	    cmp r3,#TK_MULT
 1987 1074 02D1     	    bne 3f 
 1988              	// multiplication
 1989 1076 01FB02F2 	    mul r2,r1
 1990 107a E1E7     	    b 0b  
 1991 107c 0A2B     	3:  cmp r3,#TK_DIV 
 1992 107e 02D1     	    bne 4f
 1993              	// division
 1994 1080 92FBF1F2 	    sdiv r2,r2,r1
 1995 1084 DCE7     	    b 0b  
 1996              	4: // modulo
 1997 1086 1046     	    mov r0,r2 
 1998 1088 92FBF1F2 	    sdiv r2,r2,r1 
 1999 108c 01FB02F2 	    mul  r2,r1 
 2000 1090 A0EB0202 	    sub  r2,r0,r2
 2001 1094 D4E7     	    b 0b  
 2002 1096 1146     	9:  mov r1,r2 
 2003 1098 0CBC     	    pop {r2,r3}
 2004 109a 7047     	    _RET 
 2005              	
 2006              	/*****************************************
 2007              	    expression 
 2008              	    arithmetic expression parser 
 2009              	    expression ::= term [['+'|'-'] term]*
 2010              	    result range {-32768..32767}
 2011              	    output:
 2012              	      r0    TK_NONE || TK_INTGR 
 2013              	      r1 	  integer
 2014              	    use:
 2015              	      r2  left term 
 2016              	      r3  operator +|-
 2017              	******************************************/
 2018              	    _FUNC expression 
 2019 109c 00B5FFF7 	    _CALL term 
 2019      C5FF5DF8 
 2019      04EB
 2020 10a6 1B28     	    cmp r0,#TK_INTGR 
 2021 10a8 00D0     	    beq 0f 
 2022 10aa 7047     	    _RET   
 2023 10ac 0CB4     	0:  push {r2,r3}
ARM GAS  tinyBasic.s 			page 55


 2024 10ae 0A46     	    mov r2,r1 // first term
 2025 10b0 00B5FFF7 	1:  _CALL next_token 
 2025      CFFE5DF8 
 2025      04EB
 2026 10ba 0346     	    mov r3,r0 //  +|-
 2027 10bc 0728     	    cmp r0,#TK_PLUS 
 2028 10be 08D0     	    beq 3f 
 2029 10c0 0828     	    cmp r0,#TK_MINUS  
 2030 10c2 06D0     	    beq 3f
 2031 10c4 D4F800A0 	    _UNGET_TOKEN 
 2031      D4F808B0 
 2032 10cc 4FF01B00 	    mov r0,#TK_INTGR
 2033 10d0 0EE0     	    b 9f 
 2034 10d2 00B5FFF7 	3:  _CALL term 
 2034      AAFF5DF8 
 2034      04EB
 2035 10dc 1B28     	    cmp r0,#TK_INTGR 
 2036 10de 7FF4BDAC 	    bne syntax_error 
 2037 10e2 072B     	    cmp r3,#TK_PLUS 
 2038 10e4 02D0     	    beq 4f 
 2039 10e6 A2EB0102 	    sub r2,r1 // term1-term2  
 2040 10ea E1E7     	    b 1b 
 2041 10ec 0A44     	4:  add r2,r1 // term1+term2
 2042 10ee DFE7     	    b 1b
 2043 10f0 1146     	9:  mov r1,r2 
 2044 10f2 0CBC     	    pop {r2,r3}
 2045 10f4 7047     	    _RET 
 2046              	
 2047              	
 2048              	/**********************************************
 2049              	    relation
 2050              	    rel ::= expr1 rel_op expr2
 2051              	    rel_op ::=  '=','<','>','>=','<=','<>','><'
 2052              	    relation return  integer , zero is false 
 2053              	    output:
 2054              	        r0	TK_INTGR  
 2055              	        r1	integer 
 2056              	    use:
 2057              	        r2   first operand 
 2058              	        r3   relop   
 2059              	**********************************************/
 2060 10f6 00BF     	    _FUNC relation 
 2061 10f8 0CB4     	    push {r2,r3}
 2062 10fa 00B5FFF7 	    _CALL expression 
 2062      CEFF5DF8 
 2062      04EB
 2063 1104 1B28     	    cmp r0,#TK_INTGR 
 2064 1106 7FF4A9AC 	    bne syntax_error 
 2065 110a 0A46     	    mov r2,r1  // first operand  
 2066 110c 00B5FFF7 	    _CALL next_token 
 2066      A1FE5DF8 
 2066      04EB
 2067 1116 A0F10D03 	    sub r3,r0,#TK_EQUAL  // relop  
 2068 111a 0D28     	    cmp r0,#TK_EQUAL 
 2069 111c 1DD4     	    bmi 8f 
 2070 111e 1328     	    cmp r0,#TK_NE+1
 2071 1120 1BD5     	    bpl 8f 
ARM GAS  tinyBasic.s 			page 56


 2072 1122 00B5FFF7 	    _CALL expression 
 2072      BAFF5DF8 
 2072      04EB
 2073 112c 1B28     	    cmp r0,#TK_INTGR 
 2074 112e 7FF495AC 	    bne syntax_error 
 2075 1132 8A42     	    cmp r2,r1 // compare operands  
 2076 1134 4FF0FF31 	    mov r1,#-1 
 2077 1138 2D4A     	    ldr r2,=relop_jmp
 2078 113a D2E803F0 	    tbb [r2,r3]    
 2079              	rel_idx0:
 2080              	rel_eq:
 2081 113e 11D0     	    beq 9f 
 2082 1140 08E0     	    b rel_false
 2083              	rel_gt:
 2084 1142 0FDC     	    bgt 9f  
 2085 1144 06E0     	    b rel_false  
 2086              	rel_ge:
 2087 1146 0DDA     	    bge 9f  
 2088 1148 04E0     	    b rel_false  
 2089              	rel_lt: 
 2090 114a 0BDB     	    blt 9f   
 2091 114c 02E0     	    b rel_false 
 2092              	rel_le:
 2093 114e 09DD     	    ble 9f  
 2094 1150 00E0     	    b rel_false 
 2095              	rel_ne:
 2096 1152 07D1     	    bne 9f 
 2097              	rel_false:    
 2098 1154 81EA0101 	    eor r1,r1  // false
 2099 1158 04E0     	    b 9f  
 2100 115a D4F800A0 	8:  _UNGET_TOKEN 
 2100      D4F808B0 
 2101 1162 1146     	    mov r1,r2    
 2102 1164 4FF01B00 	9:  mov r0,#TK_INTGR
 2103 1168 0CBC     	    pop {r2,r3}
 2104 116a 7047     	    _RET 
 2105              	
 2106              	
 2107              	relop_jmp: 
 2108 116c 00       	  .byte 0 // =  
 2109 116d 02       	  .byte (rel_gt-rel_idx0)/2 // > 
 2110 116e 06       	  .byte (rel_lt-rel_idx0)/2 // <
 2111 116f 04       	  .byte (rel_ge-rel_idx0)/2 // >=
 2112 1170 08       	  .byte (rel_le-rel_idx0)/2 // <=
 2113 1171 0A       	  .byte (rel_ne-rel_idx0)/2 // <> 
 2114              	
 2115              	
 2116              	/***********************************
 2117              	    get_array_element
 2118              	    return value of @(n)
 2119              	  input:
 2120              	    r0    indice 
 2121              	  output:
 2122              	    r0   TK_INTGR
 2123              	    r1   value  
 2124              	************************************/
 2125 1172 00BF     	    _FUNC get_array_element 
ARM GAS  tinyBasic.s 			page 57


 2126 1174 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2127 1178 4FEA8000 	    lsl r0,#2 
 2128 117c C0EB0100 	    rsb r0,r1 
 2129 1180 0168     	    ldr r1,[r0]
 2130 1182 4FF01B00 	    mov r0,#TK_INTGR 
 2131 1186 7047     	    _RET 
 2132              	
 2133              	
 2134              	/***********************************
 2135              	    set_array_element 
 2136              	    set value of array element 
 2137              	  input:
 2138              	    r0   index 
 2139              	    r1   new value 
 2140              	  output:
 2141              	    none
 2142              	  use:
 2143              	    r2    array pointer 
 2144              	**********************************/
 2145              	    _FUNC set_array_element 
 2146 1188 04B4     	    push {r2}
 2147 118a D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 2148 118e 4FEA8000 	    lsl r0,#2 
 2149 1192 A1EB0001 	    sub r1,r0 
 2150 1196 0960     	    str r1,[r1]
 2151 1198 04BC     	    pop {r2}
 2152 119a 7047     	    _RET 
 2153              	
 2154              	/***********************************
 2155              	   get_var 
 2156              	   get variable value 
 2157              	  input:
 2158              	     r0    variable index {0..25}
 2159              	  output:
 2160              	     r0    TK_INTGR
 2161              	     r1    value 
 2162              	**********************************/
 2163              	    _FUNC get_var 
 2164 119c 04F16001 	    add r1,UPP,#VARS
 2165 11a0 4FEA8000 	    lsl r0,#2 
 2166 11a4 0958     	    ldr r1,[r1,r0]
 2167 11a6 4FF01B00 	    mov r0,#TK_INTGR
 2168 11aa 7047     	    _RET 
 2169              	
 2170              	/*********************************
 2171              	    set_var 
 2172              	    set variable value 
 2173              	  input:
 2174              	     r0    variable index {0..25}
 2175              	     r1    new value 
 2176              	  output:
 2177              	    none 
 2178              	  use:
 2179              	    r2   vars pointer 
 2180              	*********************************/
 2181              	    _FUNC set_var 
 2182 11ac 04B4     	    push {r2}
ARM GAS  tinyBasic.s 			page 58


 2183 11ae 04F16002 	    add r2,UPP,#VARS
 2184 11b2 4FEA8000 	    lsl r0,#2
 2185 11b6 1150     	    str r1,[r2,r0]
 2186 11b8 04BC     	    pop {r2}
 2187 11ba 7047     	    _RET 
 2188              	
 2189              	/******************************
 2190              	    CONSTANTS data
 2191              	******************************/
 2192              	
 2193              	  .section .rodata 
 2194              	
 2195              	// system variables initial value 
 2196              	uzero:
 2197 0000 00000000 	  .word 0 // IN_SAVED
 2198 0004 00000000 	  .word 0 // COUNT
 2199 0008 00000000 	  .word 0 // BASICPTR
 2200 000c 00000000 	  .word 0 // DATAPTR
 2201 0010 00000000 	  .word 0 // DATA
 2202 0014 00000000 	  .word 0 // DATALEN
 2203 0018 0A000000 	  .word 10 // BASE
 2204 001c 00000000 	  .word 0 // TICKS
 2205 0020 00000000 	  .word 0 // TIMER
 2206 0024 AA5555AA 	  .word 0xaa5555aa // SEED
 2207 0028 00000000 	  .word FILE_SYSTEM // FSPTR
 2208 002c 00000000 	  .word 0 // FSFREE
 2209 0030 00000000 	  .word 0 // TXTBGN
 2210 0034 00000000 	  .word 0 // TXTEND
 2211 0038 00000000 	  .word 0 //LOOP_DEPTH
 2212 003c 00000000 	  .word 0 // ARRAY_SIZE
 2213 0040 00000000 	  .word 0 // FLAGS
 2214 0044 04000000 	  .word 4 // TAB_WIDTH
 2215 0048 00000000 	  .word 0 // RX_HEAD
 2216 004c 00000000 	  .word 0 // RX_TAIL
 2217 0050 00000000 	  .space RX_QUEUE_SIZE,0 // RX_QUEUE
 2217      00000000 
 2217      00000000 
 2217      00000000 
 2218 0060 00000000 	  .space VARS_SIZE,0 // VARS
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2219 00c8 00000000 	  .word _pad  // ARRAY_ADR 
 2220 00cc 00000000 	  .word 0 // TRACE_LEVEL 
 2221 00d0 00000000 	  .word 0 // HERE 
 2222              	ulast:
 2223              	
 2224              	  .section .rodata.dictionary 
 2225              	
 2226              	// keep alphabetic order for BASIC names from Z-A
 2227              	// this sort order is for for WORDS cmd output. 	
 2228              	  .type kword_end, %object
 2229              		.equ link, 0
 2230              	kword_end:
 2231 0000 0C000000 	  _dict_entry TK_NONE,"",0 
 2231      00000000 
ARM GAS  tinyBasic.s 			page 59


 2231      00000000 
 2231      00000000 
 2232 0010 0C000000 	  _dict_entry TK_IFUNC,YPOS,YPOS_IDX // ypos 
 2232      5B000000 
 2232      15000000 
 2232      59504F53 
 2232      00000000 
 2233 0024 1C000000 	  _dict_entry TK_IFUNC,XPOS,XPOS_IDX // xpos
 2233      5A000000 
 2233      15000000 
 2233      58504F53 
 2233      00000000 
 2234 0038 30000000 	  _dict_entry TK_IFUNC,XOR,XOR_IDX //bit_xor
 2234      59000000 
 2234      15000000 
 2234      584F5200 
 2235 0048 44000000 	  _dict_entry TK_CMD,WORDS,WORDS_IDX //words 
 2235      58000000 
 2235      17000000 
 2235      574F5244 
 2235      53000000 
 2236 005c 54000000 	  _dict_entry TK_CMD,WAIT,WAIT_IDX //wait 
 2236      57000000 
 2236      17000000 
 2236      57414954 
 2236      00000000 
 2237 0070 68000000 	  _dict_entry TK_CMD,UNTIL,UNTIL_IDX //until 
 2237      56000000 
 2237      17000000 
 2237      554E5449 
 2237      4C000000 
 2238 0084 7C000000 	  _dict_entry TK_IFUNC,UFLASH,UFLASH_IDX //uflash 
 2238      55000000 
 2238      15000000 
 2238      55464C41 
 2238      53480000 
 2239 0098 90000000 	  _dict_entry TK_IFUNC,UBOUND,UBOUND_IDX //ubound
 2239      54000000 
 2239      15000000 
 2239      55424F55 
 2239      4E440000 
 2240 00ac A4000000 	  _dict_entry TK_CMD,TRACE,TRACE_IDX // trace 
 2240      53000000 
 2240      17000000 
 2240      54524143 
 2240      45000000 
 2241 00c0 B8000000 	  _dict_entry TK_CMD,TONE_INIT,TONE_INIT_IDX // tone_init
 2241      52000000 
 2241      17000000 
 2241      544F4E45 
 2241      5F494E49 
 2242 00d8 CC000000 	  _dict_entry TK_CMD,TONE,TONE_IDX // tone 
 2242      51000000 
 2242      17000000 
 2242      544F4E45 
 2242      00000000 
 2243 00ec E4000000 	  _dict_entry TK_CMD,TO,TO_IDX //to
ARM GAS  tinyBasic.s 			page 60


 2243      50000000 
 2243      17000000 
 2243      544F0000 
 2244 00fc F8000000 	  _dict_entry TK_CMD,TIMER,TIMER_IDX //set_timer
 2244      4E000000 
 2244      17000000 
 2244      54494D45 
 2244      52000000 
 2245 0110 08010000 	  _dict_entry TK_IFUNC,TIMEOUT,TMROUT_IDX //timeout 
 2245      4F000000 
 2245      15000000 
 2245      54494D45 
 2245      4F555400 
 2246 0124 1C010000 	  _dict_entry TK_IFUNC,TICKS,TICKS_IDX //get_ticks
 2246      4D000000 
 2246      15000000 
 2246      5449434B 
 2246      53000000 
 2247 0138 30010000 	  _dict_entry TK_CMD,THEN,THEN_IDX // then 
 2247      4C000000 
 2247      17000000 
 2247      5448454E 
 2247      00000000 
 2248 014c 44010000 	  _dict_entry TK_CMD,TAB,TAB_IDX //tab 
 2248      4B000000 
 2248      17000000 
 2248      54414200 
 2249 015c 58010000 	  _dict_entry TK_CMD,STORE,STORE_IDX // store  
 2249      4A000000 
 2249      17000000 
 2249      53544F52 
 2249      45000000 
 2250 0170 68010000 	  _dict_entry TK_CMD,STOP,STOP_IDX //stop 
 2250      49000000 
 2250      17000000 
 2250      53544F50 
 2250      00000000 
 2251 0184 7C010000 	  _dict_entry TK_CMD,STEP,STEP_IDX //step 
 2251      48000000 
 2251      17000000 
 2251      53544550 
 2251      00000000 
 2252 0198 90010000 	  _dict_entry TK_CMD,SPC,SPC_IDX // spc 
 2252      47000000 
 2252      17000000 
 2252      53504300 
 2253 01a8 A4010000 	  _dict_entry TK_CMD,SLEEP,SLEEP_IDX //sleep 
 2253      46000000 
 2253      17000000 
 2253      534C4545 
 2253      50000000 
 2254 01bc B4010000 	  _dict_entry TK_CMD,SERVO_POS,SERVO_POS_IDX // servo_pos 
 2254      45000000 
 2254      17000000 
 2254      53455256 
 2254      4F5F504F 
 2255 01d4 C8010000 	  _dict_entry TK_CMD,SERVO_OFF,SERVO_OFF_IDX, // servo_off 
ARM GAS  tinyBasic.s 			page 61


 2255      44000000 
 2255      17000000 
 2255      53455256 
 2255      4F5F4F46 
 2256 01ec E0010000 	  _dict_entry TK_CMD,SERVO_INIT,SERVO_INIT_IDX // servo_init  
 2256      43000000 
 2256      17000000 
 2256      53455256 
 2256      4F5F494E 
 2257 0204 F8010000 	  _dict_entry TK_CMD,SAVE,SAVE_IDX //save
 2257      42000000 
 2257      17000000 
 2257      53415645 
 2257      00000000 
 2258 0218 10020000 	  _dict_entry TK_CMD,RUN,RUN_IDX //run
 2258      41000000 
 2258      17000000 
 2258      52554E00 
 2259 0228 24020000 	  _dict_entry TK_IFUNC,RSHIFT,RSHIFT_IDX //rshift
 2259      40000000 
 2259      15000000 
 2259      52534849 
 2259      46540000 
 2260 023c 34020000 	  _dict_entry TK_IFUNC,RND,RND_IDX //random 
 2260      3F000000 
 2260      15000000 
 2260      524E4400 
 2261 024c 48020000 	  _dict_entry TK_CMD,RETURN,RET_IDX //return 
 2261      3E000000 
 2261      17000000 
 2261      52455455 
 2261      524E0000 
 2262 0260 58020000 	  _dict_entry TK_CMD,RESTORE,REST_IDX //restore 
 2262      3D000000 
 2262      17000000 
 2262      52455354 
 2262      4F524500 
 2263 0274 6C020000 	  _dict_entry TK_CMD,REM,REM_IDX //remark 
 2263      3C000000 
 2263      17000000 
 2263      52454D00 
 2264 0284 80020000 	  _dict_entry TK_IFUNC,READ,READ_IDX //read  
 2264      3B000000 
 2264      15000000 
 2264      52454144 
 2264      00000000 
 2265 0298 90020000 	  _dict_entry TK_IFUNC,QKEY,QKEY_IDX //qkey 
 2265      3A000000 
 2265      15000000 
 2265      514B4559 
 2265      00000000 
 2266 02ac A4020000 	  _dict_entry TK_CMD,PUT,PUT_IDX // put 
 2266      39000000 
 2266      17000000 
 2266      50555400 
 2267 02bc B8020000 	  _dict_entry TK_CMD,PUSH,PUSH_IDX //cmd_push  
 2267      38000000 
ARM GAS  tinyBasic.s 			page 62


 2267      17000000 
 2267      50555348 
 2267      00000000 
 2268 02d0 C8020000 	  _dict_entry TK_CMD,PRINT,PRT_IDX //print 
 2268      37000000 
 2268      17000000 
 2268      5052494E 
 2268      54000000 
 2269 02e4 DC020000 	  _dict_entry TK_IFUNC,POP,POP_IDX // fn_pop 
 2269      36000000 
 2269      15000000 
 2269      504F5000 
 2270 02f4 F0020000 	  _dict_entry TK_CMD,POKEW,POKE32_IDX //poke32
 2270      35000000 
 2270      17000000 
 2270      504F4B45 
 2270      57000000 
 2271 0308 00030000 	  _dict_entry TK_CMD,POKEH,POKE16_IDX // poke16
 2271      34000000 
 2271      17000000 
 2271      504F4B45 
 2271      48000000 
 2272 031c 14030000 	  _dict_entry TK_CMD,POKEB,POKE8_IDX // poke8 
 2272      33000000 
 2272      17000000 
 2272      504F4B45 
 2272      42000000 
 2273 0330 28030000 	  _dict_entry TK_CMD,PMODE,PMODE_IDX // pin_mode 
 2273      2F000000 
 2273      17000000 
 2273      504D4F44 
 2273      45000000 
 2274 0344 3C030000 	  _dict_entry TK_IFUNC,PEEKW,PEEK32_IDX //peek32
 2274      32000000 
 2274      15000000 
 2274      5045454B 
 2274      57000000 
 2275 0358 50030000 	  _dict_entry TK_IFUNC,PEEKH,PEEK16_IDX //peek16
 2275      31000000 
 2275      15000000 
 2275      5045454B 
 2275      48000000 
 2276 036c 64030000 	  _dict_entry TK_IFUNC,PEEKB,PEEK8_IDX //peek8
 2276      30000000 
 2276      15000000 
 2276      5045454B 
 2276      42000000 
 2277 0380 78030000 	  _dict_entry TK_CMD,PAUSE,PAUSE_IDX //pause 
 2277      2E000000 
 2277      17000000 
 2277      50415553 
 2277      45000000 
 2278 0394 8C030000 	  _dict_entry TK_IFUNC,PAD,PAD_IDX //pad_ref
 2278      2D000000 
 2278      15000000 
 2278      50414400 
 2279 03a4 A0030000 	  _dict_entry TK_SCONST,OUTPUT_PP,1
ARM GAS  tinyBasic.s 			page 63


 2279      01000000 
 2279      18000000 
 2279      4F555450 
 2279      55545F50 
 2280 03bc B0030000 	  _dict_entry TK_SCONST,OUTPUT_OD,6
 2280      06000000 
 2280      18000000 
 2280      4F555450 
 2280      55545F4F 
 2281 03d4 C8030000 	  _dict_entry TK_SCONST,OUTPUT_AFPP,0xa
 2281      0A000000 
 2281      18000000 
 2281      4F555450 
 2281      55545F41 
 2282 03ec E0030000 	  _dict_entry TK_SCONST,OUTPUT_AFOD,0xe 
 2282      0E000000 
 2282      18000000 
 2282      4F555450 
 2282      55545F41 
 2283 0404 F8030000 	  _dict_entry TK_CMD,OUT,OUT_IDX //out 
 2283      2C000000 
 2283      17000000 
 2283      4F555400 
 2284 0414 10040000 	  _dict_entry TK_IFUNC,OR,OR_IDX //bit_or
 2284      2B000000 
 2284      15000000 
 2284      4F520000 
 2285 0424 20040000 	  _dict_entry TK_IFUNC,NOT,NOT_IDX //func_not 
 2285      2A000000 
 2285      15000000 
 2285      4E4F5400 
 2286 0434 30040000 	  _dict_entry TK_CMD,NEXT,NEXT_IDX //next 
 2286      29000000 
 2286      17000000 
 2286      4E455854 
 2286      00000000 
 2287 0448 40040000 	  _dict_entry TK_CMD,NEW,NEW_IDX //new
 2287      28000000 
 2287      17000000 
 2287      4E455700 
 2288 0458 54040000 	  _dict_entry TK_IFUNC,LSHIFT,LSHIFT_IDX //lshift
 2288      27000000 
 2288      15000000 
 2288      4C534849 
 2288      46540000 
 2289 046c 64040000 	  _dict_entry TK_CMD,LOCATE,LOCATE_IDX // locate 
 2289      26000000 
 2289      17000000 
 2289      4C4F4341 
 2289      54450000 
 2290 0480 78040000 	  _dict_entry TK_CMD,LOAD,LOAD_IDX //load 
 2290      25000000 
 2290      17000000 
 2290      4C4F4144 
 2290      00000000 
 2291 0494 8C040000 	  _dict_entry TK_CMD,LIST,LIST_IDX //list
 2291      24000000 
ARM GAS  tinyBasic.s 			page 64


 2291      17000000 
 2291      4C495354 
 2291      00000000 
 2292 04a8 A0040000 	  _dict_entry TK_CMD,LET,LET_IDX //let 
 2292      23000000 
 2292      17000000 
 2292      4C455400 
 2293 04b8 B4040000 	  _dict_entry TK_CFUNC,KEY,KEY_IDX //key 
 2293      22000000 
 2293      16000000 
 2293      4B455900 
 2294 04c8 C4040000 	  _dict_entry TK_IFUNC,INVERT,INVERT_IDX //invert 
 2294      21000000 
 2294      15000000 
 2294      494E5645 
 2294      52540000 
 2295 04dc D4040000 	  _dict_entry TK_SCONST,INPUT_PU, 17 
 2295      11000000 
 2295      18000000 
 2295      494E5055 
 2295      545F5055 
 2296 04f4 E8040000 	  _dict_entry TK_SCONST,INPUT_PD, 16
 2296      10000000 
 2296      18000000 
 2296      494E5055 
 2296      545F5044 
 2297 050c 00050000 	  _dict_entry TK_SCONST,INPUT_FLOAT,4
 2297      04000000 
 2297      18000000 
 2297      494E5055 
 2297      545F464C 
 2298 0524 18050000 	  _dict_entry TK_SCONST,INPUT_ANA,0 
 2298      00000000 
 2298      18000000 
 2298      494E5055 
 2298      545F414E 
 2299 053c 30050000 	  _dict_entry TK_CMD,INPUT,INPUT_IDX //input_var
 2299      20000000 
 2299      17000000 
 2299      494E5055 
 2299      54000000 
 2300 0550 48050000 	  _dict_entry TK_IFUNC,IN,IN_IDX // pin_input   
 2300      1F000000 
 2300      15000000 
 2300      494E0000 
 2301 0560 5C050000 	  _dict_entry TK_CMD,IF,IF_IDX //if 
 2301      1E000000 
 2301      17000000 
 2301      49460000 
 2302 0570 6C050000 	  _dict_entry TK_CMD,HEX,HEX_IDX //hex_base
 2302      1D000000 
 2302      17000000 
 2302      48455800 
 2303 0580 7C050000 	  _dict_entry TK_SCONST,GPIOC,GPIOC_BASE_ADR //  
 2303      00100140 
 2303      18000000 
 2303      4750494F 
ARM GAS  tinyBasic.s 			page 65


 2303      43000000 
 2304 0594 8C050000 	  _dict_entry TK_SCONST,GPIOB,GPIOB_BASE_ADR //  
 2304      000C0140 
 2304      18000000 
 2304      4750494F 
 2304      42000000 
 2305 05a8 A0050000 	  _dict_entry TK_SCONST,GPIOA,GPIOA_BASE_ADR //  
 2305      00080140 
 2305      18000000 
 2305      4750494F 
 2305      41000000 
 2306 05bc B4050000 	  _dict_entry TK_CMD,GOTO,GOTO_IDX //goto 
 2306      1C000000 
 2306      17000000 
 2306      474F544F 
 2306      00000000 
 2307 05d0 C8050000 	  _dict_entry TK_CMD,GOSUB,GOSUB_IDX //gosub 
 2307      1B000000 
 2307      17000000 
 2307      474F5355 
 2307      42000000 
 2308 05e4 DC050000 	  _dict_entry TK_IFUNC,GET,GET_IDX // get 
 2308      1A000000 
 2308      15000000 
 2308      47455400 
 2309 05f4 F0050000 	  _dict_entry TK_IFUNC,FREE,FREE_IDX //free  
 2309      19000000 
 2309      15000000 
 2309      46524545 
 2309      00000000 
 2310 0608 00060000 	  _dict_entry TK_CMD,FORGET,FORGET_IDX //forget 
 2310      18000000 
 2310      17000000 
 2310      464F5247 
 2310      45540000 
 2311 061c 14060000 	  _dict_entry TK_CMD,FOR,FOR_IDX //for 
 2311      17000000 
 2311      17000000 
 2311      464F5200 
 2312 062c 28060000 	  _dict_entry TK_CMD,ERASE,ERASE_IDX // erase 
 2312      16000000 
 2312      17000000 
 2312      45524153 
 2312      45000000 
 2313 0640 38060000 	  _dict_entry TK_CMD,END,END_IDX //cmd_end  
 2313      15000000 
 2313      17000000 
 2313      454E4400 
 2314 0650 4C060000 	  _dict_entry TK_CMD,DUMP,DUMP_IDX // dump 
 2314      14000000 
 2314      17000000 
 2314      44554D50 
 2314      00000000 
 2315 0664 5C060000 	  _dict_entry TK_CMD,DROP,DROP_IDX // drop 
 2315      13000000 
 2315      17000000 
 2315      44524F50 
ARM GAS  tinyBasic.s 			page 66


 2315      00000000 
 2316 0678 70060000 	  _dict_entry TK_CMD,DO,DO_IDX //do_loop
 2316      12000000 
 2316      17000000 
 2316      444F0000 
 2317 0688 84060000 	  _dict_entry TK_CMD,DIR,DIR_IDX //directory 
 2317      11000000 
 2317      17000000 
 2317      44495200 
 2318 0698 94060000 	  _dict_entry TK_CMD,DEC,DEC_IDX //dec_base
 2318      10000000 
 2318      17000000 
 2318      44454300 
 2319 06a8 A4060000 	  _dict_entry TK_CMD,DATA,DATA_IDX //data  
 2319      0F000000 
 2319      17000000 
 2319      44415441 
 2319      00000000 
 2320 06bc B4060000 	  _dict_entry TK_CMD,CONST,CONST_IDX // const 
 2320      0E000000 
 2320      17000000 
 2320      434F4E53 
 2320      54000000 
 2321 06d0 C8060000 	  _dict_entry TK_CMD,CLS,CLS_IDX // cls 
 2321      0D000000 
 2321      17000000 
 2321      434C5300 
 2322 06e0 DC060000 	  _dict_entry TK_CFUNC,CHAR,CHAR_IDX //char
 2322      0C000000 
 2322      16000000 
 2322      43484152 
 2322      00000000 
 2323 06f4 EC060000 	  _dict_entry TK_CMD,BTOGL,BTOGL_IDX //bit_toggle
 2323      0B000000 
 2323      17000000 
 2323      42544F47 
 2323      4C000000 
 2324 0708 00070000 	  _dict_entry TK_IFUNC,BTEST,BTEST_IDX //bit_test 
 2324      0A000000 
 2324      15000000 
 2324      42544553 
 2324      54000000 
 2325 071c 14070000 	  _dict_entry TK_CMD,BSET,BSET_IDX //bit_set 
 2325      09000000 
 2325      17000000 
 2325      42534554 
 2325      00000000 
 2326 0730 28070000 	  _dict_entry TK_CMD,BRES,BRES_IDX //bit_reset
 2326      08000000 
 2326      17000000 
 2326      42524553 
 2326      00000000 
 2327 0744 3C070000 	  _dict_entry TK_IFUNC,BIT,BIT_IDX //bitmask
 2327      07000000 
 2327      15000000 
 2327      42495400 
 2328 0754 50070000 	  _dict_entry TK_CMD,AWU,AWU_IDX //awu 
ARM GAS  tinyBasic.s 			page 67


 2328      06000000 
 2328      17000000 
 2328      41575500 
 2329 0764 60070000 	  _dict_entry TK_CMD,AUTORUN,AUTORUN_IDX // autorun 
 2329      05000000 
 2329      17000000 
 2329      4155544F 
 2329      52554E00 
 2330 0778 70070000 	  _dict_entry TK_IFUNC,ASC,ASC_IDX //ascii
 2330      04000000 
 2330      15000000 
 2330      41534300 
 2331 0788 84070000 	  _dict_entry TK_IFUNC,AND,AND_IDX //bit_and
 2331      03000000 
 2331      15000000 
 2331      414E4400 
 2332 0798 94070000 	  _dict_entry TK_CMD,ADC,ADC_IDX // adc 
 2332      02000000 
 2332      17000000 
 2332      41444300 
 2333 07a8 A4070000 	  _dict_entry TK_IFUNC,ANA,ANA_IDX // analog_read 
 2333      01000000 
 2333      15000000 
 2333      414E4100 
 2334              	first_link: 
 2335 07b8 B4070000 	  .word LINK 
 2336 07bc 00000000 	  .word ABS_IDX 
 2337 07c0 15000000 	  .word TK_IFUNC
 2338              	kword_dict: // first name field 
 2339              	  .equ LINK,. 
 2340 07c4 41425300 	  .asciz "ABS" 
 2341              	  .p2align 2 
 2342              	
 2343              	    .section .rodata.fn_tabld 
 2344              	
 2345              	//comands and fonctions address table
 2346              	  .type fn_table, %object
 2347              	fn_table:
 2348 0000 00000000 		.word abs,analog_read,adc,bit_and,ascii,autorun,awu,bitmask 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2348      00000000 
 2349 0020 00000000 		.word bit_reset,bit_set,bit_test,bit_toggle,char,cls,const   
 2349      00000000 
 2349      00000000 
 2349      00000000 
 2349      00000000 
 2350 003c 00000000 		.word skip_line,dec_base,directory,do_loop,drop,dump
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2350      00000000 
 2351 0054 00000000 		.word cmd_end,erase,for,forget,free,get,gosub,goto
 2351      00000000 
 2351      00000000 
 2351      00000000 
ARM GAS  tinyBasic.s 			page 68


 2351      00000000 
 2352 0074 00000000 		.word hex_base,if,pin_input,input_var,invert,key
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2352      00000000 
 2353 008c 00000000 		.word let,list,load,locate,lshift,new,next
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2353      00000000 
 2354 00a8 00000000 		.word func_not,bit_or,out,pad_ref,pause,pin_mode,peek8,peek16,peek32
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2354      00000000 
 2355 00cc 00000000 		.word poke8,poke16,poke32,fn_pop,print,cmd_push,put  
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2355      00000000 
 2356 00e8 00000000 		.word qkey,read,skip_line
 2356      00000000 
 2356      00000000 
 2357 00f4 00000000 		.word restore,return, random,rshift,run,save,servo_init,servo_off,servo_pos 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2357      00000000 
 2358 0118 00000000 		.word sleep,spc,step,stop,store,tab
 2358      00000000 
 2358      00000000 
 2358      00000000 
 2358      00000000 
 2359 0130 00000000 		.word then,get_ticks,set_timer,timeout,to,tone,tone_init,trace,ubound,uflash,until
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2359      00000000 
 2360 015c 00000000 		.word wait,words,bit_xor,xpos,ypos 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2360      00000000 
 2361 0170 00000000 		.word 0 
 2362              	
 2363              	
 2364              	/**********************************
 2365              	    BASIC commands and functions 
 2366              	**********************************/
 2367              	
 2368              	    .section .text.basic , "ax", %progbits 
 2369              	
 2370              	
 2371              	/*******************************
 2372              	  BASIC:  ABS expr 
 2373              	  input:
ARM GAS  tinyBasic.s 			page 69


 2374              	    none 
 2375              	  output:
 2376              	    r0    token type 
 2377              	    r1    abs(expr)
 2378              	  use:
 2379              	    none 
 2380              	******************************/
 2381              	    _FUNC abs 
 2382 0000 00B5FFF7 	    _CALL arg_list
 2382      FEFF5DF8 
 2382      04EB
 2383 000a 0128     	    cmp r0,#1 
 2384 000c 01D0     	    beq 1f 
 2385 000e FFF7FEBF 	    b syntax_error 
 2386 0012 5CF8041B 	1:  _POP r1 
 2387 0016 11F0004F 	    tst r1,#(1<<31)
 2388 001a 01D0     	    beq 9f
 2389 001c C1F10001 	    rsb r1,#0 
 2390 0020 4FF01B00 	9:  mov r0,#TK_INTGR
 2391 0024 7047     	   _RET 
 2392              	
 2393              	/*************************************
 2394              	  BASIC: ANA(pin)
 2395              	  read analog input 
 2396              	*************************************/
 2397 0026 00BF     	    _FUNC analog_read
 2398 0028 00B5FFF7 	    _CALL func_args
 2398      FEFF5DF8 
 2398      04EB
 2399 0032 0128     	    cmp r0,#1 
 2400 0034 7FF4FEAF 	    bne syntax_error 
 2401 0038 4FF41051 	    _MOV32 R1,ADC1_BASE_ADR
 2401      C4F20101 
 2402 0040 5CF8042B 	    _POP r2 // channel
 2403 0044 02F01F02 	    and r2,#31
 2404 0048 4A63     	    str r2,[r1,#ADC_SQR3]
 2405              	// start conversion 
 2406 004a 8868     	    ldr r0,[r1,#ADC_CR2]
 2407 004c 8860     	    str r0,[r1,#ADC_CR2]
 2408              	adc_loop:
 2409 004e 0868     	    ldr r0,[R1,#ADC_SR]
 2410 0050 10F0020F 	    tst r0,#2 // EOC bit test 
 2411 0054 FBD0     	    beq adc_loop
 2412 0056 C96C     	    ldr r1,[r1,#ADC_DR]
 2413 0058 4FF01B00 	    mov r0,#TK_INTGR    
 2414 005c 7047     	    _RET
 2415              	
 2416              	/***********************************
 2417              	  BASIC: ADC 1|0
 2418              	  enable|disable analog digital converter 
 2419              	  freq -> of conversion
 2420              	*****************************************/
 2421 005e 00BF     	    _FUNC adc 
 2422 0060 00B5FFF7 	    _CALL arg_list 
 2422      FEFF5DF8 
 2422      04EB
 2423 006a 0128     	    cmp r0,#1 
ARM GAS  tinyBasic.s 			page 70


 2424 006c 7FF4FEAF 	    bne syntax_error 
 2425 0070 5CF8041B 	    _POP r1 
 2426 0074 E9B1     	1:  cbz r1,adc_off 
 2427              	adc_on:
 2428 0076 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2428      C4F20201 
 2429 007e 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2430 0080 40F40070 	    orr r0,#(1<<9) //ADC1ON clock gating 
 2431 0084 8861     	    str r0,[r1,#RCC_APB2ENR]
 2432 0086 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR
 2432      C4F20101 
 2433 008e 4FF00100 	    _MOV32 r0,1+(1<<23)
 2433      C0F28100 
 2434 0096 8860     	    str r0,[r1,#ADC_CR2]
 2435 0098 42F21070 	    mov r0,#10000
 2436 009c 0138     	1:  subs r0,#1
 2437 009e FDD1     	    bne 1b 
 2438              	    // calibration
 2439 00a0 8868     	    ldr r0,[r1,#ADC_CR2]  
 2440 00a2 40F00400 	    orr r0,#(1<<2) // CAL bit 
 2441 00a6 8860     	    str r0,[r1,#ADC_CR2]
 2442 00a8 8868     	1:  ldr r0,[r1,#ADC_CR2]
 2443 00aa 10F0040F 	    tst r0,#(1<<2)
 2444 00ae FBD1     	    bne 1b     
 2445              	//    _MOV32 r0,0x9249249
 2446              	//    str r0,[r1,#ADC_SMPR2]
 2447              	//    movt r0,#0x24
 2448              	//    str r0,[r1,#ADC_SMPR1]
 2449 00b0 7047     	    _RET 
 2450              	adc_off:
 2451 00b2 4FF41051 	    _MOV32 r1,ADC1_BASE_ADR 
 2451      C4F20101 
 2452 00ba 80EA0000 	    eor r0,r0 
 2453 00be 8860     	    str r0,[r1,#ADC_CR2]
 2454 00c0 4FF48051 	    _MOV32 r1,RCC_BASE_ADR 
 2454      C4F20201 
 2455 00c8 8869     	    ldr r0,[r1,#RCC_APB2ENR]
 2456 00ca 6FF00902 	    mvn r2,#9 
 2457 00ce 00EA0200 	    and r0,r2 //reset ADC1ON clock gating 
 2458 00d2 8861     	    str r0,[r1,#RCC_APB2ENR]
 2459 00d4 7047     	    _RET 
 2460              	
 2461              	
 2462              	/************************************
 2463              	  BASIC: AND(expr1,expr2)
 2464              	  logical ANND bit to between expr1,expr2
 2465              	************************************/
 2466 00d6 00BF     	    _FUNC bit_and
 2467 00d8 00B5FFF7 	    _CALL func_args 
 2467      FEFF5DF8 
 2467      04EB
 2468 00e2 0228     	    cmp r0,#2 
 2469 00e4 7FF4FEAF 	    bne syntax_error 
 2470 00e8 5CF8040B 	    _POP r0 
 2471 00ec 5CF8041B 	    _POP r1 
 2472 00f0 01EA0001 	    and r1,r0 
 2473 00f4 4FF01B00 	    mov r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 71


 2474 00f8 7047     	    _RET
 2475              	
 2476              	/*******************************************
 2477              	  BASIC: ASC(string|char)
 2478              	  return ASCII code of char of first char 
 2479              	  of string 
 2480              	*******************************************/
 2481 00fa 00BF     	    _FUNC ascii
 2482 00fc 4FF00500 	    mov r0,#TK_LPAREN 
 2483 0100 00B5FFF7 	    _CALL expect 
 2483      FEFF5DF8 
 2483      04EB
 2484 010a 00B5FFF7 	    _CALL next_token 
 2484      FEFF5DF8 
 2484      04EB
 2485 0114 1C28     	    cmp r0,#TK_QSTR
 2486 0116 0AD0     	    beq 2f 
 2487 0118 1328     	    cmp r0,#TK_CHAR 
 2488 011a 00D1     	    bne 1f  
 2489 011c 08E0     	    b 9f
 2490 011e 1628     	1:  cmp r0,#TK_CFUNC 
 2491 0120 0846     	    mov r0,r1 
 2492 0122 00B5FFF7 	    _CALL execute
 2492      FEFF5DF8 
 2492      04EB
 2493 012c 00E0     	    b 9f      
 2494 012e 0978     	2:  ldrb r1,[r1]
 2495 0130 4CF8041D 	9:  _PUSH r1 
 2496 0134 4FF00600 	    mov r0,#TK_RPAREN 
 2497 0138 00B5FFF7 	    _CALL expect 
 2497      FEFF5DF8 
 2497      04EB
 2498 0142 4FF01B00 	    mov r0,#TK_INTGR 
 2499 0146 5CF8041B 	    _POP r1 
 2500 014a 7047     	    _RET
 2501              	
 2502              	/*******************************************
 2503              	  BASIC: AWU time_sleep  
 2504              	  enable LSI and IWDG and place MCU in 
 2505              	  deep sleep. IDWG wakeup MCU 
 2506              	******************************************/
 2507              	    _FUNC awu
 2508 014c 00B5FFF7 	    _CALL arg_list
 2508      FEFF5DF8 
 2508      04EB
 2509 0156 0128     	    cmp r0,#1 
 2510 0158 7FF4FEAF 	    bne syntax_error 
 2511 015c 4FF48051 	    _MOV32 r1,RCC_BASE_ADR
 2511      C4F20201 
 2512 0164 486A     	    ldr r0,[r1,#RCC_CSR]
 2513              	// enable LSI 
 2514 0166 80F00100 	    eor r0,#1
 2515 016a 4862     	    str r0,[r1,#RCC_CSR]
 2516              	// wait for LSIRDY 
 2517 016c 486A     	1:  ldr r0,[r1,#RCC_CSR]
 2518 016e 10F0020F 	    tst r0,#2 // LSIRDY bit 
 2519 0172 FBD0     	    beq 1b 
ARM GAS  tinyBasic.s 			page 72


 2520              	// configure IWDG
 2521              	// compute values for IWDG_PR and IWDG_RLR 
 2522 0174 5CF8042B 	    _POP r2 // time_sleep in msec. 
 2523 0178 4FF00A03 	    mov r3,#10 // Flsi=40Khz but smallest divisor is 4 
 2524 017c 03FB02F2 	    mul r2,r3 
 2525 0180 83EA0303 	    eor r3,r3
 2526 0184 B2F5005F 	2:  cmp r2,#8192 
 2527 0188 04D4     	    bmi 3f 
 2528 018a 4FEA5202 	    lsr r2,#1 
 2529 018e 03F10103 	    add r3,#1
 2530 0192 F7E7     	    b 2b
 2531              	// initialize IWDG      
 2532 0194 4FF44051 	3:  _MOV32 r1,IWDG_BASE_ADR
 2532      C4F20001 
 2533 019c 45F25550 	    mov r0,0x5555 // enable register writing
 2534 01a0 0860     	    str r0,[r1,#IWDG_KR]
 2535 01a2 4B60     	    str r3,[r1,#IWDG_PR]
 2536 01a4 8A60     	    str r2,[r1,#IWDG_RLR]
 2537 01a6 4CF6CC40 	    mov r0,#0xcccc // start IWDG 
 2538 01aa 0860     	    str r0,[r1,#IWDG_KR]
 2539 01ac 01F0A2B8 	    b sleep // place MCU in deep sleep
 2540 01b0 7047     	    _RET
 2541              	
 2542              	/********************************************
 2543              	  BASIC: BIT(expr)
 2544              	  expr must be between 0..31 and is used 
 2545              	  to create 1 bit mask at that position
 2546              	*******************************************/
 2547 01b2 00BF     	    _FUNC bitmask
 2548 01b4 00B5FFF7 	    _CALL func_args
 2548      FEFF5DF8 
 2548      04EB
 2549 01be 0128     	    cmp r0,#1 
 2550 01c0 7FF4FEAF 	    bne syntax_error 
 2551 01c4 5CF8040B 	    _POP r0
 2552 01c8 4FF00101 	    mov r1,#1
 2553 01cc 01FA00F1 	    lsl r1,r0 
 2554 01d0 4FF01B00 	9:  mov r0,#TK_INTGR
 2555 01d4 7047     	    _RET 
 2556              	
 2557              	  
 2558              	  /*********************************
 2559              	   BASIC: BRES adr, mask   
 2560              	   reset bits [adr]= [adr] & ~mask  
 2561              	   input:
 2562              	     none 
 2563              	    output;
 2564              	      none 
 2565              	    use:
 2566              	      T1   temp
 2567              	      T2   temp 
 2568              	*******************************/     
 2569 01d6 00BF     	  _FUNC bit_reset
 2570 01d8 00B5FFF7 	    _CALL arg_list 
 2570      FEFF5DF8 
 2570      04EB
 2571 01e2 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 73


 2572 01e4 01D0     	    beq 1f 
 2573 01e6 FFF7FEBF 	    b syntax_error 
 2574 01ea 5CF8041B 	1:  _POP r1 //mask 
 2575 01ee 5CF8040B 	    _POP r0 //address 
 2576 01f2 D0F80090 	    ldr T2,[r0] 
 2577 01f6 81F0FF31 	    eor r1,#-1 // ~mask 
 2578 01fa 01EA0901 	    and r1,T2
 2579 01fe 0160     	    str r1,[r0]
 2580 0200 7047     	    _RET  
 2581              	
 2582              	
 2583              	/*********************************
 2584              	   BASIC: BSET adr, mask   
 2585              	   reset bits [adr]= [adr] & ~mask  
 2586              	   input:
 2587              	      none 
 2588              	    output;
 2589              	      none 
 2590              	    use:
 2591              	      T1   temp
 2592              	      T2   temp  
 2593              	*******************************/     
 2594 0202 00BF     	    _FUNC bit_set
 2595 0204 00B5FFF7 	    _CALL arg_list 
 2595      FEFF5DF8 
 2595      04EB
 2596 020e 0228     	    cmp r0,#2 
 2597 0210 01D0     	    beq 1f 
 2598 0212 FFF7FEBF 	    b syntax_error 
 2599 0216 5CF8041B 	1:  _POP r1 //mask 
 2600 021a 5CF8040B 	    _POP r0 //address 
 2601 021e D0F80090 	    ldr T2,[r0] 
 2602 0222 41EA0901 	    orr r1,T2
 2603 0226 0160     	    str r1,[r0]
 2604 0228 7047     	    _RET 
 2605              	
 2606              	  /*********************************
 2607              	   BASIC: BTOGL adr, mask   
 2608              	   reset bits [adr]= [adr] & ~mask  
 2609              	   input:
 2610              	     r0    adr 
 2611              	     r1    mask 
 2612              	    output;
 2613              	      none 
 2614              	    use:
 2615              	      T1   temp
 2616              	      T2   temp  
 2617              	*******************************/     
 2618 022a 00BF     	  _FUNC bit_toggle
 2619 022c 00B5FFF7 	    _CALL arg_list 
 2619      FEFF5DF8 
 2619      04EB
 2620 0236 0228     	    cmp r0,#2 
 2621 0238 01D0     	    beq 1f 
 2622 023a FFF7FEBF 	    b syntax_error 
 2623 023e 5CF8041B 	1:  _POP r1 //mask 
 2624 0242 5CF8040B 	    _POP r0 //address 
ARM GAS  tinyBasic.s 			page 74


 2625 0246 D0F80090 	    ldr T2,[r0] 
 2626 024a 81EA0901 	    eor r1,T2
 2627 024e 0160     	    str r1,[r0]
 2628 0250 7047     	    _RET  
 2629              	
 2630              	/********************************
 2631              	  BASIC: BTEST(addr,bit)
 2632              	  return bit state at address
 2633              	********************************/
 2634 0252 00BF     	    _FUNC bit_test
 2635 0254 00B5FFF7 	    _CALL func_args
 2635      FEFF5DF8 
 2635      04EB
 2636 025e 0228     	    cmp r0,#2 
 2637 0260 7FF4FEAF 	    bne syntax_error 
 2638 0264 5CF8041B 	    _POP r1
 2639 0268 4FF00100 	    mov r0,#1
 2640 026c 01F01F01 	    and r1,#31  
 2641 0270 21B1     	1:  cbz r1, 2f
 2642 0272 4FEA4000 	    lsl r0,#1
 2643 0276 A1F10101 	    sub r1,#1
 2644 027a F9E7     	    b 1b 
 2645 027c 5CF8041B 	2:  _POP r1
 2646 0280 0968     	    ldr r1,[r1]
 2647 0282 01EA0001 	    and r1,r0 
 2648 0286 09B1     	    cbz r1,9f 
 2649 0288 4FF00101 	    mov r1,#1
 2650 028c 4FF01B00 	9:  mov r0,#TK_INTGR    
 2651 0290 7047     	    _RET 
 2652              	
 2653              	/********************************
 2654              	  BASIC: CLS 
 2655              	  clear terminal screen move cursor 
 2656              	  home 
 2657              	************************************/
 2658 0292 00BF     	    _FUNC cls 
 2659 0294 00B5FFF7 	    _CALL clear_screen
 2659      FEFF5DF8 
 2659      04EB
 2660 029e 7047     	    _RET 
 2661              	
 2662              	/*********************************
 2663              	  BASIC: CHAR(expr)
 2664              	  convert expr in character 
 2665              	********************************/
 2666              	    _FUNC char
 2667 02a0 00B5FFF7 	    _CALL func_args
 2667      FEFF5DF8 
 2667      04EB
 2668 02aa 0128     	    cmp r0,#1
 2669 02ac 7FF4FEAF 	    bne syntax_error 
 2670 02b0 5CF8041B 	    _POP r1 
 2671 02b4 01F07F01 	    and r1,#127 
 2672 02b8 4FF01300 	    mov r0,#TK_CHAR
 2673 02bc 7047     	    _RET 
 2674              	
 2675              	/**********************************
ARM GAS  tinyBasic.s 			page 75


 2676              	  BASIC: CONST label=expr [,!label=expr]
 2677              	  define constants constants are 
 2678              	  store at end of BASIC code.
 2679              	  use:
 2680              	    T1   *location 
 2681              	    T2   *bound 
 2682              	*********************************/
 2683 02be 00BF     	    _FUNC const
 2684 02c0 206C10F0 	    _RTO 
 2684      010F03D1 
 2684      4FF00700 
 2684      FFF7FEBF 
 2685 02d0 D4F8D080 	    ldr T1,[UPP,#HERE]
 2686 02d4 DFF8F896 	    ldr T2,pad_adr  
 2687 02d8 C845     	1:  cmp T1,T2 
 2688 02da 03D4     	    bmi 2f 
 2689 02dc 4FF00100 	    mov r0,#ERR_MEM_FULL 
 2690 02e0 FFF7FEBF 	    b tb_error 
 2691 02e4 00B5FFF7 	2:  _CALL next_token 
 2691      FEFF5DF8 
 2691      04EB
 2692 02ee 1A28     	    cmp r0,#TK_LABEL 
 2693 02f0 7FF4FEAF 	    bne syntax_error 
 2694 02f4 41F00041 	    orr r1,#(1<<31) // this label identify a constant 
 2695 02f8 4CF8041D 	    _PUSH r1 
 2696 02fc 4FF00D00 	    mov r0,#TK_EQUAL
 2697 0300 00B5FFF7 	    _CALL expect
 2697      FEFF5DF8 
 2697      04EB
 2698 030a 00B5FFF7 	    _CALL expression  
 2698      FEFF5DF8 
 2698      04EB
 2699 0314 1B28     	    cmp r0,#TK_INTGR
 2700 0316 7FF4FEAF 	    bne syntax_error
 2701 031a 5CF8040B 	    _POP r0 
 2702 031e 48F8040B 	    str r0,[T1],#4
 2703 0322 48F8041B 	    str r1,[T1],#4 
 2704 0326 C4F8D080 	    str T1,[UPP,#HERE]
 2705 032a 00B5FFF7 	    _CALL next_token
 2705      FEFF5DF8 
 2705      04EB
 2706 0334 0228     	    cmp r0,#TK_COMMA 
 2707 0336 CFD0     	    beq 1b 
 2708 0338 D4F800A0 	    _UNGET_TOKEN
 2708      D4F808B0 
 2709              	9:  
 2710 0340 7047     	    _RET 
 2711              	
 2712              	/*****************************
 2713              	  BASIC: READ 
 2714              	  read next data item 
 2715              	  the value can be assigned to
 2716              	  variable or used in expression
 2717              	*****************************/
 2718 0342 00BF     	    _FUNC read
 2719 0344 206C10F0 	    _RTO
 2719      010F03D1 
ARM GAS  tinyBasic.s 			page 76


 2719      4FF00700 
 2719      FFF7FEBF 
 2720 0354 6069     	    ldr r0,[UPP,#DATALEN] // line length 
 2721 0356 E168     	    ldr r1,[UPP,#DATAPTR] // line address 
 2722 0358 2269     	    ldr r2,[UPP,#DATA] // item on line  
 2723 035a 8242     	    cmp r2,r0
 2724 035c 18D0     	    beq seek_next
 2725 035e 4FF00103 	1:  mov r3,#1 
 2726 0362 885C     	    ldrb r0,[r1,r2]
 2727 0364 02F10102 	    add r2,#1
 2728 0368 0028     	    cmp r0,#TK_NONE
 2729 036a 11D0     	    beq seek_next
 2730 036c 0828     	    cmp r0,#TK_MINUS 
 2731 036e 05D1     	    bne 2f 
 2732 0370 4FF0FF33 	    mov r3,#-1
 2733 0374 885C     	    ldrb r0,[r1,r2]
 2734 0376 02F10102 	    add r2,#1
 2735 037a 01E0     	    b 3f  
 2736 037c 0228     	2:  cmp r0,#TK_COMMA
 2737 037e EED0     	    beq 1b  
 2738 0380 1B28     	3:  cmp r0,#TK_INTGR 
 2739 0382 7FF4FEAF 	    bne syntax_error  
 2740 0386 8958     	    ldr r1,[r1,r2]
 2741 0388 02F10402 	    add r2,#4
 2742 038c 2261     	    str r2,[UPP,#DATA]
 2743 038e 12E0     	    b 9f  
 2744              	seek_next: // is next line data ?
 2745 0390 8878     	    ldrb r0,[R1,#2]
 2746 0392 0144     	    add r1,r0 
 2747 0394 C878     	    ldrb r0,[R1,#3]
 2748 0396 1728     	    cmp r0,#TK_CMD
 2749 0398 09D1     	    bne 2f 
 2750 039a 0879     	    ldrb r0,[r1,#4]
 2751 039c 0F28     	    cmp r0,#DATA_IDX 
 2752 039e 06D1     	    bne 2f 
 2753 03a0 E160     	    str r1,[UPP,#DATAPTR]
 2754 03a2 8878     	    ldrb r0,[r1,#2]
 2755 03a4 6061     	    str  r0,[UPP,#DATALEN]
 2756 03a6 4FF00502 	    mov r2,#5 
 2757 03aa 2261     	    str r2,[UPP,#DATA]
 2758 03ac D7E7     	    b 1b 
 2759 03ae 4FF00C00 	2:  mov r0,#ERR_NO_DATA
 2760 03b2 FFF7FEBF 	    b tb_error 
 2761 03b6 7047     	9:  _RET 
 2762              	
 2763              	/********************************
 2764              	  BASIC: RESTORE [line#]
 2765              	  set data pointer to first data line 
 2766              	  or a specified line number 
 2767              	********************************/
 2768              	    _FUNC restore
 2769 03b8 206C10F0 	    _RTO 
 2769      010F03D1 
 2769      4FF00700 
 2769      FFF7FEBF 
 2770 03c8 00B5FFF7 	    _CALL next_token 
 2770      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 77


 2770      04EB
 2771 03d2 1B28     	    cmp r0,#TK_INTGR 
 2772 03d4 05D0     	    beq 0f 
 2773 03d6 D4F800A0 	    _UNGET_TOKEN
 2773      D4F808B0 
 2774 03de 4FF00001 	    mov r1,#0 
 2775 03e2 40F61773 	0:  mov r3,#(TK_CMD+(DATA_IDX<<8))
 2776 03e6 0A46     	    mov r2,r1 
 2777 03e8 216B     	    ldr r1,[UPP,#TXTBGN]
 2778 03ea D4F83480 	    ldr T1,[UPP,#TXTEND]
 2779 03ee 4145     	1:  cmp r1,T1 
 2780 03f0 11D5     	    bpl no_data_line 
 2781 03f2 B1F80300 	    ldrh r0,[r1,#3]
 2782 03f6 9842     	    cmp r0,r3 
 2783 03f8 0AD1     	    bne try_next_line
 2784              	// this is a data line
 2785 03fa 12B1     	    cbz r2,2f 
 2786 03fc 0888     	    ldrh r0,[r1]
 2787 03fe 9042     	    cmp r0,r2 
 2788 0400 06D1     	    bne try_next_line
 2789 0402 E160     	2:  str r1,[UPP,#DATAPTR]
 2790 0404 8878     	    ldrb r0,[r1,#2]
 2791 0406 6061     	    str r0,[UPP,#DATALEN]
 2792 0408 4FF00500 	    mov r0,#5 
 2793 040c 2061     	    str r0,[UPP,#DATA]
 2794 040e 07E0     	    b 9f
 2795              	try_next_line:
 2796 0410 8878     	    ldrb r0,[r1,#2]
 2797 0412 0144     	    add r1,r0 
 2798 0414 EBE7     	    b 1b 
 2799              	no_data_line:
 2800 0416 80EA0000 	    eor r0,r0 
 2801 041a E060     	    str r0,[UPP,#DATAPTR]
 2802 041c 2061     	    str r0,[UPP,#DATA]
 2803 041e 6061     	    str r0,[UPP,#DATALEN]
 2804 0420 7047     	9:  _RET 
 2805              	
 2806              	/***********************************
 2807              	  BASIC: DEC 
 2808              	  switch base to decimal 
 2809              	***********************************/
 2810 0422 00BF     	    _FUNC dec_base
 2811 0424 4FF00A00 	    mov r0,#10
 2812 0428 A061     	    str r0,[UPP,#BASE]
 2813 042a 7047     	    _RET 
 2814              	
 2815              	/***************************************
 2816              	  BASIC: DO 
 2817              	  initialize a DO..UNTIL loop 
 2818              	***************************************/
 2819              	    _FUNC do_loop
 2820 042c 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2821 0430 7047     	    _RET 
 2822              	
 2823              	
 2824              	/****************************************
 2825              	  BASIC: DUMP adr, count 
ARM GAS  tinyBasic.s 			page 78


 2826              	    command line only  
 2827              	    print memory content in hexadecimal 
 2828              	    16 bytes per row 
 2829              	    ouput:
 2830              	      none 
 2831              	    use:
 2832              	      r2   byte counter  
 2833              	****************************************/
 2834 0432 00BF     	    _FUNC dump 
 2835 0434 206C10F0 	    _CLO 
 2835      010F03D0 
 2835      4FF00700 
 2835      FFF7FEBF 
 2836 0444 00B5FFF7 	    _CALL arg_list 
 2836      FEFF5DF8 
 2836      04EB
 2837 044e 0228     	    cmp r0,#2
 2838 0450 7FF4FEAF 	    bne syntax_error 
 2839 0454 5CF8042B 	    _POP r2   // count 
 2840 0458 5CF8040B 	    _POP  r0  // adr
 2841              	dump01:
 2842 045c 00B500F0 	    _CALL print_dump_header 
 2842      0DF85DF8 
 2842      04EB
 2843 0466 4FF01001 	1:  mov r1,#16
 2844 046a 00B5FFF7 	    _CALL prt_row 
 2844      FEFF5DF8 
 2844      04EB
 2845 0474 103A     	    subs r2,#16 
 2846 0476 F6D5     	    bpl 1b 
 2847 0478 7047     	    _RET 
 2848              	
 2849              	/********************************
 2850              	   print_dump_header
 2851              	********************************/
 2852 047a 00BF     	    _FUNC print_dump_header
 2853 047c 2DE90103 	    push {r0,T1,T2}
 2854 0480 4FF00C00 	    mov r0,#12 
 2855 0484 00B5FFF7 	    _CALL cursor_x 
 2855      FEFF5DF8 
 2855      04EB
 2856 048e 4FF00000 	    mov r0,#0
 2857 0492 4FF01009 	    mov T2,#16
 2858 0496 8046     	1:  mov T1,r0 
 2859 0498 00B5FFF7 	    _CALL print_hex 
 2859      FEFF5DF8 
 2859      04EB
 2860 04a2 08F10100 	    add r0,T1,#1  
 2861 04a6 4845     	    cmp r0,T2 
 2862 04a8 F5D4     	    bmi 1b 
 2863 04aa 00B5FFF7 	    _CALL cr
 2863      FEFF5DF8 
 2863      04EB
 2864 04b4 4FF03D00 	    mov r0,#'='
 2865 04b8 4FF04F08 	    mov T1,#79
 2866 04bc 00B5FFF7 	2:  _CALL uart_putc
 2866      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 79


 2866      04EB
 2867 04c6 B8F10108 	    subs T1,#1 
 2868 04ca F7D1     	    bne 2b     
 2869 04cc 00B5FFF7 	    _CALL cr
 2869      FEFF5DF8 
 2869      04EB
 2870 04d6 BDE80103 	    pop {r0,T1,T2}
 2871 04da 7047     	    _RET 
 2872              	
 2873              	
 2874              	/*******************************
 2875              	  BASIC: END 
 2876              	  exit program 
 2877              	******************************/ 
 2878              	    _FUNC cmd_end
 2879 04dc FFF7FEBF 	    b warm_start 
 2880 04e0 7047     	    _RET 
 2881              	
 2882              	/*******************************************
 2883              	  BASIC: STORE adr, value 
 2884              	  write value to user space in flash memory 
 2885              	*********************************************/
 2886 04e2 00BF     	    _FUNC store 
 2887 04e4 00B5FFF7 	    _CALL arg_list 
 2887      FEFF5DF8 
 2887      04EB
 2888 04ee 0228     	    cmp r0,#2 
 2889 04f0 7FF4FEAF 	    bne syntax_error 
 2890 04f4 BCE80300 	    ldmia DP!,{r0,r1}
 2891 04f8 DFF83020 	    ldr r2,user_space
 2892 04fc 9142     	    cmp r1,r2 
 2893 04fe 03D5     	    bpl 1f 
 2894 0500 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 2895 0504 FFF7FEBF 	    b tb_error 
 2896 0508 02F58062 	1:  add r2,#1024 
 2897 050c 9142     	    cmp r1,r2 
 2898 050e F7D5     	    bpl 0b 
 2899 0510 00B5FFF7 	    _CALL flash_store 
 2899      FEFF5DF8 
 2899      04EB
 2900 051a 7047     	    _RET 
 2901              	
 2902              	/**************************************************
 2903              	  BASIC: ERASE 
 2904              	  erase user space page 
 2905              	*************************************************/
 2906              	    _FUNC erase 
 2907 051c DFF80C00 	    ldr r0,user_space 
 2908 0520 00B5FFF7 	    _CALL erase_page 
 2908      FEFF5DF8 
 2908      04EB
 2909 052a 7047     	    _RET 
 2910 052c 00000000 	user_space: .word user 
 2911              	
 2912              	
 2913              	/**************************************************
 2914              	  BASIC: FOR var=expr TO expr [STEP exp] ... NEXT 
ARM GAS  tinyBasic.s 			page 80


 2915              	  introdure FOR...NEXT loop 
 2916              	**************************************************/
 2917              	    _FUNC for
 2918 0530 2CE9E000 	    stmdb r12!,{VADR,LIMIT,INCR}
 2919 0534 4FF00107 	    mov INCR,#1
 2920 0538 00B5FFF7 	    _CALL next_token
 2920      FEFF5DF8 
 2920      04EB
 2921 0542 1428     	    cmp r0,#TK_VAR
 2922 0544 7FF4FEAF 	    bne syntax_error
 2923 0548 02B4     	    push {r1} 
 2924 054a 00B500F0 	    _CALL let_var 
 2924      2FF95DF8 
 2924      04EB
 2925 0554 20BC     	    pop {VADR}
 2926 0556 4FEA8505 	    lsl VADR,#2
 2927 055a 2544     	    add VADR,UPP 
 2928 055c 05F16005 	    add VADR,#VARS 
 2929 0560 7047     	    _RET 
 2930              	
 2931              	/***************************************
 2932              	  BASIC: TO expr 
 2933              	  set limit of FOR...NEXT loop 
 2934              	**************************************/
 2935 0562 00BF     	    _FUNC to
 2936 0564 00B5FFF7 	    _CALL expression 
 2936      FEFF5DF8 
 2936      04EB
 2937 056e 1B28     	    cmp r0,#TK_INTGR
 2938 0570 7FF4FEAF 	    bne syntax_error 
 2939 0574 0E46     	    mov LIMIT,r1
 2940              	    // save loop back parameters 
 2941 0576 2CE9000C 	    stmdb DP!,{IN,BPTR}
 2942 057a 7047     	    _RET 
 2943              	
 2944              	/********************************************
 2945              	  BASIC: STEP expr 
 2946              	  set increment for FOR...NEXT loop 
 2947              	********************************************/
 2948              	    _FUNC step
 2949 057c 00B5FFF7 	    _CALL expression 
 2949      FEFF5DF8 
 2949      04EB
 2950 0586 1B28     	    cmp r0,#TK_INTGR
 2951 0588 7FF4FEAF 	    bne syntax_error 
 2952 058c 0F46     	    mov INCR,r1
 2953              	    // replace parameters left by TO
 2954 058e 8CE8000C 	    stmia DP, {IN,BPTR}
 2955 0592 7047     	    _RET 
 2956              	
 2957              	/********************************************
 2958              	  BASIC: NEXT var 
 2959              	  incrment FOR...NEXT loop variable
 2960              	  exit if variable cross LIMIT 
 2961              	********************************************/
 2962              	    _FUNC next
 2963 0594 00B5FFF7 	    _CALL next_token 
ARM GAS  tinyBasic.s 			page 81


 2963      FEFF5DF8 
 2963      04EB
 2964 059e 1428     	    cmp r0,#TK_VAR 
 2965 05a0 7FF4FEAF 	    bne syntax_error 
 2966 05a4 4FEA8101 	    lsl r1,#2 
 2967 05a8 2144     	    add r1,UPP 
 2968 05aa 01F16001 	    add r1,#VARS 
 2969 05ae A942     	    cmp r1,VADR
 2970 05b0 7FF4FEAF 	    bne syntax_error 
 2971 05b4 2868     	    ldr r0,[VADR]
 2972 05b6 3844     	    add r0,INCR 
 2973 05b8 2860     	    str r0,[VADR]
 2974 05ba 002F     	    cmp INCR,#0
 2975 05bc 02D4     	    bmi 2f
 2976 05be B042     	    cmp r0,LIMIT 
 2977 05c0 02DC     	    bgt 8f  
 2978 05c2 07E0     	    b 9f  
 2979 05c4 B042     	2:  cmp r0,LIMIT 
 2980 05c6 05DA     	    bge 9f  
 2981              	8: // exit for...next
 2982              	  //  drop branch parameters
 2983 05c8 4FF00800 	    _DROP 2
 2983      8444
 2984              	  // restore outer loop parameters
 2985 05ce BCE8E000 	    ldmia DP!,{VADR,LIMIT,INCR}
 2986 05d2 7047     	    _RET 
 2987 05d4 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 2988 05d8 9BF80200 	    ldrb r0,[BPTR,#2]
 2989 05dc 6060     	    str r0,[UPP,#COUNT]
 2990 05de 00B5FFF7 	    _CALL show_trace 
 2990      FEFF5DF8 
 2990      04EB
 2991 05e8 7047     	    _RET 
 2992              	
 2993              	
 2994              	/*********************************
 2995              	  BASIC: GOSUB expr 
 2996              	  call a subroutine at line# 
 2997              	*********************************/
 2998 05ea 00BF     	    _FUNC gosub
 2999 05ec 00B5FFF7 	    _CALL search_target 
 2999      FEFF5DF8 
 2999      04EB
 3000 05f6 2DE9000C 	    push {IN,BPTR}
 3001              	target:
 3002 05fa 8346     	    mov BPTR,r0 
 3003 05fc 4FF0030A 	    mov IN,#3 
 3004 0600 9BF80200 	    ldrb r0,[BPTR,#2]
 3005 0604 6060     	    str r0,[UPP,#COUNT]
 3006 0606 00B5FFF7 	    _CALL show_trace 
 3006      FEFF5DF8 
 3006      04EB
 3007 0610 7047     	    _RET 
 3008              	
 3009              	/**********************************
 3010              	  BASIC: RETURN 
 3011              	  leave a subroutine 
ARM GAS  tinyBasic.s 			page 82


 3012              	*********************************/
 3013 0612 00BF     	    _FUNC return 
 3014 0614 BDE8000C 	    pop {IN,BPTR}
 3015 0618 9BF80200 	    ldrb r0,[BPTR,#2]
 3016 061c 6060     	    str r0,[UPP,#COUNT]
 3017 061e 00B5FFF7 	    _CALL show_trace 
 3017      FEFF5DF8 
 3017      04EB
 3018 0628 7047     	    _RET 
 3019              	
 3020              	/**********************************
 3021              	  BASIC: GOTO expr 
 3022              	  go to line # | label 
 3023              	**********************************/
 3024 062a 00BF     	    _FUNC goto
 3025 062c 00B5FFF7 	    _CALL search_target 
 3025      FEFF5DF8 
 3025      04EB
 3026 0636 E0E7     	    b target  
 3027              	
 3028              	/***************************************
 3029              	  BASIC: HEX 
 3030              	  set numeric base to hexadecimal 
 3031              	***************************************/
 3032              	    _FUNC hex_base
 3033 0638 4FF01000 	    mov r0,#16 
 3034 063c A061     	    str r0,[UPP,#BASE]
 3035 063e 7047     	    _RET 
 3036              	
 3037              	/**********************************************
 3038              	  BASIC: IF relation THEN statement
 3039              	  execute statement only if relation is true
 3040              	*********************************************/
 3041              	    _FUNC if
 3042 0640 00B5FFF7 	    _CALL relation 
 3042      FEFF5DF8 
 3042      04EB
 3043 064a 09B9     	    cbnz r1,9f 
 3044 064c D4F804A0 	    ldr IN,[UPP,#COUNT]
 3045 0650 7047     	9:  _RET 
 3046              	
 3047              	/*******************************************************
 3048              	  BASIC: THEN statement
 3049              	  statements following THEN are executed if relation is !=0
 3050              	  optional, retained for compatibility.
 3051              	******************************************************/
 3052 0652 00BF     	    _FUNC then 
 3053              	// do nothing 
 3054 0654 7047     	    _RET
 3055              	
 3056              	/****************************************
 3057              	  BASIC: INPUT [string]var [,[string]var]+
 3058              	  prompt user for variable value
 3059              	  use:
 3060              	    r2   
 3061              	    T1   variable indice 
 3062              	***************************************/
ARM GAS  tinyBasic.s 			page 83


 3063 0656 00BF     	     _FUNC input_var
 3064 0658 2DE90401 	    push {r2,T1}
 3065 065c 00B5FFF7 	1:  _CALL next_token 
 3065      FEFF5DF8 
 3065      04EB
 3066 0666 0228     	    cmp r0,#2
 3067 0668 71D4     	    bmi 8f 
 3068 066a 1C28     	    cmp r0,#TK_QSTR 
 3069 066c 11D1     	    bne 2f 
 3070 066e 0846     	    mov r0,r1
 3071 0670 DFF8EC10 	    ldr r1,str_buffer
 3072 0674 00B5FFF7 	    _CALL strcpy
 3072      FEFF5DF8 
 3072      04EB
 3073 067e 4FF01400 	    mov r0,#TK_VAR   
 3074 0682 00B5FFF7 	    _CALL expect 
 3074      FEFF5DF8 
 3074      04EB
 3075 068c 8846     	    mov T1,r1 
 3076 068e 3448     	    ldr r0,str_buffer 
 3077 0690 08E0     	    b 3f 
 3078 0692 1428     	2:  cmp r0,#TK_VAR 
 3079 0694 7FF4FEAF 	    bne syntax_error     
 3080 0698 8846     	    mov T1,r1 
 3081 069a 01F14100 	    add r0,r1,#'A' 
 3082 069e 3049     	    ldr r1,str_buffer
 3083 06a0 0880     	    strh r0,[r1]
 3084 06a2 0846     	    mov r0,r1 
 3085 06a4 00B5FFF7 	3:  _CALL uart_puts  
 3085      FEFF5DF8 
 3085      04EB
 3086 06ae 4FF03D00 	    mov r0,#'='
 3087 06b2 00B5FFF7 	    _CALL uart_putc
 3087      FEFF5DF8 
 3087      04EB
 3088 06bc DFF89C00 	    ldr r0,input_buffer
 3089 06c0 4FF02201 	    mov r1,#34 
 3090 06c4 00B5FFF7 	    _CALL readln
 3090      FEFF5DF8 
 3090      04EB
 3091 06ce 79B3     	    cbz r1,6f
 3092 06d0 0178     	    ldrb r1,[r0]
 3093 06d2 01B4     	    push {r0}
 3094 06d4 0846     	    mov r0,r1
 3095 06d6 00B5FFF7 	    _CALL is_letter 
 3095      FEFF5DF8 
 3095      04EB
 3096 06e0 01BC     	    pop {r0}
 3097 06e2 02D1     	    bne 3f 
 3098 06e4 01F05F01 	    and r1,#0x5f // uppercase  
 3099 06e8 24E0     	    b 7f 
 3100 06ea 4FF00102 	3:  mov r2,#1
 3101 06ee 2D29     	    cmp r1,#'-'
 3102 06f0 04D1     	    bne 3f 
 3103 06f2 4FF0FF32 	    mov r2,#-1 
 3104 06f6 00F10100 	    add r0,#1 
 3105 06fa 0DE0     	    b 4f  
ARM GAS  tinyBasic.s 			page 84


 3106 06fc 2429     	3:  cmp r1,#'$'
 3107 06fe 04D1     	    bne 3f 
 3108 0700 4FF01001 	    mov r1,#16
 3109 0704 00F10100 	    add r0,#1  
 3110 0708 08E0     	    b 5f 
 3111 070a 2629     	3:  cmp r1,#'&' 
 3112 070c 04D1     	    bne 4f 
 3113 070e 4FF00201 	    mov r1,#2
 3114 0712 00F10100 	    add r0,#1 
 3115 0716 01E0     	    b 5f 
 3116 0718 4FF00A01 	4:  mov r1,#10 
 3117 071c 00B5FFF7 	5:  _CALL atoi 
 3117      FEFF5DF8 
 3117      04EB
 3118 0726 18B9     	    cbnz r0,6f
 3119 0728 4FF00A00 	    mov r0,#ERR_BAD_VALUE
 3120 072c FFF7FEBF 	    b tb_error
 3121 0730 02FB01F1 	6:  mul r1,r2 
 3122 0734 4046     	7:  mov r0,T1 
 3123 0736 00B5FFF7 	    _CALL set_var
 3123      FEFF5DF8 
 3123      04EB
 3124 0740 00B5FFF7 	    _CALL next_token
 3124      FEFF5DF8 
 3124      04EB
 3125 074a 0228     	    cmp r0,#TK_COMMA 
 3126 074c 86D0     	    beq 1b 
 3127 074e D4F800A0 	8:  _UNGET_TOKEN          
 3127      D4F808B0 
 3128 0756 BDE80401 	9:  pop {r2,T1}       
 3129 075a 7047     	    _RET 
 3130 075c 00000000 	input_buffer: .word _tib 
 3131 0760 00000000 	str_buffer: .word _pad 
 3132              	
 3133              	
 3134              	/*****************************************
 3135              	  BASIC: INVERT(expr)
 3136              	  return 1's complement of expr
 3137              	****************************************/
 3138              	    _FUNC invert
 3139 0764 00B5FFF7 	    _CALL func_args
 3139      FEFF5DF8 
 3139      04EB
 3140 076e 0128     	    cmp r0,#1 
 3141 0770 7FF4FEAF 	    bne syntax_error
 3142 0774 5CF8041B 	    _POP r1  
 3143 0778 6FEA0101 	    mvn r1,r1
 3144 077c 4FF01B00 	    mov r0,#TK_INTGR
 3145 0780 7047     	    _RET 
 3146              	
 3147              	/*************************************
 3148              	  BASIC: KEY 
 3149              	  wait for a character from console
 3150              	*************************************/
 3151 0782 00BF     	    _FUNC key
 3152 0784 00B5FFF7 	    _CALL uart_getc
 3152      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 85


 3152      04EB
 3153 078e 0146     	    mov r1,r0
 3154 0790 4FF01300 	    mov r0,#TK_CHAR 
 3155 0794 7047     	    _RET  
 3156              	
 3157              	/******************************
 3158              	  BASIC: [LET] var=expr 
 3159              	         [LET] @(expr)=expr
 3160              	  input:
 3161              	    none 
 3162              	  output:
 3163              	    none 
 3164              	  use:
 3165              	
 3166              	****************************/         
 3167 0796 00BF     	    _FUNC let
 3168 0798 00B5FFF7 	    _CALL next_token 
 3168      FEFF5DF8 
 3168      04EB
 3169 07a2 1428     	    cmp r0,#TK_VAR
 3170 07a4 03D0     	    beq let_var 
 3171 07a6 0C28     	    cmp r0,#TK_ARRAY 
 3172 07a8 07D0     	    beq let_array 
 3173 07aa FFF7FEBF 	    b syntax_error 
 3174              	let_var:
 3175 07ae 4FEA8101 	    lsl r1,#2
 3176 07b2 04F16000 	    add r0,UPP,#VARS
 3177 07b6 0844     	    add r0,r1
 3178 07b8 1FE0     	    b 1f 
 3179              	let_array: 
 3180 07ba 4FF00500 	    mov r0,#TK_LPAREN
 3181 07be 00B5FFF7 	    _CALL expect 
 3181      FEFF5DF8 
 3181      04EB
 3182 07c8 00B5FFF7 	    _CALL expression
 3182      FEFF5DF8 
 3182      04EB
 3183 07d2 1B28     	    cmp r0,#TK_INTGR 
 3184 07d4 7FF4FEAF 	    bne syntax_error
 3185 07d8 4CF8041D 	    _PUSH r1 
 3186 07dc 4FF00600 	    mov r0,#TK_RPAREN
 3187 07e0 00B5FFF7 	    _CALL expect 
 3187      FEFF5DF8 
 3187      04EB
 3188 07ea 5CF8041B 	    _POP r1 
 3189 07ee D4F8C800 	    ldr r0,[UPP,#ARRAY_ADR]
 3190 07f2 4FEA8101 	    lsl r1,#2 
 3191 07f6 A0EB0100 	    sub r0,r1 
 3192 07fa 4CF8040D 	1:  _PUSH r0 
 3193 07fe 4FF00D00 	    mov r0,#TK_EQUAL 
 3194 0802 00B5FFF7 	    _CALL expect 
 3194      FEFF5DF8 
 3194      04EB
 3195 080c 00B5FFF7 	    _CALL expression   
 3195      FEFF5DF8 
 3195      04EB
 3196 0816 1B28     	    cmp r0,#TK_INTGR
ARM GAS  tinyBasic.s 			page 86


 3197 0818 7FF4FEAF 	    bne syntax_error   
 3198 081c 5CF8040B 	2:  _POP r0 
 3199 0820 0160     	    str r1,[r0]
 3200 0822 7047     	    _RET  
 3201              	
 3202              	/***************************************
 3203              	  BASIC: LIST [[first]-last]
 3204              	  use:
 3205              	    r2   first line# 
 3206              	    r3   last line#
 3207              	    T1   *line 
 3208              	    T2   TXTEND 
 3209              	**************************************/  
 3210              	    _FUNC list
 3211 0824 206C10F0 	    _CLO
 3211      010F03D0 
 3211      4FF00700 
 3211      FFF7FEBF 
 3212 0834 D4F83080 	    ldr T1,[UPP,#TXTBGN]
 3213 0838 D4F83490 	    ldr T2,[UPP,#TXTEND]
 3214 083c B8F80020 	    ldrh r2,[T1]
 3215 0840 4FF6FF73 	    mov r3,#65535 
 3216 0844 00B5FFF7 	    _CALL next_token 
 3216      FEFF5DF8 
 3216      04EB
 3217 084e 10B3     	    cbz r0,6f 
 3218 0850 1B28     	    cmp r0,#TK_INTGR
 3219 0852 09D1     	    bne 1f 
 3220 0854 0A46     	    mov r2,r1 // first line
 3221 0856 00B5FFF7 	    _CALL next_token
 3221      FEFF5DF8 
 3221      04EB
 3222 0860 0028     	    cmp r0,#TK_NONE 
 3223 0862 01D1     	    bne 1f 
 3224 0864 1346     	    mov r3,r2 
 3225 0866 0CE0     	    b 4f 
 3226 0868 0828     	1:  cmp r0,#TK_MINUS 
 3227 086a 7FF4FEAF 	    bne syntax_error 
 3228 086e 00B5FFF7 	    _CALL next_token 
 3228      FEFF5DF8 
 3228      04EB
 3229 0878 18B1     	    cbz r0,4f 
 3230 087a 1B28     	    cmp r0,#TK_INTGR
 3231 087c 7FF4FEAF 	    bne syntax_error  
 3232 0880 0B46     	    mov r3,r1 
 3233              	4:  // skip lines below r2 
 3234 0882 B8F80000 	    ldrh r0,[T1]
 3235 0886 9042     	    cmp r0,r2 
 3236 0888 05D5     	    bpl 6f 
 3237 088a 98F80200 	    ldrb r0,[T1,#2]
 3238 088e 8044     	    add T1,r0
 3239 0890 C845     	    cmp T1,T2 
 3240 0892 F6D4     	    bmi 4b
 3241 0894 1AE0     	    b 9f 
 3242 0896 C845     	6:  cmp T1,T2  
 3243 0898 18D5     	    bpl 9f
 3244 089a 4046     	    mov r0,T1   
ARM GAS  tinyBasic.s 			page 87


 3245 089c DFF83010 	    ldr r1,out_buff 
 3246 08a0 00B5FFF7 	    _CALL decompile_line 
 3246      FEFF5DF8 
 3246      04EB
 3247 08aa 00B5FFF7 	    _CALL uart_puts 
 3247      FEFF5DF8 
 3247      04EB
 3248 08b4 00B5FFF7 	    _CALL cr 
 3248      FEFF5DF8 
 3248      04EB
 3249 08be 98F80200 	    ldrb r0,[T1,#2]
 3250 08c2 8044     	    add T1,r0
 3251 08c4 B8F80000 	    ldrh r0,[T1]
 3252 08c8 9842     	    cmp r0,r3 
 3253 08ca E4DD     	    ble 6b 
 3254 08cc FFF7FEBF 	9:  b warm_start 
 3255 08d0 00000000 	out_buff: .word _tib 
 3256              	
 3257              	/********************************
 3258              	  BASIC: LOCATE line,col
 3259              	  return log base 2 of expr 
 3260              	********************************/
 3261              	    _FUNC locate
 3262 08d4 00B5FFF7 	    _CALL arg_list 
 3262      FEFF5DF8 
 3262      04EB
 3263 08de 0228     	    cmp r0,#2 
 3264 08e0 7FF4FEAF 	    bne syntax_error
 3265 08e4 5CF8041B 	    _POP r1
 3266 08e8 5CF8040B 	    _POP r0  
 3267 08ec 00B5FFF7 	    _CALL set_curpos 
 3267      FEFF5DF8 
 3267      04EB
 3268 08f6 7047     	    _RET 
 3269              	
 3270              	
 3271              	/****************************************
 3272              	  BASIC: LSHIFT(expr1,expr2)
 3273              	  shift right expr1 of expr2 bits 
 3274              	****************************************/
 3275              	    _FUNC lshift
 3276 08f8 00B5FFF7 	    _CALL func_args
 3276      FEFF5DF8 
 3276      04EB
 3277 0902 0228     	    cmp r0,#2
 3278 0904 7FF4FEAF 	    bne syntax_error 
 3279 0908 BCE80300 	    ldmia DP!,{r0,r1}
 3280 090c 01FA00F1 	    lsl r1,r0 
 3281 0910 4FF01B00 	    mov r0,#TK_INTGR
 3282 0914 7047     	    _RET 
 3283              	
 3284              	/***********************************
 3285              	  BASIC: NEW 
 3286              	  delete existing program in memory
 3287              	  and clear variables and RAM 
 3288              	***********************************/
 3289 0916 00BF     	    _FUNC new
ARM GAS  tinyBasic.s 			page 88


 3290 0918 206C10F0 	    _CLO 
 3290      010F03D0 
 3290      4FF00700 
 3290      FFF7FEBF 
 3291 0928 00B5FFF7 	    _CALL clear_basic 
 3291      FEFF5DF8 
 3291      04EB
 3292 0932 FFF7FEBF 	    b warm_start   
 3293              	
 3294              	/************************************
 3295              	  BASIC: NOT relation  
 3296              	  invert logical value or relation
 3297              	************************************/
 3298 0936 00BF     	      _FUNC func_not
 3299 0938 00B5FFF7 	      _CALL relation 
 3299      FEFF5DF8 
 3299      04EB
 3300 0942 11B1     	      cbz r1,8f 
 3301 0944 81EA0101 	      eor r1,r1
 3302 0948 01E0     	      b 9f 
 3303 094a 4FF0FF31 	  8:  mov r1,#-1
 3304 094e 7047     	  9:  _RET 
 3305              	
 3306              	/******************************************
 3307              	  BASIC: OR(expr1,expr2)
 3308              	  binary OR between 2 expressions
 3309              	******************************************/
 3310              	    _FUNC bit_or
 3311 0950 00B5FFF7 	    _CALL func_args
 3311      FEFF5DF8 
 3311      04EB
 3312 095a 0228     	    cmp r0,#2
 3313 095c 7FF4FEAF 	    bne syntax_error
 3314 0960 5CF8040B 	    _POP r0 
 3315 0964 5CF8041B 	    _POP r1
 3316 0968 41EA0001 	    orr r1,r0 
 3317 096c 4FF01B00 	    mov r0,#TK_INTGR
 3318 0970 7047     	    _RET 
 3319              	
 3320              	/****************************************
 3321              	  BASIC: IN(gpio,pin) 
 3322              	  read gpio_idr selected pin  
 3323              	***************************************/
 3324 0972 00BF     	    _FUNC pin_input 
 3325 0974 00B5FFF7 	    _CALL func_args 
 3325      FEFF5DF8 
 3325      04EB
 3326 097e 0228     	    cmp r0,#2 
 3327 0980 7FF4FEAF 	    bne syntax_error  
 3328 0984 BCE80300 	    ldmia DP!,{r0,r1}
 3329 0988 4FF00802 	    mov r2,#GPIO_IDR 
 3330 098c 8A58     	    ldr r2,[r1,r2]
 3331 098e 00F00F00 	    and r0,#15 
 3332 0992 22FA00F2 	    lsr r2,r0 
 3333 0996 02F00101 	    and r1,r2,#1 
 3334 099a 4FF01B00 	    mov r0,#TK_INTGR
 3335 099e 7047     	    _RET 
ARM GAS  tinyBasic.s 			page 89


 3336              	
 3337              	
 3338              	/****************************************
 3339              	  BASIC: OUT gpio,pin,value 
 3340              	   output to gpio_odr
 3341              	***************************************/
 3342              	    _FUNC out
 3343 09a0 00B5FFF7 	    _CALL arg_list 
 3343      FEFF5DF8 
 3343      04EB
 3344 09aa 0328     	    cmp r0,#3 
 3345 09ac 7FF4FEAF 	    bne syntax_error 
 3346 09b0 BCE80700 	    ldmia DP!,{r0,r1,r2} // value,pin,gpio 
 3347 09b4 08B9     	    cbnz r0,1f 
 3348 09b6 01F11001 	    add r1,#16 
 3349 09ba 4FF00100 	1:  mov r0,#1 
 3350 09be 00FA01F0 	    lsl r0,r1 
 3351 09c2 1061     	    str r0,[r2,#GPIO_BSRR]    
 3352 09c4 7047     	    _RET 
 3353              	
 3354              	
 3355              	/****************************************
 3356              	  BASIC: PAD 
 3357              	  return pad buffer address 
 3358              	****************************************/
 3359 09c6 00BF     	    _FUNC pad_ref
 3360 09c8 0149     	    ldr r1,pad_adr  
 3361 09ca 4FF01B00 	    mov r0,#TK_INTGR 
 3362 09ce 7047     	    _RET 
 3363 09d0 00000000 	pad_adr: .word _pad 
 3364              	
 3365              	/***********************
 3366              	  BASIC: PAUSE expr 
 3367              	  suspend execution for 
 3368              	  expr milliseconds 
 3369              	************************/
 3370              	    _FUNC pause
 3371 09d4 00B5FFF7 	    _CALL expression 
 3371      FEFF5DF8 
 3371      04EB
 3372 09de 1B28     	    cmp r0,#TK_INTGR 
 3373 09e0 7FF4FEAF 	    bne syntax_error 
 3374 09e4 E069     	    ldr r0,[UPP,#TICKS]
 3375 09e6 0844     	    add r0,r1 
 3376 09e8 E169     	1:  ldr r1,[UPP,#TICKS]
 3377 09ea 8842     	    cmp r0,r1 
 3378 09ec FCD1     	    bne 1b     
 3379 09ee 7047     	    _RET 
 3380              	
 3381              	/***************************************************
 3382              	  BASIC: PMODE GPIOx,pin,mode
 3383              	  configure a digital pin for input|output
 3384              	  paramters:
 3385              	    GPIOx    port selector: GPIOA,GPIOB,GPIOC
 3386              	    pin      pin {0..15} 
 3387              	    mode 
 3388              	    for input mode:
ARM GAS  tinyBasic.s 			page 90


 3389              	      INPUT_FLOAT,INPUT_PD,INPUT_PU,INPUT_ANA    
 3390              	    for output mode:
 3391              	      OUTPUT_AFOD,OUTPUT_AFPP,OUTPUT_OD,OUTPUT_PP 
 3392              	***************************************************/
 3393              	    _FUNC pin_mode
 3394 09f0 00B5FFF7 	    _CALL arg_list
 3394      FEFF5DF8 
 3394      04EB
 3395 09fa 0328     	    cmp r0,#3 
 3396 09fc 7FF4FEAF 	    bne syntax_error 
 3397 0a00 5CF8042B 	    _POP r2 // mode 
 3398 0a04 5CF8041B 	    _POP r1 // pin 
 3399 0a08 5CF8040B 	    _POP r0 // gpio 
 3400 0a0c 00B500F0 	    _CALL gpio_config 
 3400      03F85DF8 
 3400      04EB
 3401 0a16 7047     	    _RET 
 3402              	
 3403              	/**********************************
 3404              	  gpio_config 
 3405              	  Configure gpio mode 
 3406              	  input:
 3407              	    r0   GPIOx 
 3408              	    r1   pin 
 3409              	    r2   mode 
 3410              	  output:
 3411              	    none 
 3412              	  use:
 3413              	    r3,T1 
 3414              	**********************************/
 3415              	    _FUNC gpio_config
 3416 0a18 2DE90801 	    push {r3,T1}
 3417 0a1c 8046     	    mov T1,r0 
 3418 0a1e 80EA0000 	    eor r0,r0 
 3419 0a22 102A     	    cmp r2,#16
 3420 0a24 06D4     	    bmi 0f
 3421 0a26 5FEA7202 	    rors r2,#1  
 3422 0a2a 02F00F02 	    and r2,#15
 3423 0a2e 01D3     	    bcc 0f 
 3424 0a30 4FF00100 	    mov r0,#1
 3425 0a34 00FA01F0 	0:  lsl r0,r1
 3426 0a38 A8F80C00 	    strh r0,[T1,#GPIO_ODR]
 3427 0a3c 0829     	1:  cmp r1,#8
 3428 0a3e 03D4     	    bmi 2f 
 3429 0a40 08F10408 	    add T1,#4 // CRH
 3430 0a44 A1F10801 	    sub r1,#8 
 3431              	2:  
 3432 0a48 4FEA8101 	    lsl r1,#2 
 3433 0a4c 4FF00F00 	    mov r0,#15
 3434 0a50 00FA01F0 	    lsl r0,r1
 3435 0a54 6FEA0000 	    mvn r0,r0 
 3436 0a58 D8F80030 	    ldr r3,[T1]
 3437 0a5c 03EA0003 	    and r3,r0 
 3438 0a60 02FA01F2 	    lsl r2,r1
 3439 0a64 43EA0203 	    orr r3,r2 
 3440 0a68 C8F80030 	    str r3,[T1]
 3441 0a6c BDE80801 	    pop {r3,T1}
ARM GAS  tinyBasic.s 			page 91


 3442 0a70 7047     	    _RET 
 3443              	
 3444              	
 3445              	/*****************************************
 3446              	  BASIC: PEEKB (expr)  
 3447              	  return byte value at address 
 3448              	*****************************************/
 3449 0a72 00BF     	    _FUNC peek8
 3450 0a74 00B5FFF7 	    _CALL func_args  
 3450      FEFF5DF8 
 3450      04EB
 3451 0a7e 0128     	    cmp r0,#1
 3452 0a80 3FF5FEAF 	    bmi syntax_error
 3453 0a84 5CF8041B 	    _POP r1 
 3454 0a88 0978     	    ldrb r1,[r1]
 3455 0a8a 4FF01B00 	    mov r0,#TK_INTGR     
 3456 0a8e 7047     	    _RET 
 3457              	
 3458              	/*****************************************
 3459              	  BASIC: PEEKH (expr)  
 3460              	  return byte value at address 
 3461              	*****************************************/
 3462              	    _FUNC peek16
 3463 0a90 00B5FFF7 	    _CALL func_args  
 3463      FEFF5DF8 
 3463      04EB
 3464 0a9a 0128     	    cmp r0,#1
 3465 0a9c 3FF5FEAF 	    bmi syntax_error
 3466 0aa0 5CF8041B 	    _POP r1 
 3467 0aa4 0988     	    ldrh r1,[r1]
 3468 0aa6 4FF01B00 	    mov r0,#TK_INTGR     
 3469 0aaa 7047     	    _RET 
 3470              	
 3471              	/*****************************************
 3472              	  BASIC: PEEKW (expr)  
 3473              	  return byte value at address 
 3474              	*****************************************/
 3475              	    _FUNC peek32
 3476 0aac 00B5FFF7 	    _CALL func_args  
 3476      FEFF5DF8 
 3476      04EB
 3477 0ab6 0128     	    cmp r0,#1
 3478 0ab8 3FF5FEAF 	    bmi syntax_error
 3479 0abc 5CF8041B 	    _POP r1 
 3480 0ac0 0968     	    ldr r1,[r1]
 3481 0ac2 4FF01B00 	    mov r0,#TK_INTGR     
 3482 0ac6 7047     	    _RET 
 3483              	
 3484              	
 3485              	/**********************************
 3486              	  BASIC: POKE8 addr,byte
 3487              	  store byte at addr   
 3488              	**********************************/
 3489              	    _FUNC poke8
 3490 0ac8 00B5FFF7 	    _CALL arg_list
 3490      FEFF5DF8 
 3490      04EB
ARM GAS  tinyBasic.s 			page 92


 3491 0ad2 0228     	    cmp r0,#2 
 3492 0ad4 7FF4FEAF 	    bne syntax_error
 3493 0ad8 BCE80300 	    ldmia DP!,{r0,r1} 
 3494 0adc 0870     	    strb r0,[r1]
 3495 0ade 7047     	    _RET 
 3496              	
 3497              	/**********************************
 3498              	  BASIC: POKE16 addr,hword
 3499              	  store hword at addr   
 3500              	**********************************/
 3501              	    _FUNC poke16
 3502 0ae0 00B5FFF7 	    _CALL arg_list
 3502      FEFF5DF8 
 3502      04EB
 3503 0aea 0228     	    cmp r0,#2 
 3504 0aec 7FF4FEAF 	    bne syntax_error
 3505 0af0 BCE80300 	    ldmia DP!,{r0,r1} 
 3506 0af4 0880     	    strh r0,[r1]
 3507 0af6 7047     	    _RET 
 3508              	
 3509              	/**********************************
 3510              	  BASIC: POKE32 addr,word
 3511              	  store word at addr   
 3512              	**********************************/
 3513              	    _FUNC poke32
 3514 0af8 00B5FFF7 	    _CALL arg_list 
 3514      FEFF5DF8 
 3514      04EB
 3515 0b02 0228     	    cmp r0,#2 
 3516 0b04 7FF4FEAF 	    bne syntax_error
 3517 0b08 BCE80300 	    ldmia DP!,{r0,r1} 
 3518 0b0c 0860     	    str r0,[r1]
 3519 0b0e 7047     	    _RET 
 3520              	
 3521              	
 3522              	
 3523              	/****************************
 3524              	  BASIC: PRINT|? arg_list 
 3525              	  print list of arguments 
 3526              	****************************/
 3527              	    _FUNC print
 3528 0b10 206C     	    ldr r0,[UPP,#FLAGS]
 3529 0b12 40F08000 	    orr r0,#FPRINT 
 3530 0b16 2064     	    str r0,[UPP,#FLAGS]
 3531 0b18 88EA0808 	    eor T1,T1 
 3532 0b1c 00B5FFF7 	0:  _CALL expression
 3532      FEFF5DF8 
 3532      04EB
 3533 0b26 1B28     	    cmp r0,#TK_INTGR
 3534 0b28 07D1     	    bne 1f 
 3535 0b2a 0846     	    mov r0,r1
 3536 0b2c A169     	    ldr r1,[UPP,#BASE]
 3537 0b2e 00B5FFF7 	    _CALL print_int
 3537      FEFF5DF8 
 3537      04EB
 3538 0b38 39E0     	    b 8f  
 3539 0b3a 0128     	1:  cmp r0,#TK_COLON 
ARM GAS  tinyBasic.s 			page 93


 3540 0b3c 00DC     	    bgt 2f
 3541 0b3e 4DE0     	    b unget_exit 
 3542 0b40 1C28     	2:  cmp r0,#TK_QSTR 
 3543 0b42 06D1     	    bne 3f
 3544 0b44 0846     	    mov r0,r1 
 3545 0b46 00B5FFF7 	    _CALL uart_puts  
 3545      FEFF5DF8 
 3545      04EB
 3546 0b50 2DE0     	    b 8f 
 3547 0b52 1628     	3:  cmp r0,#TK_CFUNC
 3548 0b54 05D1     	    bne 4f
 3549 0b56 0846     	    mov r0,r1
 3550 0b58 00B5FFF7 	    _CALL execute 
 3550      FEFF5DF8 
 3550      04EB
 3551 0b62 1328     	4:  cmp r0,#TK_CHAR 
 3552 0b64 06D1     	    bne 5f 
 3553 0b66 0846     	    mov r0,r1 
 3554 0b68 00B5FFF7 	    _CALL uart_putc 
 3554      FEFF5DF8 
 3554      04EB
 3555 0b72 1CE0     	    b 8f 
 3556 0b74 0428     	5:  cmp r0,#TK_SHARP
 3557 0b76 09D1     	    bne 6f 
 3558 0b78 00B5FFF7 	   _CALL next_token
 3558      FEFF5DF8 
 3558      04EB
 3559 0b82 1B28     	    cmp r0,#TK_INTGR  
 3560 0b84 7FF4FEAF 	    bne syntax_error 
 3561 0b88 6164     	    str r1,[UPP,#TAB_WIDTH]
 3562 0b8a 10E0     	    b 8f 
 3563 0b8c 1728     	6:  cmp r0,#TK_CMD 
 3564 0b8e 25D1     	    bne unget_exit  
 3565 0b90 4B29     	    cmp r1,#TAB_IDX 
 3566 0b92 05D1     	    bne 6f
 3567 0b94 00B500F0 	    _CALL tab 
 3567      FBFB5DF8 
 3567      04EB
 3568 0b9e 06E0     	    b 8f 
 3569 0ba0 4729     	6:  cmp r1,#SPC_IDX  
 3570 0ba2 1BD1     	    bne unget_exit
 3571 0ba4 00B500F0 	    _CALL spc   
 3571      B5FB5DF8 
 3571      04EB
 3572 0bae 88EA0808 	8:  eor T1,T1  
 3573 0bb2 00B5FFF7 	    _CALL next_token
 3573      FEFF5DF8 
 3573      04EB
 3574 0bbc 90B1     	    cbz r0, print_exit  
 3575 0bbe 0228     	    cmp r0,#TK_COMMA 
 3576 0bc0 02D1     	    bne 8f 
 3577 0bc2 4FF0FF38 	    mov T1,#-1
 3578 0bc6 A9E7     	    b 0b
 3579 0bc8 0328     	8:  cmp r0,#TK_SEMIC 
 3580 0bca 07D1     	    bne unget_exit 
 3581 0bcc 00B5FFF7 	    _CALL tabulation 
 3581      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 94


 3581      04EB
 3582 0bd6 4FF0FF38 	    mov T1,#-1
 3583 0bda 9FE7     	    b 0b
 3584              	unget_exit:         
 3585 0bdc D4F800A0 	   _UNGET_TOKEN 
 3585      D4F808B0 
 3586              	print_exit:
 3587 0be4 18EA0808 	    ands T1,T1 
 3588 0be8 08D1     	    bne 9f
 3589 0bea 00B5FFF7 	    _CALL cr
 3589      FEFF5DF8 
 3589      04EB
 3590 0bf4 206C     	    ldr r0,[UPP,#FLAGS]
 3591 0bf6 80F08000 	    eor r0,#FPRINT 
 3592 0bfa 2064     	    str r0,[UPP,#FLAGS] 
 3593 0bfc 7047     	9:  _RET 
 3594              	
 3595              	/**************************************
 3596              	  BASIC: QKEY
 3597              	  check if key pressed 
 3598              	**************************************/ 
 3599 0bfe 00BF     	    _FUNC qkey
 3600 0c00 4FF00001 	    mov r1,#0
 3601 0c04 00B5FFF7 	    _CALL uart_qkey
 3601      FEFF5DF8 
 3601      04EB
 3602 0c0e 01D0     	    beq 9f 
 3603 0c10 4FF0FF31 	    mov r1,#-1 
 3604 0c14 4FF01B00 	9:  mov r0,#TK_INTGR
 3605 0c18 7047     	    _RET 
 3606              	
 3607              	/******************************************
 3608              	  BASIC RANDOM(expr)
 3609              	  generate random number between 0..expr-1
 3610              	******************************************/
 3611 0c1a 00BF     	    _FUNC random
 3612 0c1c 00B5FFF7 	    _CALL func_args 
 3612      FEFF5DF8 
 3612      04EB
 3613 0c26 0128     	    cmp r0,#1
 3614 0c28 7FF4FEAF 	    bne syntax_error 
 3615 0c2c 606A     	    ldr r0,[UPP,#SEED]
 3616 0c2e 4FEA4031 	    lsl r1,r0,#13
 3617 0c32 81EA0001 	    eor r1,r0
 3618 0c36 4FEA5140 	    lsr r0,r1,#17
 3619 0c3a 81EA0001 	    eor r1,r0
 3620 0c3e 4FEA4110 	    lsl r0,r1,#5
 3621 0c42 81EA0001 	    eor r1,r0
 3622 0c46 6162     	    str r1,[UPP,#SEED]
 3623 0c48 5CF8040B 	    _POP r0 
 3624 0c4c B1FBF0F2 	    udiv r2,r1,r0  
 3625 0c50 00FB02F2 	    mul r2,r0 
 3626 0c54 A1EB0201 	    sub r1,r2 
 3627 0c58 4FF01B00 	    mov r0,#TK_INTGR
 3628 0c5c 7047     	    _RET 
 3629              	
 3630              	/****************************************
ARM GAS  tinyBasic.s 			page 95


 3631              	  BASIC: RSHIFT(expr1,expr2)
 3632              	  shift left expr1 de expr2 bits 
 3633              	****************************************/
 3634 0c5e 00BF     	    _FUNC rshift
 3635 0c60 00B5FFF7 	    _CALL func_args
 3635      FEFF5DF8 
 3635      04EB
 3636 0c6a 0228     	    cmp r0,#2 
 3637 0c6c 7FF4FEAF 	    bne syntax_error
 3638 0c70 BCE80300 	    ldmia DP!,{r0,r1}
 3639 0c74 21FA00F1 	    lsr r1,r0  
 3640 0c78 4FF01B00 	    mov r0,#TK_INTGR
 3641 0c7c 7047     	    _RET 
 3642              	
 3643              	/****************************
 3644              	  BASIC: RUN 
 3645              	  execute program in memory
 3646              	****************************/
 3647 0c7e 00BF     	    _FUNC run
 3648 0c80 206C10F0 	    _CLO 
 3648      010F03D0 
 3648      4FF00700 
 3648      FFF7FEBF 
 3649 0c90 206B     	    ldr r0,[UPP,#TXTBGN]
 3650 0c92 616B     	    ldr r1,[UPP,#TXTEND]
 3651 0c94 C4F8D010 	    str r1,[UPP,#HERE]
 3652 0c98 8842     	    cmp r0,r1
 3653 0c9a 21D0     	    beq 9f
 3654 0c9c 216C     	    ldr r1,[UPP,#FLAGS]
 3655 0c9e 11F0080F 	    tst r1,#FSTOP
 3656 0ca2 09D0     	    beq 1f
 3657 0ca4 BCE8010C 	    ldmia DP!,{r0,IN,BPTR}
 3658 0ca8 6060     	    str r0,[UPP,#COUNT]
 3659 0caa 206C     	    ldr r0,[UPP,#FLAGS]
 3660 0cac 4FF00901 	    mov r1,#FRUN+FSTOP
 3661 0cb0 80EA0100 	    eor r0,r1
 3662 0cb4 2064     	    str r0,[UPP,#FLAGS] 
 3663 0cb6 13E0     	    b 9f  
 3664 0cb8 8178     	1:  ldrb r1,[r0,#2]
 3665 0cba 6160     	    str r1,[UPP,#COUNT]
 3666 0cbc 8346     	    mov BPTR,r0 
 3667 0cbe 4FF0030A 	    mov IN,#3
 3668 0cc2 606B     	    ldr r0,[UPP,#TXTEND]
 3669              	    // reset dataline pointers 
 3670 0cc4 80EA0000 	    eor r0,r0 
 3671 0cc8 E060     	    str r0,[UPP,#DATAPTR]
 3672 0cca 2061     	    str r0,[UPP,#DATA]
 3673 0ccc 6061     	    str r0,[UPP,#DATALEN] 
 3674 0cce 206C     	    ldr r0,[UPP,#FLAGS]
 3675 0cd0 40F00100 	    orr r0,#FRUN 
 3676 0cd4 2064     	    str r0,[UPP,#FLAGS]
 3677 0cd6 00B5FFF7 	    _CALL show_trace 
 3677      FEFF5DF8 
 3677      04EB
 3678 0ce0 7047     	9:  _RET 
 3679              	
 3680              	/**********************************
ARM GAS  tinyBasic.s 			page 96


 3681              	        FILE SYSTEM 
 3682              	**********************************/
 3683              	
 3684              	/*********************************
 3685              	  search_free 
 3686              	  search first free PAGE in fs
 3687              	  a PAGE is free if first word is
 3688              	  -1
 3689              	  input:
 3690              	    none 
 3691              	  output:
 3692              	    r0    addr|0
 3693              	  use:
 3694              	*********************************/
 3695 0ce2 00BF     	    _FUNC search_free 
 3696 0ce4 06B4     	    push {r1,r2}
 3697 0ce6 DFF86410 	    ldr r1,fs_addr 
 3698 0cea 4FF00002 	    _MOV32 r2,FLASH_HIDDEN_END
 3698      C0F60202 
 3699 0cf2 0868     	1:  ldr r0,[r1]
 3700 0cf4 B0F1FF3F 	    cmp r0,#-1
 3701 0cf8 03D0     	    beq 8f 
 3702 0cfa 01F58061 	    add r1,#PAGE_SIZE
 3703 0cfe 9142     	    cmp r1,r2 
 3704 0d00 F7D4     	    bmi 1b 
 3705 0d02 0846     	8:  mov r0,r1 
 3706 0d04 06BC     	    pop {r1,r2}   
 3707 0d06 7047     	    _RET 
 3708              	
 3709              	/*********************************
 3710              	  search_file 
 3711              	  search for a file name 
 3712              	  in file system.
 3713              	  input: 
 3714              	    r0   .asciz target name
 3715              	  output:
 3716              	    r0    0 || address found 
 3717              	  use:
 3718              	   r0     temp 
 3719              	   r1     *file_name 
 3720              	   r2     *fs  
 3721              	   r3     target   
 3722              	**********************************/
 3723              	    _FUNC search_file 
 3724 0d08 0EB4     	    push {r1,r2,r3}
 3725 0d0a DFF84020 	    ldr r2,fs_addr
 3726 0d0e 0346     	    mov r3,r0  
 3727              	cmp_loop:
 3728 0d10 1068     	    ldr r0,[r2]
 3729 0d12 B0F1FF3F 	    cmp r0,#-1
 3730 0d16 80EA0000 	    eor r0,r0
 3731 0d1a 15D0     	    beq 9f // reached end of fs 
 3732 0d1c 1846     	1:  mov r0,r3
 3733 0d1e 02F10201 	    add r1,r2,#2
 3734 0d22 00B5FFF7 	    _CALL strcmp
 3734      FEFF5DF8 
 3734      04EB
ARM GAS  tinyBasic.s 			page 97


 3735 0d2c 08B9     	    cbnz r0,2f
 3736 0d2e 1046     	    mov r0,r2 
 3737 0d30 0AE0     	    b 9f   
 3738 0d32 1088     	2:  ldrh r0,[r2] // name length
 3739 0d34 0244     	    add r2,r0 
 3740 0d36 1088     	    ldrh r0,[r2]
 3741 0d38 1044     	    add r0,r2
 3742 0d3a 00B5FFF7 	    _CALL page_align 
 3742      FEFF5DF8 
 3742      04EB
 3743 0d44 0246     	    mov r2,r0   
 3744 0d46 E3E7     	    b cmp_loop 
 3745 0d48 0EBC     	9:  pop {r1,r2,r3}
 3746 0d4a 7047     	    _RET 
 3747              	
 3748 0d4c 00000000 	fs_addr: .word FILE_SYSTEM
 3749              	
 3750              	/*************************************
 3751              	  BASIC: DIR 
 3752              	  list files stored in fs 
 3753              	  use:
 3754              	    r0  temp 
 3755              	    r1  temp
 3756              	    r2  file count
 3757              	    r3  data size
 3758              	    T1  *fs  
 3759              	*************************************/
 3760              	    _FUNC directory
 3761 0d50 206C10F0 	    _CLO 
 3761      010F03D0 
 3761      4FF00700 
 3761      FFF7FEBF 
 3762 0d60 82EA0202 	    eor r2,r2 
 3763 0d64 5FF81C80 	    ldr T1,fs_addr 
 3764 0d68 D8F80000 	1:  ldr r0,[T1] // name length 
 3765 0d6c B0F1FF3F 	    cmp r0,#-1
 3766 0d70 2AD0     	    beq no_more_file
 3767 0d72 00F00F03 	    and r3,r0,#15
 3768 0d76 08F10200 	    add r0,T1,#2
 3769 0d7a 00B5FFF7 	    _CALL uart_puts 
 3769      FEFF5DF8 
 3769      04EB
 3770 0d84 4FF01000 	    mov r0,#16 
 3771 0d88 00B5FFF7 	    _CALL cursor_x 
 3771      FEFF5DF8 
 3771      04EB
 3772 0d92 9844     	    add T1,r3 
 3773 0d94 B8F80030 	    ldrh r3,[T1]
 3774 0d98 1846     	    mov r0,r3 
 3775 0d9a 4FF00A01 	    mov r1,#10 
 3776 0d9e 00B5FFF7 	    _CALL print_int
 3776      FEFF5DF8 
 3776      04EB
 3777 0da8 00B5FFF7 	    _CALL cr  
 3777      FEFF5DF8 
 3777      04EB
 3778 0db2 08EB0300 	    add r0,T1,r3 
ARM GAS  tinyBasic.s 			page 98


 3779 0db6 00B5FFF7 	    _CALL page_align
 3779      FEFF5DF8 
 3779      04EB
 3780 0dc0 8046     	    mov T1,r0 
 3781 0dc2 02F10102 	    add r2,#1 
 3782 0dc6 CFE7     	    b 1b  
 3783              	no_more_file:
 3784 0dc8 00B5FFF7 	    _CALL cr
 3784      FEFF5DF8 
 3784      04EB
 3785 0dd2 4FF01000 	    mov r0,#16
 3786 0dd6 00B5FFF7 	    _CALL cursor_x  
 3786      FEFF5DF8 
 3786      04EB
 3787 0de0 1046     	    mov r0,r2 
 3788 0de2 4FF00A01 	    mov r1,#10 
 3789 0de6 00B5FFF7 	    _CALL print_int 
 3789      FEFF5DF8 
 3789      04EB
 3790 0df0 DFF8AC08 	    ldr r0,=fcount 
 3791 0df4 00B5FFF7 	    _CALL uart_puts 
 3791      FEFF5DF8 
 3791      04EB
 3792 0dfe 7047     	    _RET 
 3793 0e00 66696C65 	fcount:  .asciz "files\n"
 3793      730A00
 3794              	
 3795              	/*************************************
 3796              	  BASIC: FORGET ["name"]
 3797              	  delete file and all following 
 3798              	  if no name given delete all files 
 3799              	************************************/
 3800 0e07 00       	    _FUNC forget
 3801 0e08 2DE90802 	    push {r3,T2}
 3802 0e0c 5FF8C490 	    ldr T2,fs_addr 
 3803 0e10 E36A     	    ldr r3,[UPP,#FSFREE]
 3804 0e12 00B5FFF7 	    _CALL next_token
 3804      FEFF5DF8 
 3804      04EB
 3805 0e1c 38B1     	    cbz r0,1f // no name 
 3806 0e1e 0846     	    mov r0,r1
 3807 0e20 00B5FFF7 	    _CALL search_file
 3807      71FF5DF8 
 3807      04EB
 3808 0e2a 58B1     	    cbz r0,9f 
 3809 0e2c 8146     	    mov T2,r0 
 3810 0e2e 9945     	1:  cmp T2,r3 
 3811 0e30 08D5     	    bpl 9f 
 3812 0e32 4846     	    mov r0,T2 
 3813 0e34 00B5FFF7 	    _CALL erase_page
 3813      FEFF5DF8 
 3813      04EB
 3814 0e3e 09F58069 	    add T2,#PAGE_SIZE
 3815 0e42 F4E7     	    b 1b 
 3816 0e44 00B5FFF7 	9:  _CALL search_free
 3816      4DFF5DF8 
 3816      04EB
ARM GAS  tinyBasic.s 			page 99


 3817 0e4e BDE80802 	    pop {r3,T2} 
 3818 0e52 7047     	    _RET 
 3819              	
 3820              	/**********************************
 3821              	  BASIC LOAD "name" 
 3822              	  load file in RAM for execution
 3823              	  use:
 3824              	    r0   temp
 3825              	    r1   src
 3826              	    r2   dest 
 3827              	    r3   count 
 3828              	**********************************/
 3829              	    _FUNC load
 3830 0e54 206C10F0 	    _CLO 
 3830      010F03D0 
 3830      4FF00700 
 3830      FFF7FEBF 
 3831 0e64 00B5FFF7 	    _CALL next_token 
 3831      FEFF5DF8 
 3831      04EB
 3832 0e6e 1C28     	    cmp r0,#TK_QSTR 
 3833 0e70 7FF4FEAF 	    bne syntax_error 
 3834 0e74 0846     	    mov r0,r1 
 3835              	load_autorun:     
 3836 0e76 00B5FFF7 	    _CALL search_file 
 3836      46FF5DF8 
 3836      04EB
 3837 0e80 18B9     	    cbnz r0, 1f 
 3838 0e82 4FF00900 	    mov r0,#ERR_NOT_FILE
 3839 0e86 FFF7FEBF 	    b tb_error 
 3840 0e8a 0146     	1:  mov r1,r0 
 3841 0e8c 0888     	    ldrh r0,[r1]
 3842 0e8e 0144     	    add r1,r0 // data size field  
 3843 0e90 31F8023B 	    ldrh r3,[r1],#2 // data size 
 3844 0e94 226B     	    ldr r2,[UPP,#TXTBGN]
 3845 0e96 02EB0300 	    add r0,r2,r3  
 3846 0e9a 6063     	    str r0,[UPP,#TXTEND]
 3847 0e9c 03F10103 	    add r3,#1
 3848 0ea0 4FEA5303 	    lsr r3,#1
 3849              	2:  // load file data 
 3850 0ea4 31F8020B 	    ldrh r0,[r1],#2
 3851 0ea8 22F8020B 	    strh r0,[r2],#2 
 3852 0eac 013B     	    subs r3,#1 
 3853 0eae F9D1     	    bne 2b 
 3854              	// report file size 
 3855 0eb0 DFF8F007 	    ldr r0,=fsize 
 3856 0eb4 00B5FFF7 	    _CALL uart_puts
 3856      FEFF5DF8 
 3856      04EB
 3857 0ebe 606B     	    ldr r0,[UPP,#TXTEND]
 3858 0ec0 236B     	    ldr r3,[UPP,#TXTBGN]
 3859 0ec2 A0EB0300 	    sub r0,r3 
 3860 0ec6 4FF00A01 	    mov r1,#10 
 3861 0eca 00B5FFF7 	    _CALL print_int 
 3861      FEFF5DF8 
 3861      04EB
 3862 0ed4 DFF8D007 	    ldr r0,=data_bytes 
ARM GAS  tinyBasic.s 			page 100


 3863 0ed8 00B5FFF7 	    _CALL uart_puts      
 3863      FEFF5DF8 
 3863      04EB
 3864 0ee2 7047     	    _RET 
 3865              	
 3866              	
 3867              	/*********************************
 3868              	  BASIC: SAVE "name" 
 3869              	  save program in flash memory
 3870              	  file structure:
 3871              	    .hword name_length 
 3872              	    .asciz name
 3873              	    .palign 1  
 3874              	    .hword data_length 
 3875              	    .byte  file data (variable length)  
 3876              	  use:
 3877              	    r0  temp 
 3878              	    r1  temp
 3879              	    r2  *flash 
 3880              	    r3  *ram  
 3881              	    T1  temp   
 3882              	********************************/
 3883              	    _FUNC save
 3884 0ee4 206C10F0 	    _CLO 
 3884      010F03D0 
 3884      4FF00700 
 3884      FFF7FEBF 
 3885 0ef4 606B     	    ldr r0,[UPP,#TXTEND]
 3886 0ef6 216B     	    ldr r1,[UPP,#TXTBGN]
 3887 0ef8 8842     	    cmp r0,r1
 3888 0efa 03D1     	    bne 0f 
 3889 0efc 4FF00D00 	    mov r0,#ERR_NO_PROG
 3890 0f00 FFF7FEBF 	    b tb_error 
 3891 0f04 00B5FFF7 	0:  _CALL next_token 
 3891      FEFF5DF8 
 3891      04EB
 3892 0f0e 1C28     	    cmp r0,#TK_QSTR
 3893 0f10 7FF4FEAF 	    bne syntax_error 
 3894              	// check for existing 
 3895 0f14 0B46     	    mov r3,r1 // save name 
 3896 0f16 1846     	    mov r0,r3  
 3897 0f18 00B5FFF7 	    _CALL search_file
 3897      F5FE5DF8 
 3897      04EB
 3898 0f22 18B1     	    cbz r0,new_file 
 3899 0f24 4FF00800 	    mov r0,#ERR_DUPLICATE
 3900 0f28 FFF7FEBF 	    b tb_error 
 3901              	new_file:
 3902 0f2c 4FF00100 	    mov r0,#1 
 3903 0f30 00B5FFF7 	    _CALL unlock 
 3903      FEFF5DF8 
 3903      04EB
 3904 0f3a E26A     	    ldr r2,[UPP,#FSFREE] //*flash 
 3905 0f3c 1846     	    mov r0,r3 // *name 
 3906 0f3e 00B5FFF7 	    _CALL strlen 
 3906      FEFF5DF8 
 3906      04EB
ARM GAS  tinyBasic.s 			page 101


 3907 0f48 00F10400 	    add r0,#4  
 3908 0f4c 20F00100 	    and r0,#-2 //even size
 3909 0f50 A0F10208 	    sub T1,r0,#2  // name length counter   
 3910 0f54 1146     	1:  mov r1,r2  
 3911 0f56 00B5FFF7 	    _CALL hword_write   
 3911      FEFF5DF8 
 3911      04EB
 3912 0f60 02F10202 	    add r2,#2  
 3913              	// write file name      
 3914 0f64 33F8020B 	2:  ldrh r0,[r3],#2 
 3915 0f68 1146     	    mov r1,r2 
 3916 0f6a 00B5FFF7 	    _CALL hword_write
 3916      FEFF5DF8 
 3916      04EB
 3917 0f74 02F10202 	    add r2,#2
 3918 0f78 B8F10208 	    subs T1,#2
 3919 0f7c F2D1     	    bne 2b
 3920              	// write data size 
 3921 0f7e 606B     	    ldr r0,[UPP,#TXTEND]
 3922 0f80 236B     	    ldr r3,[UPP,#TXTBGN]
 3923 0f82 A0EB0300 	    sub r0,r3
 3924 0f86 8046     	    mov T1,r0
 3925 0f88 1146     	    mov r1,r2 
 3926 0f8a 00B5FFF7 	    _CALL hword_write
 3926      FEFF5DF8 
 3926      04EB
 3927 0f94 02F10202 	    add r2,#2 
 3928              	// write data 
 3929 0f98 08F10108 	    add T1,#1 
 3930 0f9c 4FEA5808 	    lsr T1,#1 // .hword to write 
 3931 0fa0 33F8020B 	3:  ldrh r0,[r3],#2
 3932 0fa4 1146     	    mov r1,r2
 3933 0fa6 00B5FFF7 	    _CALL hword_write 
 3933      FEFF5DF8 
 3933      04EB
 3934 0fb0 02F10202 	    add r2,#2 
 3935 0fb4 B8F10108 	    subs T1,#1 
 3936 0fb8 F2D1     	    bne 3b
 3937 0fba 4FF00000 	    mov r0,#0 
 3938 0fbe 00B5FFF7 	    _CALL unlock
 3938      FEFF5DF8 
 3938      04EB
 3939              	// update FSFREE     
 3940 0fc8 606B     	    ldr r0,[UPP,#TXTEND]
 3941 0fca 216B     	    ldr r1,[UPP,#TXTBGN]
 3942 0fcc A0EB0100 	    sub r0,r1 
 3943 0fd0 8046     	    mov T1,r0 
 3944 0fd2 E16A     	    ldr r1,[UPP,#FSFREE]
 3945 0fd4 0844     	    add r0,r1 
 3946 0fd6 00B5FFF7 	    _CALL page_align
 3946      FEFF5DF8 
 3946      04EB
 3947 0fe0 E062     	    str r0,[UPP,#FSFREE]
 3948 0fe2 DFF8C006 	    ldr r0,=fsize
 3949 0fe6 00B5FFF7 	    _CALL uart_puts
 3949      FEFF5DF8 
 3949      04EB
ARM GAS  tinyBasic.s 			page 102


 3950 0ff0 4046     	    mov r0,T1 
 3951 0ff2 4FF00A01 	    mov r1,#10 
 3952 0ff6 00B5FFF7 	    _CALL print_int 
 3952      FEFF5DF8 
 3952      04EB
 3953 1000 DFF8A406 	    ldr r0,=data_bytes 
 3954 1004 00B5FFF7 	    _CALL uart_puts  
 3954      FEFF5DF8 
 3954      04EB
 3955 100e 7047     	    _RET 
 3956 1010 66696C65 	fsize: .asciz "file size: "
 3956      2073697A 
 3956      653A2000 
 3957 101c 62797465 	data_bytes: .asciz "bytes\n"
 3957      730A00
 3958              	
 3959              	
 3960              	/******************************
 3961              	  BASIC: AUTORUN ["name"]
 3962              	  set a file name to 
 3963              	  execute at boot up or if no 
 3964              	  argument cancel autorun file.
 3965              	  use:
 3966              	    T1 *ram buffer 
 3967              	*********************************/
 3968 1023 00       	    _FUNC autorun
 3969              	    // copy user page in RAM
 3970 1024 D4F83480 	    ldr T1,[UPP,#TXTEND]
 3971 1028 4FF00300 	    mov r0,#3
 3972 102c 8044     	    add T1,r0 
 3973 102e 6FEA0000 	    mvn r0,r0 
 3974 1032 08EA0008 	    and T1,r0 
 3975 1036 5FF86806 	    ldr r0,pad_adr  
 3976 103a A0EB0800 	    sub r0,T1 
 3977 103e B0F5806F 	    cmp r0,#PAGE_SIZE 
 3978 1042 03D5     	    bpl 1f 
 3979 1044 4FF00100 	    mov r0,#ERR_MEM_FULL 
 3980 1048 FFF7FEBF 	    b tb_error 
 3981 104c DFF85C06 	1:  ldr r0,=user
 3982 1050 4146     	    mov r1,T1 
 3983 1052 4FF48062 	    mov r2,#PAGE_SIZE 
 3984 1056 00B5FFF7 	    _CALL cmove 
 3984      FEFF5DF8 
 3984      04EB
 3985              	    // erase page 
 3986 1060 DFF84806 	    ldr r0,=user 
 3987 1064 00B5FFF7 	    _CALL erase_page
 3987      FEFF5DF8 
 3987      04EB
 3988              	    // check file name argument 
 3989 106e 00B5FFF7 	    _CALL next_token 
 3989      FEFF5DF8 
 3989      04EB
 3990 1078 1C28     	    cmp r0,#TK_QSTR 
 3991 107a 0DD0     	    beq 2f 
 3992 107c D4F800A0 	    _UNGET_TOKEN
 3992      D4F808B0 
ARM GAS  tinyBasic.s 			page 103


 3993              	    // erase first 16 byte of page
 3994              	    // this cancel any existing autorun 
 3995 1084 4FF0FF30 	    mov r0,#-1
 3996 1088 4246     	    mov r2,T1
 3997 108a 4FF01001 	    mov r1,#16 
 3998 108e 42F8040B 	1:  str r0,[r2],#4
 3999 1092 0439     	    subs r1,#4
 4000 1094 FBD1     	    bne 1b 
 4001 1096 0BE0     	    b write_back 
 4002 1098 4246     	2:  mov r2,T1
 4003 109a DFF82600 	    ldr r0,arun_sign 
 4004 109e 42F8040B 	    str r0,[r2],#4
 4005 10a2 0846     	    mov r0,r1 
 4006 10a4 1146     	    mov r1,r2 
 4007 10a6 00B5FFF7 	    _CALL strcpy 
 4007      FEFF5DF8 
 4007      04EB
 4008              	write_back:
 4009 10b0 4046     	    mov r0,T1
 4010 10b2 DFF8F815 	    ldr r1,=user 
 4011 10b6 00B5FFF7 	    _CALL write_page
 4011      FEFF5DF8 
 4011      04EB
 4012 10c0 7047     	    _RET 
 4013 10c2 4152554E 	arun_sign: .ascii "ARUN" 
 4014              	
 4015              	/******************************
 4016              	    exec_autorun 
 4017              	    check for autorun file.
 4018              	    load and execute it.
 4019              	*****************************/
 4020 10c6 00BF     	    _FUNC exec_autorun
 4021 10c8 DFF8E025 	    ldr r2,=user 
 4022 10cc 5FF80E10 	    ldr r1,arun_sign 
 4023 10d0 1068     	    ldr r0,[r2]
 4024 10d2 8842     	    cmp r0,r1 
 4025 10d4 0DD1     	    bne 9f 
 4026 10d6 02F10400 	    add r0,r2,#4
 4027 10da 00B5FFF7 	    _CALL load_autorun 
 4027      CBFE5DF8 
 4027      04EB
 4028 10e4 00B5FFF7 	    _CALL run
 4028      CBFD5DF8 
 4028      04EB
 4029 10ee 00F004BF 	    b interpreter  
 4030 10f2 7047     	9:  _RET 
 4031              	
 4032              	/*******************************
 4033              	  BASIC: FREE 
 4034              	  return RAM free bytes 
 4035              	*******************************/
 4036              	    _FUNC free
 4037 10f4 D4F8D000 	    ldr r0,[UPP,#HERE]
 4038 10f8 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4039 10fc A1EB0001 	    sub r1,r0
 4040 1100 4FF01B00 	    mov r0,#TK_INTGR
 4041 1104 7047     	    _RET  
ARM GAS  tinyBasic.s 			page 104


 4042              	
 4043              	/*********************************
 4044              	  BASIC: SERVO_INIT n 
 4045              	  initialize servo motor 1,2,3,4
 4046              	  1 -> PWM2/1 pin A15
 4047              	  2 -> PWM2/2 pin B3 
 4048              	  3 -> PWM3/1 pin B4 
 4049              	  4 -> PWM3/2 pin B5
 4050              	  TIMER parameters are for Fclk=72Mhz 
 4051              	  period=20msec 
 4052              	  default pos = 1500ÂµSec 
 4053              	************************************/
 4054 1106 00BF     	    _FUNC servo_init 
 4055 1108 00B5FFF7 	    _CALL expression 
 4055      FEFF5DF8 
 4055      04EB
 4056 1112 1B28     	    cmp r0,#TK_INTGR  
 4057 1114 7FF4FEAF 	    bne syntax_error 
 4058 1118 0129     	    cmp r1,#1 
 4059 111a 03D5     	    bpl 1f 
 4060 111c 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4061 1120 FFF7FEBF 	    b tb_error 
 4062 1124 0529     	1:  cmp r1,#5
 4063 1126 F9D5     	    bpl 0b
 4064 1128 A1F10103 	    sub r3,r1,#1
 4065              	1:  // configure port pin
 4066 112c DFF88025 	    ldr r2,=servo_port
 4067 1130 4FEAC301 	    lsl r1,r3,#3
 4068 1134 0A44     	    add r2,r1  
 4069 1136 52F8040B 	    ldr r0,[r2],#4 //GPIOx_BASE_ADR
 4070 113a 1168     	    ldr r1,[r2]  // pin 
 4071 113c 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4072 1140 00B5FFF7 	    _CALL gpio_config 
 4072      69FC5DF8 
 4072      04EB
 4073 114a 4FF48052 	    _MOV32 r2,RCC_BASE_ADR 
 4073      C4F20202 
 4074 1152 D069     	    ldr r0,[r2,#RCC_APB1ENR]
 4075 1154 022B     	    cmp r3,#2
 4076 1156 02D4     	    bmi 1f 
 4077 1158 A3F10203 	    sub r3,#2
 4078 115c 11E0     	    b setup_pwm3  
 4079              	// setup pwm2 ch1|ch2
 4080              	1:  // TIMER2 clock enable 
 4081 115e 40F00100 	    orr r0,#1
 4082 1162 D061     	    str r0,[r2,#RCC_APB1ENR]
 4083              	    // TIMER2 OC remapping 
 4084 1164 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 4084      C4F20102 
 4085 116c 5068     	    ldr r0,[r2,#AFIO_MAPR]
 4086 116e 4FF44071 	    mov r1,#(3<<8)
 4087 1172 40EA0100 	    orr r0,r1
 4088 1176 5060     	    str r0,[r2,#AFIO_MAPR]
 4089 1178 4FF00002 	    _MOV32 r2,TIMER2_BASE_ADR
 4089      C4F20002 
 4090 1180 14E0     	    b 2f 
 4091              	setup_pwm3: // ch1|ch2 
ARM GAS  tinyBasic.s 			page 105


 4092              	    // TIMER3 clock enable 
 4093 1182 40F00200 	    orr r0,#2
 4094 1186 D061     	    str r0,[r2,#RCC_APB1ENR]
 4095              	    // TIMER3 OC remapping 
 4096 1188 4FF00002 	    _MOV32 r2,AFIO_BASE_ADR
 4096      C4F20102 
 4097 1190 5068     	    ldr r0,[r2,#AFIO_MAPR]
 4098 1192 6FF44061 	    mvn r1,#3<<10 
 4099 1196 00EA0100 	    and r0,r1 
 4100 119a 4FF40061 	    mov r1,#2<<10
 4101 119e 40EA0100 	    orr r0,r1 
 4102 11a2 5060     	    str r0,[r2,#AFIO_MAPR]
 4103 11a4 4FF48062 	    _MOV32 r2,TIMER3_BASE_ADR
 4103      C4F20002 
 4104              	2:  // PWM configuration 
 4105              	    //set TIMER prescaler to 32
 4106 11ac 4FF01F00 	    mov r0,#31 
 4107 11b0 1085     	    strh r0,[r2,#TIM_PSC]
 4108              	    // set autoreload value to 45000 (20msec period)
 4109 11b2 4AF6C870 	    _MOV32 r0,45000
 4109      C0F20000 
 4110 11ba 9085     	    strh r0,[r2,#TIM_ARR]
 4111              	    // set compare value for 1500Âµsec 
 4112 11bc 40F62F50 	    mov r0,#3375
 4113 11c0 0BB1     	    cbz r3,3f 
 4114 11c2 1087     	    strh r0,[r2,#TIM_CCR2]
 4115 11c4 00E0     	    b 4f 
 4116 11c6 9086     	3:  strh r0,[r2,#TIM_CCR1]
 4117              	    // set mode 
 4118 11c8 4FF06800 	4:  mov r0,#(0xd<<3)
 4119 11cc 4FF47F48 	    mov T1,#0xff00 
 4120 11d0 1BB1     	    cbz r3,4f 
 4121 11d2 4FEA0020 	    lsl r0,#8
 4122 11d6 4FEA1828 	    lsr T1,#8  
 4123 11da 118B     	4:  ldrh r1,[r2,#TIM_CCMR1]
 4124 11dc 01EA0801 	    and r1,T1 
 4125 11e0 41EA0001 	    orr r1,r0 
 4126 11e4 1183     	    strh r1,[r2,#TIM_CCMR1]
 4127              	    // enable OC output 
 4128 11e6 4FF00100 	    mov r0,#1 
 4129 11ea 0BB1     	    cbz r3,5f 
 4130 11ec 4FEA0010 	    lsl r0,#4 
 4131 11f0 118C     	5:  ldrh r1,[r2,#TIM_CCER]
 4132 11f2 41EA0001 	    orr r1,r0 
 4133 11f6 1184     	    strh r1,[r2,#TIM_CCER]
 4134              	    // enable counter 
 4135 11f8 4FF08100 	    mov r0,#1+(1<<7) // CE+ARPE  
 4136 11fc 1188     	    ldrh r1,[r2,TIM_CR1]
 4137 11fe 41EA0001 	    orr r1,r0
 4138 1202 1180     	    strh r1,[r2,TIM_CR1]
 4139              	    // generate a reload event 
 4140 1204 4FF00100 	    mov r0,#1 
 4141 1208 9082     	    strh r0,[r2,TIM_EGR]
 4142 120a 7047     	    _RET 
 4143              	
 4144 120c 00080140 	servo_port: .word GPIOA_BASE_ADR,15
 4144      0F000000 
ARM GAS  tinyBasic.s 			page 106


 4145 1214 000C0140 	            .word GPIOB_BASE_ADR,3
 4145      03000000 
 4146 121c 000C0140 	            .word GPIOB_BASE_ADR,4
 4146      04000000 
 4147 1224 000C0140 	            .word GPIOB_BASE_ADR,5
 4147      05000000 
 4148              	
 4149              	
 4150              	/*********************************
 4151              	  BASIC: SERVO_OFF expr 
 4152              	  disable servomotor channel
 4153              	*********************************/
 4154              	    _FUNC servo_off 
 4155 122c 00B5FFF7 	    _CALL expression 
 4155      FEFF5DF8 
 4155      04EB
 4156 1236 1B28     	    cmp r0,#TK_INTGR
 4157 1238 7FF4FEAF 	    bne syntax_error
 4158 123c 0129     	    cmp r1,#1
 4159 123e 03D5     	    bpl 1f 
 4160 1240 4FF00A00 	0:  mov r0,#ERR_BAD_VALUE
 4161 1244 FFF7FEBF 	    b tb_error 
 4162 1248 0529     	1:  cmp r1,#5
 4163 124a F9D5     	    bpl 0b 
 4164 124c A1F10103 	    sub r3,r1,#1
 4165 1250 DFF85C24 	    ldr r2,=servo_port 
 4166 1254 4FEAC301 	    lsl r1,r3,#3
 4167              	    // reconfigure GPIO 
 4168 1258 52F8040B 	    ldr r0,[r2],#4
 4169 125c 1168     	    ldr r1,[r2]
 4170 125e 4FF01002 	    mov r2,#16 // INPUT_PD 
 4171 1262 00B5FFF7 	    _CALL gpio_config
 4171      D8FB5DF8 
 4171      04EB
 4172 126c 4FF00002 	    _MOV32 r2, TIMER2_BASE_ADR  
 4172      C4F20002 
 4173 1274 022B     	    cmp r3,#2
 4174 1276 05D4     	    bmi 2f
 4175 1278 A3F10203 	    sub r3,#2 
 4176 127c 4FF48062 	    _MOV32 r2,TIMER3_BASE_ADR
 4176      C4F20002 
 4177 1284 4FF00100 	2:  mov r0,#1 
 4178 1288 0BB1     	    cbz r3,3f 
 4179 128a 4FEA0010 	    lsl r0,#4 
 4180 128e 118C     	3:  ldrh r1,[r2,TIM_CCER]
 4181 1290 81EA0001 	    eor r1,r0 
 4182 1294 1184     	    strh r1,[r2,TIM_CCER] 
 4183 1296 7047     	    _RET 
 4184              	
 4185              	
 4186              	/*********************************
 4187              	  BASIC: SERVO_POS {1..4},expr 
 4188              	  set servo position 
 4189              	*********************************/
 4190              	    _FUNC servo_pos 
 4191 1298 00B5FFF7 	    _CALL arg_list 
 4191      FEFF5DF8 
ARM GAS  tinyBasic.s 			page 107


 4191      04EB
 4192 12a2 0228     	    cmp r0,#2
 4193 12a4 7FF4FEAF 	    bne syntax_error 
 4194 12a8 BCE80600 	    ldmia DP!,{r1,r2} // value, channel 
 4195 12ac A2F10102 	    sub r2,#1 
 4196 12b0 022A     	    cmp r2,#2 
 4197 12b2 04D5     	    bpl 3f // timer 3 channels 
 4198              	// timer 2 channels 
 4199 12b4 4FF00003 	    _MOV32 r3,TIMER2_BASE_ADR
 4199      C4F20003 
 4200 12bc 05E0     	    b 4f 
 4201 12be 4FF48063 	3:  _MOV32 r3,TIMER3_BASE_ADR
 4201      C4F20003 
 4202 12c6 A2F10202 	    sub r2,#2 
 4203 12ca 4AF6C870 	4:  _MOV32 r0,45000
 4203      C0F20000 
 4204 12d2 01FB00F0 	    mul r0,r1 
 4205 12d6 44F62061 	    _MOV32 r1,20000
 4205      C0F20001 
 4206 12de B0FBF1F0 	    udiv r0,r1 
 4207 12e2 0AB1     	    cbz r2,6f 
 4208 12e4 1887     	    strh r0,[r3,#TIM_CCR2]
 4209 12e6 00E0     	    b 7f 
 4210 12e8 9886     	6:  strh r0,[r3,#TIM_CCR1]
 4211 12ea 4FF00600 	7:  mov r0,#6 
 4212 12ee 9882     	    strh r0,[r3,#TIM_EGR]
 4213 12f0 7047     	    _RET 
 4214              	
 4215              	
 4216              	/*********************************
 4217              	  BASIC: SLEEP 
 4218              	  place MCU lowest power mode 
 4219              	  wait for external interrpt or
 4220              	  reset.
 4221              	*********************************/
 4222 12f2 00BF     	    _FUNC sleep
 4223 12f4 4EF61050 	    _MOV32 r0,SCR_BASE_ADR
 4223      CEF20000 
 4224 12fc 4FF00401 	    mov r1,#SCR_SLEEPDEEP
 4225 1300 0160     	    str r1,[r0]
 4226 1302 4FF4E040 	    _MOV32 r0,PWR_CR_ADR
 4226      C4F20000 
 4227 130a 4FF00601 	    mov r1,#PWR_CR_PDDS+PWR_CR_CWUF
 4228 130e 0160     	    str r1,[r0]
 4229 1310 20BF     	    wfe 
 4230 1312 7047     	    _RET 
 4231              	
 4232              	/************************************
 4233              	  BASIC: SPC(expr)
 4234              	  mov cursor right expr spaces 
 4235              	***********************************/
 4236              	    _FUNC spc 
 4237 1314 00B5FFF7 	    _CALL func_args 
 4237      FEFF5DF8 
 4237      04EB
 4238 131e 0128     	    cmp r0,#1
 4239 1320 7FF4FEAF 	    bne syntax_error 
ARM GAS  tinyBasic.s 			page 108


 4240 1324 206C     	    ldr r0,[UPP,#FLAGS]
 4241 1326 10F0800F 	    tst r0,#FPRINT 
 4242 132a 5CF8040B 	    _POP r0 
 4243 132e 04D0     	    beq 9f 
 4244 1330 00B5FFF7 	    _CALL spaces 
 4244      FEFF5DF8 
 4244      04EB
 4245 133a 7047     	9:  _RET 
 4246              	
 4247              	    _FUNC spi_read
 4248 133c 7047     	    _RET 
 4249              	
 4250 133e 00BF     	    _FUNC spi_enable
 4251 1340 7047     	    _RET 
 4252              	
 4253 1342 00BF     	    _FUNC spi_select
 4254 1344 7047     	    _RET 
 4255              	
 4256 1346 00BF     	    _FUNC spi_write
 4257 1348 7047     	    _RET 
 4258              	
 4259              	/******************************
 4260              	  BASIC: STOP 
 4261              	  stop program executre but 
 4262              	  keep execution state for 
 4263              	  resume 
 4264              	******************************/
 4265 134a 00BF     	    _FUNC stop
 4266 134c 206C10F0 	    _RTO 
 4266      010F03D1 
 4266      4FF00700 
 4266      FFF7FEBF 
 4267 135c 6068     	    ldr r0,[UPP,#COUNT]
 4268 135e 2CE9010C 	    stmdb DP!,{r0,IN,BPTR}
 4269 1362 206C     	    ldr r0,[UPP,#FLAGS]
 4270 1364 4FF00901 	    mov r1,#FRUN+FSTOP
 4271 1368 80EA0100 	    eor r0,r1
 4272 136c 2064     	    str r0,[UPP,#FLAGS]
 4273 136e 8AEA0A0A 	    eor IN,IN 
 4274 1372 8BEA0B0B 	    eor BPTR,BPTR 
 4275 1376 C4F804A0 	    str IN,[UPP,#COUNT]
 4276 137a C4F800A0 	    str IN,[UPP,#IN_SAVED]
 4277 137e C4F808A0 	    str IN,[UPP,#BASICPTR]
 4278 1382 4FF4A040 	    _MOV32 r0,RAM_END
 4278      C2F20000 
 4279 138a 8546     	    mov sp,r0
 4280 138c FFF7FEBF 	    b cmd_line 
 4281              	
 4282              	
 4283              	/**************************
 4284              	  BASIC: TAB(expr)
 4285              	  move cursor column expr 
 4286              	**************************/
 4287              	    _FUNC tab 
 4288 1390 00B5FFF7 	    _CALL func_args  
 4288      FEFF5DF8 
 4288      04EB
ARM GAS  tinyBasic.s 			page 109


 4289 139a 0128     	    cmp r0,#1 
 4290 139c 7FF4FEAF 	    bne syntax_error 
 4291 13a0 206C     	    ldr r0,[UPP,#FLAGS]
 4292 13a2 10F0800F 	    tst r0,#FPRINT
 4293 13a6 5CF8040B 	    _POP r0 
 4294 13aa 04D0     	    beq 9f 
 4295 13ac 00B5FFF7 	    _CALL cursor_x 
 4295      FEFF5DF8 
 4295      04EB
 4296 13b6 7047     	9:  _RET 
 4297              	
 4298              	
 4299              	/**************************
 4300              	  BASIC: TICKS 
 4301              	  return msec counter
 4302              	**************************/  
 4303              	    _FUNC get_ticks
 4304 13b8 E169     	    ldr r1,[UPP,#TICKS]
 4305 13ba 4FF01B00 	    mov r0,#TK_INTGR
 4306 13be 7047     	    _RET  
 4307              	
 4308              	/*************************
 4309              	  BASIC: TIMER expr 
 4310              	  set countdown timer 
 4311              	************************/
 4312              	    _FUNC set_timer
 4313 13c0 00B5FFF7 	    _CALL expression 
 4313      FEFF5DF8 
 4313      04EB
 4314 13ca 1B28     	    cmp r0,#TK_INTGR
 4315 13cc 7FF4FEAF 	    bne syntax_error 
 4316 13d0 2162     	    str r1,[UPP,#TIMER]
 4317 13d2 7047     	    _RET 
 4318              	
 4319              	/***************************
 4320              	  BASIC: TIMEOUT
 4321              	  check for timer expiration 
 4322              	  return -1 true || 0 false
 4323              	****************************/
 4324              	    _FUNC timeout
 4325 13d4 81EA0101 	    eor r1,r1 
 4326 13d8 206A     	    ldr r0,[UPP,#TIMER]
 4327 13da 08B9     	    cbnz r0,9f 
 4328 13dc 6FEA0101 	    mvn r1,r1 
 4329 13e0 4FF01B00 	9:  mov r0,#TK_INTGR    
 4330 13e4 7047     	    _RET 
 4331              	
 4332              	/****************************************
 4333              	  BASIC:  TONE freq, duration 
 4334              	  play a tone with frequency freq and duration
 4335              	  in milliseconds
 4336              	***********************************************/
 4337 13e6 00BF     	    _FUNC tone
 4338 13e8 00B5FFF7 	    _CALL arg_list 
 4338      FEFF5DF8 
 4338      04EB
 4339 13f2 0228     	    cmp r0,#2 
ARM GAS  tinyBasic.s 			page 110


 4340 13f4 7FF4FEAF 	    bne syntax_error
 4341 13f8 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4341      C4F20002 
 4342 1400 DCF80400 	    ldr r0,[DP,#4] // freq
 4343 1404 4AF62021 	    _MOV32 r1,4500000
 4343      C0F24401 
 4344 140c B1FBF0F1 	    udiv r1,r0 
 4345 1410 9185     	    strh r1,[r2,#TIM_ARR]
 4346 1412 4FEA5101 	    lsr r1,#1 
 4347 1416 9186     	    strh r1,[r2,#TIM_CCR1]
 4348 1418 4FF00100 	    mov r0,#1
 4349 141c 1084     	    strh r0,[r2,#TIM_CCER]
 4350 141e 1080     	    strh r0,[r2,#TIM_CR1]
 4351 1420 908A     	    ldrh r0,[r2,#TIM_EGR]
 4352 1422 40F00200 	    orr r0,#2 
 4353 1426 9082     	    strh r0,[r2,#TIM_EGR] 
 4354 1428 BCE80300 	    ldmia DP!,{r0,r1}
 4355              	    // pause duration  
 4356 142c E169     	    ldr r1,[UPP,#TICKS]
 4357 142e 0844     	    add r0,r1 
 4358 1430 E169     	1:  ldr r1,[UPP,#TICKS]
 4359 1432 8142     	    cmp r1,r0 
 4360 1434 FCD4     	    bmi 1b 
 4361              	    // stop tone 
 4362 1436 1088     	    ldrh r0,[R2,#TIM_CR1]
 4363 1438 80F00100 	    eor r0,#1 
 4364 143c 1080     	    strh r0,[R2,#TIM_CR1]     
 4365 143e 7047     	    _RET 
 4366              	
 4367              	/************************************
 4368              	  BASIC: TONE_INIT 
 4369              	  initialize tone_generator
 4370              	  output on GPIOB:6 
 4371              	************************************/
 4372              	    _FUNC tone_init 
 4373              	    // configure pin 
 4374 1440 4FF44060 	    _MOV32 r0,GPIOB_BASE_ADR
 4374      C4F20100 
 4375 1448 4FF00601 	    mov r1,#6 // gpio pin 
 4376 144c 4FF00A02 	    mov r2,#0xa // OUTPUT_AFPP 
 4377 1450 00B5FFF7 	    _CALL gpio_config
 4377      E1FA5DF8 
 4377      04EB
 4378              	    // enable timer4 clock 
 4379 145a 4FF48052 	    _MOV32 r2,RCC_BASE_ADR
 4379      C4F20202 
 4380 1462 4FF00400 	    mov r0,#(1<<2)
 4381 1466 D169     	    ldr r1,[R2,#RCC_APB1ENR]
 4382 1468 40EA0100 	    orr r0,r1 
 4383 146c D061     	    str r0,[R2,#RCC_APB1ENR]
 4384              	    // configure TIMER4 in PWM mode 
 4385 146e 4FF40062 	    _MOV32 r2,TIMER4_BASE_ADR
 4385      C4F20002 
 4386              	    // prescale divisor 16 
 4387 1476 4FF00F00 	    mov r0,#15 
 4388 147a 9062     	    str r0,[r2,#TIM_PSC]
 4389              	    // pwm mode 6
ARM GAS  tinyBasic.s 			page 111


 4390 147c 138B     	    ldrh r3,[r2,#TIM_CCMR1]
 4391 147e 4FF0FF00 	    mov r0,#255
 4392 1482 6FEA0000 	    mvn r0,r0 
 4393 1486 03EA0003 	    and r3,r0 // clear bit field 
 4394 148a 4FF06800 	    mov r0,#0x68
 4395 148e 43EA0003 	    orr r3,r0  
 4396 1492 1383     	    strh r3,[R2,#TIM_CCMR1]     
 4397 1494 7047     	    _RET 
 4398              	
 4399              	
 4400              	/****************************************
 4401              	  BASIC: TRACE n 
 4402              	  enable execution trace 
 4403              	  0   ddisable
 4404              	  1   show current line#
 4405              	  2  show line#+data_stack
 4406              	  3  show line#+data_stack+main_stack 
 4407              	***************************************/
 4408 1496 00BF     	    _FUNC trace 
 4409 1498 00B5FFF7 	    _CALL next_token 
 4409      FEFF5DF8 
 4409      04EB
 4410 14a2 1B28     	    cmp r0,#TK_INTGR  
 4411 14a4 7FF4FEAF 	    bne syntax_error 
 4412 14a8 01F00301 	    and r1,#3 
 4413 14ac C4F8CC10 	    str r1,[UPP,#TRACE_LEVEL]
 4414 14b0 7047     	    _RET 
 4415              	
 4416              	
 4417              	/***************************
 4418              	  BASIC: UBOUND 
 4419              	  return last indice of @
 4420              	  output:
 4421              	    r0  TK_INTGR 
 4422              	    r1  +int 
 4423              	**************************/
 4424 14b2 00BF     	    _FUNC ubound
 4425 14b4 D4F8C810 	    ldr r1,[UPP,#ARRAY_ADR]
 4426 14b8 D4F8D000 	    ldr r0,[UPP,#HERE]
 4427 14bc A1EB0001 	    sub r1,r0 
 4428 14c0 4FEA9101 	    lsr r1,#2
 4429 14c4 4FF01B00 	    mov r0,#TK_INTGR 
 4430 14c8 7047     	    _RET 
 4431              	
 4432              	/****************************
 4433              	  BASIC: UFLASH 
 4434              	  return user flash address
 4435              	*****************************/
 4436 14ca 00BF     	    _FUNC uflash
 4437 14cc 7749     	    ldr r1,=user
 4438 14ce 4FF01B00 	    mov r0,#TK_INTGR 
 4439 14d2 7047     	    _RET 
 4440              	
 4441              	
 4442              	/************************************
 4443              	  BASIC: UNTIL relation 
 4444              	  close a DO..UNTIL loop 
ARM GAS  tinyBasic.s 			page 112


 4445              	  loop until relation come true 
 4446              	************************************/
 4447              	    _FUNC until
 4448 14d4 00B5FFF7 	    _CALL relation 
 4448      FEFF5DF8 
 4448      04EB
 4449 14de 11B1     	    cbz r1,9f
 4450 14e0 0CF1080C 	    add DP,#8
 4451 14e4 7047     	    _RET  
 4452 14e6 9CE8000C 	9:  ldmia DP,{IN,BPTR}
 4453 14ea 9BF80200 	    ldrb r0,[BPTR,#2]
 4454 14ee 6060     	    str r0,[UPP,#COUNT]
 4455 14f0 7047     	    _RET 
 4456              	
 4457              	/*************************************
 4458              	  BASIC: WAIT addr,expr1[,expr2] 
 4459              	  wait until *addr&expr1 is not null 
 4460              	  or until (*addr&expr1)^expr2 is null 
 4461              	***************************************/
 4462 14f2 00BF     	    _FUNC wait
 4463 14f4 00B5FFF7 	    _CALL arg_list 
 4463      FEFF5DF8 
 4463      04EB
 4464 14fe 0228     	    cmp r0,#2
 4465 1500 03D0     	    beq 2f 
 4466 1502 0328     	    cmp r0,#3
 4467 1504 07D0     	    beq 4f
 4468 1506 FFF7FEBF 	    b syntax_error 
 4469 150a BCE80300 	2:  ldmia DP!,{r0,r1}
 4470 150e 0A88     	3:  ldrh r2,[r1]
 4471 1510 0240     	    ands r2,r0 
 4472 1512 FCD0     	    beq 3b 
 4473 1514 06E0     	    b 9f 
 4474 1516 BCE80700 	4:  ldmia DP!,{r0,r1,r2}
 4475 151a 1388     	5:  ldrh r3,[r2]
 4476 151c 83EA0003 	    eor r3,r0
 4477 1520 0B40     	    ands r3,r1 
 4478 1522 FAD0     	    beq 5b 
 4479 1524 7047     	9:  _RET 
 4480              	
 4481              	/*********************************************
 4482              	  BASIC: WORDS 
 4483              	  print list of BASIC WORDS in dictionary 
 4484              	  use:
 4485              	    r0,r1,r2,T1,T2  
 4486              	********************************************/
 4487 1526 00BF     	    _FUNC words
 4488 1528 206C10F0 	    _CLO 
 4488      010F03D0 
 4488      4FF00700 
 4488      FFF7FEBF 
 4489 1538 DFF87881 	    ldr T1,=kword_dict
 4490 153c 89EA0909 	    eor T2,T2
 4491 1540 82EA0202 	    eor r2,r2  
 4492              	1:  
 4493 1544 4046     	    mov r0,T1
 4494 1546 00B5FFF7 	    _CALL strlen
ARM GAS  tinyBasic.s 			page 113


 4494      FEFF5DF8 
 4494      04EB
 4495 1550 F0B1     	    cbz r0,4f 
 4496 1552 8144     	    add T2,r0 
 4497 1554 B9F1500F 	    cmp T2,#80 
 4498 1558 06D4     	    bmi 2f
 4499 155a 89EA0909 	    eor T2,T2  
 4500 155e 00B5FFF7 	    _CALL cr 
 4500      FEFF5DF8 
 4500      04EB
 4501 1568 4046     	2:  mov r0,T1 
 4502 156a 00B5FFF7 	    _CALL uart_puts 
 4502      FEFF5DF8 
 4502      04EB
 4503 1574 4FF02000 	    mov r0,#SPACE
 4504 1578 09F10109 	    add T2,#1  
 4505 157c 00B5FFF7 	    _CALL uart_putc
 4505      FEFF5DF8 
 4505      04EB
 4506 1586 02F10102 	    add r2,#1 
 4507 158a 58F80C8C 	    ldr T1,[T1,#-12]
 4508 158e D9E7     	    b 1b 
 4509 1590 19EA0909 	4:  ands T2,T2
 4510 1594 04D0     	    beq 5f 
 4511 1596 00B5FFF7 	    _CALL cr 
 4511      FEFF5DF8 
 4511      04EB
 4512 15a0 1046     	5:  mov r0,r2 
 4513 15a2 4FF00A01 	    mov r1,#10
 4514 15a6 00B5FFF7 	    _CALL print_int 
 4514      FEFF5DF8 
 4514      04EB
 4515 15b0 4148     	    ldr r0,=dict_words
 4516 15b2 00B5FFF7 	    _CALL uart_puts  
 4516      FEFF5DF8 
 4516      04EB
 4517 15bc 7047     	9:  _RET 
 4518              	
 4519 15be 776F7264 	dict_words: .asciz "words in dictionary" 
 4519      7320696E 
 4519      20646963 
 4519      74696F6E 
 4519      61727900 
 4520              	
 4521              	
 4522              	/**************************************
 4523              	  BASIC: XOR(expr1,expr2)
 4524              	  binary exclusive or between 2 expressions
 4525              	**************************************/
 4526 15d2 00BF     	    _FUNC bit_xor
 4527 15d4 00B5FFF7 	    _CALL func_args
 4527      FEFF5DF8 
 4527      04EB
 4528 15de 0228     	    cmp r0,#2
 4529 15e0 7FF4FEAF 	    bne syntax_error
 4530 15e4 5CF8040B 	    _POP r0
 4531 15e8 5CF8041B 	    _POP r1 
ARM GAS  tinyBasic.s 			page 114


 4532 15ec 81EA0001 	    eor r1,r0 
 4533 15f0 4FF01B00 	    mov r0,#TK_INTGR
 4534 15f4 7047     	    _RET 
 4535              	
 4536              	/***************************************
 4537              	    BASIC: XPOS 
 4538              	    report cursor column on terminal 
 4539              	***************************************/
 4540 15f6 00BF     	    _FUNC xpos 
 4541 15f8 00B5FFF7 	    _CALL get_curpos
 4541      FEFF5DF8 
 4541      04EB
 4542 1602 4FF01B00 	    mov r0,#TK_INTGR
 4543 1606 7047     	    _RET 
 4544              	
 4545              	/***********************************
 4546              	    BASIC: YPOS 
 4547              	    report cursor line on terminal 
 4548              	***********************************/
 4549              	    _FUNC ypos 
 4550 1608 00B5FFF7 	    _CALL get_curpos 
 4550      FEFF5DF8 
 4550      04EB
 4551 1612 0146     	    mov r1,r0 
 4552 1614 4FF01B00 	    mov r0,#TK_INTGR
 4553 1618 7047     	    _RET 
 4554              	
 4555              	
 4556              	/**********************************
 4557              	     argument stack manipulation
 4558              	**********************************/
 4559              	
 4560              	/**********************************
 4561              	  BASIC PUSH expr[,expr] 
 4562              	  push integers on stack 
 4563              	*********************************/
 4564 161a 00BF     	    _FUNC cmd_push 
 4565 161c 00B5FFF7 	    _CALL arg_list
 4565      FEFF5DF8 
 4565      04EB
 4566 1626 7047     	    _RET 
 4567              	
 4568              	/********************************
 4569              	  BASIC: POP 
 4570              	  pop an integer out of stack 
 4571              	********************************/    
 4572              	    _FUNC fn_pop 
 4573 1628 5CF8041B 	    _POP r1 
 4574 162c 4FF01B00 	    mov r0,#TK_INTGR 
 4575 1630 7047     	    _RET 
 4576              	
 4577              	/*******************************
 4578              	  BASIC: DROP n 
 4579              	  discard n integer from stack
 4580              	*******************************/
 4581 1632 00BF     	    _FUNC drop 
 4582 1634 00B5FFF7 	    _CALL expression 
ARM GAS  tinyBasic.s 			page 115


 4582      FEFF5DF8 
 4582      04EB
 4583 163e 1B28     	    cmp r0,#TK_INTGR 
 4584 1640 7FF4FEAF 	    bne syntax_error 
 4585 1644 4FF00400 	    mov r0,#4 
 4586 1648 01FB00F0 	    mul r0,r1 
 4587 164c 8444     	    add DP,r0 
 4588 164e 7047     	    _RET 
 4589              	
 4590              	/********************************
 4591              	  BASIC: GET(expr) 
 4592              	  retreive nth element from stack 
 4593              	********************************/
 4594              	    _FUNC get 
 4595 1650 00B5FFF7 	    _CALL func_args
 4595      FEFF5DF8 
 4595      04EB
 4596 165a 0128     	    cmp r0,#1 
 4597 165c 7FF4FEAF 	    bne syntax_error 
 4598 1660 5CF8040B 	    _POP r0
 4599 1664 4FF00401 	    mov r1,#4 
 4600 1668 01FB00F0 	    mul r0,r1 
 4601 166c 5CF80010 	    ldr r1,[DP,r0]
 4602 1670 4FF01B00 	    mov r0,#TK_INTGR
 4603 1674 7047     	    _RET 
 4604              	
 4605              	/*************************************
 4606              	  BASIC: PUT value,n  
 4607              	  store value at nth position on stack
 4608              	**************************************/
 4609 1676 00BF     	    _FUNC put
 4610 1678 00B5FFF7 	    _CALL arg_list 
 4610      FEFF5DF8 
 4610      04EB
 4611 1682 0228     	    cmp r0,#2 
 4612 1684 7FF4FEAF 	    bne syntax_error 
 4613 1688 5CF8040B 	    _POP r0 
 4614 168c 4FF00401 	    mov r1,#4 
 4615 1690 01FB00F0 	    mul r0,r1 
 4616 1694 5CF8041B 	    _POP r1
 4617 1698 4CF80010 	    str r1,[DP,r0]
 4618 169c 7047     	    _RET 
 4619              	
 4620              	
 4621 169e 0000     	  .section .rodata.user
 4622              	  .p2align 10 
 4623              	user:
 4624 0000 FFFFFFFF 	  .space 1024,255
 4624      FFFFFFFF 
 4624      FFFFFFFF 
 4624      FFFFFFFF 
 4624      FFFFFFFF 
 4625              	
 4626              	/*************************************************
 4627              	   extra FLASH memory not used by Tiny BASIC
 4628              	   is used to save BASIC programs.
 4629              	************************************************/
ARM GAS  tinyBasic.s 			page 116


 4630              	  .p2align 10  // align to 1KB, smallest erasable segment 
 4631              	  .section .rodata.fs
 4632              	FILE_SYSTEM: // file system start here
ARM GAS  tinyBasic.s 			page 117


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  tinyBasic.s 			page 118


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  tinyBasic.s 			page 119


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
       stm32f103.inc:192    *ABS*:0000000040012400 ADC1_BASE_ADR
       stm32f103.inc:193    *ABS*:0000000000000000 ADC_SR
       stm32f103.inc:194    *ABS*:0000000000000004 ADC_CR1
       stm32f103.inc:195    *ABS*:0000000000000008 ADC_CR2
       stm32f103.inc:196    *ABS*:000000000000000c ADC_SMPR1
       stm32f103.inc:197    *ABS*:0000000000000010 ADC_SMPR2
       stm32f103.inc:198    *ABS*:0000000000000014 ADC_JOFR1
       stm32f103.inc:199    *ABS*:0000000000000018 ADC_JOFR2
       stm32f103.inc:200    *ABS*:000000000000001c ADC_JOFR3
       stm32f103.inc:201    *ABS*:0000000000000020 ADC_JOFR4
       stm32f103.inc:202    *ABS*:0000000000000024 ADC_HTR
       stm32f103.inc:203    *ABS*:0000000000000028 ADC_LTR
       stm32f103.inc:204    *ABS*:000000000000002c ADC_SQR1
       stm32f103.inc:205    *ABS*:0000000000000030 ADC_SQR2
       stm32f103.inc:206    *ABS*:0000000000000034 ADC_SQR3
       stm32f103.inc:207    *ABS*:0000000000000038 ADC_JSQR
       stm32f103.inc:208    *ABS*:000000000000003c ADC_JDR1
       stm32f103.inc:209    *ABS*:0000000000000040 ADC_JDR2
       stm32f103.inc:210    *ABS*:0000000000000044 ADC_JDR3
       stm32f103.inc:211    *ABS*:0000000000000048 ADC_JDR4
       stm32f103.inc:212    *ABS*:000000000000004c ADC_DR
       stm32f103.inc:215    *ABS*:0000000040012c00 TIMER1_BASE_ADR
       stm32f103.inc:216    *ABS*:0000000040000000 TIMER2_BASE_ADR
       stm32f103.inc:217    *ABS*:0000000040000400 TIMER3_BASE_ADR
       stm32f103.inc:218    *ABS*:0000000040000800 TIMER4_BASE_ADR
       stm32f103.inc:220    *ABS*:0000000000000000 TIM_CR1
       stm32f103.inc:221    *ABS*:0000000000000004 TIM_CR2
       stm32f103.inc:222    *ABS*:0000000000000008 TIM_SMCR
       stm32f103.inc:223    *ABS*:000000000000000c TIM_DIER
       stm32f103.inc:224    *ABS*:0000000000000010 TIM_SR
       stm32f103.inc:225    *ABS*:0000000000000014 TIM_EGR
       stm32f103.inc:226    *ABS*:0000000000000018 TIM_CCMR1
       stm32f103.inc:227    *ABS*:000000000000001c TIM_CCMR2
       stm32f103.inc:228    *ABS*:0000000000000020 TIM_CCER
       stm32f103.inc:229    *ABS*:0000000000000024 TIM_CNT
       stm32f103.inc:230    *ABS*:0000000000000028 TIM_PSC
ARM GAS  tinyBasic.s 			page 120


       stm32f103.inc:231    *ABS*:000000000000002c TIM_ARR
       stm32f103.inc:232    *ABS*:0000000000000034 TIM_CCR1
       stm32f103.inc:233    *ABS*:0000000000000038 TIM_CCR2
       stm32f103.inc:234    *ABS*:0000000000000048 TIM_DCR
       stm32f103.inc:235    *ABS*:000000000000004c TIM_DMAR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
ARM GAS  tinyBasic.s 			page 121


           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:37     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:38     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:39     *ABS*:0000000000000002 TK_COMMA
      tbi_macros.inc:40     *ABS*:0000000000000003 TK_SEMIC
      tbi_macros.inc:41     *ABS*:0000000000000004 TK_SHARP
      tbi_macros.inc:42     *ABS*:0000000000000005 TK_LPAREN
      tbi_macros.inc:43     *ABS*:0000000000000006 TK_RPAREN
      tbi_macros.inc:44     *ABS*:0000000000000007 TK_PLUS
      tbi_macros.inc:45     *ABS*:0000000000000008 TK_MINUS
      tbi_macros.inc:46     *ABS*:0000000000000009 TK_MULT
      tbi_macros.inc:47     *ABS*:000000000000000a TK_DIV
      tbi_macros.inc:48     *ABS*:000000000000000b TK_MOD
      tbi_macros.inc:49     *ABS*:000000000000000c TK_ARRAY
      tbi_macros.inc:50     *ABS*:000000000000000d TK_EQUAL
      tbi_macros.inc:51     *ABS*:000000000000000e TK_GT
      tbi_macros.inc:52     *ABS*:000000000000000f TK_LT
      tbi_macros.inc:53     *ABS*:0000000000000010 TK_GE
      tbi_macros.inc:54     *ABS*:0000000000000011 TK_LE
      tbi_macros.inc:55     *ABS*:0000000000000012 TK_NE
      tbi_macros.inc:57     *ABS*:0000000000000013 TK_CHAR
      tbi_macros.inc:58     *ABS*:0000000000000014 TK_VAR
      tbi_macros.inc:59     *ABS*:0000000000000015 TK_IFUNC
      tbi_macros.inc:60     *ABS*:0000000000000016 TK_CFUNC
      tbi_macros.inc:61     *ABS*:0000000000000017 TK_CMD
      tbi_macros.inc:63     *ABS*:0000000000000018 TK_SCONST
      tbi_macros.inc:64     *ABS*:0000000000000019 TK_CONST
      tbi_macros.inc:65     *ABS*:000000000000001a TK_LABEL
      tbi_macros.inc:66     *ABS*:000000000000001b TK_INTGR
      tbi_macros.inc:67     *ABS*:000000000000001c TK_QSTR
      tbi_macros.inc:68     *ABS*:000000000000001d TK_INVALID
      tbi_macros.inc:73     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:74     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:75     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:76     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:77     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:78     *ABS*:0000000000000005 ERR_NO_LINE
ARM GAS  tinyBasic.s 			page 122


      tbi_macros.inc:79     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:80     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:81     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:82     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:83     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:84     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:85     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:86     *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:87     *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:88     *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:89     *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:95     *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:97     *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:115    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:116    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:117    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:118    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:119    *ABS*:0000000000000010 DATA
      tbi_macros.inc:120    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:121    *ABS*:0000000000000018 BASE
      tbi_macros.inc:122    *ABS*:000000000000001c TICKS
      tbi_macros.inc:123    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:124    *ABS*:0000000000000024 SEED
      tbi_macros.inc:125    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:126    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:127    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:128    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:129    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:130    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:131    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:132    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:133    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:134    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:135    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:136    *ABS*:0000000000000060 VARS
      tbi_macros.inc:137    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:138    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:139    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:140    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:141    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:144    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:145    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:146    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:147    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:148    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:149    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:150    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:151    *ABS*:0000000000000080 FPRINT
      tbi_macros.inc:153    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:154    *ABS*:000000000000ffff MAX_LINENO
       cmd_index.inc:25     *ABS*:0000000000000000 ABS_IDX
       cmd_index.inc:26     *ABS*:0000000000000001 ANA_IDX
       cmd_index.inc:27     *ABS*:0000000000000002 ADC_IDX
       cmd_index.inc:28     *ABS*:0000000000000003 AND_IDX
       cmd_index.inc:29     *ABS*:0000000000000004 ASC_IDX
       cmd_index.inc:30     *ABS*:0000000000000005 AUTORUN_IDX
       cmd_index.inc:31     *ABS*:0000000000000006 AWU_IDX
ARM GAS  tinyBasic.s 			page 123


       cmd_index.inc:32     *ABS*:0000000000000007 BIT_IDX
       cmd_index.inc:33     *ABS*:0000000000000008 BRES_IDX
       cmd_index.inc:34     *ABS*:0000000000000009 BSET_IDX
       cmd_index.inc:35     *ABS*:000000000000000a BTEST_IDX
       cmd_index.inc:36     *ABS*:000000000000000b BTOGL_IDX
       cmd_index.inc:37     *ABS*:000000000000000c CHAR_IDX
       cmd_index.inc:38     *ABS*:000000000000000d CLS_IDX
       cmd_index.inc:39     *ABS*:000000000000000e CONST_IDX
       cmd_index.inc:40     *ABS*:000000000000000f DATA_IDX
       cmd_index.inc:41     *ABS*:0000000000000010 DEC_IDX
       cmd_index.inc:42     *ABS*:0000000000000011 DIR_IDX
       cmd_index.inc:43     *ABS*:0000000000000012 DO_IDX
       cmd_index.inc:44     *ABS*:0000000000000013 DROP_IDX
       cmd_index.inc:45     *ABS*:0000000000000014 DUMP_IDX
       cmd_index.inc:46     *ABS*:0000000000000015 END_IDX
       cmd_index.inc:47     *ABS*:0000000000000016 ERASE_IDX
       cmd_index.inc:48     *ABS*:0000000000000017 FOR_IDX
       cmd_index.inc:49     *ABS*:0000000000000018 FORGET_IDX
       cmd_index.inc:50     *ABS*:0000000000000019 FREE_IDX
       cmd_index.inc:51     *ABS*:000000000000001a GET_IDX
       cmd_index.inc:52     *ABS*:000000000000001b GOSUB_IDX
       cmd_index.inc:53     *ABS*:000000000000001c GOTO_IDX
       cmd_index.inc:54     *ABS*:000000000000001d HEX_IDX
       cmd_index.inc:55     *ABS*:000000000000001e IF_IDX
       cmd_index.inc:56     *ABS*:000000000000001f IN_IDX
       cmd_index.inc:57     *ABS*:0000000000000020 INPUT_IDX
       cmd_index.inc:58     *ABS*:0000000000000021 INVERT_IDX
       cmd_index.inc:59     *ABS*:0000000000000022 KEY_IDX
       cmd_index.inc:60     *ABS*:0000000000000023 LET_IDX
       cmd_index.inc:61     *ABS*:0000000000000024 LIST_IDX
       cmd_index.inc:62     *ABS*:0000000000000025 LOAD_IDX
       cmd_index.inc:63     *ABS*:0000000000000026 LOCATE_IDX
       cmd_index.inc:64     *ABS*:0000000000000027 LSHIFT_IDX
       cmd_index.inc:65     *ABS*:0000000000000028 NEW_IDX
       cmd_index.inc:66     *ABS*:0000000000000029 NEXT_IDX
       cmd_index.inc:67     *ABS*:000000000000002a NOT_IDX
       cmd_index.inc:68     *ABS*:000000000000002b OR_IDX
       cmd_index.inc:69     *ABS*:000000000000002c OUT_IDX
       cmd_index.inc:70     *ABS*:000000000000002d PAD_IDX
       cmd_index.inc:71     *ABS*:000000000000002e PAUSE_IDX
       cmd_index.inc:72     *ABS*:000000000000002f PMODE_IDX
       cmd_index.inc:73     *ABS*:0000000000000030 PEEK8_IDX
       cmd_index.inc:74     *ABS*:0000000000000031 PEEK16_IDX
       cmd_index.inc:75     *ABS*:0000000000000032 PEEK32_IDX
       cmd_index.inc:76     *ABS*:0000000000000033 POKE8_IDX
       cmd_index.inc:77     *ABS*:0000000000000034 POKE16_IDX
       cmd_index.inc:78     *ABS*:0000000000000035 POKE32_IDX
       cmd_index.inc:79     *ABS*:0000000000000036 POP_IDX
       cmd_index.inc:80     *ABS*:0000000000000037 PRT_IDX
       cmd_index.inc:81     *ABS*:0000000000000038 PUSH_IDX
       cmd_index.inc:82     *ABS*:0000000000000039 PUT_IDX
       cmd_index.inc:83     *ABS*:000000000000003a QKEY_IDX
       cmd_index.inc:84     *ABS*:000000000000003b READ_IDX
       cmd_index.inc:85     *ABS*:000000000000003c REM_IDX
       cmd_index.inc:86     *ABS*:000000000000003d REST_IDX
       cmd_index.inc:87     *ABS*:000000000000003e RET_IDX
       cmd_index.inc:88     *ABS*:000000000000003f RND_IDX
ARM GAS  tinyBasic.s 			page 124


       cmd_index.inc:89     *ABS*:0000000000000040 RSHIFT_IDX
       cmd_index.inc:90     *ABS*:0000000000000041 RUN_IDX
       cmd_index.inc:91     *ABS*:0000000000000042 SAVE_IDX
       cmd_index.inc:92     *ABS*:0000000000000043 SERVO_INIT_IDX
       cmd_index.inc:93     *ABS*:0000000000000044 SERVO_OFF_IDX
       cmd_index.inc:94     *ABS*:0000000000000045 SERVO_POS_IDX
       cmd_index.inc:95     *ABS*:0000000000000046 SLEEP_IDX
       cmd_index.inc:96     *ABS*:0000000000000047 SPC_IDX
       cmd_index.inc:97     *ABS*:0000000000000048 STEP_IDX
       cmd_index.inc:98     *ABS*:0000000000000049 STOP_IDX
       cmd_index.inc:99     *ABS*:000000000000004a STORE_IDX
       cmd_index.inc:100    *ABS*:000000000000004b TAB_IDX
       cmd_index.inc:101    *ABS*:000000000000004c THEN_IDX
       cmd_index.inc:102    *ABS*:000000000000004d TICKS_IDX
       cmd_index.inc:103    *ABS*:000000000000004e TIMER_IDX
       cmd_index.inc:104    *ABS*:000000000000004f TMROUT_IDX
       cmd_index.inc:105    *ABS*:0000000000000050 TO_IDX
       cmd_index.inc:106    *ABS*:0000000000000051 TONE_IDX
       cmd_index.inc:107    *ABS*:0000000000000052 TONE_INIT_IDX
       cmd_index.inc:108    *ABS*:0000000000000053 TRACE_IDX
       cmd_index.inc:109    *ABS*:0000000000000054 UBOUND_IDX
       cmd_index.inc:110    *ABS*:0000000000000055 UFLASH_IDX
       cmd_index.inc:111    *ABS*:0000000000000056 UNTIL_IDX
       cmd_index.inc:112    *ABS*:0000000000000057 WAIT_IDX
       cmd_index.inc:113    *ABS*:0000000000000058 WORDS_IDX
       cmd_index.inc:114    *ABS*:0000000000000059 XOR_IDX
       cmd_index.inc:115    *ABS*:000000000000005a XPOS_IDX
       cmd_index.inc:116    *ABS*:000000000000005b YPOS_IDX
         tinyBasic.s:50     .text:0000000000000000 strlen
         tinyBasic.s:50     .text:0000000000000000 $t
         tinyBasic.s:74     .text:0000000000000018 cmove
         tinyBasic.s:86     .text:0000000000000030 move_from_end
         tinyBasic.s:80     .text:0000000000000022 move_from_low
         tinyBasic.s:108    .text:0000000000000044 strcpy
         tinyBasic.s:133    .text:0000000000000058 strcmp
         tinyBasic.s:158    .text:0000000000000074 prt_tok
         tinyBasic.s:172    .text:00000000000000bc tok_msg
         tinyBasic.s:172    .text:00000000000000bc $d
         tinyBasic.s:172    .text:00000000000000c4 $t
         tinyBasic.s:186    .text:00000000000000c4 prt_row
         tinyBasic.s:297    .text:0000000000000228 prt_chars
         tinyBasic.s:213    .text:0000000000000124 show_line_nbr
         tinyBasic.s:225    .text:0000000000000148 show_data_stack
         tinyBasic.s:240    .text:0000000000000188 data_stack
         tinyBasic.s:241    .text:0000000000000188 $d
         tinyBasic.s:247    .text:0000000000000198 show_main_stack
         tinyBasic.s:262    .text:00000000000001dc main_stack
         tinyBasic.s:263    .text:00000000000001dc $d
         tinyBasic.s:269    .text:00000000000001ec show_trace
         tinyBasic.s:319    .text:0000000000000250 search_target
         tinyBasic.s:1772   .text:0000000000000e54 next_token
         tinyBasic.s:383    .text:00000000000002c8 search_label
         tinyBasic.s:2018   .text:000000000000109c expression
         tinyBasic.s:1325   .text:0000000000000a5c syntax_error
         tinyBasic.s:421    .text:00000000000002f0 search_lineno
         tinyBasic.s:1340   .text:0000000000000a64 tb_error
         tinyBasic.s:351    .text:000000000000029c search_const
ARM GAS  tinyBasic.s 			page 125


         tinyBasic.s:452    .text:0000000000000310 delete_line
         tinyBasic.s:477    .text:000000000000033c create_gap
         tinyBasic.s:502    .text:0000000000000364 insert_line
         tinyBasic.s:541    .text:00000000000003b4 compile
         tinyBasic.s:1678   .text:0000000000000db0 pad
         tinyBasic.s:871    .text:00000000000006bc parse_int
         tinyBasic.s:614    .text:000000000000045c comp_token
         tinyBasic.s:697    .text:0000000000000562 store_r0
         tinyBasic.s:965    .text:000000000000075c skip
         tinyBasic.s:1050   .text:00000000000007c4 is_letter
         tinyBasic.s:781    .text:00000000000005f4 comp_label
         tinyBasic.s:706    .text:0000000000000582 token_exit
         tinyBasic.s:688    .text:000000000000053e tick2
         tinyBasic.s:724    .text:0000000000000588 is_special
         tinyBasic.s:746    .text:00000000000005cc token_ofs
         tinyBasic.s:637    .text:00000000000004b6 tok_idx0
         tinyBasic.s:700    .text:0000000000000568 try_number
         tinyBasic.s:641    .text:00000000000004b8 single
         tinyBasic.s:741    .text:00000000000005bd tok_single
         tinyBasic.s:645    .text:00000000000004c0 lt
         tinyBasic.s:651    .text:00000000000004ce gt
         tinyBasic.s:664    .text:00000000000004f2 bkslash
         tinyBasic.s:671    .text:0000000000000508 prt_cmd
         tinyBasic.s:677    .text:000000000000051a quote
         tinyBasic.s:904    .text:00000000000006f4 parse_quote
         tinyBasic.s:682    .text:000000000000052e tick
         tinyBasic.s:738    .text:00000000000005a8 char_list
         tinyBasic.s:739    .text:00000000000005a8 $d
         tinyBasic.s:747    .text:00000000000005cc $d
         tinyBasic.s:764    .text:00000000000005f4 $t
         tinyBasic.s:984    .text:0000000000000774 upper
         tinyBasic.s:2338   .rodata.dictionary:00000000000007c4 kword_dict
         tinyBasic.s:1492   .text:0000000000000be0 search_dict
         tinyBasic.s:838    .text:0000000000000690 compress_label
         tinyBasic.s:1081   .text:00000000000007e4 atoi
         tinyBasic.s:935    .text:0000000000000728 get_escaped_char
         tinyBasic.s:952    .text:0000000000000752 escaped
         tinyBasic.s:952    .text:0000000000000752 $d
         tinyBasic.s:965    .text:000000000000075a $t
         tinyBasic.s:1002   .text:0000000000000784 is_digit
         tinyBasic.s:1026   .text:00000000000007a0 is_hex
         tinyBasic.s:1126   .text:0000000000000830 cmd_name
         tinyBasic.s:1155   .text:000000000000085c decompile_line
         tinyBasic.s:1172   .text:00000000000008a2 decomp_loop
         tinyBasic.s:1285   .text:0000000000000a31 single_char
         tinyBasic.s:1280   .text:0000000000000a1c relop_str
         tinyBasic.s:1280   .text:0000000000000a1c $d
         tinyBasic.s:1281   .text:0000000000000a28 ge_str
         tinyBasic.s:1282   .text:0000000000000a2b le_str
         tinyBasic.s:1283   .text:0000000000000a2e ne_str
         tinyBasic.s:1302   .text:0000000000000a44 modulo
         tinyBasic.s:1373   .text:0000000000000af4 compile_error
         tinyBasic.s:1344   .text:0000000000000a6c rt_error
         tinyBasic.s:1388   .text:0000000000000b46 rt_error_msg
         tinyBasic.s:1392   .text:0000000000000b66 err_msg
         tinyBasic.s:1389   .text:0000000000000b57 token_at_msg
         tinyBasic.s:2841   .text.basic:000000000000045c dump01
ARM GAS  tinyBasic.s 			page 126


         tinyBasic.s:1691   .text:0000000000000dc0 warm_start
         tinyBasic.s:1388   .text:0000000000000b46 $d
         tinyBasic.s:1400   .rodata.tb_error:0000000000000000 err_mem_full
         tinyBasic.s:1401   .rodata.tb_error:000000000000000d err_syntax
         tinyBasic.s:1402   .rodata.tb_error:000000000000001b err_math_ovf
         tinyBasic.s:1403   .rodata.tb_error:0000000000000034 err_div0
         tinyBasic.s:1404   .rodata.tb_error:0000000000000043 err_no_line
         tinyBasic.s:1405   .rodata.tb_error:0000000000000059 err_run_only
         tinyBasic.s:1406   .rodata.tb_error:000000000000006f err_cmd_only
         tinyBasic.s:1407   .rodata.tb_error:0000000000000089 err_duplicate
         tinyBasic.s:1408   .rodata.tb_error:000000000000009a err_not_file
         tinyBasic.s:1409   .rodata.tb_error:00000000000000ab err_bad_value
         tinyBasic.s:1410   .rodata.tb_error:00000000000000b7 err_no_access
         tinyBasic.s:1411   .rodata.tb_error:00000000000000ea err_no_data
         tinyBasic.s:1412   .rodata.tb_error:00000000000000fa err_no_prog
         tinyBasic.s:1413   .rodata.tb_error:000000000000010e err_no_fspace
         tinyBasic.s:1414   .rodata.tb_error:0000000000000121 err_buf_full
         tinyBasic.s:1415   .rodata.tb_error:000000000000012e err_cant_prog
         tinyBasic.s:1417   .rodata.tb_error:000000000000016a rt_msg
         tinyBasic.s:1418   .rodata.tb_error:000000000000017c comp_msg
         tinyBasic.s:1419   .rodata.tb_error:000000000000018d tk_id
         tinyBasic.s:1429   .text:0000000000000baa $t
         tinyBasic.s:1429   .text:0000000000000bac skip_line
         tinyBasic.s:1446   .text:0000000000000bb4 BTGL
         tinyBasic.s:1464   .text:0000000000000bb8 kword_cmp
         tinyBasic.s:1530   .text:0000000000000c1e cold_start
         tinyBasic.s:1554   .text:0000000000000c86 src_addr
         tinyBasic.s:1556   .text:0000000000000c8a dest_addr
         tinyBasic.s:1677   .text:0000000000000dac tib
         tinyBasic.s:1558   .text:0000000000000c8e sysvar_size
         tinyBasic.s:1569   .text:0000000000000c94 prt_version
         tinyBasic.s:1625   .text:0000000000000d38 clear_basic
         tinyBasic.s:3695   .text.basic:0000000000000ce4 search_free
         tinyBasic.s:4020   .text.basic:00000000000010c8 exec_autorun
         tinyBasic.s:1555   .text:0000000000000c86 $d
         tinyBasic.s:2196   .rodata:0000000000000000 uzero
         tinyBasic.s:2222   .rodata:00000000000000d4 ulast
         tinyBasic.s:1569   .text:0000000000000c92 $t
         tinyBasic.s:1592   .text:0000000000000cf8 version_msg
         tinyBasic.s:1594   .text:0000000000000d18 version
         tinyBasic.s:1593   .text:0000000000000cf8 $d
         tinyBasic.s:1609   .text:0000000000000d1c clear_vars
         tinyBasic.s:1660   .text:0000000000000d80 warm_init
         tinyBasic.s:1676   .text:0000000000000da8 dstack
         tinyBasic.s:1675   .text:0000000000000da4 mstack
         tinyBasic.s:1675   .text:0000000000000da4 $d
         tinyBasic.s:1679   .text:0000000000000db4 array
         tinyBasic.s:1680   .text:0000000000000db8 ready
         tinyBasic.s:1711   .text:0000000000000dd8 cmd_line
         tinyBasic.s:1723   .text:0000000000000e0c interpreter
         tinyBasic.s:1756   .text:0000000000000e4c execute
         tinyBasic.s:3174   .text.basic:00000000000007ae let_var
         tinyBasic.s:3179   .text.basic:00000000000007ba let_array
         tinyBasic.s:2347   .rodata.fn_tabld:0000000000000000 fn_table
         tinyBasic.s:1828   .text:0000000000000ecc expect
         tinyBasic.s:1847   .text:0000000000000ee8 func_args
         tinyBasic.s:1867   .text:0000000000000f14 arg_list
ARM GAS  tinyBasic.s 			page 127


         tinyBasic.s:1899   .text:0000000000000f50 factor
         tinyBasic.s:2125   .text:0000000000001174 get_array_element
         tinyBasic.s:2163   .text:000000000000119c get_var
         tinyBasic.s:1967   .text:000000000000102c term
         tinyBasic.s:2060   .text:00000000000010f8 relation
         tinyBasic.s:2107   .text:000000000000116c relop_jmp
         tinyBasic.s:2079   .text:000000000000113e rel_idx0
         tinyBasic.s:2080   .text:000000000000113e rel_eq
         tinyBasic.s:2097   .text:0000000000001154 rel_false
         tinyBasic.s:2083   .text:0000000000001142 rel_gt
         tinyBasic.s:2086   .text:0000000000001146 rel_ge
         tinyBasic.s:2089   .text:000000000000114a rel_lt
         tinyBasic.s:2092   .text:000000000000114e rel_le
         tinyBasic.s:2095   .text:0000000000001152 rel_ne
         tinyBasic.s:2108   .text:000000000000116c $d
         tinyBasic.s:2125   .text:0000000000001172 $t
         tinyBasic.s:2145   .text:0000000000001188 set_array_element
         tinyBasic.s:2181   .text:00000000000011ac set_var
         tinyBasic.s:4632   .rodata.fs:0000000000000000 FILE_SYSTEM
         tinyBasic.s:2217   .rodata:0000000000000050 $d
         tinyBasic.s:2230   .rodata.dictionary:0000000000000000 kword_end
         tinyBasic.s:2229   *ABS*:0000000000000000 link
         tinyBasic.s:2339   .rodata.dictionary:00000000000007c4 LINK
         tinyBasic.s:2231   .rodata.dictionary:000000000000000d $d
         tinyBasic.s:2334   .rodata.dictionary:00000000000007b8 first_link
         tinyBasic.s:2381   .text.basic:0000000000000000 abs
         tinyBasic.s:2397   .text.basic:0000000000000028 analog_read
         tinyBasic.s:2421   .text.basic:0000000000000060 adc
         tinyBasic.s:2466   .text.basic:00000000000000d8 bit_and
         tinyBasic.s:2481   .text.basic:00000000000000fc ascii
         tinyBasic.s:3968   .text.basic:0000000000001024 autorun
         tinyBasic.s:2507   .text.basic:000000000000014c awu
         tinyBasic.s:2547   .text.basic:00000000000001b4 bitmask
         tinyBasic.s:2569   .text.basic:00000000000001d8 bit_reset
         tinyBasic.s:2594   .text.basic:0000000000000204 bit_set
         tinyBasic.s:2634   .text.basic:0000000000000254 bit_test
         tinyBasic.s:2618   .text.basic:000000000000022c bit_toggle
         tinyBasic.s:2666   .text.basic:00000000000002a0 char
         tinyBasic.s:2658   .text.basic:0000000000000294 cls
         tinyBasic.s:2683   .text.basic:00000000000002c0 const
         tinyBasic.s:2810   .text.basic:0000000000000424 dec_base
         tinyBasic.s:3760   .text.basic:0000000000000d50 directory
         tinyBasic.s:2819   .text.basic:000000000000042c do_loop
         tinyBasic.s:4581   .text.basic:0000000000001634 drop
         tinyBasic.s:2834   .text.basic:0000000000000434 dump
         tinyBasic.s:2878   .text.basic:00000000000004dc cmd_end
         tinyBasic.s:2906   .text.basic:000000000000051c erase
         tinyBasic.s:2917   .text.basic:0000000000000530 for
         tinyBasic.s:3800   .text.basic:0000000000000e08 forget
         tinyBasic.s:4036   .text.basic:00000000000010f4 free
         tinyBasic.s:4594   .text.basic:0000000000001650 get
         tinyBasic.s:2998   .text.basic:00000000000005ec gosub
         tinyBasic.s:3024   .text.basic:000000000000062c goto
         tinyBasic.s:3032   .text.basic:0000000000000638 hex_base
         tinyBasic.s:3041   .text.basic:0000000000000640 if
         tinyBasic.s:3324   .text.basic:0000000000000974 pin_input
         tinyBasic.s:3063   .text.basic:0000000000000658 input_var
ARM GAS  tinyBasic.s 			page 128


         tinyBasic.s:3138   .text.basic:0000000000000764 invert
         tinyBasic.s:3151   .text.basic:0000000000000784 key
         tinyBasic.s:3167   .text.basic:0000000000000798 let
         tinyBasic.s:3210   .text.basic:0000000000000824 list
         tinyBasic.s:3829   .text.basic:0000000000000e54 load
         tinyBasic.s:3261   .text.basic:00000000000008d4 locate
         tinyBasic.s:3275   .text.basic:00000000000008f8 lshift
         tinyBasic.s:3289   .text.basic:0000000000000918 new
         tinyBasic.s:2962   .text.basic:0000000000000594 next
         tinyBasic.s:3298   .text.basic:0000000000000938 func_not
         tinyBasic.s:3310   .text.basic:0000000000000950 bit_or
         tinyBasic.s:3342   .text.basic:00000000000009a0 out
         tinyBasic.s:3359   .text.basic:00000000000009c8 pad_ref
         tinyBasic.s:3370   .text.basic:00000000000009d4 pause
         tinyBasic.s:3393   .text.basic:00000000000009f0 pin_mode
         tinyBasic.s:3449   .text.basic:0000000000000a74 peek8
         tinyBasic.s:3462   .text.basic:0000000000000a90 peek16
         tinyBasic.s:3475   .text.basic:0000000000000aac peek32
         tinyBasic.s:3489   .text.basic:0000000000000ac8 poke8
         tinyBasic.s:3501   .text.basic:0000000000000ae0 poke16
         tinyBasic.s:3513   .text.basic:0000000000000af8 poke32
         tinyBasic.s:4572   .text.basic:0000000000001628 fn_pop
         tinyBasic.s:3527   .text.basic:0000000000000b10 print
         tinyBasic.s:4564   .text.basic:000000000000161c cmd_push
         tinyBasic.s:4609   .text.basic:0000000000001678 put
         tinyBasic.s:3599   .text.basic:0000000000000c00 qkey
         tinyBasic.s:2718   .text.basic:0000000000000344 read
         tinyBasic.s:2768   .text.basic:00000000000003b8 restore
         tinyBasic.s:3013   .text.basic:0000000000000614 return
         tinyBasic.s:3611   .text.basic:0000000000000c1c random
         tinyBasic.s:3634   .text.basic:0000000000000c60 rshift
         tinyBasic.s:3647   .text.basic:0000000000000c80 run
         tinyBasic.s:3883   .text.basic:0000000000000ee4 save
         tinyBasic.s:4054   .text.basic:0000000000001108 servo_init
         tinyBasic.s:4154   .text.basic:000000000000122c servo_off
         tinyBasic.s:4190   .text.basic:0000000000001298 servo_pos
         tinyBasic.s:4222   .text.basic:00000000000012f4 sleep
         tinyBasic.s:4236   .text.basic:0000000000001314 spc
         tinyBasic.s:2948   .text.basic:000000000000057c step
         tinyBasic.s:4265   .text.basic:000000000000134c stop
         tinyBasic.s:2886   .text.basic:00000000000004e4 store
         tinyBasic.s:4287   .text.basic:0000000000001390 tab
         tinyBasic.s:3052   .text.basic:0000000000000654 then
         tinyBasic.s:4303   .text.basic:00000000000013b8 get_ticks
         tinyBasic.s:4312   .text.basic:00000000000013c0 set_timer
         tinyBasic.s:4324   .text.basic:00000000000013d4 timeout
         tinyBasic.s:2935   .text.basic:0000000000000564 to
         tinyBasic.s:4337   .text.basic:00000000000013e8 tone
         tinyBasic.s:4372   .text.basic:0000000000001440 tone_init
         tinyBasic.s:4408   .text.basic:0000000000001498 trace
         tinyBasic.s:4424   .text.basic:00000000000014b4 ubound
         tinyBasic.s:4436   .text.basic:00000000000014cc uflash
         tinyBasic.s:4447   .text.basic:00000000000014d4 until
         tinyBasic.s:4462   .text.basic:00000000000014f4 wait
         tinyBasic.s:4487   .text.basic:0000000000001528 words
         tinyBasic.s:4526   .text.basic:00000000000015d4 bit_xor
         tinyBasic.s:4540   .text.basic:00000000000015f8 xpos
ARM GAS  tinyBasic.s 			page 129


         tinyBasic.s:4549   .text.basic:0000000000001608 ypos
         tinyBasic.s:2381   .text.basic:0000000000000000 $t
         tinyBasic.s:2408   .text.basic:000000000000004e adc_loop
         tinyBasic.s:2450   .text.basic:00000000000000b2 adc_off
         tinyBasic.s:2427   .text.basic:0000000000000076 adc_on
         tinyBasic.s:3363   .text.basic:00000000000009d0 pad_adr
         tinyBasic.s:2744   .text.basic:0000000000000390 seek_next
         tinyBasic.s:2799   .text.basic:0000000000000416 no_data_line
         tinyBasic.s:2795   .text.basic:0000000000000410 try_next_line
         tinyBasic.s:2852   .text.basic:000000000000047c print_dump_header
         tinyBasic.s:2910   .text.basic:000000000000052c user_space
         tinyBasic.s:2910   .text.basic:000000000000052c $d
         tinyBasic.s:4623   .rodata.user:0000000000000000 user
         tinyBasic.s:2917   .text.basic:0000000000000530 $t
         tinyBasic.s:3001   .text.basic:00000000000005fa target
         tinyBasic.s:3131   .text.basic:0000000000000760 str_buffer
         tinyBasic.s:3130   .text.basic:000000000000075c input_buffer
         tinyBasic.s:3130   .text.basic:000000000000075c $d
         tinyBasic.s:3138   .text.basic:0000000000000764 $t
         tinyBasic.s:3255   .text.basic:00000000000008d0 out_buff
         tinyBasic.s:3255   .text.basic:00000000000008d0 $d
         tinyBasic.s:3261   .text.basic:00000000000008d4 $t
         tinyBasic.s:3363   .text.basic:00000000000009d0 $d
         tinyBasic.s:3370   .text.basic:00000000000009d4 $t
         tinyBasic.s:3415   .text.basic:0000000000000a18 gpio_config
         tinyBasic.s:3584   .text.basic:0000000000000bdc unget_exit
         tinyBasic.s:3586   .text.basic:0000000000000be4 print_exit
         tinyBasic.s:3748   .text.basic:0000000000000d4c fs_addr
         tinyBasic.s:3723   .text.basic:0000000000000d08 search_file
         tinyBasic.s:3727   .text.basic:0000000000000d10 cmp_loop
         tinyBasic.s:3748   .text.basic:0000000000000d4c $d
         tinyBasic.s:3760   .text.basic:0000000000000d50 $t
         tinyBasic.s:3783   .text.basic:0000000000000dc8 no_more_file
         tinyBasic.s:3793   .text.basic:0000000000000e00 fcount
         tinyBasic.s:3793   .text.basic:0000000000000e00 $d
         tinyBasic.s:3835   .text.basic:0000000000000e76 load_autorun
         tinyBasic.s:3956   .text.basic:0000000000001010 fsize
         tinyBasic.s:3957   .text.basic:000000000000101c data_bytes
         tinyBasic.s:3901   .text.basic:0000000000000f2c new_file
         tinyBasic.s:3956   .text.basic:0000000000001010 $d
         tinyBasic.s:4008   .text.basic:00000000000010b0 write_back
         tinyBasic.s:4013   .text.basic:00000000000010c2 arun_sign
         tinyBasic.s:4013   .text.basic:00000000000010c2 $d
         tinyBasic.s:4020   .text.basic:00000000000010c6 $t
         tinyBasic.s:4144   .text.basic:000000000000120c servo_port
         tinyBasic.s:4091   .text.basic:0000000000001182 setup_pwm3
         tinyBasic.s:4144   .text.basic:000000000000120c $d
         tinyBasic.s:4154   .text.basic:000000000000122c $t
         tinyBasic.s:4247   .text.basic:000000000000133c spi_read
         tinyBasic.s:4250   .text.basic:0000000000001340 spi_enable
         tinyBasic.s:4253   .text.basic:0000000000001344 spi_select
         tinyBasic.s:4256   .text.basic:0000000000001348 spi_write
         tinyBasic.s:4519   .text.basic:00000000000015be dict_words
         tinyBasic.s:4519   .text.basic:00000000000015be $d
         tinyBasic.s:4526   .text.basic:00000000000015d2 $t
         tinyBasic.s:4622   .rodata.user:0000000000000000 $d
         tinyBasic.s:4621   .text.basic:000000000000169e $d
ARM GAS  tinyBasic.s 			page 130


         tinyBasic.s:4632   .text.basic:00000000000016a0 $d
         tinyBasic.s:4632   .text:00000000000011bc $d
         tinyBasic.s:247    .text:0000000000000195 $d
         tinyBasic.s:247    .text:0000000000000196 $t
         tinyBasic.s:269    .text:00000000000001e9 $d
         tinyBasic.s:269    .text:00000000000001ea $t
         tinyBasic.s:745    .text:00000000000005cb $d
         tinyBasic.s:1302   .text:0000000000000a41 $d
         tinyBasic.s:1302   .text:0000000000000a42 $t
         tinyBasic.s:1596   .text:0000000000000d19 $d
         tinyBasic.s:1596   .text:0000000000000d1a $t
         tinyBasic.s:1691   .text:0000000000000dbf $d
         tinyBasic.s:1691   .text:0000000000000dc0 $t
         tinyBasic.s:3800   .text.basic:0000000000000e07 $d
         tinyBasic.s:3800   .text.basic:0000000000000e08 $t
         tinyBasic.s:3968   .text.basic:0000000000001023 $d
         tinyBasic.s:3968   .text.basic:0000000000001024 $t

UNDEFINED SYMBOLS
uart_puts
print_int
uart_putc
cr
cursor_x
print_hex
spaces
itoa
vectors_size
_mstack
_dstack
_tib
_pad
readln
clear_screen
flash_store
erase_page
uart_getc
set_curpos
tabulation
uart_qkey
page_align
unlock
hword_write
write_page
get_curpos
