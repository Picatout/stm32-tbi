ARM GAS  terminal.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	//------------------------------
  20              	// This file is for functions 
  21              	// interfacing with VT100 terminal
  22              	// emulator.
  23              	// except for uart_getc and uart_putc which
  24              	// are in stm32-tbi.s 
  25              	// exported functions:
  26              	//   uart_puts 
  27              	//   readln 
  28              	//   spaces 
  29              	//   digit_to_char 
  30              	//------------------------------
  31              	
  32              	  .syntax unified
  33              	  .cpu cortex-m3
  34              	  .fpu softvfp
  35              	  .thumb
  36              	
  37              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
ARM GAS  terminal.s 			page 2


  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
ARM GAS  terminal.s 			page 3


  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
ARM GAS  terminal.s 			page 4


 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  38              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
ARM GAS  terminal.s 			page 5


  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  39              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
ARM GAS  terminal.s 			page 6


  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
ARM GAS  terminal.s 			page 7


  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	
 107              	//--------------------------------------
 108              	//   assembler flags 
 109              	//-------------------------------------
 110              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 111              	
 112              	.equ CELL_SIZE,4 
 113              	
 114              	
 115              	//-------------------------------
 116              	//  macros used to help debugging
 117              	//-------------------------------
 118              	  .equ DEBUG,0
 119              	
 120              	    UPP .req r4  // base address system variables 
 121              	    VADR .req r5  // address FOR loop variable 
 122              	    LIMIT .req r6   // LOOP limit 
 123              	    INCR  .req  r7  // LOOP increment 
 124              	    T1  .req r8     // temporary register 
 125              	    T2  .req r9     // temporary register 
 126              	    IN  .req r10    //  index in text line or token list 
 127              	    BPTR .req r11   //  buffer address or BASIC line address 
 128              	    DP   .req r12   //  parameter stack pointer 
 129              	
 130              	/***************************
 131              	  SYSTEM variables offset 
ARM GAS  terminal.s 			page 8


 132              	  from UPP  
 133              	***************************/ 
 134              	
 135              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 136              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 137              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 138              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 139              	  .equ DATA,DATAPTR+4 // index to next data item 
 140              	  .equ DATALEN, DATA+4 // length of data line 
 141              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 142              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 143              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 144              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 145              	  .equ FSPTR,SEED+4 //  pointer used by file system
 146              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 147              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 148              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 149              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 150              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 151              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 152              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 153              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 154              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 155              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 156              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 157              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 159              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 160              	
 161              	/* flags used by BASIC interpreter */ 
 162              		.equ FRUN,(1<<0) // programm running
 163              		.equ FTRAP,(1<<1) // inside trap handler 
 164              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 165              		.equ FSLEEP,(1<<3) // in halt mode SLEEP 
 166              		.equ FBREAK,(1<<4) // break point flag 
 167              		.equ FCOMP,(1<<5)  // compiling flags 
 168              		.equ FAUTORUN,(1<<6) // auto start program running 
 169              	
 170              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 171              	  
 172              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 173              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 174              	
 175              	/***********************************************
 176              	*       MACROS
 177              	***********************************************/
 178              		.macro _CALL fn /* low level routine call */ 
 179              	 	PUSH {LR}
 180              		BL \fn  
 181              	  POP {LR}
 182              		.endm
 183              		
 184              		.macro	_RET /* return from subroutine */
 185              		BX	LR
 186              		.endm
 187              	
 188              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
ARM GAS  terminal.s 			page 9


 189              		MOV \REG, #\LITERAL&0xffff
 190              		MOVT \REG, #\LITERAL>>16
 191              		.endm
 192              	
 193              	// local function header 
 194              	  .macro _FUNC label 
 195              	  .p2align 2 
 196              	  .type \label, %function  
 197              	\label:
 198              	  .endm 
 199              	
 200              	// global function header 
 201              	  .macro _GBL_FUNC label 
 202              	  .global \label 
 203              	  _FUNC \label 
 204              	  .endm 
 205              	
 206              	
 207              	/********************************
 208              	    dictionary structure
 209              	------------------------------
 210              	 format:
 211              	   link:    
 212              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 213              	   cmd_name: 31 characters max 
 214              	   cmd_index: 2 bytes 
 215              	**********************************/
 216              		.macro _dict_entry tok_type,name,cmd_idx 
 217              	  .word LINK 
 218              	  .word \cmd_idx 
 219              		.word \tok_type  	
 220              		.equ LINK,.
 221              		.asciz "\name"
 222              		.p2align 2 
 223              		.endm 
 224              	
 225              	  // pop parameter in register 
 226              	  .macro _POP  reg 
 227              	  ldmia  DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // push register on parameter stack 
 231              	  .macro _PUSH reg 
 232              	  stmdb DP!,{\reg}
 233              	  .endm 
 234              	
 235              	  // drop n parameters on dstack 
 236              	  .macro _DROP n
 237              	  mov r0,#4*\n
 238              	  add DP,R0 
 239              	  .endm 
 240              	
 241              	  // back to previous token in list 
 242              	  .macro _UNGET_TOKEN 
 243              	  ldr IN,[UPP,#IN_SAVED]
 244              	  ldr BPTR,[UPP,#BASICPTR] 
 245              	  .endm 
ARM GAS  terminal.s 			page 10


 246              	
 247              	 // create a text data 
 248              	 .macro _TEXT label,text
 249              	 \label: .asciz "\text"
 250              	 .p2align 2 
 251              	 .endm 
 252              	
 253              	// command line only 
 254              	  .macro _CLO 
 255              	  ldr r0,[UPP,#FLAGS]
 256              	  tst r0,#FRUN 
 257              	  beq 1f 
 258              	  mov r0,#ERR_CMD_ONLY
 259              	  b tb_error
 260              	1: 
 261              	  .endm 
 262              	
 263              	// run time only 
 264              	  .macro _RTO 
 265              	  ldr r0,[UPP,#FLAGS]
 266              	  tst r0,#FRUN 
 267              	  bne 1f 
 268              	  mov r0,#ERR_CMD_ONLY
 269              	  b tb_error
 270              	1:
 271              	  .endm 
 272              	
  40              	
  41              	
  42              	    .section .text, "ax", %progbits 
  43              	
  44              	
  45              	/*********************************
  46              	// receive ANSI ESC 
  47              	// sequence and convert it
  48              	// to a single character code 
  49              	// in range {128..255}
  50              	// This is called after receiving 
  51              	// ESC character. 
  52              	// ignored sequence return 0 
  53              	  input:
  54              	    none
  55              	  output:
  56              	    r0    converted character 
  57              	  use: 
  58              	    r2
  59              	***********************************/
  60              	    _FUNC get_escape
  61 0000 04B4     	    push {r2}
  62 0002 00B5FFF7 	    _CALL uart_getc 
  62      FEFF5DF8 
  62      04EB
  63 000c 5B28     	    cmp r0,#'[ // this character is expected after ESC 
  64 000e 03D0     	    beq 1f
  65 0010 80EA0000 	0:  eor r0,r0
  66 0014 04BC     	    pop {r2}
  67 0016 7047     	    _RET
ARM GAS  terminal.s 			page 11


  68 0018 00B5FFF7 	1: _CALL  uart_getc 
  68      FEFF5DF8 
  68      04EB
  69 0022 DFF87026 	    ldr r2,=convert_table
  70              	2:
  71 0026 1178     	    ldrb r1,[r2]
  72 0028 0940     	    ands r1,r1 
  73 002a F1D0     	    beq 0b 
  74 002c 8842     	    cmp r0,r1 
  75 002e 02D0     	    beq 4f
  76 0030 02F10202 	    add r2,#2
  77 0034 F7E7     	    b 2b
  78 0036 02F10102 	4:  add r2,#1  
  79 003a 1078     	    ldrb r0,[r2]
  80 003c B0F1840F 	    cmp r0,#SUP
  81 0040 06D1     	    bne 5f
  82 0042 01B4     	    push {r0}  
  83 0044 00B5FFF7 	    _CALL  uart_getc
  83      FEFF5DF8 
  83      04EB
  84 004e 01BC     	    pop {r0}
  85              	5:
  86 0050 04BC     	    pop {r2}
  87 0052 7047     	    _RET 
  88              	
  89              	//-----------------------------
  90              	//  constants replacing 
  91              	//  ANSI sequence received 
  92              	//  from terminal.
  93              	//  These are the ANSI sequences
  94              	//  accepted by function readln
  95              	//------------------------------
  96              	    .equ ARROW_LEFT,128
  97              	    .equ ARROW_RIGHT,129
  98              	    .equ HOME,130
  99              	    .equ END,131
 100              	    .equ SUP,132 
 101              	
 102 0054 43814480 	convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',END,'3',SUP,0,0
 102      48824683 
 102      33840000 
 103              	
 104              	/******************************
 105              	    uart_puts 
 106              	    print zero terminate string 
 107              	 
 108              	  input:
 109              	    r0  *asciz 
 110              	  output:
 111              	    none 
 112              	  use:
 113              	    r0  char to send 
 114              	    T1  *asciz 
 115              	******************************/
 116              	    _GBL_FUNC uart_puts 
 117 0060 4DF8048D 	    push {T1}
 118 0064 8046     	    mov T1,r0 
ARM GAS  terminal.s 			page 12


 119 0066 18F8010B 	1:  ldrb r0,[T1],#1
 120 006a 28B1     	    cbz r0,9f 
 121 006c 00B5FFF7 	    _CALL uart_putc 
 121      FEFF5DF8 
 121      04EB
 122 0076 F6E7     	    b 1b 
 123 0078 5DF8048B 	9:  pop {T1}
 124 007c 7047     	    _RET 
 125              	
 126              	/***********************************
 127              	   digit  
 128              	   convert least digit of uint32 to ASCII 
 129              	    input:
 130              	        r0    uint32
 131              	        r1    base   
 132              	    output:
 133              	        r0    r0%base+'0'  
 134              	        r1    quotient 
 135              	    use:
 136              	        T1 
 137              	***********************************/
 138 007e 00BF     	    _FUNC digit
 139 0080 4DF8048D 	    push {T1}
 140 0084 01B4     	    push {r0}
 141 0086 8846     	    mov T1,r1  
 142 0088 B0FBF8F0 	    udiv r0,T1
 143 008c 0146     	    mov r1,r0  
 144 008e 08FB00F0 	    mul  r0,T1 
 145 0092 5DF8048B 	    pop {T1}
 146 0096 A8EB0000 	    sub r0,T1,r0
 147 009a 0A28     	    cmp r0,#10  
 148 009c 01D4     	    bmi 1f 
 149 009e 00F10700 	    add r0,#7
 150 00a2 00F13000 	1:  add r0,#'0'  
 151 00a6 5DF8048B 	    pop {T1}
 152 00aa 7047     	    _RET 
 153              	
 154              	/**********************************
 155              	    itoa 
 156              	    convert integer to string
 157              	    input:
 158              	      r0   integer 
 159              	      r1   base 
 160              	    output:
 161              	      r0   *string 
 162              	    use: 
 163              	      r7   integer 
 164              	      T1   base 
 165              	      T2   *pad 
 166              	*********************************/ 
 167              	    _FUNC itoa
 168 00ac 2DE98003 	    push {r7,T1,T2}
 169 00b0 0746     	    mov r7,r0
 170 00b2 8846     	    mov T1,r1  
 171 00b4 DFF85A90 	    ldr T2,pad 
 172 00b8 09F18009 	    add T2,#PAD_SIZE 
 173 00bc 80EA0000 	    eor r0,r0 
ARM GAS  terminal.s 			page 13


 174 00c0 09F8010D 	    strb r0,[T2,#-1]!
 175 00c4 00F12000 	    add r0,#SPACE 
 176 00c8 09F8010D 	    strb r0,[T2,#-1]!
 177 00cc 80EA0000 	    eor r0,r0 
 178 00d0 B8F10A0F 	    cmp T1,#10 
 179 00d4 04D1     	    bne 0f 
 180 00d6 17F00040 	    ands r0,r7,#(1<<31)
 181 00da 01D0     	    beq 0f 
 182 00dc C7F10007 	    rsb r7,#0 
 183 00e0 01B4     	0:  push {r0}
 184 00e2 3846     	1:  mov r0,r7 
 185 00e4 4146     	    mov r1,T1 
 186 00e6 00B5FFF7 	    _CALL digit 
 186      CAFF5DF8 
 186      04EB
 187 00f0 09F8010D 	    strb r0,[T2,#-1]!
 188 00f4 0940     	    ands r1,r1 
 189 00f6 01D0     	    beq  2f   
 190 00f8 0F46     	    mov r7,r1 
 191 00fa F2E7     	    b 1b 
 192 00fc 01BC     	2:  pop {r0} 
 193 00fe 0040     	    ands r0,r0 
 194 0100 03D0     	    beq 3f 
 195 0102 4FF02D00 	    mov r0,#'-'
 196 0106 09F8010D 	    strb r0,[T2,#-1]!
 197 010a 4846     	3:  mov r0,T2 
 198 010c BDE88003 	    pop {r7,T1,T2} 
 199 0110 7047     	    _RET  
 200 0112 00000000 	pad: .word _pad 
 201              	
 202              	/*****************************
 203              	    print_int 
 204              	  input:
 205              	    r0   integer to print 
 206              	    r1   conversion base 
 207              	  output:
 208              	    none 
 209              	  use:
 210              	    none 
 211              	*****************************/
 212 0116 00BF     	    _GBL_FUNC print_int 
 213 0118 00B5FFF7 	    _CALL itoa
 213      C7FF5DF8 
 213      04EB
 214 0122 00B5FFF7 	    _CALL uart_puts
 214      FEFF5DF8 
 214      04EB
 215 012c 7047     	    _RET 
 216              	
 217              	/********************************
 218              	// print byte  in hexadecimal 
 219              	// on console
 220              	// input:
 221              	//   r0		byte to print
 222              	// output:
 223              	     none 
 224              	   use:
ARM GAS  terminal.s 			page 14


 225              	     none 
 226              	******************************/
 227 012e 00BF     	    _GBL_FUNC print_hex
 228 0130 01B4     		push {r0} 
 229 0132 4FEA1010 		lsr r0,#4  
 230 0136 00B5FFF7 		_CALL  digit_to_char 
 230      FEFF5DF8 
 230      04EB
 231 0140 00B5FFF7 		_CALL  uart_putc 
 231      FEFF5DF8 
 231      04EB
 232 014a 01BC     	    pop {r0} 
 233 014c 00B5FFF7 		_CALL  digit_to_char
 233      FEFF5DF8 
 233      04EB
 234 0156 00B5FFF7 		_CALL  uart_putc
 234      FEFF5DF8 
 234      04EB
 235 0160 4FF02000 		mov r0,#SPACE 
 236 0164 00B5FFF7 		_CALL  uart_putc  
 236      FEFF5DF8 
 236      04EB
 237 016e 7047     		_RET 
 238              	
 239              	/***********************************
 240              	// convert digit to character  
 241              	// input:
 242              	//   r0       digit to convert 
 243              	// output:
 244              	//   r0      hexdecimal character 
 245              	   use:
 246              	     none 
 247              	***********************************/
 248              	    _GBL_FUNC digit_to_char 
 249 0170 00F00F00 		and r0,#15 
 250 0174 0A28     		cmp r0,#10 
 251 0176 01D4     		bmi 1f  
 252 0178 00F10700 		add r0,#7
 253 017c 00F13000 	1:  add r0,#'0'  
 254 0180 7047     		_RET 
 255              	
 256              	
 257              	/*****************************
 258              	    cursor_shape 
 259              	    change cursor shape 
 260              	
 261              	  input:
 262              	    r0      shape {0..6}
 263              	  output:
 264              	    none 
 265              	  use:
 266              	    T1    shape
 267              	*******************************/
 268 0182 00BF     	    _GBL_FUNC cursor_shape
 269 0184 4DF8048D 	    push {T1}
 270 0188 00B500F0 	    _CALL send_escape
 270      3BF85DF8 
ARM GAS  terminal.s 			page 15


 270      04EB
 271 0192 00B500F0 	    _CALL send_parameter 
 271      48F85DF8 
 271      04EB
 272 019c 4FF02000 	    mov r0,#SPACE 
 273 01a0 00B5FFF7 	    _CALL uart_putc 
 273      FEFF5DF8 
 273      04EB
 274 01aa 4FF07100 	    mov r0,#'q' 
 275 01ae 00B5FFF7 	    _CALL uart_putc 
 275      FEFF5DF8 
 275      04EB
 276 01b8 5DF8048B 	    pop {T1}
 277 01bc 7047     	    _RET 
 278              	
 279              	
 280              	//---------------------------
 281              	// delete character at left 
 282              	// of cursor on terminal 
 283              	// input:
 284              	//   none 
 285              	// output:
 286              	//	none 
 287              	//---------------------------
 288 01be 00BF     	    _FUNC bksp
 289 01c0 4FF00800 		mov r0,#BS 
 290 01c4 00B5FFF7 		_CALL  uart_putc 
 290      FEFF5DF8 
 290      04EB
 291 01ce 4FF02000 		mov r0,#SPACE 
 292 01d2 00B5FFF7 		_CALL  uart_putc 
 292      FEFF5DF8 
 292      04EB
 293 01dc 4FF00800 		mov r0,#BS 
 294 01e0 00B5FFF7 		_CALL  uart_putc 
 294      FEFF5DF8 
 294      04EB
 295 01ea 7047     		_RET 
 296              	
 297              	//---------------------------
 298              	// delete n character left of cursor 
 299              	// at terminal.
 300              	// input: 
 301              	//   r0   number of characters to delete.
 302              	// output:
 303              	//    none
 304              	// use:
 305              	//   r2   count  
 306              	//--------------------------	
 307              	    _FUNC delete_nchar
 308 01ec 48B1     		cbz r0,2f 
 309 01ee 04B4     	    push {r2}
 310 01f0 0246     	    mov r2,r0  
 311              	1:	
 312 01f2 00B5FFF7 	    _CALL  bksp 
 312      E4FF5DF8 
 312      04EB
ARM GAS  terminal.s 			page 16


 313 01fc 013A     	    subs r2,#1 
 314 01fe F8D1     		bne 1b 
 315 0200 04BC     	    pop {r2}
 316 0202 7047     	2:	_RET
 317              	
 318              	
 319              	//--------------------------
 320              	// send ANSI escape sequence
 321              	// ANSI: ESC[
 322              	// note: ESC is ASCII 27
 323              	//       [   is ASCII 91 
 324              	// input:
 325              	//      none 
 326              	// output:
 327              	//      none 
 328              	// use:
 329              	//      r0 
 330              	//-------------------------- 
 331              	    _FUNC send_escape
 332 0204 01B4     		push {r0}
 333 0206 4FF01B00 	    mov r0,#ESC 
 334 020a 00B5FFF7 		_CALL  uart_putc 
 334      FEFF5DF8 
 334      04EB
 335 0214 4FF05B00 		mov r0,#'['
 336 0218 00B5FFF7 		_CALL  uart_putc 
 336      FEFF5DF8 
 336      04EB
 337 0222 01BC     		pop {r0}
 338 0224 7047     	    _RET 
 339              	
 340              	
 341              	/*****************************
 342              	 send ANSI parameter value
 343              	 ANSI parameter values are 
 344              	 sent as ASCII charater 
 345              	 not as binary number.
 346              	 this routine 
 347              	 convert binary number to 
 348              	 ASCII send it.
 349              	 input: 
 350              	 	r0   parameter  
 351              	 output:
 352              	   none 
 353              	 use:
 354              	    T1   digit counter 
 355              	***************************/
 356 0226 00BF     	    _FUNC send_parameter
 357 0228 4DF8048D 	    push {T1}
 358 022c 4FF00008 	    mov T1,#0
 359 0230 4FF00A01 	1:  mov r1,#10  
 360 0234 00B5FFF7 	    _CALL digit 
 360      23FF5DF8 
 360      04EB
 361 023e 08F10108 	    add T1,#1 
 362 0242 01B4     	    push {r0}
 363 0244 0846     	    mov r0,r1 
ARM GAS  terminal.s 			page 17


 364 0246 0040     	    ands r0,r0
 365 0248 F2D1     	    bne 1b 
 366 024a 01BC     	2:  pop {r0}
 367 024c 00B5FFF7 	    _CALL uart_putc  
 367      FEFF5DF8 
 367      04EB
 368 0256 B8F10108 	    subs T1,#1
 369 025a F6D1     	    bne 2b 
 370 025c 5DF8048B 		pop {T1}
 371 0260 7047     	    _RET 
 372              	
 373              	/**********************************
 374              	// move cursor left n character
 375              	// ANSI: ESC[PnD 
 376              	// 'Pn' est a numerical parameter
 377              	// specifying number of characters 
 378              	// displacement.
 379              	// input:
 380              	//   r0     character count
 381              	// output:
 382              	//   none
 383              	*********************************/
 384 0262 00BF     	    _FUNC move_left
 385 0264 00B5FFF7 		_CALL  send_escape
 385      CDFF5DF8 
 385      04EB
 386 026e 00B5FFF7 		_CALL  send_parameter 
 386      DAFF5DF8 
 386      04EB
 387 0278 4FF04400 		mov r0,#'D' 
 388 027c 00B5FFF7 		_CALL  uart_putc 
 388      FEFF5DF8 
 388      04EB
 389 0286 7047     		_RET	
 390              	
 391              	
 392              	/***********************************
 393              	// move cursor right n character 
 394              	// ANSI: ESC[PnC 
 395              	// input:
 396              	//   r0     character count
 397              	// output:
 398              	//   none
 399              	***********************************/
 400              	    _FUNC move_right
 401 0288 00B5FFF7 	    _CALL  send_escape
 401      BBFF5DF8 
 401      04EB
 402 0292 00B5FFF7 	    _CALL  send_parameter 
 402      C8FF5DF8 
 402      04EB
 403 029c 4FF04300 	    mov r0,#'C' 
 404 02a0 00B5FFF7 	    _CALL  uart_putc 
 404      FEFF5DF8 
 404      04EB
 405 02aa 7047     	    _RET 
 406              	
ARM GAS  terminal.s 			page 18


 407              	/*********************************
 408              	// print n spaces on terminal
 409              	// input:
 410              	//  r0 		number of spaces 
 411              	// output:
 412              	//	none
 413              	// use:
 414              	     T1    counter  
 415              	********************************/
 416              	    _GBL_FUNC spaces
 417 02ac 4DF8048D 		  push {T1}
 418 02b0 50B1     	    cbz r0,9f 
 419 02b2 8046     	    mov T1,r0 
 420 02b4 4FF02000 	1:	mov r0,#SPACE 
 421 02b8 00B5FFF7 	    _CALL  uart_putc 
 421      FEFF5DF8 
 421      04EB
 422 02c2 B8F10108 	    subs T1,#1
 423 02c6 F5D1     	    bne 1b 
 424 02c8 5DF8048B 	9:  pop {T1}
 425 02cc 7047     	  	_RET 
 426              	
 427              	
 428              	/*********************************
 429              	    insert_char 
 430              	// insert character in tib  
 431              	
 432              	// input:
 433              	//   r0      character to insert 
 434              	//   r1      line length
 435              	//   T1      insert position 
 436              	//   T2      line pointer 
 437              	// output:
 438              	//   r0       updated insertion point  
 439              	**********************************/
 440 02ce 00BF     	   _FUNC insert_char 
 441              	/*   
 442              	    ld (CHAR,sp),a 
 443              	    ld a,xh 
 444              		ld (IPOS,sp),a
 445              	    ld a,xl 
 446              	    ld (LLEN,sp),a  
 447              	    ldw x,y
 448              	    incw x 
 449              	    ld a,(LLEN,sp)
 450              	    sub a,(IPOS,sp)
 451              	    inc a 
 452              	    ld acc8,a 
 453              	    clr acc16
 454              	    _CALL  move
 455              	    ldw y,#tib 
 456              	    ld a,(IPOS,sp)
 457              	    ld acc8,a 
 458              	    addw y,acc16 
 459              	    ld a,(CHAR,sp)
 460              	    ld (y),a
 461              	    incw y  
ARM GAS  terminal.s 			page 19


 462              	    ld a,(IPOS,sp)
 463              	    _CALL  move_left
 464              	    _MOV32 r0,tib 
 465              	    _CALL  uart_puts
 466              	    ld a,(LLEN,sp)
 467              	    sub a,(IPOS,sp) 
 468              	    _CALL  move_left 
 469              	*/
 470 02d0 7047     		_RET 
 471              	
 472              	
 473              	/***************************************
 474              	// delete character under cursor
 475              	// input:
 476              	//   R0       line length   
 477              	//   R1      delete position
 478              	//   T1       line pointer 
 479              	**************************************/
 480 02d2 00BF     	    _FUNC delete_under
 481              	/*
 482              	    ld (LLEN,sp),a 
 483              	    ld a,xl 
 484              	    ld (CPOS,sp),a 
 485              	    ldw x,y // move destination
 486              	    incw y  // move source 
 487              	    ld a,(LLEN,sp)
 488              	    sub a,(CPOS,sp)
 489              	    inc a // move including zero at end.
 490              	    ld acc8,a 
 491              	    clr acc16 
 492              		_CALL  move 
 493              	    ldw y,#tib 
 494              	    ld a,(CPOS,sp)
 495              	    ld acc8,a 
 496              	    addw y,acc16 
 497              	    ldw x,y 
 498              	    _CALL  uart_puts 
 499              	    ld a,#SPACE  
 500              	    _CALL  uart_putc
 501              	    ld a,(LLEN,sp)
 502              	    sub a,(CPOS,sp)
 503              	    _CALL  move_left 
 504              	    dec (LLEN,sp)
 505              	*/
 506 02d4 7047     		_RET 
 507              	
 508              	/********************************
 509              	// send ANSI sequence to delete
 510              	// whole line. Cursor position
 511              	// is not updated.
 512              	// ANSI: ESC[2K
 513              	// input:
 514              	//   none
 515              	// output:
 516              	//   none 
 517              	   use:
 518              	     r0 
ARM GAS  terminal.s 			page 20


 519              	********************************/
 520 02d6 00BF     	    _FUNC delete_line
 521 02d8 01B4     	    push {r0}
 522 02da 00B5FFF7 	    _CALL  send_escape
 522      92FF5DF8 
 522      04EB
 523 02e4 4FF03200 		mov r0,#'2'
 524 02e8 00B5FFF7 		_CALL  uart_putc 
 524      FEFF5DF8 
 524      04EB
 525 02f2 4FF04B00 		mov r0,#'K' 
 526 02f6 00B5FFF7 		_CALL  uart_putc
 526      FEFF5DF8 
 526      04EB
 527 0300 00B5FFF7 	    _CALL  cursor_home 
 527      FEFF5DF8 
 527      04EB
 528 030a 01BC     		pop {r0}
 529 030c 7047     	    _RET 
 530              	
 531              	/*************************************
 532              	   cursor_x  
 533              	   send cursor at column n 
 534              	    input: 
 535              	        r0  n 
 536              	    output:
 537              	        none 
 538              	    use:
 539              	        none 
 540              	*************************************/
 541 030e 00BF     	    _GBL_FUNC cursor_x 
 542 0310 00B5FFF7 	    _CALL send_escape
 542      77FF5DF8 
 542      04EB
 543 031a 00B5FFF7 	    _CALL send_parameter
 543      84FF5DF8 
 543      04EB
 544 0324 4FF04700 	    mov r0,#'G' 
 545 0328 00B5FFF7 	    _CALL uart_putc 
 545      FEFF5DF8 
 545      04EB
 546 0332 7047     	    _RET 
 547              	
 548              	/*************************************
 549              	    cursor_home 
 550              	    send cursor at left position
 551              	  input:
 552              	    none 
 553              	  output:
 554              	    none 
 555              	  use:
 556              	    r0
 557              	*************************************/
 558              	    _GBL_FUNC cursor_home 
 559 0334 01B4     	    push {r0}
 560 0336 00B5FFF7 	    _CALL send_escape
 560      64FF5DF8 
ARM GAS  terminal.s 			page 21


 560      04EB
 561 0340 4FF04700 	    mov r0,#'G' 
 562 0344 00B5FFF7 	    _CALL uart_putc 
 562      FEFF5DF8 
 562      04EB
 563 034e 01BC     	    pop {r0}
 564 0350 7047     	    _RET 
 565              	
 566              	/************************************
 567              	   update_line 
 568              	   update edited line on display 
 569              	   input:
 570              	     r0    *line 
 571              	   output:
 572              	     none 
 573              	   use:
 574              	      none 
 575              	*************************************/
 576 0352 00BF     	    _FUNC update_line 
 577 0354 00B5FFF7 	    _CALL delete_line
 577      BFFF5DF8 
 577      04EB
 578 035e 00B5FFF7 	    _CALL uart_puts
 578      FEFF5DF8 
 578      04EB
 579 0368 7047     	    _RET 
 580              	
 581              	/*************************************
 582              	  readln 
 583              	  read a line of text from terminal
 584              	  CTRL_D delete line 
 585              	  CTRL_R edit last entered line
 586              	  CTRL_O toggle between overwrite|insert   
 587              	  LEFT_ARROW move cursor left 
 588              	  RIGHT_ARROW move cursor right
 589              	  HOME cursor at start of line 
 590              	  END  cursor at end of line  
 591              	  BS  delete character left of cursor 
 592              	  input:
 593              	    r0  *buffer
 594              	    r1  buffer size 
 595              	  output:
 596              	    r0  *buffer (asciz)  
 597              	    r1  line length  
 598              	  use:
 599              	    r7  cursor position 
 600              	    T1  ovwr|insert flag 
 601              	    T2  buffer size -1 
 602              	    r10 line length 
 603              	    r11 *buffer   
 604              	*************************************/
 605 036a 00BF     	  _GBL_FUNC readln
 606 036c 2DE9800F 	  push {r7,T1,T2,r10,r11}
 607 0370 87EA0707 	  eor r7,r7  // cursor position 
 608 0374 88EA0808 	  eor T1,T1 // overwrite mode 
 609 0378 8346     	  mov r11,r0 
 610 037a A1F10109 	  sub T2,r1,#1  // buffer size -1
ARM GAS  terminal.s 			page 22


 611 037e 8AEA0A0A 	  eor r10,r10  // 0 line length 
 612 0382 80EA0000 	  eor r0,r0
 613 0386 0BF80900 	  strb r0,[r11,T2]  
 614 038a 00B5FFF7 	  _CALL cursor_shape
 614      FEFF5DF8 
 614      04EB
 615              	readln_loop:
 616 0394 00B5FFF7 	  _CALL uart_getc 
 616      FEFF5DF8 
 616      04EB
 617 039e 0D28     	  cmp r0,#CR
 618 03a0 00D1     	  bne 0f
 619 03a2 18E1     	  b readln_exit 
 620              	0:
 621 03a4 0828     	  cmp r0,#BS 
 622 03a6 32D1     	  bne 2f 
 623              	//delete char. left  
 624 03a8 3F40     	  ands r7,r7 
 625 03aa F3D0     	  beq readln_loop 
 626 03ac 5745     	  cmp r7,r10 
 627 03ae 24D0     	  beq 1f
 628              	// in mol 
 629 03b0 0BEB0700 	  add r0,r11,r7 
 630 03b4 A0F10101 	  sub r1,r0,#1 
 631 03b8 4DF8048D 	  push {T1}
 632 03bc AAEB0708 	  sub T1,r10,r7 
 633 03c0 00B5FFF7 	  _CALL cmove
 633      FEFF5DF8 
 633      04EB
 634 03ca 5DF8048B 	  pop {T1} 
 635 03ce AAF1010A 	  sub r10,#1 
 636 03d2 A7F10107 	  sub r7,#1
 637 03d6 80EA0000 	  eor r0,r0
 638 03da 0BF80A00 	  strb r0,[r11,r10] 
 639 03de 5846     	  mov r0,r11
 640 03e0 00B5FFF7 	  _CALL update_line 
 640      B7FF5DF8 
 640      04EB
 641 03ea 07F10100 	  add r0,r7,#1 
 642 03ee 00B5FFF7 	  _CALL cursor_x 
 642      FEFF5DF8 
 642      04EB
 643 03f8 CCE7     	  b readln_loop       
 644              	1: // at eol 
 645 03fa 00B5FFF7 	  _CALL bksp 
 645      E0FE5DF8 
 645      04EB
 646 0404 A7F10107 	  sub r7,#1
 647 0408 AAF1010A 	  sub r10,#1
 648 040c C2E7     	  b readln_loop 
 649 040e 0428     	2: cmp r0,#CTRL_D 
 650 0410 09D1     	   bne 3f 
 651              	// delete whole line  
 652 0412 00B5FFF7 	  _CALL delete_line  
 652      60FF5DF8 
 652      04EB
 653 041c 87EA0707 	  eor r7,r7   
ARM GAS  terminal.s 			page 23


 654 0420 8AEA0A0A 	  eor r10,r10
 655 0424 B6E7     	  b readln_loop 
 656 0426 1228     	3: cmp r0,#CTRL_R    
 657 0428 11D1     	  bne 4f 
 658              	// edit last entered line if  available 
 659 042a 1AEA0A0A 	  ands r10,r10 
 660 042e B1D1     	  bne readln_loop
 661 0430 5846     	  mov r0,r11  
 662 0432 00B5FFF7 	  _CALL strlen
 662      FEFF5DF8 
 662      04EB
 663 043c 8246     	  mov r10,r0
 664 043e 0746     	  mov r7,r0 
 665 0440 5846     	  mov r0,r11  
 666 0442 00B5FFF7 	  _CALL uart_puts
 666      FEFF5DF8 
 666      04EB
 667 044c A2E7     	  b readln_loop     
 668 044e 0F28     	4: cmp r0,#CTRL_O 
 669 0450 08D1     	   bne 5f 
 670 0452 C8F10508 	   rsb T1,#5  
 671 0456 4046     	   mov r0,T1 
 672 0458 00B5FFF7 	   _CALL cursor_shape
 672      FEFF5DF8 
 672      04EB
 673 0462 97E7     	   b readln_loop 
 674 0464 1B28     	5: cmp r0,#ESC 
 675 0466 60D1     	   bne character  
 676 0468 00B5FFF7 	   _CALL get_escape
 676      C9FD5DF8 
 676      04EB
 677 0472 8228     	   cmp r0,#HOME 
 678 0474 07D1     	   bne try_end 
 679 0476 00B5FFF7 	   _CALL cursor_home
 679      FEFF5DF8 
 679      04EB
 680 0480 87EA0707 	   eor r7,r7  
 681 0484 86E7     	   b readln_loop 
 682              	try_end:
 683 0486 8328     	   cmp r0,#END 
 684 0488 08D1     	   bne try_left 
 685 048a 0AF10100 	   add r0,r10,#1
 686 048e 00B5FFF7 	   _CALL cursor_x 
 686      FEFF5DF8 
 686      04EB
 687 0498 5746     	   mov r7,r10 
 688 049a 7BE7     	   b readln_loop 
 689              	try_left: 
 690 049c 8028     	   cmp r0,#ARROW_LEFT
 691 049e 0CD1     	   bne try_right 
 692 04a0 3F40     	   ands r7,r7 
 693 04a2 3FF477AF 	   beq readln_loop
 694 04a6 4FF00100 	   mov r0,#1 
 695 04aa 00B5FFF7 	   _CALL move_left 
 695      DAFE5DF8 
 695      04EB
 696 04b4 A7F10107 	   sub r7,#1
ARM GAS  terminal.s 			page 24


 697 04b8 6CE7     	   b readln_loop
 698              	try_right:
 699 04ba 8128     	   cmp r0,#ARROW_RIGHT 
 700 04bc 0CD1     	   bne try_suprim 
 701 04be 5745     	   cmp r7,r10
 702 04c0 3FF468AF 	   beq readln_loop
 703 04c4 07F10107 	   add r7,#1
 704 04c8 4FF00100 	   mov r0,#1  
 705 04cc 00B5FFF7 	   _CALL move_right  
 705      DBFE5DF8 
 705      04EB
 706 04d6 5DE7     	   b readln_loop 
 707              	try_suprim:
 708 04d8 8428     	   cmp r0,#SUP
 709 04da 7FF45BAF 	   bne readln_loop 
 710              	// delete character at cursor 
 711 04de 5745     	   cmp r7,r10
 712 04e0 3FF458AF 	   beq readln_loop 
 713 04e4 07EB0B01 	   add r1,r7,r11 
 714 04e8 01F10100 	   add r0,r1,#1 
 715 04ec 4DF8048D 	   push {T1}
 716 04f0 AAEB0708 	   sub T1,r10,r7
 717 04f4 00B5FFF7 	   _CALL cmove 
 717      FEFF5DF8 
 717      04EB
 718 04fe 5DF8048B 	   pop {T1}
 719 0502 AAF1010A 	   sub r10,#1 
 720 0506 80EA0000 	   eor r0,r0 
 721 050a 0BF80A00 	   strb r0,[r11,r10]
 722 050e 5846     	   mov r0,r11 
 723 0510 00B5FFF7 	   _CALL update_line
 723      1FFF5DF8 
 723      04EB
 724 051a 07F10100 	   add  r0,r7,#1 
 725 051e 00B5FFF7 	   _CALL cursor_x 
 725      FEFF5DF8 
 725      04EB
 726 0528 34E7     	   b readln_loop      
 727              	character:
 728 052a 5745     	   cmp r7,r10 
 729 052c 42D0     	   beq 5f // cursor at eol 
 730              	// cursor in middle of line 
 731              	// action depend on edit mode 
 732 052e 18EA0808 	  ands T1,T1  //check edit mode 
 733 0532 29D0     	  beq 2f 
 734              	// insert mode
 735 0534 D145     	  cmp T2,r10 
 736 0536 3FF42DAF 	  beq readln_loop // buffer full  
 737 053a 2DE90101 	  push {r0,T1}
 738 053e 0BEB0700 	  add r0,r11,r7  // src 
 739 0542 00F10101 	  add r1,r0,#1   // dest 
 740 0546 AAEB0708 	  sub T1,r10,r7  // move count 
 741 054a 00B5FFF7 	  _CALL cmove   
 741      FEFF5DF8 
 741      04EB
 742 0554 BDE80101 	  pop {r0,T1}
 743 0558 0BF80700 	  strb r0,[r11,r7] 
ARM GAS  terminal.s 			page 25


 744 055c 07F10107 	  add r7,#1
 745 0560 0AF1010A 	  add r10,#1 
 746 0564 80EA0000 	  eor r0,r0 
 747 0568 0BF80A00 	  strb r0,[r11,r10]
 748 056c 5846     	  mov r0,r11   
 749 056e 00B5FFF7 	  _CALL update_line
 749      F0FE5DF8 
 749      04EB
 750 0578 07F10100 	  add r0,r7,#1 
 751 057c 00B5FFF7 	  _CALL cursor_x  
 751      FEFF5DF8 
 751      04EB
 752 0586 05E7     	  b readln_loop   
 753              	2: // overwrite mode 
 754 0588 0BF80700 	  strb r0,[r11,r7]
 755 058c 07F10107 	  add r7,#1
 756 0590 80EA0000 	  eor r0,r0 
 757 0594 0BF80A00 	  strb r0,[r11,r10] 
 758 0598 5846     	  mov r0,r11 
 759 059a 00B5FFF7 	  _CALL update_line 
 759      DAFE5DF8 
 759      04EB
 760 05a4 07F10100 	  add r0,r7,#1 
 761 05a8 00B5FFF7 	  _CALL cursor_x 
 761      FEFF5DF8 
 761      04EB
 762 05b2 EFE6     	  b readln_loop 
 763              	5: // cursor at eol, mode doesn't matter 
 764 05b4 CA45     	   cmp r10,T2 
 765 05b6 00D4     	   bmi 6f 
 766 05b8 ECE6     	   b readln_loop  // buffer full
 767              	6: // only accept char>=32  
 768 05ba 2028     	   cmp r0,#SPACE 
 769 05bc 3FF5EAAE 	   bmi readln_loop 
 770 05c0 0BF80700 	   strb r0,[r11,r7] 
 771 05c4 00B5FFF7 	   _CALL uart_putc
 771      FEFF5DF8 
 771      04EB
 772 05ce 07F10107 	   add r7,#1
 773 05d2 BA46     	   mov r10,r7
 774 05d4 DEE6     	   b readln_loop  
 775              	readln_exit:
 776 05d6 00B5FFF7 	  _CALL uart_putc 
 776      FEFF5DF8 
 776      04EB
 777 05e0 80EA0000 	  eor r0,r0 
 778 05e4 0BF80A00 	  strb r0,[r11,r10]
 779 05e8 5146     	  mov r1,r10  // line length
 780 05ea 5846     	  mov r0,r11  // *buffer  
 781 05ec BDE8800F 	  pop {r7,T1,T2,r10,r11}
 782 05f0 7047     	  _RET 
 783              	
 784              	
 785              	/*******************************
 786              	    get_param 
 787              	    read ANSI parameter 
 788              	    input:
ARM GAS  terminal.s 			page 26


 789              	      none 
 790              	    output:
 791              	      r0   value 
 792              	    use:
 793              	      T1   temp
 794              	      T2   base 10  
 795              	*******************************/
 796 05f2 00BF     	    _FUNC get_param
 797 05f4 2DE90003 	    push {T1,T2}
 798 05f8 88EA0808 	    eor T1,T1 
 799 05fc 4FF00A09 	    mov T2,#10 
 800 0600 00B5FFF7 	1:  _CALL uart_getc
 800      FEFF5DF8 
 800      04EB
 801 060a 00B5FFF7 	    _CALL is_digit 
 801      FEFF5DF8 
 801      04EB
 802 0614 03D0     	    beq 9f 
 803 0616 09FB08F8 	    mul T1,T2 
 804 061a 8044     	    add T1,r0 
 805 061c F0E7     	    b 1b
 806              	9: 
 807 061e 4046     	    mov r0,T1     
 808 0620 BDE80003 	    pop {T1,T2}
 809 0624 7047     	    _RET 
 810              	
 811              	/*******************************
 812              	    get_curpos 
 813              	    report cursor position 
 814              	  input:
 815              	    none 
 816              	  output:
 817              	    r0    row 
 818              	    r1    column
 819              	  use:
 820              	    r2
 821              	    r3 
 822              	*******************************/
 823 0626 00BF     	    _GBL_FUNC get_curpos 
 824 0628 0CB4     	    push {r2,r3}   
 825 062a 00B5FFF7 	    _CALL uart_flush_queue 
 825      FEFF5DF8 
 825      04EB
 826 0634 00B5FFF7 	    _CALL send_escape 
 826      E5FD5DF8 
 826      04EB
 827 063e 4FF03600 	    mov r0,#'6'
 828 0642 00B5FFF7 	    _CALL uart_putc
 828      FEFF5DF8 
 828      04EB
 829 064c 4FF06E00 	    mov r0,#'n'
 830 0650 00B5FFF7 	    _CALL uart_putc  
 830      FEFF5DF8 
 830      04EB
 831 065a 00B5FFF7 	    _CALL uart_getc 
 831      FEFF5DF8 
 831      04EB
ARM GAS  terminal.s 			page 27


 832 0664 1B28     	    cmp r0,#ESC 
 833 0666 13D1     	    bne 9f 
 834 0668 00B5FFF7 	    _CALL uart_getc 
 834      FEFF5DF8 
 834      04EB
 835 0672 5B28     	    cmp r0,#'[' 
 836 0674 0CD1     	    bne 9f 
 837 0676 00B5FFF7 	    _CALL get_param 
 837      BCFF5DF8 
 837      04EB
 838 0680 0246     	    mov r2,r0 
 839 0682 00B5FFF7 	    _CALL get_param 
 839      B6FF5DF8 
 839      04EB
 840 068c 0146     	    mov r1,r0 
 841 068e 1046     	    mov r0,r2 
 842 0690 0CBC     	9:  pop {r2,r3}
 843 0692 70475400 	    _RET 
 843      0000
ARM GAS  terminal.s 			page 28


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  terminal.s 			page 29


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  terminal.s 			page 30


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  terminal.s 			page 31


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:110    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:112    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:118    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:135    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:136    *ABS*:0000000000000004 COUNT
ARM GAS  terminal.s 			page 32


      tbi_macros.inc:137    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:138    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:139    *ABS*:0000000000000010 DATA
      tbi_macros.inc:140    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:141    *ABS*:0000000000000018 BASE
      tbi_macros.inc:142    *ABS*:000000000000001c TICKS
      tbi_macros.inc:143    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:144    *ABS*:0000000000000024 SEED
      tbi_macros.inc:145    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:146    *ABS*:000000000000002c FFREE
      tbi_macros.inc:147    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:148    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:149    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:150    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:151    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:152    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:153    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:154    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:155    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:156    *ABS*:0000000000000060 VARS
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:159    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:162    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:163    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:164    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:165    *ABS*:0000000000000008 FSLEEP
      tbi_macros.inc:166    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:167    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:168    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:170    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:172    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:173    *ABS*:0000000000007fff MAX_LINENO
          terminal.s:60     .text:0000000000000000 $t
          terminal.s:60     .text:0000000000000000 get_escape
          terminal.s:102    .text:0000000000000054 convert_table
                            *ABS*:0000000000000084 SUP
          terminal.s:96     *ABS*:0000000000000080 ARROW_LEFT
          terminal.s:97     *ABS*:0000000000000081 ARROW_RIGHT
          terminal.s:98     *ABS*:0000000000000082 HOME
          terminal.s:99     *ABS*:0000000000000083 END
          terminal.s:102    .text:0000000000000054 $d
          terminal.s:116    .text:0000000000000060 uart_puts
          terminal.s:116    .text:0000000000000060 $t
          terminal.s:138    .text:0000000000000080 digit
          terminal.s:167    .text:00000000000000ac itoa
          terminal.s:200    .text:0000000000000112 pad
          terminal.s:200    .text:0000000000000112 $d
          terminal.s:212    .text:0000000000000118 print_int
          terminal.s:212    .text:0000000000000116 $t
          terminal.s:227    .text:0000000000000130 print_hex
          terminal.s:248    .text:0000000000000170 digit_to_char
          terminal.s:268    .text:0000000000000184 cursor_shape
          terminal.s:331    .text:0000000000000204 send_escape
          terminal.s:356    .text:0000000000000228 send_parameter
          terminal.s:288    .text:00000000000001c0 bksp
          terminal.s:307    .text:00000000000001ec delete_nchar
ARM GAS  terminal.s 			page 33


          terminal.s:384    .text:0000000000000264 move_left
          terminal.s:400    .text:0000000000000288 move_right
          terminal.s:416    .text:00000000000002ac spaces
          terminal.s:440    .text:00000000000002d0 insert_char
          terminal.s:480    .text:00000000000002d4 delete_under
          terminal.s:520    .text:00000000000002d8 delete_line
          terminal.s:558    .text:0000000000000334 cursor_home
          terminal.s:541    .text:0000000000000310 cursor_x
          terminal.s:576    .text:0000000000000354 update_line
          terminal.s:605    .text:000000000000036c readln
          terminal.s:615    .text:0000000000000394 readln_loop
          terminal.s:775    .text:00000000000005d6 readln_exit
          terminal.s:727    .text:000000000000052a character
          terminal.s:682    .text:0000000000000486 try_end
          terminal.s:689    .text:000000000000049c try_left
          terminal.s:698    .text:00000000000004ba try_right
          terminal.s:707    .text:00000000000004d8 try_suprim
          terminal.s:796    .text:00000000000005f4 get_param
          terminal.s:823    .text:0000000000000628 get_curpos
          terminal.s:843    .text:0000000000000694 $d

UNDEFINED SYMBOLS
uart_getc
uart_putc
_pad
cmove
strlen
is_digit
uart_flush_queue
