ARM GAS  terminal.s 			page 1


   1              	////
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	//------------------------------
  20              	// This file is for functions 
  21              	// interfacing with VT100 terminal
  22              	// emulator.
  23              	// except for uart_getc and uart_putc which
  24              	// are in stm32-tbi.s 
  25              	// exported functions:
  26              	//   uart_puts 
  27              	//   readln 
  28              	//   spaces 
  29              	//   digit_to_char 
  30              	//------------------------------
  31              	
  32              	  .syntax unified
  33              	  .cpu cortex-m3
  34              	  .fpu softvfp
  35              	  .thumb
  36              	
  37              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
ARM GAS  terminal.s 			page 2


  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
ARM GAS  terminal.s 			page 3


  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	   /* AFIO base address */
  86              	   .equ AFIO_BASE_ADR, 0x40010000
  87              	   
  88              	   /* AFIO registers offset */
  89              	   .equ AFIO_EVCR,0
  90              	   .equ AFIO_MAPR,4
  91              	   .equ AFIO_EXTICR1,8
  92              	   .equ AFIO_EXTICR2,12 
  93              	   .equ AFIO_EXTICR3,16
  94              	   .equ AFIO_EXTICR4,20
  95              	   .equ AFIO_MAPR2,28
  96              	   
  97              	    /* USART1 registers */
  98              	    .equ USART1_BASE_ADR, 0x40013800
  99              	    /* USARTx registers offset */
 100              	    .equ USART_SR, 0
 101              	    .equ USART_DR,4
 102              	    .equ USART_BRR,8
 103              	    .equ USART_CR1,12
 104              	    .equ USART_CR2,16
 105              	    .equ USART_CR3,20
 106              	    .equ USART_GTPR,24
 107              	
 108              	   /* systick */
 109              	    .equ STK_BASE_ADR, 0xE000E010
 110              	    /* registers offset */
 111              	    .equ STK_CTL, 0
 112              	    .equ STK_LOAD, 4
 113              	    .equ STK_VAL, 8
 114              	    .equ STK_CALIB, 12
 115              	
 116              	   /* system control block */
 117              	   .equ SCB_BASE_ADR, 0xE000ED00
 118              	   /* registers offset */
 119              	   .equ SCB_CPUID, 0
 120              	   .equ SCB_ICSR, 4 
 121              	   .equ SCB_VTOR, 8
 122              	   .equ SCB_AIRCR, 12
 123              	   .equ SCB_SCR, 16
 124              	   .equ SCB_CCR, 20
 125              	   .equ SCB_SHPR1,24
 126              	   .equ SCB_SHPR2,28
 127              	   .equ SCB_SHPR3,32
 128              	   .equ SCB_SHCRS,36
 129              	   .equ SCB_CFSR,40
 130              	   .equ SCB_HFSR,44
 131              	   .equ SCB_MMAR,52
 132              	   .equ SCB_BFAR,56
 133              	   // key to to write in SCB_AIRCR 
 134              	   .equ SCB_VECTKEY,0x5fa 
ARM GAS  terminal.s 			page 4


 135              	   
 136              	   /* NVIC block */
 137              	   .equ NVIC_BASE_ADR, 0xE000E100
 138              	   .equ NVIC_ISER0, 0
 139              	   .equ NVIC_ISER1, 4
 140              	   .equ NVIC_ISER2, 8
 141              	   .equ NVIC_ICER0, 0x80
 142              	   .equ NVIC_ICER1, 0x84 
 143              	   .equ NVIC_ICER2, 0x88 
 144              	   .equ NVIC_ISPR0, 0x100
 145              	   .equ NVIC_ISPR1, 0x104
 146              	   .equ NVIC_ISPR2, 0x108 
 147              	   .equ NVIC_ICPR0, 0x180
 148              	   .equ NVIC_ICPR1, 0x184
 149              	   .equ NVIC_ICPR2, 0x188
 150              	   .equ NVIC_IABR0, 0x200
 151              	   .equ NVIC_IABR1, 0x204
 152              	   .equ NVIC_IABR2, 0x208
 153              	   .equ NVIC_IPR_BASE, 0x300 
 154              	
 155              	/* system control register */
 156              	.equ SCR_BASE_ADR,0xE000ED10
 157              	.equ SCR_SLEEPONEXIT,(1<<1)
 158              	.equ SCR_SLEEPDEEP,(1<<2)
 159              	.equ SCR_SEVONPEND,(1<<4)
 160              	
 161              	/* power control register */
 162              	.equ PWR_CR_ADR,0x40007000
 163              	.equ PWR_CR_LPDS,(1<<0)
 164              	.equ PWR_CR_PDDS,(1<<1)
 165              	.equ PWR_CR_CWUF,(1<<2)
 166              	.equ PWR_CR_CSBF,(1<<3)
 167              	.equ PWR_CR_PVDE,(1<<4)
 168              	.equ PWR_CR_PLS,(1<<5)
 169              	.equ PWR_CR_DBP,(1<<8)
 170              	
 171              	/* power control and statut register */
 172              	.equ PWR_CSR_ADR,0x40007004 
 173              	.equ PWR_CSR_WUF,(1<<0)
 174              	.equ PWR_CSR_SBF,(1<<1)
 175              	.equ PWR_CSR_PVDO,(1<<2)
 176              	.equ PWR_CSR_EWUP,(1<<8)
 177              	
 178              	/* Window watchdog (WWDG) */
 179              	.equ WWDG_BASE_ADR,0x40002C00
 180              	.equ WWDG_CR,0
 181              	.equ WWDG_CFR,4
 182              	.equ WWDG_SR,8
 183              	
 184              	/* Independent watchdog (IWDG) */
 185              	.equ IWDG_BASE_ADR,0x40003000
 186              	.equ IWDG_KR,0 
 187              	.equ IWDG_PR,4
 188              	.equ IWDG_RLR,8
 189              	.equ IWDG_SR,12
  38              	  .include "ascii.inc"
   1              	////
ARM GAS  terminal.s 			page 5


   2              	// Copyright Jacques DeschÃªnes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
ARM GAS  terminal.s 			page 6


  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  39              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques DeschÃªnes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ  RX_QUEUE_SIZE,16
  26              	  .equ  DSTACK_TOP,0x20004f00 
  27              	  .equ  RSTACK_TOP,0x20005000
ARM GAS  terminal.s 			page 7


  28              	  
  29              	
  30              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  31              	.equ EOF,0xff // end of file marker 
  32              	
  33              	//--------------------------------------
  34              	//       token attribute
  35              	//--------------------------------------
  36              	// bits 4:5 identify token group 
  37              	// 0x0n -> miscelinous 
  38              	// 0x1n -> +|- operators 
  39              	// 0x2n -> *|/|% operators
  40              	// 0x3n -> relational operators 
  41              	  .equ TK_NONE,0       // not a token 
  42              	  .equ TK_COLON,1      // command separator ':' 
  43              	  .equ TK_QSTR,2     // quoted string  
  44              	  .equ TK_CHAR,3       // ASCII character 
  45              	  .equ TK_VAR,4      // variable index 
  46              	  .equ TK_ARRAY,5     // array variable '@' 
  47              	  .equ TK_LPAREN,6     // left parenthesis '('
  48              	  .equ TK_RPAREN,7     // right parenthesis ')'
  49              	  .equ TK_COMMA,8     // item separator ',' 
  50              	  .equ TK_SEMIC,9     // semi-colon  
  51              	  .equ TK_SHARP,0xa     // print colon width '#' 
  52              	  .equ TK_CMD,0xb      // BASIC command   
  53              	  .equ TK_IFUNC,0xc    // BASIC integer function
  54              	  .equ TK_CFUNC,0xd    // BASIC character function
  55              	  .equ TK_CONST,0xe    // BASIC constant 
  56              	  .equ TK_INTGR,0xf    // 32 bits integer 
  57              	  .equ TK_PLUS,0x10    // addition operator '+'
  58              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  59              	  .equ TK_MULT,0x20    // multiplication operator '*'
  60              	  .equ TK_DIV,0x21     // division operator '/'
  61              	  .equ TK_MOD,0x22     // modulo operator '%'
  62              	  .equ TK_LBL,0x40     // label token 
  63              	  
  64              	// don't change these token values 
  65              	// values chosen to be used as a mask.
  66              	// bit 7   1 for dictionary words else 0 
  67              	// bits 6  always 0 
  68              	// bits 5:4 identify group 
  69              	// bits 3:0 token identifier inside group  
  70              	  .equ TK_GT,0x31      // relation operator '>'
  71              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  72              	  .equ TK_GE,0x33      // relation operator '>='
  73              	  .equ TK_LT,0x34      // relation operator '<'
  74              	  .equ TK_LE,0x36      // relation operator '<='
  75              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  76              	// token groups 
  77              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  78              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  79              	  .equ TK_GRP_ADD,0x10  // additive operators
  80              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  81              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  82              	  .equ CMD_END,2 
  83              	
  84              	//--------------------------------------
ARM GAS  terminal.s 			page 8


  85              	//   error codes 
  86              	//--------------------------------------
  87              	  .equ ERR_NONE,0
  88              	  .equ ERR_MEM_FULL,1 
  89              	  .equ ERR_SYNTAX,2
  90              	  .equ ERR_MATH_OVF,3
  91              	  .equ ERR_DIV0,4 
  92              	  .equ ERR_NO_LINE,5
  93              	  .equ ERR_RUN_ONLY,6
  94              	  .equ ERR_CMD_ONLY,7
  95              	  .equ ERR_DUPLICATE,8
  96              	  .equ ERR_NOT_FILE,9
  97              	  .equ ERR_BAD_VALUE,10
  98              	  .equ ERR_NO_ACCESS,11
  99              	  .equ ERR_NO_DATA,12 
 100              	  .equ ERR_NO_PROG,13
 101              	  .equ ERR_NO_FSPACE,14
 102              	  .equ ERR_BUF_FULL,15
 103              	  .equ ERR_CANT_PROG,16
 104              	  
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DP   .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
ARM GAS  terminal.s 			page 9


 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FSFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FSFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 157              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 158              	  .equ TRACE_LEVEL,ARRAY_ADR+4  // debugging level 
 159              	  .equ HERE,TRACE_LEVEL+4 // constants pointer position 
 160              	  .equ BASIC_START,TRACE_LEVEL+4 // BASIC area start after variables 
 161              	
 162              	/* flags used by BASIC interpreter */ 
 163              		.equ FRUN,(1<<0) // programm running
 164              		.equ FTRAP,(1<<1) // inside trap handler 
 165              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 166              		.equ FSTOP,(1<<3) // program stopped  
 167              		.equ FBREAK,(1<<4) // break point flag 
 168              		.equ FCOMP,(1<<5)  // compiling flags 
 169              		.equ FAUTORUN,(1<<6) // auto start program running 
 170              	
 171              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 172              	  
 173              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 174              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 175              	
 176              	/***********************************************
 177              	*       MACROS
 178              	***********************************************/
 179              		.macro _CALL fn /* low level routine call */ 
 180              	 	PUSH {LR}
 181              		BL \fn  
 182              	  POP {LR}
 183              		.endm
 184              		
 185              		.macro	_RET /* return from subroutine */
 186              		BX	LR
 187              		.endm
 188              	
 189              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 190              		MOV \REG, #\LITERAL&0xffff
 191              		MOVT \REG, #\LITERAL>>16
 192              		.endm
 193              	
 194              	// local function header 
 195              	  .macro _FUNC label 
 196              	  .p2align 2 
 197              	  .type \label, %function  
 198              	\label:
ARM GAS  terminal.s 			page 10


 199              	  .endm 
 200              	
 201              	// global function header 
 202              	  .macro _GBL_FUNC label 
 203              	  .global \label 
 204              	  _FUNC \label 
 205              	  .endm 
 206              	
 207              	
 208              	/********************************
 209              	    dictionary structure
 210              	*********************************/
 211              		.macro _dict_entry tok_type,name,cmd_idx 
 212              	  .word LINK 
 213              	  .word \cmd_idx 
 214              		.word \tok_type  	
 215              		.equ LINK,.
 216              		.asciz "\name"
 217              		.p2align 2 
 218              		.endm 
 219              	
 220              	  // pop parameter in register 
 221              	  .macro _POP  reg 
 222              	  ldmia  DP!,{\reg}
 223              	  .endm 
 224              	
 225              	  // push register on parameter stack 
 226              	  .macro _PUSH reg 
 227              	  stmdb DP!,{\reg}
 228              	  .endm 
 229              	
 230              	  // drop n parameters on dstack 
 231              	  .macro _DROP n
 232              	  mov r0,#4*\n
 233              	  add DP,R0 
 234              	  .endm 
 235              	
 236              	  // back to previous token in list 
 237              	  .macro _UNGET_TOKEN 
 238              	  ldr IN,[UPP,#IN_SAVED]
 239              	  ldr BPTR,[UPP,#BASICPTR] 
 240              	  .endm 
 241              	
 242              	 // create a text data 
 243              	 .macro _TEXT label,text
 244              	 \label: .asciz "\text"
 245              	 .p2align 2 
 246              	 .endm 
 247              	
 248              	// command line only 
 249              	  .macro _CLO 
 250              	  ldr r0,[UPP,#FLAGS]
 251              	  tst r0,#FRUN 
 252              	  beq 1f 
 253              	  mov r0,#ERR_CMD_ONLY
 254              	  b tb_error
 255              	1: 
ARM GAS  terminal.s 			page 11


 256              	  .endm 
 257              	
 258              	// run time only 
 259              	  .macro _RTO 
 260              	  ldr r0,[UPP,#FLAGS]
 261              	  tst r0,#FRUN 
 262              	  bne 1f 
 263              	  mov r0,#ERR_CMD_ONLY
 264              	  b tb_error
 265              	1:
 266              	  .endm 
 267              	
  40              	
  41              	
  42              	    .section .text, "ax", %progbits 
  43              	
  44              	
  45              	/*********************************
  46              	// receive ANSI ESC 
  47              	// sequence and convert it
  48              	// to a single character code 
  49              	// in range {128..255}
  50              	// This is called after receiving 
  51              	// ESC character. 
  52              	// ignored sequence return 0 
  53              	  input:
  54              	    none
  55              	  output:
  56              	    r0    converted character 
  57              	  use: 
  58              	    r2
  59              	***********************************/
  60              	    _FUNC get_escape
  61 0000 04B4     	    push {r2}
  62 0002 00B5FFF7 	    _CALL uart_getc 
  62      FEFF5DF8 
  62      04EB
  63 000c 5B28     	    cmp r0,#'[ // this character is expected after ESC 
  64 000e 03D0     	    beq 1f
  65 0010 80EA0000 	0:  eor r0,r0
  66 0014 04BC     	    pop {r2}
  67 0016 7047     	    _RET
  68 0018 00B5FFF7 	1: _CALL  uart_getc 
  68      FEFF5DF8 
  68      04EB
  69 0022 DFF8DC27 	    ldr r2,=convert_table
  70              	2:
  71 0026 1178     	    ldrb r1,[r2]
  72 0028 0940     	    ands r1,r1 
  73 002a F1D0     	    beq 0b 
  74 002c 8842     	    cmp r0,r1 
  75 002e 02D0     	    beq 4f
  76 0030 02F10202 	    add r2,#2
  77 0034 F7E7     	    b 2b
  78 0036 02F10102 	4:  add r2,#1  
  79 003a 1078     	    ldrb r0,[r2]
  80 003c B0F1840F 	    cmp r0,#SUP
ARM GAS  terminal.s 			page 12


  81 0040 06D1     	    bne 5f
  82 0042 01B4     	    push {r0}  
  83 0044 00B5FFF7 	    _CALL  uart_getc
  83      FEFF5DF8 
  83      04EB
  84 004e 01BC     	    pop {r0}
  85              	5:
  86 0050 04BC     	    pop {r2}
  87 0052 7047     	    _RET 
  88              	
  89              	//-----------------------------
  90              	//  constants replacing 
  91              	//  ANSI sequence received 
  92              	//  from terminal.
  93              	//  These are the ANSI sequences
  94              	//  accepted by function readln
  95              	//------------------------------
  96              	    .equ ARROW_LEFT,128
  97              	    .equ ARROW_RIGHT,129
  98              	    .equ HOME,130
  99              	    .equ END,131
 100              	    .equ SUP,132 
 101              	
 102 0054 43814480 	convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',END,'3',SUP,0,0
 102      48824683 
 102      33840000 
 103              	
 104              	/******************************
 105              	    uart_puts 
 106              	    print zero terminate string 
 107              	 
 108              	  input:
 109              	    r0  *asciz 
 110              	  output:
 111              	    none 
 112              	  use:
 113              	    r0  char to send 
 114              	    T1  *asciz 
 115              	******************************/
 116              	    _GBL_FUNC uart_puts 
 117 0060 4DF8048D 	    push {T1}
 118 0064 8046     	    mov T1,r0 
 119 0066 18F8010B 	1:  ldrb r0,[T1],#1
 120 006a 28B1     	    cbz r0,9f 
 121 006c 00B5FFF7 	    _CALL uart_putc 
 121      FEFF5DF8 
 121      04EB
 122 0076 F6E7     	    b 1b 
 123 0078 5DF8048B 	9:  pop {T1}
 124 007c 7047     	    _RET 
 125              	
 126              	/***********************************
 127              	   digit  
 128              	   convert least digit of uint32 to ASCII 
 129              	    input:
 130              	        r0    uint32
 131              	        r1    base   
ARM GAS  terminal.s 			page 13


 132              	    output:
 133              	        r0    r0%base+'0'  
 134              	        r1    quotient 
 135              	    use:
 136              	        T1 
 137              	***********************************/
 138 007e 00BF     	    _FUNC digit
 139 0080 4DF8048D 	    push {T1}
 140 0084 01B4     	    push {r0}
 141 0086 8846     	    mov T1,r1  
 142 0088 B0FBF8F0 	    udiv r0,T1
 143 008c 0146     	    mov r1,r0  
 144 008e 08FB00F0 	    mul  r0,T1 
 145 0092 5DF8048B 	    pop {T1}
 146 0096 A8EB0000 	    sub r0,T1,r0
 147 009a 0A28     	    cmp r0,#10  
 148 009c 01D4     	    bmi 1f 
 149 009e 00F10700 	    add r0,#7
 150 00a2 00F13000 	1:  add r0,#'0'  
 151 00a6 5DF8048B 	    pop {T1}
 152 00aa 7047     	    _RET 
 153              	
 154              	/**********************************
 155              	    itoa 
 156              	    convert integer to string
 157              	    input:
 158              	      r0   integer 
 159              	      r1   base 
 160              	    output:
 161              	      r0   *string 
 162              	    use: 
 163              	      r7   integer 
 164              	      T1   base 
 165              	      T2   *pad 
 166              	*********************************/ 
 167              	    _GBL_FUNC itoa
 168 00ac 2DE98003 	    push {r7,T1,T2}
 169 00b0 0746     	    mov r7,r0
 170 00b2 8846     	    mov T1,r1  
 171 00b4 DFF87890 	    ldr T2,pad 
 172 00b8 09F18009 	    add T2,#PAD_SIZE 
 173 00bc 80EA0000 	    eor r0,r0 
 174 00c0 09F8010D 	    strb r0,[T2,#-1]!
 175 00c4 00F12000 	    add r0,#SPACE 
 176 00c8 09F8010D 	    strb r0,[T2,#-1]!
 177 00cc 80EA0000 	    eor r0,r0 
 178 00d0 B8F10A0F 	    cmp T1,#10 
 179 00d4 04D1     	    bne 0f 
 180 00d6 17F00040 	    ands r0,r7,#(1<<31)
 181 00da 01D0     	    beq 0f 
 182 00dc C7F10007 	    rsb r7,#0 
 183 00e0 01B4     	0:  push {r0}
 184 00e2 3846     	1:  mov r0,r7 
 185 00e4 4146     	    mov r1,T1 
 186 00e6 00B5FFF7 	    _CALL digit 
 186      CAFF5DF8 
 186      04EB
ARM GAS  terminal.s 			page 14


 187 00f0 09F8010D 	    strb r0,[T2,#-1]!
 188 00f4 0940     	    ands r1,r1 
 189 00f6 01D0     	    beq  2f   
 190 00f8 0F46     	    mov r7,r1 
 191 00fa F2E7     	    b 1b 
 192 00fc 01BC     	2:  pop {r0} 
 193 00fe 0040     	    ands r0,r0 
 194 0100 03D0     	    beq 3f 
 195 0102 4FF02D00 	    mov r0,#'-'
 196 0106 09F8010D 	    strb r0,[T2,#-1]!
 197 010a B8F1100F 	3:  cmp T1,#16 
 198 010e 04D1     	    bne 4f 
 199 0110 4FF02400 	    mov r0,#'$' 
 200 0114 09F8010D 	    strb r0,[T2,#-1]!
 201 0118 06E0     	    b 9f 
 202 011a B8F1020F 	4:  cmp T1,#2 
 203 011e 03D1     	    bne 9f 
 204 0120 4FF02600 	    mov r0,#'&'
 205 0124 08F8010D 	    strb r0,[T1,#-1]!
 206 0128 4846     	9:  mov r0,T2 
 207 012a BDE88003 	    pop {r7,T1,T2} 
 208 012e 7047     	    _RET  
 209 0130 00000000 	pad: .word _pad 
 210              	
 211              	/*****************************
 212              	    print_int 
 213              	  input:
 214              	    r0   integer to print 
 215              	    r1   conversion base 
 216              	  output:
 217              	    none 
 218              	  use:
 219              	    none 
 220              	*****************************/
 221              	    _GBL_FUNC print_int 
 222 0134 00B5FFF7 	    _CALL itoa
 222      FEFF5DF8 
 222      04EB
 223 013e 00B5FFF7 	    _CALL uart_puts
 223      FEFF5DF8 
 223      04EB
 224 0148 7047     	    _RET 
 225              	
 226              	/********************************
 227              	// print byte  in hexadecimal 
 228              	// on console
 229              	// input:
 230              	//   r0		byte to print
 231              	// output:
 232              	     none 
 233              	   use:
 234              	     none 
 235              	******************************/
 236 014a 00BF     	    _GBL_FUNC print_hex
 237 014c 01B4     		push {r0} 
 238 014e 4FEA1010 	  lsr r0,#4  
 239 0152 00B5FFF7 		_CALL  digit_to_char 
ARM GAS  terminal.s 			page 15


 239      FEFF5DF8 
 239      04EB
 240 015c 00B5FFF7 		_CALL  uart_putc 
 240      FEFF5DF8 
 240      04EB
 241 0166 01BC     	    pop {r0} 
 242 0168 00B5FFF7 		_CALL  digit_to_char
 242      FEFF5DF8 
 242      04EB
 243 0172 00B5FFF7 		_CALL  uart_putc
 243      FEFF5DF8 
 243      04EB
 244 017c 4FF02000 		mov r0,#SPACE 
 245 0180 00B5FFF7 		_CALL  uart_putc  
 245      FEFF5DF8 
 245      04EB
 246 018a 7047     		_RET 
 247              	
 248              	/***********************************
 249              	// convert digit to character  
 250              	// input:
 251              	//   r0       digit to convert 
 252              	// output:
 253              	//   r0      hexdecimal character 
 254              	   use:
 255              	     none 
 256              	***********************************/
 257              	    _GBL_FUNC digit_to_char 
 258 018c 00F00F00 		and r0,#15 
 259 0190 0A28     		cmp r0,#10 
 260 0192 01D4     		bmi 1f  
 261 0194 00F10700 		add r0,#7
 262 0198 00F13000 	1:  add r0,#'0'  
 263 019c 7047     		_RET 
 264              	
 265              	
 266              	/*****************************
 267              	    cursor_shape 
 268              	    change cursor shape 
 269              	
 270              	  input:
 271              	    r0      shape {0..6}
 272              	  output:
 273              	    none 
 274              	  use:
 275              	    T1    shape
 276              	*******************************/
 277 019e 00BF     	    _GBL_FUNC cursor_shape
 278 01a0 4DF8048D 	    push {T1}
 279 01a4 00B500F0 	    _CALL send_escape
 279      3BF85DF8 
 279      04EB
 280 01ae 00B500F0 	    _CALL send_parameter 
 280      48F85DF8 
 280      04EB
 281 01b8 4FF02000 	    mov r0,#SPACE 
 282 01bc 00B5FFF7 	    _CALL uart_putc 
ARM GAS  terminal.s 			page 16


 282      FEFF5DF8 
 282      04EB
 283 01c6 4FF07100 	    mov r0,#'q' 
 284 01ca 00B5FFF7 	    _CALL uart_putc 
 284      FEFF5DF8 
 284      04EB
 285 01d4 5DF8048B 	    pop {T1}
 286 01d8 7047     	    _RET 
 287              	
 288              	
 289              	//---------------------------
 290              	// delete character at left 
 291              	// of cursor on terminal 
 292              	// input:
 293              	//   none 
 294              	// output:
 295              	//	none 
 296              	//---------------------------
 297 01da 00BF     	    _FUNC bksp
 298 01dc 4FF00800 		mov r0,#BS 
 299 01e0 00B5FFF7 		_CALL  uart_putc 
 299      FEFF5DF8 
 299      04EB
 300 01ea 4FF02000 		mov r0,#SPACE 
 301 01ee 00B5FFF7 		_CALL  uart_putc 
 301      FEFF5DF8 
 301      04EB
 302 01f8 4FF00800 		mov r0,#BS 
 303 01fc 00B5FFF7 		_CALL  uart_putc 
 303      FEFF5DF8 
 303      04EB
 304 0206 7047     		_RET 
 305              	
 306              	//---------------------------
 307              	// delete n character left of cursor 
 308              	// at terminal.
 309              	// input: 
 310              	//   r0   number of characters to delete.
 311              	// output:
 312              	//    none
 313              	// use:
 314              	//   r2   count  
 315              	//--------------------------	
 316              	    _FUNC delete_nchar
 317 0208 48B1     		cbz r0,2f 
 318 020a 04B4     	    push {r2}
 319 020c 0246     	    mov r2,r0  
 320              	1:	
 321 020e 00B5FFF7 	    _CALL  bksp 
 321      E4FF5DF8 
 321      04EB
 322 0218 013A     	    subs r2,#1 
 323 021a F8D1     		bne 1b 
 324 021c 04BC     	    pop {r2}
 325 021e 7047     	2:	_RET
 326              	
 327              	
ARM GAS  terminal.s 			page 17


 328              	//--------------------------
 329              	// send ANSI escape sequence
 330              	// ANSI: ESC[
 331              	// note: ESC is ASCII 27
 332              	//       [   is ASCII 91 
 333              	// input:
 334              	//      none 
 335              	// output:
 336              	//      none 
 337              	// use:
 338              	//      r0 
 339              	//-------------------------- 
 340              	    _FUNC send_escape
 341 0220 01B4     		  push {r0}
 342 0222 4FF01B00 	    mov r0,#ESC 
 343 0226 00B5FFF7 		  _CALL  uart_putc 
 343      FEFF5DF8 
 343      04EB
 344 0230 4FF05B00 		  mov r0,#'['
 345 0234 00B5FFF7 		  _CALL  uart_putc 
 345      FEFF5DF8 
 345      04EB
 346 023e 01BC     		  pop {r0}
 347 0240 7047     	    _RET 
 348              	
 349              	
 350              	/*****************************
 351              	 send ANSI parameter value
 352              	 ANSI parameter values are 
 353              	 sent as ASCII charater 
 354              	 not as binary number.
 355              	 this routine 
 356              	 convert binary number to 
 357              	 ASCII send it.
 358              	 input: 
 359              	 	r0   parameter  
 360              	 output:
 361              	   none 
 362              	 use:
 363              	    r1   conversion 
 364              	    T1   digit counter 
 365              	***************************/
 366 0242 00BF     	    _FUNC send_parameter
 367 0244 2DE90201 	    push {r1,T1}
 368 0248 4FF00008 	    mov T1,#0
 369 024c 4FF00A01 	1:  mov r1,#10  
 370 0250 00B5FFF7 	    _CALL digit 
 370      15FF5DF8 
 370      04EB
 371 025a 08F10108 	    add T1,#1 
 372 025e 01B4     	    push {r0}
 373 0260 0846     	    mov r0,r1 
 374 0262 0040     	    ands r0,r0
 375 0264 F2D1     	    bne 1b 
 376 0266 01BC     	2:  pop {r0}
 377 0268 00B5FFF7 	    _CALL uart_putc  
 377      FEFF5DF8 
ARM GAS  terminal.s 			page 18


 377      04EB
 378 0272 B8F10108 	    subs T1,#1
 379 0276 F6D1     	    bne 2b 
 380 0278 BDE80201 		  pop {r1,T1}
 381 027c 7047     	    _RET 
 382              	
 383              	/**********************************
 384              	// move cursor left n character
 385              	// ANSI: ESC[PnD 
 386              	// 'Pn' est a numerical parameter
 387              	// specifying number of characters 
 388              	// displacement.
 389              	// input:
 390              	//   r0     character count
 391              	// output:
 392              	//   none
 393              	*********************************/
 394 027e 00BF     	    _FUNC move_left
 395 0280 80B1     	    cbz r0,9f   
 396 0282 00B5FFF7 		  _CALL  send_escape
 396      CCFF5DF8 
 396      04EB
 397 028c 00B5FFF7 		  _CALL  send_parameter 
 397      D9FF5DF8 
 397      04EB
 398 0296 4FF04400 		  mov r0,#'D' 
 399 029a 00B5FFF7 		  _CALL  uart_putc 
 399      FEFF5DF8 
 399      04EB
 400 02a4 7047     	9:	_RET	
 401              	
 402              	
 403              	/***********************************
 404              	// move cursor right n character 
 405              	// ANSI: ESC[PnC 
 406              	// input:
 407              	//   r0     character count
 408              	// output:
 409              	//   none
 410              	***********************************/
 411 02a6 00BF     	    _FUNC move_right
 412 02a8 80B1     	    cbz r0,9f 
 413 02aa 00B5FFF7 	    _CALL  send_escape
 413      B8FF5DF8 
 413      04EB
 414 02b4 00B5FFF7 	    _CALL  send_parameter 
 414      C5FF5DF8 
 414      04EB
 415 02be 4FF04300 	    mov r0,#'C' 
 416 02c2 00B5FFF7 	    _CALL  uart_putc 
 416      FEFF5DF8 
 416      04EB
 417 02cc 7047     	9:  _RET 
 418              	
 419              	/*********************************
 420              	// print n spaces on terminal
 421              	// input:
ARM GAS  terminal.s 			page 19


 422              	//  r0 		number of spaces 
 423              	// output:
 424              	//	none
 425              	// use:
 426              	     T1    counter  
 427              	********************************/
 428 02ce 00BF     	    _GBL_FUNC spaces
 429 02d0 4DF8048D 		  push {T1}
 430 02d4 50B1     	    cbz r0,9f 
 431 02d6 8046     	    mov T1,r0 
 432 02d8 4FF02000 	1:	mov r0,#SPACE 
 433 02dc 00B5FFF7 	    _CALL  uart_putc 
 433      FEFF5DF8 
 433      04EB
 434 02e6 B8F10108 	    subs T1,#1
 435 02ea F5D1     	    bne 1b 
 436 02ec 5DF8048B 	9:  pop {T1}
 437 02f0 7047     	  	_RET 
 438              	
 439              	
 440              	/*********************************
 441              	    insert_char 
 442              	// insert character in tib  
 443              	
 444              	// input:
 445              	//   r0      character to insert 
 446              	//   r1      line length
 447              	//   T1      insert position 
 448              	//   T2      line pointer 
 449              	// output:
 450              	//   r0       updated insertion point  
 451              	**********************************/
 452 02f2 00BF     	   _FUNC insert_char 
 453              	/*   
 454              	    ld (CHAR,sp),a 
 455              	    ld a,xh 
 456              		ld (IPOS,sp),a
 457              	    ld a,xl 
 458              	    ld (LLEN,sp),a  
 459              	    ldw x,y
 460              	    incw x 
 461              	    ld a,(LLEN,sp)
 462              	    sub a,(IPOS,sp)
 463              	    inc a 
 464              	    ld acc8,a 
 465              	    clr acc16
 466              	    _CALL  move
 467              	    ldw y,#tib 
 468              	    ld a,(IPOS,sp)
 469              	    ld acc8,a 
 470              	    addw y,acc16 
 471              	    ld a,(CHAR,sp)
 472              	    ld (y),a
 473              	    incw y  
 474              	    ld a,(IPOS,sp)
 475              	    _CALL  move_left
 476              	    _MOV32 r0,tib 
ARM GAS  terminal.s 			page 20


 477              	    _CALL  uart_puts
 478              	    ld a,(LLEN,sp)
 479              	    sub a,(IPOS,sp) 
 480              	    _CALL  move_left 
 481              	*/
 482 02f4 7047     		_RET 
 483              	
 484              	
 485              	/***************************************
 486              	// delete character under cursor
 487              	// input:
 488              	//   R0       line length   
 489              	//   R1      delete position
 490              	//   T1       line pointer 
 491              	**************************************/
 492 02f6 00BF     	    _FUNC delete_under
 493              	/*
 494              	    ld (LLEN,sp),a 
 495              	    ld a,xl 
 496              	    ld (CPOS,sp),a 
 497              	    ldw x,y // move destination
 498              	    incw y  // move source 
 499              	    ld a,(LLEN,sp)
 500              	    sub a,(CPOS,sp)
 501              	    inc a // move including zero at end.
 502              	    ld acc8,a 
 503              	    clr acc16 
 504              		_CALL  move 
 505              	    ldw y,#tib 
 506              	    ld a,(CPOS,sp)
 507              	    ld acc8,a 
 508              	    addw y,acc16 
 509              	    ldw x,y 
 510              	    _CALL  uart_puts 
 511              	    ld a,#SPACE  
 512              	    _CALL  uart_putc
 513              	    ld a,(LLEN,sp)
 514              	    sub a,(CPOS,sp)
 515              	    _CALL  move_left 
 516              	    dec (LLEN,sp)
 517              	*/
 518 02f8 7047     		_RET 
 519              	
 520              	/********************************
 521              	// send ANSI sequence to delete
 522              	// whole line. Cursor position
 523              	// is not updated.
 524              	// ANSI: ESC[2K
 525              	// input:
 526              	//   none
 527              	// output:
 528              	//   none 
 529              	   use:
 530              	     r0 
 531              	********************************/
 532 02fa 00BF     	    _FUNC delete_line
 533 02fc 01B4     	    push {r0}
ARM GAS  terminal.s 			page 21


 534 02fe 00B5FFF7 	    _CALL  send_escape
 534      8EFF5DF8 
 534      04EB
 535 0308 4FF03200 		mov r0,#'2'
 536 030c 00B5FFF7 		_CALL  uart_putc 
 536      FEFF5DF8 
 536      04EB
 537 0316 4FF04B00 		mov r0,#'K' 
 538 031a 00B5FFF7 		_CALL  uart_putc
 538      FEFF5DF8 
 538      04EB
 539 0324 00B5FFF7 	    _CALL  cursor_home 
 539      FEFF5DF8 
 539      04EB
 540 032e 01BC     		pop {r0}
 541 0330 7047     	    _RET 
 542              	
 543              	/*************************************
 544              	   cursor_x  
 545              	   send cursor at column n 
 546              	    input: 
 547              	        r0  n 
 548              	    output:
 549              	        none 
 550              	    use:
 551              	        none 
 552              	*************************************/
 553 0332 00BF     	    _GBL_FUNC cursor_x 
 554 0334 00B5FFF7 	    _CALL send_escape
 554      73FF5DF8 
 554      04EB
 555 033e 00B5FFF7 	    _CALL send_parameter
 555      80FF5DF8 
 555      04EB
 556 0348 4FF04700 	    mov r0,#'G' 
 557 034c 00B5FFF7 	    _CALL uart_putc 
 557      FEFF5DF8 
 557      04EB
 558 0356 7047     	    _RET 
 559              	
 560              	/*************************************
 561              	    cursor_home 
 562              	    send cursor at left position
 563              	  input:
 564              	    none 
 565              	  output:
 566              	    none 
 567              	  use:
 568              	    r0
 569              	*************************************/
 570              	    _GBL_FUNC cursor_home 
 571 0358 01B4     	    push {r0}
 572 035a 00B5FFF7 	    _CALL send_escape
 572      60FF5DF8 
 572      04EB
 573 0364 4FF04700 	    mov r0,#'G' 
 574 0368 00B5FFF7 	    _CALL uart_putc 
ARM GAS  terminal.s 			page 22


 574      FEFF5DF8 
 574      04EB
 575 0372 01BC     	    pop {r0}
 576 0374 7047     	    _RET 
 577              	
 578              	/************************************
 579              	    delete_right 
 580              	    send ANSI code to delete from 
 581              	    cursor to end of line 
 582              	************************************/
 583 0376 00BF     	    _FUNC delete_right 
 584 0378 00B5FFF7 	    _CALL send_escape 
 584      51FF5DF8 
 584      04EB
 585 0382 4FF03000 	    mov r0,#'0'
 586 0386 00B5FFF7 	    _CALL uart_putc 
 586      FEFF5DF8 
 586      04EB
 587 0390 4FF04B00 	    mov r0,#'K'
 588 0394 00B5FFF7 	    _CALL uart_putc 
 588      FEFF5DF8 
 588      04EB
 589 039e 7047     	    _RET 
 590              	
 591              	/************************************
 592              	   update_line 
 593              	   update edited line on display 
 594              	   input:
 595              	     r0    *line 
 596              	   output:
 597              	     none 
 598              	   use:
 599              	      none 
 600              	*************************************/
 601              	    _FUNC update_line 
 602 03a0 01B4     	    push {r0}
 603 03a2 1846     	    mov r0,r3 
 604 03a4 00B5FFF7 	    _CALL cursor_x
 604      FEFF5DF8 
 604      04EB
 605 03ae 00B5FFF7 	    _CALL delete_right
 605      E2FF5DF8 
 605      04EB
 606 03b8 01BC     	    pop {r0} 
 607 03ba 00B5FFF7 	    _CALL uart_puts
 607      FEFF5DF8 
 607      04EB
 608 03c4 7047     	    _RET 
 609              	
 610              	/*************************************
 611              	  readln 
 612              	  read a line of text from terminal
 613              	  CTRL_D delete line
 614              	  CTRL_E edit line#  
 615              	  CTRL_R edit last entered line
 616              	  CTRL_I insert mode 
 617              	  CTRL_O overwrite mode    
ARM GAS  terminal.s 			page 23


 618              	  LEFT_ARROW move cursor left 
 619              	  RIGHT_ARROW move cursor right
 620              	  HOME cursor at start of line 
 621              	  END  cursor at end of line  
 622              	  BS  delete character left of cursor
 623              	  DEL delete character at cursor    
 624              	  input:
 625              	    r0  *buffer
 626              	    r1  buffer size 
 627              	  output:
 628              	    r0  *buffer (asciz)  
 629              	    r1  line length  
 630              	  use:
 631              	    r2  cmove count
 632              	    r3  line start colon  
 633              	    r5 line length 
 634              	    r6 *buffer   
 635              	    r7  cursor position 
 636              	    T1  ovwr|insert flag 
 637              	    T2  buffer size -1 
 638              	*************************************/
 639 03c6 00BF     	  _GBL_FUNC readln
 640 03c8 2DE9EC03 	  push {r2,r3,r5,r6,r7,T1,T2}
 641 03cc 87EA0707 	  eor r7,r7  // cursor position 
 642 03d0 88EA0808 	  eor T1,T1 // overwrite mode 
 643 03d4 0646     	  mov r6,r0 // *buffer 
 644 03d6 A1F10109 	  sub T2,r1,#1  // buffer size -1
 645 03da 85EA0505 	  eor r5,r5  // line length 
 646 03de 80EA0000 	  eor r0,r0 // blinking block shape
 647 03e2 00B5FFF7 	  _CALL cursor_shape
 647      FEFF5DF8 
 647      04EB
 648 03ec 00B5FFF7 	  _CALL get_curpos
 648      FEFF5DF8 
 648      04EB
 649 03f6 0B46     	  mov r3,r1 
 650              	readln_loop:
 651 03f8 00B5FFF7 	  _CALL uart_getc 
 651      FEFF5DF8 
 651      04EB
 652 0402 0D28     	  cmp r0,#CR
 653 0404 00D1     	  bne 0f
 654 0406 3BE1     	  b readln_exit 
 655              	0:
 656 0408 0828     	  cmp r0,#BS 
 657 040a 2DD1     	  bne 2f 
 658              	//delete char. left  
 659 040c 3F40     	  ands r7,r7 
 660 040e F3D0     	  beq readln_loop 
 661 0410 AF42     	  cmp r7,r5 
 662 0412 1FD0     	  beq 1f
 663              	// in middle of line 
 664 0414 06EB0700 	  add r0,r6,r7 
 665 0418 A0F10101 	  sub r1,r0,#1 
 666 041c A5EB0702 	  sub r2,r5,r7 
 667 0420 00B5FFF7 	  _CALL cmove
 667      FEFF5DF8 
ARM GAS  terminal.s 			page 24


 667      04EB
 668 042a A5F10105 	  sub r5,#1 //line length 
 669 042e A7F10107 	  sub r7,#1 // cursor position
 670 0432 80EA0000 	  eor r0,r0
 671 0436 7055     	  strb r0,[r6,r5] 
 672 0438 3046     	  mov r0,r6
 673 043a 00B5FFF7 	  _CALL update_line 
 673      B0FF5DF8 
 673      04EB
 674 0444 07EB0300 	  add r0,r7,r3
 675 0448 00B5FFF7 	  _CALL cursor_x 
 675      FEFF5DF8 
 675      04EB
 676 0452 D1E7     	  b readln_loop       
 677              	1: // at end of line 
 678 0454 00B5FFF7 	  _CALL bksp 
 678      C1FE5DF8 
 678      04EB
 679 045e A7F10107 	  sub r7,#1
 680 0462 A5F10105 	  sub r5,#1
 681 0466 C7E7     	  b readln_loop 
 682 0468 0428     	2: cmp r0,#CTRL_D 
 683 046a 09D1     	   bne 3f 
 684              	// delete whole line  
 685 046c 00B5FFF7 	  _CALL delete_line  
 685      45FF5DF8 
 685      04EB
 686 0476 87EA0707 	  eor r7,r7   
 687 047a 85EA0505 	  eor r5,r5
 688 047e BBE7     	  b readln_loop 
 689 0480 0528     	3: cmp r0,#CTRL_E 
 690 0482 29D1     	  bne 3f 
 691 0484 3046     	  mov r0,r6 // buffer 
 692 0486 4FF00A01 	  mov r1,#10  
 693 048a 00B5FFF7 	  _CALL atoi
 693      FEFF5DF8 
 693      04EB
 694 0494 0028     	  cmp r0,#0 
 695 0496 AFD0     	  beq readln_loop 
 696 0498 0846     	  mov r0,r1 // line# 
 697 049a 00B5FFF7 	  _CALL search_lineno 
 697      FEFF5DF8 
 697      04EB
 698 04a4 0029     	  cmp r1,#0 // not found 
 699 04a6 A7D1     	  bne readln_loop 
 700 04a8 3146     	  mov r1,r6 
 701 04aa 00B5FFF7 	  _CALL decompile_line
 701      FEFF5DF8 
 701      04EB
 702 04b4 00B5FFF7 	  _CALL strlen 
 702      FEFF5DF8 
 702      04EB
 703 04be 0746     	  mov r7,r0 
 704 04c0 0546     	  mov r5,r0
 705 04c2 3046     	  mov r0,r6
 706 04c4 00B5FFF7 	  _CALL update_line
 706      6BFF5DF8 
ARM GAS  terminal.s 			page 25


 706      04EB
 707 04ce 03EB0700 	  add r0,r3,r7 
 708 04d2 00F10100 	  add r0,#1  
 709 04d6 8FE7     	  b readln_loop   
 710 04d8 1228     	3: cmp r0,#CTRL_R    
 711 04da 10D1     	  bne 3f 
 712              	// edit last entered line if  available 
 713 04dc 2D40     	  ands r5,r5 
 714 04de 8BD1     	  bne readln_loop
 715 04e0 3046     	  mov r0,r6 
 716 04e2 00B5FFF7 	  _CALL strlen
 716      FEFF5DF8 
 716      04EB
 717 04ec 0546     	  mov r5,r0
 718 04ee 0746     	  mov r7,r0 
 719 04f0 3046     	  mov r0,r6  
 720 04f2 00B5FFF7 	  _CALL uart_puts
 720      FEFF5DF8 
 720      04EB
 721 04fc 7CE7     	  b readln_loop
 722 04fe 0928     	3: cmp r0,#CTRL_I 
 723 0500 08D1     	   bne 3f
 724 0502 4FF00500 	   mov r0,#5
 725 0506 8046     	   mov T1,r0 
 726 0508 00B5FFF7 	   _CALL cursor_shape 
 726      FEFF5DF8 
 726      04EB
 727 0512 71E7     	   b readln_loop  
 728 0514 0F28     	3: cmp r0,#CTRL_O 
 729 0516 08D1     	   bne 3f 
 730 0518 4FF00000 	   mov r0,#0
 731 051c 8046     	   mov T1,r0   
 732 051e 00B5FFF7 	   _CALL cursor_shape
 732      FEFF5DF8 
 732      04EB
 733 0528 66E7     	   b readln_loop 
 734 052a 1B28     	3: cmp r0,#ESC 
 735 052c 5CD1     	   bne character  
 736 052e 00B5FFF7 	   _CALL get_escape
 736      66FD5DF8 
 736      04EB
 737 0538 8228     	   cmp r0,#HOME 
 738 053a 08D1     	   bne try_end
 739 053c 3846     	   mov r0,r7 
 740 053e 00B5FFF7 	   _call move_left 
 740      9EFE5DF8 
 740      04EB
 741 0548 87EA0707 	   eor r7,r7  
 742 054c 54E7     	   b readln_loop 
 743              	try_end:
 744 054e 8328     	   cmp r0,#END 
 745 0550 08D1     	   bne try_left 
 746 0552 A5EB0700 	   sub r0,r5,r7  
 747 0556 00B5FFF7 	   _CALL move_right  
 747      A6FE5DF8 
 747      04EB
 748 0560 2F46     	   mov r7,r5 
ARM GAS  terminal.s 			page 26


 749 0562 49E7     	   b readln_loop 
 750              	try_left: 
 751 0564 8028     	   cmp r0,#ARROW_LEFT
 752 0566 0CD1     	   bne try_right 
 753 0568 3F40     	   ands r7,r7 
 754 056a 3FF445AF 	   beq readln_loop
 755 056e 4FF00100 	   mov r0,#1 
 756 0572 00B5FFF7 	   _CALL move_left 
 756      84FE5DF8 
 756      04EB
 757 057c A7F10107 	   sub r7,#1
 758 0580 3AE7     	   b readln_loop
 759              	try_right:
 760 0582 8128     	   cmp r0,#ARROW_RIGHT 
 761 0584 0CD1     	   bne try_suprim 
 762 0586 AF42     	   cmp r7,r5
 763 0588 3FF436AF 	   beq readln_loop
 764 058c 07F10107 	   add r7,#1
 765 0590 4FF00100 	   mov r0,#1  
 766 0594 00B5FFF7 	   _CALL move_right  
 766      87FE5DF8 
 766      04EB
 767 059e 2BE7     	   b readln_loop 
 768              	try_suprim:
 769 05a0 8428     	   cmp r0,#SUP
 770 05a2 7FF429AF 	   bne readln_loop 
 771              	// delete character at cursor 
 772 05a6 AF42     	   cmp r7,r5
 773 05a8 3FF426AF 	   beq readln_loop 
 774 05ac 07EB0601 	   add r1,r7,r6 
 775 05b0 01F10100 	   add r0,r1,#1 
 776 05b4 A5EB0702 	   sub r2,r5,r7
 777 05b8 00B5FFF7 	   _CALL cmove 
 777      FEFF5DF8 
 777      04EB
 778 05c2 A5F10105 	   sub r5,#1 
 779 05c6 80EA0000 	   eor r0,r0 
 780 05ca 7055     	   strb r0,[r6,r5]
 781 05cc 3046     	   mov r0,r6 
 782 05ce 00B5FFF7 	   _CALL update_line
 782      E6FE5DF8 
 782      04EB
 783 05d8 07EB0300 	   add  r0,r7,r3 
 784 05dc 00B5FFF7 	   _CALL cursor_x 
 784      FEFF5DF8 
 784      04EB
 785 05e6 07E7     	   b readln_loop      
 786              	character:
 787 05e8 AF42     	   cmp r7,r5 
 788 05ea 39D0     	   beq 5f // cursor at eol 
 789              	// cursor in middle of line 
 790              	// action depend on edit mode 
 791 05ec 18EA0808 	  ands T1,T1  //check edit mode 
 792 05f0 25D0     	  beq 2f 
 793              	// insert mode
 794 05f2 A945     	  cmp T2,r5 
 795 05f4 3FF400AF 	  beq readln_loop // buffer full  
ARM GAS  terminal.s 			page 27


 796 05f8 05B4     	  push {r0,r2}
 797 05fa 06EB0700 	  add r0,r6,r7  // src 
 798 05fe 00F10101 	  add r1,r0,#1   // dest 
 799 0602 A5EB0702 	  sub r2,r5,r7  // move count 
 800 0606 00B5FFF7 	  _CALL cmove   
 800      FEFF5DF8 
 800      04EB
 801 0610 05BC     	  pop {r0,r2}
 802 0612 F055     	  strb r0,[r6,r7] 
 803 0614 05F10105 	  add r5,#1 
 804 0618 80EA0000 	  eor r0,r0 
 805 061c 7055     	  strb r0,[r6,r5]
 806 061e 3046     	  mov r0,r6   
 807 0620 00B5FFF7 	  _CALL update_line
 807      BDFE5DF8 
 807      04EB
 808 062a 07F10107 	  add r7,#1
 809 062e 07EB0300 	  add r0,r7,r3 
 810 0632 00B5FFF7 	  _CALL cursor_x  
 810      FEFF5DF8 
 810      04EB
 811 063c DCE6     	  b readln_loop   
 812              	2: // overwrite mode 
 813 063e F055     	  strb r0,[r6,r7]
 814 0640 3046     	  mov r0,r6 
 815 0642 00B5FFF7 	  _CALL update_line 
 815      ACFE5DF8 
 815      04EB
 816 064c 07F10107 	  add r7,#1
 817 0650 07EB0300 	  add r0,r7,r3
 818 0654 00B5FFF7 	  _CALL cursor_x 
 818      FEFF5DF8 
 818      04EB
 819 065e CBE6     	  b readln_loop 
 820              	5: // cursor at eol, mode doesn't matter 
 821 0660 CA45     	   cmp r10,T2 
 822 0662 00D4     	   bmi 6f 
 823 0664 C8E6     	   b readln_loop  // buffer full
 824              	6: // only accept char>=32  
 825 0666 2028     	   cmp r0,#SPACE 
 826 0668 3FF5C6AE 	   bmi readln_loop 
 827 066c F055     	   strb r0,[r6,r7] 
 828 066e 00B5FFF7 	   _CALL uart_putc
 828      FEFF5DF8 
 828      04EB
 829 0678 07F10107 	   add r7,#1
 830 067c 3D46     	   mov r5,r7
 831 067e BBE6     	   b readln_loop  
 832              	readln_exit:
 833 0680 00B5FFF7 	  _CALL uart_putc 
 833      FEFF5DF8 
 833      04EB
 834 068a 80EA0000 	  eor r0,r0 
 835 068e 7055     	  strb r0,[r6,r5]
 836 0690 2946     	  mov r1,r5  // line length
 837 0692 3046     	  mov r0,r6  // *buffer  
 838 0694 BDE8EC03 	  pop {r2,r3,r5,r6,r7,T1,T2}
ARM GAS  terminal.s 			page 28


 839 0698 7047     	  _RET 
 840              	
 841              	
 842              	/*******************************
 843              	    get_param 
 844              	    read ANSI parameter 
 845              	    input:
 846              	      none 
 847              	    output:
 848              	      r0   value 
 849              	    use:
 850              	      T1   temp
 851              	      T2   base 10  
 852              	*******************************/
 853 069a 00BF     	    _FUNC get_param
 854 069c 2DE90003 	    push {T1,T2}
 855 06a0 88EA0808 	    eor T1,T1 
 856 06a4 4FF00A09 	    mov T2,#10 
 857 06a8 00B5FFF7 	1:  _CALL uart_getc
 857      FEFF5DF8 
 857      04EB
 858 06b2 00B5FFF7 	    _CALL is_digit 
 858      FEFF5DF8 
 858      04EB
 859 06bc 03D1     	    bne 9f 
 860 06be 09FB08F8 	    mul T1,T2 
 861 06c2 8044     	    add T1,r0 
 862 06c4 F0E7     	    b 1b
 863              	9: 
 864 06c6 4046     	    mov r0,T1     
 865 06c8 BDE80003 	    pop {T1,T2}
 866 06cc 7047     	    _RET 
 867              	
 868              	/*******************************
 869              	    get_curpos 
 870              	    report cursor position 
 871              	  input:
 872              	    none 
 873              	  output:
 874              	    r0    row 
 875              	    r1    column
 876              	  use:
 877              	    r2
 878              	    r3 
 879              	*******************************/
 880 06ce 00BF     	    _GBL_FUNC get_curpos 
 881 06d0 0CB4     	    push {r2,r3}   
 882 06d2 00B5FFF7 	    _CALL uart_flush_queue 
 882      FEFF5DF8 
 882      04EB
 883 06dc 00B5FFF7 	    _CALL send_escape 
 883      9FFD5DF8 
 883      04EB
 884 06e6 4FF03600 	    mov r0,#'6'
 885 06ea 00B5FFF7 	    _CALL uart_putc
 885      FEFF5DF8 
 885      04EB
ARM GAS  terminal.s 			page 29


 886 06f4 4FF06E00 	    mov r0,#'n'
 887 06f8 00B5FFF7 	    _CALL uart_putc  
 887      FEFF5DF8 
 887      04EB
 888 0702 00B5FFF7 	    _CALL uart_getc 
 888      FEFF5DF8 
 888      04EB
 889 070c 1B28     	    cmp r0,#ESC 
 890 070e 13D1     	    bne 9f 
 891 0710 00B5FFF7 	    _CALL uart_getc 
 891      FEFF5DF8 
 891      04EB
 892 071a 5B28     	    cmp r0,#'[' 
 893 071c 0CD1     	    bne 9f 
 894 071e 00B5FFF7 	    _CALL get_param 
 894      BCFF5DF8 
 894      04EB
 895 0728 0246     	    mov r2,r0 
 896 072a 00B5FFF7 	    _CALL get_param 
 896      B6FF5DF8 
 896      04EB
 897 0734 0146     	    mov r1,r0 
 898 0736 1046     	    mov r0,r2 
 899 0738 0CBC     	9:  pop {r2,r3}
 900 073a 7047     	    _RET 
 901              	
 902              	/***********************************
 903              	    set_curpos y,x 
 904              	    set terminal cursor position
 905              	    input:
 906              	      r0  y 
 907              	      r1  x 
 908              	**********************************/
 909              	    _GBL_FUNC set_curpos 
 910 073c 00B5FFF7 	    _CALL send_escape
 910      6FFD5DF8 
 910      04EB
 911 0746 00B5FFF7 	    _CALL send_parameter
 911      7CFD5DF8 
 911      04EB
 912 0750 4FF03B00 	    mov r0,#';'
 913 0754 00B5FFF7 	    _CALL uart_putc 
 913      FEFF5DF8 
 913      04EB
 914 075e 0846     	    mov r0,r1 
 915 0760 00B5FFF7 	    _CALL send_parameter 
 915      6FFD5DF8 
 915      04EB
 916 076a 4FF04800 	    mov r0,#'H' 
 917 076e 00B5FFF7 	    _CALL uart_putc     
 917      FEFF5DF8 
 917      04EB
 918 0778 7047     	    _RET 
 919              	
 920              	/***********************************
 921              	    tabulation 
 922              	    set cursor column to next 
ARM GAS  terminal.s 			page 30


 923              	    tabulation stop    
 924              	**********************************/
 925 077a 00BF     	    _GBL_FUNC tabulation 
 926 077c 07B4     	    push {r0,r1,r2}
 927 077e 00B5FFF7 	    _CALL get_curpos 
 927      FEFF5DF8 
 927      04EB
 928 0788 A1F10100 	    sub r0,r1,#1
 929 078c 02B4     	    push {r1} 
 930 078e 616C     	    ldr r1,[UPP,#TAB_WIDTH]
 931 0790 00B5FFF7 	    _CALL modulo
 931      FEFF5DF8 
 931      04EB
 932 079a 606C     	    ldr r0,[UPP,#TAB_WIDTH]
 933 079c A0EB0100 	    sub r0,r1
 934 07a0 02BC     	    pop {r1}
 935 07a2 0144     	    add r1,r0
 936 07a4 5029     	    cmp r1,#80
 937 07a6 05DA     	    bge 2f  
 938 07a8 00B5FFF7 	    _CALL spaces
 938      FEFF5DF8 
 938      04EB
 939 07b2 04E0     	    b 9f 
 940 07b4 00B5FFF7 	2: _CALL cr 
 940      FEFF5DF8 
 940      04EB
 941 07be 07BC     	9:  pop {r0,r1,r2}
 942 07c0 7047     	    _RET 
 943              	
 944              	/********************************
 945              	    cr 
 946              	    send a carriage return 
 947              	    to terminal 
 948              	********************************/ 
 949 07c2 00BF     	    _GBL_FUNC cr 
 950 07c4 4FF00D00 	    mov r0,#CR 
 951 07c8 00B5FFF7 	    _CALL uart_putc 
 951      FEFF5DF8 
 951      04EB
 952 07d2 7047     	    _RET
 953              	
 954              	/********************************
 955              	    clear_screen
 956              	********************************/
 957              	    _GBL_FUNC clear_screen 
 958 07d4 4FF00100 	    mov r0,#1 
 959 07d8 4FF00101 	    mov r1,#1
 960 07dc 00B5FFF7 	    _CALL set_curpos
 960      FEFF5DF8 
 960      04EB
 961 07e6 00B5FFF7 	    _CALL send_escape 
 961      1AFD5DF8 
 961      04EB
 962 07f0 4FF04A00 	    mov r0,#'J' 
 963 07f4 00B5FFF7 	    _CALL uart_putc 
 963      FEFF5DF8 
 963      04EB
ARM GAS  terminal.s 			page 31


 964 07fe 70475400 	    _RET 
 964      0000
ARM GAS  terminal.s 			page 32


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:86     *ABS*:0000000040010000 AFIO_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 AFIO_EVCR
ARM GAS  terminal.s 			page 33


       stm32f103.inc:90     *ABS*:0000000000000004 AFIO_MAPR
       stm32f103.inc:91     *ABS*:0000000000000008 AFIO_EXTICR1
       stm32f103.inc:92     *ABS*:000000000000000c AFIO_EXTICR2
       stm32f103.inc:93     *ABS*:0000000000000010 AFIO_EXTICR3
       stm32f103.inc:94     *ABS*:0000000000000014 AFIO_EXTICR4
       stm32f103.inc:95     *ABS*:000000000000001c AFIO_MAPR2
       stm32f103.inc:98     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 USART_SR
       stm32f103.inc:101    *ABS*:0000000000000004 USART_DR
       stm32f103.inc:102    *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:103    *ABS*:000000000000000c USART_CR1
       stm32f103.inc:104    *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:105    *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:106    *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:109    *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:111    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:112    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:113    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:114    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:117    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:119    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:120    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:121    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:122    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:123    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:124    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:125    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:126    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:127    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:128    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:129    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:130    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:131    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:132    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:134    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:137    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:138    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:139    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:140    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:141    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:142    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:143    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:144    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:145    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:146    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:147    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:148    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:149    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:150    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:151    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:152    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:153    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:156    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:157    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:158    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:159    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:162    *ABS*:0000000040007000 PWR_CR_ADR
ARM GAS  terminal.s 			page 34


       stm32f103.inc:163    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:164    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:165    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:166    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:167    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:168    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:169    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:172    *ABS*:0000000040007004 PWR_CSR_ADR
       stm32f103.inc:173    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:174    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:175    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:176    *ABS*:0000000000000100 PWR_CSR_EWUP
       stm32f103.inc:179    *ABS*:0000000040002c00 WWDG_BASE_ADR
       stm32f103.inc:180    *ABS*:0000000000000000 WWDG_CR
       stm32f103.inc:181    *ABS*:0000000000000004 WWDG_CFR
       stm32f103.inc:182    *ABS*:0000000000000008 WWDG_SR
       stm32f103.inc:185    *ABS*:0000000040003000 IWDG_BASE_ADR
       stm32f103.inc:186    *ABS*:0000000000000000 IWDG_KR
       stm32f103.inc:187    *ABS*:0000000000000004 IWDG_PR
       stm32f103.inc:188    *ABS*:0000000000000008 IWDG_RLR
       stm32f103.inc:189    *ABS*:000000000000000c IWDG_SR
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
ARM GAS  terminal.s 			page 35


           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:26     *ABS*:0000000020004f00 DSTACK_TOP
      tbi_macros.inc:27     *ABS*:0000000020005000 RSTACK_TOP
      tbi_macros.inc:30     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:41     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:42     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:43     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:44     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:45     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:46     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:47     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:48     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:49     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:50     *ABS*:0000000000000009 TK_SEMIC
      tbi_macros.inc:51     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:52     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:53     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:54     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:55     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:56     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:57     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:58     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:59     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:60     *ABS*:0000000000000021 TK_DIV
ARM GAS  terminal.s 			page 36


      tbi_macros.inc:61     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:62     *ABS*:0000000000000040 TK_LBL
      tbi_macros.inc:70     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:71     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:72     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:73     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:74     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:75     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:77     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:78     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:79     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:80     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:81     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:82     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:87     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:88     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:89     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:90     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:91     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:92     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:93     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:94     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:95     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:96     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:97     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:98     *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:99     *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:100    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:101    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:102    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:103    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FSFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000068 VARS_SIZE
ARM GAS  terminal.s 			page 37


      tbi_macros.inc:157    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:158    *ABS*:00000000000000cc TRACE_LEVEL
      tbi_macros.inc:159    *ABS*:00000000000000d0 HERE
      tbi_macros.inc:160    *ABS*:00000000000000d0 BASIC_START
      tbi_macros.inc:163    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:164    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:165    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:166    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:167    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:168    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:169    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:171    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:173    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:174    *ABS*:0000000000007fff MAX_LINENO
          terminal.s:60     .text:0000000000000000 $t
          terminal.s:60     .text:0000000000000000 get_escape
          terminal.s:102    .text:0000000000000054 convert_table
                            *ABS*:0000000000000084 SUP
          terminal.s:96     *ABS*:0000000000000080 ARROW_LEFT
          terminal.s:97     *ABS*:0000000000000081 ARROW_RIGHT
          terminal.s:98     *ABS*:0000000000000082 HOME
          terminal.s:99     *ABS*:0000000000000083 END
          terminal.s:102    .text:0000000000000054 $d
          terminal.s:116    .text:0000000000000060 uart_puts
          terminal.s:116    .text:0000000000000060 $t
          terminal.s:138    .text:0000000000000080 digit
          terminal.s:167    .text:00000000000000ac itoa
          terminal.s:209    .text:0000000000000130 pad
          terminal.s:209    .text:0000000000000130 $d
          terminal.s:221    .text:0000000000000134 print_int
          terminal.s:221    .text:0000000000000134 $t
          terminal.s:236    .text:000000000000014c print_hex
          terminal.s:257    .text:000000000000018c digit_to_char
          terminal.s:277    .text:00000000000001a0 cursor_shape
          terminal.s:340    .text:0000000000000220 send_escape
          terminal.s:366    .text:0000000000000244 send_parameter
          terminal.s:297    .text:00000000000001dc bksp
          terminal.s:316    .text:0000000000000208 delete_nchar
          terminal.s:394    .text:0000000000000280 move_left
          terminal.s:411    .text:00000000000002a8 move_right
          terminal.s:428    .text:00000000000002d0 spaces
          terminal.s:452    .text:00000000000002f4 insert_char
          terminal.s:492    .text:00000000000002f8 delete_under
          terminal.s:532    .text:00000000000002fc delete_line
          terminal.s:570    .text:0000000000000358 cursor_home
          terminal.s:553    .text:0000000000000334 cursor_x
          terminal.s:583    .text:0000000000000378 delete_right
          terminal.s:601    .text:00000000000003a0 update_line
          terminal.s:639    .text:00000000000003c8 readln
          terminal.s:880    .text:00000000000006d0 get_curpos
          terminal.s:650    .text:00000000000003f8 readln_loop
          terminal.s:832    .text:0000000000000680 readln_exit
          terminal.s:786    .text:00000000000005e8 character
          terminal.s:743    .text:000000000000054e try_end
          terminal.s:750    .text:0000000000000564 try_left
          terminal.s:759    .text:0000000000000582 try_right
          terminal.s:768    .text:00000000000005a0 try_suprim
ARM GAS  terminal.s 			page 38


          terminal.s:853    .text:000000000000069c get_param
          terminal.s:909    .text:000000000000073c set_curpos
          terminal.s:925    .text:000000000000077c tabulation
          terminal.s:949    .text:00000000000007c4 cr
          terminal.s:957    .text:00000000000007d4 clear_screen
          terminal.s:964    .text:0000000000000800 $d

UNDEFINED SYMBOLS
uart_getc
uart_putc
_pad
cmove
atoi
search_lineno
decompile_line
strlen
is_digit
uart_flush_queue
modulo
