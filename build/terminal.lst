ARM GAS  terminal.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	//------------------------------
  20              	// This file is for functions 
  21              	// interfacing with VT100 terminal
  22              	// emulator.
  23              	// except for uart_getc and uart_putc which
  24              	// are in stm32-tbi.s 
  25              	// exported functions:
  26              	//   uart_puts 
  27              	//   readln 
  28              	//   spaces 
  29              	//   digit_to_char 
  30              	//------------------------------
  31              	
  32              	  .syntax unified
  33              	  .cpu cortex-m3
  34              	  .fpu softvfp
  35              	  .thumb
  36              	
  37              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
ARM GAS  terminal.s 			page 2


  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
ARM GAS  terminal.s 			page 3


  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
ARM GAS  terminal.s 			page 4


 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  38              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
ARM GAS  terminal.s 			page 5


  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  39              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
ARM GAS  terminal.s 			page 6


  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,5      // variable index 
  50              	  .equ TK_ARRAY,6     // array variable '@' 
  51              	  .equ TK_LPAREN,7     // left parenthesis '('
  52              	  .equ TK_RPAREN,8     // right parenthesis ')'
  53              	  .equ TK_COMMA,9     // item separator ',' 
  54              	  .equ TK_SHARP,0xa     // print colon width '#' 
  55              	  .equ TK_CMD,0xb      // BASIC command   
  56              	  .equ TK_IFUNC,0xc    // BASIC integer function
  57              	  .equ TK_CFUNC,0xd    // BASIC character function
  58              	  .equ TK_CONST,0xe    // BASIC constant 
  59              	  .equ TK_INTGR,0xf    // 32 bits integer 
  60              	  .equ TK_PLUS,0x10    // addition operator '+'
  61              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  62              	  .equ TK_MULT,0x20    // multiplication operator '*'
  63              	  .equ TK_DIV,0x21     // division operator '/'
  64              	  .equ TK_MOD,0x22     // modulo operator '%'
  65              	
  66              	// don't change these token values 
  67              	// values chosen to be used as a mask.
  68              	// bit 7   1 for dictionary words else 0 
  69              	// bits 6  always 0 
  70              	// bits 5:4 identify group 
  71              	// bits 3:0 token identifier inside group  
  72              	  .equ TK_GT,0x31      // relation operator '>'
  73              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  74              	  .equ TK_GE,0x33      // relation operator '>,'
ARM GAS  terminal.s 			page 7


  75              	  .equ TK_LT,0x34      // relation operator '<'
  76              	  .equ TK_LE,0x36      // relation operator '<,'
  77              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  78              	// token groups 
  79              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  80              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  81              	  .equ TK_GRP_ADD,0x10  // additive operators
  82              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  83              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  84              	  .equ CMD_END,2 
  85              	
  86              	//--------------------------------------
  87              	//   error codes 
  88              	//--------------------------------------
  89              	  .equ ERR_NONE,0
  90              	  .equ ERR_MEM_FULL,1 
  91              	  .equ ERR_SYNTAX,2
  92              	  .equ ERR_MATH_OVF,3
  93              	  .equ ERR_DIV0,4 
  94              	  .equ ERR_NO_LINE,5
  95              	  .equ ERR_RUN_ONLY,6
  96              	  .equ ERR_CMD_ONLY,7
  97              	  .equ ERR_DUPLICATE,8
  98              	  .equ ERR_NOT_FILE,9
  99              	  .equ ERR_BAD_VALUE,10
 100              	  .equ ERR_NO_ACCESS,11
 101              	  .equ ERR_NO_DATA,12 
 102              	  .equ ERR_NO_PROG,13
 103              	  .equ ERR_NO_FSPACE,14
 104              	  .equ ERR_BUF_FULL,15
 105              	
 106              	//--------------------------------------
 107              	//   assembler flags 
 108              	//-------------------------------------
 109              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 110              	
 111              	.equ CELL_SIZE,4 
 112              	
 113              	
 114              	//-------------------------------
 115              	//  macros used to help debugging
 116              	//-------------------------------
 117              	  .equ DEBUG,0
 118              	
 119              	    UPP .req r4  // base address system variables 
 120              	    VADR .req r5  // address FOR loop variable 
 121              	    LIMIT .req r6   // LOOP limit 
 122              	    INCR  .req  r7  // LOOP increment 
 123              	    T1  .req r8     // temporary register 
 124              	    T2  .req r9     // temporary register 
 125              	    IN  .req r10    //  index in text line or token list 
 126              	    BPTR .req r11   //  buffer address or BASIC line address 
 127              	    DSP  .req r12   //  parameter stack pointer 
 128              	
 129              	/***************************
 130              	  SYSTEM variables offset 
 131              	  from UPP  
ARM GAS  terminal.s 			page 8


 132              	***************************/ 
 133              	
 134              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 135              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 136              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 137              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 138              	  .equ DATA,DATAPTR+4 // index to next data item 
 139              	  .equ DATALEN, DATA+4 // length of data line 
 140              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 141              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 142              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 143              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 144              	  .equ FSPTR,SEED+4 //  pointer used by file system
 145              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 146              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 147              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 148              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 149              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 150              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 151              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 152              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 153              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 154              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 155              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 156              	  .equ CELLL,4 // size of integer 
 157              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 158              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 159              	
 160              	/* flags used by BASIC interpreter */ 
 161              		.equ FRUN,0 // programm running
 162              		.equ FTRAP,1 // inside trap handler 
 163              		.equ FLOOP,2 // FOR loop in preparation 
 164              		.equ FSLEEP,3 // in halt mode SLEEP 
 165              		.equ FBREAK,4 // break point flag 
 166              		.equ FCOMP,5  // compiling flags 
 167              		.equ FAUTORUN,6// auto start program running 
 168              	
 169              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 170              	  
 171              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 172              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 173              	
 174              	/***********************************************
 175              	*       MACROS
 176              	***********************************************/
 177              		.macro _CALL fn /* low level routine call */ 
 178              	 	PUSH {LR}
 179              		BL \fn  
 180              	  POP {LR}
 181              		.endm
 182              		
 183              		.macro	_RET /* return from subroutine */
 184              		BX	LR
 185              		.endm
 186              	
 187              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 188              		MOV \REG, #\LITERAL&0xffff
ARM GAS  terminal.s 			page 9


 189              		MOVT \REG, #\LITERAL>>16
 190              		.endm
 191              	
 192              	// local function header 
 193              	  .macro _FUNC label 
 194              	  .p2align 2 
 195              	  .type \label, %function  
 196              	\label:
 197              	  .endm 
 198              	
 199              	// global function header 
 200              	  .macro _GBL_FUNC label 
 201              	  .global \label 
 202              	  _FUNC \label 
 203              	  .endm 
 204              	
 205              	
 206              	/********************************
 207              	    dictionary structure
 208              	------------------------------
 209              	 format:
 210              	   link:    
 211              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 212              	   cmd_name: 31 characters max 
 213              	   cmd_index: 2 bytes 
 214              	**********************************/
 215              		.macro _dict_entry tok_type,name,cmd_idx 
 216              	  .word LINK 
 217              	  .word \cmd_idx 
 218              		.word \tok_type  	
 219              		.equ LINK,.
 220              		.asciz "\name"
 221              		.p2align 2 
 222              		.endm 
 223              	
 224              	  // pop parameter in register 
 225              	  .macro _POP  reg 
 226              	  ldmia  DSP!,{\reg}
 227              	  .endm 
 228              	
 229              	  // push register on parameter stack 
 230              	  .macro _PUSH reg 
 231              	  stmdb DSP!,{\reg}
 232              	  .endm 
  40              	
  41              	
  42              	    .section .text, "ax", %progbits 
  43              	
  44              	
  45              	/*********************************
  46              	// receive ANSI ESC 
  47              	// sequence and convert it
  48              	// to a single character code 
  49              	// in range {128..255}
  50              	// This is called after receiving 
  51              	// ESC character. 
  52              	// ignored sequence return 0 
ARM GAS  terminal.s 			page 10


  53              	  input:
  54              	    none
  55              	  output:
  56              	    r0    converted character 
  57              	  use: 
  58              	    r2
  59              	***********************************/
  60              	    _FUNC get_escape
  61 0000 04B4     	    push {r2}
  62 0002 00B5FFF7 	    _CALL uart_getc 
  62      FEFF5DF8 
  62      04EB
  63 000c 5B28     	    cmp r0,#'[ // this character is expected after ESC 
  64 000e 03D0     	    beq 1f
  65 0010 80EA0000 	0:  eor r0,r0
  66 0014 04BC     	    pop {r2}
  67 0016 7047     	    _RET
  68 0018 00B5FFF7 	1: _CALL  uart_getc 
  68      FEFF5DF8 
  68      04EB
  69 0022 DFF8D025 	    ldr r2,=convert_table
  70              	2:
  71 0026 1178     	    ldrb r1,[r2]
  72 0028 0940     	    ands r1,r1 
  73 002a F1D0     	    beq 0b 
  74 002c 8842     	    cmp r0,r1 
  75 002e 02D0     	    beq 4f
  76 0030 02F10202 	    add r2,#2
  77 0034 F7E7     	    b 2b
  78 0036 02F10102 	4:  add r2,#1  
  79 003a 1078     	    ldrb r0,[r2]
  80 003c B0F1840F 	    cmp r0,#SUP
  81 0040 06D1     	    bne 5f
  82 0042 01B4     	    push {r0}  
  83 0044 00B5FFF7 	    _CALL  uart_getc
  83      FEFF5DF8 
  83      04EB
  84 004e 01BC     	    pop {r0}
  85              	5:
  86 0050 04BC     	    pop {r2}
  87 0052 7047     	    _RET 
  88              	
  89              	//-----------------------------
  90              	//  constants replacing 
  91              	//  ANSI sequence received 
  92              	//  from terminal.
  93              	//  These are the ANSI sequences
  94              	//  accepted by function readln
  95              	//------------------------------
  96              	    .equ ARROW_LEFT,128
  97              	    .equ ARROW_RIGHT,129
  98              	    .equ HOME,130
  99              	    .equ END,131
 100              	    .equ SUP,132 
 101              	
 102 0054 43814480 	convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',END,'3',SUP,0,0
 102      48824683 
ARM GAS  terminal.s 			page 11


 102      33840000 
 103              	
 104              	/******************************
 105              	    uart_puts 
 106              	    print zero terminate string 
 107              	 
 108              	  input:
 109              	    r0  *asciz 
 110              	  output:
 111              	    none 
 112              	  use:
 113              	    r0  char to send 
 114              	    T1  *asciz 
 115              	******************************/
 116              	    _GBL_FUNC uart_puts 
 117 0060 4DF8048D 	    push {T1}
 118 0064 8046     	    mov T1,r0 
 119 0066 18F8010B 	1:  ldrb r0,[T1],#1
 120 006a 28B1     	    cbz r0,9f 
 121 006c 00B5FFF7 	    _CALL uart_putc 
 121      FEFF5DF8 
 121      04EB
 122 0076 F6E7     	    b 1b 
 123 0078 5DF8048B 	9:  pop {T1}
 124 007c 7047     	    _RET 
 125              	
 126              	/***********************************
 127              	   digit  
 128              	   convert least digit of uint32 to ASCII 
 129              	    input:
 130              	        r0    uint32
 131              	        r1    base   
 132              	    output:
 133              	        r0    r0%base+'0'  
 134              	        r1    quotient 
 135              	    use:
 136              	        T1 
 137              	***********************************/
 138 007e 00BF     	    _FUNC digit
 139 0080 4DF8048D 	    push {T1}
 140 0084 01B4     	    push {r0}
 141 0086 8846     	    mov T1,r1  
 142 0088 B0FBF8F0 	    udiv r0,T1
 143 008c 0146     	    mov r1,r0  
 144 008e 08FB00F0 	    mul  r0,T1 
 145 0092 5DF8048B 	    pop {T1}
 146 0096 A8EB0000 	    sub r0,T1,r0
 147 009a 0A28     	    cmp r0,#10  
 148 009c 01D4     	    bmi 1f 
 149 009e 00F10700 	    add r0,#7
 150 00a2 00F13000 	1:  add r0,#'0'  
 151 00a6 5DF8048B 	    pop {T1}
 152 00aa 7047     	    _RET 
 153              	
 154              	/**********************************
 155              	    itoa 
 156              	    convert integer to string
ARM GAS  terminal.s 			page 12


 157              	    input:
 158              	      r0   integer 
 159              	      r1   base 
 160              	    output:
 161              	      r0   *string 
 162              	    use: 
 163              	      r7   integer 
 164              	      T1   base 
 165              	      T2   *pad 
 166              	*********************************/ 
 167              	    _FUNC itoa
 168 00ac 2DE98003 	    push {r7,T1,T2}
 169 00b0 0746     	    mov r7,r0
 170 00b2 8846     	    mov T1,r1  
 171 00b4 DFF85A90 	    ldr T2,pad 
 172 00b8 09F18009 	    add T2,#PAD_SIZE 
 173 00bc 80EA0000 	    eor r0,r0 
 174 00c0 09F8010D 	    strb r0,[T2,#-1]!
 175 00c4 00F12000 	    add r0,#SPACE 
 176 00c8 09F8010D 	    strb r0,[T2,#-1]!
 177 00cc 80EA0000 	    eor r0,r0 
 178 00d0 B8F10A0F 	    cmp T1,#10 
 179 00d4 04D1     	    bne 0f 
 180 00d6 17F00040 	    ands r0,r7,#(1<<31)
 181 00da 01D0     	    beq 0f 
 182 00dc C7F10007 	    rsb r7,#0 
 183 00e0 01B4     	0:  push {r0}
 184 00e2 3846     	1:  mov r0,r7 
 185 00e4 4146     	    mov r1,T1 
 186 00e6 00B5FFF7 	    _CALL digit 
 186      CAFF5DF8 
 186      04EB
 187 00f0 09F8010D 	    strb r0,[T2,#-1]!
 188 00f4 0940     	    ands r1,r1 
 189 00f6 01D0     	    beq  2f   
 190 00f8 0F46     	    mov r7,r1 
 191 00fa F2E7     	    b 1b 
 192 00fc 01BC     	2:  pop {r0} 
 193 00fe 0040     	    ands r0,r0 
 194 0100 03D0     	    beq 3f 
 195 0102 4FF02D00 	    mov r0,#'-'
 196 0106 09F8010D 	    strb r0,[T2,#-1]!
 197 010a 4846     	3:  mov r0,T2 
 198 010c BDE88003 	    pop {r7,T1,T2} 
 199 0110 7047     	    _RET  
 200 0112 00000000 	pad: .word _pad 
 201              	
 202              	/*****************************
 203              	    print_int 
 204              	  input:
 205              	    r0   integer to print 
 206              	    r1   conversion base 
 207              	  output:
 208              	    none 
 209              	  use:
 210              	    none 
 211              	*****************************/
ARM GAS  terminal.s 			page 13


 212 0116 00BF     	    _GBL_FUNC print_int 
 213 0118 00B5FFF7 	    _CALL itoa
 213      C7FF5DF8 
 213      04EB
 214 0122 00B5FFF7 	    _CALL uart_puts
 214      FEFF5DF8 
 214      04EB
 215 012c 7047     	    _RET 
 216              	
 217              	/*****************************
 218              	    cursor_shape 
 219              	    change cursor shape 
 220              	
 221              	  input:
 222              	    r0      shape {0..6}
 223              	  output:
 224              	    none 
 225              	  use:
 226              	    T1    shape
 227              	*******************************/
 228 012e 00BF     	    _GBL_FUNC cursor_shape
 229 0130 4DF8048D 	    push {T1}
 230 0134 00B500F0 	    _CALL send_escape
 230      3BF85DF8 
 230      04EB
 231 013e 00B500F0 	    _CALL send_parameter 
 231      48F85DF8 
 231      04EB
 232 0148 4FF02000 	    mov r0,#SPACE 
 233 014c 00B5FFF7 	    _CALL uart_putc 
 233      FEFF5DF8 
 233      04EB
 234 0156 4FF07100 	    mov r0,#'q' 
 235 015a 00B5FFF7 	    _CALL uart_putc 
 235      FEFF5DF8 
 235      04EB
 236 0164 5DF8048B 	    pop {T1}
 237 0168 7047     	    _RET 
 238              	
 239              	
 240              	//---------------------------
 241              	// delete character at left 
 242              	// of cursor on terminal 
 243              	// input:
 244              	//   none 
 245              	// output:
 246              	//	none 
 247              	//---------------------------
 248 016a 00BF     	    _FUNC bksp
 249 016c 4FF00800 		mov r0,#BS 
 250 0170 00B5FFF7 		_CALL  uart_putc 
 250      FEFF5DF8 
 250      04EB
 251 017a 4FF02000 		mov r0,#SPACE 
 252 017e 00B5FFF7 		_CALL  uart_putc 
 252      FEFF5DF8 
 252      04EB
ARM GAS  terminal.s 			page 14


 253 0188 4FF00800 		mov r0,#BS 
 254 018c 00B5FFF7 		_CALL  uart_putc 
 254      FEFF5DF8 
 254      04EB
 255 0196 7047     		_RET 
 256              	
 257              	//---------------------------
 258              	// delete n character left of cursor 
 259              	// at terminal.
 260              	// input: 
 261              	//   r0   number of characters to delete.
 262              	// output:
 263              	//    none
 264              	// use:
 265              	//   r2   count  
 266              	//--------------------------	
 267              	    _FUNC delete_nchar
 268 0198 48B1     		cbz r0,2f 
 269 019a 04B4     	    push {r2}
 270 019c 0246     	    mov r2,r0  
 271              	1:	
 272 019e 00B5FFF7 	    _CALL  bksp 
 272      E4FF5DF8 
 272      04EB
 273 01a8 013A     	    subs r2,#1 
 274 01aa F8D1     		bne 1b 
 275 01ac 04BC     	    pop {r2}
 276 01ae 7047     	2:	_RET
 277              	
 278              	
 279              	//--------------------------
 280              	// send ANSI escape sequence
 281              	// ANSI: ESC[
 282              	// note: ESC is ASCII 27
 283              	//       [   is ASCII 91 
 284              	// input:
 285              	//      none 
 286              	// output:
 287              	//      none 
 288              	// use:
 289              	//      r0 
 290              	//-------------------------- 
 291              	    _FUNC send_escape
 292 01b0 01B4     		push {r0}
 293 01b2 4FF01B00 	    mov r0,#ESC 
 294 01b6 00B5FFF7 		_CALL  uart_putc 
 294      FEFF5DF8 
 294      04EB
 295 01c0 4FF05B00 		mov r0,#'['
 296 01c4 00B5FFF7 		_CALL  uart_putc 
 296      FEFF5DF8 
 296      04EB
 297 01ce 01BC     		pop {r0}
 298 01d0 7047     	    _RET 
 299              	
 300              	
 301              	/*****************************
ARM GAS  terminal.s 			page 15


 302              	 send ANSI parameter value
 303              	 ANSI parameter values are 
 304              	 sent as ASCII charater 
 305              	 not as binary number.
 306              	 this routine 
 307              	 convert binary number to 
 308              	 ASCII send it.
 309              	 input: 
 310              	 	r0   parameter  
 311              	 output:
 312              	   none 
 313              	 use:
 314              	    T1   digit counter 
 315              	***************************/
 316 01d2 00BF     	    _FUNC send_parameter
 317 01d4 4DF8048D 	    push {T1}
 318 01d8 4FF00008 	    mov T1,#0
 319 01dc 4FF00A01 	1:  mov r1,#10  
 320 01e0 00B5FFF7 	    _CALL digit 
 320      4DFF5DF8 
 320      04EB
 321 01ea 08F10108 	    add T1,#1 
 322 01ee 01B4     	    push {r0}
 323 01f0 0846     	    mov r0,r1 
 324 01f2 0040     	    ands r0,r0
 325 01f4 F2D1     	    bne 1b 
 326 01f6 01BC     	2:  pop {r0}
 327 01f8 00B5FFF7 	    _CALL uart_putc  
 327      FEFF5DF8 
 327      04EB
 328 0202 B8F10108 	    subs T1,#1
 329 0206 F6D1     	    bne 2b 
 330 0208 5DF8048B 		pop {T1}
 331 020c 7047     	    _RET 
 332              	
 333              	/**********************************
 334              	// move cursor left n character
 335              	// ANSI: ESC[PnD 
 336              	// 'Pn' est a numerical parameter
 337              	// specifying number of characters 
 338              	// displacement.
 339              	// input:
 340              	//   r0     character count
 341              	// output:
 342              	//   none
 343              	*********************************/
 344 020e 00BF     	    _FUNC move_left
 345 0210 00B5FFF7 		_CALL  send_escape
 345      CDFF5DF8 
 345      04EB
 346 021a 00B5FFF7 		_CALL  send_parameter 
 346      DAFF5DF8 
 346      04EB
 347 0224 4FF04400 		mov r0,#'D' 
 348 0228 00B5FFF7 		_CALL  uart_putc 
 348      FEFF5DF8 
 348      04EB
ARM GAS  terminal.s 			page 16


 349 0232 7047     		_RET	
 350              	
 351              	
 352              	/***********************************
 353              	// move cursor right n character 
 354              	// ANSI: ESC[PnC 
 355              	// input:
 356              	//   r0     character count
 357              	// output:
 358              	//   none
 359              	***********************************/
 360              	    _FUNC move_right
 361 0234 00B5FFF7 		_CALL  send_escape
 361      BBFF5DF8 
 361      04EB
 362 023e 00B5FFF7 		_CALL  send_parameter 
 362      C8FF5DF8 
 362      04EB
 363 0248 4FF04300 		mov r0,#'C' 
 364 024c 00B5FFF7 		_CALL  uart_putc 
 364      FEFF5DF8 
 364      04EB
 365 0256 7047     		_RET 
 366              	
 367              	/*********************************
 368              	// print n spaces on terminal
 369              	// input:
 370              	//  r0 		number of spaces 
 371              	// output:
 372              	//	none
 373              	// use:
 374              	     T1    counter  
 375              	********************************/
 376              	    _GBL_FUNC spaces
 377 0258 4DF8048D 		push {T1}
 378 025c 50B1     	    cbz r0,9f 
 379 025e 8046     	    mov T1,r0 
 380 0260 4FF02000 	1:	mov r0,#SPACE 
 381 0264 00B5FFF7 		_CALL  uart_putc 
 381      FEFF5DF8 
 381      04EB
 382 026e B8F10108 		subs T1,#1
 383 0272 F5D1     		bne 1b 
 384 0274 5DF8048B 	9:  pop {T1}
 385 0278 7047     		_RET 
 386              	
 387              	
 388              	/*********************************
 389              	    insert_char 
 390              	// insert character in tib  
 391              	
 392              	// input:
 393              	//   r0      character to insert 
 394              	//   r1      line length
 395              	//   T1      insert position 
 396              	//   T2      line pointer 
 397              	// output:
ARM GAS  terminal.s 			page 17


 398              	//   r0       updated insertion point  
 399              	**********************************/
 400 027a 00BF     	   _FUNC insert_char 
 401              	/*   
 402              	    ld (CHAR,sp),a 
 403              	    ld a,xh 
 404              		ld (IPOS,sp),a
 405              	    ld a,xl 
 406              	    ld (LLEN,sp),a  
 407              	    ldw x,y
 408              	    incw x 
 409              	    ld a,(LLEN,sp)
 410              	    sub a,(IPOS,sp)
 411              	    inc a 
 412              	    ld acc8,a 
 413              	    clr acc16
 414              	    _CALL  move
 415              	    ldw y,#tib 
 416              	    ld a,(IPOS,sp)
 417              	    ld acc8,a 
 418              	    addw y,acc16 
 419              	    ld a,(CHAR,sp)
 420              	    ld (y),a
 421              	    incw y  
 422              	    ld a,(IPOS,sp)
 423              	    _CALL  move_left
 424              	    _MOV32 r0,tib 
 425              	    _CALL  uart_puts
 426              	    ld a,(LLEN,sp)
 427              	    sub a,(IPOS,sp) 
 428              	    _CALL  move_left 
 429              	*/
 430 027c 7047     		_RET 
 431              	
 432              	
 433              	/***************************************
 434              	// delete character under cursor
 435              	// input:
 436              	//   R0       line length   
 437              	//   R1      delete position
 438              	//   T1       line pointer 
 439              	**************************************/
 440 027e 00BF     	    _FUNC delete_under
 441              	/*
 442              	    ld (LLEN,sp),a 
 443              	    ld a,xl 
 444              	    ld (CPOS,sp),a 
 445              	    ldw x,y // move destination
 446              	    incw y  // move source 
 447              	    ld a,(LLEN,sp)
 448              	    sub a,(CPOS,sp)
 449              	    inc a // move including zero at end.
 450              	    ld acc8,a 
 451              	    clr acc16 
 452              		_CALL  move 
 453              	    ldw y,#tib 
 454              	    ld a,(CPOS,sp)
ARM GAS  terminal.s 			page 18


 455              	    ld acc8,a 
 456              	    addw y,acc16 
 457              	    ldw x,y 
 458              	    _CALL  uart_puts 
 459              	    ld a,#SPACE  
 460              	    _CALL  uart_putc
 461              	    ld a,(LLEN,sp)
 462              	    sub a,(CPOS,sp)
 463              	    _CALL  move_left 
 464              	    dec (LLEN,sp)
 465              	*/
 466 0280 7047     		_RET 
 467              	
 468              	/********************************
 469              	// send ANSI sequence to delete
 470              	// whole line. Cursor position
 471              	// is not updated.
 472              	// ANSI: ESC[2K
 473              	// input:
 474              	//   none
 475              	// output:
 476              	//   none 
 477              	   use:
 478              	     r0 
 479              	********************************/
 480 0282 00BF     	    _FUNC delete_line
 481 0284 01B4     	    push {r0}
 482 0286 00B5FFF7 	    _CALL  send_escape
 482      92FF5DF8 
 482      04EB
 483 0290 4FF03200 		mov r0,#'2'
 484 0294 00B5FFF7 		_CALL  uart_putc 
 484      FEFF5DF8 
 484      04EB
 485 029e 4FF04B00 		mov r0,#'K' 
 486 02a2 00B5FFF7 		_CALL  uart_putc
 486      FEFF5DF8 
 486      04EB
 487 02ac 00B5FFF7 	    _CALL  cursor_home 
 487      FEFF5DF8 
 487      04EB
 488 02b6 01BC     		pop {r0}
 489 02b8 7047     	    _RET 
 490              	
 491              	/*************************************
 492              	   cursor_x  
 493              	   send cursor at column n 
 494              	    input: 
 495              	        r0  n 
 496              	    output:
 497              	        none 
 498              	    use:
 499              	        none 
 500              	*************************************/
 501 02ba 00BF     	    _GBL_FUNC cursor_x 
 502 02bc 00B5FFF7 	    _CALL send_escape
 502      77FF5DF8 
ARM GAS  terminal.s 			page 19


 502      04EB
 503 02c6 00B5FFF7 	    _CALL send_parameter
 503      84FF5DF8 
 503      04EB
 504 02d0 4FF04700 	    mov r0,#'G' 
 505 02d4 00B5FFF7 	    _CALL uart_putc 
 505      FEFF5DF8 
 505      04EB
 506 02de 7047     	    _RET 
 507              	
 508              	/*************************************
 509              	    cursor_home 
 510              	    send cursor at left position
 511              	  input:
 512              	    none 
 513              	  output:
 514              	    none 
 515              	  use:
 516              	    r0
 517              	*************************************/
 518              	    _GBL_FUNC cursor_home 
 519 02e0 01B4     	    push {r0}
 520 02e2 00B5FFF7 	    _CALL send_escape
 520      64FF5DF8 
 520      04EB
 521 02ec 4FF04700 	    mov r0,#'G' 
 522 02f0 00B5FFF7 	    _CALL uart_putc 
 522      FEFF5DF8 
 522      04EB
 523 02fa 01BC     	    pop {r0}
 524 02fc 7047     	    _RET 
 525              	
 526              	/************************************
 527              	   update_line 
 528              	   update edited line on display 
 529              	   input:
 530              	     r0    *line 
 531              	   output:
 532              	     none 
 533              	   use:
 534              	      none 
 535              	*************************************/
 536 02fe 00BF     	    _FUNC update_line 
 537 0300 00B5FFF7 	    _CALL delete_line
 537      BFFF5DF8 
 537      04EB
 538 030a 00B5FFF7 	    _CALL uart_puts
 538      FEFF5DF8 
 538      04EB
 539 0314 7047     	    _RET 
 540              	
 541              	/*************************************
 542              	  readln 
 543              	  read a line of text from terminal
 544              	  CTRL_D delete line 
 545              	  CTRL_R edit last entered line
 546              	  CTRL_O toggle between overwrite|insert   
ARM GAS  terminal.s 			page 20


 547              	  LEFT_ARROW move cursor left 
 548              	  RIGHT_ARROW move cursor right
 549              	  HOME cursor at start of line 
 550              	  END  cursor at end of line  
 551              	  BS  delete character left of cursor 
 552              	  input:
 553              	    r0  *buffer
 554              	    r1  buffer size 
 555              	  output:
 556              	    r0  *buffer (asciz)  
 557              	    r1  line length  
 558              	  use:
 559              	    r7  cursor position 
 560              	    T1  ovwr|insert flag 
 561              	    T2  buffer size -1 
 562              	    r10 line length 
 563              	    r11 *buffer   
 564              	*************************************/
 565 0316 00BF     	  _GBL_FUNC readln
 566 0318 2DE9800F 	  push {r7,T1,T2,r10,r11}
 567 031c 87EA0707 	  eor r7,r7  // cursor position 
 568 0320 88EA0808 	  eor T1,T1 // overwrite mode 
 569 0324 8346     	  mov r11,r0 
 570 0326 A1F10109 	  sub T2,r1,#1  // buffer size -1
 571 032a 8AEA0A0A 	  eor r10,r10  // 0 line length 
 572 032e 80EA0000 	  eor r0,r0
 573 0332 0BF80900 	  strb r0,[r11,T2]  
 574 0336 00B5FFF7 	  _CALL cursor_shape
 574      FEFF5DF8 
 574      04EB
 575              	readln_loop:
 576 0340 00B5FFF7 	  _CALL uart_getc 
 576      FEFF5DF8 
 576      04EB
 577 034a 0D28     	  cmp r0,#CR
 578 034c 00D1     	  bne 0f
 579 034e 18E1     	  b readln_exit 
 580              	0:
 581 0350 0828     	  cmp r0,#BS 
 582 0352 32D1     	  bne 2f 
 583              	//delete char. left  
 584 0354 3F40     	  ands r7,r7 
 585 0356 F3D0     	  beq readln_loop 
 586 0358 5745     	  cmp r7,r10 
 587 035a 24D0     	  beq 1f
 588              	// in mol 
 589 035c 0BEB0700 	  add r0,r11,r7 
 590 0360 A0F10101 	  sub r1,r0,#1 
 591 0364 4DF8048D 	  push {T1}
 592 0368 AAEB0708 	  sub T1,r10,r7 
 593 036c 00B5FFF7 	  _CALL cmove
 593      FEFF5DF8 
 593      04EB
 594 0376 5DF8048B 	  pop {T1} 
 595 037a AAF1010A 	  sub r10,#1 
 596 037e A7F10107 	  sub r7,#1
 597 0382 80EA0000 	  eor r0,r0
ARM GAS  terminal.s 			page 21


 598 0386 0BF80A00 	  strb r0,[r11,r10] 
 599 038a 5846     	  mov r0,r11
 600 038c 00B5FFF7 	  _CALL update_line 
 600      B7FF5DF8 
 600      04EB
 601 0396 07F10100 	  add r0,r7,#1 
 602 039a 00B5FFF7 	  _CALL cursor_x 
 602      FEFF5DF8 
 602      04EB
 603 03a4 CCE7     	  b readln_loop       
 604              	1: // at eol 
 605 03a6 00B5FFF7 	  _CALL bksp 
 605      E0FE5DF8 
 605      04EB
 606 03b0 A7F10107 	  sub r7,#1
 607 03b4 AAF1010A 	  sub r10,#1
 608 03b8 C2E7     	  b readln_loop 
 609 03ba 0428     	2: cmp r0,#CTRL_D 
 610 03bc 09D1     	   bne 3f 
 611              	// delete whole line  
 612 03be 00B5FFF7 	  _CALL delete_line  
 612      60FF5DF8 
 612      04EB
 613 03c8 87EA0707 	  eor r7,r7   
 614 03cc 8AEA0A0A 	  eor r10,r10
 615 03d0 B6E7     	  b readln_loop 
 616 03d2 1228     	3: cmp r0,#CTRL_R    
 617 03d4 11D1     	  bne 4f 
 618              	// edit last entered line if  available 
 619 03d6 1AEA0A0A 	  ands r10,r10 
 620 03da B1D1     	  bne readln_loop
 621 03dc 5846     	  mov r0,r11  
 622 03de 00B5FFF7 	  _CALL strlen
 622      FEFF5DF8 
 622      04EB
 623 03e8 8246     	  mov r10,r0
 624 03ea 0746     	  mov r7,r0 
 625 03ec 5846     	  mov r0,r11  
 626 03ee 00B5FFF7 	  _CALL uart_puts
 626      FEFF5DF8 
 626      04EB
 627 03f8 A2E7     	  b readln_loop     
 628 03fa 0F28     	4: cmp r0,#CTRL_O 
 629 03fc 08D1     	   bne 5f 
 630 03fe C8F10508 	   rsb T1,#5  
 631 0402 4046     	   mov r0,T1 
 632 0404 00B5FFF7 	   _CALL cursor_shape
 632      FEFF5DF8 
 632      04EB
 633 040e 97E7     	   b readln_loop 
 634 0410 1B28     	5: cmp r0,#ESC 
 635 0412 60D1     	   bne character  
 636 0414 00B5FFF7 	   _CALL get_escape
 636      F3FD5DF8 
 636      04EB
 637 041e 8228     	   cmp r0,#HOME 
 638 0420 07D1     	   bne try_end 
ARM GAS  terminal.s 			page 22


 639 0422 00B5FFF7 	   _CALL cursor_home
 639      FEFF5DF8 
 639      04EB
 640 042c 87EA0707 	   eor r7,r7  
 641 0430 86E7     	   b readln_loop 
 642              	try_end:
 643 0432 8328     	   cmp r0,#END 
 644 0434 08D1     	   bne try_left 
 645 0436 0AF10100 	   add r0,r10,#1
 646 043a 00B5FFF7 	   _CALL cursor_x 
 646      FEFF5DF8 
 646      04EB
 647 0444 5746     	   mov r7,r10 
 648 0446 7BE7     	   b readln_loop 
 649              	try_left: 
 650 0448 8028     	   cmp r0,#ARROW_LEFT
 651 044a 0CD1     	   bne try_right 
 652 044c 3F40     	   ands r7,r7 
 653 044e 3FF477AF 	   beq readln_loop
 654 0452 4FF00100 	   mov r0,#1 
 655 0456 00B5FFF7 	   _CALL move_left 
 655      DAFE5DF8 
 655      04EB
 656 0460 A7F10107 	   sub r7,#1
 657 0464 6CE7     	   b readln_loop
 658              	try_right:
 659 0466 8128     	   cmp r0,#ARROW_RIGHT 
 660 0468 0CD1     	   bne try_suprim 
 661 046a 5745     	   cmp r7,r10
 662 046c 3FF468AF 	   beq readln_loop
 663 0470 07F10107 	   add r7,#1
 664 0474 4FF00100 	   mov r0,#1  
 665 0478 00B5FFF7 	   _CALL move_right  
 665      DBFE5DF8 
 665      04EB
 666 0482 5DE7     	   b readln_loop 
 667              	try_suprim:
 668 0484 8428     	   cmp r0,#SUP
 669 0486 7FF45BAF 	   bne readln_loop 
 670              	// delete character at cursor 
 671 048a 5745     	   cmp r7,r10
 672 048c 3FF458AF 	   beq readln_loop 
 673 0490 07EB0B01 	   add r1,r7,r11 
 674 0494 01F10100 	   add r0,r1,#1 
 675 0498 4DF8048D 	   push {T1}
 676 049c AAEB0708 	   sub T1,r10,r7
 677 04a0 00B5FFF7 	   _CALL cmove 
 677      FEFF5DF8 
 677      04EB
 678 04aa 5DF8048B 	   pop {T1}
 679 04ae AAF1010A 	   sub r10,#1 
 680 04b2 80EA0000 	   eor r0,r0 
 681 04b6 0BF80A00 	   strb r0,[r11,r10]
 682 04ba 5846     	   mov r0,r11 
 683 04bc 00B5FFF7 	   _CALL update_line
 683      1FFF5DF8 
 683      04EB
ARM GAS  terminal.s 			page 23


 684 04c6 07F10100 	   add  r0,r7,#1 
 685 04ca 00B5FFF7 	   _CALL cursor_x 
 685      FEFF5DF8 
 685      04EB
 686 04d4 34E7     	   b readln_loop      
 687              	character:
 688 04d6 5745     	   cmp r7,r10 
 689 04d8 42D0     	   beq 5f // cursor at eol 
 690              	// cursor in middle of line 
 691              	// action depend on edit mode 
 692 04da 18EA0808 	  ands T1,T1  //check edit mode 
 693 04de 29D0     	  beq 2f 
 694              	// insert mode
 695 04e0 D145     	  cmp T2,r10 
 696 04e2 3FF42DAF 	  beq readln_loop // buffer full  
 697 04e6 2DE90101 	  push {r0,T1}
 698 04ea 0BEB0700 	  add r0,r11,r7  // src 
 699 04ee 00F10101 	  add r1,r0,#1   // dest 
 700 04f2 AAEB0708 	  sub T1,r10,r7  // move count 
 701 04f6 00B5FFF7 	  _CALL cmove   
 701      FEFF5DF8 
 701      04EB
 702 0500 BDE80101 	  pop {r0,T1}
 703 0504 0BF80700 	  strb r0,[r11,r7] 
 704 0508 07F10107 	  add r7,#1
 705 050c 0AF1010A 	  add r10,#1 
 706 0510 80EA0000 	  eor r0,r0 
 707 0514 0BF80A00 	  strb r0,[r11,r10]
 708 0518 5846     	  mov r0,r11   
 709 051a 00B5FFF7 	  _CALL update_line
 709      F0FE5DF8 
 709      04EB
 710 0524 07F10100 	  add r0,r7,#1 
 711 0528 00B5FFF7 	  _CALL cursor_x  
 711      FEFF5DF8 
 711      04EB
 712 0532 05E7     	  b readln_loop   
 713              	2: // overwrite mode 
 714 0534 0BF80700 	  strb r0,[r11,r7]
 715 0538 07F10107 	  add r7,#1
 716 053c 80EA0000 	  eor r0,r0 
 717 0540 0BF80A00 	  strb r0,[r11,r10] 
 718 0544 5846     	  mov r0,r11 
 719 0546 00B5FFF7 	  _CALL update_line 
 719      DAFE5DF8 
 719      04EB
 720 0550 07F10100 	  add r0,r7,#1 
 721 0554 00B5FFF7 	  _CALL cursor_x 
 721      FEFF5DF8 
 721      04EB
 722 055e EFE6     	  b readln_loop 
 723              	5: // cursor at eol, mode doesn't matter 
 724 0560 CA45     	   cmp r10,T2 
 725 0562 00D4     	   bmi 6f 
 726 0564 ECE6     	   b readln_loop  // buffer full
 727              	6: // only accept char>=32  
 728 0566 2028     	   cmp r0,#SPACE 
ARM GAS  terminal.s 			page 24


 729 0568 3FF5EAAE 	   bmi readln_loop 
 730 056c 0BF80700 	   strb r0,[r11,r7] 
 731 0570 00B5FFF7 	   _CALL uart_putc
 731      FEFF5DF8 
 731      04EB
 732 057a 07F10107 	   add r7,#1
 733 057e BA46     	   mov r10,r7
 734 0580 DEE6     	   b readln_loop  
 735              	readln_exit:
 736 0582 00B5FFF7 	  _CALL uart_putc 
 736      FEFF5DF8 
 736      04EB
 737 058c 80EA0000 	  eor r0,r0 
 738 0590 0BF80A00 	  strb r0,[r11,r10]
 739 0594 5146     	  mov r1,r10  // line length
 740 0596 5846     	  mov r0,r11  // *buffer  
 741 0598 BDE8800F 	  pop {r7,T1,T2,r10,r11}
 742 059c 7047     	  _RET 
 743              	
 744              	
 745              	/********************************
 746              	// print byte  in hexadecimal 
 747              	// on console
 748              	// input:
 749              	//   r0		byte to print
 750              	// output:
 751              	     to console 
 752              	   use:
 753              	     none 
 754              	******************************/
 755 059e 00BF     	    _GBL_FUNC print_hex
 756 05a0 01B4     		push {r0} 
 757 05a2 4FEA1010 		lsr r0,#4  
 758 05a6 00B5FFF7 		_CALL  digit_to_char 
 758      FEFF5DF8 
 758      04EB
 759 05b0 00B5FFF7 		_CALL  uart_putc 
 759      FEFF5DF8 
 759      04EB
 760 05ba 01BC     	    pop {r0} 
 761 05bc 00B5FFF7 		_CALL  digit_to_char
 761      FEFF5DF8 
 761      04EB
 762 05c6 00B5FFF7 		_CALL  uart_putc
 762      FEFF5DF8 
 762      04EB
 763 05d0 4FF02000 		mov r0,#SPACE 
 764 05d4 00B5FFF7 		_CALL  uart_putc  
 764      FEFF5DF8 
 764      04EB
 765 05de 7047     		_RET 
 766              	
 767              	/***********************************
 768              	// convert digit to character  
 769              	// input:
 770              	//   r0       digit to convert 
 771              	// output:
ARM GAS  terminal.s 			page 25


 772              	//   r0      hexdecimal character 
 773              	   use:
 774              	     none 
 775              	***********************************/
 776              	    _GBL_FUNC digit_to_char 
 777 05e0 00F00F00 		and r0,#15 
 778 05e4 0A28     		cmp r0,#10 
 779 05e6 01D4     		bmi 1f  
 780 05e8 00F10700 		add r0,#7
 781 05ec 00F13000 	1:  add r0,#'0'  
 782 05f0 7047     		_RET 
 783              	
 784 05f2 00005400 	
 784      0000
ARM GAS  terminal.s 			page 26


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  terminal.s 			page 27


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  terminal.s 			page 28


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  terminal.s 			page 29


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:54     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:60     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:61     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:62     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:63     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:64     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:72     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:73     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:74     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:75     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:76     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:77     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:79     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:80     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:81     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:82     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:83     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:84     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:89     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:90     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:91     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:92     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:93     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:94     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:95     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:96     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:98     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:99     *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:100    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:101    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:102    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:103    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:104    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:109    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:111    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:117    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:134    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:135    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:136    *ABS*:0000000000000008 BASICPTR
ARM GAS  terminal.s 			page 30


      tbi_macros.inc:137    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:138    *ABS*:0000000000000010 DATA
      tbi_macros.inc:139    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:140    *ABS*:0000000000000018 BASE
      tbi_macros.inc:141    *ABS*:000000000000001c TICKS
      tbi_macros.inc:142    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:143    *ABS*:0000000000000024 SEED
      tbi_macros.inc:144    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:145    *ABS*:000000000000002c FFREE
      tbi_macros.inc:146    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:147    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:148    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:149    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:150    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:151    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:152    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:153    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:154    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:155    *ABS*:0000000000000060 VARS
      tbi_macros.inc:156    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:157    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:158    *ABS*:00000000000000c8 FREE_RAM
      tbi_macros.inc:161    *ABS*:0000000000000000 FRUN
      tbi_macros.inc:162    *ABS*:0000000000000001 FTRAP
      tbi_macros.inc:163    *ABS*:0000000000000002 FLOOP
      tbi_macros.inc:164    *ABS*:0000000000000003 FSLEEP
      tbi_macros.inc:165    *ABS*:0000000000000004 FBREAK
      tbi_macros.inc:166    *ABS*:0000000000000005 FCOMP
      tbi_macros.inc:167    *ABS*:0000000000000006 FAUTORUN
      tbi_macros.inc:169    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:171    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:172    *ABS*:0000000000007fff MAX_LINENO
          terminal.s:60     .text:0000000000000000 $t
          terminal.s:60     .text:0000000000000000 get_escape
          terminal.s:102    .text:0000000000000054 convert_table
                            *ABS*:0000000000000084 SUP
          terminal.s:96     *ABS*:0000000000000080 ARROW_LEFT
          terminal.s:97     *ABS*:0000000000000081 ARROW_RIGHT
          terminal.s:98     *ABS*:0000000000000082 HOME
          terminal.s:99     *ABS*:0000000000000083 END
          terminal.s:102    .text:0000000000000054 $d
          terminal.s:116    .text:0000000000000060 uart_puts
          terminal.s:116    .text:0000000000000060 $t
          terminal.s:138    .text:0000000000000080 digit
          terminal.s:167    .text:00000000000000ac itoa
          terminal.s:200    .text:0000000000000112 pad
          terminal.s:200    .text:0000000000000112 $d
          terminal.s:212    .text:0000000000000118 print_int
          terminal.s:212    .text:0000000000000116 $t
          terminal.s:228    .text:0000000000000130 cursor_shape
          terminal.s:291    .text:00000000000001b0 send_escape
          terminal.s:316    .text:00000000000001d4 send_parameter
          terminal.s:248    .text:000000000000016c bksp
          terminal.s:267    .text:0000000000000198 delete_nchar
          terminal.s:344    .text:0000000000000210 move_left
          terminal.s:360    .text:0000000000000234 move_right
          terminal.s:376    .text:0000000000000258 spaces
ARM GAS  terminal.s 			page 31


          terminal.s:400    .text:000000000000027c insert_char
          terminal.s:440    .text:0000000000000280 delete_under
          terminal.s:480    .text:0000000000000284 delete_line
          terminal.s:518    .text:00000000000002e0 cursor_home
          terminal.s:501    .text:00000000000002bc cursor_x
          terminal.s:536    .text:0000000000000300 update_line
          terminal.s:565    .text:0000000000000318 readln
          terminal.s:575    .text:0000000000000340 readln_loop
          terminal.s:735    .text:0000000000000582 readln_exit
          terminal.s:687    .text:00000000000004d6 character
          terminal.s:642    .text:0000000000000432 try_end
          terminal.s:649    .text:0000000000000448 try_left
          terminal.s:658    .text:0000000000000466 try_right
          terminal.s:667    .text:0000000000000484 try_suprim
          terminal.s:755    .text:00000000000005a0 print_hex
          terminal.s:776    .text:00000000000005e0 digit_to_char
          terminal.s:784    .text:00000000000005f2 $d
          terminal.s:784    .text:00000000000005f4 $d

UNDEFINED SYMBOLS
uart_getc
uart_putc
_pad
cmove
strlen
