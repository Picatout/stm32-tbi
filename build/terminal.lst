ARM GAS  terminal.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	//------------------------------
  20              	// This file is for functions 
  21              	// interfacing with VT100 terminal
  22              	// emulator.
  23              	// except for uart_getc and uart_putc which
  24              	// are in stm32-tbi.s 
  25              	// exported functions:
  26              	//   uart_puts 
  27              	//   readln 
  28              	//   spaces 
  29              	//   digit_to_char 
  30              	//------------------------------
  31              	
  32              	  .syntax unified
  33              	  .cpu cortex-m3
  34              	  .fpu softvfp
  35              	  .thumb
  36              	
  37              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
ARM GAS  terminal.s 			page 2


  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
ARM GAS  terminal.s 			page 3


  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
ARM GAS  terminal.s 			page 4


 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  38              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
ARM GAS  terminal.s 			page 5


  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  39              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
ARM GAS  terminal.s 			page 6


  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	// keyword types 
  30              	  .equ F_CMD,0x20     // command keyword
  31              	  .equ F_IFUNC,0x40 // integer function keyword
  32              	  .equ F_CFUNC,0x80 // character function keyword
  33              	  .equ F_CONST,0xC0 // function keyword that return a constant
  34              	
  35              	//--------------------------------------
  36              	//   constantes related to Arduino 
  37              	//   API mapping 
  38              	//-------------------------------------
  39              	  .equ INP,0
  40              	  .equ OUTP,1 
  41              	
  42              	//--------------------------------------
  43              	//       token attribute
  44              	//--------------------------------------
  45              	// bits 4:5 identify token group 
  46              	// 0x0n -> miscelinous 
  47              	// 0x1n -> +|- operators 
  48              	// 0x2n -> *|/|% operators
  49              	// 0x3n -> relational operators 
  50              	  .equ TK_NONE,0       // not a token 
  51              	  .equ TK_COLON,1      // command separator ':' 
  52              	  .equ TK_QSTR,2     // quoted string  
  53              	  .equ TK_CHAR,3       // ASCII character 
  54              	  .equ TK_VAR,5      // variable index 
  55              	  .equ TK_ARRAY,6     // array variable '@' 
  56              	  .equ TK_LPAREN,7     // left parenthesis '('
  57              	  .equ TK_RPAREN,8     // right parenthesis ')'
  58              	  .equ TK_COMMA,9     // item separator ',' 
  59              	  .equ TK_SHARP,0xa     // print colon width '#' 
  60              	  .equ TK_CMD,0xb      // BASIC command   
  61              	  .equ TK_IFUNC,0xc    // BASIC integer function
  62              	  .equ TK_CFUNC,0xd    // BASIC character function
  63              	  .equ TK_CONST,0xe    // BASIC constant 
  64              	  .equ TK_INTGR,0xf    // 32 bits integer 
  65              	  .equ TK_PLUS,0x10    // addition operator '+'
  66              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  67              	  .equ TK_MULT,0x20    // multiplication operator '*'
  68              	  .equ TK_DIV,0x21     // division operator '/'
  69              	  .equ TK_MOD,0x22     // modulo operator '%'
  70              	
  71              	// don't change these token values 
  72              	// values chosen to be used as a mask.
  73              	// bit 7   1 for dictionary words else 0 
  74              	// bits 6  always 0 
ARM GAS  terminal.s 			page 7


  75              	// bits 5:4 identify group 
  76              	// bits 3:0 token identifier inside group  
  77              	  .equ TK_GT,0x31      // relation operator '>'
  78              	  .equ TK_EQUAL,0x32   // assignment or relation operator ','
  79              	  .equ TK_GE,0x33      // relation operator '>,'
  80              	  .equ TK_LT,0x34      // relation operator '<'
  81              	  .equ TK_LE,0x36      // relation operator '<,'
  82              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  83              	// token groups 
  84              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  85              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  86              	  .equ TK_GRP_ADD,0x10  // additive operators
  87              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  88              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  89              	  .equ CMD_END,2 
  90              	
  91              	//--------------------------------------
  92              	//   error codes 
  93              	//--------------------------------------
  94              	  .equ ERR_NONE,0
  95              	  .equ ERR_MEM_FULL,1 
  96              	  .equ ERR_SYNTAX,2
  97              	  .equ ERR_MATH_OVF,3
  98              	  .equ ERR_DIV0,4 
  99              	  .equ ERR_NO_LINE,5
 100              	  .equ ERR_RUN_ONLY,6
 101              	  .equ ERR_CMD_ONLY,7
 102              	  .equ ERR_DUPLICATE,8
 103              	  .equ ERR_NOT_FILE,9
 104              	  .equ ERR_BAD_VALUE,10
 105              	  .equ ERR_NO_ACCESS,11
 106              	  .equ ERR_NO_DATA,12 
 107              	  .equ ERR_NO_PROG,13
 108              	  .equ ERR_NO_FSPACE,14
 109              	  .equ ERR_BUF_FULL,15
 110              	
 111              	//--------------------------------------
 112              	//   assembler flags 
 113              	//-------------------------------------
 114              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 115              	
 116              	.equ CELL_SIZE,4 
 117              	
 118              	
 119              	//-------------------------------
 120              	//  macros used to help debugging
 121              	//-------------------------------
 122              	  .equ DEBUG,0
 123              	
 124              	/***************************
 125              	  SYSTEM variables offset 
 126              	  from UPP  
 127              	***************************/ 
 128              	  .equ IN,0    // low byte of in.w 
 129              	  .equ IN_SAVED,IN+4 // set by get_token before parsing next token, used by unget_token
 130              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 131              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
ARM GAS  terminal.s 			page 8


 132              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 133              	  .equ DATA,DATAPTR+4 // index to next data item 
 134              	  .equ DATALEN, DATA+4 // length of data line 
 135              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 136              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 137              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 138              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 139              	  .equ FSPTR,SEED+4 //  pointer used by file system
 140              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 141              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 142              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 143              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 144              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 145              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 146              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 147              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 148              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 149              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 150              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 151              	  .equ CELLL,4 // size of integer 
 152              	  .equ VARS_SIZE, CELLL*26 // space used by 26 BASIC variables (A-Z)
 153              	  .equ FREE_RAM,VARS+VARS_SIZE // basic programs start here 
 154              	
 155              	/***********************************************
 156              	*       MACROS
 157              	***********************************************/
 158              		.macro _CALL fn /* low level routine call */ 
 159              	 	PUSH {LR}
 160              		BL \fn  
 161              	  POP {LR}
 162              		.endm
 163              		
 164              		.macro	_RET /* return from subroutine */
 165              		BX	LR
 166              		.endm
 167              	
 168              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 169              		MOV \REG, #\LITERAL&0xffff
 170              		MOVT \REG, #\LITERAL>>16
 171              		.endm
 172              	
 173              	 	.macro	_DOLIT  value /*long literals */
 174              		BL	DOLIT
 175              		.word \value 
 176              		.endm
 177              	
 178              	// function header 
 179              	  .macro _FUNC label 
 180              	  .p2align 2 
 181              	  .type \label, %function  
 182              	\label:
 183              	  .endm 
 184              	
 185              	// global function header 
 186              	  .macro _GBL_FUNC label 
 187              	  .global \label 
 188              	  _FUNC \label 
ARM GAS  terminal.s 			page 9


 189              	  .endm 
 190              	
 191              	
 192              	/********************************
 193              	    dictionary structure
 194              	------------------------------
 195              	 format:
 196              	   link:    
 197              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 198              	   cmd_name: 31 characters max 
 199              	   cmd_index: 2 bytes 
 200              	**********************************/
 201              		.macro _dict_entry len,name,cmd_idx 
 202              		.p2align 2 
 203              	  .word LINK 
 204              	  .word \cmd_idx 
 205              		.equ LINK,.
 206              		.byte \len 	
 207              		.ascii "\name"
 208              		.p2align 2 
 209              		.endm 
 210              	
 211              	  // pop parameter in register 
 212              	  .macro _POP  reg 
 213              	  ldmia  r12!,{\reg}
 214              	  .endm 
 215              	
 216              	  // push register on parameter stack 
 217              	  .macro _PUSH reg 
 218              	  stmdb r12!,{\reg}
 219              	  .endm 
  40              	
  41              	
  42              	    .section .text, "ax", %progbits 
  43              	
  44              	
  45              	/*********************************
  46              	// receive ANSI ESC 
  47              	// sequence and convert it
  48              	// to a single character code 
  49              	// in range {128..255}
  50              	// This is called after receiving 
  51              	// ESC character. 
  52              	// ignored sequence return 0 
  53              	  input:
  54              	    none
  55              	  output:
  56              	    r0    converted character 
  57              	  use: 
  58              	    r2
  59              	***********************************/
  60              	    _FUNC get_escape
  61 0000 04B4     	    push {r2}
  62 0002 00B5FFF7 	    _CALL uart_getc 
  62      FEFF5DF8 
  62      04EB
  63 000c 5B28     	    cmp r0,#'[ // this character is expected after ESC 
ARM GAS  terminal.s 			page 10


  64 000e 03D0     	    beq 1f
  65 0010 80EA0000 	0:  eor r0,r0
  66 0014 04BC     	    pop {r2}
  67 0016 7047     	    _RET
  68 0018 00B5FFF7 	1: _CALL  uart_getc 
  68      FEFF5DF8 
  68      04EB
  69 0022 DFF8FC25 	    ldr r2,=convert_table
  70              	2:
  71 0026 1178     	    ldrb r1,[r2]
  72 0028 0940     	    ands r1,r1 
  73 002a F1D0     	    beq 0b 
  74 002c 8842     	    cmp r0,r1 
  75 002e 02D0     	    beq 4f
  76 0030 02F10202 	    add r2,#2
  77 0034 F7E7     	    b 2b
  78 0036 02F10102 	4:  add r2,#1  
  79 003a 1078     	    ldrb r0,[r2]
  80 003c B0F1840F 	    cmp r0,#SUP
  81 0040 06D1     	    bne 5f
  82 0042 01B4     	    push {r0}  
  83 0044 00B5FFF7 	    _CALL  uart_getc
  83      FEFF5DF8 
  83      04EB
  84 004e 01BC     	    pop {r0}
  85              	5:
  86 0050 04BC     	    pop {r2}
  87 0052 7047     	    _RET 
  88              	
  89              	//-----------------------------
  90              	//  constants replacing 
  91              	//  ANSI sequence received 
  92              	//  from terminal.
  93              	//  These are the ANSI sequences
  94              	//  accepted by function readln
  95              	//------------------------------
  96              	    .equ ARROW_LEFT,128
  97              	    .equ ARROW_RIGHT,129
  98              	    .equ HOME,130
  99              	    .equ END,131
 100              	    .equ SUP,132 
 101              	
 102 0054 43814480 	convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',END,'3',SUP,0,0
 102      48824683 
 102      33840000 
 103              	
 104              	/*******************************
 105              	    uart_puts 
 106              	 send counted string to uart 
 107              	
 108              	 input: 
 109              	    r0 *string to send 
 110              	 output:
 111              	    none 
 112              	 use:  
 113              	    r0 char to send 
 114              	    r10 counter
ARM GAS  terminal.s 			page 11


 115              	    r11 *string  
 116              	******************************/
 117              	    _GBL_FUNC uart_puts
 118 0060 2DE9000C 	    push {r10,r11}
 119 0064 10F801AB 	    ldrb r10,[r0],#1 
 120 0068 1AEA0A0A 	    ands r10,r10 
 121 006c 0AD0     	    beq 9f 
 122 006e 8346     	    mov r11,r0 
 123              	1:
 124 0070 1BF8010B 	    ldrb r0,[r11],#1 
 125 0074 00B5FFF7 	    _CALL uart_putc   
 125      FEFF5DF8 
 125      04EB
 126 007e BAF1010A 	    subs r10,#1 
 127 0082 F5D1     	    bne 1b 
 128 0084 BDE8000C 	9:  pop {r10,r11}
 129 0088 7047     	    _RET  
 130              	
 131              	/******************************
 132              	    uart_putsz 
 133              	    print zero terminate string 
 134              	 
 135              	  input:
 136              	    r0  *asciz 
 137              	  output:
 138              	    none 
 139              	  use:
 140              	    r0  char to send 
 141              	    r8  *asciz 
 142              	******************************/
 143 008a 00BF     	    _GBL_FUNC uart_putsz 
 144 008c 4DF8048D 	    push {r8}
 145 0090 8046     	    mov r8,r0 
 146 0092 18F8010B 	1:  ldrb r0,[r8],#1
 147 0096 28B1     	    cbz r0,9f 
 148 0098 00B5FFF7 	    _CALL uart_putc 
 148      FEFF5DF8 
 148      04EB
 149 00a2 F6E7     	    b 1b 
 150 00a4 5DF8048B 	9:  pop {r8}
 151 00a8 7047     	    _RET 
 152              	
 153              	/***********************************
 154              	   digit  
 155              	   convert least digit of uint32 to ASCII 
 156              	    input:
 157              	        r0    uint32
 158              	        r1    base   
 159              	    output:
 160              	        r0    r0%base+'0'  
 161              	        r1    quotient 
 162              	    use:
 163              	        r8 
 164              	***********************************/
 165 00aa 00BF     	    _FUNC digit
 166 00ac 4DF8048D 	    push {r8}
 167 00b0 01B4     	    push {r0}
ARM GAS  terminal.s 			page 12


 168 00b2 8846     	    mov r8,r1  
 169 00b4 B0FBF8F0 	    udiv r0,r8
 170 00b8 0146     	    mov r1,r0  
 171 00ba 08FB00F0 	    mul  r0,r8 
 172 00be 5DF8048B 	    pop {r8}
 173 00c2 A8EB0000 	    sub r0,r8,r0
 174 00c6 0A28     	    cmp r0,#10  
 175 00c8 01D4     	    bmi 1f 
 176 00ca 00F10700 	    add r0,#7
 177 00ce 00F13000 	1:  add r0,#'0'  
 178 00d2 5DF8048B 	    pop {r8}
 179 00d6 7047     	    _RET 
 180              	
 181              	/**********************************
 182              	    itoa 
 183              	    convert integer to string
 184              	    input:
 185              	      r0   integer 
 186              	      r1   base 
 187              	    output:
 188              	      r0   *string 
 189              	    use: 
 190              	      r7   integer 
 191              	      R8   base 
 192              	      r9   *pad 
 193              	*********************************/ 
 194              	    _FUNC itoa
 195 00d8 2DE98003 	    push {r7,r8,r9}
 196 00dc 0746     	    mov r7,r0
 197 00de 8846     	    mov r8,r1  
 198 00e0 DFF85A90 	    ldr r9,pad 
 199 00e4 09F18009 	    add r9,#PAD_SIZE 
 200 00e8 80EA0000 	    eor r0,r0 
 201 00ec 09F8010D 	    strb r0,[r9,#-1]!
 202 00f0 00F12000 	    add r0,#SPACE 
 203 00f4 09F8010D 	    strb r0,[r9,#-1]!
 204 00f8 80EA0000 	    eor r0,r0 
 205 00fc B8F10A0F 	    cmp r8,#10 
 206 0100 04D1     	    bne 0f 
 207 0102 17F00040 	    ands r0,r7,#(1<<31)
 208 0106 01D0     	    beq 0f 
 209 0108 C7F10007 	    rsb r7,#0 
 210 010c 01B4     	0:  push {r0}
 211 010e 3846     	1:  mov r0,r7 
 212 0110 4146     	    mov r1,r8 
 213 0112 00B5FFF7 	    _CALL digit 
 213      CAFF5DF8 
 213      04EB
 214 011c 09F8010D 	    strb r0,[r9,#-1]!
 215 0120 0940     	    ands r1,r1 
 216 0122 01D0     	    beq  2f   
 217 0124 0F46     	    mov r7,r1 
 218 0126 F2E7     	    b 1b 
 219 0128 01BC     	2:  pop {r0} 
 220 012a 0040     	    ands r0,r0 
 221 012c 03D0     	    beq 3f 
 222 012e 4FF02D00 	    mov r0,#'-'
ARM GAS  terminal.s 			page 13


 223 0132 09F8010D 	    strb r0,[r9,#-1]!
 224 0136 4846     	3:  mov r0,r9 
 225 0138 BDE88003 	    pop {r7,r8,r9} 
 226 013c 7047     	    _RET  
 227 013e 00000000 	pad: .word _pad 
 228              	
 229              	/*****************************
 230              	    print_int 
 231              	  input:
 232              	    r0   integer to print 
 233              	    r1   conversion base 
 234              	  output:
 235              	    none 
 236              	  use:
 237              	    none 
 238              	*****************************/
 239 0142 00BF     	    _GBL_FUNC print_int 
 240 0144 00B5FFF7 	    _CALL itoa
 240      C7FF5DF8 
 240      04EB
 241 014e 00B5FFF7 	    _CALL uart_putsz 
 241      FEFF5DF8 
 241      04EB
 242 0158 7047     	    _RET 
 243              	
 244              	/*****************************
 245              	    cursor_shape 
 246              	    change cursor shape 
 247              	
 248              	  input:
 249              	    r0      shape {0..6}
 250              	  output:
 251              	    none 
 252              	  use:
 253              	    r8    shape
 254              	*******************************/
 255 015a 00BF     	    _GBL_FUNC cursor_shape
 256 015c 4DF8048D 	    push {r8}
 257 0160 00B500F0 	    _CALL send_escape
 257      3BF85DF8 
 257      04EB
 258 016a 00B500F0 	    _CALL send_parameter 
 258      48F85DF8 
 258      04EB
 259 0174 4FF02000 	    mov r0,#SPACE 
 260 0178 00B5FFF7 	    _CALL uart_putc 
 260      FEFF5DF8 
 260      04EB
 261 0182 4FF07100 	    mov r0,#'q' 
 262 0186 00B5FFF7 	    _CALL uart_putc 
 262      FEFF5DF8 
 262      04EB
 263 0190 5DF8048B 	    pop {r8}
 264 0194 7047     	    _RET 
 265              	
 266              	
 267              	//---------------------------
ARM GAS  terminal.s 			page 14


 268              	// delete character at left 
 269              	// of cursor on terminal 
 270              	// input:
 271              	//   none 
 272              	// output:
 273              	//	none 
 274              	//---------------------------
 275 0196 00BF     	    _FUNC bksp
 276 0198 4FF00800 		mov r0,#BS 
 277 019c 00B5FFF7 		_CALL  uart_putc 
 277      FEFF5DF8 
 277      04EB
 278 01a6 4FF02000 		mov r0,#SPACE 
 279 01aa 00B5FFF7 		_CALL  uart_putc 
 279      FEFF5DF8 
 279      04EB
 280 01b4 4FF00800 		mov r0,#BS 
 281 01b8 00B5FFF7 		_CALL  uart_putc 
 281      FEFF5DF8 
 281      04EB
 282 01c2 7047     		_RET 
 283              	
 284              	//---------------------------
 285              	// delete n character left of cursor 
 286              	// at terminal.
 287              	// input: 
 288              	//   r0   number of characters to delete.
 289              	// output:
 290              	//    none
 291              	// use:
 292              	//   r2   count  
 293              	//--------------------------	
 294              	    _FUNC delete_nchar
 295 01c4 48B1     		cbz r0,2f 
 296 01c6 04B4     	    push {r2}
 297 01c8 0246     	    mov r2,r0  
 298              	1:	
 299 01ca 00B5FFF7 	    _CALL  bksp 
 299      E4FF5DF8 
 299      04EB
 300 01d4 013A     	    subs r2,#1 
 301 01d6 F8D1     		bne 1b 
 302 01d8 04BC     	    pop {r2}
 303 01da 7047     	2:	_RET
 304              	
 305              	
 306              	//--------------------------
 307              	// send ANSI escape sequence
 308              	// ANSI: ESC[
 309              	// note: ESC is ASCII 27
 310              	//       [   is ASCII 91 
 311              	// input:
 312              	//      none 
 313              	// output:
 314              	//      none 
 315              	// use:
 316              	//      r0 
ARM GAS  terminal.s 			page 15


 317              	//-------------------------- 
 318              	    _FUNC send_escape
 319 01dc 01B4     		push {r0}
 320 01de 4FF01B00 	    mov r0,#ESC 
 321 01e2 00B5FFF7 		_CALL  uart_putc 
 321      FEFF5DF8 
 321      04EB
 322 01ec 4FF05B00 		mov r0,#'['
 323 01f0 00B5FFF7 		_CALL  uart_putc 
 323      FEFF5DF8 
 323      04EB
 324 01fa 01BC     		pop {r0}
 325 01fc 7047     	    _RET 
 326              	
 327              	
 328              	/*****************************
 329              	 send ANSI parameter value
 330              	 ANSI parameter values are 
 331              	 sent as ASCII charater 
 332              	 not as binary number.
 333              	 this routine 
 334              	 convert binary number to 
 335              	 ASCII send it.
 336              	 input: 
 337              	 	r0   parameter  
 338              	 output:
 339              	   none 
 340              	 use:
 341              	    r8   digit counter 
 342              	***************************/
 343 01fe 00BF     	    _FUNC send_parameter
 344 0200 4DF8048D 	    push {r8}
 345 0204 4FF00008 	    mov r8,#0
 346 0208 4FF00A01 	1:  mov r1,#10  
 347 020c 00B5FFF7 	    _CALL digit 
 347      4DFF5DF8 
 347      04EB
 348 0216 08F10108 	    add r8,#1 
 349 021a 01B4     	    push {r0}
 350 021c 0846     	    mov r0,r1 
 351 021e 0040     	    ands r0,r0
 352 0220 F2D1     	    bne 1b 
 353 0222 01BC     	2:  pop {r0}
 354 0224 00B5FFF7 	    _CALL uart_putc  
 354      FEFF5DF8 
 354      04EB
 355 022e B8F10108 	    subs r8,#1
 356 0232 F6D1     	    bne 2b 
 357 0234 5DF8048B 		pop {r8}
 358 0238 7047     	    _RET 
 359              	
 360              	/**********************************
 361              	// move cursor left n character
 362              	// ANSI: ESC[PnD 
 363              	// 'Pn' est a numerical parameter
 364              	// specifying number of characters 
 365              	// displacement.
ARM GAS  terminal.s 			page 16


 366              	// input:
 367              	//   r0     character count
 368              	// output:
 369              	//   none
 370              	*********************************/
 371 023a 00BF     	    _FUNC move_left
 372 023c 00B5FFF7 		_CALL  send_escape
 372      CDFF5DF8 
 372      04EB
 373 0246 00B5FFF7 		_CALL  send_parameter 
 373      DAFF5DF8 
 373      04EB
 374 0250 4FF04400 		mov r0,#'D' 
 375 0254 00B5FFF7 		_CALL  uart_putc 
 375      FEFF5DF8 
 375      04EB
 376 025e 7047     		_RET	
 377              	
 378              	
 379              	/***********************************
 380              	// move cursor right n character 
 381              	// ANSI: ESC[PnC 
 382              	// input:
 383              	//   r0     character count
 384              	// output:
 385              	//   none
 386              	***********************************/
 387              	    _FUNC move_right
 388 0260 00B5FFF7 		_CALL  send_escape
 388      BBFF5DF8 
 388      04EB
 389 026a 00B5FFF7 		_CALL  send_parameter 
 389      C8FF5DF8 
 389      04EB
 390 0274 4FF04300 		mov r0,#'C' 
 391 0278 00B5FFF7 		_CALL  uart_putc 
 391      FEFF5DF8 
 391      04EB
 392 0282 7047     		_RET 
 393              	
 394              	/*********************************
 395              	// print n spaces on terminal
 396              	// input:
 397              	//  r0 		number of spaces 
 398              	// output:
 399              	//	none
 400              	// use:
 401              	     r8    counter  
 402              	********************************/
 403              	    _GBL_FUNC spaces
 404 0284 4DF8048D 		push {r8}
 405 0288 50B1     	    cbz r0,9f 
 406 028a 8046     	    mov r8,r0 
 407 028c 4FF02000 	1:	mov r0,#SPACE 
 408 0290 00B5FFF7 		_CALL  uart_putc 
 408      FEFF5DF8 
 408      04EB
ARM GAS  terminal.s 			page 17


 409 029a B8F10108 		subs r8,#1
 410 029e F5D1     		bne 1b 
 411 02a0 5DF8048B 	9:  pop {r8}
 412 02a4 7047     		_RET 
 413              	
 414              	
 415              	/*********************************
 416              	    insert_char 
 417              	// insert character in tib  
 418              	
 419              	// input:
 420              	//   r0      character to insert 
 421              	//   r1      line length
 422              	//   r8      insert position 
 423              	//   r9      line pointer 
 424              	// output:
 425              	//   r0       updated insertion point  
 426              	**********************************/
 427 02a6 00BF     	   _FUNC insert_char 
 428              	/*   
 429              	    ld (CHAR,sp),a 
 430              	    ld a,xh 
 431              		ld (IPOS,sp),a
 432              	    ld a,xl 
 433              	    ld (LLEN,sp),a  
 434              	    ldw x,y
 435              	    incw x 
 436              	    ld a,(LLEN,sp)
 437              	    sub a,(IPOS,sp)
 438              	    inc a 
 439              	    ld acc8,a 
 440              	    clr acc16
 441              	    _CALL  move
 442              	    ldw y,#tib 
 443              	    ld a,(IPOS,sp)
 444              	    ld acc8,a 
 445              	    addw y,acc16 
 446              	    ld a,(CHAR,sp)
 447              	    ld (y),a
 448              	    incw y  
 449              	    ld a,(IPOS,sp)
 450              	    _CALL  move_left
 451              	    _MOV32 r0,tib 
 452              	    _CALL  uart_putsz 
 453              	    ld a,(LLEN,sp)
 454              	    sub a,(IPOS,sp) 
 455              	    _CALL  move_left 
 456              	*/
 457 02a8 7047     		_RET 
 458              	
 459              	
 460              	/***************************************
 461              	// delete character under cursor
 462              	// input:
 463              	//   R0       line length   
 464              	//   R1      delete position
 465              	//   R8       line pointer 
ARM GAS  terminal.s 			page 18


 466              	**************************************/
 467 02aa 00BF     	    _FUNC delete_under
 468              	/*
 469              	    ld (LLEN,sp),a 
 470              	    ld a,xl 
 471              	    ld (CPOS,sp),a 
 472              	    ldw x,y // move destination
 473              	    incw y  // move source 
 474              	    ld a,(LLEN,sp)
 475              	    sub a,(CPOS,sp)
 476              	    inc a // move including zero at end.
 477              	    ld acc8,a 
 478              	    clr acc16 
 479              		_CALL  move 
 480              	    ldw y,#tib 
 481              	    ld a,(CPOS,sp)
 482              	    ld acc8,a 
 483              	    addw y,acc16 
 484              	    ldw x,y 
 485              	    _CALL  uart_puts 
 486              	    ld a,#SPACE  
 487              	    _CALL  uart_putc
 488              	    ld a,(LLEN,sp)
 489              	    sub a,(CPOS,sp)
 490              	    _CALL  move_left 
 491              	    dec (LLEN,sp)
 492              	*/
 493 02ac 7047     		_RET 
 494              	
 495              	/********************************
 496              	// send ANSI sequence to delete
 497              	// whole line. Cursor position
 498              	// is not updated.
 499              	// ANSI: ESC[2K
 500              	// input:
 501              	//   none
 502              	// output:
 503              	//   none 
 504              	   use:
 505              	     r0 
 506              	********************************/
 507 02ae 00BF     	    _FUNC delete_line
 508 02b0 01B4     	    push {r0}
 509 02b2 00B5FFF7 	    _CALL  send_escape
 509      92FF5DF8 
 509      04EB
 510 02bc 4FF03200 		mov r0,#'2'
 511 02c0 00B5FFF7 		_CALL  uart_putc 
 511      FEFF5DF8 
 511      04EB
 512 02ca 4FF04B00 		mov r0,#'K' 
 513 02ce 00B5FFF7 		_CALL  uart_putc
 513      FEFF5DF8 
 513      04EB
 514 02d8 00B5FFF7 	    _CALL  cursor_home 
 514      FEFF5DF8 
 514      04EB
ARM GAS  terminal.s 			page 19


 515 02e2 01BC     		pop {r0}
 516 02e4 7047     	    _RET 
 517              	
 518              	/*************************************
 519              	   cursor_x  
 520              	   send cursor at column n 
 521              	    input: 
 522              	        r0  n 
 523              	    output:
 524              	        none 
 525              	    use:
 526              	        none 
 527              	*************************************/
 528 02e6 00BF     	    _GBL_FUNC cursor_x 
 529 02e8 00B5FFF7 	    _CALL send_escape
 529      77FF5DF8 
 529      04EB
 530 02f2 00B5FFF7 	    _CALL send_parameter
 530      84FF5DF8 
 530      04EB
 531 02fc 4FF04700 	    mov r0,#'G' 
 532 0300 00B5FFF7 	    _CALL uart_putc 
 532      FEFF5DF8 
 532      04EB
 533 030a 7047     	    _RET 
 534              	
 535              	/*************************************
 536              	    cursor_home 
 537              	    send cursor at left position
 538              	  input:
 539              	    none 
 540              	  output:
 541              	    none 
 542              	  use:
 543              	    r0
 544              	*************************************/
 545              	    _GBL_FUNC cursor_home 
 546 030c 01B4     	    push {r0}
 547 030e 00B5FFF7 	    _CALL send_escape
 547      64FF5DF8 
 547      04EB
 548 0318 4FF04700 	    mov r0,#'G' 
 549 031c 00B5FFF7 	    _CALL uart_putc 
 549      FEFF5DF8 
 549      04EB
 550 0326 01BC     	    pop {r0}
 551 0328 7047     	    _RET 
 552              	
 553              	/************************************
 554              	   update_line 
 555              	   update edited line on display 
 556              	   input:
 557              	     r0    *line 
 558              	   output:
 559              	     none 
 560              	   use:
 561              	      none 
ARM GAS  terminal.s 			page 20


 562              	*************************************/
 563 032a 00BF     	    _FUNC update_line 
 564 032c 00B5FFF7 	    _CALL delete_line
 564      BFFF5DF8 
 564      04EB
 565 0336 00B5FFF7 	    _CALL uart_putsz
 565      FEFF5DF8 
 565      04EB
 566 0340 7047     	    _RET 
 567              	
 568              	/*************************************
 569              	  readln 
 570              	  read a line of text from terminal
 571              	  CTRL_D delete line 
 572              	  CTRL_R edit last entered line
 573              	  CTRL_O toggle between overwrite|insert   
 574              	  LEFT_ARROW move cursor left 
 575              	  RIGHT_ARROW move cursor right
 576              	  HOME cursor at start of line 
 577              	  END  cursor at end of line  
 578              	  BS  delete character left of cursor 
 579              	  input:
 580              	    r0  *buffer
 581              	    r1  buffer size 
 582              	  output:
 583              	    r0  *buffer (asciz)  
 584              	    r1  line length  
 585              	  use:
 586              	    r7  cursor position 
 587              	    r8  ovwr|insert flag 
 588              	    r9  buffer size -1 
 589              	    r10 line length 
 590              	    r11 *buffer   
 591              	*************************************/
 592 0342 00BF     	  _GBL_FUNC readln
 593 0344 2DE9800F 	  push {r7,r8,r9,r10,r11}
 594 0348 87EA0707 	  eor r7,r7  // cursor position 
 595 034c 88EA0808 	  eor r8,r8 // overwrite mode 
 596 0350 8346     	  mov r11,r0 
 597 0352 A1F10109 	  sub r9,r1,#1  // buffer size -1
 598 0356 8AEA0A0A 	  eor r10,r10  // 0 line length 
 599 035a 80EA0000 	  eor r0,r0
 600 035e 0BF80900 	  strb r0,[r11,r9]  
 601 0362 00B5FFF7 	  _CALL cursor_shape
 601      FEFF5DF8 
 601      04EB
 602              	readln_loop:
 603 036c 00B5FFF7 	  _CALL uart_getc 
 603      FEFF5DF8 
 603      04EB
 604 0376 0D28     	  cmp r0,#CR
 605 0378 00D1     	  bne 0f
 606 037a 18E1     	  b readln_exit 
 607              	0:
 608 037c 0828     	  cmp r0,#BS 
 609 037e 32D1     	  bne 2f 
 610              	//delete char. left  
ARM GAS  terminal.s 			page 21


 611 0380 3F40     	  ands r7,r7 
 612 0382 F3D0     	  beq readln_loop 
 613 0384 5745     	  cmp r7,r10 
 614 0386 24D0     	  beq 1f
 615              	// in mol 
 616 0388 0BEB0700 	  add r0,r11,r7 
 617 038c A0F10101 	  sub r1,r0,#1 
 618 0390 4DF8048D 	  push {r8}
 619 0394 AAEB0708 	  sub r8,r10,r7 
 620 0398 00B5FFF7 	  _CALL cmove
 620      FEFF5DF8 
 620      04EB
 621 03a2 5DF8048B 	  pop {r8} 
 622 03a6 AAF1010A 	  sub r10,#1 
 623 03aa A7F10107 	  sub r7,#1
 624 03ae 80EA0000 	  eor r0,r0
 625 03b2 0BF80A00 	  strb r0,[r11,r10] 
 626 03b6 5846     	  mov r0,r11
 627 03b8 00B5FFF7 	  _CALL update_line 
 627      B7FF5DF8 
 627      04EB
 628 03c2 07F10100 	  add r0,r7,#1 
 629 03c6 00B5FFF7 	  _CALL cursor_x 
 629      FEFF5DF8 
 629      04EB
 630 03d0 CCE7     	  b readln_loop       
 631              	1: // at eol 
 632 03d2 00B5FFF7 	  _CALL bksp 
 632      E0FE5DF8 
 632      04EB
 633 03dc A7F10107 	  sub r7,#1
 634 03e0 AAF1010A 	  sub r10,#1
 635 03e4 C2E7     	  b readln_loop 
 636 03e6 0428     	2: cmp r0,#CTRL_D 
 637 03e8 09D1     	   bne 3f 
 638              	// delete whole line  
 639 03ea 00B5FFF7 	  _CALL delete_line  
 639      60FF5DF8 
 639      04EB
 640 03f4 87EA0707 	  eor r7,r7   
 641 03f8 8AEA0A0A 	  eor r10,r10
 642 03fc B6E7     	  b readln_loop 
 643 03fe 1228     	3: cmp r0,#CTRL_R    
 644 0400 11D1     	  bne 4f 
 645              	// edit last entered line if  available 
 646 0402 1AEA0A0A 	  ands r10,r10 
 647 0406 B1D1     	  bne readln_loop
 648 0408 5846     	  mov r0,r11  
 649 040a 00B5FFF7 	  _CALL strlen
 649      FEFF5DF8 
 649      04EB
 650 0414 8246     	  mov r10,r0
 651 0416 0746     	  mov r7,r0 
 652 0418 5846     	  mov r0,r11  
 653 041a 00B5FFF7 	  _CALL uart_putsz
 653      FEFF5DF8 
 653      04EB
ARM GAS  terminal.s 			page 22


 654 0424 A2E7     	  b readln_loop     
 655 0426 0F28     	4: cmp r0,#CTRL_O 
 656 0428 08D1     	   bne 5f 
 657 042a C8F10508 	   rsb r8,#5  
 658 042e 4046     	   mov r0,r8 
 659 0430 00B5FFF7 	   _CALL cursor_shape
 659      FEFF5DF8 
 659      04EB
 660 043a 97E7     	   b readln_loop 
 661 043c 1B28     	5: cmp r0,#ESC 
 662 043e 60D1     	   bne character  
 663 0440 00B5FFF7 	   _CALL get_escape
 663      DDFD5DF8 
 663      04EB
 664 044a 8228     	   cmp r0,#HOME 
 665 044c 07D1     	   bne try_end 
 666 044e 00B5FFF7 	   _CALL cursor_home
 666      FEFF5DF8 
 666      04EB
 667 0458 87EA0707 	   eor r7,r7  
 668 045c 86E7     	   b readln_loop 
 669              	try_end:
 670 045e 8328     	   cmp r0,#END 
 671 0460 08D1     	   bne try_left 
 672 0462 0AF10100 	   add r0,r10,#1
 673 0466 00B5FFF7 	   _CALL cursor_x 
 673      FEFF5DF8 
 673      04EB
 674 0470 5746     	   mov r7,r10 
 675 0472 7BE7     	   b readln_loop 
 676              	try_left: 
 677 0474 8028     	   cmp r0,#ARROW_LEFT
 678 0476 0CD1     	   bne try_right 
 679 0478 3F40     	   ands r7,r7 
 680 047a 3FF477AF 	   beq readln_loop
 681 047e 4FF00100 	   mov r0,#1 
 682 0482 00B5FFF7 	   _CALL move_left 
 682      DAFE5DF8 
 682      04EB
 683 048c A7F10107 	   sub r7,#1
 684 0490 6CE7     	   b readln_loop
 685              	try_right:
 686 0492 8128     	   cmp r0,#ARROW_RIGHT 
 687 0494 0CD1     	   bne try_suprim 
 688 0496 5745     	   cmp r7,r10
 689 0498 3FF468AF 	   beq readln_loop
 690 049c 07F10107 	   add r7,#1
 691 04a0 4FF00100 	   mov r0,#1  
 692 04a4 00B5FFF7 	   _CALL move_right  
 692      DBFE5DF8 
 692      04EB
 693 04ae 5DE7     	   b readln_loop 
 694              	try_suprim:
 695 04b0 8428     	   cmp r0,#SUP
 696 04b2 7FF45BAF 	   bne readln_loop 
 697              	// delete character at cursor 
 698 04b6 5745     	   cmp r7,r10
ARM GAS  terminal.s 			page 23


 699 04b8 3FF458AF 	   beq readln_loop 
 700 04bc 07EB0B01 	   add r1,r7,r11 
 701 04c0 01F10100 	   add r0,r1,#1 
 702 04c4 4DF8048D 	   push {r8}
 703 04c8 AAEB0708 	   sub r8,r10,r7
 704 04cc 00B5FFF7 	   _CALL cmove 
 704      FEFF5DF8 
 704      04EB
 705 04d6 5DF8048B 	   pop {r8}
 706 04da AAF1010A 	   sub r10,#1 
 707 04de 80EA0000 	   eor r0,r0 
 708 04e2 0BF80A00 	   strb r0,[r11,r10]
 709 04e6 5846     	   mov r0,r11 
 710 04e8 00B5FFF7 	   _CALL update_line
 710      1FFF5DF8 
 710      04EB
 711 04f2 07F10100 	   add  r0,r7,#1 
 712 04f6 00B5FFF7 	   _CALL cursor_x 
 712      FEFF5DF8 
 712      04EB
 713 0500 34E7     	   b readln_loop      
 714              	character:
 715 0502 5745     	   cmp r7,r10 
 716 0504 42D0     	   beq 5f // cursor at eol 
 717              	// cursor in middle of line 
 718              	// action depend on edit mode 
 719 0506 18EA0808 	  ands r8,r8  //check edit mode 
 720 050a 29D0     	  beq 2f 
 721              	// insert mode
 722 050c D145     	  cmp r9,r10 
 723 050e 3FF42DAF 	  beq readln_loop // buffer full  
 724 0512 2DE90101 	  push {r0,r8}
 725 0516 0BEB0700 	  add r0,r11,r7  // src 
 726 051a 00F10101 	  add r1,r0,#1   // dest 
 727 051e AAEB0708 	  sub r8,r10,r7  // move count 
 728 0522 00B5FFF7 	  _CALL cmove   
 728      FEFF5DF8 
 728      04EB
 729 052c BDE80101 	  pop {r0,r8}
 730 0530 0BF80700 	  strb r0,[r11,r7] 
 731 0534 07F10107 	  add r7,#1
 732 0538 0AF1010A 	  add r10,#1 
 733 053c 80EA0000 	  eor r0,r0 
 734 0540 0BF80A00 	  strb r0,[r11,r10]
 735 0544 5846     	  mov r0,r11   
 736 0546 00B5FFF7 	  _CALL update_line
 736      F0FE5DF8 
 736      04EB
 737 0550 07F10100 	  add r0,r7,#1 
 738 0554 00B5FFF7 	  _CALL cursor_x  
 738      FEFF5DF8 
 738      04EB
 739 055e 05E7     	  b readln_loop   
 740              	2: // overwrite mode 
 741 0560 0BF80700 	  strb r0,[r11,r7]
 742 0564 07F10107 	  add r7,#1
 743 0568 80EA0000 	  eor r0,r0 
ARM GAS  terminal.s 			page 24


 744 056c 0BF80A00 	  strb r0,[r11,r10] 
 745 0570 5846     	  mov r0,r11 
 746 0572 00B5FFF7 	  _CALL update_line 
 746      DAFE5DF8 
 746      04EB
 747 057c 07F10100 	  add r0,r7,#1 
 748 0580 00B5FFF7 	  _CALL cursor_x 
 748      FEFF5DF8 
 748      04EB
 749 058a EFE6     	  b readln_loop 
 750              	5: // cursor at eol, mode doesn't matter 
 751 058c CA45     	   cmp r10,r9 
 752 058e 00D4     	   bmi 6f 
 753 0590 ECE6     	   b readln_loop  // buffer full
 754              	6: // only accept char>=32  
 755 0592 2028     	   cmp r0,#SPACE 
 756 0594 3FF5EAAE 	   bmi readln_loop 
 757 0598 0BF80700 	   strb r0,[r11,r7] 
 758 059c 00B5FFF7 	   _CALL uart_putc
 758      FEFF5DF8 
 758      04EB
 759 05a6 07F10107 	   add r7,#1
 760 05aa BA46     	   mov r10,r7
 761 05ac DEE6     	   b readln_loop  
 762              	readln_exit:
 763 05ae 00B5FFF7 	  _CALL uart_putc 
 763      FEFF5DF8 
 763      04EB
 764 05b8 80EA0000 	  eor r0,r0 
 765 05bc 0BF80A00 	  strb r0,[r11,r10]
 766 05c0 5146     	  mov r1,r10  // line length
 767 05c2 5846     	  mov r0,r11  // *buffer  
 768 05c4 BDE8800F 	  pop {r7,r8,r9,r10,r11}
 769 05c8 7047     	  _RET 
 770              	
 771              	
 772              	/********************************
 773              	// print byte  in hexadecimal 
 774              	// on console
 775              	// input:
 776              	//   r0		byte to print
 777              	// output:
 778              	     to console 
 779              	   use:
 780              	     none 
 781              	******************************/
 782 05ca 00BF     	    _GBL_FUNC print_hex
 783 05cc 01B4     		push {r0} 
 784 05ce 4FEA1010 		lsr r0,#4  
 785 05d2 00B5FFF7 		_CALL  digit_to_char 
 785      FEFF5DF8 
 785      04EB
 786 05dc 00B5FFF7 		_CALL  uart_putc 
 786      FEFF5DF8 
 786      04EB
 787 05e6 01BC     	    pop {r0} 
 788 05e8 00B5FFF7 		_CALL  digit_to_char
ARM GAS  terminal.s 			page 25


 788      FEFF5DF8 
 788      04EB
 789 05f2 00B5FFF7 		_CALL  uart_putc
 789      FEFF5DF8 
 789      04EB
 790 05fc 4FF02000 		mov r0,#SPACE 
 791 0600 00B5FFF7 		_CALL  uart_putc  
 791      FEFF5DF8 
 791      04EB
 792 060a 7047     		_RET 
 793              	
 794              	/***********************************
 795              	// convert digit to character  
 796              	// input:
 797              	//   r0       digit to convert 
 798              	// output:
 799              	//   r0      hexdecimal character 
 800              	   use:
 801              	     none 
 802              	***********************************/
 803              	    _GBL_FUNC digit_to_char 
 804 060c 00F00F00 		and r0,#15 
 805 0610 0A28     		cmp r0,#10 
 806 0612 01D4     		bmi 1f  
 807 0614 00F10700 		add r0,#7
 808 0618 00F13000 	1:  add r0,#'0'  
 809 061c 7047     		_RET 
 810              	
 811 061e 00005400 	
 811      0000
ARM GAS  terminal.s 			page 26


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  terminal.s 			page 27


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
ARM GAS  terminal.s 			page 28


           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
ARM GAS  terminal.s 			page 29


      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:30     *ABS*:0000000000000020 F_CMD
      tbi_macros.inc:31     *ABS*:0000000000000040 F_IFUNC
      tbi_macros.inc:32     *ABS*:0000000000000080 F_CFUNC
      tbi_macros.inc:33     *ABS*:00000000000000c0 F_CONST
      tbi_macros.inc:39     *ABS*:0000000000000000 INP
      tbi_macros.inc:40     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:50     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:51     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:52     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:53     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:54     *ABS*:0000000000000005 TK_VAR
      tbi_macros.inc:55     *ABS*:0000000000000006 TK_ARRAY
      tbi_macros.inc:56     *ABS*:0000000000000007 TK_LPAREN
      tbi_macros.inc:57     *ABS*:0000000000000008 TK_RPAREN
      tbi_macros.inc:58     *ABS*:0000000000000009 TK_COMMA
      tbi_macros.inc:59     *ABS*:000000000000000a TK_SHARP
      tbi_macros.inc:60     *ABS*:000000000000000b TK_CMD
      tbi_macros.inc:61     *ABS*:000000000000000c TK_IFUNC
      tbi_macros.inc:62     *ABS*:000000000000000d TK_CFUNC
      tbi_macros.inc:63     *ABS*:000000000000000e TK_CONST
      tbi_macros.inc:64     *ABS*:000000000000000f TK_INTGR
      tbi_macros.inc:65     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:66     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:67     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:68     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:69     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:77     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:78     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:79     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:80     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:81     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:82     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:85     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:86     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:87     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:88     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:89     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:94     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:95     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:96     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:97     *ABS*:0000000000000003 ERR_MATH_OVF
      tbi_macros.inc:98     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:99     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:100    *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:101    *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:102    *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:103    *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:104    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:105    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:106    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:107    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:108    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:109    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:114    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:116    *ABS*:0000000000000004 CELL_SIZE
ARM GAS  terminal.s 			page 30


      tbi_macros.inc:122    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:128    *ABS*:0000000000000000 IN
      tbi_macros.inc:129    *ABS*:0000000000000004 IN_SAVED
      tbi_macros.inc:130    *ABS*:0000000000000008 COUNT
      tbi_macros.inc:131    *ABS*:000000000000000c BASICPTR
      tbi_macros.inc:132    *ABS*:0000000000000010 DATAPTR
      tbi_macros.inc:133    *ABS*:0000000000000014 DATA
      tbi_macros.inc:134    *ABS*:0000000000000018 DATALEN
      tbi_macros.inc:135    *ABS*:000000000000001c BASE
      tbi_macros.inc:136    *ABS*:0000000000000020 TICKS
      tbi_macros.inc:137    *ABS*:0000000000000024 TIMER
      tbi_macros.inc:138    *ABS*:0000000000000028 SEED
      tbi_macros.inc:139    *ABS*:000000000000002c FSPTR
      tbi_macros.inc:140    *ABS*:0000000000000030 FFREE
      tbi_macros.inc:141    *ABS*:0000000000000034 TXTBGN
      tbi_macros.inc:142    *ABS*:0000000000000038 TXTEND
      tbi_macros.inc:143    *ABS*:000000000000003c LOOP_DEPTH
      tbi_macros.inc:144    *ABS*:0000000000000040 ARRAY_SIZE
      tbi_macros.inc:145    *ABS*:0000000000000044 FLAGS
      tbi_macros.inc:146    *ABS*:0000000000000048 TAB_WIDTH
      tbi_macros.inc:147    *ABS*:000000000000004c RX_HEAD
      tbi_macros.inc:148    *ABS*:0000000000000050 RX_TAIL
      tbi_macros.inc:149    *ABS*:0000000000000054 RX_QUEUE
      tbi_macros.inc:150    *ABS*:0000000000000064 VARS
      tbi_macros.inc:151    *ABS*:0000000000000004 CELLL
      tbi_macros.inc:152    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:153    *ABS*:00000000000000cc FREE_RAM
          terminal.s:60     .text:0000000000000000 $t
          terminal.s:60     .text:0000000000000000 get_escape
          terminal.s:102    .text:0000000000000054 convert_table
                            *ABS*:0000000000000084 SUP
          terminal.s:96     *ABS*:0000000000000080 ARROW_LEFT
          terminal.s:97     *ABS*:0000000000000081 ARROW_RIGHT
          terminal.s:98     *ABS*:0000000000000082 HOME
          terminal.s:99     *ABS*:0000000000000083 END
          terminal.s:102    .text:0000000000000054 $d
          terminal.s:117    .text:0000000000000060 uart_puts
          terminal.s:117    .text:0000000000000060 $t
          terminal.s:143    .text:000000000000008c uart_putsz
          terminal.s:165    .text:00000000000000ac digit
          terminal.s:194    .text:00000000000000d8 itoa
          terminal.s:227    .text:000000000000013e pad
          terminal.s:227    .text:000000000000013e $d
          terminal.s:239    .text:0000000000000144 print_int
          terminal.s:239    .text:0000000000000142 $t
          terminal.s:255    .text:000000000000015c cursor_shape
          terminal.s:318    .text:00000000000001dc send_escape
          terminal.s:343    .text:0000000000000200 send_parameter
          terminal.s:275    .text:0000000000000198 bksp
          terminal.s:294    .text:00000000000001c4 delete_nchar
          terminal.s:371    .text:000000000000023c move_left
          terminal.s:387    .text:0000000000000260 move_right
          terminal.s:403    .text:0000000000000284 spaces
          terminal.s:427    .text:00000000000002a8 insert_char
          terminal.s:467    .text:00000000000002ac delete_under
          terminal.s:507    .text:00000000000002b0 delete_line
          terminal.s:545    .text:000000000000030c cursor_home
ARM GAS  terminal.s 			page 31


          terminal.s:528    .text:00000000000002e8 cursor_x
          terminal.s:563    .text:000000000000032c update_line
          terminal.s:592    .text:0000000000000344 readln
          terminal.s:602    .text:000000000000036c readln_loop
          terminal.s:762    .text:00000000000005ae readln_exit
          terminal.s:714    .text:0000000000000502 character
          terminal.s:669    .text:000000000000045e try_end
          terminal.s:676    .text:0000000000000474 try_left
          terminal.s:685    .text:0000000000000492 try_right
          terminal.s:694    .text:00000000000004b0 try_suprim
          terminal.s:782    .text:00000000000005cc print_hex
          terminal.s:803    .text:000000000000060c digit_to_char
          terminal.s:811    .text:000000000000061e $d
          terminal.s:811    .text:0000000000000620 $d

UNDEFINED SYMBOLS
uart_getc
uart_putc
_pad
cmove
strlen
