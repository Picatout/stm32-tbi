ARM GAS  terminal.s 			page 1


   1              	////
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	//--------------------------------------
  19              	//------------------------------
  20              	// This file is for functions 
  21              	// interfacing with VT100 terminal
  22              	// emulator.
  23              	// except for uart_getc and uart_putc which
  24              	// are in stm32-tbi.s 
  25              	// exported functions:
  26              	//   uart_puts 
  27              	//   readln 
  28              	//   spaces 
  29              	//   digit_to_char 
  30              	//------------------------------
  31              	
  32              	  .syntax unified
  33              	  .cpu cortex-m3
  34              	  .fpu softvfp
  35              	  .thumb
  36              	
  37              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
ARM GAS  terminal.s 			page 2


  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
ARM GAS  terminal.s 			page 3


  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
ARM GAS  terminal.s 			page 4


 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
 143              	
 144              	/* system control register */
 145              	.equ SCR_BASE_ADR,0xE000ED10
 146              	.equ SCR_SLEEPONEXIT,(1<<1)
 147              	.equ SCR_SLEEPDEEP,(1<<2)
 148              	.equ SCR_SEVONPEND,(1<<4)
 149              	
 150              	/* power control register */
 151              	.equ PWR_CR_ADR,0x40007000
 152              	.equ PWR_CR_LPDS,(1<<0)
 153              	.equ PWR_CR_PDDS,(1<<1)
 154              	.equ PWR_CR_CWUF,(1<<2)
 155              	.equ PWR_CR_CSBF,(1<<3)
 156              	.equ PWR_CR_PVDE,(1<<4)
 157              	.equ PWR_CR_PLS,(1<<5)
 158              	.equ PWR_CR_DBP,(1<<8)
 159              	
 160              	/* power control and statut register */
 161              	.equ PWR_CSR_ADR,0x40007004 
 162              	.equ PWR_CSR_WUF,(1<<0)
 163              	.equ PWR_CSR_SBF,(1<<1)
 164              	.equ PWR_CSR_PVDO,(1<<2)
 165              	.equ PWR_CSR_EWUP,(1<<8)
 166              	
  38              	  .include "ascii.inc"
   1              	////
   2              	// Copyright Jacques Deschênes 2021
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	////
  18              	
  19              	//-------------------------------------------------------
  20              	//     ASCII control  values
  21              	//     CTRL_x   are VT100 keyboard values  
  22              	// REF: https://en.wikipedia.org/wiki/ASCII    
  23              	//-------------------------------------------------------
  24              		.equ CTRL_A ,  1
ARM GAS  terminal.s 			page 5


  25              		.equ SOH, CTRL_A  // start of heading 
  26              		.equ CTRL_B ,  2
  27              		.equ STX, CTRL_B  // start of text 
  28              		.equ CTRL_C ,  3
  29              		.equ ETX, CTRL_C  // end of text 
  30              		.equ CTRL_D ,  4
  31              		.equ EOT, CTRL_D  // end of transmission 
  32              		.equ CTRL_E ,  5
  33              		.equ ENQ, CTRL_E  // enquery 
  34              		.equ CTRL_F ,  6
  35              		.equ ACK, CTRL_F  // acknowledge
  36              		.equ CTRL_G ,  7
  37              		.equ BELL ,  7    // vt100 terminal generate a sound.
  38              		.equ CTRL_H ,  8  
  39              		.equ BS ,  8     // back space 
  40              		.equ CTRL_I ,  9
  41              		.equ TAB ,  9     // horizontal tabulation
  42              		.equ CTRL_J ,  10 
  43              		.equ LF ,  10     // line feed
  44              		.equ CTRL_K ,  11
  45              		.equ VT ,  11     // vertical tabulation 
  46              		.equ CTRL_L ,  12
  47              		.equ FF ,  12      // new page
  48              		.equ CTRL_M ,  13
  49              		.equ CR ,  13      // carriage return 
  50              		.equ CTRL_N ,  14
  51              		.equ SO, CTRL_N    // shift out 
  52              		.equ CTRL_O ,  15
  53              		.equ SI, CTRL_O    // shift in 
  54              		.equ CTRL_P ,  16
  55              		.equ DLE, CTRL_P   // data link escape 
  56              		.equ CTRL_Q ,  17
  57              		.equ DC1, CTRL_Q   // device control 1 
  58              		.equ XON, DC1 
  59              		.equ CTRL_R ,  18
  60              		.equ DC2, CTRL_R   // device control 2 
  61              		.equ CTRL_S ,  19
  62              		.equ DC3, CTRL_S   // device control 3
  63              		.equ XOFF, DC3 
  64              		.equ CTRL_T ,  20
  65              		.equ DC4, CTRL_T   // device control 4 
  66              		.equ CTRL_U ,  21
  67              		.equ NAK, CTRL_U   // negative acknowledge
  68              		.equ CTRL_V ,  22
  69              		.equ SYN, CTRL_V   // synchronous idle 
  70              		.equ CTRL_W ,  23
  71              		.equ ETB, CTRL_W   // end of transmission block
  72              		.equ CTRL_X ,  24
  73              		.equ CAN, CTRL_X   // cancel 
  74              		.equ CTRL_Y ,  25
  75              		.equ EM, CTRL_Y    // end of medium
  76              		.equ CTRL_Z ,  26
  77              		.equ SUB, CTRL_Z   // substitute 
  78              		.equ EOF, SUB      // end of text file in MSDOS 
  79              		.equ ESC ,  27     // escape 
  80              		.equ FS, 28        // file separator 
  81              		.equ GS, 29        // group separator 
ARM GAS  terminal.s 			page 6


  82              		.equ RS, 30  // record separator 
  83              		.equ US, 31  // unit separator 
  84              		.equ SPACE ,  32
  85              		.equ COMMA ,  44 
  86              		.equ SHARP ,  35
  87              		.equ TICK ,  39
  39              	  .include "tbi_macros.inc"
   1              	//---------------------------------------------------------------------------
   2              	// Copyright Jacques Deschênes 2021 
   3              	// This file is part of stm32-tbi 
   4              	//
   5              	//     stm32-tbi is free software: you can redistribute it and/or modify
   6              	//     it under the terms of the GNU General Public License as published by
   7              	//     the Free Software Foundation, either version 3 of the License, or
   8              	//     (at your option) any later version.
   9              	//
  10              	//     stm32-tbi is distributed in the hope that it will be useful,
  11              	//     but WITHOUT ANY WARRANTY// without even the implied warranty of
  12              	//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	//     GNU General Public License for more details.
  14              	//
  15              	//     You should have received a copy of the GNU General Public License
  16              	//     along with stm32-tbi.  If not, see <http://www.gnu.org/licenses/>.
  17              	//
  18              	//---------------------------------------------------------------------------
  19              	
  20              	  .equ  STACK_SIZE,0x100
  21              	  .equ  STACK_EMPTY,RAM_END
  22              	  .equ  STACK_FULL, (RAM_END - STACK_SIZE)
  23              	  .equ  TIB_SIZE,80 
  24              	  .equ  PAD_SIZE,128 
  25              	  .equ RX_QUEUE_SIZE,16
  26              	
  27              	.equ DEFAULT_TAB_WIDTH,4 // default tabulation width 
  28              	.equ EOF,0xff // end of file marker 
  29              	
  30              	//--------------------------------------
  31              	//   constantes related to Arduino 
  32              	//   API mapping 
  33              	//-------------------------------------
  34              	  .equ INP,0
  35              	  .equ OUTP,1 
  36              	
  37              	//--------------------------------------
  38              	//       token attribute
  39              	//--------------------------------------
  40              	// bits 4:5 identify token group 
  41              	// 0x0n -> miscelinous 
  42              	// 0x1n -> +|- operators 
  43              	// 0x2n -> *|/|% operators
  44              	// 0x3n -> relational operators 
  45              	  .equ TK_NONE,0       // not a token 
  46              	  .equ TK_COLON,1      // command separator ':' 
  47              	  .equ TK_QSTR,2     // quoted string  
  48              	  .equ TK_CHAR,3       // ASCII character 
  49              	  .equ TK_VAR,4      // variable index 
  50              	  .equ TK_ARRAY,5     // array variable '@' 
ARM GAS  terminal.s 			page 7


  51              	  .equ TK_LPAREN,6     // left parenthesis '('
  52              	  .equ TK_RPAREN,7     // right parenthesis ')'
  53              	  .equ TK_COMMA,8     // item separator ',' 
  54              	  .equ TK_SHARP,9     // print colon width '#' 
  55              	  .equ TK_CMD,0xa      // BASIC command   
  56              	  .equ TK_IFUNC,0xb    // BASIC integer function
  57              	  .equ TK_CFUNC,0xc    // BASIC character function
  58              	  .equ TK_CONST,0xd    // BASIC constant 
  59              	  .equ TK_INTGR,0xe    // 32 bits integer 
  60              	  .equ TK_BAD,0xf      // bad value 
  61              	  .equ TK_PLUS,0x10    // addition operator '+'
  62              	  .equ TK_MINUS,0x11   // subtraction operator '-'
  63              	  .equ TK_MULT,0x20    // multiplication operator '*'
  64              	  .equ TK_DIV,0x21     // division operator '/'
  65              	  .equ TK_MOD,0x22     // modulo operator '%'
  66              	
  67              	// don't change these token values 
  68              	// values chosen to be used as a mask.
  69              	// bit 7   1 for dictionary words else 0 
  70              	// bits 6  always 0 
  71              	// bits 5:4 identify group 
  72              	// bits 3:0 token identifier inside group  
  73              	  .equ TK_GT,0x31      // relation operator '>'
  74              	  .equ TK_EQUAL,0x32   // assignment or relation operator '='
  75              	  .equ TK_GE,0x33      // relation operator '>='
  76              	  .equ TK_LT,0x34      // relation operator '<'
  77              	  .equ TK_LE,0x36      // relation operator '<='
  78              	  .equ TK_NE,0x35      // relation operator '<>' not equal 
  79              	// token groups 
  80              	  .equ TK_GRP_MASK,0x30 // groups bits selector 
  81              	  .equ TK_GRP_MISC,0x00 // miscelinous group 
  82              	  .equ TK_GRP_ADD,0x10  // additive operators
  83              	  .equ TK_GRP_MULT,0x20 // multiplicative operators
  84              	  .equ TK_GRP_RELOP,0x30 //relational operators. 
  85              	  .equ CMD_END,2 
  86              	
  87              	//--------------------------------------
  88              	//   error codes 
  89              	//--------------------------------------
  90              	  .equ ERR_NONE,0
  91              	  .equ ERR_MEM_FULL,1 
  92              	  .equ ERR_SYNTAX,2
  93              	  .equ ERR_MATH_OVF,3
  94              	  .equ ERR_DIV0,4 
  95              	  .equ ERR_NO_LINE,5
  96              	  .equ ERR_RUN_ONLY,6
  97              	  .equ ERR_CMD_ONLY,7
  98              	  .equ ERR_DUPLICATE,8
  99              	  .equ ERR_NOT_FILE,9
 100              	  .equ ERR_BAD_VALUE,10
 101              	  .equ ERR_NO_ACCESS,11
 102              	  .equ ERR_NO_DATA,12 
 103              	  .equ ERR_NO_PROG,13
 104              	  .equ ERR_NO_FSPACE,14
 105              	  .equ ERR_BUF_FULL,15
 106              	  .equ ERR_CANT_PROG,16
 107              	  
ARM GAS  terminal.s 			page 8


 108              	
 109              	//--------------------------------------
 110              	//   assembler flags 
 111              	//-------------------------------------
 112              	.equ MATH_OVF,0 // if 1 then stop on math overflow 
 113              	
 114              	.equ CELL_SIZE,4 
 115              	
 116              	
 117              	//-------------------------------
 118              	//  macros used to help debugging
 119              	//-------------------------------
 120              	  .equ DEBUG,0
 121              	
 122              	    UPP .req r4  // base address system variables 
 123              	    VADR .req r5  // address FOR loop variable 
 124              	    LIMIT .req r6   // LOOP limit 
 125              	    INCR  .req  r7  // LOOP increment 
 126              	    T1  .req r8     // temporary register 
 127              	    T2  .req r9     // temporary register 
 128              	    IN  .req r10    //  index in text line or token list 
 129              	    BPTR .req r11   //  buffer address or BASIC line address 
 130              	    DP   .req r12   //  parameter stack pointer 
 131              	
 132              	/***************************
 133              	  SYSTEM variables offset 
 134              	  from UPP  
 135              	***************************/ 
 136              	
 137              	  .equ IN_SAVED,0 // set by get_token before parsing next token, used by unget_token
 138              	  .equ COUNT, IN_SAVED+4  // current BASIC line length and tib text length  
 139              	  .equ BASICPTR,COUNT+4 // point to current BASIC line address.
 140              	  .equ DATAPTR, BASICPTR+4 // point to DATA address
 141              	  .equ DATA,DATAPTR+4 // index to next data item 
 142              	  .equ DATALEN, DATA+4 // length of data line 
 143              	  .equ BASE,DATALEN+4 // nemeric base used to print integer 
 144              	  .equ TICKS,BASE+4 // milliseconds ticks counter (see Timer4UpdateHandler)
 145              	  .equ TIMER,TICKS+4 //  milliseconds count down timer 
 146              	  .equ SEED,TIMER+4  // xorshift 16 seed x  used by RND() function 
 147              	  .equ FSPTR,SEED+4 //  pointer used by file system
 148              	  .equ FFREE,FSPTR+4 // flash free address // file system free space pointer
 149              	  .equ TXTBGN,FFREE+4 // tokenized BASIC text beginning address 
 150              	  .equ TXTEND,TXTBGN+4 // tokenized BASIC text end address 
 151              	  .equ LOOP_DEPTH,TXTEND+4  // level of nested loop. Conformity check   
 152              	  .equ ARRAY_SIZE,LOOP_DEPTH+4 // array size, free RAM left after BASIC code.  
 153              	  .equ FLAGS,ARRAY_SIZE+4 // various boolean flags
 154              	  .equ TAB_WIDTH,FLAGS+4 // print colon width (default 4)
 155              	  .equ RX_HEAD,TAB_WIDTH+4 // rx_queue head pointer
 156              	  .equ RX_TAIL,RX_HEAD+4 // rx1_queue tail pointer  
 157              	  .equ RX_QUEUE,RX_TAIL+4 // UART1 receive circular queue 
 158              	  .equ VARS,RX_QUEUE+RX_QUEUE_SIZE // BASIC variables 
 159              	  .equ VARS_SIZE, 4*26 // space used by 26 BASIC variables (A-Z)
 160              	  .equ ARRAY_ADR,VARS+VARS_SIZE // array address at bottom of pad  
 161              	  .equ BASIC_START,ARRAY_ADR+4 // BASIC area start after variables 
 162              	
 163              	/* flags used by BASIC interpreter */ 
 164              		.equ FRUN,(1<<0) // programm running
ARM GAS  terminal.s 			page 9


 165              		.equ FTRAP,(1<<1) // inside trap handler 
 166              		.equ FLOOP,(1<<2) // FOR loop in preparation 
 167              		.equ FSTOP,(1<<3) // program stopped  
 168              		.equ FBREAK,(1<<4) // break point flag 
 169              		.equ FCOMP,(1<<5)  // compiling flags 
 170              		.equ FAUTORUN,(1<<6) // auto start program running 
 171              	
 172              		.equ AUTORUN_NAME,0x8001C00  // address in FLASH  where auto run file name is saved 
 173              	  
 174              	  .equ FIRST_DATA_ITEM,6 // first DATA item offset on line.
 175              		.equ MAX_LINENO,0x7fff// BASIC maximum line number 
 176              	
 177              	/***********************************************
 178              	*       MACROS
 179              	***********************************************/
 180              		.macro _CALL fn /* low level routine call */ 
 181              	 	PUSH {LR}
 182              		BL \fn  
 183              	  POP {LR}
 184              		.endm
 185              		
 186              		.macro	_RET /* return from subroutine */
 187              		BX	LR
 188              		.endm
 189              	
 190              		.macro _MOV32 REG LITERAL   /* load register with 32 bits literal */
 191              		MOV \REG, #\LITERAL&0xffff
 192              		MOVT \REG, #\LITERAL>>16
 193              		.endm
 194              	
 195              	// local function header 
 196              	  .macro _FUNC label 
 197              	  .p2align 2 
 198              	  .type \label, %function  
 199              	\label:
 200              	  .endm 
 201              	
 202              	// global function header 
 203              	  .macro _GBL_FUNC label 
 204              	  .global \label 
 205              	  _FUNC \label 
 206              	  .endm 
 207              	
 208              	
 209              	/********************************
 210              	    dictionary structure
 211              	------------------------------
 212              	 format:
 213              	   link:    
 214              	   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
 215              	   cmd_name: 31 characters max 
 216              	   cmd_index: 2 bytes 
 217              	**********************************/
 218              		.macro _dict_entry tok_type,name,cmd_idx 
 219              	  .word LINK 
 220              	  .word \cmd_idx 
 221              		.word \tok_type  	
ARM GAS  terminal.s 			page 10


 222              		.equ LINK,.
 223              		.asciz "\name"
 224              		.p2align 2 
 225              		.endm 
 226              	
 227              	  // pop parameter in register 
 228              	  .macro _POP  reg 
 229              	  ldmia  DP!,{\reg}
 230              	  .endm 
 231              	
 232              	  // push register on parameter stack 
 233              	  .macro _PUSH reg 
 234              	  stmdb DP!,{\reg}
 235              	  .endm 
 236              	
 237              	  // drop n parameters on dstack 
 238              	  .macro _DROP n
 239              	  mov r0,#4*\n
 240              	  add DP,R0 
 241              	  .endm 
 242              	
 243              	  // back to previous token in list 
 244              	  .macro _UNGET_TOKEN 
 245              	  ldr IN,[UPP,#IN_SAVED]
 246              	  ldr BPTR,[UPP,#BASICPTR] 
 247              	  .endm 
 248              	
 249              	 // create a text data 
 250              	 .macro _TEXT label,text
 251              	 \label: .asciz "\text"
 252              	 .p2align 2 
 253              	 .endm 
 254              	
 255              	// command line only 
 256              	  .macro _CLO 
 257              	  ldr r0,[UPP,#FLAGS]
 258              	  tst r0,#FRUN 
 259              	  beq 1f 
 260              	  mov r0,#ERR_CMD_ONLY
 261              	  b tb_error
 262              	1: 
 263              	  .endm 
 264              	
 265              	// run time only 
 266              	  .macro _RTO 
 267              	  ldr r0,[UPP,#FLAGS]
 268              	  tst r0,#FRUN 
 269              	  bne 1f 
 270              	  mov r0,#ERR_CMD_ONLY
 271              	  b tb_error
 272              	1:
 273              	  .endm 
 274              	
  40              	
  41              	
  42              	    .section .text, "ax", %progbits 
  43              	
ARM GAS  terminal.s 			page 11


  44              	
  45              	/*********************************
  46              	// receive ANSI ESC 
  47              	// sequence and convert it
  48              	// to a single character code 
  49              	// in range {128..255}
  50              	// This is called after receiving 
  51              	// ESC character. 
  52              	// ignored sequence return 0 
  53              	  input:
  54              	    none
  55              	  output:
  56              	    r0    converted character 
  57              	  use: 
  58              	    r2
  59              	***********************************/
  60              	    _FUNC get_escape
  61 0000 04B4     	    push {r2}
  62 0002 00B5FFF7 	    _CALL uart_getc 
  62      FEFF5DF8 
  62      04EB
  63 000c 5B28     	    cmp r0,#'[ // this character is expected after ESC 
  64 000e 03D0     	    beq 1f
  65 0010 80EA0000 	0:  eor r0,r0
  66 0014 04BC     	    pop {r2}
  67 0016 7047     	    _RET
  68 0018 00B5FFF7 	1: _CALL  uart_getc 
  68      FEFF5DF8 
  68      04EB
  69 0022 DFF84C27 	    ldr r2,=convert_table
  70              	2:
  71 0026 1178     	    ldrb r1,[r2]
  72 0028 0940     	    ands r1,r1 
  73 002a F1D0     	    beq 0b 
  74 002c 8842     	    cmp r0,r1 
  75 002e 02D0     	    beq 4f
  76 0030 02F10202 	    add r2,#2
  77 0034 F7E7     	    b 2b
  78 0036 02F10102 	4:  add r2,#1  
  79 003a 1078     	    ldrb r0,[r2]
  80 003c B0F1840F 	    cmp r0,#SUP
  81 0040 06D1     	    bne 5f
  82 0042 01B4     	    push {r0}  
  83 0044 00B5FFF7 	    _CALL  uart_getc
  83      FEFF5DF8 
  83      04EB
  84 004e 01BC     	    pop {r0}
  85              	5:
  86 0050 04BC     	    pop {r2}
  87 0052 7047     	    _RET 
  88              	
  89              	//-----------------------------
  90              	//  constants replacing 
  91              	//  ANSI sequence received 
  92              	//  from terminal.
  93              	//  These are the ANSI sequences
  94              	//  accepted by function readln
ARM GAS  terminal.s 			page 12


  95              	//------------------------------
  96              	    .equ ARROW_LEFT,128
  97              	    .equ ARROW_RIGHT,129
  98              	    .equ HOME,130
  99              	    .equ END,131
 100              	    .equ SUP,132 
 101              	
 102 0054 43814480 	convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',END,'3',SUP,0,0
 102      48824683 
 102      33840000 
 103              	
 104              	/******************************
 105              	    uart_puts 
 106              	    print zero terminate string 
 107              	 
 108              	  input:
 109              	    r0  *asciz 
 110              	  output:
 111              	    none 
 112              	  use:
 113              	    r0  char to send 
 114              	    T1  *asciz 
 115              	******************************/
 116              	    _GBL_FUNC uart_puts 
 117 0060 4DF8048D 	    push {T1}
 118 0064 8046     	    mov T1,r0 
 119 0066 18F8010B 	1:  ldrb r0,[T1],#1
 120 006a 28B1     	    cbz r0,9f 
 121 006c 00B5FFF7 	    _CALL uart_putc 
 121      FEFF5DF8 
 121      04EB
 122 0076 F6E7     	    b 1b 
 123 0078 5DF8048B 	9:  pop {T1}
 124 007c 7047     	    _RET 
 125              	
 126              	/***********************************
 127              	   digit  
 128              	   convert least digit of uint32 to ASCII 
 129              	    input:
 130              	        r0    uint32
 131              	        r1    base   
 132              	    output:
 133              	        r0    r0%base+'0'  
 134              	        r1    quotient 
 135              	    use:
 136              	        T1 
 137              	***********************************/
 138 007e 00BF     	    _FUNC digit
 139 0080 4DF8048D 	    push {T1}
 140 0084 01B4     	    push {r0}
 141 0086 8846     	    mov T1,r1  
 142 0088 B0FBF8F0 	    udiv r0,T1
 143 008c 0146     	    mov r1,r0  
 144 008e 08FB00F0 	    mul  r0,T1 
 145 0092 5DF8048B 	    pop {T1}
 146 0096 A8EB0000 	    sub r0,T1,r0
 147 009a 0A28     	    cmp r0,#10  
ARM GAS  terminal.s 			page 13


 148 009c 01D4     	    bmi 1f 
 149 009e 00F10700 	    add r0,#7
 150 00a2 00F13000 	1:  add r0,#'0'  
 151 00a6 5DF8048B 	    pop {T1}
 152 00aa 7047     	    _RET 
 153              	
 154              	/**********************************
 155              	    itoa 
 156              	    convert integer to string
 157              	    input:
 158              	      r0   integer 
 159              	      r1   base 
 160              	    output:
 161              	      r0   *string 
 162              	    use: 
 163              	      r7   integer 
 164              	      T1   base 
 165              	      T2   *pad 
 166              	*********************************/ 
 167              	    _GBL_FUNC itoa
 168 00ac 2DE98003 	    push {r7,T1,T2}
 169 00b0 0746     	    mov r7,r0
 170 00b2 8846     	    mov T1,r1  
 171 00b4 DFF87890 	    ldr T2,pad 
 172 00b8 09F18009 	    add T2,#PAD_SIZE 
 173 00bc 80EA0000 	    eor r0,r0 
 174 00c0 09F8010D 	    strb r0,[T2,#-1]!
 175 00c4 00F12000 	    add r0,#SPACE 
 176 00c8 09F8010D 	    strb r0,[T2,#-1]!
 177 00cc 80EA0000 	    eor r0,r0 
 178 00d0 B8F10A0F 	    cmp T1,#10 
 179 00d4 04D1     	    bne 0f 
 180 00d6 17F00040 	    ands r0,r7,#(1<<31)
 181 00da 01D0     	    beq 0f 
 182 00dc C7F10007 	    rsb r7,#0 
 183 00e0 01B4     	0:  push {r0}
 184 00e2 3846     	1:  mov r0,r7 
 185 00e4 4146     	    mov r1,T1 
 186 00e6 00B5FFF7 	    _CALL digit 
 186      CAFF5DF8 
 186      04EB
 187 00f0 09F8010D 	    strb r0,[T2,#-1]!
 188 00f4 0940     	    ands r1,r1 
 189 00f6 01D0     	    beq  2f   
 190 00f8 0F46     	    mov r7,r1 
 191 00fa F2E7     	    b 1b 
 192 00fc 01BC     	2:  pop {r0} 
 193 00fe 0040     	    ands r0,r0 
 194 0100 03D0     	    beq 3f 
 195 0102 4FF02D00 	    mov r0,#'-'
 196 0106 09F8010D 	    strb r0,[T2,#-1]!
 197 010a B8F1100F 	3:  cmp T1,#16 
 198 010e 04D1     	    bne 4f 
 199 0110 4FF02400 	    mov r0,#'$' 
 200 0114 09F8010D 	    strb r0,[T2,#-1]!
 201 0118 06E0     	    b 9f 
 202 011a B8F1020F 	4:  cmp T1,#2 
ARM GAS  terminal.s 			page 14


 203 011e 03D1     	    bne 9f 
 204 0120 4FF02600 	    mov r0,#'&'
 205 0124 08F8010D 	    strb r0,[T1,#-1]!
 206 0128 4846     	9:  mov r0,T2 
 207 012a BDE88003 	    pop {r7,T1,T2} 
 208 012e 7047     	    _RET  
 209 0130 00000000 	pad: .word _pad 
 210              	
 211              	/*****************************
 212              	    print_int 
 213              	  input:
 214              	    r0   integer to print 
 215              	    r1   conversion base 
 216              	  output:
 217              	    none 
 218              	  use:
 219              	    none 
 220              	*****************************/
 221              	    _GBL_FUNC print_int 
 222 0134 00B5FFF7 	    _CALL itoa
 222      FEFF5DF8 
 222      04EB
 223 013e 00B5FFF7 	    _CALL uart_puts
 223      FEFF5DF8 
 223      04EB
 224 0148 7047     	    _RET 
 225              	
 226              	/********************************
 227              	// print byte  in hexadecimal 
 228              	// on console
 229              	// input:
 230              	//   r0		byte to print
 231              	// output:
 232              	     none 
 233              	   use:
 234              	     none 
 235              	******************************/
 236 014a 00BF     	    _GBL_FUNC print_hex
 237 014c 01B4     		push {r0} 
 238 014e 4FEA1010 	  lsr r0,#4  
 239 0152 00B5FFF7 		_CALL  digit_to_char 
 239      FEFF5DF8 
 239      04EB
 240 015c 00B5FFF7 		_CALL  uart_putc 
 240      FEFF5DF8 
 240      04EB
 241 0166 01BC     	    pop {r0} 
 242 0168 00B5FFF7 		_CALL  digit_to_char
 242      FEFF5DF8 
 242      04EB
 243 0172 00B5FFF7 		_CALL  uart_putc
 243      FEFF5DF8 
 243      04EB
 244 017c 4FF02000 		mov r0,#SPACE 
 245 0180 00B5FFF7 		_CALL  uart_putc  
 245      FEFF5DF8 
 245      04EB
ARM GAS  terminal.s 			page 15


 246 018a 7047     		_RET 
 247              	
 248              	/***********************************
 249              	// convert digit to character  
 250              	// input:
 251              	//   r0       digit to convert 
 252              	// output:
 253              	//   r0      hexdecimal character 
 254              	   use:
 255              	     none 
 256              	***********************************/
 257              	    _GBL_FUNC digit_to_char 
 258 018c 00F00F00 		and r0,#15 
 259 0190 0A28     		cmp r0,#10 
 260 0192 01D4     		bmi 1f  
 261 0194 00F10700 		add r0,#7
 262 0198 00F13000 	1:  add r0,#'0'  
 263 019c 7047     		_RET 
 264              	
 265              	
 266              	/*****************************
 267              	    cursor_shape 
 268              	    change cursor shape 
 269              	
 270              	  input:
 271              	    r0      shape {0..6}
 272              	  output:
 273              	    none 
 274              	  use:
 275              	    T1    shape
 276              	*******************************/
 277 019e 00BF     	    _GBL_FUNC cursor_shape
 278 01a0 4DF8048D 	    push {T1}
 279 01a4 00B500F0 	    _CALL send_escape
 279      3BF85DF8 
 279      04EB
 280 01ae 00B500F0 	    _CALL send_parameter 
 280      48F85DF8 
 280      04EB
 281 01b8 4FF02000 	    mov r0,#SPACE 
 282 01bc 00B5FFF7 	    _CALL uart_putc 
 282      FEFF5DF8 
 282      04EB
 283 01c6 4FF07100 	    mov r0,#'q' 
 284 01ca 00B5FFF7 	    _CALL uart_putc 
 284      FEFF5DF8 
 284      04EB
 285 01d4 5DF8048B 	    pop {T1}
 286 01d8 7047     	    _RET 
 287              	
 288              	
 289              	//---------------------------
 290              	// delete character at left 
 291              	// of cursor on terminal 
 292              	// input:
 293              	//   none 
 294              	// output:
ARM GAS  terminal.s 			page 16


 295              	//	none 
 296              	//---------------------------
 297 01da 00BF     	    _FUNC bksp
 298 01dc 4FF00800 		mov r0,#BS 
 299 01e0 00B5FFF7 		_CALL  uart_putc 
 299      FEFF5DF8 
 299      04EB
 300 01ea 4FF02000 		mov r0,#SPACE 
 301 01ee 00B5FFF7 		_CALL  uart_putc 
 301      FEFF5DF8 
 301      04EB
 302 01f8 4FF00800 		mov r0,#BS 
 303 01fc 00B5FFF7 		_CALL  uart_putc 
 303      FEFF5DF8 
 303      04EB
 304 0206 7047     		_RET 
 305              	
 306              	//---------------------------
 307              	// delete n character left of cursor 
 308              	// at terminal.
 309              	// input: 
 310              	//   r0   number of characters to delete.
 311              	// output:
 312              	//    none
 313              	// use:
 314              	//   r2   count  
 315              	//--------------------------	
 316              	    _FUNC delete_nchar
 317 0208 48B1     		cbz r0,2f 
 318 020a 04B4     	    push {r2}
 319 020c 0246     	    mov r2,r0  
 320              	1:	
 321 020e 00B5FFF7 	    _CALL  bksp 
 321      E4FF5DF8 
 321      04EB
 322 0218 013A     	    subs r2,#1 
 323 021a F8D1     		bne 1b 
 324 021c 04BC     	    pop {r2}
 325 021e 7047     	2:	_RET
 326              	
 327              	
 328              	//--------------------------
 329              	// send ANSI escape sequence
 330              	// ANSI: ESC[
 331              	// note: ESC is ASCII 27
 332              	//       [   is ASCII 91 
 333              	// input:
 334              	//      none 
 335              	// output:
 336              	//      none 
 337              	// use:
 338              	//      r0 
 339              	//-------------------------- 
 340              	    _FUNC send_escape
 341 0220 01B4     		push {r0}
 342 0222 4FF01B00 	    mov r0,#ESC 
 343 0226 00B5FFF7 		_CALL  uart_putc 
ARM GAS  terminal.s 			page 17


 343      FEFF5DF8 
 343      04EB
 344 0230 4FF05B00 		mov r0,#'['
 345 0234 00B5FFF7 		_CALL  uart_putc 
 345      FEFF5DF8 
 345      04EB
 346 023e 01BC     		pop {r0}
 347 0240 7047     	    _RET 
 348              	
 349              	
 350              	/*****************************
 351              	 send ANSI parameter value
 352              	 ANSI parameter values are 
 353              	 sent as ASCII charater 
 354              	 not as binary number.
 355              	 this routine 
 356              	 convert binary number to 
 357              	 ASCII send it.
 358              	 input: 
 359              	 	r0   parameter  
 360              	 output:
 361              	   none 
 362              	 use:
 363              	    T1   digit counter 
 364              	***************************/
 365 0242 00BF     	    _FUNC send_parameter
 366 0244 4DF8048D 	    push {T1}
 367 0248 4FF00008 	    mov T1,#0
 368 024c 4FF00A01 	1:  mov r1,#10  
 369 0250 00B5FFF7 	    _CALL digit 
 369      15FF5DF8 
 369      04EB
 370 025a 08F10108 	    add T1,#1 
 371 025e 01B4     	    push {r0}
 372 0260 0846     	    mov r0,r1 
 373 0262 0040     	    ands r0,r0
 374 0264 F2D1     	    bne 1b 
 375 0266 01BC     	2:  pop {r0}
 376 0268 00B5FFF7 	    _CALL uart_putc  
 376      FEFF5DF8 
 376      04EB
 377 0272 B8F10108 	    subs T1,#1
 378 0276 F6D1     	    bne 2b 
 379 0278 5DF8048B 		pop {T1}
 380 027c 7047     	    _RET 
 381              	
 382              	/**********************************
 383              	// move cursor left n character
 384              	// ANSI: ESC[PnD 
 385              	// 'Pn' est a numerical parameter
 386              	// specifying number of characters 
 387              	// displacement.
 388              	// input:
 389              	//   r0     character count
 390              	// output:
 391              	//   none
 392              	*********************************/
ARM GAS  terminal.s 			page 18


 393 027e 00BF     	    _FUNC move_left
 394 0280 80B1     	    cbz r0,9f   
 395 0282 00B5FFF7 		  _CALL  send_escape
 395      CCFF5DF8 
 395      04EB
 396 028c 00B5FFF7 		  _CALL  send_parameter 
 396      D9FF5DF8 
 396      04EB
 397 0296 4FF04400 		  mov r0,#'D' 
 398 029a 00B5FFF7 		  _CALL  uart_putc 
 398      FEFF5DF8 
 398      04EB
 399 02a4 7047     	9:	_RET	
 400              	
 401              	
 402              	/***********************************
 403              	// move cursor right n character 
 404              	// ANSI: ESC[PnC 
 405              	// input:
 406              	//   r0     character count
 407              	// output:
 408              	//   none
 409              	***********************************/
 410 02a6 00BF     	    _FUNC move_right
 411 02a8 80B1     	    cbz r0,9f 
 412 02aa 00B5FFF7 	    _CALL  send_escape
 412      B8FF5DF8 
 412      04EB
 413 02b4 00B5FFF7 	    _CALL  send_parameter 
 413      C5FF5DF8 
 413      04EB
 414 02be 4FF04300 	    mov r0,#'C' 
 415 02c2 00B5FFF7 	    _CALL  uart_putc 
 415      FEFF5DF8 
 415      04EB
 416 02cc 7047     	9:  _RET 
 417              	
 418              	/*********************************
 419              	// print n spaces on terminal
 420              	// input:
 421              	//  r0 		number of spaces 
 422              	// output:
 423              	//	none
 424              	// use:
 425              	     T1    counter  
 426              	********************************/
 427 02ce 00BF     	    _GBL_FUNC spaces
 428 02d0 4DF8048D 		  push {T1}
 429 02d4 50B1     	    cbz r0,9f 
 430 02d6 8046     	    mov T1,r0 
 431 02d8 4FF02000 	1:	mov r0,#SPACE 
 432 02dc 00B5FFF7 	    _CALL  uart_putc 
 432      FEFF5DF8 
 432      04EB
 433 02e6 B8F10108 	    subs T1,#1
 434 02ea F5D1     	    bne 1b 
 435 02ec 5DF8048B 	9:  pop {T1}
ARM GAS  terminal.s 			page 19


 436 02f0 7047     	  	_RET 
 437              	
 438              	
 439              	/*********************************
 440              	    insert_char 
 441              	// insert character in tib  
 442              	
 443              	// input:
 444              	//   r0      character to insert 
 445              	//   r1      line length
 446              	//   T1      insert position 
 447              	//   T2      line pointer 
 448              	// output:
 449              	//   r0       updated insertion point  
 450              	**********************************/
 451 02f2 00BF     	   _FUNC insert_char 
 452              	/*   
 453              	    ld (CHAR,sp),a 
 454              	    ld a,xh 
 455              		ld (IPOS,sp),a
 456              	    ld a,xl 
 457              	    ld (LLEN,sp),a  
 458              	    ldw x,y
 459              	    incw x 
 460              	    ld a,(LLEN,sp)
 461              	    sub a,(IPOS,sp)
 462              	    inc a 
 463              	    ld acc8,a 
 464              	    clr acc16
 465              	    _CALL  move
 466              	    ldw y,#tib 
 467              	    ld a,(IPOS,sp)
 468              	    ld acc8,a 
 469              	    addw y,acc16 
 470              	    ld a,(CHAR,sp)
 471              	    ld (y),a
 472              	    incw y  
 473              	    ld a,(IPOS,sp)
 474              	    _CALL  move_left
 475              	    _MOV32 r0,tib 
 476              	    _CALL  uart_puts
 477              	    ld a,(LLEN,sp)
 478              	    sub a,(IPOS,sp) 
 479              	    _CALL  move_left 
 480              	*/
 481 02f4 7047     		_RET 
 482              	
 483              	
 484              	/***************************************
 485              	// delete character under cursor
 486              	// input:
 487              	//   R0       line length   
 488              	//   R1      delete position
 489              	//   T1       line pointer 
 490              	**************************************/
 491 02f6 00BF     	    _FUNC delete_under
 492              	/*
ARM GAS  terminal.s 			page 20


 493              	    ld (LLEN,sp),a 
 494              	    ld a,xl 
 495              	    ld (CPOS,sp),a 
 496              	    ldw x,y // move destination
 497              	    incw y  // move source 
 498              	    ld a,(LLEN,sp)
 499              	    sub a,(CPOS,sp)
 500              	    inc a // move including zero at end.
 501              	    ld acc8,a 
 502              	    clr acc16 
 503              		_CALL  move 
 504              	    ldw y,#tib 
 505              	    ld a,(CPOS,sp)
 506              	    ld acc8,a 
 507              	    addw y,acc16 
 508              	    ldw x,y 
 509              	    _CALL  uart_puts 
 510              	    ld a,#SPACE  
 511              	    _CALL  uart_putc
 512              	    ld a,(LLEN,sp)
 513              	    sub a,(CPOS,sp)
 514              	    _CALL  move_left 
 515              	    dec (LLEN,sp)
 516              	*/
 517 02f8 7047     		_RET 
 518              	
 519              	/********************************
 520              	// send ANSI sequence to delete
 521              	// whole line. Cursor position
 522              	// is not updated.
 523              	// ANSI: ESC[2K
 524              	// input:
 525              	//   none
 526              	// output:
 527              	//   none 
 528              	   use:
 529              	     r0 
 530              	********************************/
 531 02fa 00BF     	    _FUNC delete_line
 532 02fc 01B4     	    push {r0}
 533 02fe 00B5FFF7 	    _CALL  send_escape
 533      8EFF5DF8 
 533      04EB
 534 0308 4FF03200 		mov r0,#'2'
 535 030c 00B5FFF7 		_CALL  uart_putc 
 535      FEFF5DF8 
 535      04EB
 536 0316 4FF04B00 		mov r0,#'K' 
 537 031a 00B5FFF7 		_CALL  uart_putc
 537      FEFF5DF8 
 537      04EB
 538 0324 00B5FFF7 	    _CALL  cursor_home 
 538      FEFF5DF8 
 538      04EB
 539 032e 01BC     		pop {r0}
 540 0330 7047     	    _RET 
 541              	
ARM GAS  terminal.s 			page 21


 542              	/*************************************
 543              	   cursor_x  
 544              	   send cursor at column n 
 545              	    input: 
 546              	        r0  n 
 547              	    output:
 548              	        none 
 549              	    use:
 550              	        none 
 551              	*************************************/
 552 0332 00BF     	    _GBL_FUNC cursor_x 
 553 0334 00B5FFF7 	    _CALL send_escape
 553      73FF5DF8 
 553      04EB
 554 033e 00B5FFF7 	    _CALL send_parameter
 554      80FF5DF8 
 554      04EB
 555 0348 4FF04700 	    mov r0,#'G' 
 556 034c 00B5FFF7 	    _CALL uart_putc 
 556      FEFF5DF8 
 556      04EB
 557 0356 7047     	    _RET 
 558              	
 559              	/*************************************
 560              	    cursor_home 
 561              	    send cursor at left position
 562              	  input:
 563              	    none 
 564              	  output:
 565              	    none 
 566              	  use:
 567              	    r0
 568              	*************************************/
 569              	    _GBL_FUNC cursor_home 
 570 0358 01B4     	    push {r0}
 571 035a 00B5FFF7 	    _CALL send_escape
 571      60FF5DF8 
 571      04EB
 572 0364 4FF04700 	    mov r0,#'G' 
 573 0368 00B5FFF7 	    _CALL uart_putc 
 573      FEFF5DF8 
 573      04EB
 574 0372 01BC     	    pop {r0}
 575 0374 7047     	    _RET 
 576              	
 577              	/************************************
 578              	    delete_right 
 579              	    send ANSI code to delete from 
 580              	    cursor to end of line 
 581              	************************************/
 582 0376 00BF     	    _FUNC delete_right 
 583 0378 00B5FFF7 	    _CALL send_escape 
 583      51FF5DF8 
 583      04EB
 584 0382 4FF03000 	    mov r0,#'0'
 585 0386 00B5FFF7 	    _CALL uart_putc 
 585      FEFF5DF8 
ARM GAS  terminal.s 			page 22


 585      04EB
 586 0390 4FF04B00 	    mov r0,#'K'
 587 0394 00B5FFF7 	    _CALL uart_putc 
 587      FEFF5DF8 
 587      04EB
 588 039e 7047     	    _RET 
 589              	
 590              	/************************************
 591              	   update_line 
 592              	   update edited line on display 
 593              	   input:
 594              	     r0    *line 
 595              	   output:
 596              	     none 
 597              	   use:
 598              	      none 
 599              	*************************************/
 600              	    _FUNC update_line 
 601 03a0 01B4     	    push {r0}
 602 03a2 3846     	    mov r0,r7 
 603 03a4 00B5FFF7 	    _CALL move_left
 603      6BFF5DF8 
 603      04EB
 604 03ae 00B5FFF7 	    _CALL delete_right
 604      E2FF5DF8 
 604      04EB
 605 03b8 01BC     	    pop {r0} 
 606 03ba 00B5FFF7 	    _CALL uart_puts
 606      FEFF5DF8 
 606      04EB
 607 03c4 7047     	    _RET 
 608              	
 609              	/*************************************
 610              	  readln 
 611              	  read a line of text from terminal
 612              	  CTRL_D delete line
 613              	  CTRL_E edit line#  
 614              	  CTRL_R edit last entered line
 615              	  CTRL_O toggle between overwrite|insert   
 616              	  LEFT_ARROW move cursor left 
 617              	  RIGHT_ARROW move cursor right
 618              	  HOME cursor at start of line 
 619              	  END  cursor at end of line  
 620              	  BS  delete character left of cursor
 621              	  DEL delete character at cursor    
 622              	  input:
 623              	    r0  *buffer
 624              	    r1  buffer size 
 625              	  output:
 626              	    r0  *buffer (asciz)  
 627              	    r1  line length  
 628              	  use:
 629              	    r2  cmove count
 630              	    r3  line start colon  
 631              	    r5 line length 
 632              	    r6 *buffer   
 633              	    r7  cursor position 
ARM GAS  terminal.s 			page 23


 634              	    T1  ovwr|insert flag 
 635              	    T2  buffer size -1 
 636              	*************************************/
 637 03c6 00BF     	  _GBL_FUNC readln
 638 03c8 2DE9EC03 	  push {r2,r3,r5,r6,r7,T1,T2}
 639 03cc 87EA0707 	  eor r7,r7  // cursor position 
 640 03d0 88EA0808 	  eor T1,T1 // overwrite mode 
 641 03d4 0646     	  mov r6,r0 // *buffer 
 642 03d6 A1F10109 	  sub T2,r1,#1  // buffer size -1
 643 03da 85EA0505 	  eor r5,r5  // line length 
 644 03de 80EA0000 	  eor r0,r0 // blinking block shape
 645 03e2 00B5FFF7 	  _CALL cursor_shape
 645      FEFF5DF8 
 645      04EB
 646 03ec 00B5FFF7 	  _CALL get_curpos
 646      FEFF5DF8 
 646      04EB
 647 03f6 0B46     	  mov r3,r1 
 648              	readln_loop:
 649 03f8 80EA0000 	  eor r0,r0
 650 03fc 7055     	  strb r0,[r6,r5]  
 651 03fe 00B5FFF7 	  _CALL uart_getc 
 651      FEFF5DF8 
 651      04EB
 652 0408 0D28     	  cmp r0,#CR
 653 040a 00D1     	  bne 0f
 654 040c 2CE1     	  b readln_exit 
 655              	0:
 656 040e 0828     	  cmp r0,#BS 
 657 0410 2DD1     	  bne 2f 
 658              	//delete char. left  
 659 0412 3F40     	  ands r7,r7 
 660 0414 F0D0     	  beq readln_loop 
 661 0416 AF42     	  cmp r7,r5 
 662 0418 1FD0     	  beq 1f
 663              	// in middle of line 
 664 041a 06EB0700 	  add r0,r6,r7 
 665 041e A0F10101 	  sub r1,r0,#1 
 666 0422 A5EB0702 	  sub r2,r5,r7 
 667 0426 00B5FFF7 	  _CALL cmove
 667      FEFF5DF8 
 667      04EB
 668 0430 A5F10105 	  sub r5,#1 
 669 0434 A7F10107 	  sub r7,#1
 670 0438 80EA0000 	  eor r0,r0
 671 043c 7055     	  strb r0,[r6,r5] 
 672 043e 3046     	  mov r0,r6
 673 0440 00B5FFF7 	  _CALL update_line 
 673      ADFF5DF8 
 673      04EB
 674 044a 07EB0300 	  add r0,r7,r3 
 675 044e 00B5FFF7 	  _CALL cursor_x 
 675      FEFF5DF8 
 675      04EB
 676 0458 CEE7     	  b readln_loop       
 677              	1: // at end of line 
 678 045a 00B5FFF7 	  _CALL bksp 
ARM GAS  terminal.s 			page 24


 678      BEFE5DF8 
 678      04EB
 679 0464 A7F10107 	  sub r7,#1
 680 0468 A5F10105 	  sub r5,#1
 681 046c C4E7     	  b readln_loop 
 682 046e 0428     	2: cmp r0,#CTRL_D 
 683 0470 09D1     	   bne 3f 
 684              	// delete whole line  
 685 0472 00B5FFF7 	  _CALL delete_line  
 685      42FF5DF8 
 685      04EB
 686 047c 87EA0707 	  eor r7,r7   
 687 0480 85EA0505 	  eor r5,r5
 688 0484 B8E7     	  b readln_loop 
 689 0486 0528     	3: cmp r0,#CTRL_E 
 690 0488 25D1     	  bne 3f 
 691 048a 3046     	  mov r0,r6 // buffer 
 692 048c 4FF00A01 	  mov r1,#10  
 693 0490 00B5FFF7 	  _CALL atoi
 693      FEFF5DF8 
 693      04EB
 694 049a 0028     	  cmp r0,#0 
 695 049c ACD0     	  beq readln_loop 
 696 049e 0846     	  mov r0,r1 // line# 
 697 04a0 00B5FFF7 	  _CALL search_lineno 
 697      FEFF5DF8 
 697      04EB
 698 04aa 0029     	  cmp r1,#0 // not found 
 699 04ac A4D1     	  bne readln_loop 
 700 04ae 3146     	  mov r1,r6 
 701 04b0 00B5FFF7 	  _CALL decompile_line
 701      FEFF5DF8 
 701      04EB
 702 04ba 00B5FFF7 	  _CALL update_line 
 702      70FF5DF8 
 702      04EB
 703 04c4 3046     	  mov r0,r6 
 704 04c6 00B5FFF7 	  _CALL strlen 
 704      FEFF5DF8 
 704      04EB
 705 04d0 0746     	  mov r7,r0 
 706 04d2 0546     	  mov r5,r0 
 707 04d4 90E7     	  b readln_loop   
 708 04d6 1228     	3: cmp r0,#CTRL_R    
 709 04d8 10D1     	  bne 4f 
 710              	// edit last entered line if  available 
 711 04da 2D40     	  ands r5,r5 
 712 04dc 8CD1     	  bne readln_loop
 713 04de 3046     	  mov r0,r6 
 714 04e0 00B5FFF7 	  _CALL strlen
 714      FEFF5DF8 
 714      04EB
 715 04ea 0546     	  mov r5,r0
 716 04ec 0746     	  mov r7,r0 
 717 04ee 3046     	  mov r0,r6  
 718 04f0 00B5FFF7 	  _CALL uart_puts
 718      FEFF5DF8 
ARM GAS  terminal.s 			page 25


 718      04EB
 719 04fa 7DE7     	  b readln_loop     
 720 04fc 0F28     	4: cmp r0,#CTRL_O 
 721 04fe 08D1     	   bne 5f 
 722 0500 C8F10508 	   rsb T1,#5  
 723 0504 4046     	   mov r0,T1 
 724 0506 00B5FFF7 	   _CALL cursor_shape
 724      FEFF5DF8 
 724      04EB
 725 0510 72E7     	   b readln_loop 
 726 0512 1B28     	5: cmp r0,#ESC 
 727 0514 5CD1     	   bne character  
 728 0516 00B5FFF7 	   _CALL get_escape
 728      72FD5DF8 
 728      04EB
 729 0520 8228     	   cmp r0,#HOME 
 730 0522 08D1     	   bne try_end
 731 0524 3846     	   mov r0,r7 
 732 0526 00B5FFF7 	   _call move_left 
 732      AAFE5DF8 
 732      04EB
 733 0530 87EA0707 	   eor r7,r7  
 734 0534 60E7     	   b readln_loop 
 735              	try_end:
 736 0536 8328     	   cmp r0,#END 
 737 0538 08D1     	   bne try_left 
 738 053a A5EB0700 	   sub r0,r5,r7  
 739 053e 00B5FFF7 	   _CALL move_right  
 739      B2FE5DF8 
 739      04EB
 740 0548 2F46     	   mov r7,r5 
 741 054a 55E7     	   b readln_loop 
 742              	try_left: 
 743 054c 8028     	   cmp r0,#ARROW_LEFT
 744 054e 0CD1     	   bne try_right 
 745 0550 3F40     	   ands r7,r7 
 746 0552 3FF451AF 	   beq readln_loop
 747 0556 4FF00100 	   mov r0,#1 
 748 055a 00B5FFF7 	   _CALL move_left 
 748      90FE5DF8 
 748      04EB
 749 0564 A7F10107 	   sub r7,#1
 750 0568 46E7     	   b readln_loop
 751              	try_right:
 752 056a 8128     	   cmp r0,#ARROW_RIGHT 
 753 056c 0CD1     	   bne try_suprim 
 754 056e AF42     	   cmp r7,r5
 755 0570 3FF442AF 	   beq readln_loop
 756 0574 07F10107 	   add r7,#1
 757 0578 4FF00100 	   mov r0,#1  
 758 057c 00B5FFF7 	   _CALL move_right  
 758      93FE5DF8 
 758      04EB
 759 0586 37E7     	   b readln_loop 
 760              	try_suprim:
 761 0588 8428     	   cmp r0,#SUP
 762 058a 7FF435AF 	   bne readln_loop 
ARM GAS  terminal.s 			page 26


 763              	// delete character at cursor 
 764 058e AF42     	   cmp r7,r5
 765 0590 3FF432AF 	   beq readln_loop 
 766 0594 07EB0601 	   add r1,r7,r6 
 767 0598 01F10100 	   add r0,r1,#1 
 768 059c A5EB0702 	   sub r2,r5,r7
 769 05a0 00B5FFF7 	   _CALL cmove 
 769      FEFF5DF8 
 769      04EB
 770 05aa A5F10105 	   sub r5,#1 
 771 05ae 80EA0000 	   eor r0,r0 
 772 05b2 7055     	   strb r0,[r6,r5]
 773 05b4 3046     	   mov r0,r6 
 774 05b6 00B5FFF7 	   _CALL update_line
 774      F2FE5DF8 
 774      04EB
 775 05c0 07EB0300 	   add  r0,r7,r3 
 776 05c4 00B5FFF7 	   _CALL cursor_x 
 776      FEFF5DF8 
 776      04EB
 777 05ce 13E7     	   b readln_loop      
 778              	character:
 779 05d0 AF42     	   cmp r7,r5 
 780 05d2 39D0     	   beq 5f // cursor at eol 
 781              	// cursor in middle of line 
 782              	// action depend on edit mode 
 783 05d4 18EA0808 	  ands T1,T1  //check edit mode 
 784 05d8 25D0     	  beq 2f 
 785              	// insert mode
 786 05da A945     	  cmp T2,r5 
 787 05dc 3FF40CAF 	  beq readln_loop // buffer full  
 788 05e0 05B4     	  push {r0,r2}
 789 05e2 06EB0700 	  add r0,r6,r7  // src 
 790 05e6 00F10101 	  add r1,r0,#1   // dest 
 791 05ea A5EB0702 	  sub r2,r5,r7  // move count 
 792 05ee 00B5FFF7 	  _CALL cmove   
 792      FEFF5DF8 
 792      04EB
 793 05f8 05BC     	  pop {r0,r2}
 794 05fa F055     	  strb r0,[r6,r7] 
 795 05fc 05F10105 	  add r5,#1 
 796 0600 80EA0000 	  eor r0,r0 
 797 0604 7055     	  strb r0,[r6,r5]
 798 0606 3046     	  mov r0,r6   
 799 0608 00B5FFF7 	  _CALL update_line
 799      C9FE5DF8 
 799      04EB
 800 0612 07F10107 	  add r7,#1
 801 0616 07EB0300 	  add r0,r7,r3 
 802 061a 00B5FFF7 	  _CALL cursor_x  
 802      FEFF5DF8 
 802      04EB
 803 0624 E8E6     	  b readln_loop   
 804              	2: // overwrite mode 
 805 0626 F055     	  strb r0,[r6,r7]
 806 0628 3046     	  mov r0,r6 
 807 062a 00B5FFF7 	  _CALL update_line 
ARM GAS  terminal.s 			page 27


 807      B8FE5DF8 
 807      04EB
 808 0634 07F10107 	  add r7,#1
 809 0638 07EB0300 	  add r0,r7,r3
 810 063c 00B5FFF7 	  _CALL cursor_x 
 810      FEFF5DF8 
 810      04EB
 811 0646 D7E6     	  b readln_loop 
 812              	5: // cursor at eol, mode doesn't matter 
 813 0648 CA45     	   cmp r10,T2 
 814 064a 00D4     	   bmi 6f 
 815 064c D4E6     	   b readln_loop  // buffer full
 816              	6: // only accept char>=32  
 817 064e 2028     	   cmp r0,#SPACE 
 818 0650 3FF5D2AE 	   bmi readln_loop 
 819 0654 F055     	   strb r0,[r6,r7] 
 820 0656 00B5FFF7 	   _CALL uart_putc
 820      FEFF5DF8 
 820      04EB
 821 0660 07F10107 	   add r7,#1
 822 0664 3D46     	   mov r5,r7
 823 0666 C7E6     	   b readln_loop  
 824              	readln_exit:
 825 0668 00B5FFF7 	  _CALL uart_putc 
 825      FEFF5DF8 
 825      04EB
 826 0672 80EA0000 	  eor r0,r0 
 827 0676 7055     	  strb r0,[r6,r5]
 828 0678 2946     	  mov r1,r5  // line length
 829 067a 3046     	  mov r0,r6  // *buffer  
 830 067c BDE8EC03 	  pop {r2,r3,r5,r6,r7,T1,T2}
 831 0680 7047     	  _RET 
 832              	
 833              	
 834              	/*******************************
 835              	    get_param 
 836              	    read ANSI parameter 
 837              	    input:
 838              	      none 
 839              	    output:
 840              	      r0   value 
 841              	    use:
 842              	      T1   temp
 843              	      T2   base 10  
 844              	*******************************/
 845 0682 00BF     	    _FUNC get_param
 846 0684 2DE90003 	    push {T1,T2}
 847 0688 88EA0808 	    eor T1,T1 
 848 068c 4FF00A09 	    mov T2,#10 
 849 0690 00B5FFF7 	1:  _CALL uart_getc
 849      FEFF5DF8 
 849      04EB
 850 069a 00B5FFF7 	    _CALL is_digit 
 850      FEFF5DF8 
 850      04EB
 851 06a4 03D0     	    beq 9f 
 852 06a6 09FB08F8 	    mul T1,T2 
ARM GAS  terminal.s 			page 28


 853 06aa 8044     	    add T1,r0 
 854 06ac F0E7     	    b 1b
 855              	9: 
 856 06ae 4046     	    mov r0,T1     
 857 06b0 BDE80003 	    pop {T1,T2}
 858 06b4 7047     	    _RET 
 859              	
 860              	/*******************************
 861              	    get_curpos 
 862              	    report cursor position 
 863              	  input:
 864              	    none 
 865              	  output:
 866              	    r0    row 
 867              	    r1    column
 868              	  use:
 869              	    r2
 870              	    r3 
 871              	*******************************/
 872 06b6 00BF     	    _GBL_FUNC get_curpos 
 873 06b8 0CB4     	    push {r2,r3}   
 874 06ba 00B5FFF7 	    _CALL uart_flush_queue 
 874      FEFF5DF8 
 874      04EB
 875 06c4 00B5FFF7 	    _CALL send_escape 
 875      ABFD5DF8 
 875      04EB
 876 06ce 4FF03600 	    mov r0,#'6'
 877 06d2 00B5FFF7 	    _CALL uart_putc
 877      FEFF5DF8 
 877      04EB
 878 06dc 4FF06E00 	    mov r0,#'n'
 879 06e0 00B5FFF7 	    _CALL uart_putc  
 879      FEFF5DF8 
 879      04EB
 880 06ea 00B5FFF7 	    _CALL uart_getc 
 880      FEFF5DF8 
 880      04EB
 881 06f4 1B28     	    cmp r0,#ESC 
 882 06f6 13D1     	    bne 9f 
 883 06f8 00B5FFF7 	    _CALL uart_getc 
 883      FEFF5DF8 
 883      04EB
 884 0702 5B28     	    cmp r0,#'[' 
 885 0704 0CD1     	    bne 9f 
 886 0706 00B5FFF7 	    _CALL get_param 
 886      BCFF5DF8 
 886      04EB
 887 0710 0246     	    mov r2,r0 
 888 0712 00B5FFF7 	    _CALL get_param 
 888      B6FF5DF8 
 888      04EB
 889 071c 0146     	    mov r1,r0 
 890 071e 1046     	    mov r0,r2 
 891 0720 0CBC     	9:  pop {r2,r3}
 892 0722 7047     	    _RET 
 893              	
ARM GAS  terminal.s 			page 29


 894              	/***********************************
 895              	    tabulation 
 896              	    set cursor column to next 
 897              	    tabulation stop 
 898              	**********************************/
 899              	    _GBL_FUNC tabulation 
 900 0724 07B4     	    push {r0,r1,r2}
 901 0726 00B5FFF7 	    _CALL get_curpos 
 901      FEFF5DF8 
 901      04EB
 902 0730 A1F10100 	    sub r0,r1,#1
 903 0734 02B4     	    push {r1} 
 904 0736 616C     	    ldr r1,[UPP,#TAB_WIDTH]
 905 0738 00B5FFF7 	    _CALL modulo
 905      FEFF5DF8 
 905      04EB
 906 0742 606C     	    ldr r0,[UPP,#TAB_WIDTH]
 907 0744 A0EB0100 	    sub r0,r1
 908 0748 02BC     	    pop {r1}
 909 074a 0144     	    add r1,r0
 910 074c 5029     	    cmp r1,#80
 911 074e 05DA     	    bge 2f  
 912 0750 00B5FFF7 	    _CALL spaces
 912      FEFF5DF8 
 912      04EB
 913 075a 06E0     	    b 9f 
 914 075c 4FF00D00 	2:  mov r0,#CR 
 915 0760 00B5FFF7 	    _CALL uart_putc 
 915      FEFF5DF8 
 915      04EB
 916 076a 07BC     	9:  pop {r0,r1,r2}
 917 076c 7047     	    _RET 
 918 076e 00005400 	
 918      0000
ARM GAS  terminal.s 			page 30


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  terminal.s 			page 31


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32f103.inc:145    *ABS*:00000000e000ed10 SCR_BASE_ADR
       stm32f103.inc:146    *ABS*:0000000000000002 SCR_SLEEPONEXIT
       stm32f103.inc:147    *ABS*:0000000000000004 SCR_SLEEPDEEP
       stm32f103.inc:148    *ABS*:0000000000000010 SCR_SEVONPEND
       stm32f103.inc:151    *ABS*:0000000040007000 PWR_CR_ADR
       stm32f103.inc:152    *ABS*:0000000000000001 PWR_CR_LPDS
       stm32f103.inc:153    *ABS*:0000000000000002 PWR_CR_PDDS
       stm32f103.inc:154    *ABS*:0000000000000004 PWR_CR_CWUF
       stm32f103.inc:155    *ABS*:0000000000000008 PWR_CR_CSBF
       stm32f103.inc:156    *ABS*:0000000000000010 PWR_CR_PVDE
       stm32f103.inc:157    *ABS*:0000000000000020 PWR_CR_PLS
       stm32f103.inc:158    *ABS*:0000000000000100 PWR_CR_DBP
       stm32f103.inc:161    *ABS*:0000000040007004 PWR_CSR_ADR
ARM GAS  terminal.s 			page 32


       stm32f103.inc:162    *ABS*:0000000000000001 PWR_CSR_WUF
       stm32f103.inc:163    *ABS*:0000000000000002 PWR_CSR_SBF
       stm32f103.inc:164    *ABS*:0000000000000004 PWR_CSR_PVDO
       stm32f103.inc:165    *ABS*:0000000000000100 PWR_CSR_EWUP
           ascii.inc:24     *ABS*:0000000000000001 CTRL_A
           ascii.inc:25     *ABS*:0000000000000001 SOH
           ascii.inc:26     *ABS*:0000000000000002 CTRL_B
           ascii.inc:27     *ABS*:0000000000000002 STX
           ascii.inc:28     *ABS*:0000000000000003 CTRL_C
           ascii.inc:29     *ABS*:0000000000000003 ETX
           ascii.inc:30     *ABS*:0000000000000004 CTRL_D
           ascii.inc:31     *ABS*:0000000000000004 EOT
           ascii.inc:32     *ABS*:0000000000000005 CTRL_E
           ascii.inc:33     *ABS*:0000000000000005 ENQ
           ascii.inc:34     *ABS*:0000000000000006 CTRL_F
           ascii.inc:35     *ABS*:0000000000000006 ACK
           ascii.inc:36     *ABS*:0000000000000007 CTRL_G
           ascii.inc:37     *ABS*:0000000000000007 BELL
           ascii.inc:38     *ABS*:0000000000000008 CTRL_H
           ascii.inc:39     *ABS*:0000000000000008 BS
           ascii.inc:40     *ABS*:0000000000000009 CTRL_I
           ascii.inc:41     *ABS*:0000000000000009 TAB
           ascii.inc:42     *ABS*:000000000000000a CTRL_J
           ascii.inc:43     *ABS*:000000000000000a LF
           ascii.inc:44     *ABS*:000000000000000b CTRL_K
           ascii.inc:45     *ABS*:000000000000000b VT
           ascii.inc:46     *ABS*:000000000000000c CTRL_L
           ascii.inc:47     *ABS*:000000000000000c FF
           ascii.inc:48     *ABS*:000000000000000d CTRL_M
           ascii.inc:49     *ABS*:000000000000000d CR
           ascii.inc:50     *ABS*:000000000000000e CTRL_N
           ascii.inc:51     *ABS*:000000000000000e SO
           ascii.inc:52     *ABS*:000000000000000f CTRL_O
           ascii.inc:53     *ABS*:000000000000000f SI
           ascii.inc:54     *ABS*:0000000000000010 CTRL_P
           ascii.inc:55     *ABS*:0000000000000010 DLE
           ascii.inc:56     *ABS*:0000000000000011 CTRL_Q
           ascii.inc:57     *ABS*:0000000000000011 DC1
           ascii.inc:58     *ABS*:0000000000000011 XON
           ascii.inc:59     *ABS*:0000000000000012 CTRL_R
           ascii.inc:60     *ABS*:0000000000000012 DC2
           ascii.inc:61     *ABS*:0000000000000013 CTRL_S
           ascii.inc:62     *ABS*:0000000000000013 DC3
           ascii.inc:63     *ABS*:0000000000000013 XOFF
           ascii.inc:64     *ABS*:0000000000000014 CTRL_T
           ascii.inc:65     *ABS*:0000000000000014 DC4
           ascii.inc:66     *ABS*:0000000000000015 CTRL_U
           ascii.inc:67     *ABS*:0000000000000015 NAK
           ascii.inc:68     *ABS*:0000000000000016 CTRL_V
           ascii.inc:69     *ABS*:0000000000000016 SYN
           ascii.inc:70     *ABS*:0000000000000017 CTRL_W
           ascii.inc:71     *ABS*:0000000000000017 ETB
           ascii.inc:72     *ABS*:0000000000000018 CTRL_X
           ascii.inc:73     *ABS*:0000000000000018 CAN
           ascii.inc:74     *ABS*:0000000000000019 CTRL_Y
           ascii.inc:75     *ABS*:0000000000000019 EM
           ascii.inc:76     *ABS*:000000000000001a CTRL_Z
ARM GAS  terminal.s 			page 33


           ascii.inc:77     *ABS*:000000000000001a SUB
           ascii.inc:78     *ABS*:00000000000000ff EOF
           ascii.inc:79     *ABS*:000000000000001b ESC
           ascii.inc:80     *ABS*:000000000000001c FS
           ascii.inc:81     *ABS*:000000000000001d GS
           ascii.inc:82     *ABS*:000000000000001e RS
           ascii.inc:83     *ABS*:000000000000001f US
           ascii.inc:84     *ABS*:0000000000000020 SPACE
           ascii.inc:85     *ABS*:000000000000002c COMMA
           ascii.inc:86     *ABS*:0000000000000023 SHARP
           ascii.inc:87     *ABS*:0000000000000027 TICK
      tbi_macros.inc:20     *ABS*:0000000000000100 STACK_SIZE
      tbi_macros.inc:21     *ABS*:0000000020005000 STACK_EMPTY
      tbi_macros.inc:22     *ABS*:0000000020004f00 STACK_FULL
      tbi_macros.inc:23     *ABS*:0000000000000050 TIB_SIZE
      tbi_macros.inc:24     *ABS*:0000000000000080 PAD_SIZE
      tbi_macros.inc:25     *ABS*:0000000000000010 RX_QUEUE_SIZE
      tbi_macros.inc:27     *ABS*:0000000000000004 DEFAULT_TAB_WIDTH
      tbi_macros.inc:34     *ABS*:0000000000000000 INP
      tbi_macros.inc:35     *ABS*:0000000000000001 OUTP
      tbi_macros.inc:45     *ABS*:0000000000000000 TK_NONE
      tbi_macros.inc:46     *ABS*:0000000000000001 TK_COLON
      tbi_macros.inc:47     *ABS*:0000000000000002 TK_QSTR
      tbi_macros.inc:48     *ABS*:0000000000000003 TK_CHAR
      tbi_macros.inc:49     *ABS*:0000000000000004 TK_VAR
      tbi_macros.inc:50     *ABS*:0000000000000005 TK_ARRAY
      tbi_macros.inc:51     *ABS*:0000000000000006 TK_LPAREN
      tbi_macros.inc:52     *ABS*:0000000000000007 TK_RPAREN
      tbi_macros.inc:53     *ABS*:0000000000000008 TK_COMMA
      tbi_macros.inc:54     *ABS*:0000000000000009 TK_SHARP
      tbi_macros.inc:55     *ABS*:000000000000000a TK_CMD
      tbi_macros.inc:56     *ABS*:000000000000000b TK_IFUNC
      tbi_macros.inc:57     *ABS*:000000000000000c TK_CFUNC
      tbi_macros.inc:58     *ABS*:000000000000000d TK_CONST
      tbi_macros.inc:59     *ABS*:000000000000000e TK_INTGR
      tbi_macros.inc:60     *ABS*:000000000000000f TK_BAD
      tbi_macros.inc:61     *ABS*:0000000000000010 TK_PLUS
      tbi_macros.inc:62     *ABS*:0000000000000011 TK_MINUS
      tbi_macros.inc:63     *ABS*:0000000000000020 TK_MULT
      tbi_macros.inc:64     *ABS*:0000000000000021 TK_DIV
      tbi_macros.inc:65     *ABS*:0000000000000022 TK_MOD
      tbi_macros.inc:73     *ABS*:0000000000000031 TK_GT
      tbi_macros.inc:74     *ABS*:0000000000000032 TK_EQUAL
      tbi_macros.inc:75     *ABS*:0000000000000033 TK_GE
      tbi_macros.inc:76     *ABS*:0000000000000034 TK_LT
      tbi_macros.inc:77     *ABS*:0000000000000036 TK_LE
      tbi_macros.inc:78     *ABS*:0000000000000035 TK_NE
      tbi_macros.inc:80     *ABS*:0000000000000030 TK_GRP_MASK
      tbi_macros.inc:81     *ABS*:0000000000000000 TK_GRP_MISC
      tbi_macros.inc:82     *ABS*:0000000000000010 TK_GRP_ADD
      tbi_macros.inc:83     *ABS*:0000000000000020 TK_GRP_MULT
      tbi_macros.inc:84     *ABS*:0000000000000030 TK_GRP_RELOP
      tbi_macros.inc:85     *ABS*:0000000000000002 CMD_END
      tbi_macros.inc:90     *ABS*:0000000000000000 ERR_NONE
      tbi_macros.inc:91     *ABS*:0000000000000001 ERR_MEM_FULL
      tbi_macros.inc:92     *ABS*:0000000000000002 ERR_SYNTAX
      tbi_macros.inc:93     *ABS*:0000000000000003 ERR_MATH_OVF
ARM GAS  terminal.s 			page 34


      tbi_macros.inc:94     *ABS*:0000000000000004 ERR_DIV0
      tbi_macros.inc:95     *ABS*:0000000000000005 ERR_NO_LINE
      tbi_macros.inc:96     *ABS*:0000000000000006 ERR_RUN_ONLY
      tbi_macros.inc:97     *ABS*:0000000000000007 ERR_CMD_ONLY
      tbi_macros.inc:98     *ABS*:0000000000000008 ERR_DUPLICATE
      tbi_macros.inc:99     *ABS*:0000000000000009 ERR_NOT_FILE
      tbi_macros.inc:100    *ABS*:000000000000000a ERR_BAD_VALUE
      tbi_macros.inc:101    *ABS*:000000000000000b ERR_NO_ACCESS
      tbi_macros.inc:102    *ABS*:000000000000000c ERR_NO_DATA
      tbi_macros.inc:103    *ABS*:000000000000000d ERR_NO_PROG
      tbi_macros.inc:104    *ABS*:000000000000000e ERR_NO_FSPACE
      tbi_macros.inc:105    *ABS*:000000000000000f ERR_BUF_FULL
      tbi_macros.inc:106    *ABS*:0000000000000010 ERR_CANT_PROG
      tbi_macros.inc:112    *ABS*:0000000000000000 MATH_OVF
      tbi_macros.inc:114    *ABS*:0000000000000004 CELL_SIZE
      tbi_macros.inc:120    *ABS*:0000000000000000 DEBUG
      tbi_macros.inc:137    *ABS*:0000000000000000 IN_SAVED
      tbi_macros.inc:138    *ABS*:0000000000000004 COUNT
      tbi_macros.inc:139    *ABS*:0000000000000008 BASICPTR
      tbi_macros.inc:140    *ABS*:000000000000000c DATAPTR
      tbi_macros.inc:141    *ABS*:0000000000000010 DATA
      tbi_macros.inc:142    *ABS*:0000000000000014 DATALEN
      tbi_macros.inc:143    *ABS*:0000000000000018 BASE
      tbi_macros.inc:144    *ABS*:000000000000001c TICKS
      tbi_macros.inc:145    *ABS*:0000000000000020 TIMER
      tbi_macros.inc:146    *ABS*:0000000000000024 SEED
      tbi_macros.inc:147    *ABS*:0000000000000028 FSPTR
      tbi_macros.inc:148    *ABS*:000000000000002c FFREE
      tbi_macros.inc:149    *ABS*:0000000000000030 TXTBGN
      tbi_macros.inc:150    *ABS*:0000000000000034 TXTEND
      tbi_macros.inc:151    *ABS*:0000000000000038 LOOP_DEPTH
      tbi_macros.inc:152    *ABS*:000000000000003c ARRAY_SIZE
      tbi_macros.inc:153    *ABS*:0000000000000040 FLAGS
      tbi_macros.inc:154    *ABS*:0000000000000044 TAB_WIDTH
      tbi_macros.inc:155    *ABS*:0000000000000048 RX_HEAD
      tbi_macros.inc:156    *ABS*:000000000000004c RX_TAIL
      tbi_macros.inc:157    *ABS*:0000000000000050 RX_QUEUE
      tbi_macros.inc:158    *ABS*:0000000000000060 VARS
      tbi_macros.inc:159    *ABS*:0000000000000068 VARS_SIZE
      tbi_macros.inc:160    *ABS*:00000000000000c8 ARRAY_ADR
      tbi_macros.inc:161    *ABS*:00000000000000cc BASIC_START
      tbi_macros.inc:164    *ABS*:0000000000000001 FRUN
      tbi_macros.inc:165    *ABS*:0000000000000002 FTRAP
      tbi_macros.inc:166    *ABS*:0000000000000004 FLOOP
      tbi_macros.inc:167    *ABS*:0000000000000008 FSTOP
      tbi_macros.inc:168    *ABS*:0000000000000010 FBREAK
      tbi_macros.inc:169    *ABS*:0000000000000020 FCOMP
      tbi_macros.inc:170    *ABS*:0000000000000040 FAUTORUN
      tbi_macros.inc:172    *ABS*:0000000008001c00 AUTORUN_NAME
      tbi_macros.inc:174    *ABS*:0000000000000006 FIRST_DATA_ITEM
      tbi_macros.inc:175    *ABS*:0000000000007fff MAX_LINENO
          terminal.s:60     .text:0000000000000000 $t
          terminal.s:60     .text:0000000000000000 get_escape
          terminal.s:102    .text:0000000000000054 convert_table
                            *ABS*:0000000000000084 SUP
          terminal.s:96     *ABS*:0000000000000080 ARROW_LEFT
          terminal.s:97     *ABS*:0000000000000081 ARROW_RIGHT
ARM GAS  terminal.s 			page 35


          terminal.s:98     *ABS*:0000000000000082 HOME
          terminal.s:99     *ABS*:0000000000000083 END
          terminal.s:102    .text:0000000000000054 $d
          terminal.s:116    .text:0000000000000060 uart_puts
          terminal.s:116    .text:0000000000000060 $t
          terminal.s:138    .text:0000000000000080 digit
          terminal.s:167    .text:00000000000000ac itoa
          terminal.s:209    .text:0000000000000130 pad
          terminal.s:209    .text:0000000000000130 $d
          terminal.s:221    .text:0000000000000134 print_int
          terminal.s:221    .text:0000000000000134 $t
          terminal.s:236    .text:000000000000014c print_hex
          terminal.s:257    .text:000000000000018c digit_to_char
          terminal.s:277    .text:00000000000001a0 cursor_shape
          terminal.s:340    .text:0000000000000220 send_escape
          terminal.s:365    .text:0000000000000244 send_parameter
          terminal.s:297    .text:00000000000001dc bksp
          terminal.s:316    .text:0000000000000208 delete_nchar
          terminal.s:393    .text:0000000000000280 move_left
          terminal.s:410    .text:00000000000002a8 move_right
          terminal.s:427    .text:00000000000002d0 spaces
          terminal.s:451    .text:00000000000002f4 insert_char
          terminal.s:491    .text:00000000000002f8 delete_under
          terminal.s:531    .text:00000000000002fc delete_line
          terminal.s:569    .text:0000000000000358 cursor_home
          terminal.s:552    .text:0000000000000334 cursor_x
          terminal.s:582    .text:0000000000000378 delete_right
          terminal.s:600    .text:00000000000003a0 update_line
          terminal.s:637    .text:00000000000003c8 readln
          terminal.s:872    .text:00000000000006b8 get_curpos
          terminal.s:648    .text:00000000000003f8 readln_loop
          terminal.s:824    .text:0000000000000668 readln_exit
          terminal.s:778    .text:00000000000005d0 character
          terminal.s:735    .text:0000000000000536 try_end
          terminal.s:742    .text:000000000000054c try_left
          terminal.s:751    .text:000000000000056a try_right
          terminal.s:760    .text:0000000000000588 try_suprim
          terminal.s:845    .text:0000000000000684 get_param
          terminal.s:899    .text:0000000000000724 tabulation
          terminal.s:918    .text:000000000000076e $d
          terminal.s:918    .text:0000000000000770 $d

UNDEFINED SYMBOLS
uart_getc
uart_putc
_pad
cmove
atoi
search_lineno
decompile_line
strlen
is_digit
uart_flush_queue
modulo
